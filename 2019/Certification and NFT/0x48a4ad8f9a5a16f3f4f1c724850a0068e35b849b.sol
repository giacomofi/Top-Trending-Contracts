['/**\n', ' *Submitted for verification at Etherscan.io on 2019-07-10\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2019-07-10\n', '*/\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * @notice Renouncing to ownership will leave the contract without an owner.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract TeamVesting is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => Holding) public holdings;\n', '\n', '    uint256 constant public MinimumHoldingPeriod = 180 days;\n', '    uint256 constant public Interval = 180 days;\n', '    uint256 constant public MaximumHoldingPeriod = 720 days;\n', '\n', '    uint256 constant public TeamCap = 12200000 ether; // 12.2 million tokens\n', '\n', '    uint256 public totalTeamTokensCommitted;\n', '\n', '    struct Holding {\n', '        uint256 tokensCommitted;\n', '        uint256 tokensRemaining;\n', '        uint256 startTime;\n', '    }\n', '\n', '    event TeamVestingInitialized(address _to, uint256 _tokens, uint256 _startTime);\n', '    event TeamVestingUpdated(address _to, uint256 _totalTokens, uint256 _startTime);\n', '\n', '    function claimTokens(address beneficiary)\n', '        external\n', '        onlyOwner\n', '        returns (uint256 tokensToClaim)\n', '    {\n', '        uint256 tokensRemaining = holdings[beneficiary].tokensRemaining;\n', '        uint256 startTime = holdings[beneficiary].startTime;\n', '        require(tokensRemaining > 0, "All tokens claimed");\n', '\n', '        require(now.sub(startTime) > MinimumHoldingPeriod, "Claiming period not started yet");\n', '\n', '        if (now.sub(startTime) >= MaximumHoldingPeriod) {\n', '\n', '            tokensToClaim = tokensRemaining;\n', '            delete holdings[beneficiary];\n', '\n', '        } else {\n', '\n', '            uint256 percentage = calculatePercentageToRelease(startTime);\n', '\n', '            uint256 tokensNotToClaim = (holdings[beneficiary].tokensCommitted.mul(100 - percentage)).div(100);\n', '\n', '            tokensToClaim = tokensRemaining.sub(tokensNotToClaim);\n', '            tokensRemaining = tokensNotToClaim;\n', '            holdings[beneficiary].tokensRemaining = tokensRemaining;\n', '\n', '        }\n', '    }\n', '\n', '    function calculatePercentageToRelease(uint256 _startTime) internal view returns (uint256 percentage) {\n', '        // how many 180 day periods have passed\n', '        uint periodsPassed = ((now.sub(_startTime)).div(Interval));\n', '        percentage = periodsPassed.mul(25); // 25% to be released every 180 days\n', '    }\n', '\n', '    function initializeVesting(\n', '        address _beneficiary,\n', '        uint256 _tokens,\n', '        uint256 _startTime\n', '    )\n', '        external\n', '        onlyOwner\n', '    {\n', '        totalTeamTokensCommitted = totalTeamTokensCommitted.add(_tokens);\n', '        require(totalTeamTokensCommitted <= TeamCap);\n', '\n', '        if (holdings[_beneficiary].tokensCommitted != 0) {\n', '            holdings[_beneficiary].tokensCommitted = holdings[_beneficiary].tokensCommitted.add(_tokens);\n', '            holdings[_beneficiary].tokensRemaining = holdings[_beneficiary].tokensRemaining.add(_tokens);\n', '\n', '            emit TeamVestingUpdated(\n', '                _beneficiary,\n', '                holdings[_beneficiary].tokensRemaining,\n', '                holdings[_beneficiary].startTime\n', '            );\n', '\n', '        } else {\n', '            holdings[_beneficiary] = Holding(\n', '                _tokens,\n', '                _tokens,\n', '                _startTime\n', '            );\n', '\n', '            emit TeamVestingInitialized(_beneficiary, _tokens, _startTime);\n', '        }\n', '    }\n', '}']