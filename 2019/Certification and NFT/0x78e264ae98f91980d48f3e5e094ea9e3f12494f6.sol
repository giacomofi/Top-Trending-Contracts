['pragma solidity ^0.4.11;\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract StandardCertificate is owned{\n', '    \n', '    string public name;\n', '    string public description;\n', '    string public language;\n', '    string public place;\n', '    uint public hoursCount;\n', '    \n', '    mapping (address => uint) certificates;\n', '    \n', '    function StandardCertificate (string _name, string _description, string _language, string _place, uint _hoursCount) {\n', '        name = _name;\n', '        description = _description;\n', '        language = _language;\n', '        place = _place;\n', '        hoursCount = _hoursCount;\n', '    }\n', '    \n', '    // выдача сертификата\n', '    function issue (address student) onlyOwner {\n', '        certificates[student] = now;\n', '    }\n', '    \n', '    function issued (address student)  constant returns (uint) {\n', '        return certificates[student];\n', '    }\n', '    \n', '    function annul (address student) onlyOwner {\n', '        certificates[student] = 0;\n', '    }\n', '    \n', '}\n', '\n', 'contract EWCertificationCenter is owned {\n', '    \n', '    string public name;\n', '    string public description;\n', '    string public place;\n', '    \n', '    mapping (address => bool) public validCertificators;\n', '    \n', '    mapping (address => bool) public validCourses;\n', '    \n', '    modifier onlyValidCertificator {\n', '        require(validCertificators[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    \n', '    function EWCertificationCenter (string _name, string _description, string _place) {\n', '    \n', '        name = _name;\n', '        description = _description;\n', '        place = _place;\n', '        validCertificators[msg.sender]=true;\n', '        \n', '    }\n', '    \n', '    // add and delete certificator \n', '    function addCertificator(address newCertificator) onlyOwner {\n', '        validCertificators[newCertificator] = true;\n', '    }\n', '    \n', '    function deleteCertificator(address certificator) onlyOwner {\n', '        validCertificators[certificator] = false;\n', '    }\n', '    \n', '    // add and delete cource certificate\n', '    function addCourse(address courseAddess) onlyOwner {\n', '        StandardCertificate s = StandardCertificate(courseAddess);\n', '        validCourses[courseAddess] = true;\n', '    }\n', '\n', '    function deleteCourse(address courseAddess) onlyOwner {\n', '        validCourses[courseAddess] = false;\n', '    }\n', '    \n', '    function issueSertificate(address courseAddess, address student) onlyValidCertificator {\n', '        require (student != 0x0);\n', '        require (validCourses[courseAddess]);\n', '        \n', '        StandardCertificate s = StandardCertificate(courseAddess);\n', '        s.issue(student);\n', '    }\n', '    \n', '    function checkSertificate(address courseAddess, address student) constant returns (uint) {\n', '        require (student != 0x0);\n', '        require (validCourses[courseAddess]);\n', '        \n', '        StandardCertificate s = StandardCertificate(courseAddess);\n', '        return s.issued(student);        \n', '    }\n', '    \n', '    function annulCertificate(address courseAddess, address student) onlyValidCertificator {\n', '        require (student != 0x0);\n', '        require (validCourses[courseAddess]);\n', '\n', '        StandardCertificate s = StandardCertificate(courseAddess);\n', '        s.annul(student);\n', '    }\n', '    \n', '    function changeOwnership(address certificateAddress, address newOwner) onlyOwner {\n', '        StandardCertificate s = StandardCertificate(certificateAddress);\n', '        s.transferOwnership(newOwner);\n', '    }\n', '    \n', '}']