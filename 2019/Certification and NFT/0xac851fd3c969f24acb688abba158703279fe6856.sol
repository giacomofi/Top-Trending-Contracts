['pragma solidity ^0.4.24;\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC721/ERC721Receiver.sol\n', '\n', '/**\n', ' * @title ERC721 token receiver interface\n', ' * @dev Interface for any contract that wants to support safeTransfers\n', ' *  from ERC721 asset contracts.\n', ' */\n', 'contract ERC721Receiver {\n', '  /**\n', '   * @dev Magic value to be returned upon successful reception of an NFT\n', '   *  Equals to `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`,\n', '   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n', '   */\n', '  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\n', '\n', '  /**\n', '   * @notice Handle the receipt of an NFT\n', '   * @dev The ERC721 smart contract calls this function on the recipient\n', '   *  after a `safetransfer`. This function MAY throw to revert and reject the\n', '   *  transfer. This function MUST use 50,000 gas or less. Return of other\n', '   *  than the magic value MUST result in the transaction being reverted.\n', '   *  Note: the contract address is always the message sender.\n', '   * @param _from The sending address\n', '   * @param _tokenId The NFT identifier which is being transfered\n', '   * @param _data Additional data with no specified format\n', '   * @return `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`\n', '   */\n', '  function onERC721Received(address _from, uint256 _tokenId, bytes _data) public returns(bytes4);\n', '}\n', '\n', '// File: contracts/TVLottery.sol\n', '\n', 'contract ITVToken {\n', '    function balanceOf(address _owner) public view returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '    function safeTransfer(address _to, uint256 _value, bytes _data) public;\n', '}\n', '\n', 'contract IArtefact {\n', '    function artefacts(uint id) public returns (uint, uint);\n', '    function ownerOf(uint256 _tokenId) public view returns (address);\n', '}\n', '\n', 'contract ITVKey {\n', '    function transferFrom(address _from, address _to, uint256 _tokenId) public;\n', '    function keys(uint id) public returns (uint, uint);\n', '    function mint(address to, uint chestId) public returns (uint);\n', '    function burn(uint id) public;\n', '}\n', '\n', 'contract TVLottery is Ownable, ERC721Receiver {\n', '    address public manager;\n', '    address public TVTokenAddress;\n', '    address public TVKeyAddress;\n', '\n', '    struct Collection {\n', '        uint id;\n', '        uint[] typeIds;\n', '        address[] tokens;\n', '        uint chestId;\n', '        uint lotteryId;\n', '        bool created;\n', '    }\n', '\n', '    struct Lottery {\n', '        uint id;\n', '        address bank;\n', '        uint[] collections;\n', '        uint bankPercentage;\n', '        bool isActive;\n', '        bool created;\n', '    }\n', '\n', '    struct Chest {\n', '        uint id;\n', '        uint lotteryId;\n', '        uint percentage;\n', '        uint count;\n', '        uint keysCount;\n', '        uint openedCount;\n', '        bool created;\n', '    }\n', '\n', '    mapping(uint => Lottery) public lotteries;\n', '    mapping(uint => Chest) public chests;\n', '    mapping(uint => Collection) public collections;\n', '    mapping(uint => mapping(address => bool)) public usedElements;\n', '\n', '    event KeyReceived(uint keyId, uint lotteryId, uint collectionId, uint chestId, address receiver);\n', '    event ChestOpened(uint keyId, uint lotteryId, uint chestId, uint reward, address receiver);\n', '    event ArtefactUsed(uint id, address token, address sender);\n', '\n', '    modifier onlyOwnerOrManager() {\n', '        require(msg.sender == owner || manager == msg.sender);\n', '        _;\n', '    }\n', '\n', '    constructor(\n', '        address _TVTokenAddress,\n', '        address _TVKeyAddress,\n', '        address _manager\n', '    ) public {\n', '        manager = _manager;\n', '        TVTokenAddress = _TVTokenAddress;\n', '        TVKeyAddress = _TVKeyAddress;\n', '    }\n', '\n', '    function onERC721Received(\n', '        address _from,\n', '        uint256 _tokenId,\n', '        bytes\n', '    ) public returns (bytes4) {\n', '        require(msg.sender == TVKeyAddress);\n', '        (, uint chestId) = ITVKey(TVKeyAddress).keys(_tokenId);\n', '        Chest memory chest = chests[chestId];\n', '        Lottery memory lottery = lotteries[chest.lotteryId];\n', '\n', '        ITVKey(TVKeyAddress).transferFrom(this, lottery.bank, _tokenId);\n', '        lotteries[chest.lotteryId].bankPercentage -= chest.percentage;\n', '        chests[chestId].openedCount = chest.openedCount + 1;\n', '        uint reward = getChestReward(chestId);\n', '        ITVToken(TVTokenAddress).transferFrom(lottery.bank, _from, reward);\n', '        emit ChestOpened(_tokenId, lottery.id, chest.id, reward, _from);\n', '        return ERC721_RECEIVED;\n', '    }\n', '\n', '    function getChestReward(uint chestId) public view returns (uint) {\n', '        Chest memory chest = chests[chestId];\n', '        Lottery memory lottery = lotteries[chest.lotteryId];\n', '        uint bankBalance = ITVToken(TVTokenAddress).balanceOf(lottery.bank);\n', '        uint onePercentage = bankBalance / lottery.bankPercentage;\n', '        return chest.percentage * onePercentage;\n', '    }\n', '\n', '    function getKey(uint lotteryId, uint collectionId, uint[] elementIds) public returns (uint) {\n', '        Lottery memory lottery = lotteries[lotteryId];\n', '        Collection memory collection = collections[collectionId];\n', '        Chest memory chest = chests[collection.chestId];\n', '\n', '        require(collection.lotteryId == lotteryId);\n', '        require(lottery.created && lottery.isActive && collection.created);\n', '        require(chest.keysCount > 0);\n', '\n', '        checkCollection(collection, elementIds);\n', '\n', '        chests[collection.chestId].keysCount = chest.keysCount - 1;\n', '        uint keyId = ITVKey(TVKeyAddress).mint(msg.sender, chest.id);\n', '        emit KeyReceived(keyId, lotteryId, collectionId, chest.id, msg.sender);\n', '\n', '        return keyId;\n', '    }\n', '\n', '    function checkCollection(Collection collection, uint[] elementsIds) internal {\n', '        require(elementsIds.length == collection.typeIds.length);\n', '        for (uint i = 0; i < elementsIds.length; i++) {\n', '            (uint id, uint typeId) = IArtefact(collection.tokens[i]).artefacts(elementsIds[i]);\n', '            require(typeId == collection.typeIds[i]);\n', '            require(!usedElements[id][collection.tokens[i]]);\n', '            require(IArtefact(collection.tokens[i]).ownerOf(id) == msg.sender);\n', '            usedElements[id][collection.tokens[i]] = true;\n', '            emit ArtefactUsed(id, collection.tokens[i], msg.sender);\n', '        }\n', '    }\n', '\n', '    function setCollection(\n', '        uint id,\n', '        uint[] typeIds,\n', '        address[] tokens,\n', '        uint chestId,\n', '        uint lotteryId,\n', '        bool created\n', '    ) public onlyOwnerOrManager {\n', '        require(typeIds.length == tokens.length);\n', '        collections[id] = Collection(id, typeIds, tokens, chestId, lotteryId, created);\n', '    }\n', '\n', '    function getCollectionElementsCount(uint id) public view returns(uint) {\n', '        return collections[id].typeIds.length;\n', '    }\n', '\n', '    function getCollectionElementByIndex(uint id, uint index) public view returns(uint, address) {\n', '        return (collections[id].typeIds[index], collections[id].tokens[index]);\n', '    }\n', '\n', '    function setChest(\n', '        uint lotteryId,\n', '        uint id,\n', '        uint percentage,\n', '        uint count,\n', '        uint keysCount,\n', '        uint openedCount,\n', '        bool created\n', '    ) public onlyOwnerOrManager {\n', '        chests[id] = Chest(id, lotteryId, percentage, count, keysCount, openedCount, created);\n', '    }\n', '\n', '    function setLottery(\n', '        uint id,\n', '        address bank,\n', '        uint[] _collections,\n', '        uint bankPercentage,\n', '        bool isActive,\n', '        bool created\n', '    ) public onlyOwnerOrManager {\n', '        lotteries[id] = Lottery(id, bank, _collections, bankPercentage, isActive, created);\n', '    }\n', '\n', '    function getLotteryCollectionCount(uint id) public view returns(uint) {\n', '        return lotteries[id].collections.length;\n', '    }\n', '\n', '    function getLotteryCollectionByIndex(uint id, uint index) public view returns(uint) {\n', '        return lotteries[id].collections[index];\n', '    }\n', '\n', '    function changeLotteryBank(uint lotteryId, address bank, uint bankPercentage) public onlyOwnerOrManager {\n', '        lotteries[lotteryId].bank = bank;\n', '        lotteries[lotteryId].bankPercentage = bankPercentage;\n', '    }\n', '\n', '    function updateCollections(uint lotteryId, uint[] _collections) public onlyOwnerOrManager {\n', '        lotteries[lotteryId].collections = _collections;\n', '    }\n', '\n', '    function setLotteryActive(uint id, bool isActive) public onlyOwnerOrManager {\n', '        lotteries[id].isActive = isActive;\n', '    }\n', '\n', '    function changeTVTokenAddress(address newAddress) public onlyOwnerOrManager {\n', '        TVTokenAddress = newAddress;\n', '    }\n', '\n', '    function changeTVKeyAddress(address newAddress) public onlyOwnerOrManager {\n', '        TVKeyAddress = newAddress;\n', '    }\n', '\n', '    function setManager(address _manager) public onlyOwner {\n', '        manager = _manager;\n', '    }\n', '}']