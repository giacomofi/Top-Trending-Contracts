['pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address who) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * @notice Renouncing to ownership will leave the contract without an owner.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '    * @dev Multiplies two unsigned integers, reverts on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two unsigned integers, reverts on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// This interface allows derivative contracts to pay Oracle fees for their use of the system.\n', 'interface StoreInterface {\n', '\n', '    // Pays Oracle fees in ETH to the store. To be used by contracts whose margin currency is ETH.\n', '    function payOracleFees() external payable;\n', '\n', '    // Pays Oracle fees in the margin currency, erc20Address, to the store. To be used if the margin currency is an\n', '    // ERC20 token rather than ETH. All approved tokens are transfered.\n', '    function payOracleFeesErc20(address erc20Address) external; \n', '\n', '    // Computes the Oracle fees that a contract should pay for a period. `pfc` is the "profit from corruption", or the\n', '    // maximum amount of margin currency that a token sponsor could extract from the contract through corrupting the\n', '    // price feed in their favor.\n', '    function computeOracleFees(uint startTime, uint endTime, uint pfc) external view returns (uint feeAmount);\n', '}\n', '\n', 'contract Withdrawable is Ownable {\n', '    // Withdraws ETH from the contract.\n', '    function withdraw(uint amount) external onlyOwner {\n', '        msg.sender.transfer(amount);\n', '    }\n', '\n', '    // Withdraws ERC20 tokens from the contract.\n', '    function withdrawErc20(address erc20Address, uint amount) external onlyOwner {\n', '        IERC20 erc20 = IERC20(erc20Address);\n', '        require(erc20.transfer(msg.sender, amount));\n', '    }\n', '}\n', '\n', '// An implementation of StoreInterface that can accept Oracle fees in ETH or any arbitrary ERC20 token.\n', 'contract CentralizedStore is StoreInterface, Withdrawable {\n', '\n', '    using SafeMath for uint;\n', '\n', '    uint private fixedOracleFeePerSecond; // Percentage of 10^18. E.g., 1e18 is 100% Oracle fee.\n', '    uint private constant FP_SCALING_FACTOR = 10**18;\n', '\n', '    function payOracleFees() external payable {\n', '        require(msg.value > 0);\n', '    }\n', '\n', '    function payOracleFeesErc20(address erc20Address) external {\n', '        IERC20 erc20 = IERC20(erc20Address);\n', '        uint authorizedAmount = erc20.allowance(msg.sender, address(this));\n', '        require(authorizedAmount > 0);\n', '        require(erc20.transferFrom(msg.sender, address(this), authorizedAmount));\n', '    }\n', '\n', '    // Sets a new Oracle fee per second.\n', '    function setFixedOracleFeePerSecond(uint newOracleFee) external onlyOwner {\n', "        // Oracle fees at or over 100% don't make sense.\n", '        require(newOracleFee < FP_SCALING_FACTOR);\n', '        fixedOracleFeePerSecond = newOracleFee;\n', '        emit SetFixedOracleFeePerSecond(newOracleFee);\n', '    }\n', '\n', '    function computeOracleFees(uint startTime, uint endTime, uint pfc) external view returns (uint oracleFeeAmount) {\n', '        uint timeRange = endTime.sub(startTime);\n', '\n', '        // The oracle fees before being divided by the FP_SCALING_FACTOR.\n', '        uint oracleFeesPreDivision = pfc.mul(fixedOracleFeePerSecond).mul(timeRange);\n', '        oracleFeeAmount = oracleFeesPreDivision.div(FP_SCALING_FACTOR);\n', '\n', '        // If there is any remainder, add 1. This causes the division to ceil rather than floor the result.\n', '        if (oracleFeesPreDivision.mod(FP_SCALING_FACTOR) != 0) {\n', '            oracleFeeAmount = oracleFeeAmount.add(1);\n', '        }\n', '    }\n', '\n', '    event SetFixedOracleFeePerSecond(uint newOracleFee);\n', '}']