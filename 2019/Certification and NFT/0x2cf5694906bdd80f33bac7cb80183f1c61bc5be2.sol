['pragma solidity ^0.4.24;\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() public onlyOwner whenNotPaused {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() public onlyOwner whenPaused {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/lifecycle/Destructible.sol\n', '\n', '/**\n', ' * @title Destructible\n', ' * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\n', ' */\n', 'contract Destructible is Ownable {\n', '  /**\n', '   * @dev Transfers the current balance to the owner and terminates the contract.\n', '   */\n', '  function destroy() public onlyOwner {\n', '    selfdestruct(owner);\n', '  }\n', '\n', '  function destroyAndSend(address _recipient) public onlyOwner {\n', '    selfdestruct(_recipient);\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Contactable.sol\n', '\n', '/**\n', ' * @title Contactable token\n', ' * @dev Basic version of a contactable contract, allowing the owner to provide a string with their\n', ' * contact information.\n', ' */\n', 'contract Contactable is Ownable {\n', '\n', '  string public contactInformation;\n', '\n', '  /**\n', '    * @dev Allows the owner to set a string with their contact information.\n', '    * @param _info The contact information to attach to the contract.\n', '    */\n', '  function setContactInformation(string _info) public onlyOwner {\n', '    contactInformation = _info;\n', '  }\n', '}\n', '\n', '// File: monetha-utility-contracts/contracts/Restricted.sol\n', '\n', '/** @title Restricted\n', ' *  Exposes onlyMonetha modifier\n', ' */\n', 'contract Restricted is Ownable {\n', '\n', '    //MonethaAddress set event\n', '    event MonethaAddressSet(\n', '        address _address,\n', '        bool _isMonethaAddress\n', '    );\n', '\n', '    mapping (address => bool) public isMonethaAddress;\n', '\n', '    /**\n', '     *  Restrict methods in such way, that they can be invoked only by monethaAddress account.\n', '     */\n', '    modifier onlyMonetha() {\n', '        require(isMonethaAddress[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     *  Allows owner to set new monetha address\n', '     */\n', '    function setMonethaAddress(address _address, bool _isMonethaAddress) onlyOwner public {\n', '        isMonethaAddress[_address] = _isMonethaAddress;\n', '\n', '        emit MonethaAddressSet(_address, _isMonethaAddress);\n', '    }\n', '}\n', '\n', '// File: monetha-loyalty-contracts/contracts/IMonethaVoucher.sol\n', '\n', 'interface IMonethaVoucher {\n', '    /**\n', '    * @dev Total number of vouchers in shared pool\n', '    */\n', '    function totalInSharedPool() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Converts vouchers to equivalent amount of wei.\n', '     * @param _value amount of vouchers (vouchers) to convert to amount of wei\n', '     * @return A uint256 specifying the amount of wei.\n', '     */\n', '    function toWei(uint256 _value) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Converts amount of wei to equivalent amount of vouchers.\n', '     * @param _value amount of wei to convert to vouchers (vouchers)\n', '     * @return A uint256 specifying the amount of vouchers.\n', '     */\n', '    function fromWei(uint256 _value) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Applies discount for address by returning vouchers to shared pool and transferring funds (in wei). May be called only by Monetha.\n', '     * @param _for address to apply discount for\n', '     * @param _vouchers amount of vouchers to return to shared pool\n', '     * @return Actual number of vouchers returned to shared pool and amount of funds (in wei) transferred.\n', '     */\n', '    function applyDiscount(address _for, uint256 _vouchers) external returns (uint256 amountVouchers, uint256 amountWei);\n', '\n', '    /**\n', '     * @dev Applies payback by transferring vouchers from the shared pool to the user.\n', '     * The amount of transferred vouchers is equivalent to the amount of Ether in the `_amountWei` parameter.\n', '     * @param _for address to apply payback for\n', '     * @param _amountWei amount of Ether to estimate the amount of vouchers\n', '     * @return The number of vouchers added\n', '     */\n', '    function applyPayback(address _for, uint256 _amountWei) external returns (uint256 amountVouchers);\n', '\n', '    /**\n', '     * @dev Function to buy vouchers by transferring equivalent amount in Ether to contract. May be called only by Monetha.\n', '     * After the vouchers are purchased, they can be sold or released to another user. Purchased vouchers are stored in\n', '     * a separate pool and may not be expired.\n', '     * @param _vouchers The amount of vouchers to buy. The caller must also transfer an equivalent amount of Ether.\n', '     */\n', '    function buyVouchers(uint256 _vouchers) external payable;\n', '\n', '    /**\n', '     * @dev The function allows Monetha account to sell previously purchased vouchers and get Ether from the sale.\n', '     * The equivalent amount of Ether will be transferred to the caller. May be called only by Monetha.\n', '     * @param _vouchers The amount of vouchers to sell.\n', '     * @return A uint256 specifying the amount of Ether (in wei) transferred to the caller.\n', '     */\n', '    function sellVouchers(uint256 _vouchers) external returns(uint256 weis);\n', '\n', '    /**\n', '     * @dev Function allows Monetha account to release the purchased vouchers to any address.\n', '     * The released voucher acquires an expiration property and should be used in Monetha ecosystem within 6 months, otherwise\n', '     * it will be returned to shared pool. May be called only by Monetha.\n', '     * @param _to address to release vouchers to.\n', '     * @param _value the amount of vouchers to release.\n', '     */\n', '    function releasePurchasedTo(address _to, uint256 _value) external returns (bool);\n', '\n', '    /**\n', '     * @dev Function to check the amount of vouchers that an owner (Monetha account) allowed to sell or release to some user.\n', '     * @param owner The address which owns the funds.\n', '     * @return A uint256 specifying the amount of vouchers still available for the owner.\n', '     */\n', '    function purchasedBy(address owner) external view returns (uint256);\n', '}\n', '\n', '// File: contracts/GenericERC20.sol\n', '\n', '/**\n', '* @title GenericERC20 interface\n', '*/\n', 'contract GenericERC20 {\n', '    function totalSupply() public view returns (uint256);\n', '\n', '    function decimals() public view returns(uint256);\n', '\n', '    function balanceOf(address _who) public view returns (uint256);\n', '\n', '    function allowance(address _owner, address _spender)\n', '        public view returns (uint256);\n', '        \n', '    // Return type not defined intentionally since not all ERC20 tokens return proper result type\n', '    function transfer(address _to, uint256 _value) public;\n', '\n', '    function approve(address _spender, uint256 _value)\n', '        public returns (bool);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '        public returns (bool);\n', '\n', '    event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 value\n', '    );\n', '\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '// File: contracts/MonethaGateway.sol\n', '\n', '/**\n', ' *  @title MonethaGateway\n', ' *\n', " *  MonethaGateway forward funds from order payment to merchant's wallet and collects Monetha fee.\n", ' */\n', 'contract MonethaGateway is Pausable, Contactable, Destructible, Restricted {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    string constant VERSION = "0.6";\n', '\n', '    /**\n', '     *  Fee permille of Monetha fee.\n', '     *  1 permille (‰) = 0.1 percent (%)\n', '     *  15‰ = 1.5%\n', '     */\n', '    uint public constant FEE_PERMILLE = 15;\n', '\n', '\n', '    uint public constant PERMILLE_COEFFICIENT = 1000;\n', '\n', '    /**\n', '     *  Address of Monetha Vault for fee collection\n', '     */\n', '    address public monethaVault;\n', '\n', '    /**\n', '     *  Account for permissions managing\n', '     */\n', '    address public admin;\n', '\n', '    /**\n', '     * Monetha voucher contract\n', '     */\n', '    IMonethaVoucher public monethaVoucher;\n', '\n', '    /**\n', '     *  Max. discount permille.\n', '     *  10 permille = 1 %\n', '     */\n', '    uint public MaxDiscountPermille;\n', '\n', '    event PaymentProcessedEther(address merchantWallet, uint merchantIncome, uint monethaIncome);\n', '    event PaymentProcessedToken(address tokenAddress, address merchantWallet, uint merchantIncome, uint monethaIncome);\n', '    event MonethaVoucherChanged(\n', '        address indexed previousMonethaVoucher,\n', '        address indexed newMonethaVoucher\n', '    );\n', '    event MaxDiscountPermilleChanged(uint prevPermilleValue, uint newPermilleValue);\n', '\n', '    /**\n', '     *  @param _monethaVault Address of Monetha Vault\n', '     */\n', '    constructor(address _monethaVault, address _admin, IMonethaVoucher _monethaVoucher) public {\n', '        require(_monethaVault != 0x0);\n', '        monethaVault = _monethaVault;\n', '\n', '        setAdmin(_admin);\n', '        setMonethaVoucher(_monethaVoucher);\n', '        setMaxDiscountPermille(700); // 70%\n', '    }\n', '\n', '    /**\n', "     *  acceptPayment accept payment from PaymentAcceptor, forwards it to merchant's wallet\n", '     *      and collects Monetha fee.\n', "     *  @param _merchantWallet address of merchant's wallet for fund transfer\n", '     *  @param _monethaFee is a fee collected by Monetha\n', '     */\n', '    /**\n', "     *  acceptPayment accept payment from PaymentAcceptor, forwards it to merchant's wallet\n", '     *      and collects Monetha fee.\n', "     *  @param _merchantWallet address of merchant's wallet for fund transfer\n", '     *  @param _monethaFee is a fee collected by Monetha\n', '     */\n', '    function acceptPayment(address _merchantWallet,\n', '        uint _monethaFee,\n', '        address _customerAddress,\n', '        uint _vouchersApply,\n', '        uint _paybackPermille)\n', '    external payable onlyMonetha whenNotPaused returns (uint discountWei){\n', '        require(_merchantWallet != 0x0);\n', '        uint price = msg.value;\n', '        // Monetha fee cannot be greater than 1.5% of payment\n', '        require(_monethaFee >= 0 && _monethaFee <= FEE_PERMILLE.mul(price).div(1000));\n', '\n', '        discountWei = 0;\n', '        if (monethaVoucher != address(0)) {\n', '            if (_vouchersApply > 0 && MaxDiscountPermille > 0) {\n', '                uint maxDiscountWei = price.mul(MaxDiscountPermille).div(PERMILLE_COEFFICIENT);\n', '                uint maxVouchers = monethaVoucher.fromWei(maxDiscountWei);\n', '                // limit vouchers to apply\n', '                uint vouchersApply = _vouchersApply;\n', '                if (vouchersApply > maxVouchers) {\n', '                    vouchersApply = maxVouchers;\n', '                }\n', '\n', '                (, discountWei) = monethaVoucher.applyDiscount(_customerAddress, vouchersApply);\n', '            }\n', '\n', '            if (_paybackPermille > 0) {\n', '                uint paybackWei = price.sub(discountWei).mul(_paybackPermille).div(PERMILLE_COEFFICIENT);\n', '                if (paybackWei > 0) {\n', '                    monethaVoucher.applyPayback(_customerAddress, paybackWei);\n', '                }\n', '            }\n', '        }\n', '\n', '        uint merchantIncome = price.sub(_monethaFee);\n', '\n', '        _merchantWallet.transfer(merchantIncome);\n', '        monethaVault.transfer(_monethaFee);\n', '\n', '        emit PaymentProcessedEther(_merchantWallet, merchantIncome, _monethaFee);\n', '    }\n', '\n', '    /**\n', "     *  acceptTokenPayment accept token payment from PaymentAcceptor, forwards it to merchant's wallet\n", '     *      and collects Monetha fee.\n', "     *  @param _merchantWallet address of merchant's wallet for fund transfer\n", '     *  @param _monethaFee is a fee collected by Monetha\n', '     *  @param _tokenAddress is the token address\n', '     *  @param _value is the order value\n', '     */\n', '    function acceptTokenPayment(\n', '        address _merchantWallet,\n', '        uint _monethaFee,\n', '        address _tokenAddress,\n', '        uint _value\n', '    )\n', '    external onlyMonetha whenNotPaused\n', '    {\n', '        require(_merchantWallet != 0x0);\n', '\n', '        // Monetha fee cannot be greater than 1.5% of payment\n', '        require(_monethaFee >= 0 && _monethaFee <= FEE_PERMILLE.mul(_value).div(1000));\n', '\n', '        uint merchantIncome = _value.sub(_monethaFee);\n', '\n', '        GenericERC20(_tokenAddress).transfer(_merchantWallet, merchantIncome);\n', '        GenericERC20(_tokenAddress).transfer(monethaVault, _monethaFee);\n', '\n', '        emit PaymentProcessedToken(_tokenAddress, _merchantWallet, merchantIncome, _monethaFee);\n', '    }\n', '\n', '    /**\n', '     *  changeMonethaVault allows owner to change address of Monetha Vault.\n', '     *  @param newVault New address of Monetha Vault\n', '     */\n', '    function changeMonethaVault(address newVault) external onlyOwner whenNotPaused {\n', '        monethaVault = newVault;\n', '    }\n', '\n', '    /**\n', '     *  Allows other monetha account or contract to set new monetha address\n', '     */\n', '    function setMonethaAddress(address _address, bool _isMonethaAddress) public {\n', '        require(msg.sender == admin || msg.sender == owner);\n', '\n', '        isMonethaAddress[_address] = _isMonethaAddress;\n', '\n', '        emit MonethaAddressSet(_address, _isMonethaAddress);\n', '    }\n', '\n', '    /**\n', '     *  setAdmin allows owner to change address of admin.\n', '     *  @param _admin New address of admin\n', '     */\n', '    function setAdmin(address _admin) public onlyOwner {\n', '        require(_admin != address(0));\n', '        admin = _admin;\n', '    }\n', '\n', '    /**\n', '     *  setAdmin allows owner to change address of Monetha voucher contract. If set to 0x0 address, discounts and paybacks are disabled.\n', '     *  @param _monethaVoucher New address of Monetha voucher contract\n', '     */\n', '    function setMonethaVoucher(IMonethaVoucher _monethaVoucher) public onlyOwner {\n', '        if (monethaVoucher != _monethaVoucher) {\n', '            emit MonethaVoucherChanged(monethaVoucher, _monethaVoucher);\n', '            monethaVoucher = _monethaVoucher;\n', '        }\n', '    }\n', '\n', '    /**\n', '     *  setMaxDiscountPermille allows Monetha to change max.discount percentage\n', '     *  @param _maxDiscountPermille New value of max.discount (in permille)\n', '     */\n', '    function setMaxDiscountPermille(uint _maxDiscountPermille) public onlyOwner {\n', '        require(_maxDiscountPermille <= PERMILLE_COEFFICIENT);\n', '        emit MaxDiscountPermilleChanged(MaxDiscountPermille, _maxDiscountPermille);\n', '        MaxDiscountPermille = _maxDiscountPermille;\n', '    }\n', '}\n', '\n', '// File: contracts/MerchantDealsHistory.sol\n', '\n', '/**\n', ' *  @title MerchantDealsHistory\n', ' *  Contract stores hash of Deals conditions together with parties reputation for each deal\n', ' *  This history enables to see evolution of trust rating for both parties\n', ' */\n', 'contract MerchantDealsHistory is Contactable, Restricted {\n', '\n', '    string constant VERSION = "0.3";\n', '\n', '    ///  Merchant identifier hash\n', '    bytes32 public merchantIdHash;\n', '    \n', '    //Deal event\n', '    event DealCompleted(\n', '        uint orderId,\n', '        address clientAddress,\n', '        uint32 clientReputation,\n', '        uint32 merchantReputation,\n', '        bool successful,\n', '        uint dealHash\n', '    );\n', '\n', '    //Deal cancellation event\n', '    event DealCancelationReason(\n', '        uint orderId,\n', '        address clientAddress,\n', '        uint32 clientReputation,\n', '        uint32 merchantReputation,\n', '        uint dealHash,\n', '        string cancelReason\n', '    );\n', '\n', '    //Deal refund event\n', '    event DealRefundReason(\n', '        uint orderId,\n', '        address clientAddress,\n', '        uint32 clientReputation,\n', '        uint32 merchantReputation,\n', '        uint dealHash,\n', '        string refundReason\n', '    );\n', '\n', '    /**\n', '     *  @param _merchantId Merchant of the acceptor\n', '     */\n', '    constructor(string _merchantId) public {\n', '        require(bytes(_merchantId).length > 0);\n', '        merchantIdHash = keccak256(abi.encodePacked(_merchantId));\n', '    }\n', '\n', '    /**\n', '     *  recordDeal creates an event of completed deal\n', "     *  @param _orderId Identifier of deal's order\n", "     *  @param _clientAddress Address of client's account\n", '     *  @param _clientReputation Updated reputation of the client\n', '     *  @param _merchantReputation Updated reputation of the merchant\n', '     *  @param _isSuccess Identifies whether deal was successful or not\n', '     *  @param _dealHash Hashcode of the deal, describing the order (used for deal verification)\n', '     */\n', '    function recordDeal(\n', '        uint _orderId,\n', '        address _clientAddress,\n', '        uint32 _clientReputation,\n', '        uint32 _merchantReputation,\n', '        bool _isSuccess,\n', '        uint _dealHash)\n', '        external onlyMonetha\n', '    {\n', '        emit DealCompleted(\n', '            _orderId,\n', '            _clientAddress,\n', '            _clientReputation,\n', '            _merchantReputation,\n', '            _isSuccess,\n', '            _dealHash\n', '        );\n', '    }\n', '\n', '    /**\n', '     *  recordDealCancelReason creates an event of not paid deal that was cancelled \n', "     *  @param _orderId Identifier of deal's order\n", "     *  @param _clientAddress Address of client's account\n", '     *  @param _clientReputation Updated reputation of the client\n', '     *  @param _merchantReputation Updated reputation of the merchant\n', '     *  @param _dealHash Hashcode of the deal, describing the order (used for deal verification)\n', '     *  @param _cancelReason deal cancelation reason (text)\n', '     */\n', '    function recordDealCancelReason(\n', '        uint _orderId,\n', '        address _clientAddress,\n', '        uint32 _clientReputation,\n', '        uint32 _merchantReputation,\n', '        uint _dealHash,\n', '        string _cancelReason)\n', '        external onlyMonetha\n', '    {\n', '        emit DealCancelationReason(\n', '            _orderId,\n', '            _clientAddress,\n', '            _clientReputation,\n', '            _merchantReputation,\n', '            _dealHash,\n', '            _cancelReason\n', '        );\n', '    }\n', '\n', '/**\n', '     *  recordDealRefundReason creates an event of not paid deal that was cancelled \n', "     *  @param _orderId Identifier of deal's order\n", "     *  @param _clientAddress Address of client's account\n", '     *  @param _clientReputation Updated reputation of the client\n', '     *  @param _merchantReputation Updated reputation of the merchant\n', '     *  @param _dealHash Hashcode of the deal, describing the order (used for deal verification)\n', '     *  @param _refundReason deal refund reason (text)\n', '     */\n', '    function recordDealRefundReason(\n', '        uint _orderId,\n', '        address _clientAddress,\n', '        uint32 _clientReputation,\n', '        uint32 _merchantReputation,\n', '        uint _dealHash,\n', '        string _refundReason)\n', '        external onlyMonetha\n', '    {\n', '        emit DealRefundReason(\n', '            _orderId,\n', '            _clientAddress,\n', '            _clientReputation,\n', '            _merchantReputation,\n', '            _dealHash,\n', '            _refundReason\n', '        );\n', '    }\n', '}\n', '\n', '// File: monetha-utility-contracts/contracts/SafeDestructible.sol\n', '\n', '/**\n', ' * @title SafeDestructible\n', ' * Base contract that can be destroyed by owner.\n', ' * Can be destructed if there are no funds on contract balance.\n', ' */\n', 'contract SafeDestructible is Ownable {\n', '    function destroy() onlyOwner public {\n', '        require(address(this).balance == 0);\n', '        selfdestruct(owner);\n', '    }\n', '}\n', '\n', '// File: contracts/MerchantWallet.sol\n', '\n', '/**\n', ' *  @title MerchantWallet\n', ' *  Serves as a public Merchant profile with merchant profile info,\n', ' *      payment settings and latest reputation value.\n', ' *  Also MerchantWallet accepts payments for orders.\n', ' */\n', '\n', 'contract MerchantWallet is Pausable, SafeDestructible, Contactable, Restricted {\n', '\n', '    string constant VERSION = "0.5";\n', '\n', "    /// Address of merchant's account, that can withdraw from wallet\n", '    address public merchantAccount;\n', '\n', "    /// Address of merchant's fund address.\n", '    address public merchantFundAddress;\n', '\n', '    /// Unique Merchant identifier hash\n', '    bytes32 public merchantIdHash;\n', '\n', '    /// profileMap stores general information about the merchant\n', '    mapping (string=>string) profileMap;\n', '\n', '    /// paymentSettingsMap stores payment and order settings for the merchant\n', '    mapping (string=>string) paymentSettingsMap;\n', '\n', '    /// compositeReputationMap stores composite reputation, that compraises from several metrics\n', '    mapping (string=>uint32) compositeReputationMap;\n', '\n', '    /// number of last digits in compositeReputation for fractional part\n', '    uint8 public constant REPUTATION_DECIMALS = 4;\n', '\n', '    /**\n', '     *  Restrict methods in such way, that they can be invoked only by merchant account.\n', '     */\n', '    modifier onlyMerchant() {\n', '        require(msg.sender == merchantAccount);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     *  Fund Address should always be Externally Owned Account and not a contract.\n', '     */\n', '    modifier isEOA(address _fundAddress) {\n', '        uint256 _codeLength;\n', '        assembly {_codeLength := extcodesize(_fundAddress)}\n', '        require(_codeLength == 0, "sorry humans only");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     *  Restrict methods in such way, that they can be invoked only by merchant account or by monethaAddress account.\n', '     */\n', '    modifier onlyMerchantOrMonetha() {\n', '        require(msg.sender == merchantAccount || isMonethaAddress[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /**\n', "     *  @param _merchantAccount Address of merchant's account, that can withdraw from wallet\n", '     *  @param _merchantId Merchant identifier\n', "     *  @param _fundAddress Merchant's fund address, where amount will be transferred.\n", '     */\n', '    constructor(address _merchantAccount, string _merchantId, address _fundAddress) public isEOA(_fundAddress) {\n', '        require(_merchantAccount != 0x0);\n', '        require(bytes(_merchantId).length > 0);\n', '\n', '        merchantAccount = _merchantAccount;\n', '        merchantIdHash = keccak256(abi.encodePacked(_merchantId));\n', '\n', '        merchantFundAddress = _fundAddress;\n', '    }\n', '\n', '    /**\n', '     *  Accept payment from MonethaGateway\n', '     */\n', '    function () external payable {\n', '    }\n', '\n', '    /**\n', '     *  @return profile info by string key\n', '     */\n', '    function profile(string key) external constant returns (string) {\n', '        return profileMap[key];\n', '    }\n', '\n', '    /**\n', '     *  @return payment setting by string key\n', '     */\n', '    function paymentSettings(string key) external constant returns (string) {\n', '        return paymentSettingsMap[key];\n', '    }\n', '\n', '    /**\n', '     *  @return composite reputation value by string key\n', '     */\n', '    function compositeReputation(string key) external constant returns (uint32) {\n', '        return compositeReputationMap[key];\n', '    }\n', '\n', '    /**\n', '     *  Set profile info by string key\n', '     */\n', '    function setProfile(\n', '        string profileKey,\n', '        string profileValue,\n', '        string repKey,\n', '        uint32 repValue\n', '    )\n', '        external onlyOwner\n', '    {\n', '        profileMap[profileKey] = profileValue;\n', '\n', '        if (bytes(repKey).length != 0) {\n', '            compositeReputationMap[repKey] = repValue;\n', '        }\n', '    }\n', '\n', '    /**\n', '     *  Set payment setting by string key\n', '     */\n', '    function setPaymentSettings(string key, string value) external onlyOwner {\n', '        paymentSettingsMap[key] = value;\n', '    }\n', '\n', '    /**\n', '     *  Set composite reputation value by string key\n', '     */\n', '    function setCompositeReputation(string key, uint32 value) external onlyMonetha {\n', '        compositeReputationMap[key] = value;\n', '    }\n', '\n', '    /**\n', '     *  Allows withdrawal of funds to beneficiary address\n', '     */\n', '    function doWithdrawal(address beneficiary, uint amount) private {\n', '        require(beneficiary != 0x0);\n', '        beneficiary.transfer(amount);\n', '    }\n', '\n', '    /**\n', '     *  Allows merchant to withdraw funds to beneficiary address\n', '     */\n', '    function withdrawTo(address beneficiary, uint amount) public onlyMerchant whenNotPaused {\n', '        doWithdrawal(beneficiary, amount);\n', '    }\n', '\n', '    /**\n', "     *  Allows merchant to withdraw funds to it's own account\n", '     */\n', '    function withdraw(uint amount) external onlyMerchant {\n', '        withdrawTo(msg.sender, amount);\n', '    }\n', '\n', '    /**\n', '     *  Allows merchant or Monetha to initiate exchange of funds by withdrawing funds to deposit address of the exchange\n', '     */\n', '    function withdrawToExchange(address depositAccount, uint amount) external onlyMerchantOrMonetha whenNotPaused {\n', '        doWithdrawal(depositAccount, amount);\n', '    }\n', '\n', '    /**\n', '     *  Allows merchant or Monetha to initiate exchange of funds by withdrawing all funds to deposit address of the exchange\n', '     */\n', '    function withdrawAllToExchange(address depositAccount, uint min_amount) external onlyMerchantOrMonetha whenNotPaused {\n', '        require (address(this).balance >= min_amount);\n', '        doWithdrawal(depositAccount, address(this).balance);\n', '    }\n', '\n', '    /**\n', '     *  Allows merchant or Monetha to initiate exchange of tokens by withdrawing all tokens to deposit address of the exchange\n', '     */\n', '    function withdrawAllTokensToExchange(address _tokenAddress, address _depositAccount, uint _minAmount) external onlyMerchantOrMonetha whenNotPaused {\n', '        require(_tokenAddress != address(0));\n', '        \n', '        uint balance = GenericERC20(_tokenAddress).balanceOf(address(this));\n', '        \n', '        require(balance >= _minAmount);\n', '        \n', '        GenericERC20(_tokenAddress).transfer(_depositAccount, balance);\n', '    }\n', '\n', '    /**\n', "     *  Allows merchant to change it's account address\n", '     */\n', '    function changeMerchantAccount(address newAccount) external onlyMerchant whenNotPaused {\n', '        merchantAccount = newAccount;\n', '    }\n', '\n', '    /**\n', "     *  Allows merchant to change it's fund address.\n", '     */\n', '    function changeFundAddress(address newFundAddress) external onlyMerchant isEOA(newFundAddress) {\n', '        merchantFundAddress = newFundAddress;\n', '    }\n', '}\n', '\n', '// File: contracts/PaymentProcessor.sol\n', '\n', '/**\n', ' *  @title PaymentProcessor\n', ' *  Each Merchant has one PaymentProcessor that ensure payment and order processing with Trust and Reputation\n', ' *\n', ' *  Payment Processor State Transitions:\n', ' *  Null -(addOrder) -> Created\n', ' *  Created -(securePay) -> Paid\n', ' *  Created -(cancelOrder) -> Cancelled\n', ' *  Paid -(refundPayment) -> Refunding\n', ' *  Paid -(processPayment) -> Finalized\n', ' *  Refunding -(withdrawRefund) -> Refunded\n', ' */\n', '\n', '\n', 'contract PaymentProcessor is Pausable, Destructible, Contactable, Restricted {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    string constant VERSION = "0.7";\n', '\n', '    /**\n', '     *  Fee permille of Monetha fee.\n', '     *  1 permille = 0.1 %\n', '     *  15 permille = 1.5%\n', '     */\n', '    uint public constant FEE_PERMILLE = 15;\n', '\n', '    /**\n', '     *  Payback permille.\n', '     *  1 permille = 0.1 %\n', '     */\n', '    uint public constant PAYBACK_PERMILLE = 2; // 0.2%\n', '\n', '    uint public constant PERMILLE_COEFFICIENT = 1000;\n', '\n', '    /// MonethaGateway contract for payment processing\n', '    MonethaGateway public monethaGateway;\n', '\n', "    /// MerchantDealsHistory contract of acceptor's merchant\n", '    MerchantDealsHistory public merchantHistory;\n', '\n', '    /// Address of MerchantWallet, where merchant reputation and funds are stored\n', '    MerchantWallet public merchantWallet;\n', '\n', '    /// Merchant identifier hash, that associates with the acceptor\n', '    bytes32 public merchantIdHash;\n', '\n', '    enum State {Null, Created, Paid, Finalized, Refunding, Refunded, Cancelled}\n', '\n', '    struct Order {\n', '        State state;\n', '        uint price;\n', '        uint fee;\n', '        address paymentAcceptor;\n', '        address originAddress;\n', '        address tokenAddress;\n', '        uint vouchersApply;\n', '        uint discount;\n', '    }\n', '\n', '    mapping(uint => Order) public orders;\n', '\n', '    /**\n', '     *  Asserts current state.\n', '     *  @param _state Expected state\n', '     *  @param _orderId Order Id\n', '     */\n', '    modifier atState(uint _orderId, State _state) {\n', '        require(_state == orders[_orderId].state);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     *  Performs a transition after function execution.\n', '     *  @param _state Next state\n', '     *  @param _orderId Order Id\n', '     */\n', '    modifier transition(uint _orderId, State _state) {\n', '        _;\n', '        orders[_orderId].state = _state;\n', '    }\n', '\n', '    /**\n', '     *  payment Processor sets Monetha Gateway\n', '     *  @param _merchantId Merchant of the acceptor\n', "     *  @param _merchantHistory Address of MerchantDealsHistory contract of acceptor's merchant\n", '     *  @param _monethaGateway Address of MonethaGateway contract for payment processing\n', '     *  @param _merchantWallet Address of MerchantWallet, where merchant reputation and funds are stored\n', '     */\n', '    constructor(\n', '        string _merchantId,\n', '        MerchantDealsHistory _merchantHistory,\n', '        MonethaGateway _monethaGateway,\n', '        MerchantWallet _merchantWallet\n', '    )\n', '    public\n', '    {\n', '        require(bytes(_merchantId).length > 0);\n', '\n', '        merchantIdHash = keccak256(abi.encodePacked(_merchantId));\n', '\n', '        setMonethaGateway(_monethaGateway);\n', '        setMerchantWallet(_merchantWallet);\n', '        setMerchantDealsHistory(_merchantHistory);\n', '    }\n', '\n', '    /**\n', '     *  Assigns the acceptor to the order (when client initiates order).\n', '     *  @param _orderId Identifier of the order\n', '     *  @param _price Price of the order \n', '     *  @param _paymentAcceptor order payment acceptor\n', '     *  @param _originAddress buyer address\n', '     *  @param _fee Monetha fee\n', '     */\n', '    function addOrder(\n', '        uint _orderId,\n', '        uint _price,\n', '        address _paymentAcceptor,\n', '        address _originAddress,\n', '        uint _fee,\n', '        address _tokenAddress,\n', '        uint _vouchersApply\n', '    ) external whenNotPaused atState(_orderId, State.Null)\n', '    {\n', '        require(_orderId > 0);\n', '        require(_price > 0);\n', '        require(_fee >= 0 && _fee <= FEE_PERMILLE.mul(_price).div(PERMILLE_COEFFICIENT));\n', '        // Monetha fee cannot be greater than 1.5% of price\n', '        require(_paymentAcceptor != address(0));\n', '        require(_originAddress != address(0));\n', '        require(orders[_orderId].price == 0 && orders[_orderId].fee == 0);\n', '\n', '        orders[_orderId] = Order({\n', '            state : State.Created,\n', '            price : _price,\n', '            fee : _fee,\n', '            paymentAcceptor : _paymentAcceptor,\n', '            originAddress : _originAddress,\n', '            tokenAddress : _tokenAddress,\n', '            vouchersApply : _vouchersApply,\n', '            discount: 0\n', '            });\n', '    }\n', '\n', '    /**\n', '     *  securePay can be used by client if he wants to securely set client address for refund together with payment.\n', '     *  This function require more gas, then fallback function.\n', '     *  @param _orderId Identifier of the order\n', '     */\n', '    function securePay(uint _orderId)\n', '    external payable whenNotPaused\n', '    atState(_orderId, State.Created) transition(_orderId, State.Paid)\n', '    {\n', '        Order storage order = orders[_orderId];\n', '\n', '        require(order.tokenAddress == address(0));\n', '        require(msg.sender == order.paymentAcceptor);\n', '        require(msg.value == order.price);\n', '    }\n', '\n', '    /**\n', '     *  secureTokenPay can be used by client if he wants to securely set client address for token refund together with token payment.\n', "     *  This call requires that token's approve method has been called prior to this.\n", '     *  @param _orderId Identifier of the order\n', '     */\n', '    function secureTokenPay(uint _orderId)\n', '    external whenNotPaused\n', '    atState(_orderId, State.Created) transition(_orderId, State.Paid)\n', '    {\n', '        Order storage order = orders[_orderId];\n', '\n', '        require(msg.sender == order.paymentAcceptor);\n', '        require(order.tokenAddress != address(0));\n', '\n', '        GenericERC20(order.tokenAddress).transferFrom(msg.sender, address(this), order.price);\n', '    }\n', '\n', '    /**\n', "     *  cancelOrder is used when client doesn't pay and order need to be cancelled.\n", '     *  @param _orderId Identifier of the order\n', '     *  @param _clientReputation Updated reputation of the client\n', '     *  @param _merchantReputation Updated reputation of the merchant\n', '     *  @param _dealHash Hashcode of the deal, describing the order (used for deal verification)\n', '     *  @param _cancelReason Order cancel reason\n', '     */\n', '    function cancelOrder(\n', '        uint _orderId,\n', '        uint32 _clientReputation,\n', '        uint32 _merchantReputation,\n', '        uint _dealHash,\n', '        string _cancelReason\n', '    )\n', '    external onlyMonetha whenNotPaused\n', '    atState(_orderId, State.Created) transition(_orderId, State.Cancelled)\n', '    {\n', '        require(bytes(_cancelReason).length > 0);\n', '\n', '        Order storage order = orders[_orderId];\n', '\n', '        updateDealConditions(\n', '            _orderId,\n', '            _clientReputation,\n', '            _merchantReputation,\n', '            false,\n', '            _dealHash\n', '        );\n', '\n', '        merchantHistory.recordDealCancelReason(\n', '            _orderId,\n', '            order.originAddress,\n', '            _clientReputation,\n', '            _merchantReputation,\n', '            _dealHash,\n', '            _cancelReason\n', '        );\n', '    }\n', '\n', '    /**\n', '     *  refundPayment used in case order cannot be processed.\n', '     *  This function initiate process of funds refunding to the client.\n', '     *  @param _orderId Identifier of the order\n', '     *  @param _clientReputation Updated reputation of the client\n', '     *  @param _merchantReputation Updated reputation of the merchant\n', '     *  @param _dealHash Hashcode of the deal, describing the order (used for deal verification)\n', '     *  @param _refundReason Order refund reason, order will be moved to State Cancelled after Client withdraws money\n', '     */\n', '    function refundPayment(\n', '        uint _orderId,\n', '        uint32 _clientReputation,\n', '        uint32 _merchantReputation,\n', '        uint _dealHash,\n', '        string _refundReason\n', '    )\n', '    external onlyMonetha whenNotPaused\n', '    atState(_orderId, State.Paid) transition(_orderId, State.Refunding)\n', '    {\n', '        require(bytes(_refundReason).length > 0);\n', '\n', '        Order storage order = orders[_orderId];\n', '\n', '        updateDealConditions(\n', '            _orderId,\n', '            _clientReputation,\n', '            _merchantReputation,\n', '            false,\n', '            _dealHash\n', '        );\n', '\n', '        merchantHistory.recordDealRefundReason(\n', '            _orderId,\n', '            order.originAddress,\n', '            _clientReputation,\n', '            _merchantReputation,\n', '            _dealHash,\n', '            _refundReason\n', '        );\n', '    }\n', '\n', '    /**\n', "     *  withdrawRefund performs fund transfer to the client's account.\n", '     *  @param _orderId Identifier of the order\n', '     */\n', '    function withdrawRefund(uint _orderId)\n', '    external whenNotPaused\n', '    atState(_orderId, State.Refunding) transition(_orderId, State.Refunded)\n', '    {\n', '        Order storage order = orders[_orderId];\n', '        require(order.tokenAddress == address(0));\n', '\n', '        order.originAddress.transfer(order.price.sub(order.discount));\n', '    }\n', '\n', '    /**\n', "     *  withdrawTokenRefund performs token transfer to the client's account.\n", '     *  @param _orderId Identifier of the order\n', '     */\n', '    function withdrawTokenRefund(uint _orderId)\n', '    external whenNotPaused\n', '    atState(_orderId, State.Refunding) transition(_orderId, State.Refunded)\n', '    {\n', '        require(orders[_orderId].tokenAddress != address(0));\n', '\n', '        GenericERC20(orders[_orderId].tokenAddress).transfer(orders[_orderId].originAddress, orders[_orderId].price);\n', '    }\n', '\n', '    /**\n', '     *  processPayment transfer funds/tokens to MonethaGateway and completes the order.\n', '     *  @param _orderId Identifier of the order\n', '     *  @param _clientReputation Updated reputation of the client\n', '     *  @param _merchantReputation Updated reputation of the merchant\n', '     *  @param _dealHash Hashcode of the deal, describing the order (used for deal verification)\n', '     */\n', '    function processPayment(\n', '        uint _orderId,\n', '        uint32 _clientReputation,\n', '        uint32 _merchantReputation,\n', '        uint _dealHash\n', '    )\n', '    external onlyMonetha whenNotPaused\n', '    atState(_orderId, State.Paid) transition(_orderId, State.Finalized)\n', '    {\n', '        Order storage order = orders[_orderId];\n', '        address fundAddress = merchantWallet.merchantFundAddress();\n', '\n', '        if (order.tokenAddress != address(0)) {\n', '            if (fundAddress != address(0)) {\n', '                GenericERC20(order.tokenAddress).transfer(address(monethaGateway), order.price);\n', '                monethaGateway.acceptTokenPayment(fundAddress, order.fee, order.tokenAddress, order.price);\n', '            } else {\n', '                GenericERC20(order.tokenAddress).transfer(address(monethaGateway), order.price);\n', '                monethaGateway.acceptTokenPayment(merchantWallet, order.fee, order.tokenAddress, order.price);\n', '            }\n', '        } else {\n', '            uint discountWei = 0;\n', '            if (fundAddress != address(0)) {\n', '                discountWei = monethaGateway.acceptPayment.value(order.price)(\n', '                    fundAddress,\n', '                    order.fee,\n', '                    order.originAddress,\n', '                    order.vouchersApply,\n', '                    PAYBACK_PERMILLE);\n', '            } else {\n', '                discountWei = monethaGateway.acceptPayment.value(order.price)(\n', '                    merchantWallet,\n', '                    order.fee,\n', '                    order.originAddress,\n', '                    order.vouchersApply,\n', '                    PAYBACK_PERMILLE);\n', '            }\n', '\n', '            if (discountWei > 0) {\n', '                order.discount = discountWei;\n', '            }\n', '        }\n', '\n', '        updateDealConditions(\n', '            _orderId,\n', '            _clientReputation,\n', '            _merchantReputation,\n', '            true,\n', '            _dealHash\n', '        );\n', '    }\n', '\n', '    /**\n', '     *  setMonethaGateway allows owner to change address of MonethaGateway.\n', '     *  @param _newGateway Address of new MonethaGateway contract\n', '     */\n', '    function setMonethaGateway(MonethaGateway _newGateway) public onlyOwner {\n', '        require(address(_newGateway) != 0x0);\n', '\n', '        monethaGateway = _newGateway;\n', '    }\n', '\n', '    /**\n', '     *  setMerchantWallet allows owner to change address of MerchantWallet.\n', '     *  @param _newWallet Address of new MerchantWallet contract\n', '     */\n', '    function setMerchantWallet(MerchantWallet _newWallet) public onlyOwner {\n', '        require(address(_newWallet) != 0x0);\n', '        require(_newWallet.merchantIdHash() == merchantIdHash);\n', '\n', '        merchantWallet = _newWallet;\n', '    }\n', '\n', '    /**\n', '     *  setMerchantDealsHistory allows owner to change address of MerchantDealsHistory.\n', '     *  @param _merchantHistory Address of new MerchantDealsHistory contract\n', '     */\n', '    function setMerchantDealsHistory(MerchantDealsHistory _merchantHistory) public onlyOwner {\n', '        require(address(_merchantHistory) != 0x0);\n', '        require(_merchantHistory.merchantIdHash() == merchantIdHash);\n', '\n', '        merchantHistory = _merchantHistory;\n', '    }\n', '\n', '    /**\n', '     *  updateDealConditions record finalized deal and updates merchant reputation\n', '     *  in future: update Client reputation\n', '     *  @param _orderId Identifier of the order\n', '     *  @param _clientReputation Updated reputation of the client\n', '     *  @param _merchantReputation Updated reputation of the merchant\n', '     *  @param _isSuccess Identifies whether deal was successful or not\n', '     *  @param _dealHash Hashcode of the deal, describing the order (used for deal verification)\n', '     */\n', '    function updateDealConditions(\n', '        uint _orderId,\n', '        uint32 _clientReputation,\n', '        uint32 _merchantReputation,\n', '        bool _isSuccess,\n', '        uint _dealHash\n', '    )\n', '    internal\n', '    {\n', '        merchantHistory.recordDeal(\n', '            _orderId,\n', '            orders[_orderId].originAddress,\n', '            _clientReputation,\n', '            _merchantReputation,\n', '            _isSuccess,\n', '            _dealHash\n', '        );\n', '\n', '        //update parties Reputation\n', '        merchantWallet.setCompositeReputation("total", _merchantReputation);\n', '    }\n', '}']