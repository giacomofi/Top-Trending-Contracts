['/**\n', ' *Submitted for verification at Etherscan.io on 2019-07-08\n', '*/\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * @notice Renouncing to ownership will leave the contract without an owner.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', 'contract BNDESRegistry is Ownable() {\n', '\n', '    /**\n', '        The account of clients and suppliers are assigned to states. \n', '        Reserved accounts (e.g. from BNDES and ANCINE) do not have state.\n', '        AVAILABLE - The account is not yet assigned any role (any of them - client, supplier or any reserved addresses).\n', '        WAITING_VALIDATION - The account was linked to a legal entity but it still needs to be validated\n', '        VALIDATED - The account was validated\n', '        INVALIDATED_BY_VALIDATOR - The account was invalidated\n', '        INVALIDATED_BY_CHANGE - The client or supplier changed the ethereum account so the original one must be invalidated.\n', '     */\n', '    enum BlockchainAccountState {AVAILABLE,WAITING_VALIDATION,VALIDATED,INVALIDATED_BY_VALIDATOR,INVALIDATED_BY_CHANGE} \n', '    BlockchainAccountState blockchainState; //Not used. Defined to create the enum type.\n', '\n', '    address responsibleForSettlement;\n', '    address responsibleForRegistryValidation;\n', '    address responsibleForDisbursement;\n', '    address redemptionAddress;\n', '    address tokenAddress;\n', '\n', '    /**\n', '        Describes the Legal Entity - clients or suppliers\n', '     */\n', '    struct LegalEntityInfo {\n', '        uint64 cnpj; //Brazilian identification of legal entity\n', '        uint64 idFinancialSupportAgreement; //SCC contract\n', '        uint32 salic; //ANCINE identifier\n', '        string idProofHash; //hash of declaration\n', '        BlockchainAccountState state;\n', '    } \n', '\n', '    /**\n', '        Links Ethereum addresses to LegalEntityInfo        \n', '     */\n', '    mapping(address => LegalEntityInfo) public legalEntitiesInfo;\n', '\n', '    /**\n', '        Links Legal Entity to Ethereum address. \n', '        cnpj => (idFinancialSupportAgreement => address)\n', '     */\n', '    mapping(uint64 => mapping(uint64 => address)) cnpjFSAddr; \n', '\n', '\n', '    /**\n', '        Links Ethereum addresses to the possibility to change the account\n', '        Since the Ethereum account can be changed once, it is not necessary to put the bool to false.\n', '        TODO: Discuss later what is the best data structure\n', '     */\n', '    mapping(address => bool) public legalEntitiesChangeAccount;\n', '\n', '\n', '    event AccountRegistration(address addr, uint64 cnpj, uint64 idFinancialSupportAgreement, uint32 salic, string idProofHash);\n', '    event AccountChange(address oldAddr, address newAddr, uint64 cnpj, uint64 idFinancialSupportAgreement, uint32 salic, string idProofHash);\n', '    event AccountValidation(address addr, uint64 cnpj, uint64 idFinancialSupportAgreement, uint32 salic);\n', '    event AccountInvalidation(address addr, uint64 cnpj, uint64 idFinancialSupportAgreement, uint32 salic);\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the token address.\n', '     */\n', '    modifier onlyTokenAddress() {\n', '        require(isTokenAddress());\n', '        _;\n', '    }\n', '\n', '    constructor () public {\n', '        responsibleForSettlement = msg.sender;\n', '        responsibleForRegistryValidation = msg.sender;\n', '        responsibleForDisbursement = msg.sender;\n', '        redemptionAddress = msg.sender;\n', '    }\n', '\n', '\n', '   /**\n', '    * Link blockchain address with CNPJ - It can be a cliente or a supplier\n', '    * The link still needs to be validated by BNDES\n', '    * This method can only be called by BNDESToken contract because BNDESToken can pause.\n', '    * @param cnpj Brazilian identifier to legal entities\n', '    * @param idFinancialSupportAgreement contract number of financial contract with BNDES. It assumes 0 if it is a supplier.\n', '    * @param salic contract number of financial contract with ANCINE. It assumes 0 if it is a supplier.\n', '    * @param addr the address to be associated with the legal entity.\n', '    * @param idProofHash The legal entities have to send BNDES a PDF where it assumes as responsible for an Ethereum account. \n', '    *                   This PDF is signed with eCNPJ and send to BNDES. \n', '    */\n', '    function registryLegalEntity(uint64 cnpj, uint64 idFinancialSupportAgreement, uint32 salic, \n', '        address addr, string memory idProofHash) onlyTokenAddress public { \n', '\n', '        // Endere&#231;o n&#227;o pode ter sido cadastrado anteriormente\n', '        require (isAvailableAccount(addr), "Endere&#231;o n&#227;o pode ter sido cadastrado anteriormente");\n', '\n', '        require (isValidHash(idProofHash), "O hash da declara&#231;&#227;o &#233; inv&#225;lido");\n', '\n', '        legalEntitiesInfo[addr] = LegalEntityInfo(cnpj, idFinancialSupportAgreement, salic, idProofHash, BlockchainAccountState.WAITING_VALIDATION);\n', '        \n', '        // N&#227;o pode haver outro endere&#231;o cadastrado para esse mesmo subcr&#233;dito\n', '        if (idFinancialSupportAgreement > 0) {\n', '            address account = getBlockchainAccount(cnpj,idFinancialSupportAgreement);\n', '            require (isAvailableAccount(account), "Cliente j&#225; est&#225; associado a outro endere&#231;o. Use a fun&#231;&#227;o Troca.");\n', '        }\n', '        else {\n', '            address account = getBlockchainAccount(cnpj,0);\n', '            require (isAvailableAccount(account), "Fornecedor j&#225; est&#225; associado a outro endere&#231;o. Use a fun&#231;&#227;o Troca.");\n', '        }\n', '        \n', '        cnpjFSAddr[cnpj][idFinancialSupportAgreement] = addr;\n', '\n', '        emit AccountRegistration(addr, cnpj, idFinancialSupportAgreement, salic, idProofHash);\n', '    }\n', '\n', '   /**\n', '    * Changes the original link between CNPJ and Ethereum account. \n', '    * The new link still needs to be validated by BNDES.\n', '    * This method can only be called by BNDESToken contract because BNDESToken can pause and because there are \n', '    * additional instructions there.\n', '    * @param cnpj Brazilian identifier to legal entities\n', '    * @param idFinancialSupportAgreement contract number of financial contract with BNDES. It assumes 0 if it is a supplier.\n', '    * @param salic contract number of financial contract with ANCINE. It assumes 0 if it is a supplier.\n', '    * @param newAddr the new address to be associated with the legal entity\n', '    * @param idProofHash The legal entities have to send BNDES a PDF where it assumes as responsible for an Ethereum account. \n', '    *                   This PDF is signed with eCNPJ and send to BNDES. \n', '    */\n', '    function changeAccountLegalEntity(uint64 cnpj, uint64 idFinancialSupportAgreement, uint32 salic, \n', '        address newAddr, string memory idProofHash) onlyTokenAddress public {\n', '\n', '        address oldAddr = getBlockchainAccount(cnpj, idFinancialSupportAgreement);\n', '    \n', '        // Tem que haver um endere&#231;o associado a esse cnpj/subcr&#233;dito\n', '        require(!isReservedAccount(oldAddr), "N&#227;o pode trocar endere&#231;o de conta reservada");\n', '\n', '        require(!isAvailableAccount(oldAddr), "Tem que haver um endere&#231;o associado a esse cnpj/subcr&#233;dito");\n', '\n', '        require(isAvailableAccount(newAddr), "Novo endere&#231;o n&#227;o est&#225; dispon&#237;vel");\n', '\n', '        require (isChangeAccountEnabled(oldAddr), "A conta atual n&#227;o est&#225; habilitada para troca");\n', '\n', '        require (isValidHash(idProofHash), "O hash da declara&#231;&#227;o &#233; inv&#225;lido");        \n', '\n', '        require(legalEntitiesInfo[oldAddr].cnpj==cnpj \n', '                    && legalEntitiesInfo[oldAddr].idFinancialSupportAgreement ==idFinancialSupportAgreement, \n', '                    "Dados inconsistentes de cnpj ou subcr&#233;dito");\n', '\n', '        // Aponta o novo endere&#231;o para o novo LegalEntityInfo\n', '        legalEntitiesInfo[newAddr] = LegalEntityInfo(cnpj, idFinancialSupportAgreement, salic, idProofHash, BlockchainAccountState.WAITING_VALIDATION);\n', '\n', '        // Apaga o mapping do endere&#231;o antigo\n', '        legalEntitiesInfo[oldAddr].state = BlockchainAccountState.INVALIDATED_BY_CHANGE;\n', '\n', '        // Aponta mapping CNPJ e Subcredito para newAddr\n', '        cnpjFSAddr[cnpj][idFinancialSupportAgreement] = newAddr;\n', '\n', '        emit AccountChange(oldAddr, newAddr, cnpj, idFinancialSupportAgreement, salic, idProofHash); \n', '\n', '    }\n', '\n', '   /**\n', '    * Validates the initial registry of a legal entity or the change of its registry\n', '    * @param addr Ethereum address that needs to be validated\n', '    * @param idProofHash The legal entities have to send BNDES a PDF where it assumes as responsible for an Ethereum account. \n', '    *                   This PDF is signed with eCNPJ and send to BNDES. \n', '    */\n', '    function validateRegistryLegalEntity(address addr, string memory idProofHash) public {\n', '\n', '        require(isResponsibleForRegistryValidation(msg.sender), "Somente o respons&#225;vel pela valida&#231;&#227;o pode validar contas");\n', '\n', '        require(legalEntitiesInfo[addr].state == BlockchainAccountState.WAITING_VALIDATION, "A conta precisa estar no estado Aguardando Valida&#231;&#227;o");\n', '\n', '        require(keccak256(abi.encodePacked(legalEntitiesInfo[addr].idProofHash)) == keccak256(abi.encodePacked(idProofHash)), "O hash recebido &#233; diferente do esperado");\n', '\n', '        legalEntitiesInfo[addr].state = BlockchainAccountState.VALIDATED;\n', '\n', '        emit AccountValidation(addr, legalEntitiesInfo[addr].cnpj, \n', '            legalEntitiesInfo[addr].idFinancialSupportAgreement,\n', '            legalEntitiesInfo[addr].salic);\n', '    }\n', '\n', '   /**\n', '    * Invalidates the initial registry of a legal entity or the change of its registry\n', '    * The invalidation can be called at any time in the lifecycle of the address (not only when it is WAITING_VALIDATION)\n', '    * @param addr Ethereum address that needs to be validated\n', '    */\n', '    function invalidateRegistryLegalEntity(address addr) public {\n', '\n', '        require(isResponsibleForRegistryValidation(msg.sender), "Somente o respons&#225;vel pela valida&#231;&#227;o pode invalidar contas");\n', '\n', '        require(!isReservedAccount(addr), "N&#227;o &#233; poss&#237;vel invalidar conta reservada");\n', '\n', '        legalEntitiesInfo[addr].state = BlockchainAccountState.INVALIDATED_BY_VALIDATOR;\n', '        \n', '        emit AccountInvalidation(addr, legalEntitiesInfo[addr].cnpj, \n', '            legalEntitiesInfo[addr].idFinancialSupportAgreement,\n', '            legalEntitiesInfo[addr].salic);\n', '    }\n', '\n', '\n', '   /**\n', '    * By default, the owner is also the Responsible for Settlement. \n', '    * The owner can assign other address to be the Responsible for Settlement. \n', '    * @param rs Ethereum address to be assigned as Responsible for Settlement.\n', '    */\n', '    function setResponsibleForSettlement(address rs) onlyOwner public {\n', '        responsibleForSettlement = rs;\n', '    }\n', '\n', '   /**\n', '    * By default, the owner is also the Responsible for Validation. \n', '    * The owner can assign other address to be the Responsible for Validation. \n', '    * @param rs Ethereum address to be assigned as Responsible for Validation.\n', '    */\n', '    function setResponsibleForRegistryValidation(address rs) onlyOwner public {\n', '        responsibleForRegistryValidation = rs;\n', '    }\n', '\n', '   /**\n', '    * By default, the owner is also the Responsible for Disbursment. \n', '    * The owner can assign other address to be the Responsible for Disbursment. \n', '    * @param rs Ethereum address to be assigned as Responsible for Disbursment.\n', '    */\n', '    function setResponsibleForDisbursement(address rs) onlyOwner public {\n', '        responsibleForDisbursement = rs;\n', '    }\n', '\n', '   /**\n', '    * The supplier reedems the BNDESToken by transfering the tokens to a specific address, \n', '    * called Redemption address. \n', '    * By default, the redemption address is the address of the owner. \n', '    * The owner can change the redemption address using this function. \n', '    * @param rs new Redemption address\n', '    */\n', '    function setRedemptionAddress(address rs) onlyOwner public {\n', '        redemptionAddress = rs;\n', '    }\n', '\n', '   /**\n', '    * @param rs Ethereum address to be assigned to the token address.\n', '    */\n', '    function setTokenAddress(address rs) onlyOwner public {\n', '        tokenAddress = rs;\n', '    }\n', '\n', '   /**\n', '    * Enable the legal entity to change the account\n', '    * @param rs account that can be changed.\n', '    */\n', '    function enableChangeAccount (address rs) public {\n', '        require(isResponsibleForRegistryValidation(msg.sender), "Somente o respons&#225;vel pela valida&#231;&#227;o pode habilitar a troca de conta");\n', '        legalEntitiesChangeAccount[rs] = true;\n', '    }\n', '\n', '    function isChangeAccountEnabled (address rs) view public returns (bool) {\n', '        return legalEntitiesChangeAccount[rs] == true;\n', '    }    \n', '\n', '    function isTokenAddress() public view returns (bool) {\n', '        return tokenAddress == msg.sender;\n', '    } \n', '    function isResponsibleForSettlement(address addr) view public returns (bool) {\n', '        return (addr == responsibleForSettlement);\n', '    }\n', '    function isResponsibleForRegistryValidation(address addr) view public returns (bool) {\n', '        return (addr == responsibleForRegistryValidation);\n', '    }\n', '    function isResponsibleForDisbursement(address addr) view public returns (bool) {\n', '        return (addr == responsibleForDisbursement);\n', '    }\n', '    function isRedemptionAddress(address addr) view public returns (bool) {\n', '        return (addr == redemptionAddress);\n', '    }\n', '\n', '    function isReservedAccount(address addr) view public returns (bool) {\n', '\n', '        if (isOwner(addr) || isResponsibleForSettlement(addr) \n', '                           || isResponsibleForRegistryValidation(addr)\n', '                           || isResponsibleForDisbursement(addr)\n', '                           || isRedemptionAddress(addr) ) {\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '    function isOwner(address addr) view public returns (bool) {\n', '        return owner()==addr;\n', '    }\n', '\n', '    function isSupplier(address addr) view public returns (bool) {\n', '\n', '        if (isReservedAccount(addr))\n', '            return false;\n', '\n', '        if (isAvailableAccount(addr))\n', '            return false;\n', '\n', '        return legalEntitiesInfo[addr].idFinancialSupportAgreement == 0;\n', '    }\n', '\n', '    function isValidatedSupplier (address addr) view public returns (bool) {\n', '        return isSupplier(addr) && (legalEntitiesInfo[addr].state == BlockchainAccountState.VALIDATED);\n', '    }\n', '\n', '    function isClient (address addr) view public returns (bool) {\n', '        if (isReservedAccount(addr)) {\n', '            return false;\n', '        }\n', '        return legalEntitiesInfo[addr].idFinancialSupportAgreement != 0;\n', '    }\n', '\n', '    function isValidatedClient (address addr) view public returns (bool) {\n', '        return isClient(addr) && (legalEntitiesInfo[addr].state == BlockchainAccountState.VALIDATED);\n', '    }\n', '\n', '    function isAvailableAccount(address addr) view public returns (bool) {\n', '        if ( isReservedAccount(addr) ) {\n', '            return false;\n', '        } \n', '        return legalEntitiesInfo[addr].state == BlockchainAccountState.AVAILABLE;\n', '    }\n', '\n', '    function isWaitingValidationAccount(address addr) view public returns (bool) {\n', '        return legalEntitiesInfo[addr].state == BlockchainAccountState.WAITING_VALIDATION;\n', '    }\n', '\n', '    function isValidatedAccount(address addr) view public returns (bool) {\n', '        return legalEntitiesInfo[addr].state == BlockchainAccountState.VALIDATED;\n', '    }\n', '\n', '    function isInvalidatedByValidatorAccount(address addr) view public returns (bool) {\n', '        return legalEntitiesInfo[addr].state == BlockchainAccountState.INVALIDATED_BY_VALIDATOR;\n', '    }\n', '\n', '    function isInvalidatedByChangeAccount(address addr) view public returns (bool) {\n', '        return legalEntitiesInfo[addr].state == BlockchainAccountState.INVALIDATED_BY_CHANGE;\n', '    }\n', '\n', '    function getResponsibleForSettlement() view public returns (address) {\n', '        return responsibleForSettlement;\n', '    }\n', '    function getResponsibleForRegistryValidation() view public returns (address) {\n', '        return responsibleForRegistryValidation;\n', '    }\n', '    function getResponsibleForDisbursement() view public returns (address) {\n', '        return responsibleForDisbursement;\n', '    }\n', '    function getRedemptionAddress() view public returns (address) {\n', '        return redemptionAddress;\n', '    }\n', '    function getCNPJ(address addr) view public returns (uint64) {\n', '        return legalEntitiesInfo[addr].cnpj;\n', '    }\n', '\n', '    function getIdLegalFinancialAgreement(address addr) view public returns (uint64) {\n', '        return legalEntitiesInfo[addr].idFinancialSupportAgreement;\n', '    }\n', '\n', '    function getLegalEntityInfo (address addr) view public returns (uint64, uint64, uint32, string memory, uint, address) {\n', '        return (legalEntitiesInfo[addr].cnpj, legalEntitiesInfo[addr].idFinancialSupportAgreement, \n', '             legalEntitiesInfo[addr].salic, legalEntitiesInfo[addr].idProofHash, (uint) (legalEntitiesInfo[addr].state),\n', '             addr);\n', '    }\n', '\n', '    function getBlockchainAccount(uint64 cnpj, uint64 idFinancialSupportAgreement) view public returns (address) {\n', '        return cnpjFSAddr[cnpj][idFinancialSupportAgreement];\n', '    }\n', '\n', '    function getLegalEntityInfoByCNPJ (uint64 cnpj, uint64 idFinancialSupportAgreement) \n', '        view public returns (uint64, uint64, uint32, string memory, uint, address) {\n', '        \n', '        address addr = getBlockchainAccount(cnpj,idFinancialSupportAgreement);\n', '        return getLegalEntityInfo (addr);\n', '    }\n', '\n', '    function getAccountState(address addr) view public returns (int) {\n', '\n', '        if ( isReservedAccount(addr) ) {\n', '            return 100;\n', '        } \n', '        else {\n', '            return ((int) (legalEntitiesInfo[addr].state));\n', '        }\n', '\n', '    }\n', '\n', '\n', '  function isValidHash(string memory str) pure public returns (bool)  {\n', '\n', '    bytes memory b = bytes(str);\n', '    if(b.length != 64) return false;\n', '\n', '    for (uint i=0; i<64; i++) {\n', '        if (b[i] < "0") return false;\n', '        if (b[i] > "9" && b[i] <"a") return false;\n', '        if (b[i] > "f") return false;\n', '    }\n', '        \n', '    return true;\n', ' }\n', '\n', '\n', '}']
['pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * @notice Renouncing to ownership will leave the contract without an owner.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', 'contract BNDESRegistry is Ownable() {\n', '\n', '    /**\n', '        The account of clients and suppliers are assigned to states. \n', '        Reserved accounts (e.g. from BNDES and ANCINE) do not have state.\n', '        AVAILABLE - The account is not yet assigned any role (any of them - client, supplier or any reserved addresses).\n', '        WAITING_VALIDATION - The account was linked to a legal entity but it still needs to be validated\n', '        VALIDATED - The account was validated\n', '        INVALIDATED_BY_VALIDATOR - The account was invalidated\n', '        INVALIDATED_BY_CHANGE - The client or supplier changed the ethereum account so the original one must be invalidated.\n', '     */\n', '    enum BlockchainAccountState {AVAILABLE,WAITING_VALIDATION,VALIDATED,INVALIDATED_BY_VALIDATOR,INVALIDATED_BY_CHANGE} \n', '    BlockchainAccountState blockchainState; //Not used. Defined to create the enum type.\n', '\n', '    address responsibleForSettlement;\n', '    address responsibleForRegistryValidation;\n', '    address responsibleForDisbursement;\n', '    address redemptionAddress;\n', '    address tokenAddress;\n', '\n', '    /**\n', '        Describes the Legal Entity - clients or suppliers\n', '     */\n', '    struct LegalEntityInfo {\n', '        uint64 cnpj; //Brazilian identification of legal entity\n', '        uint64 idFinancialSupportAgreement; //SCC contract\n', '        uint32 salic; //ANCINE identifier\n', '        string idProofHash; //hash of declaration\n', '        BlockchainAccountState state;\n', '    } \n', '\n', '    /**\n', '        Links Ethereum addresses to LegalEntityInfo        \n', '     */\n', '    mapping(address => LegalEntityInfo) public legalEntitiesInfo;\n', '\n', '    /**\n', '        Links Legal Entity to Ethereum address. \n', '        cnpj => (idFinancialSupportAgreement => address)\n', '     */\n', '    mapping(uint64 => mapping(uint64 => address)) cnpjFSAddr; \n', '\n', '\n', '    /**\n', '        Links Ethereum addresses to the possibility to change the account\n', '        Since the Ethereum account can be changed once, it is not necessary to put the bool to false.\n', '        TODO: Discuss later what is the best data structure\n', '     */\n', '    mapping(address => bool) public legalEntitiesChangeAccount;\n', '\n', '\n', '    event AccountRegistration(address addr, uint64 cnpj, uint64 idFinancialSupportAgreement, uint32 salic, string idProofHash);\n', '    event AccountChange(address oldAddr, address newAddr, uint64 cnpj, uint64 idFinancialSupportAgreement, uint32 salic, string idProofHash);\n', '    event AccountValidation(address addr, uint64 cnpj, uint64 idFinancialSupportAgreement, uint32 salic);\n', '    event AccountInvalidation(address addr, uint64 cnpj, uint64 idFinancialSupportAgreement, uint32 salic);\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the token address.\n', '     */\n', '    modifier onlyTokenAddress() {\n', '        require(isTokenAddress());\n', '        _;\n', '    }\n', '\n', '    constructor () public {\n', '        responsibleForSettlement = msg.sender;\n', '        responsibleForRegistryValidation = msg.sender;\n', '        responsibleForDisbursement = msg.sender;\n', '        redemptionAddress = msg.sender;\n', '    }\n', '\n', '\n', '   /**\n', '    * Link blockchain address with CNPJ - It can be a cliente or a supplier\n', '    * The link still needs to be validated by BNDES\n', '    * This method can only be called by BNDESToken contract because BNDESToken can pause.\n', '    * @param cnpj Brazilian identifier to legal entities\n', '    * @param idFinancialSupportAgreement contract number of financial contract with BNDES. It assumes 0 if it is a supplier.\n', '    * @param salic contract number of financial contract with ANCINE. It assumes 0 if it is a supplier.\n', '    * @param addr the address to be associated with the legal entity.\n', '    * @param idProofHash The legal entities have to send BNDES a PDF where it assumes as responsible for an Ethereum account. \n', '    *                   This PDF is signed with eCNPJ and send to BNDES. \n', '    */\n', '    function registryLegalEntity(uint64 cnpj, uint64 idFinancialSupportAgreement, uint32 salic, \n', '        address addr, string memory idProofHash) onlyTokenAddress public { \n', '\n', '        // Endereço não pode ter sido cadastrado anteriormente\n', '        require (isAvailableAccount(addr), "Endereço não pode ter sido cadastrado anteriormente");\n', '\n', '        require (isValidHash(idProofHash), "O hash da declaração é inválido");\n', '\n', '        legalEntitiesInfo[addr] = LegalEntityInfo(cnpj, idFinancialSupportAgreement, salic, idProofHash, BlockchainAccountState.WAITING_VALIDATION);\n', '        \n', '        // Não pode haver outro endereço cadastrado para esse mesmo subcrédito\n', '        if (idFinancialSupportAgreement > 0) {\n', '            address account = getBlockchainAccount(cnpj,idFinancialSupportAgreement);\n', '            require (isAvailableAccount(account), "Cliente já está associado a outro endereço. Use a função Troca.");\n', '        }\n', '        else {\n', '            address account = getBlockchainAccount(cnpj,0);\n', '            require (isAvailableAccount(account), "Fornecedor já está associado a outro endereço. Use a função Troca.");\n', '        }\n', '        \n', '        cnpjFSAddr[cnpj][idFinancialSupportAgreement] = addr;\n', '\n', '        emit AccountRegistration(addr, cnpj, idFinancialSupportAgreement, salic, idProofHash);\n', '    }\n', '\n', '   /**\n', '    * Changes the original link between CNPJ and Ethereum account. \n', '    * The new link still needs to be validated by BNDES.\n', '    * This method can only be called by BNDESToken contract because BNDESToken can pause and because there are \n', '    * additional instructions there.\n', '    * @param cnpj Brazilian identifier to legal entities\n', '    * @param idFinancialSupportAgreement contract number of financial contract with BNDES. It assumes 0 if it is a supplier.\n', '    * @param salic contract number of financial contract with ANCINE. It assumes 0 if it is a supplier.\n', '    * @param newAddr the new address to be associated with the legal entity\n', '    * @param idProofHash The legal entities have to send BNDES a PDF where it assumes as responsible for an Ethereum account. \n', '    *                   This PDF is signed with eCNPJ and send to BNDES. \n', '    */\n', '    function changeAccountLegalEntity(uint64 cnpj, uint64 idFinancialSupportAgreement, uint32 salic, \n', '        address newAddr, string memory idProofHash) onlyTokenAddress public {\n', '\n', '        address oldAddr = getBlockchainAccount(cnpj, idFinancialSupportAgreement);\n', '    \n', '        // Tem que haver um endereço associado a esse cnpj/subcrédito\n', '        require(!isReservedAccount(oldAddr), "Não pode trocar endereço de conta reservada");\n', '\n', '        require(!isAvailableAccount(oldAddr), "Tem que haver um endereço associado a esse cnpj/subcrédito");\n', '\n', '        require(isAvailableAccount(newAddr), "Novo endereço não está disponível");\n', '\n', '        require (isChangeAccountEnabled(oldAddr), "A conta atual não está habilitada para troca");\n', '\n', '        require (isValidHash(idProofHash), "O hash da declaração é inválido");        \n', '\n', '        require(legalEntitiesInfo[oldAddr].cnpj==cnpj \n', '                    && legalEntitiesInfo[oldAddr].idFinancialSupportAgreement ==idFinancialSupportAgreement, \n', '                    "Dados inconsistentes de cnpj ou subcrédito");\n', '\n', '        // Aponta o novo endereço para o novo LegalEntityInfo\n', '        legalEntitiesInfo[newAddr] = LegalEntityInfo(cnpj, idFinancialSupportAgreement, salic, idProofHash, BlockchainAccountState.WAITING_VALIDATION);\n', '\n', '        // Apaga o mapping do endereço antigo\n', '        legalEntitiesInfo[oldAddr].state = BlockchainAccountState.INVALIDATED_BY_CHANGE;\n', '\n', '        // Aponta mapping CNPJ e Subcredito para newAddr\n', '        cnpjFSAddr[cnpj][idFinancialSupportAgreement] = newAddr;\n', '\n', '        emit AccountChange(oldAddr, newAddr, cnpj, idFinancialSupportAgreement, salic, idProofHash); \n', '\n', '    }\n', '\n', '   /**\n', '    * Validates the initial registry of a legal entity or the change of its registry\n', '    * @param addr Ethereum address that needs to be validated\n', '    * @param idProofHash The legal entities have to send BNDES a PDF where it assumes as responsible for an Ethereum account. \n', '    *                   This PDF is signed with eCNPJ and send to BNDES. \n', '    */\n', '    function validateRegistryLegalEntity(address addr, string memory idProofHash) public {\n', '\n', '        require(isResponsibleForRegistryValidation(msg.sender), "Somente o responsável pela validação pode validar contas");\n', '\n', '        require(legalEntitiesInfo[addr].state == BlockchainAccountState.WAITING_VALIDATION, "A conta precisa estar no estado Aguardando Validação");\n', '\n', '        require(keccak256(abi.encodePacked(legalEntitiesInfo[addr].idProofHash)) == keccak256(abi.encodePacked(idProofHash)), "O hash recebido é diferente do esperado");\n', '\n', '        legalEntitiesInfo[addr].state = BlockchainAccountState.VALIDATED;\n', '\n', '        emit AccountValidation(addr, legalEntitiesInfo[addr].cnpj, \n', '            legalEntitiesInfo[addr].idFinancialSupportAgreement,\n', '            legalEntitiesInfo[addr].salic);\n', '    }\n', '\n', '   /**\n', '    * Invalidates the initial registry of a legal entity or the change of its registry\n', '    * The invalidation can be called at any time in the lifecycle of the address (not only when it is WAITING_VALIDATION)\n', '    * @param addr Ethereum address that needs to be validated\n', '    */\n', '    function invalidateRegistryLegalEntity(address addr) public {\n', '\n', '        require(isResponsibleForRegistryValidation(msg.sender), "Somente o responsável pela validação pode invalidar contas");\n', '\n', '        require(!isReservedAccount(addr), "Não é possível invalidar conta reservada");\n', '\n', '        legalEntitiesInfo[addr].state = BlockchainAccountState.INVALIDATED_BY_VALIDATOR;\n', '        \n', '        emit AccountInvalidation(addr, legalEntitiesInfo[addr].cnpj, \n', '            legalEntitiesInfo[addr].idFinancialSupportAgreement,\n', '            legalEntitiesInfo[addr].salic);\n', '    }\n', '\n', '\n', '   /**\n', '    * By default, the owner is also the Responsible for Settlement. \n', '    * The owner can assign other address to be the Responsible for Settlement. \n', '    * @param rs Ethereum address to be assigned as Responsible for Settlement.\n', '    */\n', '    function setResponsibleForSettlement(address rs) onlyOwner public {\n', '        responsibleForSettlement = rs;\n', '    }\n', '\n', '   /**\n', '    * By default, the owner is also the Responsible for Validation. \n', '    * The owner can assign other address to be the Responsible for Validation. \n', '    * @param rs Ethereum address to be assigned as Responsible for Validation.\n', '    */\n', '    function setResponsibleForRegistryValidation(address rs) onlyOwner public {\n', '        responsibleForRegistryValidation = rs;\n', '    }\n', '\n', '   /**\n', '    * By default, the owner is also the Responsible for Disbursment. \n', '    * The owner can assign other address to be the Responsible for Disbursment. \n', '    * @param rs Ethereum address to be assigned as Responsible for Disbursment.\n', '    */\n', '    function setResponsibleForDisbursement(address rs) onlyOwner public {\n', '        responsibleForDisbursement = rs;\n', '    }\n', '\n', '   /**\n', '    * The supplier reedems the BNDESToken by transfering the tokens to a specific address, \n', '    * called Redemption address. \n', '    * By default, the redemption address is the address of the owner. \n', '    * The owner can change the redemption address using this function. \n', '    * @param rs new Redemption address\n', '    */\n', '    function setRedemptionAddress(address rs) onlyOwner public {\n', '        redemptionAddress = rs;\n', '    }\n', '\n', '   /**\n', '    * @param rs Ethereum address to be assigned to the token address.\n', '    */\n', '    function setTokenAddress(address rs) onlyOwner public {\n', '        tokenAddress = rs;\n', '    }\n', '\n', '   /**\n', '    * Enable the legal entity to change the account\n', '    * @param rs account that can be changed.\n', '    */\n', '    function enableChangeAccount (address rs) public {\n', '        require(isResponsibleForRegistryValidation(msg.sender), "Somente o responsável pela validação pode habilitar a troca de conta");\n', '        legalEntitiesChangeAccount[rs] = true;\n', '    }\n', '\n', '    function isChangeAccountEnabled (address rs) view public returns (bool) {\n', '        return legalEntitiesChangeAccount[rs] == true;\n', '    }    \n', '\n', '    function isTokenAddress() public view returns (bool) {\n', '        return tokenAddress == msg.sender;\n', '    } \n', '    function isResponsibleForSettlement(address addr) view public returns (bool) {\n', '        return (addr == responsibleForSettlement);\n', '    }\n', '    function isResponsibleForRegistryValidation(address addr) view public returns (bool) {\n', '        return (addr == responsibleForRegistryValidation);\n', '    }\n', '    function isResponsibleForDisbursement(address addr) view public returns (bool) {\n', '        return (addr == responsibleForDisbursement);\n', '    }\n', '    function isRedemptionAddress(address addr) view public returns (bool) {\n', '        return (addr == redemptionAddress);\n', '    }\n', '\n', '    function isReservedAccount(address addr) view public returns (bool) {\n', '\n', '        if (isOwner(addr) || isResponsibleForSettlement(addr) \n', '                           || isResponsibleForRegistryValidation(addr)\n', '                           || isResponsibleForDisbursement(addr)\n', '                           || isRedemptionAddress(addr) ) {\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '    function isOwner(address addr) view public returns (bool) {\n', '        return owner()==addr;\n', '    }\n', '\n', '    function isSupplier(address addr) view public returns (bool) {\n', '\n', '        if (isReservedAccount(addr))\n', '            return false;\n', '\n', '        if (isAvailableAccount(addr))\n', '            return false;\n', '\n', '        return legalEntitiesInfo[addr].idFinancialSupportAgreement == 0;\n', '    }\n', '\n', '    function isValidatedSupplier (address addr) view public returns (bool) {\n', '        return isSupplier(addr) && (legalEntitiesInfo[addr].state == BlockchainAccountState.VALIDATED);\n', '    }\n', '\n', '    function isClient (address addr) view public returns (bool) {\n', '        if (isReservedAccount(addr)) {\n', '            return false;\n', '        }\n', '        return legalEntitiesInfo[addr].idFinancialSupportAgreement != 0;\n', '    }\n', '\n', '    function isValidatedClient (address addr) view public returns (bool) {\n', '        return isClient(addr) && (legalEntitiesInfo[addr].state == BlockchainAccountState.VALIDATED);\n', '    }\n', '\n', '    function isAvailableAccount(address addr) view public returns (bool) {\n', '        if ( isReservedAccount(addr) ) {\n', '            return false;\n', '        } \n', '        return legalEntitiesInfo[addr].state == BlockchainAccountState.AVAILABLE;\n', '    }\n', '\n', '    function isWaitingValidationAccount(address addr) view public returns (bool) {\n', '        return legalEntitiesInfo[addr].state == BlockchainAccountState.WAITING_VALIDATION;\n', '    }\n', '\n', '    function isValidatedAccount(address addr) view public returns (bool) {\n', '        return legalEntitiesInfo[addr].state == BlockchainAccountState.VALIDATED;\n', '    }\n', '\n', '    function isInvalidatedByValidatorAccount(address addr) view public returns (bool) {\n', '        return legalEntitiesInfo[addr].state == BlockchainAccountState.INVALIDATED_BY_VALIDATOR;\n', '    }\n', '\n', '    function isInvalidatedByChangeAccount(address addr) view public returns (bool) {\n', '        return legalEntitiesInfo[addr].state == BlockchainAccountState.INVALIDATED_BY_CHANGE;\n', '    }\n', '\n', '    function getResponsibleForSettlement() view public returns (address) {\n', '        return responsibleForSettlement;\n', '    }\n', '    function getResponsibleForRegistryValidation() view public returns (address) {\n', '        return responsibleForRegistryValidation;\n', '    }\n', '    function getResponsibleForDisbursement() view public returns (address) {\n', '        return responsibleForDisbursement;\n', '    }\n', '    function getRedemptionAddress() view public returns (address) {\n', '        return redemptionAddress;\n', '    }\n', '    function getCNPJ(address addr) view public returns (uint64) {\n', '        return legalEntitiesInfo[addr].cnpj;\n', '    }\n', '\n', '    function getIdLegalFinancialAgreement(address addr) view public returns (uint64) {\n', '        return legalEntitiesInfo[addr].idFinancialSupportAgreement;\n', '    }\n', '\n', '    function getLegalEntityInfo (address addr) view public returns (uint64, uint64, uint32, string memory, uint, address) {\n', '        return (legalEntitiesInfo[addr].cnpj, legalEntitiesInfo[addr].idFinancialSupportAgreement, \n', '             legalEntitiesInfo[addr].salic, legalEntitiesInfo[addr].idProofHash, (uint) (legalEntitiesInfo[addr].state),\n', '             addr);\n', '    }\n', '\n', '    function getBlockchainAccount(uint64 cnpj, uint64 idFinancialSupportAgreement) view public returns (address) {\n', '        return cnpjFSAddr[cnpj][idFinancialSupportAgreement];\n', '    }\n', '\n', '    function getLegalEntityInfoByCNPJ (uint64 cnpj, uint64 idFinancialSupportAgreement) \n', '        view public returns (uint64, uint64, uint32, string memory, uint, address) {\n', '        \n', '        address addr = getBlockchainAccount(cnpj,idFinancialSupportAgreement);\n', '        return getLegalEntityInfo (addr);\n', '    }\n', '\n', '    function getAccountState(address addr) view public returns (int) {\n', '\n', '        if ( isReservedAccount(addr) ) {\n', '            return 100;\n', '        } \n', '        else {\n', '            return ((int) (legalEntitiesInfo[addr].state));\n', '        }\n', '\n', '    }\n', '\n', '\n', '  function isValidHash(string memory str) pure public returns (bool)  {\n', '\n', '    bytes memory b = bytes(str);\n', '    if(b.length != 64) return false;\n', '\n', '    for (uint i=0; i<64; i++) {\n', '        if (b[i] < "0") return false;\n', '        if (b[i] > "9" && b[i] <"a") return false;\n', '        if (b[i] > "f") return false;\n', '    }\n', '        \n', '    return true;\n', ' }\n', '\n', '\n', '}']
