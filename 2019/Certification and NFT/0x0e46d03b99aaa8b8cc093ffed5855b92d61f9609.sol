['pragma solidity ^0.5.8;\n', '\n', 'contract Registry {\n', '    struct Entry {\n', '        uint64 lenData;\n', '        mapping (uint32=>address) data;\n', '        address owner;\n', '        bool uploaded;\n', '    }\n', '    mapping(uint256=>Entry) public entries;\n', '    uint256 public numEntries = 0;\n', '\n', '    function addEntry(uint64 lenData) public returns(uint256) {\n', '        entries[numEntries] = Entry(lenData, msg.sender, false);\n', '        numEntries += 1;\n', '        return numEntries - 1;\n', '    }\n', '\n', '    function finalize(uint256 entryId) public {\n', '        require(entries[entryId].owner == msg.sender);\n', '        entries[entryId].uploaded = true;\n', '    }\n', '    \n', '    function storeDataAsContract(bytes memory data) internal returns (address) {\n', '        address result;\n', '        assembly {\n', '            let length := mload(data)\n', '            mstore(data, 0x58600c8038038082843982f3)\n', '            result := create(0, add(data, 20), add(12, length))\n', '        }\n', '        require(result != address(0x0));\n', '        return result;\n', '    }\n', '    \n', '    function addChunk(uint256 entryId, uint32 chunkIndex, bytes memory chunkData) public {\n', '        require(entries[entryId].owner == msg.sender);\n', '        entries[entryId].data[chunkIndex] = storeDataAsContract(chunkData);\n', '    }\n', '\n', '    function get(uint256 entryId, uint32 chunkIndex) public view returns(bytes memory result) {\n', '        require(entries[entryId].uploaded);\n', '        address _addr = entries[entryId].data[chunkIndex];\n', '        assembly {\n', '            // retrieve the size of the code, this needs assembly\n', '            let size := extcodesize(_addr)\n', '            // allocate output byte array - this could also be done without assembly\n', '            // by using o_code = new bytes(size)\n', '            result := mload(0x40)\n', '            // new "memory end" including padding\n', '            mstore(0x40, add(result, and(add(add(size, 0x20), 0x1f), not(0x1f))))\n', '            // store length in memory\n', '            mstore(result, size)\n', '            // actually retrieve the code, this needs assembly\n', '            extcodecopy(_addr, add(result, 0x20), 0, size)            \n', '        }\n', '    }\n', '\n', '    function getLen(uint256 entry) public view returns(uint64 length) {\n', '        return entries[entry].lenData;\n', '    }\n', '}']