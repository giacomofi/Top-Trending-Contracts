['pragma solidity 0.4.23;\n', '// produced by the Solididy File Flattener (c) David Appleton 2018\n', '// contact : <span class="__cf_email__" data-cfemail="2f4b4e594a6f4e4440424d4e014c4042">[email&#160;protected]</span>\n', '// released under Apache 2.0 licence\n', '// input  /Users/zacharykilgore/src/flexa/smart-contracts/contracts/TokenVault.sol\n', '// flattened :  Saturday, 05-Jan-19 14:47:14 UTC\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract Claimable is Ownable {\n', '  address public pendingOwner;\n', '\n', '  /**\n', '   * @dev Modifier throws if called by any account other than the pendingOwner.\n', '   */\n', '  modifier onlyPendingOwner() {\n', '    require(msg.sender == pendingOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to set the pendingOwner address.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    pendingOwner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer.\n', '   */\n', '  function claimOwnership() onlyPendingOwner public {\n', '    emit OwnershipTransferred(owner, pendingOwner);\n', '    owner = pendingOwner;\n', '    pendingOwner = address(0);\n', '  }\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', 'contract CanReclaimToken is Ownable {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  /**\n', '   * @dev Reclaim all ERC20Basic compatible tokens\n', '   * @param token ERC20Basic The address of the token contract\n', '   */\n', '  function reclaimToken(ERC20Basic token) external onlyOwner {\n', '    uint256 balance = token.balanceOf(this);\n', '    token.safeTransfer(owner, balance);\n', '  }\n', '\n', '}\n', '\n', 'contract Recoverable is CanReclaimToken, Claimable {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  /**\n', '   * @dev Transfer all ether held by the contract to the contract owner.\n', '   */\n', '  function reclaimEther() external onlyOwner {\n', '    owner.transfer(address(this).balance);\n', '  }\n', '\n', '}\n', '\n', 'contract TokenVault is Recoverable {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  /** The ERC20 token distribution the vault manages. */\n', '  ERC20Basic public token;\n', '\n', '  /** The amount of tokens that should be allocated prior to locking the vault. */\n', '  uint256 public tokensToBeAllocated;\n', '\n', '  /** The total amount of tokens allocated through setAllocation. */\n', '  uint256 public tokensAllocated;\n', '\n', '  /** Total amount of tokens claimed. */\n', '  uint256 public totalClaimed;\n', '\n', '  /** UNIX timestamp when the contract was locked. */\n', '  uint256 public lockedAt;\n', '\n', '  /** UNIX timestamp when the contract was unlocked. */\n', '  uint256 public unlockedAt;\n', '\n', '  /**\n', '   * Amount of time, in seconds, after locking that must pass before the vault\n', '   * can be unlocked.\n', '   */\n', '  uint256 public vestingPeriod = 0;\n', '\n', '  /** Mapping of accounts to token allocations. */\n', '  mapping (address => uint256) public allocations;\n', '\n', '  /** Mapping of tokens claimed by a beneficiary. */\n', '  mapping (address => uint256) public claimed;\n', '\n', '\n', '  /** Event to track that allocations have been set and the vault has been locked. */\n', '  event Locked();\n', '\n', '  /** Event to track when the vault has been unlocked. */\n', '  event Unlocked();\n', '\n', '  /**\n', '   * Event to track successful allocation of amount and bonus amount.\n', '   * @param beneficiary Account that allocation is for\n', '   * @param amount Amount of tokens allocated\n', '   */\n', '  event Allocated(address indexed beneficiary, uint256 amount);\n', '\n', '  /**\n', '   * Event to track a beneficiary receiving an allotment of tokens.\n', '   * @param beneficiary Account that received tokens\n', '   * @param amount Amount of tokens received\n', '   */\n', '  event Distributed(address indexed beneficiary, uint256 amount);\n', '\n', '\n', '  /** Ensure the vault is able to be loaded. */\n', '  modifier vaultLoading() {\n', '    require(lockedAt == 0, "Expected vault to be loadable");\n', '    _;\n', '  }\n', '\n', '  /** Ensure the vault has been locked. */\n', '  modifier vaultLocked() {\n', '    require(lockedAt > 0, "Expected vault to be locked");\n', '    _;\n', '  }\n', '\n', '  /** Ensure the vault has been unlocked. */\n', '  modifier vaultUnlocked() {\n', '    require(unlockedAt > 0, "Expected the vault to be unlocked");\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @notice Creates a TokenVault contract that stores a token distribution.\n', '   * @param _token The address of the ERC20 token the vault is for\n', '   * @param _tokensToBeAllocated The amount of tokens that will be allocated\n', '   * prior to locking\n', '   * @param _vestingPeriod The amount of time, in seconds, that must pass\n', '   * after locking in the allocations and then unlocking the allocations for\n', '   * claiming\n', '   */\n', '  constructor(\n', '    ERC20Basic _token,\n', '    uint256 _tokensToBeAllocated,\n', '    uint256 _vestingPeriod\n', '  )\n', '    public\n', '  {\n', '    require(address(_token) != address(0), "Token address should not be blank");\n', '    require(_tokensToBeAllocated > 0, "Token allocation should be greater than zero");\n', '\n', '    token = _token;\n', '    tokensToBeAllocated = _tokensToBeAllocated;\n', '    vestingPeriod = _vestingPeriod;\n', '  }\n', '\n', '  /**\n', '   * @notice Function to set allocations for accounts.\n', '   * @dev To be called by owner, likely in a scripted fashion.\n', '   * @param _beneficiary The address to allocate tokens for\n', '   * @param _amount The amount of tokens to be allocated and made available\n', '   * once unlocked\n', '   * @return true if allocation has been set for beneficiary, false if not\n', '   */\n', '  function setAllocation(\n', '    address _beneficiary,\n', '    uint256 _amount\n', '  )\n', '    external\n', '    onlyOwner\n', '    vaultLoading\n', '    returns(bool)\n', '  {\n', '    require(_beneficiary != address(0), "Beneficiary of allocation must not be blank");\n', '    require(_amount != 0, "Amount of allocation must not be zero");\n', '    require(allocations[_beneficiary] == 0, "Allocation amount for this beneficiary is not already set");\n', '\n', '    // Update the storage\n', '    allocations[_beneficiary] = allocations[_beneficiary].add(_amount);\n', '    tokensAllocated = tokensAllocated.add(_amount);\n', '\n', '    emit Allocated(_beneficiary, _amount);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @notice Finalize setting of allocations and begin the lock up (vesting) period.\n', '   * @dev Should be called after every allocation has been set.\n', '   * @return true if the vault has been successfully locked\n', '   */\n', '  function lock() external onlyOwner vaultLoading {\n', '    require(tokensAllocated == tokensToBeAllocated, "Expected to allocate all tokens");\n', '    require(token.balanceOf(address(this)) == tokensAllocated, "Vault must own enough tokens to distribute");\n', '\n', '    // solium-disable-next-line security/no-block-members\n', '    lockedAt = block.timestamp;\n', '\n', '    emit Locked();\n', '  }\n', '\n', '  /**\n', '   * @notice Unlock the vault, allowing the tokens to be distributed to their\n', '   * beneficiaries.\n', '   * @dev Must be locked prior to unlocking. Also, the vestingPeriod must be up.\n', '   */\n', '  function unlock() external onlyOwner vaultLocked {\n', '    require(unlockedAt == 0, "Must not be unlocked yet");\n', '    // solium-disable-next-line security/no-block-members\n', '    require(block.timestamp >= lockedAt.add(vestingPeriod), "Lock up must be over");\n', '\n', '    // solium-disable-next-line security/no-block-members\n', '    unlockedAt = block.timestamp;\n', '\n', '    emit Unlocked();\n', '  }\n', '\n', '  /**\n', '   * @notice Claim whatever tokens account are allocated to the sender.\n', '   * @dev Can only be called once contract has been unlocked.\n', '   * @return true if balance successfully distributed to sender, false otherwise\n', '   */\n', '  function claim() public vaultUnlocked returns(bool) {\n', '    return _transferTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @notice Utility function to actually transfer allocated tokens to their\n', '   * owners.\n', '   * @dev Can only be called by the owner. To be used in case an investor would\n', '   * like their tokens transferred directly for them. Most likely by a script.\n', '   * @param _beneficiary Address to transfer tokens to\n', '   * @return true if balance transferred to beneficiary, false otherwise\n', '   */\n', '  function transferFor(\n', '    address _beneficiary\n', '  )\n', '    public\n', '    onlyOwner\n', '    vaultUnlocked\n', '    returns(bool)\n', '  {\n', '    return _transferTokens(_beneficiary);\n', '  }\n', '\n', '  /****************\n', '   *** Internal ***\n', '   ****************/\n', '\n', '  /**\n', '   * @dev Calculate the number of tokens a beneficiary can claim.\n', '   * @param _beneficiary Address to check for\n', '   * @return The amount of tokens available to be claimed\n', '   */\n', '  function _claimableTokens(address _beneficiary) internal view returns(uint256) {\n', '    return allocations[_beneficiary].sub(claimed[_beneficiary]);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to transfer an amount of tokens to a beneficiary.\n', '   * @param _beneficiary Account to transfer tokens to. The amount is derived\n', '   * from the claimable amount in the vault\n', '   * @return true if tokens transferred successfully, false if not\n', '   */\n', '  function _transferTokens(address _beneficiary) internal returns(bool) {\n', '    uint256 _amount = _claimableTokens(_beneficiary);\n', '    require(_amount > 0, "Tokens to claim must be greater than zero");\n', '\n', '    claimed[_beneficiary] = claimed[_beneficiary].add(_amount);\n', '    totalClaimed = totalClaimed.add(_amount);\n', '\n', '    token.safeTransfer(_beneficiary, _amount);\n', '\n', '    emit Distributed(_beneficiary, _amount);\n', '\n', '    return true;\n', '  }\n', '\n', '}']
['pragma solidity 0.4.23;\n', '// produced by the Solididy File Flattener (c) David Appleton 2018\n', '// contact : dave@akomba.com\n', '// released under Apache 2.0 licence\n', '// input  /Users/zacharykilgore/src/flexa/smart-contracts/contracts/TokenVault.sol\n', '// flattened :  Saturday, 05-Jan-19 14:47:14 UTC\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract Claimable is Ownable {\n', '  address public pendingOwner;\n', '\n', '  /**\n', '   * @dev Modifier throws if called by any account other than the pendingOwner.\n', '   */\n', '  modifier onlyPendingOwner() {\n', '    require(msg.sender == pendingOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to set the pendingOwner address.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    pendingOwner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer.\n', '   */\n', '  function claimOwnership() onlyPendingOwner public {\n', '    emit OwnershipTransferred(owner, pendingOwner);\n', '    owner = pendingOwner;\n', '    pendingOwner = address(0);\n', '  }\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', 'contract CanReclaimToken is Ownable {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  /**\n', '   * @dev Reclaim all ERC20Basic compatible tokens\n', '   * @param token ERC20Basic The address of the token contract\n', '   */\n', '  function reclaimToken(ERC20Basic token) external onlyOwner {\n', '    uint256 balance = token.balanceOf(this);\n', '    token.safeTransfer(owner, balance);\n', '  }\n', '\n', '}\n', '\n', 'contract Recoverable is CanReclaimToken, Claimable {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  /**\n', '   * @dev Transfer all ether held by the contract to the contract owner.\n', '   */\n', '  function reclaimEther() external onlyOwner {\n', '    owner.transfer(address(this).balance);\n', '  }\n', '\n', '}\n', '\n', 'contract TokenVault is Recoverable {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  /** The ERC20 token distribution the vault manages. */\n', '  ERC20Basic public token;\n', '\n', '  /** The amount of tokens that should be allocated prior to locking the vault. */\n', '  uint256 public tokensToBeAllocated;\n', '\n', '  /** The total amount of tokens allocated through setAllocation. */\n', '  uint256 public tokensAllocated;\n', '\n', '  /** Total amount of tokens claimed. */\n', '  uint256 public totalClaimed;\n', '\n', '  /** UNIX timestamp when the contract was locked. */\n', '  uint256 public lockedAt;\n', '\n', '  /** UNIX timestamp when the contract was unlocked. */\n', '  uint256 public unlockedAt;\n', '\n', '  /**\n', '   * Amount of time, in seconds, after locking that must pass before the vault\n', '   * can be unlocked.\n', '   */\n', '  uint256 public vestingPeriod = 0;\n', '\n', '  /** Mapping of accounts to token allocations. */\n', '  mapping (address => uint256) public allocations;\n', '\n', '  /** Mapping of tokens claimed by a beneficiary. */\n', '  mapping (address => uint256) public claimed;\n', '\n', '\n', '  /** Event to track that allocations have been set and the vault has been locked. */\n', '  event Locked();\n', '\n', '  /** Event to track when the vault has been unlocked. */\n', '  event Unlocked();\n', '\n', '  /**\n', '   * Event to track successful allocation of amount and bonus amount.\n', '   * @param beneficiary Account that allocation is for\n', '   * @param amount Amount of tokens allocated\n', '   */\n', '  event Allocated(address indexed beneficiary, uint256 amount);\n', '\n', '  /**\n', '   * Event to track a beneficiary receiving an allotment of tokens.\n', '   * @param beneficiary Account that received tokens\n', '   * @param amount Amount of tokens received\n', '   */\n', '  event Distributed(address indexed beneficiary, uint256 amount);\n', '\n', '\n', '  /** Ensure the vault is able to be loaded. */\n', '  modifier vaultLoading() {\n', '    require(lockedAt == 0, "Expected vault to be loadable");\n', '    _;\n', '  }\n', '\n', '  /** Ensure the vault has been locked. */\n', '  modifier vaultLocked() {\n', '    require(lockedAt > 0, "Expected vault to be locked");\n', '    _;\n', '  }\n', '\n', '  /** Ensure the vault has been unlocked. */\n', '  modifier vaultUnlocked() {\n', '    require(unlockedAt > 0, "Expected the vault to be unlocked");\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @notice Creates a TokenVault contract that stores a token distribution.\n', '   * @param _token The address of the ERC20 token the vault is for\n', '   * @param _tokensToBeAllocated The amount of tokens that will be allocated\n', '   * prior to locking\n', '   * @param _vestingPeriod The amount of time, in seconds, that must pass\n', '   * after locking in the allocations and then unlocking the allocations for\n', '   * claiming\n', '   */\n', '  constructor(\n', '    ERC20Basic _token,\n', '    uint256 _tokensToBeAllocated,\n', '    uint256 _vestingPeriod\n', '  )\n', '    public\n', '  {\n', '    require(address(_token) != address(0), "Token address should not be blank");\n', '    require(_tokensToBeAllocated > 0, "Token allocation should be greater than zero");\n', '\n', '    token = _token;\n', '    tokensToBeAllocated = _tokensToBeAllocated;\n', '    vestingPeriod = _vestingPeriod;\n', '  }\n', '\n', '  /**\n', '   * @notice Function to set allocations for accounts.\n', '   * @dev To be called by owner, likely in a scripted fashion.\n', '   * @param _beneficiary The address to allocate tokens for\n', '   * @param _amount The amount of tokens to be allocated and made available\n', '   * once unlocked\n', '   * @return true if allocation has been set for beneficiary, false if not\n', '   */\n', '  function setAllocation(\n', '    address _beneficiary,\n', '    uint256 _amount\n', '  )\n', '    external\n', '    onlyOwner\n', '    vaultLoading\n', '    returns(bool)\n', '  {\n', '    require(_beneficiary != address(0), "Beneficiary of allocation must not be blank");\n', '    require(_amount != 0, "Amount of allocation must not be zero");\n', '    require(allocations[_beneficiary] == 0, "Allocation amount for this beneficiary is not already set");\n', '\n', '    // Update the storage\n', '    allocations[_beneficiary] = allocations[_beneficiary].add(_amount);\n', '    tokensAllocated = tokensAllocated.add(_amount);\n', '\n', '    emit Allocated(_beneficiary, _amount);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @notice Finalize setting of allocations and begin the lock up (vesting) period.\n', '   * @dev Should be called after every allocation has been set.\n', '   * @return true if the vault has been successfully locked\n', '   */\n', '  function lock() external onlyOwner vaultLoading {\n', '    require(tokensAllocated == tokensToBeAllocated, "Expected to allocate all tokens");\n', '    require(token.balanceOf(address(this)) == tokensAllocated, "Vault must own enough tokens to distribute");\n', '\n', '    // solium-disable-next-line security/no-block-members\n', '    lockedAt = block.timestamp;\n', '\n', '    emit Locked();\n', '  }\n', '\n', '  /**\n', '   * @notice Unlock the vault, allowing the tokens to be distributed to their\n', '   * beneficiaries.\n', '   * @dev Must be locked prior to unlocking. Also, the vestingPeriod must be up.\n', '   */\n', '  function unlock() external onlyOwner vaultLocked {\n', '    require(unlockedAt == 0, "Must not be unlocked yet");\n', '    // solium-disable-next-line security/no-block-members\n', '    require(block.timestamp >= lockedAt.add(vestingPeriod), "Lock up must be over");\n', '\n', '    // solium-disable-next-line security/no-block-members\n', '    unlockedAt = block.timestamp;\n', '\n', '    emit Unlocked();\n', '  }\n', '\n', '  /**\n', '   * @notice Claim whatever tokens account are allocated to the sender.\n', '   * @dev Can only be called once contract has been unlocked.\n', '   * @return true if balance successfully distributed to sender, false otherwise\n', '   */\n', '  function claim() public vaultUnlocked returns(bool) {\n', '    return _transferTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @notice Utility function to actually transfer allocated tokens to their\n', '   * owners.\n', '   * @dev Can only be called by the owner. To be used in case an investor would\n', '   * like their tokens transferred directly for them. Most likely by a script.\n', '   * @param _beneficiary Address to transfer tokens to\n', '   * @return true if balance transferred to beneficiary, false otherwise\n', '   */\n', '  function transferFor(\n', '    address _beneficiary\n', '  )\n', '    public\n', '    onlyOwner\n', '    vaultUnlocked\n', '    returns(bool)\n', '  {\n', '    return _transferTokens(_beneficiary);\n', '  }\n', '\n', '  /****************\n', '   *** Internal ***\n', '   ****************/\n', '\n', '  /**\n', '   * @dev Calculate the number of tokens a beneficiary can claim.\n', '   * @param _beneficiary Address to check for\n', '   * @return The amount of tokens available to be claimed\n', '   */\n', '  function _claimableTokens(address _beneficiary) internal view returns(uint256) {\n', '    return allocations[_beneficiary].sub(claimed[_beneficiary]);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to transfer an amount of tokens to a beneficiary.\n', '   * @param _beneficiary Account to transfer tokens to. The amount is derived\n', '   * from the claimable amount in the vault\n', '   * @return true if tokens transferred successfully, false if not\n', '   */\n', '  function _transferTokens(address _beneficiary) internal returns(bool) {\n', '    uint256 _amount = _claimableTokens(_beneficiary);\n', '    require(_amount > 0, "Tokens to claim must be greater than zero");\n', '\n', '    claimed[_beneficiary] = claimed[_beneficiary].add(_amount);\n', '    totalClaimed = totalClaimed.add(_amount);\n', '\n', '    token.safeTransfer(_beneficiary, _amount);\n', '\n', '    emit Distributed(_beneficiary, _amount);\n', '\n', '    return true;\n', '  }\n', '\n', '}']
