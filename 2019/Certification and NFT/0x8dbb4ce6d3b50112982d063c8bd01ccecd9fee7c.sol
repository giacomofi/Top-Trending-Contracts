['pragma solidity ^0.5.0;\n', '\n', '\n', 'contract IOwnable {\n', '\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnerChanged(address _oldOwner, address _newOwner);\n', '\n', '    function changeOwner(address _newOwner) public;\n', '    function acceptOwnership() public;\n', '}\n', '\n', 'contract IVerificationList is IOwnable {\n', '\n', '    event Accept(address _address);\n', '    event Reject(address _address);\n', '    event SendToCheck(address _address);\n', '    event RemoveFromList(address _address);\n', '    \n', '    function isAccepted(address _address) public view returns (bool);\n', '    function isRejected(address _address) public view returns (bool);\n', '    function isOnCheck(address _address) public view returns (bool);\n', '    function isInList(address _address) public view returns (bool);\n', '    function isNotInList(address _address) public view returns (bool);\n', '    function isAcceptedOrNotInList(address _address) public view returns (bool);\n', '    function getState(address _address) public view returns (uint8);\n', '    \n', '    function accept(address _address) public;\n', '    function reject(address _address) public;\n', '    function toCheck(address _address) public;\n', '    function remove(address _address) public;\n', '}\n', '\n', 'contract Ownable is IOwnable {\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        emit OwnerChanged(address(0), owner);\n', '    }\n', '\n', '    function changeOwner(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnerChanged(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', 'contract VerificationList is IVerificationList, Ownable {\n', '\n', '    enum States { NOT_IN_LIST, ON_CHECK, ACCEPTED, REJECTED }\n', '\n', '    mapping (address => States) private states;\n', '\n', '    modifier inList(address _address) {\n', '        require(isInList(_address));\n', '        _;\n', '    }\n', '\n', '    function isAccepted(address _address) public view returns (bool) {\n', '        return states[_address] == States.ACCEPTED;\n', '    }\n', '\n', '    function isRejected(address _address) public view returns (bool) {\n', '        return states[_address] == States.REJECTED;\n', '    }\n', '\n', '    function isOnCheck(address _address) public view returns (bool) {\n', '        return states[_address] == States.ON_CHECK;\n', '    }\n', '\n', '    function isInList(address _address) public view returns (bool) {\n', '        return states[_address] != States.NOT_IN_LIST;\n', '    }\n', '    \n', '    function isNotInList(address _address) public view returns (bool) {\n', '        return states[_address] == States.NOT_IN_LIST;\n', '    }\n', '\n', '    function isAcceptedOrNotInList(address _address) public view returns (bool) {\n', '        return states[_address] == States.NOT_IN_LIST || states[_address] == States.ACCEPTED;\n', '    }\n', '    \n', '    function getState(address _address) public view returns (uint8) {\n', '        return uint8(states[_address]);\n', '    }\n', '\n', '    function accept(address _address) public onlyOwner inList(_address) {\n', '        if (isAccepted(_address)) return;\n', '        states[_address] = States.ACCEPTED;\n', '        emit Accept(_address);\n', '    }\n', '\n', '    function reject(address _address) public onlyOwner inList(_address) {\n', '        if (isRejected(_address)) return;\n', '        states[_address] = States.REJECTED;\n', '        emit Reject(_address);\n', '    }\n', '\n', '    function toCheck(address _address) public onlyOwner {\n', '        if (isOnCheck(_address)) return;\n', '        states[_address] = States.ON_CHECK;\n', '        emit SendToCheck(_address);\n', '    }\n', '\n', '    function remove(address _address) public onlyOwner {\n', '        if (isNotInList(_address)) return;\n', '        states[_address] = States.NOT_IN_LIST;\n', '        emit RemoveFromList(_address);\n', '    }\n', '}']