['// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address who) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts\\open-zeppelin-contracts\\math\\SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Multiplies two unsigned integers, reverts on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two unsigned integers, reverts on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '     * reverts when dividing by zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\ERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', ' * Originally based on code by FirstBlood:\n', ' * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' *\n', ' * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n', " * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n", ' * compliant implementations may not do it.\n', ' */\n', 'contract ERC20 is IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowed;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    /**\n', '     * @dev Total number of tokens in existence\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param owner The address to query the balance of.\n', '     * @return An uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        return _balances[owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param owner address The address which owns the funds.\n', '     * @param spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowed[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer token for a specified address\n', '     * @param to The address to transfer to.\n', '     * @param value The amount to be transferred.\n', '     */\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param spender The address which will spend the funds.\n', '     * @param value The amount of tokens to be spent.\n', '     */\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        _approve(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another.\n', '     * Note that while this function emits an Approval event, this is not required as per the specification,\n', '     * and other compliant implementations may not emit the event.\n', '     * @param from address The address which you want to send tokens from\n', '     * @param to address The address which you want to transfer to\n', '     * @param value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '        _transfer(from, to, value);\n', '        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed_[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * Emits an Approval event.\n', '     * @param spender The address which will spend the funds.\n', '     * @param addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed_[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * Emits an Approval event.\n', '     * @param spender The address which will spend the funds.\n', '     * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer token for a specified addresses\n', '     * @param from The address to transfer from.\n', '     * @param to The address to transfer to.\n', '     * @param value The amount to be transferred.\n', '     */\n', '    function _transfer(address from, address to, uint256 value) internal {\n', '        require(to != address(0));\n', '\n', '        _balances[from] = _balances[from].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that mints an amount of the token and assigns it to\n', '     * an account. This encapsulates the modification of balances such that the\n', '     * proper events are emitted.\n', '     * @param account The account that will receive the created tokens.\n', '     * @param value The amount that will be created.\n', '     */\n', '    function _mint(address account, uint256 value) internal {\n', '        require(account != address(0));\n', '\n', '        _totalSupply = _totalSupply.add(value);\n', '        _balances[account] = _balances[account].add(value);\n', '        emit Transfer(address(0), account, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that burns an amount of the token of a given\n', '     * account.\n', '     * @param account The account whose tokens will be burnt.\n', '     * @param value The amount that will be burnt.\n', '     */\n', '    function _burn(address account, uint256 value) internal {\n', '        require(account != address(0));\n', '\n', '        _totalSupply = _totalSupply.sub(value);\n', '        _balances[account] = _balances[account].sub(value);\n', '        emit Transfer(account, address(0), value);\n', '    }\n', '\n', '    /**\n', "     * @dev Approve an address to spend another addresses' tokens.\n", '     * @param owner The address that owns the tokens.\n', '     * @param spender The address that will spend the tokens.\n', '     * @param value The number of tokens that can be spent.\n', '     */\n', '    function _approve(address owner, address spender, uint256 value) internal {\n', '        require(spender != address(0));\n', '        require(owner != address(0));\n', '\n', '        _allowed[owner][spender] = value;\n', '        emit Approval(owner, spender, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that burns an amount of the token of a given\n', "     * account, deducting from the sender's allowance for said account. Uses the\n", '     * internal burn function.\n', '     * Emits an Approval event (reflecting the reduced allowance).\n', '     * @param account The account whose tokens will be burnt.\n', '     * @param value The amount that will be burnt.\n', '     */\n', '    function _burnFrom(address account, uint256 value) internal {\n', '        _burn(account, value);\n', '        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n', '    }\n', '}\n', '\n', '// File: contracts\\open-zeppelin-contracts\\access\\Roles.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    /**\n', '     * @dev give an account access to this role\n', '     */\n', '    function add(Role storage role, address account) internal {\n', '        require(account != address(0));\n', '        require(!has(role, account));\n', '\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '    /**\n', "     * @dev remove an account's access to this role\n", '     */\n', '    function remove(Role storage role, address account) internal {\n', '        require(account != address(0));\n', '        require(has(role, account));\n', '\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '    /**\n', '     * @dev check if an account has this role\n', '     * @return bool\n', '     */\n', '    function has(Role storage role, address account) internal view returns (bool) {\n', '        require(account != address(0));\n', '        return role.bearer[account];\n', '    }\n', '}\n', '\n', '// File: contracts\\open-zeppelin-contracts\\access\\roles\\MinterRole.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', 'contract MinterRole {\n', '    using Roles for Roles.Role;\n', '\n', '    event MinterAdded(address indexed account);\n', '    event MinterRemoved(address indexed account);\n', '\n', '    Roles.Role private _minters;\n', '\n', '    constructor () internal {\n', '        _addMinter(msg.sender);\n', '    }\n', '\n', '    modifier onlyMinter() {\n', '        require(isMinter(msg.sender));\n', '        _;\n', '    }\n', '\n', '    function isMinter(address account) public view returns (bool) {\n', '        return _minters.has(account);\n', '    }\n', '\n', '    function addMinter(address account) public onlyMinter {\n', '        _addMinter(account);\n', '    }\n', '\n', '    function renounceMinter() public {\n', '        _removeMinter(msg.sender);\n', '    }\n', '\n', '    function _addMinter(address account) internal {\n', '        _minters.add(account);\n', '        emit MinterAdded(account);\n', '    }\n', '\n', '    function _removeMinter(address account) internal {\n', '        _minters.remove(account);\n', '        emit MinterRemoved(account);\n', '    }\n', '}\n', '\n', '// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\ERC20Mintable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20Mintable\n', ' * @dev ERC20 minting logic\n', ' */\n', 'contract ERC20Mintable is ERC20, MinterRole {\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param to The address that will receive the minted tokens.\n', '     * @param value The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address to, uint256 value) public onlyMinter returns (bool) {\n', '        _mint(to, value);\n', '        return true;\n', '    }\n', '}\n', '\n', '// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\SafeERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        require(token.transfer(to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        require(token.transferFrom(from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        require((value == 0) || (token.allowance(msg.sender, spender) == 0));\n', '        require(token.approve(spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        require(token.approve(spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n', '        require(token.approve(spender, newAllowance));\n', '    }\n', '}\n', '\n', '// File: contracts\\open-zeppelin-contracts\\utils\\ReentrancyGuard.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title Helps contracts guard against reentrancy attacks.\n', ' * @author Remco Bloemen <remco@2╧Ç.com>, Eenae <alexey@mixbytes.io>\n', ' * @dev If you mark a function `nonReentrant`, you should also\n', ' * mark it `external`.\n', ' */\n', 'contract ReentrancyGuard {\n', '    /// @dev counter to allow mutex lock with only one SSTORE operation\n', '    uint256 private _guardCounter;\n', '\n', '    constructor () internal {\n', '        // The counter starts at one to prevent changing it from zero to a non-zero\n', '        // value, which is a more expensive operation.\n', '        _guardCounter = 1;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        _guardCounter += 1;\n', '        uint256 localCounter = _guardCounter;\n', '        _;\n', '        require(localCounter == _guardCounter);\n', '    }\n', '}\n', '\n', '// File: contracts\\open-zeppelin-contracts\\crowdsale\\Crowdsale.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether. This contract implements\n', ' * such functionality in its most fundamental form and can be extended to provide additional\n', ' * functionality and/or custom behavior.\n', ' * The external interface represents the basic interface for purchasing tokens, and conform\n', ' * the base architecture for crowdsales. They are *not* intended to be modified / overridden.\n', ' * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n', " * the methods to add functionality. Consider using 'super' where appropriate to concatenate\n", ' * behavior.\n', ' */\n', 'contract Crowdsale is ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    // The token being sold\n', '    IERC20 private _token;\n', '\n', '    // Address where funds are collected\n', '    address payable private _wallet;\n', '\n', '    // How many token units a buyer gets per wei.\n', '    // The rate is the conversion between wei and the smallest and indivisible token unit.\n', '    // So, if you are using a rate of 1 with a ERC20Detailed token with 3 decimals called TOK\n', '    // 1 wei will give you 1 unit, or 0.001 TOK.\n', '    uint256 private _rate;\n', '\n', '    // Amount of wei raised\n', '    uint256 private _weiRaised;\n', '\n', '    /**\n', '     * Event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param value weis paid for purchase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    /**\n', '     * @param rate Number of token units a buyer gets per wei\n', '     * @dev The rate is the conversion between wei and the smallest and indivisible\n', '     * token unit. So, if you are using a rate of 1 with a ERC20Detailed token\n', '     * with 3 decimals called TOK, 1 wei will give you 1 unit, or 0.001 TOK.\n', '     * @param wallet Address where collected funds will be forwarded to\n', '     * @param token Address of the token being sold\n', '     */\n', '    constructor (uint256 rate, address payable wallet, IERC20 token) public {\n', '        require(rate > 0);\n', '        require(wallet != address(0));\n', '        require(address(token) != address(0));\n', '\n', '        _rate = rate;\n', '        _wallet = wallet;\n', '        _token = token;\n', '    }\n', '\n', '    /**\n', '     * @dev fallback function ***DO NOT OVERRIDE***\n', '     * Note that other contracts will transfer fund with a base gas stipend\n', '     * of 2300, which is not enough to call buyTokens. Consider calling\n', '     * buyTokens directly when purchasing tokens from a contract.\n', '     */\n', '    function () external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @return the token being sold.\n', '     */\n', '    function token() public view returns (IERC20) {\n', '        return _token;\n', '    }\n', '\n', '    /**\n', '     * @return the address where funds are collected.\n', '     */\n', '    function wallet() public view returns (address payable) {\n', '        return _wallet;\n', '    }\n', '\n', '    /**\n', '     * @return the number of token units a buyer gets per wei.\n', '     */\n', '    function rate() public view returns (uint256) {\n', '        return _rate;\n', '    }\n', '\n', '    /**\n', '     * @return the amount of wei raised.\n', '     */\n', '    function weiRaised() public view returns (uint256) {\n', '        return _weiRaised;\n', '    }\n', '\n', '    /**\n', '     * @dev low level token purchase ***DO NOT OVERRIDE***\n', "     * This function has a non-reentrancy guard, so it shouldn't be called by\n", '     * another `nonReentrant` function.\n', '     * @param beneficiary Recipient of the token purchase\n', '     */\n', '    function buyTokens(address beneficiary) public nonReentrant payable {\n', '        uint256 weiAmount = msg.value;\n', '        _preValidatePurchase(beneficiary, weiAmount);\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '        // update state\n', '        _weiRaised = _weiRaised.add(weiAmount);\n', '\n', '        _processPurchase(beneficiary, tokens);\n', '        emit TokensPurchased(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '        _updatePurchasingState(beneficiary, weiAmount);\n', '\n', '        _forwardFunds();\n', '        _postValidatePurchase(beneficiary, weiAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met.\n', '     * Use `super` in contracts that inherit from Crowdsale to extend their validations.\n', "     * Example from CappedCrowdsale.sol's _preValidatePurchase method:\n", '     *     super._preValidatePurchase(beneficiary, weiAmount);\n', '     *     require(weiRaised().add(weiAmount) <= cap);\n', '     * @param beneficiary Address performing the token purchase\n', '     * @param weiAmount Value in wei involved in the purchase\n', '     */\n', '    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\n', '        require(beneficiary != address(0));\n', '        require(weiAmount != 0);\n', '    }\n', '\n', '    /**\n', '     * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid\n', '     * conditions are not met.\n', '     * @param beneficiary Address performing the token purchase\n', '     * @param weiAmount Value in wei involved in the purchase\n', '     */\n', '    function _postValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\n', '        // solhint-disable-previous-line no-empty-blocks\n', '    }\n', '\n', '    /**\n', '     * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends\n', '     * its tokens.\n', '     * @param beneficiary Address performing the token purchase\n', '     * @param tokenAmount Number of tokens to be emitted\n', '     */\n', '    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\n', '        _token.safeTransfer(beneficiary, tokenAmount);\n', '    }\n', '\n', '    /**\n', "     * @dev Executed when a purchase has been validated and is ready to be executed. Doesn't necessarily emit/send\n", '     * tokens.\n', '     * @param beneficiary Address receiving the tokens\n', '     * @param tokenAmount Number of tokens to be purchased\n', '     */\n', '    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {\n', '        _deliverTokens(beneficiary, tokenAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Override for extensions that require an internal state to check for validity (current user contributions,\n', '     * etc.)\n', '     * @param beneficiary Address receiving the tokens\n', '     * @param weiAmount Value in wei involved in the purchase\n', '     */\n', '    function _updatePurchasingState(address beneficiary, uint256 weiAmount) internal {\n', '        // solhint-disable-previous-line no-empty-blocks\n', '    }\n', '\n', '    /**\n', '     * @dev Override to extend the way in which ether is converted to tokens.\n', '     * @param weiAmount Value in wei to be converted into tokens\n', '     * @return Number of tokens that can be purchased with the specified _weiAmount\n', '     */\n', '    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\n', '        return weiAmount.mul(_rate);\n', '    }\n', '\n', '    /**\n', '     * @dev Determines how ETH is stored/forwarded on purchases.\n', '     */\n', '    function _forwardFunds() internal {\n', '        _wallet.transfer(msg.value);\n', '    }\n', '}\n', '\n', '// File: contracts\\open-zeppelin-contracts\\crowdsale\\validation\\CappedCrowdsale.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @title CappedCrowdsale\n', ' * @dev Crowdsale with a limit for total contributions.\n', ' */\n', 'contract CappedCrowdsale is Crowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 private _cap;\n', '\n', '    /**\n', '     * @dev Constructor, takes maximum amount of wei accepted in the crowdsale.\n', '     * @param cap Max amount of wei to be contributed\n', '     */\n', '    constructor (uint256 cap) public {\n', '        require(cap > 0);\n', '        _cap = cap;\n', '    }\n', '\n', '    /**\n', '     * @return the cap of the crowdsale.\n', '     */\n', '    function cap() public view returns (uint256) {\n', '        return _cap;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks whether the cap has been reached.\n', '     * @return Whether the cap was reached\n', '     */\n', '    function capReached() public view returns (bool) {\n', '        return weiRaised() >= _cap;\n', '    }\n', '\n', '    /**\n', '     * @dev Extend parent behavior requiring purchase to respect the funding cap.\n', '     * @param beneficiary Token purchaser\n', '     * @param weiAmount Amount of wei contributed\n', '     */\n', '    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\n', '        super._preValidatePurchase(beneficiary, weiAmount);\n', '        require(weiRaised().add(weiAmount) <= _cap);\n', '    }\n', '}\n', '\n', '// File: contracts\\open-zeppelin-contracts\\crowdsale\\emission\\MintedCrowdsale.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @title MintedCrowdsale\n', ' * @dev Extension of Crowdsale contract whose tokens are minted in each purchase.\n', ' * Token ownership should be transferred to MintedCrowdsale for minting.\n', ' */\n', 'contract MintedCrowdsale is Crowdsale {\n', '    /**\n', '     * @dev Overrides delivery by minting tokens upon purchase.\n', '     * @param beneficiary Token purchaser\n', '     * @param tokenAmount Number of tokens to be minted\n', '     */\n', '    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\n', '        // Potentially dangerous assumption about the type of the token.\n', '        require(ERC20Mintable(address(token())).mint(beneficiary, tokenAmount));\n', '    }\n', '}\n', '\n', '// File: contracts\\open-zeppelin-contracts\\crowdsale\\validation\\TimedCrowdsale.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @title TimedCrowdsale\n', ' * @dev Crowdsale accepting contributions only within a time frame.\n', ' */\n', 'contract TimedCrowdsale is Crowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 private _openingTime;\n', '    uint256 private _closingTime;\n', '\n', '    /**\n', '     * @dev Reverts if not in crowdsale time range.\n', '     */\n', '    modifier onlyWhileOpen {\n', '        require(isOpen());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Constructor, takes crowdsale opening and closing times.\n', '     * @param openingTime Crowdsale opening time\n', '     * @param closingTime Crowdsale closing time\n', '     */\n', '    constructor (uint256 openingTime, uint256 closingTime) public {\n', '        // solhint-disable-next-line not-rely-on-time\n', '        require(openingTime >= block.timestamp);\n', '        require(closingTime > openingTime);\n', '\n', '        _openingTime = openingTime;\n', '        _closingTime = closingTime;\n', '    }\n', '\n', '    /**\n', '     * @return the crowdsale opening time.\n', '     */\n', '    function openingTime() public view returns (uint256) {\n', '        return _openingTime;\n', '    }\n', '\n', '    /**\n', '     * @return the crowdsale closing time.\n', '     */\n', '    function closingTime() public view returns (uint256) {\n', '        return _closingTime;\n', '    }\n', '\n', '    /**\n', '     * @return true if the crowdsale is open, false otherwise.\n', '     */\n', '    function isOpen() public view returns (bool) {\n', '        // solhint-disable-next-line not-rely-on-time\n', '        return block.timestamp >= _openingTime && block.timestamp <= _closingTime;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '     * @return Whether crowdsale period has elapsed\n', '     */\n', '    function hasClosed() public view returns (bool) {\n', '        // solhint-disable-next-line not-rely-on-time\n', '        return block.timestamp > _closingTime;\n', '    }\n', '\n', '    /**\n', '     * @dev Extend parent behavior requiring to be within contributing period\n', '     * @param beneficiary Token purchaser\n', '     * @param weiAmount Amount of wei contributed\n', '     */\n', '    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal onlyWhileOpen view {\n', '        super._preValidatePurchase(beneficiary, weiAmount);\n', '    }\n', '}\n', '\n', '// File: contracts\\open-zeppelin-contracts\\crowdsale\\distribution\\FinalizableCrowdsale.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of Crowdsale with a one-off finalization action, where one\n', ' * can do extra work after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is TimedCrowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    bool private _finalized;\n', '\n', '    event CrowdsaleFinalized();\n', '\n', '    constructor () internal {\n', '        _finalized = false;\n', '    }\n', '\n', '    /**\n', '     * @return true if the crowdsale is finalized, false otherwise.\n', '     */\n', '    function finalized() public view returns (bool) {\n', '        return _finalized;\n', '    }\n', '\n', '    /**\n', '     * @dev Must be called after crowdsale ends, to do some extra finalization\n', "     * work. Calls the contract's finalization function.\n", '     */\n', '    function finalize() public {\n', '        require(!_finalized);\n', '        require(hasClosed());\n', '\n', '        _finalized = true;\n', '\n', '        _finalization();\n', '        emit CrowdsaleFinalized();\n', '    }\n', '\n', '    /**\n', '     * @dev Can be overridden to add finalization logic. The overriding function\n', '     * should call super._finalization() to ensure the chain of finalization is\n', '     * executed entirely.\n', '     */\n', '    function _finalization() internal {\n', '        // solhint-disable-previous-line no-empty-blocks\n', '    }\n', '}\n', '\n', '// File: contracts\\open-zeppelin-contracts\\ownership\\Secondary.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title Secondary\n', ' * @dev A Secondary contract can only be used by its primary account (the one that created it)\n', ' */\n', 'contract Secondary {\n', '    address private _primary;\n', '\n', '    event PrimaryTransferred(\n', '        address recipient\n', '    );\n', '\n', '    /**\n', '     * @dev Sets the primary account to the one that is creating the Secondary contract.\n', '     */\n', '    constructor () internal {\n', '        _primary = msg.sender;\n', '        emit PrimaryTransferred(_primary);\n', '    }\n', '\n', '    /**\n', '     * @dev Reverts if called from any account other than the primary.\n', '     */\n', '    modifier onlyPrimary() {\n', '        require(msg.sender == _primary);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return the address of the primary.\n', '     */\n', '    function primary() public view returns (address) {\n', '        return _primary;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers contract to a new primary.\n', '     * @param recipient The address of new primary.\n', '     */\n', '    function transferPrimary(address recipient) public onlyPrimary {\n', '        require(recipient != address(0));\n', '        _primary = recipient;\n', '        emit PrimaryTransferred(_primary);\n', '    }\n', '}\n', '\n', '// File: contracts\\open-zeppelin-contracts\\payment\\escrow\\Escrow.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', ' /**\n', '  * @title Escrow\n', '  * @dev Base escrow contract, holds funds designated for a payee until they\n', '  * withdraw them.\n', '  * @dev Intended usage: This contract (and derived escrow contracts) should be a\n', '  * standalone contract, that only interacts with the contract that instantiated\n', '  * it. That way, it is guaranteed that all Ether will be handled according to\n', '  * the Escrow rules, and there is no need to check for payable functions or\n', '  * transfers in the inheritance tree. The contract that uses the escrow as its\n', '  * payment method should be its primary, and provide public methods redirecting\n', "  * to the escrow's deposit and withdraw.\n", '  */\n', 'contract Escrow is Secondary {\n', '    using SafeMath for uint256;\n', '\n', '    event Deposited(address indexed payee, uint256 weiAmount);\n', '    event Withdrawn(address indexed payee, uint256 weiAmount);\n', '\n', '    mapping(address => uint256) private _deposits;\n', '\n', '    function depositsOf(address payee) public view returns (uint256) {\n', '        return _deposits[payee];\n', '    }\n', '\n', '    /**\n', '     * @dev Stores the sent amount as credit to be withdrawn.\n', '     * @param payee The destination address of the funds.\n', '     */\n', '    function deposit(address payee) public onlyPrimary payable {\n', '        uint256 amount = msg.value;\n', '        _deposits[payee] = _deposits[payee].add(amount);\n', '\n', '        emit Deposited(payee, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw accumulated balance for a payee.\n', '     * @param payee The address whose funds will be withdrawn and transferred to.\n', '     */\n', '    function withdraw(address payable payee) public onlyPrimary {\n', '        uint256 payment = _deposits[payee];\n', '\n', '        _deposits[payee] = 0;\n', '\n', '        payee.transfer(payment);\n', '\n', '        emit Withdrawn(payee, payment);\n', '    }\n', '}\n', '\n', '// File: contracts\\open-zeppelin-contracts\\payment\\escrow\\ConditionalEscrow.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', ' * @title ConditionalEscrow\n', ' * @dev Base abstract escrow to only allow withdrawal if a condition is met.\n', ' * @dev Intended usage: See Escrow.sol. Same usage guidelines apply here.\n', ' */\n', 'contract ConditionalEscrow is Escrow {\n', '    /**\n', '     * @dev Returns whether an address is allowed to withdraw their funds. To be\n', '     * implemented by derived contracts.\n', '     * @param payee The destination address of the funds.\n', '     */\n', '    function withdrawalAllowed(address payee) public view returns (bool);\n', '\n', '    function withdraw(address payable payee) public {\n', '        require(withdrawalAllowed(payee));\n', '        super.withdraw(payee);\n', '    }\n', '}\n', '\n', '// File: contracts\\open-zeppelin-contracts\\payment\\escrow\\RefundEscrow.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', ' * @title RefundEscrow\n', ' * @dev Escrow that holds funds for a beneficiary, deposited from multiple\n', ' * parties.\n', ' * @dev Intended usage: See Escrow.sol. Same usage guidelines apply here.\n', ' * @dev The primary account (that is, the contract that instantiates this\n', ' * contract) may deposit, close the deposit period, and allow for either\n', ' * withdrawal by the beneficiary, or refunds to the depositors. All interactions\n', ' * with RefundEscrow will be made through the primary contract. See the\n', ' * RefundableCrowdsale contract for an example of RefundEscrowΓÇÖs use.\n', ' */\n', 'contract RefundEscrow is ConditionalEscrow {\n', '    enum State { Active, Refunding, Closed }\n', '\n', '    event RefundsClosed();\n', '    event RefundsEnabled();\n', '\n', '    State private _state;\n', '    address payable private _beneficiary;\n', '\n', '    /**\n', '     * @dev Constructor.\n', '     * @param beneficiary The beneficiary of the deposits.\n', '     */\n', '    constructor (address payable beneficiary) public {\n', '        require(beneficiary != address(0));\n', '        _beneficiary = beneficiary;\n', '        _state = State.Active;\n', '    }\n', '\n', '    /**\n', '     * @return the current state of the escrow.\n', '     */\n', '    function state() public view returns (State) {\n', '        return _state;\n', '    }\n', '\n', '    /**\n', '     * @return the beneficiary of the escrow.\n', '     */\n', '    function beneficiary() public view returns (address) {\n', '        return _beneficiary;\n', '    }\n', '\n', '    /**\n', '     * @dev Stores funds that may later be refunded.\n', '     * @param refundee The address funds will be sent to if a refund occurs.\n', '     */\n', '    function deposit(address refundee) public payable {\n', '        require(_state == State.Active);\n', '        super.deposit(refundee);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows for the beneficiary to withdraw their funds, rejecting\n', '     * further deposits.\n', '     */\n', '    function close() public onlyPrimary {\n', '        require(_state == State.Active);\n', '        _state = State.Closed;\n', '        emit RefundsClosed();\n', '    }\n', '\n', '    /**\n', '     * @dev Allows for refunds to take place, rejecting further deposits.\n', '     */\n', '    function enableRefunds() public onlyPrimary {\n', '        require(_state == State.Active);\n', '        _state = State.Refunding;\n', '        emit RefundsEnabled();\n', '    }\n', '\n', '    /**\n', "     * @dev Withdraws the beneficiary's funds.\n", '     */\n', '    function beneficiaryWithdraw() public {\n', '        require(_state == State.Closed);\n', '        _beneficiary.transfer(address(this).balance);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns whether refundees can withdraw their deposits (be refunded). The overriden function receives a\n', "     * 'payee' argument, but we ignore it here since the condition is global, not per-payee.\n", '     */\n', '    function withdrawalAllowed(address) public view returns (bool) {\n', '        return _state == State.Refunding;\n', '    }\n', '}\n', '\n', '// File: contracts\\open-zeppelin-contracts\\crowdsale\\distribution\\RefundableCrowdsale.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title RefundableCrowdsale\n', ' * @dev Extension of Crowdsale contract that adds a funding goal, and the possibility of users getting a refund\n', ' * if goal is not met.\n', ' *\n', ' * Deprecated, use RefundablePostDeliveryCrowdsale instead. Note that if you allow tokens to be traded before the goal\n', ' * is met, then an attack is possible in which the attacker purchases tokens from the crowdsale and when they sees that\n', ' * the goal is unlikely to be met, they sell their tokens (possibly at a discount). The attacker will be refunded when\n', ' * the crowdsale is finalized, and the users that purchased from them will be left with worthless tokens.\n', ' */\n', 'contract RefundableCrowdsale is FinalizableCrowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    // minimum amount of funds to be raised in weis\n', '    uint256 private _goal;\n', '\n', '    // refund escrow used to hold funds while crowdsale is running\n', '    RefundEscrow private _escrow;\n', '\n', '    /**\n', '     * @dev Constructor, creates RefundEscrow.\n', '     * @param goal Funding goal\n', '     */\n', '    constructor (uint256 goal) public {\n', '        require(goal > 0);\n', '        _escrow = new RefundEscrow(wallet());\n', '        _goal = goal;\n', '    }\n', '\n', '    /**\n', '     * @return minimum amount of funds to be raised in wei.\n', '     */\n', '    function goal() public view returns (uint256) {\n', '        return _goal;\n', '    }\n', '\n', '    /**\n', '     * @dev Investors can claim refunds here if crowdsale is unsuccessful\n', '     * @param refundee Whose refund will be claimed.\n', '     */\n', '    function claimRefund(address payable refundee) public {\n', '        require(finalized());\n', '        require(!goalReached());\n', '\n', '        _escrow.withdraw(refundee);\n', '    }\n', '\n', '    /**\n', '     * @dev Checks whether funding goal was reached.\n', '     * @return Whether funding goal was reached\n', '     */\n', '    function goalReached() public view returns (bool) {\n', '        return weiRaised() >= _goal;\n', '    }\n', '\n', '    /**\n', '     * @dev escrow finalization task, called when finalize() is called\n', '     */\n', '    function _finalization() internal {\n', '        if (goalReached()) {\n', '            _escrow.close();\n', '            _escrow.beneficiaryWithdraw();\n', '        } else {\n', '            _escrow.enableRefunds();\n', '        }\n', '\n', '        super._finalization();\n', '    }\n', '\n', '    /**\n', '     * @dev Overrides Crowdsale fund forwarding, sending funds to escrow.\n', '     */\n', '    function _forwardFunds() internal {\n', '        _escrow.deposit.value(msg.value)(msg.sender);\n', '    }\n', '}\n', '\n', '// File: contracts\\open-zeppelin-contracts\\crowdsale\\distribution\\PostDeliveryCrowdsale.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @title PostDeliveryCrowdsale\n', ' * @dev Crowdsale that locks tokens from withdrawal until it ends.\n', ' */\n', 'contract PostDeliveryCrowdsale is TimedCrowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) private _balances;\n', '\n', '    /**\n', '     * @dev Withdraw tokens only after crowdsale ends.\n', '     * @param beneficiary Whose tokens will be withdrawn.\n', '     */\n', '    function withdrawTokens(address beneficiary) public {\n', '        require(hasClosed());\n', '        uint256 amount = _balances[beneficiary];\n', '        require(amount > 0);\n', '        _balances[beneficiary] = 0;\n', '        _deliverTokens(beneficiary, amount);\n', '    }\n', '\n', '    /**\n', '     * @return the balance of an account.\n', '     */\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev Overrides parent by storing balances instead of issuing tokens right away.\n', '     * @param beneficiary Token purchaser\n', '     * @param tokenAmount Amount of tokens purchased\n', '     */\n', '    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {\n', '        _balances[beneficiary] = _balances[beneficiary].add(tokenAmount);\n', '    }\n', '\n', '}\n', '\n', '// File: contracts\\open-zeppelin-contracts\\crowdsale\\distribution\\RefundablePostDeliveryCrowdsale.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title RefundablePostDeliveryCrowdsale\n', ' * @dev Extension of RefundableCrowdsale contract that only delivers the tokens\n', ' * once the crowdsale has closed and the goal met, preventing refunds to be issued\n', ' * to token holders.\n', ' */\n', 'contract RefundablePostDeliveryCrowdsale is RefundableCrowdsale, PostDeliveryCrowdsale {\n', '    function withdrawTokens(address beneficiary) public {\n', '        require(finalized());\n', '        require(goalReached());\n', '\n', '        super.withdrawTokens(beneficiary);\n', '    }\n', '}\n', '\n', '// File: contracts\\open-zeppelin-contracts\\ownership\\Ownable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * @notice Renouncing to ownership will leave the contract without an owner.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts\\crowdsale\\CMRPDCrowdsale.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title CMRPDCrowdsale\n', ' * @dev CMRPDCrowdsale is an ERC-20 tokens crowdsale. Contract uses ETH as a fund raising currency. Features:\n', ' *   - Capped - has a cap (maximum, hard cap) on ETH funds raised\n', ' *   - Minted - new tokens are minted during crowdsale\n', ' *   - Timed - has opening and closing time\n', ' *   - Refundable - has a goal (minimum, soft cap), if not exceeded, funds are returned to investors\n', ' *   - PostDelivery - tokens are withdrawn after crowsale is successfully finished\n', ' * @author TokenMint (visit https://tokenmint.io)\n', ' */\n', 'contract CMRPDCrowdsale is CappedCrowdsale, MintedCrowdsale, RefundablePostDeliveryCrowdsale, Ownable {\n', '\n', '    /**\n', '    * @dev Constructor, creates CMRPDCrowdsale.\n', '    * @param openingTime Crowdsale opening time\n', '    * @param closingTime Crowdsale closing time\n', '    * @param rate How many smallest token units a buyer gets per wei\n', '    * @param fundRaisingAddress Address where raised funds will be transfered if crowdsale is successful\n', '    * @param tokenContractAddress ERC20Mintable contract address of the token being sold, already deployed\n', '    * @param cap Cap on funds raised (maximum, hard cap)\n', '    * @param goal Goal on funds raised (minimum, soft cap)\n', '    * @param feeReceiverAddress Address that receives fees for contract deployment\n', '    */\n', '    constructor (\n', '        uint256 openingTime,\n', '        uint256 closingTime,\n', '        uint256 rate,\n', '        address payable fundRaisingAddress,\n', '        ERC20Mintable tokenContractAddress,\n', '        uint256 cap,\n', '        uint256 goal,\n', '        address payable feeReceiverAddress\n', '    )\n', '        public payable\n', '        Crowdsale(rate, fundRaisingAddress, tokenContractAddress)\n', '        CappedCrowdsale(cap)\n', '        TimedCrowdsale(openingTime, closingTime)\n', '        RefundableCrowdsale(goal)\n', '    {\n', '      // As goal needs to be met for a successful crowdsale\n', '      // the value needs to less or equal than a cap which is limit for accepted funds\n', '      require(goal <= cap);\n', '    }\n', '}']