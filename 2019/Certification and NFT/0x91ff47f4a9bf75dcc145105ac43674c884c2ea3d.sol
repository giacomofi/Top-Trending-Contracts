['pragma solidity > 0.4.99 <0.6.0;\n', '\n', 'interface IPayeeShare {\n', '    function payeePartsToSell() external view returns (uint256);\n', '    function payeePricePerPart() external view returns (uint256);\n', '}\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract AssetSplitContracts {\n', '    \n', '     struct Contract {\n', '        address payable contractAddress;\n', '        address payable creatorAddress;\n', '        uint256 contractType;\n', '        uint256 a_uint256;\n', '        string a_string;\n', '        uint256 b_uint256;\n', '        string b_string;\n', '        uint256 c_uint256;\n', '        string c_string;\n', '        bool active;\n', '    }\n', '    \n', '    Contract[] public contracts;\n', '\n', '    struct SaleContract {\n', '        address payable saleContractAddress;\n', '    }\n', '    \n', '    SaleContract[] public saleContracts;\n', '    \n', '    mapping (address => uint) public saleContractCount;\n', '    \n', '    string public constant createdBy = "AssetSplit.org - the guys who cut the pizza";\n', '    \n', '    event AddedContract(address contractAddress, address contractCreator, uint256 contractType);\n', '    \n', '    bytes32 password = 0x75673d0f21e100acda4f6dc8b3ac99a142af1d843cb1936898d854e930409f10;\n', '\n', '    using SafeMath for uint256;\n', '    \n', '    function addSaleContract(address payable _contractAddress, string memory _password, bytes32 _newPassword) public {\n', '        bytes32 pw = keccak256(bytes(_password));\n', '        require(password == pw);\n', '        require(password != _newPassword);\n', '        password = _newPassword;\n', '        saleContracts.push(SaleContract(_contractAddress)).sub(1);\n', '        saleContractCount[_contractAddress] = saleContractCount[_contractAddress].add(1);\n', '    }\n', '    \n', '    function editSaleContract(uint _id, address payable _newContractAddress, string memory _password, bytes32 _newPassword) public {\n', '        bytes32 pw = keccak256(bytes(_password));\n', '        require(password == pw);\n', '        require(_newPassword != "");\n', '        password = _newPassword;\n', '        SaleContract storage myContract = saleContracts[_id];\n', '        myContract.saleContractAddress = _newContractAddress;\n', '        saleContractCount[_newContractAddress] = saleContractCount[_newContractAddress].add(1);\n', '    }\n', '    \n', '    function addContract(address payable _contractAddress, address payable _creatorAddress, uint256 _contractType) public returns (bool success) {\n', '        require (saleContractCount[msg.sender] > 0);\n', '        removeOldFirst(_contractAddress);\n', '        contracts.push(Contract(_contractAddress, _creatorAddress, _contractType, 0, "", 0, "", 0, "", true));\n', '        emit AddedContract(_contractAddress, _creatorAddress, _contractType);\n', '        return true;\n', '    }\n', '\n', '    function editContract (uint _id, uint256 _a_uint256, string memory _a_string, uint256 _b_uint256, string memory _b_string, uint256 _c_uint256, string memory _c_string) public returns (bool success) {\n', '        require (saleContractCount[msg.sender] > 0);\n', '        Contract storage myContract = contracts[_id];\n', '        myContract.a_uint256 = _a_uint256;\n', '        myContract.a_string = _a_string;\n', '        myContract.b_uint256 = _b_uint256;\n', '        myContract.b_string = _b_string;\n', '        myContract.c_uint256 = _c_uint256;\n', '        myContract.c_string = _c_string;\n', '        return true;\n', '    }\n', '    \n', '    function removeOldFirst(address _contractAddress) internal {\n', '        for (uint i = 0; i < contracts.length; i++) {    \n', '            Contract storage myContracts = contracts[i];\n', '            if (myContracts.contractAddress == _contractAddress) {\n', '                myContracts.active = false;\n', '            }\n', '        }\n', '    }\n', '    \n', '    function countActiveType(uint256 _type) internal view returns (uint256) {\n', '        uint256 counter = 0;\n', '        for (uint i = 0; i < contracts.length; i++) {\n', '            Contract memory myContracts = contracts[i];\n', '        if (myContracts.contractType == _type && myContracts.active == true) {\n', '            counter++;\n', '          }\n', '        }\n', '        return counter;\n', '    }\n', '    \n', '   function getContractsByType(uint256 _type) public view returns (uint[] memory) {\n', '        uint[] memory result = new uint[](countActiveType(_type));\n', '        uint counter = 0;\n', '        for (uint i = 0; i < contracts.length; i++) {\n', '            Contract memory myContracts = contracts[i];\n', '          if (myContracts.contractType == _type && myContracts.active == true) {\n', '            result[counter] = i;\n', '            counter++;\n', '          }\n', '        }\n', '        return result;\n', '    }\n', '  \n', '     function getMyContractsByType(uint256 _type) public view returns (uint[] memory) {\n', '        uint[] memory result = new uint[](countActiveType(_type));\n', '        uint counter = 0;\n', '        for (uint i = 0; i < contracts.length; i++) {\n', '        Contract memory myContracts = contracts[i];\n', '          if (myContracts.contractType == _type && myContracts.creatorAddress == msg.sender && myContracts.active == true) {\n', '            result[counter] = i;\n', '            counter++;\n', '          }\n', '        }\n', '        return result;\n', '    }\n', '    \n', '    function cleanSellShareOutput() public {\n', '        for (uint i = 0; i < contracts.length; i++) {    \n', '            Contract storage myContracts = contracts[i];\n', '            IPayeeShare shareContract;\n', '            shareContract = IPayeeShare(myContracts.contractAddress);\n', '            if (shareContract.payeePartsToSell() < 1 || shareContract.payeePricePerPart() == 0) {\n', '                myContracts.active = false;\n', '            }\n', '        }\n', '    }\n', '    \n', '\n', '}']
['pragma solidity > 0.4.99 <0.6.0;\n', '\n', 'interface IPayeeShare {\n', '    function payeePartsToSell() external view returns (uint256);\n', '    function payeePricePerPart() external view returns (uint256);\n', '}\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract AssetSplitContracts {\n', '    \n', '     struct Contract {\n', '        address payable contractAddress;\n', '        address payable creatorAddress;\n', '        uint256 contractType;\n', '        uint256 a_uint256;\n', '        string a_string;\n', '        uint256 b_uint256;\n', '        string b_string;\n', '        uint256 c_uint256;\n', '        string c_string;\n', '        bool active;\n', '    }\n', '    \n', '    Contract[] public contracts;\n', '\n', '    struct SaleContract {\n', '        address payable saleContractAddress;\n', '    }\n', '    \n', '    SaleContract[] public saleContracts;\n', '    \n', '    mapping (address => uint) public saleContractCount;\n', '    \n', '    string public constant createdBy = "AssetSplit.org - the guys who cut the pizza";\n', '    \n', '    event AddedContract(address contractAddress, address contractCreator, uint256 contractType);\n', '    \n', '    bytes32 password = 0x75673d0f21e100acda4f6dc8b3ac99a142af1d843cb1936898d854e930409f10;\n', '\n', '    using SafeMath for uint256;\n', '    \n', '    function addSaleContract(address payable _contractAddress, string memory _password, bytes32 _newPassword) public {\n', '        bytes32 pw = keccak256(bytes(_password));\n', '        require(password == pw);\n', '        require(password != _newPassword);\n', '        password = _newPassword;\n', '        saleContracts.push(SaleContract(_contractAddress)).sub(1);\n', '        saleContractCount[_contractAddress] = saleContractCount[_contractAddress].add(1);\n', '    }\n', '    \n', '    function editSaleContract(uint _id, address payable _newContractAddress, string memory _password, bytes32 _newPassword) public {\n', '        bytes32 pw = keccak256(bytes(_password));\n', '        require(password == pw);\n', '        require(_newPassword != "");\n', '        password = _newPassword;\n', '        SaleContract storage myContract = saleContracts[_id];\n', '        myContract.saleContractAddress = _newContractAddress;\n', '        saleContractCount[_newContractAddress] = saleContractCount[_newContractAddress].add(1);\n', '    }\n', '    \n', '    function addContract(address payable _contractAddress, address payable _creatorAddress, uint256 _contractType) public returns (bool success) {\n', '        require (saleContractCount[msg.sender] > 0);\n', '        removeOldFirst(_contractAddress);\n', '        contracts.push(Contract(_contractAddress, _creatorAddress, _contractType, 0, "", 0, "", 0, "", true));\n', '        emit AddedContract(_contractAddress, _creatorAddress, _contractType);\n', '        return true;\n', '    }\n', '\n', '    function editContract (uint _id, uint256 _a_uint256, string memory _a_string, uint256 _b_uint256, string memory _b_string, uint256 _c_uint256, string memory _c_string) public returns (bool success) {\n', '        require (saleContractCount[msg.sender] > 0);\n', '        Contract storage myContract = contracts[_id];\n', '        myContract.a_uint256 = _a_uint256;\n', '        myContract.a_string = _a_string;\n', '        myContract.b_uint256 = _b_uint256;\n', '        myContract.b_string = _b_string;\n', '        myContract.c_uint256 = _c_uint256;\n', '        myContract.c_string = _c_string;\n', '        return true;\n', '    }\n', '    \n', '    function removeOldFirst(address _contractAddress) internal {\n', '        for (uint i = 0; i < contracts.length; i++) {    \n', '            Contract storage myContracts = contracts[i];\n', '            if (myContracts.contractAddress == _contractAddress) {\n', '                myContracts.active = false;\n', '            }\n', '        }\n', '    }\n', '    \n', '    function countActiveType(uint256 _type) internal view returns (uint256) {\n', '        uint256 counter = 0;\n', '        for (uint i = 0; i < contracts.length; i++) {\n', '            Contract memory myContracts = contracts[i];\n', '        if (myContracts.contractType == _type && myContracts.active == true) {\n', '            counter++;\n', '          }\n', '        }\n', '        return counter;\n', '    }\n', '    \n', '   function getContractsByType(uint256 _type) public view returns (uint[] memory) {\n', '        uint[] memory result = new uint[](countActiveType(_type));\n', '        uint counter = 0;\n', '        for (uint i = 0; i < contracts.length; i++) {\n', '            Contract memory myContracts = contracts[i];\n', '          if (myContracts.contractType == _type && myContracts.active == true) {\n', '            result[counter] = i;\n', '            counter++;\n', '          }\n', '        }\n', '        return result;\n', '    }\n', '  \n', '     function getMyContractsByType(uint256 _type) public view returns (uint[] memory) {\n', '        uint[] memory result = new uint[](countActiveType(_type));\n', '        uint counter = 0;\n', '        for (uint i = 0; i < contracts.length; i++) {\n', '        Contract memory myContracts = contracts[i];\n', '          if (myContracts.contractType == _type && myContracts.creatorAddress == msg.sender && myContracts.active == true) {\n', '            result[counter] = i;\n', '            counter++;\n', '          }\n', '        }\n', '        return result;\n', '    }\n', '    \n', '    function cleanSellShareOutput() public {\n', '        for (uint i = 0; i < contracts.length; i++) {    \n', '            Contract storage myContracts = contracts[i];\n', '            IPayeeShare shareContract;\n', '            shareContract = IPayeeShare(myContracts.contractAddress);\n', '            if (shareContract.payeePartsToSell() < 1 || shareContract.payeePricePerPart() == 0) {\n', '                myContracts.active = false;\n', '            }\n', '        }\n', '    }\n', '    \n', '\n', '}']
