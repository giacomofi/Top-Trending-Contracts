['pragma solidity ^0.5.0;\n', '\n', 'interface TeamInterface {\n', '\n', '    function isOwner() external view returns (bool);\n', '\n', '    function isAdmin(address _sender) external view returns (bool);\n', '\n', '    function isDev(address _sender) external view returns (bool);\n', '\n', '}\n', '\n', 'interface WorksInterface {\n', '\n', '    function addWorks(\n', '        bytes32 _worksID,\n', '        bytes32 _artistID, \n', '        uint8 _debrisNum, \n', '        uint256 _price, \n', '        uint256 _beginTime\n', '    ) \n', '        external;\n', '\n', '    function configRule(\n', '        bytes32 _worksID,\n', '        uint8 _firstBuyLimit, \n', '        uint256 _freezeGap, \n', '        uint256 _protectGap, \n', '        uint256 _increaseRatio,\n', '        uint256 _discountGap, \n', '        uint256 _discountRatio, \n', '\n', '        uint8[3] calldata _firstAllot, \n', '        uint8[3] calldata _againAllot, \n', '        uint8[3] calldata _lastAllot \n', '    ) \n', '        external;\n', '\n', '    function publish(bytes32 _worksID, uint256 _beginTime) external;\n', '\n', '    function close(bytes32 _worksID) external;\n', '\n', '    function getWorks(bytes32 _worksID) external view returns (uint8, uint256, uint256, uint256, bool);\n', '\n', '    function getDebris(bytes32 _worksID, uint8 _debrisID) external view \n', '        returns (uint256, address, address, bytes32, bytes32, uint256);\n', '\n', '    function getRule(bytes32 _worksID) external view \n', '        returns (uint8, uint256, uint256, uint256, uint256, uint256, uint8[3] memory, uint8[3] memory, uint8[3] memory);\n', '\n', '    function hasWorks(bytes32 _worksID) external view returns (bool);\n', '\n', '    function hasDebris(bytes32 _worksID, uint8 _debrisID) external view returns (bool);\n', '\n', '    function isPublish(bytes32 _worksID) external view returns (bool);\n', '\n', '    function isStart(bytes32 _worksID) external view returns (bool);\n', '\n', '    function isProtect(bytes32 _worksID, uint8 _debrisID) external view returns (bool);\n', '\n', '    function isSecond(bytes32 _worksID, uint8 _debrisID) external view returns (bool);\n', '\n', '    function isGameOver(bytes32 _worksID) external view returns (bool);\n', '    \n', '    function isFinish(bytes32 _worksID, bytes32 _unionID) external view returns (bool);\n', '\n', '    function hasFirstUnionIds(bytes32 _worksID, bytes32 _unionID) external view returns (bool);\n', '\n', '    function hasSecondUnionIds(bytes32 _worksID, bytes32 _unionID) external view returns (bool);\n', '\n', '    function getFirstUnionIds(bytes32 _worksID) external view returns (bytes32[] memory);\n', '\n', '    function getSecondUnionIds(bytes32 _worksID) external view returns (bytes32[] memory);\n', '\n', '    function getPrice(bytes32 _worksID) external view returns (uint256);\n', '\n', '    function getDebrisPrice(bytes32 _worksID, uint8 _debrisID) external view returns (uint256);\n', '\n', '    function getDebrisStatus(bytes32 _worksID, uint8 _debrisID) external view returns (uint256[4] memory, uint256, bytes32);\n', '\n', '    function getInitPrice(bytes32 _worksID, uint8 _debrisID) external view returns (uint256);\n', '\n', '    function getLastPrice(bytes32 _worksID, uint8 _debrisID) external view returns (uint256);\n', '\n', '    function getLastBuyer(bytes32 _worksID, uint8 _debrisID) external view returns (address payable);\n', '\n', '    function getLastUnionId(bytes32 _worksID, uint8 _debrisID) external view returns (bytes32);\n', '\n', '    function getFreezeGap(bytes32 _worksID) external view returns (uint256);\n', '\n', '    function getFirstBuyLimit(bytes32 _worksID) external view returns (uint256);\n', '\n', '    function getArtistId(bytes32 _worksID) external view returns (bytes32);\n', '\n', '    function getDebrisNum(bytes32 _worksID) external view returns (uint8);\n', '\n', '    function getAllot(bytes32 _worksID, uint8 _flag) external view returns (uint8[3] memory);\n', '\n', '    function getAllot(bytes32 _worksID, uint8 _flag, uint8 _element) external view returns (uint8);\n', '\n', '    function getPools(bytes32 _worksID) external view returns (uint256);\n', '\n', '    function getPoolsAllot(bytes32 _worksID) external view returns (uint256, uint256[3] memory, uint8[3] memory);\n', '\n', '    function getStartHourglass(bytes32 _worksID) external view returns (uint256);\n', '\n', '    function getWorksStatus(bytes32 _worksID) external view returns (uint256, uint256, uint256, bytes32);\n', '\n', '    function getProtectHourglass(bytes32 _worksID, uint8 _debrisID) external view returns (uint256);\n', '\n', '    function getDiscountHourglass(bytes32 _worksID, uint8 _debrisID) external view returns (uint256);\n', '\n', '    function updateDebris(bytes32 _worksID, uint8 _debrisID, bytes32 _unionID, address _sender) external;\n', '\n', '    function updateFirstBuyer(bytes32 _worksID, uint8 _debrisID, bytes32 _unionID, address _sender) external;\n', '\n', '    function updateBuyNum(bytes32 _worksID, uint8 _debrisID) external;\n', '\n', '    function finish(bytes32 _worksID, bytes32 _unionID) external;\n', '\n', '    function updatePools(bytes32 _worksID, uint256 _value) external;\n', '\n', '    function updateFirstUnionIds(bytes32 _worksID, bytes32 _unionID) external;\n', '\n', '    function updateSecondUnionIds(bytes32 _worksID, bytes32 _unionID) external;\n', '\n', ' }\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' * change notes:  original SafeMath library from OpenZeppelin modified by Inventor\n', ' * - added sqrt\n', ' * - added sq\n', ' * - added pwr \n', ' * - changed asserts to requires with error log outputs\n', ' * - removed div, its useless\n', ' */\n', 'library SafeMath {\n', '    \n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) \n', '        internal \n', '        pure \n', '        returns (uint256 c) \n', '    {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        require(c / a == b, "SafeMath mul failed");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (uint256) \n', '    {\n', '        require(b <= a, "SafeMath sub failed");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (uint256 c) \n', '    {\n', '        c = a + b;\n', '        require(c >= a, "SafeMath add failed");\n', '        return c;\n', '    }\n', '    \n', '    /**\n', '     * @dev gives square root of given x.\n', '     */\n', '    function sqrt(uint256 x)\n', '        internal\n', '        pure\n', '        returns (uint256 y) \n', '    {\n', '        uint256 z = ((add(x,1)) / 2);\n', '        y = x;\n', '        while (z < y) \n', '        {\n', '            y = z;\n', '            z = ((add((x / z),z)) / 2);\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * @dev gives square. multiplies x by x\n', '     */\n', '    function sq(uint256 x)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return (mul(x,x));\n', '    }\n', '    \n', '    /**\n', '     * @dev x to the power of y \n', '     */\n', '    function pwr(uint256 x, uint256 y)\n', '        internal \n', '        pure \n', '        returns (uint256)\n', '    {\n', '        if (x==0)\n', '            return (0);\n', '        else if (y==0)\n', '            return (1);\n', '        else \n', '        {\n', '            uint256 z = x;\n', '            for (uint256 i=1; i < y; i++)\n', '                z = mul(z,x);\n', '            return (z);\n', '        }\n', '    }\n', '\n', '} \n', '\n', 'library Datasets {\n', '\n', '    struct Player {\n', '        address[] ethAddress; \n', '        bytes32 referrer; \n', '        address payable lastAddress; \n', '        uint256 time;\n', '    }\n', '\n', '    struct MyWorks { \n', '        address ethAddress; \n', '        bytes32 worksID; \n', '        uint256 totalInput; \n', '        uint256 totalOutput; \n', '        uint256 time; \n', '    }\n', '\n', '\n', '    struct Works {\n', '        bytes32 worksID; \n', '        bytes32 artistID; \n', '        uint8 debrisNum; \n', '        uint256 price; \n', '        uint256 beginTime; \n', '        uint256 endTime;\n', '        bool isPublish; \n', '        bytes32 lastUnionID;\n', '    }\n', '\n', '    struct Debris {\n', '        uint8 debrisID; \n', '        bytes32 worksID; \n', '        uint256 initPrice; \n', '        uint256 lastPrice; \n', '        uint256 buyNum; \n', '        address payable firstBuyer; \n', '        address payable lastBuyer; \n', '        bytes32 firstUnionID; \n', '        bytes32 lastUnionID; \n', '        uint256 lastTime; \n', '    }\n', '    \n', '    struct Rule {       \n', '        uint8 firstBuyLimit; \n', '        uint256 freezeGap; \n', '        uint256 protectGap; \n', '        uint256 increaseRatio;\n', '        uint256 discountGap; \n', '        uint256 discountRatio; \n', '\n', '        uint8[3] firstAllot; \n', '        uint8[3] againAllot;\n', '        uint8[3] lastAllot; \n', '    }\n', '\n', '    struct PlayerCount {\n', '        uint256 lastTime; \n', '        uint256 firstBuyNum; \n', '        uint256 firstAmount; \n', '        uint256 secondAmount; \n', '        uint256 rewardAmount;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Player Contract\n', ' * @dev http://www.puzzlebid.com/\n', ' * @author PuzzleBID Game Team \n', ' * @dev Simon<<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="ddabaeb4afa4a5b09decebeef3beb2b0">[email&#160;protected]</a>>\n', ' */\n', 'contract Player {\n', '\n', '    using SafeMath for *;\n', '\n', '    TeamInterface private team; \n', '    WorksInterface private works; \n', '    \n', '    constructor(address _teamAddress, address _worksAddress) public {\n', '        require(_teamAddress != address(0) && _worksAddress != address(0));\n', '        team = TeamInterface(_teamAddress);\n', '        works = WorksInterface(_worksAddress);\n', '    }\n', '\n', '    function() external payable {\n', '        revert();\n', '    }\n', '\n', '    event OnUpgrade(address indexed _teamAddress, address indexed _worksAddress);\n', '    event OnRegister(\n', '        address indexed _address, \n', '        bytes32 _unionID, \n', '        bytes32 _referrer, \n', '        uint256 time\n', '    );\n', '    event OnUpdateLastAddress(bytes32 _unionID, address indexed _sender);\n', '    event OnUpdateLastTime(bytes32 _unionID, bytes32 _worksID, uint256 _time);\n', '    event OnUpdateFirstBuyNum(bytes32 _unionID, bytes32 _worksID, uint256 _firstBuyNum);\n', '    event OnUpdateSecondAmount(bytes32 _unionID, bytes32 _worksID, uint256 _amount);\n', '    event OnUpdateFirstAmount(bytes32 _unionID, bytes32 _worksID, uint256 _amount);\n', '    event OnUpdateReinvest(bytes32 _unionID, bytes32 _worksID, uint256 _amount);\n', '    event OnUpdateRewardAmount(bytes32 _unionID, bytes32 _worksID, uint256 _amount);\n', '    event OnUpdateMyWorks(\n', '        bytes32 _unionID, \n', '        address indexed _address, \n', '        bytes32 _worksID, \n', '        uint256 _totalInput, \n', '        uint256 _totalOutput,\n', '        uint256 _time\n', '    );\n', '\n', '    mapping(bytes32 => Datasets.Player) private playersByUnionId; \n', '    mapping(address => bytes32) private playersByAddress; \n', '    address[] private playerAddressSets; \n', '    bytes32[] private playersUnionIdSets; \n', '\n', '    mapping(bytes32 => mapping(bytes32 => Datasets.PlayerCount)) playerCount;\n', '\n', '   mapping(bytes32 => mapping(bytes32 => Datasets.MyWorks)) myworks; \n', '    \n', '    modifier onlyAdmin() {\n', '        require(team.isAdmin(msg.sender));\n', '        _;\n', '    }\n', '    \n', '    modifier onlyDev() {\n', '        require(team.isDev(msg.sender));\n', '        _;\n', '    }\n', '\n', '    function upgrade(address _teamAddress, address _worksAddress) external onlyAdmin() {\n', '        require(_teamAddress != address(0) && _worksAddress != address(0));\n', '        team = TeamInterface(_teamAddress);\n', '        works = WorksInterface(_worksAddress);\n', '        emit OnUpgrade(_teamAddress, _worksAddress);\n', '    }\n', '\n', '\n', '    function hasAddress(address _address) external view returns (bool) {\n', '        bool has = false;\n', '        for(uint256 i=0; i<playerAddressSets.length; i++) {\n', '            if(playerAddressSets[i] == _address) {\n', '                has = true;\n', '                break;\n', '            }\n', '        }\n', '        return has;\n', '    }\n', '\n', '    function hasUnionId(bytes32 _unionID) external view returns (bool) {\n', '        bool has = false;\n', '        for(uint256 i=0; i<playersUnionIdSets.length; i++) {\n', '            if(playersUnionIdSets[i] == _unionID) {\n', '                has = true;\n', '                break;\n', '            }\n', '        }\n', '        return has;\n', '    }\n', '\n', '    function getInfoByUnionId(bytes32 _unionID) external view returns (address payable, bytes32, uint256) {\n', '        return (\n', '            playersByUnionId[_unionID].lastAddress,\n', '            playersByUnionId[_unionID].referrer, \n', '            playersByUnionId[_unionID].time\n', '        );\n', '    }\n', '\n', '    function getUnionIdByAddress(address _address) external view returns (bytes32) {\n', '        return playersByAddress[_address];\n', '    }\n', '\n', '    function isFreeze(bytes32 _unionID, bytes32 _worksID) external view returns (bool) {\n', '        uint256 freezeGap = works.getFreezeGap(_worksID);\n', '        return playerCount[_unionID][_worksID].lastTime.add(freezeGap) < now ? false : true;\n', '    }\n', '\n', '    function getFirstBuyNum(bytes32 _unionID, bytes32 _worksID) external view returns (uint256) {\n', '        return playerCount[_unionID][_worksID].firstBuyNum;\n', '    }\n', '\n', '    function getSecondAmount(bytes32 _unionID, bytes32 _worksID) external view returns (uint256) {\n', '        return playerCount[_unionID][_worksID].secondAmount;\n', '    }\n', '\n', '    function getFirstAmount(bytes32 _unionID, bytes32 _worksID) external view returns (uint256) {\n', '        return playerCount[_unionID][_worksID].firstAmount;\n', '    }\n', '\n', '    function getLastAddress(bytes32 _unionID) external view returns (address payable) {\n', '        return playersByUnionId[_unionID].lastAddress;\n', '    }\n', '\n', '    function getRewardAmount(bytes32 _unionID, bytes32 _worksID) external view returns (uint256) {\n', '        return playerCount[_unionID][_worksID].rewardAmount;\n', '    }\n', '\n', '    function getFreezeHourglass(bytes32 _unionID, bytes32 _worksID) external view returns(uint256) {\n', '        uint256 freezeGap = works.getFreezeGap(_worksID);\n', '        if(playerCount[_unionID][_worksID].lastTime.add(freezeGap) > now) {\n', '            return playerCount[_unionID][_worksID].lastTime.add(freezeGap).sub(now);\n', '        }\n', '        return 0;\n', '    }\n', '\n', '    function getMyReport(bytes32 _unionID, bytes32 _worksID) external view returns (uint256, uint256, uint256) {\n', '        uint256 currInput = 0; \n', '        uint256 currOutput = 0;      \n', '        uint256 currFinishReward = 0; \n', '        uint8 lastAllot = works.getAllot(_worksID, 2, 0); \n', '\n', '        currInput = this.getFirstAmount(_unionID, _worksID).add(this.getSecondAmount(_unionID, _worksID));\n', '        currOutput = this.getRewardAmount(_unionID, _worksID);         \n', '        currFinishReward = this.getRewardAmount(_unionID, _worksID).add(works.getPools(_worksID).mul(lastAllot) / 100);\n', '        return (currInput, currOutput, currFinishReward);\n', '    }\n', '\n', '    function getMyStatus(bytes32 _unionID, bytes32 _worksID) external view returns (uint256, uint256, uint256, uint256, uint256) {\n', '        return (\n', '            playerCount[_unionID][_worksID].lastTime, \n', '            works.getFreezeGap(_worksID), \n', '            now, \n', '            playerCount[_unionID][_worksID].firstBuyNum,\n', '            works.getFirstBuyLimit(_worksID)\n', '        );\n', '    }\n', '\n', '    function getMyWorks(bytes32 _unionID, bytes32 _worksID) external view returns (address, bytes32, uint256, uint256, uint256) {\n', '        return (\n', '            myworks[_unionID][_worksID].ethAddress,\n', '            myworks[_unionID][_worksID].worksID,\n', '            myworks[_unionID][_worksID].totalInput,\n', '            myworks[_unionID][_worksID].totalOutput,\n', '            myworks[_unionID][_worksID].time\n', '        );\n', '    }\n', '\n', '    function isLegalPlayer(bytes32 _unionID, address _address) external view returns (bool) {\n', '        return (this.hasUnionId(_unionID) || this.hasAddress(_address)) && playersByAddress[_address] == _unionID;\n', '    }\n', '\n', '    function register(bytes32 _unionID, address payable _address, bytes32 _worksID, bytes32 _referrer) external onlyDev() returns (bool) {\n', '        require(_unionID != bytes32(0) && _address != address(0) && _worksID != bytes32(0));\n', '\n', '        if(this.hasAddress(_address)) {\n', '            if(playersByAddress[_address] != _unionID) {\n', '                revert();\n', '            } else {\n', '                return true;\n', '            }\n', '        }\n', '         \n', '        playersByUnionId[_unionID].ethAddress.push(_address);\n', '        if(_referrer != bytes32(0)) {\n', '            playersByUnionId[_unionID].referrer = _referrer;\n', '        }\n', '        playersByUnionId[_unionID].lastAddress = _address;\n', '        playersByUnionId[_unionID].time = now;\n', '\n', '        playersByAddress[_address] = _unionID;\n', '\n', '        playerAddressSets.push(_address);\n', '        if(this.hasUnionId(_unionID) == false) {\n', '            playersUnionIdSets.push(_unionID);\n', '            playerCount[_unionID][_worksID] = Datasets.PlayerCount(0, 0, 0, 0, 0);\n', '        }\n', '\n', '        emit OnRegister(_address, _unionID, _referrer, now);\n', '\n', '        return true;\n', '    }\n', '\n', '    function updateLastAddress(bytes32 _unionID, address payable _sender) external onlyDev() {\n', '        if(playersByUnionId[_unionID].lastAddress != _sender) {\n', '            playersByUnionId[_unionID].lastAddress = _sender;\n', '            emit OnUpdateLastAddress(_unionID, _sender);\n', '        }\n', '    }\n', '\n', '    function updateLastTime(bytes32 _unionID, bytes32 _worksID) external onlyDev() {\n', '        playerCount[_unionID][_worksID].lastTime = now;\n', '        emit OnUpdateLastTime(_unionID, _worksID, now);\n', '    }\n', '\n', '    function updateFirstBuyNum(bytes32 _unionID, bytes32 _worksID) external onlyDev() {\n', '        playerCount[_unionID][_worksID].firstBuyNum = playerCount[_unionID][_worksID].firstBuyNum.add(1);\n', '        emit OnUpdateFirstBuyNum(_unionID, _worksID, playerCount[_unionID][_worksID].firstBuyNum);\n', '    }\n', '\n', '    function updateSecondAmount(bytes32 _unionID, bytes32 _worksID, uint256 _amount) external onlyDev() {\n', '        playerCount[_unionID][_worksID].secondAmount = playerCount[_unionID][_worksID].secondAmount.add(_amount);\n', '        emit OnUpdateSecondAmount(_unionID, _worksID, _amount);\n', '    }\n', '\n', '    function updateFirstAmount(bytes32 _unionID, bytes32 _worksID, uint256 _amount) external onlyDev() {\n', '        playerCount[_unionID][_worksID].firstAmount = playerCount[_unionID][_worksID].firstAmount.add(_amount);\n', '        emit OnUpdateFirstAmount(_unionID, _worksID, _amount);\n', '    }\n', '\n', '    function updateRewardAmount(bytes32 _unionID, bytes32 _worksID, uint256 _amount) external onlyDev() {\n', '        playerCount[_unionID][_worksID].rewardAmount = playerCount[_unionID][_worksID].rewardAmount.add(_amount);\n', '        emit OnUpdateRewardAmount(_unionID, _worksID, _amount);\n', '    }    \n', '\n', '    function updateMyWorks(\n', '        bytes32 _unionID, \n', '        address _address, \n', '        bytes32 _worksID, \n', '        uint256 _totalInput, \n', '        uint256 _totalOutput\n', '    ) external onlyDev() {\n', '        myworks[_unionID][_worksID] = Datasets.MyWorks(_address, _worksID, _totalInput, _totalOutput, now);\n', '        emit OnUpdateMyWorks(_unionID, _address, _worksID, _totalInput, _totalOutput, now);\n', '    }\n', '\n', '}']