['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-24\n', '*/\n', '\n', 'pragma solidity 0.5.1;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */ \n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address private _owner;\n', '\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() internal {\n', '    _owner = msg.sender;\n', '    emit OwnershipTransferred(address(0), _owner);\n', '  }\n', '\n', '  /**\n', '   * @return the address of the owner.\n', '   */\n', '  function owner() public view returns(address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(isOwner());\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @return true if `msg.sender` is the owner of the contract.\n', '   */\n', '  function isOwner() public view returns(bool) {\n', '    return msg.sender == _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipTransferred(_owner, address(0));\n', '    _owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    _transferOwnership(newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address newOwner) internal {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * Interface for required functionality in the ERC721 standard\n', ' * for non-fungible tokens.\n', ' *\n', ' * Author: Nadav Hollander (nadav at dharma.io)\n', ' */\n', 'contract ERC721 {\n', '    // Function\n', '    function totalSupply() public view returns (uint256 _totalSupply);\n', '    function balanceOf(address _owner) public view returns (uint256 _balance);\n', '    function ownerOf(uint _tokenId) public view returns (address _owner);\n', '    function approve(address _to, uint _tokenId) public;\n', '    function transferFrom(address _from, address _to, uint _tokenId) public;\n', '    function transfer(address _to, uint _tokenId) public;\n', '    function implementsERC721() public view returns (bool _implementsERC721);\n', '\n', '    // Events\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n', '    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '}\n', '\n', 'contract Sell is Ownable{\n', '    address contractAddress;\n', '    ERC721 itemContract;\n', '    mapping(uint => uint) public sellData;\n', '    constructor (address _contractAddress) public{\n', '        contractAddress = _contractAddress;\n', '        itemContract = ERC721(contractAddress);\n', '    }\n', '    \n', '    function setSellData(uint tokenId,uint valueWai) external onlyOwner{\n', '        sellData[tokenId]=valueWai;\n', '    }\n', '    \n', '    function setSellDataAny(uint[] calldata tokenIds,uint valueWai) external onlyOwner{\n', '        for(uint i = 0; i < tokenIds.length; i++){\n', '            sellData[tokenIds[i]]=valueWai;\n', '        }\n', '    }\n', '    \n', '    function buy(uint tokenId) external payable{\n', '        require(msg.value == sellData[tokenId] && sellData[tokenId] != 0);\n', '        itemContract.transferFrom(owner(),msg.sender,tokenId);\n', '        sellData[tokenId] = 0;\n', '    }\n', '    \n', '    function getPrice(uint tokenId) external view returns(uint price){\n', '        return sellData[tokenId];\n', '    }\n', '    \n', '    function withdrawEther(uint256 valueWai) external onlyOwner{\n', '        msg.sender.transfer(valueWai);\n', '    }\n', '}']