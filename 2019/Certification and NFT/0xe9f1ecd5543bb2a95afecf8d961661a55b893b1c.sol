['pragma solidity ^0.5.0;\n', '\n', '\n', 'interface TubInterface {\n', '    function open() external returns (bytes32);\n', '    function join(uint) external;\n', '    function exit(uint) external;\n', '    function lock(bytes32, uint) external;\n', '    function free(bytes32, uint) external;\n', '    function draw(bytes32, uint) external;\n', '    function wipe(bytes32, uint) external;\n', '    function give(bytes32, address) external;\n', '    function shut(bytes32) external;\n', '    function cups(bytes32) external view returns (address, uint, uint, uint);\n', '    function gem() external view returns (TokenInterface);\n', '    function gov() external view returns (TokenInterface);\n', '    function skr() external view returns (TokenInterface);\n', '    function sai() external view returns (TokenInterface);\n', '    function ink(bytes32) external view returns (uint);\n', '    function tab(bytes32) external view returns (uint);\n', '    function rap(bytes32) external view returns (uint);\n', '    function per() external view returns (uint);\n', '    function pep() external view returns (PepInterface);\n', '}\n', '\n', '\n', 'interface TokenInterface {\n', '    function allowance(address, address) external view returns (uint);\n', '    function balanceOf(address) external view returns (uint);\n', '    function approve(address, uint) external;\n', '    function transfer(address, uint) external returns (bool);\n', '    function transferFrom(address, address, uint) external returns (bool);\n', '    function deposit() external payable;\n', '    function withdraw(uint) external;\n', '}\n', '\n', '\n', 'interface PepInterface {\n', '    function peek() external returns (bytes32, bool);\n', '}\n', '\n', '\n', 'contract DSMath {\n', '\n', '    function add(uint x, uint y) internal pure returns (uint z) {\n', '        require((z = x + y) >= x, "math-not-safe");\n', '    }\n', '\n', '    function mul(uint x, uint y) internal pure returns (uint z) {\n', '        require(y == 0 || (z = x * y) / y == x, "math-not-safe");\n', '    }\n', '\n', '    uint constant RAY = 10 ** 27;\n', '\n', '    function rmul(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, y), RAY / 2) / RAY;\n', '    }\n', '\n', '    function rdiv(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, RAY), y / 2) / y;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract Helpers is DSMath {\n', '\n', '    /**\n', '     * @dev get MakerDAO CDP engine\n', '     */\n', '    function getSaiTubAddress() public pure returns (address sai) {\n', '        sai = 0x448a5065aeBB8E423F0896E6c5D525C040f59af3;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract CDPResolver is Helpers {\n', '\n', '    /**\n', '     * @dev transfer CDP ownership\n', '     */\n', '    function give(uint cdpNum, address nextOwner) public {\n', '        TubInterface(getSaiTubAddress()).give(bytes32(cdpNum), nextOwner);\n', '    }\n', '\n', '    function free(uint cdpNum, uint jam) public {\n', '        bytes32 cup = bytes32(cdpNum);\n', '        address tubAddr = getSaiTubAddress();\n', '        \n', '        if (jam > 0) {\n', '            \n', '            TubInterface tub = TubInterface(tubAddr);\n', '            TokenInterface peth = tub.skr();\n', '\n', '            uint ink = rdiv(jam, tub.per());\n', '            ink = rmul(ink, tub.per()) <= jam ? ink : ink - 1;\n', '            tub.free(cup, ink);\n', '\n', '            setAllowance(peth, tubAddr);\n', '            \n', '            tub.exit(ink);\n', '            uint freeJam = tub.gem().balanceOf(address(this)); // withdraw possible previous stuck WETH as well\n', '            tub.gem().withdraw(freeJam);\n', '            \n', '            address(msg.sender).transfer(freeJam);\n', '        }\n', '    }\n', '\n', '    function setAllowance(TokenInterface token_, address spender_) private {\n', '        if (token_.allowance(address(this), spender_) != uint(-1)) {\n', '            token_.approve(spender_, uint(-1));\n', '        }\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract InstaMaker is CDPResolver {\n', '\n', '    uint public version;\n', '    \n', '    /**\n', '     * @dev setting up variables on deployment\n', '     * 1...2...3 versioning in each subsequent deployments\n', '     */\n', '    constructor() public {\n', '        version = 1;\n', '    }\n', '\n', '}']