['pragma solidity 0.5.3;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '    * @dev Multiplies two unsigned integers, reverts on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two unsigned integers, reverts on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address who) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        require(token.transfer(to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        require(token.transferFrom(from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        require((value == 0) || (token.allowance(msg.sender, spender) == 0));\n', '        require(token.approve(spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        require(token.approve(spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n', '        require(token.approve(spender, newAllowance));\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Helps contracts guard against reentrancy attacks.\n', ' * @author Remco Bloemen <remco@2Ï€.com>, Eenae <alexey@mixbytes.io>\n', ' * @dev If you mark a function `nonReentrant`, you should also\n', ' * mark it `external`.\n', ' */\n', 'contract ReentrancyGuard {\n', '    /// @dev counter to allow mutex lock with only one SSTORE operation\n', '    uint256 private _guardCounter;\n', '\n', '    constructor () internal {\n', '        // The counter starts at one to prevent changing it from zero to a non-zero\n', '        // value, which is a more expensive operation.\n', '        _guardCounter = 1;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        _guardCounter += 1;\n', '        uint256 localCounter = _guardCounter;\n', '        _;\n', '        require(localCounter == _guardCounter);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether. This contract implements\n', ' * such functionality in its most fundamental form and can be extended to provide additional\n', ' * functionality and/or custom behavior.\n', ' * The external interface represents the basic interface for purchasing tokens, and conform\n', ' * the base architecture for crowdsales. They are *not* intended to be modified / overridden.\n', ' * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n', " * the methods to add functionality. Consider using 'super' where appropriate to concatenate\n", ' * behavior.\n', ' */\n', 'contract Crowdsale is ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    // The token being sold\n', '    IERC20 private _token;\n', '\n', '    // Address where funds are collected\n', '    address payable private _wallet;\n', '\n', '    // How many token units a buyer gets per wei.\n', '    // The rate is the conversion between wei and the smallest and indivisible token unit.\n', '    // So, if you are using a rate of 1 with a ERC20Detailed token with 3 decimals called TOK\n', '    // 1 wei will give you 1 unit, or 0.001 TOK.\n', '    uint256 private _rate;\n', '\n', '    // Amount of wei raised\n', '    uint256 private _weiRaised;\n', '\n', '    /**\n', '     * Event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param value weis paid for purchase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    /**\n', '     * @param rate Number of token units a buyer gets per wei\n', '     * @dev The rate is the conversion between wei and the smallest and indivisible\n', '     * token unit. So, if you are using a rate of 1 with a ERC20Detailed token\n', '     * with 3 decimals called TOK, 1 wei will give you 1 unit, or 0.001 TOK.\n', '     * @param wallet Address where collected funds will be forwarded to\n', '     * @param token Address of the token being sold\n', '     */\n', '    constructor (uint256 rate, address payable wallet, IERC20 token) public {\n', '        require(rate > 0);\n', '        require(wallet != address(0));\n', '        require(address(token) != address(0));\n', '\n', '        _rate = rate;\n', '        _wallet = wallet;\n', '        _token = token;\n', '    }\n', '\n', '    /**\n', '     * @dev fallback function ***DO NOT OVERRIDE***\n', '     * Note that other contracts will transfer fund with a base gas stipend\n', '     * of 2300, which is not enough to call buyTokens. Consider calling\n', '     * buyTokens directly when purchasing tokens from a contract.\n', '     */\n', '    function () external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @return the token being sold.\n', '     */\n', '    function token() public view returns (IERC20) {\n', '        return _token;\n', '    }\n', '\n', '    /**\n', '     * @return the address where funds are collected.\n', '     */\n', '    function wallet() public view returns (address payable) {\n', '        return _wallet;\n', '    }\n', '\n', '    /**\n', '     * @return the number of token units a buyer gets per wei.\n', '     */\n', '    function rate() public view returns (uint256) {\n', '        return _rate;\n', '    }\n', '\n', '    /**\n', '     * @return the amount of wei raised.\n', '     */\n', '    function weiRaised() public view returns (uint256) {\n', '        return _weiRaised;\n', '    }\n', '\n', '    /**\n', '     * @dev low level token purchase ***DO NOT OVERRIDE***\n', "     * This function has a non-reentrancy guard, so it shouldn't be called by\n", '     * another `nonReentrant` function.\n', '     * @param beneficiary Recipient of the token purchase\n', '     */\n', '    function buyTokens(address beneficiary) public nonReentrant payable {\n', '        uint256 weiAmount = msg.value;\n', '        _preValidatePurchase(beneficiary, weiAmount);\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '        // update state\n', '        _weiRaised = _weiRaised.add(weiAmount);\n', '\n', '        _processPurchase(beneficiary, tokens);\n', '        emit TokensPurchased(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '        _updatePurchasingState(beneficiary, weiAmount);\n', '\n', '        _forwardFunds();\n', '        _postValidatePurchase(beneficiary, weiAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met.\n', '     * Use `super` in contracts that inherit from Crowdsale to extend their validations.\n', "     * Example from CappedCrowdsale.sol's _preValidatePurchase method:\n", '     *     super._preValidatePurchase(beneficiary, weiAmount);\n', '     *     require(weiRaised().add(weiAmount) <= cap);\n', '     * @param beneficiary Address performing the token purchase\n', '     * @param weiAmount Value in wei involved in the purchase\n', '     */\n', '    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\n', '        require(beneficiary != address(0));\n', '        require(weiAmount != 0);\n', '    }\n', '\n', '    /**\n', '     * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid\n', '     * conditions are not met.\n', '     * @param beneficiary Address performing the token purchase\n', '     * @param weiAmount Value in wei involved in the purchase\n', '     */\n', '    function _postValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\n', '        // solhint-disable-previous-line no-empty-blocks\n', '    }\n', '\n', '    /**\n', '     * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends\n', '     * its tokens.\n', '     * @param beneficiary Address performing the token purchase\n', '     * @param tokenAmount Number of tokens to be emitted\n', '     */\n', '    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\n', '        _token.safeTransfer(beneficiary, tokenAmount);\n', '    }\n', '\n', '    /**\n', "     * @dev Executed when a purchase has been validated and is ready to be executed. Doesn't necessarily emit/send\n", '     * tokens.\n', '     * @param beneficiary Address receiving the tokens\n', '     * @param tokenAmount Number of tokens to be purchased\n', '     */\n', '    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {\n', '        _deliverTokens(beneficiary, tokenAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Override for extensions that require an internal state to check for validity (current user contributions,\n', '     * etc.)\n', '     * @param beneficiary Address receiving the tokens\n', '     * @param weiAmount Value in wei involved in the purchase\n', '     */\n', '    function _updatePurchasingState(address beneficiary, uint256 weiAmount) internal {\n', '        // solhint-disable-previous-line no-empty-blocks\n', '    }\n', '\n', '    /**\n', '     * @dev Override to extend the way in which ether is converted to tokens.\n', '     * @param weiAmount Value in wei to be converted into tokens\n', '     * @return Number of tokens that can be purchased with the specified _weiAmount\n', '     */\n', '    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\n', '        return weiAmount.mul(_rate);\n', '    }\n', '\n', '    /**\n', '     * @dev Determines how ETH is stored/forwarded on purchases.\n', '     */\n', '    function _forwardFunds() internal {\n', '        _wallet.transfer(msg.value);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title TimedCrowdsale\n', ' * @dev Crowdsale accepting contributions only within a time frame.\n', ' */\n', 'contract TimedCrowdsale is Crowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 private _openingTime;\n', '    uint256 private _closingTime;\n', '\n', '    /**\n', '     * @dev Reverts if not in crowdsale time range.\n', '     */\n', '    modifier onlyWhileOpen {\n', '        require(isOpen());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Constructor, takes crowdsale opening and closing times.\n', '     * @param openingTime Crowdsale opening time\n', '     * @param closingTime Crowdsale closing time\n', '     */\n', '    constructor (uint256 openingTime, uint256 closingTime) public {\n', '        // solhint-disable-next-line not-rely-on-time\n', '        require(openingTime >= block.timestamp);\n', '        require(closingTime > openingTime);\n', '\n', '        _openingTime = openingTime;\n', '        _closingTime = closingTime;\n', '    }\n', '\n', '    /**\n', '     * @return the crowdsale opening time.\n', '     */\n', '    function openingTime() public view returns (uint256) {\n', '        return _openingTime;\n', '    }\n', '\n', '    /**\n', '     * @return the crowdsale closing time.\n', '     */\n', '    function closingTime() public view returns (uint256) {\n', '        return _closingTime;\n', '    }\n', '\n', '    /**\n', '     * @return true if the crowdsale is open, false otherwise.\n', '     */\n', '    function isOpen() public view returns (bool) {\n', '        // solhint-disable-next-line not-rely-on-time\n', '        return block.timestamp >= _openingTime && block.timestamp <= _closingTime;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '     * @return Whether crowdsale period has elapsed\n', '     */\n', '    function hasClosed() public view returns (bool) {\n', '        // solhint-disable-next-line not-rely-on-time\n', '        return block.timestamp > _closingTime;\n', '    }\n', '\n', '    /**\n', '     * @dev Extend parent behavior requiring to be within contributing period\n', '     * @param beneficiary Token purchaser\n', '     * @param weiAmount Amount of wei contributed\n', '     */\n', '    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal onlyWhileOpen view {\n', '        super._preValidatePurchase(beneficiary, weiAmount);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Math\n', ' * @dev Assorted math operations\n', ' */\n', 'library Math {\n', '    /**\n', '    * @dev Returns the largest of two numbers.\n', '    */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the smallest of two numbers.\n', '    */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '    * @dev Calculates the average of two numbers. Since these are integers,\n', '    * averages of an even and odd number cannot be represented, and will be\n', '    * rounded down.\n', '    */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title AllowanceCrowdsale\n', ' * @dev Extension of Crowdsale where tokens are held by a wallet, which approves an allowance to the crowdsale.\n', ' */\n', 'contract AllowanceCrowdsale is Crowdsale {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    address private _tokenWallet;\n', '\n', '    /**\n', '     * @dev Constructor, takes token wallet address.\n', '     * @param tokenWallet Address holding the tokens, which has approved allowance to the crowdsale\n', '     */\n', '    constructor (address tokenWallet) public {\n', '        require(tokenWallet != address(0));\n', '        _tokenWallet = tokenWallet;\n', '    }\n', '\n', '    /**\n', '     * @return the address of the wallet that will hold the tokens.\n', '     */\n', '    function tokenWallet() public view returns (address) {\n', '        return _tokenWallet;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks the amount of tokens left in the allowance.\n', '     * @return Amount of tokens left in the allowance\n', '     */\n', '    function remainingTokens() public view returns (uint256) {\n', '        return Math.min(token().balanceOf(_tokenWallet), token().allowance(_tokenWallet, address(this)));\n', '    }\n', '\n', '    /**\n', '     * @dev Overrides parent behavior by transferring tokens from wallet.\n', '     * @param beneficiary Token purchaser\n', '     * @param tokenAmount Amount of tokens purchased\n', '     */\n', '    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\n', '        token().safeTransferFrom(_tokenWallet, beneficiary, tokenAmount);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title CappedCrowdsale\n', ' * @dev Crowdsale with a limit for total contributions.\n', ' */\n', 'contract CappedCrowdsale is Crowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 private _cap;\n', '\n', '    /**\n', '     * @dev Constructor, takes maximum amount of wei accepted in the crowdsale.\n', '     * @param cap Max amount of wei to be contributed\n', '     */\n', '    constructor (uint256 cap) public {\n', '        require(cap > 0);\n', '        _cap = cap;\n', '    }\n', '\n', '    /**\n', '     * @return the cap of the crowdsale.\n', '     */\n', '    function cap() public view returns (uint256) {\n', '        return _cap;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks whether the cap has been reached.\n', '     * @return Whether the cap was reached\n', '     */\n', '    function capReached() public view returns (bool) {\n', '        return weiRaised() >= _cap;\n', '    }\n', '\n', '    /**\n', '     * @dev Extend parent behavior requiring purchase to respect the funding cap.\n', '     * @param beneficiary Token purchaser\n', '     * @param weiAmount Amount of wei contributed\n', '     */\n', '    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\n', '        super._preValidatePurchase(beneficiary, weiAmount);\n', '        require(weiRaised().add(weiAmount) <= _cap);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title BitherPlatformCrowdsale\n', ' * @dev BitherCrowdsale contract uses multiple openzeppelin base contracts and adds some custom behaviour.\n', ' *      The openzeppelin base contracts have been audited and are widely used by the community. They can\n', ' *      be trusted to have almost zero security vulnerabilities and therefore do not need to be tested.\n', ' *      The BitherCrowdale enables the purchasing of 2 tokens, the BitherToken (BTR) and RentalProcessorToken (BRP) \n', ' *      at rates determined by the current block time. It specifies a cap of Ether that can be contributed\n', ' *      and a length of time the crowdsale lasts. It requires the crowdsale contract address be given\n', ' *      an allowance of 33000000 BTR and 420000000 BRP enabling it to distribute the purchased tokens. These\n', ' *      values are determined by the cap of 300000 ETH and the phased distribution rates.\n', ' */\n', 'contract BitherPlatformCrowdsale is AllowanceCrowdsale, TimedCrowdsale, CappedCrowdsale {\n', '\n', '    uint256 constant private CAP_IN_WEI = 300000 ether;\n', '\n', '    uint256 constant private BTR_PRIVATE_SALE_RATE = 110;\n', '    uint256 constant private BTR_PRESALE_RATE_DAY_1 = 110;\n', '    uint256 constant private BTR_PRESALE_RATE_DAY_2_TO_5 = 109;\n', '    uint256 constant private BTR_PRESALE_RATE_DAY_6_TO_9 = 108;\n', '    uint256 constant private BTR_PRESALE_RATE_DAY_10_TO_13 = 107;\n', '\n', '    uint256 constant private BTR_CROWDSALE_ROUND1_RATE_DAY_1_FIRST_2_HOURS = 110;\n', '    uint256 constant private BTR_CROWDSALE_ROUND1_RATE_DAY_1_TO_14 = 107;\n', '    uint256 constant private BTR_CROWDSALE_ROUND1_RATE_DAY_15_TO_28 = 106;\n', '\n', '    uint256 constant private BTR_CROWDSALE_ROUND2_RATE_DAY_1_FIRST_2_HOURS = 110;\n', '    uint256 constant private BTR_CROWDSALE_ROUND2_RATE_DAY_1_TO_7 = 106;\n', '    uint256 constant private BTR_CROWDSALE_ROUND2_RATE_DAY_8_TO_14 = 104;\n', '    uint256 constant private BTR_CROWDSALE_ROUND2_RATE_DAY_15_TO_21 = 102;\n', '    uint256 constant private BTR_CROWDSALE_ROUND2_RATE_DAY_22_TO_28 = 100;\n', '\n', '    uint256 constant private BRP_PRIVATE_SALE_RATE = 1400;\n', '    uint256 constant private BRP_PRESALE_RATE_FIRST_2_HOURS = 1400;\n', '    uint256 constant private BRP_PRESALE_RATE_DAY_1_TO_5 = 1380;\n', '    uint256 constant private BRP_PRESALE_RATE_DAY_6_TO_13 = 1360;\n', '\n', '    uint256 constant private BRP_CROWDSALE_ROUND1_RATE_DAY_1_TO_7 = 1340;\n', '    uint256 constant private BRP_CROWDSALE_ROUND1_RATE_DAY_8_TO_21 = 1320;\n', '    uint256 constant private BRP_CROWDSALE_ROUND1_RATE_DAY_22_TO_28 = 1300;\n', '\n', '    uint256 constant private BRP_CROWDSALE_ROUND2_RATE_DAY_1_TO_7 = 1240;\n', '    uint256 constant private BRP_CROWDSALE_ROUND2_RATE_DAY_8_TO_14 = 1160;\n', '    uint256 constant private BRP_CROWDSALE_ROUND2_RATE_DAY_15_TO_21 = 1080;\n', '    uint256 constant private BRP_CROWDSALE_ROUND2_RATE_DAY_22_TO_28 = 1000;\n', '\n', '    IERC20 private _rentalProcessorToken;\n', '    uint256 private _privateSaleClosingTime; // Friday, March 22, 2019 12:00:00 AM (1553212800)\n', '    uint256 private _presaleOpeningTime; // Saturday, March 23, 2019 2:00:00 PM (1553349600)\n', '    uint256 private _crowdsaleRound1OpeningTime; // Saturday, April 20, 2019 2:00:00 PM (1555768800)\n', '    uint256 private _crowdsaleRound2OpeningTime; // Saturday, June 1, 2019 2:00:00 PM (1559397600)\n', '\n', '    /**\n', '     * Event for BRP token purchase logging\n', '     * @param purchaser Who paid for the tokens\n', '     * @param beneficiary Who got the tokens\n', '     * @param value Wei paid for purchase\n', '     * @param amount Amount of tokens purchased\n', '     */\n', '    event RentalProcessorTokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    /**\n', '     * @dev Constructor, calls the inherited classes constructors, stores RentalProcessorToken and determines crowdsale times\n', '     * @param bitherToken The BitherToken address, must be an ERC20 contract\n', '     * @param rentalProcessorToken The RentalProcessorToken, must be an ERC20 contract\n', '     * @param bitherTokensOwner Address holding the tokens, which has approved allowance to the crowdsale\n', '     * @param etherBenefactor Address that will receive the deposited Ether\n', '     * @param preSaleOpeningTime The presale opening time, in seconds, all other times are determined using this to reduce risk of error\n', '     */\n', '    constructor(IERC20 bitherToken, IERC20 rentalProcessorToken, address bitherTokensOwner, address payable etherBenefactor, uint256 preSaleOpeningTime)\n', '        Crowdsale(BTR_PRIVATE_SALE_RATE, etherBenefactor, bitherToken)\n', '        AllowanceCrowdsale(bitherTokensOwner)\n', '        TimedCrowdsale(now, preSaleOpeningTime + 14 weeks)\n', '        CappedCrowdsale(CAP_IN_WEI)\n', '        public\n', '    {\n', '        _rentalProcessorToken = rentalProcessorToken;\n', '\n', '        _privateSaleClosingTime = preSaleOpeningTime - 38 hours;\n', '        _presaleOpeningTime = preSaleOpeningTime;\n', '        _crowdsaleRound1OpeningTime = preSaleOpeningTime + 4 weeks;\n', '        _crowdsaleRound2OpeningTime = preSaleOpeningTime + 10 weeks;\n', '    }\n', '\n', '    /**\n', '     * @dev Overrides function in the Crowdsale contract to revert contributions less then\n', '     *      50 Eth during the first period and less than 0.1 Eth during the rest of the crowdsale\n', '     * @param beneficiary Address performing the token purchase\n', '     * @param weiAmount Value in wei involved in the purchase\n', '     */\n', '    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\n', '        super._preValidatePurchase(beneficiary, weiAmount);\n', '\n', '        if (now < _privateSaleClosingTime) {\n', '            require(weiAmount >= 50 ether, "Not enough Eth. Contributions must be 50 Eth minimum during the private sale");\n', '        } else {\n', '            require(weiAmount >= 100 finney, "Not enough Eth. Contributions must be 0.1 Eth minimum during the presale and crowdsale (Round 1 and Round 2)");\n', '        }\n', '\n', '        if (now > _privateSaleClosingTime && now < _presaleOpeningTime) {\n', '            revert("Private sale has ended and the presale is yet to begin");\n', '        } else if (now > _presaleOpeningTime + 13 days && now < _crowdsaleRound1OpeningTime) {\n', '            revert("Presale has ended and the crowdsale (Round 1) is yet to begin");\n', '        } else if (now > _crowdsaleRound1OpeningTime + 4 weeks && now < _crowdsaleRound2OpeningTime) {\n', '            revert("crowdsale (Round 1) has ended and the crowdsale (Round 2) is yet to begin");\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Overrides function in the Crowdsale contract to enable a custom phased distribution\n', '     * @param weiAmount Value in wei to be converted into tokens\n', '     * @return Number of tokens that can be purchased with the specified weiAmount\n', '     */\n', '    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\n', '\n', '        if (now < _privateSaleClosingTime) {\n', '            return weiAmount.mul(BTR_PRIVATE_SALE_RATE);\n', '        } else if (now < _presaleOpeningTime + 1 days) {\n', '            return weiAmount.mul(BTR_PRESALE_RATE_DAY_1);\n', '        } else if (now < _presaleOpeningTime + 5 days) {\n', '            return weiAmount.mul(BTR_PRESALE_RATE_DAY_2_TO_5);\n', '        } else if (now < _presaleOpeningTime + 9 days) {\n', '            return weiAmount.mul(BTR_PRESALE_RATE_DAY_6_TO_9);\n', '        } else if (now < _presaleOpeningTime + 13 days) {\n', '            return weiAmount.mul(BTR_PRESALE_RATE_DAY_10_TO_13);\n', '\n', '        } else if (now < _crowdsaleRound1OpeningTime + 2 hours) {\n', '            return weiAmount.mul(BTR_CROWDSALE_ROUND1_RATE_DAY_1_FIRST_2_HOURS);\n', '        } else if (now < _crowdsaleRound1OpeningTime + 2 weeks) {\n', '            return weiAmount.mul(BTR_CROWDSALE_ROUND1_RATE_DAY_1_TO_14);\n', '        } else if (now < _crowdsaleRound1OpeningTime + 4 weeks) {\n', '            return weiAmount.mul(BTR_CROWDSALE_ROUND1_RATE_DAY_15_TO_28);\n', '\n', '        } else if (now < _crowdsaleRound2OpeningTime + 2 hours) {\n', '            return weiAmount.mul(BTR_CROWDSALE_ROUND2_RATE_DAY_1_FIRST_2_HOURS);\n', '        } else if (now < _crowdsaleRound2OpeningTime + 1 weeks) {\n', '            return weiAmount.mul(BTR_CROWDSALE_ROUND2_RATE_DAY_1_TO_7);\n', '        } else if (now < _crowdsaleRound2OpeningTime + 2 weeks) {\n', '            return weiAmount.mul(BTR_CROWDSALE_ROUND2_RATE_DAY_8_TO_14);\n', '        } else if (now < _crowdsaleRound2OpeningTime + 3 weeks) {\n', '            return weiAmount.mul(BTR_CROWDSALE_ROUND2_RATE_DAY_15_TO_21);\n', '        } else if (now < closingTime()) {\n', '            return weiAmount.mul(BTR_CROWDSALE_ROUND2_RATE_DAY_22_TO_28);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Overrides function in AllowanceCrowdsale contract (therefore also overrides function\n', '     *      in Crowdsale contract) to add functionality for distribution of a second token, BRP.\n', '     * @param beneficiary Token purchaser\n', '     * @param tokenAmount Amount of tokens purchased\n', '     */\n', '    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\n', '        super._deliverTokens(beneficiary, tokenAmount);\n', '\n', '        uint256 weiAmount = msg.value;\n', '        uint256 brpTokenAmount = getBrpTokenAmount(weiAmount);\n', '\n', '        _rentalProcessorToken.safeTransferFrom(tokenWallet(), beneficiary, brpTokenAmount);\n', '\n', '        emit RentalProcessorTokensPurchased(msg.sender, beneficiary, weiAmount, brpTokenAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Determines distribution of BRP depending on the time of the transaction\n', '     * @param weiAmount Value in wei to be converted into tokens\n', '     * @return Number of tokens that can be purchased with the specified weiAmount\n', '     */\n', '    function getBrpTokenAmount(uint256 weiAmount) private view returns (uint256) {\n', '\n', '        if (now < _privateSaleClosingTime) {\n', '            return weiAmount.mul(BRP_PRIVATE_SALE_RATE);\n', '\n', '        } else if (now < _presaleOpeningTime + 2 hours) {\n', '            return weiAmount.mul(BRP_PRESALE_RATE_FIRST_2_HOURS);\n', '        } else if (now < _presaleOpeningTime + 5 days) {\n', '            return weiAmount.mul(BRP_PRESALE_RATE_DAY_1_TO_5);\n', '        } else if (now < _presaleOpeningTime + 13 days) {\n', '            return weiAmount.mul(BRP_PRESALE_RATE_DAY_6_TO_13);\n', '\n', '        } else if (now < _crowdsaleRound1OpeningTime + 1 weeks) {\n', '            return weiAmount.mul(BRP_CROWDSALE_ROUND1_RATE_DAY_1_TO_7);\n', '        } else if (now < _crowdsaleRound1OpeningTime + 3 weeks) {\n', '            return weiAmount.mul(BRP_CROWDSALE_ROUND1_RATE_DAY_8_TO_21);\n', '        } else if (now <= _crowdsaleRound1OpeningTime + 4 weeks) {\n', '            return weiAmount.mul(BRP_CROWDSALE_ROUND1_RATE_DAY_22_TO_28);\n', '        \n', '        } else if (now < _crowdsaleRound2OpeningTime + 1 weeks) {\n', '            return weiAmount.mul(BRP_CROWDSALE_ROUND2_RATE_DAY_1_TO_7);\n', '        } else if (now < _crowdsaleRound2OpeningTime + 2 weeks) {\n', '            return weiAmount.mul(BRP_CROWDSALE_ROUND2_RATE_DAY_8_TO_14);\n', '        } else if (now < _crowdsaleRound2OpeningTime + 3 weeks) {\n', '            return weiAmount.mul(BRP_CROWDSALE_ROUND2_RATE_DAY_15_TO_21);\n', '        } else if (now <= closingTime()) {\n', '            return weiAmount.mul(BRP_CROWDSALE_ROUND2_RATE_DAY_22_TO_28);\n', '        }\n', '    }\n', '}']