['pragma solidity ^0.4.24;\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    require(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    require(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier hasMintPermission() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    hasMintPermission\n', '    canMint\n', '    public\n', '    returns (bool)\n', '  {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: contracts/NectarToken.sol\n', '\n', 'contract NectarToken is MintableToken {\n', '    string public name = "Nectar";\n', '    string public symbol = "NCT";\n', '    uint8 public decimals = 18;\n', '\n', '    bool public transfersEnabled = false;\n', '    event TransfersEnabled();\n', '\n', '    // Disable transfers until after the sale\n', '    modifier whenTransfersEnabled() {\n', '        require(transfersEnabled, "Transfers not enabled");\n', '        _;\n', '    }\n', '\n', '    modifier whenTransfersNotEnabled() {\n', '        require(!transfersEnabled, "Transfers enabled");\n', '        _;\n', '    }\n', '\n', '    function enableTransfers() public onlyOwner whenTransfersNotEnabled {\n', '        transfersEnabled = true;\n', '        emit TransfersEnabled();\n', '    }\n', '\n', '    function transfer(address to, uint256 value) public whenTransfersEnabled returns (bool) {\n', '        return super.transfer(to, value);\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public whenTransfersEnabled returns (bool) {\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '\n', '    // Approves and then calls the receiving contract\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '\n', '        // Call the receiveApproval function on the contract you want to be notified.\n', '        // This crafts the function signature manually so one doesn&#39;t have to include a contract in here just for this.\n', '        //\n', '        // receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '        //\n', '        // It is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '\n', '        // solium-disable-next-line security/no-low-level-calls, indentation\n', '        require(_spender.call(bytes4(bytes32(keccak256("receiveApproval(address,uint256,address,bytes)"))),\n', '            msg.sender, _value, this, _extraData), "receiveApproval failed");\n', '        return true;\n', '    }\n', '}\n', '\n', '// File: contracts/ArbiterStaking.sol\n', '\n', '//import "./ArbiterStaking.sol";\n', '\n', '\n', '\n', 'contract BountyRegistry is Pausable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for NectarToken;\n', '\n', '    string public constant VERSION = "1.0.0";\n', '\n', '    struct Bounty {\n', '        uint128 guid;\n', '        address author;\n', '        uint256 amount;\n', '        string artifactURI;\n', '        uint256 numArtifacts;\n', '        uint256 expirationBlock;\n', '        address assignedArbiter;\n', '        bool quorumReached;\n', '        uint256 quorumBlock;\n', '        uint256 quorumMask;\n', '    }\n', '\n', '    struct Assertion {\n', '        address author;\n', '        uint256 bid;\n', '        uint256 mask;\n', '        uint256 commitment;\n', '        uint256 nonce;\n', '        uint256 verdicts;\n', '        string metadata;\n', '    }\n', '\n', '    struct Vote {\n', '        address author;\n', '        uint256 votes;\n', '        bool validBloom;\n', '    }\n', '\n', '    event AddedArbiter(\n', '        address arbiter,\n', '        uint256 blockNumber\n', '    );\n', '\n', '    event RemovedArbiter(\n', '        address arbiter,\n', '        uint256 blockNumber\n', '    );\n', '\n', '    event NewBounty(\n', '        uint128 guid,\n', '        address author,\n', '        uint256 amount,\n', '        string artifactURI,\n', '        uint256 expirationBlock\n', '    );\n', '\n', '    event NewAssertion(\n', '        uint128 bountyGuid,\n', '        address author,\n', '        uint256 index,\n', '        uint256 bid,\n', '        uint256 mask,\n', '        uint256 numArtifacts,\n', '        uint256 commitment\n', '    );\n', '\n', '    event RevealedAssertion(\n', '        uint128 bountyGuid,\n', '        address author,\n', '        uint256 index,\n', '        uint256 nonce,\n', '        uint256 verdicts,\n', '        uint256 numArtifacts,\n', '        string metadata\n', '    );\n', '\n', '    event NewVote(\n', '        uint128 bountyGuid,\n', '        uint256 votes,\n', '        uint256 numArtifacts,\n', '        address voter\n', '    );\n', '\n', '    event QuorumReached(\n', '        uint128 bountyGuid\n', '    );\n', '\n', '    event SettledBounty(\n', '        uint128 bountyGuid,\n', '        address settler,\n', '        uint256 payout\n', '    );\n', '\n', '    ArbiterStaking public staking;\n', '    NectarToken internal token;\n', '\n', '    uint256 public constant BOUNTY_FEE = 62500000000000000;\n', '    uint256 public constant ASSERTION_FEE = 31250000000000000;\n', '    uint256 public constant BOUNTY_AMOUNT_MINIMUM = 62500000000000000;\n', '    uint256 public constant ASSERTION_BID_MINIMUM = 62500000000000000;\n', '    uint256 public constant ARBITER_LOOKBACK_RANGE = 100;\n', '    uint256 public constant MAX_DURATION = 100; // BLOCKS\n', '    uint256 public constant ASSERTION_REVEAL_WINDOW = 25; // BLOCKS\n', '    uint256 public constant MALICIOUS_VOTE_COEFFICIENT = 10;\n', '    uint256 public constant BENIGN_VOTE_COEFFICIENT = 1;\n', '    uint256 public constant VALID_HASH_PERIOD = 256; // number of blocks in the past you can still get a blockhash\n', '\n', '\n', '    uint256 public arbiterCount;\n', '    uint256 public arbiterVoteWindow;\n', '    uint128[] public bountyGuids;\n', '    mapping (uint128 => Bounty) public bountiesByGuid;\n', '    mapping (uint128 => Assertion[]) public assertionsByGuid;\n', '    mapping (uint128 => Vote[]) public votesByGuid;\n', '    mapping (uint128 => uint256[8]) public bloomByGuid;\n', '    mapping (uint128 => mapping (uint256 => uint256)) public quorumVotesByGuid;\n', '    mapping (address => bool) public arbiters;\n', '    mapping (uint256 => mapping (uint256 => uint256)) public voteCountByGuid;\n', '    mapping (uint256 => mapping (address => bool)) public arbiterVoteRegistryByGuid;\n', '    mapping (uint256 => mapping (address => bool)) public expertAssertionResgistryByGuid;\n', '    mapping (uint128 => mapping (address => bool)) public bountySettled;\n', '\n', '    /**\n', '     * Construct a new BountyRegistry\n', '     *\n', '     * @param _token address of NCT token to use\n', '     */\n', '    constructor(address _token, address _arbiterStaking, uint256 _arbiterVoteWindow) Ownable() public {\n', '        owner = msg.sender;\n', '        token = NectarToken(_token);\n', '        staking = ArbiterStaking(_arbiterStaking);\n', '        arbiterVoteWindow = _arbiterVoteWindow;\n', '    }\n', '\n', '    /**\n', '     * Function to check if an address is a valid arbiter\n', '     *\n', '     * @param addr The address to check\n', '     * @return true if addr is a valid arbiter else false\n', '     */\n', '    function isArbiter(address addr) public view returns (bool) {\n', '        // Remove arbiter requirements for now, while we are whitelisting\n', '        // arbiters on the platform\n', '        //return arbiters[addr] && staking.isEligible(addr);\n', '        return arbiters[addr];\n', '    }\n', '\n', '    /** Function only callable by arbiter */\n', '    modifier onlyArbiter() {\n', '        require(isArbiter(msg.sender), "msg.sender is not an arbiter");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Function called to add an arbiter, emits an evevnt with the added arbiter\n', '     * and block number used to calculate their arbiter status based on public\n', '     * arbiter selection algorithm.\n', '     *\n', '     * @param newArbiter the arbiter to add\n', '     * @param blockNumber the block number the determination to add was\n', '     *      calculated from\n', '     */\n', '    function addArbiter(address newArbiter, uint256 blockNumber) external whenNotPaused onlyOwner {\n', '        require(newArbiter != address(0), "Invalid arbiter address");\n', '        require(!arbiters[newArbiter], "Address is already an arbiter");\n', '        arbiterCount = arbiterCount.add(1);\n', '        arbiters[newArbiter] = true;\n', '        emit AddedArbiter(newArbiter, blockNumber);\n', '    }\n', '\n', '    /**\n', '     * Function called to remove an arbiter, emits an evevnt with the removed\n', '     * arbiter and block number used to calculate their arbiter status based on\n', '     * public arbiter selection algorithm.\n', '     *\n', '     * @param arbiter the arbiter to remove\n', '     * @param blockNumber the block number the determination to remove was\n', '     *      calculated from\n', '     */\n', '    function removeArbiter(address arbiter, uint256 blockNumber) external whenNotPaused onlyOwner {\n', '        arbiters[arbiter] = false;\n', '        arbiterCount = arbiterCount.sub(1);\n', '        emit RemovedArbiter(arbiter, blockNumber);\n', '    }\n', '\n', '    /**\n', '     * Function called by end users and ambassadors to post a bounty\n', '     *\n', '     * @param guid the guid of the bounty, must be unique\n', '     * @param amount the amount of NCT to post as a reward\n', '     * @param artifactURI uri of the artifacts comprising this bounty\n', '     * @param durationBlocks duration of this bounty in blocks\n', '     */\n', '    function postBounty(\n', '        uint128 guid,\n', '        uint256 amount,\n', '        string artifactURI,\n', '        uint256 numArtifacts,\n', '        uint256 durationBlocks,\n', '        uint256[8] bloom\n', '    )\n', '    external\n', '    whenNotPaused\n', '    {\n', '        // Check if a bounty with this GUID has already been initialized\n', '        require(bountiesByGuid[guid].author == address(0), "GUID already in use");\n', '        // Check that our bounty amount is sufficient\n', '        require(amount >= BOUNTY_AMOUNT_MINIMUM, "Bounty amount below minimum");\n', '        // Check that our URI is non-empty\n', '        require(bytes(artifactURI).length > 0, "Invalid artifact URI");\n', '        // Check that our number of artifacts is valid\n', '        require(numArtifacts <= 256, "Too many artifacts in bounty");\n', '        require(numArtifacts > 0, "Not enough artifacts in bounty");\n', '        // Check that our duration is non-zero and less than or equal to the max\n', '        require(durationBlocks > 0 && durationBlocks <= MAX_DURATION, "Invalid bounty duration");\n', '\n', '        // Assess fees and transfer bounty amount into escrow\n', '        token.safeTransferFrom(msg.sender, address(this), amount.add(BOUNTY_FEE));\n', '\n', '        bountiesByGuid[guid].guid = guid;\n', '        bountiesByGuid[guid].author = msg.sender;\n', '        bountiesByGuid[guid].amount = amount;\n', '        bountiesByGuid[guid].artifactURI = artifactURI;\n', '\n', '        // Number of artifacts is submitted as part of the bounty, we have no\n', '        // way to check how many exist in this IPFS resource. For an IPFS\n', '        // resource with N artifacts, if numArtifacts < N only the first\n', '        // numArtifacts artifacts are included in this bounty, if numArtifacts >\n', '        // N then the last N - numArtifacts bounties are considered benign.\n', '        bountiesByGuid[guid].numArtifacts = numArtifacts;\n', '        bountiesByGuid[guid].expirationBlock = durationBlocks.add(block.number);\n', '\n', '        bountyGuids.push(guid);\n', '\n', '        bloomByGuid[guid] = bloom;\n', '\n', '        emit NewBounty(\n', '            bountiesByGuid[guid].guid,\n', '            bountiesByGuid[guid].author,\n', '            bountiesByGuid[guid].amount,\n', '            bountiesByGuid[guid].artifactURI,\n', '            bountiesByGuid[guid].expirationBlock\n', '        );\n', '    }\n', '\n', '    /**\n', '     * Function called by security experts to post an assertion on a bounty\n', '     *\n', '     * @param bountyGuid the guid of the bounty to assert on\n', '     * @param bid the amount of NCT to stake\n', '     * @param mask the artifacts to assert on from the set in the bounty\n', '     * @param commitment a commitment hash of the verdicts being asserted, equal\n', '     *      to keccak256(verdicts ^ keccak256(nonce)) where nonce != 0\n', '     */\n', '    function postAssertion(\n', '        uint128 bountyGuid,\n', '        uint256 bid,\n', '        uint256 mask,\n', '        uint256 commitment\n', '    )\n', '        external\n', '        whenNotPaused\n', '    {\n', '        // Check if this bounty has been initialized\n', '        require(bountiesByGuid[bountyGuid].author != address(0), "Bounty has not been initialized");\n', '        // Check that our bid amount is sufficient\n', '        require(bid >= ASSERTION_BID_MINIMUM, "Assertion bid below minimum");\n', '        // Check if this bounty is active\n', '        require(bountiesByGuid[bountyGuid].expirationBlock > block.number, "Bounty inactive");\n', '        // Check if the sender has already made an assertion\n', '        require(expertAssertionResgistryByGuid[bountyGuid][msg.sender] == false, "Sender has already asserted");\n', '        // Assess fees and transfer bid amount into escrow\n', '        token.safeTransferFrom(msg.sender, address(this), bid.add(ASSERTION_FEE));\n', '\n', '        expertAssertionResgistryByGuid[bountyGuid][msg.sender] = true;\n', '\n', '        Assertion memory a = Assertion(\n', '            msg.sender,\n', '            bid,\n', '            mask,\n', '            commitment,\n', '            0,\n', '            0,\n', '            ""\n', '        );\n', '\n', '        uint256 index = assertionsByGuid[bountyGuid].push(a) - 1;\n', '        uint256 numArtifacts = bountiesByGuid[bountyGuid].numArtifacts;\n', '\n', '        emit NewAssertion(\n', '            bountyGuid,\n', '            a.author,\n', '            index,\n', '            a.bid,\n', '            a.mask,\n', '            numArtifacts,\n', '            a.commitment\n', '        );\n', '    }\n', '\n', '    // https://ethereum.stackexchange.com/questions/4170/how-to-convert-a-uint-to-bytes-in-solidity\n', '    function uint256_to_bytes(uint256 x) internal pure returns (bytes b) {\n', '        b = new bytes(32);\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly { mstore(add(b, 32), x) }\n', '    }\n', '\n', '    /**\n', '     * Function called by security experts to reveal an assertion after bounty\n', '     * expiration\n', '     *\n', '     * @param bountyGuid the guid of the bounty to assert on\n', '     * @param assertionId the id of the assertion to reveal\n', '     * @param assertionId the id of the assertion to reveal\n', '     * @param nonce the nonce used to generate the commitment hash\n', '     * @param verdicts the verdicts making up this assertion\n', '     * @param metadata optional metadata to include in the assertion\n', '     */\n', '    function revealAssertion(\n', '        uint128 bountyGuid,\n', '        uint256 assertionId,\n', '        uint256 nonce,\n', '        uint256 verdicts,\n', '        string metadata\n', '    )\n', '        external\n', '        whenNotPaused\n', '    {\n', '        // Check if this bounty has been initialized\n', '        require(bountiesByGuid[bountyGuid].author != address(0), "Bounty has not been initialized");\n', '        // Check that the bounty is no longer active\n', '        require(bountiesByGuid[bountyGuid].expirationBlock <= block.number, "Bounty is still active");\n', '        // Check if the reveal round has closed\n', '        require(bountiesByGuid[bountyGuid].expirationBlock.add(ASSERTION_REVEAL_WINDOW) > block.number, "Reveal round has closed");\n', '        // Get numArtifacts to help decode all zero verdicts\n', '        uint256 numArtifacts = bountiesByGuid[bountyGuid].numArtifacts;\n', '\n', '        // Zero is defined as an invalid nonce\n', '        require(nonce != 0, "Invalid nonce");\n', '\n', '        // Check our id\n', '        require(assertionId < assertionsByGuid[bountyGuid].length, "Invalid assertion ID");\n', '\n', '        Assertion storage a = assertionsByGuid[bountyGuid][assertionId];\n', '        require(a.author == msg.sender, "Incorrect assertion author");\n', '        require(a.nonce == 0, "Bounty already revealed");\n', '\n', '        // Check our commitment hash, by xor-ing verdicts with the hashed nonce\n', '        // and the sender&#39;s address prevent copying assertions by submitting the\n', '        // same commitment hash and nonce during the reveal round\n', '        uint256 hashed_nonce = uint256(keccak256(uint256_to_bytes(nonce)));\n', '        uint256 commitment = uint256(keccak256(uint256_to_bytes(verdicts ^ hashed_nonce ^ uint256(msg.sender))));\n', '        require(commitment == a.commitment, "Commitment hash mismatch");\n', '\n', '        a.nonce = nonce;\n', '        a.verdicts = verdicts;\n', '        a.metadata = metadata;\n', '\n', '        emit RevealedAssertion(\n', '            bountyGuid,\n', '            a.author,\n', '            assertionId,\n', '            a.nonce,\n', '            a.verdicts,\n', '            numArtifacts,\n', '            a.metadata\n', '        );\n', '    }\n', '\n', '    /**\n', '     * Function called by arbiter after bounty expiration to settle with their\n', '     * ground truth determination and pay out assertion rewards\n', '     *\n', '     * @param bountyGuid the guid of the bounty to settle\n', '     * @param votes bitset of votes representing ground truth for the\n', '     *      bounty&#39;s artifacts\n', '     */\n', '    function voteOnBounty(\n', '        uint128 bountyGuid,\n', '        uint256 votes,\n', '        bool validBloom\n', '    )\n', '        external\n', '        onlyArbiter\n', '        whenNotPaused\n', '    {\n', '        Bounty storage bounty = bountiesByGuid[bountyGuid];\n', '        Vote[] storage bountyVotes = votesByGuid[bountyGuid];\n', '\n', '        // Check if this bounty has been initialized\n', '        require(bounty.author != address(0), "Bounty has not been initialized");\n', '        // Check that the reveal round has closed\n', '        require(bounty.expirationBlock.add(ASSERTION_REVEAL_WINDOW) <= block.number, "Reveal round is still active");\n', '        // Check if the voting round has closed\n', '        require(bounty.expirationBlock.add(ASSERTION_REVEAL_WINDOW).add(arbiterVoteWindow) > block.number, "Voting round has closed");\n', '        // Check to make sure arbiters can&#39;t double vote\n', '        require(arbiterVoteRegistryByGuid[bountyGuid][msg.sender] == false, "Arbiter has already voted");\n', '\n', '        Vote memory a = Vote(\n', '            msg.sender,\n', '            votes,\n', '            validBloom\n', '        );\n', '\n', '        votesByGuid[bountyGuid].push(a);\n', '\n', '        staking.recordBounty(msg.sender, bountyGuid, block.number);\n', '        arbiterVoteRegistryByGuid[bountyGuid][msg.sender] = true;\n', '        uint256 tempQuorumMask = 0;\n', '        uint256 quorumCount = 0;\n', '        mapping (uint256 => uint256) quorumVotes = quorumVotesByGuid[bountyGuid];\n', '        for (uint256 i = 0; i < bounty.numArtifacts; i++) {\n', '\n', '            if (bounty.quorumMask != 0 && (bounty.quorumMask & (1 << i) != 0)) {\n', '                tempQuorumMask = tempQuorumMask.add(calculateMask(i, 1));\n', '                quorumCount = quorumCount.add(1);\n', '                continue;\n', '            }\n', '\n', '            if (votes & (1 << i) != 0) {\n', '                quorumVotes[i] = quorumVotes[i].add(1);\n', '            }\n', '\n', '            uint256 benignVotes = bountyVotes.length.sub(quorumVotes[i]);\n', '            uint256 maxBenignValue = arbiterCount.sub(quorumVotes[i]).mul(BENIGN_VOTE_COEFFICIENT);\n', '            uint256 maxMalValue = arbiterCount.sub(benignVotes).mul(MALICIOUS_VOTE_COEFFICIENT);\n', '\n', '            if (quorumVotes[i].mul(MALICIOUS_VOTE_COEFFICIENT) >= maxBenignValue || benignVotes.mul(BENIGN_VOTE_COEFFICIENT) > maxMalValue) {\n', '                tempQuorumMask = tempQuorumMask.add(calculateMask(i, 1));\n', '                quorumCount = quorumCount.add(1);\n', '            }\n', '        }\n', '\n', '        // set new mask\n', '        bounty.quorumMask = tempQuorumMask;\n', '\n', '        // check if all arbiters have voted or if we have quorum for all the artifacts\n', '        if ((bountyVotes.length == arbiterCount || quorumCount == bounty.numArtifacts) && !bounty.quorumReached)  {\n', '            bounty.quorumReached = true;\n', '            bounty.quorumBlock = block.number.sub(bountiesByGuid[bountyGuid].expirationBlock);\n', '            emit QuorumReached(bountyGuid);\n', '        }\n', '\n', '        emit NewVote(bountyGuid, votes, bounty.numArtifacts, msg.sender);\n', '    }\n', '\n', '    // This struct exists to move state from settleBounty into memory from stack\n', '    // to avoid solidity limitations\n', '    struct ArtifactPot {\n', '        uint256 numWinners;\n', '        uint256 numLosers;\n', '        uint256 winnerPool;\n', '        uint256 loserPool;\n', '    }\n', '\n', '    /**\n', '     * Function to calculate the reward disbursment of a bounty\n', '     *\n', '     * @param bountyGuid the guid of the bounty to calculate\n', '     * @return Rewards distributed by the bounty\n', '     */\n', '    function calculateBountyRewards(\n', '        uint128 bountyGuid\n', '    )\n', '        public\n', '        view\n', '        returns (uint256 bountyRefund, uint256 arbiterReward, uint256[] expertRewards)\n', '    {\n', '        Bounty storage bounty = bountiesByGuid[bountyGuid];\n', '        Assertion[] storage assertions = assertionsByGuid[bountyGuid];\n', '        Vote[] storage votes = votesByGuid[bountyGuid];\n', '        mapping (uint256 => uint256) quorumVotes = quorumVotesByGuid[bountyGuid];\n', '\n', '        // Check if this bountiesByGuid[bountyGuid] has been initialized\n', '        require(bounty.author != address(0), "Bounty has not been initialized");\n', '        // Check if this bounty has been previously resolved for the sender\n', '        require(!bountySettled[bountyGuid][msg.sender], "Bounty has already been settled for sender");\n', '        // Check that the voting round has closed\n', '        // solium-disable-next-line indentation\n', '        require(bounty.expirationBlock.add(ASSERTION_REVEAL_WINDOW).add(arbiterVoteWindow) <= block.number || bounty.quorumReached,\n', '            "Voting round is still active and quorum has not been reached");\n', '\n', '        expertRewards = new uint256[](assertions.length);\n', '\n', '        ArtifactPot memory ap = ArtifactPot({numWinners: 0, numLosers: 0, winnerPool: 0, loserPool: 0});\n', '\n', '        uint256 i = 0;\n', '        uint256 j = 0;\n', '\n', '        if (assertions.length == 0 && votes.length == 0) {\n', '            // Refund the bounty amount and fees to ambassador\n', '            bountyRefund = bounty.numArtifacts.mul(bounty.amount.add(BOUNTY_FEE));\n', '        } else if (assertions.length == 0) {\n', '            // Refund the bounty amount ambassador\n', '            bountyRefund = bounty.amount.mul(bounty.numArtifacts);\n', '        } else if (votes.length == 0) {\n', '            // Refund bids, fees, and distribute the bounty amount evenly to experts\n', '            bountyRefund = BOUNTY_FEE.mul(bounty.numArtifacts);\n', '            for (j = 0; j < assertions.length; j++) {\n', '                expertRewards[j] = expertRewards[j].add(ASSERTION_FEE);\n', '                expertRewards[j] = expertRewards[j].add(assertions[j].bid);\n', '                expertRewards[j] = expertRewards[j].add(bounty.amount.div(assertions.length));\n', '                expertRewards[j] = expertRewards[j].mul(bounty.numArtifacts);\n', '            }\n', '        } else {\n', '            for (i = 0; i < bounty.numArtifacts; i++) {\n', '                ap = ArtifactPot({numWinners: 0, numLosers: 0, winnerPool: 0, loserPool: 0});\n', '                bool consensus = quorumVotes[i].mul(MALICIOUS_VOTE_COEFFICIENT) >= votes.length.sub(quorumVotes[i]).mul(BENIGN_VOTE_COEFFICIENT);\n', '\n', '                for (j = 0; j < assertions.length; j++) {\n', '                    bool malicious;\n', '\n', '                    // If we didn&#39;t assert on this artifact\n', '                    if (assertions[j].mask & (1 << i) == 0) {\n', '                        continue;\n', '                    }\n', '\n', '                    // If we haven&#39;t revealed set to incorrect value\n', '                    if (assertions[j].nonce == 0) {\n', '                        malicious = !consensus;\n', '                    } else {\n', '                        malicious = (assertions[j].verdicts & assertions[j].mask) & (1 << i) != 0;\n', '                    }\n', '\n', '                    if (malicious == consensus) {\n', '                        ap.numWinners = ap.numWinners.add(1);\n', '                        ap.winnerPool = ap.winnerPool.add(assertions[j].bid);\n', '                    } else {\n', '                        ap.numLosers = ap.numLosers.add(1);\n', '                        ap.loserPool = ap.loserPool.add(assertions[j].bid);\n', '                    }\n', '                }\n', '\n', '                // If nobody asserted on this artifact, refund the ambassador\n', '                if (ap.numWinners == 0 && ap.numLosers == 0) {\n', '                    bountyRefund = bountyRefund.add(bounty.amount);\n', '                    for (j = 0; j < assertions.length; j++) {\n', '                        expertRewards[j] = expertRewards[j].add(assertions[j].bid);\n', '                    }\n', '                } else {\n', '                    for (j = 0; j < assertions.length; j++) {\n', '                        expertRewards[j] = expertRewards[j].add(assertions[j].bid);\n', '\n', '                        // If we didn&#39;t assert on this artifact\n', '                        if (assertions[j].mask & (1 << i) == 0) {\n', '                            continue;\n', '                        }\n', '\n', '                        // If we haven&#39;t revealed set to incorrect value\n', '                        if (assertions[j].nonce == 0) {\n', '                            malicious = !consensus;\n', '                        } else {\n', '                            malicious = (assertions[j].verdicts & assertions[j].mask) & (1 << i) != 0;\n', '                        }\n', '\n', '                        if (malicious == consensus) {\n', '                            expertRewards[j] = expertRewards[j].add(assertions[j].bid.mul(ap.loserPool).div(ap.winnerPool));\n', '                            expertRewards[j] = expertRewards[j].add(bounty.amount.mul(assertions[j].bid).div(ap.winnerPool));\n', '                        } else {\n', '                            expertRewards[j] = expertRewards[j].sub(assertions[j].bid);\n', '                        }\n', '                    }\n', '                }\n', '            }\n', '        }\n', '\n', '        // Calculate rewards\n', '        uint256 pot = bounty.amount.add(BOUNTY_FEE.add(ASSERTION_FEE.mul(assertions.length)));\n', '        for (i = 0; i < assertions.length; i++) {\n', '            pot = pot.add(assertions[i].bid);\n', '        }\n', '\n', '        bountyRefund = bountyRefund.div(bounty.numArtifacts);\n', '        pot = pot.sub(bountyRefund);\n', '\n', '        for (i = 0; i < assertions.length; i++) {\n', '            expertRewards[i] = expertRewards[i].div(bounty.numArtifacts);\n', '            pot = pot.sub(expertRewards[i]);\n', '        }\n', '\n', '        arbiterReward = pot;\n', '    }\n', '\n', '    /**\n', '     * Function called after window has closed to handle reward disbursal\n', '     *\n', '     * This function will pay out rewards if the the bounty has a super majority\n', '     * @param bountyGuid the guid of the bounty to settle\n', '     */\n', '    function settleBounty(uint128 bountyGuid) external whenNotPaused {\n', '        Bounty storage bounty = bountiesByGuid[bountyGuid];\n', '        Assertion[] storage assertions = assertionsByGuid[bountyGuid];\n', '\n', '        // Check if this bountiesByGuid[bountyGuid] has been initialized\n', '        require(bounty.author != address(0), "Bounty has not been initialized");\n', '        // Check if this bounty has been previously resolved for the sender\n', '        require(!bountySettled[bountyGuid][msg.sender], "Bounty has already been settled for sender");\n', '        // Check that the voting round has closed\n', '        // solium-disable-next-line indentation\n', '        require(bounty.expirationBlock.add(ASSERTION_REVEAL_WINDOW).add(arbiterVoteWindow) <= block.number || bounty.quorumReached,\n', '            "Voting round is still active and quorum has not been reached");\n', '\n', '        if (isArbiter(msg.sender)) {\n', '            require(bounty.expirationBlock.add(ASSERTION_REVEAL_WINDOW).add(arbiterVoteWindow) <= block.number, "Voting round still active");\n', '            if (bounty.assignedArbiter == address(0)) {\n', '                if (bounty.expirationBlock.add(ASSERTION_REVEAL_WINDOW).add(arbiterVoteWindow).add(VALID_HASH_PERIOD) >= block.number) {\n', '                    bounty.assignedArbiter = getWeightedRandomArbiter(bountyGuid);\n', '                } else {\n', '                    bounty.assignedArbiter = msg.sender;\n', '                }\n', '            }\n', '        }\n', '\n', '        uint256 payout = 0;\n', '        uint256 bountyRefund;\n', '        uint256 arbiterReward;\n', '        uint256[] memory expertRewards;\n', '        (bountyRefund, arbiterReward, expertRewards) = calculateBountyRewards(bountyGuid);\n', '\n', '        bountySettled[bountyGuid][msg.sender] = true;\n', '\n', '        // Disburse rewards\n', '        if (bountyRefund != 0 && bounty.author == msg.sender) {\n', '            token.safeTransfer(bounty.author, bountyRefund);\n', '            payout = payout.add(bountyRefund);\n', '        }\n', '\n', '        for (uint256 i = 0; i < assertions.length; i++) {\n', '            if (expertRewards[i] != 0 && assertions[i].author == msg.sender) {\n', '                token.safeTransfer(assertions[i].author, expertRewards[i]);\n', '                payout = payout.add(expertRewards[i]);\n', '            }\n', '        }\n', '\n', '        if (arbiterReward != 0 && bounty.assignedArbiter == msg.sender) {\n', '            token.safeTransfer(bounty.assignedArbiter, arbiterReward);\n', '            payout = payout.add(arbiterReward);\n', '        }\n', '\n', '        emit SettledBounty(bountyGuid, msg.sender, payout);\n', '    }\n', '\n', '    /**\n', '     *  Generates a random number from 0 to range based on the last block hash\n', '     *\n', '     *  @param seed random number for reproducing\n', '     *  @param range end range for random number\n', '     */\n', '    function randomGen(uint256 targetBlock, uint seed, uint256 range) private view returns (int256 randomNumber) {\n', '        return int256(uint256(keccak256(abi.encodePacked(blockhash(targetBlock), seed))) % range);\n', '    }\n', '\n', '    /**\n', '     * Gets a random Arbiter weighted by the amount of Nectar they have\n', '     *\n', '     * @param bountyGuid the guid of the bounty\n', '     */\n', '    function getWeightedRandomArbiter(uint128 bountyGuid) public view returns (address voter) {\n', '        require(bountiesByGuid[bountyGuid].author != address(0), "Bounty has not been initialized");\n', '\n', '        Bounty memory bounty = bountiesByGuid[bountyGuid];\n', '        Vote[] memory votes = votesByGuid[bountyGuid];\n', '\n', '        if (votes.length == 0) {\n', '            return address(0);\n', '        }\n', '\n', '        uint i;\n', '        uint256 sum = 0;\n', '        int256 randomNum;\n', '\n', '        for (i = 0; i < votes.length; i++) {\n', '            sum = sum.add(staking.balanceOf(votes[i].author));\n', '        }\n', '\n', '        randomNum = randomGen(bounty.expirationBlock.add(ASSERTION_REVEAL_WINDOW).add(arbiterVoteWindow), block.number, sum);\n', '\n', '        for (i = 0; i < votes.length; i++) {\n', '            randomNum -= int256(staking.balanceOf(votes[i].author));\n', '\n', '            if (randomNum <= 0) {\n', '                voter = votes[i].author;\n', '                break;\n', '            }\n', '        }\n', '\n', '    }\n', '\n', '    /**\n', '     * Get the total number of bounties tracked by the contract\n', '     * @return total number of bounties\n', '     */\n', '    function getNumberOfBounties() external view returns (uint) {\n', '        return bountyGuids.length;\n', '    }\n', '\n', '    /**\n', '     * Get the current round for a bounty\n', '     *\n', '     * @param bountyGuid the guid of the bounty\n', '     * @return the current round\n', '     *      0 = assertions being accepted\n', '     *      1 = assertions being revealed\n', '     *      2 = arbiters voting\n', '     *      3 = bounty finished\n', '     */\n', '    function getCurrentRound(uint128 bountyGuid) external view returns (uint) {\n', '        // Check if this bounty has been initialized\n', '        require(bountiesByGuid[bountyGuid].author != address(0), "Bounty has not been initialized");\n', '\n', '        Bounty memory bounty = bountiesByGuid[bountyGuid];\n', '\n', '        if (bounty.expirationBlock > block.number) {\n', '            return 0;\n', '        } else if (bounty.expirationBlock.add(ASSERTION_REVEAL_WINDOW) > block.number) {\n', '            return 1;\n', '        } else if (bounty.expirationBlock.add(ASSERTION_REVEAL_WINDOW).add(arbiterVoteWindow) > block.number &&\n', '                  !bounty.quorumReached) {\n', '            return 2;\n', '        } else {\n', '            return 3;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Gets the number of assertions for a bounty\n', '     *\n', '     * @param bountyGuid the guid of the bounty\n', '     * @return number of assertions for the given bounty\n', '     */\n', '    function getNumberOfAssertions(uint128 bountyGuid) external view returns (uint) {\n', '        // Check if this bounty has been initialized\n', '        require(bountiesByGuid[bountyGuid].author != address(0), "Bounty has not been initialized");\n', '\n', '        return assertionsByGuid[bountyGuid].length;\n', '    }\n', '\n', '    /**\n', '     * Gets the vote count for a specific bounty\n', '     *\n', '     * @param bountyGuid the guid of the bounty\n', '     */\n', '    function getNumberOfVotes(uint128 bountyGuid) external view returns (uint) {\n', '        require(bountiesByGuid[bountyGuid].author != address(0), "Bounty has not been initialized");\n', '\n', '        return votesByGuid[bountyGuid].length;\n', '    }\n', '\n', '    /**\n', '     * Gets all the voters for a specific bounty\n', '     *\n', '     * @param bountyGuid the guid of the bounty\n', '     */\n', '    function getVoters(uint128 bountyGuid) external view returns (address[]) {\n', '        require(bountiesByGuid[bountyGuid].author != address(0), "Bounty has not been initialized");\n', '\n', '        Vote[] memory votes = votesByGuid[bountyGuid];\n', '        uint count = votes.length;\n', '\n', '        address[] memory voters = new address[](count);\n', '\n', '        for (uint i = 0; i < count; i++) {\n', '            voters[i] = votes[i].author;\n', '        }\n', '\n', '        return voters;\n', '    }\n', '\n', '    /** Candidate for future arbiter */\n', '    struct Candidate {\n', '        address addr;\n', '        uint256 count;\n', '    }\n', '\n', '    /**\n', '     * View function displays most active bounty posters over past\n', '     * ARBITER_LOOKBACK_RANGE bounties to select future arbiters\n', '     *\n', '     * @return sorted array of most active bounty posters\n', '     */\n', '    function getArbiterCandidates() external view returns (address[]) {\n', '        require(bountyGuids.length > 0, "No bounties have been placed");\n', '\n', '        uint256 count = 0;\n', '        Candidate[] memory candidates = new Candidate[](ARBITER_LOOKBACK_RANGE);\n', '\n', '        uint256 lastBounty = 0;\n', '        if (bountyGuids.length > ARBITER_LOOKBACK_RANGE) {\n', '            lastBounty = bountyGuids.length.sub(ARBITER_LOOKBACK_RANGE);\n', '        }\n', '\n', '        for (uint256 i = bountyGuids.length; i > lastBounty; i--) {\n', '            address addr = bountiesByGuid[bountyGuids[i.sub(1)]].author;\n', '            bool found = false;\n', '            for (uint256 j = 0; j < count; j++) {\n', '                if (candidates[j].addr == addr) {\n', '                    candidates[j].count = candidates[j].count.add(1);\n', '                    found = true;\n', '                    break;\n', '                }\n', '            }\n', '\n', '            if (!found) {\n', '                candidates[count] = Candidate(addr, 1);\n', '                count = count.add(1);\n', '            }\n', '        }\n', '\n', '        address[] memory ret = new address[](count);\n', '\n', '        for (i = 0; i < ret.length; i++) {\n', '            uint256 next = 0;\n', '            uint256 value = candidates[0].count;\n', '\n', '\n', '\n', '            for (j = 0; j < count; j++) {\n', '                if (candidates[j].count > value) {\n', '                    next = j;\n', '                    value = candidates[j].count;\n', '                }\n', '            }\n', '\n', '            ret[i] = candidates[next].addr;\n', '            candidates[next] = candidates[count.sub(1)];\n', '            count = count.sub(1);\n', '        }\n', '\n', '        return ret;\n', '    }\n', '\n', '    function calculateMask(uint256 i, uint256 b) public pure returns(uint256) {\n', '        if (b != 0) {\n', '            return 1 << i;\n', '        }\n', '\n', '        return 0;\n', '    }\n', '\n', '    /**\n', '     * View function displays the most active bounty voters over past\n', '     * ARBITER_LOOKBACK_RANGE bounties to select future arbiters\n', '     *\n', '     * @return a sorted array of most active bounty voters and a boolean array of whether\n', '     * or not they were active in 90% of bounty votes\n', '     */\n', '\n', '    function getActiveArbiters() external view returns (address[], bool[]) {\n', '        require(bountyGuids.length > 0, "No bounties have been placed");\n', '        uint256 count = 0;\n', '        uint256 threshold = bountyGuids.length.div(10).mul(9);\n', '        address[] memory ret_addr = new address[](count);\n', '        bool[] memory ret_arbiter_ativity_threshold = new bool[](count);\n', '\n', '        Candidate[] memory candidates = new Candidate[](ARBITER_LOOKBACK_RANGE);\n', '\n', '        uint256 lastBounty = 0;\n', '        if (bountyGuids.length > ARBITER_LOOKBACK_RANGE) {\n', '            lastBounty = bountyGuids.length.sub(ARBITER_LOOKBACK_RANGE);\n', '            threshold = lastBounty.div(10).mul(9);\n', '        }\n', '\n', '        for (uint256 i = bountyGuids.length.sub(1); i > lastBounty; i--) {\n', '            Vote[] memory votes = votesByGuid[bountyGuids[i]];\n', '\n', '            for (uint256 j = 0; j < votes.length; j++) {\n', '                bool found = false;\n', '                address addr = votes[j].author;\n', '\n', '                for (uint256 k = 0; k < count; k++) {\n', '                    if (candidates[k].addr == addr) {\n', '                        candidates[k].count = candidates[k].count.add(1);\n', '                        found = true;\n', '                        break;\n', '                    }\n', '                }\n', '\n', '                if (!found) {\n', '                    candidates[count] = Candidate(addr, 1);\n', '                    count = count.add(1);\n', '                }\n', '\n', '            }\n', '\n', '        }\n', '\n', '\n', '        for (i = 0; i < ret_addr.length; i++) {\n', '            uint256 next = 0;\n', '            uint256 value = candidates[0].count;\n', '\n', '            for (j = 0; j < count; j++) {\n', '                if (candidates[j].count > value) {\n', '                    next = j;\n', '                    value = candidates[j].count;\n', '                }\n', '            }\n', '\n', '            ret_addr[i] = candidates[next].addr;\n', '            if (candidates[next].count.div(10).mul(9) < threshold) {\n', '                ret_arbiter_ativity_threshold[i] = false;\n', '            } else {\n', '                ret_arbiter_ativity_threshold[i] = true;\n', '            }\n', '\n', '            count = count.sub(1);\n', '            candidates[next] = candidates[count];\n', '        }\n', '\n', '        return (ret_addr, ret_arbiter_ativity_threshold);\n', '\n', '    }\n', '\n', '}\n', 'pragma solidity ^0.4.21;\n', '\n', '\n', '\n', '\n', '//import "./BountyRegistry.sol";\n', '\n', 'contract ArbiterStaking is Pausable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for NectarToken;\n', '\n', '    uint256 public constant MINIMUM_STAKE = 10000000 * 10 ** 18;\n', '    uint256 public constant MAXIMUM_STAKE = 100000000 * 10 ** 18;\n', '    uint8 public constant VOTE_RATIO_NUMERATOR = 9;\n', '    uint8 public constant VOTE_RATIO_DENOMINATOR = 10;\n', '    string public constant VERSION = "1.0.0";\n', '\n', '    // Deposits\n', '    struct Deposit {\n', '        uint256 blockNumber;\n', '        uint256 value;\n', '    }\n', '\n', '    event NewDeposit(\n', '        address indexed from,\n', '        uint256 value\n', '    );\n', '\n', '    event NewWithdrawal(\n', '        address indexed to,\n', '        uint256 value\n', '    );\n', '\n', '    mapping(address => Deposit[]) public deposits;\n', '\n', '    // Bounties\n', '    event BountyRecorded(\n', '        uint128 indexed guid,\n', '        uint256 blockNumber\n', '    );\n', '\n', '    event BountyVoteRecorded(\n', '        address arbiter\n', '    );\n', '\n', '    uint256 public numBounties;\n', '    mapping(uint128 => bool) public bounties;\n', '    mapping(address => uint256) public bountyResponses;\n', '    mapping(uint128 => mapping(address => bool)) public bountyResponseByGuidAndAddress;\n', '\n', '    uint256 public stakeDuration;\n', '    NectarToken internal token;\n', '    BountyRegistry internal registry;\n', '\n', '    /**\n', '     * Construct a new ArbiterStaking\n', '     *\n', '     * @param _token address of NCT token to use\n', '     */\n', '    constructor(address _token, uint256 _stakeDuration) Ownable() public {\n', '        token = NectarToken(_token);\n', '        stakeDuration = _stakeDuration;\n', '    }\n', '\n', '    /**\n', '     * Sets the registry value with the live BountyRegistry\n', '\n', '     * @param _bountyRegistry Address of BountyRegistry contract\n', '     */\n', '    function setBountyRegistry(address _bountyRegistry) public onlyOwner {\n', '        registry = BountyRegistry(_bountyRegistry);\n', '    }\n', '\n', '    /**\n', '     * Handle a deposit upon receiving approval for a token transfer\n', '     * Called from NectarToken.approveAndCall\n', '     *\n', '     * @param _from Account depositing NCT\n', '     * @param _value Amount of NCT being deposited\n', '     * @param _tokenContract Address of the NCT contract\n', '     * @return true if successful else false\n', '     */\n', '    function receiveApproval(\n', '        address _from,\n', '        uint256 _value,\n', '        address _tokenContract,\n', '        bytes\n', '    )\n', '        public\n', '        whenNotPaused\n', '        returns (bool)\n', '    {\n', '        require(msg.sender == address(token), "Must be called from the token.");\n', '        return receiveApprovalInternal(_from, _value, _tokenContract, new bytes(0));\n', '    }\n', '\n', '    function receiveApprovalInternal(\n', '        address _from,\n', '        uint256 _value,\n', '        address _tokenContract,\n', '        bytes\n', '    )\n', '        internal\n', '        whenNotPaused\n', '        returns (bool)\n', '    {\n', '        require(registry.isArbiter(_from), "Deposit target is not an arbiter");\n', '        // Ensure we are depositing something\n', '        require(_value > 0, "Zero value being deposited");\n', '        // Ensure we are called from he right token contract\n', '        require(_tokenContract == address(token), "Invalid token being deposited");\n', '        // Ensure that we are not staking more than the maximum\n', '        require(balanceOf(_from).add(_value) <= MAXIMUM_STAKE, "Value greater than maximum stake");\n', '\n', '        token.safeTransferFrom(_from, this, _value);\n', '        deposits[_from].push(Deposit(block.number, _value));\n', '        emit NewDeposit(_from, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Deposit NCT (requires prior approval)\n', '     *\n', '     * @param value The amount of NCT to deposit\n', '     */\n', '    function deposit(uint256 value) public whenNotPaused {\n', '        require(receiveApprovalInternal(msg.sender, value, token, new bytes(0)), "Depositing stake failed");\n', '    }\n', '\n', '    /**\n', '     * Retrieve the (total) current balance of staked NCT for an account\n', '     *\n', '     * @param addr The account whos balance to retrieve\n', '     * @return The current (total) balance of the account\n', '     */\n', '    function balanceOf(address addr) public view returns (uint256) {\n', '        uint256 ret = 0;\n', '        Deposit[] storage ds = deposits[addr];\n', '        for (uint256 i = 0; i < ds.length; i++) {\n', '            ret = ret.add(ds[i].value);\n', '        }\n', '        return ret;\n', '    }\n', '\n', '    /**\n', '     * Retrieve the withdrawable current balance of staked NCT for an account\n', '     *\n', '     * @param addr The account whos balance to retrieve\n', '     * @return The current withdrawable balance of the account\n', '     */\n', '    function withdrawableBalanceOf(address addr) public view returns (uint256) {\n', '        uint256 ret = 0;\n', '        if (block.number < stakeDuration) {\n', '            return ret;\n', '        }\n', '        uint256 latest_block = block.number.sub(stakeDuration);\n', '        Deposit[] storage ds = deposits[addr];\n', '        for (uint256 i = 0; i < ds.length; i++) {\n', '            if (ds[i].blockNumber <= latest_block) {\n', '                ret = ret.add(ds[i].value);\n', '            } else {\n', '                break;\n', '            }\n', '        }\n', '        return ret;\n', '    }\n', '\n', '    /**\n', '     * Withdraw staked NCT\n', '     * @param value The amount of NCT to withdraw\n', '     */\n', '    function withdraw(uint256 value) public whenNotPaused {\n', '        require(deposits[msg.sender].length > 0, "Cannot withdraw without some deposits.");\n', '        uint256 remaining = value;\n', '        uint256 latest_block = block.number.sub(stakeDuration);\n', '        Deposit[] storage ds = deposits[msg.sender];\n', '\n', '        require(value <= withdrawableBalanceOf(msg.sender), "Value exceeds withdrawable balance");\n', '\n', '        // Determine which deposits we will modifiy\n', '        for (uint256 end = 0; end < ds.length; end++) {\n', '            if (ds[end].blockNumber <= latest_block) {\n', '                if (ds[end].value >= remaining) {\n', '                    ds[end].value = ds[end].value.sub(remaining);\n', '                    if (ds[end].value == 0) {\n', '                        end++;\n', '                    }\n', '                    remaining = 0;\n', '                    break;\n', '                } else {\n', '                    remaining = remaining.sub(ds[end].value);\n', '                }\n', '            } else {\n', '                break;\n', '            }\n', '        }\n', '\n', '        // If we haven&#39;t hit our value by now, we don&#39;t have enough available\n', '        // funds\n', '        require(remaining == 0, "Value exceeds withdrawable balance");\n', '\n', '        // Delete the obsolete deposits\n', '        for (uint256 i = 0; i < ds.length.sub(end); i++) {\n', '            ds[i] = ds[i.add(end)];\n', '        }\n', '\n', '        for (i = ds.length.sub(end); i < ds.length; i++) {\n', '            delete ds[i];\n', '        }\n', '\n', '        ds.length = ds.length.sub(end);\n', '\n', '        // Do the transfer\n', '        token.safeTransfer(msg.sender, value);\n', '        emit NewWithdrawal(msg.sender, value);\n', '    }\n', '\n', '    /**\n', '     * Is an address an eligible arbiter?\n', '     * @param addr The address to validate\n', '     * @return true if address is eligible else false\n', '     */\n', '    function isEligible(address addr) public view returns (bool) {\n', '        uint256 num;\n', '        uint256 den;\n', '        (num, den) = arbiterResponseRate(addr);\n', '\n', '        return balanceOf(addr) >= MINIMUM_STAKE &&\n', '            (den < VOTE_RATIO_DENOMINATOR || num.mul(VOTE_RATIO_DENOMINATOR).div(den) >= VOTE_RATIO_NUMERATOR);\n', '    }\n', '\n', '    /**\n', '     * Record a bounty that an arbiter has voted on\n', '     *\n', '     * @param arbiter The address of the arbiter\n', '     * @param bountyGuid The guid of the bounty\n', '     */\n', '    function recordBounty(address arbiter, uint128 bountyGuid, uint256 blockNumber) public {\n', '        require(msg.sender == address(registry), "Can only be called by the BountyRegistry.");\n', '        require(arbiter != address(0), "Invalid arbiter address");\n', '        require(blockNumber != 0, "Invalid block number");\n', '\n', '        // New bounty\n', '        if (!bounties[bountyGuid]) {\n', '            bounties[bountyGuid] = true;\n', '            numBounties = numBounties.add(1);\n', '            emit BountyRecorded(bountyGuid, blockNumber);\n', '        }\n', '\n', '        // First response to this bounty by this arbiter\n', '        if (!bountyResponseByGuidAndAddress[bountyGuid][arbiter]) {\n', '            bountyResponseByGuidAndAddress[bountyGuid][arbiter] = true;\n', '            bountyResponses[arbiter] = bountyResponses[arbiter].add(1);\n', '        }\n', '\n', '        emit BountyVoteRecorded(arbiter);\n', '    }\n', '\n', '    /**\n', '     * Determines the ratio of past bounties that the arbiter has responded to\n', '     *\n', '     * @param arbiter The address of the arbiter\n', '     * @return number of bounties responded to, number of bounties considered\n', '     */\n', '    function arbiterResponseRate(address arbiter) public view returns (uint256 num, uint256 den) {\n', '        num = bountyResponses[arbiter];\n', '        den = numBounties;\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    require(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    require(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier hasMintPermission() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    hasMintPermission\n', '    canMint\n', '    public\n', '    returns (bool)\n', '  {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: contracts/NectarToken.sol\n', '\n', 'contract NectarToken is MintableToken {\n', '    string public name = "Nectar";\n', '    string public symbol = "NCT";\n', '    uint8 public decimals = 18;\n', '\n', '    bool public transfersEnabled = false;\n', '    event TransfersEnabled();\n', '\n', '    // Disable transfers until after the sale\n', '    modifier whenTransfersEnabled() {\n', '        require(transfersEnabled, "Transfers not enabled");\n', '        _;\n', '    }\n', '\n', '    modifier whenTransfersNotEnabled() {\n', '        require(!transfersEnabled, "Transfers enabled");\n', '        _;\n', '    }\n', '\n', '    function enableTransfers() public onlyOwner whenTransfersNotEnabled {\n', '        transfersEnabled = true;\n', '        emit TransfersEnabled();\n', '    }\n', '\n', '    function transfer(address to, uint256 value) public whenTransfersEnabled returns (bool) {\n', '        return super.transfer(to, value);\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public whenTransfersEnabled returns (bool) {\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '\n', '    // Approves and then calls the receiving contract\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '\n', '        // Call the receiveApproval function on the contract you want to be notified.\n', "        // This crafts the function signature manually so one doesn't have to include a contract in here just for this.\n", '        //\n', '        // receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '        //\n', '        // It is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '\n', '        // solium-disable-next-line security/no-low-level-calls, indentation\n', '        require(_spender.call(bytes4(bytes32(keccak256("receiveApproval(address,uint256,address,bytes)"))),\n', '            msg.sender, _value, this, _extraData), "receiveApproval failed");\n', '        return true;\n', '    }\n', '}\n', '\n', '// File: contracts/ArbiterStaking.sol\n', '\n', '//import "./ArbiterStaking.sol";\n', '\n', '\n', '\n', 'contract BountyRegistry is Pausable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for NectarToken;\n', '\n', '    string public constant VERSION = "1.0.0";\n', '\n', '    struct Bounty {\n', '        uint128 guid;\n', '        address author;\n', '        uint256 amount;\n', '        string artifactURI;\n', '        uint256 numArtifacts;\n', '        uint256 expirationBlock;\n', '        address assignedArbiter;\n', '        bool quorumReached;\n', '        uint256 quorumBlock;\n', '        uint256 quorumMask;\n', '    }\n', '\n', '    struct Assertion {\n', '        address author;\n', '        uint256 bid;\n', '        uint256 mask;\n', '        uint256 commitment;\n', '        uint256 nonce;\n', '        uint256 verdicts;\n', '        string metadata;\n', '    }\n', '\n', '    struct Vote {\n', '        address author;\n', '        uint256 votes;\n', '        bool validBloom;\n', '    }\n', '\n', '    event AddedArbiter(\n', '        address arbiter,\n', '        uint256 blockNumber\n', '    );\n', '\n', '    event RemovedArbiter(\n', '        address arbiter,\n', '        uint256 blockNumber\n', '    );\n', '\n', '    event NewBounty(\n', '        uint128 guid,\n', '        address author,\n', '        uint256 amount,\n', '        string artifactURI,\n', '        uint256 expirationBlock\n', '    );\n', '\n', '    event NewAssertion(\n', '        uint128 bountyGuid,\n', '        address author,\n', '        uint256 index,\n', '        uint256 bid,\n', '        uint256 mask,\n', '        uint256 numArtifacts,\n', '        uint256 commitment\n', '    );\n', '\n', '    event RevealedAssertion(\n', '        uint128 bountyGuid,\n', '        address author,\n', '        uint256 index,\n', '        uint256 nonce,\n', '        uint256 verdicts,\n', '        uint256 numArtifacts,\n', '        string metadata\n', '    );\n', '\n', '    event NewVote(\n', '        uint128 bountyGuid,\n', '        uint256 votes,\n', '        uint256 numArtifacts,\n', '        address voter\n', '    );\n', '\n', '    event QuorumReached(\n', '        uint128 bountyGuid\n', '    );\n', '\n', '    event SettledBounty(\n', '        uint128 bountyGuid,\n', '        address settler,\n', '        uint256 payout\n', '    );\n', '\n', '    ArbiterStaking public staking;\n', '    NectarToken internal token;\n', '\n', '    uint256 public constant BOUNTY_FEE = 62500000000000000;\n', '    uint256 public constant ASSERTION_FEE = 31250000000000000;\n', '    uint256 public constant BOUNTY_AMOUNT_MINIMUM = 62500000000000000;\n', '    uint256 public constant ASSERTION_BID_MINIMUM = 62500000000000000;\n', '    uint256 public constant ARBITER_LOOKBACK_RANGE = 100;\n', '    uint256 public constant MAX_DURATION = 100; // BLOCKS\n', '    uint256 public constant ASSERTION_REVEAL_WINDOW = 25; // BLOCKS\n', '    uint256 public constant MALICIOUS_VOTE_COEFFICIENT = 10;\n', '    uint256 public constant BENIGN_VOTE_COEFFICIENT = 1;\n', '    uint256 public constant VALID_HASH_PERIOD = 256; // number of blocks in the past you can still get a blockhash\n', '\n', '\n', '    uint256 public arbiterCount;\n', '    uint256 public arbiterVoteWindow;\n', '    uint128[] public bountyGuids;\n', '    mapping (uint128 => Bounty) public bountiesByGuid;\n', '    mapping (uint128 => Assertion[]) public assertionsByGuid;\n', '    mapping (uint128 => Vote[]) public votesByGuid;\n', '    mapping (uint128 => uint256[8]) public bloomByGuid;\n', '    mapping (uint128 => mapping (uint256 => uint256)) public quorumVotesByGuid;\n', '    mapping (address => bool) public arbiters;\n', '    mapping (uint256 => mapping (uint256 => uint256)) public voteCountByGuid;\n', '    mapping (uint256 => mapping (address => bool)) public arbiterVoteRegistryByGuid;\n', '    mapping (uint256 => mapping (address => bool)) public expertAssertionResgistryByGuid;\n', '    mapping (uint128 => mapping (address => bool)) public bountySettled;\n', '\n', '    /**\n', '     * Construct a new BountyRegistry\n', '     *\n', '     * @param _token address of NCT token to use\n', '     */\n', '    constructor(address _token, address _arbiterStaking, uint256 _arbiterVoteWindow) Ownable() public {\n', '        owner = msg.sender;\n', '        token = NectarToken(_token);\n', '        staking = ArbiterStaking(_arbiterStaking);\n', '        arbiterVoteWindow = _arbiterVoteWindow;\n', '    }\n', '\n', '    /**\n', '     * Function to check if an address is a valid arbiter\n', '     *\n', '     * @param addr The address to check\n', '     * @return true if addr is a valid arbiter else false\n', '     */\n', '    function isArbiter(address addr) public view returns (bool) {\n', '        // Remove arbiter requirements for now, while we are whitelisting\n', '        // arbiters on the platform\n', '        //return arbiters[addr] && staking.isEligible(addr);\n', '        return arbiters[addr];\n', '    }\n', '\n', '    /** Function only callable by arbiter */\n', '    modifier onlyArbiter() {\n', '        require(isArbiter(msg.sender), "msg.sender is not an arbiter");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Function called to add an arbiter, emits an evevnt with the added arbiter\n', '     * and block number used to calculate their arbiter status based on public\n', '     * arbiter selection algorithm.\n', '     *\n', '     * @param newArbiter the arbiter to add\n', '     * @param blockNumber the block number the determination to add was\n', '     *      calculated from\n', '     */\n', '    function addArbiter(address newArbiter, uint256 blockNumber) external whenNotPaused onlyOwner {\n', '        require(newArbiter != address(0), "Invalid arbiter address");\n', '        require(!arbiters[newArbiter], "Address is already an arbiter");\n', '        arbiterCount = arbiterCount.add(1);\n', '        arbiters[newArbiter] = true;\n', '        emit AddedArbiter(newArbiter, blockNumber);\n', '    }\n', '\n', '    /**\n', '     * Function called to remove an arbiter, emits an evevnt with the removed\n', '     * arbiter and block number used to calculate their arbiter status based on\n', '     * public arbiter selection algorithm.\n', '     *\n', '     * @param arbiter the arbiter to remove\n', '     * @param blockNumber the block number the determination to remove was\n', '     *      calculated from\n', '     */\n', '    function removeArbiter(address arbiter, uint256 blockNumber) external whenNotPaused onlyOwner {\n', '        arbiters[arbiter] = false;\n', '        arbiterCount = arbiterCount.sub(1);\n', '        emit RemovedArbiter(arbiter, blockNumber);\n', '    }\n', '\n', '    /**\n', '     * Function called by end users and ambassadors to post a bounty\n', '     *\n', '     * @param guid the guid of the bounty, must be unique\n', '     * @param amount the amount of NCT to post as a reward\n', '     * @param artifactURI uri of the artifacts comprising this bounty\n', '     * @param durationBlocks duration of this bounty in blocks\n', '     */\n', '    function postBounty(\n', '        uint128 guid,\n', '        uint256 amount,\n', '        string artifactURI,\n', '        uint256 numArtifacts,\n', '        uint256 durationBlocks,\n', '        uint256[8] bloom\n', '    )\n', '    external\n', '    whenNotPaused\n', '    {\n', '        // Check if a bounty with this GUID has already been initialized\n', '        require(bountiesByGuid[guid].author == address(0), "GUID already in use");\n', '        // Check that our bounty amount is sufficient\n', '        require(amount >= BOUNTY_AMOUNT_MINIMUM, "Bounty amount below minimum");\n', '        // Check that our URI is non-empty\n', '        require(bytes(artifactURI).length > 0, "Invalid artifact URI");\n', '        // Check that our number of artifacts is valid\n', '        require(numArtifacts <= 256, "Too many artifacts in bounty");\n', '        require(numArtifacts > 0, "Not enough artifacts in bounty");\n', '        // Check that our duration is non-zero and less than or equal to the max\n', '        require(durationBlocks > 0 && durationBlocks <= MAX_DURATION, "Invalid bounty duration");\n', '\n', '        // Assess fees and transfer bounty amount into escrow\n', '        token.safeTransferFrom(msg.sender, address(this), amount.add(BOUNTY_FEE));\n', '\n', '        bountiesByGuid[guid].guid = guid;\n', '        bountiesByGuid[guid].author = msg.sender;\n', '        bountiesByGuid[guid].amount = amount;\n', '        bountiesByGuid[guid].artifactURI = artifactURI;\n', '\n', '        // Number of artifacts is submitted as part of the bounty, we have no\n', '        // way to check how many exist in this IPFS resource. For an IPFS\n', '        // resource with N artifacts, if numArtifacts < N only the first\n', '        // numArtifacts artifacts are included in this bounty, if numArtifacts >\n', '        // N then the last N - numArtifacts bounties are considered benign.\n', '        bountiesByGuid[guid].numArtifacts = numArtifacts;\n', '        bountiesByGuid[guid].expirationBlock = durationBlocks.add(block.number);\n', '\n', '        bountyGuids.push(guid);\n', '\n', '        bloomByGuid[guid] = bloom;\n', '\n', '        emit NewBounty(\n', '            bountiesByGuid[guid].guid,\n', '            bountiesByGuid[guid].author,\n', '            bountiesByGuid[guid].amount,\n', '            bountiesByGuid[guid].artifactURI,\n', '            bountiesByGuid[guid].expirationBlock\n', '        );\n', '    }\n', '\n', '    /**\n', '     * Function called by security experts to post an assertion on a bounty\n', '     *\n', '     * @param bountyGuid the guid of the bounty to assert on\n', '     * @param bid the amount of NCT to stake\n', '     * @param mask the artifacts to assert on from the set in the bounty\n', '     * @param commitment a commitment hash of the verdicts being asserted, equal\n', '     *      to keccak256(verdicts ^ keccak256(nonce)) where nonce != 0\n', '     */\n', '    function postAssertion(\n', '        uint128 bountyGuid,\n', '        uint256 bid,\n', '        uint256 mask,\n', '        uint256 commitment\n', '    )\n', '        external\n', '        whenNotPaused\n', '    {\n', '        // Check if this bounty has been initialized\n', '        require(bountiesByGuid[bountyGuid].author != address(0), "Bounty has not been initialized");\n', '        // Check that our bid amount is sufficient\n', '        require(bid >= ASSERTION_BID_MINIMUM, "Assertion bid below minimum");\n', '        // Check if this bounty is active\n', '        require(bountiesByGuid[bountyGuid].expirationBlock > block.number, "Bounty inactive");\n', '        // Check if the sender has already made an assertion\n', '        require(expertAssertionResgistryByGuid[bountyGuid][msg.sender] == false, "Sender has already asserted");\n', '        // Assess fees and transfer bid amount into escrow\n', '        token.safeTransferFrom(msg.sender, address(this), bid.add(ASSERTION_FEE));\n', '\n', '        expertAssertionResgistryByGuid[bountyGuid][msg.sender] = true;\n', '\n', '        Assertion memory a = Assertion(\n', '            msg.sender,\n', '            bid,\n', '            mask,\n', '            commitment,\n', '            0,\n', '            0,\n', '            ""\n', '        );\n', '\n', '        uint256 index = assertionsByGuid[bountyGuid].push(a) - 1;\n', '        uint256 numArtifacts = bountiesByGuid[bountyGuid].numArtifacts;\n', '\n', '        emit NewAssertion(\n', '            bountyGuid,\n', '            a.author,\n', '            index,\n', '            a.bid,\n', '            a.mask,\n', '            numArtifacts,\n', '            a.commitment\n', '        );\n', '    }\n', '\n', '    // https://ethereum.stackexchange.com/questions/4170/how-to-convert-a-uint-to-bytes-in-solidity\n', '    function uint256_to_bytes(uint256 x) internal pure returns (bytes b) {\n', '        b = new bytes(32);\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly { mstore(add(b, 32), x) }\n', '    }\n', '\n', '    /**\n', '     * Function called by security experts to reveal an assertion after bounty\n', '     * expiration\n', '     *\n', '     * @param bountyGuid the guid of the bounty to assert on\n', '     * @param assertionId the id of the assertion to reveal\n', '     * @param assertionId the id of the assertion to reveal\n', '     * @param nonce the nonce used to generate the commitment hash\n', '     * @param verdicts the verdicts making up this assertion\n', '     * @param metadata optional metadata to include in the assertion\n', '     */\n', '    function revealAssertion(\n', '        uint128 bountyGuid,\n', '        uint256 assertionId,\n', '        uint256 nonce,\n', '        uint256 verdicts,\n', '        string metadata\n', '    )\n', '        external\n', '        whenNotPaused\n', '    {\n', '        // Check if this bounty has been initialized\n', '        require(bountiesByGuid[bountyGuid].author != address(0), "Bounty has not been initialized");\n', '        // Check that the bounty is no longer active\n', '        require(bountiesByGuid[bountyGuid].expirationBlock <= block.number, "Bounty is still active");\n', '        // Check if the reveal round has closed\n', '        require(bountiesByGuid[bountyGuid].expirationBlock.add(ASSERTION_REVEAL_WINDOW) > block.number, "Reveal round has closed");\n', '        // Get numArtifacts to help decode all zero verdicts\n', '        uint256 numArtifacts = bountiesByGuid[bountyGuid].numArtifacts;\n', '\n', '        // Zero is defined as an invalid nonce\n', '        require(nonce != 0, "Invalid nonce");\n', '\n', '        // Check our id\n', '        require(assertionId < assertionsByGuid[bountyGuid].length, "Invalid assertion ID");\n', '\n', '        Assertion storage a = assertionsByGuid[bountyGuid][assertionId];\n', '        require(a.author == msg.sender, "Incorrect assertion author");\n', '        require(a.nonce == 0, "Bounty already revealed");\n', '\n', '        // Check our commitment hash, by xor-ing verdicts with the hashed nonce\n', "        // and the sender's address prevent copying assertions by submitting the\n", '        // same commitment hash and nonce during the reveal round\n', '        uint256 hashed_nonce = uint256(keccak256(uint256_to_bytes(nonce)));\n', '        uint256 commitment = uint256(keccak256(uint256_to_bytes(verdicts ^ hashed_nonce ^ uint256(msg.sender))));\n', '        require(commitment == a.commitment, "Commitment hash mismatch");\n', '\n', '        a.nonce = nonce;\n', '        a.verdicts = verdicts;\n', '        a.metadata = metadata;\n', '\n', '        emit RevealedAssertion(\n', '            bountyGuid,\n', '            a.author,\n', '            assertionId,\n', '            a.nonce,\n', '            a.verdicts,\n', '            numArtifacts,\n', '            a.metadata\n', '        );\n', '    }\n', '\n', '    /**\n', '     * Function called by arbiter after bounty expiration to settle with their\n', '     * ground truth determination and pay out assertion rewards\n', '     *\n', '     * @param bountyGuid the guid of the bounty to settle\n', '     * @param votes bitset of votes representing ground truth for the\n', "     *      bounty's artifacts\n", '     */\n', '    function voteOnBounty(\n', '        uint128 bountyGuid,\n', '        uint256 votes,\n', '        bool validBloom\n', '    )\n', '        external\n', '        onlyArbiter\n', '        whenNotPaused\n', '    {\n', '        Bounty storage bounty = bountiesByGuid[bountyGuid];\n', '        Vote[] storage bountyVotes = votesByGuid[bountyGuid];\n', '\n', '        // Check if this bounty has been initialized\n', '        require(bounty.author != address(0), "Bounty has not been initialized");\n', '        // Check that the reveal round has closed\n', '        require(bounty.expirationBlock.add(ASSERTION_REVEAL_WINDOW) <= block.number, "Reveal round is still active");\n', '        // Check if the voting round has closed\n', '        require(bounty.expirationBlock.add(ASSERTION_REVEAL_WINDOW).add(arbiterVoteWindow) > block.number, "Voting round has closed");\n', "        // Check to make sure arbiters can't double vote\n", '        require(arbiterVoteRegistryByGuid[bountyGuid][msg.sender] == false, "Arbiter has already voted");\n', '\n', '        Vote memory a = Vote(\n', '            msg.sender,\n', '            votes,\n', '            validBloom\n', '        );\n', '\n', '        votesByGuid[bountyGuid].push(a);\n', '\n', '        staking.recordBounty(msg.sender, bountyGuid, block.number);\n', '        arbiterVoteRegistryByGuid[bountyGuid][msg.sender] = true;\n', '        uint256 tempQuorumMask = 0;\n', '        uint256 quorumCount = 0;\n', '        mapping (uint256 => uint256) quorumVotes = quorumVotesByGuid[bountyGuid];\n', '        for (uint256 i = 0; i < bounty.numArtifacts; i++) {\n', '\n', '            if (bounty.quorumMask != 0 && (bounty.quorumMask & (1 << i) != 0)) {\n', '                tempQuorumMask = tempQuorumMask.add(calculateMask(i, 1));\n', '                quorumCount = quorumCount.add(1);\n', '                continue;\n', '            }\n', '\n', '            if (votes & (1 << i) != 0) {\n', '                quorumVotes[i] = quorumVotes[i].add(1);\n', '            }\n', '\n', '            uint256 benignVotes = bountyVotes.length.sub(quorumVotes[i]);\n', '            uint256 maxBenignValue = arbiterCount.sub(quorumVotes[i]).mul(BENIGN_VOTE_COEFFICIENT);\n', '            uint256 maxMalValue = arbiterCount.sub(benignVotes).mul(MALICIOUS_VOTE_COEFFICIENT);\n', '\n', '            if (quorumVotes[i].mul(MALICIOUS_VOTE_COEFFICIENT) >= maxBenignValue || benignVotes.mul(BENIGN_VOTE_COEFFICIENT) > maxMalValue) {\n', '                tempQuorumMask = tempQuorumMask.add(calculateMask(i, 1));\n', '                quorumCount = quorumCount.add(1);\n', '            }\n', '        }\n', '\n', '        // set new mask\n', '        bounty.quorumMask = tempQuorumMask;\n', '\n', '        // check if all arbiters have voted or if we have quorum for all the artifacts\n', '        if ((bountyVotes.length == arbiterCount || quorumCount == bounty.numArtifacts) && !bounty.quorumReached)  {\n', '            bounty.quorumReached = true;\n', '            bounty.quorumBlock = block.number.sub(bountiesByGuid[bountyGuid].expirationBlock);\n', '            emit QuorumReached(bountyGuid);\n', '        }\n', '\n', '        emit NewVote(bountyGuid, votes, bounty.numArtifacts, msg.sender);\n', '    }\n', '\n', '    // This struct exists to move state from settleBounty into memory from stack\n', '    // to avoid solidity limitations\n', '    struct ArtifactPot {\n', '        uint256 numWinners;\n', '        uint256 numLosers;\n', '        uint256 winnerPool;\n', '        uint256 loserPool;\n', '    }\n', '\n', '    /**\n', '     * Function to calculate the reward disbursment of a bounty\n', '     *\n', '     * @param bountyGuid the guid of the bounty to calculate\n', '     * @return Rewards distributed by the bounty\n', '     */\n', '    function calculateBountyRewards(\n', '        uint128 bountyGuid\n', '    )\n', '        public\n', '        view\n', '        returns (uint256 bountyRefund, uint256 arbiterReward, uint256[] expertRewards)\n', '    {\n', '        Bounty storage bounty = bountiesByGuid[bountyGuid];\n', '        Assertion[] storage assertions = assertionsByGuid[bountyGuid];\n', '        Vote[] storage votes = votesByGuid[bountyGuid];\n', '        mapping (uint256 => uint256) quorumVotes = quorumVotesByGuid[bountyGuid];\n', '\n', '        // Check if this bountiesByGuid[bountyGuid] has been initialized\n', '        require(bounty.author != address(0), "Bounty has not been initialized");\n', '        // Check if this bounty has been previously resolved for the sender\n', '        require(!bountySettled[bountyGuid][msg.sender], "Bounty has already been settled for sender");\n', '        // Check that the voting round has closed\n', '        // solium-disable-next-line indentation\n', '        require(bounty.expirationBlock.add(ASSERTION_REVEAL_WINDOW).add(arbiterVoteWindow) <= block.number || bounty.quorumReached,\n', '            "Voting round is still active and quorum has not been reached");\n', '\n', '        expertRewards = new uint256[](assertions.length);\n', '\n', '        ArtifactPot memory ap = ArtifactPot({numWinners: 0, numLosers: 0, winnerPool: 0, loserPool: 0});\n', '\n', '        uint256 i = 0;\n', '        uint256 j = 0;\n', '\n', '        if (assertions.length == 0 && votes.length == 0) {\n', '            // Refund the bounty amount and fees to ambassador\n', '            bountyRefund = bounty.numArtifacts.mul(bounty.amount.add(BOUNTY_FEE));\n', '        } else if (assertions.length == 0) {\n', '            // Refund the bounty amount ambassador\n', '            bountyRefund = bounty.amount.mul(bounty.numArtifacts);\n', '        } else if (votes.length == 0) {\n', '            // Refund bids, fees, and distribute the bounty amount evenly to experts\n', '            bountyRefund = BOUNTY_FEE.mul(bounty.numArtifacts);\n', '            for (j = 0; j < assertions.length; j++) {\n', '                expertRewards[j] = expertRewards[j].add(ASSERTION_FEE);\n', '                expertRewards[j] = expertRewards[j].add(assertions[j].bid);\n', '                expertRewards[j] = expertRewards[j].add(bounty.amount.div(assertions.length));\n', '                expertRewards[j] = expertRewards[j].mul(bounty.numArtifacts);\n', '            }\n', '        } else {\n', '            for (i = 0; i < bounty.numArtifacts; i++) {\n', '                ap = ArtifactPot({numWinners: 0, numLosers: 0, winnerPool: 0, loserPool: 0});\n', '                bool consensus = quorumVotes[i].mul(MALICIOUS_VOTE_COEFFICIENT) >= votes.length.sub(quorumVotes[i]).mul(BENIGN_VOTE_COEFFICIENT);\n', '\n', '                for (j = 0; j < assertions.length; j++) {\n', '                    bool malicious;\n', '\n', "                    // If we didn't assert on this artifact\n", '                    if (assertions[j].mask & (1 << i) == 0) {\n', '                        continue;\n', '                    }\n', '\n', "                    // If we haven't revealed set to incorrect value\n", '                    if (assertions[j].nonce == 0) {\n', '                        malicious = !consensus;\n', '                    } else {\n', '                        malicious = (assertions[j].verdicts & assertions[j].mask) & (1 << i) != 0;\n', '                    }\n', '\n', '                    if (malicious == consensus) {\n', '                        ap.numWinners = ap.numWinners.add(1);\n', '                        ap.winnerPool = ap.winnerPool.add(assertions[j].bid);\n', '                    } else {\n', '                        ap.numLosers = ap.numLosers.add(1);\n', '                        ap.loserPool = ap.loserPool.add(assertions[j].bid);\n', '                    }\n', '                }\n', '\n', '                // If nobody asserted on this artifact, refund the ambassador\n', '                if (ap.numWinners == 0 && ap.numLosers == 0) {\n', '                    bountyRefund = bountyRefund.add(bounty.amount);\n', '                    for (j = 0; j < assertions.length; j++) {\n', '                        expertRewards[j] = expertRewards[j].add(assertions[j].bid);\n', '                    }\n', '                } else {\n', '                    for (j = 0; j < assertions.length; j++) {\n', '                        expertRewards[j] = expertRewards[j].add(assertions[j].bid);\n', '\n', "                        // If we didn't assert on this artifact\n", '                        if (assertions[j].mask & (1 << i) == 0) {\n', '                            continue;\n', '                        }\n', '\n', "                        // If we haven't revealed set to incorrect value\n", '                        if (assertions[j].nonce == 0) {\n', '                            malicious = !consensus;\n', '                        } else {\n', '                            malicious = (assertions[j].verdicts & assertions[j].mask) & (1 << i) != 0;\n', '                        }\n', '\n', '                        if (malicious == consensus) {\n', '                            expertRewards[j] = expertRewards[j].add(assertions[j].bid.mul(ap.loserPool).div(ap.winnerPool));\n', '                            expertRewards[j] = expertRewards[j].add(bounty.amount.mul(assertions[j].bid).div(ap.winnerPool));\n', '                        } else {\n', '                            expertRewards[j] = expertRewards[j].sub(assertions[j].bid);\n', '                        }\n', '                    }\n', '                }\n', '            }\n', '        }\n', '\n', '        // Calculate rewards\n', '        uint256 pot = bounty.amount.add(BOUNTY_FEE.add(ASSERTION_FEE.mul(assertions.length)));\n', '        for (i = 0; i < assertions.length; i++) {\n', '            pot = pot.add(assertions[i].bid);\n', '        }\n', '\n', '        bountyRefund = bountyRefund.div(bounty.numArtifacts);\n', '        pot = pot.sub(bountyRefund);\n', '\n', '        for (i = 0; i < assertions.length; i++) {\n', '            expertRewards[i] = expertRewards[i].div(bounty.numArtifacts);\n', '            pot = pot.sub(expertRewards[i]);\n', '        }\n', '\n', '        arbiterReward = pot;\n', '    }\n', '\n', '    /**\n', '     * Function called after window has closed to handle reward disbursal\n', '     *\n', '     * This function will pay out rewards if the the bounty has a super majority\n', '     * @param bountyGuid the guid of the bounty to settle\n', '     */\n', '    function settleBounty(uint128 bountyGuid) external whenNotPaused {\n', '        Bounty storage bounty = bountiesByGuid[bountyGuid];\n', '        Assertion[] storage assertions = assertionsByGuid[bountyGuid];\n', '\n', '        // Check if this bountiesByGuid[bountyGuid] has been initialized\n', '        require(bounty.author != address(0), "Bounty has not been initialized");\n', '        // Check if this bounty has been previously resolved for the sender\n', '        require(!bountySettled[bountyGuid][msg.sender], "Bounty has already been settled for sender");\n', '        // Check that the voting round has closed\n', '        // solium-disable-next-line indentation\n', '        require(bounty.expirationBlock.add(ASSERTION_REVEAL_WINDOW).add(arbiterVoteWindow) <= block.number || bounty.quorumReached,\n', '            "Voting round is still active and quorum has not been reached");\n', '\n', '        if (isArbiter(msg.sender)) {\n', '            require(bounty.expirationBlock.add(ASSERTION_REVEAL_WINDOW).add(arbiterVoteWindow) <= block.number, "Voting round still active");\n', '            if (bounty.assignedArbiter == address(0)) {\n', '                if (bounty.expirationBlock.add(ASSERTION_REVEAL_WINDOW).add(arbiterVoteWindow).add(VALID_HASH_PERIOD) >= block.number) {\n', '                    bounty.assignedArbiter = getWeightedRandomArbiter(bountyGuid);\n', '                } else {\n', '                    bounty.assignedArbiter = msg.sender;\n', '                }\n', '            }\n', '        }\n', '\n', '        uint256 payout = 0;\n', '        uint256 bountyRefund;\n', '        uint256 arbiterReward;\n', '        uint256[] memory expertRewards;\n', '        (bountyRefund, arbiterReward, expertRewards) = calculateBountyRewards(bountyGuid);\n', '\n', '        bountySettled[bountyGuid][msg.sender] = true;\n', '\n', '        // Disburse rewards\n', '        if (bountyRefund != 0 && bounty.author == msg.sender) {\n', '            token.safeTransfer(bounty.author, bountyRefund);\n', '            payout = payout.add(bountyRefund);\n', '        }\n', '\n', '        for (uint256 i = 0; i < assertions.length; i++) {\n', '            if (expertRewards[i] != 0 && assertions[i].author == msg.sender) {\n', '                token.safeTransfer(assertions[i].author, expertRewards[i]);\n', '                payout = payout.add(expertRewards[i]);\n', '            }\n', '        }\n', '\n', '        if (arbiterReward != 0 && bounty.assignedArbiter == msg.sender) {\n', '            token.safeTransfer(bounty.assignedArbiter, arbiterReward);\n', '            payout = payout.add(arbiterReward);\n', '        }\n', '\n', '        emit SettledBounty(bountyGuid, msg.sender, payout);\n', '    }\n', '\n', '    /**\n', '     *  Generates a random number from 0 to range based on the last block hash\n', '     *\n', '     *  @param seed random number for reproducing\n', '     *  @param range end range for random number\n', '     */\n', '    function randomGen(uint256 targetBlock, uint seed, uint256 range) private view returns (int256 randomNumber) {\n', '        return int256(uint256(keccak256(abi.encodePacked(blockhash(targetBlock), seed))) % range);\n', '    }\n', '\n', '    /**\n', '     * Gets a random Arbiter weighted by the amount of Nectar they have\n', '     *\n', '     * @param bountyGuid the guid of the bounty\n', '     */\n', '    function getWeightedRandomArbiter(uint128 bountyGuid) public view returns (address voter) {\n', '        require(bountiesByGuid[bountyGuid].author != address(0), "Bounty has not been initialized");\n', '\n', '        Bounty memory bounty = bountiesByGuid[bountyGuid];\n', '        Vote[] memory votes = votesByGuid[bountyGuid];\n', '\n', '        if (votes.length == 0) {\n', '            return address(0);\n', '        }\n', '\n', '        uint i;\n', '        uint256 sum = 0;\n', '        int256 randomNum;\n', '\n', '        for (i = 0; i < votes.length; i++) {\n', '            sum = sum.add(staking.balanceOf(votes[i].author));\n', '        }\n', '\n', '        randomNum = randomGen(bounty.expirationBlock.add(ASSERTION_REVEAL_WINDOW).add(arbiterVoteWindow), block.number, sum);\n', '\n', '        for (i = 0; i < votes.length; i++) {\n', '            randomNum -= int256(staking.balanceOf(votes[i].author));\n', '\n', '            if (randomNum <= 0) {\n', '                voter = votes[i].author;\n', '                break;\n', '            }\n', '        }\n', '\n', '    }\n', '\n', '    /**\n', '     * Get the total number of bounties tracked by the contract\n', '     * @return total number of bounties\n', '     */\n', '    function getNumberOfBounties() external view returns (uint) {\n', '        return bountyGuids.length;\n', '    }\n', '\n', '    /**\n', '     * Get the current round for a bounty\n', '     *\n', '     * @param bountyGuid the guid of the bounty\n', '     * @return the current round\n', '     *      0 = assertions being accepted\n', '     *      1 = assertions being revealed\n', '     *      2 = arbiters voting\n', '     *      3 = bounty finished\n', '     */\n', '    function getCurrentRound(uint128 bountyGuid) external view returns (uint) {\n', '        // Check if this bounty has been initialized\n', '        require(bountiesByGuid[bountyGuid].author != address(0), "Bounty has not been initialized");\n', '\n', '        Bounty memory bounty = bountiesByGuid[bountyGuid];\n', '\n', '        if (bounty.expirationBlock > block.number) {\n', '            return 0;\n', '        } else if (bounty.expirationBlock.add(ASSERTION_REVEAL_WINDOW) > block.number) {\n', '            return 1;\n', '        } else if (bounty.expirationBlock.add(ASSERTION_REVEAL_WINDOW).add(arbiterVoteWindow) > block.number &&\n', '                  !bounty.quorumReached) {\n', '            return 2;\n', '        } else {\n', '            return 3;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Gets the number of assertions for a bounty\n', '     *\n', '     * @param bountyGuid the guid of the bounty\n', '     * @return number of assertions for the given bounty\n', '     */\n', '    function getNumberOfAssertions(uint128 bountyGuid) external view returns (uint) {\n', '        // Check if this bounty has been initialized\n', '        require(bountiesByGuid[bountyGuid].author != address(0), "Bounty has not been initialized");\n', '\n', '        return assertionsByGuid[bountyGuid].length;\n', '    }\n', '\n', '    /**\n', '     * Gets the vote count for a specific bounty\n', '     *\n', '     * @param bountyGuid the guid of the bounty\n', '     */\n', '    function getNumberOfVotes(uint128 bountyGuid) external view returns (uint) {\n', '        require(bountiesByGuid[bountyGuid].author != address(0), "Bounty has not been initialized");\n', '\n', '        return votesByGuid[bountyGuid].length;\n', '    }\n', '\n', '    /**\n', '     * Gets all the voters for a specific bounty\n', '     *\n', '     * @param bountyGuid the guid of the bounty\n', '     */\n', '    function getVoters(uint128 bountyGuid) external view returns (address[]) {\n', '        require(bountiesByGuid[bountyGuid].author != address(0), "Bounty has not been initialized");\n', '\n', '        Vote[] memory votes = votesByGuid[bountyGuid];\n', '        uint count = votes.length;\n', '\n', '        address[] memory voters = new address[](count);\n', '\n', '        for (uint i = 0; i < count; i++) {\n', '            voters[i] = votes[i].author;\n', '        }\n', '\n', '        return voters;\n', '    }\n', '\n', '    /** Candidate for future arbiter */\n', '    struct Candidate {\n', '        address addr;\n', '        uint256 count;\n', '    }\n', '\n', '    /**\n', '     * View function displays most active bounty posters over past\n', '     * ARBITER_LOOKBACK_RANGE bounties to select future arbiters\n', '     *\n', '     * @return sorted array of most active bounty posters\n', '     */\n', '    function getArbiterCandidates() external view returns (address[]) {\n', '        require(bountyGuids.length > 0, "No bounties have been placed");\n', '\n', '        uint256 count = 0;\n', '        Candidate[] memory candidates = new Candidate[](ARBITER_LOOKBACK_RANGE);\n', '\n', '        uint256 lastBounty = 0;\n', '        if (bountyGuids.length > ARBITER_LOOKBACK_RANGE) {\n', '            lastBounty = bountyGuids.length.sub(ARBITER_LOOKBACK_RANGE);\n', '        }\n', '\n', '        for (uint256 i = bountyGuids.length; i > lastBounty; i--) {\n', '            address addr = bountiesByGuid[bountyGuids[i.sub(1)]].author;\n', '            bool found = false;\n', '            for (uint256 j = 0; j < count; j++) {\n', '                if (candidates[j].addr == addr) {\n', '                    candidates[j].count = candidates[j].count.add(1);\n', '                    found = true;\n', '                    break;\n', '                }\n', '            }\n', '\n', '            if (!found) {\n', '                candidates[count] = Candidate(addr, 1);\n', '                count = count.add(1);\n', '            }\n', '        }\n', '\n', '        address[] memory ret = new address[](count);\n', '\n', '        for (i = 0; i < ret.length; i++) {\n', '            uint256 next = 0;\n', '            uint256 value = candidates[0].count;\n', '\n', '\n', '\n', '            for (j = 0; j < count; j++) {\n', '                if (candidates[j].count > value) {\n', '                    next = j;\n', '                    value = candidates[j].count;\n', '                }\n', '            }\n', '\n', '            ret[i] = candidates[next].addr;\n', '            candidates[next] = candidates[count.sub(1)];\n', '            count = count.sub(1);\n', '        }\n', '\n', '        return ret;\n', '    }\n', '\n', '    function calculateMask(uint256 i, uint256 b) public pure returns(uint256) {\n', '        if (b != 0) {\n', '            return 1 << i;\n', '        }\n', '\n', '        return 0;\n', '    }\n', '\n', '    /**\n', '     * View function displays the most active bounty voters over past\n', '     * ARBITER_LOOKBACK_RANGE bounties to select future arbiters\n', '     *\n', '     * @return a sorted array of most active bounty voters and a boolean array of whether\n', '     * or not they were active in 90% of bounty votes\n', '     */\n', '\n', '    function getActiveArbiters() external view returns (address[], bool[]) {\n', '        require(bountyGuids.length > 0, "No bounties have been placed");\n', '        uint256 count = 0;\n', '        uint256 threshold = bountyGuids.length.div(10).mul(9);\n', '        address[] memory ret_addr = new address[](count);\n', '        bool[] memory ret_arbiter_ativity_threshold = new bool[](count);\n', '\n', '        Candidate[] memory candidates = new Candidate[](ARBITER_LOOKBACK_RANGE);\n', '\n', '        uint256 lastBounty = 0;\n', '        if (bountyGuids.length > ARBITER_LOOKBACK_RANGE) {\n', '            lastBounty = bountyGuids.length.sub(ARBITER_LOOKBACK_RANGE);\n', '            threshold = lastBounty.div(10).mul(9);\n', '        }\n', '\n', '        for (uint256 i = bountyGuids.length.sub(1); i > lastBounty; i--) {\n', '            Vote[] memory votes = votesByGuid[bountyGuids[i]];\n', '\n', '            for (uint256 j = 0; j < votes.length; j++) {\n', '                bool found = false;\n', '                address addr = votes[j].author;\n', '\n', '                for (uint256 k = 0; k < count; k++) {\n', '                    if (candidates[k].addr == addr) {\n', '                        candidates[k].count = candidates[k].count.add(1);\n', '                        found = true;\n', '                        break;\n', '                    }\n', '                }\n', '\n', '                if (!found) {\n', '                    candidates[count] = Candidate(addr, 1);\n', '                    count = count.add(1);\n', '                }\n', '\n', '            }\n', '\n', '        }\n', '\n', '\n', '        for (i = 0; i < ret_addr.length; i++) {\n', '            uint256 next = 0;\n', '            uint256 value = candidates[0].count;\n', '\n', '            for (j = 0; j < count; j++) {\n', '                if (candidates[j].count > value) {\n', '                    next = j;\n', '                    value = candidates[j].count;\n', '                }\n', '            }\n', '\n', '            ret_addr[i] = candidates[next].addr;\n', '            if (candidates[next].count.div(10).mul(9) < threshold) {\n', '                ret_arbiter_ativity_threshold[i] = false;\n', '            } else {\n', '                ret_arbiter_ativity_threshold[i] = true;\n', '            }\n', '\n', '            count = count.sub(1);\n', '            candidates[next] = candidates[count];\n', '        }\n', '\n', '        return (ret_addr, ret_arbiter_ativity_threshold);\n', '\n', '    }\n', '\n', '}\n', 'pragma solidity ^0.4.21;\n', '\n', '\n', '\n', '\n', '//import "./BountyRegistry.sol";\n', '\n', 'contract ArbiterStaking is Pausable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for NectarToken;\n', '\n', '    uint256 public constant MINIMUM_STAKE = 10000000 * 10 ** 18;\n', '    uint256 public constant MAXIMUM_STAKE = 100000000 * 10 ** 18;\n', '    uint8 public constant VOTE_RATIO_NUMERATOR = 9;\n', '    uint8 public constant VOTE_RATIO_DENOMINATOR = 10;\n', '    string public constant VERSION = "1.0.0";\n', '\n', '    // Deposits\n', '    struct Deposit {\n', '        uint256 blockNumber;\n', '        uint256 value;\n', '    }\n', '\n', '    event NewDeposit(\n', '        address indexed from,\n', '        uint256 value\n', '    );\n', '\n', '    event NewWithdrawal(\n', '        address indexed to,\n', '        uint256 value\n', '    );\n', '\n', '    mapping(address => Deposit[]) public deposits;\n', '\n', '    // Bounties\n', '    event BountyRecorded(\n', '        uint128 indexed guid,\n', '        uint256 blockNumber\n', '    );\n', '\n', '    event BountyVoteRecorded(\n', '        address arbiter\n', '    );\n', '\n', '    uint256 public numBounties;\n', '    mapping(uint128 => bool) public bounties;\n', '    mapping(address => uint256) public bountyResponses;\n', '    mapping(uint128 => mapping(address => bool)) public bountyResponseByGuidAndAddress;\n', '\n', '    uint256 public stakeDuration;\n', '    NectarToken internal token;\n', '    BountyRegistry internal registry;\n', '\n', '    /**\n', '     * Construct a new ArbiterStaking\n', '     *\n', '     * @param _token address of NCT token to use\n', '     */\n', '    constructor(address _token, uint256 _stakeDuration) Ownable() public {\n', '        token = NectarToken(_token);\n', '        stakeDuration = _stakeDuration;\n', '    }\n', '\n', '    /**\n', '     * Sets the registry value with the live BountyRegistry\n', '\n', '     * @param _bountyRegistry Address of BountyRegistry contract\n', '     */\n', '    function setBountyRegistry(address _bountyRegistry) public onlyOwner {\n', '        registry = BountyRegistry(_bountyRegistry);\n', '    }\n', '\n', '    /**\n', '     * Handle a deposit upon receiving approval for a token transfer\n', '     * Called from NectarToken.approveAndCall\n', '     *\n', '     * @param _from Account depositing NCT\n', '     * @param _value Amount of NCT being deposited\n', '     * @param _tokenContract Address of the NCT contract\n', '     * @return true if successful else false\n', '     */\n', '    function receiveApproval(\n', '        address _from,\n', '        uint256 _value,\n', '        address _tokenContract,\n', '        bytes\n', '    )\n', '        public\n', '        whenNotPaused\n', '        returns (bool)\n', '    {\n', '        require(msg.sender == address(token), "Must be called from the token.");\n', '        return receiveApprovalInternal(_from, _value, _tokenContract, new bytes(0));\n', '    }\n', '\n', '    function receiveApprovalInternal(\n', '        address _from,\n', '        uint256 _value,\n', '        address _tokenContract,\n', '        bytes\n', '    )\n', '        internal\n', '        whenNotPaused\n', '        returns (bool)\n', '    {\n', '        require(registry.isArbiter(_from), "Deposit target is not an arbiter");\n', '        // Ensure we are depositing something\n', '        require(_value > 0, "Zero value being deposited");\n', '        // Ensure we are called from he right token contract\n', '        require(_tokenContract == address(token), "Invalid token being deposited");\n', '        // Ensure that we are not staking more than the maximum\n', '        require(balanceOf(_from).add(_value) <= MAXIMUM_STAKE, "Value greater than maximum stake");\n', '\n', '        token.safeTransferFrom(_from, this, _value);\n', '        deposits[_from].push(Deposit(block.number, _value));\n', '        emit NewDeposit(_from, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Deposit NCT (requires prior approval)\n', '     *\n', '     * @param value The amount of NCT to deposit\n', '     */\n', '    function deposit(uint256 value) public whenNotPaused {\n', '        require(receiveApprovalInternal(msg.sender, value, token, new bytes(0)), "Depositing stake failed");\n', '    }\n', '\n', '    /**\n', '     * Retrieve the (total) current balance of staked NCT for an account\n', '     *\n', '     * @param addr The account whos balance to retrieve\n', '     * @return The current (total) balance of the account\n', '     */\n', '    function balanceOf(address addr) public view returns (uint256) {\n', '        uint256 ret = 0;\n', '        Deposit[] storage ds = deposits[addr];\n', '        for (uint256 i = 0; i < ds.length; i++) {\n', '            ret = ret.add(ds[i].value);\n', '        }\n', '        return ret;\n', '    }\n', '\n', '    /**\n', '     * Retrieve the withdrawable current balance of staked NCT for an account\n', '     *\n', '     * @param addr The account whos balance to retrieve\n', '     * @return The current withdrawable balance of the account\n', '     */\n', '    function withdrawableBalanceOf(address addr) public view returns (uint256) {\n', '        uint256 ret = 0;\n', '        if (block.number < stakeDuration) {\n', '            return ret;\n', '        }\n', '        uint256 latest_block = block.number.sub(stakeDuration);\n', '        Deposit[] storage ds = deposits[addr];\n', '        for (uint256 i = 0; i < ds.length; i++) {\n', '            if (ds[i].blockNumber <= latest_block) {\n', '                ret = ret.add(ds[i].value);\n', '            } else {\n', '                break;\n', '            }\n', '        }\n', '        return ret;\n', '    }\n', '\n', '    /**\n', '     * Withdraw staked NCT\n', '     * @param value The amount of NCT to withdraw\n', '     */\n', '    function withdraw(uint256 value) public whenNotPaused {\n', '        require(deposits[msg.sender].length > 0, "Cannot withdraw without some deposits.");\n', '        uint256 remaining = value;\n', '        uint256 latest_block = block.number.sub(stakeDuration);\n', '        Deposit[] storage ds = deposits[msg.sender];\n', '\n', '        require(value <= withdrawableBalanceOf(msg.sender), "Value exceeds withdrawable balance");\n', '\n', '        // Determine which deposits we will modifiy\n', '        for (uint256 end = 0; end < ds.length; end++) {\n', '            if (ds[end].blockNumber <= latest_block) {\n', '                if (ds[end].value >= remaining) {\n', '                    ds[end].value = ds[end].value.sub(remaining);\n', '                    if (ds[end].value == 0) {\n', '                        end++;\n', '                    }\n', '                    remaining = 0;\n', '                    break;\n', '                } else {\n', '                    remaining = remaining.sub(ds[end].value);\n', '                }\n', '            } else {\n', '                break;\n', '            }\n', '        }\n', '\n', "        // If we haven't hit our value by now, we don't have enough available\n", '        // funds\n', '        require(remaining == 0, "Value exceeds withdrawable balance");\n', '\n', '        // Delete the obsolete deposits\n', '        for (uint256 i = 0; i < ds.length.sub(end); i++) {\n', '            ds[i] = ds[i.add(end)];\n', '        }\n', '\n', '        for (i = ds.length.sub(end); i < ds.length; i++) {\n', '            delete ds[i];\n', '        }\n', '\n', '        ds.length = ds.length.sub(end);\n', '\n', '        // Do the transfer\n', '        token.safeTransfer(msg.sender, value);\n', '        emit NewWithdrawal(msg.sender, value);\n', '    }\n', '\n', '    /**\n', '     * Is an address an eligible arbiter?\n', '     * @param addr The address to validate\n', '     * @return true if address is eligible else false\n', '     */\n', '    function isEligible(address addr) public view returns (bool) {\n', '        uint256 num;\n', '        uint256 den;\n', '        (num, den) = arbiterResponseRate(addr);\n', '\n', '        return balanceOf(addr) >= MINIMUM_STAKE &&\n', '            (den < VOTE_RATIO_DENOMINATOR || num.mul(VOTE_RATIO_DENOMINATOR).div(den) >= VOTE_RATIO_NUMERATOR);\n', '    }\n', '\n', '    /**\n', '     * Record a bounty that an arbiter has voted on\n', '     *\n', '     * @param arbiter The address of the arbiter\n', '     * @param bountyGuid The guid of the bounty\n', '     */\n', '    function recordBounty(address arbiter, uint128 bountyGuid, uint256 blockNumber) public {\n', '        require(msg.sender == address(registry), "Can only be called by the BountyRegistry.");\n', '        require(arbiter != address(0), "Invalid arbiter address");\n', '        require(blockNumber != 0, "Invalid block number");\n', '\n', '        // New bounty\n', '        if (!bounties[bountyGuid]) {\n', '            bounties[bountyGuid] = true;\n', '            numBounties = numBounties.add(1);\n', '            emit BountyRecorded(bountyGuid, blockNumber);\n', '        }\n', '\n', '        // First response to this bounty by this arbiter\n', '        if (!bountyResponseByGuidAndAddress[bountyGuid][arbiter]) {\n', '            bountyResponseByGuidAndAddress[bountyGuid][arbiter] = true;\n', '            bountyResponses[arbiter] = bountyResponses[arbiter].add(1);\n', '        }\n', '\n', '        emit BountyVoteRecorded(arbiter);\n', '    }\n', '\n', '    /**\n', '     * Determines the ratio of past bounties that the arbiter has responded to\n', '     *\n', '     * @param arbiter The address of the arbiter\n', '     * @return number of bounties responded to, number of bounties considered\n', '     */\n', '    function arbiterResponseRate(address arbiter) public view returns (uint256 num, uint256 den) {\n', '        num = bountyResponses[arbiter];\n', '        den = numBounties;\n', '    }\n', '}']
