['pragma solidity ^0.4.23;\n', '\n', '// This is the proxy contract for the UUSD Token Registry\n', '\n', '// File: contracts/Proxy/Proxy.sol\n', '\n', '/**\n', ' * @title Proxy\n', ' * @dev Gives the possibility to delegate any call to a foreign implementation.\n', ' */\n', 'contract Proxy {\n', '    \n', '    /**\n', '    * @dev Tells the address of the implementation where every call will be delegated.\n', '    * @return address of the implementation to which it will be delegated\n', '    */\n', '    function implementation() public view returns (address);\n', '\n', '    /**\n', '    * @dev Fallback function allowing to perform a delegatecall to the given implementation.\n', '    * This function will return whatever the implementation call returns\n', '    */\n', '    function() external payable {\n', '        address _impl = implementation();\n', '        \n', '        assembly {\n', '            let ptr := mload(0x40)\n', '            calldatacopy(ptr, 0, calldatasize)\n', '            let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\n', '            let size := returndatasize\n', '            returndatacopy(ptr, 0, size)\n', '\n', '            switch result\n', '            case 0 { revert(ptr, size) }\n', '            default { return(ptr, size) }\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/Proxy/UpgradeabilityProxy.sol\n', '\n', '/**\n', ' * @title UpgradeabilityProxy\n', ' * @dev This contract represents a proxy where the implementation address to which it will delegate can be upgraded\n', ' */\n', 'contract UpgradeabilityProxy is Proxy {\n', '    /**\n', '    * @dev This event will be emitted every time the implementation gets upgraded\n', '    * @param implementation representing the address of the upgraded implementation\n', '    */\n', '    event Upgraded(address indexed implementation);\n', '\n', '    // Storage position of the address of the current implementation\n', '    bytes32 private constant implementationPosition = keccak256("trueUSD.proxy.implementation");\n', '\n', '    /**\n', '    * @dev Tells the address of the current implementation\n', '    * @return address of the current implementation\n', '    */\n', '    function implementation() public view returns (address impl) {\n', '        bytes32 position = implementationPosition;\n', '        assembly {\n', '          impl := sload(position)\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Sets the address of the current implementation\n', '    * @param newImplementation address representing the new implementation to be set\n', '    */\n', '    function _setImplementation(address newImplementation) internal {\n', '        bytes32 position = implementationPosition;\n', '        assembly {\n', '          sstore(position, newImplementation)\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Upgrades the implementation address\n', '    * @param newImplementation representing the address of the new implementation to be set\n', '    */\n', '    function _upgradeTo(address newImplementation) internal {\n', '        address currentImplementation = implementation();\n', '        require(currentImplementation != newImplementation);\n', '        _setImplementation(newImplementation);\n', '        emit Upgraded(newImplementation);\n', '    }\n', '}\n', '\n', '// File: contracts/Proxy/OwnedUpgradeabilityProxy.sol\n', '\n', '/**\n', ' * @title OwnedUpgradeabilityProxy\n', ' * @dev This contract combines an upgradeability proxy with basic authorization control functionalities\n', ' */\n', 'contract OwnedUpgradeabilityProxy is UpgradeabilityProxy {\n', '    /**\n', '    * @dev Event to show ownership has been transferred\n', '    * @param previousOwner representing the address of the previous owner\n', '    * @param newOwner representing the address of the new owner\n', '    */\n', '    event ProxyOwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '    * @dev Event to show ownership transfer is pending\n', '    * @param currentOwner representing the address of the current owner\n', '    * @param pendingOwner representing the address of the pending owner\n', '    */\n', '    event NewPendingOwner(address currentOwner, address pendingOwner);\n', '    \n', '    // Storage position of the owner and pendingOwner of the contract\n', '    bytes32 private constant proxyOwnerPosition = keccak256("trueUSD.proxy.owner");\n', '    bytes32 private constant pendingProxyOwnerPosition = keccak256("trueUSD.pending.proxy.owner");\n', '\n', '    /**\n', '    * @dev the constructor sets the original owner of the contract to the sender account.\n', '    */\n', '    constructor() public {\n', '        _setUpgradeabilityOwner(msg.sender);\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyProxyOwner() {\n', '        require(msg.sender == proxyOwner(), "only Proxy Owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the pending owner.\n', '    */\n', '    modifier onlyPendingProxyOwner() {\n', '        require(msg.sender == pendingProxyOwner(), "only pending Proxy Owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Tells the address of the owner\n', '    * @return the address of the owner\n', '    */\n', '    function proxyOwner() public view returns (address owner) {\n', '        bytes32 position = proxyOwnerPosition;\n', '        assembly {\n', '            owner := sload(position)\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Tells the address of the owner\n', '    * @return the address of the owner\n', '    */\n', '    function pendingProxyOwner() public view returns (address pendingOwner) {\n', '        bytes32 position = pendingProxyOwnerPosition;\n', '        assembly {\n', '            pendingOwner := sload(position)\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Sets the address of the owner\n', '    */\n', '    function _setUpgradeabilityOwner(address newProxyOwner) internal {\n', '        bytes32 position = proxyOwnerPosition;\n', '        assembly {\n', '            sstore(position, newProxyOwner)\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Sets the address of the owner\n', '    */\n', '    function _setPendingUpgradeabilityOwner(address newPendingProxyOwner) internal {\n', '        bytes32 position = pendingProxyOwnerPosition;\n', '        assembly {\n', '            sstore(position, newPendingProxyOwner)\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', "    *changes the pending owner to newOwner. But doesn't actually transfer\n", '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferProxyOwnership(address newOwner) external onlyProxyOwner {\n', '        require(newOwner != address(0));\n', '        _setPendingUpgradeabilityOwner(newOwner);\n', '        emit NewPendingOwner(proxyOwner(), newOwner);\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the pendingOwner to claim ownership of the proxy\n', '    */\n', '    function claimProxyOwnership() external onlyPendingProxyOwner {\n', '        emit ProxyOwnershipTransferred(proxyOwner(), pendingProxyOwner());\n', '        _setUpgradeabilityOwner(pendingProxyOwner());\n', '        _setPendingUpgradeabilityOwner(address(0));\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the proxy owner to upgrade the current version of the proxy.\n', '    * @param implementation representing the address of the new implementation to be set.\n', '    */\n', '    function upgradeTo(address implementation) external onlyProxyOwner {\n', '        _upgradeTo(implementation);\n', '    }\n', '}']