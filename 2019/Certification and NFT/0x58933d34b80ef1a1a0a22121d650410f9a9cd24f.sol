['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * ERC20 contract interface.\n', ' */\n', 'contract ERC20 {\n', '    function totalSupply() public view returns (uint);\n', '    function decimals() public view returns (uint);\n', '    function balanceOf(address tokenOwner) public view returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, reverts on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, reverts on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '    * @dev Returns ceil(a / b).\n', '    */\n', '    function ceil(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        if(a % b == 0) {\n', '            return c;\n', '        }\n', '        else {\n', '            return c + 1;\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @title KyberNetwork\n', ' * @dev Interface for KyberNetwork main contract.\n', ' */\n', 'contract KyberNetwork {\n', '\n', '    function getExpectedRate(\n', '        ERC20 src,\n', '        ERC20 dest,\n', '        uint srcQty\n', '    )\n', '        public\n', '        view\n', '        returns (uint expectedRate, uint slippageRate);\n', '\n', '    function trade(\n', '        ERC20 src,\n', '        uint srcAmount,\n', '        ERC20 dest,\n', '        address destAddress,\n', '        uint maxDestAmount,\n', '        uint minConversionRate,\n', '        address walletId\n', '    )\n', '        public\n', '        payable\n', '        returns(uint);\n', '}\n', '\n', '/**\n', ' * @title TokenPriceProvider\n', ' * @dev Simple contract returning the price in ETH for ERC20 tokens listed on KyberNetworks. \n', ' * @author Olivier Van Den Biggelaar - <olivier@argent.xyz>\n', ' */\n', 'contract TokenPriceProvider {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    // Mock token address for ETH\n', '    address constant internal ETH_TOKEN_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', "    // Address of Kyber's trading contract\n", '    address constant internal KYBER_NETWORK_ADDRESS = 0x818E6FECD516Ecc3849DAf6845e3EC868087B755;\n', '\n', '    mapping(address => uint256) public cachedPrices;\n', '\n', '    function syncPrice(ERC20 token) public {\n', '        uint256 expectedRate;\n', '        (expectedRate,) = kyberNetwork().getExpectedRate(token, ERC20(ETH_TOKEN_ADDRESS), 10000);\n', '        cachedPrices[token] = expectedRate;\n', '    }\n', '\n', '    //\n', '    // Convenience functions\n', '    //\n', '\n', '    function syncPriceForTokenList(ERC20[] tokens) public {\n', '        for(uint16 i = 0; i < tokens.length; i++) {\n', '            syncPrice(tokens[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Converts the value of _amount tokens in ether.\n', "     * @param _amount the amount of tokens to convert (in 'token wei' twei)\n", '     * @param _token the ERC20 token contract\n', '     * @return the ether value (in wei) of _amount tokens with contract _token\n', '     */\n', '    function getEtherValue(uint256 _amount, address _token) public view returns (uint256) {\n', '        uint256 decimals = ERC20(_token).decimals();\n', '        uint256 price = cachedPrices[_token];\n', '        return price.mul(_amount).div(10**decimals);\n', '    }\n', '\n', '    //\n', '    // Internal\n', '    //\n', '\n', '    function kyberNetwork() internal view returns (KyberNetwork) {\n', '        return KyberNetwork(KYBER_NETWORK_ADDRESS);\n', '    }\n', '}']