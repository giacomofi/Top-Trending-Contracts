['pragma solidity ^0.4.24;\n', '\n', '// File: contracts/token/IETokenProxy.sol\n', '\n', '/**\n', ' * MIT License\n', ' *\n', ' * Copyright (c) 2019 eToroX Labs\n', ' *\n', ' * Permission is hereby granted, free of charge, to any person obtaining a copy\n', ' * of this software and associated documentation files (the "Software"), to deal\n', ' * in the Software without restriction, including without limitation the rights\n', ' * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', ' * copies of the Software, and to permit persons to whom the Software is\n', ' * furnished to do so, subject to the following conditions:\n', ' *\n', ' * The above copyright notice and this permission notice shall be included in all\n', ' * copies or substantial portions of the Software.\n', ' *\n', ' * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', ' * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', ' * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', ' * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', ' * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', ' * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', ' * SOFTWARE.\n', ' */\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '/**\n', ' * @title Interface of an upgradable token\n', ' * @dev See implementation for\n', ' */\n', 'interface IETokenProxy {\n', '\n', '    /* solium-disable zeppelin/missing-natspec-comments */\n', '\n', '    /* Taken from ERC20Detailed in openzeppelin-solidity */\n', '    function nameProxy(address sender) external view returns(string);\n', '\n', '    function symbolProxy(address sender)\n', '        external\n', '        view\n', '        returns(string);\n', '\n', '    function decimalsProxy(address sender)\n', '        external\n', '        view\n', '        returns(uint8);\n', '\n', '    /* Taken from IERC20 in openzeppelin-solidity */\n', '    function totalSupplyProxy(address sender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function balanceOfProxy(address sender, address who)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function allowanceProxy(address sender,\n', '                            address owner,\n', '                            address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function transferProxy(address sender, address to, uint256 value)\n', '        external\n', '        returns (bool);\n', '\n', '    function approveProxy(address sender,\n', '                          address spender,\n', '                          uint256 value)\n', '        external\n', '        returns (bool);\n', '\n', '    function transferFromProxy(address sender,\n', '                               address from,\n', '                               address to,\n', '                               uint256 value)\n', '        external\n', '        returns (bool);\n', '\n', '    function mintProxy(address sender, address to, uint256 value)\n', '        external\n', '        returns (bool);\n', '\n', '    function changeMintingRecipientProxy(address sender,\n', '                                         address mintingRecip)\n', '        external;\n', '\n', '    function burnProxy(address sender, uint256 value) external;\n', '\n', '    function burnFromProxy(address sender,\n', '                           address from,\n', '                           uint256 value)\n', '        external;\n', '\n', '    function increaseAllowanceProxy(address sender,\n', '                                    address spender,\n', '                                    uint addedValue)\n', '        external\n', '        returns (bool success);\n', '\n', '    function decreaseAllowanceProxy(address sender,\n', '                                    address spender,\n', '                                    uint subtractedValue)\n', '        external\n', '        returns (bool success);\n', '\n', '    function pauseProxy(address sender) external;\n', '\n', '    function unpauseProxy(address sender) external;\n', '\n', '    function pausedProxy(address sender) external view returns (bool);\n', '\n', '    function finalizeUpgrade() external;\n', '}\n', '\n', '// File: contracts/token/IEToken.sol\n', '\n', '/**\n', ' * MIT License\n', ' *\n', ' * Copyright (c) 2019 eToroX Labs\n', ' *\n', ' * Permission is hereby granted, free of charge, to any person obtaining a copy\n', ' * of this software and associated documentation files (the "Software"), to deal\n', ' * in the Software without restriction, including without limitation the rights\n', ' * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', ' * copies of the Software, and to permit persons to whom the Software is\n', ' * furnished to do so, subject to the following conditions:\n', ' *\n', ' * The above copyright notice and this permission notice shall be included in all\n', ' * copies or substantial portions of the Software.\n', ' *\n', ' * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', ' * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', ' * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', ' * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', ' * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', ' * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', ' * SOFTWARE.\n', ' */\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '/**\n', ' * @title EToken interface\n', ' * @dev The interface comprising an EToken contract\n', ' * This interface is a superset of the ERC20 interface defined at\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IEToken {\n', '\n', '    /* solium-disable zeppelin/missing-natspec-comments */\n', '\n', '    function upgrade(IETokenProxy upgradedToken) external;\n', '\n', '    /* Taken from ERC20Detailed in openzeppelin-solidity */\n', '    function name() external view returns(string);\n', '\n', '    function symbol() external view returns(string);\n', '\n', '    function decimals() external view returns(uint8);\n', '\n', '    /* Taken from IERC20 in openzeppelin-solidity */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address who) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender)\n', '        external view returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function approve(address spender, uint256 value)\n', '        external\n', '        returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint256 value)\n', '        external\n', '        returns (bool);\n', '\n', '    /* Taken from ERC20Mintable */\n', '    function mint(address to, uint256 value) external returns (bool);\n', '\n', '    /* Taken from ERC20Burnable */\n', '    function burn(uint256 value) external;\n', '\n', '    function burnFrom(address from, uint256 value) external;\n', '\n', '    /* Taken from ERC20Pausable */\n', '    function increaseAllowance(\n', '        address spender,\n', '        uint addedValue\n', '    )\n', '        external\n', '        returns (bool success);\n', '\n', '    function pause() external;\n', '\n', '    function unpause() external;\n', '\n', '    function paused() external view returns (bool);\n', '\n', '    function decreaseAllowance(\n', '        address spender,\n', '        uint subtractedValue\n', '    )\n', '        external\n', '        returns (bool success);\n', '\n', '    event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 value\n', '    );\n', '\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address private _owner;\n', '\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() internal {\n', '    _owner = msg.sender;\n', '    emit OwnershipTransferred(address(0), _owner);\n', '  }\n', '\n', '  /**\n', '   * @return the address of the owner.\n', '   */\n', '  function owner() public view returns(address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(isOwner());\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @return true if `msg.sender` is the owner of the contract.\n', '   */\n', '  function isOwner() public view returns(bool) {\n', '    return msg.sender == _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipTransferred(_owner, address(0));\n', '    _owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    _transferOwnership(newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address newOwner) internal {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '// File: contracts/token/ERC20/Storage.sol\n', '\n', '/**\n', ' * MIT License\n', ' *\n', ' * Copyright (c) 2019 eToroX Labs\n', ' *\n', ' * Permission is hereby granted, free of charge, to any person obtaining a copy\n', ' * of this software and associated documentation files (the "Software"), to deal\n', ' * in the Software without restriction, including without limitation the rights\n', ' * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', ' * copies of the Software, and to permit persons to whom the Software is\n', ' * furnished to do so, subject to the following conditions:\n', ' *\n', ' * The above copyright notice and this permission notice shall be included in all\n', ' * copies or substantial portions of the Software.\n', ' *\n', ' * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', ' * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', ' * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', ' * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', ' * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', ' * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', ' * SOFTWARE.\n', ' */\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '/**\n', ' * @title External ERC20 Storage\n', ' *\n', ' * @dev The storage contract used in ExternalERC20 token. This contract can\n', ' * provide storage for exactly one contract, referred to as the implementor,\n', ' * inheriting from the ExternalERC20 contract. Only the current implementor or\n', ' * the owner can transfer the implementorship. Change of state is only allowed\n', ' * by the implementor.\n', ' */\n', 'contract Storage is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private balances;\n', '    mapping (address => mapping (address => uint256)) private allowed;\n', '    uint256 private totalSupply;\n', '\n', '    address private _implementor;\n', '\n', '    event StorageImplementorTransferred(address indexed from,\n', '                                        address indexed to);\n', '\n', '    /**\n', '     * @dev Contructor.\n', '     * @param owner The address of the owner of the contract.\n', '     * Must not be the zero address.\n', '     * @param implementor The address of the contract that is\n', '     * allowed to change state. Must not be the zero address.\n', '     */\n', '    constructor(address owner, address implementor) public {\n', '\n', '        require(\n', '            owner != address(0),\n', '            "Owner should not be the zero address"\n', '        );\n', '\n', '        require(\n', '            implementor != address(0),\n', '            "Implementor should not be the zero address"\n', '        );\n', '\n', '        transferOwnership(owner);\n', '        _implementor = implementor;\n', '    }\n', '\n', '    /**\n', '     * @dev Return whether the sender is an implementor.\n', '     */\n', '    function isImplementor() public view returns(bool) {\n', '        return msg.sender == _implementor;\n', '    }\n', '\n', '    /**\n', '     * @dev Sets new balance.\n', '     * Can only be done by owner or implementor contract.\n', '     */\n', '    function setBalance(address owner,\n', '                        uint256 value)\n', '        public\n', '        onlyImplementor\n', '    {\n', '        balances[owner] = value;\n', '    }\n', '\n', '    /**\n', '     * @dev Increases the balances relatively\n', '     * @param owner the address for which to increase balance\n', '     * @param addedValue the value to increase with\n', '     */\n', '    function increaseBalance(address owner, uint256 addedValue)\n', '        public\n', '        onlyImplementor\n', '    {\n', '        balances[owner] = balances[owner].add(addedValue);\n', '    }\n', '\n', '    /**\n', '     * @dev Decreases the balances relatively\n', '     * @param owner the address for which to decrease balance\n', '     * @param subtractedValue the value to decrease with\n', '     */\n', '    function decreaseBalance(address owner, uint256 subtractedValue)\n', '        public\n', '        onlyImplementor\n', '    {\n', '        balances[owner] = balances[owner].sub(subtractedValue);\n', '    }\n', '\n', '    /**\n', '     * @dev Can only be done by owner or implementor contract.\n', '     * @return The current balance of owner\n', '     */\n', '    function getBalance(address owner)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return balances[owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Sets new allowance.\n', '     * Can only be called by implementor contract.\n', '     */\n', '    function setAllowed(address owner,\n', '                        address spender,\n', '                        uint256 value)\n', '        public\n', '        onlyImplementor\n', '    {\n', '        allowed[owner][spender] = value;\n', '    }\n', '\n', '    /**\n', '     * @dev Increases the allowance relatively\n', '     * @param owner the address for which to allow from\n', '     * @param spender the addres for which the allowance increase is granted\n', '     * @param addedValue the value to increase with\n', '     */\n', '    function increaseAllowed(\n', '        address owner,\n', '        address spender,\n', '        uint256 addedValue\n', '    )\n', '        public\n', '        onlyImplementor\n', '    {\n', '        allowed[owner][spender] = allowed[owner][spender].add(addedValue);\n', '    }\n', '\n', '    /**\n', '     * @dev Decreases the allowance relatively\n', '     * @param owner the address for which to allow from\n', '     * @param spender the addres for which the allowance decrease is granted\n', '     * @param subtractedValue the value to decrease with\n', '     */\n', '    function decreaseAllowed(\n', '        address owner,\n', '        address spender,\n', '        uint256 subtractedValue\n', '    )\n', '        public\n', '        onlyImplementor\n', '    {\n', '        allowed[owner][spender] = allowed[owner][spender].sub(subtractedValue);\n', '    }\n', '\n', '    /**\n', '     * @dev Can only be called by implementor contract.\n', '     * @return The current allowance for spender from owner\n', '     */\n', '    function getAllowed(address owner,\n', '                        address spender)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return allowed[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Change totalSupply.\n', '     * Can only be called by implementor contract.\n', '     */\n', '    function setTotalSupply(uint256 value)\n', '        public\n', '        onlyImplementor\n', '    {\n', '        totalSupply = value;\n', '    }\n', '\n', '    /**\n', '     * @dev Can only be called by implementor contract.\n', '     * @return Current supply\n', '     */\n', '    function getTotalSupply()\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer implementor to new contract\n', '     * Can only be called by owner or implementor contract.\n', '     */\n', '    function transferImplementor(address newImplementor)\n', '        public\n', '        requireNonZero(newImplementor)\n', '        onlyImplementorOrOwner\n', '    {\n', '        require(newImplementor != _implementor,\n', '                "Cannot transfer to same implementor as existing");\n', '        address curImplementor = _implementor;\n', '        _implementor = newImplementor;\n', '        emit StorageImplementorTransferred(curImplementor, newImplementor);\n', '    }\n', '\n', '    /**\n', '     * @dev Asserts that sender is either owner or implementor.\n', '     */\n', '    modifier onlyImplementorOrOwner() {\n', '        require(isImplementor() || isOwner(), "Is not implementor or owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Asserts that sender is the implementor.\n', '     */\n', '    modifier onlyImplementor() {\n', '        require(isImplementor(), "Is not implementor");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Asserts that the given address is not the null-address\n', '     */\n', '    modifier requireNonZero(address addr) {\n', '        require(addr != address(0), "Expected a non-zero address");\n', '        _;\n', '    }\n', '}\n', '\n', '// File: contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * MIT License\n', ' *\n', ' * Copyright (c) 2019 eToroX Labs\n', ' *\n', ' * Permission is hereby granted, free of charge, to any person obtaining a copy\n', ' * of this software and associated documentation files (the "Software"), to deal\n', ' * in the Software without restriction, including without limitation the rights\n', ' * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', ' * copies of the Software, and to permit persons to whom the Software is\n', ' * furnished to do so, subject to the following conditions:\n', ' *\n', ' * The above copyright notice and this permission notice shall be included in all\n', ' * copies or substantial portions of the Software.\n', ' *\n', ' * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', ' * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', ' * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', ' * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', ' * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', ' * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', ' * SOFTWARE.\n', ' */\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '/**\n', ' * @title Internal implementation of ERC20 functionality with support\n', ' * for a separate storage contract\n', ' */\n', 'contract ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    Storage private externalStorage;\n', '\n', '    string private name_;\n', '    string private symbol_;\n', '    uint8 private decimals_;\n', '\n', '    event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 value\n', '    );\n', '\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '\n', '    /**\n', '     * @dev Constructor\n', '     * @param name The ERC20 detailed token name\n', '     * @param symbol The ERC20 detailed symbol name\n', '     * @param decimals Determines the number of decimals of this token\n', '     * @param _externalStorage The external storage contract.\n', '     * Should be zero address if shouldCreateStorage is true.\n', '     * @param initialDeployment Defines whether it should\n', '     * create a new external storage. Should be false if\n', '     * externalERC20Storage is defined.\n', '     */\n', '    constructor(\n', '        string name,\n', '        string symbol,\n', '        uint8 decimals,\n', '        Storage _externalStorage,\n', '        bool initialDeployment\n', '    )\n', '        public\n', '    {\n', '\n', '        require(\n', '            (_externalStorage != address(0) && (!initialDeployment)) ||\n', '            (_externalStorage == address(0) && initialDeployment),\n', '            "Cannot both create external storage and use the provided one.");\n', '\n', '        name_ = name;\n', '        symbol_ = symbol;\n', '        decimals_ = decimals;\n', '\n', '        if (initialDeployment) {\n', '            externalStorage = new Storage(msg.sender, this);\n', '        } else {\n', '            externalStorage = _externalStorage;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @return The storage used by this contract\n', '     */\n', '    function getExternalStorage() public view returns(Storage) {\n', '        return externalStorage;\n', '    }\n', '\n', '    /**\n', '     * @return the name of the token.\n', '     */\n', '    function _name() internal view returns(string) {\n', '        return name_;\n', '    }\n', '\n', '    /**\n', '     * @return the symbol of the token.\n', '     */\n', '    function _symbol() internal view returns(string) {\n', '        return symbol_;\n', '    }\n', '\n', '    /**\n', '     * @return the number of decimals of the token.\n', '     */\n', '    function _decimals() internal view returns(uint8) {\n', '        return decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Total number of tokens in existence\n', '     */\n', '    function _totalSupply() internal view returns (uint256) {\n', '        return externalStorage.getTotalSupply();\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param owner The address to query the balance of.\n', '     * @return An uint256 representing the amount owned by the passed address.\n', '     */\n', '    function _balanceOf(address owner) internal view returns (uint256) {\n', '        return externalStorage.getBalance(owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param owner address The address which owns the funds.\n', '     * @param spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function _allowance(address owner, address spender)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return externalStorage.getAllowed(owner, spender);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer token for a specified addresses\n', '     * @param originSender The address to transfer from.\n', '     * @param to The address to transfer to.\n', '     * @param value The amount to be transferred.\n', '     */\n', '    function _transfer(address originSender, address to, uint256 value)\n', '        internal\n', '        returns (bool)\n', '    {\n', '        require(to != address(0));\n', '\n', '        externalStorage.decreaseBalance(originSender, value);\n', '        externalStorage.increaseBalance(to, value);\n', '\n', '        emit Transfer(originSender, to, value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount\n', '     * of tokens on behalf of msg.sender.  Beware that changing an\n', '     * allowance with this method brings the risk that someone may use\n', '     * both the old and the new allowance by unfortunate transaction\n', '     * ordering. One possible solution to mitigate this race condition\n', "     * is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param originSender the original transaction sender\n', '     * @param spender The address which will spend the funds.\n', '     * @param value The amount of tokens to be spent.\n', '     */\n', '    function _approve(address originSender, address spender, uint256 value)\n', '        internal\n', '        returns (bool)\n', '    {\n', '        require(spender != address(0));\n', '\n', '        externalStorage.setAllowed(originSender, spender, value);\n', '        emit Approval(originSender, spender, value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param originSender the original transaction sender\n', '     * @param from address The address which you want to send tokens from\n', '     * @param to address The address which you want to transfer to\n', '     * @param value uint256 the amount of tokens to be transferred\n', '     */\n', '    function _transferFrom(\n', '        address originSender,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    )\n', '        internal\n', '        returns (bool)\n', '    {\n', '\n', '        externalStorage.decreaseAllowed(from, originSender, value);\n', '\n', '        _transfer(from, to, value);\n', '\n', '        emit Approval(\n', '            from,\n', '            originSender,\n', '            externalStorage.getAllowed(from, originSender)\n', '        );\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed_[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param originSender the original transaction sender\n', '     * @param spender The address which will spend the funds.\n', '     * @param addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function _increaseAllowance(\n', '        address originSender,\n', '        address spender,\n', '        uint256 addedValue\n', '    )\n', '        internal\n', '        returns (bool)\n', '    {\n', '        require(spender != address(0));\n', '\n', '        externalStorage.increaseAllowed(originSender, spender, addedValue);\n', '\n', '        emit Approval(\n', '            originSender, spender,\n', '            externalStorage.getAllowed(originSender, spender)\n', '        );\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a\n', '     * spender.  approve should be called when allowed_[_spender] ==\n', '     * 0. To decrement allowed value is better to use this function to\n', '     * avoid 2 calls (and wait until the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param originSender the original transaction sender\n', '     * @param spender The address which will spend the funds.\n', '     * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function _decreaseAllowance(\n', '        address originSender,\n', '        address spender,\n', '        uint256 subtractedValue\n', '    )\n', '        internal\n', '        returns (bool)\n', '    {\n', '        require(spender != address(0));\n', '\n', '        externalStorage.decreaseAllowed(originSender,\n', '                                        spender,\n', '                                        subtractedValue);\n', '\n', '        emit Approval(\n', '            originSender, spender,\n', '            externalStorage.getAllowed(originSender, spender)\n', '        );\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that mints an amount of the token and assigns it to\n', '     * an account. This encapsulates the modification of balances such that the\n', '     * proper events are emitted.\n', '     * @param account The account that will receive the created tokens.\n', '     * @param value The amount that will be created.\n', '     */\n', '    function _mint(address account, uint256 value) internal returns (bool)\n', '    {\n', '        require(account != 0);\n', '\n', '        externalStorage.setTotalSupply(\n', '            externalStorage.getTotalSupply().add(value));\n', '        externalStorage.increaseBalance(account, value);\n', '\n', '        emit Transfer(address(0), account, value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that burns an amount of the token of a given\n', '     * account.\n', '     * @param originSender The account whose tokens will be burnt.\n', '     * @param value The amount that will be burnt.\n', '     */\n', '    function _burn(address originSender, uint256 value) internal returns (bool)\n', '    {\n', '        require(originSender != 0);\n', '\n', '        externalStorage.setTotalSupply(\n', '            externalStorage.getTotalSupply().sub(value));\n', '        externalStorage.decreaseBalance(originSender, value);\n', '\n', '        emit Transfer(originSender, address(0), value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that burns an amount of the token of a given\n', "     * account, deducting from the sender's allowance for said account. Uses the\n", '     * internal burn function.\n', '     * @param originSender the original transaction sender\n', '     * @param account The account whose tokens will be burnt.\n', '     * @param value The amount that will be burnt.\n', '     */\n', '    function _burnFrom(address originSender, address account, uint256 value)\n', '        internal\n', '        returns (bool)\n', '    {\n', '        require(value <= externalStorage.getAllowed(account, originSender));\n', '\n', '        externalStorage.decreaseAllowed(account, originSender, value);\n', '        _burn(account, value);\n', '\n', '        emit Approval(account, originSender,\n', '                      externalStorage.getAllowed(account, originSender));\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', '// File: contracts/token/UpgradeSupport.sol\n', '\n', '/**\n', ' * MIT License\n', ' *\n', ' * Copyright (c) 2019 eToroX Labs\n', ' *\n', ' * Permission is hereby granted, free of charge, to any person obtaining a copy\n', ' * of this software and associated documentation files (the "Software"), to deal\n', ' * in the Software without restriction, including without limitation the rights\n', ' * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', ' * copies of the Software, and to permit persons to whom the Software is\n', ' * furnished to do so, subject to the following conditions:\n', ' *\n', ' * The above copyright notice and this permission notice shall be included in all\n', ' * copies or substantial portions of the Software.\n', ' *\n', ' * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', ' * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', ' * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', ' * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', ' * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', ' * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', ' * SOFTWARE.\n', ' */\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Functionality supporting contract upgradability\n', ' */\n', 'contract UpgradeSupport is Ownable, ERC20 {\n', '\n', '    event Upgraded(address indexed to);\n', '    event UpgradeFinalized(address indexed upgradedFrom);\n', '\n', '    /**\n', '     * @dev Holds the address of the contract that was upgraded from\n', '     */\n', '    address private _upgradedFrom;\n', '    bool private enabled;\n', '    IETokenProxy private upgradedToken;\n', '\n', '    /**\n', '     * @dev Constructor\n', '     * @param initialDeployment Set to true if this is the initial deployment of\n', '     * the token. If true it automtically creates a new ExternalERC20Storage.\n', '     * Also, it acts as a confirmation of intention which interlocks\n', '     * upgradedFrom as follows: If initialDeployment is true, then\n', '     * upgradedFrom must be the zero address. Otherwise, upgradedFrom must not\n', '     * be the zero address. The same applies to externalERC20Storage, which must\n', '     * be set to the zero address if initialDeployment is true.\n', '     * @param upgradedFrom The token contract that this contract upgrades. Set\n', '     * to address(0) for initial deployments\n', '     */\n', '    constructor(bool initialDeployment, address upgradedFrom) internal {\n', '        require((upgradedFrom != address(0) && (!initialDeployment)) ||\n', '                (upgradedFrom == address(0) && initialDeployment),\n', '                "Cannot both be upgraded and initial deployment.");\n', '\n', '        if (! initialDeployment) {\n', '            // Pause until explicitly unpaused by upgraded contract\n', '            enabled = false;\n', '            _upgradedFrom = upgradedFrom;\n', '        } else {\n', '            enabled = true;\n', '        }\n', '    }\n', '\n', '    modifier upgradeExists() {\n', '        require(_upgradedFrom != address(0),\n', '                "Must have a contract to upgrade from");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Called by the upgraded contract in order to mark the finalization of\n', '     * the upgrade and activate the new contract\n', '     */\n', '    function finalizeUpgrade()\n', '        external\n', '        upgradeExists\n', '        onlyProxy\n', '    {\n', '        enabled = true;\n', '        emit UpgradeFinalized(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * Upgrades the current token\n', '     * @param _upgradedToken The address of the token that this token\n', '     * should be upgraded to\n', '     */\n', '    function upgrade(IETokenProxy _upgradedToken) public onlyOwner {\n', '        require(!isUpgraded(), "Token is already upgraded");\n', '        require(_upgradedToken != IETokenProxy(0),\n', '                "Cannot upgrade to null address");\n', '        require(_upgradedToken != IETokenProxy(this),\n', '                "Cannot upgrade to myself");\n', '        require(getExternalStorage().isImplementor(),\n', '                "I don\'t own my storage. This will end badly.");\n', '\n', '        upgradedToken = _upgradedToken;\n', '        getExternalStorage().transferImplementor(_upgradedToken);\n', '        _upgradedToken.finalizeUpgrade();\n', '        emit Upgraded(_upgradedToken);\n', '    }\n', '\n', '    /**\n', '     * @return Is this token upgraded\n', '     */\n', '    function isUpgraded() public view returns (bool) {\n', '        return upgradedToken != IETokenProxy(0);\n', '    }\n', '\n', '    /**\n', '     * @return The token that this was upgraded to\n', '     */\n', '    function getUpgradedToken() public view returns (IETokenProxy) {\n', '        return upgradedToken;\n', '    }\n', '\n', '    /**\n', '     * @dev Only allow the old contract to access the functions with explicit\n', '     * sender passing\n', '     */\n', '    modifier onlyProxy () {\n', '        require(msg.sender == _upgradedFrom,\n', '                "Proxy is the only allowed caller");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows execution if token is enabled, i.e. it is the\n', '     * initial deployment or is upgraded from a contract which has\n', '     * called the finalizeUpgrade function.\n', '     */\n', '    modifier isEnabled () {\n', '        require(enabled, "Token disabled");\n', '        _;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/access/Roles.sol\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '  struct Role {\n', '    mapping (address => bool) bearer;\n', '  }\n', '\n', '  /**\n', '   * @dev give an account access to this role\n', '   */\n', '  function add(Role storage role, address account) internal {\n', '    require(account != address(0));\n', '    require(!has(role, account));\n', '\n', '    role.bearer[account] = true;\n', '  }\n', '\n', '  /**\n', "   * @dev remove an account's access to this role\n", '   */\n', '  function remove(Role storage role, address account) internal {\n', '    require(account != address(0));\n', '    require(has(role, account));\n', '\n', '    role.bearer[account] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev check if an account has this role\n', '   * @return bool\n', '   */\n', '  function has(Role storage role, address account)\n', '    internal\n', '    view\n', '    returns (bool)\n', '  {\n', '    require(account != address(0));\n', '    return role.bearer[account];\n', '  }\n', '}\n', '\n', '// File: contracts/token/access/roles/PauserRole.sol\n', '\n', '/**\n', ' * MIT License\n', ' *\n', ' * Copyright (c) 2019 eToroX Labs\n', ' *\n', ' * Permission is hereby granted, free of charge, to any person obtaining a copy\n', ' * of this software and associated documentation files (the "Software"), to deal\n', ' * in the Software without restriction, including without limitation the rights\n', ' * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', ' * copies of the Software, and to permit persons to whom the Software is\n', ' * furnished to do so, subject to the following conditions:\n', ' *\n', ' * The above copyright notice and this permission notice shall be included in all\n', ' * copies or substantial portions of the Software.\n', ' *\n', ' * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', ' * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', ' * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', ' * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', ' * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', ' * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', ' * SOFTWARE.\n', ' */\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '/** @title Contract managing the pauser role */\n', 'contract PauserRole is Ownable {\n', '    using Roles for Roles.Role;\n', '\n', '    event PauserAdded(address indexed account);\n', '    event PauserRemoved(address indexed account);\n', '\n', '    Roles.Role private pausers;\n', '\n', '    constructor() internal {\n', '        _addPauser(msg.sender);\n', '    }\n', '\n', '    modifier onlyPauser() {\n', '        require(isPauser(msg.sender), "not pauser");\n', '        _;\n', '    }\n', '\n', '    modifier requirePauser(address account) {\n', '        require(isPauser(account), "not pauser");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks if account is pauser\n', '     * @param account Account to check\n', '     * @return Boolean indicating if account is pauser\n', '     */\n', '    function isPauser(address account) public view returns (bool) {\n', '        return pausers.has(account);\n', '    }\n', '\n', '    /**\n', '     * @dev Adds a pauser account. Is only callable by owner.\n', '     * @param account Address to be added\n', '     */\n', '    function addPauser(address account) public onlyOwner {\n', '        _addPauser(account);\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a pauser account. Is only callable by owner.\n', '     * @param account Address to be removed\n', '     */\n', '    function removePauser(address account) public onlyOwner {\n', '        _removePauser(account);\n', '    }\n', '\n', '    /** @dev Allows a privileged holder to renounce their role */\n', '    function renouncePauser() public {\n', '        _removePauser(msg.sender);\n', '    }\n', '\n', '    /** @dev Internal implementation of addPauser */\n', '    function _addPauser(address account) internal {\n', '        pausers.add(account);\n', '        emit PauserAdded(account);\n', '    }\n', '\n', '    /** @dev Internal implementation of removePauser */\n', '    function _removePauser(address account) internal {\n', '        pausers.remove(account);\n', '        emit PauserRemoved(account);\n', '    }\n', '}\n', '\n', '// File: contracts/token/access/Pausable.sol\n', '\n', '/**\n', ' * MIT License\n', ' *\n', ' * Copyright (c) 2019 eToroX Labs\n', ' *\n', ' * Permission is hereby granted, free of charge, to any person obtaining a copy\n', ' * of this software and associated documentation files (the "Software"), to deal\n', ' * in the Software without restriction, including without limitation the rights\n', ' * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', ' * copies of the Software, and to permit persons to whom the Software is\n', ' * furnished to do so, subject to the following conditions:\n', ' *\n', ' * The above copyright notice and this permission notice shall be included in all\n', ' * copies or substantial portions of the Software.\n', ' *\n', ' * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', ' * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', ' * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', ' * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', ' * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', ' * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', ' * SOFTWARE.\n', ' */\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is PauserRole {\n', '    event Paused(address account);\n', '    event Unpaused(address account);\n', '\n', '    bool private paused_;\n', '\n', '    constructor() internal {\n', '        paused_ = false;\n', '    }\n', '\n', '    /**\n', '     * @return true if the contract is paused, false otherwise.\n', '     */\n', '    function _paused() internal view returns(bool) {\n', '        return paused_;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused_);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused_);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable if a specified account is pauser.\n', '     * @param account the address of the account to check\n', '     */\n', '    modifier requireIsPauser(address account) {\n', '        require(isPauser(account));\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Called by the owner to pause, triggers stopped state\n', '     * @param originSender the original sender of this method\n', '     */\n', '    function _pause(address originSender)\n', '        internal\n', '    {\n', '        paused_ = true;\n', '        emit Paused(originSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Called by the owner to unpause, returns to normal state\n', '     * @param originSender the original sender of this method\n', '     */\n', '    function _unpause(address originSender)\n', '        internal\n', '    {\n', '        paused_ = false;\n', '        emit Unpaused(originSender);\n', '    }\n', '}\n', '\n', '// File: contracts/token/access/roles/WhitelistAdminRole.sol\n', '\n', '/**\n', ' * MIT License\n', ' *\n', ' * Copyright (c) 2019 eToroX Labs\n', ' *\n', ' * Permission is hereby granted, free of charge, to any person obtaining a copy\n', ' * of this software and associated documentation files (the "Software"), to deal\n', ' * in the Software without restriction, including without limitation the rights\n', ' * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', ' * copies of the Software, and to permit persons to whom the Software is\n', ' * furnished to do so, subject to the following conditions:\n', ' *\n', ' * The above copyright notice and this permission notice shall be included in all\n', ' * copies or substantial portions of the Software.\n', ' *\n', ' * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', ' * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', ' * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', ' * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', ' * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', ' * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', ' * SOFTWARE.\n', ' */\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '/** @title Contract managing the whitelist admin role */\n', 'contract WhitelistAdminRole is Ownable {\n', '    using Roles for Roles.Role;\n', '\n', '    event WhitelistAdminAdded(address indexed account);\n', '    event WhitelistAdminRemoved(address indexed account);\n', '\n', '    Roles.Role private whitelistAdmins;\n', '\n', '    constructor() internal {\n', '        _addWhitelistAdmin(msg.sender);\n', '    }\n', '\n', '    modifier onlyWhitelistAdmin() {\n', '        require(isWhitelistAdmin(msg.sender), "not whitelistAdmin");\n', '        _;\n', '    }\n', '\n', '    modifier requireWhitelistAdmin(address account) {\n', '        require(isWhitelistAdmin(account), "not whitelistAdmin");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks if account is whitelist dmin\n', '     * @param account Account to check\n', '     * @return Boolean indicating if account is whitelist admin\n', '     */\n', '    function isWhitelistAdmin(address account) public view returns (bool) {\n', '        return whitelistAdmins.has(account);\n', '    }\n', '\n', '    /**\n', '     * @dev Adds a whitelist admin account. Is only callable by owner.\n', '     * @param account Address to be added\n', '     */\n', '    function addWhitelistAdmin(address account) public onlyOwner {\n', '        _addWhitelistAdmin(account);\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a whitelist admin account. Is only callable by owner.\n', '     * @param account Address to be removed\n', '     */\n', '    function removeWhitelistAdmin(address account) public onlyOwner {\n', '        _removeWhitelistAdmin(account);\n', '    }\n', '\n', '    /** @dev Allows a privileged holder to renounce their role */\n', '    function renounceWhitelistAdmin() public {\n', '        _removeWhitelistAdmin(msg.sender);\n', '    }\n', '\n', '    /** @dev Internal implementation of addWhitelistAdmin */\n', '    function _addWhitelistAdmin(address account) internal {\n', '        whitelistAdmins.add(account);\n', '        emit WhitelistAdminAdded(account);\n', '    }\n', '\n', '    /** @dev Internal implementation of removeWhitelistAdmin */\n', '    function _removeWhitelistAdmin(address account) internal {\n', '        whitelistAdmins.remove(account);\n', '        emit WhitelistAdminRemoved(account);\n', '    }\n', '}\n', '\n', '// File: contracts/token/access/roles/BlacklistAdminRole.sol\n', '\n', '/**\n', ' * MIT License\n', ' *\n', ' * Copyright (c) 2019 eToroX Labs\n', ' *\n', ' * Permission is hereby granted, free of charge, to any person obtaining a copy\n', ' * of this software and associated documentation files (the "Software"), to deal\n', ' * in the Software without restriction, including without limitation the rights\n', ' * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', ' * copies of the Software, and to permit persons to whom the Software is\n', ' * furnished to do so, subject to the following conditions:\n', ' *\n', ' * The above copyright notice and this permission notice shall be included in all\n', ' * copies or substantial portions of the Software.\n', ' *\n', ' * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', ' * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', ' * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', ' * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', ' * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', ' * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', ' * SOFTWARE.\n', ' */\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '/** @title Contract managing the blacklist admin role */\n', 'contract BlacklistAdminRole is Ownable {\n', '    using Roles for Roles.Role;\n', '\n', '    event BlacklistAdminAdded(address indexed account);\n', '    event BlacklistAdminRemoved(address indexed account);\n', '\n', '    Roles.Role private blacklistAdmins;\n', '\n', '    constructor() internal {\n', '        _addBlacklistAdmin(msg.sender);\n', '    }\n', '\n', '    modifier onlyBlacklistAdmin() {\n', '        require(isBlacklistAdmin(msg.sender), "not blacklistAdmin");\n', '        _;\n', '    }\n', '\n', '    modifier requireBlacklistAdmin(address account) {\n', '        require(isBlacklistAdmin(account), "not blacklistAdmin");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks if account is blacklist admin\n', '     * @param account Account to check\n', '     * @return Boolean indicating if account is blacklist admin\n', '     */\n', '    function isBlacklistAdmin(address account) public view returns (bool) {\n', '        return blacklistAdmins.has(account);\n', '    }\n', '\n', '    /**\n', '     * @dev Adds a blacklist admin account. Is only callable by owner.\n', '     * @param account Address to be added\n', '     */\n', '    function addBlacklistAdmin(address account) public onlyOwner {\n', '        _addBlacklistAdmin(account);\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a blacklist admin account. Is only callable by owner\n', '     * @param account Address to be removed\n', '     */\n', '    function removeBlacklistAdmin(address account) public onlyOwner {\n', '        _removeBlacklistAdmin(account);\n', '    }\n', '\n', '    /** @dev Allows privilege holder to renounce their role */\n', '    function renounceBlacklistAdmin() public {\n', '        _removeBlacklistAdmin(msg.sender);\n', '    }\n', '\n', '    /** @dev Internal implementation of addBlacklistAdmin */\n', '    function _addBlacklistAdmin(address account) internal {\n', '        blacklistAdmins.add(account);\n', '        emit BlacklistAdminAdded(account);\n', '    }\n', '\n', '    /** @dev Internal implementation of removeBlacklistAdmin */\n', '    function _removeBlacklistAdmin(address account) internal {\n', '        blacklistAdmins.remove(account);\n', '        emit BlacklistAdminRemoved(account);\n', '    }\n', '}\n', '\n', '// File: contracts/token/access/Accesslist.sol\n', '\n', '/**\n', ' * MIT License\n', ' *\n', ' * Copyright (c) 2019 eToroX Labs\n', ' *\n', ' * Permission is hereby granted, free of charge, to any person obtaining a copy\n', ' * of this software and associated documentation files (the "Software"), to deal\n', ' * in the Software without restriction, including without limitation the rights\n', ' * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', ' * copies of the Software, and to permit persons to whom the Software is\n', ' * furnished to do so, subject to the following conditions:\n', ' *\n', ' * The above copyright notice and this permission notice shall be included in all\n', ' * copies or substantial portions of the Software.\n', ' *\n', ' * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', ' * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', ' * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', ' * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', ' * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', ' * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', ' * SOFTWARE.\n', ' */\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title The Accesslist contract\n', ' * @dev Contract that contains a whitelist and a blacklist and manages them\n', ' */\n', 'contract Accesslist is WhitelistAdminRole, BlacklistAdminRole {\n', '    using Roles for Roles.Role;\n', '\n', '    event WhitelistAdded(address indexed account);\n', '    event WhitelistRemoved(address indexed account);\n', '    event BlacklistAdded(address indexed account);\n', '    event BlacklistRemoved(address indexed account);\n', '\n', '    Roles.Role private whitelist;\n', '    Roles.Role private blacklist;\n', '\n', '    /**\n', '     * @dev Calls internal function _addWhitelisted\n', '     * to add given address to whitelist\n', '     * @param account Address to be added\n', '     */\n', '    function addWhitelisted(address account)\n', '        public\n', '        onlyWhitelistAdmin\n', '    {\n', '        _addWhitelisted(account);\n', '    }\n', '\n', '    /**\n', '     * @dev Calls internal function _removeWhitelisted\n', '     * to remove given address from the whitelist\n', '     * @param account Address to be removed\n', '     */\n', '    function removeWhitelisted(address account)\n', '        public\n', '        onlyWhitelistAdmin\n', '    {\n', '        _removeWhitelisted(account);\n', '    }\n', '\n', '    /**\n', '     * @dev Calls internal function _addBlacklisted\n', '     * to add given address to blacklist\n', '     * @param account Address to be added\n', '     */\n', '    function addBlacklisted(address account)\n', '        public\n', '        onlyBlacklistAdmin\n', '    {\n', '        _addBlacklisted(account);\n', '    }\n', '\n', '    /**\n', '     * @dev Calls internal function _removeBlacklisted\n', '     * to remove given address from blacklist\n', '     * @param account Address to be removed\n', '     */\n', '    function removeBlacklisted(address account)\n', '        public\n', '        onlyBlacklistAdmin\n', '    {\n', '        _removeBlacklisted(account);\n', '    }\n', '\n', '    /**\n', '     * @dev Checks to see if the given address is whitelisted\n', '     * @param account Address to be checked\n', '     * @return true if address is whitelisted\n', '     */\n', '    function isWhitelisted(address account)\n', '        public\n', '        view\n', '        returns (bool)\n', '    {\n', '        return whitelist.has(account);\n', '    }\n', '\n', '    /**\n', '     * @dev Checks to see if given address is blacklisted\n', '     * @param account Address to be checked\n', '     * @return true if address is blacklisted\n', '     */\n', '    function isBlacklisted(address account)\n', '        public\n', '        view\n', '        returns (bool)\n', '    {\n', '        return blacklist.has(account);\n', '    }\n', '\n', '    /**\n', '     * @dev Checks to see if given address is whitelisted and not blacklisted\n', '     * @param account Address to be checked\n', '     * @return true if address has access\n', '     */\n', '    function hasAccess(address account)\n', '        public\n', '        view\n', '        returns (bool)\n', '    {\n', '        return isWhitelisted(account) && !isBlacklisted(account);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Adds given address to the whitelist\n', '     * @param account Address to be added\n', '     */\n', '    function _addWhitelisted(address account) internal {\n', '        whitelist.add(account);\n', '        emit WhitelistAdded(account);\n', '    }\n', '\n', '    /**\n', '     * @dev Removes given address to the whitelist\n', '     * @param account Address to be removed\n', '     */\n', '    function _removeWhitelisted(address account) internal {\n', '        whitelist.remove(account);\n', '        emit WhitelistRemoved(account);\n', '    }\n', '\n', '    /**\n', '     * @dev Adds given address to the blacklist\n', '     * @param account Address to be added\n', '     */\n', '    function _addBlacklisted(address account) internal {\n', '        blacklist.add(account);\n', '        emit BlacklistAdded(account);\n', '    }\n', '\n', '    /**\n', '     * @dev Removes given address to the blacklist\n', '     * @param account Address to be removed\n', '     */\n', '    function _removeBlacklisted(address account) internal {\n', '        blacklist.remove(account);\n', '        emit BlacklistRemoved(account);\n', '    }\n', '}\n', '\n', '// File: contracts/token/access/AccesslistGuarded.sol\n', '\n', '/**\n', ' * MIT License\n', ' *\n', ' * Copyright (c) 2019 eToroX Labs\n', ' *\n', ' * Permission is hereby granted, free of charge, to any person obtaining a copy\n', ' * of this software and associated documentation files (the "Software"), to deal\n', ' * in the Software without restriction, including without limitation the rights\n', ' * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', ' * copies of the Software, and to permit persons to whom the Software is\n', ' * furnished to do so, subject to the following conditions:\n', ' *\n', ' * The above copyright notice and this permission notice shall be included in all\n', ' * copies or substantial portions of the Software.\n', ' *\n', ' * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', ' * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', ' * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', ' * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', ' * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', ' * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', ' * SOFTWARE.\n', ' */\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '/**\n', ' * @title The AccesslistGuarded contract\n', ' * @dev Contract containing an accesslist and\n', ' * modifiers to ensure proper access\n', ' */\n', 'contract AccesslistGuarded {\n', '\n', '    Accesslist private accesslist;\n', '    bool private whitelistEnabled;\n', '\n', '    /**\n', '     * @dev Constructor. Checks if the accesslist is a zero address\n', '     * @param _accesslist The access list\n', '     * @param _whitelistEnabled If the whitelist is enabled\n', '     */\n', '    constructor(\n', '        Accesslist _accesslist,\n', '        bool _whitelistEnabled\n', '    )\n', '        public\n', '    {\n', '        require(\n', '            _accesslist != Accesslist(0),\n', '            "Supplied accesslist is null"\n', '        );\n', '        accesslist = _accesslist;\n', '        whitelistEnabled = _whitelistEnabled;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier that requires given address\n', '     * to be whitelisted and not blacklisted\n', '     * @param account address to be checked\n', '     */\n', '    modifier requireHasAccess(address account) {\n', '        require(hasAccess(account), "no access");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier that requires the message sender\n', '     * to be whitelisted and not blacklisted\n', '     */\n', '    modifier onlyHasAccess() {\n', '        require(hasAccess(msg.sender), "no access");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier that requires given address\n', '     * to be whitelisted\n', '     * @param account address to be checked\n', '     */\n', '    modifier requireWhitelisted(address account) {\n', '        require(isWhitelisted(account), "no access");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier that requires message sender\n', '     * to be whitelisted\n', '     */\n', '    modifier onlyWhitelisted() {\n', '        require(isWhitelisted(msg.sender), "no access");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier that requires given address\n', '     * to not be blacklisted\n', '     * @param account address to be checked\n', '     */\n', '    modifier requireNotBlacklisted(address account) {\n', '        require(isNotBlacklisted(account), "no access");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier that requires message sender\n', '     * to not be blacklisted\n', '     */\n', '    modifier onlyNotBlacklisted() {\n', '        require(isNotBlacklisted(msg.sender), "no access");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns whether account has access.\n', '     * If whitelist is enabled a whitelist check is also made,\n', '     * otherwise it only checks for blacklisting.\n', '     * @param account Address to be checked\n', '     * @return true if address has access or is not blacklisted when whitelist\n', '     * is disabled\n', '     */\n', '    function hasAccess(address account) public view returns (bool) {\n', '        if (whitelistEnabled) {\n', '            return accesslist.hasAccess(account);\n', '        } else {\n', '            return isNotBlacklisted(account);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns whether account is whitelisted\n', '     * @param account Address to be checked\n', '     * @return true if address is whitelisted\n', '     */\n', '    function isWhitelisted(address account) public view returns (bool) {\n', '        return accesslist.isWhitelisted(account);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns whether account is not blacklisted\n', '     * @param account Address to be checked\n', '     * @return true if address is not blacklisted\n', '     */\n', '    function isNotBlacklisted(address account) public view returns (bool) {\n', '        return !accesslist.isBlacklisted(account);\n', '    }\n', '}\n', '\n', '// File: contracts/token/access/roles/BurnerRole.sol\n', '\n', '/**\n', ' * MIT License\n', ' *\n', ' * Copyright (c) 2019 eToroX Labs\n', ' *\n', ' * Permission is hereby granted, free of charge, to any person obtaining a copy\n', ' * of this software and associated documentation files (the "Software"), to deal\n', ' * in the Software without restriction, including without limitation the rights\n', ' * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', ' * copies of the Software, and to permit persons to whom the Software is\n', ' * furnished to do so, subject to the following conditions:\n', ' *\n', ' * The above copyright notice and this permission notice shall be included in all\n', ' * copies or substantial portions of the Software.\n', ' *\n', ' * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', ' * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', ' * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', ' * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', ' * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', ' * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', ' * SOFTWARE.\n', ' */\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '/** @title Contract managing the burner role */\n', 'contract BurnerRole is Ownable {\n', '    using Roles for Roles.Role;\n', '\n', '    event BurnerAdded(address indexed account);\n', '    event BurnerRemoved(address indexed account);\n', '\n', '    Roles.Role private burners;\n', '\n', '    constructor() Ownable() internal {\n', '        _addBurner(msg.sender);\n', '    }\n', '\n', '    modifier onlyBurner() {\n', '        require(isBurner(msg.sender), "not burner");\n', '        _;\n', '    }\n', '\n', '    modifier requireBurner(address account) {\n', '        require(isBurner(account), "not burner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks if account is burner\n', '     * @param account Account to check\n', '     * @return Boolean indicating if account is burner\n', '     */\n', '    function isBurner(address account) public view returns (bool) {\n', '        return burners.has(account);\n', '    }\n', '\n', '    /**\n', '     * @dev Adds a burner account\n', '     * @dev Is only callable by owner\n', '     * @param account Address to be added\n', '     */\n', '    function addBurner(address account) public onlyOwner {\n', '        _addBurner(account);\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a burner account\n', '     * @dev Is only callable by owner\n', '     * @param account Address to be removed\n', '     */\n', '    function removeBurner(address account) public onlyOwner {\n', '        _removeBurner(account);\n', '    }\n', '\n', '    /** @dev Allows a privileged holder to renounce their role */\n', '    function renounceBurner() public {\n', '        _removeBurner(msg.sender);\n', '    }\n', '\n', '    /** @dev Internal implementation of addBurner */\n', '    function _addBurner(address account) internal {\n', '        burners.add(account);\n', '        emit BurnerAdded(account);\n', '    }\n', '\n', '    /** @dev Internal implementation of removeBurner */\n', '    function _removeBurner(address account) internal {\n', '        burners.remove(account);\n', '        emit BurnerRemoved(account);\n', '    }\n', '}\n', '\n', '// File: contracts/token/access/roles/MinterRole.sol\n', '\n', '/**\n', ' * MIT License\n', ' *\n', ' * Copyright (c) 2019 eToroX Labs\n', ' *\n', ' * Permission is hereby granted, free of charge, to any person obtaining a copy\n', ' * of this software and associated documentation files (the "Software"), to deal\n', ' * in the Software without restriction, including without limitation the rights\n', ' * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', ' * copies of the Software, and to permit persons to whom the Software is\n', ' * furnished to do so, subject to the following conditions:\n', ' *\n', ' * The above copyright notice and this permission notice shall be included in all\n', ' * copies or substantial portions of the Software.\n', ' *\n', ' * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', ' * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', ' * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', ' * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', ' * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', ' * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', ' * SOFTWARE.\n', ' */\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '/** @title The minter role contract */\n', 'contract MinterRole is Ownable {\n', '    using Roles for Roles.Role;\n', '\n', '    event MinterAdded(address indexed account);\n', '    event MinterRemoved(address indexed account);\n', '\n', '    Roles.Role private minters;\n', '\n', '    /**\n', '     * @dev Checks if the message sender is a minter\n', '     */\n', '    modifier onlyMinter() {\n', '        require(isMinter(msg.sender), "not minter");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks if the given address is a minter\n', '     * @param account Address to be checked\n', '     */\n', '    modifier requireMinter(address account) {\n', '        require(isMinter(account), "not minter");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks if given address is a minter\n', '     * @param account Address to be checked\n', '     * @return Is the address a minter\n', '     */\n', '    function isMinter(address account) public view returns (bool) {\n', '        return minters.has(account);\n', '    }\n', '\n', '    /**\n', '     * @dev Calls internal function _addMinter with the given address.\n', '     * Can only be called by the owner.\n', '     * @param account Address to be passed\n', '     */\n', '    function addMinter(address account) public onlyOwner {\n', '        _addMinter(account);\n', '    }\n', '\n', '    /**\n', '     * @dev Calls internal function _removeMinter with the given address.\n', '     * Can only be called by the owner.\n', '     * @param account Address to be passed\n', '     */\n', '    function removeMinter(address account) public onlyOwner {\n', '        _removeMinter(account);\n', '    }\n', '\n', '    /**\n', '     * @dev Calls internal function _removeMinter with message sender\n', '     * as the parameter\n', '     */\n', '    function renounceMinter() public {\n', '        _removeMinter(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Adds the given address to minters\n', '     * @param account Address to be added\n', '     */\n', '    function _addMinter(address account) internal {\n', '        minters.add(account);\n', '        emit MinterAdded(account);\n', '    }\n', '\n', '    /**\n', '     * @dev Removes given address from minters\n', '     * @param account Address to be removed.\n', '     */\n', '    function _removeMinter(address account) internal {\n', '        minters.remove(account);\n', '        emit MinterRemoved(account);\n', '    }\n', '}\n', '\n', '// File: contracts/token/access/RestrictedMinter.sol\n', '\n', '/**\n', ' * MIT License\n', ' *\n', ' * Copyright (c) 2019 eToroX Labs\n', ' *\n', ' * Permission is hereby granted, free of charge, to any person obtaining a copy\n', ' * of this software and associated documentation files (the "Software"), to deal\n', ' * in the Software without restriction, including without limitation the rights\n', ' * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', ' * copies of the Software, and to permit persons to whom the Software is\n', ' * furnished to do so, subject to the following conditions:\n', ' *\n', ' * The above copyright notice and this permission notice shall be included in all\n', ' * copies or substantial portions of the Software.\n', ' *\n', ' * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', ' * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', ' * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', ' * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', ' * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', ' * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', ' * SOFTWARE.\n', ' */\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '/**\n', ' * @title Restricted minter\n', ' * @dev Implements the notion of a restricted minter which is only\n', ' * able to mint to a single specified account. Only the owner may\n', ' * change this account.\n', ' */\n', 'contract RestrictedMinter  {\n', '\n', '    address private mintingRecipientAccount;\n', '\n', '    event MintingRecipientAccountChanged(address prev, address next);\n', '\n', '    /**\n', '     * @dev constructor. Sets minting recipient to given address\n', '     * @param _mintingRecipientAccount address to be set to recipient\n', '     */\n', '    constructor(address _mintingRecipientAccount) internal {\n', '        _changeMintingRecipient(msg.sender, _mintingRecipientAccount);\n', '    }\n', '\n', '    modifier requireMintingRecipient(address account) {\n', '        require(account == mintingRecipientAccount,\n', '                "is not mintingRecpientAccount");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return The current minting recipient account address\n', '     */\n', '    function getMintingRecipient() public view returns (address) {\n', '        return mintingRecipientAccount;\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function allowing the owner to change the current minting recipient account\n', '     * @param originSender The sender address of the request\n', '     * @param _mintingRecipientAccount address of new minting recipient\n', '     */\n', '    function _changeMintingRecipient(\n', '        address originSender,\n', '        address _mintingRecipientAccount\n', '    )\n', '        internal\n', '    {\n', '        originSender;\n', '\n', '        require(_mintingRecipientAccount != address(0),\n', '                "zero minting recipient");\n', '        address prev = mintingRecipientAccount;\n', '        mintingRecipientAccount = _mintingRecipientAccount;\n', '        emit MintingRecipientAccountChanged(prev, mintingRecipientAccount);\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/token/access/ETokenGuarded.sol\n', '\n', '/**\n', ' * MIT License\n', ' *\n', ' * Copyright (c) 2019 eToroX Labs\n', ' *\n', ' * Permission is hereby granted, free of charge, to any person obtaining a copy\n', ' * of this software and associated documentation files (the "Software"), to deal\n', ' * in the Software without restriction, including without limitation the rights\n', ' * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', ' * copies of the Software, and to permit persons to whom the Software is\n', ' * furnished to do so, subject to the following conditions:\n', ' *\n', ' * The above copyright notice and this permission notice shall be included in all\n', ' * copies or substantial portions of the Software.\n', ' *\n', ' * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', ' * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', ' * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', ' * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', ' * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', ' * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', ' * SOFTWARE.\n', ' */\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title EToken access guards\n', ' * @dev This contract implements access guards for functions comprising\n', ' * the EToken public API. Since these functions may be called through\n', ' * a proxy, access checks does not rely on the implicit value of\n', ' * msg.sender but rather on the originSender parameter which is passed\n', ' * to the functions of this contract. The value of originSender is\n', ' * captured from msg.sender at the initial landing-point of the\n', ' * request.\n', ' */\n', 'contract ETokenGuarded is\n', '    Pausable,\n', '    ERC20,\n', '    UpgradeSupport,\n', '    AccesslistGuarded,\n', '    BurnerRole,\n', '    MinterRole,\n', '    RestrictedMinter\n', '{\n', '\n', '    modifier requireOwner(address addr) {\n', '        require(owner() == addr, "is not owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Constructor\n', '     * @param name The ERC20 detailed token name\n', '     * @param symbol The ERC20 detailed symbol name\n', '     * @param decimals Determines the number of decimals of this token\n', '     * @param accesslist Address of a deployed whitelist contract\n', '     * @param whitelistEnabled Create token with whitelist enabled\n', '     * @param externalStorage The external storage contract.\n', '     * Should be zero address if shouldCreateStorage is true.\n', '     * @param initialDeployment Defines whether it should\n', '     * create a new external storage. Should be false if\n', '     * externalERC20Storage is defined.\n', '     */\n', '    constructor(\n', '        string name,\n', '        string symbol,\n', '        uint8 decimals,\n', '        Accesslist accesslist,\n', '        bool whitelistEnabled,\n', '        Storage externalStorage,\n', '        address initialMintingRecipient,\n', '        bool initialDeployment\n', '    )\n', '        internal\n', '        ERC20(name, symbol, decimals, externalStorage, initialDeployment)\n', '        AccesslistGuarded(accesslist, whitelistEnabled)\n', '        RestrictedMinter(initialMintingRecipient)\n', '    {\n', '\n', '    }\n', '\n', '    /**\n', '     * @dev Permission enforcing wrapper around the functionality of\n', '     * EToken.name. Also see the general documentation for this\n', '     * contract.\n', '     */\n', '    function nameGuarded(address originSender)\n', '        internal\n', '        view\n', '        returns(string)\n', '    {\n', '        // Silence warnings\n', '        originSender;\n', '\n', '        return _name();\n', '    }\n', '\n', '    /**\n', '     * @dev Permission enforcing wrapper around the functionality of\n', '     * EToken.symbol. Also see the general documentation for this\n', '     * contract.\n', '     */\n', '    function symbolGuarded(address originSender)\n', '        internal\n', '        view\n', '        returns(string)\n', '    {\n', '        // Silence warnings\n', '        originSender;\n', '\n', '        return _symbol();\n', '    }\n', '\n', '    /**\n', '     * @dev Permission enforcing wrapper around the functionality of\n', '     * EToken.decimals. Also see the general documentation for this\n', '     * contract.\n', '     */\n', '    function decimalsGuarded(address originSender)\n', '        internal\n', '        view\n', '        returns(uint8)\n', '    {\n', '        // Silence warnings\n', '        originSender;\n', '\n', '        return _decimals();\n', '    }\n', '\n', '    /**\n', '     * @dev Permission enforcing wrapper around the functionality of\n', '     * EToken.totalSupply. Also see the general documentation for this\n', '     * contract.\n', '     */\n', '    function totalSupplyGuarded(address originSender)\n', '        internal\n', '        view\n', '        isEnabled\n', '        returns(uint256)\n', '    {\n', '        // Silence warnings\n', '        originSender;\n', '\n', '        return _totalSupply();\n', '    }\n', '\n', '    /**\n', '     * @dev Permission enforcing wrapper around the functionality of\n', '     * EToken.balanceOf. Also see the general documentation for this\n', '     * contract.\n', '     */\n', '    function balanceOfGuarded(address originSender, address who)\n', '        internal\n', '        view\n', '        isEnabled\n', '        returns(uint256)\n', '    {\n', '        // Silence warnings\n', '        originSender;\n', '\n', '        return _balanceOf(who);\n', '    }\n', '\n', '    /**\n', '     * @dev Permission enforcing wrapper around the functionality of\n', '     * EToken.allowance. Also see the general documentation for this\n', '     * contract.\n', '     */\n', '    function allowanceGuarded(\n', '        address originSender,\n', '        address owner,\n', '        address spender\n', '    )\n', '        internal\n', '        view\n', '        isEnabled\n', '        returns(uint256)\n', '    {\n', '        // Silence warnings\n', '        originSender;\n', '\n', '        return _allowance(owner, spender);\n', '    }\n', '\n', '    /**\n', '     * @dev Permission enforcing wrapper around the functionality of\n', '     * EToken.transfer. Also see the general documentation for this\n', '     * contract.\n', '     */\n', '    function transferGuarded(address originSender, address to, uint256 value)\n', '        internal\n', '        isEnabled\n', '        whenNotPaused\n', '        requireHasAccess(to)\n', '        requireHasAccess(originSender)\n', '        returns (bool)\n', '    {\n', '        _transfer(originSender, to, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Permission enforcing wrapper around the functionality of\n', '     * EToken.approve. Also see the general documentation for this\n', '     * contract.\n', '     */\n', '    function approveGuarded(\n', '        address originSender,\n', '        address spender,\n', '        uint256 value\n', '    )\n', '        internal\n', '        isEnabled\n', '        whenNotPaused\n', '        requireHasAccess(spender)\n', '        requireHasAccess(originSender)\n', '        returns (bool)\n', '    {\n', '        _approve(originSender, spender, value);\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Permission enforcing wrapper around the functionality of\n', '     * EToken.transferFrom. Also see the documentation for this\n', '     * contract.\n', '     */\n', '    function transferFromGuarded(\n', '        address originSender,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    )\n', '        internal\n', '        isEnabled\n', '        whenNotPaused\n', '        requireHasAccess(originSender)\n', '        requireHasAccess(from)\n', '        requireHasAccess(to)\n', '        returns (bool)\n', '    {\n', '        _transferFrom(\n', '            originSender,\n', '            from,\n', '            to,\n', '            value\n', '        );\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Permission enforcing wrapper around the functionality of\n', '     * EToken.increaseAllowance, Also see the general documentation\n', '     * for this contract.\n', '     */\n', '    function increaseAllowanceGuarded(\n', '        address originSender,\n', '        address spender,\n', '        uint256 addedValue\n', '    )\n', '        internal\n', '        isEnabled\n', '        whenNotPaused\n', '        requireHasAccess(originSender)\n', '        requireHasAccess(spender)\n', '        returns (bool)\n', '    {\n', '        _increaseAllowance(originSender, spender, addedValue);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Permission enforcing wrapper around the functionality of\n', '     * EToken.decreaseAllowance. Also see the general documentation\n', '     * for this contract.\n', '     */\n', '    function decreaseAllowanceGuarded(\n', '        address originSender,\n', '        address spender,\n', '        uint256 subtractedValue\n', '    )\n', '        internal\n', '        isEnabled\n', '        whenNotPaused\n', '        requireHasAccess(originSender)\n', '        requireHasAccess(spender)\n', '        returns (bool)  {\n', '        _decreaseAllowance(originSender, spender, subtractedValue);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Permission enforcing wrapper around the functionality of\n', '     * EToken.burn. Also see the general documentation for this\n', '     * contract.\n', '     */\n', '    function burnGuarded(address originSender, uint256 value)\n', '        internal\n', '        isEnabled\n', '        requireBurner(originSender)\n', '    {\n', '        _burn(originSender, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Permission enforcing wrapper around the functionality of\n', '     * EToken.burnFrom. Also see the general documentation for this\n', '     * contract.\n', '     */\n', '    function burnFromGuarded(address originSender, address from, uint256 value)\n', '        internal\n', '        isEnabled\n', '        requireBurner(originSender)\n', '    {\n', '        _burnFrom(originSender, from, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Permission enforcing wrapper around the functionality of\n', '     * EToken.mint. Also see the general documentation for this\n', '     * contract.\n', '     */\n', '    function mintGuarded(address originSender, address to, uint256 value)\n', '        internal\n', '        isEnabled\n', '        requireMinter(originSender)\n', '        requireMintingRecipient(to)\n', '        returns (bool success)\n', '    {\n', '        // Silence warnings\n', '        originSender;\n', '\n', '        _mint(to, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Permission enforcing wrapper around the functionality of\n', '     * EToken.changeMintingRecipient. Also see the general\n', '     * documentation for this contract.\n', '     */\n', '    function changeMintingRecipientGuarded(\n', '        address originSender,\n', '        address mintingRecip\n', '    )\n', '        internal\n', '        isEnabled\n', '        requireOwner(originSender)\n', '    {\n', '        _changeMintingRecipient(originSender, mintingRecip);\n', '    }\n', '\n', '    /**\n', '     * @dev Permission enforcing wrapper around the functionality of\n', '     * EToken.pause. Also see the general documentation for this\n', '     * contract.\n', '     */\n', '    function pauseGuarded(address originSender)\n', '        internal\n', '        isEnabled\n', '        requireIsPauser(originSender)\n', '        whenNotPaused\n', '    {\n', '        _pause(originSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Permission enforcing wrapper around the functionality of\n', '     * EToken.unpause. Also see the general documentation for this\n', '     * contract.\n', '     */\n', '    function unpauseGuarded(address originSender)\n', '        internal\n', '        isEnabled\n', '        requireIsPauser(originSender)\n', '        whenPaused\n', '    {\n', '        _unpause(originSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Permission enforcing wrapper around the functionality of\n', '     * EToken.paused. Also see the general documentation for this\n', '     * contract.\n', '     */\n', '    function pausedGuarded(address originSender)\n', '        internal\n', '        view\n', '        isEnabled\n', '        returns (bool)\n', '    {\n', '        // Silence warnings\n', '        originSender;\n', '        return _paused();\n', '    }\n', '}\n', '\n', '// File: contracts/token/ETokenProxy.sol\n', '\n', '/**\n', ' * MIT License\n', ' *\n', ' * Copyright (c) 2019 eToroX Labs\n', ' *\n', ' * Permission is hereby granted, free of charge, to any person obtaining a copy\n', ' * of this software and associated documentation files (the "Software"), to deal\n', ' * in the Software without restriction, including without limitation the rights\n', ' * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', ' * copies of the Software, and to permit persons to whom the Software is\n', ' * furnished to do so, subject to the following conditions:\n', ' *\n', ' * The above copyright notice and this permission notice shall be included in all\n', ' * copies or substantial portions of the Software.\n', ' *\n', ' * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', ' * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', ' * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', ' * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', ' * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', ' * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', ' * SOFTWARE.\n', ' */\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title EToken upgradability proxy\n', ' * For every call received the following takes place:\n', ' * If this token is upgraded, all calls are forwarded to the proxy\n', ' * interface of the new contract thereby forming a chain of proxy\n', ' * calls.\n', ' * If this token is not upgraded, that is, it is the most recent\n', ' * generation of ETokens, then calls are forwarded directly to the\n', ' * ETokenGuarded interface which performs access\n', ' */\n', 'contract ETokenProxy is IETokenProxy, ETokenGuarded {\n', '\n', '    /**\n', '     * @dev Constructor\n', '     * @param name The ERC20 detailed token name\n', '     * @param symbol The ERC20 detailed symbol name\n', '     * @param decimals Determines the number of decimals of this token\n', '     * @param accesslist Address of a deployed whitelist contract\n', '     * @param whitelistEnabled Create token with whitelist enabled\n', '     * @param externalStorage The external storage contract.\n', '     * Should be zero address if shouldCreateStorage is true.\n', '     * @param initialDeployment Set to true if this is the initial deployment of\n', '     * the token. If true it automtically creates a new ExternalERC20Storage.\n', '     * Also, it acts as a confirmation of intention which interlocks\n', '     * upgradedFrom as follows: If initialDeployment is true, then\n', '     * upgradedFrom must be the zero address. Otherwise, upgradedFrom must not\n', '     * be the zero address. The same applies to externalERC20Storage, which must\n', '     * be set to the zero address if initialDeployment is true.\n', '     * @param upgradedFrom The token contract that this contract upgrades. Set\n', '     * to address(0) for initial deployments\n', '     */\n', '    constructor(\n', '        string name,\n', '        string symbol,\n', '        uint8 decimals,\n', '        Accesslist accesslist,\n', '        bool whitelistEnabled,\n', '        Storage externalStorage,\n', '        address initialMintingRecipient,\n', '        address upgradedFrom,\n', '        bool initialDeployment\n', '    )\n', '        internal\n', '        UpgradeSupport(initialDeployment, upgradedFrom)\n', '        ETokenGuarded(\n', '            name,\n', '            symbol,\n', '            decimals,\n', '            accesslist,\n', '            whitelistEnabled,\n', '            externalStorage,\n', '            initialMintingRecipient,\n', '            initialDeployment\n', '        )\n', '    {\n', '\n', '    }\n', '\n', '    /** Like EToken.name but proxies calls as described in the\n', '        documentation for the declaration of this contract. */\n', '    function nameProxy(address sender)\n', '        external\n', '        view\n', '        isEnabled\n', '        onlyProxy\n', '        returns(string)\n', '    {\n', '        if (isUpgraded()) {\n', '            return getUpgradedToken().nameProxy(sender);\n', '        } else {\n', '            return nameGuarded(sender);\n', '        }\n', '    }\n', '\n', '    /** Like EToken.symbol but proxies calls as described in the\n', '        documentation for the declaration of this contract. */\n', '    function symbolProxy(address sender)\n', '        external\n', '        view\n', '        isEnabled\n', '        onlyProxy\n', '        returns(string)\n', '    {\n', '        if (isUpgraded()) {\n', '            return getUpgradedToken().symbolProxy(sender);\n', '        } else {\n', '            return symbolGuarded(sender);\n', '        }\n', '    }\n', '\n', '    /** Like EToken.decimals but proxies calls as described in the\n', '        documentation for the declaration of this contract. */\n', '    function decimalsProxy(address sender)\n', '        external\n', '        view\n', '        isEnabled\n', '        onlyProxy\n', '        returns(uint8)\n', '    {\n', '        if (isUpgraded()) {\n', '            return getUpgradedToken().decimalsProxy(sender);\n', '        } else {\n', '            return decimalsGuarded(sender);\n', '        }\n', '    }\n', '\n', '    /** Like EToken.symbol but proxies calls as described in the\n', '        documentation for the declaration of this contract. */\n', '    function totalSupplyProxy(address sender)\n', '        external\n', '        view\n', '        isEnabled\n', '        onlyProxy\n', '        returns (uint256)\n', '    {\n', '        if (isUpgraded()) {\n', '            return getUpgradedToken().totalSupplyProxy(sender);\n', '        } else {\n', '            return totalSupplyGuarded(sender);\n', '        }\n', '    }\n', '\n', '    /** Like EToken.symbol but proxies calls as described in the\n', '        documentation for the declaration of this contract. */\n', '    function balanceOfProxy(address sender, address who)\n', '        external\n', '        view\n', '        isEnabled\n', '        onlyProxy\n', '        returns (uint256)\n', '    {\n', '        if (isUpgraded()) {\n', '            return getUpgradedToken().balanceOfProxy(sender, who);\n', '        } else {\n', '            return balanceOfGuarded(sender, who);\n', '        }\n', '    }\n', '\n', '    /** Like EToken.symbol but proxies calls as described in the\n', '        documentation for the declaration of this contract. */\n', '    function allowanceProxy(address sender, address owner, address spender)\n', '        external\n', '        view\n', '        isEnabled\n', '        onlyProxy\n', '        returns (uint256)\n', '    {\n', '        if (isUpgraded()) {\n', '            return getUpgradedToken().allowanceProxy(sender, owner, spender);\n', '        } else {\n', '            return allowanceGuarded(sender, owner, spender);\n', '        }\n', '    }\n', '\n', '\n', '    /** Like EToken.symbol but proxies calls as described in the\n', '        documentation for the declaration of this contract. */\n', '    function transferProxy(address sender, address to, uint256 value)\n', '        external\n', '        isEnabled\n', '        onlyProxy\n', '        returns (bool)\n', '    {\n', '        if (isUpgraded()) {\n', '            return getUpgradedToken().transferProxy(sender, to, value);\n', '        } else {\n', '            return transferGuarded(sender, to, value);\n', '        }\n', '\n', '    }\n', '\n', '    /** Like EToken.symbol but proxies calls as described in the\n', '        documentation for the declaration of this contract. */\n', '    function approveProxy(address sender, address spender, uint256 value)\n', '        external\n', '        isEnabled\n', '        onlyProxy\n', '        returns (bool)\n', '    {\n', '\n', '        if (isUpgraded()) {\n', '            return getUpgradedToken().approveProxy(sender, spender, value);\n', '        } else {\n', '            return approveGuarded(sender, spender, value);\n', '        }\n', '    }\n', '\n', '    /** Like EToken.symbol but proxies calls as described in the\n', '        documentation for the declaration of this contract. */\n', '    function transferFromProxy(\n', '        address sender,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    )\n', '        external\n', '        isEnabled\n', '        onlyProxy\n', '        returns (bool)\n', '    {\n', '        if (isUpgraded()) {\n', '            getUpgradedToken().transferFromProxy(\n', '                sender,\n', '                from,\n', '                to,\n', '                value\n', '            );\n', '        } else {\n', '            transferFromGuarded(\n', '                sender,\n', '                from,\n', '                to,\n', '                value\n', '            );\n', '        }\n', '    }\n', '\n', '    /** Like EToken. but proxies calls as described in the\n', '        documentation for the declaration of this contract. */\n', '    function mintProxy(address sender, address to, uint256 value)\n', '        external\n', '        isEnabled\n', '        onlyProxy\n', '        returns (bool)\n', '    {\n', '        if (isUpgraded()) {\n', '            return getUpgradedToken().mintProxy(sender, to, value);\n', '        } else {\n', '            return mintGuarded(sender, to, value);\n', '        }\n', '    }\n', '\n', '    /** Like EToken.changeMintingRecipient but proxies calls as\n', '        described in the documentation for the declaration of this\n', '        contract. */\n', '    function changeMintingRecipientProxy(address sender,\n', '                                         address mintingRecip)\n', '        external\n', '        isEnabled\n', '        onlyProxy\n', '    {\n', '        if (isUpgraded()) {\n', '            getUpgradedToken().changeMintingRecipientProxy(sender, mintingRecip);\n', '        } else {\n', '            changeMintingRecipientGuarded(sender, mintingRecip);\n', '        }\n', '    }\n', '\n', '    /** Like EToken.burn but proxies calls as described in the\n', '        documentation for the declaration of this contract. */\n', '    function burnProxy(address sender, uint256 value)\n', '        external\n', '        isEnabled\n', '        onlyProxy\n', '    {\n', '        if (isUpgraded()) {\n', '            getUpgradedToken().burnProxy(sender, value);\n', '        } else {\n', '            burnGuarded(sender, value);\n', '        }\n', '    }\n', '\n', '    /** Like EToken.burnFrom but proxies calls as described in the\n', '        documentation for the declaration of this contract. */\n', '    function burnFromProxy(address sender, address from, uint256 value)\n', '        external\n', '        isEnabled\n', '        onlyProxy\n', '    {\n', '        if (isUpgraded()) {\n', '            getUpgradedToken().burnFromProxy(sender, from, value);\n', '        } else {\n', '            burnFromGuarded(sender, from, value);\n', '        }\n', '    }\n', '\n', '    /** Like EToken.increaseAllowance but proxies calls as described\n', '        in the documentation for the declaration of this contract. */\n', '    function increaseAllowanceProxy(\n', '        address sender,\n', '        address spender,\n', '        uint addedValue\n', '    )\n', '        external\n', '        isEnabled\n', '        onlyProxy\n', '        returns (bool)\n', '    {\n', '        if (isUpgraded()) {\n', '            return getUpgradedToken().increaseAllowanceProxy(\n', '                sender, spender, addedValue);\n', '        } else {\n', '            return increaseAllowanceGuarded(sender, spender, addedValue);\n', '        }\n', '    }\n', '\n', '    /** Like EToken.decreaseAllowance but proxies calls as described\n', '        in the documentation for the declaration of this contract. */\n', '    function decreaseAllowanceProxy(\n', '        address sender,\n', '        address spender,\n', '        uint subtractedValue\n', '    )\n', '        external\n', '        isEnabled\n', '        onlyProxy\n', '        returns (bool)\n', '    {\n', '        if (isUpgraded()) {\n', '            return getUpgradedToken().decreaseAllowanceProxy(\n', '                sender, spender, subtractedValue);\n', '        } else {\n', '            return decreaseAllowanceGuarded(sender, spender, subtractedValue);\n', '        }\n', '    }\n', '\n', '    /** Like EToken.pause but proxies calls as described\n', '        in the documentation for the declaration of this contract. */\n', '    function pauseProxy(address sender)\n', '        external\n', '        isEnabled\n', '        onlyProxy\n', '    {\n', '        if (isUpgraded()) {\n', '            getUpgradedToken().pauseProxy(sender);\n', '        } else {\n', '            pauseGuarded(sender);\n', '        }\n', '    }\n', '\n', '    /** Like EToken.unpause but proxies calls as described\n', '        in the documentation for the declaration of this contract. */\n', '    function unpauseProxy(address sender)\n', '        external\n', '        isEnabled\n', '        onlyProxy\n', '    {\n', '        if (isUpgraded()) {\n', '            getUpgradedToken().unpauseProxy(sender);\n', '        } else {\n', '            unpauseGuarded(sender);\n', '        }\n', '    }\n', '\n', '    /** Like EToken.paused but proxies calls as described\n', '        in the documentation for the declaration of this contract. */\n', '    function pausedProxy(address sender)\n', '        external\n', '        view\n', '        isEnabled\n', '        onlyProxy\n', '        returns (bool)\n', '    {\n', '        if (isUpgraded()) {\n', '            return getUpgradedToken().pausedProxy(sender);\n', '        } else {\n', '            return pausedGuarded(sender);\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/token/EToken.sol\n', '\n', '/**\n', ' * MIT License\n', ' *\n', ' * Copyright (c) 2019 eToroX Labs\n', ' *\n', ' * Permission is hereby granted, free of charge, to any person obtaining a copy\n', ' * of this software and associated documentation files (the "Software"), to deal\n', ' * in the Software without restriction, including without limitation the rights\n', ' * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', ' * copies of the Software, and to permit persons to whom the Software is\n', ' * furnished to do so, subject to the following conditions:\n', ' *\n', ' * The above copyright notice and this permission notice shall be included in all\n', ' * copies or substantial portions of the Software.\n', ' *\n', ' * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', ' * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', ' * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', ' * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', ' * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', ' * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', ' * SOFTWARE.\n', ' */\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '/** @title Main EToken contract */\n', 'contract EToken is IEToken, ETokenProxy {\n', '\n', '    /**\n', '     * @param name The name of the token\n', '     * @param symbol The symbol of the token\n', '     * @param decimals The number of decimals of the token\n', '     * @param accesslist Address of a deployed whitelist contract\n', '     * @param whitelistEnabled Create token with whitelist enabled\n', '     * @param externalStorage Address of a deployed ERC20 storage contract\n', '     * @param initialMintingRecipient The initial minting recipient of the token\n', '     * @param upgradedFrom The token contract that this contract upgrades. Set\n', '     * to address(0) for initial deployments\n', '     * @param initialDeployment Set to true if this is the initial deployment of\n', '     * the token. If true it automtically creates a new ExternalERC20Storage.\n', '     * Also, it acts as a confirmation of intention which interlocks\n', '     * upgradedFrom as follows: If initialDeployment is true, then\n', '     * upgradedFrom must be the zero address. Otherwise, upgradedFrom must not\n', '     * be the zero address. The same applies to externalERC20Storage, which must\n', '     * be set to the zero address if initialDeployment is true.\n', '     */\n', '    constructor(\n', '        string name,\n', '        string symbol,\n', '        uint8 decimals,\n', '        Accesslist accesslist,\n', '        bool whitelistEnabled,\n', '        Storage externalStorage,\n', '        address initialMintingRecipient,\n', '        address upgradedFrom,\n', '        bool initialDeployment\n', '    )\n', '        public\n', '        ETokenProxy(\n', '            name,\n', '            symbol,\n', '            decimals,\n', '            accesslist,\n', '            whitelistEnabled,\n', '            externalStorage,\n', '            initialMintingRecipient,\n', '            upgradedFrom,\n', '            initialDeployment\n', '        )\n', '    {\n', '\n', '    }\n', '\n', '    /**\n', '     * @dev Proxies call to new token if this token is upgraded\n', '     * @return the name of the token.\n', '     */\n', '    function name() public view returns(string) {\n', '        if (isUpgraded()) {\n', '            return getUpgradedToken().nameProxy(msg.sender);\n', '        } else {\n', '            return nameGuarded(msg.sender);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Proxies call to new token if this token is upgraded\n', '     * @return the symbol of the token.\n', '     */\n', '    function symbol() public view returns(string) {\n', '        if (isUpgraded()) {\n', '            return getUpgradedToken().symbolProxy(msg.sender);\n', '        } else {\n', '            return symbolGuarded(msg.sender);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @return the number of decimals of the token.\n', '     */\n', '    function decimals() public view returns(uint8) {\n', '        if (isUpgraded()) {\n', '            return getUpgradedToken().decimalsProxy(msg.sender);\n', '        } else {\n', '            return decimalsGuarded(msg.sender);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Proxies call to new token if this token is upgraded\n', '     * @return Total number of tokens in existence\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        if (isUpgraded()) {\n', '            return getUpgradedToken().totalSupplyProxy(msg.sender);\n', '        } else {\n', '            return totalSupplyGuarded(msg.sender);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @dev Proxies call to new token if this token is upgraded\n', '     * @param who The address to query the balance of.\n', '     * @return An uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOf(address who) public view returns (uint256) {\n', '        if (isUpgraded()) {\n', '            return getUpgradedToken().balanceOfProxy(msg.sender, who);\n', '        } else {\n', '            return balanceOfGuarded(msg.sender, who);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner\n', '     * allowed to a spender.\n', '     * @dev Proxies call to new token if this token is upgraded\n', '     * @param owner address The address which owns the funds.\n', '     * @param spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available\n', '     * for the spender.\n', '     */\n', '    function allowance(address owner, address spender)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        if (isUpgraded()) {\n', '            return getUpgradedToken().allowanceProxy(\n', '                msg.sender,\n', '                owner,\n', '                spender\n', '            );\n', '        } else {\n', '            return allowanceGuarded(msg.sender, owner, spender);\n', '        }\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Transfer token for a specified address\n', '     * @dev Proxies call to new token if this token is upgraded\n', '     * @param to The address to transfer to.\n', '     * @param value The amount to be transferred.\n', '     */\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        if (isUpgraded()) {\n', '            return getUpgradedToken().transferProxy(msg.sender, to, value);\n', '        } else {\n', '            return transferGuarded(msg.sender, to, value);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount\n', '     * of tokens on behalf of msg.sender.  Beware that changing an\n', '     * allowance with this method brings the risk that someone may use\n', '     * both the old and the new allowance by unfortunate transaction\n', '     * ordering. One possible solution to mitigate this race condition\n', "     * is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @dev Proxies call to new token if this token is upgraded\n', '     * @param spender The address which will spend the funds.\n', '     * @param value The amount of tokens to be spent.\n', '     */\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        if (isUpgraded()) {\n', '            return getUpgradedToken().approveProxy(msg.sender, spender, value);\n', '        } else {\n', '            return approveGuarded(msg.sender, spender, value);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @dev Proxies call to new token if this token is upgraded\n', '     * @param from address The address which you want to send tokens from\n', '     * @param to address The address which you want to transfer to\n', '     * @param value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address from, address to, uint256 value)\n', '        public\n', '        returns (bool)\n', '    {\n', '        if (isUpgraded()) {\n', '            return getUpgradedToken().transferFromProxy(\n', '                msg.sender,\n', '                from,\n', '                to,\n', '                value\n', '            );\n', '        } else {\n', '            return transferFromGuarded(\n', '                msg.sender,\n', '                from,\n', '                to,\n', '                value\n', '            );\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @dev Proxies call to new token if this token is upgraded\n', '     * @param to The address that will receive the minted tokens.\n', '     * @param value The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address to, uint256 value) public returns (bool) {\n', '        if (isUpgraded()) {\n', '            return getUpgradedToken().mintProxy(msg.sender, to, value);\n', '        } else {\n', '            return mintGuarded(msg.sender, to, value);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @dev Proxies call to new token if this token is upgraded\n', '     * @param value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 value) public {\n', '        if (isUpgraded()) {\n', '            getUpgradedToken().burnProxy(msg.sender, value);\n', '        } else {\n', '            burnGuarded(msg.sender, value);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens from the target address\n', '     * and decrements allowance\n', '     * @dev Proxies call to new token if this token is upgraded\n', '     * @param from address The address which you want to send tokens from\n', '     * @param value uint256 The amount of token to be burned\n', '     */\n', '    function burnFrom(address from, uint256 value) public {\n', '        if (isUpgraded()) {\n', '            getUpgradedToken().burnFromProxy(msg.sender, from, value);\n', '        } else {\n', '            burnFromGuarded(msg.sender, from, value);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed_[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @dev Proxies call to new token if this token is upgraded\n', '     * @param spender The address which will spend the funds.\n', '     * @param addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseAllowance(\n', '        address spender,\n', '        uint addedValue\n', '    )\n', '        public\n', '        returns (bool success)\n', '    {\n', '        if (isUpgraded()) {\n', '            return getUpgradedToken().increaseAllowanceProxy(\n', '                msg.sender,\n', '                spender,\n', '                addedValue\n', '            );\n', '        } else {\n', '            return increaseAllowanceGuarded(msg.sender, spender, addedValue);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed_[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @dev Proxies call to new token if this token is upgraded\n', '     * @param spender The address which will spend the funds.\n', '     * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseAllowance(\n', '        address spender,\n', '        uint subtractedValue\n', '    )\n', '        public\n', '        returns (bool success)\n', '    {\n', '        if (isUpgraded()) {\n', '            return getUpgradedToken().decreaseAllowanceProxy(\n', '                msg.sender,\n', '                spender,\n', '                subtractedValue\n', '            );\n', '        } else {\n', '            return super.decreaseAllowanceGuarded(\n', '                msg.sender,\n', '                spender,\n', '                subtractedValue\n', '            );\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the owner to change the current minting recipient account\n', '     * @param mintingRecip address of new minting recipient\n', '     */\n', '    function changeMintingRecipient(address mintingRecip) public {\n', '        if (isUpgraded()) {\n', '            getUpgradedToken().changeMintingRecipientProxy(\n', '                msg.sender,\n', '                mintingRecip\n', '            );\n', '        } else {\n', '            changeMintingRecipientGuarded(msg.sender, mintingRecip);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Allows a pauser to pause the current token.\n', '     */\n', '    function pause() public {\n', '        if (isUpgraded()) {\n', '            getUpgradedToken().pauseProxy(msg.sender);\n', '        } else {\n', '            pauseGuarded(msg.sender);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Allows a pauser to unpause the current token.\n', '     */\n', '    function unpause() public {\n', '        if (isUpgraded()) {\n', '            getUpgradedToken().unpauseProxy(msg.sender);\n', '        } else {\n', '            unpauseGuarded(msg.sender);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @return true if the contract is paused, false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        if (isUpgraded()) {\n', '            return getUpgradedToken().pausedProxy(msg.sender);\n', '        } else {\n', '            return pausedGuarded(msg.sender);\n', '        }\n', '    }\n', '}']