['pragma solidity ^0.4.24;\n', '\n', '// File: node_modules/openzeppelin-solidity/contracts/access/Roles.sol\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '  struct Role {\n', '    mapping (address => bool) bearer;\n', '  }\n', '\n', '  /**\n', '   * @dev give an account access to this role\n', '   */\n', '  function add(Role storage role, address account) internal {\n', '    require(account != address(0));\n', '    require(!has(role, account));\n', '\n', '    role.bearer[account] = true;\n', '  }\n', '\n', '  /**\n', "   * @dev remove an account's access to this role\n", '   */\n', '  function remove(Role storage role, address account) internal {\n', '    require(account != address(0));\n', '    require(has(role, account));\n', '\n', '    role.bearer[account] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev check if an account has this role\n', '   * @return bool\n', '   */\n', '  function has(Role storage role, address account)\n', '    internal\n', '    view\n', '    returns (bool)\n', '  {\n', '    require(account != address(0));\n', '    return role.bearer[account];\n', '  }\n', '}\n', '\n', '// File: node_modules/openzeppelin-solidity/contracts/access/roles/PauserRole.sol\n', '\n', 'contract PauserRole {\n', '  using Roles for Roles.Role;\n', '\n', '  event PauserAdded(address indexed account);\n', '  event PauserRemoved(address indexed account);\n', '\n', '  Roles.Role private pausers;\n', '\n', '  constructor() internal {\n', '    _addPauser(msg.sender);\n', '  }\n', '\n', '  modifier onlyPauser() {\n', '    require(isPauser(msg.sender));\n', '    _;\n', '  }\n', '\n', '  function isPauser(address account) public view returns (bool) {\n', '    return pausers.has(account);\n', '  }\n', '\n', '  function addPauser(address account) public onlyPauser {\n', '    _addPauser(account);\n', '  }\n', '\n', '  function renouncePauser() public {\n', '    _removePauser(msg.sender);\n', '  }\n', '\n', '  function _addPauser(address account) internal {\n', '    pausers.add(account);\n', '    emit PauserAdded(account);\n', '  }\n', '\n', '  function _removePauser(address account) internal {\n', '    pausers.remove(account);\n', '    emit PauserRemoved(account);\n', '  }\n', '}\n', '\n', '// File: node_modules/openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is PauserRole {\n', '  event Paused(address account);\n', '  event Unpaused(address account);\n', '\n', '  bool private _paused;\n', '\n', '  constructor() internal {\n', '    _paused = false;\n', '  }\n', '\n', '  /**\n', '   * @return true if the contract is paused, false otherwise.\n', '   */\n', '  function paused() public view returns(bool) {\n', '    return _paused;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!_paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(_paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() public onlyPauser whenNotPaused {\n', '    _paused = true;\n', '    emit Paused(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() public onlyPauser whenPaused {\n', '    _paused = false;\n', '    emit Unpaused(msg.sender);\n', '  }\n', '}\n', '\n', '// File: node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address private _owner;\n', '\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() internal {\n', '    _owner = msg.sender;\n', '    emit OwnershipTransferred(address(0), _owner);\n', '  }\n', '\n', '  /**\n', '   * @return the address of the owner.\n', '   */\n', '  function owner() public view returns(address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(isOwner());\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @return true if `msg.sender` is the owner of the contract.\n', '   */\n', '  function isOwner() public view returns(bool) {\n', '    return msg.sender == _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipTransferred(_owner, address(0));\n', '    _owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    _transferOwnership(newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address newOwner) internal {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', '// File: contracts/IGrowHops.sol\n', '\n', 'interface IGrowHops {\n', '\n', '  function addPlanBase(uint256 minimumAmount, uint256 lockTime, uint32 lessToHops) external;\n', '\n', '  function togglePlanBase(bytes32 planBaseId, bool isOpen) external;\n', '\n', '  function growHops(bytes32 planBaseId, uint256 lessAmount) external;\n', '\n', '  function updateHopsAddress(address _address) external;\n', '\n', '  function updatelessAddress(address _address) external;\n', '\n', '  function withdraw(bytes32 planId) external;\n', '\n', '  function checkPlanBase(bytes32 planBaseId)\n', '    external view returns (uint256, uint256, uint32, bool);\n', '  \n', '  function checkPlanBaseIds() external view returns(bytes32[]);\n', '\n', '  function checkPlanIdsByPlanBase(bytes32 planBaseId) external view returns(bytes32[]);\n', '\n', '  function checkPlanIdsByUser(address user) external view returns(bytes32[]);\n', '\n', '  function checkPlan(bytes32 planId)\n', '    external view returns (bytes32, address, uint256, uint256, uint256, uint256, bool);\n', '\n', '  /* Events */\n', '\n', '  event PlanBaseEvt (\n', '    bytes32 planBaseId,\n', '    uint256 minimumAmount,\n', '    uint256 lockTime,\n', '    uint32 lessToHops,\n', '    bool isOpen\n', '  );\n', '\n', '  event TogglePlanBaseEvt (\n', '    bytes32 planBaseId,\n', '    bool isOpen\n', '  );\n', '\n', '  event PlanEvt (\n', '    bytes32 planId,\n', '    bytes32 planBaseId,\n', '    address plantuser,\n', '    uint256 lessAmount,\n', '    uint256 hopsAmount,\n', '    uint256 lockAt,\n', '    uint256 releaseAt,\n', '    bool isWithdrawn\n', '  );\n', '\n', '  event WithdrawPlanEvt (\n', '    bytes32 planId,\n', '    address plantuser,\n', '    uint256 lessAmount,\n', '    bool isWithdrawn,\n', '    uint256 withdrawAt\n', '  );\n', '\n', '}\n', '\n', '// File: contracts/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' */\n', 'library SafeMath {\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) \n', '      internal \n', '      pure \n', '      returns (uint256 c) \n', '  {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    require(c / a == b, "SafeMath mul failed");\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b)\n', '      internal\n', '      pure\n', '      returns (uint256) \n', '  {\n', '    require(b <= a, "SafeMath sub failed");\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b)\n', '      internal\n', '      pure\n', '      returns (uint256 c) \n', '  {\n', '    c = a + b;\n', '    require(c >= a, "SafeMath add failed");\n', '    return c;\n', '  }\n', '  \n', '  /**\n', '    * @dev gives square root of given x.\n', '    */\n', '  function sqrt(uint256 x)\n', '      internal\n', '      pure\n', '      returns (uint256 y) \n', '  {\n', '    uint256 z = ((add(x,1)) / 2);\n', '    y = x;\n', '    while (z < y) \n', '    {\n', '      y = z;\n', '      z = ((add((x / z),z)) / 2);\n', '    }\n', '  }\n', '  \n', '  /**\n', '    * @dev gives square. batchplies x by x\n', '    */\n', '  function sq(uint256 x)\n', '      internal\n', '      pure\n', '      returns (uint256)\n', '  {\n', '    return (mul(x,x));\n', '  }\n', '  \n', '  /**\n', '    * @dev x to the power of y \n', '    */\n', '  function pwr(uint256 x, uint256 y)\n', '      internal \n', '      pure \n', '      returns (uint256)\n', '  {\n', '    if (x==0)\n', '        return (0);\n', '    else if (y==0)\n', '        return (1);\n', '    else \n', '    {\n', '      uint256 z = x;\n', '      for (uint256 i=1; i < y; i++)\n', '        z = mul(z,x);\n', '      return (z);\n', '    }\n', '  }\n', '}\n', '\n', '// File: contracts/GrowHops.sol\n', '\n', 'interface IERC20 {\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '  function approve(address spender, uint256 value) external returns (bool);\n', '  function allowance(address tokenOwner, address spender) external view returns (uint);\n', '  function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '  function balanceOf(address who) external view returns (uint256);\n', '  function mint(address to, uint256 value) external returns (bool);\n', '}\n', '\n', 'contract GrowHops is IGrowHops, Ownable, Pausable {\n', '\n', '  using SafeMath for *;\n', '\n', '  address public hopsAddress;\n', '  address public lessAddress;\n', '\n', '  struct PlanBase {\n', '    uint256 minimumAmount;\n', '    uint256 lockTime;\n', '    uint32 lessToHops;\n', '    bool isOpen;\n', '  }\n', '\n', '  struct Plan {\n', '    bytes32 planBaseId;\n', '    address plantuser;\n', '    uint256 lessAmount;\n', '    uint256 hopsAmount;\n', '    uint256 lockAt;\n', '    uint256 releaseAt;\n', '    bool isWithdrawn;\n', '  }\n', '  bytes32[] public planBaseIds;\n', '\n', '  mapping (bytes32 => bytes32[]) planIdsByPlanBase;\n', '  mapping (bytes32 => PlanBase) planBaseIdToPlanBase;\n', '  \n', '  mapping (bytes32 => Plan) planIdToPlan;\n', '  mapping (address => bytes32[]) userToPlanIds;\n', '\n', '  constructor (address _hopsAddress, address _lessAddress) public {\n', '    hopsAddress = _hopsAddress;\n', '    lessAddress = _lessAddress;\n', '  }\n', '\n', '  function addPlanBase(uint256 minimumAmount, uint256 lockTime, uint32 lessToHops)\n', '    onlyOwner external {\n', '    bytes32 planBaseId = keccak256(\n', '      abi.encodePacked(block.timestamp, minimumAmount, lockTime, lessToHops)\n', '    );\n', '\n', '    PlanBase memory planBase = PlanBase(\n', '      minimumAmount,\n', '      lockTime,\n', '      lessToHops,\n', '      true\n', '    );\n', '\n', '    planBaseIdToPlanBase[planBaseId] = planBase;\n', '    planBaseIds.push(planBaseId);\n', '    emit PlanBaseEvt(planBaseId, minimumAmount, lockTime, lessToHops, true);\n', '  }\n', '\n', '  function togglePlanBase(bytes32 planBaseId, bool isOpen) onlyOwner external {\n', '\n', '    planBaseIdToPlanBase[planBaseId].isOpen = isOpen;\n', '    emit TogglePlanBaseEvt(planBaseId, isOpen);\n', '  }\n', '  \n', '  function growHops(bytes32 planBaseId, uint256 lessAmount) whenNotPaused external {\n', '    address sender = msg.sender;\n', '    require(IERC20(lessAddress).allowance(sender, address(this)) >= lessAmount);\n', '\n', '    PlanBase storage planBase = planBaseIdToPlanBase[planBaseId];\n', '    require(planBase.isOpen);\n', '    require(lessAmount >= planBase.minimumAmount);\n', '    bytes32 planId = keccak256(\n', '      abi.encodePacked(block.timestamp, sender, planBaseId, lessAmount)\n', '    );\n', '    uint256 hopsAmount = lessAmount.mul(planBase.lessToHops);\n', '\n', '    Plan memory plan = Plan(\n', '      planBaseId,\n', '      sender,\n', '      lessAmount,\n', '      hopsAmount,\n', '      block.timestamp,\n', '      block.timestamp.add(planBase.lockTime),\n', '      false\n', '    );\n', '    \n', '    require(IERC20(lessAddress).transferFrom(sender, address(this), lessAmount));\n', '    require(IERC20(hopsAddress).mint(sender, hopsAmount));\n', '\n', '    planIdToPlan[planId] = plan;\n', '    userToPlanIds[sender].push(planId);\n', '    planIdsByPlanBase[planBaseId].push(planId);\n', '    emit PlanEvt(planId, planBaseId, sender, lessAmount, hopsAmount, block.timestamp, block.timestamp.add(planBase.lockTime), false);\n', '  }\n', '\n', '  function updateHopsAddress(address _address) external onlyOwner {\n', '    hopsAddress = _address;\n', '  }\n', '\n', '  function updatelessAddress(address _address) external onlyOwner {\n', '    lessAddress = _address;\n', '  }\n', '\n', '  function withdraw(bytes32 planId) whenNotPaused external {\n', '    address sender = msg.sender;\n', '    Plan storage plan = planIdToPlan[planId];\n', '    require(!plan.isWithdrawn);\n', '    require(plan.plantuser == sender);\n', '    require(block.timestamp >= plan.releaseAt);\n', '    require(IERC20(lessAddress).transfer(sender, plan.lessAmount));\n', '\n', '    planIdToPlan[planId].isWithdrawn = true;\n', '    emit WithdrawPlanEvt(planId, sender, plan.lessAmount, true, block.timestamp);\n', '  }\n', '\n', '  function checkPlanBase(bytes32 planBaseId)\n', '    external view returns (uint256, uint256, uint32, bool){\n', '    PlanBase storage planBase = planBaseIdToPlanBase[planBaseId];\n', '    return (\n', '      planBase.minimumAmount,\n', '      planBase.lockTime,\n', '      planBase.lessToHops,\n', '      planBase.isOpen\n', '    );\n', '  }\n', '\n', '  function checkPlanBaseIds() external view returns(bytes32[]) {\n', '    return planBaseIds;\n', '  }\n', '\n', '  function checkPlanIdsByPlanBase(bytes32 planBaseId) external view returns(bytes32[]) {\n', '    return planIdsByPlanBase[planBaseId];\n', '  }\n', '\n', '  function checkPlanIdsByUser(address user) external view returns(bytes32[]) {\n', '    return userToPlanIds[user];\n', '  }\n', '\n', '  function checkPlan(bytes32 planId)\n', '    external view returns (bytes32, address, uint256, uint256, uint256, uint256, bool) {\n', '    Plan storage plan = planIdToPlan[planId];\n', '    return (\n', '      plan.planBaseId,\n', '      plan.plantuser,\n', '      plan.lessAmount,\n', '      plan.hopsAmount,\n', '      plan.lockAt,\n', '      plan.releaseAt,\n', '      plan.isWithdrawn\n', '    );\n', '  }\n', '}']