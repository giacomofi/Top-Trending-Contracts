['/*! payment_processor.sol | (c) 2018 Develop by BelovITLab LLC (smartcontract.ru), author @stupidlovejoy | License: MIT */\n', '\n', 'pragma solidity 0.4.25;\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        if(a == 0) return 0;\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "NaN");\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        require(b > 0, "NaN");\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        require(b <= a, "NaN");\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "NaN");\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        require(b != 0, "NaN");\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor() internal {\n', '        _owner = msg.sender;\n', '\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    function owner() public view returns(address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Access denied");\n', '        _;\n', '    }\n', '\n', '    function isOwner() public view returns(bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '\n', '        _owner = address(0);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Zero address");\n', '\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract PaymentProcessor is Ownable {\n', '    using SafeMath for uint;\n', '\n', '    uint public commission = 10;\n', '    address public recepient = 0x0000000000000000000000000000000000000000;      // при деплое надо указать получателя\n', '    uint public min_payment = 0.001 ether;\n', '\n', '    mapping(address => uint) public buyers;\n', '\n', '    event NewCommission(uint previousCommission, uint newCommission);\n', '    event NewRecepient(address previousRecepient, address newRecepient);\n', '    event NewMinPayment(uint previousMinPayment, uint newMinPayment);\n', '    event Payment(address indexed submiter, address indexed recepient, address indexed middleman, uint amount, uint commission);\n', '\n', '    function() payable public {\n', '        require(msg.value >= min_payment, "Too small amount");\n', '\n', '        address middleman = bytesToAddress(msg.data);\n', '\n', '        require(middleman != address(0), "Zero address middleman");\n', '        require(middleman == recepient || buyers[middleman] > 0, "The mediator did not make purchases");\n', '\n', '        uint com = msg.value.mul(commission).div(100);\n', '        uint value = msg.value.sub(com);\n', '\n', '        recepient.transfer(value);\n', '        middleman.transfer(com);\n', '\n', '        buyers[msg.sender] = buyers[msg.sender].add(msg.value);\n', '\n', '        emit Payment(msg.sender, recepient, middleman, value, com);\n', '    }\n', '\n', '    function bytesToAddress(bytes bys) pure private returns(address addr) {\n', '        assembly {\n', '            addr := mload(add(bys, 20))\n', '        }\n', '    }\n', '\n', '    function setCommission(uint new_commission) onlyOwner public {\n', '        emit NewCommission(commission, new_commission);\n', '\n', '        commission = new_commission;\n', '    }\n', '\n', '    function setRecepient(address new_recepient) onlyOwner public {\n', '        require(new_recepient != address(0), "Zero address");\n', '\n', '        emit NewRecepient(recepient, new_recepient);\n', '\n', '        recepient = new_recepient;\n', '    }\n', '\n', '    function setMinPayment(uint new_min_payment) onlyOwner public {\n', '        emit NewMinPayment(min_payment, new_min_payment);\n', '\n', '        min_payment = new_min_payment;\n', '    }\n', '}']