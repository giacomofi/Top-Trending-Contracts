['pragma solidity ^0.5.2;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Multiplies two unsigned integers, reverts on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two unsigned integers, reverts on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '     * reverts when dividing by zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://eips.ethereum.org/EIPS/eip-20\n', ' */\n', 'interface IERC20 {\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address who) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', 'library StringLib {\n', '\n', '    /// @notice converts bytes32 into a string.\n', '    /// @param bytesToConvert bytes32 array to convert\n', '    function bytes32ToString(bytes32 bytesToConvert) internal pure returns (string memory) {\n', '        bytes memory bytesArray = new bytes(32);\n', '        for (uint256 i; i < 32; i++) {\n', '            bytesArray[i] = bytesToConvert[i];\n', '        }\n', '        return string(bytesArray);\n', '    }\n', '}/*\n', '    Copyright 2017-2019 Phillip A. Elsasser\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '*/\n', '\n', '\n', '\n', '/// @title Math function library with overflow protection inspired by Open Zeppelin\n', 'library MathLib {\n', '\n', '    int256 constant INT256_MIN = int256((uint256(1) << 255));\n', '    int256 constant INT256_MAX = int256(~((uint256(1) << 255)));\n', '\n', '    function multiply(uint256 a, uint256 b) pure internal returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b,  "MathLib: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function divideFractional(\n', '        uint256 a,\n', '        uint256 numerator,\n', '        uint256 denominator\n', '    ) pure internal returns (uint256)\n', '    {\n', '        return multiply(a, numerator) / denominator;\n', '    }\n', '\n', '    function subtract(uint256 a, uint256 b) pure internal returns (uint256) {\n', '        require(b <= a, "MathLib: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) pure internal returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "MathLib: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /// @notice determines the amount of needed collateral for a given position (qty and price)\n', '    /// @param priceFloor lowest price the contract is allowed to trade before expiration\n', '    /// @param priceCap highest price the contract is allowed to trade before expiration\n', '    /// @param qtyMultiplier multiplier for qty from base units\n', '    /// @param longQty qty to redeem\n', '    /// @param shortQty qty to redeem\n', '    /// @param price of the trade\n', '    function calculateCollateralToReturn(\n', '        uint priceFloor,\n', '        uint priceCap,\n', '        uint qtyMultiplier,\n', '        uint longQty,\n', '        uint shortQty,\n', '        uint price\n', '    ) pure internal returns (uint)\n', '    {\n', '        uint neededCollateral = 0;\n', '        uint maxLoss;\n', '        if (longQty > 0) {   // calculate max loss from entry price to floor\n', '            if (price <= priceFloor) {\n', '                maxLoss = 0;\n', '            } else {\n', '                maxLoss = subtract(price, priceFloor);\n', '            }\n', '            neededCollateral = multiply(multiply(maxLoss, longQty),  qtyMultiplier);\n', '        }\n', '\n', '        if (shortQty > 0) {  // calculate max loss from entry price to ceiling;\n', '            if (price >= priceCap) {\n', '                maxLoss = 0;\n', '            } else {\n', '                maxLoss = subtract(priceCap, price);\n', '            }\n', '            neededCollateral = add(neededCollateral, multiply(multiply(maxLoss, shortQty),  qtyMultiplier));\n', '        }\n', '        return neededCollateral;\n', '    }\n', '\n', '    /// @notice determines the amount of needed collateral for minting a long and short position token\n', '    function calculateTotalCollateral(\n', '        uint priceFloor,\n', '        uint priceCap,\n', '        uint qtyMultiplier\n', '    ) pure internal returns (uint)\n', '    {\n', '        return multiply(subtract(priceCap, priceFloor), qtyMultiplier);\n', '    }\n', '\n', '    /// @notice calculates the fee in terms of base units of the collateral token per unit pair minted.\n', '    function calculateFeePerUnit(\n', '        uint priceFloor,\n', '        uint priceCap,\n', '        uint qtyMultiplier,\n', '        uint feeInBasisPoints\n', '    ) pure internal returns (uint)\n', '    {\n', '        uint midPrice = add(priceCap, priceFloor) / 2;\n', '        return multiply(multiply(midPrice, qtyMultiplier), feeInBasisPoints) / 10000;\n', '    }\n', '}\n', '/*\n', '    Copyright 2017-2019 Phillip A. Elsasser\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '*/\n', '\n', '\n', '\n', '\n', '/*\n', '    Copyright 2017-2019 Phillip A. Elsasser\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '*/\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     * @notice Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/// @title MarketContract base contract implement all needed functionality for trading.\n', '/// @notice this is the abstract base contract that all contracts should inherit from to\n', '/// implement different oracle solutions.\n', '/// @author Phil Elsasser <phil@marketprotocol.io>\n', 'contract MarketContract is Ownable {\n', '    using StringLib for *;\n', '\n', '    string public CONTRACT_NAME;\n', '    address public COLLATERAL_TOKEN_ADDRESS;\n', '    address public COLLATERAL_POOL_ADDRESS;\n', '    uint public PRICE_CAP;\n', '    uint public PRICE_FLOOR;\n', '    uint public PRICE_DECIMAL_PLACES;   // how to convert the pricing from decimal format (if valid) to integer\n', '    uint public QTY_MULTIPLIER;         // multiplier corresponding to the value of 1 increment in price to token base units\n', '    uint public COLLATERAL_PER_UNIT;    // required collateral amount for the full range of outcome tokens\n', '    uint public COLLATERAL_TOKEN_FEE_PER_UNIT;\n', '    uint public MKT_TOKEN_FEE_PER_UNIT;\n', '    uint public EXPIRATION;\n', '    uint public SETTLEMENT_DELAY = 1 days;\n', '    address public LONG_POSITION_TOKEN;\n', '    address public SHORT_POSITION_TOKEN;\n', '\n', '    // state variables\n', '    uint public lastPrice;\n', '    uint public settlementPrice;\n', '    uint public settlementTimeStamp;\n', '    bool public isSettled = false;\n', '\n', '    // events\n', '    event UpdatedLastPrice(uint256 price);\n', '    event ContractSettled(uint settlePrice);\n', '\n', '    /// @param contractNames bytes32 array of names\n', '    ///     contractName            name of the market contract\n', '    ///     longTokenSymbol         symbol for the long token\n', '    ///     shortTokenSymbol        symbol for the short token\n', '    /// @param baseAddresses array of 2 addresses needed for our contract including:\n', '    ///     ownerAddress                    address of the owner of these contracts.\n', '    ///     collateralTokenAddress          address of the ERC20 token that will be used for collateral and pricing\n', '    ///     collateralPoolAddress           address of our collateral pool contract\n', '    /// @param contractSpecs array of unsigned integers including:\n', '    ///     floorPrice          minimum tradeable price of this contract, contract enters settlement if breached\n', '    ///     capPrice            maximum tradeable price of this contract, contract enters settlement if breached\n', '    ///     priceDecimalPlaces  number of decimal places to convert our queried price from a floating point to\n', '    ///                         an integer\n', '    ///     qtyMultiplier       multiply traded qty by this value from base units of collateral token.\n', '    ///     feeInBasisPoints    fee amount in basis points (Collateral token denominated) for minting.\n', '    ///     mktFeeInBasisPoints fee amount in basis points (MKT denominated) for minting.\n', '    ///     expirationTimeStamp seconds from epoch that this contract expires and enters settlement\n', '    constructor(\n', '        bytes32[3] memory contractNames,\n', '        address[3] memory baseAddresses,\n', '        uint[7] memory contractSpecs\n', '    ) public\n', '    {\n', '        PRICE_FLOOR = contractSpecs[0];\n', '        PRICE_CAP = contractSpecs[1];\n', '        require(PRICE_CAP > PRICE_FLOOR, "PRICE_CAP must be greater than PRICE_FLOOR");\n', '\n', '        PRICE_DECIMAL_PLACES = contractSpecs[2];\n', '        QTY_MULTIPLIER = contractSpecs[3];\n', '        EXPIRATION = contractSpecs[6];\n', '        require(EXPIRATION > now, "EXPIRATION must be in the future");\n', '        require(QTY_MULTIPLIER != 0,"QTY_MULTIPLIER cannot be 0");\n', '\n', '        COLLATERAL_TOKEN_ADDRESS = baseAddresses[1];\n', '        COLLATERAL_POOL_ADDRESS = baseAddresses[2];\n', '        COLLATERAL_PER_UNIT = MathLib.calculateTotalCollateral(PRICE_FLOOR, PRICE_CAP, QTY_MULTIPLIER);\n', '        COLLATERAL_TOKEN_FEE_PER_UNIT = MathLib.calculateFeePerUnit(\n', '            PRICE_FLOOR,\n', '            PRICE_CAP,\n', '            QTY_MULTIPLIER,\n', '            contractSpecs[4]\n', '        );\n', '        MKT_TOKEN_FEE_PER_UNIT = MathLib.calculateFeePerUnit(\n', '            PRICE_FLOOR,\n', '            PRICE_CAP,\n', '            QTY_MULTIPLIER,\n', '            contractSpecs[5]\n', '        );\n', '\n', '        // create long and short tokens\n', '        CONTRACT_NAME = contractNames[0].bytes32ToString();\n', '        PositionToken longPosToken = new PositionToken(\n', '            "MARKET Protocol Long Position Token",\n', '            contractNames[1].bytes32ToString(),\n', '            uint8(PositionToken.MarketSide.Long)\n', '        );\n', '        PositionToken shortPosToken = new PositionToken(\n', '            "MARKET Protocol Short Position Token",\n', '            contractNames[2].bytes32ToString(),\n', '            uint8(PositionToken.MarketSide.Short)\n', '        );\n', '\n', '        LONG_POSITION_TOKEN = address(longPosToken);\n', '        SHORT_POSITION_TOKEN = address(shortPosToken);\n', '\n', '        transferOwnership(baseAddresses[0]);\n', '    }\n', '\n', '    /*\n', '    // EXTERNAL - onlyCollateralPool METHODS\n', '    */\n', '\n', '    /// @notice called only by our collateral pool to create long and short position tokens\n', '    /// @param qtyToMint    qty in base units of how many short and long tokens to mint\n', '    /// @param minter       address of minter to receive tokens\n', '    function mintPositionTokens(\n', '        uint256 qtyToMint,\n', '        address minter\n', '    ) external onlyCollateralPool\n', '    {\n', '        // mint and distribute short and long position tokens to our caller\n', '        PositionToken(LONG_POSITION_TOKEN).mintAndSendToken(qtyToMint, minter);\n', '        PositionToken(SHORT_POSITION_TOKEN).mintAndSendToken(qtyToMint, minter);\n', '    }\n', '\n', '    /// @notice called only by our collateral pool to redeem long position tokens\n', '    /// @param qtyToRedeem  qty in base units of how many tokens to redeem\n', '    /// @param redeemer     address of person redeeming tokens\n', '    function redeemLongToken(\n', '        uint256 qtyToRedeem,\n', '        address redeemer\n', '    ) external onlyCollateralPool\n', '    {\n', '        // mint and distribute short and long position tokens to our caller\n', '        PositionToken(LONG_POSITION_TOKEN).redeemToken(qtyToRedeem, redeemer);\n', '    }\n', '\n', '    /// @notice called only by our collateral pool to redeem short position tokens\n', '    /// @param qtyToRedeem  qty in base units of how many tokens to redeem\n', '    /// @param redeemer     address of person redeeming tokens\n', '    function redeemShortToken(\n', '        uint256 qtyToRedeem,\n', '        address redeemer\n', '    ) external onlyCollateralPool\n', '    {\n', '        // mint and distribute short and long position tokens to our caller\n', '        PositionToken(SHORT_POSITION_TOKEN).redeemToken(qtyToRedeem, redeemer);\n', '    }\n', '\n', '    /*\n', '    // Public METHODS\n', '    */\n', '\n', '    /// @notice checks to see if a contract is settled, and that the settlement delay has passed\n', '    function isPostSettlementDelay() public view returns (bool) {\n', '        return isSettled && (now >= (settlementTimeStamp + SETTLEMENT_DELAY));\n', '    }\n', '\n', '    /*\n', '    // PRIVATE METHODS\n', '    */\n', '\n', '    /// @dev checks our last query price to see if our contract should enter settlement due to it being past our\n', '    //  expiration date or outside of our tradeable ranges.\n', '    function checkSettlement() internal {\n', '        require(!isSettled, "Contract is already settled"); // already settled.\n', '\n', '        uint newSettlementPrice;\n', '        if (now > EXPIRATION) {  // note: miners can cheat this by small increments of time (minutes, not hours)\n', '            isSettled = true;                   // time based expiration has occurred.\n', '            newSettlementPrice = lastPrice;\n', '        } else if (lastPrice >= PRICE_CAP) {    // price is greater or equal to our cap, settle to CAP price\n', '            isSettled = true;\n', '            newSettlementPrice = PRICE_CAP;\n', '        } else if (lastPrice <= PRICE_FLOOR) {  // price is lesser or equal to our floor, settle to FLOOR price\n', '            isSettled = true;\n', '            newSettlementPrice = PRICE_FLOOR;\n', '        }\n', '\n', '        if (isSettled) {\n', '            settleContract(newSettlementPrice);\n', '        }\n', '    }\n', '\n', '    /// @dev records our final settlement price and fires needed events.\n', '    /// @param finalSettlementPrice final query price at time of settlement\n', '    function settleContract(uint finalSettlementPrice) internal {\n', '        settlementTimeStamp = now;\n', '        settlementPrice = finalSettlementPrice;\n', '        emit ContractSettled(finalSettlementPrice);\n', '    }\n', '\n', '    /// @notice only able to be called directly by our collateral pool which controls the position tokens\n', '    /// for this contract!\n', '    modifier onlyCollateralPool {\n', '        require(msg.sender == COLLATERAL_POOL_ADDRESS, "Only callable from the collateral pool");\n', '        _;\n', '    }\n', '\n', '}\n', '\n', '/*\n', '    Copyright 2017-2019 Phillip A. Elsasser\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '*/\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://eips.ethereum.org/EIPS/eip-20\n', ' * Originally based on code by FirstBlood:\n', ' * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' *\n', ' * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n', " * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n", ' * compliant implementations may not do it.\n', ' */\n', 'contract ERC20 is IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowed;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    /**\n', '     * @dev Total number of tokens in existence\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param owner The address to query the balance of.\n', '     * @return A uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        return _balances[owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param owner address The address which owns the funds.\n', '     * @param spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowed[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer token to a specified address\n', '     * @param to The address to transfer to.\n', '     * @param value The amount to be transferred.\n', '     */\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param spender The address which will spend the funds.\n', '     * @param value The amount of tokens to be spent.\n', '     */\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        _approve(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another.\n', '     * Note that while this function emits an Approval event, this is not required as per the specification,\n', '     * and other compliant implementations may not emit the event.\n', '     * @param from address The address which you want to send tokens from\n', '     * @param to address The address which you want to transfer to\n', '     * @param value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '        _transfer(from, to, value);\n', '        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when _allowed[msg.sender][spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * Emits an Approval event.\n', '     * @param spender The address which will spend the funds.\n', '     * @param addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when _allowed[msg.sender][spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * Emits an Approval event.\n', '     * @param spender The address which will spend the funds.\n', '     * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer token for a specified addresses\n', '     * @param from The address to transfer from.\n', '     * @param to The address to transfer to.\n', '     * @param value The amount to be transferred.\n', '     */\n', '    function _transfer(address from, address to, uint256 value) internal {\n', '        require(to != address(0));\n', '\n', '        _balances[from] = _balances[from].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that mints an amount of the token and assigns it to\n', '     * an account. This encapsulates the modification of balances such that the\n', '     * proper events are emitted.\n', '     * @param account The account that will receive the created tokens.\n', '     * @param value The amount that will be created.\n', '     */\n', '    function _mint(address account, uint256 value) internal {\n', '        require(account != address(0));\n', '\n', '        _totalSupply = _totalSupply.add(value);\n', '        _balances[account] = _balances[account].add(value);\n', '        emit Transfer(address(0), account, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that burns an amount of the token of a given\n', '     * account.\n', '     * @param account The account whose tokens will be burnt.\n', '     * @param value The amount that will be burnt.\n', '     */\n', '    function _burn(address account, uint256 value) internal {\n', '        require(account != address(0));\n', '\n', '        _totalSupply = _totalSupply.sub(value);\n', '        _balances[account] = _balances[account].sub(value);\n', '        emit Transfer(account, address(0), value);\n', '    }\n', '\n', '    /**\n', "     * @dev Approve an address to spend another addresses' tokens.\n", '     * @param owner The address that owns the tokens.\n', '     * @param spender The address that will spend the tokens.\n', '     * @param value The number of tokens that can be spent.\n', '     */\n', '    function _approve(address owner, address spender, uint256 value) internal {\n', '        require(spender != address(0));\n', '        require(owner != address(0));\n', '\n', '        _allowed[owner][spender] = value;\n', '        emit Approval(owner, spender, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that burns an amount of the token of a given\n', "     * account, deducting from the sender's allowance for said account. Uses the\n", '     * internal burn function.\n', '     * Emits an Approval event (reflecting the reduced allowance).\n', '     * @param account The account whose tokens will be burnt.\n', '     * @param value The amount that will be burnt.\n', '     */\n', '    function _burnFrom(address account, uint256 value) internal {\n', '        _burn(account, value);\n', '        _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '/// @title Position Token\n', '/// @notice A token that represents a claim to a collateral pool and a short or long position.\n', '/// The collateral pool acts as the owner of this contract and controls minting and redemption of these\n', '/// tokens based on locked collateral in the pool.\n', '/// NOTE: We eventually can move all of this logic into a library to avoid deploying all of the logic\n', '/// every time a new market contract is deployed.\n', '/// @author Phil Elsasser <phil@marketprotocol.io>\n', 'contract PositionToken is ERC20, Ownable {\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '\n', '    MarketSide public MARKET_SIDE; // 0 = Long, 1 = Short\n', '    enum MarketSide { Long, Short}\n', '\n', '    constructor(\n', '        string memory tokenName,\n', '        string memory tokenSymbol,\n', '        uint8 marketSide\n', '    ) public\n', '    {\n', '        name = tokenName;\n', '        symbol = tokenSymbol;\n', '        decimals = 5;\n', '        MARKET_SIDE = MarketSide(marketSide);\n', '    }\n', '\n', '    /// @dev Called by our MarketContract (owner) to create a long or short position token. These tokens are minted,\n', '    /// and then transferred to our recipient who is the party who is minting these tokens.  The collateral pool\n', '    /// is the only caller (acts as the owner) because collateral must be deposited / locked prior to minting of new\n', '    /// position tokens\n', '    /// @param qtyToMint quantity of position tokens to mint (in base units)\n', '    /// @param recipient the person minting and receiving these position tokens.\n', '    function mintAndSendToken(\n', '        uint256 qtyToMint,\n', '        address recipient\n', '    ) external onlyOwner\n', '    {\n', '        _mint(recipient, qtyToMint);\n', '    }\n', '\n', '    /// @dev Called by our MarketContract (owner) when redemption occurs.  This means that either a single user is redeeming\n', '    /// both short and long tokens in order to claim their collateral, or the contract has settled, and only a single\n', '    /// side of the tokens are needed to redeem (handled by the collateral pool)\n', '    /// @param qtyToRedeem quantity of tokens to burn (remove from supply / circulation)\n', '    /// @param redeemer the person redeeming these tokens (who are we taking the balance from)\n', '    function redeemToken(\n', '        uint256 qtyToRedeem,\n', '        address redeemer\n', '    ) external onlyOwner\n', '    {\n', '        _burn(redeemer, qtyToRedeem);\n', '    }\n', '}\n', '/*\n', '    Copyright 2017-2019 Phillip A. Elsasser\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '*/\n', '\n', '\n', '\n', '\n', 'contract MarketContractRegistryInterface {\n', '    function addAddressToWhiteList(address contractAddress) external;\n', '    function isAddressWhiteListed(address contractAddress) external view returns (bool);\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' */\n', 'library Address {\n', '    /**\n', '     * Returns whether the target address is a contract\n', '     * @dev This function will return false if invoked during the constructor of a contract,\n', '     * as the code is not actually created until after the constructor finishes.\n', '     * @param account address of the account to check\n', '     * @return whether the target address is a contract\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        uint256 size;\n', '        // XXX Currently there is no better way to check if there is a contract in an address\n', '        // than to check the size of the code at that address.\n', '        // See https://ethereum.stackexchange.com/a/14016/36603\n', '        // for more details about how this works.\n', '        // TODO Check this again before the Serenity release, because all addresses will be\n', '        // contracts then.\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        require((value == 0) || (token.allowance(address(this), spender) == 0));\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must equal true).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '\n', '        require(address(token).isContract());\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success);\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            require(abi.decode(returndata, (bool)));\n', '        }\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/// @title MarketCollateralPool\n', '/// @notice This collateral pool houses all of the collateral for all market contracts currently in circulation.\n', '/// This pool facilitates locking of collateral and minting / redemption of position tokens for that collateral.\n', '/// @author Phil Elsasser <phil@marketprotocol.io>\n', 'contract MarketCollateralPool is Ownable {\n', '    using MathLib for uint;\n', '    using MathLib for int;\n', '    using SafeERC20 for ERC20;\n', '\n', '    address public marketContractRegistry;\n', '    address public mktToken;\n', '\n', '    mapping(address => uint) public contractAddressToCollateralPoolBalance;                 // current balance of all collateral committed\n', '    mapping(address => uint) public feesCollectedByTokenAddress;\n', '\n', '    event TokensMinted(\n', '        address indexed marketContract,\n', '        address indexed user,\n', '        address indexed feeToken,\n', '        uint qtyMinted,\n', '        uint collateralLocked,\n', '        uint feesPaid\n', '    );\n', '\n', '    event TokensRedeemed (\n', '        address indexed marketContract,\n', '        address indexed user,\n', '        uint longQtyRedeemed,\n', '        uint shortQtyRedeemed,\n', '        uint collateralUnlocked\n', '    );\n', '\n', '    constructor(address marketContractRegistryAddress, address mktTokenAddress) public {\n', '        marketContractRegistry = marketContractRegistryAddress;\n', '        mktToken = mktTokenAddress;\n', '    }\n', '\n', '    /*\n', '    // EXTERNAL METHODS\n', '    */\n', '\n', '    /// @notice Called by a user that would like to mint a new set of long and short token for a specified\n', '    /// market contract.  This will transfer and lock the correct amount of collateral into the pool\n', '    /// and issue them the requested qty of long and short tokens\n', '    /// @param marketContractAddress            address of the market contract to redeem tokens for\n', '    /// @param qtyToMint                      quantity of long / short tokens to mint.\n', "    /// @param isAttemptToPayInMKT            if possible, attempt to pay fee's in MKT rather than collateral tokens\n", '    function mintPositionTokens(\n', '        address marketContractAddress,\n', '        uint qtyToMint,\n', '        bool isAttemptToPayInMKT\n', '    ) external onlyWhiteListedAddress(marketContractAddress)\n', '    {\n', '\n', '        MarketContract marketContract = MarketContract(marketContractAddress);\n', '        require(!marketContract.isSettled(), "Contract is already settled");\n', '\n', '        address collateralTokenAddress = marketContract.COLLATERAL_TOKEN_ADDRESS();\n', '        uint neededCollateral = MathLib.multiply(qtyToMint, marketContract.COLLATERAL_PER_UNIT());\n', '        // the user has selected to pay fees in MKT and those fees are non zero (allowed) OR\n', '        // the user has selected not to pay fees in MKT, BUT the collateral token fees are disabled (0) AND the\n', '        // MKT fees are enabled (non zero).  (If both are zero, no fee exists)\n', '        bool isPayFeesInMKT = (isAttemptToPayInMKT &&\n', '            marketContract.MKT_TOKEN_FEE_PER_UNIT() != 0) ||\n', '            (!isAttemptToPayInMKT &&\n', '            marketContract.MKT_TOKEN_FEE_PER_UNIT() != 0 &&\n', '            marketContract.COLLATERAL_TOKEN_FEE_PER_UNIT() == 0);\n', '\n', '        uint feeAmount;\n', '        uint totalCollateralTokenTransferAmount;\n', '        address feeToken;\n', '        if (isPayFeesInMKT) { // fees are able to be paid in MKT\n', '            feeAmount = MathLib.multiply(qtyToMint, marketContract.MKT_TOKEN_FEE_PER_UNIT());\n', '            totalCollateralTokenTransferAmount = neededCollateral;\n', '            feeToken = mktToken;\n', '\n', '            // EXTERNAL CALL - transferring ERC20 tokens from sender to this contract.  User must have called\n', '            // ERC20.approve in order for this call to succeed.\n', '            ERC20(mktToken).safeTransferFrom(msg.sender, address(this), feeAmount);\n', '        } else { // fee are either zero, or being paid in the collateral token\n', '            feeAmount = MathLib.multiply(qtyToMint, marketContract.COLLATERAL_TOKEN_FEE_PER_UNIT());\n', '            totalCollateralTokenTransferAmount = neededCollateral.add(feeAmount);\n', '            feeToken = collateralTokenAddress;\n', '            // we will transfer collateral and fees all at once below.\n', '        }\n', '\n', '        // EXTERNAL CALL - transferring ERC20 tokens from sender to this contract.  User must have called\n', '        // ERC20.approve in order for this call to succeed.\n', '        ERC20(marketContract.COLLATERAL_TOKEN_ADDRESS()).safeTransferFrom(msg.sender, address(this), totalCollateralTokenTransferAmount);\n', '\n', '        if (feeAmount != 0) {\n', "            // update the fee's collected balance\n", '            feesCollectedByTokenAddress[feeToken] = feesCollectedByTokenAddress[feeToken].add(feeAmount);\n', '        }\n', '\n', '        // Update the collateral pool locked balance.\n', '        contractAddressToCollateralPoolBalance[marketContractAddress] = contractAddressToCollateralPoolBalance[\n', '            marketContractAddress\n', '        ].add(neededCollateral);\n', '\n', '        // mint and distribute short and long position tokens to our caller\n', '        marketContract.mintPositionTokens(qtyToMint, msg.sender);\n', '\n', '        emit TokensMinted(\n', '            marketContractAddress,\n', '            msg.sender,\n', '            feeToken,\n', '            qtyToMint,\n', '            neededCollateral,\n', '            feeAmount\n', '        );\n', '    }\n', '\n', '    /// @notice Called by a user that currently holds both short and long position tokens and would like to redeem them\n', '    /// for their collateral.\n', '    /// @param marketContractAddress            address of the market contract to redeem tokens for\n', '    /// @param qtyToRedeem                      quantity of long / short tokens to redeem.\n', '    function redeemPositionTokens(\n', '        address marketContractAddress,\n', '        uint qtyToRedeem\n', '    ) external onlyWhiteListedAddress(marketContractAddress)\n', '    {\n', '        MarketContract marketContract = MarketContract(marketContractAddress);\n', '\n', '        marketContract.redeemLongToken(qtyToRedeem, msg.sender);\n', '        marketContract.redeemShortToken(qtyToRedeem, msg.sender);\n', '\n', '        // calculate collateral to return and update pool balance\n', '        uint collateralToReturn = MathLib.multiply(qtyToRedeem, marketContract.COLLATERAL_PER_UNIT());\n', '        contractAddressToCollateralPoolBalance[marketContractAddress] = contractAddressToCollateralPoolBalance[\n', '            marketContractAddress\n', '        ].subtract(collateralToReturn);\n', '\n', '        // EXTERNAL CALL\n', '        // transfer collateral back to user\n', '        ERC20(marketContract.COLLATERAL_TOKEN_ADDRESS()).safeTransfer(msg.sender, collateralToReturn);\n', '\n', '        emit TokensRedeemed(\n', '            marketContractAddress,\n', '            msg.sender,\n', '            qtyToRedeem,\n', '            qtyToRedeem,\n', '            collateralToReturn\n', '        );\n', '    }\n', '\n', '    // @notice called by a user after settlement has occurred.  This function will finalize all accounting around any\n', '    // outstanding positions and return all remaining collateral to the caller. This should only be called after\n', '    // settlement has occurred.\n', '    /// @param marketContractAddress address of the MARKET Contract being traded.\n', '    /// @param longQtyToRedeem qty to redeem of long tokens\n', '    /// @param shortQtyToRedeem qty to redeem of short tokens\n', '    function settleAndClose(\n', '        address marketContractAddress,\n', '        uint longQtyToRedeem,\n', '        uint shortQtyToRedeem\n', '    ) external onlyWhiteListedAddress(marketContractAddress)\n', '    {\n', '        MarketContract marketContract = MarketContract(marketContractAddress);\n', '        require(marketContract.isPostSettlementDelay(), "Contract is not past settlement delay");\n', '\n', '        // burn tokens being redeemed.\n', '        if (longQtyToRedeem > 0) {\n', '            marketContract.redeemLongToken(longQtyToRedeem, msg.sender);\n', '        }\n', '\n', '        if (shortQtyToRedeem > 0) {\n', '            marketContract.redeemShortToken(shortQtyToRedeem, msg.sender);\n', '        }\n', '\n', '\n', '        // calculate amount of collateral to return and update pool balances\n', '        uint collateralToReturn = MathLib.calculateCollateralToReturn(\n', '            marketContract.PRICE_FLOOR(),\n', '            marketContract.PRICE_CAP(),\n', '            marketContract.QTY_MULTIPLIER(),\n', '            longQtyToRedeem,\n', '            shortQtyToRedeem,\n', '            marketContract.settlementPrice()\n', '        );\n', '\n', '        contractAddressToCollateralPoolBalance[marketContractAddress] = contractAddressToCollateralPoolBalance[\n', '            marketContractAddress\n', '        ].subtract(collateralToReturn);\n', '\n', '        // return collateral tokens\n', '        ERC20(marketContract.COLLATERAL_TOKEN_ADDRESS()).safeTransfer(msg.sender, collateralToReturn);\n', '\n', '        emit TokensRedeemed(\n', '            marketContractAddress,\n', '            msg.sender,\n', '            longQtyToRedeem,\n', '            shortQtyToRedeem,\n', '            collateralToReturn\n', '        );\n', '    }\n', '\n', '    /// @dev allows the owner to remove the fees paid into this contract for minting\n', '    /// @param feeTokenAddress - address of the erc20 token fees have been paid in\n', '    /// @param feeRecipient - Recipient address of fees\n', '    function withdrawFees(address feeTokenAddress, address feeRecipient) public onlyOwner {\n', '        uint feesAvailableForWithdrawal = feesCollectedByTokenAddress[feeTokenAddress];\n', '        require(feesAvailableForWithdrawal != 0, "No fees available for withdrawal");\n', '        require(feeRecipient != address(0), "Cannot send fees to null address");\n', '        feesCollectedByTokenAddress[feeTokenAddress] = 0;\n', '        // EXTERNAL CALL\n', '        ERC20(feeTokenAddress).safeTransfer(feeRecipient, feesAvailableForWithdrawal);\n', '    }\n', '\n', '    /// @dev allows the owner to update the mkt token address in use for fees\n', '    /// @param mktTokenAddress address of new MKT token\n', '    function setMKTTokenAddress(address mktTokenAddress) public onlyOwner {\n', '        require(mktTokenAddress != address(0), "Cannot set MKT Token Address To Null");\n', '        mktToken = mktTokenAddress;\n', '    }\n', '\n', '    /// @dev allows the owner to update the mkt token address in use for fees\n', '    /// @param marketContractRegistryAddress address of new contract registry\n', '    function setMarketContractRegistryAddress(address marketContractRegistryAddress) public onlyOwner {\n', '        require(marketContractRegistryAddress != address(0), "Cannot set Market Contract Registry Address To Null");\n', '        marketContractRegistry = marketContractRegistryAddress;\n', '    }\n', '\n', '    /*\n', '    // MODIFIERS\n', '    */\n', '\n', '    /// @notice only can be called with a market contract address that currently exists in our whitelist\n', "    /// this ensure's it is a market contract that has been created by us and therefore has a uniquely created\n", "    /// long and short token address.  If it didn't we could have spoofed contracts minting tokens with a\n", "    /// collateral token that wasn't the same as the intended token.\n", '    modifier onlyWhiteListedAddress(address marketContractAddress) {\n', '        require(\n', '            MarketContractRegistryInterface(marketContractRegistry).isAddressWhiteListed(marketContractAddress),\n', '            "Contract is not whitelisted"\n', '        );\n', '        _;\n', '    }\n', '}']