['pragma solidity ^0.5.0;\n', '\n', 'contract Proxy {\n', '\n', '    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\n', '    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\n', '    address internal masterCopy;\n', '\n', '    /// @dev Constructor function sets address of master copy contract.\n', '    /// @param _masterCopy Master copy address.\n', '    constructor(address _masterCopy)\n', '        public\n', '    {\n', '        require(_masterCopy != address(0), "Invalid master copy address provided");\n', '        masterCopy = _masterCopy;\n', '    }\n', '\n', '    /// @dev Fallback function forwards all transactions and returns all received return data.\n', '    function ()\n', '        external\n', '        payable\n', '    {\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly {\n', '            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\n', '            calldatacopy(0, 0, calldatasize())\n', '            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\n', '            returndatacopy(0, 0, returndatasize())\n', '            if eq(success, 0) { revert(0, returndatasize()) }\n', '            return(0, returndatasize())\n', '        }\n', '    }\n', '}\n', '\n', 'contract ProxyFactory {\n', '\n', '    event ProxyCreation(Proxy proxy);\n', '\n', '    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\n', '    /// @param masterCopy Address of master copy.\n', '    /// @param data Payload for message call sent to new proxy contract.\n', '    function createProxy(address masterCopy, bytes memory data)\n', '        public\n', '        returns (Proxy proxy)\n', '    {\n', '        proxy = new Proxy(masterCopy);\n', '        if (data.length > 0)\n', '            // solium-disable-next-line security/no-inline-assembly\n', '            assembly {\n', '                if eq(call(gas, proxy, 0, add(data, 0x20), mload(data), 0, 0), 0) { revert(0, 0) }\n', '            }\n', '        emit ProxyCreation(proxy);\n', '    }\n', '\n', '    /// @dev Allows to retrieve the runtime code of a deployed Proxy. This can be used to check that the expected Proxy was deployed.\n', '    function proxyRuntimeCode() public pure returns (bytes memory) {\n', '        return type(Proxy).runtimeCode;\n', '    }\n', '\n', '    /// @dev Allows to retrieve the creation code used for the Proxy deployment. With this it is easily possible to calculate predicted address.\n', '    function proxyCreationCode() public pure returns (bytes memory) {\n', '        return type(Proxy).creationCode;\n', '    }\n', '\n', '    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\n', '    /// @param _mastercopy Address of master copy.\n', '    /// @param initializer Payload for message call sent to new proxy contract.\n', '    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\n', '    function createProxyWithNonce(address _mastercopy, bytes memory initializer, uint256 saltNonce)\n', '        public\n', '        returns (Proxy proxy)\n', '    {\n', '        // If the initializer changes the proxy address should change too. Hashing the initializer data is cheaper than just concatinating it\n', '        bytes32 salt = keccak256(abi.encodePacked(keccak256(initializer), saltNonce));\n', '        bytes memory deploymentData = abi.encodePacked(type(Proxy).creationCode, uint256(_mastercopy));\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly {\n', '            proxy := create2(0x0, add(0x20, deploymentData), mload(deploymentData), salt)\n', '        }\n', '        if (initializer.length > 0)\n', '            // solium-disable-next-line security/no-inline-assembly\n', '            assembly {\n', '                if eq(call(gas, proxy, 0, add(initializer, 0x20), mload(initializer), 0, 0), 0) { revert(0,0) }\n', '            }\n', '        emit ProxyCreation(proxy);\n', '    }\n', '}']