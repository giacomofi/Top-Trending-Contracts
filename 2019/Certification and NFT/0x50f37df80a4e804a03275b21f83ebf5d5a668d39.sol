['// loosely based on Bryn Bellomy code\n', '// https://medium.com/@bryn.bellomy/solidity-tutorial-building-a-simple-auction-contract-fcc918b0878a\n', '//\n', '// updated to 0.4.25 standard, replaced blocks with time, converted to hot potato style by Chibi Fighters\n', '// https://chibifighters.io\n', '//\n', '\n', 'pragma solidity ^0.4.25;\n', '\n', '/**\n', '* @title SafeMath\n', '* @dev Math operations with safety checks that throw on error\n', '*/\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, returns 0 if it would go into minus range.\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (b >= a) {\n', '            return 0;\n', '        }\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * @notice Renouncing to ownership will leave the contract without an owner.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', 'contract AuctionPotato is Ownable {\n', '    using SafeMath for uint256; \n', '\n', '    string name;\n', '    uint public startTime;\n', '    uint public endTime;\n', '    uint auctionDuration;\n', '\n', '    // pototo\n', '    uint public potato;\n', '    uint oldPotato;\n', '    uint oldHighestBindingBid;\n', '    \n', '    // state\n', '    bool public canceled;\n', '    uint public highestBindingBid;\n', '    address public highestBidder;\n', '    \n', '    // used to immidiately block placeBids\n', '    bool blockerPay;\n', '    bool blockerWithdraw;\n', '    \n', '    mapping(address => uint256) public fundsByBidder;\n', '    bool ownerHasWithdrawn;\n', '\n', '    // couple events\n', '    event LogBid(address bidder, address highestBidder, uint oldHighestBindingBid, uint highestBindingBid);\n', '    event LogWithdrawal(address withdrawer, address withdrawalAccount, uint amount);\n', '    event LogCanceled();\n', '    event Withdraw(address owner, uint amount);\n', '    \n', '    \n', '    constructor() public {\n', '        \n', '        blockerWithdraw = false;\n', '        blockerPay = false;\n', '        \n', '        // 0.003 ETH\n', '        highestBindingBid = 3000000000000000;\n', '        potato = 0;\n', '        \n', '        // set to 3 hours\n', '        auctionDuration = 3 hours;\n', '\n', '        // 01/06/2019 @ 6:00pm (UTC) 1546797600 Brenna Sparks 3\n', '\n', '        startTime = 1546794000;\n', '        endTime = startTime + auctionDuration;\n', '\n', '        name = "Glen Weyl 3";\n', '\n', '    }\n', '    \n', '    \n', '    function setStartTime(uint _time) onlyOwner public \n', '    {\n', '        require(now < startTime);\n', '        startTime = _time;\n', '        endTime = startTime + auctionDuration;\n', '    }\n', '\n', '\n', '    // calculates the next bid amount to you can have a oneclick buy button\n', '    function nextBid() public view returns (uint _nextBid) {\n', '        return highestBindingBid.add(potato);\n', '    }\n', '    \n', '    \n', '    // calculates the bid after the current bid so nifty hackers can skip the queue\n', '    // this is not in our frontend and no one knows if it actually works\n', '    function nextNextBid() public view returns (uint _nextBid) {\n', '        return highestBindingBid.add(potato).add((highestBindingBid.add(potato)).mul(4).div(9));\n', '    }\n', '    \n', '    \n', '    function queryAuction() public view returns (string, uint, address, uint, uint, uint)\n', '    {\n', '        \n', '        return (name, nextBid(), highestBidder, highestBindingBid, startTime, endTime);\n', '        \n', '    }\n', '\n', '\n', '    function placeBid() public\n', '        payable\n', '        onlyAfterStart\n', '        onlyBeforeEnd\n', '        onlyNotCanceled\n', '    {   \n', '        // we are only allowing to increase in bidIncrements to make for true hot potato style\n', '        require(msg.value == highestBindingBid.add(potato));\n', '        require(msg.sender != highestBidder);\n', '        require(now > startTime);\n', '        require(blockerPay == false);\n', '        blockerPay = true;\n', '        \n', '        // calculate the user&#39;s total bid based on the current amount they&#39;ve sent to the contract\n', '        // plus whatever has been sent with this transaction\n', '\n', '        fundsByBidder[msg.sender] = fundsByBidder[msg.sender].add(highestBindingBid);\n', '        fundsByBidder[highestBidder] = fundsByBidder[highestBidder].add(potato);\n', '\n', '        highestBidder.transfer(fundsByBidder[highestBidder]);\n', '        fundsByBidder[highestBidder] = 0;\n', '        \n', '        oldHighestBindingBid = highestBindingBid;\n', '        \n', '        // set new highest bidder\n', '        highestBidder = msg.sender;\n', '        highestBindingBid = highestBindingBid.add(potato);\n', '\n', '        oldPotato = potato;\n', '        potato = highestBindingBid.mul(4).div(9);\n', '        \n', '        emit LogBid(msg.sender, highestBidder, oldHighestBindingBid, highestBindingBid);\n', '        \n', '        blockerPay = false;\n', '    }\n', '\n', '\n', '    function cancelAuction() public\n', '        onlyOwner\n', '        onlyBeforeEnd\n', '        onlyNotCanceled\n', '    {\n', '        canceled = true;\n', '        emit LogCanceled();\n', '        \n', '        emit Withdraw(highestBidder, address(this).balance);\n', '        highestBidder.transfer(address(this).balance);\n', '        \n', '    }\n', '\n', '\n', '    function withdraw() public onlyOwner {\n', '        require(now > endTime);\n', '        \n', '        emit Withdraw(msg.sender, address(this).balance);\n', '        msg.sender.transfer(address(this).balance);\n', '    }\n', '\n', '\n', '    function balance() public view returns (uint _balance) {\n', '        return address(this).balance;\n', '    }\n', '\n', '\n', '    modifier onlyAfterStart {\n', '        if (now < startTime) revert();\n', '        _;\n', '    }\n', '\n', '    modifier onlyBeforeEnd {\n', '        if (now > endTime) revert();\n', '        _;\n', '    }\n', '\n', '    modifier onlyNotCanceled {\n', '        if (canceled) revert();\n', '        _;\n', '    }\n', '    \n', '}']
['// loosely based on Bryn Bellomy code\n', '// https://medium.com/@bryn.bellomy/solidity-tutorial-building-a-simple-auction-contract-fcc918b0878a\n', '//\n', '// updated to 0.4.25 standard, replaced blocks with time, converted to hot potato style by Chibi Fighters\n', '// https://chibifighters.io\n', '//\n', '\n', 'pragma solidity ^0.4.25;\n', '\n', '/**\n', '* @title SafeMath\n', '* @dev Math operations with safety checks that throw on error\n', '*/\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, returns 0 if it would go into minus range.\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (b >= a) {\n', '            return 0;\n', '        }\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * @notice Renouncing to ownership will leave the contract without an owner.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', 'contract AuctionPotato is Ownable {\n', '    using SafeMath for uint256; \n', '\n', '    string name;\n', '    uint public startTime;\n', '    uint public endTime;\n', '    uint auctionDuration;\n', '\n', '    // pototo\n', '    uint public potato;\n', '    uint oldPotato;\n', '    uint oldHighestBindingBid;\n', '    \n', '    // state\n', '    bool public canceled;\n', '    uint public highestBindingBid;\n', '    address public highestBidder;\n', '    \n', '    // used to immidiately block placeBids\n', '    bool blockerPay;\n', '    bool blockerWithdraw;\n', '    \n', '    mapping(address => uint256) public fundsByBidder;\n', '    bool ownerHasWithdrawn;\n', '\n', '    // couple events\n', '    event LogBid(address bidder, address highestBidder, uint oldHighestBindingBid, uint highestBindingBid);\n', '    event LogWithdrawal(address withdrawer, address withdrawalAccount, uint amount);\n', '    event LogCanceled();\n', '    event Withdraw(address owner, uint amount);\n', '    \n', '    \n', '    constructor() public {\n', '        \n', '        blockerWithdraw = false;\n', '        blockerPay = false;\n', '        \n', '        // 0.003 ETH\n', '        highestBindingBid = 3000000000000000;\n', '        potato = 0;\n', '        \n', '        // set to 3 hours\n', '        auctionDuration = 3 hours;\n', '\n', '        // 01/06/2019 @ 6:00pm (UTC) 1546797600 Brenna Sparks 3\n', '\n', '        startTime = 1546794000;\n', '        endTime = startTime + auctionDuration;\n', '\n', '        name = "Glen Weyl 3";\n', '\n', '    }\n', '    \n', '    \n', '    function setStartTime(uint _time) onlyOwner public \n', '    {\n', '        require(now < startTime);\n', '        startTime = _time;\n', '        endTime = startTime + auctionDuration;\n', '    }\n', '\n', '\n', '    // calculates the next bid amount to you can have a oneclick buy button\n', '    function nextBid() public view returns (uint _nextBid) {\n', '        return highestBindingBid.add(potato);\n', '    }\n', '    \n', '    \n', '    // calculates the bid after the current bid so nifty hackers can skip the queue\n', '    // this is not in our frontend and no one knows if it actually works\n', '    function nextNextBid() public view returns (uint _nextBid) {\n', '        return highestBindingBid.add(potato).add((highestBindingBid.add(potato)).mul(4).div(9));\n', '    }\n', '    \n', '    \n', '    function queryAuction() public view returns (string, uint, address, uint, uint, uint)\n', '    {\n', '        \n', '        return (name, nextBid(), highestBidder, highestBindingBid, startTime, endTime);\n', '        \n', '    }\n', '\n', '\n', '    function placeBid() public\n', '        payable\n', '        onlyAfterStart\n', '        onlyBeforeEnd\n', '        onlyNotCanceled\n', '    {   \n', '        // we are only allowing to increase in bidIncrements to make for true hot potato style\n', '        require(msg.value == highestBindingBid.add(potato));\n', '        require(msg.sender != highestBidder);\n', '        require(now > startTime);\n', '        require(blockerPay == false);\n', '        blockerPay = true;\n', '        \n', "        // calculate the user's total bid based on the current amount they've sent to the contract\n", '        // plus whatever has been sent with this transaction\n', '\n', '        fundsByBidder[msg.sender] = fundsByBidder[msg.sender].add(highestBindingBid);\n', '        fundsByBidder[highestBidder] = fundsByBidder[highestBidder].add(potato);\n', '\n', '        highestBidder.transfer(fundsByBidder[highestBidder]);\n', '        fundsByBidder[highestBidder] = 0;\n', '        \n', '        oldHighestBindingBid = highestBindingBid;\n', '        \n', '        // set new highest bidder\n', '        highestBidder = msg.sender;\n', '        highestBindingBid = highestBindingBid.add(potato);\n', '\n', '        oldPotato = potato;\n', '        potato = highestBindingBid.mul(4).div(9);\n', '        \n', '        emit LogBid(msg.sender, highestBidder, oldHighestBindingBid, highestBindingBid);\n', '        \n', '        blockerPay = false;\n', '    }\n', '\n', '\n', '    function cancelAuction() public\n', '        onlyOwner\n', '        onlyBeforeEnd\n', '        onlyNotCanceled\n', '    {\n', '        canceled = true;\n', '        emit LogCanceled();\n', '        \n', '        emit Withdraw(highestBidder, address(this).balance);\n', '        highestBidder.transfer(address(this).balance);\n', '        \n', '    }\n', '\n', '\n', '    function withdraw() public onlyOwner {\n', '        require(now > endTime);\n', '        \n', '        emit Withdraw(msg.sender, address(this).balance);\n', '        msg.sender.transfer(address(this).balance);\n', '    }\n', '\n', '\n', '    function balance() public view returns (uint _balance) {\n', '        return address(this).balance;\n', '    }\n', '\n', '\n', '    modifier onlyAfterStart {\n', '        if (now < startTime) revert();\n', '        _;\n', '    }\n', '\n', '    modifier onlyBeforeEnd {\n', '        if (now > endTime) revert();\n', '        _;\n', '    }\n', '\n', '    modifier onlyNotCanceled {\n', '        if (canceled) revert();\n', '        _;\n', '    }\n', '    \n', '}']
