['// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: contracts/promocode/PromoCode.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', 'contract PromoCode is Ownable {\n', '  ERC20 public token;\n', '  mapping(bytes32 => bool) public used;\n', '  uint256 public amount;\n', '\n', '  event Redeem(address user, uint256 amount, string code);\n', '\n', '  constructor(ERC20 _token, uint256 _amount) public {\n', '    amount = _amount;\n', '    token = _token;\n', '  }\n', '\n', '  function setAmount(uint256 _amount) public onlyOwner {\n', '    amount = _amount;\n', '  }\n', '\n', '  function redeem(string promoCode, bytes signature) public {\n', '    bytes32 hash = keccak256(abi.encodePacked(promoCode));\n', '    bytes32 r;\n', '    bytes32 s;\n', '    uint8 v;\n', '    assembly {\n', '      r := mload(add(signature, 32))\n', '      s := mload(add(signature, 64))\n', '      v := and(mload(add(signature, 65)), 255)\n', '    }\n', '    if (v < 27) {\n', '      v += 27;\n', '    }\n', '\n', '    require(!used[hash]);\n', '    used[hash] = true;\n', '    require(verifyString(promoCode, v, r, s) == owner);\n', '    address user = msg.sender;\n', '    require(token.transferFrom(owner, user, amount));\n', '    emit Redeem(user, amount, promoCode);\n', '  }\n', '\n', '  // https://blog.ricmoo.com/verifying-messages-in-solidity-50a94f82b2ca\n', '  // Returns the address that signed a given string message\n', '  function verifyString(string message, uint8 v, bytes32 r, bytes32 s) public pure returns (address signer) {\n', '    // The message header; we will fill in the length next\n', '    string memory header = "\\x19Ethereum Signed Message:\\n000000";\n', '    uint256 lengthOffset;\n', '    uint256 length;\n', '    assembly {\n', '    // The first word of a string is its length\n', '      length := mload(message)\n', '    // The beginning of the base-10 message length in the prefix\n', '      lengthOffset := add(header, 57)\n', '    }\n', '    // Maximum length we support\n', '    require(length <= 999999);\n', "    // The length of the message's length in base-10\n", '    uint256 lengthLength = 0;\n', '    // The divisor to get the next left-most message length digit\n', '    uint256 divisor = 100000;\n', '    // Move one digit of the message length to the right at a time\n', '    while (divisor != 0) {\n', '      // The place value at the divisor\n', '      uint256 digit = length / divisor;\n', '      if (digit == 0) {\n', '        // Skip leading zeros\n', '        if (lengthLength == 0) {\n', '          divisor /= 10;\n', '          continue;\n', '        }\n', '      }\n', '      // Found a non-zero digit or non-leading zero digit\n', '      lengthLength++;\n', "      // Remove this digit from the message length's current value\n", '      length -= digit * divisor;\n', '      // Shift our base-10 divisor over\n', '      divisor /= 10;\n', '\n', '      // Convert the digit to its ASCII representation (man ascii)\n', '      digit += 0x30;\n', '      // Move to the next character and write the digit\n', '      lengthOffset++;\n', '      assembly {\n', '        mstore8(lengthOffset, digit)\n', '      }\n', '    }\n', '    // The null string requires exactly 1 zero (unskip 1 leading 0)\n', '    if (lengthLength == 0) {\n', '      lengthLength = 1 + 0x19 + 1;\n', '    } else {\n', '      lengthLength += 1 + 0x19;\n', '    }\n', '    // Truncate the tailing zeros from the header\n', '    assembly {\n', '      mstore(header, lengthLength)\n', '    }\n', '    // Perform the elliptic curve recover operation\n', '    bytes32 check = keccak256(abi.encodePacked(header, message));\n', '    return ecrecover(check, v, r, s);\n', '  }\n', '}']