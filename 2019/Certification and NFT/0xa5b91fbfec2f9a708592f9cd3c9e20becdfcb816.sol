['pragma solidity ^0.5.6;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply = 99e26;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract VIPToken is ERC20Basic {\n', '  bytes32 public name = "VIP";\n', '  bytes32 public symbol = "VIP";\n', '  uint256 public decimals = 18;\n', '  address private owner = address(0);\n', '  bool private active = false;\n', '\n', '  mapping(address => uint256) private balances;\n', '\n', '  event OwnershipTransferred(address indexed orgOwner, address indexed newOwner);\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '    balances[owner] = totalSupply;\n', '    active = true;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(active);\n', '    require(_to != address(0));\n', '    require(_to != msg.sender);\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    uint256 bal = balances[_to] + _value;\n', '    require(bal >= balances[_to]);\n', '\n', '    balances[msg.sender] = balances[msg.sender] - _value;\n', '    balances[_to] = bal;\n', '\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 bal) {\n', '    require(active);\n', '    return balances[_owner];\n', '  }\n', '\n', '  // Only owner can deactivate\n', '  function deactivate() public onlyOwner {\n', '    active = false;\n', '  }\n', '\n', '  // Only owner can activate\n', '  function activate() public onlyOwner {\n', '    active = true;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  // Only owner can kill\n', '  function kill() public onlyOwner {\n', '    require(!active);\n', '    selfdestruct(msg.sender);\n', '  }\n', '}']