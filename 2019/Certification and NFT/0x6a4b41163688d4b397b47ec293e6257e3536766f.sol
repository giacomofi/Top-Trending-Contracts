['pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Multiplies two unsigned integers, reverts on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two unsigned integers, reverts on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '     * reverts when dividing by zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title BlockportDistributor\n', ' * @dev This contract can be used to distribute ether to multiple addresses\n', ' * at once. \n', ' */\n', 'contract BlockportDistributor {\n', '    using SafeMath for uint256;\n', '\n', '    event Distributed(address payable[] receivers, uint256 amount);\n', '\n', '    /**\n', '     * @dev Constructor\n', '     */\n', '    constructor () public {\n', '    }\n', '\n', '    /**\n', '     * @dev payable fallback\n', '     * dont accept pure ether: revert it.\n', '     */\n', '    function () external payable {\n', '        revert();\n', '    }\n', '\n', '    /**\n', '     * @dev distribute function, note that enough ether must be send (receivers.length * amount)\n', '     * @param receivers Addresses who should all receive amount.\n', '     * @param amount amount to distribute to each address, in wei.\n', '     * @return bool success\n', '     */\n', '    function distribute(address payable[] calldata receivers, uint256 amount) external payable returns (bool success) {\n', '        require(amount.mul(receivers.length) == msg.value);\n', '\n', '        for (uint256 i = 0; i < receivers.length; i++) {\n', '            receivers[i].transfer(amount);\n', '        }\n', '        emit Distributed(receivers, amount);\n', '        return true;\n', '    }\n', '}']