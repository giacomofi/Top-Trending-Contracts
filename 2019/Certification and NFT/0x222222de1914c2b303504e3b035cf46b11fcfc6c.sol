['pragma solidity ^ 0.5.8;\n', ' \n', ' /**\n', ' *  ╔═╗╔═╗╔═══╗╔══╗─╔═══╗╔════╗     ──────╔══╗╔═╗─╔╗\n', ' *  ╚╗╚╝╔╝║╔═╗║║╔╗║─║╔══╝║╔╗╔╗║     ──────╚╣─╝║║╚╗║║\n', ' *  ─╚╗╔╝─╚╝╔╝║║╚╝╚╗║╚══╗╚╝║║╚╝     ╔╗╔╗╔╗─║║─║╔╗╚╝║\n', ' *  ─╔╝╚╗─╔═╝╔╝║╔═╗║║╔══╝──║║──     ║╚╝╚╝║─║║─║║╚╗║║\n', ' *  ╔╝╔╗╚╗║║╚═╗║╚═╝║║╚══╗──║║──     ╚╗╔╗╔╝╔╣─╗║║─║║║\n', ' *  ╚═╝╚═╝╚═══╝╚═══╝╚═══╝──╚╝──     ─╚╝╚╝─╚══╝╚╝─╚═╝\n', ' *\n', ' * \n', ' * The contract of acceptance and withdrawal of funds in the first, fair and open gaming platform https://x2bet.win\n', ' * Buying coins x2bet you agree that you have turned 18 years old and you realize the risk associated with gambling and slot machines\n', ' * For the withdrawal of winnings from the system, a commission of 3% is charged.\n', ' * The creator of the project is not responsible for the player’s financial losses when playing fair slot machines, all actions you do at your own risk.\n', ' * The project team has the right to suspend withdrawal of funds, in case of detection of suspicious actions, until clarification of circumstances.\n', ' */\n', '\n', 'contract X2Bet_win {\n', '    \n', '    using SafeMath\n', '    for uint;\n', '    \n', '    address public owner;\n', '    mapping(address => uint) public deposit;\n', '    mapping(address => uint) public withdrawal;\n', '    bool public status = true;\n', '    uint public min_payment = 0.05 ether;\n', '    uint public systemPercent = 0;\n', '    \n', '    constructor()public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    event ByCoin(\n', '        address indexed from,\n', '        uint indexed block,\n', '        uint value,\n', '        uint user_id,\n', '        uint time\n', '    );\n', '    \n', '    event ReturnRoyalty(\n', '        address indexed from,\n', '        uint indexed block,\n', '        uint value, \n', '        uint withdrawal_id,\n', '        uint time\n', '    );\n', '    \n', '    modifier isNotContract(){\n', '        uint size;\n', '        address addr = msg.sender;\n', '        assembly { size := extcodesize(addr) }\n', '        require(size == 0 && tx.origin == msg.sender);\n', '        _;\n', '    }\n', '    \n', '    modifier contractIsOn(){\n', '        require(status);\n', '        _;\n', '    }\n', '    \n', '    modifier minPayment(){\n', '        require(msg.value >= min_payment);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    //Coin purchase method x2Bet.win\n', '    function byCoin(uint _user_id)contractIsOn isNotContract minPayment public payable{\n', '        deposit[msg.sender]+= msg.value;\n', '        emit ByCoin(msg.sender, block.number, msg.value, _user_id, now);\n', '        \n', '    }\n', '    \n', '    //Automatic withdrawal of winnings x2Bet.win\n', '    function pay_royaltie(address payable[] memory dests, uint256[] memory values, uint256[] memory ident) onlyOwner contractIsOn public returns(uint){\n', '        uint256 i = 0;\n', '        while (i < dests.length) {\n', '            uint transfer_value = values[i].sub(values[i].mul(3).div(100));\n', '            dests[i].transfer(transfer_value);\n', '            withdrawal[dests[i]]+=values[i];\n', '            emit ReturnRoyalty(dests[i], block.number, values[i], ident[i], now);\n', '            systemPercent += values[i].mul(3).div(100);\n', '            i += 1;\n', '        }\n', '        \n', '        return(i);\n', '    }\n', '    \n', '    function startProphylaxy()onlyOwner public {\n', '        status = false;\n', '    }\n', '    \n', '    function stopProphylaxy()onlyOwner public {\n', '        status = true;\n', '    }\n', '    \n', '    function() external payable {\n', '        \n', '    }\n', '    \n', '}\n', '\n', 'library SafeMath {\n', '\n', '    /**\n', '     * @dev Multiplies two numbers, reverts on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '}']