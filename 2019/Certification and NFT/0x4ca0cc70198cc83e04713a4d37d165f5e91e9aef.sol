['pragma solidity 0.5.5;\n', '/**\n', ' * @title OMNIS-BIT ICO CONTRACT\n', ' * @dev ERC-20 Token Standard Compliant\n', ' * Official OMNIS-BIT SmartContract\n', ' * website: www.cryptohunters.club\n', ' */\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns(uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '\n', '    function sub(uint a, uint b) internal pure returns(uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '\n', '    function mul(uint a, uint b) internal pure returns(uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '\n', '    function div(uint a, uint b) internal pure returns(uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token Standard Interface\n', '// ----------------------------------------------------------------------------\n', 'interface ERC20Interface {\n', '    function totalSupply() external returns(uint);\n', '\n', '    function balanceOf(address tokenOwner) external returns(uint balance);\n', '\n', '    function allowance(address tokenOwner, address spender) external returns(uint remaining);\n', '\n', '    function transfer(address to, uint tokens) external returns(bool success);\n', '\n', '    function approve(address spender, uint tokens) external returns(bool success);\n', '\n', '    function transferFrom(address from, address to, uint tokens) external returns(bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// DateTime API Interface\n', '// ----------------------------------------------------------------------------\n', 'interface DateTimeAPI {\n', '\n', '    function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute) external returns(uint timestamp);\n', '\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Main Contract definition\n', '// ----------------------------------------------------------------------------\n', 'contract ICO {\n', '\n', '// ----------------------------------------------------------------------------\n', '// DateTime API Contract Addresses for each network\n', '// ----------------------------------------------------------------------------\n', '    DateTimeAPI dateTimeContract = DateTimeAPI(0x1a6184CD4C5Bea62B0116de7962EE7315B7bcBce);//Main\n', '    //DateTimeAPI dateTimeContract = DateTimeAPI(0x71b6e049E78c75fC61480357CD5aA1B81E1b16E0);//Kovan\n', '    //DateTimeAPI dateTimeContract = DateTimeAPI(0x670b2B167e13b131C491D87bA745dA41f07ecbc3);//Rinkeby\n', '    //DateTimeAPI dateTimeContract = DateTimeAPI(0x1F0a2ba4B115bd3e4007533C52BBd30C17E8B222); //Ropsten\n', '\n', '    using SafeMath\n', '    for uint256;\n', '\n', '    enum State {\n', '        //This ico have these states\n', '        preSale,\n', '        ICO,\n', '        finishing,\n', '        extended,\n', '        successful\n', '    }\n', '\n', '    //public variables\n', '\n', '    //state related\n', '    State public state = State.preSale; //Set initial stage\n', '    \n', '\n', '    //time related\n', '    uint256 public startTime = dateTimeContract.toTimestamp(2019, 3, 20, 0, 0);\n', '    uint256 public ICOdeadline = dateTimeContract.toTimestamp(2019, 6, 5, 23, 59);\n', '    uint256 public completedAt;\n', '\n', '    //token related\n', '    ERC20Interface public tokenReward;\n', '    uint256 public presaleLimit = 200000000 * 10 ** 18; //200.000.000 Tokens\n', '    uint256 public ICOLimit = 360000000 * 10 ** 18; //360.000.000 Tokens\n', '\n', '    //funding related\n', '    uint256 public totalRaised; //eth in wei\n', '    uint256 public totalDistributed; //tokens distributed\n', '    uint256 public totalReferral; //total tokens for referrals\n', '    mapping(address => uint256) public referralBalance; //referral ledger\n', '    uint256[7] public rates = [1000, 800, 750, 700, 650, 600, 500];\n', '    \n', '    //info\n', '    address public creator;\n', '    address payable public beneficiary;\n', "    string public version = '0.3';\n", '\n', '    //events for log\n', '    event LogFundingReceived(address _addr, uint _amount, uint _currentTotal);\n', '    event LogBeneficiaryPaid(address _beneficiaryAddress);\n', '    event LogFundingSuccessful(uint _totalRaised);\n', '    event LogFunderInitialized(\n', '        address _creator,\n', '        uint256 _ICOdeadline);\n', '    event LogContributorsPayout(address _addr, uint _amount);\n', '    event LogStateCheck(State current);\n', '\n', '    modifier notFinished() {\n', '        require(state != State.successful);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @notice ICO constructor\n', '     * @param _addressOfTokenUsedAsReward is the token to distributed\n', '     * @param _beneficiary is the address that will receive funds collected\n', '     */\n', '    constructor(ERC20Interface _addressOfTokenUsedAsReward, address payable _beneficiary) public {\n', '\n', '        creator = msg.sender;\n', '        tokenReward = _addressOfTokenUsedAsReward;\n', '        beneficiary = _beneficiary;\n', '\n', '        emit LogFunderInitialized(\n', '            creator,\n', '            ICOdeadline);\n', '\n', '    }\n', '\n', '    /**\n', '     * @notice contribution handler\n', '     * @param referralAddress is the address of the referral for this purchase\n', '     */\n', '    function contribute(address referralAddress) public notFinished payable {\n', '\n', '        //require that the ico start date is reached\n', '        require(now >= startTime,"Too early for the sale begin");\n', '\n', '        uint256 tokenBought = 0;\n', '\n', '        totalRaised = totalRaised.add(msg.value); //Track funds received\n', '\n', '        //Rate of exchange depends on stage\n', '        if (state == State.preSale) {\n', '\n', '            if (now <= dateTimeContract.toTimestamp(2019, 3, 22, 23, 59)) { //>start date <22/3/2019 23:59 GMT\n', '\n', '                tokenBought = msg.value.mul(rates[0]);\n', '\n', '            } else if (now <= dateTimeContract.toTimestamp(2019, 3, 28, 23, 59)) { //>22/3/2019 23:59 GMT <28/3/2019 23:59 GMT\n', '\n', '                tokenBought = msg.value.mul(rates[1]);\n', '\n', '            } else { //>28/3/2019 23:59 GMT <11/4/2019 23:59 GMT\n', '\n', '                tokenBought = msg.value.mul(rates[2]);\n', '\n', '            }\n', '\n', '        } else if (state == State.ICO) {\n', '\n', '            //require ico stage has begin\n', '            require(now > dateTimeContract.toTimestamp(2019, 4, 20, 0, 0),"Too early for the ICO begin"); \n', '\n', '            if (now <= dateTimeContract.toTimestamp(2019, 4, 22, 23, 59)) { //>20/4/2019 00:00 GMT <22/4/2019 23:59 GMT\n', '\n', '                tokenBought = msg.value.mul(rates[3]);\n', '\n', '            } else if (now <= dateTimeContract.toTimestamp(2019, 4, 28, 23, 59)) { //>22/4/2019 23:59 GMT <28/4/2019 23:59 GMT\n', '\n', '                tokenBought = msg.value.mul(rates[4]);\n', '\n', '            } else if (now <= dateTimeContract.toTimestamp(2019, 5, 4, 23, 59)) { //>28/4/2019 23:59 GMT <5/5/2019 23:59 GMT\n', '\n', '                tokenBought = msg.value.mul(rates[5]);\n', '\n', '            } else { //>5/5/2019 23:59 GMT <5/6/2019 23:59 GMT\n', '\n', '                tokenBought = msg.value.mul(rates[6]);\n', '\n', '            }\n', '\n', '        } else if (state == State.finishing) { //Poll being made\n', '\n', '            revert("Purchases disabled while extension Poll");\n', '\n', '        } else { //extension approved, 30 more days from approval\n', '\n', '            tokenBought = msg.value.mul(rates[6]);\n', '\n', '        }\n', '\n', '        //+10% Bonus for high contributor\n', '        if (msg.value >= 100 ether) {\n', '            tokenBought = tokenBought.mul(11);\n', '            tokenBought = tokenBought.div(10);\n', '        }\n', '\n', '        //3% for referral\n', '        //Can be claimed at the end of ICO\n', '        if (referralAddress != address(0) && referralAddress != msg.sender) {\n', '            uint256 bounty = tokenBought.mul(3);\n', '            bounty = bounty.div(100);\n', '            totalReferral = totalReferral.add(bounty);\n', '            referralBalance[referralAddress] = referralBalance[referralAddress].add(bounty);\n', '        }\n', '\n', '        if (state == State.preSale) {\n', '\n', '            require(totalDistributed.add(tokenBought.add(totalReferral)) <= presaleLimit, "Presale Limit exceded");\n', '\n', '        } else {\n', '\n', '            require(totalDistributed.add(tokenBought.add(totalReferral)) <= ICOLimit, "ICO Limit exceded");\n', '\n', '        }\n', '\n', '        //Automatic retrieve only after a trust threshold\n', '        if (totalRaised >= 4000 ether) {\n', '\n', '            beneficiary.transfer(address(this).balance);\n', '\n', '            emit LogBeneficiaryPaid(beneficiary);\n', '        }\n', '\n', '        totalDistributed = totalDistributed.add(tokenBought); //update total token distribution\n', '\n', '        require(tokenReward.transfer(msg.sender, tokenBought), "Transfer could not be made");\n', '\n', '        emit LogFundingReceived(msg.sender, msg.value, totalRaised);\n', '        emit LogContributorsPayout(msg.sender, tokenBought);\n', '\n', '        checkIfFundingCompleteOrExpired();\n', '    }\n', '\n', '    /**\n', '     * @notice check status\n', '     */\n', '    function checkIfFundingCompleteOrExpired() public {\n', '\n', '        //If we reach presale time limit 11/4/2019 23:59 GMT\n', '        if (state == State.preSale && now > dateTimeContract.toTimestamp(2019, 4, 11, 23, 59)) {\n', '\n', '            //change state to ICO\n', '            state = State.ICO;\n', '\n', '        } else if (state == State.ICO && now > ICOdeadline) { //If we reach the ICO deadline\n', '\n', '            //change state to finishing for extension poll\n', '            state = State.finishing;\n', '\n', '        } else if (state == State.extended && now > ICOdeadline) { //If it was extended, check until extension expires\n', '\n', '            state = State.successful; //ico becomes Successful\n', '            completedAt = now; //ICO is complete\n', '\n', '            emit LogFundingSuccessful(totalRaised); //we log the finish\n', '            finished(); //and execute closure\n', '\n', '        }\n', '\n', '        emit LogStateCheck(state);\n', '\n', '    }\n', '\n', '    /**\n', '     * @notice closure handler\n', '     */\n', '    function finished() public { //When finished, eth are transfered to beneficiary\n', '\n', '        //Only on sucess\n', '        require(state == State.successful, "Wrong Stage");\n', '\n', '        beneficiary.transfer(address(this).balance);\n', '\n', '        emit LogBeneficiaryPaid(beneficiary);\n', '\n', '    }\n', '\n', '    /**\n', '     * @notice referral bounty claim\n', '     */\n', '    function claimReferral() public {\n', '\n', '        //Only on sucess\n', '        require(state == State.successful, "Wrong Stage");\n', '\n', '        uint256 bounty = referralBalance[msg.sender]; //check, get balance\n', '        referralBalance[msg.sender] = 0; //effect, clear balance\n', '\n', '        //interact\n', '        require(tokenReward.transfer(msg.sender, bounty), "Transfer could not be made");\n', '\n', '        //log\n', '        emit LogContributorsPayout(msg.sender, bounty);\n', '    }\n', '\n', '    /**\n', '     * @notice remaining tokens retrieve\n', '     */\n', '    function retrieveTokens() public {\n', '\n', '        //Only creator\n', '        require(msg.sender == creator,"You are not the creator");\n', '        //Only on success\n', '        require(state == State.successful, "Wrong Stage");\n', '        //Only after 30 days claim period for referrals\n', '        require(now >= completedAt.add(30 days), "Too early to retrieve");\n', '\n', '        uint256 remanent = tokenReward.balanceOf(address(this));\n', '\n', '        require(tokenReward.transfer(beneficiary, remanent), "Transfer could not be made");\n', '    }\n', '\n', '    /**\n', '     * @notice extension poll result handler\n', '     * @param pollResult a boolean value of approved(true) or denied(false)\n', '     */\n', '    function extension(bool pollResult) public {\n', '\n', '        //Only creator\n', '        require(msg.sender == creator,"You are not the creator");\n', '        //Only on poll stage\n', '        require(state == State.finishing, "Wrong Stage");\n', '\n', '        //poll results\n', '        if (pollResult == true) { //Approved\n', '            //extended stage\n', '            state = State.extended;\n', '            //extension is 30Days\n', '            ICOdeadline = now.add(30 days);\n', '        } else { //Denied\n', '            //ico becomes Successful\n', '            state = State.successful;\n', '            //ICO is complete, stamp it\n', '            completedAt = now;\n', '\n', '            emit LogFundingSuccessful(totalRaised); //we log the finish\n', '            finished(); //and execute closure\n', '\n', '        }\n', '    }\n', '\n', '    /*\n', '     * @notice direct payments handler\n', '     */\n', '    function() external payable {\n', '\n', '        contribute(address(0)); //no referral\n', '\n', '    }\n', '}']