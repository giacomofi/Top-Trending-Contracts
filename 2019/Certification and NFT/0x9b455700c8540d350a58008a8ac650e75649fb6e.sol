['pragma solidity ^0.5.2;\n', '\n', '// File: @gnosis.pm/dx-contracts/contracts/base/AuctioneerManaged.sol\n', '\n', 'contract AuctioneerManaged {\n', '    // auctioneer has the power to manage some variables\n', '    address public auctioneer;\n', '\n', '    function updateAuctioneer(address _auctioneer) public onlyAuctioneer {\n', '        require(_auctioneer != address(0), "The auctioneer must be a valid address");\n', '        auctioneer = _auctioneer;\n', '    }\n', '\n', '    // > Modifiers\n', '    modifier onlyAuctioneer() {\n', '        // Only allows auctioneer to proceed\n', '        // R1\n', '        // require(msg.sender == auctioneer, "Only auctioneer can perform this operation");\n', '        require(msg.sender == auctioneer, "Only the auctioneer can nominate a new one");\n', '        _;\n', '    }\n', '}\n', '\n', '// File: @gnosis.pm/dx-contracts/contracts/base/TokenWhitelist.sol\n', '\n', 'contract TokenWhitelist is AuctioneerManaged {\n', '    // Mapping that stores the tokens, which are approved\n', '    // Only tokens approved by auctioneer generate frtToken tokens\n', '    // addressToken => boolApproved\n', '    mapping(address => bool) public approvedTokens;\n', '\n', '    event Approval(address indexed token, bool approved);\n', '\n', '    /// @dev for quick overview of approved Tokens\n', '    /// @param addressesToCheck are the ERC-20 token addresses to be checked whether they are approved\n', '    function getApprovedAddressesOfList(address[] calldata addressesToCheck) external view returns (bool[] memory) {\n', '        uint length = addressesToCheck.length;\n', '\n', '        bool[] memory isApproved = new bool[](length);\n', '\n', '        for (uint i = 0; i < length; i++) {\n', '            isApproved[i] = approvedTokens[addressesToCheck[i]];\n', '        }\n', '\n', '        return isApproved;\n', '    }\n', '    \n', '    function updateApprovalOfToken(address[] memory token, bool approved) public onlyAuctioneer {\n', '        for (uint i = 0; i < token.length; i++) {\n', '            approvedTokens[token[i]] = approved;\n', '            emit Approval(token[i], approved);\n', '        }\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/whitelisting/BasicTokenWhitelist.sol\n', '\n', 'contract BasicTokenWhitelist is TokenWhitelist {\n', '    constructor() public {\n', '        auctioneer = msg.sender;\n', '    }\n', '}']