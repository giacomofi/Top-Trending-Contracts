['pragma solidity ^0.4.24;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', 'contract Arbitration {\n', '    function requestArbitration(\n', '        bytes32 id,\n', '        uint256 tokens,\n', '        address supplier,\n', '        address purchaser\n', '    )\n', '        external;\n', '}\n', '\n', 'contract Payments is Ownable {\n', '    struct Details {\n', '        bool active;\n', '        address supplier;\n', '        uint64 cancelDeadline;\n', '        address purchaser;\n', '        uint64 disputeDeadline;\n', '        uint256 price;\n', '        uint256 deposit;\n', '        uint256 cancellationFee;\n', '    }\n', '\n', '    event Invoice (\n', '        bytes32 id,\n', '        address supplier,\n', '        address purchaser,\n', '        uint256 price,\n', '        uint256 deposit,\n', '        uint256 cancellationFee,\n', '        uint64 cancelDeadline,\n', '        uint64 disputeDeadline\n', '    );\n', '    event Payout (\n', '        bytes32 id,\n', '        address supplier,\n', '        address purchaser,\n', '        uint256 price,\n', '        uint256 deposit\n', '    );\n', '    event Cancel (\n', '        bytes32 id,\n', '        address supplier,\n', '        address purchaser,\n', '        uint256 price,\n', '        uint256 deposit,\n', '        uint256 cancellationFee\n', '    );\n', '    event Refund (\n', '        bytes32 id,\n', '        address supplier,\n', '        address purchaser,\n', '        uint256 price,\n', '        uint256 deposit\n', '    );\n', '    event Dispute (\n', '        bytes32 id,\n', '        address arbitration,\n', '        address disputant,\n', '        address supplier,\n', '        address purchaser,\n', '        uint256 price,\n', '        uint256 deposit\n', '    );\n', '\n', '    modifier onlyPurchaser(bytes32 id) {\n', '        require(msg.sender == details[id].purchaser, "Purchaser only.");\n', '        _;\n', '    }\n', '\n', '    modifier onlySupplier(bytes32 id) {\n', '        require(msg.sender == details[id].supplier, "Supplier only.");\n', '        _;        \n', '    }\n', '\n', '    modifier onlyOwnerOrSupplier(bytes32 id) {\n', '        require(\n', '            msg.sender == owner ||\n', '            msg.sender == details[id].supplier,\n', '            "Owner or supplier only."\n', '        );\n', '        _;\n', '    }\n', '\n', '    modifier onlyParticipant(bytes32 id) {\n', '        require(\n', '            msg.sender == details[id].supplier ||\n', '            msg.sender == details[id].purchaser,\n', '            "Participant only."\n', '        );\n', '        _;\n', '    }\n', '\n', '    modifier deactivates(bytes32 id) {\n', '        require(details[id].active, "Unknown id.");\n', '        details[id].active = false;\n', '        _;\n', '    }\n', '\n', '    modifier invoices(bytes32 id) {\n', '        require(details[id].supplier == 0x0, "Given id already exists.");\n', '        _;\n', '        emit Invoice(\n', '            id,\n', '            details[id].supplier,\n', '            details[id].purchaser,\n', '            details[id].price,\n', '            details[id].deposit,\n', '            details[id].cancellationFee,\n', '            details[id].cancelDeadline,\n', '            details[id].disputeDeadline\n', '        );\n', '    }\n', '\n', '    modifier pays(bytes32 id) {\n', '        /* solium-disable-next-line security/no-block-members */\n', '        require(now > details[id].disputeDeadline, "Dispute deadline not met.");\n', '        _;\n', '        emit Payout(\n', '            id,\n', '            details[id].supplier,\n', '            details[id].purchaser,\n', '            details[id].price,\n', '            details[id].deposit\n', '        );\n', '    }\n', '\n', '    modifier cancels(bytes32 id) {\n', '        /* solium-disable-next-line security/no-block-members */\n', '        require(now < details[id].cancelDeadline, "Cancel deadline passed.");\n', '        _;\n', '        emit Cancel(\n', '            id,\n', '            details[id].supplier,\n', '            details[id].purchaser,\n', '            details[id].price,\n', '            details[id].deposit,\n', '            details[id].cancellationFee\n', '        );\n', '    }\n', '\n', '    modifier refunds(bytes32 id) {\n', '        _;\n', '        emit Refund(\n', '            id,\n', '            details[id].supplier,\n', '            details[id].purchaser,\n', '            details[id].price,\n', '            details[id].deposit\n', '        );\n', '    }\n', '\n', '    modifier disputes(bytes32 id) {\n', '        /* solium-disable-next-line security/no-block-members */\n', '        require(now < details[id].disputeDeadline, "Dispute deadline passed.");\n', '        _;\n', '        emit Dispute(\n', '            id,\n', '            arbitration,\n', '            msg.sender,\n', '            details[id].supplier,\n', '            details[id].purchaser,\n', '            details[id].price,\n', '            details[id].deposit\n', '        );\n', '    }\n', '\n', '    mapping(bytes32 => Details) public details;\n', '    Arbitration public arbitration;\n', '}\n', '\n', 'contract TokenPayments is Payments {\n', '    using SafeMath for uint256;\n', '\n', '    ERC20 public token;\n', '    uint64 public cancelPeriod;\n', '    uint64 public disputePeriod;\n', '\n', '    constructor(\n', '        address _token,\n', '        address _arbitration,\n', '        uint64 _cancelPeriod,\n', '        uint64 _disputePeriod\n', '    )\n', '        public\n', '    {\n', '        token = ERC20(_token);\n', '        arbitration = Arbitration(_arbitration);\n', '        cancelPeriod = _cancelPeriod;\n', '        disputePeriod = _disputePeriod;\n', '    }\n', '\n', '    function invoice(\n', '        bytes32 id,\n', '        address supplier,\n', '        address purchaser,\n', '        uint256 price,\n', '        uint256 deposit,\n', '        uint256 cancellationFee,\n', '        uint64 cancelDeadline,\n', '        uint64 disputeDeadline\n', '    )\n', '        external\n', '        invoices(id)\n', '    {\n', '        require(\n', '            supplier != address(0x0),\n', '            "Must provide a valid supplier address."\n', '        );\n', '        require(\n', '            purchaser != address(0x0),\n', '            "Must provide a valid purchaser address."\n', '        );\n', '        require(\n', '            /* solium-disable-next-line security/no-block-members */\n', '            cancelDeadline > now.add(cancelPeriod),\n', '            "Cancel deadline too soon."\n', '        );\n', '        require(\n', '            disputeDeadline > uint256(cancelDeadline).add(disputePeriod),\n', '            "Dispute deadline too soon."\n', '        );\n', '        require(\n', '            price.add(deposit) >= cancellationFee,\n', '            "Cancellation fee exceeds total."\n', '        );\n', '        details[id] = Details({\n', '            active: true,\n', '            supplier: supplier,\n', '            cancelDeadline: cancelDeadline,\n', '            purchaser: purchaser,\n', '            disputeDeadline: disputeDeadline,\n', '            price: price,\n', '            deposit: deposit,\n', '            cancellationFee: cancellationFee\n', '        });\n', '        uint256 expectedBalance = getTotal(id)\n', '            .add(token.balanceOf(address(this)));\n', '        require(\n', '            token.transferFrom(purchaser, address(this), getTotal(id)),\n', '            "Transfer failed during invoice."\n', '        );\n', '        require(\n', '            token.balanceOf(address(this)) == expectedBalance,\n', '            "Transfer appears incomplete during invoice."\n', '        );\n', '    }\n', '\n', '    function cancel(bytes32 id) \n', '        external\n', '        onlyPurchaser(id)\n', '        deactivates(id)\n', '        cancels(id)\n', '    {\n', '        uint256 fee = details[id].cancellationFee;\n', '        uint256 refund = getTotal(id).sub(fee);\n', '        transfer(details[id].purchaser, refund);\n', '        transfer(details[id].supplier, fee);\n', '    }\n', '\n', '    function payout(bytes32 id)\n', '        external\n', '        onlySupplier(id)\n', '        deactivates(id)\n', '        pays(id)\n', '    {\n', '        transfer(details[id].supplier, details[id].price);\n', '        transfer(details[id].purchaser, details[id].deposit);\n', '    }\n', '\n', '    function refund(bytes32 id)\n', '        external\n', '        onlyOwnerOrSupplier(id)\n', '        deactivates(id)\n', '        refunds(id)\n', '    {\n', '        transfer(details[id].purchaser, getTotal(id));\n', '    }\n', '\n', '    function dispute(bytes32 id)\n', '        external\n', '        onlyParticipant(id)\n', '        deactivates(id)\n', '        disputes(id)\n', '    {\n', '        require(\n', '            token.approve(arbitration, getTotal(id)),\n', '            "Approval for transfer failed during dispute."\n', '        );\n', '        arbitration.requestArbitration(\n', '            id,\n', '            getTotal(id),\n', '            details[id].supplier,\n', '            details[id].purchaser\n', '        );\n', '    }\n', '\n', '    function getTotal(bytes32 id) private view returns (uint256) {\n', '        return details[id].price.add(details[id].deposit);\n', '    }\n', '\n', '    function transfer(address to, uint256 amount) internal {\n', '        uint256 expectedBalance = token.balanceOf(address(this)).sub(amount);\n', '        uint256 expectedRecipientBalance = token.balanceOf(to).add(amount);\n', '        require(token.transfer(to, amount), "Transfer failed.");\n', '        require(\n', '            token.balanceOf(address(this)) == expectedBalance,\n', '            "Post-transfer validation of contract funds failed."\n', '        );\n', '        require(\n', '            token.balanceOf(to) == expectedRecipientBalance,\n', '            "Post-transfer validation of recipient funds failed."\n', '        );\n', '    }\n', '}']