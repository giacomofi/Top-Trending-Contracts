['/* ==================================================================== */\n', '/* Copyright (c) 2018 The CryptoRacing Project.  All rights reserved.\n', '/* \n', '/*   The first idle car race game of blockchain                 \n', '/* ==================================================================== */\n', 'pragma solidity ^0.4.20;\n', '\n', '/// @title ERC-165 Standard Interface Detection\n', '/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n', 'interface ERC165 {\n', '    function supportsInterface(bytes4 interfaceID) external view returns (bool);\n', '}\n', '\n', '/// @title ERC-721 Non-Fungible Token Standard\n', '/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', 'contract ERC721 is ERC165 {\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n', '    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n', '    function balanceOf(address _owner) external view returns (uint256);\n', '    function ownerOf(uint256 _tokenId) external view returns (address);\n', '    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external;\n', '    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\n', '    function transferFrom(address _from, address _to, uint256 _tokenId) external;\n', '    function approve(address _approved, uint256 _tokenId) external;\n', '    function setApprovalForAll(address _operator, bool _approved) external;\n', '    function getApproved(uint256 _tokenId) external view returns (address);\n', '    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n', '}\n', '\n', '/// @title ERC-721 Non-Fungible Token Standard\n', 'interface ERC721TokenReceiver {\n', '\tfunction onERC721Received(address _from, uint256 _tokenId, bytes data) external returns(bytes4);\n', '}\n', '\n', 'contract AccessAdmin {\n', '    bool public isPaused = false;\n', '    address public addrAdmin;  \n', '\n', '    event AdminTransferred(address indexed preAdmin, address indexed newAdmin);\n', '\n', '    function AccessAdmin() public {\n', '        addrAdmin = msg.sender;\n', '    }  \n', '\n', '\n', '    modifier onlyAdmin() {\n', '        require(msg.sender == addrAdmin);\n', '        _;\n', '    }\n', '\n', '    modifier whenNotPaused() {\n', '        require(!isPaused);\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused {\n', '        require(isPaused);\n', '        _;\n', '    }\n', '\n', '    function setAdmin(address _newAdmin) external onlyAdmin {\n', '        require(_newAdmin != address(0));\n', '        AdminTransferred(addrAdmin, _newAdmin);\n', '        addrAdmin = _newAdmin;\n', '    }\n', '\n', '    function doPause() external onlyAdmin whenNotPaused {\n', '        isPaused = true;\n', '    }\n', '\n', '    function doUnpause() external onlyAdmin whenPaused {\n', '        isPaused = false;\n', '    }\n', '}\n', '\n', '\n', 'contract AccessService is AccessAdmin {\n', '    address public addrService;\n', '    address public addrFinance;\n', '\n', '    modifier onlyService() {\n', '        require(msg.sender == addrService);\n', '        _;\n', '    }\n', '\n', '    modifier onlyFinance() {\n', '        require(msg.sender == addrFinance);\n', '        _;\n', '    }\n', '\n', '    function setService(address _newService) external {\n', '        require(msg.sender == addrService || msg.sender == addrAdmin);\n', '        require(_newService != address(0));\n', '        addrService = _newService;\n', '    }\n', '\n', '    function setFinance(address _newFinance) external {\n', '        require(msg.sender == addrFinance || msg.sender == addrAdmin);\n', '        require(_newFinance != address(0));\n', '        addrFinance = _newFinance;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/* ==================================================================== */\n', '/* equipmentId \n', '/* 10001\tT1\n', '/* 10002\tT2\n', '/* 10003\tT3\n', '/* 10004\tT4\n', '/* 10005\tT5\n', '/* 10006\tT6 \n', '/* 10007\tfreeCar          \n', '/* ==================================================================== */\n', '\n', 'contract RaceToken is ERC721, AccessAdmin {\n', '    /// @dev The equipment info\n', '    struct Fashion {\n', '        uint16 equipmentId;             // 0  Equipment ID\n', '        uint16 quality;     \t        // 1  Rarity: 1 Coarse/2 Good/3 Rare/4 Epic/5 Legendary\n', '        uint16 pos;         \t        // 2  Slots: 1 Engine/2 Turbine/3 BodySystem/4 Pipe/5 Suspension/6 NO2/7 Tyre/8 Transmission/9 Car\n', '        uint16 production;    \t        // 3  Race bonus productivity\n', '        uint16 attack;\t                // 4  Attack\n', '        uint16 defense;                 // 5  Defense\n', '        uint16 plunder;     \t        // 6  Plunder\n', '        uint16 productionMultiplier;    // 7  Percent value\n', '        uint16 attackMultiplier;     \t// 8  Percent value\n', '        uint16 defenseMultiplier;     \t// 9  Percent value\n', '        uint16 plunderMultiplier;     \t// 10 Percent value\n', '        uint16 level;       \t        // 11 level\n', '        uint16 isPercent;   \t        // 12  Percent value\n', '    }\n', '\n', '    /// @dev All equipments tokenArray (not exceeding 2^32-1)\n', '    Fashion[] public fashionArray;\n', '\n', '    /// @dev Amount of tokens destroyed\n', '    uint256 destroyFashionCount;\n', '\n', '    /// @dev Equipment token ID belong to owner address\n', '    mapping (uint256 => address) fashionIdToOwner;\n', '\n', '    /// @dev Equipments owner by the owner (array)\n', '    mapping (address => uint256[]) ownerToFashionArray;\n', '\n', '    /// @dev Equipment token ID search in owner array\n', '    mapping (uint256 => uint256) fashionIdToOwnerIndex;\n', '\n', '    /// @dev The authorized address for each Race\n', '    mapping (uint256 => address) fashionIdToApprovals;\n', '\n', '    /// @dev The authorized operators for each address\n', '    mapping (address => mapping (address => bool)) operatorToApprovals;\n', '\n', '    /// @dev Trust contract\n', '    mapping (address => bool) actionContracts;\n', '\n', '\t//设置可调用当前合约的其他合约\n', '    function setActionContract(address _actionAddr, bool _useful) external onlyAdmin {\n', '        actionContracts[_actionAddr] = _useful;\n', '    }\n', '\n', '    function getActionContract(address _actionAddr) external view onlyAdmin returns(bool) {\n', '        return actionContracts[_actionAddr];\n', '    }\n', '\n', '    /// @dev This emits when the approved address for an Race is changed or reaffirmed.\n', '    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '\n', '    /// @dev This emits when an operator is enabled or disabled for an owner.\n', '    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n', '\n', '    /// @dev This emits when the equipment ownership changed \n', '    event Transfer(address indexed from, address indexed to, uint256 tokenId);\n', '\n', '    /// @dev This emits when the equipment created\n', '    event CreateFashion(address indexed owner, uint256 tokenId, uint16 equipmentId, uint16 quality, uint16 pos, uint16 level, uint16 createType);\n', '\n', "    /// @dev This emits when the equipment's attributes changed\n", '    event ChangeFashion(address indexed owner, uint256 tokenId, uint16 changeType);\n', '\n', '    /// @dev This emits when the equipment destroyed\n', '    event DeleteFashion(address indexed owner, uint256 tokenId, uint16 deleteType);\n', '    \n', '    function RaceToken() public {\n', '        addrAdmin = msg.sender;\n', '        fashionArray.length += 1;\n', '    }\n', '\n', '    // modifier\n', '    /// @dev Check if token ID is valid\n', '    modifier isValidToken(uint256 _tokenId) {\n', '        require(_tokenId >= 1 && _tokenId <= fashionArray.length);\n', '        require(fashionIdToOwner[_tokenId] != address(0)); \n', '        _;\n', '    }\n', '\n', '    modifier canTransfer(uint256 _tokenId) {\n', '        address owner = fashionIdToOwner[_tokenId];\n', '        require(msg.sender == owner || msg.sender == fashionIdToApprovals[_tokenId] || operatorToApprovals[owner][msg.sender]);\n', '        _;\n', '    }\n', '\n', '    // ERC721\n', '    function supportsInterface(bytes4 _interfaceId) external view returns(bool) {\n', '        // ERC165 || ERC721 || ERC165^ERC721\n', '        return (_interfaceId == 0x01ffc9a7 || _interfaceId == 0x80ac58cd || _interfaceId == 0x8153916a) && (_interfaceId != 0xffffffff);\n', '    }\n', '        \n', '    function name() public pure returns(string) {\n', '        return "Race Token";\n', '    }\n', '\n', '    function symbol() public pure returns(string) {\n', '        return "Race";\n', '    }\n', '\n', '    /// @dev Search for token quantity address\n', '    /// @param _owner Address that needs to be searched\n', '    /// @return Returns token quantity\n', '    function balanceOf(address _owner) external view returns(uint256) {\n', '        require(_owner != address(0));\n', '        return ownerToFashionArray[_owner].length;\n', '    }\n', '\n', '    /// @dev Find the owner of an Race\n', '    /// @param _tokenId The tokenId of Race\n', '    /// @return Give The address of the owner of this Race\n', '    function ownerOf(uint256 _tokenId) external view /*isValidToken(_tokenId)*/ returns (address owner) {\n', '        return fashionIdToOwner[_tokenId];\n', '    }\n', '\n', '    /// @dev Transfers the ownership of an Race from one address to another address\n', '    /// @param _from The current owner of the Race\n', '    /// @param _to The new owner\n', '    /// @param _tokenId The Race to transfer\n', '    /// @param data Additional data with no specified format, sent in call to `_to`\n', '    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) \n', '        external\n', '        whenNotPaused\n', '    {\n', '        _safeTransferFrom(_from, _to, _tokenId, data);\n', '    }\n', '\n', '    /// @dev Transfers the ownership of an Race from one address to another address\n', '    /// @param _from The current owner of the Race\n', '    /// @param _to The new owner\n', '    /// @param _tokenId The Race to transfer\n', '    function safeTransferFrom(address _from, address _to, uint256 _tokenId) \n', '        external\n', '        whenNotPaused\n', '    {\n', '        _safeTransferFrom(_from, _to, _tokenId, "");\n', '    }\n', '\n', "    /// @dev Transfer ownership of an Race, '_to' must be a vaild address, or the Race will lost\n", '    /// @param _from The current owner of the Race\n', '    /// @param _to The new owner\n', '    /// @param _tokenId The Race to transfer\n', '    function transferFrom(address _from, address _to, uint256 _tokenId)\n', '        external\n', '        whenNotPaused\n', '        isValidToken(_tokenId)\n', '        canTransfer(_tokenId)\n', '    {\n', '        address owner = fashionIdToOwner[_tokenId];\n', '        require(owner != address(0));\n', '        require(_to != address(0));\n', '        require(owner == _from);\n', '        \n', '        _transfer(_from, _to, _tokenId);\n', '    }\n', '\n', '    /// @dev Set or reaffirm the approved address for an Race\n', '    /// @param _approved The new approved Race controller\n', '    /// @param _tokenId The Race to approve\n', '    function approve(address _approved, uint256 _tokenId)\n', '        external\n', '        whenNotPaused\n', '    {\n', '        address owner = fashionIdToOwner[_tokenId];\n', '        require(owner != address(0));\n', '        require(msg.sender == owner || operatorToApprovals[owner][msg.sender]);\n', '\n', '        fashionIdToApprovals[_tokenId] = _approved;\n', '        Approval(owner, _approved, _tokenId);\n', '    }\n', '\n', '    /// @dev Enable or disable approval for a third party ("operator") to manage all your asset.\n', '    /// @param _operator Address to add to the set of authorized operators.\n', '    /// @param _approved True if the operators is approved, false to revoke approval\n', '    function setApprovalForAll(address _operator, bool _approved) \n', '        external \n', '        whenNotPaused\n', '    {\n', '        operatorToApprovals[msg.sender][_operator] = _approved;\n', '        ApprovalForAll(msg.sender, _operator, _approved);\n', '    }\n', '\n', '    /// @dev Get the approved address for a single Race\n', '    /// @param _tokenId The Race to find the approved address for\n', '    /// @return The approved address for this Race, or the zero address if there is none\n', '    function getApproved(uint256 _tokenId) external view isValidToken(_tokenId) returns (address) {\n', '        return fashionIdToApprovals[_tokenId];\n', '    }\n', '\n', '    /// @dev Query if an address is an authorized operator for another address\n', '    /// @param _owner The address that owns the Races\n', '    /// @param _operator The address that acts on behalf of the owner\n', '    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\n', '    function isApprovedForAll(address _owner, address _operator) external view returns (bool) {\n', '        return operatorToApprovals[_owner][_operator];\n', '    }\n', '\n', '    /// @dev Count Races tracked by this contract\n', '    /// @return A count of valid Races tracked by this contract, where each one of\n', '    ///  them has an assigned and queryable owner not equal to the zero address\n', '    function totalSupply() external view returns (uint256) {\n', '        return fashionArray.length - destroyFashionCount - 1;\n', '    }\n', '\n', '    /// @dev Do the real transfer with out any condition checking\n', '    /// @param _from The old owner of this Race(If created: 0x0)\n', '    /// @param _to The new owner of this Race \n', '    /// @param _tokenId The tokenId of the Race\n', '    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n', '        if (_from != address(0)) {\n', '            uint256 indexFrom = fashionIdToOwnerIndex[_tokenId];\n', '            uint256[] storage fsArray = ownerToFashionArray[_from];\n', '            require(fsArray[indexFrom] == _tokenId);\n', '\n', '            // If the Race is not the element of array, change it to with the last\n', '            if (indexFrom != fsArray.length - 1) {\n', '                uint256 lastTokenId = fsArray[fsArray.length - 1];\n', '                fsArray[indexFrom] = lastTokenId; \n', '                fashionIdToOwnerIndex[lastTokenId] = indexFrom;\n', '            }\n', '            fsArray.length -= 1; \n', '            \n', '            if (fashionIdToApprovals[_tokenId] != address(0)) {\n', '                delete fashionIdToApprovals[_tokenId];\n', '            }      \n', '        }\n', '\n', "        // Give the Race to '_to'\n", '        fashionIdToOwner[_tokenId] = _to;\n', '        ownerToFashionArray[_to].push(_tokenId);\n', '        fashionIdToOwnerIndex[_tokenId] = ownerToFashionArray[_to].length - 1;\n', '        \n', '        Transfer(_from != address(0) ? _from : this, _to, _tokenId);\n', '    }\n', '\n', '    /// @dev Actually perform the safeTransferFrom\n', '    function _safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) \n', '        internal\n', '        isValidToken(_tokenId) \n', '        canTransfer(_tokenId)\n', '    {\n', '        address owner = fashionIdToOwner[_tokenId];\n', '        require(owner != address(0));\n', '        require(_to != address(0));\n', '        require(owner == _from);\n', '        \n', '        _transfer(_from, _to, _tokenId);\n', '\n', '        // Do the callback after everything is done to avoid reentrancy attack\n', '        uint256 codeSize;\n', '        assembly { codeSize := extcodesize(_to) }\n', '        if (codeSize == 0) {\n', '            return;\n', '        }\n', '        bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(_from, _tokenId, data);\n', '        // bytes4(keccak256("onERC721Received(address,uint256,bytes)")) = 0xf0b9e5ba;\n', '        require(retval == 0xf0b9e5ba);\n', '    }\n', '\n', '    //----------------------------------------------------------------------------------------------------------\n', '\n', '    /// @dev Equipment creation\n', '    /// @param _owner Owner of the equipment created\n', '    /// @param _attrs Attributes of the equipment created\n', '    /// @return Token ID of the equipment created\n', '    function createFashion(address _owner, uint16[13] _attrs, uint16 _createType) \n', '        external \n', '        whenNotPaused\n', '        returns(uint256)\n', '    {\n', '        require(actionContracts[msg.sender]);\n', '        require(_owner != address(0));\n', '\n', '        uint256 newFashionId = fashionArray.length;\n', '        require(newFashionId < 4294967296);\n', '\n', '        fashionArray.length += 1;\n', '        Fashion storage fs = fashionArray[newFashionId];\n', '        fs.equipmentId = _attrs[0];\n', '        fs.quality = _attrs[1];\n', '        fs.pos = _attrs[2];\n', '        if (_attrs[3] != 0) {\n', '            fs.production = _attrs[3];\n', '        }\n', '        \n', '        if (_attrs[4] != 0) {\n', '            fs.attack = _attrs[4];\n', '        }\n', '\t\t\n', '\t\tif (_attrs[5] != 0) {\n', '            fs.defense = _attrs[5];\n', '        }\n', '       \n', '        if (_attrs[6] != 0) {\n', '            fs.plunder = _attrs[6];\n', '        }\n', '        \n', '        if (_attrs[7] != 0) {\n', '            fs.productionMultiplier = _attrs[7];\n', '        }\n', '\n', '        if (_attrs[8] != 0) {\n', '            fs.attackMultiplier = _attrs[8];\n', '        }\n', '\n', '        if (_attrs[9] != 0) {\n', '            fs.defenseMultiplier = _attrs[9];\n', '        }\n', '\n', '        if (_attrs[10] != 0) {\n', '            fs.plunderMultiplier = _attrs[10];\n', '        }\n', '\n', '        if (_attrs[11] != 0) {\n', '            fs.level = _attrs[11];\n', '        }\n', '\n', '        if (_attrs[12] != 0) {\n', '            fs.isPercent = _attrs[12];\n', '        }\n', '        \n', '        _transfer(0, _owner, newFashionId);\n', '        CreateFashion(_owner, newFashionId, _attrs[0], _attrs[1], _attrs[2], _attrs[11], _createType);\n', '        return newFashionId;\n', '    }\n', '\n', '    /// @dev One specific attribute of the equipment modified\n', '    function _changeAttrByIndex(Fashion storage _fs, uint16 _index, uint16 _val) internal {\n', '        if (_index == 3) {\n', '            _fs.production = _val;\n', '        } else if(_index == 4) {\n', '            _fs.attack = _val;\n', '        } else if(_index == 5) {\n', '            _fs.defense = _val;\n', '        } else if(_index == 6) {\n', '            _fs.plunder = _val;\n', '        }else if(_index == 7) {\n', '            _fs.productionMultiplier = _val;\n', '        }else if(_index == 8) {\n', '            _fs.attackMultiplier = _val;\n', '        }else if(_index == 9) {\n', '            _fs.defenseMultiplier = _val;\n', '        }else if(_index == 10) {\n', '            _fs.plunderMultiplier = _val;\n', '        } else if(_index == 11) {\n', '            _fs.level = _val;\n', '        } \n', '       \n', '    }\n', '\n', '    /// @dev Equiment attributes modified (max 4 stats modified)\n', '    /// @param _tokenId Equipment Token ID\n', '    /// @param _idxArray Stats order that must be modified\n', '    /// @param _params Stat value that must be modified\n', '    /// @param _changeType Modification type such as enhance, socket, etc.\n', '    function changeFashionAttr(uint256 _tokenId, uint16[4] _idxArray, uint16[4] _params, uint16 _changeType) \n', '        external \n', '        whenNotPaused\n', '        isValidToken(_tokenId) \n', '    {\n', '        require(actionContracts[msg.sender]);\n', '\n', '        Fashion storage fs = fashionArray[_tokenId];\n', '        if (_idxArray[0] > 0) {\n', '            _changeAttrByIndex(fs, _idxArray[0], _params[0]);\n', '        }\n', '\n', '        if (_idxArray[1] > 0) {\n', '            _changeAttrByIndex(fs, _idxArray[1], _params[1]);\n', '        }\n', '\n', '        if (_idxArray[2] > 0) {\n', '            _changeAttrByIndex(fs, _idxArray[2], _params[2]);\n', '        }\n', '\n', '        if (_idxArray[3] > 0) {\n', '            _changeAttrByIndex(fs, _idxArray[3], _params[3]);\n', '        }\n', '\n', '        ChangeFashion(fashionIdToOwner[_tokenId], _tokenId, _changeType);\n', '    }\n', '\n', '    /// @dev Equipment destruction\n', '    /// @param _tokenId Equipment Token ID\n', '    /// @param _deleteType Destruction type, such as craft\n', '    function destroyFashion(uint256 _tokenId, uint16 _deleteType)\n', '        external \n', '        whenNotPaused\n', '        isValidToken(_tokenId) \n', '    {\n', '        require(actionContracts[msg.sender]);\n', '\n', '        address _from = fashionIdToOwner[_tokenId];\n', '        uint256 indexFrom = fashionIdToOwnerIndex[_tokenId];\n', '        uint256[] storage fsArray = ownerToFashionArray[_from]; \n', '        require(fsArray[indexFrom] == _tokenId);\n', '\n', '        if (indexFrom != fsArray.length - 1) {\n', '            uint256 lastTokenId = fsArray[fsArray.length - 1];\n', '            fsArray[indexFrom] = lastTokenId; \n', '            fashionIdToOwnerIndex[lastTokenId] = indexFrom;\n', '        }\n', '        fsArray.length -= 1; \n', '\n', '        fashionIdToOwner[_tokenId] = address(0);\n', '        delete fashionIdToOwnerIndex[_tokenId];\n', '        destroyFashionCount += 1;\n', '\n', '        Transfer(_from, 0, _tokenId);\n', '\n', '        DeleteFashion(_from, _tokenId, _deleteType);\n', '    }\n', '\n', '    /// @dev Safe transfer by trust contracts\n', '    function safeTransferByContract(uint256 _tokenId, address _to) \n', '        external\n', '        whenNotPaused\n', '    {\n', '        require(actionContracts[msg.sender]);\n', '\n', '        require(_tokenId >= 1 && _tokenId <= fashionArray.length);\n', '        address owner = fashionIdToOwner[_tokenId];\n', '        require(owner != address(0));\n', '        require(_to != address(0));\n', '        require(owner != _to);\n', '\n', '        _transfer(owner, _to, _tokenId);\n', '    }\n', '\n', '    //----------------------------------------------------------------------------------------------------------\n', '\n', '\t/// @dev Get fashion attrs by tokenId front\n', '    function getFashionFront(uint256 _tokenId) external view isValidToken(_tokenId) returns (uint256[14] datas) {\n', '        Fashion storage fs = fashionArray[_tokenId];\n', '        datas[0] = fs.equipmentId;\n', '        datas[1] = fs.quality;\n', '        datas[2] = fs.pos;\n', '        datas[3] = fs.production;\n', '        datas[4] = fs.attack;\n', '        datas[5] = fs.defense;\n', '        datas[6] = fs.plunder;\n', '        datas[7] = fs.productionMultiplier;\n', '        datas[8] = fs.attackMultiplier;\n', '        datas[9] = fs.defenseMultiplier;\n', '        datas[10] = fs.plunderMultiplier;\n', '        datas[11] = fs.level;\n', '        datas[12] = fs.isPercent; \n', '        datas[13] = _tokenId;      \n', '    }\n', '\n', '    /// @dev Get fashion attrs by tokenId back\n', '    function getFashion(uint256 _tokenId) external view isValidToken(_tokenId) returns (uint16[13] datas) {\n', '        Fashion storage fs = fashionArray[_tokenId];\n', '        datas[0] = fs.equipmentId;\n', '        datas[1] = fs.quality;\n', '        datas[2] = fs.pos;\n', '        datas[3] = fs.production;\n', '        datas[4] = fs.attack;\n', '        datas[5] = fs.defense;\n', '        datas[6] = fs.plunder;\n', '        datas[7] = fs.productionMultiplier;\n', '        datas[8] = fs.attackMultiplier;\n', '        datas[9] = fs.defenseMultiplier;\n', '        datas[10] = fs.plunderMultiplier;\n', '        datas[11] = fs.level;\n', '        datas[12] = fs.isPercent;      \n', '    }\n', '\n', '\n', '    /// @dev Get tokenIds and flags by owner\n', '    function getOwnFashions(address _owner) external view returns(uint256[] tokens, uint32[] flags) {\n', '        require(_owner != address(0));\n', '        uint256[] storage fsArray = ownerToFashionArray[_owner];\n', '        uint256 length = fsArray.length;\n', '        tokens = new uint256[](length);\n', '        flags = new uint32[](length);\n', '        for (uint256 i = 0; i < length; ++i) {\n', '            tokens[i] = fsArray[i];\n', '            Fashion storage fs = fashionArray[fsArray[i]];\n', '            flags[i] = uint32(uint32(fs.equipmentId) * 10000 + uint32(fs.quality) * 100 + fs.pos);\n', '        }\n', '    }\n', '\n', '\n', '    /// @dev Race token info returned based on Token ID transfered (64 at most)\n', '    function getFashionsAttrs(uint256[] _tokens) external view returns(uint256[] attrs) {\n', '        uint256 length = _tokens.length;\n', '        attrs = new uint256[](length * 14);\n', '        uint256 tokenId;\n', '        uint256 index;\n', '        for (uint256 i = 0; i < length; ++i) {\n', '            tokenId = _tokens[i];\n', '            if (fashionIdToOwner[tokenId] != address(0)) {\n', '                index = i * 14;\n', '                Fashion storage fs = fashionArray[tokenId];\n', '                attrs[index]     = fs.equipmentId;\n', '\t\t\t\tattrs[index + 1] = fs.quality;\n', '                attrs[index + 2] = fs.pos;\n', '                attrs[index + 3] = fs.production;\n', '                attrs[index + 4] = fs.attack;\n', '                attrs[index + 5] = fs.defense;\n', '                attrs[index + 6] = fs.plunder;\n', '                attrs[index + 7] = fs.productionMultiplier;\n', '                attrs[index + 8] = fs.attackMultiplier;\n', '                attrs[index + 9] = fs.defenseMultiplier;\n', '                attrs[index + 10] = fs.plunderMultiplier;\n', '                attrs[index + 11] = fs.level;\n', '                attrs[index + 12] = fs.isPercent; \n', '                attrs[index + 13] = tokenId;  \n', '            }   \n', '        }\n', '    }\n', '}\n', '\n', '\n', '//Tournament bonus interface\n', 'interface IRaceCoin {\n', '    function addTotalEtherPool(uint256 amount) external;\n', '    function addPlayerToList(address player) external;\n', '    function increasePlayersAttribute(address player, uint16[13] param) external;\n', '    function reducePlayersAttribute(address player, uint16[13] param) external;\n', '}\n', '\n', 'contract CarsPresell is AccessService {\n', '\n', '    using SafeMath for uint256;\n', '    \n', '    RaceToken tokenContract;\n', '\n', '    IRaceCoin public raceCoinContract;\n', '\n', '   \n', '    //Bonus pool address\n', '    address poolContract;\n', '\n', '    ///Bonus pool ratio\n', '    uint256 constant prizeGoldPercent = 80;\n', '\n', '    //referer\n', '    uint256 constant refererPercent = 5;\n', '\n', '    //The maximum number of cars per quality\n', '\tuint16 private carCountsLimit;\n', '\n', '\n', '   \n', '\n', '\n', '\n', '    mapping (uint16 => uint16) carPresellCounter;\n', '    mapping (address => uint16[]) presellLimit;\n', '\n', '    mapping (address => uint16) freeCarCount;\n', '\n', '    event CarPreSelled(address indexed buyer, uint16 equipmentId);\n', '    event FreeCarsObtained(address indexed buyer, uint16 equipmentId);\n', '\n', '    event PresellReferalGain(address referal, address player, uint256 amount);\n', '\n', '    function CarsPresell(address _nftAddr) public {\n', '        addrAdmin = msg.sender;\n', '        addrService = msg.sender;\n', '        addrFinance = msg.sender;\n', '\n', '        tokenContract = RaceToken(_nftAddr);\n', '\t\t\n', '\t\t//Maximum number of vehicles per class\n', '\t\tcarCountsLimit = 500;\n', '\n', '        carPresellCounter[10001] = 100;\n', '        carPresellCounter[10002] = 100;\n', '        carPresellCounter[10003] = 100;\n', '        carPresellCounter[10004] = 100;\n', '        carPresellCounter[10005] = 100;\n', '\t\tcarPresellCounter[10006] = 100;\n', '\n', '    }\n', '\n', '    function() external payable {\n', '\n', '    }\n', '\n', '    function setRaceTokenAddr(address _nftAddr) external onlyAdmin {\n', '        tokenContract = RaceToken(_nftAddr);\n', '    }\n', '\n', '   \n', '    //Set up tournament bonus address\n', '    function setRaceCoin(address _addr) external onlyAdmin {\n', '        require(_addr != address(0));\n', '        poolContract = _addr;\n', '        raceCoinContract = IRaceCoin(_addr);\n', '    }\n', '\t\n', '\t\n', '\t//Increase the number of pre-sale cars, the maximum limit of each vehicle is 500 vehicles.\n', '\tfunction setCarCounts(uint16 _carId, uint16 _carCounts) external onlyAdmin {\n', '\t\trequire( carPresellCounter[_carId] <= carCountsLimit);\n', '\t\tuint16 curSupply = carPresellCounter[_carId];\n', '\t\trequire((curSupply + _carCounts)<= carCountsLimit);\n', '        carPresellCounter[_carId] = curSupply + _carCounts;\n', '    }\n', '\n', '\n', '    //Get free cars\n', '    function freeCar(uint16 _equipmentId)\n', '        external\n', '        payable\n', '        whenNotPaused \n', '    {\n', '        require(freeCarCount[msg.sender] != 1);\n', '\n', '        uint256 payBack = 0;\n', '\n', '        uint16[] storage buyArray = presellLimit[msg.sender];\n', '\n', '        if(_equipmentId == 10007){\n', '            require(msg.value >= 0.0 ether);\n', '            payBack = (msg.value - 0.0 ether);\n', '            uint16[13] memory param0 = [10007, 7, 9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n', '            tokenContract.createFashion(msg.sender, param0, 1);\n', '            raceCoinContract.increasePlayersAttribute(msg.sender, param0);\n', '            buyArray.push(10007);\n', '\n', '            if (payBack > 0) {\n', '                msg.sender.transfer(payBack);\n', '            }\n', '\n', '            freeCarCount[msg.sender] = 1;\n', '\n', '            raceCoinContract.addPlayerToList(msg.sender);\n', '\n', '            emit FreeCarsObtained(msg.sender,_equipmentId);\n', '        }\n', '    }\n', '\n', '    //Whether a free car has been received.\n', '    function getFreeCarCount(address _owner) external view returns(uint16){\n', '\n', '        require(_owner != address(0));\n', '        if(freeCarCount[msg.sender] != 1){\n', '            freeCarCount[msg.sender] = 0;\n', '        }\n', '\n', '        return  freeCarCount[msg.sender];\n', '    }\n', '\n', '\n', '\n', '    function UpdateCurrentCarCount(uint16 _equipmentId,uint16 curSupply) internal {\n', '        carPresellCounter[_equipmentId] = (curSupply - 1);\n', '    }\n', '\n', '\n', '    function carPresell(address referer,uint16 _equipmentId) \n', '        external\n', '        payable\n', '        whenNotPaused \n', '    {\n', '        uint16 curSupply = carPresellCounter[_equipmentId];\n', '        require(curSupply > 0);\n', '        uint16[] storage buyArray = presellLimit[msg.sender];\n', '        uint256 curBuyCnt = buyArray.length;\n', '\t\t\n', '        require(curBuyCnt < 21);\n', '\n', '        uint256 payBack = 0;\n', '        if (_equipmentId == 10001) {\n', '            require(msg.value >= 0.075 ether);\n', '            payBack = (msg.value - 0.075 ether);\n', '            uint16[13] memory param1 = [10001, 1, 9, 10, 0, 0, 0, 5, 0, 0, 0, 0, 0];       // 10 productivity 5% productivity plus\n', '            tokenContract.createFashion(msg.sender, param1, 1);\n', '            raceCoinContract.increasePlayersAttribute(msg.sender, param1);\n', '            buyArray.push(10001);\n', '            raceCoinContract.addPlayerToList(msg.sender);\n', '        } else if(_equipmentId == 10002) {\n', '            require(msg.value >= 0.112 ether);\n', '            payBack = (msg.value - 0.112 ether);\n', '            uint16[13] memory param2 = [10002, 2, 9, 15, 0, 0, 0, 8, 5, 0, 0, 0, 0];       // 15 productivity 8% productivity plus 5% attack bonus\n', '            tokenContract.createFashion(msg.sender, param2, 1);\n', '            raceCoinContract.increasePlayersAttribute(msg.sender, param2);\n', '            buyArray.push(10002);\n', '            raceCoinContract.addPlayerToList(msg.sender);\n', '        } else if(_equipmentId == 10003) {\n', '            require(msg.value >= 0.225 ether);\n', '            payBack = (msg.value - 0.225 ether);\n', '            uint16[13] memory param3 = [10003, 3, 9, 30, 0, 0, 0, 15, 10, 5, 0, 0, 0];        // 30 productivity 15% productivity plus 10% attack plus 5% defense plus\n', '            tokenContract.createFashion(msg.sender, param3, 1);\n', '            raceCoinContract.increasePlayersAttribute(msg.sender, param3);\n', '            buyArray.push(10003);\n', '            raceCoinContract.addPlayerToList(msg.sender);\n', '        } else if(_equipmentId == 10004) {\n', '            require(msg.value >= 0.563 ether);\n', '            payBack = (msg.value - 0.563 ether);\n', '            uint16[13] memory param4 = [10004, 4, 9, 75, 0, 0, 0, 38, 25, 13, 5, 0, 0];        // 75 productivity 38% productivity plus 25% attack plus 13% defense plus 5% predatory addition.\n', '            tokenContract.createFashion(msg.sender, param4, 1);\n', '            raceCoinContract.increasePlayersAttribute(msg.sender, param4);\n', '            buyArray.push(10004);\n', '            raceCoinContract.addPlayerToList(msg.sender);\n', '        } else if(_equipmentId == 10005){\n', '            require(msg.value >= 1.7 ether);\n', '            payBack = (msg.value - 1.7 ether);\n', '            uint16[13] memory param5 = [10005, 5, 9, 225, 0, 0, 0, 113, 75, 38, 15, 0, 0];      // 225 productivity 113% productivity plus 75% attack plus 38% defense plus 15% predatory addition.\n', '            tokenContract.createFashion(msg.sender, param5, 1);\n', '            raceCoinContract.increasePlayersAttribute(msg.sender, param5);\n', '            buyArray.push(10005);\n', '            raceCoinContract.addPlayerToList(msg.sender);\n', '        }else if(_equipmentId == 10006){\n', '            require(msg.value >= 6 ether);\n', '            payBack = (msg.value - 6 ether);\n', '            uint16[13] memory param6 = [10006, 6, 9, 788, 0, 0, 0, 394, 263, 131, 53, 0, 0];      // 788 productivity 394% productivity plus 263% attack plus 131% defense plus 53% predatory addition.\n', '            tokenContract.createFashion(msg.sender, param6, 1);\n', '            raceCoinContract.increasePlayersAttribute(msg.sender, param6);\n', '            buyArray.push(10006);\n', '            raceCoinContract.addPlayerToList(msg.sender);\n', '        }\n', '\n', '        UpdateCurrentCarCount(_equipmentId,curSupply);\n', '\n', '\n', '        emit CarPreSelled(msg.sender, _equipmentId);\n', '\n', '\n', '\n', '        uint256 ethVal = msg.value.sub(payBack);\n', '\n', '        uint256 referalDivs;\n', '        if (referer != address(0) && referer != msg.sender) {\n', '            referalDivs = ethVal.mul(refererPercent).div(100); // 5%\n', '            referer.transfer(referalDivs);\n', '            emit PresellReferalGain(referer, msg.sender, referalDivs);\n', '        }\n', '\n', '\n', '        //Capital injection into capital pool\n', '        if (poolContract != address(0) && ethVal.mul(prizeGoldPercent).div(100) > 0) {\n', '            poolContract.transfer(ethVal.mul(prizeGoldPercent).div(100));\n', '            raceCoinContract.addTotalEtherPool(ethVal.mul(prizeGoldPercent).div(100));\n', '        }\n', '\n', '        //The rest of the account is entered into the developer account.\n', '        if(referalDivs > 0){\n', '            addrFinance.transfer(ethVal.sub(ethVal.mul(prizeGoldPercent).div(100)).sub(ethVal.mul(refererPercent).div(100)));\n', '        }else{\n', '            addrFinance.transfer(ethVal.sub(ethVal.mul(prizeGoldPercent).div(100)));\n', '        }\n', '        \n', '\n', '           \n', '        if (payBack > 0) {\n', '            msg.sender.transfer(payBack);\n', '        }\n', '    }\n', '\n', '    function withdraw() \n', '        external \n', '    {\n', '        require(msg.sender == addrFinance || msg.sender == addrAdmin);\n', '        addrFinance.transfer(this.balance);\n', '    }\n', '\n', '    function getCarCanPresellCount() external view returns (uint16[6] cntArray) {\n', '        cntArray[0] = carPresellCounter[10001];\n', '        cntArray[1] = carPresellCounter[10002];\n', '        cntArray[2] = carPresellCounter[10003];\n', '        cntArray[3] = carPresellCounter[10004];\n', '        cntArray[4] = carPresellCounter[10005];\n', '\t\tcntArray[5] = carPresellCounter[10006];  \t\t\n', '    }\n', '\n', '    function getBuyCount(address _owner) external view returns (uint32) {\n', '        return uint32(presellLimit[_owner].length);\n', '    }\n', '\n', '    function getBuyArray(address _owner) external view returns (uint16[]) {\n', '        uint16[] storage buyArray = presellLimit[_owner];\n', '        return buyArray;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}']