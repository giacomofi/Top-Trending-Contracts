['pragma solidity ^0.5.0;\n', '\n', 'interface ERC20 {\n', '    function totalSupply() external view returns (uint supply);\n', '    function balanceOf(address _owner) external view returns (uint balance);\n', '    function transfer(address _to, uint _value) external returns (bool success);\n', '    function transferFrom(address _from, address _to, uint _value) external returns (bool success);\n', '    function approve(address _spender, uint _value) external returns (bool success);\n', '    function allowance(address _owner, address _spender) external view returns (uint remaining);\n', '    function decimals() external view returns(uint digits);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', 'contract KotowarsChallenge \n', '{\n', '    mapping(address => bool) admins;\n', '    \n', '    modifier adminsOnly\n', '    {\n', '        require(admins[msg.sender] == true, "Not an admin");\n', '        _;\n', '    }\n', '  \n', '    address WCKAddress;\n', '  \n', '    uint256 challenge_ttl; \n', '    uint256 fee;\n', '    uint256 min_buy_in;\n', '   \n', '    enum ChallengeStatus { Created, Accepted, Resolved}\n', '  \n', '    struct Challenge\n', '    {\n', '        address creator;\n', '        address acceptor;\n', '        address winner;\n', '        uint256 buy_in;\n', '        ChallengeStatus status;\n', '        uint256 accepted_at;\n', '    }\n', '\n', '    Challenge[] challenges;\n', '\n', '    event Created(uint256 challenge_id, address creator,  uint256 buy_in);\n', '    event Accepted(uint256 challenge_id, address acceptor);\n', '    event Resolved(uint256 challenge_id, address winner, uint256 reward);\n', '    event Revoked(uint256 challenge_id, address revoker);\n', '\n', '    function create_challenge(uint256 buy_in) public {\n', '        ERC20 WCK = ERC20(WCKAddress);\n', '        require(WCK.transferFrom(msg.sender, address(this), (buy_in + fee) * WCK.decimals()));\n', '        \n', '        Challenge memory challenge = Challenge({\n', '            creator: msg.sender,\n', '            acceptor: address(0),\n', '            winner: address(0),\n', '            buy_in: buy_in,\n', '            status: ChallengeStatus.Created,\n', '            accepted_at: 0\n', '        });\n', '        uint256 challenge_id = challenges.push(challenge) - 1;\n', '        \n', '        emit Created(challenge_id, challenge.creator, challenge.buy_in);\n', '    }\n', '     \n', '    function accept_challenge(uint256 challenge_id) public\n', '    {\n', '        require(challenge_id < challenges.length);\n', '     \n', '        Challenge memory challenge = challenges[challenge_id];\n', '        require(challenge.status == ChallengeStatus.Created);\n', '     \n', '        ERC20 WCK = ERC20(WCKAddress);\n', '        require(WCK.transferFrom(msg.sender, address(this), (challenge.buy_in + fee) * WCK.decimals()));\n', '     \n', '        challenge.acceptor = msg.sender;   \n', '        challenge.status = ChallengeStatus.Accepted;\n', '        challenge.accepted_at = now;\n', '        \n', '        challenges[challenge_id] = challenge;\n', '        \n', '        emit Accepted(challenge_id, challenge.acceptor);\n', '    }\n', '   \n', '    function resolve(uint256 challenge_id, address winner) public adminsOnly\n', '    {\n', '        require(challenge_id < challenges.length);\n', '        \n', '        Challenge memory challenge = challenges[challenge_id];\n', '        require(challenge.status == ChallengeStatus.Accepted);\n', '        \n', '        challenge.winner = winner;\n', '        challenge.status = ChallengeStatus.Resolved;\n', '        \n', '        challenges[challenge_id] = challenge;\n', '        \n', '        uint256 reward = challenge.buy_in * 2;\n', '        ERC20 WCK = ERC20(WCKAddress);\n', '        require(WCK.transferFrom(address(this), challenge.winner, reward * WCK.decimals()));\n', '     \n', '        emit Resolved(challenge_id, challenge.winner, reward);\n', '    }\n', '   \n', '    function unlock_funds(uint256 challenge_id) public\n', '    {\n', '        require(challenge_id < challenges.length);\n', '        \n', '        Challenge memory challenge = challenges[challenge_id];\n', '        require(challenge.status != ChallengeStatus.Resolved);\n', '        require(challenge.accepted_at + challenge_ttl < now);\n', '        \n', '        ERC20 WCK = ERC20(WCKAddress);\n', '        \n', '        if (challenge.status == ChallengeStatus.Created)\n', '        {\n', '            require(WCK.transferFrom(address(this), challenge.creator, challenge.buy_in * WCK.decimals()));\n', '        }\n', '        else if (challenge.status == ChallengeStatus.Accepted)\n', '        {\n', '            require(WCK.transferFrom(address(this), challenge.creator, challenge.buy_in * WCK.decimals()));\n', '            require(WCK.transferFrom(address(this), challenge.acceptor, challenge.buy_in * WCK.decimals()));\n', '        }\n', '        \n', '        challenge.status = ChallengeStatus.Resolved;\n', '        \n', '        emit Revoked(challenge_id, msg.sender);\n', '    }\n', '    \n', '    function set_challenge_ttl(uint256 value) public adminsOnly\n', '    {\n', '        challenge_ttl = value;\n', '    }\n', '    \n', '    function set_min_buy_in(uint256 value) public adminsOnly\n', '    {\n', '        min_buy_in = value;\n', '    }\n', '    \n', '    function set_fee(uint256 value) public adminsOnly\n', '    {\n', '        fee = value;\n', '    }\n', '    \n', '    function set_wck_address(address value) public adminsOnly\n', '    {\n', '        WCKAddress = value;\n', '    }\n', '    \n', '    function add_admin(address admin) public adminsOnly\n', '    {\n', '        admins[admin] = true;\n', '    }\n', '    \n', '    function remove_admin(address admin) public adminsOnly\n', '    {\n', '        admins[admin] = false;\n', '    }\n', '    \n', '    function withdraw() public adminsOnly\n', '    {\n', '        ERC20 WCK = ERC20(WCKAddress);\n', '        WCK.transfer(msg.sender, WCK.balanceOf(address(this)));\n', '    }\n', '    \n', '    constructor() public \n', '    {\n', '        admins[msg.sender] = true;\n', '        \n', '        WCKAddress = address(0x09fE5f0236F0Ea5D930197DCE254d77B04128075);\n', '        \n', '        challenge_ttl = 60; \n', '        fee = 0;\n', '        min_buy_in = 0;\n', '    }\n', '}']