['pragma solidity ^0.4.24;\n', '\n', '// File: contracts\\utils\\SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  /**\n', '  * @dev gives square root of given x.\n', '  */\n', '  function sqrt(uint256 x)\n', '    internal\n', '    pure\n', '    returns (uint256 y)\n', '  {\n', '    uint256 z = ((add(x,1)) / 2);\n', '    y = x;\n', '    while (z < y)\n', '    {\n', '        y = z;\n', '        z = ((add((x / z),z)) / 2);\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev gives square. multiplies x by x\n', '  */\n', '  function sq(uint256 x)\n', '    internal\n', '    pure\n', '    returns (uint256)\n', '  {\n', '    return (mul(x,x));\n', '  }\n', '\n', '  /**\n', '  * @dev x to the power of y\n', '  */\n', '  function pwr(uint256 x, uint256 y)\n', '    internal\n', '    pure\n', '    returns (uint256)\n', '  {\n', '    if (x==0)\n', '        return (0);\n', '    else if (y==0)\n', '        return (1);\n', '    else\n', '    {\n', '        uint256 z = x;\n', '        for (uint256 i=1; i < y; i++)\n', '            z = mul(z,x);\n', '        return (z);\n', '    }\n', '  }\n', '}\n', '\n', '// File: contracts\\FundCenter.sol\n', '\n', '// This contract only keep user&#39;s deposit & withdraw records. \n', '// we use a private chain to maintain users&#39; balance book. \n', '// All user&#39;s spending and earning records are kept in the private chain. \n', 'contract FundCenter {\n', '    using SafeMath for *;\n', '\n', '    string constant public name = "FundCenter";\n', '    string constant public symbol = "FundCenter";\n', '    \n', '    event BalanceRecharge(address indexed sender, uint256 amount, uint64 evented_at); // deposit\n', '    event BalanceWithdraw(address indexed sender, uint256 amount, bytes txHash, uint64 evented_at); //withdraw\n', '\n', '    uint lowestRecharge = 0.1 ether; // lowest deposit amount \n', '    uint lowestWithdraw = 0.1 ether; //lowest withdraw amount\n', '    bool enable = true;\n', '    address public CEO;\n', '    address public COO;\n', '    address public gameAddress; \n', '\n', '    mapping(address => uint) public recharges; // deposit records \n', '    mapping(address => uint) public withdraws; // withdraw records \n', '\n', '    modifier onlyCEO {\n', '        require(CEO == msg.sender, "Only CEO can operate.");\n', '        _;\n', '    }\n', '\n', '    modifier onlyCOO {\n', '        require(COO == msg.sender, "Only COO can operate.");\n', '        _;\n', '    }\n', '    \n', '    modifier onlyEnable {\n', '        require(enable == true, "The service is closed.");\n', '        _;\n', '    }\n', '\n', '    constructor (address _COO) public {\n', '        CEO = msg.sender;\n', '        COO = _COO;\n', '    }\n', '\n', '    function recharge() public payable onlyEnable {\n', '        require(msg.value >= lowestRecharge, "The minimum recharge amount does not meet the requirements.");\n', '        recharges[msg.sender] = recharges[msg.sender].add(msg.value); // only records deposit amount. \n', '        emit BalanceRecharge(msg.sender, msg.value, uint64(now));\n', '    }\n', '    \n', '    function() public payable onlyEnable {\n', '        require(msg.sender == gameAddress, "only receive eth from game address"); \n', '    }\n', '    \n', '    function setGameAddress(address _gameAddress) public onlyCOO {\n', '        gameAddress = _gameAddress; \n', '    }\n', '\n', '    function withdrawBalanceFromServer(address _to, uint _amount, bytes _txHash) public onlyCOO onlyEnable {\n', '        require(address(this).balance >= _amount, "Insufficient balance.");\n', '        _to.transfer(_amount);\n', '        withdraws[_to] = withdraws[_to].add(_amount); // record withdraw amount \n', '        emit BalanceWithdraw(_to, _amount, _txHash, uint64(now));\n', '    }\n', '\n', '\n', '    function withdrawBalanceFromAdmin(uint _amount) public onlyCOO {\n', '        require(address(this).balance >= _amount, "Insufficient balance.");\n', '        CEO.transfer(_amount);\n', '    }\n', '\n', '    function setLowestClaim(uint _lowestRecharge, uint _lowestWithdraw) public onlyCOO {\n', '        lowestRecharge = _lowestRecharge;\n', '        lowestWithdraw = _lowestWithdraw;\n', '    }\n', '\n', '    function setEnable(bool _enable) public onlyCOO {\n', '        enable = _enable;\n', '    }\n', '\n', '    function transferCEO(address _CEOAddress) public onlyCEO {\n', '        CEO = _CEOAddress;\n', '    }\n', '\n', '    function setCOO(address _COOAddress) public onlyCEO {\n', '        COO = _COOAddress;\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '// File: contracts\\utils\\SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  /**\n', '  * @dev gives square root of given x.\n', '  */\n', '  function sqrt(uint256 x)\n', '    internal\n', '    pure\n', '    returns (uint256 y)\n', '  {\n', '    uint256 z = ((add(x,1)) / 2);\n', '    y = x;\n', '    while (z < y)\n', '    {\n', '        y = z;\n', '        z = ((add((x / z),z)) / 2);\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev gives square. multiplies x by x\n', '  */\n', '  function sq(uint256 x)\n', '    internal\n', '    pure\n', '    returns (uint256)\n', '  {\n', '    return (mul(x,x));\n', '  }\n', '\n', '  /**\n', '  * @dev x to the power of y\n', '  */\n', '  function pwr(uint256 x, uint256 y)\n', '    internal\n', '    pure\n', '    returns (uint256)\n', '  {\n', '    if (x==0)\n', '        return (0);\n', '    else if (y==0)\n', '        return (1);\n', '    else\n', '    {\n', '        uint256 z = x;\n', '        for (uint256 i=1; i < y; i++)\n', '            z = mul(z,x);\n', '        return (z);\n', '    }\n', '  }\n', '}\n', '\n', '// File: contracts\\FundCenter.sol\n', '\n', "// This contract only keep user's deposit & withdraw records. \n", "// we use a private chain to maintain users' balance book. \n", "// All user's spending and earning records are kept in the private chain. \n", 'contract FundCenter {\n', '    using SafeMath for *;\n', '\n', '    string constant public name = "FundCenter";\n', '    string constant public symbol = "FundCenter";\n', '    \n', '    event BalanceRecharge(address indexed sender, uint256 amount, uint64 evented_at); // deposit\n', '    event BalanceWithdraw(address indexed sender, uint256 amount, bytes txHash, uint64 evented_at); //withdraw\n', '\n', '    uint lowestRecharge = 0.1 ether; // lowest deposit amount \n', '    uint lowestWithdraw = 0.1 ether; //lowest withdraw amount\n', '    bool enable = true;\n', '    address public CEO;\n', '    address public COO;\n', '    address public gameAddress; \n', '\n', '    mapping(address => uint) public recharges; // deposit records \n', '    mapping(address => uint) public withdraws; // withdraw records \n', '\n', '    modifier onlyCEO {\n', '        require(CEO == msg.sender, "Only CEO can operate.");\n', '        _;\n', '    }\n', '\n', '    modifier onlyCOO {\n', '        require(COO == msg.sender, "Only COO can operate.");\n', '        _;\n', '    }\n', '    \n', '    modifier onlyEnable {\n', '        require(enable == true, "The service is closed.");\n', '        _;\n', '    }\n', '\n', '    constructor (address _COO) public {\n', '        CEO = msg.sender;\n', '        COO = _COO;\n', '    }\n', '\n', '    function recharge() public payable onlyEnable {\n', '        require(msg.value >= lowestRecharge, "The minimum recharge amount does not meet the requirements.");\n', '        recharges[msg.sender] = recharges[msg.sender].add(msg.value); // only records deposit amount. \n', '        emit BalanceRecharge(msg.sender, msg.value, uint64(now));\n', '    }\n', '    \n', '    function() public payable onlyEnable {\n', '        require(msg.sender == gameAddress, "only receive eth from game address"); \n', '    }\n', '    \n', '    function setGameAddress(address _gameAddress) public onlyCOO {\n', '        gameAddress = _gameAddress; \n', '    }\n', '\n', '    function withdrawBalanceFromServer(address _to, uint _amount, bytes _txHash) public onlyCOO onlyEnable {\n', '        require(address(this).balance >= _amount, "Insufficient balance.");\n', '        _to.transfer(_amount);\n', '        withdraws[_to] = withdraws[_to].add(_amount); // record withdraw amount \n', '        emit BalanceWithdraw(_to, _amount, _txHash, uint64(now));\n', '    }\n', '\n', '\n', '    function withdrawBalanceFromAdmin(uint _amount) public onlyCOO {\n', '        require(address(this).balance >= _amount, "Insufficient balance.");\n', '        CEO.transfer(_amount);\n', '    }\n', '\n', '    function setLowestClaim(uint _lowestRecharge, uint _lowestWithdraw) public onlyCOO {\n', '        lowestRecharge = _lowestRecharge;\n', '        lowestWithdraw = _lowestWithdraw;\n', '    }\n', '\n', '    function setEnable(bool _enable) public onlyCOO {\n', '        enable = _enable;\n', '    }\n', '\n', '    function transferCEO(address _CEOAddress) public onlyCEO {\n', '        CEO = _CEOAddress;\n', '    }\n', '\n', '    function setCOO(address _COOAddress) public onlyCEO {\n', '        COO = _COOAddress;\n', '    }\n', '}']
