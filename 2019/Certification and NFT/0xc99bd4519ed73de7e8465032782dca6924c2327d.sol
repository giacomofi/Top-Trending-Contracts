['/* file: openzeppelin-solidity/contracts/ownership/Ownable.sol */\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '/* eof (openzeppelin-solidity/contracts/ownership/Ownable.sol) */\n', '/* file: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol */\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/* eof (openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol) */\n', '/* file: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol */\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/* eof (openzeppelin-solidity/contracts/token/ERC20/ERC20.sol) */\n', '/* file: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol */\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(\n', '    ERC20Basic _token,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transfer(_to, _value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 _token,\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transferFrom(_from, _to, _value));\n', '  }\n', '\n', '  function safeApprove(\n', '    ERC20 _token,\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.approve(_spender, _value));\n', '  }\n', '}\n', '\n', '/* eof (openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol) */\n', '/* file: openzeppelin-solidity/contracts/ownership/CanReclaimToken.sol */\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '/**\n', ' * @title Contracts that should be able to recover tokens\n', ' * @author SylTi\n', ' * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n', ' * This will prevent any accidental loss of tokens.\n', ' */\n', 'contract CanReclaimToken is Ownable {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  /**\n', '   * @dev Reclaim all ERC20Basic compatible tokens\n', '   * @param _token ERC20Basic The address of the token contract\n', '   */\n', '  function reclaimToken(ERC20Basic _token) external onlyOwner {\n', '    uint256 balance = _token.balanceOf(this);\n', '    _token.safeTransfer(owner, balance);\n', '  }\n', '\n', '}\n', '\n', '/* eof (openzeppelin-solidity/contracts/ownership/CanReclaimToken.sol) */\n', '/* file: openzeppelin-solidity/contracts/math/SafeMath.sol */\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/* eof (openzeppelin-solidity/contracts/math/SafeMath.sol) */\n', '/* file: openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol */\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether. This contract implements\n', ' * such functionality in its most fundamental form and can be extended to provide additional\n', ' * functionality and/or custom behavior.\n', ' * The external interface represents the basic interface for purchasing tokens, and conform\n', ' * the base architecture for crowdsales. They are *not* intended to be modified / overridden.\n', ' * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n', " * the methods to add functionality. Consider using 'super' where appropriate to concatenate\n", ' * behavior.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for ERC20;\n', '\n', '  // The token being sold\n', '  ERC20 public token;\n', '\n', '  // Address where funds are collected\n', '  address public wallet;\n', '\n', '  // How many token units a buyer gets per wei.\n', '  // The rate is the conversion between wei and the smallest and indivisible token unit.\n', '  // So, if you are using a rate of 1 with a DetailedERC20 token with 3 decimals called TOK\n', '  // 1 wei will give you 1 unit, or 0.001 TOK.\n', '  uint256 public rate;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(\n', '    address indexed purchaser,\n', '    address indexed beneficiary,\n', '    uint256 value,\n', '    uint256 amount\n', '  );\n', '\n', '  /**\n', '   * @param _rate Number of token units a buyer gets per wei\n', '   * @param _wallet Address where collected funds will be forwarded to\n', '   * @param _token Address of the token being sold\n', '   */\n', '  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    token = _token;\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function buyTokens(address _beneficiary) public payable {\n', '\n', '    uint256 weiAmount = msg.value;\n', '    _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    _processPurchase(_beneficiary, tokens);\n', '    emit TokenPurchase(\n', '      msg.sender,\n', '      _beneficiary,\n', '      weiAmount,\n', '      tokens\n', '    );\n', '\n', '    _updatePurchasingState(_beneficiary, weiAmount);\n', '\n', '    _forwardFunds();\n', '    _postValidatePurchase(_beneficiary, weiAmount);\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use `super` in contracts that inherit from Crowdsale to extend their validations.\n', "   * Example from CappedCrowdsale.sol's _preValidatePurchase method: \n", '   *   super._preValidatePurchase(_beneficiary, _weiAmount);\n', '   *   require(weiRaised.add(_weiAmount) <= cap);\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _preValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    require(_beneficiary != address(0));\n', '    require(_weiAmount != 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _postValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _tokenAmount Number of tokens to be emitted\n', '   */\n', '  function _deliverTokens(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    token.safeTransfer(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _tokenAmount Number of tokens to be purchased\n', '   */\n', '  function _processPurchase(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    _deliverTokens(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _updatePurchasingState(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 _weiAmount)\n', '    internal view returns (uint256)\n', '  {\n', '    return _weiAmount.mul(rate);\n', '  }\n', '\n', '  /**\n', '   * @dev Determines how ETH is stored/forwarded on purchases.\n', '   */\n', '  function _forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '}\n', '\n', '/* eof (openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol) */\n', '/* file: openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol */\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '/**\n', ' * @title TimedCrowdsale\n', ' * @dev Crowdsale accepting contributions only within a time frame.\n', ' */\n', 'contract TimedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public openingTime;\n', '  uint256 public closingTime;\n', '\n', '  /**\n', '   * @dev Reverts if not in crowdsale time range.\n', '   */\n', '  modifier onlyWhileOpen {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Constructor, takes crowdsale opening and closing times.\n', '   * @param _openingTime Crowdsale opening time\n', '   * @param _closingTime Crowdsale closing time\n', '   */\n', '  constructor(uint256 _openingTime, uint256 _closingTime) public {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(_openingTime >= block.timestamp);\n', '    require(_closingTime >= _openingTime);\n', '\n', '    openingTime = _openingTime;\n', '    closingTime = _closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '   * @return Whether crowdsale period has elapsed\n', '   */\n', '  function hasClosed() public view returns (bool) {\n', '    // solium-disable-next-line security/no-block-members\n', '    return block.timestamp > closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring to be within contributing period\n', '   * @param _beneficiary Token purchaser\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '    onlyWhileOpen\n', '  {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}\n', '\n', '/* eof (openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol) */\n', '/* file: openzeppelin-solidity/contracts/crowdsale/distribution/FinalizableCrowdsale.sol */\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of Crowdsale where an owner can do extra work\n', ' * after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is Ownable, TimedCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', "   * work. Calls the contract's finalization function.\n", '   */\n', '  function finalize() public onlyOwner {\n', '    require(!isFinalized);\n', '    require(hasClosed());\n', '\n', '    finalization();\n', '    emit Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '\n', '}\n', '\n', '/* eof (openzeppelin-solidity/contracts/crowdsale/distribution/FinalizableCrowdsale.sol) */\n', '/* file: openzeppelin-solidity/contracts/crowdsale/validation/CappedCrowdsale.sol */\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '/**\n', ' * @title CappedCrowdsale\n', ' * @dev Crowdsale with a limit for total contributions.\n', ' */\n', 'contract CappedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public cap;\n', '\n', '  /**\n', '   * @dev Constructor, takes maximum amount of wei accepted in the crowdsale.\n', '   * @param _cap Max amount of wei to be contributed\n', '   */\n', '  constructor(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the cap has been reached.\n', '   * @return Whether the cap was reached\n', '   */\n', '  function capReached() public view returns (bool) {\n', '    return weiRaised >= cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring purchase to respect the funding cap.\n', '   * @param _beneficiary Token purchaser\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '    require(weiRaised.add(_weiAmount) <= cap);\n', '  }\n', '\n', '}\n', '\n', '/* eof (openzeppelin-solidity/contracts/crowdsale/validation/CappedCrowdsale.sol) */\n', '/* file: openzeppelin-solidity/contracts/access/rbac/Roles.sol */\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title Roles\n', ' * @author Francisco Giordano (@frangio)\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' * See RBAC.sol for example usage.\n', ' */\n', 'library Roles {\n', '  struct Role {\n', '    mapping (address => bool) bearer;\n', '  }\n', '\n', '  /**\n', '   * @dev give an address access to this role\n', '   */\n', '  function add(Role storage _role, address _addr)\n', '    internal\n', '  {\n', '    _role.bearer[_addr] = true;\n', '  }\n', '\n', '  /**\n', "   * @dev remove an address' access to this role\n", '   */\n', '  function remove(Role storage _role, address _addr)\n', '    internal\n', '  {\n', '    _role.bearer[_addr] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev check if an address has this role\n', '   * // reverts\n', '   */\n', '  function check(Role storage _role, address _addr)\n', '    internal\n', '    view\n', '  {\n', '    require(has(_role, _addr));\n', '  }\n', '\n', '  /**\n', '   * @dev check if an address has this role\n', '   * @return bool\n', '   */\n', '  function has(Role storage _role, address _addr)\n', '    internal\n', '    view\n', '    returns (bool)\n', '  {\n', '    return _role.bearer[_addr];\n', '  }\n', '}\n', '\n', '/* eof (openzeppelin-solidity/contracts/access/rbac/Roles.sol) */\n', '/* file: openzeppelin-solidity/contracts/access/rbac/RBAC.sol */\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '/**\n', ' * @title RBAC (Role-Based Access Control)\n', ' * @author Matt Condon (@Shrugs)\n', ' * @dev Stores and provides setters and getters for roles and addresses.\n', ' * Supports unlimited numbers of roles and addresses.\n', ' * See //contracts/mocks/RBACMock.sol for an example of usage.\n', ' * This RBAC method uses strings to key roles. It may be beneficial\n', ' * for you to write your own implementation of this interface using Enums or similar.\n', ' */\n', 'contract RBAC {\n', '  using Roles for Roles.Role;\n', '\n', '  mapping (string => Roles.Role) private roles;\n', '\n', '  event RoleAdded(address indexed operator, string role);\n', '  event RoleRemoved(address indexed operator, string role);\n', '\n', '  /**\n', '   * @dev reverts if addr does not have role\n', '   * @param _operator address\n', '   * @param _role the name of the role\n', '   * // reverts\n', '   */\n', '  function checkRole(address _operator, string _role)\n', '    public\n', '    view\n', '  {\n', '    roles[_role].check(_operator);\n', '  }\n', '\n', '  /**\n', '   * @dev determine if addr has role\n', '   * @param _operator address\n', '   * @param _role the name of the role\n', '   * @return bool\n', '   */\n', '  function hasRole(address _operator, string _role)\n', '    public\n', '    view\n', '    returns (bool)\n', '  {\n', '    return roles[_role].has(_operator);\n', '  }\n', '\n', '  /**\n', '   * @dev add a role to an address\n', '   * @param _operator address\n', '   * @param _role the name of the role\n', '   */\n', '  function addRole(address _operator, string _role)\n', '    internal\n', '  {\n', '    roles[_role].add(_operator);\n', '    emit RoleAdded(_operator, _role);\n', '  }\n', '\n', '  /**\n', '   * @dev remove a role from an address\n', '   * @param _operator address\n', '   * @param _role the name of the role\n', '   */\n', '  function removeRole(address _operator, string _role)\n', '    internal\n', '  {\n', '    roles[_role].remove(_operator);\n', '    emit RoleRemoved(_operator, _role);\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to scope access to a single role (uses msg.sender as addr)\n', '   * @param _role the name of the role\n', '   * // reverts\n', '   */\n', '  modifier onlyRole(string _role)\n', '  {\n', '    checkRole(msg.sender, _role);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\n', '   * @param _roles the names of the roles to scope access to\n', '   * // reverts\n', '   *\n', '   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\n', '   *  see: https://github.com/ethereum/solidity/issues/2467\n', '   */\n', '  // modifier onlyRoles(string[] _roles) {\n', '  //     bool hasAnyRole = false;\n', '  //     for (uint8 i = 0; i < _roles.length; i++) {\n', '  //         if (hasRole(msg.sender, _roles[i])) {\n', '  //             hasAnyRole = true;\n', '  //             break;\n', '  //         }\n', '  //     }\n', '\n', '  //     require(hasAnyRole);\n', '\n', '  //     _;\n', '  // }\n', '}\n', '\n', '/* eof (openzeppelin-solidity/contracts/access/rbac/RBAC.sol) */\n', '/* file: openzeppelin-solidity/contracts/access/Whitelist.sol */\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Whitelist\n', ' * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\n', ' * This simplifies the implementation of "user permissions".\n', ' */\n', 'contract Whitelist is Ownable, RBAC {\n', '  string public constant ROLE_WHITELISTED = "whitelist";\n', '\n', '  /**\n', '   * @dev Throws if operator is not whitelisted.\n', '   * @param _operator address\n', '   */\n', '  modifier onlyIfWhitelisted(address _operator) {\n', '    checkRole(_operator, ROLE_WHITELISTED);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev add an address to the whitelist\n', '   * @param _operator address\n', '   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n', '   */\n', '  function addAddressToWhitelist(address _operator)\n', '    public\n', '    onlyOwner\n', '  {\n', '    addRole(_operator, ROLE_WHITELISTED);\n', '  }\n', '\n', '  /**\n', '   * @dev getter to determine if address is in whitelist\n', '   */\n', '  function whitelist(address _operator)\n', '    public\n', '    view\n', '    returns (bool)\n', '  {\n', '    return hasRole(_operator, ROLE_WHITELISTED);\n', '  }\n', '\n', '  /**\n', '   * @dev add addresses to the whitelist\n', '   * @param _operators addresses\n', '   * @return true if at least one address was added to the whitelist,\n', '   * false if all addresses were already in the whitelist\n', '   */\n', '  function addAddressesToWhitelist(address[] _operators)\n', '    public\n', '    onlyOwner\n', '  {\n', '    for (uint256 i = 0; i < _operators.length; i++) {\n', '      addAddressToWhitelist(_operators[i]);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev remove an address from the whitelist\n', '   * @param _operator address\n', '   * @return true if the address was removed from the whitelist,\n', "   * false if the address wasn't in the whitelist in the first place\n", '   */\n', '  function removeAddressFromWhitelist(address _operator)\n', '    public\n', '    onlyOwner\n', '  {\n', '    removeRole(_operator, ROLE_WHITELISTED);\n', '  }\n', '\n', '  /**\n', '   * @dev remove addresses from the whitelist\n', '   * @param _operators addresses\n', '   * @return true if at least one address was removed from the whitelist,\n', "   * false if all addresses weren't in the whitelist in the first place\n", '   */\n', '  function removeAddressesFromWhitelist(address[] _operators)\n', '    public\n', '    onlyOwner\n', '  {\n', '    for (uint256 i = 0; i < _operators.length; i++) {\n', '      removeAddressFromWhitelist(_operators[i]);\n', '    }\n', '  }\n', '\n', '}\n', '\n', '/* eof (openzeppelin-solidity/contracts/access/Whitelist.sol) */\n', '/* file: openzeppelin-solidity/contracts/crowdsale/validation/WhitelistedCrowdsale.sol */\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '/**\n', ' * @title WhitelistedCrowdsale\n', ' * @dev Crowdsale in which only whitelisted users can contribute.\n', ' */\n', 'contract WhitelistedCrowdsale is Whitelist, Crowdsale {\n', '  /**\n', '   * @dev Extend parent behavior requiring beneficiary to be in whitelist.\n', '   * @param _beneficiary Token beneficiary\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '    onlyIfWhitelisted(_beneficiary)\n', '  {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}\n', '\n', '/* eof (openzeppelin-solidity/contracts/crowdsale/validation/WhitelistedCrowdsale.sol) */\n', '/* file: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol */\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) internal balances;\n', '\n', '  uint256 internal totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_value <= balances[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/* eof (openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol) */\n', '/* file: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol */\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue >= oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/* eof (openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol) */\n', '/* file: openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol */\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier hasMintPermission() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    public\n', '    hasMintPermission\n', '    canMint\n', '    returns (bool)\n', '  {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() public onlyOwner canMint returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '/* eof (openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol) */\n', '/* file: openzeppelin-solidity/contracts/crowdsale/emission/MintedCrowdsale.sol */\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '/**\n', ' * @title MintedCrowdsale\n', ' * @dev Extension of Crowdsale contract whose tokens are minted in each purchase.\n', ' * Token ownership should be transferred to MintedCrowdsale for minting.\n', ' */\n', 'contract MintedCrowdsale is Crowdsale {\n', '\n', '  /**\n', '   * @dev Overrides delivery by minting tokens upon purchase.\n', '   * @param _beneficiary Token purchaser\n', '   * @param _tokenAmount Number of tokens to be minted\n', '   */\n', '  function _deliverTokens(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    // Potentially dangerous assumption about the type of the token.\n', '    require(MintableToken(address(token)).mint(_beneficiary, _tokenAmount));\n', '  }\n', '}\n', '\n', '/* eof (openzeppelin-solidity/contracts/crowdsale/emission/MintedCrowdsale.sol) */\n', '/* file: openzeppelin-solidity/contracts/token/ERC20/TokenTimelock.sol */\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '/**\n', ' * @title TokenTimelock\n', ' * @dev TokenTimelock is a token holder contract that will allow a\n', ' * beneficiary to extract the tokens after a given release time\n', ' */\n', 'contract TokenTimelock {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  // ERC20 basic token contract being held\n', '  ERC20Basic public token;\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '\n', '  // timestamp when token release is enabled\n', '  uint256 public releaseTime;\n', '\n', '  constructor(\n', '    ERC20Basic _token,\n', '    address _beneficiary,\n', '    uint256 _releaseTime\n', '  )\n', '    public\n', '  {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(_releaseTime > block.timestamp);\n', '    token = _token;\n', '    beneficiary = _beneficiary;\n', '    releaseTime = _releaseTime;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers tokens held by timelock to beneficiary.\n', '   */\n', '  function release() public {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(block.timestamp >= releaseTime);\n', '\n', '    uint256 amount = token.balanceOf(address(this));\n', '    require(amount > 0);\n', '\n', '    token.safeTransfer(beneficiary, amount);\n', '  }\n', '}\n', '\n', '/* eof (openzeppelin-solidity/contracts/token/ERC20/TokenTimelock.sol) */\n', '/* file: openzeppelin-solidity/contracts/lifecycle/Pausable.sol */\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() public onlyOwner whenNotPaused {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() public onlyOwner whenPaused {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '/* eof (openzeppelin-solidity/contracts/lifecycle/Pausable.sol) */\n', '/* file: ./contracts/ico/HbeCrowdsale.sol */\n', '/**\n', ' * @title HBE Crowdsale\n', ' * @author Validity Labs AG <info@validitylabs.org>\n', ' */\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '// solhint-disable-next-line\n', 'contract HbeCrowdsale is CanReclaimToken, CappedCrowdsale, MintedCrowdsale, WhitelistedCrowdsale, FinalizableCrowdsale, Pausable {\n', '    /*** PRE-DEPLOYMENT CONFIGURED CONSTANTS */\n', '    address public constant ETH_WALLET = 0x9E35Ee118D9B305F27AE1234BF5c035c1860989C;\n', '    address public constant TEAM_WALLET = 0x992CEad41b885Dc90Ef82673c3c211Efa1Ef1AE2;\n', '    uint256 public constant START_EASTER_BONUS = 1555668000; // Friday, 19 April 2019 12:00:00 GMT+02:00\n', '    uint256 public constant END_EASTER_BONUS = 1555970399;   // Monday, 22 April 2019 23:59:59 GMT+02:00\n', '    /*** CONSTANTS ***/\n', '    uint256 public constant ICO_HARD_CAP = 22e8;             // 2,200,000,000 tokens, 0 decimals spec v1.7\n', '    uint256 public constant CHF_HBE_RATE = 0.0143 * 1e4;    // 0.0143 (.10/7) CHF per HBE Token\n', '    uint256 public constant TEAM_HBE_AMOUNT = 200e6;        // spec v1.7 200,000,000 team tokens\n', '    uint256 public constant FOUR = 4;            // 25%\n', '    uint256 public constant TWO = 2;             // 50%\n', '    uint256 public constant HUNDRED = 100;\n', '    uint256 public constant ONE_YEAR = 365 days;\n', '    uint256 public constant BONUS_DURATION = 14 days;   // two weeks\n', '    uint256 public constant BONUS_1 = 15;   // set 1 - 15% bonus\n', '    uint256 public constant BONUS_2 = 10;   // set 2 and Easter Bonus - 10% bonus\n', '    uint256 public constant BONUS_3 = 5;    // set 3 - 5% bonus\n', '    uint256 public constant PRECISION = 1e6; // precision to account for none decimals\n', '\n', '    /*** VARIABLES ***/\n', '    // marks team allocation as minted\n', '    bool public isTeamTokensMinted;\n', '    address[3] public teamTokensLocked;\n', '\n', '    // allow managers to whitelist and confirm contributions by manager accounts\n', '    // managers can be set and altered by owner, multiple manager accounts are possible\n', '    mapping(address => bool) public isManager;\n', '\n', '    uint256 public tokensMinted;    // total token supply that has been minted and sold. does not include team tokens\n', '    uint256 public rateDecimals;    // # of decimals that the CHF/ETH rate came in as\n', '\n', '    /*** EVENTS  ***/\n', '    event ChangedManager(address indexed manager, bool active);\n', '    event NonEthTokenPurchase(uint256 investmentType, address indexed beneficiary, uint256 tokenAmount);\n', '    event RefundAmount(address indexed beneficiary, uint256 refundAmount);\n', '    event UpdatedFiatRate(uint256 fiatRate, uint256 rateDecimals);\n', '\n', '    /*** MODIFIERS ***/\n', '    modifier onlyManager() {\n', '        require(isManager[msg.sender], "not manager");\n', '        _;\n', '    }\n', '\n', '    modifier onlyValidAddress(address _address) {\n', '        require(_address != address(0), "invalid address");\n', '        _;\n', '    }\n', '\n', '    modifier onlyNoneZero(address _to, uint256 _amount) {\n', '        require(_to != address(0), "invalid address");\n', '        require(_amount > 0, "invalid amount");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev constructor Deploy HBE Token Crowdsale\n', '     * @param _startTime uint256 Start time of the crowdsale\n', '     * @param _endTime uint256 End time of the crowdsale\n', '     * @param _token ERC20 token address\n', '     * @param _rate current CHF per ETH rate\n', '     * @param _rateDecimals the # of decimals contained in the _rate variable\n', '     */\n', '    constructor(\n', '        uint256 _startTime,\n', '        uint256 _endTime,\n', '        address _token,\n', '        uint256 _rate,\n', '        uint256 _rateDecimals\n', '        )\n', '        public\n', '        Crowdsale(_rate, ETH_WALLET, ERC20(_token))\n', '        TimedCrowdsale(_startTime, _endTime)\n', '        CappedCrowdsale(ICO_HARD_CAP) {\n', '            setManager(msg.sender, true);\n', '            _updateRate(_rate, _rateDecimals);\n', '        }\n', '\n', '    /**\n', '     * @dev Allow manager to update the exchange rate when necessary.\n', '     * @param _rate uint256 current CHF per ETH rate\n', '     * @param _rateDecimals the # of decimals contained in the _rate variable\n', '     */\n', '    function updateRate(uint256 _rate, uint256 _rateDecimals) external onlyManager {\n', '        _updateRate(_rate, _rateDecimals);\n', '    }\n', '\n', '    /**\n', '    * @dev create 3 token lockup contracts for X years to be released to the TEAM_WALLET\n', '    */\n', '    function mintTeamTokens() external onlyManager {\n', '        require(!isTeamTokensMinted, "team tokens already minted");\n', '\n', '        isTeamTokensMinted = true;\n', '\n', '        TokenTimelock team1 = new TokenTimelock(ERC20Basic(token), TEAM_WALLET, openingTime.add(ONE_YEAR));\n', '        TokenTimelock team2 = new TokenTimelock(ERC20Basic(token), TEAM_WALLET, openingTime.add(2 * ONE_YEAR));\n', '        TokenTimelock team3 = new TokenTimelock(ERC20Basic(token), TEAM_WALLET, openingTime.add(3 * ONE_YEAR));\n', '\n', '        teamTokensLocked[0] = address(team1);\n', '        teamTokensLocked[1] = address(team2);\n', '        teamTokensLocked[2] = address(team3);\n', '\n', '        _deliverTokens(address(team1), TEAM_HBE_AMOUNT.div(FOUR));\n', '        _deliverTokens(address(team2), TEAM_HBE_AMOUNT.div(FOUR));\n', '        _deliverTokens(address(team3), TEAM_HBE_AMOUNT.div(TWO));\n', '    }\n', '\n', '    /**\n', '    * @dev onlyManager allowed to handle batches of non-ETH investments\n', '    * @param _investmentTypes uint256[] array of ids to identify investment types IE: BTC, CHF, EUR, etc...\n', '    * @param _beneficiaries address[]\n', '    * @param _amounts uint256[]\n', '    */\n', '    function batchNonEthPurchase(uint256[] _investmentTypes, address[] _beneficiaries, uint256[] _amounts) external {\n', '        require(_beneficiaries.length == _amounts.length && _investmentTypes.length == _amounts.length, "length !=");\n', '\n', '        for (uint256 i; i < _beneficiaries.length; i = i.add(1)) {\n', '            nonEthPurchase(_investmentTypes[i], _beneficiaries[i], _amounts[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev return the array of 3 token lock contracts for the HBE Team\n', '    */\n', '    function getTeamLockedContracts() external view returns (address[3]) {\n', '        return teamTokensLocked;\n', '    }\n', '\n', '    /** OVERRIDE\n', '    * @dev low level token purchase\n', '    * @param _beneficiary Address performing the token purchase\n', '    */\n', '    function buyTokens(address _beneficiary) public payable {\n', '        uint256 weiAmount = msg.value;\n', '\n', '        _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '        // calculate a wei refund, if any, since decimal place is 0\n', '        // update weiAmount if refund is > 0\n', '        weiAmount = weiAmount.sub(refundLeftOverWei(weiAmount, tokens));\n', '\n', '        // calculate bonus, if in bonus time period(s)\n', '        tokens = tokens.add(_calcBonusAmount(tokens));\n', '\n', '        // update state\n', '        weiRaised = weiRaised.add(weiAmount);\n', '        //push to investments array\n', '        _processPurchase(_beneficiary, tokens);\n', '        // throw event\n', '        emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n', '\n', '        // forward wei to the wallet\n', '        _forwardFunds(weiAmount);\n', '    }\n', '\n', '    /** OVERRIDE - change to tokensMinted from weiRaised\n', '    * @dev Checks whether the cap has been reached.\n', '    * only active if a cap has been set\n', '    * @return Whether the cap was reached\n', '    */\n', '    function capReached() public view returns (bool) {\n', '        return tokensMinted >= cap;\n', '    }\n', '\n', '    /**\n', '     * @dev Set / alter manager / whitelister "account". This can be done from owner only\n', '     * @param _manager address address of the manager to create/alter\n', '     * @param _active bool flag that shows if the manager account is active\n', '     */\n', '    function setManager(address _manager, bool _active) public onlyOwner onlyValidAddress(_manager) {\n', '        isManager[_manager] = _active;\n', '        emit ChangedManager(_manager, _active);\n', '    }\n', '\n', '    /** OVERRIDE\n', '    * @dev add an address to the whitelist\n', '    * @param _address address\n', '    * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n', '    */\n', '    function addAddressToWhitelist(address _address)\n', '        public\n', '        onlyManager\n', '    {\n', '        addRole(_address, ROLE_WHITELISTED);\n', '    }\n', '\n', '    /** OVERRIDE\n', '    * @dev remove an address from the whitelist\n', '    * @param _address address\n', '    * @return true if the address was removed from the whitelist,\n', "    * false if the address wasn't in the whitelist in the first place\n", '    */\n', '    function removeAddressFromWhitelist(address _address)\n', '        public\n', '        onlyManager\n', '    {\n', '        removeRole(_address, ROLE_WHITELISTED);\n', '    }\n', '\n', '    /** OVERRIDE\n', '    * @dev remove addresses from the whitelist\n', '    * @param _addresses addresses\n', '    * @return true if at least one address was removed from the whitelist,\n', "    * false if all addresses weren't in the whitelist in the first place\n", '    */\n', '    function removeAddressesFromWhitelist(address[] _addresses)\n', '        public\n', '        onlyManager\n', '    {\n', '        for (uint256 i = 0; i < _addresses.length; i++) {\n', '            removeAddressFromWhitelist(_addresses[i]);\n', '        }\n', '    }\n', '\n', '    /** OVERRIDE\n', '    * @dev add addresses to the whitelist\n', '    * @param _addresses addresses\n', '    * @return true if at least one address was added to the whitelist,\n', '    * false if all addresses were already in the whitelist\n', '    */\n', '    function addAddressesToWhitelist(address[] _addresses)\n', '        public\n', '        onlyManager\n', '    {\n', '        for (uint256 i = 0; i < _addresses.length; i++) {\n', '            addAddressToWhitelist(_addresses[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev onlyManager allowed to allocate non-ETH investments during the crowdsale\n', '    * @param _investmentType uint256\n', '    * @param _beneficiary address\n', '    * @param _tokenAmount uint256\n', '    */\n', '    function nonEthPurchase(uint256 _investmentType, address _beneficiary, uint256 _tokenAmount) public\n', '        onlyManager\n', '        onlyWhileOpen\n', '        onlyNoneZero(_beneficiary, _tokenAmount)\n', '    {\n', '        _processPurchase(_beneficiary, _tokenAmount);\n', '        emit NonEthTokenPurchase(_investmentType, _beneficiary, _tokenAmount);\n', '    }\n', '\n', '    /** OVERRIDE\n', '    * @dev called by the manager to pause, triggers stopped state\n', '    */\n', '    function pause() public onlyManager whenNotPaused onlyWhileOpen {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    /** OVERRIDE\n', '    * @dev called by the manager to unpause, returns to normal state\n', '    */\n', '    function unpause() public onlyManager whenPaused {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '\n', '    /** OVERRIDE\n', '    * @dev onlyManager allows tokens to be tradeable transfers HBE Token ownership back to owner\n', '    */\n', '    function finalize() public onlyManager {\n', '        Pausable(address(token)).unpause();\n', '        Ownable(address(token)).transferOwnership(owner);\n', '\n', '        super.finalize();\n', '    }\n', '\n', '    /*** INTERNAL/PRIVATE FUNCTIONS ***/\n', '    /** OVERRIDE - do not call super.METHOD\n', '    * @dev Validation of an incoming purchase. Use require statements to revert\n', '    * state when conditions are not met. Use super to concatenate validations.\n', '    * @param _beneficiary Address performing the token purchase\n', '    * @param _weiAmount Value in wei involved in the purchase\n', '    */\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount)\n', '        internal\n', '        onlyWhileOpen\n', '        whenNotPaused\n', '        onlyIfWhitelisted(_beneficiary) {\n', '            require(_weiAmount != 0, "invalid amount");\n', '            require(!capReached(), "cap has been reached");\n', '        }\n', '\n', '    /** OVERRIDE\n', '    * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '    * @param _beneficiary Address receiving the tokens\n', '    * @param _tokenAmount Number of tokens to be purchased\n', '    */\n', '    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '        tokensMinted = tokensMinted.add(_tokenAmount);\n', '        // respect the token cap\n', '        require(tokensMinted <= cap, "tokensMinted > cap");\n', '        _deliverTokens(_beneficiary, _tokenAmount);\n', '    }\n', '\n', '    /** OVERRIDE\n', '    * @dev Override to extend the way in which ether is converted to tokens.\n', '    * @param _weiAmount Value in wei to be converted into tokens\n', '    * @return Number of tokens that can be purchased with the specified _weiAmount\n', '    */\n', '    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '        return _weiAmount.mul(rate).div(rateDecimals).div(1e18).div(PRECISION);\n', '    }\n', '\n', '    /**\n', '    * @dev calculate the bonus amount pending on time\n', '    */\n', '    function _calcBonusAmount(uint256 _tokenAmount) internal view returns (uint256) {\n', '        uint256 currentBonus;\n', '\n', '        /* solhint-disable */\n', '        if (block.timestamp < openingTime.add(BONUS_DURATION)) {\n', '            currentBonus = BONUS_1;\n', '        } else if (block.timestamp < openingTime.add(BONUS_DURATION.mul(2))) {\n', '            currentBonus = BONUS_2;\n', '        } else if (block.timestamp < openingTime.add(BONUS_DURATION.mul(3))) {\n', '            currentBonus = BONUS_3;\n', '        } else if (block.timestamp >= START_EASTER_BONUS && block.timestamp < END_EASTER_BONUS) {\n', '            currentBonus = BONUS_2;\n', '        }\n', '        /* solhint-enable */\n', '\n', '        return _tokenAmount.mul(currentBonus).div(HUNDRED);\n', '    }\n', '\n', '    /**\n', '     * @dev calculate wei refund to investor, if any. This handles rounding errors\n', '     * which are important here due to the 0 decimals\n', '     * @param _weiReceived uint256 wei received from the investor\n', '     * @param _tokenAmount uint256 HBE tokens minted for investor\n', '     */\n', '    function refundLeftOverWei(uint256 _weiReceived, uint256 _tokenAmount) internal returns (uint256 refundAmount) {\n', '        uint256 weiInvested = _tokenAmount.mul(1e18).mul(PRECISION).mul(rateDecimals).div(rate);\n', '\n', '        if (weiInvested < _weiReceived) {\n', '            refundAmount = _weiReceived.sub(weiInvested);\n', '        }\n', '\n', '        if (refundAmount > 0) {\n', '            msg.sender.transfer(refundAmount);\n', '            emit RefundAmount(msg.sender, refundAmount);\n', '        }\n', '\n', '        return refundAmount;\n', '    }\n', '\n', '    /** OVERRIDE\n', '    * @dev Determines how ETH is stored/forwarded on purchases.\n', '    * @param _weiAmount uint256\n', '    */\n', '    function _forwardFunds(uint256 _weiAmount) internal {\n', '        wallet.transfer(_weiAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Allow manager to update the exchange rate when necessary.\n', '     * @param _rate uint256\n', '     * @param _rateDecimals the # of decimals contained in the _rate variable\n', '     */\n', '    function _updateRate(uint256 _rate, uint256 _rateDecimals) internal {\n', '        require(_rateDecimals <= 18);\n', '\n', '        rateDecimals = 10**_rateDecimals;\n', '        rate = (_rate.mul(1e4).mul(PRECISION).div(CHF_HBE_RATE));\n', '\n', '        emit UpdatedFiatRate(_rate, _rateDecimals);\n', '    }\n', '}\n', '\n', '/* eof (./contracts/ico/HbeCrowdsale.sol) */']