['// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     * @notice Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '        assert(block.timestamp < expiryTime);\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Multiplies two unsigned integers, reverts on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two unsigned integers, reverts on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '     * reverts when dividing by zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/DollarAuction.sol\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', '\n', '\n', 'contract DollarAuction is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 constant bidFee = 1e15;\n', '    uint256 constant minimumBidDelta = 1e15;\n', '    uint256 constant sixHours = 6 * 60 * 60;\n', '    uint256 constant twentyFourHours = sixHours * 4;\n', '    uint256 constant tenthEth = 1e17;\n', '    uint256 public expiryTime;\n', '    uint256 public prize;\n', '    address payable public lastDonor;\n', '    address payable public winningBidder;\n', '    address payable public losingBidder;\n', '    uint256 public winningBid;\n', '    uint256 public losingBid;\n', '\n', '    constructor() public payable {\n', '        reset();\n', '    }\n', '\n', '    modifier onlyActiveAuction() {\n', '        require(isActiveAuction(), "Auction not active");\n', '        _;\n', '    }\n', '\n', '    modifier onlyInactiveAuction() {\n', '        require(!isActiveAuction(), "Auction not expired");\n', '        _;\n', '    }\n', '\n', '    function increasePrize() public payable onlyActiveAuction {\n', '        require(msg.value >= tenthEth, "Must increase by at least 0.1ETH");\n', '\n', '        prize = prize.add(msg.value);\n', '        lastDonor = msg.sender;\n', '    }\n', '\n', '    function bid() public payable onlyActiveAuction {\n', '        uint bidAmount = msg.value.sub(bidFee);\n', '\n', '        require(bidAmount > winningBid.add(minimumBidDelta), "Bid too small");\n', '\n', '        repayThirdPlace();\n', '        updateLosingBidder();\n', '        updateWinningBidder(bidAmount, msg.sender);\n', '\n', '        if(expiryTime < block.timestamp + sixHours){\n', '            expiryTime = block.timestamp + sixHours;\n', '        }\n', '    }\n', '\n', '    function withdrawPrize() public onlyInactiveAuction {\n', '        require(msg.sender == winningBidder || isOwner(), "not authorized");\n', '\n', '        winningBidder.transfer(prize);\n', '        address payable o = address(uint160(owner()));\n', '        uint256 bids = winningBid.add(losingBid);\n', '        lastDonor.transfer(bids);\n', '        o.transfer(address(this).balance);\n', '\n', '        prize = 0;\n', '    }\n', '\n', '    function restart() public payable onlyOwner onlyInactiveAuction {\n', '        reset();\n', '    }\n', '\n', '    function collectedFees() public view onlyOwner returns (uint) {\n', '        return address(this).balance.sub(prize).sub(winningBid).sub(losingBid);\n', '    }\n', '\n', '    function reset() internal onlyOwner {\n', '        expiryTime = block.timestamp + 2*twentyFourHours;\n', '        prize = msg.value;\n', '        lastDonor = msg.sender;\n', '        winningBidder = msg.sender;\n', '        losingBidder = msg.sender;\n', '        winningBid = 0;\n', '        losingBid = 0;\n', '    }\n', '\n', '    function updateWinningBidder(uint256 _bid, address payable _bidder) internal {\n', '        winningBid = _bid;\n', '        winningBidder = _bidder;\n', '    }\n', '\n', '    function updateLosingBidder() internal {\n', '        losingBidder = winningBidder;\n', '        losingBid = winningBid;\n', '    }\n', '\n', '    function repayThirdPlace() internal {\n', '        losingBidder.transfer(losingBid);\n', '    }\n', '\n', '    function isActiveAuction() public view returns(bool) {\n', '        return block.timestamp < expiryTime;\n', '    }\n', '\n', '    // what happens if donate fails? Money returned to sender?\n', '    function() external payable {\n', '        bid();\n', '    }\n', '}']