['// File: contracts/application/ImplementationProvider.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title ImplementationProvider\n', ' * @dev Interface for providing implementation addresses for other contracts by name.\n', ' */\n', 'interface ImplementationProvider {\n', '  /**\n', '   * @dev Abstract function to return the implementation address of a contract.\n', '   * @param contractName Name of the contract.\n', '   * @return Implementation address of the contract.\n', '   */\n', '  function getImplementation(string contractName) public view returns (address);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', 'pragma solidity ^0.4.23;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/AddressUtils.sol\n', '\n', 'pragma solidity ^0.4.23;\n', '\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' */\n', 'library AddressUtils {\n', '\n', '  /**\n', '   * Returns whether the target address is a contract\n', '   * @dev This function will return false if invoked during the constructor of a contract,\n', '   *  as the code is not actually created until after the constructor finishes.\n', '   * @param addr address to check\n', '   * @return whether the target address is a contract\n', '   */\n', '  function isContract(address addr) internal view returns (bool) {\n', '    uint256 size;\n', '    // XXX Currently there is no better way to check if there is a contract in an address\n', '    // than to check the size of the code at that address.\n', '    // See https://ethereum.stackexchange.com/a/14016/36603\n', '    // for more details about how this works.\n', '    // TODO Check this again before the Serenity release, because all addresses will be\n', '    // contracts then.\n', '    // solium-disable-next-line security/no-inline-assembly\n', '    assembly { size := extcodesize(addr) }\n', '    return size > 0;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/application/ImplementationDirectory.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ImplementationDirectory\n', ' * @dev Implementation provider that stores contract implementations in a mapping.\n', ' */\n', 'contract ImplementationDirectory is ImplementationProvider, Ownable {\n', '  /**\n', '   * @dev Emitted when the implementation of a contract is changed.\n', '   * @param contractName Name of the contract.\n', '   * @param implementation Address of the added implementation.\n', '   */\n', '  event ImplementationChanged(string contractName, address indexed implementation);\n', '\n', '  /**\n', '   * @dev Emitted when the implementation directory is frozen.\n', '   */\n', '  event Frozen();\n', '\n', '  /// @dev Mapping where the addresses of the implementations are stored.\n', '  mapping (string => address) internal implementations;\n', '\n', '  /// @dev Mutability state of the directory.\n', '  bool public frozen;\n', '\n', '  /**\n', '   * @dev Modifier that allows functions to be called only before the contract is frozen.\n', '   */\n', '  modifier whenNotFrozen() {\n', '    require(!frozen, "Cannot perform action for a frozen implementation directory");\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Makes the directory irreversibly immutable.\n', '   * It can only be called once, by the owner.\n', '   */\n', '  function freeze() onlyOwner whenNotFrozen public {\n', '    frozen = true;\n', '    emit Frozen();\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the implementation address of a contract.\n', '   * @param contractName Name of the contract.\n', '   * @return Address of the implementation.\n', '   */\n', '  function getImplementation(string contractName) public view returns (address) {\n', '    return implementations[contractName];\n', '  }\n', '\n', '  /**\n', '   * @dev Sets the address of the implementation of a contract in the directory.\n', '   * @param contractName Name of the contract.\n', '   * @param implementation Address of the implementation.\n', '   */\n', '  function setImplementation(string contractName, address implementation) public onlyOwner whenNotFrozen {\n', '    require(AddressUtils.isContract(implementation), "Cannot set implementation in directory with a non-contract address");\n', '    implementations[contractName] = implementation;\n', '    emit ImplementationChanged(contractName, implementation);\n', '  }\n', '\n', '  /**\n', '   * @dev Removes the address of a contract implementation from the directory.\n', '   * @param contractName Name of the contract.\n', '   */\n', '  function unsetImplementation(string contractName) public onlyOwner whenNotFrozen {\n', '    implementations[contractName] = address(0);\n', '    emit ImplementationChanged(contractName, address(0));\n', '  }\n', '}']