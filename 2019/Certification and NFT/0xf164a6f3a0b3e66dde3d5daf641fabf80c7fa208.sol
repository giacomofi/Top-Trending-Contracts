['pragma solidity 0.5.0;\n', '\n', 'contract AbstractAzimuth {\n', '   function ownerOf(uint256 pointNum) public view returns(address);\n', '}\n', '\n', 'contract Reputation {\n', '    \n', '    address azimuthAddress = 0x6ac07B7C4601B5CE11de8Dfe6335B871C7C4dd4d;\n', '    \n', '    enum Score { Negative, Neutral, Positive }\n', '    event LogReputationFact(uint256, uint256, uint, string fact);\n', '    \n', '    //  validPointId(): require that _id is a valid point\n', '    //\n', '    modifier validPointId(uint256 _id)\n', '    {\n', '      require(_id < 0x100000000);\n', '      _;\n', '    }\n', '    \n', '    function checkOwner(uint256 pointNum)\n', '    public view\n', '    validPointId(pointNum)\n', '    returns(address owner) {\n', '      AbstractAzimuth azimuth = AbstractAzimuth(azimuthAddress);\n', '      return azimuth.ownerOf(pointNum);\n', '    }\n', '\n', '    function appendNegative(uint256 pointNum, uint256 repNum, string memory fact)\n', '    public {\n', '      address owner = checkOwner(pointNum);\n', '      //require(owner == msg.sender);\n', '      Score score = Score.Negative;\n', '      emit LogReputationFact(pointNum, repNum, uint(score), fact);\n', '    }\n', '\n', '    function appendNeutral(uint256 pointNum, uint256 repNum, string memory fact)\n', '    public {\n', '      address owner = checkOwner(pointNum);\n', '      //require(owner == msg.sender);\n', '      Score score = Score.Neutral;\n', '      emit LogReputationFact(pointNum, repNum, uint(score), fact);\n', '    }\n', '\n', '    function appendPositive(uint256 pointNum, uint256 repNum, string memory fact)\n', '    public {\n', '      address owner = checkOwner(pointNum);\n', '      //require(owner == msg.sender);\n', '      Score score = Score.Positive;\n', '      emit LogReputationFact(pointNum, repNum, uint(score), fact);\n', '    }\n', '\n', '}']