['// File: contracts/lib/interface/ICelerWallet.sol\n', '\n', 'pragma solidity ^0.5.1;\n', '\n', '/**\n', ' * @title CelerWallet interface\n', ' */\n', 'interface ICelerWallet {\n', '    function create(address[] calldata _owners, address _operator, bytes32 _nonce) external returns(bytes32);\n', '\n', '    function depositETH(bytes32 _walletId) external payable;\n', '\n', '    function depositERC20(bytes32 _walletId, address _tokenAddress, uint _amount) external;\n', '    \n', '    function withdraw(bytes32 _walletId, address _tokenAddress, address _receiver, uint _amount) external;\n', '\n', '    function transferToWallet(bytes32 _fromWalletId, bytes32 _toWalletId, address _tokenAddress, address _receiver, uint _amount) external;\n', '\n', '    function transferOperatorship(bytes32 _walletId, address _newOperator) external;\n', '\n', '    function proposeNewOperator(bytes32 _walletId, address _newOperator) external;\n', '\n', '    function drainToken(address _tokenAddress, address _receiver, uint _amount) external;\n', '\n', '    function getWalletOwners(bytes32 _walletId) external view returns(address[] memory);\n', '\n', '    function getOperator(bytes32 _walletId) external view returns(address);\n', '\n', '    function getBalance(bytes32 _walletId, address _tokenAddress) external view returns(uint);\n', '\n', '    function getProposedNewOperator(bytes32 _walletId) external view returns(address);\n', '\n', '    function getProposalVote(bytes32 _walletId, address _owner) external view returns(bool);\n', '\n', '    event CreateWallet(bytes32 indexed walletId, address[] indexed owners, address indexed operator);\n', '\n', '    event DepositToWallet(bytes32 indexed walletId, address indexed tokenAddress, uint amount);\n', '\n', '    event WithdrawFromWallet(bytes32 indexed walletId, address indexed tokenAddress, address indexed receiver, uint amount);\n', '\n', '    event TransferToWallet(bytes32 indexed fromWalletId, bytes32 indexed toWalletId, address indexed tokenAddress, address receiver, uint amount);\n', '\n', '    event ChangeOperator(bytes32 indexed walletId, address indexed oldOperator, address indexed newOperator);\n', '\n', '    event ProposeNewOperator(bytes32 indexed walletId, address indexed newOperator, address indexed proposer);\n', '\n', '    event DrainToken(address indexed tokenAddress, address indexed receiver, uint amount);\n', '}\n', '\n', '// File: contracts/lib/interface/IEthPool.sol\n', '\n', 'pragma solidity ^0.5.1;\n', '\n', '/**\n', ' * @title EthPool interface\n', ' */\n', 'interface IEthPool {\n', '    function deposit(address _receiver) external payable;\n', '\n', '    function withdraw(uint _value) external;\n', '\n', '    function approve(address _spender, uint _value) external returns (bool);\n', '\n', '    function transferFrom(address _from, address payable _to, uint _value) external returns (bool);\n', '\n', '    function transferToCelerWallet(address _from, address _walletAddr, bytes32 _walletId, uint _value) external returns (bool);\n', '\n', '    function increaseAllowance(address _spender, uint _addedValue) external returns (bool);\n', '\n', '    function decreaseAllowance(address _spender, uint _subtractedValue) external returns (bool);\n', '\n', '    function balanceOf(address _owner) external view returns (uint);\n', '\n', '    function allowance(address _owner, address _spender) external view returns (uint);\n', '\n', '    event Deposit(address indexed receiver, uint value);\n', '    \n', '    // transfer from "from" account inside EthPool to real "to" address outside EthPool\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    \n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '// File: contracts/lib/interface/IPayRegistry.sol\n', '\n', 'pragma solidity ^0.5.1;\n', '\n', '/**\n', ' * @title PayRegistry interface\n', ' */\n', 'interface IPayRegistry {\n', '    function calculatePayId(bytes32 _payHash, address _setter) external pure returns(bytes32);\n', '\n', '    function setPayAmount(bytes32 _payHash, uint _amt) external;\n', '\n', '    function setPayDeadline(bytes32 _payHash, uint _deadline) external;\n', '\n', '    function setPayInfo(bytes32 _payHash, uint _amt, uint _deadline) external;\n', '\n', '    function setPayAmounts(bytes32[] calldata _payHashes, uint[] calldata _amts) external;\n', '\n', '    function setPayDeadlines(bytes32[] calldata _payHashes, uint[] calldata _deadlines) external;\n', '\n', '    function setPayInfos(bytes32[] calldata _payHashes, uint[] calldata _amts, uint[] calldata _deadlines) external;\n', '\n', '    function getPayAmounts(\n', '        bytes32[] calldata _payIds,\n', '        uint _lastPayResolveDeadline\n', '    ) external view returns(uint[] memory);\n', '\n', '    function getPayInfo(bytes32 _payId) external view returns(uint, uint);\n', '\n', '    event PayInfoUpdate(bytes32 indexed payId, uint amount, uint resolveDeadline);\n', '}\n', '\n', '// File: contracts/lib/data/Pb.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '// runtime proto sol library\n', 'library Pb {\n', '    enum WireType { Varint, Fixed64, LengthDelim, StartGroup, EndGroup, Fixed32 }\n', '\n', '    struct Buffer {\n', "        uint idx;  // the start index of next read. when idx=b.length, we're done\n", '        bytes b;   // hold serialized proto msg, readonly\n', '    }\n', '\n', '    // create a new in-memory Buffer object from raw msg bytes\n', '    function fromBytes(bytes memory raw) internal pure returns (Buffer memory buf) {\n', '        buf.b = raw;\n', '        buf.idx = 0;\n', '    }\n', '\n', '    // whether there are unread bytes\n', '    function hasMore(Buffer memory buf) internal pure returns (bool) {\n', '        return buf.idx < buf.b.length;\n', '    }\n', '\n', '    // decode current field number and wiretype\n', '    function decKey(Buffer memory buf) internal pure returns (uint tag, WireType wiretype) {\n', '        uint v = decVarint(buf);\n', '        tag = v / 8;\n', '        wiretype = WireType(v & 7);\n', '    }\n', '\n', '    // count tag occurrences, return an array due to no memory map support\n', '\t// have to create array for (maxtag+1) size. cnts[tag] = occurrences\n', '\t// should keep buf.idx unchanged because this is only a count function\n', '    function cntTags(Buffer memory buf, uint maxtag) internal pure returns (uint[] memory cnts) {\n', '        uint originalIdx = buf.idx;\n', "        cnts = new uint[](maxtag+1);  // protobuf's tags are from 1 rather than 0\n", '        uint tag;\n', '        WireType wire;\n', '        while (hasMore(buf)) {\n', '            (tag, wire) = decKey(buf);\n', '            cnts[tag] += 1;\n', '            skipValue(buf, wire);\n', '        }\n', '        buf.idx = originalIdx;\n', '    }\n', '\n', '    // read varint from current buf idx, move buf.idx to next read, return the int value\n', '    function decVarint(Buffer memory buf) internal pure returns (uint v) {\n', '        bytes10 tmp;  // proto int is at most 10 bytes (7 bits can be used per byte)\n', '        bytes memory bb = buf.b;  // get buf.b mem addr to use in assembly\n', '        v = buf.idx;  // use v to save one additional uint variable\n', '        assembly {\n', '            tmp := mload(add(add(bb, 32), v)) // load 10 bytes from buf.b[buf.idx] to tmp\n', '        }\n', '        uint b; // store current byte content\n', '        v = 0; // reset to 0 for return value\n', '        for (uint i=0; i<10; i++) {\n', '            assembly {\n', "                b := byte(i, tmp)  // don't use tmp[i] because it does bound check and costs extra\n", '            }\n', '            v |= (b & 0x7F) << (i * 7);\n', '            if (b & 0x80 == 0) {\n', '                buf.idx += i + 1;\n', '                return v;\n', '            }\n', '        }\n', '        revert(); // i=10, invalid varint stream\n', '    }\n', '\n', '    // read length delimited field and return bytes\n', '    function decBytes(Buffer memory buf) internal pure returns (bytes memory b) {\n', '        uint len = decVarint(buf);\n', '        uint end = buf.idx + len;\n', '        require(end <= buf.b.length);  // avoid overflow\n', '        b = new bytes(len);\n', '        bytes memory bufB = buf.b;  // get buf.b mem addr to use in assembly\n', '        uint bStart;\n', '        uint bufBStart = buf.idx;\n', '        assembly {\n', '            bStart := add(b, 32)\n', '            bufBStart := add(add(bufB, 32), bufBStart)\n', '        }\n', '        for (uint i=0; i<len; i+=32) {\n', '            assembly{\n', '                mstore(add(bStart, i), mload(add(bufBStart, i)))\n', '            }\n', '        }\n', '        buf.idx = end;\n', '    }\n', '\n', '    // return packed ints\n', '    function decPacked(Buffer memory buf) internal pure returns (uint[] memory t) {\n', '        uint len = decVarint(buf);\n', '        uint end = buf.idx + len;\n', '        require(end <= buf.b.length);  // avoid overflow\n', '        // array in memory must be init w/ known length\n', '        // so we have to create a tmp array w/ max possible len first\n', '        uint[] memory tmp = new uint[](len);\n', '        uint i = 0; // count how many ints are there\n', '        while (buf.idx < end) {\n', '            tmp[i] = decVarint(buf);\n', '            i++;\n', '        }\n', '        t = new uint[](i); // init t with correct length\n', '        for (uint j=0; j<i; j++) {\n', '            t[j] = tmp[j];\n', '        }\n', '        return t;\n', '    }\n', '\n', '    // move idx pass current value field, to beginning of next tag or msg end\n', '    function skipValue(Buffer memory buf, WireType wire) internal pure {\n', '        if (wire == WireType.Varint) { decVarint(buf); }\n', '        else if (wire == WireType.LengthDelim) {\n', '            uint len = decVarint(buf);\n', '            buf.idx += len; // skip len bytes value data\n', '            require(buf.idx <= buf.b.length);  // avoid overflow\n', '        } else { revert(); }  // unsupported wiretype\n', '    }\n', '\n', '    // type conversion help utils\n', '    function _bool(uint x) internal pure returns (bool v) {\n', '        return x != 0;\n', '    }\n', '\n', '    function _uint256(bytes memory b) internal pure returns (uint256 v) {\n', "        require(b.length <= 32);  // b's length must be smaller than or equal to 32\n", '        assembly { v := mload(add(b, 32)) }  // load all 32bytes to v\n', '        v = v >> (8 * (32 - b.length));  // only first b.length is valid\n', '    }\n', '\n', '    function _address(bytes memory b) internal pure returns (address v) {\n', '        v = _addressPayable(b);\n', '    }\n', '\n', '    function _addressPayable(bytes memory b) internal pure returns (address payable v) {\n', '        require(b.length == 20);\n', '        //load 32bytes then shift right 12 bytes\n', '        assembly { v := div(mload(add(b, 32)), 0x1000000000000000000000000) }\n', '    }\n', '\n', '    function _bytes32(bytes memory b) internal pure returns (bytes32 v) {\n', '        require(b.length == 32);\n', '        assembly { v := mload(add(b, 32)) }\n', '    }\n', '\n', '    // uint[] to uint8[]\n', '    function uint8s(uint[] memory arr) internal pure returns (uint8[] memory t) {\n', '        t = new uint8[](arr.length);\n', '        for (uint i = 0; i < t.length; i++) { t[i] = uint8(arr[i]); }\n', '    }\n', '\n', '    function uint32s(uint[] memory arr) internal pure returns (uint32[] memory t) {\n', '        t = new uint32[](arr.length);\n', '        for (uint i = 0; i < t.length; i++) { t[i] = uint32(arr[i]); }\n', '    }\n', '\n', '    function uint64s(uint[] memory arr) internal pure returns (uint64[] memory t) {\n', '        t = new uint64[](arr.length);\n', '        for (uint i = 0; i < t.length; i++) { t[i] = uint64(arr[i]); }\n', '    }\n', '\n', '    function bools(uint[] memory arr) internal pure returns (bool[] memory t) {\n', '        t = new bool[](arr.length);\n', '        for (uint i = 0; i < t.length; i++) { t[i] = arr[i]!=0; }\n', '    }\n', '}\n', '\n', '// File: contracts/lib/data/PbEntity.sol\n', '\n', '// Code generated by protoc-gen-sol. DO NOT EDIT.\n', '// source: entity.proto\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', 'library PbEntity {\n', '    using Pb for Pb.Buffer;  // so we can call Pb funcs on Buffer obj\n', '\n', '    enum TokenType { INVALID, ETH, ERC20 }\n', '\n', '    // TokenType[] decode function\n', '    function TokenTypes(uint[] memory arr) internal pure returns (TokenType[] memory t) {\n', '        t = new TokenType[](arr.length);\n', '        for (uint i = 0; i < t.length; i++) { t[i] = TokenType(arr[i]); }\n', '    }\n', '\n', '    enum TransferFunctionType { BOOLEAN_AND, BOOLEAN_OR, BOOLEAN_CIRCUIT, NUMERIC_ADD, NUMERIC_MAX, NUMERIC_MIN }\n', '\n', '    // TransferFunctionType[] decode function\n', '    function TransferFunctionTypes(uint[] memory arr) internal pure returns (TransferFunctionType[] memory t) {\n', '        t = new TransferFunctionType[](arr.length);\n', '        for (uint i = 0; i < t.length; i++) { t[i] = TransferFunctionType(arr[i]); }\n', '    }\n', '\n', '    enum ConditionType { HASH_LOCK, DEPLOYED_CONTRACT, VIRTUAL_CONTRACT }\n', '\n', '    // ConditionType[] decode function\n', '    function ConditionTypes(uint[] memory arr) internal pure returns (ConditionType[] memory t) {\n', '        t = new ConditionType[](arr.length);\n', '        for (uint i = 0; i < t.length; i++) { t[i] = ConditionType(arr[i]); }\n', '    }\n', '\n', '    struct AccountAmtPair {\n', '        address account;   // tag: 1\n', '        uint256 amt;   // tag: 2\n', '    } // end struct AccountAmtPair\n', '\n', '    function decAccountAmtPair(bytes memory raw) internal pure returns (AccountAmtPair memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.account = Pb._address(buf.decBytes());\n', '            }\n', '            else if (tag == 2) {\n', '                m.amt = Pb._uint256(buf.decBytes());\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder AccountAmtPair\n', '\n', '    struct TokenInfo {\n', '        TokenType tokenType;   // tag: 1\n', '        address tokenAddress;   // tag: 2\n', '    } // end struct TokenInfo\n', '\n', '    function decTokenInfo(bytes memory raw) internal pure returns (TokenInfo memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.tokenType = TokenType(buf.decVarint());\n', '            }\n', '            else if (tag == 2) {\n', '                m.tokenAddress = Pb._address(buf.decBytes());\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder TokenInfo\n', '\n', '    struct TokenDistribution {\n', '        TokenInfo token;   // tag: 1\n', '        AccountAmtPair[] distribution;   // tag: 2\n', '    } // end struct TokenDistribution\n', '\n', '    function decTokenDistribution(bytes memory raw) internal pure returns (TokenDistribution memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint[] memory cnts = buf.cntTags(2);\n', '        m.distribution = new AccountAmtPair[](cnts[2]);\n', '        cnts[2] = 0;  // reset counter for later use\n', '        \n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.token = decTokenInfo(buf.decBytes());\n', '            }\n', '            else if (tag == 2) {\n', '                m.distribution[cnts[2]] = decAccountAmtPair(buf.decBytes());\n', '                cnts[2]++;\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder TokenDistribution\n', '\n', '    struct TokenTransfer {\n', '        TokenInfo token;   // tag: 1\n', '        AccountAmtPair receiver;   // tag: 2\n', '    } // end struct TokenTransfer\n', '\n', '    function decTokenTransfer(bytes memory raw) internal pure returns (TokenTransfer memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.token = decTokenInfo(buf.decBytes());\n', '            }\n', '            else if (tag == 2) {\n', '                m.receiver = decAccountAmtPair(buf.decBytes());\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder TokenTransfer\n', '\n', '    struct SimplexPaymentChannel {\n', '        bytes32 channelId;   // tag: 1\n', '        address peerFrom;   // tag: 2\n', '        uint seqNum;   // tag: 3\n', '        TokenTransfer transferToPeer;   // tag: 4\n', '        PayIdList pendingPayIds;   // tag: 5\n', '        uint lastPayResolveDeadline;   // tag: 6\n', '        uint256 totalPendingAmount;   // tag: 7\n', '    } // end struct SimplexPaymentChannel\n', '\n', '    function decSimplexPaymentChannel(bytes memory raw) internal pure returns (SimplexPaymentChannel memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.channelId = Pb._bytes32(buf.decBytes());\n', '            }\n', '            else if (tag == 2) {\n', '                m.peerFrom = Pb._address(buf.decBytes());\n', '            }\n', '            else if (tag == 3) {\n', '                m.seqNum = uint(buf.decVarint());\n', '            }\n', '            else if (tag == 4) {\n', '                m.transferToPeer = decTokenTransfer(buf.decBytes());\n', '            }\n', '            else if (tag == 5) {\n', '                m.pendingPayIds = decPayIdList(buf.decBytes());\n', '            }\n', '            else if (tag == 6) {\n', '                m.lastPayResolveDeadline = uint(buf.decVarint());\n', '            }\n', '            else if (tag == 7) {\n', '                m.totalPendingAmount = Pb._uint256(buf.decBytes());\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder SimplexPaymentChannel\n', '\n', '    struct PayIdList {\n', '        bytes32[] payIds;   // tag: 1\n', '        bytes32 nextListHash;   // tag: 2\n', '    } // end struct PayIdList\n', '\n', '    function decPayIdList(bytes memory raw) internal pure returns (PayIdList memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint[] memory cnts = buf.cntTags(2);\n', '        m.payIds = new bytes32[](cnts[1]);\n', '        cnts[1] = 0;  // reset counter for later use\n', '        \n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.payIds[cnts[1]] = Pb._bytes32(buf.decBytes());\n', '                cnts[1]++;\n', '            }\n', '            else if (tag == 2) {\n', '                m.nextListHash = Pb._bytes32(buf.decBytes());\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder PayIdList\n', '\n', '    struct TransferFunction {\n', '        TransferFunctionType logicType;   // tag: 1\n', '        TokenTransfer maxTransfer;   // tag: 2\n', '    } // end struct TransferFunction\n', '\n', '    function decTransferFunction(bytes memory raw) internal pure returns (TransferFunction memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.logicType = TransferFunctionType(buf.decVarint());\n', '            }\n', '            else if (tag == 2) {\n', '                m.maxTransfer = decTokenTransfer(buf.decBytes());\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder TransferFunction\n', '\n', '    struct ConditionalPay {\n', '        uint payTimestamp;   // tag: 1\n', '        address src;   // tag: 2\n', '        address dest;   // tag: 3\n', '        Condition[] conditions;   // tag: 4\n', '        TransferFunction transferFunc;   // tag: 5\n', '        uint resolveDeadline;   // tag: 6\n', '        uint resolveTimeout;   // tag: 7\n', '        address payResolver;   // tag: 8\n', '    } // end struct ConditionalPay\n', '\n', '    function decConditionalPay(bytes memory raw) internal pure returns (ConditionalPay memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint[] memory cnts = buf.cntTags(8);\n', '        m.conditions = new Condition[](cnts[4]);\n', '        cnts[4] = 0;  // reset counter for later use\n', '        \n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.payTimestamp = uint(buf.decVarint());\n', '            }\n', '            else if (tag == 2) {\n', '                m.src = Pb._address(buf.decBytes());\n', '            }\n', '            else if (tag == 3) {\n', '                m.dest = Pb._address(buf.decBytes());\n', '            }\n', '            else if (tag == 4) {\n', '                m.conditions[cnts[4]] = decCondition(buf.decBytes());\n', '                cnts[4]++;\n', '            }\n', '            else if (tag == 5) {\n', '                m.transferFunc = decTransferFunction(buf.decBytes());\n', '            }\n', '            else if (tag == 6) {\n', '                m.resolveDeadline = uint(buf.decVarint());\n', '            }\n', '            else if (tag == 7) {\n', '                m.resolveTimeout = uint(buf.decVarint());\n', '            }\n', '            else if (tag == 8) {\n', '                m.payResolver = Pb._address(buf.decBytes());\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder ConditionalPay\n', '\n', '    struct CondPayResult {\n', '        bytes condPay;   // tag: 1\n', '        uint256 amount;   // tag: 2\n', '    } // end struct CondPayResult\n', '\n', '    function decCondPayResult(bytes memory raw) internal pure returns (CondPayResult memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.condPay = bytes(buf.decBytes());\n', '            }\n', '            else if (tag == 2) {\n', '                m.amount = Pb._uint256(buf.decBytes());\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder CondPayResult\n', '\n', '    struct VouchedCondPayResult {\n', '        bytes condPayResult;   // tag: 1\n', '        bytes sigOfSrc;   // tag: 2\n', '        bytes sigOfDest;   // tag: 3\n', '    } // end struct VouchedCondPayResult\n', '\n', '    function decVouchedCondPayResult(bytes memory raw) internal pure returns (VouchedCondPayResult memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.condPayResult = bytes(buf.decBytes());\n', '            }\n', '            else if (tag == 2) {\n', '                m.sigOfSrc = bytes(buf.decBytes());\n', '            }\n', '            else if (tag == 3) {\n', '                m.sigOfDest = bytes(buf.decBytes());\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder VouchedCondPayResult\n', '\n', '    struct Condition {\n', '        ConditionType conditionType;   // tag: 1\n', '        bytes32 hashLock;   // tag: 2\n', '        address deployedContractAddress;   // tag: 3\n', '        bytes32 virtualContractAddress;   // tag: 4\n', '        bytes argsQueryFinalization;   // tag: 5\n', '        bytes argsQueryOutcome;   // tag: 6\n', '    } // end struct Condition\n', '\n', '    function decCondition(bytes memory raw) internal pure returns (Condition memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.conditionType = ConditionType(buf.decVarint());\n', '            }\n', '            else if (tag == 2) {\n', '                m.hashLock = Pb._bytes32(buf.decBytes());\n', '            }\n', '            else if (tag == 3) {\n', '                m.deployedContractAddress = Pb._address(buf.decBytes());\n', '            }\n', '            else if (tag == 4) {\n', '                m.virtualContractAddress = Pb._bytes32(buf.decBytes());\n', '            }\n', '            else if (tag == 5) {\n', '                m.argsQueryFinalization = bytes(buf.decBytes());\n', '            }\n', '            else if (tag == 6) {\n', '                m.argsQueryOutcome = bytes(buf.decBytes());\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder Condition\n', '\n', '    struct CooperativeWithdrawInfo {\n', '        bytes32 channelId;   // tag: 1\n', '        uint seqNum;   // tag: 2\n', '        AccountAmtPair withdraw;   // tag: 3\n', '        uint withdrawDeadline;   // tag: 4\n', '        bytes32 recipientChannelId;   // tag: 5\n', '    } // end struct CooperativeWithdrawInfo\n', '\n', '    function decCooperativeWithdrawInfo(bytes memory raw) internal pure returns (CooperativeWithdrawInfo memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.channelId = Pb._bytes32(buf.decBytes());\n', '            }\n', '            else if (tag == 2) {\n', '                m.seqNum = uint(buf.decVarint());\n', '            }\n', '            else if (tag == 3) {\n', '                m.withdraw = decAccountAmtPair(buf.decBytes());\n', '            }\n', '            else if (tag == 4) {\n', '                m.withdrawDeadline = uint(buf.decVarint());\n', '            }\n', '            else if (tag == 5) {\n', '                m.recipientChannelId = Pb._bytes32(buf.decBytes());\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder CooperativeWithdrawInfo\n', '\n', '    struct PaymentChannelInitializer {\n', '        TokenDistribution initDistribution;   // tag: 1\n', '        uint openDeadline;   // tag: 2\n', '        uint disputeTimeout;   // tag: 3\n', '        uint msgValueReceiver;   // tag: 4\n', '    } // end struct PaymentChannelInitializer\n', '\n', '    function decPaymentChannelInitializer(bytes memory raw) internal pure returns (PaymentChannelInitializer memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.initDistribution = decTokenDistribution(buf.decBytes());\n', '            }\n', '            else if (tag == 2) {\n', '                m.openDeadline = uint(buf.decVarint());\n', '            }\n', '            else if (tag == 3) {\n', '                m.disputeTimeout = uint(buf.decVarint());\n', '            }\n', '            else if (tag == 4) {\n', '                m.msgValueReceiver = uint(buf.decVarint());\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder PaymentChannelInitializer\n', '\n', '    struct CooperativeSettleInfo {\n', '        bytes32 channelId;   // tag: 1\n', '        uint seqNum;   // tag: 2\n', '        AccountAmtPair[] settleBalance;   // tag: 3\n', '        uint settleDeadline;   // tag: 4\n', '    } // end struct CooperativeSettleInfo\n', '\n', '    function decCooperativeSettleInfo(bytes memory raw) internal pure returns (CooperativeSettleInfo memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint[] memory cnts = buf.cntTags(4);\n', '        m.settleBalance = new AccountAmtPair[](cnts[3]);\n', '        cnts[3] = 0;  // reset counter for later use\n', '        \n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.channelId = Pb._bytes32(buf.decBytes());\n', '            }\n', '            else if (tag == 2) {\n', '                m.seqNum = uint(buf.decVarint());\n', '            }\n', '            else if (tag == 3) {\n', '                m.settleBalance[cnts[3]] = decAccountAmtPair(buf.decBytes());\n', '                cnts[3]++;\n', '            }\n', '            else if (tag == 4) {\n', '                m.settleDeadline = uint(buf.decVarint());\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder CooperativeSettleInfo\n', '\n', '    struct ChannelMigrationInfo {\n', '        bytes32 channelId;   // tag: 1\n', '        address fromLedgerAddress;   // tag: 2\n', '        address toLedgerAddress;   // tag: 3\n', '        uint migrationDeadline;   // tag: 4\n', '    } // end struct ChannelMigrationInfo\n', '\n', '    function decChannelMigrationInfo(bytes memory raw) internal pure returns (ChannelMigrationInfo memory m) {\n', '        Pb.Buffer memory buf = Pb.fromBytes(raw);\n', '\n', '        uint tag;\n', '        Pb.WireType wire;\n', '        while (buf.hasMore()) {\n', '            (tag, wire) = buf.decKey();\n', '            if (false) {} // solidity has no switch/case\n', '            else if (tag == 1) {\n', '                m.channelId = Pb._bytes32(buf.decBytes());\n', '            }\n', '            else if (tag == 2) {\n', '                m.fromLedgerAddress = Pb._address(buf.decBytes());\n', '            }\n', '            else if (tag == 3) {\n', '                m.toLedgerAddress = Pb._address(buf.decBytes());\n', '            }\n', '            else if (tag == 4) {\n', '                m.migrationDeadline = uint(buf.decVarint());\n', '            }\n', '            else { buf.skipValue(wire); } // skip value of unknown tag\n', '        }\n', '    } // end decoder ChannelMigrationInfo\n', '\n', '}\n', '\n', '// File: contracts/lib/ledgerlib/LedgerStruct.sol\n', '\n', 'pragma solidity ^0.5.1;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Ledger Struct Library\n', ' * @notice CelerLedger library defining all used structs\n', ' */\n', 'library LedgerStruct {\n', '    enum ChannelStatus { Uninitialized, Operable, Settling, Closed, Migrated }\n', '\n', '    struct PeerState {\n', '        uint seqNum;\n', '        // balance sent out to the other peer of the channel, no need to record amtIn\n', '        uint transferOut;\n', '        bytes32 nextPayIdListHash;\n', '        uint lastPayResolveDeadline;\n', '        uint pendingPayOut;\n', '    }\n', '\n', '    struct PeerProfile {\n', '        address peerAddr;\n', '        // the (monotone increasing) amount that this peer deposit into this channel\n', '        uint deposit;\n', '        // the (monotone increasing) amount that this peer withdraw from this channel\n', '        uint withdrawal;\n', '        PeerState state;\n', '    }\n', '\n', '    struct WithdrawIntent {\n', '        address receiver;\n', '        uint amount;\n', '        uint requestTime;\n', '        bytes32 recipientChannelId;\n', '    }\n', '\n', '    // Channel is a representation of the state channel between peers which puts the funds\n', '    // in CelerWallet and is hosted by a CelerLedger. The status of a state channel can\n', '    // be migrated from one CelerLedger instance to another CelerLedger instance with probably\n', '    // different operation logic.\n', '    struct Channel {\n', '        // the time after which peers can confirmSettle and before which peers can intendSettle\n', '        uint settleFinalizedTime;\n', '        uint disputeTimeout;\n', '        PbEntity.TokenInfo token;\n', '        ChannelStatus status;\n', '        // record the new CelerLedger address after channel migration\n', '        address migratedTo;\n', '        // only support 2-peer channel for now\n', '        PeerProfile[2] peerProfiles;\n', '        uint cooperativeWithdrawSeqNum;\n', '        WithdrawIntent withdrawIntent;\n', '    }\n', '\n', '    // Ledger is a host to record and operate the activities of many state\n', '    // channels with specific operation logic.\n', '    struct Ledger {\n', '        // ChannelStatus => number of channels\n', '        mapping(uint => uint) channelStatusNums;\n', '        IEthPool ethPool;\n', '        IPayRegistry payRegistry;\n', '        ICelerWallet celerWallet;\n', '        // per channel deposit limits for different tokens\n', '        mapping(address => uint) balanceLimits;\n', '        // whether deposit limits of all tokens have been enabled\n', '        bool balanceLimitsEnabled;\n', '        mapping(bytes32 => Channel) channelMap;\n', '    }\n', '}\n', '\n', '// File: contracts/lib/ledgerlib/LedgerBalanceLimit.sol\n', '\n', 'pragma solidity ^0.5.1;\n', '\n', '\n', '/**\n', ' * @title Ledger Balance Limit Library\n', ' * @notice CelerLedger library about balance limits\n', ' */\n', 'library LedgerBalanceLimit {\n', '    /**\n', '     * @notice Set the balance limits of given tokens\n', '     * @param _self storage data of CelerLedger contract\n', '     * @param _tokenAddrs addresses of the tokens (address(0) is for ETH)\n', '     * @param _limits balance limits of the tokens\n', '     */\n', '    function setBalanceLimits(\n', '        LedgerStruct.Ledger storage _self,\n', '        address[] calldata _tokenAddrs,\n', '        uint[] calldata _limits\n', '    )\n', '        external\n', '    {\n', '        require(_tokenAddrs.length == _limits.length, "Lengths do not match");\n', '        for (uint i = 0; i < _tokenAddrs.length; i++) {\n', '            _self.balanceLimits[_tokenAddrs[i]] = _limits[i];\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Disable balance limits of all tokens\n', '     * @param _self storage data of CelerLedger contract\n', '     */\n', '    function disableBalanceLimits(LedgerStruct.Ledger storage _self) external {\n', '        _self.balanceLimitsEnabled = false;\n', '    }\n', '\n', '    /**\n', '     * @notice Enable balance limits of all tokens\n', '     * @param _self storage data of CelerLedger contract\n', '     */\n', '    function enableBalanceLimits(LedgerStruct.Ledger storage _self) external {\n', '        _self.balanceLimitsEnabled = true;\n', '    }\n', '\n', '    /**\n', '     * @notice Return balance limit of given token\n', '     * @param _self storage data of CelerLedger contract\n', '     * @param _tokenAddr query token address\n', '     * @return token balance limit\n', '     */\n', '    function getBalanceLimit(\n', '        LedgerStruct.Ledger storage _self,\n', '        address _tokenAddr\n', '    )\n', '        external\n', '        view\n', '        returns(uint)\n', '    {\n', '        return _self.balanceLimits[_tokenAddr];\n', '    }\n', '\n', '    /**\n', '     * @notice Return balanceLimitsEnabled\n', '     * @param _self storage data of CelerLedger contract\n', '     * @return balanceLimitsEnabled\n', '     */\n', '    function getBalanceLimitsEnabled(LedgerStruct.Ledger storage _self) external view returns(bool) {\n', '        return _self.balanceLimitsEnabled;\n', '    }\n', '}']