['pragma solidity 0.5.7;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', 'contract IHumanity {\n', '    function mint(address account, uint256 value) public;\n', '    function totalSupply() public view returns (uint256);\n', '}\n', '\n', '\n', '/**\n', ' * @title HumanityRegistry\n', ' * @dev A list of Ethereum addresses that belong to unique humans as determined by Humanity governance.\n', ' */\n', 'contract HumanityRegistry {\n', '\n', '    mapping (address => bool) public humans;\n', '\n', '    IHumanity public humanity;\n', '    address public governance;\n', '\n', '    constructor(IHumanity _humanity, address _governance) public {\n', '        humanity = _humanity;\n', '        governance = _governance;\n', '    }\n', '\n', '    function add(address who) public {\n', '        require(msg.sender == governance, "HumanityRegistry::add: Only governance can add an identity");\n', '        require(humans[who] == false, "HumanityRegistry::add: Address is already on the registry");\n', '\n', '        _reward(who);\n', '        humans[who] = true;\n', '    }\n', '\n', '    function remove(address who) public {\n', '        require(\n', '            msg.sender == governance || msg.sender == who,\n', '            "HumanityRegistry::remove: Only governance or the identity owner can remove an identity"\n', '        );\n', '        delete humans[who];\n', '    }\n', '\n', '    function isHuman(address who) public view returns (bool) {\n', '        return humans[who];\n', '    }\n', '\n', '    function _reward(address who) internal {\n', '        uint totalSupply = humanity.totalSupply();\n', '\n', '        if (totalSupply < 28000000e18) {\n', '            humanity.mint(who, 30000e18); // 1 - 100\n', '        } else if (totalSupply < 46000000e18) {\n', '            humanity.mint(who, 20000e18); // 101 - 1000\n', '        } else if (totalSupply < 100000000e18) {\n', '            humanity.mint(who, 6000e18); // 1001 - 10000\n', '        }\n', '\n', '    }\n', '\n', '}']