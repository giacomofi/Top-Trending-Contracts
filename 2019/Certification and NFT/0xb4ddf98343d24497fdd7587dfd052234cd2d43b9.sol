['// File: contracts/interfaces/IERC173.sol\n', '\n', 'pragma solidity ^0.5.7;\n', '\n', 'contract ProxyStorage {\n', '    address powner;\n', '    address pimplementation;\n', '}\n', '\n', '/// @title ERC-173 Contract Ownership Standard\n', '/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-173.md\n', '///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\n', 'contract IERC173 {\n', '    /// @dev This emits when ownership of a contract changes.\n', '    event OwnershipTransferred(address indexed _previousOwner, address indexed _newOwner);\n', '\n', '    /// @notice Get the address of the owner\n', '    /// @return The address of the owner.\n', '    //// function owner() external view returns (address);\n', '\n', '    /// @notice Set the address of the new owner of the contract\n', '    /// @param _newOwner The address of the new owner of the contract\n', '    function transferOwnership(address _newOwner) external;\n', '}\n', '\n', '// File: contracts/commons/Ownable.sol\n', '\n', 'pragma solidity ^0.5.7;\n', '\n', '\n', '\n', 'contract Ownable is ProxyStorage, IERC173 {\n', '    modifier onlyOwner() {\n', '        require(msg.sender == powner, "The owner should be the sender");\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        powner = msg.sender;\n', '        emit OwnershipTransferred(address(0x0), msg.sender);\n', '    }\n', '\n', '    function owner() external view returns (address) {\n', '        return powner;\n', '    }\n', '\n', '    /**\n', '        @dev Transfers the ownership of the contract.\n', '\n', '        @param _newOwner Address of the new owner\n', '    */\n', '    function transferOwnership(address _newOwner) external onlyOwner {\n', '        require(_newOwner != address(0), "0x0 Is not a valid owner");\n', '        emit OwnershipTransferred(powner, _newOwner);\n', '        powner = _newOwner;\n', '    }\n', '}\n', '\n', '\n', 'contract Proxy is ProxyStorage, Ownable {\n', '    event SetImplementation(address _prev, address _new);\n', '\n', '    function implementation() external view returns (address) {\n', '        return pimplementation;\n', '    }\n', '\n', '    function setImplementation(address _implementation) external onlyOwner {\n', '        emit SetImplementation(pimplementation, _implementation);\n', '        pimplementation = _implementation;\n', '    }\n', '    \n', '    function() external {\n', '        address _impl = pimplementation;\n', '        assembly {\n', '            let ptr := mload(0x40)\n', '            calldatacopy(ptr, 0, calldatasize)\n', '            let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\n', '            let size := returndatasize\n', '            returndatacopy(ptr, 0, size)\n', '\n', '            if iszero(result) {\n', '                revert(ptr, size)\n', '            }\n', '\n', '            return(ptr, size)\n', '        }\n', '    }\n', '}']