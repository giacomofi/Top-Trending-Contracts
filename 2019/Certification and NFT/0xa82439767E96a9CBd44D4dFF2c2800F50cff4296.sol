['/**\n', ' *Submitted for verification at Etherscan.io on 2019-07-10\n', '*/\n', '\n', '/**\n', '\n', '██╗    ██╗██████╗ ███████╗███╗   ███╗ █████╗ ██████╗ ████████╗ ██████╗ ██████╗ ███╗   ██╗████████╗██████╗  █████╗  ██████╗████████╗███████╗    ██████╗ ██████╗ ███╗   ███╗\n', '██║    ██║██╔══██╗██╔════╝████╗ ████║██╔══██╗██╔══██╗╚══██╔══╝██╔════╝██╔═══██╗████╗  ██║╚══██╔══╝██╔══██╗██╔══██╗██╔════╝╚══██╔══╝██╔════╝   ██╔════╝██╔═══██╗████╗ ████║\n', '██║ █╗ ██║██████╔╝███████╗██╔████╔██║███████║██████╔╝   ██║   ██║     ██║   ██║██╔██╗ ██║   ██║   ██████╔╝███████║██║        ██║   ███████╗   ██║     ██║   ██║██╔████╔██║\n', '██║███╗██║██╔═══╝ ╚════██║██║╚██╔╝██║██╔══██║██╔══██╗   ██║   ██║     ██║   ██║██║╚██╗██║   ██║   ██╔══██╗██╔══██║██║        ██║   ╚════██║   ██║     ██║   ██║██║╚██╔╝██║\n', '╚███╔███╔╝██║     ███████║██║ ╚═╝ ██║██║  ██║██║  ██║   ██║   ╚██████╗╚██████╔╝██║ ╚████║   ██║   ██║  ██║██║  ██║╚██████╗   ██║   ███████║██╗╚██████╗╚██████╔╝██║ ╚═╝ ██║\n', ' ╚══╝╚══╝ ╚═╝     ╚══════╝╚═╝     ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝    ╚═════╝ ╚═════╝ ╚═╝  ╚═══╝   ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝   ╚═╝   ╚══════╝╚═╝ ╚═════╝ ╚═════╝ ╚═╝     ╚═╝\n', '\n', 'Blockhain Made Easy\n', '\n', 'https://wpsmartcontracts.com/\n', '\n', '*/\n', '\n', 'pragma solidity ^0.5.7;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    \n', '    int256 constant private INT256_MIN = -2**255;\n', '\n', '    /**\n', '    * @dev Multiplies two unsigned integers, reverts on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Gas optimization: this is cheaper than requiring &#39;a&#39; not being zero, but the\n', '        // benefit is lost if &#39;b&#39; is also tested.\n', '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Multiplies two signed integers, reverts on overflow.\n', '    */\n', '    function mul(int256 a, int256 b) internal pure returns (int256) {\n', '        // Gas optimization: this is cheaper than requiring &#39;a&#39; not being zero, but the\n', '        // benefit is lost if &#39;b&#39; is also tested.\n', '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        require(!(a == -1 && b == INT256_MIN)); // This is the only case of overflow not detected by the check below\n', '\n', '        int256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(int256 a, int256 b) internal pure returns (int256) {\n', '        require(b != 0); // Solidity only automatically asserts when dividing by 0\n', '        require(!(b == -1 && a == INT256_MIN)); // This is the only case of overflow\n', '\n', '        int256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two signed integers, reverts on overflow.\n', '    */\n', '    function sub(int256 a, int256 b) internal pure returns (int256) {\n', '        int256 c = a - b;\n', '        require((b >= 0 && c <= a) || (b < 0 && c > a));\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two unsigned integers, reverts on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two signed integers, reverts on overflow.\n', '    */\n', '    function add(int256 a, int256 b) internal pure returns (int256) {\n', '        int256 c = a + b;\n', '        require((b >= 0 && c >= a) || (b < 0 && c < a));\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' *\n', ' * WPSmartContracts / Campaign Contract\n', ' *\n', ' * Contribution campaigns including the ability to approve the transfer of funds per request\n', ' *\n', ' */\n', '\n', 'contract CampaignMango {\n', '\n', '    using SafeMath for uint256;\n', '    \n', '    // this is a struct definition, that needs to be instantiated to be used... like classes.\n', '    struct Request {\n', '        string description;\n', '        uint256 value;\n', '        address payable recipient;\n', '        bool complete;\n', '        uint256 approvalCount;\n', '        mapping(address => bool) approvals;\n', '    }\n', '    \n', '    Request[] public requests; // this is the instance of the struct, like an array of Request\n', '    address public manager; // the owner\n', '    uint256 minimumContribution; // the... minimum contribution\n', '\n', '    /*\n', '        a factor to calculate minimum number of approvers by 100/factor\n', '        the factor values are 2 and 10, factors that makes sense:\n', '            2: meaning that the number or approvers required will be 50%\n', '            3: 33.3%\n', '            4: 25%\n', '            5: 20%\n', '            10: 10%\n', '    */\n', '    uint8 approversFactor; \n', '    \n', '    mapping(address => bool) public approvers;\n', '    uint256 public approversCount;\n', '\n', '    // a modifier of functions to add validation of the manager to run any function\n', '    modifier restricted() {\n', '        require(msg.sender == manager);\n', '        _;\n', '    }\n', '\n', '    // Constructor function to create a Campaign\n', '    constructor(address creator, uint256 minimum, uint8 factor) public {\n', '        // validate factor number betweeb 2 and 10\n', '        require(factor >= 2);\n', '        require(factor <= 10);\n', '        manager = creator;\n', '        approversFactor = factor;\n', '        minimumContribution = minimum;\n', '    }\n', '    \n', '    // allows a contributor to contribute\n', '    function contribute() public payable {\n', '        // validate minimun contribution\n', '        require(msg.value >= minimumContribution);\n', '        \n', '        // approvers.push(msg.sender); // array was changed to mappings\n', '        approvers[msg.sender] = true; // this maps this address with true\n', '        \n', '        // increment the number of approvers\n', '        approversCount++; \n', '    }\n', '\n', '    // create a request... \n', '    function createRequest(string memory description, uint256 value, address payable recipient) public restricted {\n', '    \n', '        // create the struct, specifying memory as a holder\n', '        Request memory newRequest = Request({ \n', '           description: description, \n', '           value: value, \n', '           recipient: recipient,\n', '           complete: false,\n', '           approvalCount: 0\n', '        });\n', '        \n', '        requests.push(newRequest);\n', '        \n', '    }\n', '    \n', '    // contributors has the right to approve request\n', '    function approveRequest(uint256 index) public {\n', '        \n', '        // this is to store in a local variable "request" the request[index] and avoid using it all the time\n', '        // storage means that we want the same copy inside of storage?, WTF?\n', '        // Request means to a Request struct defined at the beginning\n', '        Request storage request = requests[index];\n', '        \n', '        // if will require that the sender address is in the mapping of approvers\n', '        // if not will exit the function inmediatly\n', '        require(approvers[msg.sender]);\n', '        \n', '        // it will require the contributor not to vote twice for the same request\n', '        require(!request.approvals[msg.sender]);\n', '        \n', '        // add the voter to the approvals map\n', '        request.approvals[msg.sender] = true;\n', '        \n', '        // increment the number of YES votes for the request\n', '        request.approvalCount++;\n', '        \n', '    }\n', '    \n', '    // send the money to the vendor y there are enough votes\n', '    // restricted means that only the creator is allowed to run this function\n', '    function finalizeRequest(uint256 index) public restricted {\n', '        \n', '        // this is to store in a local variable "request" the request[index] and avoid using it all the time\n', '        // storage means that we want the same copy inside of storage?, WTF?\n', '        // Request means to a Request struct defined at the beginning\n', '        Request storage request = requests[index];\n', '\n', '        // transfer the money if it has more than X% of approvals\n', '        require(request.approvalCount >= approversCount.div(approversFactor)); \n', '        \n', '        // we will require that the request in process is not completed yet\n', '        require(!request.complete);\n', '        \n', '        // mark the request as completed\n', '        request.complete = true;\n', '        \n', '        // transfer the money requested (value) from the contract to the vendor that created the request\n', '        request.recipient.transfer(request.value);\n', '        \n', '    }\n', '\n', '    // helper function to show basic info of a contract in the interface\n', '    function getSummary() public view returns (\n', '      uint256, uint256, uint256, uint256, address\n', '      ) {\n', '        return (\n', '          minimumContribution,\n', '          address(this).balance,\n', '          requests.length,\n', '          approversCount,\n', '          manager\n', '        );\n', '    }\n', '\n', '    // for looping?\n', '    function getRequestsCount() public view returns (uint256) {\n', '        return requests.length;\n', '    }   \n', '\n', '}']