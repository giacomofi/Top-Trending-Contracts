['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address private _owner;\n', '\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() internal {\n', '    _owner = msg.sender;\n', '    emit OwnershipTransferred(address(0), _owner);\n', '  }\n', '\n', '  /**\n', '   * @return the address of the owner.\n', '   */\n', '  function owner() public view returns(address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(isOwner());\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @return true if `msg.sender` is the owner of the contract.\n', '   */\n', '  function isOwner() public view returns(bool) {\n', '    return msg.sender == _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipTransferred(_owner, address(0));\n', '    _owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    _transferOwnership(newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address newOwner) internal {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function balanceOf(address who) external view returns (uint256);\n', '\n', '  function allowance(address owner, address spender)\n', '    external view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '\n', '  function approve(address spender, uint256 value)\n', '    external returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    external returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title ERC20Detailed token\n', ' * @dev The decimals are only for visualization purposes.\n', ' * All the operations are done using the smallest and indivisible token unit,\n', ' * just as on Ethereum all the operations are done in wei.\n', ' */\n', 'contract ERC20Detailed is IERC20 {\n', '  string private _name;\n', '  string private _symbol;\n', '  uint8 private _decimals;\n', '\n', '  constructor(string name, string symbol, uint8 decimals) public {\n', '    _name = name;\n', '    _symbol = symbol;\n', '    _decimals = decimals;\n', '  }\n', '\n', '  /**\n', '   * @return the name of the token.\n', '   */\n', '  function name() public view returns(string) {\n', '    return _name;\n', '  }\n', '\n', '  /**\n', '   * @return the symbol of the token.\n', '   */\n', '  function symbol() public view returns(string) {\n', '    return _symbol;\n', '  }\n', '\n', '  /**\n', '   * @return the number of decimals of the token.\n', '   */\n', '  function decimals() public view returns(uint8) {\n', '    return _decimals;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', ' * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract ERC20 is IERC20 {\n', '  using SafeMath for uint256;\n', '\n', '  mapping (address => uint256) private _balances;\n', '\n', '  mapping (address => mapping (address => uint256)) private _allowed;\n', '\n', '  uint256 private _totalSupply;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param owner The address to query the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address owner) public view returns (uint256) {\n', '    return _balances[owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param owner address The address which owns the funds.\n', '   * @param spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address owner,\n', '    address spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return _allowed[owner][spender];\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param to The address to transfer to.\n', '  * @param value The amount to be transferred.\n', '  */\n', '  function transfer(address to, uint256 value) public returns (bool) {\n', '    _transfer(msg.sender, to, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param spender The address which will spend the funds.\n', '   * @param value The amount of tokens to be spent.\n', '   */\n', '  function approve(address spender, uint256 value) public returns (bool) {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = value;\n', '    emit Approval(msg.sender, spender, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param from address The address which you want to send tokens from\n', '   * @param to address The address which you want to transfer to\n', '   * @param value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(value <= _allowed[from][msg.sender]);\n', '\n', '    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '    _transfer(from, to, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed_[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param spender The address which will spend the funds.\n', '   * @param addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseAllowance(\n', '    address spender,\n', '    uint256 addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = (\n', '      _allowed[msg.sender][spender].add(addedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed_[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param spender The address which will spend the funds.\n', '   * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseAllowance(\n', '    address spender,\n', '    uint256 subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(spender != address(0));\n', '\n', '    _allowed[msg.sender][spender] = (\n', '      _allowed[msg.sender][spender].sub(subtractedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified addresses\n', '  * @param from The address to transfer from.\n', '  * @param to The address to transfer to.\n', '  * @param value The amount to be transferred.\n', '  */\n', '  function _transfer(address from, address to, uint256 value) internal {\n', '    require(value <= _balances[from]);\n', '    require(to != address(0));\n', '\n', '    _balances[from] = _balances[from].sub(value);\n', '    _balances[to] = _balances[to].add(value);\n', '    emit Transfer(from, to, value);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that mints an amount of the token and assigns it to\n', '   * an account. This encapsulates the modification of balances such that the\n', '   * proper events are emitted.\n', '   * @param account The account that will receive the created tokens.\n', '   * @param value The amount that will be created.\n', '   */\n', '  function _mint(address account, uint256 value) internal {\n', '    require(account != 0);\n', '    _totalSupply = _totalSupply.add(value);\n', '    _balances[account] = _balances[account].add(value);\n', '    emit Transfer(address(0), account, value);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that burns an amount of the token of a given\n', '   * account.\n', '   * @param account The account whose tokens will be burnt.\n', '   * @param value The amount that will be burnt.\n', '   */\n', '  function _burn(address account, uint256 value) internal {\n', '    require(account != 0);\n', '    require(value <= _balances[account]);\n', '\n', '    _totalSupply = _totalSupply.sub(value);\n', '    _balances[account] = _balances[account].sub(value);\n', '    emit Transfer(account, address(0), value);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function that burns an amount of the token of a given\n', "   * account, deducting from the sender's allowance for said account. Uses the\n", '   * internal burn function.\n', '   * @param account The account whose tokens will be burnt.\n', '   * @param value The amount that will be burnt.\n', '   */\n', '  function _burnFrom(address account, uint256 value) internal {\n', '    require(value <= _allowed[account][msg.sender]);\n', '\n', '    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n', '    // this function needs to emit an event with the updated approval.\n', '    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n', '      value);\n', '    _burn(account, value);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '  struct Role {\n', '    mapping (address => bool) bearer;\n', '  }\n', '\n', '  /**\n', '   * @dev give an account access to this role\n', '   */\n', '  function add(Role storage role, address account) internal {\n', '    require(account != address(0));\n', '    require(!has(role, account));\n', '\n', '    role.bearer[account] = true;\n', '  }\n', '\n', '  /**\n', "   * @dev remove an account's access to this role\n", '   */\n', '  function remove(Role storage role, address account) internal {\n', '    require(account != address(0));\n', '    require(has(role, account));\n', '\n', '    role.bearer[account] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev check if an account has this role\n', '   * @return bool\n', '   */\n', '  function has(Role storage role, address account)\n', '    internal\n', '    view\n', '    returns (bool)\n', '  {\n', '    require(account != address(0));\n', '    return role.bearer[account];\n', '  }\n', '}\n', '\n', 'contract PauserRole {\n', '  using Roles for Roles.Role;\n', '\n', '  event PauserAdded(address indexed account);\n', '  event PauserRemoved(address indexed account);\n', '\n', '  Roles.Role private pausers;\n', '\n', '  constructor() internal {\n', '    _addPauser(msg.sender);\n', '  }\n', '\n', '  modifier onlyPauser() {\n', '    require(isPauser(msg.sender));\n', '    _;\n', '  }\n', '\n', '  function isPauser(address account) public view returns (bool) {\n', '    return pausers.has(account);\n', '  }\n', '\n', '  function addPauser(address account) public onlyPauser {\n', '    _addPauser(account);\n', '  }\n', '\n', '  function renouncePauser() public {\n', '    _removePauser(msg.sender);\n', '  }\n', '\n', '  function _addPauser(address account) internal {\n', '    pausers.add(account);\n', '    emit PauserAdded(account);\n', '  }\n', '\n', '  function _removePauser(address account) internal {\n', '    pausers.remove(account);\n', '    emit PauserRemoved(account);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is PauserRole {\n', '  event Paused(address account);\n', '  event Unpaused(address account);\n', '\n', '  bool private _paused;\n', '\n', '  constructor() internal {\n', '    _paused = false;\n', '  }\n', '\n', '  /**\n', '   * @return true if the contract is paused, false otherwise.\n', '   */\n', '  function paused() public view returns(bool) {\n', '    return _paused;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!_paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(_paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() public onlyPauser whenNotPaused {\n', '    _paused = true;\n', '    emit Paused(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() public onlyPauser whenPaused {\n', '    _paused = false;\n', '    emit Unpaused(msg.sender);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev ERC20 modified with pausable transfers.\n', ' **/\n', 'contract ERC20Pausable is ERC20, Pausable {\n', '\n', '  function transfer(\n', '    address to,\n', '    uint256 value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transfer(to, value);\n', '  }\n', '\n', '  function transferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transferFrom(from, to, value);\n', '  }\n', '\n', '  function approve(\n', '    address spender,\n', '    uint256 value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.approve(spender, value);\n', '  }\n', '\n', '  function increaseAllowance(\n', '    address spender,\n', '    uint addedValue\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool success)\n', '  {\n', '    return super.increaseAllowance(spender, addedValue);\n', '  }\n', '\n', '  function decreaseAllowance(\n', '    address spender,\n', '    uint subtractedValue\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool success)\n', '  {\n', '    return super.decreaseAllowance(spender, subtractedValue);\n', '  }\n', '}\n', '\n', 'contract SignkeysToken is ERC20Pausable, ERC20Detailed, Ownable {\n', '\n', '    uint8 public constant DECIMALS = 18;\n', '\n', '    uint256 public constant INITIAL_SUPPLY = 2E9 * (10 ** uint256(DECIMALS));\n', '\n', '    /* Address where fees will be transferred */\n', '    address public feeChargingAddress;\n', '\n', '    /* Nonces */\n', '    mapping(address => uint256) public nonces;\n', '\n', '    function setFeeChargingAddress(address _feeChargingAddress) external onlyOwner {\n', '        feeChargingAddress = _feeChargingAddress;\n', '        emit FeeChargingAddressChanges(_feeChargingAddress);\n', '    }\n', '\n', '    /* Fee charging address changed */\n', '    event FeeChargingAddressChanges(address newFeeChargingAddress);\n', '\n', '    /**\n', '     * @dev Constructor that gives msg.sender all of existing tokens.\n', '     */\n', '    constructor() public ERC20Detailed("SignkeysToken", "KEYS", DECIMALS) {\n', '        _mint(owner(), INITIAL_SUPPLY);\n', '    }\n', '\n', '    function transferWithSignature(\n', '        address from,\n', '        address to,\n', '        uint256 amount,\n', '        uint256 feeAmount,\n', '        uint256 nonce,\n', '        uint256 expiration,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s) public {\n', '        require(expiration >= now, "Signature expired");\n', '        require(feeChargingAddress != 0x0, "Fee charging address must be set");\n', '\n', '        address receivedSigner = ecrecover(\n', '            keccak256(\n', '                abi.encodePacked(\n', '                    from, to, amount, feeAmount, nonce, expiration\n', '                )\n', '            ), v, r, s);\n', '\n', '        require(nonce > nonces[from], "Wrong nonce");\n', '        nonces[from] = nonce;\n', '\n', '        require(receivedSigner == from, "Something wrong with signature");\n', '        _transfer(from, to, amount);\n', '        _transfer(from, feeChargingAddress, feeAmount);\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _data) public payable returns (bool success) {\n', '        require(_spender != address(this));\n', '        require(super.approve(_spender, _value));\n', '        require(_spender.call(_data));\n', '        return true;\n', '    }\n', '\n', '    function() payable external {\n', '        revert();\n', '    }\n', '}\n', '\n', 'contract SignkeysBonusProgram is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    /* Token contract */\n', '    SignkeysToken public token;\n', '\n', '    /* Crowdsale contract */\n', '    SignkeysCrowdsale public crowdsale;\n', '\n', '    /* SignkeysBonusProgramRewards contract to keep bonus state */\n', '    SignkeysBonusProgramRewards public bonusProgramRewards;\n', '\n', '    /* Ranges in which we transfer the given amount of tokens as reward. See arrays below.\n', '     For example, if this array is [199, 1000, 10000] and referrerRewards array is [5, 50],\n', '       it considers as follows:\n', '       [0, 199] - 0 tokens\n', '       [200, 1000] - 5 tokens\n', '       [1001, 10000] - 50 tokens,\n', '       > 10000 - 50 tokens\n', '       */\n', '    uint256[] public referralBonusTokensAmountRanges = [199, 1000, 10000, 100000, 1000000, 10000000];\n', '\n', '    /* Amount of tokens as bonus for referrer according to referralBonusTokensAmountRanges */\n', '    uint256[] public referrerRewards = [5, 50, 500, 5000, 50000];\n', '\n', '    /* Amount of tokens as bonus for buyer according to referralBonusTokensAmountRanges */\n', '    uint256[] public buyerRewards = [5, 50, 500, 5000, 50000];\n', '\n', '    /* Purchase amount ranges in cents for any purchase.\n', '     For example, if this array is [2000, 1000000, 10000000] and purchaseRewardsPercents array is [10, 15, 20],\n', '       it considers as follows:\n', '       [2000, 1000000) - 10% of tokens\n', '       [1000000, 10000000) - 15% of tokens\n', '       > 100000000 - 20% tokens\n', '       */\n', '    uint256[] public purchaseAmountRangesInCents = [2000, 1000000, 10000000];\n', '\n', '    /* Percetage of reward for any purchase according to purchaseAmountRangesInCents */\n', '    uint256[] public purchaseRewardsPercents = [10, 15, 20];\n', '\n', '    event BonusSent(\n', '        address indexed referrerAddress,\n', '        uint256 referrerBonus,\n', '        address indexed buyerAddress,\n', '        uint256 buyerBonus,\n', '        uint256 purchaseBonus,\n', '        uint256 couponBonus\n', '    );\n', '\n', '    constructor(address _token, address _bonusProgramRewards) public {\n', '        token = SignkeysToken(_token);\n', '        bonusProgramRewards = SignkeysBonusProgramRewards(_bonusProgramRewards);\n', '    }\n', '\n', '    function setCrowdsaleContract(address _crowdsale) public onlyOwner {\n', '        crowdsale = SignkeysCrowdsale(_crowdsale);\n', '    }\n', '\n', '    function setBonusProgramRewardsContract(address _bonusProgramRewards) public onlyOwner {\n', '        bonusProgramRewards = SignkeysBonusProgramRewards(_bonusProgramRewards);\n', '    }\n', '\n', '    /* Calculate bonus for the given amount of tokens according to referralBonusTokensAmountRanges\n', '    and rewards array which is one of referrerRewards or buyerRewards */\n', '    function calcBonus(uint256 tokensAmount, uint256[] rewards) private view returns (uint256) {\n', '        uint256 multiplier = 10 ** uint256(token.decimals());\n', '        if (tokensAmount <= multiplier.mul(referralBonusTokensAmountRanges[0])) {\n', '            return 0;\n', '        }\n', '        for (uint i = 1; i < referralBonusTokensAmountRanges.length; i++) {\n', '            uint min = referralBonusTokensAmountRanges[i - 1];\n', '            uint max = referralBonusTokensAmountRanges[i];\n', '            if (tokensAmount > min.mul(multiplier) && tokensAmount <= max.mul(multiplier)) {\n', '                return multiplier.mul(rewards[i - 1]);\n', '            }\n', '        }\n', '        if (tokensAmount >= referralBonusTokensAmountRanges[referralBonusTokensAmountRanges.length - 1].mul(multiplier)) {\n', '            return multiplier.mul(rewards[rewards.length - 1]);\n', '        }\n', '    }\n', '\n', '    function calcPurchaseBonus(uint256 amountCents, uint256 tokensAmount) private view returns (uint256) {\n', '        if (amountCents < purchaseAmountRangesInCents[0]) {\n', '            return 0;\n', '        }\n', '        for (uint i = 1; i < purchaseAmountRangesInCents.length; i++) {\n', '            if (amountCents >= purchaseAmountRangesInCents[i - 1] && amountCents < purchaseAmountRangesInCents[i]) {\n', '                return tokensAmount.mul(purchaseRewardsPercents[i - 1]).div(100);\n', '            }\n', '        }\n', '        if (amountCents >= purchaseAmountRangesInCents[purchaseAmountRangesInCents.length - 1]) {\n', '            return tokensAmount.mul(purchaseRewardsPercents[purchaseAmountRangesInCents.length - 1]).div(100);\n', '        }\n', '    }\n', '\n', '    /* Having referrer, buyer, amount of purchased tokens, value of purchased tokens in cents and coupon campaign id\n', '    this method transfer all the required bonuses to referrer and buyer */\n', '    function sendBonus(address referrer, address buyer, uint256 _tokensAmount, uint256 _valueCents, uint256 _couponCampaignId) external returns (uint256)  {\n', '        require(msg.sender == address(crowdsale), "Bonus may be sent only by crowdsale contract");\n', '\n', '        uint256 referrerBonus = 0;\n', '        uint256 buyerBonus = 0;\n', '        uint256 purchaseBonus = 0;\n', '        uint256 couponBonus = 0;\n', '\n', '        uint256 referrerBonusAmount = calcBonus(_tokensAmount, referrerRewards);\n', '        uint256 buyerBonusAmount = calcBonus(_tokensAmount, buyerRewards);\n', '        uint256 purchaseBonusAmount = calcPurchaseBonus(_valueCents, _tokensAmount);\n', '\n', '        if (referrer != 0x0 && !bonusProgramRewards.areReferralBonusesSent(buyer)) {\n', '            if (referrerBonusAmount > 0 && token.balanceOf(this) > referrerBonusAmount) {\n', '                token.transfer(referrer, referrerBonusAmount);\n', '                bonusProgramRewards.setReferralBonusesSent(buyer, true);\n', '                referrerBonus = referrerBonusAmount;\n', '            }\n', '\n', '            if (buyerBonusAmount > 0 && token.balanceOf(this) > buyerBonusAmount) {\n', '                bonusProgramRewards.setReferralBonusesSent(buyer, true);\n', '                buyerBonus = buyerBonusAmount;\n', '            }\n', '        }\n', '\n', '        if (token.balanceOf(this) > purchaseBonusAmount.add(buyerBonus)) {\n', '            purchaseBonus = purchaseBonusAmount;\n', '        }\n', '\n', '        if (_couponCampaignId > 0 && !bonusProgramRewards.isCouponUsed(buyer, _couponCampaignId)) {\n', '            if (\n', '                token.balanceOf(this) > purchaseBonusAmount\n', '                .add(buyerBonus)\n', '                .add(bonusProgramRewards.getCouponCampaignBonusTokensAmount(_couponCampaignId))\n', '            ) {\n', '                bonusProgramRewards.setCouponUsed(buyer, _couponCampaignId, true);\n', '                couponBonus = bonusProgramRewards.getCouponCampaignBonusTokensAmount(_couponCampaignId);\n', '            }\n', '        }\n', '\n', '        if (buyerBonus > 0 || purchaseBonus > 0 || couponBonus > 0) {\n', '            token.transfer(buyer, buyerBonus.add(purchaseBonus).add(couponBonus));\n', '        }\n', '\n', '        emit BonusSent(referrer, referrerBonus, buyer, buyerBonus, purchaseBonus, couponBonus);\n', '    }\n', '\n', '    function getReferralBonusTokensAmountRanges() public view returns (uint256[]) {\n', '        return referralBonusTokensAmountRanges;\n', '    }\n', '\n', '    function getReferrerRewards() public view returns (uint256[]) {\n', '        return referrerRewards;\n', '    }\n', '\n', '    function getBuyerRewards() public view returns (uint256[]) {\n', '        return buyerRewards;\n', '    }\n', '\n', '    function getPurchaseRewardsPercents() public view returns (uint256[]) {\n', '        return purchaseRewardsPercents;\n', '    }\n', '\n', '    function getPurchaseAmountRangesInCents() public view returns (uint256[]) {\n', '        return purchaseAmountRangesInCents;\n', '    }\n', '\n', '    function setReferralBonusTokensAmountRanges(uint[] ranges) public onlyOwner {\n', '        referralBonusTokensAmountRanges = ranges;\n', '    }\n', '\n', '    function setReferrerRewards(uint[] rewards) public onlyOwner {\n', '        require(rewards.length == referralBonusTokensAmountRanges.length - 1);\n', '        referrerRewards = rewards;\n', '    }\n', '\n', '    function setBuyerRewards(uint[] rewards) public onlyOwner {\n', '        require(rewards.length == referralBonusTokensAmountRanges.length - 1);\n', '        buyerRewards = rewards;\n', '    }\n', '\n', '    function setPurchaseAmountRangesInCents(uint[] ranges) public onlyOwner {\n', '        purchaseAmountRangesInCents = ranges;\n', '    }\n', '\n', '    function setPurchaseRewardsPercents(uint[] rewards) public onlyOwner {\n', '        require(rewards.length == purchaseAmountRangesInCents.length);\n', '        purchaseRewardsPercents = rewards;\n', '    }\n', '\n', '    /* Withdraw all tokens from contract for any emergence case */\n', '    function withdrawTokens() external onlyOwner {\n', '        uint256 amount = token.balanceOf(this);\n', '        address tokenOwner = token.owner();\n', '        token.transfer(tokenOwner, amount);\n', '    }\n', '}\n', '\n', 'contract SignkeysBonusProgramRewards is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    /* Bonus program contract */\n', '    SignkeysBonusProgram public bonusProgram;\n', '\n', '    /* How much bonuses to send according for the given coupon campaign */\n', '    mapping(uint256 => uint256) private _couponCampaignBonusTokensAmount;\n', '\n', '    /* Check if referrer already got the bonuses from the invited token receiver */\n', '    mapping(address => bool) private _areReferralBonusesSent;\n', '\n', '    /* Check if coupon of the given campaign was used by the token receiver */\n', '    mapping(address => mapping(uint256 => bool)) private _isCouponUsed;\n', '\n', '    function setBonusProgram(address _bonusProgram) public onlyOwner {\n', '        bonusProgram = SignkeysBonusProgram(_bonusProgram);\n', '    }\n', '\n', '    modifier onlyBonusProgramContract() {\n', '        require(msg.sender == address(bonusProgram), "Bonus program rewards state may be changed only by bonus program contract");\n', '        _;\n', '    }\n', '\n', '    function addCouponCampaignBonusTokensAmount(uint256 _couponCampaignId, uint256 amountOfBonuses) public onlyOwner {\n', '        _couponCampaignBonusTokensAmount[_couponCampaignId] = amountOfBonuses;\n', '    }\n', '\n', '    function getCouponCampaignBonusTokensAmount(uint256 _couponCampaignId) public view returns (uint256)  {\n', '        return _couponCampaignBonusTokensAmount[_couponCampaignId];\n', '    }\n', '\n', '    function isCouponUsed(address buyer, uint256 couponCampaignId) public view returns (bool)  {\n', '        return _isCouponUsed[buyer][couponCampaignId];\n', '    }\n', '\n', '    function setCouponUsed(address buyer, uint256 couponCampaignId, bool isUsed) public onlyBonusProgramContract {\n', '        _isCouponUsed[buyer][couponCampaignId] = isUsed;\n', '    }\n', '\n', '    function areReferralBonusesSent(address buyer) public view returns (bool)  {\n', '        return _areReferralBonusesSent[buyer];\n', '    }\n', '\n', '    function setReferralBonusesSent(address buyer, bool areBonusesSent) public onlyBonusProgramContract {\n', '        _areReferralBonusesSent[buyer] = areBonusesSent;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Helps contracts guard against reentrancy attacks.\n', ' * @author Remco Bloemen <remco@2π.com>, Eenae <alexey@mixbytes.io>\n', ' * @dev If you mark a function `nonReentrant`, you should also\n', ' * mark it `external`.\n', ' */\n', 'contract ReentrancyGuard {\n', '\n', '  /// @dev counter to allow mutex lock with only one SSTORE operation\n', '  uint256 private _guardCounter;\n', '\n', '  constructor() internal {\n', '    // The counter starts at one to prevent changing it from zero to a non-zero\n', '    // value, which is a more expensive operation.\n', '    _guardCounter = 1;\n', '  }\n', '\n', '  /**\n', '   * @dev Prevents a contract from calling itself, directly or indirectly.\n', '   * Calling a `nonReentrant` function from another `nonReentrant`\n', '   * function is not supported. It is possible to prevent this from happening\n', '   * by making the `nonReentrant` function external, and make it call a\n', '   * `private` function that does the actual work.\n', '   */\n', '  modifier nonReentrant() {\n', '    _guardCounter += 1;\n', '    uint256 localCounter = _guardCounter;\n', '    _;\n', '    require(localCounter == _guardCounter);\n', '  }\n', '\n', '}\n', '\n', 'contract SignkeysCrowdsale is Ownable, ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public constant INITIAL_TOKEN_PRICE_CENTS = 10;\n', '\n', '    /* Token contract */\n', '    SignkeysToken public signkeysToken;\n', '\n', '    /* Bonus program contract*/\n', '    SignkeysBonusProgram public signkeysBonusProgram;\n', '\n', '    /* signer address, can be set by owner only */\n', '    address public signer;\n', '\n', '    /* ETH funds will be transferred to this address */\n', '    address public wallet;\n', '\n', '    /* Role that provide tokens calling sendTokens method */\n', '    address public administrator;\n', '\n', '    /* Current token price in cents */\n', '    uint256 public tokenPriceCents;\n', '\n', '    /* Buyer bought the amount of tokens with tokenPrice */\n', '    event BuyTokens(\n', '        address indexed buyer,\n', '        address indexed tokenReceiver,\n', '        uint256 tokenPrice,\n', '        uint256 amount\n', '    );\n', '\n', '    /* Admin sent the amount of tokens to the tokenReceiver */\n', '    event SendTokens(\n', '        address indexed tokenReceiver,\n', '        uint256 amount\n', '    );\n', '\n', '    /* Wallet changed */\n', '    event WalletChanged(address newWallet);\n', '\n', '    /* Administrator changed */\n', '    event AdministratorChanged(address newAdministrator);\n', '\n', '    /* Signer changed */\n', '    event CrowdsaleSignerChanged(address newSigner);\n', '\n', '    /* Token price changed */\n', '    event TokenPriceChanged(uint256 oldPrice, uint256 newPrice);\n', '\n', '    constructor(\n', '        address _token,\n', '        address _bonusProgram,\n', '        address _wallet,\n', '        address _signer\n', '    ) public {\n', '        require(_token != 0x0, "Token contract for crowdsale must be set");\n', '        require(_bonusProgram != 0x0, "Referrer smart contract for crowdsale must be set");\n', '\n', '        require(_wallet != 0x0, "Wallet for fund transferring must be set");\n', '        require(_signer != 0x0, "Signer must be set");\n', '\n', '        signkeysToken = SignkeysToken(_token);\n', '        signkeysBonusProgram = SignkeysBonusProgram(_bonusProgram);\n', '\n', '        signer = _signer;\n', '        wallet = _wallet;\n', '\n', '        tokenPriceCents = INITIAL_TOKEN_PRICE_CENTS;\n', '    }\n', '\n', '    function setSignerAddress(address _signer) external onlyOwner {\n', '        signer = _signer;\n', '        emit CrowdsaleSignerChanged(_signer);\n', '    }\n', '\n', '    function setWalletAddress(address _wallet) external onlyOwner {\n', '        wallet = _wallet;\n', '        emit WalletChanged(_wallet);\n', '    }\n', '\n', '    function setAdministratorAddress(address _administrator) external onlyOwner {\n', '        administrator = _administrator;\n', '        emit AdministratorChanged(_administrator);\n', '    }\n', '\n', '    function setBonusProgram(address _bonusProgram) external onlyOwner {\n', '        signkeysBonusProgram = SignkeysBonusProgram(_bonusProgram);\n', '    }\n', '\n', '    function setTokenPriceCents(uint256 _tokenPriceCents) external onlyOwner {\n', '        emit TokenPriceChanged(tokenPriceCents, _tokenPriceCents);\n', '        tokenPriceCents = _tokenPriceCents;\n', '    }\n', '\n', '    /**\n', '     * @dev Make an investment.\n', '     *\n', '     * @param _tokenReceiver address where the tokens need to be transfered\n', '     * @param _referrer address of user that invited _tokenReceiver for this purchase\n', '     * @param _tokenPrice price per one token including decimals\n', '     * @param _minWei minimal amount of wei buyer should invest\n', '     * @param _expiration expiration on token\n', '     */\n', '    function buyTokens(\n', '        address _tokenReceiver,\n', '        address _referrer,\n', '        uint256 _couponCampaignId, // starts with 1 if there is some, 0 means no coupon\n', '        uint256 _tokenPrice,\n', '        uint256 _minWei,\n', '        uint256 _expiration,\n', '        uint8 _v,\n', '        bytes32 _r,\n', '        bytes32 _s\n', '    ) payable external nonReentrant {\n', '        require(_expiration >= now, "Signature expired");\n', '        require(_tokenReceiver != 0x0, "Token receiver must be provided");\n', '        require(_minWei > 0, "Minimal amount to purchase must be greater than 0");\n', '\n', '        require(wallet != 0x0, "Wallet must be set");\n', '        require(msg.value >= _minWei, "Purchased amount is less than min amount to invest");\n', '\n', '        address receivedSigner = ecrecover(\n', '            keccak256(\n', '                abi.encodePacked(\n', '                    _tokenPrice, _minWei, _tokenReceiver, _referrer, _couponCampaignId, _expiration\n', '                )\n', '            ), _v, _r, _s);\n', '\n', '        require(receivedSigner == signer, "Something wrong with signature");\n', '\n', '        uint256 tokensAmount = msg.value.mul(10 ** uint256(signkeysToken.decimals())).div(_tokenPrice);\n', '        require(signkeysToken.balanceOf(this) >= tokensAmount, "Not enough tokens in sale contract");\n', '\n', '        // Pocket the money, or fail the crowdsale if we for some reason cannot send the money to our wallet\n', '        wallet.transfer(msg.value);\n', '\n', '        _sendTokens(_tokenReceiver, _referrer, _couponCampaignId, tokensAmount);\n', '\n', '        emit BuyTokens(msg.sender, _tokenReceiver, _tokenPrice, tokensAmount);\n', '    }\n', '\n', '    function sendTokens(\n', '        address _tokenReceiver,\n', '        address _referrer,\n', '        uint256 _couponCampaignId,\n', '        uint256 tokensAmount\n', '    ) external {\n', '        require(msg.sender == administrator, "sendTokens() method may be called only by administrator ");\n', '        _sendTokens(_tokenReceiver, _referrer, _couponCampaignId, tokensAmount);\n', '        emit SendTokens(_tokenReceiver, tokensAmount);\n', '    }\n', '\n', '    function _sendTokens(\n', '        address _tokenReceiver,\n', '        address _referrer,\n', '        uint256 _couponCampaignId,\n', '        uint256 tokensAmount\n', '    ) private {\n', '        signkeysToken.transfer(_tokenReceiver, tokensAmount);\n', '\n', '        // send bonuses according to signkeys bonus program\n', '        signkeysBonusProgram.sendBonus(\n', '            _referrer,\n', '            _tokenReceiver,\n', '            tokensAmount,\n', '            (tokensAmount.mul(tokenPriceCents).div(10 ** uint256(signkeysToken.decimals()))),\n', '            _couponCampaignId);\n', '    }\n', '\n', '\n', '    /**\n', "     * Don't expect to just send in money and get tokens.\n", '     */\n', '    function() payable external {\n', '        revert();\n', '    }\n', '\n', '    /* Withdraw all tokens from contract for any emergence case */\n', '    function withdrawTokens() external onlyOwner {\n', '        uint256 amount = signkeysToken.balanceOf(this);\n', '        address tokenOwner = signkeysToken.owner();\n', '        signkeysToken.transfer(tokenOwner, amount);\n', '    }\n', '}']