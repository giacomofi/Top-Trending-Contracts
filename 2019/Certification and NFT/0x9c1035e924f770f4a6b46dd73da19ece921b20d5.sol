['pragma solidity 0.4.25;\n', '\n', '// File: openzeppelin-solidity/contracts/introspection/ERC165.sol\n', '\n', '/**\n', ' * @title ERC165\n', ' * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n', ' */\n', 'interface ERC165 {\n', '\n', '  /**\n', '   * @notice Query if a contract implements an interface\n', '   * @param _interfaceId The interface identifier, as specified in ERC-165\n', '   * @dev Interface identification is specified in ERC-165. This function\n', '   * uses less than 30,000 gas.\n', '   */\n', '  function supportsInterface(bytes4 _interfaceId)\n', '    external\n', '    view\n', '    returns (bool);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/introspection/SupportsInterfaceWithLookup.sol\n', '\n', '/**\n', ' * @title SupportsInterfaceWithLookup\n', ' * @author Matt Condon (@shrugs)\n', ' * @dev Implements ERC165 using a lookup table.\n', ' */\n', 'contract SupportsInterfaceWithLookup is ERC165 {\n', '\n', '  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\n', '  /**\n', '   * 0x01ffc9a7 ===\n', "   *   bytes4(keccak256('supportsInterface(bytes4)'))\n", '   */\n', '\n', '  /**\n', "   * @dev a mapping of interface id to whether or not it's supported\n", '   */\n', '  mapping(bytes4 => bool) internal supportedInterfaces;\n', '\n', '  /**\n', '   * @dev A contract implementing SupportsInterfaceWithLookup\n', '   * implement ERC165 itself\n', '   */\n', '  constructor()\n', '    public\n', '  {\n', '    _registerInterface(InterfaceId_ERC165);\n', '  }\n', '\n', '  /**\n', '   * @dev implement supportsInterface(bytes4) using a lookup table\n', '   */\n', '  function supportsInterface(bytes4 _interfaceId)\n', '    external\n', '    view\n', '    returns (bool)\n', '  {\n', '    return supportedInterfaces[_interfaceId];\n', '  }\n', '\n', '  /**\n', '   * @dev private method for registering an interface\n', '   */\n', '  function _registerInterface(bytes4 _interfaceId)\n', '    internal\n', '  {\n', '    require(_interfaceId != 0xffffffff);\n', '    supportedInterfaces[_interfaceId] = true;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Basic.sol\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic interface\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Basic is ERC165 {\n', '\n', '  bytes4 internal constant InterfaceId_ERC721 = 0x80ac58cd;\n', '  /*\n', '   * 0x80ac58cd ===\n', "   *   bytes4(keccak256('balanceOf(address)')) ^\n", "   *   bytes4(keccak256('ownerOf(uint256)')) ^\n", "   *   bytes4(keccak256('approve(address,uint256)')) ^\n", "   *   bytes4(keccak256('getApproved(uint256)')) ^\n", "   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n", "   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n", "   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n", "   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n", "   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n", '   */\n', '\n', '  bytes4 internal constant InterfaceId_ERC721Exists = 0x4f558e79;\n', '  /*\n', '   * 0x4f558e79 ===\n', "   *   bytes4(keccak256('exists(uint256)'))\n", '   */\n', '\n', '  bytes4 internal constant InterfaceId_ERC721Enumerable = 0x780e9d63;\n', '  /**\n', '   * 0x780e9d63 ===\n', "   *   bytes4(keccak256('totalSupply()')) ^\n", "   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n", "   *   bytes4(keccak256('tokenByIndex(uint256)'))\n", '   */\n', '\n', '  bytes4 internal constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n', '  /**\n', '   * 0x5b5e139f ===\n', "   *   bytes4(keccak256('name()')) ^\n", "   *   bytes4(keccak256('symbol()')) ^\n", "   *   bytes4(keccak256('tokenURI(uint256)'))\n", '   */\n', '\n', '  event Transfer(\n', '    address indexed _from,\n', '    address indexed _to,\n', '    uint256 indexed _tokenId\n', '  );\n', '  event Approval(\n', '    address indexed _owner,\n', '    address indexed _approved,\n', '    uint256 indexed _tokenId\n', '  );\n', '  event ApprovalForAll(\n', '    address indexed _owner,\n', '    address indexed _operator,\n', '    bool _approved\n', '  );\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 _balance);\n', '  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '  function exists(uint256 _tokenId) public view returns (bool _exists);\n', '\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function getApproved(uint256 _tokenId)\n', '    public view returns (address _operator);\n', '\n', '  function setApprovalForAll(address _operator, bool _approved) public;\n', '  function isApprovedForAll(address _owner, address _operator)\n', '    public view returns (bool);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n', '  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\n', '    public;\n', '\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId,\n', '    bytes _data\n', '  )\n', '    public;\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC721/ERC721.sol\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Enumerable is ERC721Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function tokenOfOwnerByIndex(\n', '    address _owner,\n', '    uint256 _index\n', '  )\n', '    public\n', '    view\n', '    returns (uint256 _tokenId);\n', '\n', '  function tokenByIndex(uint256 _index) public view returns (uint256);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Metadata is ERC721Basic {\n', '  function name() external view returns (string _name);\n', '  function symbol() external view returns (string _symbol);\n', '  function tokenURI(uint256 _tokenId) public view returns (string);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Receiver.sol\n', '\n', '/**\n', ' * @title ERC721 token receiver interface\n', ' * @dev Interface for any contract that wants to support safeTransfers\n', ' * from ERC721 asset contracts.\n', ' */\n', 'contract ERC721Receiver {\n', '  /**\n', '   * @dev Magic value to be returned upon successful reception of an NFT\n', '   *  Equals to `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`,\n', '   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n', '   */\n', '  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\n', '\n', '  /**\n', '   * @notice Handle the receipt of an NFT\n', '   * @dev The ERC721 smart contract calls this function on the recipient\n', '   * after a `safetransfer`. This function MAY throw to revert and reject the\n', '   * transfer. Return of other than the magic value MUST result in the\n', '   * transaction being reverted.\n', '   * Note: the contract address is always the message sender.\n', '   * @param _operator The address which called `safeTransferFrom` function\n', '   * @param _from The address which previously owned the token\n', '   * @param _tokenId The NFT identifier which is being transferred\n', '   * @param _data Additional data with no specified format\n', '   * @return `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`\n', '   */\n', '  function onERC721Received(\n', '    address _operator,\n', '    address _from,\n', '    uint256 _tokenId,\n', '    bytes _data\n', '  )\n', '    public\n', '    returns(bytes4);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/AddressUtils.sol\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' */\n', 'library AddressUtils {\n', '\n', '  /**\n', '   * Returns whether the target address is a contract\n', '   * @dev This function will return false if invoked during the constructor of a contract,\n', '   * as the code is not actually created until after the constructor finishes.\n', '   * @param _addr address to check\n', '   * @return whether the target address is a contract\n', '   */\n', '  function isContract(address _addr) internal view returns (bool) {\n', '    uint256 size;\n', '    // XXX Currently there is no better way to check if there is a contract in an address\n', '    // than to check the size of the code at that address.\n', '    // See https://ethereum.stackexchange.com/a/14016/36603\n', '    // for more details about how this works.\n', '    // TODO Check this again before the Serenity release, because all addresses will be\n', '    // contracts then.\n', '    // solium-disable-next-line security/no-inline-assembly\n', '    assembly { size := extcodesize(_addr) }\n', '    return size > 0;\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC721/ERC721BasicToken.sol\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic implementation\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\n', '\n', '  using SafeMath for uint256;\n', '  using AddressUtils for address;\n', '\n', '  // Equals to `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`\n', '  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n', '  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n', '\n', '  // Mapping from token ID to owner\n', '  mapping (uint256 => address) internal tokenOwner;\n', '\n', '  // Mapping from token ID to approved address\n', '  mapping (uint256 => address) internal tokenApprovals;\n', '\n', '  // Mapping from owner to number of owned token\n', '  mapping (address => uint256) internal ownedTokensCount;\n', '\n', '  // Mapping from owner to operator approvals\n', '  mapping (address => mapping (address => bool)) internal operatorApprovals;\n', '\n', '  constructor()\n', '    public\n', '  {\n', '    // register the supported interfaces to conform to ERC721 via ERC165\n', '    _registerInterface(InterfaceId_ERC721);\n', '    _registerInterface(InterfaceId_ERC721Exists);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the balance of the specified address\n', '   * @param _owner address to query the balance of\n', '   * @return uint256 representing the amount owned by the passed address\n', '   */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    require(_owner != address(0));\n', '    return ownedTokensCount[_owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the owner of the specified token ID\n', '   * @param _tokenId uint256 ID of the token to query the owner of\n', '   * @return owner address currently marked as the owner of the given token ID\n', '   */\n', '  function ownerOf(uint256 _tokenId) public view returns (address) {\n', '    address owner = tokenOwner[_tokenId];\n', '    require(owner != address(0));\n', '    return owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns whether the specified token exists\n', '   * @param _tokenId uint256 ID of the token to query the existence of\n', '   * @return whether the token exists\n', '   */\n', '  function exists(uint256 _tokenId) public view returns (bool) {\n', '    address owner = tokenOwner[_tokenId];\n', '    return owner != address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Approves another address to transfer the given token ID\n', '   * The zero address indicates there is no approved address.\n', '   * There can only be one approved address per token at a given time.\n', '   * Can only be called by the token owner or an approved operator.\n', '   * @param _to address to be approved for the given token ID\n', '   * @param _tokenId uint256 ID of the token to be approved\n', '   */\n', '  function approve(address _to, uint256 _tokenId) public {\n', '    address owner = ownerOf(_tokenId);\n', '    require(_to != owner);\n', '    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n', '\n', '    tokenApprovals[_tokenId] = _to;\n', '    emit Approval(owner, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the approved address for a token ID, or zero if no address set\n', '   * @param _tokenId uint256 ID of the token to query the approval of\n', '   * @return address currently approved for the given token ID\n', '   */\n', '  function getApproved(uint256 _tokenId) public view returns (address) {\n', '    return tokenApprovals[_tokenId];\n', '  }\n', '\n', '  /**\n', '   * @dev Sets or unsets the approval of a given operator\n', '   * An operator is allowed to transfer all tokens of the sender on their behalf\n', '   * @param _to operator address to set the approval\n', '   * @param _approved representing the status of the approval to be set\n', '   */\n', '  function setApprovalForAll(address _to, bool _approved) public {\n', '    require(_to != msg.sender);\n', '    operatorApprovals[msg.sender][_to] = _approved;\n', '    emit ApprovalForAll(msg.sender, _to, _approved);\n', '  }\n', '\n', '  /**\n', '   * @dev Tells whether an operator is approved by a given owner\n', '   * @param _owner owner address which you want to query the approval of\n', '   * @param _operator operator address which you want to query the approval of\n', '   * @return bool whether the given operator is approved by the given owner\n', '   */\n', '  function isApprovedForAll(\n', '    address _owner,\n', '    address _operator\n', '  )\n', '    public\n', '    view\n', '    returns (bool)\n', '  {\n', '    return operatorApprovals[_owner][_operator];\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers the ownership of a given token ID to another address\n', '   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n', '   * Requires the msg sender to be the owner, approved, or operator\n', '   * @param _from current owner of the token\n', '   * @param _to address to receive the ownership of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId\n', '  )\n', '    public\n', '  {\n', '    require(isApprovedOrOwner(msg.sender, _tokenId));\n', '    require(_from != address(0));\n', '    require(_to != address(0));\n', '\n', '    clearApproval(_from, _tokenId);\n', '    removeTokenFrom(_from, _tokenId);\n', '    addTokenTo(_to, _tokenId);\n', '\n', '    emit Transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Safely transfers the ownership of a given token ID to another address\n', '   * If the target address is a contract, it must implement `onERC721Received`,\n', '   * which is called upon a safe transfer, and return the magic value\n', '   * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '   * the transfer is reverted.\n', '   *\n', '   * Requires the msg sender to be the owner, approved, or operator\n', '   * @param _from current owner of the token\n', '   * @param _to address to receive the ownership of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId\n', '  )\n', '    public\n', '  {\n', '    // solium-disable-next-line arg-overflow\n', '    safeTransferFrom(_from, _to, _tokenId, "");\n', '  }\n', '\n', '  /**\n', '   * @dev Safely transfers the ownership of a given token ID to another address\n', '   * If the target address is a contract, it must implement `onERC721Received`,\n', '   * which is called upon a safe transfer, and return the magic value\n', '   * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '   * the transfer is reverted.\n', '   * Requires the msg sender to be the owner, approved, or operator\n', '   * @param _from current owner of the token\n', '   * @param _to address to receive the ownership of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   * @param _data bytes data to send along with a safe transfer check\n', '   */\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId,\n', '    bytes _data\n', '  )\n', '    public\n', '  {\n', '    transferFrom(_from, _to, _tokenId);\n', '    // solium-disable-next-line arg-overflow\n', '    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n', '  }\n', '\n', '  /**\n', '   * @dev Returns whether the given spender can transfer a given token ID\n', '   * @param _spender address of the spender to query\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   * @return bool whether the msg.sender is approved for the given token ID,\n', '   *  is an operator of the owner, or is the owner of the token\n', '   */\n', '  function isApprovedOrOwner(\n', '    address _spender,\n', '    uint256 _tokenId\n', '  )\n', '    internal\n', '    view\n', '    returns (bool)\n', '  {\n', '    address owner = ownerOf(_tokenId);\n', '    // Disable solium check because of\n', '    // https://github.com/duaraghav8/Solium/issues/175\n', '    // solium-disable-next-line operator-whitespace\n', '    return (\n', '      _spender == owner ||\n', '      getApproved(_tokenId) == _spender ||\n', '      isApprovedForAll(owner, _spender)\n', '    );\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to mint a new token\n', '   * Reverts if the given token ID already exists\n', '   * @param _to The address that will own the minted token\n', '   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '   */\n', '  function _mint(address _to, uint256 _tokenId) internal {\n', '    require(_to != address(0));\n', '    addTokenTo(_to, _tokenId);\n', '    emit Transfer(address(0), _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to burn a specific token\n', '   * Reverts if the token does not exist\n', '   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '   */\n', '  function _burn(address _owner, uint256 _tokenId) internal {\n', '    clearApproval(_owner, _tokenId);\n', '    removeTokenFrom(_owner, _tokenId);\n', '    emit Transfer(_owner, address(0), _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to clear current approval of a given token ID\n', '   * Reverts if the given address is not indeed the owner of the token\n', '   * @param _owner owner of the token\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   */\n', '  function clearApproval(address _owner, uint256 _tokenId) internal {\n', '    require(ownerOf(_tokenId) == _owner);\n', '    if (tokenApprovals[_tokenId] != address(0)) {\n', '      tokenApprovals[_tokenId] = address(0);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to add a token ID to the list of a given address\n', '   * @param _to address representing the new owner of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '   */\n', '  function addTokenTo(address _to, uint256 _tokenId) internal {\n', '    require(tokenOwner[_tokenId] == address(0));\n', '    tokenOwner[_tokenId] = _to;\n', '    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to remove a token ID from the list of a given address\n', '   * @param _from address representing the previous owner of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '   */\n', '  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n', '    require(ownerOf(_tokenId) == _from);\n', '    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\n', '    tokenOwner[_tokenId] = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to invoke `onERC721Received` on a target address\n', '   * The call is not executed if the target address is not a contract\n', '   * @param _from address representing the previous owner of the given token ID\n', '   * @param _to target address that will receive the tokens\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   * @param _data bytes optional data to send along with the call\n', '   * @return whether the call correctly returned the expected magic value\n', '   */\n', '  function checkAndCallSafeTransfer(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId,\n', '    bytes _data\n', '  )\n', '    internal\n', '    returns (bool)\n', '  {\n', '    if (!_to.isContract()) {\n', '      return true;\n', '    }\n', '    bytes4 retval = ERC721Receiver(_to).onERC721Received(\n', '      msg.sender, _from, _tokenId, _data);\n', '    return (retval == ERC721_RECEIVED);\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Token.sol\n', '\n', '/**\n', ' * @title Full ERC721 Token\n', ' * This implementation includes all the required and some optional functionality of the ERC721 standard\n', ' * Moreover, it includes approve all functionality using operator terminology\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\n', '\n', '  // Token name\n', '  string internal name_;\n', '\n', '  // Token symbol\n', '  string internal symbol_;\n', '\n', '  // Mapping from owner to list of owned token IDs\n', '  mapping(address => uint256[]) internal ownedTokens;\n', '\n', '  // Mapping from token ID to index of the owner tokens list\n', '  mapping(uint256 => uint256) internal ownedTokensIndex;\n', '\n', '  // Array with all token ids, used for enumeration\n', '  uint256[] internal allTokens;\n', '\n', '  // Mapping from token id to position in the allTokens array\n', '  mapping(uint256 => uint256) internal allTokensIndex;\n', '\n', '  // Optional mapping for token URIs\n', '  mapping(uint256 => string) internal tokenURIs;\n', '\n', '  /**\n', '   * @dev Constructor function\n', '   */\n', '  constructor(string _name, string _symbol) public {\n', '    name_ = _name;\n', '    symbol_ = _symbol;\n', '\n', '    // register the supported interfaces to conform to ERC721 via ERC165\n', '    _registerInterface(InterfaceId_ERC721Enumerable);\n', '    _registerInterface(InterfaceId_ERC721Metadata);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token name\n', '   * @return string representing the token name\n', '   */\n', '  function name() external view returns (string) {\n', '    return name_;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token symbol\n', '   * @return string representing the token symbol\n', '   */\n', '  function symbol() external view returns (string) {\n', '    return symbol_;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns an URI for a given token ID\n', '   * Throws if the token ID does not exist. May return an empty string.\n', '   * @param _tokenId uint256 ID of the token to query\n', '   */\n', '  function tokenURI(uint256 _tokenId) public view returns (string) {\n', '    require(exists(_tokenId));\n', '    return tokenURIs[_tokenId];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n', '   * @param _owner address owning the tokens list to be accessed\n', '   * @param _index uint256 representing the index to be accessed of the requested tokens list\n', '   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n', '   */\n', '  function tokenOfOwnerByIndex(\n', '    address _owner,\n', '    uint256 _index\n', '  )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    require(_index < balanceOf(_owner));\n', '    return ownedTokens[_owner][_index];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the total amount of tokens stored by the contract\n', '   * @return uint256 representing the total amount of tokens\n', '   */\n', '  function totalSupply() public view returns (uint256) {\n', '    return allTokens.length;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token ID at a given index of all the tokens in this contract\n', '   * Reverts if the index is greater or equal to the total number of tokens\n', '   * @param _index uint256 representing the index to be accessed of the tokens list\n', '   * @return uint256 token ID at the given index of the tokens list\n', '   */\n', '  function tokenByIndex(uint256 _index) public view returns (uint256) {\n', '    require(_index < totalSupply());\n', '    return allTokens[_index];\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to set the token URI for a given token\n', '   * Reverts if the token ID does not exist\n', '   * @param _tokenId uint256 ID of the token to set its URI\n', '   * @param _uri string URI to assign\n', '   */\n', '  function _setTokenURI(uint256 _tokenId, string _uri) internal {\n', '    require(exists(_tokenId));\n', '    tokenURIs[_tokenId] = _uri;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to add a token ID to the list of a given address\n', '   * @param _to address representing the new owner of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '   */\n', '  function addTokenTo(address _to, uint256 _tokenId) internal {\n', '    super.addTokenTo(_to, _tokenId);\n', '    uint256 length = ownedTokens[_to].length;\n', '    ownedTokens[_to].push(_tokenId);\n', '    ownedTokensIndex[_tokenId] = length;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to remove a token ID from the list of a given address\n', '   * @param _from address representing the previous owner of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '   */\n', '  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n', '    super.removeTokenFrom(_from, _tokenId);\n', '\n', '    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\n', '    // then delete the last slot.\n', '    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n', '    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\n', '    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n', '\n', '    ownedTokens[_from][tokenIndex] = lastToken;\n', '    // This also deletes the contents at the last position of the array\n', '    ownedTokens[_from].length--;\n', '\n', '    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n', '    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n', '    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n', '\n', '    ownedTokensIndex[_tokenId] = 0;\n', '    ownedTokensIndex[lastToken] = tokenIndex;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to mint a new token\n', '   * Reverts if the given token ID already exists\n', '   * @param _to address the beneficiary that will own the minted token\n', '   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '   */\n', '  function _mint(address _to, uint256 _tokenId) internal {\n', '    super._mint(_to, _tokenId);\n', '\n', '    allTokensIndex[_tokenId] = allTokens.length;\n', '    allTokens.push(_tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to burn a specific token\n', '   * Reverts if the token does not exist\n', '   * @param _owner owner of the token to burn\n', '   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '   */\n', '  function _burn(address _owner, uint256 _tokenId) internal {\n', '    super._burn(_owner, _tokenId);\n', '\n', '    // Clear metadata (if any)\n', '    if (bytes(tokenURIs[_tokenId]).length != 0) {\n', '      delete tokenURIs[_tokenId];\n', '    }\n', '\n', '    // Reorg all tokens array\n', '    uint256 tokenIndex = allTokensIndex[_tokenId];\n', '    uint256 lastTokenIndex = allTokens.length.sub(1);\n', '    uint256 lastToken = allTokens[lastTokenIndex];\n', '\n', '    allTokens[tokenIndex] = lastToken;\n', '    allTokens[lastTokenIndex] = 0;\n', '\n', '    allTokens.length--;\n', '    allTokensIndex[_tokenId] = 0;\n', '    allTokensIndex[lastToken] = tokenIndex;\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: contracts/common/IDatabase.sol\n', '\n', 'interface IDatabase {\n', '    \n', '    function createEntry() external payable returns (uint256);\n', '    function auth(uint256, address) external;\n', '    function deleteEntry(uint256) external;\n', '    function fundEntry(uint256) external payable;\n', '    function claimEntryFunds(uint256, uint256) external;\n', '    function updateEntryCreationFee(uint256) external;\n', '    function updateDatabaseDescription(string) external;\n', '    function addDatabaseTag(bytes32) external;\n', '    function updateDatabaseTag(uint8, bytes32) external;\n', '    function removeDatabaseTag(uint8) external;\n', '    function readEntryMeta(uint256) external view returns (\n', '        address,\n', '        address,\n', '        uint256,\n', '        uint256,\n', '        uint256,\n', '        uint256\n', '    );\n', '    function getChaingearID() external view returns (uint256);\n', '    function getEntriesIDs() external view returns (uint256[]);\n', '    function getIndexByID(uint256) external view returns (uint256);\n', '    function getEntryCreationFee() external view returns (uint256);\n', '    function getEntriesStorage() external view returns (address);\n', '    function getSchemaDefinition() external view returns (string);\n', '    function getDatabaseBalance() external view returns (uint256);\n', '    function getDatabaseDescription() external view returns (string);\n', '    function getDatabaseTags() external view returns (bytes32[]);\n', '    function getDatabaseSafe() external view returns (address);\n', '    function getSafeBalance() external view returns (uint256);\n', '    function getDatabaseInitStatus() external view returns (bool);\n', '    function pause() external;\n', '    function unpause() external;\n', '    function transferAdminRights(address) external;\n', '    function getAdmin() external view returns (address);\n', '    function getPaused() external view returns (bool);\n', '    function transferOwnership(address) external;\n', '    function deletePayees() external;\n', '}\n', '\n', '// File: contracts/common/IDatabaseBuilder.sol\n', '\n', 'interface IDatabaseBuilder {\n', '    \n', '    function deployDatabase(\n', '        address[],\n', '        uint256[],\n', '        string,\n', '        string\n', '    ) external returns (IDatabase);\n', '    function setChaingearAddress(address) external;\n', '    function getChaingearAddress() external view returns (address);\n', '    function getOwner() external view returns (address);\n', '}\n', '\n', '// File: contracts/common/IChaingear.sol\n', '\n', 'interface IChaingear {\n', '    \n', '    function addDatabaseBuilderVersion(\n', '        string,\n', '        IDatabaseBuilder,\n', '        string,\n', '        string\n', '    ) external;\n', '    function updateDatabaseBuilderDescription(string, string) external;\n', '    function depricateDatabaseBuilder(string) external;\n', '    function createDatabase(\n', '        string,\n', '        address[],\n', '        uint256[],\n', '        string,\n', '        string\n', '    ) external payable returns (address, uint256);\n', '    function deleteDatabase(uint256) external;\n', '    function fundDatabase(uint256) external payable;\n', '    function claimDatabaseFunds(uint256, uint256) external;\n', '    function updateCreationFee(uint256) external;\n', '    function getAmountOfBuilders() external view returns (uint256);\n', '    function getBuilderByID(uint256) external view returns(string);\n', '    function getDatabaseBuilder(string) external view returns(address, string, string, bool);\n', '    function getDatabasesIDs() external view returns (uint256[]);\n', '    function getDatabaseIDByAddress(address) external view returns (uint256);\n', '    function getDatabaseAddressByName(string) external view returns (address);\n', '    function getDatabaseSymbolByID(uint256) external view returns (string);\n', '    function getDatabaseIDBySymbol(string) external view returns (uint256);\n', '    function getDatabase(uint256) external view returns (\n', '        string,\n', '        string,\n', '        address,\n', '        string,\n', '        uint256,\n', '        address,\n', '        uint256\n', '    );\n', '    function getDatabaseBalance(uint256) external view returns (uint256, uint256);\n', '    function getChaingearDescription() external pure returns (string);\n', '    function getCreationFeeWei() external view returns (uint256);\n', '    function getSafeBalance() external view returns (uint256);\n', '    function getSafeAddress() external view returns (address);\n', '    function getNameExist(string) external view returns (bool);\n', '    function getSymbolExist(string) external view returns (bool);\n', '}\n', '\n', '// File: contracts/common/ISchema.sol\n', '\n', 'interface ISchema {\n', '\n', '    function createEntry() external;\n', '    function deleteEntry(uint256) external;\n', '}\n', '\n', '// File: contracts/common/Safe.sol\n', '\n', '/**\n', '* @title Chaingear - the novel Ethereum database framework\n', '* @author cyber•Congress, Valery litvin (@litvintech)\n', '* @notice not audited, not recommend to use in mainnet\n', '*/\n', 'contract Safe {\n', '    \n', '    address private owner;\n', '\n', '    constructor() public\n', '    {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function()\n', '        external\n', '        payable\n', '    {\n', '        require(msg.sender == owner);\n', '    }\n', '\n', '    function claim(address _entryOwner, uint256 _amount)\n', '        external\n', '    {\n', '        require(msg.sender == owner);\n', '        require(_amount <= address(this).balance);\n', '        require(_entryOwner != address(0));\n', '        \n', '        _entryOwner.transfer(_amount);\n', '    }\n', '\n', '    function getOwner()\n', '        external\n', '        view\n', '        returns(address)\n', '    {\n', '        return owner;\n', '    }\n', '}\n', '\n', '// File: contracts/common/PaymentSplitter.sol\n', '\n', '/**\n', ' * @title PaymentSplitter\n', ' * @dev This contract can be used when payments need to be received by a group\n', ' * of people and split proportionately to some number of shares they own.\n', ' */\n', 'contract PaymentSplitter {\n', '    \n', '    using SafeMath for uint256;\n', '\n', '    uint256 internal totalShares;\n', '    uint256 internal totalReleased;\n', '\n', '    mapping(address => uint256) internal shares;\n', '    mapping(address => uint256) internal released;\n', '    address[] internal payees;\n', '    \n', '    event PayeeAdded(address account, uint256 shares);\n', '    event PaymentReleased(address to, uint256 amount);\n', '    event PaymentReceived(address from, uint256 amount);\n', '\n', '    constructor (address[] _payees, uint256[] _shares)\n', '        public\n', '        payable\n', '    {\n', '        _initializePayess(_payees, _shares);\n', '    }\n', '\n', '    function ()\n', '        external\n', '        payable\n', '    {\n', '        emit PaymentReceived(msg.sender, msg.value);\n', '    }\n', '\n', '    function getTotalShares()\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return totalShares;\n', '    }\n', '\n', '    function getTotalReleased()\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return totalReleased;\n', '    }\n', '\n', '    function getShares(address _account)\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return shares[_account];\n', '    }\n', '\n', '    function getReleased(address _account)\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return released[_account];\n', '    }\n', '\n', '    function getPayee(uint256 _index)\n', '        external\n', '        view\n', '        returns (address)\n', '    {\n', '        return payees[_index];\n', '    }\n', '    \n', '    function getPayeesCount() \n', '        external\n', '        view\n', '        returns (uint256)\n', '    {   \n', '        return payees.length;\n', '    }\n', '\n', '    function release(address _account) \n', '        public\n', '    {\n', '        require(shares[_account] > 0);\n', '\n', '        uint256 totalReceived = address(this).balance.add(totalReleased);\n', '        uint256 payment = totalReceived.mul(shares[_account]).div(totalShares).sub(released[_account]);\n', '\n', '        require(payment != 0);\n', '\n', '        released[_account] = released[_account].add(payment);\n', '        totalReleased = totalReleased.add(payment);\n', '\n', '        _account.transfer(payment);\n', '        \n', '        emit PaymentReleased(_account, payment);\n', '    }\n', '    \n', '    function _initializePayess(address[] _payees, uint256[] _shares)\n', '        internal\n', '    {\n', '        require(payees.length == 0);\n', '        require(_payees.length == _shares.length);\n', '        require(_payees.length > 0 && _payees.length <= 8);\n', '\n', '        for (uint256 i = 0; i < _payees.length; i++) {\n', '            _addPayee(_payees[i], _shares[i]);\n', '        }\n', '    }\n', '\n', '    function _addPayee(\n', '        address _account,\n', '        uint256 _shares\n', '    ) \n', '        internal\n', '    {\n', '        require(_account != address(0));\n', '        require(_shares > 0);\n', '        require(shares[_account] == 0);\n', '\n', '        payees.push(_account);\n', '        shares[_account] = _shares;\n', '        totalShares = totalShares.add(_shares);\n', '        \n', '        emit PayeeAdded(_account, _shares);\n', '    }\n', '}\n', '\n', '// File: contracts/databases/DatabasePermissionControl.sol\n', '\n', '/**\n', '* @title Chaingear - the novel Ethereum database framework\n', '* @author cyber•Congress, Valery litvin (@litvintech)\n', '* @notice not audited, not recommend to use in mainnet\n', '*/\n', 'contract DatabasePermissionControl is Ownable {\n', '\n', '    /*\n', '    *  Storage\n', '    */\n', '\n', '    enum CreateEntryPermissionGroup {OnlyAdmin, Whitelist, AllUsers}\n', '\n', '    address private admin;\n', '    bool private paused = true;\n', '\n', '    mapping(address => bool) private whitelist;\n', '\n', '    CreateEntryPermissionGroup private permissionGroup = CreateEntryPermissionGroup.OnlyAdmin;\n', '\n', '    /*\n', '    *  Events\n', '    */\n', '\n', '    event Pause();\n', '    event Unpause();\n', '    event PermissionGroupChanged(CreateEntryPermissionGroup);\n', '    event AddedToWhitelist(address);\n', '    event RemovedFromWhitelist(address);\n', '    event AdminshipTransferred(address, address);\n', '\n', '    /*\n', '    *  Constructor\n', '    */\n', '\n', '    constructor()\n', '        public\n', '    { }\n', '\n', '    /*\n', '    *  Modifiers\n', '    */\n', '\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAdmin() {\n', '        require(msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    modifier onlyPermissionedToCreateEntries() {\n', '        if (permissionGroup == CreateEntryPermissionGroup.OnlyAdmin) {\n', '            require(msg.sender == admin);\n', '        } else if (permissionGroup == CreateEntryPermissionGroup.Whitelist) {\n', '            require(whitelist[msg.sender] == true || msg.sender == admin);\n', '        }\n', '        _;\n', '    }\n', '\n', '    /*\n', '    *  External functions\n', '    */\n', '\n', '    function pause()\n', '        external\n', '        onlyAdmin\n', '        whenNotPaused\n', '    {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    function unpause()\n', '        external\n', '        onlyAdmin\n', '        whenPaused\n', '    {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '\n', '    function transferAdminRights(address _newAdmin)\n', '        external\n', '        onlyOwner\n', '        whenPaused\n', '    {\n', '        require(_newAdmin != address(0));\n', '        emit AdminshipTransferred(admin, _newAdmin);\n', '        admin = _newAdmin;\n', '    }\n', '\n', '    function updateCreateEntryPermissionGroup(CreateEntryPermissionGroup _newPermissionGroup)\n', '        external\n', '        onlyAdmin\n', '        whenPaused\n', '    {\n', '        require(CreateEntryPermissionGroup.AllUsers >= _newPermissionGroup);\n', '        \n', '        permissionGroup = _newPermissionGroup;\n', '        emit PermissionGroupChanged(_newPermissionGroup);\n', '    }\n', '\n', '    function addToWhitelist(address _address)\n', '        external\n', '        onlyAdmin\n', '        whenPaused\n', '    {\n', '        whitelist[_address] = true;\n', '        emit AddedToWhitelist(_address);\n', '    }\n', '\n', '    function removeFromWhitelist(address _address)\n', '        external\n', '        onlyAdmin\n', '        whenPaused\n', '    {\n', '        whitelist[_address] = false;\n', '        emit RemovedFromWhitelist(_address);\n', '    }\n', '\n', '    function getAdmin()\n', '        external\n', '        view\n', '        returns (address)\n', '    {\n', '        return admin;\n', '    }\n', '\n', '    function getDatabasePermissions()\n', '        external\n', '        view\n', '        returns (CreateEntryPermissionGroup)\n', '    {\n', '        return permissionGroup;\n', '    }\n', '\n', '    function checkWhitelisting(address _address)\n', '        external\n', '        view\n', '        returns (bool)\n', '    {\n', '        return whitelist[_address];\n', '    }\n', '    \n', '    function getPaused()\n', '        external\n', '        view\n', '        returns (bool)\n', '    {\n', '        return paused;\n', '    }\n', '}\n', '\n', '// File: contracts/databases/FeeSplitterDatabase.sol\n', '\n', 'contract FeeSplitterDatabase is PaymentSplitter, DatabasePermissionControl {\n', '    \n', '    event PayeeAddressChanged(\n', '        uint8 payeeIndex, \n', '        address oldAddress, \n', '        address newAddress\n', '    );\n', '    event PayeesDeleted();\n', '\n', '    constructor(address[] _payees, uint256[] _shares)\n', '        public\n', '        payable\n', '        PaymentSplitter(_payees, _shares)\n', '    { }\n', '    \n', '    function ()\n', '        external\n', '        payable\n', '        whenNotPaused\n', '    {\n', '        emit PaymentReceived(msg.sender, msg.value);\n', '    }\n', '    \n', '    function changePayeeAddress(uint8 _payeeIndex, address _newAddress)\n', '        external\n', '        whenNotPaused\n', '    {\n', '        require(_payeeIndex < 8);\n', '        require(msg.sender == payees[_payeeIndex]);\n', '        require(payees[_payeeIndex] != _newAddress);\n', '        \n', '        address oldAddress = payees[_payeeIndex];\n', '\n', '        shares[_newAddress] = shares[oldAddress];\n', '        released[_newAddress] = released[oldAddress];\n', '        payees[_payeeIndex] = _newAddress;\n', '\n', '        delete shares[oldAddress];\n', '        delete released[oldAddress];\n', '\n', '        emit PayeeAddressChanged(_payeeIndex, oldAddress, _newAddress);\n', '    }\n', '    \n', '    function setPayess(address[] _payees, uint256[] _shares)\n', '        external\n', '        whenPaused\n', '        onlyAdmin\n', '    {\n', '        _initializePayess(_payees, _shares);\n', '    }\n', '    \n', '    function deletePayees()\n', '        external\n', '        whenPaused\n', '        onlyOwner\n', '    {\n', '        for (uint8 i = 0; i < payees.length; i++) {\n', '            address account = payees[i];\n', '            delete shares[account];\n', '            delete released[account];\n', '        }\n', '        payees.length = 0;\n', '        totalShares = 0;\n', '        totalReleased = 0;\n', '        \n', '        emit PayeesDeleted();\n', '    }\n', '}\n', '\n', '// File: contracts/databases/DatabaseV1.sol\n', '\n', '/**\n', '* @title Chaingear - the novel Ethereum database framework\n', '* @author cyber•Congress, Valery litvin (@litvintech)\n', '* @notice not audited, not recommend to use in mainnet\n', '*/\n', 'contract DatabaseV1 is IDatabase, Ownable, DatabasePermissionControl, SupportsInterfaceWithLookup, FeeSplitterDatabase, ERC721Token {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    /*\n', '    *  Storage\n', '    */\n', '    \n', '    bytes4 private constant INTERFACE_SCHEMA_EULER_ID = 0x153366ed;\n', '    bytes4 private constant INTERFACE_DATABASE_V1_EULER_ID = 0xf2c320c4;\n', '\n', '    // @dev Metadata of entry, holds ownership data and funding info\n', '    struct EntryMeta {\n', '        address creator;\n', '        uint256 createdAt;\n', '        uint256 lastUpdateTime;\n', '        uint256 currentWei;\n', '        uint256 accumulatedWei;\n', '    }\n', '\n', '    EntryMeta[] private entriesMeta;\n', '    Safe private databaseSafe;\n', '\n', '    uint256 private headTokenID = 0;\n', '    uint256 private entryCreationFeeWei = 0;\n', '\n', '    bytes32[] private databaseTags;\n', '    string private databaseDescription;\n', '    \n', '    string private schemaDefinition;\n', '    ISchema private entriesStorage;\n', '    bool private databaseInitStatus = false;\n', '\n', '    /*\n', '    *  Modifiers\n', '    */\n', '\n', '    modifier onlyOwnerOf(uint256 _entryID){\n', '        require(ownerOf(_entryID) == msg.sender);\n', '        _;\n', '    }\n', '\n', '    modifier databaseInitialized {\n', '        require(databaseInitStatus == true);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    *  Events\n', '    */\n', '\n', '    event EntryCreated(uint256 entryID, address creator);\n', '    event EntryDeleted(uint256 entryID, address owner);\n', '    event EntryFunded(\n', '        uint256 entryID,\n', '        address funder,\n', '        uint256 amount\n', '    );\n', '    event EntryFundsClaimed(\n', '        uint256 entryID,\n', '        address claimer,\n', '        uint256 amount\n', '    );\n', '    event EntryCreationFeeUpdated(uint256 newFees);\n', '    event DescriptionUpdated(string newDescription);\n', '    event DatabaseInitialized();\n', '    event TagAdded(bytes32 tag);\n', '    event TagUpdated(uint8 index, bytes32 tag);\n', '    event TagDeleted(uint8 index);\n', '\n', '    /*\n', '    *  Constructor\n', '    */\n', '\n', '    constructor(\n', '        address[] _beneficiaries,\n', '        uint256[] _shares,\n', '        string _name,\n', '        string _symbol\n', '    )\n', '        ERC721Token (_name, _symbol)\n', '        FeeSplitterDatabase (_beneficiaries, _shares)\n', '        public\n', '        payable\n', '    {\n', '        _registerInterface(INTERFACE_DATABASE_V1_EULER_ID);\n', '        databaseSafe = new Safe();\n', '    }\n', '\n', '    /*\n', '    *  External functions\n', '    */\n', '\n', '    function createEntry()\n', '        external\n', '        databaseInitialized\n', '        onlyPermissionedToCreateEntries\n', '        whenNotPaused\n', '        payable\n', '        returns (uint256)\n', '    {\n', '        require(msg.value == entryCreationFeeWei);\n', '\n', '        EntryMeta memory meta = (EntryMeta(\n', '        {\n', '            lastUpdateTime: block.timestamp,\n', '            createdAt: block.timestamp,\n', '            creator: msg.sender,\n', '            currentWei: 0,\n', '            accumulatedWei: 0\n', '        }));\n', '        entriesMeta.push(meta);\n', '\n', '        uint256 newTokenID = headTokenID;\n', '        super._mint(msg.sender, newTokenID);\n', '        headTokenID = headTokenID.add(1);\n', '\n', '        emit EntryCreated(newTokenID, msg.sender);\n', '\n', '        entriesStorage.createEntry();\n', '\n', '        return newTokenID;\n', '    }\n', '\n', '    function auth(uint256 _entryID, address _caller)\n', '        external\n', '        whenNotPaused\n', '    {\n', '        require(msg.sender == address(entriesStorage));\n', '        require(ownerOf(_entryID) == _caller);\n', '        uint256 entryIndex = allTokensIndex[_entryID];\n', '        entriesMeta[entryIndex].lastUpdateTime = block.timestamp;\n', '    }\n', '\n', '    function deleteEntry(uint256 _entryID)\n', '        external\n', '        databaseInitialized\n', '        onlyOwnerOf(_entryID)\n', '        whenNotPaused\n', '    {\n', '        uint256 entryIndex = allTokensIndex[_entryID];\n', '        require(entriesMeta[entryIndex].currentWei == 0);\n', '\n', '        uint256 lastEntryIndex = entriesMeta.length.sub(1);\n', '        EntryMeta memory lastEntry = entriesMeta[lastEntryIndex];\n', '\n', '        entriesMeta[entryIndex] = lastEntry;\n', '        delete entriesMeta[lastEntryIndex];\n', '        entriesMeta.length--;\n', '\n', '        super._burn(msg.sender, _entryID);\n', '        emit EntryDeleted(_entryID, msg.sender);\n', '\n', '        entriesStorage.deleteEntry(entryIndex);\n', '    }\n', '\n', '    function fundEntry(uint256 _entryID)\n', '        external\n', '        databaseInitialized\n', '        whenNotPaused\n', '        payable\n', '    {\n', '        require(exists(_entryID) == true);\n', '\n', '        uint256 entryIndex = allTokensIndex[_entryID];\n', '        uint256 currentWei = entriesMeta[entryIndex].currentWei.add(msg.value);\n', '        entriesMeta[entryIndex].currentWei = currentWei;\n', '\n', '        uint256 accumulatedWei = entriesMeta[entryIndex].accumulatedWei.add(msg.value);\n', '        entriesMeta[entryIndex].accumulatedWei = accumulatedWei;\n', '\n', '        emit EntryFunded(_entryID, msg.sender, msg.value);\n', '        address(databaseSafe).transfer(msg.value);\n', '    }\n', '\n', '    function claimEntryFunds(uint256 _entryID, uint256 _amount)\n', '        external\n', '        databaseInitialized\n', '        onlyOwnerOf(_entryID)\n', '        whenNotPaused\n', '    {\n', '        uint256 entryIndex = allTokensIndex[_entryID];\n', '\n', '        uint256 currentWei = entriesMeta[entryIndex].currentWei;\n', '        require(_amount <= currentWei);\n', '        entriesMeta[entryIndex].currentWei = currentWei.sub(_amount);\n', '\n', '        emit EntryFundsClaimed(_entryID, msg.sender, _amount);\n', '        databaseSafe.claim(msg.sender, _amount);\n', '    }\n', '\n', '    function updateEntryCreationFee(uint256 _newFee)\n', '        external\n', '        onlyAdmin\n', '        whenPaused\n', '    {\n', '        entryCreationFeeWei = _newFee;\n', '        emit EntryCreationFeeUpdated(_newFee);\n', '    }\n', '\n', '    function updateDatabaseDescription(string _newDescription)\n', '        external\n', '        onlyAdmin\n', '    {\n', '        databaseDescription = _newDescription;\n', '        emit DescriptionUpdated(_newDescription);\n', '    }\n', '\n', '    function addDatabaseTag(bytes32 _tag)\n', '        external\n', '        onlyAdmin\n', '    {\n', '        require(databaseTags.length < 16);\n', '        databaseTags.push(_tag);    \n', '        emit TagAdded(_tag);\n', '    }\n', '\n', '    function updateDatabaseTag(uint8 _index, bytes32 _tag)\n', '        external\n', '        onlyAdmin\n', '    {\n', '        require(_index < databaseTags.length);\n', '        databaseTags[_index] = _tag;    \n', '        emit TagUpdated(_index, _tag);\n', '    }\n', '\n', '    function removeDatabaseTag(uint8 _index)\n', '        external\n', '        onlyAdmin\n', '    {\n', '        require(databaseTags.length > 0);\n', '        require(_index < databaseTags.length);\n', '\n', '        uint256 lastTagIndex = databaseTags.length.sub(1);\n', '        bytes32 lastTag = databaseTags[lastTagIndex];\n', '\n', '        databaseTags[_index] = lastTag;\n', '        databaseTags[lastTagIndex] = "";\n', '        databaseTags.length--;\n', '        \n', '        emit TagDeleted(_index);\n', '    }\n', '\n', '    /*\n', '    *  View functions\n', '    */\n', '\n', '    function readEntryMeta(uint256 _entryID)\n', '        external\n', '        view\n', '        returns (\n', '            address,\n', '            address,\n', '            uint256,\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        )\n', '    {\n', '        require(exists(_entryID) == true);\n', '        uint256 entryIndex = allTokensIndex[_entryID];\n', '\n', '        EntryMeta memory m = entriesMeta[entryIndex];\n', '        return(\n', '            ownerOf(_entryID),\n', '            m.creator,\n', '            m.createdAt,\n', '            m.lastUpdateTime,\n', '            m.currentWei,\n', '            m.accumulatedWei\n', '        );\n', '    }\n', '\n', '    function getChaingearID()\n', '        external\n', '        view\n', '        returns(uint256)\n', '    {\n', '        return IChaingear(owner).getDatabaseIDByAddress(address(this));\n', '    }\n', '\n', '    function getEntriesIDs()\n', '        external\n', '        view\n', '        returns (uint256[])\n', '    {\n', '        return allTokens;\n', '    }\n', '\n', '    function getIndexByID(uint256 _entryID)\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        require(exists(_entryID) == true);\n', '        return allTokensIndex[_entryID];\n', '    }\n', '\n', '    function getEntryCreationFee()\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return entryCreationFeeWei;\n', '    }\n', '\n', '    function getEntriesStorage()\n', '        external\n', '        view\n', '        returns (address)\n', '    {\n', '        return address(entriesStorage);\n', '    }\n', '    \n', '    function getSchemaDefinition()\n', '        external\n', '        view\n', '        returns (string)\n', '    {\n', '        return schemaDefinition;\n', '    }\n', '\n', '    function getDatabaseBalance()\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return address(this).balance;\n', '    }\n', '\n', '    function getDatabaseDescription()\n', '        external\n', '        view\n', '        returns (string)\n', '    {\n', '        return databaseDescription;\n', '    }\n', '\n', '    function getDatabaseTags()\n', '        external\n', '        view\n', '        returns (bytes32[])\n', '    {\n', '        return databaseTags;\n', '    }\n', '\n', '    function getDatabaseSafe()\n', '        external\n', '        view\n', '        returns (address)\n', '    {\n', '        return databaseSafe;\n', '    }\n', '\n', '    function getSafeBalance()\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return address(databaseSafe).balance;\n', '    }\n', '\n', '    function getDatabaseInitStatus()\n', '        external\n', '        view\n', '        returns (bool)\n', '    {\n', '        return databaseInitStatus;\n', '    }\n', '\n', '    /**\n', '    *  Public functions\n', '    */\n', '    \n', '    function initializeDatabase(string _schemaDefinition, bytes _schemaBytecode)\n', '        public\n', '        onlyAdmin\n', '        whenPaused\n', '        returns (address)\n', '    {\n', '        require(databaseInitStatus == false);\n', '        address deployedAddress;\n', '\n', '        assembly {\n', '            let s := mload(_schemaBytecode)\n', '            let p := add(_schemaBytecode, 0x20)\n', '            deployedAddress := create(0, p, s)\n', '        }\n', '\n', '        require(deployedAddress != address(0));\n', '        require(SupportsInterfaceWithLookup(deployedAddress).supportsInterface(INTERFACE_SCHEMA_EULER_ID));\n', '        entriesStorage = ISchema(deployedAddress);\n', '    \n', '        schemaDefinition = _schemaDefinition;\n', '        databaseInitStatus = true;\n', '\n', '        emit DatabaseInitialized();\n', '        return deployedAddress;\n', '    }\n', '\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _tokenId\n', '    )\n', '        public\n', '        databaseInitialized\n', '        whenNotPaused\n', '    {\n', '        super.transferFrom(_from, _to, _tokenId);\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _tokenId\n', '    )\n', '        public\n', '        databaseInitialized\n', '        whenNotPaused\n', '    {\n', '        safeTransferFrom(\n', '            _from,\n', '            _to,\n', '            _tokenId,\n', '            ""\n', '        );\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _tokenId,\n', '        bytes _data\n', '    )\n', '        public\n', '        databaseInitialized\n', '        whenNotPaused\n', '    {\n', '        transferFrom(_from, _to, _tokenId);\n', '        require(\n', '            checkAndCallSafeTransfer(\n', '                _from,\n', '                _to,\n', '                _tokenId,\n', '                _data\n', '        ));\n', '    }\n', '}']