['pragma solidity 0.4.25;\n', '\n', '// File: contracts\\lib\\SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts\\lib\\ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: contracts\\FundsSplitter.sol\n', '\n', 'contract FundsSplitter {\n', '    using SafeMath for uint256;\n', '\n', '    address public client;\n', '    address public starbase;\n', '    uint256 public starbasePercentage;\n', '\n', '    ERC20 public star;\n', '    ERC20 public tokenOnSale;\n', '\n', '    /**\n', '     * @dev initialization function\n', '     * @param _client Address where client&#39;s share goes\n', '     * @param _starbase Address where starbase&#39;s share goes\n', '     * @param _starbasePercentage Number that denotes client percentage share (between 1 and 100)\n', '     * @param _star Star ERC20 token address\n', '     * @param _tokenOnSale Token on sale&#39;s ERC20 token address\n', '     */\n', '    constructor(\n', '        address _client,\n', '        address _starbase,\n', '        uint256 _starbasePercentage,\n', '        ERC20 _star,\n', '        ERC20 _tokenOnSale\n', '    )\n', '        public\n', '    {\n', '        client = _client;\n', '        starbase = _starbase;\n', '        starbasePercentage = _starbasePercentage;\n', '        star = _star;\n', '        tokenOnSale = _tokenOnSale;\n', '    }\n', '\n', '    /**\n', '     * @dev fallback function that accepts funds\n', '     */\n', '    function() public payable { }\n', '\n', '    /**\n', '     * @dev splits star that are allocated to contract\n', '     */\n', '    function splitStarFunds() public {\n', '        uint256 starFunds = star.balanceOf(address(this));\n', '        uint256 starbaseShare = starFunds.mul(starbasePercentage).div(100);\n', '\n', '        star.transfer(starbase, starbaseShare);\n', '        star.transfer(client, star.balanceOf(address(this))); // send remaining stars to client\n', '    }\n', '\n', '    /**\n', '     * @dev core fund splitting functionality as part of the funds are sent to client and part to starbase\n', '     */\n', '    function splitFunds() public payable {\n', '        uint256 starbaseShare = address(this).balance.mul(starbasePercentage).div(100);\n', '\n', '        starbase.transfer(starbaseShare);\n', '        client.transfer(address(this).balance); // remaining ether to client\n', '    }\n', '\n', '    /**\n', '     * @dev withdraw any remaining tokens on sale\n', '     */\n', '    function withdrawRemainingTokens() public {\n', '        tokenOnSale.transfer(client, tokenOnSale.balanceOf(address(this)));\n', '    }\n', '}']