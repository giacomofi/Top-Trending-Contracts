['\n', '// File: contracts/AssetInterface.sol\n', '\n', 'pragma solidity 0.4.23;\n', '\n', '\n', 'contract AssetInterface {\n', '    function _performTransferWithReference(\n', '        address _to,\n', '        uint _value,\n', '        string _reference,\n', '        address _sender)\n', '    public returns(bool);\n', '\n', '    function _performTransferToICAPWithReference(\n', '        bytes32 _icap,\n', '        uint _value,\n', '        string _reference,\n', '        address _sender)\n', '    public returns(bool);\n', '\n', '    function _performApprove(address _spender, uint _value, address _sender)\n', '    public returns(bool);\n', '\n', '    function _performTransferFromWithReference(\n', '        address _from,\n', '        address _to,\n', '        uint _value,\n', '        string _reference,\n', '        address _sender)\n', '    public returns(bool);\n', '\n', '    function _performTransferFromToICAPWithReference(\n', '        address _from,\n', '        bytes32 _icap,\n', '        uint _value,\n', '        string _reference,\n', '        address _sender)\n', '    public returns(bool);\n', '\n', '    function _performGeneric(bytes, address) public payable {\n', '        revert();\n', '    }\n', '}\n', '\n', '// File: contracts/ERC20Interface.sol\n', '\n', 'pragma solidity 0.4.23;\n', '\n', '\n', 'contract ERC20Interface {\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed from, address indexed spender, uint256 value);\n', '\n', '    function totalSupply() public view returns(uint256 supply);\n', '    function balanceOf(address _owner) public view returns(uint256 balance);\n', '    // solhint-disable-next-line no-simple-event-func-name\n', '    function transfer(address _to, uint256 _value) public returns(bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns(bool success);\n', '    function approve(address _spender, uint256 _value) public returns(bool success);\n', '    function allowance(address _owner, address _spender) public view returns(uint256 remaining);\n', '\n', '    // function symbol() constant returns(string);\n', '    function decimals() public view returns(uint8);\n', '    // function name() constant returns(string);\n', '}\n', '\n', '// File: contracts/AssetProxyInterface.sol\n', '\n', 'pragma solidity 0.4.23;\n', '\n', '\n', '\n', 'contract AssetProxyInterface is ERC20Interface {\n', '    function _forwardApprove(address _spender, uint _value, address _sender)\n', '    public returns(bool);\n', '\n', '    function _forwardTransferFromWithReference(\n', '        address _from,\n', '        address _to,\n', '        uint _value,\n', '        string _reference,\n', '        address _sender)\n', '    public returns(bool);\n', '\n', '    function _forwardTransferFromToICAPWithReference(\n', '        address _from,\n', '        bytes32 _icap,\n', '        uint _value,\n', '        string _reference,\n', '        address _sender)\n', '    public returns(bool);\n', '\n', '    function recoverTokens(ERC20Interface _asset, address _receiver, uint _value)\n', '    public returns(bool);\n', '\n', '    // solhint-disable-next-line no-empty-blocks\n', '    function etoken2() public pure returns(address) {} // To be replaced by the implicit getter;\n', '\n', '    // To be replaced by the implicit getter;\n', '    // solhint-disable-next-line no-empty-blocks\n', '    function etoken2Symbol() public pure returns(bytes32) {}\n', '}\n', '\n', '// File: contracts/helpers/Bytes32.sol\n', '\n', 'pragma solidity 0.4.23;\n', '\n', '\n', 'contract Bytes32 {\n', '    function _bytes32(string _input) internal pure returns(bytes32 result) {\n', '        assembly {\n', '            result := mload(add(_input, 32))\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/helpers/ReturnData.sol\n', '\n', 'pragma solidity 0.4.23;\n', '\n', '\n', 'contract ReturnData {\n', '    function _returnReturnData(bool _success) internal pure {\n', '        assembly {\n', '            let returndatastart := 0\n', '            returndatacopy(returndatastart, 0, returndatasize)\n', '            switch _success case 0 { revert(returndatastart, returndatasize) }\n', '                default { return(returndatastart, returndatasize) }\n', '        }\n', '    }\n', '\n', '    function _assemblyCall(address _destination, uint _value, bytes _data)\n', '    internal returns(bool success) {\n', '        assembly {\n', '            success := call(gas, _destination, _value, add(_data, 32), mload(_data), 0, 0)\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/Asset.sol\n', '\n', 'pragma solidity 0.4.23;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title EToken2 Asset implementation contract.\n', ' *\n', ' * Basic asset implementation contract, without any additional logic.\n', ' * Every other asset implementation contracts should derive from this one.\n', ' * Receives calls from the proxy, and calls back immediately without arguments modification.\n', ' *\n', ' * Note: all the non constant functions return false instead of throwing in case if state change\n', " * didn't happen yet.\n", ' */\n', 'contract Asset is AssetInterface, Bytes32, ReturnData {\n', '    // Assigned asset proxy contract, immutable.\n', '    AssetProxyInterface public proxy;\n', '\n', '    /**\n', '     * Only assigned proxy is allowed to call.\n', '     */\n', '    modifier onlyProxy() {\n', '        if (proxy == msg.sender) {\n', '            _;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Sets asset proxy address.\n', '     *\n', '     * Can be set only once.\n', '     *\n', '     * @param _proxy asset proxy contract address.\n', '     *\n', '     * @return success.\n', '     * @dev function is final, and must not be overridden.\n', '     */\n', '    function init(AssetProxyInterface _proxy) public returns(bool) {\n', '        if (address(proxy) != 0x0) {\n', '            return false;\n', '        }\n', '        proxy = _proxy;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Passes execution into virtual function.\n', '     *\n', '     * Can only be called by assigned asset proxy.\n', '     *\n', '     * @return success.\n', '     * @dev function is final, and must not be overridden.\n', '     */\n', '    function _performTransferWithReference(\n', '        address _to,\n', '        uint _value,\n', '        string _reference,\n', '        address _sender)\n', '    public onlyProxy() returns(bool) {\n', '        if (isICAP(_to)) {\n', '            return _transferToICAPWithReference(\n', '                bytes32(_to) << 96, _value, _reference, _sender);\n', '        }\n', '        return _transferWithReference(_to, _value, _reference, _sender);\n', '    }\n', '\n', '    /**\n', '     * Calls back without modifications.\n', '     *\n', '     * @return success.\n', '     * @dev function is virtual, and meant to be overridden.\n', '     */\n', '    function _transferWithReference(\n', '        address _to,\n', '        uint _value,\n', '        string _reference,\n', '        address _sender)\n', '    internal returns(bool) {\n', '        return proxy._forwardTransferFromWithReference(\n', '            _sender, _to, _value, _reference, _sender);\n', '    }\n', '\n', '    /**\n', '     * Passes execution into virtual function.\n', '     *\n', '     * Can only be called by assigned asset proxy.\n', '     *\n', '     * @return success.\n', '     * @dev function is final, and must not be overridden.\n', '     */\n', '    function _performTransferToICAPWithReference(\n', '        bytes32 _icap,\n', '        uint _value,\n', '        string _reference,\n', '        address _sender)\n', '    public onlyProxy() returns(bool) {\n', '        return _transferToICAPWithReference(_icap, _value, _reference, _sender);\n', '    }\n', '\n', '    /**\n', '     * Calls back without modifications.\n', '     *\n', '     * @return success.\n', '     * @dev function is virtual, and meant to be overridden.\n', '     */\n', '    function _transferToICAPWithReference(\n', '        bytes32 _icap,\n', '        uint _value,\n', '        string _reference,\n', '        address _sender)\n', '    internal returns(bool) {\n', '        return proxy._forwardTransferFromToICAPWithReference(\n', '            _sender, _icap, _value, _reference, _sender);\n', '    }\n', '\n', '    /**\n', '     * Passes execution into virtual function.\n', '     *\n', '     * Can only be called by assigned asset proxy.\n', '     *\n', '     * @return success.\n', '     * @dev function is final, and must not be overridden.\n', '     */\n', '    function _performTransferFromWithReference(\n', '        address _from,\n', '        address _to,\n', '        uint _value,\n', '        string _reference,\n', '        address _sender)\n', '    public onlyProxy() returns(bool) {\n', '        if (isICAP(_to)) {\n', '            return _transferFromToICAPWithReference(\n', '                _from, bytes32(_to) << 96, _value, _reference, _sender);\n', '        }\n', '        return _transferFromWithReference(_from, _to, _value, _reference, _sender);\n', '    }\n', '\n', '    /**\n', '     * Calls back without modifications.\n', '     *\n', '     * @return success.\n', '     * @dev function is virtual, and meant to be overridden.\n', '     */\n', '    function _transferFromWithReference(\n', '        address _from,\n', '        address _to,\n', '        uint _value,\n', '        string _reference,\n', '        address _sender)\n', '    internal returns(bool) {\n', '        return proxy._forwardTransferFromWithReference(\n', '            _from, _to, _value, _reference, _sender);\n', '    }\n', '\n', '    /**\n', '     * Passes execution into virtual function.\n', '     *\n', '     * Can only be called by assigned asset proxy.\n', '     *\n', '     * @return success.\n', '     * @dev function is final, and must not be overridden.\n', '     */\n', '    function _performTransferFromToICAPWithReference(\n', '        address _from,\n', '        bytes32 _icap,\n', '        uint _value,\n', '        string _reference,\n', '        address _sender)\n', '    public onlyProxy() returns(bool) {\n', '        return _transferFromToICAPWithReference(\n', '            _from, _icap, _value, _reference, _sender);\n', '    }\n', '\n', '    /**\n', '     * Calls back without modifications.\n', '     *\n', '     * @return success.\n', '     * @dev function is virtual, and meant to be overridden.\n', '     */\n', '    function _transferFromToICAPWithReference(\n', '        address _from,\n', '        bytes32 _icap,\n', '        uint _value,\n', '        string _reference,\n', '        address _sender)\n', '    internal returns(bool) {\n', '        return proxy._forwardTransferFromToICAPWithReference(\n', '            _from, _icap, _value, _reference, _sender);\n', '    }\n', '\n', '    /**\n', '     * Passes execution into virtual function.\n', '     *\n', '     * Can only be called by assigned asset proxy.\n', '     *\n', '     * @return success.\n', '     * @dev function is final, and must not be overridden.\n', '     */\n', '    function _performApprove(address _spender, uint _value, address _sender)\n', '    public onlyProxy() returns(bool) {\n', '        return _approve(_spender, _value, _sender);\n', '    }\n', '\n', '    /**\n', '     * Calls back without modifications.\n', '     *\n', '     * @return success.\n', '     * @dev function is virtual, and meant to be overridden.\n', '     */\n', '    function _approve(address _spender, uint _value, address _sender) \n', '    internal returns(bool) {\n', '        return proxy._forwardApprove(_spender, _value, _sender);\n', '    }\n', '\n', '    /**\n', '     * Passes execution into virtual function.\n', '     *\n', '     * Can only be called by assigned asset proxy.\n', '     *\n', '     * @return bytes32 result.\n', '     * @dev function is final, and must not be overridden.\n', '     */\n', '    function _performGeneric(bytes _data, address _sender)\n', '    public payable onlyProxy() {\n', '        _generic(_data, msg.value, _sender);\n', '    }\n', '\n', '    modifier onlyMe() {\n', '        if (this == msg.sender) {\n', '            _;\n', '        }\n', '    }\n', '\n', '    // Most probably the following should never be redefined in child contracts.\n', '    address public genericSender;\n', '\n', '    function _generic(bytes _data, uint _value, address _msgSender) internal {\n', '        // Restrict reentrancy.\n', '        require(genericSender == 0x0);\n', '        genericSender = _msgSender;\n', '        bool success = _assemblyCall(address(this), _value, _data);\n', '        delete genericSender;\n', '        _returnReturnData(success);\n', '    }\n', '\n', '    // Decsendants should use _sender() instead of msg.sender to properly process proxied calls.\n', '    function _sender() internal view returns(address) {\n', '        return this == msg.sender ? genericSender : msg.sender;\n', '    }\n', '\n', '    // Interface functions to allow specifying ICAP addresses as strings.\n', '    function transferToICAP(string _icap, uint _value) public returns(bool) {\n', "        return transferToICAPWithReference(_icap, _value, '');\n", '    }\n', '\n', '    function transferToICAPWithReference(string _icap, uint _value, string _reference)\n', '    public returns(bool) {\n', '        return _transferToICAPWithReference(\n', '            _bytes32(_icap), _value, _reference, _sender());\n', '    }\n', '\n', '    function transferFromToICAP(address _from, string _icap, uint _value)\n', '    public returns(bool) {\n', "        return transferFromToICAPWithReference(_from, _icap, _value, '');\n", '    }\n', '\n', '    function transferFromToICAPWithReference(\n', '        address _from,\n', '        string _icap,\n', '        uint _value,\n', '        string _reference)\n', '    public returns(bool) {\n', '        return _transferFromToICAPWithReference(\n', '            _from, _bytes32(_icap), _value, _reference, _sender());\n', '    }\n', '\n', '    function isICAP(address _address) public pure returns(bool) {\n', '        bytes32 a = bytes32(_address) << 96;\n', "        if (a[0] != 'X' || a[1] != 'E') {\n", '            return false;\n', '        }\n', '        if (a[2] < 48 || a[2] > 57 || a[3] < 48 || a[3] > 57) {\n', '            return false;\n', '        }\n', '        for (uint i = 4; i < 20; i++) {\n', '            uint char = uint(a[i]);\n', '            if (char < 48 || char > 90 || (char > 57 && char < 65)) {\n', '                return false;\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '}\n']