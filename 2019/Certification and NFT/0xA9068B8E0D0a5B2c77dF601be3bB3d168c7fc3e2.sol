['/**\n', ' *Submitted for verification at Etherscan.io on 2019-07-05\n', '*/\n', '\n', '// File: contracts/lifecycle/PausableProxy.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title PausableProxy\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract PausableProxy {\n', '    /**\n', '     * @dev Storage slot with the paused state of the contract.\n', '     * This is the keccak-256 hash of "org.monetha.proxy.paused", and is\n', '     * validated in the constructor.\n', '     */\n', '    bytes32 private constant PAUSED_OWNER_SLOT = 0x9e7945c55c116aa3404b99fe56db7af9613d3b899554a437c2616a4749a94d8a;\n', '\n', '    /**\n', '     * @dev The ClaimableProxy constructor validates PENDING_OWNER_SLOT constant.\n', '     */\n', '    constructor() public {\n', '        assert(PAUSED_OWNER_SLOT == keccak256("org.monetha.proxy.paused"));\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_getPaused(), "contract should not be paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_getPaused(), "contract should be paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return True when the contract is paused.\n', '     */\n', '    function _getPaused() internal view returns (bool paused) {\n', '        bytes32 slot = PAUSED_OWNER_SLOT;\n', '        assembly {\n', '            paused := sload(slot)\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Sets the paused state.\n', '     * @param _paused New paused state.\n', '     */\n', '    function _setPaused(bool _paused) internal {\n', '        bytes32 slot = PAUSED_OWNER_SLOT;\n', '        assembly {\n', '            sstore(slot, _paused)\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/ownership/OwnableProxy.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title OwnableProxy\n', ' */\n', 'contract OwnableProxy is PausableProxy {\n', '    event OwnershipRenounced(address indexed previousOwner);\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /**\n', '     * @dev Storage slot with the owner of the contract.\n', '     * This is the keccak-256 hash of "org.monetha.proxy.owner", and is\n', '     * validated in the constructor.\n', '     */\n', '    bytes32 private constant OWNER_SLOT = 0x3ca57e4b51fc2e18497b219410298879868edada7e6fe5132c8feceb0a080d22;\n', '\n', '    /**\n', '     * @dev The OwnableProxy constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        assert(OWNER_SLOT == keccak256("org.monetha.proxy.owner"));\n', '\n', '        _setOwner(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == _getOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * @notice Renouncing to ownership will leave the contract without an owner.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     */\n', '    function renounceOwnership() public onlyOwner whenNotPaused {\n', '        emit OwnershipRenounced(_getOwner());\n', '        _setOwner(address(0));\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address _newOwner) public onlyOwner whenNotPaused {\n', '        _transferOwnership(_newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address _newOwner) internal {\n', '        require(_newOwner != address(0));\n', '        emit OwnershipTransferred(_getOwner(), _newOwner);\n', '        _setOwner(_newOwner);\n', '    }\n', '\n', '    /**\n', '     * @return The owner address.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _getOwner();\n', '    }\n', '\n', '    /**\n', '     * @return The owner address.\n', '     */\n', '    function _getOwner() internal view returns (address own) {\n', '        bytes32 slot = OWNER_SLOT;\n', '        assembly {\n', '            own := sload(slot)\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Sets the address of the proxy owner.\n', '     * @param _newOwner Address of the new proxy owner.\n', '     */\n', '    function _setOwner(address _newOwner) internal {\n', '        bytes32 slot = OWNER_SLOT;\n', '\n', '        assembly {\n', '            sstore(slot, _newOwner)\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/ownership/ClaimableProxy.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title ClaimableProxy\n', ' * @dev Extension for the OwnableProxy contract, where the ownership needs to be claimed.\n', ' * This allows the new owner to accept the transfer.\n', ' */\n', 'contract ClaimableProxy is OwnableProxy {\n', '    /**\n', '     * @dev Storage slot with the pending owner of the contract.\n', '     * This is the keccak-256 hash of "org.monetha.proxy.pendingOwner", and is\n', '     * validated in the constructor.\n', '     */\n', '    bytes32 private constant PENDING_OWNER_SLOT = 0xcfd0c6ea5352192d7d4c5d4e7a73c5da12c871730cb60ff57879cbe7b403bb52;\n', '\n', '    /**\n', '     * @dev The ClaimableProxy constructor validates PENDING_OWNER_SLOT constant.\n', '     */\n', '    constructor() public {\n', '        assert(PENDING_OWNER_SLOT == keccak256("org.monetha.proxy.pendingOwner"));\n', '    }\n', '\n', '    function pendingOwner() public view returns (address) {\n', '        return _getPendingOwner();\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier throws if called by any account other than the pendingOwner.\n', '     */\n', '    modifier onlyPendingOwner() {\n', '        require(msg.sender == _getPendingOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to set the pendingOwner address.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner whenNotPaused {\n', '        _setPendingOwner(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the pendingOwner address to finalize the transfer.\n', '     */\n', '    function claimOwnership() public onlyPendingOwner whenNotPaused {\n', '        emit OwnershipTransferred(_getOwner(), _getPendingOwner());\n', '        _setOwner(_getPendingOwner());\n', '        _setPendingOwner(address(0));\n', '    }\n', '\n', '    /**\n', '     * @return The pending owner address.\n', '     */\n', '    function _getPendingOwner() internal view returns (address penOwn) {\n', '        bytes32 slot = PENDING_OWNER_SLOT;\n', '        assembly {\n', '            penOwn := sload(slot)\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Sets the address of the pending owner.\n', '     * @param _newPendingOwner Address of the new pending owner.\n', '     */\n', '    function _setPendingOwner(address _newPendingOwner) internal {\n', '        bytes32 slot = PENDING_OWNER_SLOT;\n', '\n', '        assembly {\n', '            sstore(slot, _newPendingOwner)\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/IPassportLogic.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', 'interface IPassportLogic {\n', '    /**\n', '     * @dev Returns the owner address of contract.\n', '     */\n', '    function owner() external view returns (address);\n', '\n', '    /**** Storage Set Methods ***********/\n', '\n', '    /// @param _key The key for the record\n', '    /// @param _value The value for the record\n', '    function setAddress(bytes32 _key, address _value) external;\n', '\n', '    /// @param _key The key for the record\n', '    /// @param _value The value for the record\n', '    function setUint(bytes32 _key, uint _value) external;\n', '\n', '    /// @param _key The key for the record\n', '    /// @param _value The value for the record\n', '    function setInt(bytes32 _key, int _value) external;\n', '\n', '    /// @param _key The key for the record\n', '    /// @param _value The value for the record\n', '    function setBool(bytes32 _key, bool _value) external;\n', '\n', '    /// @param _key The key for the record\n', '    /// @param _value The value for the record\n', '    function setString(bytes32 _key, string _value) external;\n', '\n', '    /// @param _key The key for the record\n', '    /// @param _value The value for the record\n', '    function setBytes(bytes32 _key, bytes _value) external;\n', '\n', '    /// @param _key The key for the record\n', '    function setTxDataBlockNumber(bytes32 _key, bytes _data) external;\n', '\n', '    /// @param _key The key for the record\n', '    /// @param _value The value for the record\n', '    function setIPFSHash(bytes32 _key, string _value) external;\n', '\n', '    /**** Storage Delete Methods ***********/\n', '\n', '    /// @param _key The key for the record\n', '    function deleteAddress(bytes32 _key) external;\n', '\n', '    /// @param _key The key for the record\n', '    function deleteUint(bytes32 _key) external;\n', '\n', '    /// @param _key The key for the record\n', '    function deleteInt(bytes32 _key) external;\n', '\n', '    /// @param _key The key for the record\n', '    function deleteBool(bytes32 _key) external;\n', '\n', '    /// @param _key The key for the record\n', '    function deleteString(bytes32 _key) external;\n', '\n', '    /// @param _key The key for the record\n', '    function deleteBytes(bytes32 _key) external;\n', '\n', '    /// @param _key The key for the record\n', '    function deleteTxDataBlockNumber(bytes32 _key) external;\n', '\n', '    /// @param _key The key for the record\n', '    function deleteIPFSHash(bytes32 _key) external;\n', '\n', '    /**** Storage Get Methods ***********/\n', '\n', '    /// @param _factProvider The fact provider\n', '    /// @param _key The key for the record\n', '    function getAddress(address _factProvider, bytes32 _key) external view returns (bool success, address value);\n', '\n', '    /// @param _factProvider The fact provider\n', '    /// @param _key The key for the record\n', '    function getUint(address _factProvider, bytes32 _key) external view returns (bool success, uint value);\n', '\n', '    /// @param _factProvider The fact provider\n', '    /// @param _key The key for the record\n', '    function getInt(address _factProvider, bytes32 _key) external view returns (bool success, int value);\n', '\n', '    /// @param _factProvider The fact provider\n', '    /// @param _key The key for the record\n', '    function getBool(address _factProvider, bytes32 _key) external view returns (bool success, bool value);\n', '\n', '    /// @param _factProvider The fact provider\n', '    /// @param _key The key for the record\n', '    function getString(address _factProvider, bytes32 _key) external view returns (bool success, string value);\n', '\n', '    /// @param _factProvider The fact provider\n', '    /// @param _key The key for the record\n', '    function getBytes(address _factProvider, bytes32 _key) external view returns (bool success, bytes value);\n', '\n', '    /// @param _factProvider The fact provider\n', '    /// @param _key The key for the record\n', '    function getTxDataBlockNumber(address _factProvider, bytes32 _key) external view returns (bool success, uint blockNumber);\n', '\n', '    /// @param _factProvider The fact provider\n', '    /// @param _key The key for the record\n', '    function getIPFSHash(address _factProvider, bytes32 _key) external view returns (bool success, string value);\n', '}\n', '\n', '// File: contracts/storage/Storage.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '// Storage contracts holds all state.\n', '// Do not change the order of the fields, аdd new fields to the end of the contract!\n', 'contract Storage is ClaimableProxy\n', '{\n', '    /***************************************************************************\n', '     *** STORAGE VARIABLES. DO NOT REORDER!!! ADD NEW VARIABLE TO THE END!!! ***\n', '     ***************************************************************************/\n', '\n', '    struct AddressValue {\n', '        bool initialized;\n', '        address value;\n', '    }\n', '\n', '    mapping(address => mapping(bytes32 => AddressValue)) internal addressStorage;\n', '\n', '    struct UintValue {\n', '        bool initialized;\n', '        uint value;\n', '    }\n', '\n', '    mapping(address => mapping(bytes32 => UintValue)) internal uintStorage;\n', '\n', '    struct IntValue {\n', '        bool initialized;\n', '        int value;\n', '    }\n', '\n', '    mapping(address => mapping(bytes32 => IntValue)) internal intStorage;\n', '\n', '    struct BoolValue {\n', '        bool initialized;\n', '        bool value;\n', '    }\n', '\n', '    mapping(address => mapping(bytes32 => BoolValue)) internal boolStorage;\n', '\n', '    struct StringValue {\n', '        bool initialized;\n', '        string value;\n', '    }\n', '\n', '    mapping(address => mapping(bytes32 => StringValue)) internal stringStorage;\n', '\n', '    struct BytesValue {\n', '        bool initialized;\n', '        bytes value;\n', '    }\n', '\n', '    mapping(address => mapping(bytes32 => BytesValue)) internal bytesStorage;\n', '\n', '    struct BlockNumberValue {\n', '        bool initialized;\n', '        uint blockNumber;\n', '    }\n', '\n', '    mapping(address => mapping(bytes32 => BlockNumberValue)) internal txBytesStorage;\n', '\n', '    bool private onlyFactProviderFromWhitelistAllowed;\n', '    mapping(address => bool) private factProviderWhitelist;\n', '\n', '    struct IPFSHashValue {\n', '        bool initialized;\n', '        string value;\n', '    }\n', '\n', '    mapping(address => mapping(bytes32 => IPFSHashValue)) internal ipfsHashStorage;\n', '\n', '    struct PrivateData {\n', '        string dataIPFSHash; // The IPFS hash of encrypted private data\n', '        bytes32 dataKeyHash; // The hash of symmetric key that was used to encrypt the data\n', '    }\n', '\n', '    struct PrivateDataValue {\n', '        bool initialized;\n', '        PrivateData value;\n', '    }\n', '\n', '    mapping(address => mapping(bytes32 => PrivateDataValue)) internal privateDataStorage;\n', '\n', '    enum PrivateDataExchangeState {Closed, Proposed, Accepted}\n', '\n', '    struct PrivateDataExchange {\n', '        address dataRequester;          // The address of the data requester\n', '        uint256 dataRequesterValue;     // The amount staked by the data requester\n', '        address passportOwner;          // The address of the passport owner at the time of the data exchange proposition\n', '        uint256 passportOwnerValue;     // Tha amount staked by the passport owner\n', '        address factProvider;           // The private data provider\n', '        bytes32 key;                    // the key for the private data record\n', '        string dataIPFSHash;            // The IPFS hash of encrypted private data\n', '        bytes32 dataKeyHash;            // The hash of data symmetric key that was used to encrypt the data\n', '        bytes encryptedExchangeKey;     // The encrypted exchange session key (only passport owner can decrypt it)\n', '        bytes32 exchangeKeyHash;        // The hash of exchange session key\n', '        bytes32 encryptedDataKey;       // The data symmetric key XORed with the exchange key\n', '        PrivateDataExchangeState state; // The state of private data exchange\n', '        uint256 stateExpired;           // The state expiration timestamp\n', '    }\n', '\n', '    uint public openPrivateDataExchangesCount; // the count of open private data exchanges TODO: use it in contract destruction/ownership transfer logic\n', '    PrivateDataExchange[] public privateDataExchanges;\n', '\n', '    /***************************************************************************\n', '     *** END OF SECTION OF STORAGE VARIABLES                                 ***\n', '     ***************************************************************************/\n', '\n', '    event WhitelistOnlyPermissionSet(bool indexed onlyWhitelist);\n', '    event WhitelistFactProviderAdded(address indexed factProvider);\n', '    event WhitelistFactProviderRemoved(address indexed factProvider);\n', '\n', '    /**\n', '     *  Restrict methods in such way, that they can be invoked only by allowed fact provider.\n', '     */\n', '    modifier allowedFactProvider() {\n', '        require(isAllowedFactProvider(msg.sender));\n', '        _;\n', '    }\n', '\n', '    /**\n', '     *  Returns true when the given address is an allowed fact provider.\n', '     */\n', '    function isAllowedFactProvider(address _address) public view returns (bool) {\n', '        return !onlyFactProviderFromWhitelistAllowed || factProviderWhitelist[_address] || _address == _getOwner();\n', '    }\n', '\n', '    /**\n', '     *  Returns true when a whitelist of fact providers is enabled.\n', '     */\n', '    function isWhitelistOnlyPermissionSet() external view returns (bool) {\n', '        return onlyFactProviderFromWhitelistAllowed;\n', '    }\n', '\n', '    /**\n', '     *  Enables or disables the use of a whitelist of fact providers.\n', '     */\n', '    function setWhitelistOnlyPermission(bool _onlyWhitelist) onlyOwner external {\n', '        onlyFactProviderFromWhitelistAllowed = _onlyWhitelist;\n', '        emit WhitelistOnlyPermissionSet(_onlyWhitelist);\n', '    }\n', '\n', '    /**\n', '     *  Returns true if fact provider is added to the whitelist.\n', '     */\n', '    function isFactProviderInWhitelist(address _address) external view returns (bool) {\n', '        return factProviderWhitelist[_address];\n', '    }\n', '\n', '    /**\n', '     *  Allows owner to add fact provider to whitelist.\n', '     */\n', '    function addFactProviderToWhitelist(address _address) onlyOwner external {\n', '        factProviderWhitelist[_address] = true;\n', '        emit WhitelistFactProviderAdded(_address);\n', '    }\n', '\n', '    /**\n', '     *  Allows owner to remove fact provider from whitelist.\n', '     */\n', '    function removeFactProviderFromWhitelist(address _address) onlyOwner external {\n', '        delete factProviderWhitelist[_address];\n', '        emit WhitelistFactProviderRemoved(_address);\n', '    }\n', '}\n', '\n', '// File: contracts/storage/AddressStorageLogic.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'contract AddressStorageLogic is Storage {\n', '    event AddressUpdated(address indexed factProvider, bytes32 indexed key);\n', '    event AddressDeleted(address indexed factProvider, bytes32 indexed key);\n', '\n', '    /// @param _key The key for the record\n', '    /// @param _value The value for the record\n', '    function setAddress(bytes32 _key, address _value) external {\n', '        _setAddress(_key, _value);\n', '    }\n', '\n', '    /// @param _key The key for the record\n', '    function deleteAddress(bytes32 _key) external {\n', '        _deleteAddress(_key);\n', '    }\n', '\n', '    /// @param _factProvider The fact provider\n', '    /// @param _key The key for the record\n', '    function getAddress(address _factProvider, bytes32 _key) external view returns (bool success, address value) {\n', '        return _getAddress(_factProvider, _key);\n', '    }\n', '\n', '    function _setAddress(bytes32 _key, address _value) allowedFactProvider internal {\n', '        addressStorage[msg.sender][_key] = AddressValue({\n', '            initialized : true,\n', '            value : _value\n', '            });\n', '        emit AddressUpdated(msg.sender, _key);\n', '    }\n', '\n', '    function _deleteAddress(bytes32 _key) allowedFactProvider internal {\n', '        delete addressStorage[msg.sender][_key];\n', '        emit AddressDeleted(msg.sender, _key);\n', '    }\n', '\n', '    function _getAddress(address _factProvider, bytes32 _key) internal view returns (bool success, address value) {\n', '        AddressValue storage initValue = addressStorage[_factProvider][_key];\n', '        return (initValue.initialized, initValue.value);\n', '    }\n', '}\n', '\n', '// File: contracts/storage/UintStorageLogic.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'contract UintStorageLogic is Storage {\n', '    event UintUpdated(address indexed factProvider, bytes32 indexed key);\n', '    event UintDeleted(address indexed factProvider, bytes32 indexed key);\n', '\n', '    /// @param _key The key for the record\n', '    /// @param _value The value for the record\n', '    function setUint(bytes32 _key, uint _value) external {\n', '        _setUint(_key, _value);\n', '    }\n', '\n', '    /// @param _key The key for the record\n', '    function deleteUint(bytes32 _key) external {\n', '        _deleteUint(_key);\n', '    }\n', '\n', '    /// @param _factProvider The fact provider\n', '    /// @param _key The key for the record\n', '    function getUint(address _factProvider, bytes32 _key) external view returns (bool success, uint value) {\n', '        return _getUint(_factProvider, _key);\n', '    }\n', '\n', '    function _setUint(bytes32 _key, uint _value) allowedFactProvider internal {\n', '        uintStorage[msg.sender][_key] = UintValue({\n', '            initialized : true,\n', '            value : _value\n', '            });\n', '        emit UintUpdated(msg.sender, _key);\n', '    }\n', '\n', '    function _deleteUint(bytes32 _key) allowedFactProvider internal {\n', '        delete uintStorage[msg.sender][_key];\n', '        emit UintDeleted(msg.sender, _key);\n', '    }\n', '\n', '    function _getUint(address _factProvider, bytes32 _key) internal view returns (bool success, uint value) {\n', '        UintValue storage initValue = uintStorage[_factProvider][_key];\n', '        return (initValue.initialized, initValue.value);\n', '    }\n', '}\n', '\n', '// File: contracts/storage/IntStorageLogic.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'contract IntStorageLogic is Storage {\n', '    event IntUpdated(address indexed factProvider, bytes32 indexed key);\n', '    event IntDeleted(address indexed factProvider, bytes32 indexed key);\n', '\n', '    /// @param _key The key for the record\n', '    /// @param _value The value for the record\n', '    function setInt(bytes32 _key, int _value) external {\n', '        _setInt(_key, _value);\n', '    }\n', '\n', '    /// @param _key The key for the record\n', '    function deleteInt(bytes32 _key) external {\n', '        _deleteInt(_key);\n', '    }\n', '\n', '    /// @param _factProvider The fact provider\n', '    /// @param _key The key for the record\n', '    function getInt(address _factProvider, bytes32 _key) external view returns (bool success, int value) {\n', '        return _getInt(_factProvider, _key);\n', '    }\n', '\n', '    function _setInt(bytes32 _key, int _value) allowedFactProvider internal {\n', '        intStorage[msg.sender][_key] = IntValue({\n', '            initialized : true,\n', '            value : _value\n', '            });\n', '        emit IntUpdated(msg.sender, _key);\n', '    }\n', '\n', '    function _deleteInt(bytes32 _key) allowedFactProvider internal {\n', '        delete intStorage[msg.sender][_key];\n', '        emit IntDeleted(msg.sender, _key);\n', '    }\n', '\n', '    function _getInt(address _factProvider, bytes32 _key) internal view returns (bool success, int value) {\n', '        IntValue storage initValue = intStorage[_factProvider][_key];\n', '        return (initValue.initialized, initValue.value);\n', '    }\n', '}\n', '\n', '// File: contracts/storage/BoolStorageLogic.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'contract BoolStorageLogic is Storage {\n', '    event BoolUpdated(address indexed factProvider, bytes32 indexed key);\n', '    event BoolDeleted(address indexed factProvider, bytes32 indexed key);\n', '\n', '    /// @param _key The key for the record\n', '    /// @param _value The value for the record\n', '    function setBool(bytes32 _key, bool _value) external {\n', '        _setBool(_key, _value);\n', '    }\n', '\n', '    /// @param _key The key for the record\n', '    function deleteBool(bytes32 _key) external {\n', '        _deleteBool(_key);\n', '    }\n', '\n', '    /// @param _factProvider The fact provider\n', '    /// @param _key The key for the record\n', '    function getBool(address _factProvider, bytes32 _key) external view returns (bool success, bool value) {\n', '        return _getBool(_factProvider, _key);\n', '    }\n', '\n', '    function _setBool(bytes32 _key, bool _value) allowedFactProvider internal {\n', '        boolStorage[msg.sender][_key] = BoolValue({\n', '            initialized : true,\n', '            value : _value\n', '            });\n', '        emit BoolUpdated(msg.sender, _key);\n', '    }\n', '\n', '    function _deleteBool(bytes32 _key) allowedFactProvider internal {\n', '        delete boolStorage[msg.sender][_key];\n', '        emit BoolDeleted(msg.sender, _key);\n', '    }\n', '\n', '    function _getBool(address _factProvider, bytes32 _key) internal view returns (bool success, bool value) {\n', '        BoolValue storage initValue = boolStorage[_factProvider][_key];\n', '        return (initValue.initialized, initValue.value);\n', '    }\n', '}\n', '\n', '// File: contracts/storage/StringStorageLogic.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'contract StringStorageLogic is Storage {\n', '    event StringUpdated(address indexed factProvider, bytes32 indexed key);\n', '    event StringDeleted(address indexed factProvider, bytes32 indexed key);\n', '\n', '    /// @param _key The key for the record\n', '    /// @param _value The value for the record\n', '    function setString(bytes32 _key, string _value) external {\n', '        _setString(_key, _value);\n', '    }\n', '\n', '    /// @param _key The key for the record\n', '    function deleteString(bytes32 _key) external {\n', '        _deleteString(_key);\n', '    }\n', '\n', '    /// @param _factProvider The fact provider\n', '    /// @param _key The key for the record\n', '    function getString(address _factProvider, bytes32 _key) external view returns (bool success, string value) {\n', '        return _getString(_factProvider, _key);\n', '    }\n', '\n', '    function _setString(bytes32 _key, string _value) allowedFactProvider internal {\n', '        stringStorage[msg.sender][_key] = StringValue({\n', '            initialized : true,\n', '            value : _value\n', '            });\n', '        emit StringUpdated(msg.sender, _key);\n', '    }\n', '\n', '    function _deleteString(bytes32 _key) allowedFactProvider internal {\n', '        delete stringStorage[msg.sender][_key];\n', '        emit StringDeleted(msg.sender, _key);\n', '    }\n', '\n', '    function _getString(address _factProvider, bytes32 _key) internal view returns (bool success, string value) {\n', '        StringValue storage initValue = stringStorage[_factProvider][_key];\n', '        return (initValue.initialized, initValue.value);\n', '    }\n', '}\n', '\n', '// File: contracts/storage/BytesStorageLogic.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'contract BytesStorageLogic is Storage {\n', '    event BytesUpdated(address indexed factProvider, bytes32 indexed key);\n', '    event BytesDeleted(address indexed factProvider, bytes32 indexed key);\n', '\n', '    /// @param _key The key for the record\n', '    /// @param _value The value for the record\n', '    function setBytes(bytes32 _key, bytes _value) external {\n', '        _setBytes(_key, _value);\n', '    }\n', '\n', '    /// @param _key The key for the record\n', '    function deleteBytes(bytes32 _key) external {\n', '        _deleteBytes(_key);\n', '    }\n', '\n', '    /// @param _factProvider The fact provider\n', '    /// @param _key The key for the record\n', '    function getBytes(address _factProvider, bytes32 _key) external view returns (bool success, bytes value) {\n', '        return _getBytes(_factProvider, _key);\n', '    }\n', '\n', '    function _setBytes(bytes32 _key, bytes _value) allowedFactProvider internal {\n', '        bytesStorage[msg.sender][_key] = BytesValue({\n', '            initialized : true,\n', '            value : _value\n', '            });\n', '        emit BytesUpdated(msg.sender, _key);\n', '    }\n', '\n', '    function _deleteBytes(bytes32 _key) allowedFactProvider internal {\n', '        delete bytesStorage[msg.sender][_key];\n', '        emit BytesDeleted(msg.sender, _key);\n', '    }\n', '\n', '    function _getBytes(address _factProvider, bytes32 _key) internal view returns (bool success, bytes value) {\n', '        BytesValue storage initValue = bytesStorage[_factProvider][_key];\n', '        return (initValue.initialized, initValue.value);\n', '    }\n', '}\n', '\n', '// File: contracts/storage/TxDataStorageLogic.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title TxDataStorage\n', ' * @dev This contract saves only the block number for the input data. The input data is not stored into\n', ' * Ethereum storage, but it can be decoded from the transaction input data later.\n', ' */\n', 'contract TxDataStorageLogic is Storage {\n', '    event TxDataUpdated(address indexed factProvider, bytes32 indexed key);\n', '    event TxDataDeleted(address indexed factProvider, bytes32 indexed key);\n', '\n', '    /// @param _key The key for the record\n', '    /// @param _data The data for the record. Ignore "unused function parameter" warning, it&#39;s not commented out so that\n', '    ///              it would remain in the ABI file.\n', '    function setTxDataBlockNumber(bytes32 _key, bytes _data) allowedFactProvider external {\n', '        _data;\n', '        txBytesStorage[msg.sender][_key] = BlockNumberValue({\n', '            initialized : true,\n', '            blockNumber : block.number\n', '            });\n', '        emit TxDataUpdated(msg.sender, _key);\n', '    }\n', '\n', '    /// @param _key The key for the record\n', '    function deleteTxDataBlockNumber(bytes32 _key) allowedFactProvider external {\n', '        delete txBytesStorage[msg.sender][_key];\n', '        emit TxDataDeleted(msg.sender, _key);\n', '    }\n', '\n', '    /// @param _factProvider The fact provider\n', '    /// @param _key The key for the record\n', '    function getTxDataBlockNumber(address _factProvider, bytes32 _key) external view returns (bool success, uint blockNumber) {\n', '        return _getTxDataBlockNumber(_factProvider, _key);\n', '    }\n', '\n', '    function _getTxDataBlockNumber(address _factProvider, bytes32 _key) private view returns (bool success, uint blockNumber) {\n', '        BlockNumberValue storage initValue = txBytesStorage[_factProvider][_key];\n', '        return (initValue.initialized, initValue.blockNumber);\n', '    }\n', '}\n', '\n', '// File: contracts/storage/IPFSStorageLogic.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'contract IPFSStorageLogic is Storage {\n', '    event IPFSHashUpdated(address indexed factProvider, bytes32 indexed key);\n', '    event IPFSHashDeleted(address indexed factProvider, bytes32 indexed key);\n', '\n', '    /// @param _key The key for the record\n', '    /// @param _value The value for the record\n', '    function setIPFSHash(bytes32 _key, string _value) external {\n', '        _setIPFSHash(_key, _value);\n', '    }\n', '\n', '    /// @param _key The key for the record\n', '    function deleteIPFSHash(bytes32 _key) external {\n', '        _deleteIPFSHash(_key);\n', '    }\n', '\n', '    /// @param _factProvider The fact provider\n', '    /// @param _key The key for the record\n', '    function getIPFSHash(address _factProvider, bytes32 _key) external view returns (bool success, string value) {\n', '        return _getIPFSHash(_factProvider, _key);\n', '    }\n', '\n', '    function _setIPFSHash(bytes32 _key, string _value) allowedFactProvider internal {\n', '        ipfsHashStorage[msg.sender][_key] = IPFSHashValue({\n', '            initialized : true,\n', '            value : _value\n', '            });\n', '        emit IPFSHashUpdated(msg.sender, _key);\n', '    }\n', '\n', '    function _deleteIPFSHash(bytes32 _key) allowedFactProvider internal {\n', '        delete ipfsHashStorage[msg.sender][_key];\n', '        emit IPFSHashDeleted(msg.sender, _key);\n', '    }\n', '\n', '    function _getIPFSHash(address _factProvider, bytes32 _key) internal view returns (bool success, string value) {\n', '        IPFSHashValue storage initValue = ipfsHashStorage[_factProvider][_key];\n', '        return (initValue.initialized, initValue.value);\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', '    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn&#39;t hold\n', '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/storage/PrivateDataStorageLogic.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', 'contract PrivateDataStorageLogic is Storage {\n', '    using SafeMath for uint256;\n', '\n', '    event PrivateDataHashesUpdated(address indexed factProvider, bytes32 indexed key);\n', '    event PrivateDataHashesDeleted(address indexed factProvider, bytes32 indexed key);\n', '\n', '    event PrivateDataExchangeProposed(uint256 indexed exchangeIdx, address indexed dataRequester, address indexed passportOwner);\n', '    event PrivateDataExchangeAccepted(uint256 indexed exchangeIdx, address indexed dataRequester, address indexed passportOwner);\n', '    event PrivateDataExchangeClosed(uint256 indexed exchangeIdx);\n', '    event PrivateDataExchangeDisputed(uint256 indexed exchangeIdx, bool indexed successful, address indexed cheater);\n', '\n', '    uint256 constant public privateDataExchangeProposeTimeout = 1 days;\n', '    uint256 constant public privateDataExchangeAcceptTimeout = 1 days;\n', '\n', '    /// @param _key The key for the record\n', '    /// @param _dataIPFSHash The IPFS hash of encrypted private data\n', '    /// @param _dataKeyHash The hash of symmetric key that was used to encrypt the data\n', '    function setPrivateDataHashes(bytes32 _key, string _dataIPFSHash, bytes32 _dataKeyHash) external {\n', '        _setPrivateDataHashes(_key, _dataIPFSHash, _dataKeyHash);\n', '    }\n', '\n', '    /// @param _key The key for the record\n', '    function deletePrivateDataHashes(bytes32 _key) external {\n', '        _deletePrivateDataHashes(_key);\n', '    }\n', '\n', '    /// @param _factProvider The fact provider\n', '    /// @param _key The key for the record\n', '    function getPrivateDataHashes(address _factProvider, bytes32 _key) external view returns (bool success, string dataIPFSHash, bytes32 dataKeyHash) {\n', '        return _getPrivateDataHashes(_factProvider, _key);\n', '    }\n', '\n', '    /**\n', '     * @dev returns the number of private data exchanges created.\n', '     */\n', '    function getPrivateDataExchangesCount() public constant returns (uint256 count) {\n', '        return privateDataExchanges.length;\n', '    }\n', '\n', '    /// @param _factProvider The fact provider\n', '    /// @param _key The key for the record\n', '    /// @param _encryptedExchangeKey The encrypted exchange session key (only passport owner can decrypt it)\n', '    /// @param _exchangeKeyHash The hash of exchange session key\n', '    function proposePrivateDataExchange(\n', '        address _factProvider,\n', '        bytes32 _key,\n', '        bytes _encryptedExchangeKey,\n', '        bytes32 _exchangeKeyHash\n', '    ) external payable {\n', '        (bool success, string memory dataIPFSHash, bytes32 dataKeyHash) = _getPrivateDataHashes(_factProvider, _key);\n', '        require(success, "private data must exist");\n', '\n', '        address passportOwner = _getOwner();\n', '        bytes32 encryptedDataKey;\n', '        PrivateDataExchange memory exchange = PrivateDataExchange({\n', '            dataRequester : msg.sender,\n', '            dataRequesterValue : msg.value,\n', '            passportOwner : passportOwner,\n', '            passportOwnerValue : 0,\n', '            factProvider : _factProvider,\n', '            key : _key,\n', '            dataIPFSHash : dataIPFSHash,\n', '            dataKeyHash : dataKeyHash,\n', '            encryptedExchangeKey : _encryptedExchangeKey,\n', '            exchangeKeyHash : _exchangeKeyHash,\n', '            encryptedDataKey : encryptedDataKey,\n', '            state : PrivateDataExchangeState.Proposed,\n', '            stateExpired : _nowSeconds() + privateDataExchangeProposeTimeout\n', '            });\n', '        privateDataExchanges.push(exchange);\n', '\n', '        _incOpenPrivateDataExchangesCount();\n', '\n', '        uint256 exchangeIdx = privateDataExchanges.length - 1;\n', '        emit PrivateDataExchangeProposed(exchangeIdx, msg.sender, passportOwner);\n', '    }\n', '\n', '    /// @param _exchangeIdx The private data exchange index\n', '    /// @param _encryptedDataKey The data symmetric key XORed with the exchange key\n', '    function acceptPrivateDataExchange(uint256 _exchangeIdx, bytes32 _encryptedDataKey) external payable {\n', '        require(_exchangeIdx < privateDataExchanges.length, "invalid exchange index");\n', '        PrivateDataExchange storage exchange = privateDataExchanges[_exchangeIdx];\n', '        require(msg.sender == exchange.passportOwner, "only passport owner allowed");\n', '        require(PrivateDataExchangeState.Proposed == exchange.state, "exchange must be in proposed state");\n', '        require(msg.value >= exchange.dataRequesterValue, "need to stake at least data requester amount");\n', '        require(_nowSeconds() < exchange.stateExpired, "exchange state expired");\n', '\n', '        exchange.passportOwnerValue = msg.value;\n', '        exchange.encryptedDataKey = _encryptedDataKey;\n', '        exchange.state = PrivateDataExchangeState.Accepted;\n', '        exchange.stateExpired = _nowSeconds() + privateDataExchangeAcceptTimeout;\n', '\n', '        emit PrivateDataExchangeAccepted(_exchangeIdx, exchange.dataRequester, msg.sender);\n', '    }\n', '\n', '    /// @param _exchangeIdx The private data exchange index\n', '    function finishPrivateDataExchange(uint256 _exchangeIdx) external {\n', '        require(_exchangeIdx < privateDataExchanges.length, "invalid exchange index");\n', '        PrivateDataExchange storage exchange = privateDataExchanges[_exchangeIdx];\n', '        require(PrivateDataExchangeState.Accepted == exchange.state, "exchange must be in accepted state");\n', '        require(_nowSeconds() > exchange.stateExpired || msg.sender == exchange.dataRequester, "exchange must be either expired or be finished by the data requester");\n', '\n', '        exchange.state = PrivateDataExchangeState.Closed;\n', '\n', '        // transfer all exchange staked money to passport owner\n', '        uint256 val = exchange.dataRequesterValue.add(exchange.passportOwnerValue);\n', '        require(exchange.passportOwner.send(val));\n', '\n', '        _decOpenPrivateDataExchangesCount();\n', '\n', '        emit PrivateDataExchangeClosed(_exchangeIdx);\n', '    }\n', '\n', '    /// @param _exchangeIdx The private data exchange index\n', '    function timeoutPrivateDataExchange(uint256 _exchangeIdx) external {\n', '        require(_exchangeIdx < privateDataExchanges.length, "invalid exchange index");\n', '        PrivateDataExchange storage exchange = privateDataExchanges[_exchangeIdx];\n', '        require(PrivateDataExchangeState.Proposed == exchange.state, "exchange must be in proposed state");\n', '        require(msg.sender == exchange.dataRequester, "only data requester allowed");\n', '        require(_nowSeconds() > exchange.stateExpired, "exchange must be expired");\n', '\n', '        exchange.state = PrivateDataExchangeState.Closed;\n', '\n', '        // return staked amount to data requester\n', '        require(exchange.dataRequester.send(exchange.dataRequesterValue));\n', '\n', '        _decOpenPrivateDataExchangesCount();\n', '\n', '        emit PrivateDataExchangeClosed(_exchangeIdx);\n', '    }\n', '\n', '    /// @param _exchangeIdx The private data exchange index\n', '    /// @param _exchangeKey The unencrypted exchange session key\n', '    function disputePrivateDataExchange(uint256 _exchangeIdx, bytes32 _exchangeKey) external {\n', '        require(_exchangeIdx < privateDataExchanges.length, "invalid exchange index");\n', '        PrivateDataExchange storage exchange = privateDataExchanges[_exchangeIdx];\n', '        require(PrivateDataExchangeState.Accepted == exchange.state, "exchange must be in accepted state");\n', '        require(msg.sender == exchange.dataRequester, "only data requester allowed");\n', '        require(_nowSeconds() < exchange.stateExpired, "exchange must not be expired");\n', '        require(keccak256(abi.encodePacked(_exchangeKey)) == exchange.exchangeKeyHash, "exchange key hash must match");\n', '\n', '        bytes32 dataKey = _exchangeKey ^ exchange.encryptedDataKey;\n', '        // data symmetric key is XORed with exchange key\n', '        bool validDataKey = keccak256(abi.encodePacked(dataKey)) == exchange.dataKeyHash;\n', '\n', '        exchange.state = PrivateDataExchangeState.Closed;\n', '\n', '        uint256 val = exchange.dataRequesterValue.add(exchange.passportOwnerValue);\n', '\n', '        address cheater;\n', '        if (validDataKey) {// the data key was valid -> data requester cheated\n', '            require(exchange.passportOwner.send(val));\n', '            cheater = exchange.dataRequester;\n', '        } else {// the data key is invalid -> passport owner cheated\n', '            require(exchange.dataRequester.send(val));\n', '            cheater = exchange.passportOwner;\n', '        }\n', '\n', '        _decOpenPrivateDataExchangesCount();\n', '\n', '        emit PrivateDataExchangeClosed(_exchangeIdx);\n', '        emit PrivateDataExchangeDisputed(_exchangeIdx, !validDataKey, cheater);\n', '    }\n', '\n', '    function _incOpenPrivateDataExchangesCount() internal {\n', '        if (++openPrivateDataExchangesCount == 1) {\n', '            // don&#39;t allow passport owner to transfer ownership and destroy passport when there are open exchanges\n', '            _setPaused(true);\n', '        }\n', '    }\n', '\n', '    function _decOpenPrivateDataExchangesCount() internal {\n', '        if (--openPrivateDataExchangesCount == 0) {\n', '            // allow passport owner to transfer ownership and destroy passport when all exchanges are closed\n', '            _setPaused(false);\n', '        }\n', '    }\n', '\n', '    function _setPrivateDataHashes(bytes32 _key, string _dataIPFSHash, bytes32 _dataKeyHash) allowedFactProvider internal {\n', '        privateDataStorage[msg.sender][_key] = PrivateDataValue({\n', '            initialized : true,\n', '            value : PrivateData({\n', '                dataIPFSHash : _dataIPFSHash,\n', '                dataKeyHash : _dataKeyHash\n', '                })\n', '            });\n', '        emit PrivateDataHashesUpdated(msg.sender, _key);\n', '    }\n', '\n', '    function _deletePrivateDataHashes(bytes32 _key) allowedFactProvider internal {\n', '        delete privateDataStorage[msg.sender][_key];\n', '        emit PrivateDataHashesDeleted(msg.sender, _key);\n', '    }\n', '\n', '    function _getPrivateDataHashes(address _factProvider, bytes32 _key) internal view returns (bool success, string dataIPFSHash, bytes32 dataKeyHash) {\n', '        PrivateDataValue storage initValue = privateDataStorage[_factProvider][_key];\n', '        return (initValue.initialized, initValue.value.dataIPFSHash, initValue.value.dataKeyHash);\n', '    }\n', '\n', '    function _nowSeconds() private view returns(uint256) {\n', '        uint256 t = now;\n', '\n', '        // In Quorum blockchain timestamp is in nanoseconds, not seconds:\n', '        // https://github.com/jpmorganchase/quorum/issues/713\n', '        // https://github.com/jpmorganchase/quorum/issues/190\n', '        if (t > 150000000000000000) {\n', '            t /= 1000000000;\n', '        }\n', '\n', '        return t;\n', '    }\n', '}\n', '\n', '// File: contracts/PassportLogic.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract PassportLogic\n', 'is IPassportLogic\n', ', ClaimableProxy\n', ', AddressStorageLogic\n', ', UintStorageLogic\n', ', IntStorageLogic\n', ', BoolStorageLogic\n', ', StringStorageLogic\n', ', BytesStorageLogic\n', ', TxDataStorageLogic\n', ', IPFSStorageLogic\n', ', PrivateDataStorageLogic\n', '{}']