['pragma solidity ^0.5.7;\n', '\n', '/**\n', ' * Copy right (c) Donex UG (haftungsbeschraenkt)\n', ' * All rights reserved\n', ' * Version 0.2.1 (BETA)\n', ' */\n', '\n', 'contract Freebies\n', '{\n', '\n', '    address owner;\n', '    address payable public masterAddress;\n', '\n', '    uint public deadline;\n', '    mapping(address => bool) gotFreebie;\n', '    mapping(address => bool) isMakerWithFreebiePermission;\n', '    mapping(address => address) makersDerivative;\n', '    uint public freebie;\n', '    uint8 public maxNumberOfFreebies;\n', '    uint8 public numberOfGivenFreebies;\n', '\n', '    modifier onlyByOwner() {\n', '        require(msg.sender ==  owner);\n', '        _;\n', '    }\n', '\n', '    modifier deadlineExceeded() {\n', '        require(now > deadline);\n', '        _;\n', '    }\n', '\n', '    constructor (address payable _masterAddress, uint8 _maxNumberOfFreebies, uint _deadline)\n', '        payable\n', '        public\n', '    {\n', '        owner = msg.sender;\n', '        maxNumberOfFreebies = _maxNumberOfFreebies;\n', '        freebie = msg.value / maxNumberOfFreebies;\n', '        numberOfGivenFreebies = 0;\n', '        deadline = _deadline;\n', '        masterAddress = _masterAddress;\n', '    }\n', '\n', '    /**\n', '     * @notice The aim is to create a derivative and find someone to buy the counter position\n', '     * @param long Decide if you want to be in the long or short position of your contract\n', '     * @param dueDate Set a due date of your contract. Make sure this is supported by us. Use OD.exchange to avoid conflicts here.\n', '     * @param strikePrice Choose a strike price which will be used at due date for calculation of your payout. Make sure that the format is correct. Use OD.exchange to avoid mistakes.\n', '     */\n', '    function createContractWithFreebie (\n', '        bool long,\n', '        uint256 dueDate,\n', '        uint256 strikePrice\n', '    )\n', '        payable\n', '        public\n', '    {\n', '        // New derivative must be created before deadline exceeded\n', '        require(now < deadline);\n', '\n', '        // Only once per maker address\n', '        require(!isMakerWithFreebiePermission[msg.sender]);\n', '        isMakerWithFreebiePermission[msg.sender] = true;\n', '\n', '        // Only first customers get freebie\n', '        numberOfGivenFreebies += 1;\n', '        require(numberOfGivenFreebies <= maxNumberOfFreebies);\n', '\n', '        Master master = Master(masterAddress);\n', '\n', '        // Create new derivative from factory\n', '        address newConditionalPayment = master.createConditionalPayment.value(msg.value)\n', '        (\n', '            msg.sender,\n', '            long,\n', '            dueDate,\n', '            strikePrice\n', '        );\n', '\n', '        // Attribute derivative to maker\n', '        makersDerivative[msg.sender] = newConditionalPayment;\n', '    }\n', '\n', '    /**\n', '     *  @notice Withdraw the freebie after creation of derivative and finding counter party\n', '     */\n', '    function withdrawFreebie ()\n', '        public\n', '    {\n', '        // Maker needs to have permission\n', '        require(isMakerWithFreebiePermission[msg.sender]);\n', '\n', '        // Only one withdraw per maker\n', '        require(!gotFreebie[msg.sender]);\n', '        gotFreebie[msg.sender] = true;\n', '\n', '        ConditionalPayment conditionalPayment = ConditionalPayment(makersDerivative[msg.sender]);\n', '\n', '        // Derivative needs to have at least one taker\n', '        require(conditionalPayment.countCounterparties() > 0);\n', '\n', '        msg.sender.transfer(freebie);\n', '    }\n', '\n', '    /**\n', '     * @notice Owner can kick unsuccessful makers who did not succeed to find a taker before the deadline\n', '     */\n', '    function kick (address unsuccessfulMaker)\n', '        public\n', '        onlyByOwner\n', '        deadlineExceeded\n', '    {\n', '        ConditionalPayment conditionalPayment = ConditionalPayment(makersDerivative[unsuccessfulMaker]);\n', '\n', '        // Unsuccessful criterium\n', '        require(conditionalPayment.countCounterparties() == 0);\n', '\n', '        // Disqualify maker from freebie\n', '        isMakerWithFreebiePermission[unsuccessfulMaker] = false;\n', '\n', '        // Freebie can be given to new maker\n', '        require(numberOfGivenFreebies > 0);\n', '        numberOfGivenFreebies -= 1;\n', '    }\n', '\n', '    function withdrawUnusedFreebies ()\n', '        public\n', '        onlyByOwner\n', '        deadlineExceeded\n', '    {\n', '        msg.sender.transfer((maxNumberOfFreebies - numberOfGivenFreebies)*freebie);\n', '    }\n', '\n', '}\n', '\n', '\n', 'interface Master {\n', '\n', '  function createConditionalPayment\n', '  (\n', '      address payable,\n', '      bool,\n', '      uint256,\n', '      uint256\n', '  )\n', '      payable\n', '      external\n', '      returns(address newDerivativeAddress);\n', '\n', '}\n', '\n', 'interface ConditionalPayment {\n', '\n', '  function countCounterparties() external returns(uint8);\n', '\n', '}']