['pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', ' * @title Team Contract\n', ' * @dev http://www.puzzlebid.com/\n', ' * @author PuzzleBID Game Team \n', ' * @dev Simon<<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="2d5b5e445f5455406d1c1b1e034e4240">[email&#160;protected]</a>>\n', ' */\n', 'contract Team {\n', '\n', '    address public owner; \n', '   \n', '    struct Admin {\n', '        bool isAdmin; \n', '        bool isDev;\n', '        bytes32 name; \n', '    }\n', '\n', '    mapping (address => Admin) admins;\n', '\n', '    constructor(address _owner) public {\n', '        owner = _owner;\n', '    }\n', '\n', '    event OnAddAdmin(\n', '        address indexed _address, \n', '        bool _isAdmin, \n', '        bool _isDev, \n', '        bytes32 _name\n', '    );\n', '    event OnRemoveAdmin(address indexed _address);\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function addAdmin(address _address, bool _isAdmin, bool _isDev, bytes32 _name) external onlyOwner() {\n', '        admins[_address] = Admin(_isAdmin, _isDev, _name);        \n', '        emit OnAddAdmin(_address, _isAdmin, _isDev, _name);\n', '    }\n', '\n', '    function removeAdmin(address _address) external onlyOwner() {\n', '        delete admins[_address];        \n', '        emit OnRemoveAdmin(_address);\n', '    }\n', '\n', '    function isOwner() external view returns (bool) {\n', '        return owner == msg.sender;\n', '    }\n', '\n', '    function isAdmin(address _sender) external view returns (bool) {\n', '        return admins[_sender].isAdmin;\n', '    }\n', '\n', '    function isDev(address _sender) external view returns (bool) {\n', '        return admins[_sender].isDev;\n', '    }\n', '\n', '}']
['pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', ' * @title Team Contract\n', ' * @dev http://www.puzzlebid.com/\n', ' * @author PuzzleBID Game Team \n', ' * @dev Simon<vsiryxm@163.com>\n', ' */\n', 'contract Team {\n', '\n', '    address public owner; \n', '   \n', '    struct Admin {\n', '        bool isAdmin; \n', '        bool isDev;\n', '        bytes32 name; \n', '    }\n', '\n', '    mapping (address => Admin) admins;\n', '\n', '    constructor(address _owner) public {\n', '        owner = _owner;\n', '    }\n', '\n', '    event OnAddAdmin(\n', '        address indexed _address, \n', '        bool _isAdmin, \n', '        bool _isDev, \n', '        bytes32 _name\n', '    );\n', '    event OnRemoveAdmin(address indexed _address);\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function addAdmin(address _address, bool _isAdmin, bool _isDev, bytes32 _name) external onlyOwner() {\n', '        admins[_address] = Admin(_isAdmin, _isDev, _name);        \n', '        emit OnAddAdmin(_address, _isAdmin, _isDev, _name);\n', '    }\n', '\n', '    function removeAdmin(address _address) external onlyOwner() {\n', '        delete admins[_address];        \n', '        emit OnRemoveAdmin(_address);\n', '    }\n', '\n', '    function isOwner() external view returns (bool) {\n', '        return owner == msg.sender;\n', '    }\n', '\n', '    function isAdmin(address _sender) external view returns (bool) {\n', '        return admins[_sender].isAdmin;\n', '    }\n', '\n', '    function isDev(address _sender) external view returns (bool) {\n', '        return admins[_sender].isDev;\n', '    }\n', '\n', '}']
