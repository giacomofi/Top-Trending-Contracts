['pragma solidity 0.4.19;\n', '\n', 'contract EIP20Factory {\n', '    mapping(address => address[]) public created;\n', '\n', '    mapping(address => bool) public isEIP20; //verify without having to do a bytecode check.\n', '\n', '    bytes public EIP20ByteCode; // solhint-disable-line var-name-mixedcase\n', '\n', '\n', '\n', '    function EIP20Factory() public {\n', '\n', '        //upon creation of the factory, deploy a EIP20 (parameters are meaningless) and store the bytecode provably.\n', '\n', '         address verifiedToken = createEIP20(600000000000000000, "HUNDREDMEDICINECASH", 8, "HMCA");\n', '\n', '        EIP20ByteCode = codeAt(verifiedToken);\n', '\n', '    }\n', '\n', '\n', '\n', '    //verifies if a contract that has been deployed is a Human Standard Token.\n', '\n', '    //NOTE: This is a very expensive function, and should only be used in an eth_call. ~800k gas\n', '\n', '    function verifyEIP20(address _tokenContract) public view returns (bool) {\n', '\n', '        bytes memory fetchedTokenByteCode = codeAt(_tokenContract);\n', '\n', '\n', '\n', '        if (fetchedTokenByteCode.length != EIP20ByteCode.length) {\n', '\n', '            return false; //clear mismatch\n', '\n', '        }\n', '\n', '\n', '\n', '      //starting iterating through it if lengths match\n', '\n', '        for (uint i = 0; i < fetchedTokenByteCode.length; i++) {\n', '\n', '            if (fetchedTokenByteCode[i] != EIP20ByteCode[i]) {\n', '\n', '                return false;\n', '\n', '            }\n', '\n', '        }\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '\n', '\n', '    function createEIP20(uint256 _initialAmount, string _name, uint8 _decimals, string _symbol)\n', '\n', '        public\n', '\n', '    returns (address) {\n', '\n', '\n', '\n', '        EIP20 newToken = (new EIP20(_initialAmount, _name, _decimals, _symbol));\n', '\n', '        created[msg.sender].push(address(newToken));\n', '\n', '        isEIP20[address(newToken)] = true;\n', '\n', '        //the factory will own the created tokens. You must transfer them.\n', '\n', '        newToken.transfer(msg.sender, _initialAmount);\n', '\n', '        return address(newToken);\n', '\n', '    }\n', '\n', '\n', '\n', '    //for now, keeping this internal. Ideally there should also be a live version of this that\n', '\n', '    // any contract can use, lib-style.\n', '\n', '    //retrieves the bytecode at a specific address.\n', '\n', '    function codeAt(address _addr) internal view returns (bytes outputCode) {\n', '\n', '        assembly { // solhint-disable-line no-inline-assembly\n', '\n', '            // retrieve the size of the code, this needs assembly\n', '\n', '            let size := extcodesize(_addr)\n', '\n', '            // allocate output byte array - this could also be done without assembly\n', '\n', '            // by using outputCode = new bytes(size)\n', '\n', '            outputCode := mload(0x40)\n', '\n', '            // new "memory end" including padding\n', '\n', '            mstore(0x40, add(outputCode, and(add(add(size, 0x20), 0x1f), not(0x1f))))\n', '\n', '            // store length in memory\n', '\n', '            mstore(outputCode, size)\n', '\n', '            // actually retrieve the code, this needs assembly\n', '\n', '            extcodecopy(_addr, add(outputCode, 0x20), 0, size)\n', '\n', '        }\n', '\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract EIP20Interface {\n', '\n', '    /* This is a slight change to the ERC20 base standard.\n', '\n', '    function totalSupply() constant returns (uint256 supply);\n', '\n', '    is replaced with:\n', '\n', '    uint256 public totalSupply;\n', '\n', '    This automatically creates a getter function for the totalSupply.\n', '\n', '    This is moved to the base contract since public getter functions are not\n', '\n', '    currently recognised as an implementation of the matching abstract\n', '\n', '    function by the compiler.\n', '\n', '    */\n', '\n', '    /// total amount of tokens\n', '\n', '    uint256 public totalSupply;\n', '\n', '\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '\n', '    /// @return The balance\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '\n', '\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '\n', '    /// @param _to The address of the recipient\n', '\n', '    /// @param _value The amount of token to be transferred\n', '\n', '    /// @return Whether the transfer was successful or not\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '\n', '    /// @param _from The address of the sender\n', '\n', '    /// @param _to The address of the recipient\n', '\n', '    /// @param _value The amount of token to be transferred\n', '\n', '    /// @return Whether the transfer was successful or not\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '\n', '    /// @return Whether the approval was successful or not\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '\n', '    /// @return Amount of remaining tokens allowed to spent\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '\n', '\n', '    // solhint-disable-next-line no-simple-event-func-name\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '}\n', '\n', '/*\n', '\n', 'Implements EIP20 token standard: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', '\n', '.*/\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract EIP20 is EIP20Interface {\n', '\n', '\n', '\n', '    uint256 constant private MAX_UINT256 = 2**256 - 1;\n', '\n', '    mapping (address => uint256) public balances;\n', '\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '\n', '    string public name;                   //fancy name: eg Simon Bucks\n', '\n', '    uint8 public decimals;                //How many decimals to show.\n', '\n', '    string public symbol;                 //An identifier: eg SBX\n', '\n', '\n', '\n', '    function EIP20(\n', '\n', '        uint256 _initialAmount,\n', '\n', '        string _tokenName,\n', '\n', '        uint8 _decimalUnits,\n', '\n', '        string _tokenSymbol\n', '\n', '    ) public {\n', '\n', '        balances[msg.sender] = _initialAmount;               // Give the creator all initial tokens\n', '\n', '        totalSupply = _initialAmount;                        // Update total supply\n', '\n', '        name = _tokenName;                                   // Set the name for display purposes\n', '\n', '        decimals = _decimalUnits;                            // Amount of decimals for display purposes\n', '\n', '        symbol = _tokenSymbol;                               // Set the symbol for display purposes\n', '\n', '    }\n', '\n', '\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '\n', '        require(balances[msg.sender] >= _value);\n', '\n', '        balances[msg.sender] -= _value;\n', '\n', '        balances[_to] += _value;\n', '\n', '        Transfer(msg.sender, _to, _value); \n', '        //solhint-disable-line indent, no-unused-vars\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '\n', '        require(balances[_from] >= _value && allowance >= _value);\n', '\n', '        balances[_to] += _value;\n', '\n', '        balances[_from] -= _value;\n', '\n', '        if (allowance < MAX_UINT256) {\n', '\n', '            allowed[_from][msg.sender] -= _value;\n', '\n', '        }\n', '\n', '         Transfer(_from, _to, _value);\n', '         //solhint-disable-line indent, no-unused-vars\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '\n', '        return balances[_owner];\n', '\n', '    }\n', '\n', '\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '\n', '         Approval(msg.sender, _spender, _value); \n', '        \n', '        //solhint-disable-line indent, no-unused-vars\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '\n', '        return allowed[_owner][_spender];\n', '\n', '    }\n', '\n', '}']