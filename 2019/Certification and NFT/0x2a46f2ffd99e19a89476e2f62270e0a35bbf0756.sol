['// File: REMIX_FILE_SYNC/openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.4.21;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: REMIX_FILE_SYNC/ApprovedCreatorRegistryInterface.sol\n', '\n', 'pragma solidity ^0.4.22;\n', '\n', '\n', '/**\n', ' * Interface to the digital media store external contract that is \n', ' * responsible for storing the common digital media and collection data.\n', ' * This allows for new token contracts to be deployed and continue to reference\n', ' * the digital media and collection data.\n', ' */\n', 'contract ApprovedCreatorRegistryInterface {\n', '\n', '    function getVersion() public pure returns (uint);\n', '    function typeOfContract() public pure returns (string);\n', '    function isOperatorApprovedForCustodialAccount(\n', '        address _operator,\n', '        address _custodialAddress) public view returns (bool);\n', '\n', '}\n', '\n', '// File: REMIX_FILE_SYNC/DigitalMediaStoreInterface.sol\n', '\n', 'pragma solidity 0.4.25;\n', '\n', '\n', '/**\n', ' * Interface to the digital media store external contract that is \n', ' * responsible for storing the common digital media and collection data.\n', ' * This allows for new token contracts to be deployed and continue to reference\n', ' * the digital media and collection data.\n', ' */\n', 'contract DigitalMediaStoreInterface {\n', '\n', '    function getDigitalMediaStoreVersion() public pure returns (uint);\n', '\n', '    function getStartingDigitalMediaId() public view returns (uint256);\n', '\n', '    function registerTokenContractAddress() external;\n', '\n', '    /**\n', '     * Creates a new digital media object in storage\n', '     * @param  _creator address the address of the creator\n', '     * @param  _printIndex uint32 the current print index for the limited edition media\n', '     * @param  _totalSupply uint32 the total allowable prints for this media\n', '     * @param  _collectionId uint256 the collection id that this media belongs to\n', '     * @param  _metadataPath string the ipfs metadata path\n', '     * @return the id of the new digital media created\n', '     */\n', '    function createDigitalMedia(\n', '                address _creator, \n', '                uint32 _printIndex, \n', '                uint32 _totalSupply, \n', '                uint256 _collectionId, \n', '                string _metadataPath) external returns (uint);\n', '\n', '    /**\n', '     * Increments the current print index of the digital media object\n', '     * @param  _digitalMediaId uint256 the id of the digital media\n', '     * @param  _increment uint32 the amount to increment by\n', '     */\n', '    function incrementDigitalMediaPrintIndex(\n', '                uint256 _digitalMediaId, \n', '                uint32 _increment)  external;\n', '\n', '    /**\n', '     * Retrieves the digital media object by id\n', '     * @param  _digitalMediaId uint256 the address of the creator\n', '     */\n', '    function getDigitalMedia(uint256 _digitalMediaId) external view returns(\n', '                uint256 id,\n', '                uint32 totalSupply,\n', '                uint32 printIndex,\n', '                uint256 collectionId,\n', '                address creator,\n', '                string metadataPath);\n', '\n', '    /**\n', '     * Creates a new collection\n', '     * @param  _creator address the address of the creator\n', '     * @param  _metadataPath string the ipfs metadata path\n', '     * @return the id of the new collection created\n', '     */\n', '    function createCollection(address _creator, string _metadataPath) external returns (uint);\n', '\n', '    /**\n', '     * Retrieves a collection by id\n', '     * @param  _collectionId uint256\n', '     */\n', '    function getCollection(uint256 _collectionId) external view\n', '            returns(\n', '                uint256 id,\n', '                address creator,\n', '                string metadataPath);\n', '}\n', '\n', '// File: REMIX_FILE_SYNC/openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', 'pragma solidity ^0.4.21;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: REMIX_FILE_SYNC/openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', 'pragma solidity ^0.4.21;\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '// File: REMIX_FILE_SYNC/MediaStoreVersionControl.sol\n', '\n', 'pragma solidity 0.4.25;\n', '\n', '\n', '\n', '/**\n', " * A special control class that is used to configure and manage a token contract's \n", ' * different digital media store versions.\n', ' *\n', " * Older versions of token contracts had the ability to increment the digital media's\n", ' * print edition in the media store, which was necessary in the early stages to provide\n', ' * upgradeability and flexibility.\n', ' *\n', ' * New verions will get rid of this ability now that token contract logic\n', " * is more stable and we've built in burn capabilities.  \n", ' *\n', ' * In order to support the older tokens, we need to be able to look up the appropriate digital\n', ' * media store associated with a given digital media id on the latest token contract.\n', ' */\n', 'contract MediaStoreVersionControl is Pausable {\n', '\n', '    // The single allowed creator for this digital media contract.\n', '    DigitalMediaStoreInterface public v1DigitalMediaStore;\n', '\n', '    // The current digitial media store, used for this tokens creation.\n', '    DigitalMediaStoreInterface public currentDigitalMediaStore;\n', '    uint256 public currentStartingDigitalMediaId;\n', '\n', '\n', '    /**\n', '     * Validates that the managers are initialized.\n', '     */\n', '    modifier managersInitialized() {\n', '        require(v1DigitalMediaStore != address(0));\n', '        require(currentDigitalMediaStore != address(0));\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Sets a digital media store address upon construction.  \n', "     * Once set it's immutable, so that a token contract is always\n", '     * tied to one digital media store.\n', '     */\n', '    function setDigitalMediaStoreAddress(address _dmsAddress)  \n', '            internal {\n', '        DigitalMediaStoreInterface candidateDigitalMediaStore = DigitalMediaStoreInterface(_dmsAddress);\n', '        require(candidateDigitalMediaStore.getDigitalMediaStoreVersion() == 2, "Incorrect version.");\n', '        currentDigitalMediaStore = candidateDigitalMediaStore;\n', '        currentDigitalMediaStore.registerTokenContractAddress();\n', '        currentStartingDigitalMediaId = currentDigitalMediaStore.getStartingDigitalMediaId();\n', '    }\n', '\n', '    /**\n', "     * Publicly callable by the owner, but can only be set one time, so don't make \n", '     * a mistake when setting it.\n', '     *\n', '     * Will also check that the version on the other end of the contract is in fact correct.\n', '     */\n', '    function setV1DigitalMediaStoreAddress(address _dmsAddress) public onlyOwner {\n', '        require(address(v1DigitalMediaStore) == 0, "V1 media store already set.");\n', '        DigitalMediaStoreInterface candidateDigitalMediaStore = DigitalMediaStoreInterface(_dmsAddress);\n', '        require(candidateDigitalMediaStore.getDigitalMediaStoreVersion() == 1, "Incorrect version.");\n', '        v1DigitalMediaStore = candidateDigitalMediaStore;\n', '        v1DigitalMediaStore.registerTokenContractAddress();\n', '    }\n', '\n', '    /**\n', '     * Depending on the digital media id, determines whether to return the previous\n', '     * version of the digital media manager.\n', '     */\n', '    function _getDigitalMediaStore(uint256 _digitalMediaId) \n', '            internal \n', '            view\n', '            managersInitialized\n', '            returns (DigitalMediaStoreInterface) {\n', '        if (_digitalMediaId < currentStartingDigitalMediaId) {\n', '            return v1DigitalMediaStore;\n', '        } else {\n', '            return currentDigitalMediaStore;\n', '        }\n', '    }  \n', '}\n', '\n', '// File: REMIX_FILE_SYNC/DigitalMediaManager.sol\n', '\n', 'pragma solidity 0.4.25;\n', '\n', '\n', '\n', '\n', '/**\n', ' * Manager that interfaces with the underlying digital media store contract.\n', ' */\n', 'contract DigitalMediaManager is MediaStoreVersionControl {\n', '\n', '    struct DigitalMedia {\n', '        uint256 id;\n', '        uint32 totalSupply;\n', '        uint32 printIndex;\n', '        uint256 collectionId;\n', '        address creator;\n', '        string metadataPath;\n', '    }\n', '\n', '    struct DigitalMediaCollection {\n', '        uint256 id;\n', '        address creator;\n', '        string metadataPath;\n', '    }\n', '\n', '    ApprovedCreatorRegistryInterface public creatorRegistryStore;\n', '\n', '    // Set the creator registry address upon construction. Immutable.\n', '    function setCreatorRegistryStore(address _crsAddress) internal {\n', '        ApprovedCreatorRegistryInterface candidateCreatorRegistryStore = ApprovedCreatorRegistryInterface(_crsAddress);\n', '        require(candidateCreatorRegistryStore.getVersion() == 1);\n', '        // Simple check to make sure we are adding the registry contract indeed\n', '        // https://fravoll.github.io/solidity-patterns/string_equality_comparison.html\n', '        require(keccak256(candidateCreatorRegistryStore.typeOfContract()) == keccak256("approvedCreatorRegistry"));\n', '        creatorRegistryStore = candidateCreatorRegistryStore;\n', '    }\n', '\n', '    /**\n', '     * Validates that the Registered store is initialized.\n', '     */\n', '    modifier registryInitialized() {\n', '        require(creatorRegistryStore != address(0));\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Retrieves a collection object by id.\n', '     */\n', '    function _getCollection(uint256 _id) \n', '            internal \n', '            view \n', '            managersInitialized \n', '            returns(DigitalMediaCollection) {\n', '        uint256 id;\n', '        address creator;\n', '        string memory metadataPath;\n', '        (id, creator, metadataPath) = currentDigitalMediaStore.getCollection(_id);\n', '        DigitalMediaCollection memory collection = DigitalMediaCollection({\n', '            id: id,\n', '            creator: creator,\n', '            metadataPath: metadataPath\n', '        });\n', '        return collection;\n', '    }\n', '\n', '    /**\n', '     * Retrieves a digital media object by id.\n', '     */\n', '    function _getDigitalMedia(uint256 _id) \n', '            internal \n', '            view \n', '            managersInitialized \n', '            returns(DigitalMedia) {\n', '        uint256 id;\n', '        uint32 totalSupply;\n', '        uint32 printIndex;\n', '        uint256 collectionId;\n', '        address creator;\n', '        string memory metadataPath;\n', '        DigitalMediaStoreInterface _digitalMediaStore = _getDigitalMediaStore(_id);\n', '        (id, totalSupply, printIndex, collectionId, creator, metadataPath) = _digitalMediaStore.getDigitalMedia(_id);\n', '        DigitalMedia memory digitalMedia = DigitalMedia({\n', '            id: id,\n', '            creator: creator,\n', '            totalSupply: totalSupply,\n', '            printIndex: printIndex,\n', '            collectionId: collectionId,\n', '            metadataPath: metadataPath\n', '        });\n', '        return digitalMedia;\n', '    }\n', '\n', '    /**\n', '     * Increments the print index of a digital media object by some increment.\n', '     */\n', '    function _incrementDigitalMediaPrintIndex(DigitalMedia _dm, uint32 _increment) \n', '            internal \n', '            managersInitialized {\n', '        DigitalMediaStoreInterface _digitalMediaStore = _getDigitalMediaStore(_dm.id);\n', '        _digitalMediaStore.incrementDigitalMediaPrintIndex(_dm.id, _increment);\n', '    }\n', '\n', '    // Check if the token operator is approved for the owner address\n', '    function isOperatorApprovedForCustodialAccount(\n', '        address _operator, \n', '        address _owner) internal view registryInitialized returns(bool) {\n', '        return creatorRegistryStore.isOperatorApprovedForCustodialAccount(\n', '            _operator, _owner);\n', '    }\n', '}\n', '\n', '// File: REMIX_FILE_SYNC/SingleCreatorControl.sol\n', '\n', 'pragma solidity 0.4.25;\n', '\n', '\n', '/**\n', " * A special control class that's used to help enforce that a DigitalMedia contract\n", " * will service only a single creator's address.  This is used when deploying a \n", ' * custom token contract owned and managed by a single creator.\n', ' */\n', 'contract SingleCreatorControl {\n', '\n', '    // The single allowed creator for this digital media contract.\n', '    address public singleCreatorAddress;\n', '\n', '    // The single creator has changed.\n', '    event SingleCreatorChanged(\n', '        address indexed previousCreatorAddress, \n', '        address indexed newCreatorAddress);\n', '\n', '    /**\n', '     * Sets the single creator associated with this contract.  This function\n', '     * can only ever be called once, and should ideally be called at the point\n', '     * of constructing the smart contract.\n', '     */\n', '    function setSingleCreator(address _singleCreatorAddress) internal {\n', '        require(singleCreatorAddress == address(0), "Single creator address already set.");\n', '        singleCreatorAddress = _singleCreatorAddress;\n', '    }\n', '\n', '    /**\n', '     * Checks whether a given creator address matches the single creator address.\n', '     * Will always return true if a single creator address was never set.\n', '     */\n', '    function isAllowedSingleCreator(address _creatorAddress) internal view returns (bool) {\n', '        require(_creatorAddress != address(0), "0x0 creator addresses are not allowed.");\n', '        return singleCreatorAddress == address(0) || singleCreatorAddress == _creatorAddress;\n', '    }\n', '\n', '    /**\n', '     * A publicly accessible function that allows the current single creator\n', '     * assigned to this contract to change to another address.\n', '     */\n', '    function changeSingleCreator(address _newCreatorAddress) public {\n', '        require(_newCreatorAddress != address(0));\n', '        require(msg.sender == singleCreatorAddress, "Not approved to change single creator.");\n', '        singleCreatorAddress = _newCreatorAddress;\n', '        emit SingleCreatorChanged(singleCreatorAddress, _newCreatorAddress);\n', '    }\n', '}\n', '\n', '// File: REMIX_FILE_SYNC/openzeppelin-solidity/contracts/token/ERC721/ERC721Basic.sol\n', '\n', 'pragma solidity ^0.4.21;\n', '\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic interface\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Basic {\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n', '  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 _balance);\n', '  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '  function exists(uint256 _tokenId) public view returns (bool _exists);\n', '\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function getApproved(uint256 _tokenId) public view returns (address _operator);\n', '\n', '  function setApprovalForAll(address _operator, bool _approved) public;\n', '  function isApprovedForAll(address _owner, address _operator) public view returns (bool);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n', '  function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId,\n', '    bytes _data\n', '  )\n', '    public;\n', '}\n', '\n', '// File: REMIX_FILE_SYNC/openzeppelin-solidity/contracts/token/ERC721/ERC721.sol\n', '\n', 'pragma solidity ^0.4.21;\n', '\n', '\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Enumerable is ERC721Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256 _tokenId);\n', '  function tokenByIndex(uint256 _index) public view returns (uint256);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Metadata is ERC721Basic {\n', '  function name() public view returns (string _name);\n', '  function symbol() public view returns (string _symbol);\n', '  function tokenURI(uint256 _tokenId) public view returns (string);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\n', '}\n', '\n', '// File: REMIX_FILE_SYNC/openzeppelin-solidity/contracts/token/ERC721/ERC721Receiver.sol\n', '\n', 'pragma solidity ^0.4.21;\n', '\n', '\n', '/**\n', ' * @title ERC721 token receiver interface\n', ' * @dev Interface for any contract that wants to support safeTransfers\n', ' *  from ERC721 asset contracts.\n', ' */\n', 'contract ERC721Receiver {\n', '  /**\n', '   * @dev Magic value to be returned upon successful reception of an NFT\n', '   *  Equals to `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`,\n', '   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n', '   */\n', '  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\n', '\n', '  /**\n', '   * @notice Handle the receipt of an NFT\n', '   * @dev The ERC721 smart contract calls this function on the recipient\n', '   *  after a `safetransfer`. This function MAY throw to revert and reject the\n', '   *  transfer. This function MUST use 50,000 gas or less. Return of other\n', '   *  than the magic value MUST result in the transaction being reverted.\n', '   *  Note: the contract address is always the message sender.\n', '   * @param _from The sending address\n', '   * @param _tokenId The NFT identifier which is being transfered\n', '   * @param _data Additional data with no specified format\n', '   * @return `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`\n', '   */\n', '  function onERC721Received(address _from, uint256 _tokenId, bytes _data) public returns(bytes4);\n', '}\n', '\n', '// File: REMIX_FILE_SYNC/openzeppelin-solidity/contracts/AddressUtils.sol\n', '\n', 'pragma solidity ^0.4.21;\n', '\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' */\n', 'library AddressUtils {\n', '\n', '  /**\n', '   * Returns whether the target address is a contract\n', '   * @dev This function will return false if invoked during the constructor of a contract,\n', '   *  as the code is not actually created until after the constructor finishes.\n', '   * @param addr address to check\n', '   * @return whether the target address is a contract\n', '   */\n', '  function isContract(address addr) internal view returns (bool) {\n', '    uint256 size;\n', '    // XXX Currently there is no better way to check if there is a contract in an address\n', '    // than to check the size of the code at that address.\n', '    // See https://ethereum.stackexchange.com/a/14016/36603\n', '    // for more details about how this works.\n', '    // TODO Check this again before the Serenity release, because all addresses will be\n', '    // contracts then.\n', '    assembly { size := extcodesize(addr) }  // solium-disable-line security/no-inline-assembly\n', '    return size > 0;\n', '  }\n', '\n', '}\n', '\n', '// File: REMIX_FILE_SYNC/openzeppelin-solidity/contracts/token/ERC721/ERC721BasicToken.sol\n', '\n', 'pragma solidity ^0.4.21;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic implementation\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721BasicToken is ERC721Basic {\n', '  using SafeMath for uint256;\n', '  using AddressUtils for address;\n', '\n', '  // Equals to `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`\n', '  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n', '  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\n', '\n', '  // Mapping from token ID to owner\n', '  mapping (uint256 => address) internal tokenOwner;\n', '\n', '  // Mapping from token ID to approved address\n', '  mapping (uint256 => address) internal tokenApprovals;\n', '\n', '  // Mapping from owner to number of owned token\n', '  mapping (address => uint256) internal ownedTokensCount;\n', '\n', '  // Mapping from owner to operator approvals\n', '  mapping (address => mapping (address => bool)) internal operatorApprovals;\n', '\n', '  /**\n', '   * @dev Guarantees msg.sender is owner of the given token\n', '   * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n', '   */\n', '  modifier onlyOwnerOf(uint256 _tokenId) {\n', '    require(ownerOf(_tokenId) == msg.sender);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\n', '   * @param _tokenId uint256 ID of the token to validate\n', '   */\n', '  modifier canTransfer(uint256 _tokenId) {\n', '    require(isApprovedOrOwner(msg.sender, _tokenId));\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the balance of the specified address\n', '   * @param _owner address to query the balance of\n', '   * @return uint256 representing the amount owned by the passed address\n', '   */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    require(_owner != address(0));\n', '    return ownedTokensCount[_owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the owner of the specified token ID\n', '   * @param _tokenId uint256 ID of the token to query the owner of\n', '   * @return owner address currently marked as the owner of the given token ID\n', '   */\n', '  function ownerOf(uint256 _tokenId) public view returns (address) {\n', '    address owner = tokenOwner[_tokenId];\n', '    require(owner != address(0));\n', '    return owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns whether the specified token exists\n', '   * @param _tokenId uint256 ID of the token to query the existance of\n', '   * @return whether the token exists\n', '   */\n', '  function exists(uint256 _tokenId) public view returns (bool) {\n', '    address owner = tokenOwner[_tokenId];\n', '    return owner != address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Approves another address to transfer the given token ID\n', '   * @dev The zero address indicates there is no approved address.\n', '   * @dev There can only be one approved address per token at a given time.\n', '   * @dev Can only be called by the token owner or an approved operator.\n', '   * @param _to address to be approved for the given token ID\n', '   * @param _tokenId uint256 ID of the token to be approved\n', '   */\n', '  function approve(address _to, uint256 _tokenId) public {\n', '    address owner = ownerOf(_tokenId);\n', '    require(_to != owner);\n', '    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n', '\n', '    if (getApproved(_tokenId) != address(0) || _to != address(0)) {\n', '      tokenApprovals[_tokenId] = _to;\n', '      emit Approval(owner, _to, _tokenId);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the approved address for a token ID, or zero if no address set\n', '   * @param _tokenId uint256 ID of the token to query the approval of\n', '   * @return address currently approved for a the given token ID\n', '   */\n', '  function getApproved(uint256 _tokenId) public view returns (address) {\n', '    return tokenApprovals[_tokenId];\n', '  }\n', '\n', '  /**\n', '   * @dev Sets or unsets the approval of a given operator\n', '   * @dev An operator is allowed to transfer all tokens of the sender on their behalf\n', '   * @param _to operator address to set the approval\n', '   * @param _approved representing the status of the approval to be set\n', '   */\n', '  function setApprovalForAll(address _to, bool _approved) public {\n', '    require(_to != msg.sender);\n', '    operatorApprovals[msg.sender][_to] = _approved;\n', '    emit ApprovalForAll(msg.sender, _to, _approved);\n', '  }\n', '\n', '  /**\n', '   * @dev Tells whether an operator is approved by a given owner\n', '   * @param _owner owner address which you want to query the approval of\n', '   * @param _operator operator address which you want to query the approval of\n', '   * @return bool whether the given operator is approved by the given owner\n', '   */\n', '  function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\n', '    return operatorApprovals[_owner][_operator];\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers the ownership of a given token ID to another address\n', '   * @dev Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n', '   * @dev Requires the msg sender to be the owner, approved, or operator\n', '   * @param _from current owner of the token\n', '   * @param _to address to receive the ownership of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) public canTransfer(_tokenId) {\n', '    require(_from != address(0));\n', '    require(_to != address(0));\n', '\n', '    clearApproval(_from, _tokenId);\n', '    removeTokenFrom(_from, _tokenId);\n', '    addTokenTo(_to, _tokenId);\n', '\n', '    emit Transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Safely transfers the ownership of a given token ID to another address\n', '   * @dev If the target address is a contract, it must implement `onERC721Received`,\n', '   *  which is called upon a safe transfer, and return the magic value\n', '   *  `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`; otherwise,\n', '   *  the transfer is reverted.\n', '   * @dev Requires the msg sender to be the owner, approved, or operator\n', '   * @param _from current owner of the token\n', '   * @param _to address to receive the ownership of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId\n', '  )\n', '    public\n', '    canTransfer(_tokenId)\n', '  {\n', '    // solium-disable-next-line arg-overflow\n', '    safeTransferFrom(_from, _to, _tokenId, "");\n', '  }\n', '\n', '  /**\n', '   * @dev Safely transfers the ownership of a given token ID to another address\n', '   * @dev If the target address is a contract, it must implement `onERC721Received`,\n', '   *  which is called upon a safe transfer, and return the magic value\n', '   *  `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`; otherwise,\n', '   *  the transfer is reverted.\n', '   * @dev Requires the msg sender to be the owner, approved, or operator\n', '   * @param _from current owner of the token\n', '   * @param _to address to receive the ownership of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   * @param _data bytes data to send along with a safe transfer check\n', '   */\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId,\n', '    bytes _data\n', '  )\n', '    public\n', '    canTransfer(_tokenId)\n', '  {\n', '    transferFrom(_from, _to, _tokenId);\n', '    // solium-disable-next-line arg-overflow\n', '    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n', '  }\n', '\n', '  /**\n', '   * @dev Returns whether the given spender can transfer a given token ID\n', '   * @param _spender address of the spender to query\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   * @return bool whether the msg.sender is approved for the given token ID,\n', '   *  is an operator of the owner, or is the owner of the token\n', '   */\n', '  function isApprovedOrOwner(address _spender, uint256 _tokenId) internal view returns (bool) {\n', '    address owner = ownerOf(_tokenId);\n', '    return _spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner, _spender);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to mint a new token\n', '   * @dev Reverts if the given token ID already exists\n', '   * @param _to The address that will own the minted token\n', '   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '   */\n', '  function _mint(address _to, uint256 _tokenId) internal {\n', '    require(_to != address(0));\n', '    addTokenTo(_to, _tokenId);\n', '    emit Transfer(address(0), _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to burn a specific token\n', '   * @dev Reverts if the token does not exist\n', '   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '   */\n', '  function _burn(address _owner, uint256 _tokenId) internal {\n', '    clearApproval(_owner, _tokenId);\n', '    removeTokenFrom(_owner, _tokenId);\n', '    emit Transfer(_owner, address(0), _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to clear current approval of a given token ID\n', '   * @dev Reverts if the given address is not indeed the owner of the token\n', '   * @param _owner owner of the token\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   */\n', '  function clearApproval(address _owner, uint256 _tokenId) internal {\n', '    require(ownerOf(_tokenId) == _owner);\n', '    if (tokenApprovals[_tokenId] != address(0)) {\n', '      tokenApprovals[_tokenId] = address(0);\n', '      emit Approval(_owner, address(0), _tokenId);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to add a token ID to the list of a given address\n', '   * @param _to address representing the new owner of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '   */\n', '  function addTokenTo(address _to, uint256 _tokenId) internal {\n', '    require(tokenOwner[_tokenId] == address(0));\n', '    tokenOwner[_tokenId] = _to;\n', '    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to remove a token ID from the list of a given address\n', '   * @param _from address representing the previous owner of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '   */\n', '  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n', '    require(ownerOf(_tokenId) == _from);\n', '    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\n', '    tokenOwner[_tokenId] = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to invoke `onERC721Received` on a target address\n', '   * @dev The call is not executed if the target address is not a contract\n', '   * @param _from address representing the previous owner of the given token ID\n', '   * @param _to target address that will receive the tokens\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   * @param _data bytes optional data to send along with the call\n', '   * @return whether the call correctly returned the expected magic value\n', '   */\n', '  function checkAndCallSafeTransfer(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId,\n', '    bytes _data\n', '  )\n', '    internal\n', '    returns (bool)\n', '  {\n', '    if (!_to.isContract()) {\n', '      return true;\n', '    }\n', '    bytes4 retval = ERC721Receiver(_to).onERC721Received(_from, _tokenId, _data);\n', '    return (retval == ERC721_RECEIVED);\n', '  }\n', '}\n', '\n', '// File: REMIX_FILE_SYNC/openzeppelin-solidity/contracts/token/ERC721/ERC721Token.sol\n', '\n', 'pragma solidity ^0.4.21;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Full ERC721 Token\n', ' * This implementation includes all the required and some optional functionality of the ERC721 standard\n', ' * Moreover, it includes approve all functionality using operator terminology\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Token is ERC721, ERC721BasicToken {\n', '  // Token name\n', '  string internal name_;\n', '\n', '  // Token symbol\n', '  string internal symbol_;\n', '\n', '  // Mapping from owner to list of owned token IDs\n', '  mapping (address => uint256[]) internal ownedTokens;\n', '\n', '  // Mapping from token ID to index of the owner tokens list\n', '  mapping(uint256 => uint256) internal ownedTokensIndex;\n', '\n', '  // Array with all token ids, used for enumeration\n', '  uint256[] internal allTokens;\n', '\n', '  // Mapping from token id to position in the allTokens array\n', '  mapping(uint256 => uint256) internal allTokensIndex;\n', '\n', '  // Optional mapping for token URIs\n', '  mapping(uint256 => string) internal tokenURIs;\n', '\n', '  /**\n', '   * @dev Constructor function\n', '   */\n', '  function ERC721Token(string _name, string _symbol) public {\n', '    name_ = _name;\n', '    symbol_ = _symbol;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token name\n', '   * @return string representing the token name\n', '   */\n', '  function name() public view returns (string) {\n', '    return name_;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token symbol\n', '   * @return string representing the token symbol\n', '   */\n', '  function symbol() public view returns (string) {\n', '    return symbol_;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns an URI for a given token ID\n', '   * @dev Throws if the token ID does not exist. May return an empty string.\n', '   * @param _tokenId uint256 ID of the token to query\n', '   */\n', '  function tokenURI(uint256 _tokenId) public view returns (string) {\n', '    require(exists(_tokenId));\n', '    return tokenURIs[_tokenId];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n', '   * @param _owner address owning the tokens list to be accessed\n', '   * @param _index uint256 representing the index to be accessed of the requested tokens list\n', '   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n', '   */\n', '  function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256) {\n', '    require(_index < balanceOf(_owner));\n', '    return ownedTokens[_owner][_index];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the total amount of tokens stored by the contract\n', '   * @return uint256 representing the total amount of tokens\n', '   */\n', '  function totalSupply() public view returns (uint256) {\n', '    return allTokens.length;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token ID at a given index of all the tokens in this contract\n', '   * @dev Reverts if the index is greater or equal to the total number of tokens\n', '   * @param _index uint256 representing the index to be accessed of the tokens list\n', '   * @return uint256 token ID at the given index of the tokens list\n', '   */\n', '  function tokenByIndex(uint256 _index) public view returns (uint256) {\n', '    require(_index < totalSupply());\n', '    return allTokens[_index];\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to set the token URI for a given token\n', '   * @dev Reverts if the token ID does not exist\n', '   * @param _tokenId uint256 ID of the token to set its URI\n', '   * @param _uri string URI to assign\n', '   */\n', '  function _setTokenURI(uint256 _tokenId, string _uri) internal {\n', '    require(exists(_tokenId));\n', '    tokenURIs[_tokenId] = _uri;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to add a token ID to the list of a given address\n', '   * @param _to address representing the new owner of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '   */\n', '  function addTokenTo(address _to, uint256 _tokenId) internal {\n', '    super.addTokenTo(_to, _tokenId);\n', '    uint256 length = ownedTokens[_to].length;\n', '    ownedTokens[_to].push(_tokenId);\n', '    ownedTokensIndex[_tokenId] = length;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to remove a token ID from the list of a given address\n', '   * @param _from address representing the previous owner of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '   */\n', '  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n', '    super.removeTokenFrom(_from, _tokenId);\n', '\n', '    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n', '    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\n', '    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n', '\n', '    ownedTokens[_from][tokenIndex] = lastToken;\n', '    ownedTokens[_from][lastTokenIndex] = 0;\n', '    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n', '    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n', '    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n', '\n', '    ownedTokens[_from].length--;\n', '    ownedTokensIndex[_tokenId] = 0;\n', '    ownedTokensIndex[lastToken] = tokenIndex;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to mint a new token\n', '   * @dev Reverts if the given token ID already exists\n', '   * @param _to address the beneficiary that will own the minted token\n', '   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '   */\n', '  function _mint(address _to, uint256 _tokenId) internal {\n', '    super._mint(_to, _tokenId);\n', '\n', '    allTokensIndex[_tokenId] = allTokens.length;\n', '    allTokens.push(_tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to burn a specific token\n', '   * @dev Reverts if the token does not exist\n', '   * @param _owner owner of the token to burn\n', '   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '   */\n', '  function _burn(address _owner, uint256 _tokenId) internal {\n', '    super._burn(_owner, _tokenId);\n', '\n', '    // Clear metadata (if any)\n', '    if (bytes(tokenURIs[_tokenId]).length != 0) {\n', '      delete tokenURIs[_tokenId];\n', '    }\n', '\n', '    // Reorg all tokens array\n', '    uint256 tokenIndex = allTokensIndex[_tokenId];\n', '    uint256 lastTokenIndex = allTokens.length.sub(1);\n', '    uint256 lastToken = allTokens[lastTokenIndex];\n', '\n', '    allTokens[tokenIndex] = lastToken;\n', '    allTokens[lastTokenIndex] = 0;\n', '\n', '    allTokens.length--;\n', '    allTokensIndex[_tokenId] = 0;\n', '    allTokensIndex[lastToken] = tokenIndex;\n', '  }\n', '\n', '}\n', '\n', '// File: REMIX_FILE_SYNC/ERC721Safe.sol\n', '\n', 'pragma solidity 0.4.25;\n', '\n', '// We have to specify what version of compiler this code will compile with\n', '\n', '\n', '\n', 'contract ERC721Safe is ERC721Token {\n', '    bytes4 constant internal InterfaceSignature_ERC165 =\n', "        bytes4(keccak256('supportsInterface(bytes4)'));\n", '\n', '    bytes4 constant internal InterfaceSignature_ERC721 =\n', "        bytes4(keccak256('name()')) ^\n", "        bytes4(keccak256('symbol()')) ^\n", "        bytes4(keccak256('totalSupply()')) ^\n", "        bytes4(keccak256('balanceOf(address)')) ^\n", "        bytes4(keccak256('ownerOf(uint256)')) ^\n", "        bytes4(keccak256('approve(address,uint256)')) ^\n", "        bytes4(keccak256('safeTransferFrom(address,address,uint256)'));\n", '\t\n', '   function supportsInterface(bytes4 _interfaceID) external view returns (bool);\n', '}\n', '\n', '// File: REMIX_FILE_SYNC/Memory.sol\n', '\n', 'pragma solidity 0.4.25;\n', '\n', '\n', 'library Memory {\n', '\n', '    // Size of a word, in bytes.\n', '    uint internal constant WORD_SIZE = 32;\n', "    // Size of the header of a 'bytes' array.\n", '    uint internal constant BYTES_HEADER_SIZE = 32;\n', '    // Address of the free memory pointer.\n', '    uint internal constant FREE_MEM_PTR = 0x40;\n', '\n', "    // Compares the 'len' bytes starting at address 'addr' in memory with the 'len'\n", "    // bytes starting at 'addr2'.\n", "    // Returns 'true' if the bytes are the same, otherwise 'false'.\n", '    function equals(uint addr, uint addr2, uint len) internal pure returns (bool equal) {\n', '        assembly {\n', '            equal := eq(keccak256(addr, len), keccak256(addr2, len))\n', '        }\n', '    }\n', '\n', "    // Compares the 'len' bytes starting at address 'addr' in memory with the bytes stored in\n", "    // 'bts'. It is allowed to set 'len' to a lower value then 'bts.length', in which case only\n", "    // the first 'len' bytes will be compared.\n", "    // Requires that 'bts.length >= len'\n", '    function equals(uint addr, uint len, bytes memory bts) internal pure returns (bool equal) {\n', '        require(bts.length >= len);\n', '        uint addr2;\n', '        assembly {\n', '            addr2 := add(bts, /*BYTES_HEADER_SIZE*/32)\n', '        }\n', '        return equals(addr, addr2, len);\n', '    }\n', '\n', "    // Allocates 'numBytes' bytes in memory. This will prevent the Solidity compiler\n", '    // from using this area of memory. It will also initialize the area by setting\n', "    // each byte to '0'.\n", '    function allocate(uint numBytes) internal pure returns (uint addr) {\n', '        // Take the current value of the free memory pointer, and update.\n', '        assembly {\n', '            addr := mload(/*FREE_MEM_PTR*/0x40)\n', '            mstore(/*FREE_MEM_PTR*/0x40, add(addr, numBytes))\n', '        }\n', '        uint words = (numBytes + WORD_SIZE - 1) / WORD_SIZE;\n', '        for (uint i = 0; i < words; i++) {\n', '            assembly {\n', '                mstore(add(addr, mul(i, /*WORD_SIZE*/32)), 0)\n', '            }\n', '        }\n', '    }\n', '\n', "    // Copy 'len' bytes from memory address 'src', to address 'dest'.\n", '    // This function does not check the or destination, it only copies\n', '    // the bytes.\n', '    function copy(uint src, uint dest, uint len) internal pure {\n', '        // Copy word-length chunks while possible\n', '        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\n', '            assembly {\n', '                mstore(dest, mload(src))\n', '            }\n', '            dest += WORD_SIZE;\n', '            src += WORD_SIZE;\n', '        }\n', '\n', '        // Copy remaining bytes\n', '        uint mask = 256 ** (WORD_SIZE - len) - 1;\n', '        assembly {\n', '            let srcpart := and(mload(src), not(mask))\n', '            let destpart := and(mload(dest), mask)\n', '            mstore(dest, or(destpart, srcpart))\n', '        }\n', '    }\n', '\n', '    // Returns a memory pointer to the provided bytes array.\n', '    function ptr(bytes memory bts) internal pure returns (uint addr) {\n', '        assembly {\n', '            addr := bts\n', '        }\n', '    }\n', '\n', '    // Returns a memory pointer to the data portion of the provided bytes array.\n', '    function dataPtr(bytes memory bts) internal pure returns (uint addr) {\n', '        assembly {\n', '            addr := add(bts, /*BYTES_HEADER_SIZE*/32)\n', '        }\n', '    }\n', '\n', "    // This function does the same as 'dataPtr(bytes memory)', but will also return the\n", '    // length of the provided bytes array.\n', '    function fromBytes(bytes memory bts) internal pure returns (uint addr, uint len) {\n', '        len = bts.length;\n', '        assembly {\n', '            addr := add(bts, /*BYTES_HEADER_SIZE*/32)\n', '        }\n', '    }\n', '\n', "    // Creates a 'bytes memory' variable from the memory address 'addr', with the\n", "    // length 'len'. The function will allocate new memory for the bytes array, and\n", "    // the 'len bytes starting at 'addr' will be copied into that new memory.\n", '    function toBytes(uint addr, uint len) internal pure returns (bytes memory bts) {\n', '        bts = new bytes(len);\n', '        uint btsptr;\n', '        assembly {\n', '            btsptr := add(bts, /*BYTES_HEADER_SIZE*/32)\n', '        }\n', '        copy(addr, btsptr, len);\n', '    }\n', '\n', "    // Get the word stored at memory address 'addr' as a 'uint'.\n", '    function toUint(uint addr) internal pure returns (uint n) {\n', '        assembly {\n', '            n := mload(addr)\n', '        }\n', '    }\n', '\n', "    // Get the word stored at memory address 'addr' as a 'bytes32'.\n", '    function toBytes32(uint addr) internal pure returns (bytes32 bts) {\n', '        assembly {\n', '            bts := mload(addr)\n', '        }\n', '    }\n', '\n', '    /*\n', "    // Get the byte stored at memory address 'addr' as a 'byte'.\n", '    function toByte(uint addr, uint8 index) internal pure returns (byte b) {\n', '        require(index < WORD_SIZE);\n', '        uint8 n;\n', '        assembly {\n', '            n := byte(index, mload(addr))\n', '        }\n', '        b = byte(n);\n', '    }\n', '    */\n', '}\n', '\n', '// File: REMIX_FILE_SYNC/HelperUtils.sol\n', '\n', 'pragma solidity 0.4.25;\n', '\n', '\n', '/**\n', ' * Internal helper functions\n', ' */\n', 'contract HelperUtils {\n', '\n', '    // converts bytes32 to a string\n', '    // enable this when you use it. Saving gas for now\n', '    // function bytes32ToString(bytes32 x) private pure returns (string) {\n', '    //     bytes memory bytesString = new bytes(32);\n', '    //     uint charCount = 0;\n', '    //     for (uint j = 0; j < 32; j++) {\n', '    //         byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\n', '    //         if (char != 0) {\n', '    //             bytesString[charCount] = char;\n', '    //             charCount++;\n', '    //         }\n', '    //     }\n', '    //     bytes memory bytesStringTrimmed = new bytes(charCount);\n', '    //     for (j = 0; j < charCount; j++) {\n', '    //         bytesStringTrimmed[j] = bytesString[j];\n', '    //     }\n', '    //     return string(bytesStringTrimmed);\n', '    // } \n', '\n', '    /**\n', '     * Concatenates two strings\n', '     * @param  _a string\n', '     * @param  _b string\n', '     * @return string concatenation of two string\n', '     */\n', '    function strConcat(string _a, string _b) internal pure returns (string) {\n', '        bytes memory _ba = bytes(_a);\n', '        bytes memory _bb = bytes(_b);\n', '        string memory ab = new string(_ba.length + _bb.length);\n', '        bytes memory bab = bytes(ab);\n', '        uint k = 0;\n', '        for (uint i = 0; i < _ba.length; i++) bab[k++] = _ba[i];\n', '        for (i = 0; i < _bb.length; i++) bab[k++] = _bb[i];\n', '        return string(bab);\n', '    }\n', '}\n', '\n', '// File: REMIX_FILE_SYNC/DigitalMediaToken.sol\n', '\n', 'pragma solidity 0.4.25;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * The DigitalMediaToken contract.  Fully implements the ERC721 contract\n', ' * from OpenZeppelin without any modifications to it.\n', ' * \n', ' * This contract allows for the creation of:\n', ' *  1. New Collections\n', ' *  2. New DigitalMedia objects\n', ' *  3. New DigitalMediaRelease objects\n', ' * \n', ' * The primary piece of logic is to ensure that an ERC721 token can \n', ' * have a supply and print edition that is enforced by this contract.\n', ' */\n', 'contract DigitalMediaToken is DigitalMediaManager, ERC721Safe, HelperUtils, SingleCreatorControl {\n', '\n', '    event DigitalMediaReleaseCreateEvent(\n', '        uint256 id, \n', '        address owner,\n', '        uint32 printEdition,\n', '        string tokenURI, \n', '        uint256 digitalMediaId);\n', '\n', '    // Event fired when a new digital media is created\n', '    event DigitalMediaCreateEvent(\n', '        uint256 id, \n', '        address storeContractAddress,\n', '        address creator, \n', '        uint32 totalSupply, \n', '        uint32 printIndex, \n', '        uint256 collectionId, \n', '        string metadataPath);\n', '\n', "    // Event fired when a digital media's collection is \n", '    event DigitalMediaCollectionCreateEvent(\n', '        uint256 id, \n', '        address storeContractAddress,\n', '        address creator, \n', '        string metadataPath);\n', '\n', '    // Event fired when a digital media is burned\n', '    event DigitalMediaBurnEvent(\n', '        uint256 id,\n', '        address caller,\n', '        address storeContractAddress);\n', '\n', '    // Event fired when burning a token\n', '    event DigitalMediaReleaseBurnEvent(\n', '        uint256 tokenId, \n', '        address owner);\n', '\n', '    event UpdateDigitalMediaPrintIndexEvent(\n', '        uint256 digitalMediaId,\n', '        uint32 printEdition);\n', '\n', '    // Event fired when a creator assigns a new creator address.\n', '    event ChangedCreator(\n', '        address creator,\n', '        address newCreator);\n', '\n', '    struct DigitalMediaRelease {\n', '        // The unique edition number of this digital media release\n', '        uint32 printEdition;\n', '\n', '        // Reference ID to the digital media metadata\n', '        uint256 digitalMediaId;\n', '    }\n', '\n', '    // Maps internal ERC721 token ID to digital media release object.\n', '    mapping (uint256 => DigitalMediaRelease) public tokenIdToDigitalMediaRelease;\n', '\n', '    // Maps a creator address to a new creator address.  Useful if a creator\n', '    // changes their address or the previous address gets compromised.\n', '    mapping (address => address) public approvedCreators;\n', '\n', '    // Token ID counter\n', '    uint256 internal tokenIdCounter = 0;\n', '\n', '    constructor (string _tokenName, string _tokenSymbol, uint256 _tokenIdStartingCounter) \n', '            public ERC721Token(_tokenName, _tokenSymbol) {\n', '        tokenIdCounter = _tokenIdStartingCounter;\n', '    }\n', '\n', '    /**\n', '     * Creates a new digital media object.\n', '     * @param  _creator address  the creator of this digital media\n', '     * @param  _totalSupply uint32 the total supply a creation could have\n', '     * @param  _collectionId uint256 the collectionId that it belongs to\n', '     * @param  _metadataPath string the path to the ipfs metadata\n', '     * @return uint the new digital media id\n', '     */\n', '    function _createDigitalMedia(\n', '          address _creator, uint32 _totalSupply, uint256 _collectionId, string _metadataPath) \n', '          internal \n', '          returns (uint) {\n', '\n', '        require(_validateCollection(_collectionId, _creator), "Creator for collection not approved.");\n', '\n', '        uint256 newDigitalMediaId = currentDigitalMediaStore.createDigitalMedia(\n', '            _creator,\n', '            0, \n', '            _totalSupply,\n', '            _collectionId,\n', '            _metadataPath);\n', '\n', '        emit DigitalMediaCreateEvent(\n', '            newDigitalMediaId,\n', '            address(currentDigitalMediaStore),\n', '            _creator,\n', '            _totalSupply,\n', '            0,\n', '            _collectionId,\n', '            _metadataPath);\n', '\n', '        return newDigitalMediaId;\n', '    }\n', '\n', '    /**\n', '     * Burns a token for a given tokenId and caller.\n', '     * @param  _tokenId the id of the token to burn.\n', '     * @param  _caller the address of the caller.\n', '     */\n', '    function _burnToken(uint256 _tokenId, address _caller) internal {\n', '        address owner = ownerOf(_tokenId);\n', '        require(_caller == owner || \n', '                getApproved(_tokenId) == _caller || \n', '                isApprovedForAll(owner, _caller),\n', '                "Failed token burn.  Caller is not approved.");\n', '        _burn(owner, _tokenId);\n', '        delete tokenIdToDigitalMediaRelease[_tokenId];\n', '        emit DigitalMediaReleaseBurnEvent(_tokenId, owner);\n', '    }\n', '\n', '    /**\n', '     * Burns a digital media.  Once this function succeeds, this digital media\n', '     * will no longer be able to mint any more tokens.  Existing tokens need to be \n', '     * burned individually though.\n', '     * @param  _digitalMediaId the id of the digital media to burn\n', '     * @param  _caller the address of the caller.\n', '     */\n', '    function _burnDigitalMedia(uint256 _digitalMediaId, address _caller) internal {\n', '        DigitalMedia memory _digitalMedia = _getDigitalMedia(_digitalMediaId);\n', '        require(_checkApprovedCreator(_digitalMedia.creator, _caller) || \n', '                isApprovedForAll(_digitalMedia.creator, _caller), \n', '                "Failed digital media burn.  Caller not approved.");\n', '\n', '        uint32 increment = _digitalMedia.totalSupply - _digitalMedia.printIndex;\n', '        _incrementDigitalMediaPrintIndex(_digitalMedia, increment);\n', '        address _burnDigitalMediaStoreAddress = address(_getDigitalMediaStore(_digitalMedia.id));\n', '        emit DigitalMediaBurnEvent(\n', '          _digitalMediaId, _caller, _burnDigitalMediaStoreAddress);\n', '    }\n', '\n', '    /**\n', '     * Creates a new collection\n', '     * @param  _creator address the creator of this collection\n', '     * @param  _metadataPath string the path to the collection ipfs metadata\n', '     * @return uint the new collection id\n', '     */\n', '    function _createCollection(\n', '          address _creator, string _metadataPath) \n', '          internal \n', '          returns (uint) {\n', '        uint256 newCollectionId = currentDigitalMediaStore.createCollection(\n', '            _creator,\n', '            _metadataPath);\n', '\n', '        emit DigitalMediaCollectionCreateEvent(\n', '            newCollectionId,\n', '            address(currentDigitalMediaStore),\n', '            _creator,\n', '            _metadataPath);\n', '\n', '        return newCollectionId;\n', '    }\n', '\n', '    /**\n', '     * Creates _count number of new digital media releases (i.e a token).  \n', '     * Bumps up the print index by _count.\n', '     * @param  _owner address the owner of the digital media object\n', '     * @param  _digitalMediaId uint256 the digital media id\n', '     */\n', '    function _createDigitalMediaReleases(\n', '        address _owner, uint256 _digitalMediaId, uint32 _count)\n', '        internal {\n', '\n', '        require(_count > 0, "Failed print edition.  Creation count must be > 0.");\n', '        require(_count < 10000, "Cannot print more than 10K tokens at once");\n', '        DigitalMedia memory _digitalMedia = _getDigitalMedia(_digitalMediaId);\n', '        uint32 currentPrintIndex = _digitalMedia.printIndex;\n', '        require(_checkApprovedCreator(_digitalMedia.creator, _owner), "Creator not approved.");\n', '        require(isAllowedSingleCreator(_owner), "Creator must match single creator address.");\n', '        require(_count + currentPrintIndex <= _digitalMedia.totalSupply, "Total supply exceeded.");\n', '        \n', '        string memory tokenURI = HelperUtils.strConcat("ipfs://ipfs/", _digitalMedia.metadataPath);\n', '\n', '        for (uint32 i=0; i < _count; i++) {\n', '            uint32 newPrintEdition = currentPrintIndex + 1 + i;\n', '            DigitalMediaRelease memory _digitalMediaRelease = DigitalMediaRelease({\n', '                printEdition: newPrintEdition,\n', '                digitalMediaId: _digitalMediaId\n', '            });\n', '\n', '            uint256 newDigitalMediaReleaseId = _getNextTokenId();\n', '            tokenIdToDigitalMediaRelease[newDigitalMediaReleaseId] = _digitalMediaRelease;\n', '        \n', '            emit DigitalMediaReleaseCreateEvent(\n', '                newDigitalMediaReleaseId,\n', '                _owner,\n', '                newPrintEdition,\n', '                tokenURI,\n', '                _digitalMediaId\n', '            );\n', '\n', '            // This will assign ownership and also emit the Transfer event as per ERC721\n', '            _mint(_owner, newDigitalMediaReleaseId);\n', '            _setTokenURI(newDigitalMediaReleaseId, tokenURI);\n', '            tokenIdCounter = tokenIdCounter.add(1);\n', '\n', '        }\n', '        _incrementDigitalMediaPrintIndex(_digitalMedia, _count);\n', '        emit UpdateDigitalMediaPrintIndexEvent(_digitalMediaId, currentPrintIndex + _count);\n', '    }\n', '\n', '    /**\n', '     * Checks that a given caller is an approved creator and is allowed to mint or burn\n', '     * tokens.  If the creator was changed it will check against the updated creator.\n', '     * @param  _caller the calling address\n', '     * @return bool allowed or not\n', '     */\n', '    function _checkApprovedCreator(address _creator, address _caller) \n', '            internal \n', '            view \n', '            returns (bool) {\n', '        address approvedCreator = approvedCreators[_creator];\n', '        if (approvedCreator != address(0)) {\n', '            return approvedCreator == _caller;\n', '        } else {\n', '            return _creator == _caller;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Validates the an address is allowed to create a digital media on a\n', '     * given collection.  Collections are tied to addresses.\n', '     */\n', '    function _validateCollection(uint256 _collectionId, address _address) \n', '            private \n', '            view \n', '            returns (bool) {\n', '        if (_collectionId == 0 ) {\n', '            return true;\n', '        }\n', '\n', '        DigitalMediaCollection memory collection = _getCollection(_collectionId);\n', '        return _checkApprovedCreator(collection.creator, _address);\n', '    }\n', '\n', '    /**\n', '    * Generates a new token id.\n', '    */\n', '    function _getNextTokenId() private view returns (uint256) {\n', '        return tokenIdCounter.add(1); \n', '    }\n', '\n', '    /**\n', '     * Changes the creator that is approved to printing new tokens and creations.\n', '     * Either the _caller must be the _creator or the _caller must be the existing\n', '     * approvedCreator.\n', '     * @param _caller the address of the caller\n', '     * @param  _creator the address of the current creator\n', '     * @param  _newCreator the address of the new approved creator\n', '     */\n', '    function _changeCreator(address _caller, address _creator, address _newCreator) internal {\n', '        address approvedCreator = approvedCreators[_creator];\n', '        require(_caller != address(0) && _creator != address(0), "Creator must be valid non 0x0 address.");\n', '        require(_caller == _creator || _caller == approvedCreator, "Unauthorized caller.");\n', '        if (approvedCreator == address(0)) {\n', '            approvedCreators[_caller] = _newCreator;\n', '        } else {\n', '            require(_caller == approvedCreator, "Unauthorized caller.");\n', '            approvedCreators[_creator] = _newCreator;\n', '        }\n', '        emit ChangedCreator(_creator, _newCreator);\n', '    }\n', '\n', '    /**\n', '     * Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\n', '     */\n', '    function supportsInterface(bytes4 _interfaceID) external view returns (bool) {\n', '        return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));\n', '    }\n', '\n', '}\n', '\n', '// File: REMIX_FILE_SYNC/OBOControl.sol\n', '\n', 'pragma solidity 0.4.25;\n', '\n', '\n', '\n', 'contract OBOControl is Pausable {\n', '\t// List of approved on behalf of users.\n', '    mapping (address => bool) public approvedOBOs;\n', '\n', '\t/**\n', '     * Add a new approved on behalf of user address.\n', '     */\n', '    function addApprovedOBO(address _oboAddress) external onlyOwner {\n', '        approvedOBOs[_oboAddress] = true;\n', '    }\n', '\n', '    /**\n', '     * Removes an approved on bhealf of user address.\n', '     */\n', '    function removeApprovedOBO(address _oboAddress) external onlyOwner {\n', '        delete approvedOBOs[_oboAddress];\n', '    }\n', '\n', '    /**\n', '    * @dev Modifier to make the obo calls only callable by approved addressess\n', '    */\n', '    modifier isApprovedOBO() {\n', '        require(approvedOBOs[msg.sender] == true);\n', '        _;\n', '    }\n', '}\n', '\n', '// File: REMIX_FILE_SYNC/WithdrawFundsControl.sol\n', '\n', 'pragma solidity 0.4.25;\n', '\n', '\n', '\n', 'contract WithdrawFundsControl is Pausable {\n', '\n', '\t// List of approved on withdraw addresses\n', '    mapping (address => uint256) public approvedWithdrawAddresses;\n', '\n', '    // Full day wait period before an approved withdraw address becomes active\n', '    uint256 constant internal withdrawApprovalWaitPeriod = 60 * 60 * 24;\n', '\n', '    event WithdrawAddressAdded(address withdrawAddress);\n', '    event WithdrawAddressRemoved(address widthdrawAddress);\n', '\n', '\t/**\n', '     * Add a new approved on behalf of user address.\n', '     */\n', '    function addApprovedWithdrawAddress(address _withdrawAddress) external onlyOwner {\n', '        approvedWithdrawAddresses[_withdrawAddress] = now;\n', '        emit WithdrawAddressAdded(_withdrawAddress);\n', '    }\n', '\n', '    /**\n', '     * Removes an approved on bhealf of user address.\n', '     */\n', '    function removeApprovedWithdrawAddress(address _withdrawAddress) external onlyOwner {\n', '        delete approvedWithdrawAddresses[_withdrawAddress];\n', '        emit WithdrawAddressRemoved(_withdrawAddress);\n', '    }\n', '\n', '    /**\n', "     * Checks that a given withdraw address ia approved and is past it's required\n", '     * wait time.\n', '     */\n', '    function isApprovedWithdrawAddress(address _withdrawAddress) internal view returns (bool)  {\n', '        uint256 approvalTime = approvedWithdrawAddresses[_withdrawAddress];\n', '        require (approvalTime > 0);\n', '        return now - approvalTime > withdrawApprovalWaitPeriod;\n', '    }\n', '}\n', '\n', '// File: REMIX_FILE_SYNC/openzeppelin-solidity/contracts/token/ERC721/ERC721Holder.sol\n', '\n', 'pragma solidity ^0.4.21;\n', '\n', '\n', '\n', 'contract ERC721Holder is ERC721Receiver {\n', '  function onERC721Received(address, uint256, bytes) public returns(bytes4) {\n', '    return ERC721_RECEIVED;\n', '  }\n', '}\n', '\n', '// File: REMIX_FILE_SYNC/DigitalMediaSaleBase.sol\n', '\n', 'pragma solidity 0.4.25;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * Base class that manages the underlying functions of a Digital Media Sale,\n', ' * most importantly the escrow of digital tokens.\n', ' *\n', ' * Manages ensuring that only approved addresses interact with this contract.\n', ' *\n', ' */\n', 'contract DigitalMediaSaleBase is ERC721Holder, Pausable, OBOControl, WithdrawFundsControl {\n', '    using SafeMath for uint256;\n', '\n', '     // Mapping of token contract address to bool indicated approval.\n', '    mapping (address => bool) public approvedTokenContracts;\n', '\n', '    /**\n', '     * Adds a new token contract address to be approved to be called.\n', '     */\n', '    function addApprovedTokenContract(address _tokenContractAddress) \n', '            public onlyOwner {\n', '        approvedTokenContracts[_tokenContractAddress] = true;\n', '    }\n', '\n', '    /**\n', '     * Remove an approved token contract address from the list of approved addresses.\n', '     */\n', '    function removeApprovedTokenContract(address _tokenContractAddress) \n', '            public onlyOwner {            \n', '        delete approvedTokenContracts[_tokenContractAddress];\n', '    }\n', '\n', '    /**\n', '     * Checks that a particular token contract address is a valid address.\n', '     */\n', '    function _isValidTokenContract(address _tokenContractAddress) \n', '            internal view returns (bool) {\n', '        return approvedTokenContracts[_tokenContractAddress];\n', '    }\n', '\n', '    /**\n', '     * Returns an ERC721 instance of a token contract address.  Throws otherwise.\n', '     * Only valid and approved token contracts are allowed to be interacted with.\n', '     */\n', '    function _getTokenContract(address _tokenContractAddress) internal view returns (ERC721Safe) {\n', '        require(_isValidTokenContract(_tokenContractAddress));\n', '        return ERC721Safe(_tokenContractAddress);\n', '    }\n', '\n', '    /**\n', '     * Checks with the ERC-721 token contract that the _claimant actually owns the token.\n', '     */\n', '    function _owns(address _claimant, uint256 _tokenId, address _tokenContractAddress) internal view returns (bool) {\n', '        ERC721Safe tokenContract = _getTokenContract(_tokenContractAddress);\n', '        return (tokenContract.ownerOf(_tokenId) == _claimant);\n', '    }\n', '\n', '    /**\n', '     * Checks with the ERC-721 token contract the owner of the a token\n', '     */\n', '    function _ownerOf(uint256 _tokenId, address _tokenContractAddress) internal view returns (address) {\n', '        ERC721Safe tokenContract = _getTokenContract(_tokenContractAddress);\n', '        return tokenContract.ownerOf(_tokenId);\n', '    }\n', '\n', '    /**\n', '     * Checks to ensure that the token owner has approved the escrow contract \n', '     */\n', '    function _approvedForEscrow(address _seller, uint256 _tokenId, address _tokenContractAddress) internal view returns (bool) {\n', '        ERC721Safe tokenContract = _getTokenContract(_tokenContractAddress);\n', '        return (tokenContract.isApprovedForAll(_seller, this) || \n', '                tokenContract.getApproved(_tokenId) == address(this));\n', '    }\n', '\n', '    /**\n', '     * Escrows an ERC-721 token from the seller to this contract.  Assumes that the escrow contract\n', '     * is already approved to make the transfer, otherwise it will fail.\n', '     */\n', '    function _escrow(address _seller, uint256 _tokenId, address _tokenContractAddress) internal {\n', '        // it will throw if transfer fails\n', '        ERC721Safe tokenContract = _getTokenContract(_tokenContractAddress);\n', '        tokenContract.safeTransferFrom(_seller, this, _tokenId);\n', '    }\n', '\n', '    /**\n', '     * Transfer an ERC-721 token from escrow to the buyer.  This is to be called after a purchase is\n', '     * completed.\n', '     */\n', '    function _transfer(address _receiver, uint256 _tokenId, address _tokenContractAddress) internal {\n', '        // it will throw if transfer fails\n', '        ERC721Safe tokenContract = _getTokenContract(_tokenContractAddress);\n', '        tokenContract.safeTransferFrom(this, _receiver, _tokenId);\n', '    }\n', '\n', '    /**\n', '     * Method to check whether this is an escrow contract\n', '     */\n', '    function isEscrowContract() public pure returns(bool) {\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Withdraws all the funds to a specified non-zero address\n', '     */\n', '    function withdrawFunds(address _withdrawAddress) public onlyOwner {\n', '        require(isApprovedWithdrawAddress(_withdrawAddress));\n', '        _withdrawAddress.transfer(address(this).balance);\n', '    }\n', '}\n', '\n', '// File: REMIX_FILE_SYNC/DigitalMediaCore.sol\n', '\n', 'pragma solidity 0.4.25;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * This is the main driver contract that is used to control and run the service. Funds \n', ' * are managed through this function, underlying contracts are also updated through \n', ' * this contract.\n', ' *\n', ' * This class also exposes a set of creation methods that are allowed to be created\n', ' * by an approved token creator, on behalf of a particular address.  This is meant\n', " * to simply the creation flow for MakersToken users that aren't familiar with \n", ' * the blockchain.  The ERC721 tokens that are created are still fully compliant, \n', ' * although it is possible for a malicious token creator to mint unwanted tokens \n', ' * on behalf of a creator.  Worst case, the creator can burn those tokens.\n', ' */\n', 'contract DigitalMediaCore is DigitalMediaToken {\n', '    using SafeMath for uint32;\n', '\n', '    // List of approved token creators (on behalf of the owner)\n', '    mapping (address => bool) public approvedTokenCreators;\n', '\n', '    // Mapping from owner to operator accounts.\n', '    mapping (address => mapping (address => bool)) internal oboOperatorApprovals;\n', '\n', '    // Mapping of all disabled OBO operators.\n', '    mapping (address => bool) public disabledOboOperators;\n', '\n', '    // OboApproveAll Event\n', '    event OboApprovalForAll(\n', '        address _owner, \n', '        address _operator, \n', '        bool _approved);\n', '\n', '    // Fired when disbaling obo capability.\n', '    event OboDisabledForAll(address _operator);\n', '\n', '    constructor (\n', '        string _tokenName, \n', '        string _tokenSymbol, \n', '        uint256 _tokenIdStartingCounter, \n', '        address _dmsAddress,\n', '        address _crsAddress)\n', '            public DigitalMediaToken(\n', '                _tokenName, \n', '                _tokenSymbol,\n', '                _tokenIdStartingCounter) {\n', '        paused = true;\n', '        setDigitalMediaStoreAddress(_dmsAddress);\n', '        setCreatorRegistryStore(_crsAddress);\n', '    }\n', '\n', '    /**\n', '     * Retrieves a Digital Media object.\n', '     */\n', '    function getDigitalMedia(uint256 _id) \n', '            external \n', '            view \n', '            returns (\n', '            uint256 id,\n', '            uint32 totalSupply,\n', '            uint32 printIndex,\n', '            uint256 collectionId,\n', '            address creator,\n', '            string metadataPath) {\n', '\n', '        DigitalMedia memory digitalMedia = _getDigitalMedia(_id);\n', '        require(digitalMedia.creator != address(0), "DigitalMedia not found.");\n', '        id = _id;\n', '        totalSupply = digitalMedia.totalSupply;\n', '        printIndex = digitalMedia.printIndex;\n', '        collectionId = digitalMedia.collectionId;\n', '        creator = digitalMedia.creator;\n', '        metadataPath = digitalMedia.metadataPath;\n', '    }\n', '\n', '    /**\n', '     * Retrieves a collection.\n', '     */\n', '    function getCollection(uint256 _id) \n', '            external \n', '            view \n', '            returns (\n', '            uint256 id,\n', '            address creator,\n', '            string metadataPath) {\n', '        DigitalMediaCollection memory digitalMediaCollection = _getCollection(_id);\n', '        require(digitalMediaCollection.creator != address(0), "Collection not found.");\n', '        id = _id;\n', '        creator = digitalMediaCollection.creator;\n', '        metadataPath = digitalMediaCollection.metadataPath;\n', '    }\n', '\n', '    /**\n', '     * Retrieves a Digital Media Release (i.e a token)\n', '     */\n', '    function getDigitalMediaRelease(uint256 _id) \n', '            external \n', '            view \n', '            returns (\n', '            uint256 id,\n', '            uint32 printEdition,\n', '            uint256 digitalMediaId) {\n', '        require(exists(_id));\n', '        DigitalMediaRelease storage digitalMediaRelease = tokenIdToDigitalMediaRelease[_id];\n', '        id = _id;\n', '        printEdition = digitalMediaRelease.printEdition;\n', '        digitalMediaId = digitalMediaRelease.digitalMediaId;\n', '    }\n', '\n', '    /**\n', '     * Creates a new collection.\n', '     *\n', '     * No creations of any kind are allowed when the contract is paused.\n', '     */\n', '    function createCollection(string _metadataPath) \n', '            external \n', '            whenNotPaused {\n', '        _createCollection(msg.sender, _metadataPath);\n', '    }\n', '\n', '    /**\n', '     * Creates a new digital media object.\n', '     */\n', '    function createDigitalMedia(uint32 _totalSupply, uint256 _collectionId, string _metadataPath) \n', '            external \n', '            whenNotPaused {\n', '        _createDigitalMedia(msg.sender, _totalSupply, _collectionId, _metadataPath);\n', '    }\n', '\n', '    /**\n', "     * Creates a new digital media object and mints it's first digital media release token.\n", '     *\n', '     * No creations of any kind are allowed when the contract is paused.\n', '     */\n', '    function createDigitalMediaAndReleases(\n', '                uint32 _totalSupply,\n', '                uint256 _collectionId,\n', '                string _metadataPath,\n', '                uint32 _numReleases)\n', '            external \n', '            whenNotPaused {\n', '        uint256 digitalMediaId = _createDigitalMedia(msg.sender, _totalSupply, _collectionId, _metadataPath);\n', '        _createDigitalMediaReleases(msg.sender, digitalMediaId, _numReleases);\n', '    }\n', '\n', '    /**\n', '     * Creates a new collection, a new digital media object within it and mints a new\n', '     * digital media release token.\n', '     *\n', '     * No creations of any kind are allowed when the contract is paused.\n', '     */\n', '    function createDigitalMediaAndReleasesInNewCollection(\n', '                uint32 _totalSupply, \n', '                string _digitalMediaMetadataPath,\n', '                string _collectionMetadataPath,\n', '                uint32 _numReleases)\n', '            external \n', '            whenNotPaused {\n', '        uint256 collectionId = _createCollection(msg.sender, _collectionMetadataPath);\n', '        uint256 digitalMediaId = _createDigitalMedia(msg.sender, _totalSupply, collectionId, _digitalMediaMetadataPath);\n', '        _createDigitalMediaReleases(msg.sender, digitalMediaId, _numReleases);\n', '    }\n', '\n', '    /**\n', '     * Creates a new digital media release (token) for a given digital media id.\n', '     *\n', '     * No creations of any kind are allowed when the contract is paused.\n', '     */\n', '    function createDigitalMediaReleases(uint256 _digitalMediaId, uint32 _numReleases) \n', '            external \n', '            whenNotPaused {\n', '        _createDigitalMediaReleases(msg.sender, _digitalMediaId, _numReleases);\n', '    }\n', '\n', '    /**\n', "     * Deletes a token / digital media release. Doesn't modify the current print index\n", '     * and total to be printed. Although dangerous, the owner of a token should always \n', '     * be able to burn a token they own.\n', '     *\n', '     * Only the owner of the token or accounts approved by the owner can burn this token.\n', '     */\n', '    function burnToken(uint256 _tokenId) external {\n', '        _burnToken(_tokenId, msg.sender);\n', '    }\n', '\n', '    /* Support ERC721 burn method */\n', '    function burn(uint256 tokenId) public {\n', '        _burnToken(tokenId, msg.sender);\n', '    }\n', '\n', '    /**\n', '     * Ends the production run of a digital media.  Afterwards no more tokens\n', '     * will be allowed to be printed for this digital media.  Used when a creator\n', '     * makes a mistake and wishes to burn and recreate their digital media.\n', '     * \n', '     * When a contract is paused we do not allow new tokens to be created, \n', "     * so stopping the production of a token doesn't have much purpose.\n", '     */\n', '    function burnDigitalMedia(uint256 _digitalMediaId) external whenNotPaused {\n', '        _burnDigitalMedia(_digitalMediaId, msg.sender);\n', '    }\n', '\n', '    /**\n', '     * Resets the approval rights for a given tokenId.\n', '     */\n', '    function resetApproval(uint256 _tokenId) external {\n', '        clearApproval(msg.sender, _tokenId);\n', '    }\n', '\n', '    /**\n', '     * Changes the creator for the current sender, in the event we \n', '     * need to be able to mint new tokens from an existing digital media \n', '     * print production. When changing creator, the old creator will\n', '     * no longer be able to mint tokens.\n', '     *\n', '     * A creator may need to be changed:\n', '     * 1. If we want to allow a creator to take control over their token minting (i.e go decentralized)\n', '     * 2. If we want to re-issue private keys due to a compromise.  For this reason, we can call this function\n', '     * when the contract is paused.\n', '     * @param _creator the creator address\n', '     * @param _newCreator the new creator address\n', '     */\n', '    function changeCreator(address _creator, address _newCreator) external {\n', '        _changeCreator(msg.sender, _creator, _newCreator);\n', '    }\n', '\n', '    /**********************************************************************/\n', '    /**Calls that are allowed to be called by approved creator addresses **/ \n', '    /**********************************************************************/\n', '    \n', '    /**\n', '     * Add a new approved token creator.\n', '     *\n', '     * Only the owner of this contract can update approved Obo accounts.\n', '     */\n', '    function addApprovedTokenCreator(address _creatorAddress) external onlyOwner {\n', '        require(disabledOboOperators[_creatorAddress] != true, "Address disabled.");\n', '        approvedTokenCreators[_creatorAddress] = true;\n', '    }\n', '\n', '    /**\n', '     * Removes an approved token creator.\n', '     *\n', '     * Only the owner of this contract can update approved Obo accounts.\n', '     */\n', '    function removeApprovedTokenCreator(address _creatorAddress) external onlyOwner {\n', '        delete approvedTokenCreators[_creatorAddress];\n', '    }\n', '\n', '    /**\n', '    * @dev Modifier to make the approved creation calls only callable by approved token creators\n', '    */\n', '    modifier isApprovedCreator() {\n', '        require(\n', '            (approvedTokenCreators[msg.sender] == true && \n', '             disabledOboOperators[msg.sender] != true), \n', '            "Unapproved OBO address.");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Only the owner address can set a special obo approval list.\n', '     * When issuing OBO management accounts, we should give approvals through\n', "     * this method only so that we can very easily reset it's approval in\n", '     * the event of a disaster scenario.\n', '     *\n', '     * Only the owner themselves is allowed to give OboApproveAll access.\n', '     */\n', '    function setOboApprovalForAll(address _to, bool _approved) public {\n', '        require(_to != msg.sender, "Approval address is same as approver.");\n', '        require(approvedTokenCreators[_to], "Unrecognized OBO address.");\n', '        require(disabledOboOperators[_to] != true, "Approval address is disabled.");\n', '        oboOperatorApprovals[msg.sender][_to] = _approved;\n', '        emit OboApprovalForAll(msg.sender, _to, _approved);\n', '    }\n', '\n', '    /**\n', '     * Only called in a disaster scenario if the account has been compromised.  \n', "     * There's no turning back from this and the oboAddress will no longer be \n", '     * able to be given approval rights or perform obo functions.  \n', '     * \n', '     * Only the owner of this contract is allowed to disable an Obo address.\n', '     *\n', '     */\n', '    function disableOboAddress(address _oboAddress) public onlyOwner {\n', '        require(approvedTokenCreators[_oboAddress], "Unrecognized OBO address.");\n', '        disabledOboOperators[_oboAddress] = true;\n', '        delete approvedTokenCreators[_oboAddress];\n', '        emit OboDisabledForAll(_oboAddress);\n', '    }\n', '\n', '    /**\n', '     * Override the isApprovalForAll to check for a special oboApproval list.  Reason for this\n', '     * is that we can can easily remove obo operators if they every become compromised.\n', '     */\n', '    function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\n', '        if (disabledOboOperators[_operator] == true) {\n', '            return false;\n', '        } else if (isOperatorApprovedForCustodialAccount(_operator, _owner) == true) {\n', '            return true;\n', '        } else if (oboOperatorApprovals[_owner][_operator]) {\n', '            return true;\n', '        } else {\n', '            return super.isApprovedForAll(_owner, _operator);\n', '        }\n', '    }\n', '\n', '    /**\n', "     * Creates a new digital media object and mints it's digital media release tokens.\n", '     * Called on behalf of the _owner. Pass count to mint `n` number of tokens.\n', '     *\n', '     * Only approved creators are allowed to create Obo.\n', '     *\n', '     * No creations of any kind are allowed when the contract is paused.\n', '     */\n', '    function oboCreateDigitalMediaAndReleases(\n', '                address _owner,\n', '                uint32 _totalSupply, \n', '                uint256 _collectionId, \n', '                string _metadataPath,\n', '                uint32 _numReleases)\n', '            external \n', '            whenNotPaused\n', '            isApprovedCreator {\n', '        uint256 digitalMediaId = _createDigitalMedia(_owner, _totalSupply, _collectionId, _metadataPath);\n', '        _createDigitalMediaReleases(_owner, digitalMediaId, _numReleases);\n', '    }\n', '\n', '    /**\n', '     * Creates a new collection, a new digital media object within it and mints a new\n', '     * digital media release token.\n', '     * Called on behalf of the _owner.\n', '     *\n', '     * Only approved creators are allowed to create Obo.\n', '     *\n', '     * No creations of any kind are allowed when the contract is paused.\n', '     */\n', '    function oboCreateDigitalMediaAndReleasesInNewCollection(\n', '                address _owner,\n', '                uint32 _totalSupply, \n', '                string _digitalMediaMetadataPath,\n', '                string _collectionMetadataPath,\n', '                uint32 _numReleases)\n', '            external \n', '            whenNotPaused\n', '            isApprovedCreator {\n', '        uint256 collectionId = _createCollection(_owner, _collectionMetadataPath);\n', '        uint256 digitalMediaId = _createDigitalMedia(_owner, _totalSupply, collectionId, _digitalMediaMetadataPath);\n', '        _createDigitalMediaReleases(_owner, digitalMediaId, _numReleases);\n', '    }\n', '\n', '    /**\n', '     * Creates multiple digital media releases (tokens) for a given digital media id.\n', '     * Called on behalf of the _owner.\n', '     *\n', '     * Only approved creators are allowed to create Obo.\n', '     *\n', '     * No creations of any kind are allowed when the contract is paused.\n', '     */\n', '    function oboCreateDigitalMediaReleases(\n', '                address _owner,\n', '                uint256 _digitalMediaId,\n', '                uint32 _numReleases) \n', '            external \n', '            whenNotPaused\n', '            isApprovedCreator {\n', '        _createDigitalMediaReleases(_owner, _digitalMediaId, _numReleases);\n', '    }\n', '\n', '}']