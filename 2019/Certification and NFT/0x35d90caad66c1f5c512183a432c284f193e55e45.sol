['pragma solidity ^0.5.3;\n', '\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * @notice Renouncing to ownership will leave the contract without an owner.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface ITransferPolicy {\n', '    function isTransferPossible(address from, address to, uint256 amount) \n', '        external view returns (bool);\n', '    \n', '    function isBehalfTransferPossible(address sender, address from, address to, uint256 amount) \n', '        external view returns (bool);\n', '}\n', '\n', 'contract WhitelistTransferPolicy is ITransferPolicy, Ownable {\n', '    mapping (address => bool) private whitelist;\n', '\n', '    event AddressWhitelisted(address address_);\n', '    event AddressUnwhitelisted(address address_);\n', '\n', '    constructor() Ownable() public {}\n', '\n', '    function isTransferPossible(address from, address to, uint256) public view returns (bool) {\n', '        return (whitelist[from] && whitelist[to]);\n', '    }\n', '\n', '    function isBehalfTransferPossible(address sender, address from, address to, uint256) public view returns (bool) {\n', '        return (whitelist[from] && whitelist[to] && whitelist[sender]);\n', '    }\n', '\n', '    function isWhitelisted(address address_) public view returns (bool) {\n', '        return whitelist[address_];\n', '    }\n', '\n', '    function unwhitelistAddress(address address_) public onlyOwner returns (bool) {\n', '        removeFromWhitelist(address_);\n', '        return true;\n', '    }\n', '\n', '    function whitelistAddress(address address_) public onlyOwner returns (bool) {\n', '        addToWhitelist(address_);\n', '        return true;\n', '    }\n', '\n', '    function whitelistAddresses(address[] memory addresses) public onlyOwner returns (bool) {\n', '        uint256 len = addresses.length;\n', '        for (uint256 i; i < len; i++) {\n', '            addToWhitelist(addresses[i]);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function unwhitelistAddresses(address[] memory addresses) public onlyOwner returns (bool) {\n', '        uint256 len = addresses.length;\n', '        for (uint256 i; i < len; i++) {\n', '            removeFromWhitelist(addresses[i]);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function addToWhitelist(address address_) internal {\n', '        whitelist[address_] = true;\n', '        emit AddressWhitelisted(address_);\n', '    }\n', '\n', '\n', '    function removeFromWhitelist(address address_) internal {\n', '        whitelist[address_] = false;\n', '        emit AddressUnwhitelisted(address_);\n', '    }\n', '}']