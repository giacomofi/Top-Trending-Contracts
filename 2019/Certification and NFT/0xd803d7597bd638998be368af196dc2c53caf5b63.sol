['pragma solidity ^0.5.3;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     * @notice Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// good enough for a hackathon right?\n', 'contract BirdFeeder is Ownable {\n', '\n', '   mapping (address => uint) public contributors;\n', '   mapping (uint => bool) public paid;\n', '   \n', '   address[8] public top8;\n', '\n', '   uint public lowest; // index of loest entry sometimes\n', '   uint public lowestAmount; // amount of lowest top8 entry\n', '\n', '   constructor() public{\n', '   }\n', '   \n', '   // fallback\n', '   function() external payable {\n', '\n', '      // bump the users contribution\n', '      contributors[msg.sender] = contributors[msg.sender]+msg.value;\n', '      bool insert = true;\n', '\n', '      // pass #1\n', '      for (uint i=0; i<8; i++) {\n', '        \n', '        // see if lowest needs updating\n', '        if(contributors[top8[i]] <= lowestAmount) {\n', '            \n', '            lowestAmount = contributors[top8[i]];\n', '            lowest = i;\n', '        }    \n', '        \n', "        // if user is already in top 8, we're done\n", '        if(top8[i]==msg.sender){\n', '            insert=false;\n', '        }\n', '        \n', '      }\n', '      \n', '      if(contributors[top8[lowest]] < contributors[msg.sender] && insert){\n', '        top8[lowest] = msg.sender; // replace the lowest memeber with \n', '        lowestAmount = contributors[msg.sender];\n', '      }\n', '      // lets just say the most recent is the lowest now\n', "      // we'll correct that assumption before doing anything with it.\n", '   }\n', '   \n', '   // track users that get paid\n', '   function dispense(address payable dst, uint sum, uint userid) external onlyOwner {\n', '       require(paid[userid]==false);\n', '       paid[userid]=true;\n', '       dst.transfer(sum);\n', '   }\n', '   \n', '   function getBalance() public view returns (uint){\n', '       return address(this).balance;\n', '   }\n', '\n', '}']