['pragma solidity 0.5.3;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '    * @dev Multiplies two unsigned integers, reverts on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two unsigned integers, reverts on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * @notice Renouncing to ownership will leave the contract without an owner.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title PaymentDistributor\n', ' * @dev distributes all the received funds between project wallets and team members. \n', ' */\n', 'contract PaymentDistributor is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    event PaymentReleased(address to, uint256 amount);\n', '    event PaymentReceived(address from, uint256 amount);\n', '\n', '    // timestamp when fund backup release is enabled\n', '    uint256 private _backupReleaseTime;\n', '\n', '    uint256 private _totalReleased;\n', '    mapping(address => uint256) private _released;\n', '\n', '    uint256 private constant step1Fund = uint256(5000) * 10 ** 18;\n', '\n', '    address payable private _beneficiary0;\n', '    address payable private _beneficiary1;\n', '    address payable private _beneficiary2;\n', '    address payable private _beneficiary3;\n', '    address payable private _beneficiary4;\n', '    address payable private _beneficiaryBackup;\n', '\n', '    /**\n', '     * @dev Constructor\n', '     */\n', '    constructor (address payable beneficiary0, address payable beneficiary1, address payable beneficiary2, address payable beneficiary3, address payable beneficiary4, address payable beneficiaryBackup, uint256 backupReleaseTime) public {\n', '        _beneficiary0 = beneficiary0;\n', '        _beneficiary1 = beneficiary1;\n', '        _beneficiary2 = beneficiary2;\n', '        _beneficiary3 = beneficiary3;\n', '        _beneficiary4 = beneficiary4;\n', '        _beneficiaryBackup = beneficiaryBackup;\n', '        _backupReleaseTime = backupReleaseTime;\n', '    }\n', '\n', '    /**\n', '     * @dev payable fallback\n', '     */\n', '    function () external payable {\n', '        emit PaymentReceived(msg.sender, msg.value);\n', '    }\n', '\n', '    /**\n', '     * @return the total amount already released.\n', '     */\n', '    function totalReleased() public view returns (uint256) {\n', '        return _totalReleased;\n', '    }\n', '\n', '    /**\n', '     * @return the amount already released to an account.\n', '     */\n', '    function released(address account) public view returns (uint256) {\n', '        return _released[account];\n', '    }\n', '\n', '    /**\n', '     * @return the beneficiary0 of the Payments.\n', '     */\n', '    function beneficiary0() public view returns (address) {\n', '        return _beneficiary0;\n', '    }\n', '\n', '    /**\n', '     * @return the beneficiary1 of the Payments.\n', '     */\n', '    function beneficiary1() public view returns (address) {\n', '        return _beneficiary1;\n', '    }\n', '\n', '    /**\n', '     * @return the beneficiary2 of the Payments.\n', '     */\n', '    function beneficiary2() public view returns (address) {\n', '        return _beneficiary2;\n', '    }\n', '\n', '    /**\n', '     * @return the beneficiary3 of the Payments.\n', '     */\n', '    function beneficiary3() public view returns (address) {\n', '        return _beneficiary3;\n', '    }\n', '\n', '    /**\n', '     * @return the beneficiary4 of the Payments.\n', '     */\n', '    function beneficiary4() public view returns (address) {\n', '        return _beneficiary4;\n', '    }\n', '\n', '    /**\n', '     * @return the beneficiaryBackup of Payments.\n', '     */\n', '    function beneficiaryBackup() public view returns (address) {\n', '        return _beneficiaryBackup;\n', '    }\n', '\n', '    /**\n', '     * @return the time when Payments are released to the beneficiaryBackup wallet.\n', '     */\n', '    function backupReleaseTime() public view returns (uint256) {\n', '        return _backupReleaseTime;\n', '    }\n', '\n', '    /**\n', "     * @dev send to one of the beneficiarys' addresses.\n", '     * @param account Whose the fund will be send to.\n', '     * @param amount Value in wei to be sent\n', '     */\n', '    function sendToAccount(address payable account, uint256 amount) internal {\n', "        require(amount > 0, 'The amount must be greater than zero.');\n", '\n', '        _released[account] = _released[account].add(amount);\n', '        _totalReleased = _totalReleased.add(amount);\n', '\n', '        account.transfer(amount);\n', '        emit PaymentReleased(account, amount);\n', '    }\n', '\n', '    /**\n', "     * @dev distributes the amount between team's wallets \n", '     * which are created for different purposes.\n', '     * @param amount Value in wei to send to the wallets.\n', '     */\n', '    function release(uint256 amount) onlyOwner public{\n', "        require(address(this).balance >= amount, 'Balance must be greater than or equal to the amount.');\n", '        uint256 _value = amount;\n', '        if (_released[_beneficiary0] < step1Fund) {\n', '            if (_released[_beneficiary0].add(_value) > step1Fund){\n', '                uint256 _remainValue = step1Fund.sub(_released[_beneficiary0]);\n', '                _value = _value.sub(_remainValue);\n', '                sendToAccount(_beneficiary0, _remainValue);\n', '            }\n', '            else {\n', '                sendToAccount(_beneficiary0, _value);\n', '                _value = 0;\n', '            }\n', '        }\n', '\n', '        if (_value > 0) {\n', '            uint256 _value1 = _value.mul(10).div(100);          //10%\n', '            uint256 _value2 = _value.mul(7020).div(10000);      //70.2%\n', '            uint256 _value3 = _value.mul(1080).div(10000);      //10.8%\n', '            uint256 _value4 = _value.mul(9).div(100);           //9%\n', '            sendToAccount(_beneficiary1, _value1);\n', '            sendToAccount(_beneficiary2, _value2);\n', '            sendToAccount(_beneficiary3, _value3);\n', '            sendToAccount(_beneficiary4, _value4);\n', '        }\n', '    }    \n', '\n', '    /**\n', '     * @dev transfer the amount to the beneficiaryBackup wallet\n', '     * which are created for different purposes.\n', '     * @param amount Value in wei to send to the backup wallet.\n', '     */\n', '    function releaseBackup(uint256 amount) onlyOwner public{\n', "        require(address(this).balance >= amount, 'Balance must be greater than or equal to the amount.');\n", "        require(block.timestamp >= backupReleaseTime(), 'The transfer is possible only 2 months after the ICO.');\n", '        sendToAccount(_beneficiaryBackup, amount);\n', '    }\n', '}']