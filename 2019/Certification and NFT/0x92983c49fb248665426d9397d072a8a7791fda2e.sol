['pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control \n', ' * functions, this simplifies the implementation of "user permissions". \n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  /** \n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner. \n', '  */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract Token{\n', '  function transfer(address to, uint value) external returns (bool);\n', '}\n', '\n', 'contract FanfareAirdrop1 is Ownable {\n', '\n', '    function multisend (address _tokenAddr, address[] _to, uint256[] _value) external\n', '    \n', '    returns (bool _success) {\n', '        assert(_to.length == _value.length);\n', '        assert(_to.length <= 150);\n', '        // loop through to addresses and send value\n', '        for (uint8 i = 0; i < _to.length; i++) {\n', '                uint256 actualValue = _value[i] * 10**18;\n', '                require((Token(_tokenAddr).transfer(_to[i], actualValue)) == true);\n', '            }\n', '            return true;\n', '        }\n', '}']