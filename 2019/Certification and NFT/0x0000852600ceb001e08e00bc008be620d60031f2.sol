['pragma solidity ^0.4.23;\n', '\n', '// File: contracts/Proxy/OwnedUpgradeabilityProxy.sol\n', '\n', '/**\n', ' * @title OwnedUpgradeabilityProxy\n', ' * @dev This contract combines an upgradeability proxy with basic authorization control functionalities\n', ' */\n', 'contract TrueHKD {\n', '    /**\n', '    * @dev Event to show ownership has been transferred\n', '    * @param previousOwner representing the address of the previous owner\n', '    * @param newOwner representing the address of the new owner\n', '    */\n', '    event ProxyOwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '    * @dev Event to show ownership transfer is pending\n', '    * @param currentOwner representing the address of the current owner\n', '    * @param pendingOwner representing the address of the pending owner\n', '    */\n', '    event NewPendingOwner(address currentOwner, address pendingOwner);\n', '    \n', '    // Storage position of the owner and pendingOwner of the contract\n', '    bytes32 private constant proxyOwnerPosition = 0x694c83c02d0f62c26352cb2d947e2f3d43c28959df09aa728c1937be0db4f629;//keccak256("trueHKD.proxy.owner");\n', '    bytes32 private constant pendingProxyOwnerPosition = 0x6dd3140f324ae1c14ee501ef56b899935ef394e2a1b2a0e41ec6b40fd725799c;//keccak256("trueHKD.pending.proxy.owner");\n', '\n', '    /**\n', '    * @dev the constructor sets the original owner of the contract to the sender account.\n', '    */\n', '    constructor() public {\n', '        _setUpgradeabilityOwner(msg.sender);\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyProxyOwner() {\n', '        require(msg.sender == proxyOwner(), "only Proxy Owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the pending owner.\n', '    */\n', '    modifier onlyPendingProxyOwner() {\n', '        require(msg.sender == pendingProxyOwner(), "only pending Proxy Owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Tells the address of the owner\n', '    * @return the address of the owner\n', '    */\n', '    function proxyOwner() public view returns (address owner) {\n', '        bytes32 position = proxyOwnerPosition;\n', '        assembly {\n', '            owner := sload(position)\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Tells the address of the owner\n', '    * @return the address of the owner\n', '    */\n', '    function pendingProxyOwner() public view returns (address pendingOwner) {\n', '        bytes32 position = pendingProxyOwnerPosition;\n', '        assembly {\n', '            pendingOwner := sload(position)\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Sets the address of the owner\n', '    */\n', '    function _setUpgradeabilityOwner(address newProxyOwner) internal {\n', '        bytes32 position = proxyOwnerPosition;\n', '        assembly {\n', '            sstore(position, newProxyOwner)\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Sets the address of the owner\n', '    */\n', '    function _setPendingUpgradeabilityOwner(address newPendingProxyOwner) internal {\n', '        bytes32 position = pendingProxyOwnerPosition;\n', '        assembly {\n', '            sstore(position, newPendingProxyOwner)\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', "    *changes the pending owner to newOwner. But doesn't actually transfer\n", '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferProxyOwnership(address newOwner) external onlyProxyOwner {\n', '        require(newOwner != address(0));\n', '        _setPendingUpgradeabilityOwner(newOwner);\n', '        emit NewPendingOwner(proxyOwner(), newOwner);\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the pendingOwner to claim ownership of the proxy\n', '    */\n', '    function claimProxyOwnership() external onlyPendingProxyOwner {\n', '        emit ProxyOwnershipTransferred(proxyOwner(), pendingProxyOwner());\n', '        _setUpgradeabilityOwner(pendingProxyOwner());\n', '        _setPendingUpgradeabilityOwner(address(0));\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the proxy owner to upgrade the current version of the proxy.\n', '    * @param implementation representing the address of the new implementation to be set.\n', '    */\n', '    function upgradeTo(address implementation) external onlyProxyOwner {\n', '        address currentImplementation;\n', '        bytes32 position = implementationPosition;\n', '        assembly {\n', '            currentImplementation := sload(position)\n', '        }\n', '        require(currentImplementation != implementation);\n', '        assembly {\n', '          sstore(position, implementation)\n', '        }\n', '        emit Upgraded(implementation);\n', '    }\n', '    /**\n', '    * @dev This event will be emitted every time the implementation gets upgraded\n', '    * @param implementation representing the address of the upgraded implementation\n', '    */\n', '    event Upgraded(address indexed implementation);\n', '\n', '    // Storage position of the address of the current implementation\n', '    bytes32 private constant implementationPosition = 0x3e9d19baa8ecfb799f8603bb69f8a220a1c51ff5c34c24b0d981ca8973276561; //keccak256("trueHKD.proxy.implementation");\n', '\n', '    function implementation() public view returns (address impl) {\n', '        bytes32 position = implementationPosition;\n', '        assembly {\n', '            impl := sload(position)\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Fallback function allowing to perform a delegatecall to the given implementation.\n', '    * This function will return whatever the implementation call returns\n', '    */\n', '    function() external payable {\n', '        bytes32 position = implementationPosition;\n', '        \n', '        assembly {\n', '            let ptr := mload(0x40)\n', '            calldatacopy(ptr, returndatasize, calldatasize)\n', '            let result := delegatecall(gas, sload(position), ptr, calldatasize, returndatasize, returndatasize)\n', '            returndatacopy(ptr, 0, returndatasize)\n', '\n', '            switch result\n', '            case 0 { revert(ptr, returndatasize) }\n', '            default { return(ptr, returndatasize) }\n', '        }\n', '    }\n', '}']