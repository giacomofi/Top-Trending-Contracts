['/**\n', ' *Submitted for verification at Etherscan.io on 2019-07-11\n', '*/\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', '    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn&#39;t hold\n', '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '\tevent NewOwner(address indexed old, address indexed current);\n', '\n', '\taddress public owner = msg.sender;\n', '\n', '\tmodifier onlyOwner {\n', '\t\trequire(msg.sender == owner);\n', '\t\t_;\n', '\t}\n', '\n', '  constructor () internal {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\tfunction setOwner(address _new)\n', '\t\texternal\n', '\t\tonlyOwner\n', '\t{\n', '\t\temit NewOwner(owner, _new);\n', '\t\towner = _new;\n', '\t}\n', '}\n', '\n', '/**\n', ' * @title ERC20\n', ' * @dev ERC20 token interface\n', ' */\n', ' contract ERC20 {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    function totalSupply() public view returns (uint);\n', '    function balanceOf(address tokenOwner) public view returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', ' }\n', '\n', 'contract Faucet is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    /* --- EVENTS --- */\n', '\n', '    event TokenExchanged(address receiver, uint etherReceived, uint tokenSent);\n', '\n', '    /* --- FIELDS / CONSTANTS --- */\n', '\n', '    address public tokenAddress;\n', '    uint16 public exchangeRate; // ETH -> token exchange rate\n', '    uint public exchangeLimit; // Max amount of ether allowed to exchange\n', '\n', '    /* --- PUBLIC/EXTERNAL FUNCTIONS --- */\n', '\n', '    constructor(address _tokenAddress, uint16 _exchangeRate, uint _exchangeLimit) public {\n', '        tokenAddress = _tokenAddress;\n', '        exchangeRate = _exchangeRate;\n', '        exchangeLimit = _exchangeLimit;\n', '    }\n', '\n', '    function() public payable {\n', '        require(msg.value <= exchangeLimit);\n', '\n', '        uint transferAmount = msg.value.mul(exchangeRate);\n', '        require(ERC20(tokenAddress).transfer(msg.sender, transferAmount), "insufficient erc20 token balance");\n', '\n', '        emit TokenExchanged(msg.sender, msg.value, transferAmount);\n', '    }\n', '\n', '    function withdrawEther(uint amount) onlyOwner public {\n', '        owner.transfer(amount);\n', '    }\n', '\n', '    function withdrawToken(uint amount) onlyOwner public {\n', '        ERC20(tokenAddress).transfer(owner, amount);\n', '    }\n', '\n', '    function getTokenBalance() public view returns (uint) {\n', '        return ERC20(tokenAddress).balanceOf(this);\n', '    }\n', '\n', '    function getEtherBalance() public view returns (uint) {\n', '        return address(this).balance;\n', '    }\n', '\n', '    function updateExchangeRate(uint16 newExchangeRate) onlyOwner public {\n', '        exchangeRate = newExchangeRate;\n', '    }\n', '\n', '    function updateExchangeLimit(uint newExchangeLimit) onlyOwner public {\n', '        exchangeLimit = newExchangeLimit;\n', '    }\n', '}']