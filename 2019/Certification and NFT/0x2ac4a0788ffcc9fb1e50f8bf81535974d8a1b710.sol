['pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error.\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Multiplies two unsigned integers, reverts on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two unsigned integers, reverts on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '     * reverts when dividing by zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Secondary\n', ' * @dev A Secondary contract can only be used by its primary account (the one that created it)\n', ' */\n', 'contract Secondary {\n', '  address private _primary;\n', '\n', '  /**\n', '   * @dev Sets the primary account to the one that is creating the Secondary contract.\n', '   */\n', '  constructor() public {\n', '    _primary = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Reverts if called from any account other than the primary.\n', '   */\n', '  modifier onlyPrimary() {\n', '    require(msg.sender == _primary);\n', '    _;\n', '  }\n', '\n', '  function primary() public view returns (address) {\n', '    return _primary;\n', '  }\n', '\n', '  function transferPrimary(address recipient) public onlyPrimary {\n', '    require(recipient != address(0));\n', '\n', '    _primary = recipient;\n', '  }\n', '}\n', '\n', ' /**\n', '  * @title Escrow\n', '  * @dev Base escrow contract, holds funds designated for a payee until they\n', '  * withdraw them.\n', '  * @dev Intended usage: This contract (and derived escrow contracts) should be a\n', '  * standalone contract, that only interacts with the contract that instantiated\n', '  * it. That way, it is guaranteed that all Ether will be handled according to\n', '  * the Escrow rules, and there is no need to check for payable functions or\n', '  * transfers in the inheritance tree. The contract that uses the escrow as its\n', '  * payment method should be its primary, and provide public methods redirecting\n', "  * to the escrow's deposit and withdraw.\n", '  */\n', 'contract Escrow is Secondary {\n', '    using SafeMath for uint256;\n', '\n', '    event Deposited(address indexed payee, uint256 weiAmount);\n', '    event Withdrawn(address indexed payee, uint256 weiAmount);\n', '\n', '    mapping(address => uint256) private _deposits;\n', '\n', '    function depositsOf(address payee) public view returns (uint256) {\n', '        return _deposits[payee];\n', '    }\n', '\n', '    /**\n', '     * @dev Stores the sent amount as credit to be withdrawn.\n', '     * @param payee The destination address of the funds.\n', '     */\n', '    function deposit(address payee) public onlyPrimary payable {\n', '        uint256 amount = msg.value;\n', '        _deposits[payee] = _deposits[payee].add(amount);\n', '\n', '        emit Deposited(payee, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw accumulated balance for a payee.\n', '     * @param payee The address whose funds will be withdrawn and transferred to.\n', '     */\n', '    function withdraw(address payable payee) public onlyPrimary {\n', '        uint256 payment = _deposits[payee];\n', '\n', '        _deposits[payee] = 0;\n', '\n', '        payee.transfer(payment);\n', '\n', '        emit Withdrawn(payee, payment);\n', '    }\n', '}']