['pragma solidity ^0.5.8;\n', '\n', 'contract ERC20_Coin{\n', '    \n', '    string public name;//名称\n', '    string public symbol;//缩写\n', '    uint8 public decimals = 18;//精确的小数位数\n', '    uint256 public totalSupply;//总发行量\n', '    address internal admin;//管理员\n', '    mapping (address => uint256) public balanceOf;//客户群体\n', '    bool public isAct = true;//合约活动标记\n', '    bool public openRaise = false;//开启募集资金功能\n', '    uint256 public raisePrice = 0;//募集兑换比例\n', '    address payable internal finance;//财务管理\n', '    \n', '    //转账通知\n', '\tevent Transfer(address indexed from, address indexed to, uint256 value);\n', '\t//以太转出通知\n', '\tevent SendEth(address indexed to, uint256 value);\n', '    \n', '    constructor(\n', '        uint256 initialSupply,//发行量\n', '        string memory tokenName,//名称\n', '        string memory tokenSymbol//缩写\n', '     ) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);\n', '        balanceOf[msg.sender] = totalSupply;\n', '        name = tokenName;\n', '        symbol = tokenSymbol;\n', '        finance = msg.sender;\n', '        admin = msg.sender;\n', '    }\n', '\n', '    // 只有管理员能调用的\n', '    modifier onlyAdmin() { \n', '        require(msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    // 判断合约是否暂停服务\n', '    modifier isActivity() { \n', '        require(isAct);\n', '        _;\n', '    }\n', '\n', '    // 是否处于募集资金状态\n', '    modifier isOpenRaise() { \n', '        require(openRaise);\n', '        _;\n', '    }\n', '\n', '    //只有在活动中并且开启了募集标记才会接收ETH\n', '    function () external payable isActivity isOpenRaise{\n', '\t\trequire(raisePrice >= 0);\n', '\t\tuint256 buyNum = msg.value /10000 * raisePrice;\n', '\t\trequire(buyNum <= balanceOf[finance]);\n', '\t\tbalanceOf[finance] -= buyNum;\n', '\t\tbalanceOf[msg.sender] += buyNum;\n', '        finance.transfer(msg.value);\n', '        emit SendEth(finance, msg.value);\n', '        emit Transfer(finance, msg.sender, buyNum);\n', '\t}\n', '    \n', '    //普通的转账功能，只判断活动状态\n', '    //可以在各种第三方钱包调用，如：imtoken、MetaMask\n', '    function transfer(address _to, uint256 _value) public isActivity{\n', '\t    _transfer(msg.sender, _to, _value);\n', '    }\n', '    \n', '    //出纳转账，批量操作\n', '    function transferList(address[] memory _tos, uint[] memory _values) public isActivity {\n', '        require(_tos.length == _values.length);\n', '        uint256 _total = 0;\n', '        for(uint256 i;i<_values.length;i++){\n', '            _total += _values[i];\n', '\t    }\n', '        require(balanceOf[msg.sender]>=_total);\n', '        for(uint256 i;i<_tos.length;i++){\n', '            _transfer(msg.sender,_tos[i],_values[i]);\n', '\t    }\n', '    }\n', '    \n', '    //内部转账封装\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != address(0));\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\t\n', '    //设置募集资金的兑换比例\n', '\tfunction setRaisePrice(uint256 _price)public onlyAdmin{\n', '\t\traisePrice = _price;\n', '\t}\n', '\t\n', '    //开启募集通道，做预留，默认都是关闭的\n', '\tfunction setOpenRaise(bool _open) public onlyAdmin{\n', '\t    openRaise = _open;\n', '\t}\n', '\t\n', '    //设置活动状态，处理应急状况\n', '\tfunction setActivity(bool _isAct) public onlyAdmin{\n', '\t\tisAct = _isAct;\n', '\t}\n', '\t\n', '    //转让管理员权限\n', '\tfunction setAdmin(address _address) public onlyAdmin{\n', '       admin = _address;\n', '    }\n', '    \n', '    //设置资金管理员\n', '    function setMagage(address payable _address) public onlyAdmin{\n', '       finance = _address;\n', '    }\n', '\t\n', '    //销毁合约\n', '\tfunction killYourself()public onlyAdmin{\n', '\t\tselfdestruct(finance);\n', '\t}\n', '\t\n', '}']