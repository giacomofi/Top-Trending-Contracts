['pragma solidity 0.4.25;\n', '\n', '// File: contracts\\lib\\Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "only owner is able call this function");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * @notice Renouncing to ownership will leave the contract without an owner.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts\\lib\\Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool private _paused;\n', '\n', '    constructor () internal {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @return true if the contract is paused, false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "must not be paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused, "must be paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() public onlyOwner whenNotPaused {\n', '        _paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() onlyOwner whenPaused public {\n', '        _paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', '// File: contracts\\lib\\SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts\\lib\\Crowdsale.sol\n', '\n', '/**\n', ' * @title Crowdsale - modified from zeppelin-solidity library\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale {\n', '    // start and end timestamps where investments are allowed (both inclusive)\n', '    uint256 public startTime;\n', '    uint256 public endTime;\n', '\n', '    // how many token units a buyer gets per wei\n', '    uint256 public rate;\n', '\n', '    // amount of raised money in wei\n', '    uint256 public weiRaised;\n', '\n', '\n', '    // event for token purchase logging\n', '    // purchaser who paid for the tokens\n', '    // beneficiary who got the tokens\n', '    // value weis paid for purchase\n', '    // amount amount of tokens purchased\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    function initCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate) public {\n', '        require(\n', '            startTime == 0 && endTime == 0 && rate == 0,\n', '            "Global variables must be empty when initializing crowdsale!"\n', '        );\n', '        require(_startTime >= now, "_startTime must be more than current time!");\n', '        require(_endTime >= _startTime, "_endTime must be more than _startTime!");\n', '\n', '        startTime = _startTime;\n', '        endTime = _endTime;\n', '        rate = _rate;\n', '    }\n', '\n', '    // @return true if crowdsale event has ended\n', '    function hasEnded() public view returns (bool) {\n', '        return now > endTime;\n', '    }\n', '}\n', '\n', '// File: contracts\\lib\\FinalizableCrowdsale.sol\n', '\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of Crowdsale where an owner can do extra work\n', ' * after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is Crowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', '   * work. Calls the contract&#39;s finalization function.\n', '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasEnded());\n', '\n', '    finalization();\n', '    emit Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '}\n', '\n', '// File: contracts\\lib\\ERC20Plus.sol\n', '\n', '/**\n', ' * @title ERC20 interface with additional functions\n', ' * @dev it has added functions that deals to minting, pausing token and token information\n', ' */\n', 'contract ERC20Plus {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // additonal functions\n', '    function mint(address _to, uint256 _amount) public returns (bool);\n', '    function owner() public view returns (address);\n', '    function transferOwnership(address newOwner) public;\n', '    function name() public view returns (string);\n', '    function symbol() public view returns (string);\n', '    function decimals() public view returns (uint8);\n', '    function paused() public view returns (bool);\n', '\n', '}\n', '\n', '// File: contracts\\Whitelist.sol\n', '\n', '/**\n', ' * @title Whitelist - crowdsale whitelist contract\n', ' * @author Gustavo Guimaraes - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="d3b4a6a0a7b2a5bc93a0a7b2a1b1b2a0b6fdb0bc">[email&#160;protected]</a>>\n', ' */\n', 'contract Whitelist is Ownable {\n', '    mapping(address => bool) public allowedAddresses;\n', '\n', '    event WhitelistUpdated(uint256 timestamp, string operation, address indexed member);\n', '\n', '    /**\n', '    * @dev Adds single address to whitelist.\n', '    * @param _address Address to be added to the whitelist\n', '    */\n', '    function addToWhitelist(address _address) external onlyOwner {\n', '        allowedAddresses[_address] = true;\n', '        emit WhitelistUpdated(now, "Added", _address);\n', '    }\n', '\n', '    /**\n', '     * @dev add various whitelist addresses\n', '     * @param _addresses Array of ethereum addresses\n', '     */\n', '    function addManyToWhitelist(address[] _addresses) external onlyOwner {\n', '        for (uint256 i = 0; i < _addresses.length; i++) {\n', '            allowedAddresses[_addresses[i]] = true;\n', '            emit WhitelistUpdated(now, "Added", _addresses[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev remove whitelist addresses\n', '     * @param _addresses Array of ethereum addresses\n', '     */\n', '    function removeManyFromWhitelist(address[] _addresses) public onlyOwner {\n', '        for (uint256 i = 0; i < _addresses.length; i++) {\n', '            allowedAddresses[_addresses[i]] = false;\n', '            emit WhitelistUpdated(now, "Removed", _addresses[i]);\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts\\TokenSaleInterface.sol\n', '\n', '/**\n', ' * @title TokenSale contract interface\n', ' */\n', 'interface TokenSaleInterface {\n', '    function init\n', '    (\n', '        uint256 _startTime,\n', '        uint256 _endTime,\n', '        address _whitelist,\n', '        address _starToken,\n', '        address _companyToken,\n', '        address _tokenOwnerAfterSale,\n', '        uint256 _rate,\n', '        uint256 _starRate,\n', '        address _wallet,\n', '        uint256 _softCap,\n', '        uint256 _crowdsaleCap,\n', '        bool    _isWeiAccepted,\n', '        bool    _isMinting\n', '    )\n', '    external;\n', '}\n', '\n', '// File: contracts\\FundsSplitterInterface.sol\n', '\n', 'contract FundsSplitterInterface {\n', '    function splitFunds() public payable;\n', '    function splitStarFunds() public;\n', '}\n', '\n', '// File: contracts\\TokenSale.sol\n', '\n', '/**\n', ' * @title Token Sale contract - crowdsale of company tokens.\n', ' * @author Gustavo Guimaraes - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="a8cfdddbdcc9dec7e8dbdcc9dacac9dbcd86cbc7">[email&#160;protected]</a>>\n', ' */\n', 'contract TokenSale is FinalizableCrowdsale, Pausable {\n', '    uint256 public softCap;\n', '    uint256 public crowdsaleCap;\n', '    uint256 public tokensSold;\n', '    // amount of raised money in STAR\n', '    uint256 public starRaised;\n', '    uint256 public starRate;\n', '    address public tokenOwnerAfterSale;\n', '    bool public isWeiAccepted;\n', '    bool public isMinting;\n', '\n', '    // external contracts\n', '    Whitelist public whitelist;\n', '    ERC20Plus public starToken;\n', '    FundsSplitterInterface public wallet;\n', '\n', '    // The token being sold\n', '    ERC20Plus public tokenOnSale;\n', '\n', '    event TokenRateChanged(uint256 previousRate, uint256 newRate);\n', '    event TokenStarRateChanged(uint256 previousStarRate, uint256 newStarRate);\n', '    event TokenPurchaseWithStar(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    /**\n', '     * @dev initialization function\n', '     * @param _startTime The timestamp of the beginning of the crowdsale\n', '     * @param _endTime Timestamp when the crowdsale will finish\n', '     * @param _whitelist contract containing the whitelisted addresses\n', '     * @param _starToken STAR token contract address\n', '     * @param _companyToken ERC20 contract address that has minting capabilities\n', '     * @param _rate The token rate per ETH\n', '     * @param _starRate The token rate per STAR\n', '     * @param _wallet FundsSplitter wallet that redirects funds to client and Starbase.\n', '     * @param _softCap Soft cap of the token sale\n', '     * @param _crowdsaleCap Cap for the token sale\n', '     * @param _isWeiAccepted Bool for acceptance of ether in token sale\n', '     * @param _isMinting Bool that indicates whether token sale mints ERC20 tokens on sale or simply transfers them\n', '     */\n', '    function init(\n', '        uint256 _startTime,\n', '        uint256 _endTime,\n', '        address _whitelist,\n', '        address _starToken,\n', '        address _companyToken,\n', '        address _tokenOwnerAfterSale,\n', '        uint256 _rate,\n', '        uint256 _starRate,\n', '        address _wallet,\n', '        uint256 _softCap,\n', '        uint256 _crowdsaleCap,\n', '        bool    _isWeiAccepted,\n', '        bool    _isMinting\n', '    )\n', '        external\n', '    {\n', '        require(\n', '            whitelist == address(0) &&\n', '            starToken == address(0) &&\n', '            tokenOwnerAfterSale == address(0) &&\n', '            rate == 0 &&\n', '            starRate == 0 &&\n', '            tokenOnSale == address(0) &&\n', '            softCap == 0 &&\n', '            crowdsaleCap == 0 &&\n', '            wallet == address(0),\n', '            "Global variables should not have been set before!"\n', '        );\n', '\n', '        require(\n', '            _whitelist != address(0) &&\n', '            _starToken != address(0) &&\n', '            !(_rate == 0 && _starRate == 0) &&\n', '            _companyToken != address(0) &&\n', '            _softCap != 0 &&\n', '            _crowdsaleCap != 0 &&\n', '            _wallet != 0,\n', '            "Parameter variables cannot be empty!"\n', '        );\n', '\n', '        require(_softCap < _crowdsaleCap, "SoftCap should be smaller than crowdsaleCap!");\n', '\n', '        if (_isWeiAccepted) {\n', '            require(_rate > 0, "Set a rate for Wei, when it is accepted for purchases!");\n', '        } else {\n', '            require(_rate == 0, "Only set a rate for Wei, when it is accepted for purchases!");\n', '        }\n', '\n', '        initCrowdsale(_startTime, _endTime, _rate);\n', '        tokenOnSale = ERC20Plus(_companyToken);\n', '        whitelist = Whitelist(_whitelist);\n', '        starToken = ERC20Plus(_starToken);\n', '        wallet = FundsSplitterInterface(_wallet);\n', '        tokenOwnerAfterSale = _tokenOwnerAfterSale;\n', '        starRate = _starRate;\n', '        isWeiAccepted = _isWeiAccepted;\n', '        isMinting = _isMinting;\n', '        _owner = tx.origin;\n', '\n', '        softCap = _softCap.mul(10 ** 18);\n', '        crowdsaleCap = _crowdsaleCap.mul(10 ** 18);\n', '\n', '        if (isMinting) {\n', '            require(tokenOwnerAfterSale != address(0), "TokenOwnerAftersale cannot be empty when minting tokens!");\n', '            require(ERC20Plus(tokenOnSale).paused(), "Company token must be paused upon initialization!");\n', '        } else {\n', '            require(tokenOwnerAfterSale == address(0), "TokenOwnerAftersale must be empty when minting tokens!");\n', '        }\n', '\n', '        require(ERC20Plus(tokenOnSale).decimals() == 18, "Only sales for tokens with 18 decimals are supported!");\n', '    }\n', '\n', '    modifier isWhitelisted(address beneficiary) {\n', '        require(whitelist.allowedAddresses(beneficiary), "Beneficiary not whitelisted!");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev override fallback function. cannot use it\n', '     */\n', '    function () external payable {\n', '        revert("No fallback function defined!");\n', '    }\n', '\n', '    /**\n', '     * @dev change crowdsale ETH rate\n', '     * @param newRate Figure that corresponds to the new ETH rate per token\n', '     */\n', '    function setRate(uint256 newRate) external onlyOwner {\n', '        require(isWeiAccepted, "Sale must allow Wei for purchases to set a rate for Wei!");\n', '        require(newRate != 0, "ETH rate must be more than 0!");\n', '\n', '        emit TokenRateChanged(rate, newRate);\n', '        rate = newRate;\n', '    }\n', '\n', '    /**\n', '     * @dev change crowdsale STAR rate\n', '     * @param newStarRate Figure that corresponds to the new STAR rate per token\n', '     */\n', '    function setStarRate(uint256 newStarRate) external onlyOwner {\n', '        require(newStarRate != 0, "Star rate must be more than 0!");\n', '\n', '        emit TokenStarRateChanged(starRate, newStarRate);\n', '        starRate = newStarRate;\n', '    }\n', '\n', '    /**\n', '     * @dev allows sale to receive wei or not\n', '     */\n', '    function setIsWeiAccepted(bool _isWeiAccepted, uint256 _rate) external onlyOwner {\n', '        if (_isWeiAccepted) {\n', '            require(_rate > 0, "When accepting Wei, you need to set a conversion rate!");\n', '        } else {\n', '            require(_rate == 0, "When not accepting Wei, you need to set a conversion rate of 0!");\n', '        }\n', '\n', '        isWeiAccepted = _isWeiAccepted;\n', '        rate = _rate;\n', '    }\n', '\n', '    /**\n', '     * @dev function that allows token purchases with STAR or ETH\n', '     * @param beneficiary Address of the purchaser\n', '     */\n', '    function buyTokens(address beneficiary)\n', '        public\n', '        payable\n', '        whenNotPaused\n', '        isWhitelisted(beneficiary)\n', '    {\n', '        require(beneficiary != address(0));\n', '        require(validPurchase() && tokensSold < crowdsaleCap);\n', '        if (isMinting) {\n', '            require(tokenOnSale.owner() == address(this), "The token owner must be contract address!");\n', '        }\n', '\n', '        if (!isWeiAccepted) {\n', '            require(msg.value == 0);\n', '        } else if (msg.value > 0) {\n', '            buyTokensWithWei(beneficiary);\n', '        }\n', '\n', '        // beneficiary must allow TokenSale address to transfer star tokens on its behalf\n', '        uint256 starAllocationToTokenSale = starToken.allowance(beneficiary, this);\n', '        if (starAllocationToTokenSale > 0) {\n', '            // calculate token amount to be created\n', '            uint256 tokens = starAllocationToTokenSale.mul(starRate);\n', '\n', '            // remainder logic\n', '            if (tokensSold.add(tokens) > crowdsaleCap) {\n', '                tokens = crowdsaleCap.sub(tokensSold);\n', '\n', '                starAllocationToTokenSale = tokens.div(starRate);\n', '            }\n', '\n', '            // update state\n', '            starRaised = starRaised.add(starAllocationToTokenSale);\n', '\n', '            tokensSold = tokensSold.add(tokens);\n', '            sendPurchasedTokens(beneficiary, tokens);\n', '            emit TokenPurchaseWithStar(msg.sender, beneficiary, starAllocationToTokenSale, tokens);\n', '\n', '            // forward funds\n', '            starToken.transferFrom(beneficiary, wallet, starAllocationToTokenSale);\n', '            wallet.splitStarFunds();\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev function that allows token purchases with Wei\n', '     * @param beneficiary Address of the purchaser\n', '     */\n', '    function buyTokensWithWei(address beneficiary)\n', '        internal\n', '    {\n', '        uint256 weiAmount = msg.value;\n', '        uint256 weiRefund = 0;\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = weiAmount.mul(rate);\n', '\n', '        // remainder logic\n', '        if (tokensSold.add(tokens) > crowdsaleCap) {\n', '            tokens = crowdsaleCap.sub(tokensSold);\n', '            weiAmount = tokens.div(rate);\n', '\n', '            weiRefund = msg.value.sub(weiAmount);\n', '        }\n', '\n', '        // update state\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        tokensSold = tokensSold.add(tokens);\n', '        sendPurchasedTokens(beneficiary, tokens);\n', '        emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '        address(wallet).transfer(weiAmount);\n', '        wallet.splitFunds();\n', '\n', '        if (weiRefund > 0) {\n', '            msg.sender.transfer(weiRefund);\n', '        }\n', '    }\n', '\n', '    // isMinting checker -- it either mints ERC20 token or transfers them\n', '    function sendPurchasedTokens(address _beneficiary, uint256 _tokens) internal {\n', '        isMinting ? tokenOnSale.mint(_beneficiary, _tokens) : tokenOnSale.transfer(_beneficiary, _tokens);\n', '    }\n', '\n', '    // check for softCap achievement\n', '    // @return true when softCap is reached\n', '    function hasReachedSoftCap() public view returns (bool) {\n', '        if (tokensSold >= softCap) {\n', '            return true;\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    // override Crowdsale#hasEnded to add cap logic\n', '    // @return true if crowdsale event has ended\n', '    function hasEnded() public view returns (bool) {\n', '        if (tokensSold >= crowdsaleCap) {\n', '            return true;\n', '        }\n', '\n', '        return super.hasEnded();\n', '    }\n', '\n', '    /**\n', '     * @dev override Crowdsale#validPurchase\n', '     * @return true if the transaction can buy tokens\n', '     */\n', '    function validPurchase() internal view returns (bool) {\n', '        return now >= startTime && now <= endTime;\n', '    }\n', '\n', '    /**\n', '     * @dev finalizes crowdsale\n', '     */\n', '    function finalization() internal {\n', '        uint256 remainingTokens = isMinting ? crowdsaleCap.sub(tokensSold) : tokenOnSale.balanceOf(address(this));\n', '\n', '        if (remainingTokens > 0) {\n', '            sendPurchasedTokens(wallet, remainingTokens);\n', '        }\n', '\n', '        if (isMinting) tokenOnSale.transferOwnership(tokenOwnerAfterSale);\n', '\n', '        super.finalization();\n', '    }\n', '}']