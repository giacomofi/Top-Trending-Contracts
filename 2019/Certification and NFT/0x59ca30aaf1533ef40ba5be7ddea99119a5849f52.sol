['pragma solidity ^0.4.24;\n', '\n', '// File: node_modules\\zeppelin-solidity\\contracts\\math\\SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\SafeERC20.sol\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    require(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    require(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '// File: node_modules\\zeppelin-solidity\\contracts\\crowdsale\\Crowdsale.sol\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether. This contract implements\n', ' * such functionality in its most fundamental form and can be extended to provide additional\n', ' * functionality and/or custom behavior.\n', ' * The external interface represents the basic interface for purchasing tokens, and conform\n', ' * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\n', ' * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n', " * the methods to add functionality. Consider using 'super' where appropiate to concatenate\n", ' * behavior.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for ERC20;\n', '\n', '  // The token being sold\n', '  ERC20 public token;\n', '\n', '  // Address where funds are collected\n', '  address public wallet;\n', '\n', '  // How many token units a buyer gets per wei.\n', '  // The rate is the conversion between wei and the smallest and indivisible token unit.\n', '  // So, if you are using a rate of 1 with a DetailedERC20 token with 3 decimals called TOK\n', '  // 1 wei will give you 1 unit, or 0.001 TOK.\n', '  uint256 public rate;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(\n', '    address indexed purchaser,\n', '    address indexed beneficiary,\n', '    uint256 value,\n', '    uint256 amount\n', '  );\n', '\n', '  /**\n', '   * @param _rate Number of token units a buyer gets per wei\n', '   * @param _wallet Address where collected funds will be forwarded to\n', '   * @param _token Address of the token being sold\n', '   */\n', '  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    token = _token;\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function buyTokens(address _beneficiary) public payable {\n', '\n', '    uint256 weiAmount = msg.value;\n', '    _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    _processPurchase(_beneficiary, tokens);\n', '    emit TokenPurchase(\n', '      msg.sender,\n', '      _beneficiary,\n', '      weiAmount,\n', '      tokens\n', '    );\n', '\n', '    _updatePurchasingState(_beneficiary, weiAmount);\n', '\n', '    _forwardFunds();\n', '    _postValidatePurchase(_beneficiary, weiAmount);\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _preValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    require(_beneficiary != address(0));\n', '    require(_weiAmount != 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _postValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _tokenAmount Number of tokens to be emitted\n', '   */\n', '  function _deliverTokens(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    token.safeTransfer(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _tokenAmount Number of tokens to be purchased\n', '   */\n', '  function _processPurchase(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    _deliverTokens(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _updatePurchasingState(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 _weiAmount)\n', '    internal view returns (uint256)\n', '  {\n', '    return _weiAmount.mul(rate);\n', '  }\n', '\n', '  /**\n', '   * @dev Determines how ETH is stored/forwarded on purchases.\n', '   */\n', '  function _forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '}\n', '\n', '// File: node_modules\\zeppelin-solidity\\contracts\\ownership\\Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: node_modules\\zeppelin-solidity\\contracts\\crowdsale\\validation\\TimedCrowdsale.sol\n', '\n', '/**\n', ' * @title TimedCrowdsale\n', ' * @dev Crowdsale accepting contributions only within a time frame.\n', ' */\n', 'contract TimedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public openingTime;\n', '  uint256 public closingTime;\n', '\n', '  /**\n', '   * @dev Reverts if not in crowdsale time range.\n', '   */\n', '  modifier onlyWhileOpen {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Constructor, takes crowdsale opening and closing times.\n', '   * @param _openingTime Crowdsale opening time\n', '   * @param _closingTime Crowdsale closing time\n', '   */\n', '  constructor(uint256 _openingTime, uint256 _closingTime) public {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(_openingTime >= block.timestamp);\n', '    require(_closingTime >= _openingTime);\n', '\n', '    openingTime = _openingTime;\n', '    closingTime = _closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '   * @return Whether crowdsale period has elapsed\n', '   */\n', '  function hasClosed() public view returns (bool) {\n', '    // solium-disable-next-line security/no-block-members\n', '    return block.timestamp > closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring to be within contributing period\n', '   * @param _beneficiary Token purchaser\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '    onlyWhileOpen\n', '  {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}\n', '\n', '// File: node_modules\\zeppelin-solidity\\contracts\\crowdsale\\distribution\\FinalizableCrowdsale.sol\n', '\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of Crowdsale where an owner can do extra work\n', ' * after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is TimedCrowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', "   * work. Calls the contract's finalization function.\n", '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasClosed());\n', '\n', '    finalization();\n', '    emit Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '\n', '}\n', '\n', '// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier hasMintPermission() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    hasMintPermission\n', '    canMint\n', '    public\n', '    returns (bool)\n', '  {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: node_modules\\zeppelin-solidity\\contracts\\crowdsale\\emission\\MintedCrowdsale.sol\n', '\n', '/**\n', ' * @title MintedCrowdsale\n', ' * @dev Extension of Crowdsale contract whose tokens are minted in each purchase.\n', ' * Token ownership should be transferred to MintedCrowdsale for minting.\n', ' */\n', 'contract MintedCrowdsale is Crowdsale {\n', '\n', '  /**\n', '   * @dev Overrides delivery by minting tokens upon purchase.\n', '   * @param _beneficiary Token purchaser\n', '   * @param _tokenAmount Number of tokens to be minted\n', '   */\n', '  function _deliverTokens(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    require(MintableToken(token).mint(_beneficiary, _tokenAmount));\n', '  }\n', '}\n', '\n', '// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\CappedToken.sol\n', '\n', '/**\n', ' * @title Capped token\n', ' * @dev Mintable token with a token cap.\n', ' */\n', 'contract CappedToken is MintableToken {\n', '\n', '  uint256 public cap;\n', '\n', '  constructor(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(totalSupply_.add(_amount) <= cap);\n', '\n', '    return super.mint(_to, _amount);\n', '  }\n', '\n', '}\n', '\n', '// File: node_modules\\zeppelin-solidity\\contracts\\math\\Math.sol\n', '\n', '/**\n', ' * @title Math\n', ' * @dev Assorted math operations\n', ' */\n', 'library Math {\n', '  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', '// File: node_modules\\zeppelin-solidity\\contracts\\payment\\Escrow.sol\n', '\n', '/**\n', ' * @title Escrow\n', ' * @dev Base escrow contract, holds funds destinated to a payee until they\n', ' * withdraw them. The contract that uses the escrow as its payment method\n', " * should be its owner, and provide public methods redirecting to the escrow's\n", ' * deposit and withdraw.\n', ' */\n', 'contract Escrow is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  event Deposited(address indexed payee, uint256 weiAmount);\n', '  event Withdrawn(address indexed payee, uint256 weiAmount);\n', '\n', '  mapping(address => uint256) private deposits;\n', '\n', '  function depositsOf(address _payee) public view returns (uint256) {\n', '    return deposits[_payee];\n', '  }\n', '\n', '  /**\n', '  * @dev Stores the sent amount as credit to be withdrawn.\n', '  * @param _payee The destination address of the funds.\n', '  */\n', '  function deposit(address _payee) public onlyOwner payable {\n', '    uint256 amount = msg.value;\n', '    deposits[_payee] = deposits[_payee].add(amount);\n', '\n', '    emit Deposited(_payee, amount);\n', '  }\n', '\n', '  /**\n', '  * @dev Withdraw accumulated balance for a payee.\n', '  * @param _payee The address whose funds will be withdrawn and transferred to.\n', '  */\n', '  function withdraw(address _payee) public onlyOwner {\n', '    uint256 payment = deposits[_payee];\n', '    assert(address(this).balance >= payment);\n', '\n', '    deposits[_payee] = 0;\n', '\n', '    _payee.transfer(payment);\n', '\n', '    emit Withdrawn(_payee, payment);\n', '  }\n', '}\n', '\n', '// File: node_modules\\zeppelin-solidity\\contracts\\payment\\ConditionalEscrow.sol\n', '\n', '/**\n', ' * @title ConditionalEscrow\n', ' * @dev Base abstract escrow to only allow withdrawal if a condition is met.\n', ' */\n', 'contract ConditionalEscrow is Escrow {\n', '  /**\n', '  * @dev Returns whether an address is allowed to withdraw their funds. To be\n', '  * implemented by derived contracts.\n', '  * @param _payee The destination address of the funds.\n', '  */\n', '  function withdrawalAllowed(address _payee) public view returns (bool);\n', '\n', '  function withdraw(address _payee) public {\n', '    require(withdrawalAllowed(_payee));\n', '    super.withdraw(_payee);\n', '  }\n', '}\n', '\n', '// File: node_modules\\zeppelin-solidity\\contracts\\payment\\RefundEscrow.sol\n', '\n', '/**\n', ' * @title RefundEscrow\n', ' * @dev Escrow that holds funds for a beneficiary, deposited from multiple parties.\n', ' * The contract owner may close the deposit period, and allow for either withdrawal\n', ' * by the beneficiary, or refunds to the depositors.\n', ' */\n', 'contract RefundEscrow is Ownable, ConditionalEscrow {\n', '  enum State { Active, Refunding, Closed }\n', '\n', '  event Closed();\n', '  event RefundsEnabled();\n', '\n', '  State public state;\n', '  address public beneficiary;\n', '\n', '  /**\n', '   * @dev Constructor.\n', '   * @param _beneficiary The beneficiary of the deposits.\n', '   */\n', '  constructor(address _beneficiary) public {\n', '    require(_beneficiary != address(0));\n', '    beneficiary = _beneficiary;\n', '    state = State.Active;\n', '  }\n', '\n', '  /**\n', '   * @dev Stores funds that may later be refunded.\n', '   * @param _refundee The address funds will be sent to if a refund occurs.\n', '   */\n', '  function deposit(address _refundee) public payable {\n', '    require(state == State.Active);\n', '    super.deposit(_refundee);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows for the beneficiary to withdraw their funds, rejecting\n', '   * further deposits.\n', '   */\n', '  function close() public onlyOwner {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    emit Closed();\n', '  }\n', '\n', '  /**\n', '   * @dev Allows for refunds to take place, rejecting further deposits.\n', '   */\n', '  function enableRefunds() public onlyOwner {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    emit RefundsEnabled();\n', '  }\n', '\n', '  /**\n', "   * @dev Withdraws the beneficiary's funds.\n", '   */\n', '  function beneficiaryWithdraw() public {\n', '    require(state == State.Closed);\n', '    beneficiary.transfer(address(this).balance);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns whether refundees can withdraw their deposits (be refunded).\n', '   */\n', '  function withdrawalAllowed(address _payee) public view returns (bool) {\n', '    return state == State.Refunding;\n', '  }\n', '}\n', '\n', '// File: contracts\\ClinicAllRefundEscrow.sol\n', '\n', '/**\n', ' * @title ClinicAllRefundEscrow\n', ' * @dev Escrow that holds funds for a beneficiary, deposited from multiple parties.\n', ' * The contract owner may close the deposit period, and allow for either withdrawal\n', ' * by the beneficiary, or refunds to the depositors.\n', ' */\n', 'contract ClinicAllRefundEscrow is RefundEscrow {\n', '  using Math for uint256;\n', '\n', '  struct RefundeeRecord {\n', '    bool isRefunded;\n', '    uint256 index;\n', '  }\n', '\n', '  mapping(address => RefundeeRecord) public refundees;\n', '  address[] public refundeesList;\n', '\n', '  event Deposited(address indexed payee, uint256 weiAmount);\n', '  event Withdrawn(address indexed payee, uint256 weiAmount);\n', '\n', '  mapping(address => uint256) public deposits;\n', '  mapping(address => uint256) public beneficiaryDeposits;\n', '\n', '  // Amount of wei deposited by beneficiary\n', '  uint256 public beneficiaryDepositedAmount;\n', '\n', '  // Amount of wei deposited by investors to CrowdSale\n', '  uint256 public investorsDepositedToCrowdSaleAmount;\n', '\n', '  /**\n', '   * @dev Constructor.\n', '   * @param _beneficiary The beneficiary of the deposits.\n', '   */\n', '  constructor(address _beneficiary)\n', '  RefundEscrow(_beneficiary)\n', '  public {\n', '  }\n', '\n', '  function depositsOf(address _payee) public view returns (uint256) {\n', '    return deposits[_payee];\n', '  }\n', '\n', '  function beneficiaryDepositsOf(address _payee) public view returns (uint256) {\n', '    return beneficiaryDeposits[_payee];\n', '  }\n', '\n', '  /**\n', '   * Internal. Is being user by parent classes, just for keeping the interface.\n', '   * @dev Stores funds that may later be refunded.\n', '   * @param _refundee The address funds will be sent to if a refund occurs.\n', '   */\n', '  function deposit(address _refundee) public payable {\n', '    uint256 amount = msg.value;\n', '    beneficiaryDeposits[_refundee] = beneficiaryDeposits[_refundee].add(amount);\n', '    beneficiaryDepositedAmount = beneficiaryDepositedAmount.add(amount);\n', '  }\n', '\n', '  /**\n', ' * @dev Stores funds that may later be refunded.\n', ' * @param _refundee The address funds will be sent to if a refund occurs.\n', ' * @param _value The amount of funds will be sent to if a refund occurs.\n', ' */\n', '  function depositFunds(address _refundee, uint256 _value) public onlyOwner {\n', '    require(state == State.Active, "Funds deposition is possible only in the Active state.");\n', '\n', '    uint256 amount = _value;\n', '    deposits[_refundee] = deposits[_refundee].add(amount);\n', '    investorsDepositedToCrowdSaleAmount = investorsDepositedToCrowdSaleAmount.add(amount);\n', '\n', '    emit Deposited(_refundee, amount);\n', '\n', '    RefundeeRecord storage _data = refundees[_refundee];\n', '    _data.isRefunded = false;\n', '\n', '    if (_data.index == uint256(0)) {\n', '      refundeesList.push(_refundee);\n', '      _data.index = refundeesList.length.sub(1);\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev Allows for the beneficiary to withdraw their funds, rejecting\n', '  * further deposits.\n', '  */\n', '  function close() public onlyOwner {\n', '    super.close();\n', '  }\n', '\n', '  function withdraw(address _payee) public onlyOwner {\n', '    require(state == State.Refunding, "Funds withdrawal is possible only in the Refunding state.");\n', '    require(depositsOf(_payee) > 0, "An investor should have non-negative deposit for withdrawal.");\n', '\n', '    RefundeeRecord storage _data = refundees[_payee];\n', '    require(_data.isRefunded == false, "An investor should not be refunded.");\n', '\n', '    uint256 payment = deposits[_payee];\n', '    assert(address(this).balance >= payment);\n', '\n', '    deposits[_payee] = 0;\n', '\n', '    investorsDepositedToCrowdSaleAmount = investorsDepositedToCrowdSaleAmount.sub(payment);\n', '\n', '    _payee.transfer(payment);\n', '\n', '    emit Withdrawn(_payee, payment);\n', '\n', '    _data.isRefunded = true;\n', '\n', '    removeRefundeeByIndex(_data.index);\n', '  }\n', '\n', '  /**\n', '  @dev Owner can do manual refund here if investore has "BAD" money\n', '  @param _payee address of investor that needs to refund with next manual ETH sending\n', '  */\n', '  function manualRefund(address _payee) public onlyOwner {\n', '    uint256 payment = deposits[_payee];\n', '    RefundeeRecord storage _data = refundees[_payee];\n', '\n', '    investorsDepositedToCrowdSaleAmount = investorsDepositedToCrowdSaleAmount.sub(payment);\n', '    deposits[_payee] = 0;\n', '    _data.isRefunded = true;\n', '\n', '    removeRefundeeByIndex(_data.index);\n', '  }\n', '\n', '  /**\n', '  * @dev Remove refundee referenced index from the internal list\n', '  * @param _indexToDelete An index in an array for deletion\n', '  */\n', '  function removeRefundeeByIndex(uint256 _indexToDelete) private {\n', '    if ((refundeesList.length > 0) && (_indexToDelete < refundeesList.length)) {\n', '      uint256 _lastIndex = refundeesList.length.sub(1);\n', '      refundeesList[_indexToDelete] = refundeesList[_lastIndex];\n', '      refundeesList.length--;\n', '    }\n', '  }\n', '  /**\n', '  * @dev Get refundee list length\n', '  */\n', '  function refundeesListLength() public onlyOwner view returns (uint256) {\n', '    return refundeesList.length;\n', '  }\n', '\n', '  /**\n', '  * @dev Auto refund\n', '  * @param _txFee The cost of executing refund code\n', '  */\n', '  function withdrawChunk(uint256 _txFee, uint256 _chunkLength) public onlyOwner returns (uint256, address[]) {\n', '    require(state == State.Refunding, "Funds withdrawal is possible only in the Refunding state.");\n', '\n', '    uint256 _refundeesCount = refundeesList.length;\n', '    require(_chunkLength >= _refundeesCount);\n', '    require(_txFee > 0, "Transaction fee should be above zero.");\n', '    require(_refundeesCount > 0, "List of investors should not be empty.");\n', '    uint256 _weiRefunded = 0;\n', '    require(address(this).balance > (_chunkLength.mul(_txFee)), "Account\'s ballance should allow to pay all tx fees.");\n', '    address[] memory _refundeesListCopy = new address[](_chunkLength);\n', '\n', '    uint256 i;\n', '    for (i = 0; i < _chunkLength; i++) {\n', '      address _refundee = refundeesList[i];\n', '      RefundeeRecord storage _data = refundees[_refundee];\n', '      if (_data.isRefunded == false) {\n', '        if (depositsOf(_refundee) > _txFee) {\n', '          uint256 _deposit = depositsOf(_refundee);\n', '          if (_deposit > _txFee) {\n', '            _weiRefunded = _weiRefunded.add(_deposit);\n', '            uint256 _paymentWithoutTxFee = _deposit.sub(_txFee);\n', '            _refundee.transfer(_paymentWithoutTxFee);\n', '            emit Withdrawn(_refundee, _paymentWithoutTxFee);\n', '            _data.isRefunded = true;\n', '            _refundeesListCopy[i] = _refundee;\n', '          }\n', '        }\n', '      }\n', '    }\n', '\n', '    for (i = 0; i < _chunkLength; i++) {\n', '      if (address(0) != _refundeesListCopy[i]) {\n', '        RefundeeRecord storage _dataCleanup = refundees[_refundeesListCopy[i]];\n', '        require(_dataCleanup.isRefunded == true, "Investors in this list should be refunded.");\n', '        removeRefundeeByIndex(_dataCleanup.index);\n', '      }\n', '    }\n', '\n', '    return (_weiRefunded, _refundeesListCopy);\n', '  }\n', '\n', '  /**\n', '  * @dev Auto refund\n', '  * @param _txFee The cost of executing refund code\n', '  */\n', '  function withdrawEverything(uint256 _txFee) public onlyOwner returns (uint256, address[]) {\n', '    require(state == State.Refunding, "Funds withdrawal is possible only in the Refunding state.");\n', '    return withdrawChunk(_txFee, refundeesList.length);\n', '  }\n', '\n', '  /**\n', "  * @dev Withdraws all beneficiary's funds.\n", '  */\n', '  function beneficiaryWithdraw() public {\n', '    //This methods is intentionally is overriden here to prevent uncontrollable funds transferring to a beneficiary. Only owner should be able to do this\n', '    //require(state == State.Closed);\n', '    //beneficiary.transfer(address(this).balance);\n', '  }\n', '\n', '  /**\n', "  * @dev Withdraws the part of beneficiary's funds.\n", '  */\n', '  function beneficiaryWithdrawChunk(uint256 _value) public onlyOwner {\n', '    require(_value <= address(this).balance, "Withdraw part can not be more than current balance");\n', '    beneficiaryDepositedAmount = beneficiaryDepositedAmount.sub(_value);\n', '    beneficiary.transfer(_value);\n', '  }\n', '\n', '  /**\n', "  * @dev Withdraws all beneficiary's funds.\n", '  */\n', '  function beneficiaryWithdrawAll() public onlyOwner {\n', '    uint256 _value = address(this).balance;\n', '    beneficiaryDepositedAmount = beneficiaryDepositedAmount.sub(_value);\n', '    beneficiary.transfer(_value);\n', '  }\n', '\n', '}\n', '\n', '// File: node_modules\\zeppelin-solidity\\contracts\\lifecycle\\TokenDestructible.sol\n', '\n', '/**\n', ' * @title TokenDestructible:\n', ' * @author Remco Bloemen <remco@2о─.com>\n', ' * @dev Base contract that can be destroyed by owner. All funds in contract including\n', ' * listed tokens will be sent to the owner.\n', ' */\n', 'contract TokenDestructible is Ownable {\n', '\n', '  constructor() public payable { }\n', '\n', '  /**\n', '   * @notice Terminate contract and refund to owner\n', '   * @param tokens List of addresses of ERC20 or ERC20Basic token contracts to\n', '   refund.\n', '   * @notice The called token contracts could try to re-enter this contract. Only\n', '   supply token contracts you trust.\n', '   */\n', '  function destroy(address[] tokens) onlyOwner public {\n', '\n', '    // Transfer tokens to owner\n', '    for (uint256 i = 0; i < tokens.length; i++) {\n', '      ERC20Basic token = ERC20Basic(tokens[i]);\n', '      uint256 balance = token.balanceOf(this);\n', '      token.transfer(owner, balance);\n', '    }\n', '\n', '    // Transfer Eth to owner and terminate contract\n', '    selfdestruct(owner);\n', '  }\n', '}\n', '\n', '// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\BurnableToken.sol\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', '// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\DetailedERC20.sol\n', '\n', '/**\n', ' * @title DetailedERC20 token\n', ' * @dev The decimals are only for visualization purposes.\n', ' * All the operations are done using the smallest and indivisible token unit,\n', ' * just as on Ethereum all the operations are done in wei.\n', ' */\n', 'contract DetailedERC20 is ERC20 {\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '\n', '  constructor(string _name, string _symbol, uint8 _decimals) public {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '  }\n', '}\n', '\n', '// File: node_modules\\zeppelin-solidity\\contracts\\lifecycle\\Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '// File: node_modules\\zeppelin-solidity\\contracts\\token\\ERC20\\PausableToken.sol\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool success)\n', '  {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool success)\n', '  {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '// File: contracts\\TransferableToken.sol\n', '\n', '/**\n', ' * @title TransferableToken\n', ' * @dev Base contract which allows to implement transfer for token.\n', ' */\n', 'contract TransferableToken is Ownable {\n', '  event TransferOn();\n', '  event TransferOff();\n', '\n', '  bool public transferable = false;\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not transferable.\n', '   */\n', '  modifier whenNotTransferable() {\n', '    require(!transferable);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is transferable.\n', '   */\n', '  modifier whenTransferable() {\n', '    require(transferable);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to enable transfers\n', '   */\n', '  function transferOn() onlyOwner whenNotTransferable public {\n', '    transferable = true;\n', '    emit TransferOn();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to disable transfers\n', '   */\n', '  function transferOff() onlyOwner whenTransferable public {\n', '    transferable = false;\n', '    emit TransferOff();\n', '  }\n', '\n', '}\n', '\n', '// File: contracts\\ClinicAllToken.sol\n', '\n', '//PausableToken, TokenDestructible\n', 'contract ClinicAllToken is MintableToken, DetailedERC20, CappedToken, BurnableToken, TransferableToken {\n', '  constructor\n', '  (\n', '    string _name,\n', '    string _symbol,\n', '    uint8 _decimals,\n', '    uint256 _cap\n', '  )\n', '  DetailedERC20(_name, _symbol, _decimals)\n', '  CappedToken(_cap)\n', '  public\n', '  {\n', '\n', '  }\n', '\n', '  /*/\n', "  *  Refund event when ICO didn't pass soft cap and we refund ETH to investors + burn ERC-20 tokens from investors balances\n", '  /*/\n', '  function burnAfterRefund(address _who) public onlyOwner {\n', '    uint256 _value = balances[_who];\n', '    _burn(_who, _value);\n', '  }\n', '\n', '  /*/\n', '  *  Allow transfers only if token is transferable\n', '  /*/\n', '  function transfer(\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '  public\n', '  whenTransferable\n', '  returns (bool)\n', '  {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  /*/\n', '  *  Allow transfers only if token is transferable\n', '  /*/\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '  public\n', '  whenTransferable\n', '  returns (bool)\n', '  {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function transferToPrivateInvestor(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '  public\n', '  onlyOwner\n', '  returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function burnPrivateSale(address privateSaleWallet, uint256 _value) public onlyOwner {\n', '    _burn(privateSaleWallet, _value);\n', '  }\n', '\n', '}\n', '\n', '// File: node_modules\\zeppelin-solidity\\contracts\\ownership\\rbac\\Roles.sol\n', '\n', '/**\n', ' * @title Roles\n', ' * @author Francisco Giordano (@frangio)\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' * See RBAC.sol for example usage.\n', ' */\n', 'library Roles {\n', '  struct Role {\n', '    mapping (address => bool) bearer;\n', '  }\n', '\n', '  /**\n', '   * @dev give an address access to this role\n', '   */\n', '  function add(Role storage role, address addr)\n', '    internal\n', '  {\n', '    role.bearer[addr] = true;\n', '  }\n', '\n', '  /**\n', "   * @dev remove an address' access to this role\n", '   */\n', '  function remove(Role storage role, address addr)\n', '    internal\n', '  {\n', '    role.bearer[addr] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev check if an address has this role\n', '   * // reverts\n', '   */\n', '  function check(Role storage role, address addr)\n', '    view\n', '    internal\n', '  {\n', '    require(has(role, addr));\n', '  }\n', '\n', '  /**\n', '   * @dev check if an address has this role\n', '   * @return bool\n', '   */\n', '  function has(Role storage role, address addr)\n', '    view\n', '    internal\n', '    returns (bool)\n', '  {\n', '    return role.bearer[addr];\n', '  }\n', '}\n', '\n', '// File: node_modules\\zeppelin-solidity\\contracts\\ownership\\rbac\\RBAC.sol\n', '\n', '/**\n', ' * @title RBAC (Role-Based Access Control)\n', ' * @author Matt Condon (@Shrugs)\n', ' * @dev Stores and provides setters and getters for roles and addresses.\n', ' * Supports unlimited numbers of roles and addresses.\n', ' * See //contracts/mocks/RBACMock.sol for an example of usage.\n', ' * This RBAC method uses strings to key roles. It may be beneficial\n', ' * for you to write your own implementation of this interface using Enums or similar.\n', " * It's also recommended that you define constants in the contract, like ROLE_ADMIN below,\n", ' * to avoid typos.\n', ' */\n', 'contract RBAC {\n', '  using Roles for Roles.Role;\n', '\n', '  mapping (string => Roles.Role) private roles;\n', '\n', '  event RoleAdded(address indexed operator, string role);\n', '  event RoleRemoved(address indexed operator, string role);\n', '\n', '  /**\n', '   * @dev reverts if addr does not have role\n', '   * @param _operator address\n', '   * @param _role the name of the role\n', '   * // reverts\n', '   */\n', '  function checkRole(address _operator, string _role)\n', '    view\n', '    public\n', '  {\n', '    roles[_role].check(_operator);\n', '  }\n', '\n', '  /**\n', '   * @dev determine if addr has role\n', '   * @param _operator address\n', '   * @param _role the name of the role\n', '   * @return bool\n', '   */\n', '  function hasRole(address _operator, string _role)\n', '    view\n', '    public\n', '    returns (bool)\n', '  {\n', '    return roles[_role].has(_operator);\n', '  }\n', '\n', '  /**\n', '   * @dev add a role to an address\n', '   * @param _operator address\n', '   * @param _role the name of the role\n', '   */\n', '  function addRole(address _operator, string _role)\n', '    internal\n', '  {\n', '    roles[_role].add(_operator);\n', '    emit RoleAdded(_operator, _role);\n', '  }\n', '\n', '  /**\n', '   * @dev remove a role from an address\n', '   * @param _operator address\n', '   * @param _role the name of the role\n', '   */\n', '  function removeRole(address _operator, string _role)\n', '    internal\n', '  {\n', '    roles[_role].remove(_operator);\n', '    emit RoleRemoved(_operator, _role);\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to scope access to a single role (uses msg.sender as addr)\n', '   * @param _role the name of the role\n', '   * // reverts\n', '   */\n', '  modifier onlyRole(string _role)\n', '  {\n', '    checkRole(msg.sender, _role);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\n', '   * @param _roles the names of the roles to scope access to\n', '   * // reverts\n', '   *\n', '   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\n', '   *  see: https://github.com/ethereum/solidity/issues/2467\n', '   */\n', '  // modifier onlyRoles(string[] _roles) {\n', '  //     bool hasAnyRole = false;\n', '  //     for (uint8 i = 0; i < _roles.length; i++) {\n', '  //         if (hasRole(msg.sender, _roles[i])) {\n', '  //             hasAnyRole = true;\n', '  //             break;\n', '  //         }\n', '  //     }\n', '\n', '  //     require(hasAnyRole);\n', '\n', '  //     _;\n', '  // }\n', '}\n', '\n', '// File: contracts\\Managed.sol\n', '\n', '/**\n', ' * @title Managed\n', ' * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\n', ' * This simplifies the implementation of "user permissions".\n', ' */\n', 'contract Managed is Ownable, RBAC {\n', '  string public constant ROLE_MANAGER = "manager";\n', '\n', '  /**\n', '  * @dev Throws if operator is not whitelisted.\n', '  */\n', '  modifier onlyManager() {\n', '    checkRole(msg.sender, ROLE_MANAGER);\n', '    _;\n', '  }\n', '\n', '  /**\n', '  * @dev set an address as a manager\n', '  * @param _operator address\n', '  * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n', '  */\n', '  function setManager(address _operator) public onlyOwner {\n', '    addRole(_operator, ROLE_MANAGER);\n', '  }\n', '\n', '  /**\n', '  * @dev delete an address as a manager\n', '  * @param _operator address\n', "  * @return true if the address was deleted from the whitelist, false if the address wasn't already in the whitelist\n", '  */\n', '  function removeManager(address _operator) public onlyOwner {\n', '    removeRole(_operator, ROLE_MANAGER);\n', '  }\n', '}\n', '\n', '// File: contracts\\Limited.sol\n', '\n', '/**\n', ' * @title LimitedCrowdsale\n', ' * @dev Crowdsale in which only limited number of tokens can be bought.\n', ' */\n', 'contract Limited is Managed {\n', '  using SafeMath for uint256;\n', '  mapping(address => uint256) public limitsList;\n', '\n', '  /**\n', '  * @dev Reverts if beneficiary has no limit. Can be used when extending this contract.\n', '  */\n', '  modifier isLimited(address _payee) {\n', '    require(limitsList[_payee] > 0, "An investor is limited if it has a limit.");\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev Reverts if beneficiary want to buy more tokens than limit allows. Can be used when extending this contract.\n', '  */\n', '  modifier doesNotExceedLimit(address _payee, uint256 _tokenAmount, uint256 _tokenBalance, uint256 kycLimitThreshold) {\n', '    uint256 _newBalance = _tokenBalance.add(_tokenAmount);\n', '    uint256 _payeeLimit = getLimit(_payee);\n', '    if (_newBalance >= kycLimitThreshold/* && _payeeLimit >= kycLimitThreshold*/) {\n', '        //It does not make sense to validate limit if its lower than the threshold; otherwhise, a payee will hit the lower limit in attempt of buying more than kycThreshold\n', '        require(_newBalance <= _payeeLimit, "An investor should not exceed its limit on buying.");\n', '    }\n', '    _;\n', '  }\n', '\n', '  /**\n', '  * @dev Returns limits for _payee.\n', '  * @param _payee Address to get token limits\n', '  */\n', '  function getLimit(address _payee)\n', '  public view returns (uint256)\n', '  {\n', '    return limitsList[_payee];\n', '  }\n', '\n', '  /**\n', '  * @dev Adds limits to addresses.\n', '  * @param _payees Addresses to set limit\n', '  * @param _limits Limit values to set to addresses\n', '  */\n', '  function addAddressesLimits(address[] _payees, uint256[] _limits) public\n', '  onlyManager\n', '  {\n', '    require(_payees.length == _limits.length, "Array sizes should be equal.");\n', '    for (uint256 i = 0; i < _payees.length; i++) {\n', '      addLimit(_payees[i], _limits[i]);\n', '    }\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev Adds limit to address.\n', '  * @param _payee Address to set limit\n', '  * @param _limit Limit value to set to address\n', '  */\n', '  function addLimit(address _payee, uint256 _limit) public\n', '  onlyManager\n', '  {\n', '    limitsList[_payee] = _limit;\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev Removes single address-limit record.\n', '  * @param _payee Address to be removed\n', '  */\n', '  function removeLimit(address _payee) external\n', '  onlyManager\n', '  {\n', '    limitsList[_payee] = 0;\n', '  }\n', '\n', '}\n', '\n', '// File: node_modules\\zeppelin-solidity\\contracts\\access\\Whitelist.sol\n', '\n', '/**\n', ' * @title Whitelist\n', ' * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\n', ' * This simplifies the implementation of "user permissions".\n', ' */\n', 'contract Whitelist is Ownable, RBAC {\n', '  string public constant ROLE_WHITELISTED = "whitelist";\n', '\n', '  /**\n', '   * @dev Throws if operator is not whitelisted.\n', '   * @param _operator address\n', '   */\n', '  modifier onlyIfWhitelisted(address _operator) {\n', '    checkRole(_operator, ROLE_WHITELISTED);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev add an address to the whitelist\n', '   * @param _operator address\n', '   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n', '   */\n', '  function addAddressToWhitelist(address _operator)\n', '    onlyOwner\n', '    public\n', '  {\n', '    addRole(_operator, ROLE_WHITELISTED);\n', '  }\n', '\n', '  /**\n', '   * @dev getter to determine if address is in whitelist\n', '   */\n', '  function whitelist(address _operator)\n', '    public\n', '    view\n', '    returns (bool)\n', '  {\n', '    return hasRole(_operator, ROLE_WHITELISTED);\n', '  }\n', '\n', '  /**\n', '   * @dev add addresses to the whitelist\n', '   * @param _operators addresses\n', '   * @return true if at least one address was added to the whitelist,\n', '   * false if all addresses were already in the whitelist\n', '   */\n', '  function addAddressesToWhitelist(address[] _operators)\n', '    onlyOwner\n', '    public\n', '  {\n', '    for (uint256 i = 0; i < _operators.length; i++) {\n', '      addAddressToWhitelist(_operators[i]);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev remove an address from the whitelist\n', '   * @param _operator address\n', '   * @return true if the address was removed from the whitelist,\n', "   * false if the address wasn't in the whitelist in the first place\n", '   */\n', '  function removeAddressFromWhitelist(address _operator)\n', '    onlyOwner\n', '    public\n', '  {\n', '    removeRole(_operator, ROLE_WHITELISTED);\n', '  }\n', '\n', '  /**\n', '   * @dev remove addresses from the whitelist\n', '   * @param _operators addresses\n', '   * @return true if at least one address was removed from the whitelist,\n', "   * false if all addresses weren't in the whitelist in the first place\n", '   */\n', '  function removeAddressesFromWhitelist(address[] _operators)\n', '    onlyOwner\n', '    public\n', '  {\n', '    for (uint256 i = 0; i < _operators.length; i++) {\n', '      removeAddressFromWhitelist(_operators[i]);\n', '    }\n', '  }\n', '\n', '}\n', '\n', '// File: contracts\\ManagedWhitelist.sol\n', '\n', '/**\n', ' * @title ManagedWhitelist\n', ' * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\n', ' * This simplifies the implementation of "user permissions".\n', ' */\n', 'contract ManagedWhitelist is Managed, Whitelist {\n', '  /**\n', '  * @dev add an address to the whitelist\n', '  * @param _operator address\n', '  * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n', '  */\n', '  function addAddressToWhitelist(address _operator) public onlyManager {\n', '    addRole(_operator, ROLE_WHITELISTED);\n', '  }\n', '\n', '  /**\n', '  * @dev add addresses to the whitelist\n', '  * @param _operators addresses\n', '  * @return true if at least one address was added to the whitelist,\n', '  * false if all addresses were already in the whitelist\n', '  */\n', '  function addAddressesToWhitelist(address[] _operators) public onlyManager {\n', '    for (uint256 i = 0; i < _operators.length; i++) {\n', '      addAddressToWhitelist(_operators[i]);\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev remove an address from the whitelist\n', '  * @param _operator address\n', '  * @return true if the address was removed from the whitelist,\n', "  * false if the address wasn't in the whitelist in the first place\n", '  */\n', '  function removeAddressFromWhitelist(address _operator) public onlyManager {\n', '    removeRole(_operator, ROLE_WHITELISTED);\n', '  }\n', '\n', '  /**\n', '  * @dev remove addresses from the whitelist\n', '  * @param _operators addresses\n', '  * @return true if at least one address was removed from the whitelist,\n', "  * false if all addresses weren't in the whitelist in the first place\n", '  */\n', '  function removeAddressesFromWhitelist(address[] _operators) public onlyManager {\n', '    for (uint256 i = 0; i < _operators.length; i++) {\n', '      removeAddressFromWhitelist(_operators[i]);\n', '    }\n', '  }\n', '}\n', '\n', '// File: contracts\\MigratedTimedFinalizableCrowdsale.sol\n', '\n', '/**\n', ' * @title MigratedTimedCrowdsale\n', ' * @dev Crowdsale accepting contributions only within a time frame.\n', ' */\n', 'contract MigratedTimedFinalizableCrowdsale is Crowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', "   * work. Calls the contract's finalization function.\n", '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasClosed());\n', '\n', '    finalization();\n', '    emit Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  } \n', '  \n', '  uint256 public openingTime;\n', '  uint256 public closingTime;\n', '\n', '  /**\n', '   * @dev Reverts if not in crowdsale time range.\n', '   */\n', '  modifier onlyWhileOpen {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Constructor, takes crowdsale opening and closing times.\n', '   * @param _openingTime Crowdsale opening time\n', '   * @param _closingTime Crowdsale closing time\n', '   */\n', '  constructor(uint256 _openingTime, uint256 _closingTime) public {\n', '    // solium-disable-next-line security/no-block-members\n', '    //require(_closingTime >= block.timestamp);\n', '    //require(_closingTime >= _openingTime);\n', '\n', '    openingTime = _openingTime;\n', '    closingTime = _closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '   * @return Whether crowdsale period has elapsed\n', '   */\n', '  function hasClosed() public view returns (bool) {\n', '    // solium-disable-next-line security/no-block-members\n', '    return block.timestamp > closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring to be within contributing period\n', '   * @param _beneficiary Token purchaser\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '    onlyWhileOpen\n', '  {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '}\n', '\n', '// File: contracts\\PrivatelyManaged.sol\n', '\n', '/**\n', ' * @title Managed\n', ' * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\n', ' * This simplifies the implementation of "user permissions".\n', ' */\n', 'contract PrivatelyManaged is Ownable, RBAC {\n', '  string public constant ROLE_PRIVATEMANAGER = "private_manager";\n', '\n', '  /**\n', '  * @dev Throws if operator is not whitelisted.\n', '  */\n', '  modifier onlyPrivateManager() {\n', '    checkRole(msg.sender, ROLE_PRIVATEMANAGER);\n', '    _;\n', '  }\n', '\n', '  /**\n', '  * @dev set an address as a private sale manager\n', '  * @param _operator address\n', '  * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n', '  */\n', '  function setPrivateManager(address _operator) public onlyOwner {\n', '    addRole(_operator, ROLE_PRIVATEMANAGER);\n', '  }\n', '\n', '  /**\n', '  * @dev delete an address as a private sale manager\n', '  * @param _operator address\n', "  * @return true if the address was deleted from the whitelist, false if the address wasn't already in the whitelist\n", '  */\n', '  function removePrivateManager(address _operator) public onlyOwner {\n', '    removeRole(_operator, ROLE_PRIVATEMANAGER);\n', '  }\n', '}\n', '\n', '// File: contracts\\ClinicAllCrowdsale.sol\n', '\n', '//import "./../node_modules/zeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol";\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/// @title ClinicAll crowdsale contract\n', '/// @dev  ClinicAll crowdsale contract\n', '//contract ClinicAllCrowdsale is Crowdsale, TimedCrowdsale, FinalizableCrowdsale, MintedCrowdsale, ManagedWhitelist, Limited {\n', 'contract ClinicAllCrowdsale is Crowdsale, MigratedTimedFinalizableCrowdsale, MintedCrowdsale, ManagedWhitelist, Limited {\n', '  constructor\n', '  (\n', '    uint256 _tokenLimitSupply,\n', '    uint256 _rate,\n', '    address _wallet,\n', '    address _privateSaleManagerWallet,\n', '    ERC20 _token,\n', '    uint256 _openingTime,\n', '    uint256 _closingTime,\n', '    uint256 _discountTokenAmount,\n', '    uint256 _discountTokenPercent,\n', '    uint256 _preSaleClosingTime,\n', '    uint256 _softCapLimit,\n', '    ClinicAllRefundEscrow _vault,\n', '    uint256 _buyLimitSupplyMin,\n', '    uint256 _buyLimitSupplyMax,\n', '    uint256 _kycLimitThreshold\n', '  )\n', '  Crowdsale(_rate, _wallet, _token)\n', '  //TimedCrowdsale(_openingTime, _closingTime)\n', '  MigratedTimedFinalizableCrowdsale(_openingTime, _closingTime)\n', '  public\n', '  {\n', '    privateSaleManagerWallet = _privateSaleManagerWallet;\n', '    tokenSupplyLimit = _tokenLimitSupply;\n', '    discountTokenAmount = _discountTokenAmount;\n', '    discountTokenPercent = _discountTokenPercent;\n', '    preSaleClosingTime = _preSaleClosingTime;\n', '    softCapLimit = _softCapLimit;\n', '    vault = _vault;\n', '    buyLimitSupplyMin = _buyLimitSupplyMin;\n', '    buyLimitSupplyMax = _buyLimitSupplyMax;\n', '    kycLimitThreshold = _kycLimitThreshold;\n', '  }\n', '\n', '  using SafeMath for uint256;\n', '\n', '  // refund vault used to hold funds while crowdsale is running\n', '  ClinicAllRefundEscrow public vault;\n', '\n', '  /*/\n', '  *  Properties, constants\n', '  /*/\n', '  //address public walletPrivateSaler;\n', '  // Limit of tokens for supply during ICO public sale\n', '  uint256 public tokenSupplyLimit;\n', '  // Limit of tokens with discount on current contract\n', '  uint256 public discountTokenAmount;\n', '  // Percent value for discount tokens\n', '  uint256 public discountTokenPercent;\n', '  // Time when we finish pre sale\n', '  uint256 public preSaleClosingTime;\n', '  // Minimum amount of funds to be raised in weis\n', '  uint256 public softCapLimit;\n', '  // Min buy limit for each investor\n', '  uint256 public buyLimitSupplyMin;\n', '  // Max buy limit for each investor\n', '  uint256 public buyLimitSupplyMax;\n', '  // KYC Limit threshold for small and big investors\n', '  uint256 public kycLimitThreshold;\n', '  // Address where private sale funds are collected\n', '  address public privateSaleManagerWallet;\n', '  // Private sale tokens supply limit\n', '  uint256 public privateSaleSupplyLimit;\n', '\n', '  // Modifiers\n', '  /**\n', '  * @dev Throws if operator is not whitelisted.\n', '  */\n', '  modifier onlyPrivateSaleManager() {\n', '    require(privateSaleManagerWallet == msg.sender, "Operation is allowed only for the private sale manager.");\n', '    _;\n', '  }\n', '\n', '\n', '  // Public functions\n', '\n', '  /*/\n', '  *  @dev Owner can transfer ownership of the token to a new owner\n', '  *  @param _newTokenOwner  New token owner address\n', '  */\n', '  function transferTokenOwnership(address _newTokenOwner) public\n', '  onlyOwner\n', '  {\n', '      MintableToken(token).transferOwnership(_newTokenOwner);\n', '  }\n', '\n', '  /*/\n', '  *  @dev Owner can transfer ownership of the vault to a new owner\n', '  *  @param _newTokenOwner  New token owner address\n', '  */\n', '  function transferVaultOwnership(address _newVaultOwner) public\n', '  onlyOwner\n', '  {\n', '      ClinicAllRefundEscrow(vault).transferOwnership(_newVaultOwner);\n', '  }\n', '\n', '  /*/\n', '  *  @dev Owner can extend ICO closing time\n', '  *  @param _closingTime New ICO closing time\n', '  */\n', '  function extendICO(uint256 _closingTime) public\n', '  onlyOwner\n', '  {\n', '      closingTime = _closingTime;\n', '  }\n', '\n', '  /*/\n', '  *  @dev Owner can extend ICO closing time\n', '  *  @param _closingTime New ICO closing time\n', '  */\n', '  function extendPreSale(uint256 _preSaleClosingTime) public\n', '  onlyOwner\n', '  {\n', '      preSaleClosingTime = _preSaleClosingTime;\n', '  }\n', '\n', '  /*/\n', '  *  @dev Should be used only once during the migration of ICO contracts\n', '  *  @param _beneficiary Wallet address of migrated beneficiary\n', '  *  @param _weiAmount Sum of invested ETH funds in wei\n', '  *  @param _tokenAmount Sum of bought tokens for this ETH funds\n', '  */\n', '  function migrateBeneficiary(address _beneficiary, uint256 _weiAmount, uint256 _tokenAmount) public\n', '  onlyOwner\n', '  {\n', '    weiRaised = weiRaised.add(_weiAmount);\n', '    //That is crucial that _forwardFunds() will not be called here\n', '    _processPurchase(_beneficiary, _tokenAmount);\n', '    emit TokenPurchase(\n', '      msg.sender,\n', '      _beneficiary,\n', '      _weiAmount,\n', '      _tokenAmount\n', '    );\n', '  }\n', '\n', '  /*/\n', '  *  @dev CrowdSale manager is able to change rate value during ICO\n', '  *  @param _rate wei to CHT tokens exchange rate\n', '  */\n', '  function updateRate(uint256 _rate) public\n', '  onlyManager\n', '  {\n', '    require(_rate != 0, "Exchange rate should not be 0.");\n', '    rate = _rate;\n', '  }\n', '\n', '  /*/\n', '  *  @dev CrowdSale manager is able to change min and max buy limit for investors during ICO\n', '  *  @param _min Minimal amount of tokens that could be bought\n', '  *  @param _max Maximum amount of tokens that could be bought\n', '  */\n', '  function updateBuyLimitRange(uint256 _min, uint256 _max) public\n', '  onlyOwner\n', '  {\n', '    require(_min != 0, "Minimal buy limit should not be 0.");\n', '    require(_max != 0, "Maximal buy limit should not be 0.");\n', '    require(_max > _min, "Maximal buy limit should be greater than minimal buy limit.");\n', '    buyLimitSupplyMin = _min;\n', '    buyLimitSupplyMax = _max;\n', '  }\n', '\n', '  /*/\n', '  *  @dev CrowdSale manager is able to change Kyc Limit Eliminator for investors during ICO\n', '  *  @param _value amount of tokens that should be as eliminator\n', '  */\n', '  function updateKycLimitThreshold(uint256 _value) public\n', '  onlyOwner\n', '  {\n', '    require(_value != 0, "Kyc threshold should not be 0.");\n', '    kycLimitThreshold = _value;\n', '  }\n', '\n', '  /**\n', '  * @dev Investors can claim refunds here if crowdsale is unsuccessful\n', '  */\n', '  function claimRefund() public {\n', '    require(isFinalized, "Claim refunds is only possible if the ICO is finalized.");\n', '    require(!goalReached(), "Claim refunds is only possible if the soft cap goal has not been reached.");\n', '    uint256 deposit = vault.depositsOf(msg.sender);\n', '    vault.withdraw(msg.sender);\n', '    weiRaised = weiRaised.sub(deposit);\n', '    ClinicAllToken(token).burnAfterRefund(msg.sender);\n', '  }\n', '\n', '  /**\n', '  @dev Owner can claim full refund if a crowdsale is unsuccessful\n', '  @param _txFee Transaction fee that will be deducted from an invested sum\n', '  */\n', '  function claimRefundChunk(uint256 _txFee, uint256 _chunkLength) public onlyOwner {\n', '    require(isFinalized, "Claim refunds is only possible if the ICO is finalized.");\n', '    require(!goalReached(), "Claim refunds is only possible if the soft cap goal has not been reached.");\n', '    uint256 _weiRefunded;\n', '    address[] memory _refundeesList;\n', '    (_weiRefunded, _refundeesList) = vault.withdrawChunk(_txFee, _chunkLength);\n', '    weiRaised = weiRaised.sub(_weiRefunded);\n', '    for (uint256 i = 0; i < _refundeesList.length; i++) {\n', '      ClinicAllToken(token).burnAfterRefund(_refundeesList[i]);\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev Get refundee list length\n', '  */\n', '  function refundeesListLength() public onlyOwner view returns (uint256) {\n', '    return vault.refundeesListLength();\n', '  }\n', '\n', '  /**\n', '  * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '  * @return Whether crowdsale period has elapsed\n', '  */\n', '  function hasClosed() public view returns (bool) {\n', '    return ((block.timestamp > closingTime) || tokenSupplyLimit <= token.totalSupply());\n', '  }\n', '\n', '  /**\n', '  * @dev Checks whether funding goal was reached.\n', '  * @return Whether funding goal was reached\n', '  */\n', '  function goalReached() public view returns (bool) {\n', '    return token.totalSupply() >= softCapLimit;\n', '  }\n', '\n', '  /**\n', '  * @dev Checks rest of tokens supply.\n', '  */\n', '  function supplyRest() public view returns (uint256) {\n', '    return (tokenSupplyLimit.sub(token.totalSupply()));\n', '  }\n', '\n', '  //Private functions\n', '\n', '  function _processPurchase(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '  internal\n', '  doesNotExceedLimit(_beneficiary, _tokenAmount, token.balanceOf(_beneficiary), kycLimitThreshold)\n', '  {\n', '    super._processPurchase(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  function _preValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '  internal\n', '  onlyIfWhitelisted(_beneficiary)\n', '  isLimited(_beneficiary)\n', '  {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '    uint256 tokens = _getTokenAmount(_weiAmount);\n', '    require(tokens.add(token.totalSupply()) <= tokenSupplyLimit, "Total amount fo sold tokens should not exceed the total supply limit.");\n', '    require(tokens >= buyLimitSupplyMin, "An investor can buy an amount of tokens only above the minimal limit.");\n', '    require(tokens.add(token.balanceOf(_beneficiary)) <= buyLimitSupplyMax, "An investor cannot buy tokens above the maximal limit.");\n', '  }\n', '\n', '  /**\n', '   * @dev Te way in which ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount with discount or not\n', '   */\n', '  function _getTokenAmount(uint256 _weiAmount)\n', '  internal view returns (uint256)\n', '  {\n', '    if (isDiscount()) {\n', '      return _getTokensWithDiscount(_weiAmount);\n', '    }\n', '    return _weiAmount.mul(rate);\n', '  }\n', '\n', '  /**\n', '   * @dev Public method where ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   */\n', '  function getTokenAmount(uint256 _weiAmount)\n', '  public view returns (uint256)\n', '  {\n', '    return _getTokenAmount(_weiAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev iternal method returns total tokens amount including discount\n', '   */\n', '  function _getTokensWithDiscount(uint256 _weiAmount)\n', '  internal view returns (uint256)\n', '  {\n', '    uint256 tokens = 0;\n', '    uint256 restOfDiscountTokens = discountTokenAmount.sub(token.totalSupply());\n', '    uint256 discountTokensMax = _getDiscountTokenAmount(_weiAmount);\n', '    if (restOfDiscountTokens < discountTokensMax) {\n', '      uint256 discountTokens = restOfDiscountTokens;\n', '      //get rest of WEI\n', '      uint256 _rate = _getDiscountRate();\n', '      uint256 _discointWeiAmount = discountTokens.div(_rate);\n', '      uint256 _restOfWeiAmount = _weiAmount.sub(_discointWeiAmount);\n', '      uint256 normalTokens = _restOfWeiAmount.mul(rate);\n', '      tokens = discountTokens.add(normalTokens);\n', '    } else {\n', '      tokens = discountTokensMax;\n', '    }\n', '\n', '    return tokens;\n', '  }\n', '\n', '  /**\n', '   * @dev iternal method returns discount tokens amount\n', '   * @param _weiAmount An amount of ETH that should be converted to an amount of CHT tokens\n', '   */\n', '  function _getDiscountTokenAmount(uint256 _weiAmount)\n', '  internal view returns (uint256)\n', '  {\n', '    require(_weiAmount != 0, "It should be possible to buy tokens only by providing non zero ETH.");\n', '    uint256 _rate = _getDiscountRate();\n', '    return _weiAmount.mul(_rate);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the discount rate value\n', '   */\n', '  function _getDiscountRate()\n', '  internal view returns (uint256)\n', '  {\n', '    require(isDiscount(), "Getting discount rate should be possible only below the discount tokens limit.");\n', '    return rate.add(rate.mul(discountTokenPercent).div(100));\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the exchange rate value\n', '   */\n', '  function getRate()\n', '  public view returns (uint256)\n', '  {\n', '    if (isDiscount()) {\n', '      return _getDiscountRate();\n', '    }\n', '\n', '    return rate;\n', '  }\n', '\n', '  /**\n', "   * @dev Returns the status if the ICO's private sale has closed or not\n", '   */\n', '  function isDiscount()\n', '  public view returns (bool)\n', '  {\n', '    return (preSaleClosingTime >= block.timestamp);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal method where owner transfers part of tokens to reserve\n', '   */\n', '  function transferTokensToReserve(address _beneficiary) private\n', '  {\n', '    require(tokenSupplyLimit < CappedToken(token).cap(), "Token\'s supply limit should be less that token\' cap limit.");\n', '    // calculate token amount to be created\n', '    uint256 _tokenCap = CappedToken(token).cap();\n', '    uint256 tokens = _tokenCap.sub(tokenSupplyLimit);\n', '\n', '    _deliverTokens(_beneficiary, tokens);\n', '  }\n', '\n', '  /**\n', '  * @dev Enable transfers of tokens between wallets\n', '  */\n', '  function transferOn() public onlyOwner\n', '  {\n', '    ClinicAllToken(token).transferOn();\n', '  }\n', '\n', '  /**\n', '  * @dev Disable transfers of tokens between wallets\n', '  */\n', '  function transferOff() public onlyOwner\n', '  {\n', '    ClinicAllToken(token).transferOff();\n', '  }\n', '\n', '  /**\n', '   * @dev Internal method where owner transfers part of tokens to reserve and finish minting\n', '   */\n', '  function finalization() internal {\n', '    if (goalReached()) {\n', '      transferTokensToReserve(wallet);\n', '      vault.close();\n', '    } else {\n', '      vault.enableRefunds();\n', '    }\n', '    MintableToken(token).finishMinting();\n', '    super.finalization();\n', '  }\n', '\n', '  /**\n', '  * @dev Overrides Crowdsale fund forwarding, sending funds to vault.\n', '  */\n', '  function _forwardFunds() internal {\n', '    super._forwardFunds();\n', '    vault.depositFunds(msg.sender, msg.value);\n', '  }\n', '\n', '  /**\n', '  * @dev Public method where private sale manager can transfer tokens to private investors\n', '  */\n', '  function transferToPrivateInvestor(\n', '    address _beneficiary,\n', '    uint256 _value\n', '  )\n', '  public\n', '  onlyPrivateSaleManager\n', '  onlyIfWhitelisted(_beneficiary)\n', '  returns (bool)\n', '  {\n', '    ClinicAllToken(token).transferToPrivateInvestor(msg.sender, _beneficiary, _value);\n', '  }\n', '\n', '  /**\n', '  * @dev Allocates funds for the private sale manager, but not beyound the tokenSupplyLimit\n', '  * @param privateSaleSupplyAmount value of CHT tokens to add for private sale\n', '  */\n', '  function allocatePrivateSaleFunds(uint256 privateSaleSupplyAmount) public onlyOwner\n', '  {\n', '    require(privateSaleSupplyLimit.add(privateSaleSupplyAmount) < tokenSupplyLimit, "Token\'s private sale supply limit should be less that token supply limit.");\n', '    privateSaleSupplyLimit = privateSaleSupplyLimit.add(privateSaleSupplyAmount);\n', '    _deliverTokens(privateSaleManagerWallet, privateSaleSupplyAmount);\n', '  }\n', '\n', '  /**\n', '  * @dev Public method where private sale manager can transfer the rest of tokens form private sale wallet available to crowdsale\n', '  */\n', '  function redeemPrivateSaleFunds()\n', '  public\n', '  onlyPrivateSaleManager\n', '  {\n', '    uint256 _balance = ClinicAllToken(token).balanceOf(msg.sender);\n', '    privateSaleSupplyLimit = privateSaleSupplyLimit.sub(_balance);\n', '    ClinicAllToken(token).burnPrivateSale(msg.sender, _balance);\n', '  }\n', '\n', '  /**\n', '  @dev Owner can withdraw part of funds during of ICO\n', '  @param _value Transaction amoun that will be deducted from an vault sum\n', '  */\n', '  function beneficiaryWithdrawChunk(uint256 _value)\n', '  public\n', '  onlyOwner\n', '  {\n', '    vault.beneficiaryWithdrawChunk(_value);\n', '  }\n', '\n', '  /**\n', '  @dev Owner can withdraw all funds during or after of ICO\n', '  */\n', '  function beneficiaryWithdrawAll()\n', '  public\n', '  onlyOwner\n', '  {\n', '    vault.beneficiaryWithdrawAll();\n', '  }\n', '\n', '  /**\n', '  @dev Owner can do manual refund here if investore has "BAD" money\n', '  @param _payee address of investor that needs to refund with next manual ETH sending\n', '  */\n', '  function manualRefund(address _payee) public onlyOwner {\n', '    uint256 deposit = vault.depositsOf(_payee);\n', '    vault.manualRefund(_payee);\n', '    weiRaised = weiRaised.sub(deposit);\n', '    ClinicAllToken(token).burnAfterRefund(_payee);\n', '  }\n', '\n', '}']