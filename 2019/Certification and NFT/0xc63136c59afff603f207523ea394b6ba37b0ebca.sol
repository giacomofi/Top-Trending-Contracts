['/**\n', ' *Submitted for verification at Etherscan.io on 2019-07-10\n', '*/\n', '\n', 'pragma solidity ^0.5.10;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '    * @dev Multiplies two unsigned integers, reverts on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Gas optimization: this is cheaper than requiring &#39;a&#39; not being zero, but the\n', '        // benefit is lost if &#39;b&#39; is also tested.\n', '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two unsigned integers, reverts on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address previousOwner, address newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * @notice Renouncing to ownership will leave the contract without an owner.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract WCKKittyBuyer is Ownable {\n', '\n', '    // OpenZeppelin&#39;s SafeMath library is used for all arithmetic operations to avoid overflows/underflows.\n', '    using SafeMath for uint256;\n', '\n', '    /* ********** */\n', '    /* DATA TYPES */\n', '    /* ********** */\n', '\n', '    /* ****** */\n', '    /* EVENTS */\n', '    /* ****** */\n', '\n', '    event KittyBoughtWithWCK(uint256 kittyId, uint256 wckSpent);\n', '    event DevFeeUpdated(uint256 newDevFee);\n', '\n', '    /* ******* */\n', '    /* STORAGE */\n', '    /* ******* */\n', '\n', '    /* ********* */\n', '    /* CONSTANTS */\n', '    /* ********* */\n', '\n', '    address kittyCoreAddress = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\n', '    address kittySalesAddress = 0xb1690C08E213a35Ed9bAb7B318DE14420FB57d8C;\n', '    address wrappedKittiesAddress = 0x09fE5f0236F0Ea5D930197DCE254d77B04128075;\n', '    address uniswapExchangeAddress = 0x4FF7Fa493559c40aBd6D157a0bfC35Df68d8D0aC;\n', '\n', '    uint256 devFeeInBasisPoints = 375;\n', '\n', '    /* ********* */\n', '    /* FUNCTIONS */\n', '    /* ********* */\n', '\n', '    function buyKittyWithWCK(uint256 _kittyId, uint256 _maxWCKWeiToSpend) external {\n', '        ERC20(wrappedKittiesAddress).transferFrom(msg.sender, address(this), _maxWCKWeiToSpend);\n', '        uint256 costInWei = KittySales(kittySalesAddress).getCurrentPrice(_kittyId);\n', '        uint256 tokensSold = UniswapExchange(uniswapExchangeAddress).tokenToEthSwapOutput(_computePriceWithDevFee(costInWei), _maxWCKWeiToSpend, ~uint256(0));\n', '        KittyCore(kittySalesAddress).bid.value(costInWei)(_kittyId);\n', '        ERC20(wrappedKittiesAddress).transfer(msg.sender, _maxWCKWeiToSpend.sub(tokensSold));\n', '        KittyCore(kittyCoreAddress).transfer(msg.sender, _kittyId);\n', '        emit KittyBoughtWithWCK(_kittyId, tokensSold);\n', '    }\n', '\n', '    function transferERC20(address _erc20Address, address _to, uint256 _value) external onlyOwner {\n', '        ERC20(_erc20Address).transfer(_to, _value);\n', '    }\n', '\n', '    function withdrawOwnerEarnings() external onlyOwner {\n', '        msg.sender.transfer(address(this).balance);\n', '    }\n', '\n', '    function updateFee(uint256 _newFee) external onlyOwner {\n', '        devFeeInBasisPoints = _newFee;\n', '        emit DevFeeUpdated(_newFee);\n', '    }\n', '\n', '    constructor() public {\n', '        ERC20(wrappedKittiesAddress).approve(uniswapExchangeAddress, ~uint256(0));\n', '    }\n', '\n', '    function() external payable {}\n', '\n', '    function _computePriceWithDevFee(uint256 _costInWei) internal view returns (uint256) {\n', '        return (_costInWei.mul(uint256(10000).add(devFeeInBasisPoints))).div(uint256(10000));\n', '    }\n', '}\n', '\n', 'contract KittyCore {\n', '    function transfer(address _to, uint256 _tokenId) external;\n', '    function bid(uint256 _tokenId) external payable;\n', '}\n', '\n', 'contract KittySales {\n', '    function getCurrentPrice(uint256 _tokenId) external view returns (uint256);\n', '}\n', '\n', 'contract ERC20 {\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '}\n', '\n', 'contract UniswapExchange {\n', '    function tokenToEthSwapOutput(uint256 eth_bought, uint256 max_tokens, uint256 deadline) external returns (uint256  tokens_sold);\n', '}']