['pragma solidity 0.5.1;\n', '\n', '/**\n', ' * @dev Standard interface for a dex proxy contract.\n', ' */\n', 'interface Proxy {\n', '\n', '  /**\n', '   * @dev Executes an action.\n', '   * @param _target Target of execution.\n', '   * @param _a Address usually represention from.\n', '   * @param _b Address usually representing to.\n', '   * @param _c Integer usually repersenting amount/value/id.\n', '   */\n', '  function execute(\n', '    address _target,\n', '    address _a,\n', '    address _b,\n', '    uint256 _c\n', '  )\n', '    external;\n', '    \n', '}\n', '\n', '/**\n', ' * @dev ERC-721 non-fungible token standard. \n', ' * See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md.\n', ' */\n', 'interface ERC721\n', '{\n', '\n', '  /**\n', '   * @dev Emits when ownership of any NFT changes by any mechanism. This event emits when NFTs are\n', '   * created (`from` == 0) and destroyed (`to` == 0). Exception: during contract creation, any\n', '   * number of NFTs may be created and assigned without emitting Transfer. At the time of any\n', '   * transfer, the approved address for that NFT (if any) is reset to none.\n', '   */\n', '  event Transfer(\n', '    address indexed _from,\n', '    address indexed _to,\n', '    uint256 indexed _tokenId\n', '  );\n', '\n', '  /**\n', '   * @dev This emits when the approved address for an NFT is changed or reaffirmed. The zero\n', '   * address indicates there is no approved address. When a Transfer event emits, this also\n', '   * indicates that the approved address for that NFT (if any) is reset to none.\n', '   */\n', '  event Approval(\n', '    address indexed _owner,\n', '    address indexed _approved,\n', '    uint256 indexed _tokenId\n', '  );\n', '\n', '  /**\n', '   * @dev This emits when an operator is enabled or disabled for an owner. The operator can manage\n', '   * all NFTs of the owner.\n', '   */\n', '  event ApprovalForAll(\n', '    address indexed _owner,\n', '    address indexed _operator,\n', '    bool _approved\n', '  );\n', '\n', '  /**\n', '   * @dev Transfers the ownership of an NFT from one address to another address.\n', '   * @notice Throws unless `msg.sender` is the current owner, an authorized operator, or the\n', '   * approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is\n', '   * the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this\n', '   * function checks if `_to` is a smart contract (code size > 0). If so, it calls\n', '   * `onERC721Received` on `_to` and throws if the return value is not \n', '   * `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`.\n', '   * @param _from The current owner of the NFT.\n', '   * @param _to The new owner.\n', '   * @param _tokenId The NFT to transfer.\n', '   * @param _data Additional data with no specified format, sent in call to `_to`.\n', '   */\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId,\n', '    bytes calldata _data\n', '  )\n', '    external;\n', '\n', '  /**\n', '   * @dev Transfers the ownership of an NFT from one address to another address.\n', '   * @notice This works identically to the other function with an extra data parameter, except this\n', '   * function just sets data to ""\n', '   * @param _from The current owner of the NFT.\n', '   * @param _to The new owner.\n', '   * @param _tokenId The NFT to transfer.\n', '   */\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId\n', '  )\n', '    external;\n', '\n', '  /**\n', '   * @dev Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\n', '   * address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero\n', '   * address. Throws if `_tokenId` is not a valid NFT.\n', '   * @notice The caller is responsible to confirm that `_to` is capable of receiving NFTs or else\n', '   * they mayb be permanently lost.\n', '   * @param _from The current owner of the NFT.\n', '   * @param _to The new owner.\n', '   * @param _tokenId The NFT to transfer.\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId\n', '  )\n', '    external;\n', '\n', '  /**\n', '   * @dev Set or reaffirm the approved address for an NFT.\n', '   * @notice The zero address indicates there is no approved address. Throws unless `msg.sender` is\n', '   * the current NFT owner, or an authorized operator of the current owner.\n', '   * @param _approved The new approved NFT controller.\n', '   * @param _tokenId The NFT to approve.\n', '   */\n', '  function approve(\n', '    address _approved,\n', '    uint256 _tokenId\n', '  )\n', '    external;\n', '\n', '  /**\n', '   * @dev Enables or disables approval for a third party ("operator") to manage all of\n', "   * `msg.sender`'s assets. It also emits the ApprovalForAll event.\n", '   * @notice The contract MUST allow multiple operators per owner.\n', '   * @param _operator Address to add to the set of authorized operators.\n', '   * @param _approved True if the operators is approved, false to revoke approval.\n', '   */\n', '  function setApprovalForAll(\n', '    address _operator,\n', '    bool _approved\n', '  )\n', '    external;\n', '\n', '  /**\n', '   * @dev Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are\n', '   * considered invalid, and this function throws for queries about the zero address.\n', '   * @param _owner Address for whom to query the balance.\n', '   * @return Balance of _owner.\n', '   */\n', '  function balanceOf(\n', '    address _owner\n', '  )\n', '    external\n', '    view\n', '    returns (uint256);\n', '\n', '  /**\n', '   * @dev Returns the address of the owner of the NFT. NFTs assigned to zero address are considered\n', '   * invalid, and queries about them do throw.\n', '   * @param _tokenId The identifier for an NFT.\n', '   * @return Address of _tokenId owner.\n', '   */\n', '  function ownerOf(\n', '    uint256 _tokenId\n', '  )\n', '    external\n', '    view\n', '    returns (address);\n', '    \n', '  /**\n', '   * @dev Get the approved address for a single NFT.\n', '   * @notice Throws if `_tokenId` is not a valid NFT.\n', '   * @param _tokenId The NFT to find the approved address for.\n', '   * @return Address that _tokenId is approved for. \n', '   */\n', '  function getApproved(\n', '    uint256 _tokenId\n', '  )\n', '    external\n', '    view\n', '    returns (address);\n', '\n', '  /**\n', '   * @dev Returns true if `_operator` is an approved operator for `_owner`, false otherwise.\n', '   * @param _owner The address that owns the NFTs.\n', '   * @param _operator The address that acts on behalf of the owner.\n', '   * @return True if approved for all, false otherwise.\n', '   */\n', '  function isApprovedForAll(\n', '    address _owner,\n', '    address _operator\n', '  )\n', '    external\n', '    view\n', '    returns (bool);\n', '\n', '}\n', '\n', '/**\n', ' * @dev Math operations with safety checks that throw on error. This contract is based on the \n', ' * source code at: \n', ' * https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol.\n', ' */\n', 'library SafeMath\n', '{\n', '\n', '  /**\n', '   * @dev Error constants.\n', '   */\n', '  string constant OVERFLOW = "008001";\n', '  string constant SUBTRAHEND_GREATER_THEN_MINUEND = "008002";\n', '  string constant DIVISION_BY_ZERO = "008003";\n', '\n', '  /**\n', '   * @dev Multiplies two numbers, reverts on overflow.\n', '   * @param _factor1 Factor number.\n', '   * @param _factor2 Factor number.\n', '   * @return The product of the two factors.\n', '   */\n', '  function mul(\n', '    uint256 _factor1,\n', '    uint256 _factor2\n', '  )\n', '    internal\n', '    pure\n', '    returns (uint256 product)\n', '  {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_factor1 == 0)\n', '    {\n', '      return 0;\n', '    }\n', '\n', '    product = _factor1 * _factor2;\n', '    require(product / _factor1 == _factor2, OVERFLOW);\n', '  }\n', '\n', '  /**\n', '   * @dev Integer division of two numbers, truncating the quotient, reverts on division by zero.\n', '   * @param _dividend Dividend number.\n', '   * @param _divisor Divisor number.\n', '   * @return The quotient.\n', '   */\n', '  function div(\n', '    uint256 _dividend,\n', '    uint256 _divisor\n', '  )\n', '    internal\n', '    pure\n', '    returns (uint256 quotient)\n', '  {\n', '    // Solidity automatically asserts when dividing by 0, using all gas.\n', '    require(_divisor > 0, DIVISION_BY_ZERO);\n', '    quotient = _dividend / _divisor;\n', "    // assert(_dividend == _divisor * quotient + _dividend % _divisor); // There is no case in which this doesn't hold.\n", '  }\n', '\n', '  /**\n', '   * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '   * @param _minuend Minuend number.\n', '   * @param _subtrahend Subtrahend number.\n', '   * @return Difference.\n', '   */\n', '  function sub(\n', '    uint256 _minuend,\n', '    uint256 _subtrahend\n', '  )\n', '    internal\n', '    pure\n', '    returns (uint256 difference)\n', '  {\n', '    require(_subtrahend <= _minuend, SUBTRAHEND_GREATER_THEN_MINUEND);\n', '    difference = _minuend - _subtrahend;\n', '  }\n', '\n', '  /**\n', '   * @dev Adds two numbers, reverts on overflow.\n', '   * @param _addend1 Number.\n', '   * @param _addend2 Number.\n', '   * @return Sum.\n', '   */\n', '  function add(\n', '    uint256 _addend1,\n', '    uint256 _addend2\n', '  )\n', '    internal\n', '    pure\n', '    returns (uint256 sum)\n', '  {\n', '    sum = _addend1 + _addend2;\n', '    require(sum >= _addend1, OVERFLOW);\n', '  }\n', '\n', '  /**\n', '    * @dev Divides two numbers and returns the remainder (unsigned integer modulo), reverts when\n', '    * dividing by zero.\n', '    * @param _dividend Number.\n', '    * @param _divisor Number.\n', '    * @return Remainder.\n', '    */\n', '  function mod(\n', '    uint256 _dividend,\n', '    uint256 _divisor\n', '  )\n', '    internal\n', '    pure\n', '    returns (uint256 remainder) \n', '  {\n', '    require(_divisor != 0, DIVISION_BY_ZERO);\n', '    remainder = _dividend % _divisor;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Contract for setting abilities.\n', ' * @dev For optimization purposes the abilities are represented as a bitfield. Maximum number of\n', ' * abilities is therefore 256. This is an example(for simplicity is made for max 8 abilities) of how\n', ' * this works. \n', ' * 00000001 Ability A - number representation 1\n', ' * 00000010 Ability B - number representation 2\n', ' * 00000100 Ability C - number representation 4\n', ' * 00001000 Ability D - number representation 8\n', ' * 00010000 Ability E - number representation 16\n', ' * etc ... \n', ' * To grant abilities B and C, we would need a bitfield of 00000110 which is represented by number\n', ' * 6, in other words, the sum of abilities B and C. The same concept works for revoking abilities\n', ' * and checking if someone has multiple abilities.\n', ' */\n', 'contract Abilitable\n', '{\n', '  using SafeMath for uint;\n', '\n', '  /**\n', '   * @dev Error constants.\n', '   */\n', '  string constant NOT_AUTHORIZED = "017001";\n', '  string constant ONE_ZERO_ABILITY_HAS_TO_EXIST = "017002";\n', '  string constant INVALID_INPUT = "017003";\n', '\n', '  /**\n', '   * @dev Ability 1 is a reserved ability. It is an ability to grant or revoke abilities. \n', '   * There can be minimum of 1 address with ability 1.\n', '   * Other abilities are determined by implementing contract.\n', '   */\n', '  uint8 constant ABILITY_TO_MANAGE_ABILITIES = 1;\n', '\n', '  /**\n', '   * @dev Maps address to ability ids.\n', '   */\n', '  mapping(address => uint256) public addressToAbility;\n', '\n', '  /**\n', '   * @dev Count of zero ability addresses.\n', '   */\n', '  uint256 private zeroAbilityCount;\n', '\n', '  /**\n', '   * @dev Emits when an address is granted an ability.\n', '   * @param _target Address to which we are granting abilities.\n', '   * @param _abilities Number representing bitfield of abilities we are granting.\n', '   */\n', '  event GrantAbilities(\n', '    address indexed _target,\n', '    uint256 indexed _abilities\n', '  );\n', '\n', '  /**\n', '   * @dev Emits when an address gets an ability revoked.\n', '   * @param _target Address of which we are revoking an ability.\n', '   * @param _abilities Number representing bitfield of abilities we are revoking.\n', '   */\n', '  event RevokeAbilities(\n', '    address indexed _target,\n', '    uint256 indexed _abilities\n', '  );\n', '\n', '  /**\n', '   * @dev Guarantees that msg.sender has certain abilities.\n', '   */\n', '  modifier hasAbilities(\n', '    uint256 _abilities\n', '  ) \n', '  {\n', '    require(_abilities > 0, INVALID_INPUT);\n', '    require(\n', '      (addressToAbility[msg.sender] & _abilities) == _abilities,\n', '      NOT_AUTHORIZED\n', '    );\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Contract constructor.\n', '   * Sets ABILITY_TO_MANAGE_ABILITIES ability to the sender account.\n', '   */\n', '  constructor()\n', '    public\n', '  {\n', '    addressToAbility[msg.sender] = ABILITY_TO_MANAGE_ABILITIES;\n', '    zeroAbilityCount = 1;\n', '    emit GrantAbilities(msg.sender, ABILITY_TO_MANAGE_ABILITIES);\n', '  }\n', '\n', '  /**\n', '   * @dev Grants specific abilities to specified address.\n', '   * @param _target Address to grant abilities to.\n', '   * @param _abilities Number representing bitfield of abilities we are granting.\n', '   */\n', '  function grantAbilities(\n', '    address _target,\n', '    uint256 _abilities\n', '  )\n', '    external\n', '    hasAbilities(ABILITY_TO_MANAGE_ABILITIES)\n', '  {\n', '    addressToAbility[_target] |= _abilities;\n', '\n', '    if((_abilities & ABILITY_TO_MANAGE_ABILITIES) == ABILITY_TO_MANAGE_ABILITIES)\n', '    {\n', '      zeroAbilityCount = zeroAbilityCount.add(1);\n', '    }\n', '    emit GrantAbilities(_target, _abilities);\n', '  }\n', '\n', '  /**\n', '   * @dev Unassigns specific abilities from specified address.\n', '   * @param _target Address of which we revoke abilites.\n', '   * @param _abilities Number representing bitfield of abilities we are revoking.\n', '   */\n', '  function revokeAbilities(\n', '    address _target,\n', '    uint256 _abilities\n', '  )\n', '    external\n', '    hasAbilities(ABILITY_TO_MANAGE_ABILITIES)\n', '  {\n', '    addressToAbility[_target] &= ~_abilities;\n', '    if((_abilities & 1) == 1)\n', '    {\n', '      require(zeroAbilityCount > 1, ONE_ZERO_ABILITY_HAS_TO_EXIST);\n', '      zeroAbilityCount--;\n', '    }\n', '    emit RevokeAbilities(_target, _abilities);\n', '  }\n', '\n', '  /**\n', '   * @dev Check if an address has a specific ability. Throws if checking for 0.\n', '   * @param _target Address for which we want to check if it has a specific abilities.\n', '   * @param _abilities Number representing bitfield of abilities we are checking.\n', '   */\n', '  function isAble(\n', '    address _target,\n', '    uint256 _abilities\n', '  )\n', '    external\n', '    view\n', '    returns (bool)\n', '  {\n', '    require(_abilities > 0, INVALID_INPUT);\n', '    return (addressToAbility[_target] & _abilities) == _abilities;\n', '  }\n', '  \n', '}\n', '\n', '/** \n', ' * @title NFTokenTransferProxy - Transfers none-fundgible tokens on behalf of contracts that have \n', ' * been approved via decentralized governance.\n', ' * @dev based on:https://github.com/0xProject/contracts/blob/master/contracts/TokenTransferProxy.sol\n', ' */\n', 'contract NFTokenSafeTransferProxy is \n', '  Proxy,\n', '  Abilitable \n', '{\n', '\n', '  /**\n', '   * @dev List of abilities:\n', '   * 2 - Ability to execute. \n', '   */\n', '  uint8 constant ABILITY_TO_EXECUTE = 2;\n', '\n', '  /**\n', '   * @dev Transfers a NFT.\n', '   * @param _target Address of NFT contract.\n', '   * @param _a Address from which the NFT will be sent.\n', '   * @param _b Address to which the NFT will be sent.\n', '   * @param _c Id of the NFT being sent.\n', '   */\n', '  function execute(\n', '    address _target,\n', '    address _a,\n', '    address _b,\n', '    uint256 _c\n', '  )\n', '    external\n', '    hasAbilities(ABILITY_TO_EXECUTE)\n', '  {\n', '    ERC721(_target).safeTransferFrom(_a, _b, _c);\n', '  }\n', '  \n', '}']