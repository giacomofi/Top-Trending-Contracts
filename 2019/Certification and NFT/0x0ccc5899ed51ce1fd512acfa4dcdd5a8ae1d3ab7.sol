['pragma solidity 0.5.4;\n', '\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * @notice Renouncing to ownership will leave the contract without an owner.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract pDNADistributedRegistryInterface {\n', '  function getProperty(string memory _eGrid) public view returns (address property);\n', '  function owner() public view returns (address);\n', '}\n', '\n', 'contract CuratorsInterface {\n', '  function checkRole(address _operator, string memory _permission) public view;\n', '}\n', '\n', 'contract pDNA {\n', '  address public constant CURATORS_ADDRESS = 0x75375B37845792256F274875b345F35597d1C053;  // 0x0f5Ea0A652E851678Ebf77B69484bFcD31F9459B;\n', '  CuratorsInterface public curators = CuratorsInterface(CURATORS_ADDRESS);\n', '\n', '  address public constant PDNA_DISTRIBUTED_REGISTRY_ADDRESS = 0xf8D03aE98997B7d58A69Db3B98a77AE6819Ff39b;  // 0xEC8bE1A5630364292E56D01129E8ee8A9578d7D8;\n', '  pDNADistributedRegistryInterface public registry = pDNADistributedRegistryInterface(PDNA_DISTRIBUTED_REGISTRY_ADDRESS);\n', '\n', '  string public name;\n', '  string public symbol;\n', '\n', '  mapping(string => bytes32) private files;\n', '\n', '  event FilePut(address indexed curator, bytes32 indexed hash, string name);\n', '  event FileRemoved(address indexed curator, bytes32 indexed hash, string name);\n', '\n', '  modifier isValid() {\n', '    require(registry.getProperty(name) == address(this), "invalid pDNA");\n', '    _;\n', '  }\n', '\n', '  constructor(string memory _eGrid, string memory _grundstuck) public {\n', '    name = _eGrid;\n', '    symbol = _grundstuck;\n', '  }\n', '\n', '  function elea() public view returns (address) {\n', '    return registry.owner();\n', '  }\n', '\n', '  function getFile(string memory _name) public view returns (bytes32) {\n', '    return files[_name];\n', '  }\n', '\n', '  function removeFile(string memory _name) public isValid {\n', '    curators.checkRole(msg.sender, "authorized");\n', '\n', '    bytes32 hash = files[_name];\n', '    require(hash != bytes32(0));\n', '\n', '    files[_name] = bytes32(0);\n', '\n', '    emit FileRemoved(msg.sender, hash, _name);\n', '  }\n', '\n', '  function putFile(bytes32 _hash, string memory _name) public isValid {\n', '    curators.checkRole(msg.sender, "authorized");\n', '\n', '    files[_name] = _hash;\n', '\n', '    emit FilePut(msg.sender, _hash, _name);\n', '  }\n', '}']