['pragma solidity ^0.5.0;\n', '\n', '// Ethfinex Voting Manager - relaunch 25 April 2019\n', '\n', '/*\n', '    Copyright 2016, Jordi Baylina\n', '\n', '    This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '    This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '\n', '    You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', ' */\n', '\n', '/// @title MiniMeToken Contract\n', '/// @author Jordi Baylina\n', "/// @dev This token contract's goal is to make it easy for anyone to clone this\n", "///  token using the token distribution at a given block, this will allow DAO's\n", '///  and DApps to upgrade their features in a decentralized manner without\n', '///  affecting the original token\n', '/// @dev It is ERC20 compliant, but still needs to under go further testing.\n', '\n', 'contract Controlled {\n', '    /// @notice The address of the controller is the only address that can call\n', '    ///  a function with this modifier\n', '    modifier onlyController { require(msg.sender == controller); _; }\n', '\n', '    address public controller;\n', '\n', '    constructor() public { controller = msg.sender;}\n', '\n', '    /// @notice Changes the controller of the contract\n', '    /// @param _newController The new controller of the contract\n', '    function changeController(address _newController) public onlyController {\n', '        controller = _newController;\n', '    }\n', '}\n', '\n', '\n', 'contract TokenController {\n', '    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n', '    /// @param _owner The address that sent the ether to create tokens\n', '    /// @return True if the ether is accepted, false if it throws\n', '    function proxyPayment(address _owner) public payable returns(bool);\n', '\n', '    /// @notice Notifies the controller about a token transfer allowing the\n', '    ///  controller to react if desired\n', '    /// @param _from The origin of the transfer\n', '    /// @param _to The destination of the transfer\n', '    /// @param _amount The amount of the transfer\n', '    /// @return False if the controller does not authorize the transfer\n', '    function onTransfer(address _from, address _to, uint _amount) public returns(bool);\n', '\n', '    /// @notice Notifies the controller about an approval allowing the\n', '    ///  controller to react if desired\n', '    /// @param _owner The address that calls `approve()`\n', '    /// @param _spender The spender in the `approve()` call\n', '    /// @param _amount The amount in the `approve()` call\n', '    /// @return False if the controller does not authorize the approval\n', '    function onApprove(address _owner, address _spender, uint _amount) public\n', '        returns(bool);\n', '\n', '    /// @notice Notifies the controller about a token burn\n', '    /// @param _owner The address of the burner\n', '    /// @param _amount The amount to burn\n', '    /// @return False if the controller does not authorize the burn\n', '    function onBurn(address payable _owner, uint _amount) public returns(bool);\n', '}\n', '\n', '\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 _amount, address _token, bytes memory _data) public;\n', '}\n', '\n', '/// @dev The actual token contract, the default controller is the msg.sender\n', '///  that deploys the contract, so usually this token will be deployed by a\n', '///  token controller contract, which Giveth will call a "Campaign"\n', '/// @dev The actual token contract, the default controller is the msg.sender\n', '///  that deploys the contract, so usually this token will be deployed by a\n', '///  token controller contract, which Giveth will call a "Campaign"\n', 'contract MiniMeToken is Controlled {\n', '\n', "    string public name;                //The Token's name: e.g. DigixDAO Tokens\n", '    uint8 public decimals;             //Number of decimals of the smallest unit\n', '    string public symbol;              //An identifier: e.g. REP\n', "    string public version = 'EFX_0.1'; //An arbitrary versioning scheme\n", '\n', '\n', '    /// @dev `Checkpoint` is the structure that attaches a block number to a\n', '    ///  given value, the block number attached is the one that last changed the\n', '    ///  value\n', '    struct  Checkpoint {\n', '\n', '        // `fromBlock` is the block number that the value was generated from\n', '        uint128 fromBlock;\n', '\n', '        // `value` is the amount of tokens at a specific block number\n', '        uint128 value;\n', '    }\n', '\n', '    // `parentToken` is the Token address that was cloned to produce this token;\n', '    //  it will be 0x0 for a token that was not cloned\n', '    MiniMeToken public parentToken;\n', '\n', '    // `parentSnapShotBlock` is the block number from the Parent Token that was\n', '    //  used to determine the initial distribution of the Clone Token\n', '    uint public parentSnapShotBlock;\n', '\n', '    // `creationBlock` is the block number that the Clone Token was created\n', '    uint public creationBlock;\n', '\n', '    // `balances` is the map that tracks the balance of each address, in this\n', '    //  contract when the balance changes the block number that the change\n', '    //  occurred is also included in the map\n', '    mapping (address => Checkpoint[]) balances;\n', '\n', '    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    // Tracks the history of the `totalSupply` of the token\n', '    Checkpoint[] totalSupplyHistory;\n', '\n', '    // Flag that determines if the token is transferable or not.\n', '    bool public transfersEnabled;\n', '\n', '    // Tracks the history of the `pledgedFees` belonging to token holders\n', '    Checkpoint[] totalPledgedFeesHistory; // in wei\n', '\n', '    // The factory used to create new clone tokens\n', '    MiniMeTokenFactory public tokenFactory;\n', '\n', '////////////////\n', '// Constructor\n', '////////////////\n', '\n', '    /// @notice Constructor to create a MiniMeToken\n', '    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\n', '    ///  will create the Clone token contracts, the token factory needs to be\n', '    ///  deployed first\n', '    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\n', '    ///  new token\n', '    /// @param _parentSnapShotBlock Block of the parent token that will\n', '    ///  determine the initial distribution of the clone token, set to 0 if it\n', '    ///  is a new token\n', '    /// @param _tokenName Name of the new token\n', '    /// @param _decimalUnits Number of decimals of the new token\n', '    /// @param _tokenSymbol Token Symbol for the new token\n', '    /// @param _transfersEnabled If true, tokens will be able to be transferred\n', '    constructor(\n', '        address _tokenFactory,\n', '        address payable _parentToken,\n', '        uint _parentSnapShotBlock,\n', '        string memory _tokenName,\n', '        uint8 _decimalUnits,\n', '        string memory _tokenSymbol,\n', '        bool _transfersEnabled\n', '    ) public {\n', '        tokenFactory = MiniMeTokenFactory(_tokenFactory);\n', '        name = _tokenName;                                 // Set the name\n', '        decimals = _decimalUnits;                          // Set the decimals\n', '        symbol = _tokenSymbol;                             // Set the symbol\n', '        parentToken = MiniMeToken(_parentToken);\n', '        parentSnapShotBlock = _parentSnapShotBlock;\n', '        transfersEnabled = _transfersEnabled;\n', '        creationBlock = block.number;\n', '    }\n', '\n', '\n', '///////////////////\n', '// ERC20 Methods\n', '///////////////////\n', '\n', '    uint constant MAX_UINT = 2**256 - 1;\n', '\n', '    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _amount) public returns (bool success) {\n', '        require(transfersEnabled);\n', '        doTransfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n', '    ///  is approved by `_from`\n', '    /// @param _from The address holding the tokens being transferred\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return True if the transfer was successful\n', '    function transferFrom(address _from, address _to, uint256 _amount\n', '    ) public returns (bool success) {\n', '\n', '        // The controller of this contract can move tokens around at will,\n', '        //  this is important to recognize! Confirm that you trust the\n', '        //  controller of this contract, which in most situations should be\n', '        //  another open source smart contract or 0x0\n', '        if (msg.sender != controller) {\n', '            require(transfersEnabled);\n', '\n', '            // The standard ERC 20 transferFrom functionality\n', '            if (allowed[_from][msg.sender] < MAX_UINT) {\n', '                require(allowed[_from][msg.sender] >= _amount);\n', '                allowed[_from][msg.sender] -= _amount;\n', '            }\n', '        }\n', '        doTransfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /// @dev This is the actual transfer function in the token contract, it can\n', '    ///  only be called by other functions in this contract.\n', '    /// @param _from The address holding the tokens being transferred\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return True if the transfer was successful\n', '    function doTransfer(address _from, address _to, uint _amount\n', '    ) internal {\n', '\n', '           if (_amount == 0) {\n', '               emit Transfer(_from, _to, _amount);    // Follow the spec to louch the event when transfer 0\n', '               return;\n', '           }\n', '\n', '           require(parentSnapShotBlock < block.number);\n', '\n', '           // Do not allow transfer to 0x0 or the token contract itself\n', '           require((_to != address(0)) && (_to != address(this)));\n', '\n', '           // If the amount being transfered is more than the balance of the\n', '           //  account the transfer throws\n', '           uint256 previousBalanceFrom = balanceOfAt(_from, block.number);\n', '\n', '           require(previousBalanceFrom >= _amount);\n', '\n', '           // Alerts the token controller of the transfer\n', '           if (isContract(controller)) {\n', '               require(TokenController(controller).onTransfer(_from, _to, _amount));\n', '           }\n', '\n', '           // First update the balance array with the new value for the address\n', '           //  sending the tokens\n', '           updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\n', '\n', '           // Then update the balance array with the new value for the address\n', '           //  receiving the tokens\n', '           uint256 previousBalanceTo = balanceOfAt(_to, block.number);\n', '           require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n', '           updateValueAtNow(balances[_to], previousBalanceTo + _amount);\n', '\n', '           // An event to make the transfer easy to find on the blockchain\n', '           emit Transfer(_from, _to, _amount);\n', '\n', '    }\n', '\n', "    /// @param _owner The address that's balance is being requested\n", '    /// @return The balance of `_owner` at the current block\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balanceOfAt(_owner, block.number);\n', '    }\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n', '    ///  its behalf. This is a modified version of the ERC20 approve function\n', '    ///  to be a little bit safer\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _amount The amount of tokens to be approved for transfer\n', '    /// @return True if the approval was successful\n', '    function approve(address _spender, uint256 _amount) public returns (bool success) {\n', '        require(transfersEnabled);\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender,0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '        // Alerts the token controller of the approve function call\n', '        if (isContract(controller)) {\n', '            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\n', '        }\n', '\n', '        allowed[msg.sender][_spender] = _amount;\n', '        emit Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    /// @dev This function makes it easy to read the `allowed[]` map\n', '    /// @param _owner The address of the account that owns the token\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens of _owner that _spender is allowed\n', '    ///  to spend\n', '    function allowance(address _owner, address _spender\n', '    ) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n', '    ///  its behalf, and then a function is triggered in the contract that is\n', '    ///  being approved, `_spender`. This allows users to use their tokens to\n', '    ///  interact with contracts in one function call instead of two\n', '    /// @param _spender The address of the contract able to transfer the tokens\n', '    /// @param _amount The amount of tokens to be approved for transfer\n', '    /// @return True if the function call was successful\n', '    function approveAndCall(address _spender, uint256 _amount, bytes memory _extraData\n', '    ) public returns (bool success) {\n', '        require(approve(_spender, _amount));\n', '\n', '        ApproveAndCallFallBack(_spender).receiveApproval(\n', '            msg.sender,\n', '            _amount,\n', '            address(this),\n', '            _extraData\n', '        );\n', '\n', '        return true;\n', '    }\n', '\n', '    /// @dev This function makes it easy to get the total number of tokens\n', '    /// @return The total number of tokens\n', '    function totalSupply() public view returns (uint) {\n', '        return totalSupplyAt(block.number);\n', '    }\n', '\n', '\n', '////////////////\n', '// Query balance and totalSupply in History\n', '////////////////\n', '\n', '    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @param _blockNumber The block number when the balance is queried\n', '    /// @return The balance at `_blockNumber`\n', '    function balanceOfAt(address _owner, uint _blockNumber) public view\n', '        returns (uint) {\n', '\n', '        // These next few lines are used when the balance of the token is\n', '        //  requested before a check point was ever created for this token, it\n', '        //  requires that the `parentToken.balanceOfAt` be queried at the\n', '        //  genesis block for that token as this contains initial balance of\n', '        //  this token\n', '        if ((balances[_owner].length == 0)\n', '            || (balances[_owner][0].fromBlock > _blockNumber)) {\n', '            if (address(parentToken) != address(0)) {\n', '                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\n', '            } else {\n', '                // Has no parent\n', '                return 0;\n', '            }\n', '\n', '        // This will return the expected balance during normal situations\n', '        } else {\n', '            return getValueAt(balances[_owner], _blockNumber);\n', '        }\n', '    }\n', '\n', '    /// @notice Total amount of tokens at a specific `_blockNumber`.\n', '    /// @param _blockNumber The block number when the totalSupply is queried\n', '    /// @return The total amount of tokens at `_blockNumber`\n', '    function totalSupplyAt(uint _blockNumber) public view returns(uint) {\n', '\n', '        // These next few lines are used when the totalSupply of the token is\n', '        //  requested before a check point was ever created for this token, it\n', '        //  requires that the `parentToken.totalSupplyAt` be queried at the\n', '        //  genesis block for this token as that contains totalSupply of this\n', '        //  token at this block number.\n', '        if ((totalSupplyHistory.length == 0)\n', '            || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n', '            if (address(parentToken) != address(0)) {\n', '                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\n', '            } else {\n', '                return 0;\n', '            }\n', '\n', '        // This will return the expected totalSupply during normal situations\n', '        } else {\n', '            return getValueAt(totalSupplyHistory, _blockNumber);\n', '        }\n', '    }\n', '\n', '////////////////\n', '// Query pledgedFees // in wei\n', '////////////////\n', '\n', '   /// @dev This function makes it easy to get the total pledged fees\n', '   /// @return The total number of fees belonging to token holders\n', '   function totalPledgedFees() public view returns (uint) {\n', '       return totalPledgedFeesAt(block.number);\n', '   }\n', '\n', '   /// @notice Total amount of fees at a specific `_blockNumber`.\n', '   /// @param _blockNumber The block number when the totalPledgedFees is queried\n', '   /// @return The total amount of pledged fees at `_blockNumber`\n', '   function totalPledgedFeesAt(uint _blockNumber) public view returns(uint) {\n', '\n', '       // These next few lines are used when the totalPledgedFees of the token is\n', '       //  requested before a check point was ever created for this token, it\n', '       //  requires that the `parentToken.totalPledgedFeesAt` be queried at the\n', '       //  genesis block for this token as that contains totalPledgedFees of this\n', '       //  token at this block number.\n', '       if ((totalPledgedFeesHistory.length == 0)\n', '           || (totalPledgedFeesHistory[0].fromBlock > _blockNumber)) {\n', '           if (address(parentToken) != address(0)) {\n', '               return parentToken.totalPledgedFeesAt(min(_blockNumber, parentSnapShotBlock));\n', '           } else {\n', '               return 0;\n', '           }\n', '\n', '       // This will return the expected totalPledgedFees during normal situations\n', '       } else {\n', '           return getValueAt(totalPledgedFeesHistory, _blockNumber);\n', '       }\n', '   }\n', '\n', '////////////////\n', '// Pledge Fees To Token Holders or Reduce Pledged Fees // in wei\n', '////////////////\n', '\n', '   /// @notice Pledges fees to the token holders, later to be claimed by burning\n', '   /// @param _value The amount sent to the vault by controller, reserved for token holders\n', '   function pledgeFees(uint _value) public onlyController returns (bool) {\n', '       uint curTotalFees = totalPledgedFees();\n', '       require(curTotalFees + _value >= curTotalFees); // Check for overflow\n', '       updateValueAtNow(totalPledgedFeesHistory, curTotalFees + _value);\n', '       return true;\n', '   }\n', '\n', '   /// @notice Reduces pledged fees to the token holders, i.e. during upgrade or token burning\n', '   /// @param _value The amount of pledged fees which are being distributed to token holders, reducing liability\n', '   function reducePledgedFees(uint _value) public onlyController returns (bool) {\n', '       uint curTotalFees = totalPledgedFees();\n', '       require(curTotalFees >= _value);\n', '       updateValueAtNow(totalPledgedFeesHistory, curTotalFees - _value);\n', '       return true;\n', '   }\n', '\n', '////////////////\n', '// Clone Token Method\n', '////////////////\n', '\n', '    /// @notice Creates a new clone token with the initial distribution being\n', '    ///  this token at `_snapshotBlock`\n', '    /// @param _cloneTokenName Name of the clone token\n', '    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\n', '    /// @param _cloneTokenSymbol Symbol of the clone token\n', '    /// @param _snapshotBlock Block when the distribution of the parent token is\n', '    ///  copied to set the initial distribution of the new clone token;\n', '    ///  if the block is zero than the actual block, the current block is used\n', '    /// @param _transfersEnabled True if transfers are allowed in the clone\n', '    /// @return The address of the new MiniMeToken Contract\n', '    function createCloneToken(\n', '        string memory _cloneTokenName,\n', '        uint8 _cloneDecimalUnits,\n', '        string memory _cloneTokenSymbol,\n', '        uint _snapshotBlock,\n', '        bool _transfersEnabled\n', '        ) public returns(address) {\n', '        if (_snapshotBlock == 0) _snapshotBlock = block.number;\n', '        MiniMeToken cloneToken = tokenFactory.createCloneToken(\n', '            address(this),\n', '            _snapshotBlock,\n', '            _cloneTokenName,\n', '            _cloneDecimalUnits,\n', '            _cloneTokenSymbol,\n', '            _transfersEnabled\n', '            );\n', '\n', '        cloneToken.changeController(msg.sender);\n', '\n', '        // An event to make the token easy to find on the blockchain\n', '        emit NewCloneToken(address(cloneToken), _snapshotBlock);\n', '        return address(cloneToken);\n', '    }\n', '\n', '////////////////\n', '// Generate and destroy tokens\n', '////////////////\n', '\n', '    /// @notice Generates `_amount` tokens that are assigned to `_owner`\n', '    /// @param _owner The address that will be assigned the new tokens\n', '    /// @param _amount The quantity of tokens generated\n', '    /// @return True if the tokens are generated correctly\n', '    function generateTokens(address _owner, uint _amount\n', '    ) public onlyController returns (bool) {\n', '        uint curTotalSupply = totalSupply();\n', '        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n', '        uint previousBalanceTo = balanceOf(_owner);\n', '        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n', '        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n', '        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n', '        emit Transfer(address(0), _owner, _amount);\n', '        return true;\n', '    }\n', '\n', '\n', '    /// @notice Burns `_amount` tokens from `_owner`\n', '    /// @param _owner The address that will lose the tokens\n', '    /// @param _amount The quantity of tokens to burn\n', '    /// @return True if the tokens are burned correctly\n', '    function destroyTokens(address _owner, uint _amount\n', '    ) onlyController public returns (bool) {\n', '        uint curTotalSupply = totalSupply();\n', '        require(curTotalSupply >= _amount);\n', '        uint previousBalanceFrom = balanceOf(_owner);\n', '        require(previousBalanceFrom >= _amount);\n', '        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n', '        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n', '        emit Transfer(_owner, address(0), _amount);\n', '        return true;\n', '    }\n', '\n', '////////////////\n', '// Enable tokens transfers\n', '////////////////\n', '\n', '\n', '    /// @notice Enables token holders to transfer their tokens freely if true\n', '    /// @param _transfersEnabled True if transfers are allowed in the clone\n', '    function enableTransfers(bool _transfersEnabled) public onlyController {\n', '        transfersEnabled = _transfersEnabled;\n', '    }\n', '\n', '////////////////\n', '// Internal helper functions to query and set a value in a snapshot array\n', '////////////////\n', '\n', '    /// @dev `getValueAt` retrieves the number of tokens at a given block number\n', '    /// @param checkpoints The history of values being queried\n', '    /// @param _block The block number to retrieve the value at\n', '    /// @return The number of tokens being queried\n', '    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n', '    ) view internal returns (uint) {\n', '        if (checkpoints.length == 0) return 0;\n', '\n', '        // Shortcut for the actual value\n', '        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\n', '            return checkpoints[checkpoints.length-1].value;\n', '        if (_block < checkpoints[0].fromBlock) return 0;\n', '\n', '        // Binary search of the value in the array\n', '        uint min = 0;\n', '        uint max = checkpoints.length-1;\n', '        while (max > min) {\n', '            uint mid = (max + min + 1)/ 2;\n', '            if (checkpoints[mid].fromBlock<=_block) {\n', '                min = mid;\n', '            } else {\n', '                max = mid-1;\n', '            }\n', '        }\n', '        return checkpoints[min].value;\n', '    }\n', '\n', '    /// @dev `updateValueAtNow` used to update the `balances` map and the\n', '    ///  `totalSupplyHistory`\n', '    /// @param checkpoints The history of data being updated\n', '    /// @param _value The new number of tokens\n', '    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\n', '    ) internal  {\n', '        if ((checkpoints.length == 0)\n', '        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\n', '               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\n', '               newCheckPoint.fromBlock =  uint128(block.number);\n', '               newCheckPoint.value = uint128(_value);\n', '           } else {\n', '               Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\n', '               oldCheckPoint.value = uint128(_value);\n', '           }\n', '    }\n', '\n', '    /// @dev Internal function to determine if an address is a contract\n', '    /// @param _addr The address being queried\n', '    /// @return True if `_addr` is a contract\n', '    function isContract(address _addr) view internal returns(bool) {\n', '        uint size;\n', '        if (_addr == address(0)) return false;\n', '        assembly {\n', '            size := extcodesize(_addr)\n', '        }\n', '        return size>0;\n', '    }\n', '\n', '    /// @dev Helper function to return a min betwen the two uints\n', '    function min(uint a, uint b) pure internal returns (uint) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', "    /// @notice The fallback function: If the contract's controller has not been\n", '    ///  set to 0, then the `proxyPayment` method is called which relays the\n', '    ///  ether and creates tokens as described in the token controller contract\n', '    function () external payable {\n', '        require(isContract(controller));\n', '        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\n', '    }\n', '\n', '\n', '////////////////\n', '// Events\n', '////////////////\n', '    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n', '    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\n', '    event Approval(\n', '        address indexed _owner,\n', '        address indexed _spender,\n', '        uint256 _amount\n', '        );\n', '\n', '}\n', '\n', '\n', '////////////////\n', '// MiniMeTokenFactory\n', '////////////////\n', '\n', '/// @dev This contract is used to generate clone contracts from a contract.\n', '///  In solidity this is the way to create a contract from a contract of the\n', '///  same class\n', 'contract MiniMeTokenFactory {\n', '\n', '    /// @notice Update the DApp by creating a new token with new functionalities\n', '    ///  the msg.sender becomes the controller of this clone token\n', '    /// @param _parentToken Address of the token being cloned\n', '    /// @param _snapshotBlock Block of the parent token that will\n', '    ///  determine the initial distribution of the clone token\n', '    /// @param _tokenName Name of the new token\n', '    /// @param _decimalUnits Number of decimals of the new token\n', '    /// @param _tokenSymbol Token Symbol for the new token\n', '    /// @param _transfersEnabled If true, tokens will be able to be transferred\n', '    /// @return The address of the new token contract\n', '    function createCloneToken(\n', '        address payable _parentToken,\n', '        uint _snapshotBlock,\n', '        string memory _tokenName,\n', '        uint8 _decimalUnits,\n', '        string memory _tokenSymbol,\n', '        bool _transfersEnabled\n', '    ) public returns (MiniMeToken) {\n', '        MiniMeToken newToken = new MiniMeToken(\n', '            address(this),\n', '            _parentToken,\n', '            _snapshotBlock,\n', '            _tokenName,\n', '            _decimalUnits,\n', '            _tokenSymbol,\n', '            _transfersEnabled\n', '            );\n', '\n', '        newToken.changeController(msg.sender);\n', '        return newToken;\n', '    }\n', '  }\n', '\n', '\n', '\n', '/*\n', '    Copyright 2017, Will Harborne (Ethfinex)\n', '*/\n', '\n', 'contract DestructibleMiniMeToken is MiniMeToken {\n', '\n', '    address payable public terminator;\n', '\n', '    constructor(\n', '        address _tokenFactory,\n', '        address payable _parentToken,\n', '        uint _parentSnapShotBlock,\n', '        string memory _tokenName,\n', '        uint8 _decimalUnits,\n', '        string memory _tokenSymbol,\n', '        bool _transfersEnabled,\n', '        address payable _terminator\n', '    ) public MiniMeToken(\n', '        _tokenFactory,\n', '        _parentToken,\n', '        _parentSnapShotBlock,\n', '        _tokenName,\n', '        _decimalUnits,\n', '        _tokenSymbol,\n', '        _transfersEnabled\n', '    ) {\n', '        terminator = _terminator;\n', '    }\n', '\n', '    function recycle() public {\n', '        require(msg.sender == terminator);\n', '        selfdestruct(terminator);\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract DestructibleMiniMeTokenFactory {\n', '\n', '    /// @notice Update the DApp by creating a new token with new functionalities\n', '    ///  the msg.sender becomes the controller of this clone token\n', '    /// @param _parentToken Address of the token being cloned\n', '    /// @param _snapshotBlock Block of the parent token that will\n', '    ///  determine the initial distribution of the clone token\n', '    /// @param _tokenName Name of the new token\n', '    /// @param _decimalUnits Number of decimals of the new token\n', '    /// @param _tokenSymbol Token Symbol for the new token\n', '    /// @param _transfersEnabled If true, tokens will be able to be transferred\n', '    /// @return The address of the new token contract\n', '    function createDestructibleCloneToken(\n', '        address payable _parentToken,\n', '        uint _snapshotBlock,\n', '        string memory _tokenName,\n', '        uint8 _decimalUnits,\n', '        string memory _tokenSymbol,\n', '        bool _transfersEnabled\n', '    ) public returns (DestructibleMiniMeToken) {\n', '        DestructibleMiniMeToken newToken = new DestructibleMiniMeToken(\n', '            address(this),\n', '            _parentToken,\n', '            _snapshotBlock,\n', '            _tokenName,\n', '            _decimalUnits,\n', '            _tokenSymbol,\n', '            _transfersEnabled,\n', '            msg.sender\n', '        );\n', '\n', '        newToken.changeController(msg.sender);\n', '        return newToken;\n', '    }\n', '}\n', '\n', '\n', 'contract Ownable {\n', '\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/*\n', '    Copyright 2018, Will Harborne @ Ethfinex\n', '*/\n', '\n', '/// @title TokenListingManager Contract\n', '/// @author Will Harborne @ Ethfinex\n', 'contract TokenListingManager is Ownable {\n', '\n', '    address public constant NECTAR_TOKEN = 0xCc80C051057B774cD75067Dc48f8987C4Eb97A5e;\n', '    address public constant TOKEN_FACTORY = 0x8936131A81F29205EeDDec486f401A8A0aFAb15A;\n', '    uint public constant MAX_CANDIDATES = 20;\n', '\n', '    struct TokenProposal {\n', '        address[] consideredTokens;\n', '        uint startBlock;\n', '        uint startTime;\n', '        uint duration;\n', '        DestructibleMiniMeToken votingToken;\n', '        uint[] yesVotes;\n', '        // criteria values\n', '        // 0. only first one win the vote;\n', '        // 1. top N (number in extraData) win the vote;\n', '        // 2. All over N (number in extra data) votes win the vote;\n', '        uint criteria;\n', '        uint extraData;\n', '        bool concluded;\n', '        mapping(address => mapping(address => uint256)) votesForToken;\n', '    }\n', '\n', '    TokenProposal[] public tokenBatches;\n', '\n', '    DestructibleMiniMeTokenFactory public tokenFactory;\n', '    address payable public nectarToken;\n', '    mapping(address => bool) public admins;\n', '\n', '    mapping(address => bool) public isWinner;\n', '    mapping(address => uint256) public winningVotes;\n', '    mapping(address => uint) public proposalWhenTokenWon;\n', '\n', '    modifier onlyAdmins() {\n', '        require(isAdmin(msg.sender));\n', '        _;\n', '    }\n', '\n', '    constructor(address _tokenFactory, address payable _nectarToken) public {\n', '        tokenFactory = DestructibleMiniMeTokenFactory(_tokenFactory);\n', '        nectarToken = _nectarToken;\n', '        admins[msg.sender] = true;\n', '    }\n', '\n', '    /// @notice Admins are able to approve proposal that someone submitted\n', '    /// @param _tokens the list of tokens in consideration during this period\n', '    /// @param _duration number of days for vote token to exist. Second half is for voting.\n', '    /// @param _criteria number that determines how winner is selected\n', '    /// @param _extraData extra data for criteria parameter\n', '    function startTokenVotes(address[] memory _tokens, uint _duration, uint _criteria, uint _extraData) public onlyAdmins {\n', '        require(_tokens.length <= MAX_CANDIDATES);\n', '\n', '        if (_criteria == 1) {\n', '            // in other case all tokens would be winners\n', '            require(_extraData < _tokens.length);\n', '        }\n', '\n', '        uint _proposalId = tokenBatches.length;\n', '        if (_proposalId > 0) {\n', '          endTokenVote(_proposalId - 1);\n', '        }\n', '        tokenBatches.length++;\n', '        TokenProposal storage p = tokenBatches[_proposalId];\n', '        p.duration = _duration * (1 days);\n', '\n', '        p.consideredTokens = _tokens;\n', '        p.yesVotes = new uint[](_tokens.length);\n', '\n', '        p.votingToken = tokenFactory.createDestructibleCloneToken(\n', '                nectarToken,\n', '                getBlockNumber(),\n', '                appendUintToString("EfxTokenVotes-", _proposalId),\n', '                MiniMeToken(nectarToken).decimals(),\n', '                appendUintToString("EVT-", _proposalId),\n', '                true);\n', '\n', '        p.startTime = now;\n', '        p.startBlock = getBlockNumber();\n', '        p.criteria = _criteria;\n', '        p.extraData = _extraData;\n', '        p.concluded = false;\n', '\n', '        emit NewTokens(_proposalId);\n', '    }\n', '\n', '\n', '    /// @notice Anyone can end the vote if it has completed\n', '    function endTokenVote(uint _proposalId) public returns(bool) {\n', '\n', '        require(_proposalId <= tokenBatches.length);\n', '\n', '        TokenProposal storage op = tokenBatches[_proposalId];\n', '        require(op.startTime + op.duration < now);\n', '        if (op.concluded) {\n', '          return true;\n', '        }\n', '\n', '        uint[] memory _previousWinnerMap = getWinnerIndices(_proposalId);\n', '        for (uint i=0; i < _previousWinnerMap.length; i++) {\n', '            isWinner[op.consideredTokens[_previousWinnerMap[i]]] = true;\n', '            winningVotes[op.consideredTokens[_previousWinnerMap[i]]] = op.yesVotes[_previousWinnerMap[i]];\n', '            proposalWhenTokenWon[op.consideredTokens[_previousWinnerMap[i]]] = _proposalId;\n', '        }\n', '\n', '        DestructibleMiniMeToken(op.votingToken).recycle();\n', '        op.concluded = true;\n', '        return true;\n', '    }\n', '\n', '    /// @notice Vote for specific token with yes\n', "    /// @param _proposalId is the proposal's position in tokenBatches array\n", '    /// @param _tokenIndex is the position from 0-11 in the token array of the chosen token\n', '    function vote(uint _proposalId, uint _tokenIndex, uint _amount) public {\n', '        // voting only on the most recent set of proposed tokens\n', '        require(tokenBatches.length > 0);\n', '        require(_proposalId == tokenBatches.length - 1);\n', '        require(_tokenIndex < 12);\n', '\n', '        TokenProposal storage p = tokenBatches[_proposalId];\n', '\n', '        require(now > p.startTime + (p.duration / 2));\n', '        require(now < p.startTime + p.duration);\n', '\n', '        uint amount = DestructibleMiniMeToken(p.votingToken).balanceOf(msg.sender);\n', '        require(amount >= _amount);\n', '\n', '        uint weightedAmount = getFactor(_amount);\n', '\n', '        require(DestructibleMiniMeToken(p.votingToken).transferFrom(msg.sender, address(this), _amount));\n', '\n', '        tokenBatches[_proposalId].yesVotes[_tokenIndex] += weightedAmount;\n', '        p.votesForToken[tokenBatches[_proposalId].consideredTokens[_tokenIndex]][msg.sender] += weightedAmount;\n', '\n', '        emit Vote(_proposalId, msg.sender, tokenBatches[_proposalId].consideredTokens[_tokenIndex], weightedAmount);\n', '    }\n', '\n', '    function getFactor(uint _amount) view public returns (uint weighted) {\n', '      require(tokenBatches.length > 0);\n', '      uint currentRound = tokenBatches.length - 1;\n', '      TokenProposal memory p = tokenBatches[currentRound];\n', '      if ((now - p.startTime) < (p.duration / 2)) {\n', '          weighted = 2 * _amount;\n', '      } else {\n', '          weighted = 2 * _amount - ((now - ((p.duration / 2) + p.startTime)) * _amount / (p.duration / 2));\n', '      }\n', '    }\n', '\n', '    function getWinnerIndices(uint _proposalId) public view returns(uint[] memory winners) {\n', '        require(_proposalId < tokenBatches.length);\n', '\n', '        TokenProposal memory p = tokenBatches[_proposalId];\n', '\n', '        // there is only one winner in criteria 0\n', '        if (p.criteria == 0) {\n', '            winners = new uint[](1);\n', '            uint max = 0;\n', '\n', '            for (uint i=0; i < p.consideredTokens.length; i++) {\n', '                if (p.yesVotes[i] > p.yesVotes[max]) {\n', '                    max = i;\n', '                }\n', '            }\n', '\n', '            winners[0] = max;\n', '        }\n', '\n', '        // there is N winners in criteria 1\n', '        if (p.criteria == 1) {\n', '            uint[] memory indexesWithMostVotes = new uint[](p.extraData);\n', '            winners = new uint[](p.extraData);\n', '\n', '            // for each token we check if he has more votes than last one,\n', '            // if it has we put it in array and always keep array sorted\n', '            for (uint i = 0; i < p.consideredTokens.length; i++) {\n', '                uint last = p.extraData - 1;\n', '                if (p.yesVotes[i] > p.yesVotes[indexesWithMostVotes[last]]) {\n', '                    indexesWithMostVotes[last] = i;\n', '\n', '                    for (uint j=last; j > 0; j--) {\n', '                        if (p.yesVotes[indexesWithMostVotes[j]] > p.yesVotes[indexesWithMostVotes[j-1]]) {\n', '                            uint help = indexesWithMostVotes[j];\n', '                            indexesWithMostVotes[j] = indexesWithMostVotes[j-1];\n', '                            indexesWithMostVotes[j-1] = help;\n', '                        }\n', '                    }\n', '                }\n', '            }\n', '\n', '            for (uint i = 0; i < p.extraData; i++) {\n', '                winners[i] = indexesWithMostVotes[i];\n', '            }\n', '        }\n', '\n', '        // everybody who has over N votes are winners in criteria 2\n', '        if (p.criteria == 2) {\n', '            uint numOfTokens = 0;\n', '            for (uint i = 0; i < p.consideredTokens.length; i++) {\n', '                if (p.yesVotes[i] > p.extraData) {\n', '                    numOfTokens++;\n', '                }\n', '            }\n', '\n', '            winners = new uint[](numOfTokens);\n', '            uint count = 0;\n', '            for (uint i = 0; i < p.consideredTokens.length; i++) {\n', '                if (p.yesVotes[i] > p.extraData) {\n', '                    winners[count] = i;\n', '                    count++;\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    function getUserVotesForWinner(address _token, address _voter) external view returns(uint256) {\n', '      uint roundWhenWon = proposalWhenTokenWon[_token];\n', '      return tokenBatches[roundWhenWon].votesForToken[_token][_voter];\n', '    }\n', '\n', '    /// @notice Get number of proposals so you can know which is the last one\n', '    function numberOfProposals() public view returns(uint) {\n', '        return tokenBatches.length;\n', '    }\n', '\n', '    /// @notice Any admin is able to add new admin\n', '    /// @param _newAdmin Address of new admin\n', '    function addAdmin(address _newAdmin) public onlyAdmins {\n', '        admins[_newAdmin] = true;\n', '    }\n', '\n', '    /// @notice Only owner is able to remove admin\n', '    /// @param _admin Address of current admin\n', '    function removeAdmin(address _admin) public onlyOwner {\n', '        admins[_admin] = false;\n', '    }\n', '\n', '    /// @notice Get data about specific proposal\n', '    /// @param _proposalId Id of proposal\n', '    function proposal(uint _proposalId) public view returns(\n', '        uint _startBlock,\n', '        uint _startTime,\n', '        uint _duration,\n', '        bool _active,\n', '        bool _finalized,\n', '        uint[] memory _votes,\n', '        address[] memory _tokens,\n', '        address _votingToken,\n', '        bool _hasBalance\n', '    ) {\n', '        require(_proposalId < tokenBatches.length);\n', '\n', '        TokenProposal memory p = tokenBatches[_proposalId];\n', '        _startBlock = p.startBlock;\n', '        _startTime = p.startTime;\n', '        _duration = p.duration;\n', '        _finalized = (_startTime+_duration < now);\n', '        _active = !_finalized && (p.startBlock < getBlockNumber());\n', '        _votes = p.yesVotes;\n', '        _tokens = p.consideredTokens;\n', '        _votingToken = address(p.votingToken);\n', '        _hasBalance = (_votingToken == address(0)) ? false : (DestructibleMiniMeToken(p.votingToken).balanceOf(msg.sender) > 0);\n', '    }\n', '\n', '    function isAdmin(address _admin) public view returns(bool) {\n', '        return admins[_admin];\n', '    }\n', '\n', '    function proxyPayment(address ) public payable returns(bool) {\n', '        return false;\n', '    }\n', '\n', '    function onTransfer(address, address, uint ) public pure returns(bool) {\n', '        return true;\n', '    }\n', '\n', '    function onApprove(address, address, uint ) public pure returns(bool) {\n', '        return true;\n', '    }\n', '\n', '    function getBlockNumber() internal view returns (uint) {\n', '        return block.number;\n', '    }\n', '\n', '    function appendUintToString(string memory inStr, uint _i) internal pure returns (string memory _str) {\n', '    if (_i == 0) {\n', '        return string(abi.encodePacked(inStr, "0"));\n', '    }\n', '    uint j = _i;\n', '    uint len;\n', '    while (j != 0) {\n', '        len++;\n', '        j /= 10;\n', '    }\n', '    bytes memory bstr = new bytes(len);\n', '    uint k = len - 1;\n', '    while (_i != 0) {\n', '        bstr[k--] = byte(uint8(48 + _i % 10));\n', '        _i /= 10;\n', '    }\n', '\n', '    return string(abi.encodePacked(inStr, string(bstr)));\n', '    }\n', '\n', '    event Vote(uint indexed idProposal, address indexed _voter, address chosenToken, uint amount);\n', '    event NewTokens(uint indexed idProposal);\n', '}']