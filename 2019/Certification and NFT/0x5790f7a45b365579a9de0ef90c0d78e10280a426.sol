['pragma solidity ^0.5.1;\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address who) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Multiplies two unsigned integers, reverts on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two unsigned integers, reverts on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '     * reverts when dividing by zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        require(token.transfer(to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        require(token.transferFrom(from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        require((value == 0) || (token.allowance(msg.sender, spender) == 0));\n', '        require(token.approve(spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        require(token.approve(spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n', '        require(token.approve(spender, newAllowance));\n', '    }\n', '}\n', '/**\n', ' * @title Helps contracts guard against reentrancy attacks.\n', ' * @author Remco Bloemen <remco@2?.com>, Eenae <alexey@mixbytes.io>\n', ' * @dev If you mark a function `nonReentrant`, you should also\n', ' * mark it `external`.\n', ' */\n', 'contract ReentrancyGuard {\n', '    /// @dev counter to allow mutex lock with only one SSTORE operation\n', '    uint256 private _guardCounter;\n', '\n', '    constructor () internal {\n', '        // The counter starts at one to prevent changing it from zero to a non-zero\n', '        // value, which is a more expensive operation.\n', '        _guardCounter = 1;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        _guardCounter += 1;\n', '        uint256 localCounter = _guardCounter;\n', '        _;\n', '        require(localCounter == _guardCounter);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * @notice Renouncing to ownership will leave the contract without an owner.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether. This contract implements\n', ' * such functionality in its most fundamental form and can be extended to provide additional\n', ' * functionality and/or custom behavior.\n', ' * The external interface represents the basic interface for purchasing tokens, and conform\n', ' * the base architecture for crowdsales. They are *not* intended to be modified / overridden.\n', ' * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n', " * the methods to add functionality. Consider using 'super' where appropriate to concatenate\n", ' * behavior.\n', ' */\n', 'contract Crowdsale is ReentrancyGuard, Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    \n', '    // The token being sold\n', '    IERC20 private _token;\n', '    // start ICO\n', '    uint256 public _startStage1;\n', '    uint256 public _startStage2;\n', '    // Address where funds are collected\n', '    address payable private _wallet;\n', '    uint256 public _maxPay;\n', '    uint256 public _minPay;\n', '\n', '    // How many token units a buyer gets per wei.\n', '    // The rate is the conversion between wei and the smallest and indivisible token unit.\n', '    // So, if you are using a rate of 1 with a ERC20Detailed token with 3 decimals called TOK\n', '    // 1 wei will give you 1 unit, or 0.001 TOK.\n', '    // token - EUR\n', '    uint256 private _rate; // 6 decimals\n', '\n', '    // Amount of wei raised\n', '    uint256 private _weiRaised;     \n', '    //whitelist\n', '    mapping (address => uint32) public whitelist;\n', '    //for startStage2\n', '    uint256   _totalNumberPayments = 0;\n', '    uint256   _numberPaidPayments = 0;\n', '    mapping(uint256 => address)  _paymentAddress;\n', '    mapping(uint256 => uint256)  _paymentDay;\n', '    mapping(uint256 => uint256)   _paymentValue;\n', '    mapping(uint256 => uint256)   _totalAmountDay;\n', '    mapping(uint256 => uint8)   _paymentFlag;\n', '    uint256 public  _amountTokensPerDay;\n', '    /**\n', '     * Event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param value weis paid for purchase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    constructor () public {\n', '        _startStage1 = 1554737400;\n', '        _startStage2 = 1555601401;\n', '        _rate = 224;\n', '        _wallet = 0x68A924EA85c96e74A05cf12465cB53702a560811;\n', '        _token = IERC20(0xC0D766017141dd4866738C1e704Be6feDc97B904);\n', '        _amountTokensPerDay = 1000000000000000000;\n', '        _maxPay = 1 * 280 ether;\n', '        _minPay = 1 * 5.6 ether;\n', '\n', '        require(_rate > 0);\n', '        require(_wallet != address(0));\n', '        require(address(_token) != address(0));\n', '        require(_startStage2 > _startStage1 + 1 * 10 days);\n', '    }\n', '    //  1 - allow, 0 - denied \n', '    function setWhiteList(address _address, uint32 _flag) public onlyOwner  {\n', '      whitelist[_address] = _flag;\n', '    }\n', '    // 1 - allow\n', '    function addAddressToWhiteList(address[] memory _addr) public onlyOwner {\n', '      for(uint256 i = 0; i < _addr.length; i++) {\n', '       whitelist[_addr[i]] = 1;\n', '      }\n', '    }\n', '    // 0 - denied \n', '    function subAddressToWhiteList(address[] memory _addr) public onlyOwner {\n', '      for(uint256 i = 0; i < _addr.length; i++) {\n', '        whitelist[_addr[i]] = 0;\n', '      }\n', '    } \n', '    \n', '    function setRate(uint256 rate) public onlyOwner  {\n', '        _rate = rate;\n', '    } \n', '    function setMaxPay(uint256 maxPay) public onlyOwner  {\n', '        _maxPay = maxPay;\n', '    }     \n', '    function setMinPay(uint256 minPay) public onlyOwner  {\n', '        _minPay = minPay;\n', '    }      \n', '    function _returnTokens(address wallet, uint256 value) public onlyOwner {\n', '        _token.transfer(wallet, value);\n', '    }  \n', '    /**\n', '     * @dev fallback function ***DO NOT OVERRIDE***\n', '     * Note that other contracts will transfer fund with a base gas stipend\n', '     * of 2300, which is not enough to call buyTokens. Consider calling\n', '     * buyTokens directly when purchasing tokens from a contract.\n', '     */\n', '    function () external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @return the token being sold.\n', '     */\n', '    function token() public view returns (IERC20) {\n', '        return _token;\n', '    }\n', '\n', '    /**\n', '     * @return the address where funds are collected.\n', '     */\n', '    function wallet() public view returns (address payable) {\n', '        return _wallet;\n', '    }\n', '\n', '    /**\n', '     * @return the number of token units a buyer gets per wei.\n', '     */\n', '    function rate() public view returns (uint256) {\n', '        return _rate;\n', '    }\n', '\n', '    /**\n', '     * @return the amount of wei raised.\n', '     */\n', '    function weiRaised() public view returns (uint256) {\n', '        return _weiRaised;\n', '    }\n', '\n', '    /**\n', '     * @dev low level token purchase ***DO NOT OVERRIDE***\n', "     * This function has a non-reentrancy guard, so it shouldn't be called by\n", '     * another `nonReentrant` function.\n', '     * @param beneficiary Recipient of the token purchase\n', '     */\n', '    function buyTokens(address beneficiary) public nonReentrant payable {\n', '        uint256 weiAmount;\n', '        uint256 tokens;\n', '        \n', '        weiAmount = msg.value;\n', '        \n', '        _preValidatePurchase(beneficiary, weiAmount);   \n', '      \n', '        if (now >= _startStage1 && now < _startStage2){\n', '          require(whitelist[msg.sender] == 1);\n', '          // calculate token amount to be created\n', '          tokens = _getTokenAmount(weiAmount);\n', '\n', '          // update state\n', '          _weiRaised = _weiRaised.add(weiAmount);\n', '\n', '          _processPurchase(beneficiary, tokens);\n', '          emit TokensPurchased(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '          _forwardFunds();\n', '        }\n', '        if (now >= _startStage2 && now < _startStage2 + 1 * 1 seconds){\n', '          _totalNumberPayments = _totalNumberPayments + 1; \n', '          _paymentAddress[_totalNumberPayments] = msg.sender;\n', '          _paymentValue[_totalNumberPayments] = msg.value;\n', '          _paymentDay[_totalNumberPayments] = _getDayNumber();\n', '          _totalAmountDay[_getDayNumber()] = _totalAmountDay[_getDayNumber()] + msg.value;\n', '          _forwardFunds();\n', '        }\n', '        \n', '    }\n', '    function makePayment(uint256 numberPayments) public onlyOwner{\n', '        address addressParticipant;\n', '        uint256 paymentValue;\n', '        uint256 dayNumber; \n', '        uint256 totalPaymentValue;\n', '        uint256 tokensAmount;\n', '        if (numberPayments > _totalNumberPayments.sub(_numberPaidPayments)){\n', '          numberPayments = _totalNumberPayments.sub(_numberPaidPayments);  \n', '        }\n', '        uint256 startNumber = _numberPaidPayments.add(1);\n', '        uint256 endNumber = _numberPaidPayments.add(numberPayments);\n', '        for (uint256 i = startNumber; i <= endNumber; ++i) {\n', '          if (_paymentFlag[i] != 1){\n', '            dayNumber = _paymentDay[i];\n', '            if (_getDayNumber() > dayNumber){   \n', '              addressParticipant = _paymentAddress[i];\n', '              paymentValue = _paymentValue[i];\n', '              totalPaymentValue = _totalAmountDay[dayNumber];\n', '              tokensAmount = _amountTokensPerDay.mul(paymentValue).div(totalPaymentValue);\n', '              _token.safeTransfer(addressParticipant, tokensAmount);\n', '              _paymentFlag[i] = 1;\n', '              _numberPaidPayments = _numberPaidPayments + 1;\n', '            }\n', '          }\n', '        }    \n', '    }\n', '    /**\n', '     * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met.\n', '     * Use `super` in contracts that inherit from Crowdsale to extend their validations.\n', "     * Example from CappedCrowdsale.sol's _preValidatePurchase method:\n", '     *     super._preValidatePurchase(beneficiary, weiAmount);\n', '     *     require(weiRaised().add(weiAmount) <= cap);\n', '     * @param beneficiary Address performing the token purchase\n', '     * @param weiAmount Value in wei involved in the purchase\n', '     */ \n', '    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\n', '        require(beneficiary != address(0));\n', '        require(weiAmount != 0);\n', '        require(weiAmount >= _minPay); \n', '        require(weiAmount <= _maxPay);\n', '        require(now >= _startStage1 && now <= _startStage2 + 1 * 1 seconds);\n', '        \n', '    }\n', '    function _getAmountUnpaidPayments() public view returns (uint256){\n', '        return _totalNumberPayments.sub(_numberPaidPayments);\n', '    }    \n', '    function _getDayNumber() internal view returns (uint256){\n', '        return ((now.add(1 seconds)).sub(_startStage2)).div(1 seconds);\n', '    }\n', '\n', '    /**\n', '     * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends\n', '     * its tokens.\n', '     * @param beneficiary Address performing the token purchase\n', '     * @param tokenAmount Number of tokens to be emitted\n', '     */\n', '    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\n', '        _token.safeTransfer(beneficiary, tokenAmount);\n', '    }\n', '\n', '    /**\n', "     * @dev Executed when a purchase has been validated and is ready to be executed. Doesn't necessarily emit/send\n", '     * tokens.\n', '     * @param beneficiary Address receiving the tokens\n', '     * @param tokenAmount Number of tokens to be purchased\n', '     */\n', '    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {\n', '        _deliverTokens(beneficiary, tokenAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Override to extend the way in which ether is converted to tokens.\n', '     * @param weiAmount Value in wei to be converted into tokens\n', '     * @return Number of tokens that can be purchased with the specified _weiAmount\n', '     */\n', '    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\n', '        // tokensAmount = weiAmount.mul(_rateETHEUR).mul(10000).div(_rate);\n', '       // return weiAmount.mul(_rate);\n', '           uint256 bonus;\n', '    if (now >= _startStage1 && now < _startStage1 + 1 * 10 days){\n', '      bonus = 40;    \n', '    }\n', '      return weiAmount.mul(1000000).div(_rate) + (weiAmount.mul(1000000).mul(bonus).div(_rate)).div(100);\n', '    }\n', '\n', '    /**\n', '     * @dev Determines how ETH is stored/forwarded on purchases.\n', '     */\n', '    function _forwardFunds() internal {\n', '        _wallet.transfer(msg.value);\n', '    }\n', '}']