['// File: contracts/Ownable.sol\n', '\n', 'pragma solidity 0.5.0;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '\n', '    address private _owner;\n', '    address private _pendingOwner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    \n', '    /**\n', '     * @dev The constructor sets the original owner of the contract to the sender account.\n', '     */\n', '    constructor() public {\n', '        setOwner(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier throws if called by any account other than the pendingOwner.\n', '     */\n', '    modifier onlyPendingOwner() {\n', '        require(msg.sender == _pendingOwner, "msg.sender should be onlyPendingOwner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == _owner, "msg.sender should be owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Tells the address of the pendingOwner\n', '     * @return The address of the pendingOwner\n', '     */\n', '    function pendingOwner() public view returns (address) {\n', '        return _pendingOwner;\n', '    }\n', '    \n', '    /**\n', '     * @dev Tells the address of the owner\n', '     * @return the address of the owner\n', '     */\n', '    function owner() public view returns (address ) {\n', '        return _owner;\n', '    }\n', '    \n', '    /**\n', '    * @dev Sets a new owner address\n', '    * @param _newOwner The newOwner to set\n', '    */\n', '    function setOwner(address _newOwner) internal {\n', '        _owner = _newOwner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to set the pendingOwner address.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        _pendingOwner = _newOwner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the pendingOwner address to finalize the transfer.\n', '     */\n', '    function claimOwnership() public onlyPendingOwner {\n', '        emit OwnershipTransferred(_owner, _pendingOwner);\n', '        _owner = _pendingOwner;\n', '        _pendingOwner = address(0); \n', '    }\n', '    \n', '}\n', '\n', '// File: contracts/Operable.sol\n', '\n', 'pragma solidity 0.5.0;\n', '\n', '\n', 'contract Operable is Ownable {\n', '\n', '    address private _operator; \n', '\n', '    event OperatorChanged(address indexed previousOperator, address indexed newOperator);\n', '\n', '    /**\n', '     * @dev Tells the address of the operator\n', '     * @return the address of the operator\n', '     */\n', '    function operator() external view returns (address) {\n', '        return _operator;\n', '    }\n', '    \n', '    /**\n', '     * @dev Only the operator can operate store\n', '     */\n', '    modifier onlyOperator() {\n', '        require(msg.sender == _operator, "msg.sender should be operator");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev update the storgeOperator\n', '     * @param _newOperator The newOperator to update  \n', '     */\n', '    function updateOperator(address _newOperator) public onlyOwner {\n', '        require(_newOperator != address(0), "Cannot change the newOperator to the zero address");\n', '        emit OperatorChanged(_operator, _newOperator);\n', '        _operator = _newOperator;\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/utils/SafeMath.sol\n', '\n', 'pragma solidity 0.5.0;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Multiplies two unsigned integers, reverts on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two unsigned integers, reverts on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '     * reverts when dividing by zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/TokenStore.sol\n', '\n', 'pragma solidity 0.5.0;\n', '\n', '\n', '\n', 'contract TokenStore is Operable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public totalSupply;\n', '    \n', '    string  public name = "PingAnToken";\n', '    string  public symbol = "PAT";\n', '    uint8 public decimals = 18;\n', '\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '    function changeTokenName(string memory _name, string memory _symbol) public onlyOperator {\n', '        name = _name;\n', '        symbol = _symbol;\n', '    }\n', '\n', '    function addBalance(address _holder, uint256 _value) public onlyOperator {\n', '        balances[_holder] = balances[_holder].add(_value);\n', '    }\n', '\n', '    function subBalance(address _holder, uint256 _value) public onlyOperator {\n', '        balances[_holder] = balances[_holder].sub(_value);\n', '    }\n', '\n', '    function setBalance(address _holder, uint256 _value) public onlyOperator {\n', '        balances[_holder] = _value;\n', '    }\n', '\n', '    function addAllowance(address _holder, address _spender, uint256 _value) public onlyOperator {\n', '        allowed[_holder][_spender] = allowed[_holder][_spender].add(_value);\n', '    }\n', '\n', '    function subAllowance(address _holder, address _spender, uint256 _value) public onlyOperator {\n', '        allowed[_holder][_spender] = allowed[_holder][_spender].sub(_value);\n', '    }\n', '\n', '    function setAllowance(address _holder, address _spender, uint256 _value) public onlyOperator {\n', '        allowed[_holder][_spender] = _value;\n', '    }\n', '\n', '    function addTotalSupply(uint256 _value) public onlyOperator {\n', '        totalSupply = totalSupply.add(_value);\n', '    }\n', '\n', '    function subTotalSupply(uint256 _value) public onlyOperator {\n', '        totalSupply = totalSupply.sub(_value);\n', '    }\n', '\n', '    function setTotalSupply(uint256 _value) public onlyOperator {\n', '        totalSupply = _value;\n', '    }\n', '\n', '}']