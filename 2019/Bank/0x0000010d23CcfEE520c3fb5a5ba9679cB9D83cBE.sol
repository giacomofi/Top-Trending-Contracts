['pragma solidity ^0.4.24;\n', '\n', 'interface tokenRecipient { \n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; \n', '}\n', '\n', 'contract ZFX {\n', '    string public name = &#39;ZFX&#39;;\n', '    string public symbol = &#39;ZFX&#39;;\n', '    uint8 public decimals = 18;\n', '    uint public totalSupply = 1000000 * 10 ** uint(decimals);\n', '    address public owner;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    \n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    modifier onlyOwner {\n', '        if (msg.sender != owner) revert();\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Constructor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    constructor(address creator) public {\n', '        balanceOf[creator] = totalSupply;\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != address(0x0));\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` on behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)\n', '        public\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', '        allowance[_from][msg.sender] -= _value;             // Subtract from the sender&#39;s allowance\n', '        totalSupply -= _value;                              // Update totalSupply\n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '    \n', '    function mint(address _to, uint _amount) external onlyOwner {\n', '        balanceOf[_to] += _amount;\n', '        totalSupply += _amount;\n', '        require(totalSupply >= _amount);\n', '        emit Transfer(address(0), address(this), _amount);\n', '        emit Transfer(address(this), _to, _amount);\n', '    }\n', '}\n', '\n', 'contract Token {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '    \n', '    uint8 public decimals;\n', '}\n', '\n', 'contract Exchange {\n', '    struct Order {\n', '        address creator;\n', '        address token;\n', '        bool buy;\n', '        uint price;\n', '        uint amount;\n', '    }\n', '    \n', '    address public owner;\n', '    uint public feeDeposit = 500;\n', '    \n', '    mapping (uint => Order) orders;\n', '    uint currentOrderId = 0;\n', '    \n', '    ZFX public ZFXToken;\n', '    \n', '    /* Token address (0x0 - Ether) => User address => balance */\n', '    mapping (address => mapping (address => uint)) public balanceOf;\n', '    \n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '    \n', '    event PlaceSell(address indexed token, address indexed user, uint price, uint amount, uint id);\n', '    event PlaceBuy(address indexed token, address indexed user, uint price, uint amount, uint id);\n', '    event FillOrder(uint indexed id, address indexed user, uint amount);\n', '    event CancelOrder(uint indexed id);\n', '    event Deposit(address indexed token, address indexed user, uint amount);\n', '    event Withdraw(address indexed token, address indexed user, uint amount);\n', '    event BalanceChanged(address indexed token, address indexed user, uint value);\n', '\n', '    modifier onlyOwner {\n', '        if (msg.sender != owner) revert();\n', '        _;\n', '    }\n', '    \n', '    function transferOwnership(address newOwner) external onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '    \n', '    constructor() public {\n', '        owner = msg.sender;\n', '        ZFXToken = new ZFX(msg.sender);\n', '    }\n', '    \n', '    function safeAdd(uint a, uint b) private pure returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '    \n', '    function safeSub(uint a, uint b) private pure returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    \n', '    function safeMul(uint a, uint b) private pure returns (uint) {\n', '        if (a == 0) {\n', '          return 0;\n', '        }\n', '        \n', '        uint c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '    \n', '    function decFeeDeposit(uint delta) external onlyOwner {\n', '        feeDeposit = safeSub(feeDeposit, delta);\n', '    }\n', '    \n', '    function calcAmountEther(address tokenAddr, uint price, uint amount) private view returns (uint) {\n', '        uint k = 10;\n', '        k = k ** Token(tokenAddr).decimals();\n', '        return safeMul(amount, price) / k;\n', '    }\n', '    \n', '    function balanceAdd(address tokenAddr, address user, uint amount) private {\n', '        balanceOf[tokenAddr][user] =\n', '            safeAdd(balanceOf[tokenAddr][user], amount);\n', '    }\n', '    \n', '    function balanceSub(address tokenAddr, address user, uint amount) private {\n', '        require(balanceOf[tokenAddr][user] >= amount);\n', '        balanceOf[tokenAddr][user] =\n', '            safeSub(balanceOf[tokenAddr][user], amount);\n', '    }\n', '    \n', '    function placeBuy(address tokenAddr, uint price, uint amount) external {\n', '        require(price > 0 && amount > 0);\n', '        uint amountEther = calcAmountEther(tokenAddr, price, amount);\n', '        require(amountEther > 0);\n', '        balanceSub(0x0, msg.sender, amountEther);\n', '        emit BalanceChanged(0x0, msg.sender, balanceOf[0x0][msg.sender]);\n', '        orders[currentOrderId] = Order({\n', '            creator: msg.sender,\n', '            token: tokenAddr,\n', '            buy: true,\n', '            price: price,\n', '            amount: amount\n', '        });\n', '        emit PlaceBuy(tokenAddr, msg.sender, price, amount, currentOrderId);\n', '        currentOrderId++;\n', '        \n', '        ZFXToken.mint(msg.sender, 1000000000000000000);\n', '    }\n', '    \n', '    function placeSell(address tokenAddr, uint price, uint amount) external {\n', '        require(price > 0 && amount > 0);\n', '        uint amountEther = calcAmountEther(tokenAddr, price, amount);\n', '        require(amountEther > 0);\n', '        balanceSub(tokenAddr, msg.sender, amount);\n', '        emit BalanceChanged(tokenAddr, msg.sender, balanceOf[tokenAddr][msg.sender]);\n', '        orders[currentOrderId] = Order({\n', '            creator: msg.sender,\n', '            token: tokenAddr,\n', '            buy: false,\n', '            price: price,\n', '            amount: amount\n', '        });\n', '        emit PlaceSell(tokenAddr, msg.sender, price, amount, currentOrderId);\n', '        currentOrderId++;\n', '        \n', '        ZFXToken.mint(msg.sender, 1000000000000000000);\n', '    }\n', '    \n', '    function fillOrder(uint id, uint amount) external {\n', '        require(id < currentOrderId);\n', '        require(amount > 0);\n', '        require(orders[id].creator != msg.sender);\n', '        require(orders[id].amount >= amount);\n', '        uint amountEther = calcAmountEther(orders[id].token, orders[id].price, amount);\n', '        if (orders[id].buy) {\n', '            /* send tokens from sender to creator */\n', '            // sub from sender\n', '            balanceSub(orders[id].token, msg.sender, amount);\n', '            emit BalanceChanged(\n', '                orders[id].token,\n', '                msg.sender,\n', '                balanceOf[orders[id].token][msg.sender]\n', '            );\n', '            \n', '            // add to creator\n', '            balanceAdd(orders[id].token, orders[id].creator, amount);\n', '            emit BalanceChanged(\n', '                orders[id].token,\n', '                orders[id].creator,\n', '                balanceOf[orders[id].token][orders[id].creator]\n', '            );\n', '            \n', '            /* send Ether to sender */\n', '            balanceAdd(0x0, msg.sender, amountEther);\n', '            emit BalanceChanged(\n', '                0x0,\n', '                msg.sender,\n', '                balanceOf[0x0][msg.sender]\n', '            );\n', '        } else {\n', '            /* send Ether from sender to creator */\n', '            // sub from sender\n', '            balanceSub(0x0, msg.sender, amountEther);\n', '            emit BalanceChanged(\n', '                0x0,\n', '                msg.sender,\n', '                balanceOf[0x0][msg.sender]\n', '            );\n', '            \n', '            // add to creator\n', '            balanceAdd(0x0, orders[id].creator, amountEther);\n', '            emit BalanceChanged(\n', '                0x0,\n', '                orders[id].creator,\n', '                balanceOf[0x0][orders[id].creator]\n', '            );\n', '            \n', '            /* send tokens to sender */\n', '            balanceAdd(orders[id].token, msg.sender, amount);\n', '            emit BalanceChanged(\n', '                orders[id].token,\n', '                msg.sender,\n', '                balanceOf[orders[id].token][msg.sender]\n', '            );\n', '        }\n', '        orders[id].amount -= amount;\n', '        emit FillOrder(id, msg.sender, orders[id].amount);\n', '        \n', '        ZFXToken.mint(msg.sender, 1000000000000000000);\n', '    }\n', '    \n', '    function cancelOrder(uint id) external {\n', '        require(id < currentOrderId);\n', '        require(orders[id].creator == msg.sender);\n', '        require(orders[id].amount > 0);\n', '        if (orders[id].buy) {\n', '            uint amountEther = calcAmountEther(orders[id].token, orders[id].price, orders[id].amount);\n', '            balanceAdd(0x0, msg.sender, amountEther);\n', '            emit BalanceChanged(0x0, msg.sender, balanceOf[0x0][msg.sender]);\n', '        } else {\n', '            balanceAdd(orders[id].token, msg.sender, orders[id].amount);\n', '            emit BalanceChanged(orders[id].token, msg.sender, balanceOf[orders[id].token][msg.sender]);\n', '        }\n', '        orders[id].amount = 0;\n', '        emit CancelOrder(id);\n', '    }\n', '    \n', '    function getFee(address user) public view returns (uint) {\n', '        uint fee = feeDeposit * ZFXToken.balanceOf(user) * 10 / ZFXToken.totalSupply();\n', '        return fee < feeDeposit ? feeDeposit - fee : 0;\n', '    }\n', '    \n', '    function () external payable {\n', '        require(msg.value > 0);\n', '        uint fee = msg.value * getFee(msg.sender) / 10000;\n', '        require(msg.value > fee);\n', '        balanceAdd(0x0, owner, fee);\n', '        \n', '        uint toAdd = msg.value - fee;\n', '        balanceAdd(0x0, msg.sender, toAdd);\n', '        \n', '        emit Deposit(0x0, msg.sender, toAdd);\n', '        emit BalanceChanged(0x0, msg.sender, balanceOf[0x0][msg.sender]);\n', '        \n', '        emit FundTransfer(msg.sender, toAdd, true);\n', '    }\n', '    \n', '    function depositToken(address tokenAddr, uint amount) external {\n', '        require(tokenAddr != 0x0);\n', '        require(amount > 0);\n', '        Token(tokenAddr).transferFrom(msg.sender, this, amount);\n', '        balanceAdd(tokenAddr, msg.sender, amount);\n', '        \n', '        emit Deposit(tokenAddr, msg.sender, amount);\n', '        emit BalanceChanged(tokenAddr, msg.sender, balanceOf[tokenAddr][msg.sender]);\n', '    }\n', '    \n', '    function withdrawEther(uint amount) external {\n', '        require(amount > 0);\n', '        balanceSub(0x0, msg.sender, amount);\n', '        msg.sender.transfer(amount);\n', '        \n', '        emit Withdraw(0x0, msg.sender, amount);\n', '        emit BalanceChanged(0x0, msg.sender, balanceOf[0x0][msg.sender]);\n', '        \n', '        emit FundTransfer(msg.sender, amount, false);\n', '    }\n', '    \n', '    function withdrawToken(address tokenAddr, uint amount) external {\n', '        require(tokenAddr != 0x0);\n', '        require(amount > 0);\n', '        balanceSub(tokenAddr, msg.sender, amount);\n', '        Token(tokenAddr).transfer(msg.sender, amount);\n', '        \n', '        emit Withdraw(tokenAddr, msg.sender, amount);\n', '        emit BalanceChanged(tokenAddr, msg.sender, balanceOf[tokenAddr][msg.sender]);\n', '    }\n', '}']