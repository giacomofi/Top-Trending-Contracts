['pragma solidity ^0.5.8;\n', '\n', 'contract Owned {\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    address payable owner;\n', '    address payable newOwner;\n', '    function changeOwner(address payable _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        if (msg.sender == newOwner) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', 'contract Stake is Owned {\n', '    uint8 public fee;\n', '    uint32 public stakers;\n', '    string public domain;\n', '    mapping (address=>uint256) stakes;\n', '    event Staked(address indexed _from, uint256 _value);\n', '    event Transfered(address indexed _from, address indexed _to, uint256 _value);\n', '    function stakeOf(address _user) view public returns (uint256 stake) {return stakes[_user];}\n', '    function transfer(address _to, uint256 _amount) public returns (bool ok){\n', '        require(_to!=address(0)&&_amount>100&&_amount<=stakes[msg.sender]);\n', '        stakes[msg.sender]-=_amount;\n', '        _amount-=payfee(_amount);\n', '        if (stakes[_to]==0) stakers++;\n', '        stakes[_to]+=_amount;\n', '        emit Transfered(msg.sender,_to,_amount);\n', '        return true;\n', '    }\n', '    function withdraw(uint256 _amount) public returns (bool ok){\n', '        require(_amount>100&&_amount<=stakes[msg.sender]);\n', '        stakes[msg.sender]-=_amount;\n', '        if (msg.sender==owner) owner.transfer(_amount);\n', '        else msg.sender.transfer(_amount-payfee(_amount));\n', '        return true;\n', '    }\n', '    function payfee(uint256 _amount) internal returns (uint256 fees){\n', '        if (msg.sender==owner) return 0;\n', '        fees = _amount*fee/100;\n', '        owner.transfer(fees);\n', '        return fees;\n', '    }\n', '}\n', '\n', 'contract EtherBoxStake is Stake{\n', '    \n', '    constructor() public{\n', '        fee = 1;\n', '        stakers = 0;\n', "        domain = 'www.etherbox.io';\n", '        owner = msg.sender;\n', '    }\n', '    \n', '    function () payable external {\n', '        require(msg.value>=100);\n', '        if (stakes[msg.sender]==0) stakers++;\n', '        stakes[msg.sender]+=msg.value-payfee(msg.value);\n', '        emit Staked(msg.sender,msg.value);\n', '    }\n', '}']