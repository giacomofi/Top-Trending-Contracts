['pragma solidity ^0.5.0;\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address who) external view returns (uint256);\n', '  \n', '    function allowance(address owner, address spender)\n', '    external view returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function approve(address spender, uint256 value)\n', '    external returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint256 value)\n', '    external returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'contract TokenVendor is Owned {\n', '    uint256 public priceInWei = 40000000000000000;\n', '    address public tokenAddress = 0x9F34Ad564c5Cc5137726Fca8fA87Ac44f7866F39;\n', '    uint256 public tokenDecimals = 4;\n', '\n', '    // Constructor - Sets the token Owner\n', '    constructor() public {\n', '        owner = 0xc7a1Bd7a0A7eF23cb2544641CF6d7D14157A71bb;\n', '    }\n', '    \n', '    // Events\n', '    event Buy(address to, uint256 amount);\n', '    \n', '    // Set Token Address\n', '    function setTokenAddress(address _tokenAddress) public onlyOwner {\n', '        tokenAddress = _tokenAddress;\n', '    }\n', '    \n', '    // Set Token Price\n', '    function setPrice(uint256 _priceInWei) public onlyOwner {\n', '        require(_priceInWei > 0);\n', '        priceInWei = _priceInWei;\n', '    }\n', '    \n', '    // Set Token decimals\n', '    function setTokenDecimals(uint256 _tokenDecimals) public onlyOwner {\n', '        tokenDecimals = _tokenDecimals;\n', '    }\n', '    \n', '    // Buy Token\n', '    // @Dev - Using Fallback for buy function.\n', '    function () external payable {\n', '        require(msg.value >= priceInWei && msg.value > 0);\n', '        require(IERC20(tokenAddress).allowance(owner,address(this)) >= (msg.value / priceInWei) /  10 ** tokenDecimals);\n', '        require(IERC20(tokenAddress).balanceOf(owner) >= (msg.value / priceInWei) /  10 ** tokenDecimals);\n', '        uint256 amount = ((msg.value / priceInWei) /  10 ** tokenDecimals);\n', '        IERC20(tokenAddress).transferFrom(owner, address(this), amount);\n', '        IERC20(tokenAddress).transfer(msg.sender, amount);\n', '        emit Buy(msg.sender, amount);\n', '    }\n', '    function buy() public payable {\n', '        require(msg.value >= priceInWei && msg.value > 0);\n', '        require(IERC20(tokenAddress).allowance(owner,address(this)) >= (msg.value / priceInWei) /  10 ** tokenDecimals);\n', '        require(IERC20(tokenAddress).balanceOf(owner) >= (msg.value / priceInWei) /  10 ** tokenDecimals);\n', '        uint256 amount = ((msg.value / priceInWei) /  10 ** tokenDecimals);\n', '        IERC20(tokenAddress).transferFrom(owner, address(this), amount);\n', '        IERC20(tokenAddress).transfer(msg.sender, amount);\n', '        emit Buy(msg.sender, amount);\n', '    }\n', '}']