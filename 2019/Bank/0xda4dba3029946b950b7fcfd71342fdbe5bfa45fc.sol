['pragma solidity ^0.5.8;\n', '\n', 'contract Owned {\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    address payable owner;\n', '    address payable newOwner;\n', '    function changeOwner(address payable _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        if (msg.sender == newOwner) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', 'contract Stake is Owned {\n', '    uint8 public fee;\n', '    uint32 public users;\n', '    string domain;\n', '    mapping (address=>uint256) stakes;\n', '    event Staked(address indexed _from, uint256 _value);\n', '    event Transfered(address indexed _from, address indexed _to, uint256 _value);\n', '    event Withdrawn(address indexed _from, uint256 _value);\n', '    function stakeOf(address _user) view public returns (uint256 stake) {return stakes[_user];}\n', '    function transferStake(address _from, address _to, uint256 _amount) public onlyOwner returns (bool ok){\n', '        require(_from!=address(0)&&_to!=address(0)&&_amount>0&&_amount<=stakes[_from]);\n', '        stakes[_from]-=_amount;\n', '        emit Transfered(_from,_to,_amount);\n', '        uint256 fees = _amount*fee/100;\n', '        _amount-=fees;\n', '        stakes[_to]+=_amount;\n', '        owner.transfer(fees);\n', '        return true;\n', '    }\n', '    function withdrawStake(address payable _from, uint256 _amount) public onlyOwner returns (bool ok){\n', '        require(_from!=address(0)&&_amount>0&&_amount<=stakes[_from]);\n', '        stakes[_from]-=_amount;\n', '        emit Withdrawn(_from,_amount);\n', '        if (_from==owner) owner.transfer(_amount);\n', '        else {\n', '            uint256 fees = _amount*fee/100;\n', '            _amount-=fees;\n', '            _from.transfer(_amount);\n', '            owner.transfer(fees);\n', '        }\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract EtherBox is Stake{\n', '    \n', '    constructor() public{\n', '        fee = 1;\n', '        users = 0;\n', "        domain = 'www.etherbox.io';\n", '        owner = msg.sender;\n', '    }\n', '    \n', '    function () payable external {\n', '        require(msg.value>0);\n', '        if (stakes[msg.sender]==0) users++;\n', '        stakes[msg.sender]+=msg.value;\n', '        emit Staked(msg.sender,msg.value);\n', '    }\n', '}']