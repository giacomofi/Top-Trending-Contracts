['pragma solidity ^0.4.25;\n', '\n', 'contract IERC721 {\n', '    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n', '    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n', '    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n', '\n', '    function balanceOf(address owner) public view returns (uint256 balance);\n', '    function ownerOf(uint256 tokenId) public view returns (address owner);\n', '\n', '    function approve(address to, uint256 tokenId) public;\n', '    function getApproved(uint256 tokenId) public view returns (address operator);\n', '\n', '    function setApprovalForAll(address operator, bool _approved) public;\n', '    function isApprovedForAll(address owner, address operator) public view returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint256 tokenId) public;\n', '    function safeTransferFrom(address from, address to, uint256 tokenId) public;\n', '\n', '    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\n', '}\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20BasicInterface {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    uint8 public decimals;\n', '}\n', 'contract Bussiness {\n', '  IERC721 public erc721Address;\n', '  ERC20BasicInterface usdtToken = ERC20BasicInterface(0xdac17f958d2ee523a2206206994597c13d831ec7);\n', '  constructor(IERC721 token) public {\n', '     erc721Address = token;\n', '  }\n', '  struct Price {\n', '    address tokenOwner;\n', '    uint256 price;\n', '  }\n', '\n', '  mapping(uint256 => Price) public prices;\n', '  mapping(uint256 => Price) public usdtPrices;\n', '  function ownerOf(uint256 _tokenId) public view returns (address){\n', '      return erc721Address.ownerOf(_tokenId);\n', '  }\n', '  function setPrice(uint256 _tokenId, uint256 _ethPrice, uint256 _usdtPrice) public {\n', '      require(erc721Address.ownerOf(_tokenId) == msg.sender);\n', '      prices[_tokenId] = Price(msg.sender, _ethPrice);\n', '      usdtPrices[_tokenId] = Price(msg.sender, _usdtPrice);\n', '  }\n', '  function removePrice(uint256 tokenId) public returns (uint256){\n', '      require(erc721Address.ownerOf(tokenId) == msg.sender);\n', '      resetPrice(tokenId);\n', '      return prices[tokenId].price;\n', '  }\n', '\n', '  function getPrice(uint256 tokenId) public returns (address, address, uint256, uint256){\n', '      address currentOwner = erc721Address.ownerOf(tokenId);\n', '      if(prices[tokenId].tokenOwner != currentOwner){\n', '           resetPrice(tokenId);\n', '       }\n', '      return (currentOwner, prices[tokenId].tokenOwner, prices[tokenId].price, usdtPrices[tokenId].price);\n', '\n', '  }\n', '  function buy(uint256 tokenId) public payable {\n', '    require(erc721Address.getApproved(tokenId) == address(this));\n', '    require(prices[tokenId].price == msg.value);\n', '    erc721Address.transferFrom(prices[tokenId].tokenOwner, msg.sender, tokenId);\n', '    prices[tokenId].tokenOwner.transfer(msg.value);\n', '    resetPrice(tokenId);\n', '  }\n', '  function buyByUsdt(uint256 tokenId) public {\n', '    require(erc721Address.getApproved(tokenId) == address(this));\n', '    require(usdtToken.transferFrom(msg.sender, usdtPrices[tokenId].tokenOwner, usdtPrices[tokenId].price));\n', '\n', '    erc721Address.transferFrom(usdtPrices[tokenId].tokenOwner, msg.sender, tokenId);\n', '    usdtPrices[tokenId].tokenOwner.transfer(msg.value);\n', '    resetPrice(tokenId);\n', '\n', '  }\n', '  function resetPrice(uint256 tokenId) private {\n', '    prices[tokenId] = Price(address(0), 0);\n', '    usdtPrices[tokenId] = Price(address(0), 0);\n', '  }\n', '}']