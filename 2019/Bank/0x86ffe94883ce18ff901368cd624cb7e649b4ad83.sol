['pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '/**\n', ' \n', '* @title SafeMath\n', ' */\n', '\n', 'library SafeMath {\n', '\n', '    \n', '\n', '/**\n', '    * Multiplies two numbers, throws on overflow.\n', '    \n', '*/\n', '    \n', 'function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        \n', 'if (a == 0) {\n', '            \n', 'return 0;\n', '        \n', '}\n', '        \n', 'c = a * b;\n', '        \n', 'assert(c / a == b);\n', '        \n', 'return c;\n', '    \n', '}\n', '\n', '    \n', '/**\n', '    \n', '* Integer division of two numbers, truncating the quotient.\n', '    \n', '*/\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        \n', '// assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        \n', '// uint256 c = a / b;\n', '        \n', "// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        \n', 'return a / b;\n', '    \n', '}\n', '\n', '    \n', '/**\n', '    \n', '* Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    \n', '*/\n', '    \n', 'function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        \n', 'assert(b <= a);\n', '        \n', 'return a - b;\n', '    \n', '}\n', '\n', '    \n', '/**\n', '    \n', '* Adds two numbers, throws on overflow.\n', '    \n', '*/\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '       \n', 'c = a + b;\n', '        \n', 'assert(c >= a);\n', '        \n', 'return c;\n', '    \n', '}\n', '\n', '}\n', '\n', '\n', '\n', 'contract AltcoinToken {\n', '    \n', 'function balanceOf(address _owner) constant public returns (uint256);\n', '    \n', 'function transfer(address _to, uint256 _value) public returns (bool);\n', '\n', '}\n', '\n', '\n', '\n', 'contract ERC20Basic {\n', '    \n', 'uint256 public totalSupply;\n', '    \n', 'function balanceOf(address who) public constant returns (uint256);\n', '    \n', 'function transfer(address to, uint256 value) public returns (bool);\n', '    \n', 'event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '}\n', '\n', '\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    \n', 'function allowance(address owner, address spender) public constant returns (uint256);\n', '    \n', 'function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    \n', 'function approve(address spender, uint256 value) public returns (bool);\n', '    \n', 'event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '}\n', '\n', '\n', '\n', 'contract PavvyOnline is ERC20 {\n', '    \n', '    \n', 'using SafeMath for uint256;\n', '    \n', '//code\n', 'constructor() public {\n', '        \n', 'owner = 0xa920aAa9717dA781f11Bb218F4618C4ff443c339;\n', '        \n', 'contractAddress = this;\n', '        \n', 'balances[0x6fd3ba3bdF5615D3F9493855FB8085A22A9798eC] = 2500000000000000;\n', '        \n', 'emit Transfer(contractAddress, 0x6fd3ba3bdF5615D3F9493855FB8085A22A9798eC,2500000000000000 );\n', '        \n', 'balances[0xbE30288b9a37233fe44d92db8a8F83dc3e1d7b80] = 7500000000000000;\n', '        \n', 'emit Transfer(contractAddress, 0xbE30288b9a37233fe44d92db8a8F83dc3e1d7b80,7500000000000000);\n', '        \n', 'balances[0xf594f037B8613a6AF10E5F5A8E9Dbec3dD2e8b0E] = 10000000000000000;\n', '        \n', 'emit Transfer(contractAddress, 0xf594f037B8613a6AF10E5F5A8E9Dbec3dD2e8b0E, 10000000000000000);\n', '      \n', '}\n', '//akhircode\n', '\n', 'address owner = msg.sender;\n', 'address public contractAddress;\n', '    \n', '\n', 'mapping (address => uint256) balances;\n', '    \n', 'mapping (address => mapping (address => uint256)) allowed;    \n', '\n', '    \n', '\n', 'string public constant name = "Pavvy Online";\n', '    \n', 'string public constant symbol = "PVY";\n', '    \n', 'uint public constant decimals = 8;\n', '    \n', '    \n', '\n', 'uint256 public totalSupply = 50000000000000000;\n', '    \n', 'uint256 public totalDistributed = 0;        \n', '    \n', 'uint256 public tokensPerEth = 10000000000000;\n', '    \n', 'uint256 public constant minContribution = 1 ether / 1000; // 0.001 Ether\n', '\n', '    \n', '\n', 'event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    \n', 'event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    \n', '    \n', '\n', 'event Distr(address indexed to, uint256 amount);\n', '    \n', 'event DistrFinished();\n', '\n', '    \n', '\n', 'event Airdrop(address indexed _owner, uint _amount, uint _balance);\n', '\n', '    \n', '\n', 'event TokensPerEthUpdated(uint _tokensPerEth);\n', '    \n', '    \n', '\n', 'event Burn(address indexed burner, uint256 value);\n', '\n', '    \n', 'bool public distributionFinished = false;\n', '    \n', '    \n', 'modifier canDistr() {\n', '        \n', 'require(!distributionFinished);\n', '       \n', ' _;\n', '    }\n', '    \n', '    \n', 'modifier onlyOwner() {\n', '        \n', 'require(msg.sender == owner);\n', '        \n', '_;\n', '    \n', '}\n', '    \n', '   \n', '    \n', '    \n', '\n', 'function transferOwnership(address newOwner) onlyOwner public {\n', '        \n', 'if (newOwner != address(0)) {\n', '            \n', 'owner = newOwner;\n', '        \n', '}\n', '    \n', '}\n', '    \n', '\n', '    \n', '\n', 'function finishDistribution() onlyOwner canDistr public returns (bool) {\n', '        \n', 'distributionFinished = true;\n', '        \n', 'emit DistrFinished();\n', '        \n', 'return true;\n', '    \n', '}\n', '    \n', '    \n', '\n', 'function distr(address _to, uint256 _amount) canDistr private returns (bool) {\n', '        \n', 'totalDistributed = totalDistributed.add(_amount);        \n', '        \n', 'balances[_to] = balances[_to].add(_amount);\n', '        \n', 'emit Distr(_to, _amount);\n', '        \n', 'emit Transfer(address(0), _to, _amount);\n', '\n', '       \n', 'return true;\n', '    \n', '}\n', '\n', '    \n', '\n', 'function doAirdrop(address _participant, uint _amount) internal {\n', '\n', '        \n', 'require( _amount > 0 );      \n', '\n', '        \n', 'require( totalDistributed < totalSupply );\n', '        \n', '        \n', 'balances[_participant] = balances[_participant].add(_amount);\n', '        \n', 'totalDistributed = totalDistributed.add(_amount);\n', '\n', '        \n', '\n', 'if (totalDistributed >= totalSupply) {\n', '            \n', 'distributionFinished = true;\n', '        \n', '}\n', '\n', '        \n', '// log\n', '        \n', 'emit Airdrop(_participant, _amount, balances[_participant]);\n', '        \n', 'emit Transfer(address(0), _participant, _amount);\n', '    \n', '}\n', '\n', '    \n', 'function adminClaimAirdrop(address _participant, uint _amount) public onlyOwner {        \n', '        \n', 'doAirdrop(_participant, _amount);\n', '    \n', '}\n', '\n', '    \n', '\n', 'function adminClaimAirdropMultiple(address[] _addresses, uint _amount) public onlyOwner {        \n', '        \n', 'for (uint i = 0; i < _addresses.length; i++) doAirdrop(_addresses[i], _amount);\n', '    \n', '}\n', '\n', '    \n', '\n', 'function updateTokensPerEth(uint _tokensPerEth) public onlyOwner {        \n', '        \n', 'tokensPerEth = _tokensPerEth;\n', '        \n', 'emit TokensPerEthUpdated(_tokensPerEth);\n', '    \n', '}\n', '           \n', '    \n', '\n', 'function () external payable {\n', '        \n', 'getTokens();\n', '     \n', '}\n', '    \n', '    \n', '\n', 'function getTokens() payable canDistr  public {\n', '        \n', 'uint256 tokens = 0;\n', '\n', '        \n', 'require( msg.value >= minContribution );\n', '\n', '        \n', 'require( msg.value > 0 );\n', '        \n', '        \n', 'tokens = tokensPerEth.mul(msg.value) / 1 ether;        \n', '        \n', 'address investor = msg.sender;\n', '        \n', '        \n', 'if (tokens > 0) {\n', '      \n', 'owner.transfer(msg.value);\n', '            \n', 'distr(investor, tokens);\n', '        \n', '}\n', '\n', '        \n', 'if (totalDistributed >= totalSupply) {\n', '            \n', 'distributionFinished = true;\n', '        \n', '}\n', '    \n', '}\n', '\n', '    \n', '\n', 'function balanceOf(address _owner) constant public returns (uint256) {\n', '        \n', 'return balances[_owner];\n', '    \n', '}\n', '\n', ' \n', '    \n', 'modifier onlyPayloadSize(uint size) {\n', '        \n', 'assert(msg.data.length >= size + 4);\n', '        \n', '_;\n', '    \n', '}\n', '    \n', '    \n', '\n', 'function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\n', '\n', '        \n', 'require(_to != address(0));\n', '        \n', 'require(_amount <= balances[msg.sender]);\n', '        \n', '        \n', 'balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        \n', 'balances[_to] = balances[_to].add(_amount);\n', '        \n', 'emit Transfer(msg.sender, _to, _amount);\n', '        \n', 'return true;\n', '    }\n', '    \n', '    \n', 'function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\n', '\n', '        \n', 'require(_to != address(0));\n', '        \n', 'require(_amount <= balances[_from]);\n', '        \n', 'require(_amount <= allowed[_from][msg.sender]);\n', '        \n', '        \n', 'balances[_from] = balances[_from].sub(_amount);\n', '        \n', 'allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '        \n', 'balances[_to] = balances[_to].add(_amount);\n', '        \n', 'emit Transfer(_from, _to, _amount);\n', '        \n', 'return true;\n', '    \n', '}\n', '    \n', '    \n', 'function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        \n', '// mitigates the ERC20 spend/approval race condition\n', '        \n', 'if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\n', '        \n', 'allowed[msg.sender][_spender] = _value;\n', '        \n', 'emit Approval(msg.sender, _spender, _value);\n', '        \n', 'return true;\n', '    }\n', '    \n', '    \n', 'function allowance(address _owner, address _spender) constant public returns (uint256) {\n', '       \n', ' return allowed[_owner][_spender];\n', '    \n', '}\n', '    \n', '    \n', 'function getTokenBalance(address tokenAddress, address who) constant public returns (uint){\n', '        \n', 'AltcoinToken t = AltcoinToken(tokenAddress);\n', '        \n', 'uint bal = t.balanceOf(who);\n', '        \n', 'return bal;\n', '    \n', '}\n', '    \n', '    \n', '\n', '    \n', '    \n', 'function withdrawAltcoinTokens(address _tokenContract) onlyOwner public returns (bool) {\n', '        \n', 'AltcoinToken token = AltcoinToken(_tokenContract);\n', '        \n', 'uint256 amount = token.balanceOf(address(this));\n', '        \n', 'return token.transfer(owner, amount);\n', '    }\n', '}']