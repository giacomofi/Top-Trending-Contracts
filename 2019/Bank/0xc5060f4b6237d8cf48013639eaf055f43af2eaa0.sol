['pragma solidity ^0.4.25;\n', '// Interface to ERC20 functions used in this contract\n', 'interface ERC20token {\n', '    function balanceOf(address who) external view returns (uint256);\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '}\n', 'contract ExoTokensMarketSimple {\n', '    ERC20token ExoToken;\n', '    address owner;\n', '    uint256 pricePerToken;\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function setPricePerToken(uint256 ethPrice) public onlyOwner {\n', '        pricePerToken = ethPrice;\n', '    }\n', '    function getPricePerToken() public view returns(uint256) {\n', '        return pricePerToken;\n', '    }\n', '    function setERC20Token(address tokenAddr) public onlyOwner  {\n', '        ExoToken = ERC20token(tokenAddr);\n', '    }\n', '    function getERC20Token() public view returns(address) {\n', '        return ExoToken;\n', '    }\n', '    function getERC20Balance() public view returns(uint256) {\n', '        return ExoToken.balanceOf(this);\n', '    }\n', '    function depositERC20Token(uint256 _exo_amount) public  {\n', '        require(ExoToken.allowance(msg.sender, this) >= _exo_amount);\n', '        require(ExoToken.transferFrom(msg.sender, this, _exo_amount));\n', '    }\n', '\n', '    // EXO buying function\n', '    // All of the ETH included in the TX is converted to EXO and the remainder is sent back\n', '    function BuyTokens() public payable{\n', '        uint256 exo_balance = ExoToken.balanceOf(this);\n', '        uint256 tokensToXfer = msg.value / pricePerToken;\n', '        require(exo_balance >= tokensToXfer, "Not enough tokens in contract");\n', '        uint256 return_ETH_amount = msg.value - (tokensToXfer *pricePerToken);\n', '        require(return_ETH_amount < msg.value); // just in case\n', '\n', '        if(return_ETH_amount > 0){\n', '            msg.sender.transfer(return_ETH_amount); // return extra ETH\n', '        }\n', '\n', '        require(ExoToken.transfer(msg.sender, tokensToXfer), "Couldn\'t send funds"); // send EXO tokens\n', '    }\n', '\n', '    // Withdraw erc20 tokens\n', '    function withdrawERC20Tokens(uint _val) public onlyOwner {\n', '        require(ExoToken.transfer(msg.sender, _val), "Couldn\'t send funds"); // send EXO tokens\n', '    }\n', '\n', '    // Withdraw Ether\n', '    function withdrawEther() public onlyOwner {\n', '        msg.sender.transfer(address(this).balance);\n', '\n', '    }\n', ' \n', '    // change the owner\n', '    function setOwner(address _owner) public onlyOwner {\n', '        owner = _owner;    \n', '    }\n', '    // fallback\n', '    function() external payable { }   \n', '}']