['pragma solidity ^0.5.0;\n', '\n', '// This contract is still in Beta, use at your own risk\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', 'interface Token {\n', '\n', '    function transfer(address _to, uint _value) external returns (bool);\n', '    function transferFrom(address _from, address _to, uint _value) external returns (bool);\n', '    function approve(address _spender, uint _value) external returns (bool);\n', '    function balanceOf(address _owner) external view returns (uint);\n', '    function allowance(address _owner, address _spender) external view returns (uint);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint _value); // solhint-disable-line\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', 'contract TrustlessOTC is Ownable {\n', '    \n', '    mapping(address => uint256) public balanceTracker;\n', '    \n', '    event OfferCreated(uint indexed tradeID);\n', '    event OfferCancelled(uint indexed tradeID);\n', '    event OfferTaken(uint indexed tradeID);\n', '    \n', '    struct TradeOffer {\n', '        address tokenFrom;\n', '        address tokenTo;\n', '        uint256 amountFrom;\n', '        uint256 amountTo;\n', '        address creator;\n', '        bool active;\n', '        uint tradeID;\n', '    }\n', '    \n', '    TradeOffer[] public offers;\n', '    \n', '    function initiateTrade(\n', '        address _tokenFrom,\n', '        address _tokenTo, \n', '        uint256 _amountFrom,\n', '        uint256 _amountTo\n', '        ) public returns (uint newTradeID) {\n', '            require(Token(_tokenFrom).transferFrom(msg.sender, address(this), _amountFrom));\n', '            newTradeID = offers.length;\n', '            offers.length++;\n', '            TradeOffer storage o = offers[newTradeID];\n', '            balanceTracker[_tokenFrom] += _amountFrom;\n', '            o.tokenFrom = _tokenFrom;\n', '            o.tokenTo = _tokenTo;\n', '            o.amountFrom = _amountFrom;\n', '            o.amountTo = _amountTo;\n', '            o.creator = msg.sender;\n', '            o.active = true;\n', '            o.tradeID = newTradeID;\n', '            emit OfferCreated(newTradeID);\n', '    }\n', '    \n', '    function cancelTrade(uint tradeID) public returns (bool) {\n', '        TradeOffer storage o = offers[tradeID];\n', '        require(msg.sender == o.creator);\n', '        require(Token(o.tokenFrom).transfer(o.creator, o.amountFrom));\n', '        balanceTracker[o.tokenFrom] -= o.amountFrom;\n', '        o.active = false;\n', '        emit OfferCancelled(tradeID);\n', '        return true;\n', '    }\n', '    \n', '    function take(uint tradeID) public returns (bool) {\n', '        TradeOffer storage o = offers[tradeID];\n', '        require(o.active == true);\n', '        require(Token(o.tokenFrom).transfer(msg.sender, o.amountFrom));\n', '        balanceTracker[o.tokenFrom] -= o.amountFrom;\n', '        require(Token(o.tokenTo).transferFrom(msg.sender, o.creator, o.amountTo));\n', '        o.active = false;\n', '        emit OfferTaken(tradeID);\n', '        return true;\n', '    }\n', '    \n', '    function getOfferDetails(uint tradeID) external view returns (\n', '        address _tokenFrom,\n', '        address _tokenTo, \n', '        uint256 _amountFrom,\n', '        uint256 _amountTo,\n', '        address _creator,\n', '        bool _active\n', '    ) {\n', '        TradeOffer storage o = offers[tradeID];\n', '        _tokenFrom = o.tokenFrom;\n', '        _tokenTo = o.tokenTo;\n', '        _amountFrom = o.amountFrom;\n', '        _amountTo = o.amountTo;\n', '        _creator = o.creator;\n', '        _active = o.active;\n', '    }\n', '\n', '    \n', '    function reclaimToken(Token _token) external onlyOwner {\n', '        uint256 balance = _token.balanceOf(address(this));\n', '        uint256 excess = balance - balanceTracker[address(_token)];\n', '        require(excess > 0);\n', '        _token.transfer(owner, excess);\n', '    }\n', '    \n', '    \n', '}']