['// JHE 20190617\n', '// File: openzeppelin-solidity\\contracts\\math\\SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '    * @dev Multiplies two unsigned integers, reverts on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two unsigned integers, reverts on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: src\\contracts\\Token.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', 'contract Token {\n', '    using SafeMath for uint;\n', '\n', '    // Variables\n', '    string public name = "Yasuda Takahashi coin";\n', '    string public symbol = "YATA";\n', '    uint256 public decimals = 18;\n', '    uint256 public totalSupply;\n', '    mapping(address => uint256) public balanceOf;\n', '    mapping(address => mapping(address => uint256)) public allowance;\n', '\n', '    // Events\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    constructor() public {\n', '        // totalSupply = 1000000000000 * (10 ** decimals);  // REAL\n', '        totalSupply = 1000000 * (10 ** decimals);\n', '        balanceOf[msg.sender] = totalSupply;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint256 _value) internal {\n', '        require(_to != address(0));\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require(_spender != address(0));\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= balanceOf[_from]);\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '// File: src\\contracts\\Exchange.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', 'contract Exchange {\n', '    using SafeMath for uint;\n', '\n', '    // Variables\n', '    address constant ETHER = address(0); // store Ether in tokens mapping with blank address\n', "    mapping(address => mapping(address => uint256)) public tokens; // balance of user's token\n", '    mapping(uint256 => _Order) public orders;\n', '    uint256 public orderCount;\n', '    mapping(uint256 => bool) public orderCancelled;\n', '    mapping(uint256 => bool) public orderFilled;\n', '\n', '    address public owner; // the account that receives exchange fees\n', '    address internal ercToken;\n', '    mapping(address => _Fee[]) public feeDistributions;   // tokenAddr=>[_Fee]\n', '    _Fee[] public feeDetails;\n', '\n', '\n', '    // Events\n', '    event Deposit(address token, address user, uint256 amount, uint256 balance);\n', '    event Withdraw(address token, address user, uint256 amount, uint256 balance);\n', '    event Order(\n', '        uint256 id,\n', '        address user,\n', '        address ercToken,\n', '        address tokenGet,\n', '        uint256 amountGet,\n', '        address tokenGive,\n', '        uint256 amountGive,\n', '        uint256 timestamp\n', '    );\n', '    event Cancel(\n', '        uint256 id,\n', '        address user,\n', '        address ercToken,\n', '        address tokenGet,\n', '        uint256 amountGet,\n', '        address tokenGive,\n', '        uint256 amountGive,\n', '        uint256 timestamp\n', '    );\n', '    event Trade(\n', '        uint256 id,\n', '        address user,\n', '        address ercToken,\n', '        address tokenGet,\n', '        uint256 amountGet,\n', '        address tokenGive,\n', '        uint256 amountGive,\n', '        address userFill,\n', '        uint256 timestamp\n', '    );\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    // Structs\n', '    struct _Order {\n', '        uint256 id;\n', '        address user;\n', '        address tokenGet;\n', '        uint256 amountGet;\n', '        address tokenGive;\n', '        uint256 amountGive;\n', '        uint256 timestamp;\n', '    }\n', '\n', '    struct _Fee {\n', '        uint256 id;\n', '        string name;\n', '        address wallet;\n', '        uint256 percent;\n', '        bool active;\n', '    }\n', '\n', '    constructor () public {\n', '        owner = msg.sender;\n', '    }    \n', '\n', '    // Fallback: reverts if Ether is sent to this smart contract by mistake\n', '    function() external {\n', '        revert();\n', '    }\n', '\n', '    // Modifier\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "owner only");\n', '        _;\n', '    }\n', '\n', '    function depositEther() payable public {\n', '        tokens[ETHER][msg.sender] = tokens[ETHER][msg.sender].add(msg.value);\n', '        emit Deposit(ETHER, msg.sender, msg.value, tokens[ETHER][msg.sender]);\n', '    }\n', '\n', '    function withdrawEther(uint _amount) public {\n', '        require(tokens[ETHER][msg.sender] >= _amount);\n', '        tokens[ETHER][msg.sender] = tokens[ETHER][msg.sender].sub(_amount);\n', '        msg.sender.transfer(_amount);\n', '        emit Withdraw(ETHER, msg.sender, _amount, tokens[ETHER][msg.sender]);\n', '    }\n', '\n', '    function depositToken(address _token, uint _amount) public {\n', '        require(_token != ETHER);\n', '        require(Token(_token).transferFrom(msg.sender, address(this), _amount));\n', '        tokens[_token][msg.sender] = tokens[_token][msg.sender].add(_amount);\n', '        emit Deposit(_token, msg.sender, _amount, tokens[_token][msg.sender]);\n', '    }\n', '\n', '    function withdrawToken(address _token, uint256 _amount) public {\n', '        require(_token != ETHER);\n', '        require(tokens[_token][msg.sender] >= _amount);\n', '        tokens[_token][msg.sender] = tokens[_token][msg.sender].sub(_amount);\n', '        require(Token(_token).transfer(msg.sender, _amount));\n', '        emit Withdraw(_token, msg.sender, _amount, tokens[_token][msg.sender]);\n', '    }\n', '\n', '    function balanceOf(address _token, address _user) public view returns (uint256) {\n', '        return tokens[_token][_user];\n', '    }\n', '\n', '    function makeOrder(address _tokenGet, uint256 _amountGet, address _tokenGive, uint256 _amountGive) public {\n', '        orderCount = orderCount.add(1);\n', '        orders[orderCount] = _Order(orderCount, msg.sender, _tokenGet, _amountGet, _tokenGive, _amountGive, now);\n', '\n', '        ercToken = _getErcTokenAddress(_tokenGet, _tokenGive);\n', '\n', '        emit Order(orderCount, msg.sender, ercToken, _tokenGet, _amountGet, _tokenGive, _amountGive, now);\n', '    }\n', '\n', '    function cancelOrder(uint256 _id) public {\n', '        _Order storage _order = orders[_id];\n', '        require(address(_order.user) == msg.sender);\n', '        require(_order.id == _id); // The order must exist\n', '        orderCancelled[_id] = true;\n', '\n', '        ercToken = _getErcTokenAddress(_order.tokenGet, _order.tokenGive);\n', '\n', '        emit Cancel(_order.id, msg.sender, ercToken, _order.tokenGet, _order.amountGet, _order.tokenGive, _order.amountGive, now);\n', '    }\n', '\n', '    function fillOrder(uint256 _id) public {\n', '        require(_id > 0 && _id <= orderCount);\n', '        require(!orderFilled[_id]);\n', '        require(!orderCancelled[_id]);\n', '        _Order storage _order = orders[_id];\n', '        _trade(_order.id, _order.user, _order.tokenGet, _order.amountGet, _order.tokenGive, _order.amountGive);\n', '        orderFilled[_order.id] = true;\n', '    }\n', '\n', '    function _trade(uint256 _orderId, address _user, address _tokenGet, uint256 _amountGet, address _tokenGive, uint256 _amountGive) internal {\n', '        ercToken = _getErcTokenAddress(_tokenGet, _tokenGive);\n', '        uint totalFeePercent = getTotalFeePercent (ercToken);\n', '\n', '        uint256 _feeAmount = _amountGet.mul(totalFeePercent).div(100000);  // FEE: 100000 = 100%\n', '\n', '        tokens[_tokenGet][msg.sender] = tokens[_tokenGet][msg.sender].sub(_amountGet.add(_feeAmount));\n', '        tokens[_tokenGet][_user] = tokens[_tokenGet][_user].add(_amountGet);\n', '        tokens[_tokenGive][_user] = tokens[_tokenGive][_user].sub(_amountGive);\n', '        tokens[_tokenGive][msg.sender] = tokens[_tokenGive][msg.sender].add(_amountGive);       \n', '\n', '        // distribute fees\n', '        uint256 feesCount = getFeeDistributionsCount(ercToken);\n', '        _Fee[] storage fees = feeDistributions[ercToken];\n', '\n', '        for (uint i = 0; i < feesCount; i++){\n', '            if (fees[i].active){\n', '                uint feeValue = _amountGet.mul(fees[i].percent).div(100000);  // FEE: 100000 = 100%\n', '                tokens[_tokenGet][fees[i].wallet] = tokens[_tokenGet][fees[i].wallet].add(feeValue);\n', '            }\n', '        }\n', '\n', '\n', '        emit Trade(_orderId, _user, ercToken, _tokenGet, _amountGet, _tokenGive, _amountGive, msg.sender, now);\n', '    }\n', '\n', '    // Transfer\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        _transferOwnership(_newOwner);\n', '    }\n', '    function _transferOwnership(address _newOwner) internal {\n', '        require(_newOwner != address(0), "address not valid");\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '\n', '\n', '    function _getErcTokenAddress(address tokenGet, address tokenGive) internal returns (address){\n', '        if (tokenGet == ETHER){\n', '            ercToken = tokenGive;\n', '        } else {\n', '            ercToken = tokenGet;\n', '        }\n', '        return ercToken;\n', '    }\n', '\n', '    function getFeeDistributionsCount(address _token) public view returns(uint) {\n', '        _Fee[] storage fees = feeDistributions[_token];\n', '        return fees.length;\n', '    }\n', '\n', '    function getTotalFeePercent (address _ercToken) public view returns (uint){\n', '        require(_ercToken != address(0), "address not valid");\n', '        uint256 totalFeePercent = 0;\n', '        uint256 feesCount = getFeeDistributionsCount(_ercToken);\n', '        _Fee[] storage fees = feeDistributions[_ercToken];\n', '\n', '        for (uint i = 0; i < feesCount; i++){\n', '            if (fees[i].active){\n', '                totalFeePercent = totalFeePercent.add(fees[i].percent);\n', '            }\n', '        }\n', '\n', '        return totalFeePercent;\n', '    }\n', '\n', '    /*\n', '    *       FEE: \n', '    *              1 = 0.001%\n', '    *           1000 = 1%\n', '    *         100000 = 100%\n', '    */\n', '    function setFeeDistributions(address _token, address _feeWallet, string memory _name, uint256 _percent) public  onlyOwner {\n', '        require(_token != address(0), "address not valid");\n', '        require(_feeWallet != address(0), "address not valid");\n', '\n', '        _Fee[] storage fees = feeDistributions[_token];\n', '        // uint256 feesCount = fees.length;\n', '        uint256 feesCount = getFeeDistributionsCount(_token);\n', '\n', '        bool feeExiste = false;\n', '\n', '        uint totalFeePercent = getTotalFeePercent (_token);\n', '        totalFeePercent = totalFeePercent.add(_percent);\n', '        require(totalFeePercent <= 100000, "total fee cannot exceed 100");\n', '\n', '        for (uint i = 0; i < feesCount; i++){\n', '            if (fees[i].wallet == _feeWallet){\n', '                fees[i].name    = _name;\n', '                fees[i].percent = _percent;\n', '                fees[i].active  = true;\n', '\n', '                feeExiste = true;\n', '                break;\n', '            }\n', '        }\n', '\n', '        // fee not found => add as new fee\n', '        if (!feeExiste){\n', '            _Fee memory fee;\n', '\n', '            fee.id = (feesCount + 1);\n', '            fee.name = _name;\n', '            fee.wallet = _feeWallet;\n', '            fee.percent = _percent;\n', '            fee.active = true;\n', '\n', '            fees.push(fee);\n', '        }\n', '    }\n', '\n', '    function deActivateFeeWallet(address _token, address _feeWallet) public onlyOwner {\n', '        require(_token != address(0), "address not valid");\n', '        require(_feeWallet != address(0), "address not valid");\n', '\n', '        _Fee[] storage fees = feeDistributions[_token];\n', '        uint256 feesCount = getFeeDistributionsCount(_token);\n', '        for (uint i = 0; i < feesCount; i++){\n', '            if (fees[i].wallet == _feeWallet){\n', '                fees[i].active = false;\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '}']