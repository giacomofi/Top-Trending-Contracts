['pragma solidity 0.4.25;\n', '\n', 'contract E2D {\n', '    /*=================================\n', '    =            MODIFIERS            =\n', '    =================================*/\n', '    // only people with tokens\n', '    modifier onlyBagholders() {\n', '        require(myTokens() > 0);\n', '        _;\n', '    }\n', '\n', '    // only people with profits\n', '    modifier onlyStronghands() {\n', '        require(myDividends() > 0);\n', '        _;\n', '    }\n', '\n', '    // owner can:\n', '    // -> change the name of the contract\n', '    // -> change the name of the token\n', '    // they CANNOT:\n', '    // -> take funds\n', '    // -> disable withdrawals\n', '    // -> kill the contract\n', '    // -> change the price of tokens\n', '    modifier onlyOwner(){\n', '        require(ownerAddr == msg.sender || OWNER_ADDRESS_2 == msg.sender, "only owner can perform this!");\n', '        _;\n', '    }\n', '\n', '    modifier onlyInitialInvestors(){\n', '        if(initialState) {\n', '            require(initialInvestors[msg.sender] == true, "only allowed investor can invest!");\n', '            _;\n', '        } else {\n', '            _;\n', '        }\n', '    }\n', '\n', '    /*==============================\n', '    =            EVENTS            =\n', '    ==============================*/\n', '    event onTokenPurchase(\n', '        address indexed customerAddress,\n', '        uint256 incomingEthereum,\n', '        uint256 tokensMinted\n', '    );\n', '\n', '    event onTokenSell(\n', '        address indexed customerAddress,\n', '        uint256 tokensBurned,\n', '        uint256 ethereumEarned\n', '    );\n', '\n', '    event onReinvestment(\n', '        address indexed customerAddress,\n', '        uint256 ethereumReinvested,\n', '        uint256 tokensMinted\n', '    );\n', '\n', '    event onWithdraw(\n', '        address indexed customerAddress,\n', '        uint256 ethereumWithdrawn\n', '    );\n', '\n', '    event onPayDividends(\n', '        uint256 dividends,\n', '        uint256 profitPerShare\n', '    );\n', '\n', '    // ERC20\n', '    event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 tokens\n', '    );\n', '\n', '    /*=====================================\n', '    =            CONFIGURABLES            =\n', '    =====================================*/\n', '    string public name = "E2D";\n', '    string public symbol = "E2D";\n', '    uint8 constant public decimals = 18;\n', '    uint8 constant internal dividendFee_ = 10;\n', '    uint256 constant internal tokenPriceInitial_ = 0.0000001 ether;\n', '    uint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;\n', '    uint256 constant internal magnitude = 2**64;\n', '    address constant internal OWNER_ADDRESS = address(0x508b828440D72B0De506c86DB79D9E2c19810442);\n', '    address constant internal OWNER_ADDRESS_2 = address(0x508b828440D72B0De506c86DB79D9E2c19810442);\n', '    uint256 constant public INVESTOR_QUOTA = 0.01 ether;\n', '\n', '   /*================================\n', '    =            DATASETS            =\n', '    ================================*/\n', '    // amount of shares for each address (scaled number)\n', '    mapping(address => uint256) internal tokenBalanceLedger_;\n', '    mapping(address => int256) internal payoutsTo_;\n', '    uint256 internal tokenSupply_ = 0;\n', '    uint256 internal profitPerShare_;\n', '    uint256 internal totalInvestment_ = 0;\n', '    uint256 internal totalGameDividends_ = 0;\n', '\n', '    // smart contract owner address (see above on what they can do)\n', '    address public ownerAddr;\n', '\n', '    // initial investor list who can purchase tokens (this prevents a whale premine, it ensures a fairly distributed upper pyramid)\n', '    mapping(address => bool) public initialInvestors;\n', '\n', '    // when this is set to true, only allowed initialInvestors can purchase tokens.\n', '    bool public initialState = true;\n', '\n', '    /*=======================================\n', '    =            PUBLIC FUNCTIONS            =\n', '    =======================================*/\n', '    /*\n', '    * -- APPLICATION ENTRY POINTS --  \n', '    */\n', '\n', '    constructor() public {\n', '        // add initialInvestors here\n', '        ownerAddr = OWNER_ADDRESS;\n', '        initialInvestors[OWNER_ADDRESS] = true;\n', '        initialInvestors[OWNER_ADDRESS_2] = true;\n', '    }\n', '\n', '    /**\n', '     * Converts all incoming ethereum to tokens for the caller\n', '     */\n', '    function buy() public payable returns(uint256) {\n', '        purchaseTokens(msg.value);\n', '    }\n', '\n', '    /**\n', '     * Fallback function to handle ethereum that was send straight to the contract\n', '     */\n', '    function() public payable {\n', '        purchaseTokens(msg.value);\n', '    }\n', '\n', '    /**\n', "     * Converts all of caller's dividends to tokens.\n", '     */\n', '    function reinvest() public onlyStronghands() {\n', '        // fetch dividends\n', '        uint256 _dividends = myDividends();\n', '\n', '        // pay out the dividends virtually\n', '        address _customerAddress = msg.sender;\n', '        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n', '\n', '        // dispatch a buy order with the virtualized "withdrawn dividends"\n', '        uint256 _tokens = purchaseTokens(_dividends);\n', '\n', '        // fire event\n', '        emit onReinvestment(_customerAddress, _dividends, _tokens);\n', '    }\n', '\n', '    /**\n', '     * Alias of sell() and withdraw().\n', '     */\n', '    function exit() public {\n', '        // get token count for caller & sell them all\n', '        address _customerAddress = msg.sender;\n', '        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n', '        if(_tokens > 0) sell(_tokens);\n', '\n', '        // lambo delivery service\n', '        withdraw();\n', '    }\n', '\n', '    /**\n', '     * Withdraws all of the callers earnings.\n', '     */\n', '    function withdraw() public onlyStronghands() {\n', '        // setup data\n', '        address _customerAddress = msg.sender;\n', '        uint256 _dividends = myDividends();\n', '\n', '        // update dividend tracker\n', '        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n', '\n', '        // lambo delivery service\n', '        _customerAddress.transfer(_dividends);\n', '\n', '        // fire event\n', '        emit onWithdraw(_customerAddress, _dividends);\n', '    }\n', '\n', '    /**\n', '     * Liquifies tokens to ethereum.\n', '     */\n', '    function sell(uint256 _amountOfTokens) public onlyBagholders() {\n', '        // setup data\n', '        address _customerAddress = msg.sender;\n', '        // russian hackers BTFO\n', '        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress], "token to sell should be less then balance!");\n', '        uint256 _tokens = _amountOfTokens;\n', '        uint256 _ethereum = tokensToEthereum_(_tokens);\n', '        uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\n', '        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n', '\n', '        // burn the sold tokens\n', '        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n', '\n', '        // update dividends tracker\n', '        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n', '        payoutsTo_[_customerAddress] -= _updatedPayouts;      \n', '\n', '        // dividing by zero is a bad idea\n', '        if (tokenSupply_ > 0) {\n', '            // update the amount of dividends per token\n', '            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n', '        }\n', '\n', '        // fire event\n', '        emit onTokenSell(_customerAddress, _tokens, _taxedEthereum);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from the caller to a new holder.\n', "     * Remember, there's a 10% fee here as well.\n", '     */\n', '    function transfer(address _toAddress, uint256 _amountOfTokens) public onlyBagholders() returns(bool) {\n', '        // setup\n', '        address _customerAddress = msg.sender;\n', '\n', '        // make sure we have the requested tokens\n', '        // also disables transfers until adminstrator phase is over\n', '        require(!initialState && (_amountOfTokens <= tokenBalanceLedger_[_customerAddress]), "initial state or token > balance!");\n', '\n', '        // withdraw all outstanding dividends first\n', '        if(myDividends() > 0) withdraw();\n', '\n', '        // liquify 10% of the tokens that are transfered\n', '        // these are dispersed to shareholders\n', '        uint256 _tokenFee = SafeMath.div(_amountOfTokens, dividendFee_);\n', '        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\n', '        uint256 _dividends = tokensToEthereum_(_tokenFee);\n', '  \n', '        // burn the fee tokens\n', '        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\n', '\n', '        // exchange tokens\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n', '        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _taxedTokens);\n', '\n', '        // update dividend trackers\n', '        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\n', '        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _taxedTokens);\n', '\n', '        // disperse dividends among holders\n', '        profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n', '\n', '        // fire event\n', '        emit Transfer(_customerAddress, _toAddress, _taxedTokens);\n', '\n', '        // ERC20\n', '        return true;\n', '    }\n', '\n', '    function payDividends() external payable {\n', '        uint256 _dividends = msg.value;\n', '        require(_dividends > 0, "dividends should be greater then 0!");\n', '        // dividing by zero is a bad idea\n', '        if (tokenSupply_ > 0) {\n', '            // update the amount of dividends per token\n', '            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n', '            totalGameDividends_ = SafeMath.add(totalGameDividends_, _dividends);\n', '            // fire event\n', '            emit onPayDividends(_dividends, profitPerShare_);\n', '        }\n', '    }\n', '\n', '    /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/\n', '    /**\n', '     * In case the amassador quota is not met, the administrator can manually disable the ambassador phase.\n', '     */\n', '    function disableInitialStage() public onlyOwner() {\n', '        require(initialState == true, "initial stage is already false!");\n', '        initialState = false;\n', '    }\n', '\n', '    /**\n', '     * In case one of us dies, we need to replace ourselves.\n', '     */\n', '    function setInitialInvestors(address _addr, bool _status) public onlyOwner() {\n', '        initialInvestors[_addr] = _status;\n', '    }\n', '\n', '    /**\n', '     * If we want to rebrand, we can.\n', '     */\n', '    function setName(string _name) public onlyOwner() {\n', '        name = _name;\n', '    }\n', '\n', '    /**\n', '     * If we want to rebrand, we can.\n', '     */\n', '    function setSymbol(string _symbol) public onlyOwner() {\n', '        symbol = _symbol;\n', '    }\n', '\n', '    /*----------  HELPERS AND CALCULATORS  ----------*/\n', '    /**\n', '     * Method to view the current Ethereum stored in the contract\n', '     * Example: totalEthereumBalance()\n', '     */\n', '    function totalEthereumBalance() public view returns(uint) {\n', '        return address(this).balance;\n', '    }\n', '\n', '    /**\n', '     * Retrieve the total token supply.\n', '     */\n', '    function totalSupply() public view returns(uint256) {\n', '        return tokenSupply_;\n', '    }\n', '\n', '    /**\n', '     * Retrieve the total Investment.\n', '     */\n', '    function totalInvestment() public view returns(uint256) {\n', '        return totalInvestment_;\n', '    }\n', '\n', '    /**\n', '     * Retrieve the total Game Dividends Paid.\n', '     */\n', '    function totalGameDividends() public view returns(uint256) {\n', '        return totalGameDividends_;\n', '    }\n', '\n', '    /**\n', '     * Retrieve the tokens owned by the caller.\n', '     */\n', '    function myTokens() public view returns(uint256) {\n', '        address _customerAddress = msg.sender;\n', '        return balanceOf(_customerAddress);\n', '    }\n', '\n', '    /**\n', '     * Retrieve the dividends owned by the caller.\n', '     */ \n', '    function myDividends() public view returns(uint256) {\n', '        address _customerAddress = msg.sender;\n', '        return dividendsOf(_customerAddress) ;\n', '    }\n', '\n', '    /**\n', '     * Retrieve the token balance of any single address.\n', '     */\n', '    function balanceOf(address _customerAddress) public view returns(uint256) {\n', '        return tokenBalanceLedger_[_customerAddress];\n', '    }\n', '\n', '    /**\n', '     * Retrieve the dividend balance of any single address.\n', '     */\n', '    function dividendsOf(address _customerAddress) public view returns(uint256) {\n', '        return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n', '    }\n', '\n', '    /**\n', '     * Return the sell price of 1 individual token.\n', '     */\n', '    function sellPrice() public view returns(uint256) {\n', '        // our calculation relies on the token supply, so we need supply.\n', '        if(tokenSupply_ == 0){\n', '            return 0;\n', '        } else {\n', '            uint256 _ethereum = tokensToEthereum_(1e18);\n', '            uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\n', '            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n', '            return _taxedEthereum;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Return the buy price of 1 individual token.\n', '     */\n', '    function buyPrice() public view returns(uint256) {\n', '        // our calculation relies on the token supply, so we need supply.\n', '        if(tokenSupply_ == 0){\n', '            return tokenPriceInitial_ + tokenPriceIncremental_;\n', '        } else {\n', '            uint256 _ethereum = tokensToEthereum_(1e18);\n', '            uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\n', '            uint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);\n', '            return _taxedEthereum;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Function for the frontend to dynamically retrieve the price scaling of buy orders.\n', '     */\n', '    function calculateTokensReceived(uint256 _ethereumToSpend) public view returns(uint256) {\n', '        uint256 _dividends = SafeMath.div(_ethereumToSpend, dividendFee_);\n', '        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\n', '        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n', '        return _amountOfTokens;\n', '    }\n', '\n', '    /**\n', '     * Function for the frontend to dynamically retrieve the price scaling of sell orders.\n', '     */\n', '    function calculateEthereumReceived(uint256 _tokensToSell) public view returns(uint256) {\n', '        require(_tokensToSell <= tokenSupply_, "token to sell should be less then total supply!");\n', '        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n', '        uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\n', '        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n', '        return _taxedEthereum;\n', '    }\n', '\n', '    /*==========================================\n', '    =            INTERNAL FUNCTIONS            =\n', '    ==========================================*/\n', '    function purchaseTokens(uint256 _incomingEthereum) internal onlyInitialInvestors() returns(uint256) {\n', '        // data setup\n', '        address _customerAddress = msg.sender;\n', '        uint256 _dividends = SafeMath.div(_incomingEthereum, dividendFee_);\n', '        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _dividends);\n', '        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n', '        uint256 _fee = _dividends * magnitude;\n', '\n', '        require((_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens, tokenSupply_) > tokenSupply_)), "token should be > 0!");\n', '\n', "        // we can't give people infinite ethereum\n", '        if(tokenSupply_ > 0) {\n', '\n', '            // add tokens to the pool\n', '            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n', ' \n', '            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\n', '            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\n', '\n', '            // calculate the amount of tokens the customer receives over his purchase \n', '            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\n', '        } else {\n', '            // add tokens to the pool\n', '            tokenSupply_ = _amountOfTokens;\n', '        }\n', '\n', '        totalInvestment_ = SafeMath.add(totalInvestment_, _incomingEthereum);\n', '\n', '        // update circulating supply & the ledger address for the customer\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n', '\n', "        // Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them;\n", "        //really i know you think you do but you don't\n", '        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\n', '        payoutsTo_[_customerAddress] += _updatedPayouts;\n', '\n', '        // disable initial stage if investor quota of 0.01 eth is reached\n', '        if(address(this).balance >= INVESTOR_QUOTA) {\n', '            initialState = false;\n', '        }\n', '\n', '        // fire event\n', '        emit onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens);\n', '\n', '        return _amountOfTokens;\n', '    }\n', '\n', '    /**\n', '     * Calculate Token price based on an amount of incoming ethereum\n', "     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n", '     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n', '     */\n', '    function ethereumToTokens_(uint256 _ethereum) internal view returns(uint256) {\n', '        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\n', '        uint256 _tokensReceived = \n', '         (\n', '            (\n', '                // underflow attempts BTFO\n', '                SafeMath.sub(\n', '                    (sqrt\n', '                        (\n', '                            (_tokenPriceInitial**2)\n', '                            +\n', '                            (2*(tokenPriceIncremental_ * 1e18)*(_ethereum * 1e18))\n', '                            +\n', '                            (((tokenPriceIncremental_)**2)*(tokenSupply_**2))\n', '                            +\n', '                            (2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\n', '                        )\n', '                    ), _tokenPriceInitial\n', '                )\n', '            )/(tokenPriceIncremental_)\n', '        )-(tokenSupply_);\n', '        return _tokensReceived;\n', '    }\n', '\n', '    /**\n', '     * Calculate token sell value.\n', "     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n", '     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n', '     */\n', '    function tokensToEthereum_(uint256 _tokens) internal view returns(uint256) {\n', '        uint256 tokens_ = (_tokens + 1e18);\n', '        uint256 _tokenSupply = (tokenSupply_ + 1e18);\n', '        uint256 _etherReceived =\n', '        (\n', '            // underflow attempts BTFO\n', '            SafeMath.sub(\n', '                (\n', '                    (\n', '                        (\n', '                            tokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\n', '                        )-tokenPriceIncremental_\n', '                    )*(tokens_ - 1e18)\n', '                ),(tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\n', '            )\n', '        /1e18);\n', '        return _etherReceived;\n', '    }\n', '\n', '    //This is where all your gas goes, sorry\n', '    //Not sorry, you probably only paid 1 gwei\n', '    function sqrt(uint x) internal pure returns (uint y) {\n', '        uint z = (x + 1) / 2;\n', '        y = x;\n', '        while (z < y) {\n', '            y = z;\n', '            z = (x / z + z) / 2;\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (_a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = _a * _b;\n', '        require(c / _a == _b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        require(_b > 0); // Solidity only automatically asserts when dividing by 0\n', '        uint256 c = _a / _b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        require(_b <= _a);\n', '        uint256 c = _a - _b;\n', '        return c;\n', '    }\n', '\n', '    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        uint256 c = _a + _b;\n', '        require(c >= _a);\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract Constants {\n', '    address internal constant OWNER_WALLET_ADDR = address(0x508b828440D72B0De506c86DB79D9E2c19810442);\n', '    address internal constant COMPANY_WALLET_ADDR = address(0xEE50069c177721fdB06755427Fd19853681E86a2);\n', '    address internal constant LAST10_WALLET_ADDR = address(0xe7d8Bf9B85EAE450f2153C66cdFDfD31D56750d0);\n', '    address internal constant FEE_WALLET_ADDR = address(0x6Ba3B9E117F58490eC0e68cf3e48d606C2f2475b);\n', '    uint internal constant LAST_10_MIN_INVESTMENT = 2 ether;\n', '}\n', '\n', 'contract InvestorsStorage {\n', '    using SafeMath for uint;\n', '    using Percent for Percent.percent;\n', '    struct investor {\n', '        uint keyIndex;\n', '        uint value;\n', '        uint paymentTime;\n', '        uint refs;\n', '        uint refBonus;\n', '        uint pendingPayout;\n', '        uint pendingPayoutTime;\n', '    }\n', '    struct recordStats {\n', '        uint investors;\n', '        uint invested;\n', '    }\n', '    struct itmap {\n', '        mapping(uint => recordStats) stats;\n', '        mapping(address => investor) data;\n', '        address[] keys;\n', '    }\n', '    itmap private s;\n', '\n', '    address private owner;\n', '    \n', '    Percent.percent private _percent = Percent.percent(1,100);\n', '\n', '    event LogOwnerForInvestorContract(address addr);\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "access denied");\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        emit LogOwnerForInvestorContract(msg.sender);\n', '        s.keys.length++;\n', '    }\n', '    \n', '    function getDividendsPercent(address addr) public view returns(uint num, uint den) {\n', '        uint amount = s.data[addr].value.add(s.data[addr].refBonus);\n', '        if(amount <= 10*10**18) { //10 ETH\n', '            return (15, 1000);\n', '        } else if(amount <= 50*10**18) { //50 ETH\n', '            return (16, 1000);\n', '        } else if(amount <= 100*10**18) { //100 ETH\n', '            return (17, 1000);\n', '        } else if(amount <= 300*10**18) { //300 ETH\n', '            return (185, 10000); //Extra zero for two digits after decimal\n', '        } else {\n', '            return (2, 100);\n', '        }\n', '    }\n', '\n', '    function insert(address addr, uint value) public onlyOwner returns (bool) {\n', '        uint keyIndex = s.data[addr].keyIndex;\n', '        if (keyIndex != 0) return false;\n', '        s.data[addr].value = value;\n', '        keyIndex = s.keys.length++;\n', '        s.data[addr].keyIndex = keyIndex;\n', '        s.keys[keyIndex] = addr;\n', '        return true;\n', '    }\n', '\n', '    function investorFullInfo(address addr) public view returns(uint, uint, uint, uint, uint, uint, uint) {\n', '        return (\n', '        s.data[addr].keyIndex,\n', '        s.data[addr].value,\n', '        s.data[addr].paymentTime,\n', '        s.data[addr].refs,\n', '        s.data[addr].refBonus,\n', '        s.data[addr].pendingPayout,\n', '        s.data[addr].pendingPayoutTime\n', '        );\n', '    }\n', '\n', '    function investorBaseInfo(address addr) public view returns(uint, uint, uint, uint, uint, uint) {\n', '        return (\n', '        s.data[addr].value,\n', '        s.data[addr].paymentTime,\n', '        s.data[addr].refs,\n', '        s.data[addr].refBonus,\n', '        s.data[addr].pendingPayout,\n', '        s.data[addr].pendingPayoutTime\n', '        );\n', '    }\n', '\n', '    function investorShortInfo(address addr) public view returns(uint, uint) {\n', '        return (\n', '        s.data[addr].value,\n', '        s.data[addr].refBonus\n', '        );\n', '    }\n', '\n', '    function addRefBonus(address addr, uint refBonus, uint dividendsPeriod) public onlyOwner returns (bool) {\n', '        if (s.data[addr].keyIndex == 0) {\n', '            assert(insert(addr, 0));\n', '        }\n', '\n', '        uint time;\n', '        if (s.data[addr].pendingPayoutTime == 0) {\n', '            time = s.data[addr].paymentTime;\n', '        } else {\n', '            time = s.data[addr].pendingPayoutTime;\n', '        }\n', '\n', '        if(time != 0) {\n', '            uint value = 0;\n', '            uint256 daysAfter = now.sub(time).div(dividendsPeriod);\n', '            if(daysAfter > 0) {\n', '                value = _getValueForAddr(addr, daysAfter);\n', '            }\n', '            s.data[addr].refBonus += refBonus;\n', '            uint256 hoursAfter = now.sub(time).mod(dividendsPeriod);\n', '            if(hoursAfter > 0) {\n', '                uint dailyDividends = _getValueForAddr(addr, 1);\n', '                uint hourlyDividends = dailyDividends.div(dividendsPeriod).mul(hoursAfter);\n', '                value = value.add(hourlyDividends);\n', '            }\n', '            if (s.data[addr].pendingPayoutTime == 0) {\n', '                s.data[addr].pendingPayout = value;\n', '            } else {\n', '                s.data[addr].pendingPayout = s.data[addr].pendingPayout.add(value);\n', '            }\n', '        } else {\n', '            s.data[addr].refBonus += refBonus;\n', '            s.data[addr].refs++;\n', '        }\n', '        assert(setPendingPayoutTime(addr, now));\n', '        return true;\n', '    }\n', '\n', '    function _getValueForAddr(address addr, uint daysAfter) internal returns (uint value) {\n', '        (uint num, uint den) = getDividendsPercent(addr);\n', '        _percent = Percent.percent(num, den);\n', '        value = _percent.mul(s.data[addr].value.add(s.data[addr].refBonus)) * daysAfter;\n', '    }\n', '\n', '    function addRefBonusWithRefs(address addr, uint refBonus, uint dividendsPeriod) public onlyOwner returns (bool) {\n', '        if (s.data[addr].keyIndex == 0) {\n', '            assert(insert(addr, 0));\n', '        }\n', '\n', '        uint time;\n', '        if (s.data[addr].pendingPayoutTime == 0) {\n', '            time = s.data[addr].paymentTime;\n', '        } else {\n', '            time = s.data[addr].pendingPayoutTime;\n', '        }\n', '\n', '        if(time != 0) {\n', '            uint value = 0;\n', '            uint256 daysAfter = now.sub(time).div(dividendsPeriod);\n', '            if(daysAfter > 0) {\n', '                value = _getValueForAddr(addr, daysAfter);\n', '            }\n', '            s.data[addr].refBonus += refBonus;\n', '            s.data[addr].refs++;\n', '            uint256 hoursAfter = now.sub(time).mod(dividendsPeriod);\n', '            if(hoursAfter > 0) {\n', '                uint dailyDividends = _getValueForAddr(addr, 1);\n', '                uint hourlyDividends = dailyDividends.div(dividendsPeriod).mul(hoursAfter);\n', '                value = value.add(hourlyDividends);\n', '            }\n', '            if (s.data[addr].pendingPayoutTime == 0) {\n', '                s.data[addr].pendingPayout = value;\n', '            } else {\n', '                s.data[addr].pendingPayout = s.data[addr].pendingPayout.add(value);\n', '            }\n', '        } else {\n', '            s.data[addr].refBonus += refBonus;\n', '            s.data[addr].refs++;\n', '        }\n', '        assert(setPendingPayoutTime(addr, now));\n', '        return true;\n', '    }\n', '\n', '    function addValue(address addr, uint value) public onlyOwner returns (bool) {\n', '        if (s.data[addr].keyIndex == 0) return false;\n', '        s.data[addr].value += value;       \n', '        return true;\n', '    }\n', '\n', '    function updateStats(uint dt, uint invested, uint investors) public {\n', '        s.stats[dt].invested += invested;\n', '        s.stats[dt].investors += investors;\n', '    }\n', '    \n', '    function stats(uint dt) public view returns (uint invested, uint investors) {\n', '        return ( \n', '        s.stats[dt].invested,\n', '        s.stats[dt].investors\n', '        );\n', '    }\n', '\n', '    function setPaymentTime(address addr, uint paymentTime) public onlyOwner returns (bool) {\n', '        if (s.data[addr].keyIndex == 0) return false;\n', '        s.data[addr].paymentTime = paymentTime;\n', '        return true;\n', '    }\n', '\n', '    function setPendingPayoutTime(address addr, uint payoutTime) public onlyOwner returns (bool) {\n', '        if (s.data[addr].keyIndex == 0) return false;\n', '        s.data[addr].pendingPayoutTime = payoutTime;\n', '        return true;\n', '    }\n', '\n', '    function setPendingPayout(address addr, uint payout) public onlyOwner returns (bool) {\n', '        if (s.data[addr].keyIndex == 0) return false;\n', '        s.data[addr].pendingPayout = payout;\n', '        return true;\n', '    }\n', '    \n', '    function contains(address addr) public view returns (bool) {\n', '        return s.data[addr].keyIndex > 0;\n', '    }\n', '\n', '    function size() public view returns (uint) {\n', '        return s.keys.length;\n', '    }\n', '\n', '    function iterStart() public pure returns (uint) {\n', '        return 1;\n', '    }\n', '}\n', '\n', 'contract DT {\n', '    struct DateTime {\n', '        uint16 year;\n', '        uint8 month;\n', '        uint8 day;\n', '        uint8 hour;\n', '        uint8 minute;\n', '        uint8 second;\n', '        uint8 weekday;\n', '    }\n', '\n', '    uint private constant DAY_IN_SECONDS = 86400;\n', '    uint private constant YEAR_IN_SECONDS = 31536000;\n', '    uint private constant LEAP_YEAR_IN_SECONDS = 31622400;\n', '\n', '    uint16 private constant ORIGIN_YEAR = 1970;\n', '\n', '    function isLeapYear(uint16 year) internal pure returns (bool) {\n', '        if (year % 4 != 0) {\n', '            return false;\n', '        }\n', '        if (year % 100 != 0) {\n', '            return true;\n', '        }\n', '        if (year % 400 != 0) {\n', '            return false;\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function leapYearsBefore(uint year) internal pure returns (uint) {\n', '        year -= 1;\n', '        return year / 4 - year / 100 + year / 400;\n', '    }\n', '\n', '    function getDaysInMonth(uint8 month, uint16 year) internal pure returns (uint8) {\n', '        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n', '            return 31;\n', '        } else if (month == 4 || month == 6 || month == 9 || month == 11) {\n', '            return 30;\n', '        } else if (isLeapYear(year)) {\n', '            return 29;\n', '        } else {\n', '            return 28;\n', '        }\n', '    }\n', '\n', '    function parseTimestamp(uint timestamp) internal pure returns (DateTime dt) {\n', '        uint secondsAccountedFor = 0;\n', '        uint buf;\n', '        uint8 i;\n', '\n', '        // Year\n', '        dt.year = getYear(timestamp);\n', '        buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR);\n', '\n', '        secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\n', '        secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);\n', '\n', '        // Month\n', '        uint secondsInMonth;\n', '        for (i = 1; i <= 12; i++) {\n', '            secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dt.year);\n', '            if (secondsInMonth + secondsAccountedFor > timestamp) {\n', '                dt.month = i;\n', '                break;\n', '            }\n', '            secondsAccountedFor += secondsInMonth;\n', '        }\n', '\n', '        // Day\n', '        for (i = 1; i <= getDaysInMonth(dt.month, dt.year); i++) {\n', '            if (DAY_IN_SECONDS + secondsAccountedFor > timestamp) {\n', '                dt.day = i;\n', '                break;\n', '            }\n', '            secondsAccountedFor += DAY_IN_SECONDS;\n', '        }\n', '    }\n', '\n', '        \n', '    function getYear(uint timestamp) internal pure returns (uint16) {\n', '        uint secondsAccountedFor = 0;\n', '        uint16 year;\n', '        uint numLeapYears;\n', '\n', '        // Year\n', '        year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\n', '        numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\n', '\n', '        secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\n', '        secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\n', '\n', '        while (secondsAccountedFor > timestamp) {\n', '            if (isLeapYear(uint16(year - 1))) {\n', '                secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\n', '            }\n', '            else {\n', '                secondsAccountedFor -= YEAR_IN_SECONDS;\n', '            }\n', '            year -= 1;\n', '        }\n', '        return year;\n', '    }\n', '\n', '    function getMonth(uint timestamp) internal pure returns (uint8) {\n', '        return parseTimestamp(timestamp).month;\n', '    }\n', '\n', '    function getDay(uint timestamp) internal pure returns (uint8) {\n', '        return parseTimestamp(timestamp).day;\n', '    }\n', '}\n', '\n', 'contract _200eth is DT, Constants {\n', '    using Percent for Percent.percent;\n', '    using SafeMath for uint;\n', '    using Zero for *;\n', '    using ToAddress for *;\n', '    using Convert for *;\n', '\n', '    // investors storage - iterable map;\n', '    InvestorsStorage private m_investors = new InvestorsStorage();\n', '    mapping(address => address) public m_referrals;\n', '    mapping(address => bool) public m_isInvestor;\n', '    bool public m_nextWave = false;\n', '\n', "    // last 10 storage who's investment >= 2 ether\n", '    struct Last10Struct {\n', '        uint value;\n', '        uint index;\n', '    }\n', '    address[] private m_last10InvestorAddr;\n', '    mapping(address => Last10Struct) private m_last10Investor;\n', '\n', '    // automatically generates getters\n', '    address public ownerAddr;\n', '    uint public totalInvestments = 0;\n', '    uint public totalInvested = 0;\n', '    uint public constant minInvesment = 10 finney; // 0.01 eth\n', '    uint public constant dividendsPeriod = 5 minutes; //5 minutes\n', '    uint private gasFee = 0;\n', '    uint private last10 = 0;\n', '\n', '    //Pyramid Coin instance required to send dividends to coin holders.\n', '    E2D public e2d;\n', '\n', '    // percents \n', '    Percent.percent private m_companyPercent = Percent.percent(10, 100); // 10/100*100% = 10%\n', '    Percent.percent private m_refPercent1 = Percent.percent(3, 100); // 3/100*100% = 3%\n', '    Percent.percent private m_refPercent2 = Percent.percent(2, 100); // 2/100*100% = 2%\n', '    Percent.percent private m_fee = Percent.percent(1, 100); // 1/100*100% = 1%\n', '    Percent.percent private m_coinHolders = Percent.percent(5, 100); // 5/100*100% = 5%\n', '    Percent.percent private m_last10 = Percent.percent(4, 100); // 4/100*100% = 4%\n', '    Percent.percent private _percent = Percent.percent(1,100);\n', '\n', '    // more events for easy read from blockchain\n', '    event LogNewInvestor(address indexed addr, uint when, uint value);\n', '    event LogNewInvesment(address indexed addr, uint when, uint value);\n', '    event LogNewReferral(address indexed addr, uint when, uint value);\n', '    event LogPayDividends(address indexed addr, uint when, uint value);\n', '    event LogBalanceChanged(uint when, uint balance);\n', '    event LogNextWave(uint when);\n', '    event LogPayLast10(address addr, uint percent, uint amount);\n', '\n', '    modifier balanceChanged {\n', '        _;\n', '        emit LogBalanceChanged(now, address(this).balance.sub(last10).sub(gasFee));\n', '    }\n', '\n', '    constructor(address _tokenAddress) public {\n', '        ownerAddr = OWNER_WALLET_ADDR;\n', '        e2d = E2D(_tokenAddress);\n', '        setup();\n', '    }\n', '\n', '    function isContract(address _addr) private view returns (bool isWalletAddress){\n', '        uint32 size;\n', '        assembly{\n', '            size := extcodesize(_addr)\n', '        }\n', '        return (size > 0);\n', '    }\n', '\n', '    function setup() internal {\n', '        m_investors = new InvestorsStorage();\n', '        totalInvestments = 0;\n', '        totalInvested = 0;\n', '        gasFee = 0;\n', '        last10 = 0;\n', '        for (uint i = 0; i < m_last10InvestorAddr.length; i++) {\n', '            delete m_last10Investor[m_last10InvestorAddr[i]];\n', '        }\n', '        m_last10InvestorAddr.length = 1;\n', '    }\n', '\n', '    // start the next round of game only after previous is completed.\n', '    function startNewWave() public {\n', '        require(m_nextWave == true, "Game is not stopped yet.");\n', '        require(msg.sender == ownerAddr, "Only Owner can call this function");\n', '        m_nextWave = false;\n', '    }\n', '\n', '    function() public payable {\n', '        // investor get him dividends\n', '        if (msg.value == 0) {\n', '            getMyDividends();\n', '            return;\n', '        }\n', '        // sender do invest\n', '        address refAddr = msg.data.toAddr();\n', '        doInvest(refAddr);\n', '    }\n', '\n', '    function investorsNumber() public view returns(uint) {\n', '        return m_investors.size() - 1;\n', '        // -1 because see InvestorsStorage constructor where keys.length++ \n', '    }\n', '\n', '    function balanceETH() public view returns(uint) {\n', '        return address(this).balance.sub(last10).sub(gasFee);\n', '    }\n', '\n', '    function dividendsPercent() public view returns(uint numerator, uint denominator) {\n', '        (uint num, uint den) = m_investors.getDividendsPercent(msg.sender);\n', '        (numerator, denominator) = (num,den);\n', '    }\n', '\n', '    function companyPercent() public view returns(uint numerator, uint denominator) {\n', '        (numerator, denominator) = (m_companyPercent.num, m_companyPercent.den);\n', '    }\n', '\n', '    function coinHolderPercent() public view returns(uint numerator, uint denominator) {\n', '        (numerator, denominator) = (m_coinHolders.num, m_coinHolders.den);\n', '    }\n', '\n', '    function last10Percent() public view returns(uint numerator, uint denominator) {\n', '        (numerator, denominator) = (m_last10.num, m_last10.den);\n', '    }\n', '\n', '    function feePercent() public view returns(uint numerator, uint denominator) {\n', '        (numerator, denominator) = (m_fee.num, m_fee.den);\n', '    }\n', '\n', '    function referrer1Percent() public view returns(uint numerator, uint denominator) {\n', '        (numerator, denominator) = (m_refPercent1.num, m_refPercent1.den);\n', '    }\n', '\n', '    function referrer2Percent() public view returns(uint numerator, uint denominator) {\n', '        (numerator, denominator) = (m_refPercent2.num, m_refPercent2.den);\n', '    }\n', '\n', '    function stats(uint date) public view returns(uint invested, uint investors) {\n', '        (invested, investors) = m_investors.stats(date);\n', '    }\n', '\n', '    function last10Addr() public view returns(address[]) {\n', '        return m_last10InvestorAddr;\n', '    }\n', '\n', '    function last10Info(address addr) public view returns(uint value, uint index) {\n', '        return (\n', '            m_last10Investor[addr].value,\n', '            m_last10Investor[addr].index\n', '        );\n', '    }\n', '\n', '    function investorInfo(address addr) public view returns(uint value, uint paymentTime, uint refsCount, uint refBonus,\n', '     uint pendingPayout, uint pendingPayoutTime, bool isReferral, uint dividends) {\n', '        (value, paymentTime, refsCount, refBonus, pendingPayout, pendingPayoutTime) = m_investors.investorBaseInfo(addr);\n', '        isReferral = m_referrals[addr].notZero();\n', '        dividends = checkDividends(addr);\n', '    }\n', '\n', '    function checkDividends(address addr) internal view returns (uint) {\n', '        InvestorsStorage.investor memory investor = getMemInvestor(addr);\n', '        if(investor.keyIndex <= 0){\n', '            return 0;\n', '        }\n', '        uint256 time;\n', '        uint256 value = 0;\n', '        if(investor.pendingPayoutTime == 0) {\n', '            time = investor.paymentTime;\n', '        } else {\n', '            time = investor.pendingPayoutTime;\n', '            value = investor.pendingPayout;\n', '        }\n', '        // calculate days after payout time\n', '        uint256 daysAfter = now.sub(time).div(dividendsPeriod);\n', '        if(daysAfter > 0){\n', '            uint256 totalAmount = investor.value.add(investor.refBonus);\n', '            (uint num, uint den) = m_investors.getDividendsPercent(addr);\n', '            value = value.add((totalAmount*num/den) * daysAfter);\n', '        }\n', '        return value;\n', '    }\n', '\n', '    function _getMyDividents(bool withoutThrow) private {\n', '        address addr = msg.sender;\n', '        require(!isContract(addr),"msg.sender must wallet");\n', '        // check investor info\n', '        InvestorsStorage.investor memory investor = getMemInvestor(addr);\n', '        if(investor.keyIndex <= 0){\n', '            if(withoutThrow){\n', '                return;\n', '            }\n', '            revert("sender is not investor");\n', '        }\n', '        uint256 time;\n', '        uint256 value = 0;\n', '        if(investor.pendingPayoutTime == 0) {\n', '            time = investor.paymentTime;\n', '        } else {\n', '            time = investor.pendingPayoutTime;\n', '            value = investor.pendingPayout;\n', '        }\n', '\n', '        // calculate days after payout time\n', '        uint256 daysAfter = now.sub(time).div(dividendsPeriod);\n', '        if(daysAfter > 0){\n', '            uint256 totalAmount = investor.value.add(investor.refBonus);\n', '            (uint num, uint den) = m_investors.getDividendsPercent(addr);\n', '            value = value.add((totalAmount*num/den) * daysAfter);\n', '        }\n', '        if(value == 0) {\n', '            if(withoutThrow){\n', '                return;\n', '            }\n', '            revert("the latest payment was earlier than dividents period");\n', '        } else {\n', '            if (checkBalanceState(addr, value)) {\n', '                return;\n', '            }\n', '        }\n', '\n', '        assert(m_investors.setPaymentTime(msg.sender, now));\n', '\n', '        assert(m_investors.setPendingPayoutTime(msg.sender, 0));\n', '\n', '        assert(m_investors.setPendingPayout(msg.sender, 0));\n', '\n', '        sendDividends(msg.sender, value);\n', '    }\n', '\n', '    function checkBalanceState(address addr, uint value) private returns(bool) {\n', '        uint checkBal = address(this).balance.sub(last10).sub(gasFee);\n', '        if(checkBal < value) {\n', '            sendDividends(addr, checkBal);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function getMyDividends() public balanceChanged {\n', '        _getMyDividents(false);\n', '    }\n', '\n', '    function doInvest(address _ref) public payable balanceChanged {\n', '        require(!isContract(msg.sender),"msg.sender must wallet address");\n', '        require(msg.value >= minInvesment, "msg.value must be >= minInvesment");\n', '        require(!m_nextWave, "no further investment in this pool");\n', '        uint value = msg.value;\n', '        //ref system works only once for sender-referral\n', '        if ((!m_isInvestor[msg.sender] && !m_referrals[msg.sender].notZero()) || \n', '        (m_isInvestor[msg.sender] && m_referrals[msg.sender].notZero())) {\n', '            address ref = m_referrals[msg.sender].notZero() ? m_referrals[msg.sender] : _ref;\n', '            // level 1\n', '            if(notZeroNotSender(ref) && m_isInvestor[ref]) {\n', '                // referrer 1 bonus\n', '                uint reward = m_refPercent1.mul(value);\n', '                if(m_referrals[msg.sender].notZero()) {\n', '                    assert(m_investors.addRefBonus(ref, reward, dividendsPeriod));\n', '                } else {\n', '                    assert(m_investors.addRefBonusWithRefs(ref, reward, dividendsPeriod));\n', '                    m_referrals[msg.sender] = ref;\n', '                }\n', '                emit LogNewReferral(msg.sender, now, value); \n', '                // level 2\n', '                if (notZeroNotSender(m_referrals[ref]) && m_isInvestor[m_referrals[ref]] && ref != m_referrals[ref]) { \n', '                    reward = m_refPercent2.mul(value);\n', '                    assert(m_investors.addRefBonus(m_referrals[ref], reward, dividendsPeriod)); // referrer 2 bonus\n', '                }\n', '            }\n', '        }\n', '\n', '        checkLast10(value);\n', '\n', '        // company commission\n', '        COMPANY_WALLET_ADDR.transfer(m_companyPercent.mul(value));\n', '         // coin holder commission\n', '        e2d.payDividends.value(m_coinHolders.mul(value))();\n', '         // reserved for last 10 distribution\n', '        last10 = last10.add(m_last10.mul(value));\n', '        //reserved for gas fee\n', '        gasFee = gasFee.add(m_fee.mul(value));\n', '\n', '        _getMyDividents(true);\n', '\n', '        DT.DateTime memory dt = parseTimestamp(now);\n', '        uint today = dt.year.uintToString().strConcat((dt.month<10 ? "0":""), dt.month.uintToString(), (dt.day<10 ? "0":""), dt.day.uintToString()).stringToUint();\n', '\n', '        //write to investors storage\n', '        if (m_investors.contains(msg.sender)) {\n', '            assert(m_investors.addValue(msg.sender, value));\n', '            m_investors.updateStats(today, value, 0);\n', '        } else {\n', '            assert(m_investors.insert(msg.sender, value));\n', '            m_isInvestor[msg.sender] = true;\n', '            m_investors.updateStats(today, value, 1);\n', '            emit LogNewInvestor(msg.sender, now, value); \n', '        }\n', '\n', '        assert(m_investors.setPaymentTime(msg.sender, now));\n', '\n', '        emit LogNewInvesment(msg.sender, now, value);   \n', '        totalInvestments++;\n', '        totalInvested += msg.value;\n', '    }\n', '\n', '    function checkLast10(uint value) internal {\n', '        //check if value is >= 2 then add to last 10 \n', '        if(value >= LAST_10_MIN_INVESTMENT) {\n', '            if(m_last10Investor[msg.sender].index != 0) {\n', '                uint index = m_last10Investor[msg.sender].index;\n', '                removeFromLast10AtIndex(index);\n', '            } else if(m_last10InvestorAddr.length == 11) {\n', '                delete m_last10Investor[m_last10InvestorAddr[1]];\n', '                removeFromLast10AtIndex(1);\n', '            }\n', '            m_last10InvestorAddr.push(msg.sender);\n', '            m_last10Investor[msg.sender].index = m_last10InvestorAddr.length - 1;\n', '            m_last10Investor[msg.sender].value = value;\n', '        }\n', '    }\n', '\n', '    function removeFromLast10AtIndex(uint index) internal {\n', '        for (uint i = index; i < m_last10InvestorAddr.length-1; i++){\n', '            m_last10InvestorAddr[i] = m_last10InvestorAddr[i+1];\n', '            m_last10Investor[m_last10InvestorAddr[i]].index = i;\n', '        }\n', '        delete m_last10InvestorAddr[m_last10InvestorAddr.length-1];\n', '        m_last10InvestorAddr.length--;\n', '    }\n', '\n', '    function getMemInvestor(address addr) internal view returns(InvestorsStorage.investor) {\n', '        (uint a, uint b, uint c, uint d, uint e, uint f, uint g) = m_investors.investorFullInfo(addr);\n', '        return InvestorsStorage.investor(a, b, c, d, e, f, g);\n', '    }\n', '\n', '    function notZeroNotSender(address addr) internal view returns(bool) {\n', '        return addr.notZero() && addr != msg.sender;\n', '    }\n', '\n', '    function sendDividends(address addr, uint value) private {\n', '        if (addr.send(value)) {\n', '            emit LogPayDividends(addr, now, value);\n', '            if(address(this).balance.sub(gasFee).sub(last10) <= 0.005 ether) {\n', '                nextWave();\n', '                return;\n', '            }\n', '        }\n', '    }\n', '\n', '    function sendToLast10() private {\n', '        uint lastPos = m_last10InvestorAddr.length - 1;\n', '        uint index = 0;\n', '        uint distributed = 0;\n', '        for (uint pos = lastPos; pos > 0 ; pos--) {\n', '            _percent = getPercentByPosition(index);\n', '            uint amount = _percent.mul(last10);\n', '            if( (!isContract(m_last10InvestorAddr[pos]))){\n', '                m_last10InvestorAddr[pos].transfer(amount);\n', '                emit LogPayLast10(m_last10InvestorAddr[pos], _percent.num, amount);\n', '                distributed = distributed.add(amount);\n', '            }\n', '            index++;\n', '        }\n', '\n', '        last10 = last10.sub(distributed);\n', '        //check if amount is left in last10 and transfer \n', '        if(last10 > 0) {\n', '            LAST10_WALLET_ADDR.transfer(last10);\n', '            last10 = 0;\n', '        }\n', '    }\n', '\n', '    function getPercentByPosition(uint position) internal pure returns(Percent.percent) {\n', '        if(position == 0) {\n', '            return Percent.percent(40, 100); // 40%\n', '        } else if(position == 1) {\n', '            return Percent.percent(25, 100); // 25%\n', '        } else if(position == 2) {\n', '            return Percent.percent(15, 100); // 15%\n', '        } else if(position == 3) {\n', '            return Percent.percent(8, 100); // 8%\n', '        } else if(position == 4) {\n', '            return Percent.percent(5, 100); // 5%\n', '        } else if(position == 5) {\n', '            return Percent.percent(2, 100); // 2%\n', '        } else if(position == 6) {\n', '            return Percent.percent(2, 100); // 2%\n', '        } else if(position == 7) {\n', '            return Percent.percent(15, 1000); // 1.5%\n', '        } else if(position == 8) {\n', '            return Percent.percent(1, 100); // 1%\n', '        } else if(position == 9) {\n', '            return Percent.percent(5, 1000); // 0.5%\n', '        }\n', '    }\n', '\n', '    function nextWave() private {\n', '        if(m_nextWave) {\n', '            return; \n', '        }\n', '        m_nextWave = true;\n', '        sendToLast10();\n', '        //send gas fee to wallet\n', '        FEE_WALLET_ADDR.transfer(gasFee);\n', '        //send remaining contract balance to company wallet\n', '        COMPANY_WALLET_ADDR.transfer(address(this).balance);\n', '        setup();\n', '        emit LogNextWave(now);\n', '    }\n', '}\n', '\n', 'library Percent {\n', '  // Solidity automatically throws when dividing by 0\n', '    struct percent {\n', '        uint num;\n', '        uint den;\n', '    }\n', '    function mul(percent storage p, uint a) internal view returns (uint) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        return a*p.num/p.den;\n', '    }\n', '    \n', '    function div(percent storage p, uint a) internal view returns (uint) {\n', '        return a/p.num*p.den;\n', '    }\n', '\n', '    function sub(percent storage p, uint a) internal view returns (uint) {\n', '        uint b = mul(p, a);\n', '        if (b >= a) return 0;\n', '        return a - b;\n', '    }\n', '\n', '    function add(percent storage p, uint a) internal view returns (uint) {\n', '        return a + mul(p, a);\n', '    }\n', '}\n', '\n', 'library Zero {\n', '    function requireNotZero(uint a) internal pure {\n', '        require(a != 0, "require not zero");\n', '    }\n', '\n', '    function requireNotZero(address addr) internal pure {\n', '        require(addr != address(0), "require not zero address");\n', '    }\n', '\n', '    function notZero(address addr) internal pure returns(bool) {\n', '        return !(addr == address(0));\n', '    }\n', '\n', '    function isZero(address addr) internal pure returns(bool) {\n', '        return addr == address(0);\n', '    }\n', '}\n', '\n', 'library ToAddress {\n', '    function toAddr(uint source) internal pure returns(address) {\n', '        return address(source);\n', '    }\n', '\n', '    function toAddr(bytes source) internal pure returns(address addr) {\n', '        assembly { addr := mload(add(source,0x14)) }\n', '        return addr;\n', '    }\n', '}\n', '\n', 'library Convert {\n', '    function stringToUint(string s) internal pure returns (uint) {\n', '        bytes memory b = bytes(s);\n', '        uint result = 0;\n', '        for (uint i = 0; i < b.length; i++) { // c = b[i] was not needed\n', '            if (b[i] >= 48 && b[i] <= 57) {\n', '                result = result * 10 + (uint(b[i]) - 48); // bytes and int are not compatible with the operator -.\n', '            }\n', '        }\n', '        return result; // this was missing\n', '    }\n', '\n', '    function uintToString(uint v) internal pure returns (string) {\n', '        uint maxlength = 100;\n', '        bytes memory reversed = new bytes(maxlength);\n', '        uint i = 0;\n', '        while (v != 0) {\n', '            uint remainder = v % 10;\n', '            v = v / 10;\n', '            reversed[i++] = byte(48 + remainder);\n', '        }\n', '        bytes memory s = new bytes(i); // i + 1 is inefficient\n', '        for (uint j = 0; j < i; j++) {\n', '            s[j] = reversed[i - j - 1]; // to avoid the off-by-one error\n', '        }\n', "        string memory str = string(s);  // memory isn't implicitly convertible to storage\n", '        return str; // this was missing\n', '    }\n', '\n', '    function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string){\n', '        bytes memory _ba = bytes(_a);\n', '        bytes memory _bb = bytes(_b);\n', '        bytes memory _bc = bytes(_c);\n', '        bytes memory _bd = bytes(_d);\n', '        bytes memory _be = bytes(_e);\n', '        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n', '        bytes memory babcde = bytes(abcde);\n', '        uint k = 0;\n', '        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n', '        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n', '        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n', '        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n', '        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n', '        return string(babcde);\n', '    }\n', '    \n', '    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\n', '        return strConcat(_a, _b, _c, _d, "");\n', '    }\n', '    \n', '    function strConcat(string _a, string _b, string _c) internal pure returns (string) {\n', '        return strConcat(_a, _b, _c, "", "");\n', '    }\n', '    \n', '    function strConcat(string _a, string _b) internal pure returns (string) {\n', '        return strConcat(_a, _b, "", "", "");\n', '    }\n', '}']