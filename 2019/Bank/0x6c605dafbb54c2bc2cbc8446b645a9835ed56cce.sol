['contract owned {\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract Botcash is owned {\n', '    uint256 totalSupply;\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint public minBalanceForAccounts;\n', '    uint256 sellPrice;\n', '    uint256 buyPrice;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => bool) public frozenAccount;\n', '    event FrozenFunds(address target, bool frozen);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    constructor(uint256 initialSupply, string memory tokenName, string memory tokenSymbol, uint8 decimalUnits, address centralMinter) public {\n', '        if (centralMinter != 0) owner = centralMinter;\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);\n', '        balanceOf[msg.sender] = totalSupply;\n', '        name = tokenName;\n', '        symbol = tokenSymbol;\n', '        decimals = decimalUnits;\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != address(0x0));\n', '        require (balanceOf[_from] >= _value);\n', '        require (balanceOf[_to] + _value >= balanceOf[_to]);\n', '        require(!frozenAccount[_from]);\n', '        require(!frozenAccount[_to]);\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public {\n', '        require(balanceOf[msg.sender] >= _value && balanceOf[_to] + _value >= balanceOf[_to]);\n', '\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[_to] += _value;\n', '\n', '        if (msg.sender.balance < minBalanceForAccounts)\n', '            sell((minBalanceForAccounts - msg.sender.balance) / sellPrice);\n', '\n', '\n', '        emit Transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    function mintToken(address target, uint256 mintedAmount) onlyOwner public{\n', '        balanceOf[target] += mintedAmount;\n', '        totalSupply += mintedAmount;\n', '        emit Transfer(0, owner, mintedAmount);\n', '        emit Transfer(owner, target, mintedAmount);\n', '    }\n', '\n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        emit FrozenFunds(target, freeze);\n', '    }\n', '\n', '    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n', '        sellPrice = newSellPrice;\n', '        buyPrice = newBuyPrice;\n', '    }\n', '\n', '\n', '    function buy() public payable returns (uint amount) {\n', '        amount = msg.value / buyPrice;\n', '        _transfer(address(this), msg.sender, amount);\n', '        return amount;\n', '    }\n', '\n', '    function sell(uint amount) public returns (uint revenue) {\n', '        require(balanceOf[msg.sender] >= amount);\n', '        balanceOf[address(this)] += amount;\n', '        balanceOf[msg.sender] -= amount;\n', '        revenue = amount * sellPrice;\n', '        msg.sender.transfer(revenue);\n', '        emit Transfer(msg.sender, address(this), amount);\n', '        return revenue;\n', '    }\n', '\n', '    function setMinBalance(uint minimumBalanceInFinney) onlyOwner public {\n', '        minBalanceForAccounts = minimumBalanceInFinney * 1 finney;\n', '    }\n', '\n', '}']