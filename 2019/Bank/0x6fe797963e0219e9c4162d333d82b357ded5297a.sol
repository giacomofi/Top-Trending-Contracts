['pragma solidity >=0.4.25;\n', '\n', 'library AddressUtils {\n', '\n', '\n', '  function isContract(address addr) internal view returns (bool) {\n', '    uint256 size;\n', '    // XXX Currently there is no better way to check if there is a contract in an address\n', '    // than to check the size of the code at that address.\n', '    // See https://ethereum.stackexchange.com/a/14016/36603\n', '    // for more details about how this works.\n', '    // TODO Check this again before the Serenity release, because all addresses will be\n', '    // contracts then.\n', '    // solium-disable-next-line security/no-inline-assembly\n', '    assembly { size := extcodesize(addr) }\n', '    return size > 0;\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20Interface {\n', '    function allowance(address _from, address _to) public view returns(uint);\n', '    function transferFrom(address _from, address _to, uint _sum) public;\n', '    function transfer(address _to, uint _sum) public;\n', '    function balanceOf(address _owner) public view returns(uint);\n', '}\n', '\n', 'contract WalletInterface {\n', '    function getTransaction(uint _id) public view returns(address, uint, address, uint, uint, bool);\n', '}\n', '\n', 'contract ContractCreator {\n', '    function setContract() public returns(address);\n', '}\n', '\n', 'contract MaxiCreditCompany {\n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint _sum);\n', '    event TokenBoughtFromContract(address indexed _buyer, uint indexed _promoter, uint _sum);\n', '    event TokenBoughtFromSeller(address indexed _buyer, address _seller, uint _amount, uint indexed _offerId);\n', '    event Approval(address indexed _seller, address indexed _buyer, uint _amount);\n', '    event DescriptionChange(bytes32 _txt);\n', '    event NewServer(address indexed _serverAddress, uint indexed _id);\n', '    event ServerChanged(address indexed _newServerAddress, address indexed _oldServerAddress, uint indexed _id);\n', '    event ETHWithdraw(address indexed _to, uint _sum);\n', '    event ERC20Withdraw(address indexed _erc20Address, address indexed _to, uint _sum);\n', '    event SupplyIncreased(uint _amount, uint _totalSupply);\n', '    event NewSaleOffer(uint indexed saleOffersCounter, uint indexed _amount, uint indexed _unitPrice);\n', '    event SetToBuyBack(uint _amount, uint _price);\n', '    event BuyBack(uint indexed _amount, uint indexed buyBackPrice);\n', '    event SetOwner(uint indexed _id, address indexed _newOwner);\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    event OwnerDeleted(uint indexed _id, address indexed _owner);\n', '    event OperatorRightChanged(address indexed _operator, uint _txRight);\n', '    event NewOperator(uint indexed _id, address indexed _newOperator, uint _txRight);\n', '    event OperatorChanged(uint indexed _id, address indexed _newOperator, address indexed oldOperator, uint _txRight);\n', '    event DeleteOperator(uint indexed _id, address indexed _operator);\n', '    event OwnerChangedPrice(uint _priceETH, uint _priceUSD);\n', '    event ServerChangedPrice(uint _priceETH, uint _priceUSD);\n', '    event NewContract(address indexed _addr, uint indexed newContractsLength);\n', '    \n', '    using AddressUtils for address;\n', '    string public name = "MaxiCreditCompanyShare";\n', '    string public symbol = "MC2";\n', '    uint public supply = 80000000;\n', '    uint public decimals = 0;\n', '    bytes32 public description;\n', '    \n', '    uint public unitPriceETH; \n', '    uint public unitPriceUSD;\n', '    uint public shareHoldersNumber;\n', '    mapping (address => uint) shareHolderId;\n', '    address[] public shareHolders;\n', '    bool shareHolderDelete;\n', '    address[10] public contractOwner;\n', '    address[10] public operator;\n', '    uint public ownerCounter;\n', '    \n', '    mapping(address => bool) public isOwner;\n', '    mapping(address => bool) public isOperator;\n', '    mapping(address => uint) public operatorsRights;\n', '\n', '    mapping(address => uint) public balanceOf;\n', '    mapping(address => mapping(uint => uint)) public saleOffersByAddress;\n', '    mapping(uint => address) public saleOffersById;\n', '    mapping(uint => uint) public saleOffersAmount;\n', '    mapping(uint => uint) public saleOffersUnitPrice;\n', '    mapping(address => uint) public sellersOfferCounter;\n', '    uint public saleOffersCounter = 0;\n', '    \n', '    uint public buyBackAmount = 0;\n', '    uint public buyBackPrice = 0;\n', '    \n', '    mapping(address => mapping(address => uint)) public approvedTransfers;\n', '    \n', '    address[] serverAddress;\n', '    mapping (address => bool) isOurServer;\n', '    uint serverAddressArrayLength;\n', '    \n', '    ContractCreator cc;\n', '    address newContract;\n', '    address[] public newContracts;\n', '    uint public newContractsLength;\n', '\n', '    modifier onlyOwner() {\n', '        require(isOwner[msg.sender] == true);\n', '        require(msg.sender != address(0));\n', '        _;\n', '    }  \n', '    \n', '    modifier onlyOperator() {\n', '        require(isOperator[msg.sender] == true);\n', '        require(msg.sender != address(0));\n', '        _;\n', '    }\n', '    \n', '    modifier onlyServer() {\n', '        require(isOurServer[msg.sender] == true);\n', '        require(msg.sender != address(0));\n', '        _;\n', '    }\n', '    \n', '    constructor (uint _initPriceETH, uint _initPriceUSD) public {\n', '       contractOwner[0] = msg.sender;\n', '       isOwner[msg.sender] = true;\n', '       operator[0] = msg.sender;\n', '       isOperator[msg.sender] = true;\n', '       operatorsRights[msg.sender] = 100;\n', '       balanceOf[address(this)] = supply;\n', '       unitPriceETH = _initPriceETH;\n', '       unitPriceUSD = _initPriceUSD;\n', '       shareHoldersNumber = 0;\n', '       shareHolderDelete = false;\n', '       ownerCounter = 1;\n', '    }\n', '    \n', '    function getContractOwner(uint _id) public view returns(address) {\n', '        return(contractOwner[_id]);\n', '    }\n', '    \n', '    function setDescription(bytes32 _txt) public onlyOwner {\n', '        description = _txt;\n', '        emit DescriptionChange(_txt);\n', '    }\n', '    \n', '    function setServerAddress(address _serverAddress) public onlyOwner {\n', '        serverAddressArrayLength = serverAddress.push(_serverAddress);\n', '        isOurServer[_serverAddress] = true;\n', '        emit NewServer(_serverAddress, serverAddressArrayLength - 1);\n', '    }\n', '    \n', '    function modifyServer(uint _id, address _serverAddress) public onlyOwner {\n', '        address oldServer = serverAddress[_id];\n', '        isOurServer[serverAddress[_id]] = false;\n', '        serverAddress[_id] = _serverAddress;\n', '        isOurServer[_serverAddress] = true;\n', '        emit ServerChanged(_serverAddress, oldServer, _id);\n', '    }\n', '    \n', '    function getServerAddressLength() public view onlyOperator returns(uint) {\n', '        return serverAddressArrayLength;\n', '    }\n', '    \n', '    function getServerAddress(uint _num) public view onlyOperator returns(address) {\n', '        return serverAddress[_num];\n', '    }\n', '    \n', '    function checkServerAddress(address _addr) public view onlyOperator returns(bool) {\n', '        return(isOurServer[_addr]);\n', '    }\n', '    \n', '    function withdrawal(uint _sum, address _to) public onlyOperator {\n', '        require(operatorsRights[msg.sender] * address(this).balance / 100 >= _sum);\n', '        require(address(this).balance >= _sum);\n', '        require(_to != address(0) && _sum > 0);\n', '        address(_to).transfer(_sum);\n', '        emit ETHWithdraw(_to, _sum);\n', '    }\n', '    \n', '    function withdrawERC20(address _erc20Address, address _to, uint _amount) public onlyOperator {\n', '        ERC20Interface ei = ERC20Interface(_erc20Address);\n', '        require(operatorsRights[msg.sender] * ei.balanceOf(this) / 100 >= _amount);\n', '        require(_erc20Address != address(0) && _to != address(0));\n', '        ei.transfer(_to, _amount);\n', '        emit ERC20Withdraw(_erc20Address, _to, _amount);\n', '    }\n', '    /*\n', '    */\n', '    function totalSupply() public view returns(uint) {\n', '        return(supply);\n', '    }\n', '    \n', '    function increaseSupply(uint _amount) public onlyOwner {\n', '        supply += _amount;\n', '        balanceOf[this] += _amount;\n', '        emit SupplyIncreased(_amount, supply);\n', '    }\n', '    \n', '    function _transfer(address _from, address _to, uint _sum) private {\n', '        require(_from != address(0));\n', '        require(_to != address(0));\n', '        require(_from != _to);\n', '        require(_sum > 0);\n', '        require(balanceOf[_from] >= _sum);\n', '        require(balanceOf[_to] + _sum >= _sum);\n', '        if(balanceOf[_to] == 0) {\n', '            shareHolderId[_to] = shareHoldersNumber;\n', '            if(shareHolderDelete) {\n', '                shareHolders[shareHoldersNumber] = _to;\n', '                shareHolderDelete = false;\n', '            } else {\n', '                shareHolders.push(_to);    \n', '            }\n', '            shareHoldersNumber ++;\n', '        }\n', '        uint sumBalanceBeforeTx = balanceOf[_from] + balanceOf[_to]; \n', '        balanceOf[_from] -= _sum;\n', '        balanceOf[_to] += _sum;\n', '        if(balanceOf[_from] == 0) {\n', '            shareHoldersNumber --;\n', '            shareHolders[shareHolderId[_from]] = shareHolders[shareHoldersNumber];\n', '            shareHolderId[shareHolders[shareHoldersNumber]] = shareHolderId[_from];\n', '            delete shareHolders[shareHoldersNumber];\n', '            shareHolderDelete = true;\n', '        }\n', '        assert(sumBalanceBeforeTx == balanceOf[_from] + balanceOf[_to]);\n', '        emit Transfer(_from, _to, _sum);\n', '    }\n', '    \n', '    function transfer(address _to, uint _sum) external returns(bool) {\n', '        _transfer(msg.sender, _to, _sum);\n', '        return(true);\n', '    }\n', '    \n', '    function transferFromContractsBalance(address _to, uint _sum) public onlyOwner {\n', '        require(_to != address(0));\n', '        require(this != _to);\n', '        require(_sum > 0);\n', '        require(balanceOf[this] >= _sum);\n', '        require(balanceOf[_to] + _sum >= _sum);\n', '        if(balanceOf[_to] == 0) {\n', '            shareHolderId[_to] = shareHoldersNumber;\n', '            if(shareHolderDelete) {\n', '                shareHolders[shareHoldersNumber] = _to;\n', '                shareHolderDelete = false;\n', '            } else {\n', '                shareHolders.push(_to);    \n', '            }   \n', '            shareHoldersNumber ++;\n', '        }\n', '        uint sumBalanceBeforeTx = balanceOf[this] + balanceOf[_to]; \n', '        balanceOf[this] -= _sum;\n', '        balanceOf[_to] += _sum;\n', '        assert(sumBalanceBeforeTx == balanceOf[this] + balanceOf[_to]);\n', '        emit Transfer(this, _to, _sum);\n', '    }\n', '\n', '    function setToSale(uint _amount, uint _unitPrice) public {\n', '        require(balanceOf[msg.sender] >= _amount);\n', '        require(_unitPrice > 0);\n', '        saleOffersByAddress[msg.sender][sellersOfferCounter[msg.sender]] = saleOffersCounter;\n', '        saleOffersById[saleOffersCounter] = msg.sender;\n', '        saleOffersAmount[saleOffersCounter] = _amount;\n', '        saleOffersUnitPrice[saleOffersCounter] = _unitPrice;\n', '        emit NewSaleOffer(saleOffersCounter, _amount, _unitPrice);\n', '        sellersOfferCounter[msg.sender] ++;\n', '        saleOffersCounter ++;\n', '    }\n', '    \n', '    function getSaleOffer(uint _id) public view returns(address, uint, uint) {\n', '        return(saleOffersById[_id], saleOffersAmount[_id], saleOffersUnitPrice[_id]);\n', '    }\n', '    \n', '    function buyFromSeller(uint _amount, uint _offerId) public payable {\n', '        require(saleOffersAmount[_offerId] >= _amount);\n', '        uint orderPrice = _amount * saleOffersUnitPrice[_offerId];\n', '        require(msg.value == orderPrice);\n', '        saleOffersAmount[_offerId] -= _amount;\n', '        _transfer(saleOffersById[_offerId], msg.sender, _amount);\n', '        uint sellersShare = orderPrice * 99 / 100;\n', '        uint toSend = sellersShare;\n', '        sellersShare = 0;\n', '        saleOffersById[_offerId].transfer(toSend);\n', '        emit TokenBoughtFromSeller(msg.sender, saleOffersById[_offerId], _amount, _offerId);\n', '    }\n', '    \n', '    function setBuyBack(uint _amount, uint _price) public onlyOperator {\n', '        buyBackAmount += _amount;\n', '        buyBackPrice = _price;\n', '        emit SetToBuyBack(_amount, _price);\n', '    }\n', '\n', '    function buyback(uint _amount) public {\n', '        require(buyBackAmount >= _amount);\n', '        buyBackAmount -= _amount;\n', '        _transfer(msg.sender, this, _amount);\n', '        msg.sender.transfer(_amount * buyBackPrice); \n', '        emit BuyBack(_amount, buyBackPrice);\n', '    }\n', '    \n', '    function getETH(uint _amount) public payable {\n', '        require(msg.value == _amount);\n', '        //event?\n', '    }\n', '    \n', '    //should be different function for set and modify owner and operator\n', '    function setContractOwner(uint _id, address _newOwner) public onlyOwner {\n', '        require(contractOwner[_id] == address(0) && !isOwner[_newOwner]);\n', '        contractOwner[_id] = _newOwner;\n', '        isOwner[_newOwner] = true;\n', '        ownerCounter++;\n', '        emit SetOwner(_id, _newOwner);\n', '    }\n', '    \n', '    function modifyContractOwner(uint _id, address _newOwner) public onlyOwner {\n', '        require(contractOwner[_id] != address(0) && contractOwner[_id] != _newOwner);\n', '        address previousOwner = contractOwner[_id];\n', '        isOwner[contractOwner[_id]] = false;\n', '        contractOwner[_id] = _newOwner;\n', '        isOwner[_newOwner] = true;\n', '        emit OwnershipTransferred(previousOwner, _newOwner);\n', '    }\n', '    \n', '    function deleteOwner(uint _id, address _addr) public onlyOwner {\n', '        require(ownerCounter > 1);\n', '        require(isOwner[_addr] && contractOwner[_id] == _addr);\n', '        isOwner[_addr] = false;\n', '        contractOwner[_id] = address(0);\n', '        ownerCounter--;\n', '        emit OwnerDeleted(_id, _addr);\n', '    }\n', '    \n', '    function setOperatorsRight(address _operator, uint _txRight) public onlyOwner {\n', '        require(_txRight <= 100 && isOperator[_operator]);\n', '        operatorsRights[_operator] = _txRight;\n', '        emit OperatorRightChanged(_operator, _txRight);\n', '    }\n', '    \n', '    function setOperator(uint _id, address _newOperator, uint _txRight) public onlyOwner {\n', '        require(_txRight <= 100 && operator[_id] == address(0) && !isOperator[_newOperator]);\n', '        operator[_id] = _newOperator;\n', '        operatorsRights[_newOperator] = _txRight;\n', '        isOperator[_newOperator] = true;\n', '        emit NewOperator(_id, _newOperator, _txRight);\n', '    }\n', '    \n', '    function modifyOperator(uint _id, address _newOperator, uint _txRight) public onlyOwner {\n', '        require(operator[_id] != address(0) && operator[_id] != _newOperator && _txRight < 100);\n', '        address oldOperator = operator[_id];\n', '        isOperator[operator[_id]] = false;\n', '        operatorsRights[operator[_id]] = 0;\n', '        isOperator[_newOperator] = true;\n', '        operator[_id] = _newOperator;\n', '        operatorsRights[_newOperator] = _txRight;\n', '        emit OperatorChanged(_id, _newOperator, oldOperator, _txRight);\n', '    }\n', '    \n', '    function deleteOperator(uint _id, address _operator) public onlyOwner {\n', '        require(isOperator[_operator] && operator[_id] == _operator);\n', '        isOperator[_operator] = false;\n', '        operatorsRights[_operator] = 0;\n', '        operator[_id] = address(0);\n', '        emit DeleteOperator(_id, _operator);\n', '    }\n', '\n', '    function getShareNumber(address _addr) public view returns(uint) {\n', '        return(balanceOf[_addr]);\n', '    }\n', '\n', '    function approve(address _to, uint _sum) public {\n', '        approvedTransfers[msg.sender][_to] += _sum;\n', '        emit Approval(msg.sender, _to, _sum);\n', '    }\n', '    \n', '    function allowance(address _from, address _to) public view returns(uint) {\n', '        return (approvedTransfers[_from][_to]);\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint _sum) public { \n', '        require(approvedTransfers[_from][msg.sender] >= _sum);\n', '        approvedTransfers[_from][msg.sender] -= _sum;\n', '        _transfer(_from, _to, _sum); \n', '    }\n', '\n', '    function changePriceByOwner(uint _priceETH, uint _priceUSD) public onlyOwner {\n', '        require(_priceETH > 0 && _priceUSD > 0);\n', '        unitPriceETH = _priceETH;\n', '        unitPriceUSD = _priceUSD;\n', '        emit OwnerChangedPrice(_priceETH, _priceUSD);\n', '    }\n', '    \n', '    function changePriceByServer(uint _priceETH, uint _priceUSD) public onlyServer {\n', '        require(_priceETH > 0 && _priceUSD > 0);\n', '        unitPriceETH = _priceETH;\n', '        unitPriceUSD = _priceUSD;\n', '        emit ServerChangedPrice(_priceETH, _priceUSD);\n', '    }\n', '    \n', '    function checkIsShareHolder() public view returns(bool){\n', '        if(balanceOf[msg.sender] > 0) {\n', '            return(true);\n', '        } else {\n', '            return(false);\n', '        }\n', '    } \n', '    \n', '    function getShareHolderRegister() public view returns(address[] memory) {\n', '        return(shareHolders);\n', '    }\n', '    \n', '    function setNewContract(address _addr) public onlyOperator {\n', '        cc = ContractCreator(_addr);\n', '        newContract = cc.setContract();\n', '        newContracts.push(newContract);\n', '        newContractsLength ++;\n', '        emit NewContract(_addr, newContractsLength);\n', '    }\n', '}']