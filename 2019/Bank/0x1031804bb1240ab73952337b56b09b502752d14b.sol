['pragma solidity ^0.4.25;\n', '\n', 'contract SafeMath {\n', '  function safeMul(uint a, uint b) pure internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint a, uint b) pure internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint a, uint b) pure internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '}\n', '\n', 'contract Token {\n', '  \n', '  function totalSupply() public view returns (uint256 supply);\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 balance);\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '  uint public decimals;\n', '  string public name;\n', '}\n', '\n', '\n', 'contract AccountLevels {\n', '  //given a user, returns an account level\n', '  //0 = regular user (pays take fee and make fee)\n', '  //1 = market maker silver (pays take fee, no make fee, gets rebate)\n', '  //2 = market maker gold (pays take fee, no make fee, gets entire counterparty&#39;s take fee as rebate)\n', '  function accountLevel(address user) public view returns(uint);\n', '}\n', '\n', 'contract AccountLevelsTest is AccountLevels {\n', '  mapping (address => uint) public accountLevels;\n', '\n', '  function setAccountLevel(address user, uint level) public{\n', '    accountLevels[user] = level;\n', '  }\n', '\n', '  function accountLevel(address user) public view returns(uint) {\n', '    return accountLevels[user];\n', '  }\n', '}\n', '\n', 'contract EtherDelta is SafeMath {\n', '  address public admin; //the admin address\n', '  address public feeAccount; //the account that will receive fees\n', '  address public accountLevelsAddr; //the address of the AccountLevels contract\n', '  uint public feeMake; //percentage times (1 ether)\n', '  uint public feeTake; //percentage times (1 ether)\n', '  uint public feeRebate; //percentage times (1 ether)\n', '  mapping (address => mapping (address => uint)) public tokens; //mapping of token addresses to mapping of account balances (token=0 means Ether)\n', '  mapping (address => mapping (bytes32 => bool)) public orders; //mapping of user accounts to mapping of order hashes to booleans (true = submitted by user, equivalent to offchain signature)\n', '  mapping (address => mapping (bytes32 => uint)) public orderFills; //mapping of user accounts to mapping of order hashes to uints (amount of order that has been filled)\n', '\n', '  event Order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user);\n', '  event Cancel(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s);\n', '  event Trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address get, address give);\n', '  event Deposit(address token, address user, uint amount, uint balance);\n', '  event Withdraw(address token, address user, uint amount, uint balance);\n', '\n', '  constructor(address admin_, address feeAccount_, address accountLevelsAddr_, uint feeMake_, uint feeTake_, uint feeRebate_) public{\n', '    admin = admin_;\n', '    feeAccount = feeAccount_;\n', '    accountLevelsAddr = accountLevelsAddr_;\n', '    feeMake = feeMake_;\n', '    feeTake = feeTake_;\n', '    feeRebate = feeRebate_;\n', '  }\n', '\n', '  function() public{\n', '    revert();\n', '  }\n', '\n', '  function changeAdmin(address admin_) public{\n', '    require(msg.sender != admin);\n', '    admin = admin_;\n', '  }\n', '\n', '  function changeAccountLevelsAddr(address accountLevelsAddr_) public{\n', '    require(msg.sender != admin);\n', '    accountLevelsAddr = accountLevelsAddr_;\n', '  }\n', '\n', '  function changeFeeAccount(address feeAccount_) public{\n', '    require(msg.sender != admin);\n', '    feeAccount = feeAccount_;\n', '  }\n', '\n', '  function changeFeeMake(uint feeMake_) public{\n', '    require(msg.sender != admin);\n', '    require(feeMake_ > feeMake);\n', '    feeMake = feeMake_;\n', '  }\n', '\n', '  function changeFeeTake(uint feeTake_) public{\n', '    require(msg.sender != admin);\n', '    require(feeTake_ > feeTake || feeTake_ < feeRebate);\n', '    feeTake = feeTake_;\n', '  }\n', '\n', '  function changeFeeRebate(uint feeRebate_) public{\n', '    require(msg.sender != admin);\n', '    require(feeRebate_ < feeRebate || feeRebate_ > feeTake);\n', '    feeRebate = feeRebate_;\n', '  }\n', '\n', '  function deposit() public payable {\n', '    tokens[0][msg.sender] = safeAdd(tokens[0][msg.sender], msg.value);\n', '    emit Deposit(0, msg.sender, msg.value, tokens[0][msg.sender]);\n', '  }\n', '\n', '  function withdraw(uint amount) public{\n', '    require(tokens[0][msg.sender] < amount);\n', '    tokens[0][msg.sender] = safeSub(tokens[0][msg.sender], amount);\n', '    require(!msg.sender.call.value(amount)());\n', '    emit Withdraw(0, msg.sender, amount, tokens[0][msg.sender]);\n', '  }\n', '\n', '  function depositToken(address token, uint amount) public{\n', '    //remember to call Token(address).approve(this, amount) or this contract will not be able to do the transfer on your behalf.\n', '    require(token==0);\n', '    require(!Token(token).transferFrom(msg.sender, this, amount));\n', '    tokens[token][msg.sender] = safeAdd(tokens[token][msg.sender], amount);\n', '    emit Deposit(token, msg.sender, amount, tokens[token][msg.sender]);\n', '  }\n', '\n', '  function withdrawToken(address token, uint amount) public{\n', '    require(token==0);\n', '    require(tokens[token][msg.sender] < amount);\n', '    tokens[token][msg.sender] = safeSub(tokens[token][msg.sender], amount);\n', '    require(!Token(token).transfer(msg.sender, amount));\n', '    emit Withdraw(token, msg.sender, amount, tokens[token][msg.sender]);\n', '  }\n', '\n', '  function balanceOf(address token, address user) public view returns (uint) {\n', '    return tokens[token][user];\n', '  }\n', '\n', '  function order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce) public {\n', '    bytes32 hash = sha256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n', '    orders[msg.sender][hash] = true;\n', '    emit Order(tokenGet, amountGet, tokenGive, amountGive, expires, nonce, msg.sender);\n', '  }\n', '\n', '  function trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount) public{\n', '    //amount is in amountGet terms\n', '    bytes32 hash = sha256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n', '    require(!(\n', '      (orders[user][hash] || ecrecover(keccak256(abi.encodePacked("\\x19Ethereum Signed Message:\\n32", hash)),v,r,s) == user) &&\n', '      block.number <= expires &&\n', '      safeAdd(orderFills[user][hash], amount) <= amountGet\n', '    ));\n', '    tradeBalances(tokenGet, amountGet, tokenGive, amountGive, user, amount);\n', '    orderFills[user][hash] = safeAdd(orderFills[user][hash], amount);\n', '    emit Trade(tokenGet, amount, tokenGive, amountGive * amount / amountGet, user, msg.sender);\n', '  }\n', '\n', '  function tradeBalances(address tokenGet, uint amountGet, address tokenGive, uint amountGive, address user, uint amount) private {\n', '    uint feeMakeXfer = safeMul(amount, feeMake) / (1 ether);\n', '    uint feeTakeXfer = safeMul(amount, feeTake) / (1 ether);\n', '    uint feeRebateXfer = 0;\n', '    if (accountLevelsAddr != 0x0) {\n', '      uint accountLevel = AccountLevels(accountLevelsAddr).accountLevel(user);\n', '      if (accountLevel==1) feeRebateXfer = safeMul(amount, feeRebate) / (1 ether);\n', '      if (accountLevel==2) feeRebateXfer = feeTakeXfer;\n', '    }\n', '    tokens[tokenGet][msg.sender] = safeSub(tokens[tokenGet][msg.sender], safeAdd(amount, feeTakeXfer));\n', '    tokens[tokenGet][user] = safeAdd(tokens[tokenGet][user], safeSub(safeAdd(amount, feeRebateXfer), feeMakeXfer));\n', '    tokens[tokenGet][feeAccount] = safeAdd(tokens[tokenGet][feeAccount], safeSub(safeAdd(feeMakeXfer, feeTakeXfer), feeRebateXfer));\n', '    tokens[tokenGive][user] = safeSub(tokens[tokenGive][user], safeMul(amountGive, amount) / amountGet);\n', '    tokens[tokenGive][msg.sender] = safeAdd(tokens[tokenGive][msg.sender], safeMul(amountGive, amount) / amountGet);\n', '  }\n', '\n', '  function testTrade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount, address sender) public view returns(bool) {\n', '    if (!(\n', '      tokens[tokenGet][sender] >= amount &&\n', '      availableVolume(tokenGet, amountGet, tokenGive, amountGive, expires, nonce, user, v, r, s) >= amount\n', '    )) return false;\n', '    return true;\n', '  }\n', '\n', '  function availableVolume(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s) public view returns(uint) {\n', '    bytes32 hash = sha256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n', '    if (!(\n', '      (orders[user][hash] || ecrecover(keccak256(abi.encodePacked("\\x19Ethereum Signed Message:\\n32", hash)),v,r,s) == user) &&\n', '      block.number <= expires\n', '    )) return 0;\n', '    uint available1 = safeSub(amountGet, orderFills[user][hash]);\n', '    uint available2 = safeMul(tokens[tokenGive][user], amountGet) / amountGive;\n', '    if (available1<available2) return available1;\n', '    return available2;\n', '  }\n', '\n', '  function amountFilled(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user) public view returns(uint) {\n', '    bytes32 hash = sha256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n', '    return orderFills[user][hash];\n', '  }\n', '\n', '  function cancelOrder(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, uint8 v, bytes32 r, bytes32 s) public{\n', '    bytes32 hash = sha256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n', '    require(!(orders[msg.sender][hash] || ecrecover(keccak256(abi.encodePacked("\\x19Ethereum Signed Message:\\n32", hash)),v,r,s) == msg.sender));\n', '    orderFills[msg.sender][hash] = amountGet;\n', '    emit Cancel(tokenGet, amountGet, tokenGive, amountGive, expires, nonce, msg.sender, v, r, s);\n', '  }\n', '}']