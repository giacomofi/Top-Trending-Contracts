['pragma solidity 0.4.18;\n', '\n', '// File: contracts/FeeBurnerInterface.sol\n', '\n', 'interface FeeBurnerInterface {\n', '    function handleFees (uint tradeWeiAmount, address reserve, address wallet) public returns(bool);\n', '    function setReserveData(address reserve, uint feesInBps, address kncWallet) public;\n', '}\n', '\n', '// File: contracts/ERC20Interface.sol\n', '\n', '// https://github.com/ethereum/EIPs/issues/20\n', 'interface ERC20 {\n', '    function totalSupply() public view returns (uint supply);\n', '    function balanceOf(address _owner) public view returns (uint balance);\n', '    function transfer(address _to, uint _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n', '    function approve(address _spender, uint _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint remaining);\n', '    function decimals() public view returns(uint digits);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', '// File: contracts/PermissionGroups.sol\n', '\n', 'contract PermissionGroups {\n', '\n', '    address public admin;\n', '    address public pendingAdmin;\n', '    mapping(address=>bool) internal operators;\n', '    mapping(address=>bool) internal alerters;\n', '    address[] internal operatorsGroup;\n', '    address[] internal alertersGroup;\n', '    uint constant internal MAX_GROUP_SIZE = 50;\n', '\n', '    function PermissionGroups() public {\n', '        admin = msg.sender;\n', '    }\n', '\n', '    modifier onlyAdmin() {\n', '        require(msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOperator() {\n', '        require(operators[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAlerter() {\n', '        require(alerters[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    function getOperators () external view returns(address[]) {\n', '        return operatorsGroup;\n', '    }\n', '\n', '    function getAlerters () external view returns(address[]) {\n', '        return alertersGroup;\n', '    }\n', '\n', '    event TransferAdminPending(address pendingAdmin);\n', '\n', '    /**\n', '     * @dev Allows the current admin to set the pendingAdmin address.\n', '     * @param newAdmin The address to transfer ownership to.\n', '     */\n', '    function transferAdmin(address newAdmin) public onlyAdmin {\n', '        require(newAdmin != address(0));\n', '        TransferAdminPending(pendingAdmin);\n', '        pendingAdmin = newAdmin;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current admin to set the admin in one tx. Useful initial deployment.\n', '     * @param newAdmin The address to transfer ownership to.\n', '     */\n', '    function transferAdminQuickly(address newAdmin) public onlyAdmin {\n', '        require(newAdmin != address(0));\n', '        TransferAdminPending(newAdmin);\n', '        AdminClaimed(newAdmin, admin);\n', '        admin = newAdmin;\n', '    }\n', '\n', '    event AdminClaimed( address newAdmin, address previousAdmin);\n', '\n', '    /**\n', '     * @dev Allows the pendingAdmin address to finalize the change admin process.\n', '     */\n', '    function claimAdmin() public {\n', '        require(pendingAdmin == msg.sender);\n', '        AdminClaimed(pendingAdmin, admin);\n', '        admin = pendingAdmin;\n', '        pendingAdmin = address(0);\n', '    }\n', '\n', '    event AlerterAdded (address newAlerter, bool isAdd);\n', '\n', '    function addAlerter(address newAlerter) public onlyAdmin {\n', '        require(!alerters[newAlerter]); // prevent duplicates.\n', '        require(alertersGroup.length < MAX_GROUP_SIZE);\n', '\n', '        AlerterAdded(newAlerter, true);\n', '        alerters[newAlerter] = true;\n', '        alertersGroup.push(newAlerter);\n', '    }\n', '\n', '    function removeAlerter (address alerter) public onlyAdmin {\n', '        require(alerters[alerter]);\n', '        alerters[alerter] = false;\n', '\n', '        for (uint i = 0; i < alertersGroup.length; ++i) {\n', '            if (alertersGroup[i] == alerter) {\n', '                alertersGroup[i] = alertersGroup[alertersGroup.length - 1];\n', '                alertersGroup.length--;\n', '                AlerterAdded(alerter, false);\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '    event OperatorAdded(address newOperator, bool isAdd);\n', '\n', '    function addOperator(address newOperator) public onlyAdmin {\n', '        require(!operators[newOperator]); // prevent duplicates.\n', '        require(operatorsGroup.length < MAX_GROUP_SIZE);\n', '\n', '        OperatorAdded(newOperator, true);\n', '        operators[newOperator] = true;\n', '        operatorsGroup.push(newOperator);\n', '    }\n', '\n', '    function removeOperator (address operator) public onlyAdmin {\n', '        require(operators[operator]);\n', '        operators[operator] = false;\n', '\n', '        for (uint i = 0; i < operatorsGroup.length; ++i) {\n', '            if (operatorsGroup[i] == operator) {\n', '                operatorsGroup[i] = operatorsGroup[operatorsGroup.length - 1];\n', '                operatorsGroup.length -= 1;\n', '                OperatorAdded(operator, false);\n', '                break;\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/Withdrawable.sol\n', '\n', '/**\n', ' * @title Contracts that should be able to recover tokens or ethers\n', ' * @author Ilan Doron\n', ' * @dev This allows to recover any tokens or Ethers received in a contract.\n', ' * This will prevent any accidental loss of tokens.\n', ' */\n', 'contract Withdrawable is PermissionGroups {\n', '\n', '    event TokenWithdraw(ERC20 token, uint amount, address sendTo);\n', '\n', '    /**\n', '     * @dev Withdraw all ERC20 compatible tokens\n', '     * @param token ERC20 The address of the token contract\n', '     */\n', '    function withdrawToken(ERC20 token, uint amount, address sendTo) external onlyAdmin {\n', '        require(token.transfer(sendTo, amount));\n', '        TokenWithdraw(token, amount, sendTo);\n', '    }\n', '\n', '    event EtherWithdraw(uint amount, address sendTo);\n', '\n', '    /**\n', '     * @dev Withdraw Ethers\n', '     */\n', '    function withdrawEther(uint amount, address sendTo) external onlyAdmin {\n', '        sendTo.transfer(amount);\n', '        EtherWithdraw(amount, sendTo);\n', '    }\n', '}\n', '\n', '// File: contracts/Utils.sol\n', '\n', '/// @title Kyber constants contract\n', 'contract Utils {\n', '\n', '    ERC20 constant internal ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);\n', '    uint  constant internal PRECISION = (10**18);\n', '    uint  constant internal MAX_QTY   = (10**28); // 10B tokens\n', '    uint  constant internal MAX_RATE  = (PRECISION * 10**6); // up to 1M tokens per ETH\n', '    uint  constant internal MAX_DECIMALS = 18;\n', '    uint  constant internal ETH_DECIMALS = 18;\n', '    mapping(address=>uint) internal decimals;\n', '\n', '    function setDecimals(ERC20 token) internal {\n', '        if (token == ETH_TOKEN_ADDRESS) decimals[token] = ETH_DECIMALS;\n', '        else decimals[token] = token.decimals();\n', '    }\n', '\n', '    function getDecimals(ERC20 token) internal view returns(uint) {\n', '        if (token == ETH_TOKEN_ADDRESS) return ETH_DECIMALS; // save storage access\n', '        uint tokenDecimals = decimals[token];\n', '        // technically, there might be token with decimals 0\n', '        // moreover, very possible that old tokens have decimals 0\n', '        // these tokens will just have higher gas fees.\n', '        if(tokenDecimals == 0) return token.decimals();\n', '\n', '        return tokenDecimals;\n', '    }\n', '\n', '    function calcDstQty(uint srcQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\n', '        require(srcQty <= MAX_QTY);\n', '        require(rate <= MAX_RATE);\n', '\n', '        if (dstDecimals >= srcDecimals) {\n', '            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n', '            return (srcQty * rate * (10**(dstDecimals - srcDecimals))) / PRECISION;\n', '        } else {\n', '            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n', '            return (srcQty * rate) / (PRECISION * (10**(srcDecimals - dstDecimals)));\n', '        }\n', '    }\n', '\n', '    function calcSrcQty(uint dstQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\n', '        require(dstQty <= MAX_QTY);\n', '        require(rate <= MAX_RATE);\n', '        \n', '        //source quantity is rounded up. to avoid dest quantity being too low.\n', '        uint numerator;\n', '        uint denominator;\n', '        if (srcDecimals >= dstDecimals) {\n', '            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n', '            numerator = (PRECISION * dstQty * (10**(srcDecimals - dstDecimals)));\n', '            denominator = rate;\n', '        } else {\n', '            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n', '            numerator = (PRECISION * dstQty);\n', '            denominator = (rate * (10**(dstDecimals - srcDecimals)));\n', '        }\n', '        return (numerator + denominator - 1) / denominator; //avoid rounding down errors\n', '    }\n', '}\n', '\n', '// File: contracts/Utils2.sol\n', '\n', 'contract Utils2 is Utils {\n', '\n', '    /// @dev get the balance of a user.\n', '    /// @param token The token type\n', '    /// @return The balance\n', '    function getBalance(ERC20 token, address user) public view returns(uint) {\n', '        if (token == ETH_TOKEN_ADDRESS)\n', '            return user.balance;\n', '        else\n', '            return token.balanceOf(user);\n', '    }\n', '\n', '    function getDecimalsSafe(ERC20 token) internal returns(uint) {\n', '\n', '        if (decimals[token] == 0) {\n', '            setDecimals(token);\n', '        }\n', '\n', '        return decimals[token];\n', '    }\n', '\n', '    function calcDestAmount(ERC20 src, ERC20 dest, uint srcAmount, uint rate) internal view returns(uint) {\n', '        return calcDstQty(srcAmount, getDecimals(src), getDecimals(dest), rate);\n', '    }\n', '\n', '    function calcSrcAmount(ERC20 src, ERC20 dest, uint destAmount, uint rate) internal view returns(uint) {\n', '        return calcSrcQty(destAmount, getDecimals(src), getDecimals(dest), rate);\n', '    }\n', '\n', '    function calcRateFromQty(uint srcAmount, uint destAmount, uint srcDecimals, uint dstDecimals)\n', '        internal pure returns(uint)\n', '    {\n', '        require(srcAmount <= MAX_QTY);\n', '        require(destAmount <= MAX_QTY);\n', '\n', '        if (dstDecimals >= srcDecimals) {\n', '            require((dstDecimals - srcDecimals) <= MAX_DECIMALS);\n', '            return (destAmount * PRECISION / ((10 ** (dstDecimals - srcDecimals)) * srcAmount));\n', '        } else {\n', '            require((srcDecimals - dstDecimals) <= MAX_DECIMALS);\n', '            return (destAmount * PRECISION * (10 ** (srcDecimals - dstDecimals)) / srcAmount);\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/KyberNetworkInterface.sol\n', '\n', '/// @title Kyber Network interface\n', 'interface KyberNetworkInterface {\n', '    function maxGasPrice() public view returns(uint);\n', '    function getUserCapInWei(address user) public view returns(uint);\n', '    function getUserCapInTokenWei(address user, ERC20 token) public view returns(uint);\n', '    function enabled() public view returns(bool);\n', '    function info(bytes32 id) public view returns(uint);\n', '\n', '    function getExpectedRate(ERC20 src, ERC20 dest, uint srcQty) public view\n', '        returns (uint expectedRate, uint slippageRate);\n', '\n', '    function tradeWithHint(address trader, ERC20 src, uint srcAmount, ERC20 dest, address destAddress,\n', '        uint maxDestAmount, uint minConversionRate, address walletId, bytes hint) public payable returns(uint);\n', '}\n', '\n', '// File: contracts/FeeBurner.sol\n', '\n', 'interface BurnableToken {\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool);\n', '    function burnFrom(address _from, uint256 _value) public returns (bool);\n', '}\n', '\n', '\n', 'contract FeeBurner is Withdrawable, FeeBurnerInterface, Utils2 {\n', '\n', '    mapping(address=>uint) public reserveFeesInBps;\n', '    mapping(address=>address) public reserveKNCWallet; //wallet holding knc per reserve. from here burn and send fees.\n', '    mapping(address=>uint) public walletFeesInBps; // wallet that is the source of tx is entitled so some fees.\n', '    mapping(address=>uint) public reserveFeeToBurn;\n', '    mapping(address=>uint) public feePayedPerReserve; // track burned fees and sent wallet fees per reserve.\n', '    mapping(address=>mapping(address=>uint)) public reserveFeeToWallet;\n', '    address public taxWallet;\n', '    uint public taxFeeBps = 0; // burned fees are taxed. % out of burned fees.\n', '\n', '    BurnableToken public knc;\n', '    KyberNetworkInterface public kyberNetwork;\n', '    uint public kncPerEthRatePrecision = 600 * PRECISION; //--> 1 ether = 600 knc tokens\n', '\n', '    function FeeBurner(\n', '        address _admin,\n', '        BurnableToken _kncToken,\n', '        KyberNetworkInterface _kyberNetwork,\n', '        uint _initialKncToEthRatePrecision\n', '    )\n', '        public\n', '    {\n', '        require(_admin != address(0));\n', '        require(_kncToken != address(0));\n', '        require(_kyberNetwork != address(0));\n', '        require(_initialKncToEthRatePrecision != 0);\n', '\n', '        kyberNetwork = _kyberNetwork;\n', '        admin = _admin;\n', '        knc = _kncToken;\n', '        kncPerEthRatePrecision = _initialKncToEthRatePrecision;\n', '    }\n', '\n', '    event ReserveDataSet(address reserve, uint feeInBps, address kncWallet);\n', '\n', '    function setReserveData(address reserve, uint feesInBps, address kncWallet) public onlyOperator {\n', '        require(feesInBps < 100); // make sure it is always < 1%\n', '        require(kncWallet != address(0));\n', '        reserveFeesInBps[reserve] = feesInBps;\n', '        reserveKNCWallet[reserve] = kncWallet;\n', '        ReserveDataSet(reserve, feesInBps, kncWallet);\n', '    }\n', '\n', '    event WalletFeesSet(address wallet, uint feesInBps);\n', '\n', '    function setWalletFees(address wallet, uint feesInBps) public onlyAdmin {\n', '        require(feesInBps < 10000); // under 100%\n', '        walletFeesInBps[wallet] = feesInBps;\n', '        WalletFeesSet(wallet, feesInBps);\n', '    }\n', '\n', '    event TaxFeesSet(uint feesInBps);\n', '\n', '    function setTaxInBps(uint _taxFeeBps) public onlyAdmin {\n', '        require(_taxFeeBps < 10000); // under 100%\n', '        taxFeeBps = _taxFeeBps;\n', '        TaxFeesSet(_taxFeeBps);\n', '    }\n', '\n', '    event TaxWalletSet(address taxWallet);\n', '\n', '    function setTaxWallet(address _taxWallet) public onlyAdmin {\n', '        require(_taxWallet != address(0));\n', '        taxWallet = _taxWallet;\n', '        TaxWalletSet(_taxWallet);\n', '    }\n', '\n', '    event KNCRateSet(uint ethToKncRatePrecision, uint kyberEthKnc, uint kyberKncEth, address updater);\n', '\n', '    function setKNCRate() public {\n', '        //query kyber for knc rate sell and buy\n', '        uint kyberEthKncRate;\n', '        uint kyberKncEthRate;\n', '        (kyberEthKncRate, ) = kyberNetwork.getExpectedRate(ETH_TOKEN_ADDRESS, ERC20(knc), (10 ** 18));\n', '        (kyberKncEthRate, ) = kyberNetwork.getExpectedRate(ERC20(knc), ETH_TOKEN_ADDRESS, (10 ** 18));\n', '\n', '        //check "reasonable" spread == diff not too big. rate wasn&#39;t tampered.\n', '        require(kyberEthKncRate * kyberKncEthRate < PRECISION ** 2 * 2);\n', '        require(kyberEthKncRate * kyberKncEthRate > PRECISION ** 2 / 2);\n', '\n', '        require(kyberEthKncRate <= MAX_RATE);\n', '        kncPerEthRatePrecision = kyberEthKncRate;\n', '        KNCRateSet(kncPerEthRatePrecision, kyberEthKncRate, kyberKncEthRate, msg.sender);\n', '    }\n', '\n', '    event AssignFeeToWallet(address reserve, address wallet, uint walletFee);\n', '    event AssignBurnFees(address reserve, uint burnFee);\n', '\n', '    function handleFees(uint tradeWeiAmount, address reserve, address wallet) public returns(bool) {\n', '        require(msg.sender == address(kyberNetwork));\n', '        require(tradeWeiAmount <= MAX_QTY);\n', '\n', '        uint kncAmount = calcDestAmount(ETH_TOKEN_ADDRESS, ERC20(knc), tradeWeiAmount, kncPerEthRatePrecision);\n', '        uint fee = kncAmount * reserveFeesInBps[reserve] / 10000;\n', '\n', '        uint walletFee = fee * walletFeesInBps[wallet] / 10000;\n', '        require(fee >= walletFee);\n', '        uint feeToBurn = fee - walletFee;\n', '\n', '        if (walletFee > 0) {\n', '            reserveFeeToWallet[reserve][wallet] += walletFee;\n', '            AssignFeeToWallet(reserve, wallet, walletFee);\n', '        }\n', '\n', '        if (feeToBurn > 0) {\n', '            AssignBurnFees(reserve, feeToBurn);\n', '            reserveFeeToBurn[reserve] += feeToBurn;\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    event BurnAssignedFees(address indexed reserve, address sender, uint quantity);\n', '\n', '    event SendTaxFee(address indexed reserve, address sender, address taxWallet, uint quantity);\n', '\n', '    // this function is callable by anyone\n', '    function burnReserveFees(address reserve) public {\n', '        uint burnAmount = reserveFeeToBurn[reserve];\n', '        uint taxToSend = 0;\n', '        require(burnAmount > 2);\n', '        reserveFeeToBurn[reserve] = 1; // leave 1 twei to avoid spikes in gas fee\n', '        if (taxWallet != address(0) && taxFeeBps != 0) {\n', '            taxToSend = (burnAmount - 1) * taxFeeBps / 10000;\n', '            require(burnAmount - 1 > taxToSend);\n', '            burnAmount -= taxToSend;\n', '            if (taxToSend > 0) {\n', '                require(knc.transferFrom(reserveKNCWallet[reserve], taxWallet, taxToSend));\n', '                SendTaxFee(reserve, msg.sender, taxWallet, taxToSend);\n', '            }\n', '        }\n', '        require(knc.burnFrom(reserveKNCWallet[reserve], burnAmount - 1));\n', '\n', '        //update reserve "payments" so far\n', '        feePayedPerReserve[reserve] += (taxToSend + burnAmount - 1);\n', '\n', '        BurnAssignedFees(reserve, msg.sender, (burnAmount - 1));\n', '    }\n', '\n', '    event SendWalletFees(address indexed wallet, address reserve, address sender);\n', '\n', '    // this function is callable by anyone\n', '    function sendFeeToWallet(address wallet, address reserve) public {\n', '        uint feeAmount = reserveFeeToWallet[reserve][wallet];\n', '        require(feeAmount > 1);\n', '        reserveFeeToWallet[reserve][wallet] = 1; // leave 1 twei to avoid spikes in gas fee\n', '        require(knc.transferFrom(reserveKNCWallet[reserve], wallet, feeAmount - 1));\n', '\n', '        feePayedPerReserve[reserve] += (feeAmount - 1);\n', '        SendWalletFees(wallet, reserve, msg.sender);\n', '    }\n', '}']