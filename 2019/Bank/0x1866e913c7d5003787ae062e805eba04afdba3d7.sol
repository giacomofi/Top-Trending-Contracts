['pragma solidity ^0.4.24;\n', '\n', '/*\n', 'Developed by: https://www.tradecryptocurrency.com/\n', '*/\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = 0x8297B007c3581C3501797d356ce940150290eB24;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner)\n', '    onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', 'contract pays_commission {\n', '    address public commissionGetter;\n', '    uint256 public minimumEtherCommission;\n', '    uint public minimumTokenCommission;\n', '\n', '    constructor() public {\n', '        commissionGetter = 0xCd8bf69ad65c5158F0cfAA599bBF90d7f4b52Bb0;\n', '        minimumEtherCommission = 50000000000;\n', '        minimumTokenCommission = 1;\n', '    }\n', '\n', '    modifier onlyCommissionGetter {\n', '        require(msg.sender == commissionGetter);\n', '        _;\n', '    }\n', '\n', '    function transferCommissionGetter(address newCommissionGetter)\n', '    onlyCommissionGetter public {\n', '        commissionGetter = newCommissionGetter;\n', '    }\n', '\n', '    function changeMinimumCommission(\n', '        uint256 newMinEtherCommission, uint newMinTokenCommission)\n', '    onlyCommissionGetter public {\n', '        minimumEtherCommission = newMinEtherCommission;\n', '        minimumTokenCommission = newMinTokenCommission;\n', '    }\n', '}\n', '\n', '\n', 'contract GN10Token is pays_commission, owned {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 0;\n', '    uint256 public totalSupply;\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    uint256 public buyPrice = 1700000000000000;\n', '    uint256 public sellPrice = 1500000000000000;\n', '    bool public closeSell = false;\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '\n', '    // Events\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event FrozenFunds(address target, bool frozen);\n', '    event Deposit(address sender, uint amount);\n', '    event Withdrawal(address receiver, uint amount);\n', '\n', '\n', '    // Constructor\n', '\n', '    constructor(uint256 initialSupply, string tokenName, string tokenSymbol)\n', '    public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);\n', '        balanceOf[owner] = totalSupply;\n', '        name = tokenName;\n', '        symbol = tokenSymbol;\n', '    }\n', '\n', '\n', '    // Internal functions\n', '\n', '    function _transfer(address _from, address _to, uint _value)\n', '    internal {\n', '        require(_to != 0x0);\n', '        require(!frozenAccount[_from]);\n', '        require(!frozenAccount[_to]);\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    function _pay_token_commission (uint256 _value)\n', '    internal {\n', '        uint market_value = _value * sellPrice;\n', '        uint commission_value = market_value * 1 / 100;\n', '        // The comision is paid with tokens\n', '        uint commission = commission_value / sellPrice;\n', '        if (commission < minimumTokenCommission){ \n', '            commission = minimumTokenCommission;\n', '        }\n', '        address contr = this;\n', '        _transfer(contr, commissionGetter, commission);\n', '    }\n', '\n', '\n', '    // Only owner functions\n', '\n', '    function refillTokens(uint256 _value)\n', '    onlyOwner public {\n', '        _transfer(msg.sender, this, _value);\n', '    }\n', '\n', '\n', '    function freezeAccount(address target, bool freeze)\n', '    onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        emit FrozenFunds(target, freeze);\n', '    }\n', '\n', '    function setPrices(uint256 newSellPrice, uint256 newBuyPrice)\n', '    onlyOwner public {\n', '        sellPrice = newSellPrice;\n', '        buyPrice = newBuyPrice;\n', '    }\n', '\n', '    function setStatus(bool isClosedSell)\n', '    onlyOwner public {\n', '        closeSell = isClosedSell;\n', '    }\n', '\n', '    function withdrawEther(uint amountInWeis)\n', '    onlyOwner public {\n', '        address contr = this;\n', '        require(contr.balance >= amountInWeis);\n', '        emit Withdrawal(msg.sender, amountInWeis);\n', '        owner.transfer(amountInWeis);\n', '    }\n', '\n', '\n', '    // Public functions\n', '\n', '    function transfer(address _to, uint256 _value)\n', '    public {\n', '        _pay_token_commission(_value);\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value)\n', '    public returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);\n', '        _pay_token_commission(_value);\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function depositEther() payable\n', '    public returns(bool success) {\n', '        address contr = this;\n', '        require((contr.balance + msg.value) > contr.balance);\n', '        emit Deposit(msg.sender, msg.value);\n', '        return true;\n', '    }\n', '\n', '    function buy() payable\n', '    public {\n', '        uint amount = msg.value / buyPrice;\n', '        uint market_value = amount * buyPrice;\n', '        uint commission = market_value * 1 / 100;\n', '        // The comision is paid with Ether\n', '        if (commission < minimumEtherCommission){\n', '            commission = minimumEtherCommission;\n', '        }\n', '        address contr = this;\n', '        require(contr.balance >= commission);\n', '        commissionGetter.transfer(commission);\n', '        _transfer(this, msg.sender, amount);\n', '    }\n', '\n', '    function sell(uint256 amount)\n', '    public {\n', '    \trequire(!closeSell);\n', '        _pay_token_commission(amount);\n', '        _transfer(msg.sender, this, amount);\n', '        uint market_value = amount * sellPrice;\n', '        address contr = this;\n', '        require(contr.balance >= market_value);\n', '        msg.sender.transfer(market_value);\n', '    }\n', '\n', '    function () payable\n', '    public {\n', '        buy();\n', '    }\n', '}']