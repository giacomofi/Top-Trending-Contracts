['/**\n', ' *Submitted for verification at Etherscan.io on 2019-07-11\n', '*/\n', '\n', 'pragma solidity ^0.4.25;\n', '\n', '\n', 'library SafeMath {\n', '\n', '  function add(uint a, uint b) internal pure returns (uint c) {\n', '\n', '    c = a + b;\n', '\n', '    require(c >= a);\n', '\n', '  }\n', '\n', '  function sub(uint a, uint b) internal pure returns (uint c) {\n', '\n', '    require(b <= a);\n', '\n', '    c = a - b;\n', '\n', '  }\n', '\n', '  function mul(uint a, uint b) internal pure returns (uint c) {\n', '\n', '    c = a * b;\n', '\n', '    require(a == 0 || c / a == b);\n', '\n', '  }\n', '\n', '  function div(uint a, uint b) internal pure returns (uint c) {\n', '\n', '    require(b > 0);\n', '\n', '    c = a / b;\n', '\n', '  }\n', '\n', '}\n', '\n', 'contract caelumPublicSale {\n', '    using SafeMath for uint;\n', '    \n', '    \n', '    uint public ethPrice;\n', '    uint public lastPriceChange;\n', '    uint public maxCap = 750000000000000000000;\n', '    uint bought;\n', '    bool public isRunning = true;\n', '    uint public endDate;\n', '    \n', '    address[] candidates;\n', '    mapping(address => uint) public balances;\n', '    mapping(address => uint) public balances_clmp;\n', '    \n', '    address private owner;\n', '    \n', '    uint public promoUsers = 0;\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    constructor() public {\n', '        ethPrice = 600000000000000;\n', '        lastPriceChange = now;\n', '        endDate = now + 180 days;\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    \n', '    /**\n', '     *  Minimal funding solution. The user get&#39;s added to our list, who will be inserted on mainnet genesis block.\n', '     *  A minimum of 250000000000000000 Wei is required (0.25 ETH) to participate.\n', '     */\n', '    function purchase() public payable returns (bool success) {\n', '        \n', '        require(isRunning, &#39;unning issie&#39;);\n', '        require(now < endDate, &#39;date isse&#39;);\n', '        require(bought.add(msg.value) <= maxCap, &#39;cap issue&#39;);\n', '        \n', '        require(msg.value > 0);\n', '        require(msg.value >= 250000000000000000);\n', '        \n', '        \n', '        if (balances_clmp[msg.sender] == 0) {\n', '            candidates.push(msg.sender);\n', '        }\n', '        \n', '        if (promoUsers < 5 ) {\n', '            if (getRatio(msg.value) == 50000) {\n', '                balances_clmp[msg.sender] += getRatio(msg.value).add(25000);\n', '                promoUsers++;\n', '            }\n', '        } else {\n', '            balances_clmp[msg.sender] += getRatio(msg.value);\n', '            \n', '        }\n', '        \n', '        balances[msg.sender] += msg.value;\n', '        bought = bought + msg.value;\n', '        \n', '        return true;\n', '    }\n', '    \n', '    \n', '    /**  \n', '     *  Allows the developer to change the USD ratio with limitations:\n', '     * \n', '     *  Limits: Max 10% up or down of current value \n', '     *  Limits: Can be executed once every 3 days to counteract price fluctuations\n', '     * \n', '     */\n', '    \n', '    function setEtherRatio(uint RatioInWei) onlyOwner public {\n', '        require (lastPriceChange < (now - 3 days));\n', '        \n', '        uint _min = getMinPrice();\n', '        uint _max = getMaxPrice();\n', '        \n', '        require (RatioInWei >= _min && RatioInWei <= _max);\n', '        ethPrice = RatioInWei;\n', '    }\n', '    \n', '    function closeContract() onlyOwner public {\n', '        require(isRunning);\n', '        isRunning = false;\n', '    }\n', '    \n', '    function getMaxPrice() public view returns(uint MaxWei) {\n', '        uint max = ethPrice.div(10);\n', '        return ethPrice.add(max);\n', '    }\n', '    \n', '    function getMinPrice() public view returns (uint MinWei) {\n', '        uint max = ethPrice.div(10);\n', '        return ethPrice.sub(max);\n', '    }\n', '    \n', '    function getCandidates() public view returns(address[]) {\n', '        return candidates;\n', '    }\n', '    \n', '    function getRatio(uint valInWei) public view returns(uint) {\n', '        return valInWei / ethPrice;\n', '    }\n', '    \n', '    function withdraw(uint amount) public onlyOwner returns(bool) {\n', '        require(amount <= address(this).balance);\n', '        owner.transfer(amount);\n', '        return true;\n', '    }\n', '}']