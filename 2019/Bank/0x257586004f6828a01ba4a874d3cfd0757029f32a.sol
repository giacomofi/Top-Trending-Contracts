['pragma solidity 0.4.25;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'contract dexBlue{\n', '    \n', '    // Events\n', '\n', '    /** @notice The event, emitted when a trade is settled\n', '      * @param  index Implying the index of the settled trade in the trade array passed to matchTrades() \n', '      */\n', '    event TradeSettled(uint8 index);\n', '\n', '    /** @notice The event, emitted when a trade settlement failed\n', '      * @param  index Implying the index of the failed trade in the trade array passed to matchTrades() \n', '      */\n', '    event TradeFailed(uint8 index);\n', '\n', '    /** @notice The event, emitted after a successful deposit of ETH or token\n', '      * @param  account  The address, which initiated the deposit\n', '      * @param  token    The address of the deposited token (ETH is address(0))\n', '      * @param  amount   The amount deposited in this transaction \n', '      */\n', '    event Deposit(address account, address token, uint256 amount);\n', '\n', '    /** @notice The event, emitted after a successful (multi-sig) withdrawal of deposited ETH or token\n', '      * @param  account  The address, which initiated the withdrawal\n', '      * @param  token    The address of the token which is withdrawn (ETH is address(0))\n', '      * @param  amount   The amount withdrawn in this transaction \n', '      */\n', '    event Withdrawal(address account, address token, uint256 amount);\n', '\n', '    /** @notice The event, emitted after a user successfully blocked tokens or ETH for a single signature withdrawal\n', '      * @param  account  The address controlling the tokens\n', '      * @param  token    The address of the token which is blocked (ETH is address(0))\n', '      * @param  amount   The amount blocked in this transaction \n', '      */\n', '    event BlockedForSingleSigWithdrawal(address account, address token, uint256 amount);\n', '\n', '    /** @notice The event, emitted after a successful single-sig withdrawal of deposited ETH or token\n', '      * @param  account  The address, which initiated the withdrawal\n', '      * @param  token    The address of the token which is withdrawn (ETH is address(0))\n', '      * @param  amount   The amount withdrawn in this transaction \n', '      */\n', '    event SingleSigWithdrawal(address account, address token, uint256 amount);\n', '\n', '    /** @notice The event, emitted once the feeCollector address initiated a withdrawal of collected tokens or ETH via feeWithdrawal()\n', '      * @param  token    The address of the token which is withdrawn (ETH is address(0))\n', '      * @param  amount   The amount withdrawn in this transaction \n', '      */\n', '    event FeeWithdrawal(address token, uint256 amount);\n', '\n', '    /** @notice The event, emitted once an on-chain cancellation of an order was performed\n', '      * @param  hash    The invalidated orders hash \n', '      */\n', '    event OrderCanceled(bytes32 hash);\n', '   \n', '    /** @notice The event, emitted once a address delegation or dedelegation was performed\n', '      * @param  delegator The delegating address,\n', '      * @param  delegate  The delegated address,\n', '      * @param  status    Whether the transaction delegated an address (true) or inactivated an active delegation (false) \n', '      */\n', '    event DelegateStatus(address delegator, address delegate, bool status);\n', '\n', '\n', '    // Mappings \n', '\n', '    mapping(address => mapping(address => uint256)) balances;                           // Users balances (token address > user address > balance amount) (ETH is address(0))\n', '    mapping(address => mapping(address => uint256)) blocked_for_single_sig_withdrawal;  // Users balances they blocked to withdraw without arbiters multi-sig (token address > user address > balance amount) (ETH is address(0))\n', '    mapping(address => uint256) last_blocked_timestamp;                                 // The last timestamp a user blocked tokens to withdraw without arbiters multi-sig\n', '    mapping(bytes32 => bool) processed_withdrawals;                                     // Processed withdrawal hashes\n', '    mapping(bytes32 => uint256) matched;                                                // Orders matched sell_amounts to prevent multiple-/over- matches of the same orders\n', '    mapping(address => address) delegates;                                              // Delegated order signing addresses\n', '\n', '\n', '    // EIP712 (signTypedData)\n', '\n', '    // EIP712 Domain\n', '    struct EIP712_Domain {\n', '        string  name;\n', '        string  version;\n', '        uint256 chainId;\n', '        address verifyingContract;\n', '    }\n', '    bytes32 constant EIP712_DOMAIN_TYPEHASH = keccak256("EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)");\n', '    bytes32          EIP712_DOMAIN_SEPARATOR;\n', '    // Order typehash\n', '    bytes32 constant EIP712_ORDER_TYPEHASH = keccak256("Order(address buyTokenAddress,address sellTokenAddress,uint256 buyTokenAmount,uint256 sellTokenAmount,uint64 nonce)");\n', '    // Withdrawal typehash\n', '    bytes32 constant EIP712_WITHDRAWAL_TYPEHASH = keccak256("Withdrawal(address token,uint256 amount,uint64 nonce)");\n', '        \n', '\n', '    // Utility functions:\n', '\n', '    /** @notice Get the balance of a user for a specific token\n', '      * @param  token  The token address (ETH is token address(0))\n', '      * @param  holder The address holding the token\n', '      * @return The amount of the specified token held by the user \n', '      */\n', '    function getBalance(address token, address holder) constant public returns(uint256){\n', '        return balances[token][holder];\n', '    }\n', '    \n', '    /** @notice Get the balance a user blocked for a single-signature withdrawal (ETH is token address(0))\n', '      * @param  token  The token address (ETH is token address(0))\n', '      * @param  holder The address holding the token\n', '      * @return The amount of the specified token blocked by the user \n', '      */\n', '    function getBlocked(address token, address holder) constant public returns(uint256){\n', '        return blocked_for_single_sig_withdrawal[token][holder];\n', '    }\n', '    \n', '    /** @notice Returns the timestamp of the last blocked balance\n', '      * @param  user  Address of the user which blocked funds\n', '      * @return The last unix timestamp the user blocked funds at, which starts the waiting period for single-sig withdrawals \n', '      */\n', '    function getLastBlockedTimestamp(address user) constant public returns(uint256){\n', '        return last_blocked_timestamp[user];\n', '    }\n', '\n', '\n', '    // Deposit functions:\n', '\n', '    /** @notice Deposit Ether into the smart contract \n', '      */\n', '    function depositEther() public payable{\n', '        balances[address(0)][msg.sender] += msg.value;      // Add the received ETH to the users balance\n', '        emit Deposit(msg.sender, address(0), msg.value);    // Emit a deposit event\n', '    }\n', '    \n', '    /** @notice Fallback function to credit ETH sent to the contract without data \n', '      */\n', '    function() public payable{\n', '        depositEther();                                     // Call the deposit function to credit ETH sent in this transaction\n', '    }\n', '    \n', '    /** @notice Deposit ERC20 tokens into the smart contract (remember to set allowance in the token contract first)\n', '      * @param  token   The address of the token to deposit\n', '      * @param  amount  The amount of tokens to deposit \n', '      */\n', '    function depositToken(address token, uint256 amount) public {\n', '        Token(token).transferFrom(msg.sender, address(this), amount);    // Deposit ERC20\n', '        require(\n', '            checkERC20TransferSuccess(),                                 // Check whether the ERC20 token transfer was successful\n', '            "ERC20 token transfer failed."\n', '        );\n', '        balances[token][msg.sender] += amount;                           // Credit the deposited token to users balance\n', '        emit Deposit(msg.sender, token, amount);                         // Emit a deposit event\n', '    }\n', '        \n', '    // Multi-sig withdrawal functions:\n', '\n', '    /** @notice User-submitted withdrawal with arbiters signature, which withdraws to the users address\n', '      * @param  token   The token to withdraw (ETH is address(address(0)))\n', '      * @param  amount  The amount of tokens to withdraw\n', '      * @param  nonce   The nonce (to salt the hash)\n', '      * @param  v       Multi-signature v\n', '      * @param  r       Multi-signature r\n', '      * @param  s       Multi-signature s \n', '      */\n', '    function multiSigWithdrawal(address token, uint256 amount, uint64 nonce, uint8 v, bytes32 r, bytes32 s) public {\n', '        bytes32 hash = keccak256(abi.encodePacked(                      // Calculate the withdrawal hash from the parameters\n', '            "\\x19Ethereum Signed Message:\\n32", \n', '            keccak256(abi.encodePacked(\n', '                msg.sender,\n', '                token,\n', '                amount,\n', '                nonce,\n', '                address(this)\n', '            ))\n', '        ));\n', '        if(\n', '            !processed_withdrawals[hash]                                // Check if the withdrawal was initiated before\n', '            && arbiters[ecrecover(hash, v,r,s)]                         // Check if the multi-sig is valid\n', '            && balances[token][msg.sender] >= amount                    // Check if the user holds the required balance\n', '        ){\n', '            processed_withdrawals[hash]  = true;                        // Mark this withdrawal as processed\n', '            balances[token][msg.sender] -= amount;                      // Substract withdrawn token from users balance\n', '            if(token == address(0)){                                    // Withdraw ETH\n', '                require(\n', '                    msg.sender.send(amount),\n', '                    "Sending of ETH failed."\n', '                );\n', '            }else{                                                      // Withdraw an ERC20 token\n', '                Token(token).transfer(msg.sender, amount);              // Transfer the ERC20 token\n', '                require(\n', '                    checkERC20TransferSuccess(),                        // Check whether the ERC20 token transfer was successful\n', '                    "ERC20 token transfer failed."\n', '                );\n', '            }\n', '\n', '            blocked_for_single_sig_withdrawal[token][msg.sender] = 0;   // Set possible previous manual blocking of these funds to 0\n', '        \n', '            emit Withdrawal(msg.sender,token,amount);                   // Emit a Withdrawal event\n', '        }else{\n', '            revert();                                                   // Revert the transaction if checks fail\n', '        }\n', '    }    \n', '\n', '    /** @notice User-submitted withdrawal with arbiters signature, which sends tokens to specified address\n', '      * @param  token              The token to withdraw (ETH is address(address(0)))\n', '      * @param  amount             The amount of tokens to withdraw\n', '      * @param  nonce              The nonce (to salt the hash)\n', '      * @param  v                  Multi-signature v\n', '      * @param  r                  Multi-signature r\n', '      * @param  s                  Multi-signature s\n', '      * @param  receiving_address  The address to send the withdrawn token/ETH to\n', '      */\n', '    function multiSigSend(address token, uint256 amount, uint64 nonce, uint8 v, bytes32 r, bytes32 s, address receiving_address) public {\n', '        bytes32 hash = keccak256(abi.encodePacked(                      // Calculate the withdrawal hash from the parameters \n', '            "\\x19Ethereum Signed Message:\\n32", \n', '            keccak256(abi.encodePacked(\n', '                msg.sender,\n', '                token,\n', '                amount,\n', '                nonce,\n', '                address(this)\n', '            ))\n', '        ));\n', '        if(\n', '            !processed_withdrawals[hash]                                // Check if the withdrawal was initiated before\n', '            && arbiters[ecrecover(hash, v,r,s)]                         // Check if the multi-sig is valid\n', '            && balances[token][msg.sender] >= amount                    // Check if the user holds the required balance\n', '        ){\n', '            processed_withdrawals[hash]  = true;                        // Mark this withdrawal as processed\n', '            balances[token][msg.sender] -= amount;                      // Substract the withdrawn balance from the users balance\n', '            if(token == address(0)){                                    // Process an ETH withdrawal\n', '                require(\n', '                    receiving_address.send(amount),\n', '                    "Sending of ETH failed."\n', '                );\n', '            }else{                                                      // Withdraw an ERC20 token\n', '                Token(token).transfer(receiving_address, amount);       // Transfer the ERC20 token\n', '                require(\n', '                    checkERC20TransferSuccess(),                        // Check whether the ERC20 token transfer was successful\n', '                    "ERC20 token transfer failed."\n', '                );\n', '            }\n', '\n', '            blocked_for_single_sig_withdrawal[token][msg.sender] = 0;   // Set possible previous manual blocking of these funds to 0\n', '            \n', '            emit Withdrawal(msg.sender,token,amount);                   // Emit a Withdrawal event\n', '        }else{\n', '            revert();                                                   // Revert the transaction if checks fail\n', '        }\n', '    }\n', '\n', '    /** @notice User-submitted transfer with arbiters signature, which sends tokens to another addresses account in the smart contract\n', '      * @param  token              The token to transfer (ETH is address(address(0)))\n', '      * @param  amount             The amount of tokens to transfer\n', '      * @param  nonce              The nonce (to salt the hash)\n', '      * @param  v                  Multi-signature v\n', '      * @param  r                  Multi-signature r\n', '      * @param  s                  Multi-signature s\n', '      * @param  receiving_address  The address to transfer the token/ETH to\n', '      */\n', '    function multiSigTransfer(address token, uint256 amount, uint64 nonce, uint8 v, bytes32 r, bytes32 s, address receiving_address) public {\n', '        bytes32 hash = keccak256(abi.encodePacked(                      // Calculate the withdrawal/transfer hash from the parameters \n', '            "\\x19Ethereum Signed Message:\\n32", \n', '            keccak256(abi.encodePacked(\n', '                msg.sender,\n', '                token,\n', '                amount,\n', '                nonce,\n', '                address(this)\n', '            ))\n', '        ));\n', '        if(\n', '            !processed_withdrawals[hash]                                // Check if the withdrawal was initiated before\n', '            && arbiters[ecrecover(hash, v,r,s)]                         // Check if the multi-sig is valid\n', '            && balances[token][msg.sender] >= amount                    // Check if the user holds the required balance\n', '        ){\n', '            processed_withdrawals[hash]         = true;                 // Mark this withdrawal as processed\n', '            balances[token][msg.sender]        -= amount;               // Substract the balance from the withdrawing account\n', '            balances[token][receiving_address] += amount;               // Add the balance to the receiving account\n', '            \n', '            blocked_for_single_sig_withdrawal[token][msg.sender] = 0;   // Set possible previous manual blocking of these funds to 0\n', '            \n', '            emit Withdrawal(msg.sender,token,amount);                   // Emit a Withdrawal event\n', '            emit Deposit(receiving_address,token,amount);               // Emit a Deposit event\n', '        }else{\n', '            revert();                                                   // Revert the transaction if checks fail\n', '        }\n', '    }\n', '\n', '    /** @notice Arbiter submitted withdrawal with users multi-sig to users address\n', '      * @param  token   The token to withdraw (ETH is address(address(0)))\n', '      * @param  amount  The amount of tokens to withdraw\n', '      * @param  fee     The fee, covering the gas cost of the arbiter\n', '      * @param  nonce   The nonce (to salt the hash)\n', '      * @param  v       Multi-signature v (either 27 or 28. To identify the different signing schemes an offset of 10 is applied for EIP712)\n', '      * @param  r       Multi-signature r\n', '      * @param  s       Multi-signature s\n', '      */\n', '    function userSigWithdrawal(address token, uint256 amount, uint256 fee, uint64 nonce, uint8 v, bytes32 r, bytes32 s) public {            \n', '        bytes32 hash;\n', '        if(v < 30){                                                     // Standard signing scheme (personal.sign())\n', '            hash = keccak256(abi.encodePacked(                          // Restore multi-sig hash\n', '                "\\x19Ethereum Signed Message:\\n32",\n', '                keccak256(abi.encodePacked(\n', '                    token,\n', '                    amount,\n', '                    nonce,\n', '                    address(this)\n', '                ))\n', '            ));\n', '        }else{                                                          // EIP712 signing scheme\n', '            v -= 10;                                                    // Remove offset\n', '            hash = keccak256(abi.encodePacked(                          // Restore multi-sig hash\n', '                "\\x19\\x01",\n', '                EIP712_DOMAIN_SEPARATOR,\n', '                keccak256(abi.encode(\n', '                    EIP712_WITHDRAWAL_TYPEHASH,\n', '                    token,\n', '                    amount,\n', '                    nonce\n', '                ))\n', '            ));\n', '        }\n', '        address account = ecrecover(hash, v, r, s);                     // Restore signing address\n', '        if(\n', '            !processed_withdrawals[hash]                                // Check if the withdrawal was initiated before\n', '            && arbiters[msg.sender]                                     // Check if transaction comes from arbiter\n', '            && fee <= amount / 50                                       // Check if fee is not too big\n', '            && balances[token][account] >= amount                       // Check if the user holds the required tokens\n', '        ){\n', '            processed_withdrawals[hash]    = true;\n', '            balances[token][account]      -= amount;\n', '            balances[token][feeCollector] += fee;                       // Fee to cover gas costs for the withdrawal\n', '            if(token == address(0)){                                    // Send ETH\n', '                require(\n', '                    account.send(amount - fee),\n', '                    "Sending of ETH failed."\n', '                );\n', '            }else{\n', '                Token(token).transfer(account, amount - fee);           // Withdraw ERC20\n', '                require(\n', '                    checkERC20TransferSuccess(),                        // Check if the transfer was successful\n', '                    "ERC20 token transfer failed."\n', '                );\n', '            }\n', '        \n', '            blocked_for_single_sig_withdrawal[token][account] = 0;      // Set possible previous manual blocking of these funds to 0\n', '            \n', '            emit Withdrawal(account,token,amount);                      // Emit a Withdrawal event\n', '        }else{\n', '            revert();                                                   // Revert the transaction is checks fail\n', '        }\n', '    }\n', '    \n', '    // Single-sig withdrawal functions:\n', '\n', '    /** @notice Allows user to block funds for single-sig withdrawal after 24h waiting period \n', '      *         (This period is necessary to ensure all trades backed by these funds will be settled.)\n', '      * @param  token   The address of the token to block (ETH is address(address(0)))\n', '      * @param  amount  The amount of the token to block\n', '      */\n', '    function blockFundsForSingleSigWithdrawal(address token, uint256 amount) public {\n', '        if (balances[token][msg.sender] - blocked_for_single_sig_withdrawal[token][msg.sender] >= amount){  // Check if the user holds the required funds\n', '            blocked_for_single_sig_withdrawal[token][msg.sender] += amount;         // Block funds for manual withdrawal\n', '            last_blocked_timestamp[msg.sender] = block.timestamp;                   // Start 24h waiting period\n', '            emit BlockedForSingleSigWithdrawal(msg.sender,token,amount);            // Emit BlockedForSingleSigWithdrawal event\n', '        }else{\n', '            revert();                                                               // Revert the transaction if the user does not hold the required balance\n', '        }\n', '    }\n', '    \n', '    /** @notice Allows user to withdraw funds previously blocked after 24h\n', '      */\n', '    function initiateSingleSigWithdrawal(address token, uint256 amount) public {\n', '        if (\n', '            balances[token][msg.sender] >= amount                                   // Check if the user holds the funds\n', '            && blocked_for_single_sig_withdrawal[token][msg.sender] >= amount       // Check if these funds are blocked\n', '            && last_blocked_timestamp[msg.sender] + 86400 <= block.timestamp        // Check if the one day waiting period has passed\n', '        ){\n', '            balances[token][msg.sender] -= amount;                                  // Substract the tokens from users balance\n', '            blocked_for_single_sig_withdrawal[token][msg.sender] -= amount;         // Substract the tokens from users blocked balance\n', '            if(token == address(0)){                                                // Withdraw ETH\n', '                require(\n', '                    msg.sender.send(amount),\n', '                    "Sending of ETH failed."\n', '                );\n', '            }else{                                                                  // Withdraw ERC20 tokens\n', '                Token(token).transfer(msg.sender, amount);                          // Transfer the ERC20 tokens\n', '                require(\n', '                    checkERC20TransferSuccess(),                                    // Check if the transfer was successful\n', '                    "ERC20 token transfer failed."\n', '                );\n', '            }\n', '            emit SingleSigWithdrawal(msg.sender,token,amount);                      // Emit a SingleSigWithdrawal event\n', '        }else{\n', '            revert();                                                               // Revert the transaction if the required checks fail\n', '        }\n', '    } \n', '\n', '\n', '    //Trade settlement structs and function\n', '    \n', '    struct OrderInput{\n', '        uint8       buy_token;      // The token, the order signee wants to buy\n', '        uint8       sell_token;     // The token, the order signee wants to sell\n', '        uint256     buy_amount;     // The total amount the signee wants to buy\n', '        uint256     sell_amount;    // The total amount the signee wants to give for the amount he wants to buy (the orders "rate" is implied by the ratio between the two amounts)\n', '        uint64      nonce;          // Random number to give each order an individual hash and signature\n', '        int8        v;              // Signature v (either 27 or 28)\n', '                                    // To identify the different signing schemes an offset of 10 is applied for EIP712.\n', '                                    // To identify whether the order was signed by a delegated signing address, the number is either positive or negative.\n', '        bytes32     r;              // Signature r\n', '        bytes32     s;              // Signature s\n', '    }\n', '    \n', '    struct TradeInput{\n', '        uint8       maker_order;    // The index of the maker order\n', '        uint8       taker_order;    // The index of the taker order\n', "        uint256     maker_amount;   // The amount the maker gives in return for the taker's tokens\n", "        uint256     taker_amount;   // The amount the taker gives in return for the maker's tokens\n", '        uint256     maker_fee;      // The trading fee of the maker + a share in the settlement (gas) cost\n', '        uint256     taker_fee;      // The trading fee of the taker + a share in the settlement (gas) cost\n', '        uint256     maker_rebate;   // A optional rebate for the maker (portion of takers fee) as an incentive\n', '    }\n', '\n', '    /** @notice Allows an arbiter to settle trades between two user-signed orders\n', '      * @param  addresses  Array of all addresses involved in the transactions\n', '      * @param  orders     Array of all orders involved in the transactions\n', '      * @param  trades     Array of the trades to be settled\n', '      */   \n', '    function matchTrades(address[] addresses, OrderInput[] orders, TradeInput[] trades) public {\n', '        require(arbiters[msg.sender] && marketActive);      // Check if msg.sender is an arbiter and the market is active\n', '        \n', '        //Restore signing addresses\n', '        uint len = orders.length;                           // Length of orders array to loop through\n', '        bytes32[]  memory hashes = new bytes32[](len);      // Array of the restored order hashes\n', '        address[]  memory signee = new address[](len);      // Array of the restored order signees\n', '        OrderInput memory order;                            // Memory slot to cache orders while looping (otherwise the Stack would be too deep)\n', '        address    addressCache1;                           // Memory slot 1 to cache addresses while looping (otherwise the Stack would be too deep)\n', '        address    addressCache2;                           // Memory slot 2 to cache addresses while looping (otherwise the Stack would be too deep)\n', '        bool       delegated;\n', '        \n', '        for(uint8 i = 0; i < len; i++){                     // Loop through the orders array to restore all signees\n', '            order         = orders[i];                      // Cache order\n', '            addressCache1 = addresses[order.buy_token];     // Cache orders buy token\n', '            addressCache2 = addresses[order.sell_token];    // Cache orders sell token\n', '            \n', '            if(order.v < 0){                                // Check if the order is signed by a delegate\n', '                delegated = true;                           \n', '                order.v  *= -1;                             // Restore the negated v\n', '            }else{\n', '                delegated = false;\n', '            }\n', '            \n', '            if(order.v < 30){                               // Order is hashed after signature scheme personal.sign()\n', '                hashes[i] = keccak256(abi.encodePacked(     // Restore the hash of this order\n', '                    "\\x19Ethereum Signed Message:\\n32",\n', '                    keccak256(abi.encodePacked(\n', '                        addressCache1,\n', '                        addressCache2,\n', '                        order.buy_amount,\n', '                        order.sell_amount,\n', '                        order.nonce,        \n', "                        address(this)                       // This contract's address\n", '                    ))\n', '                ));\n', '            }else{                                          // Order is hashed after EIP712\n', '                order.v -= 10;                              // Remove signature format identifying offset\n', '                hashes[i] = keccak256(abi.encodePacked(\n', '                    "\\x19\\x01",\n', '                    EIP712_DOMAIN_SEPARATOR,\n', '                    keccak256(abi.encode(\n', '                        EIP712_ORDER_TYPEHASH,\n', '                        addressCache1,\n', '                        addressCache2,\n', '                        order.buy_amount,\n', '                        order.sell_amount,\n', '                        order.nonce\n', '                    ))\n', '                ));\n', '            }\n', '            signee[i] = ecrecover(                          // Restore the signee of this order\n', '                hashes[i],                                  // Order hash\n', '                uint8(order.v),                             // Signature v\n', '                order.r,                                    // Signature r\n', '                order.s                                     // Signature s\n', '            );\n', '            // When the signature was delegated restore delegating address\n', '            if(delegated){\n', '                signee[i] = delegates[signee[i]];\n', '            }\n', '        }\n', '        \n', '        // Settle Trades after check\n', '        len = trades.length;                                            // Length of the trades array to loop through\n', '        TradeInput memory trade;                                        // Memory slot to cache trades while looping\n', "        uint maker_index;                                               // Memory slot to cache the trade's maker order index\n", "        uint taker_index;                                               // Memory slot to cache the trade's taker order index\n", '        \n', '        for(i = 0; i < len; i++){                                       // Loop through trades to settle after checks\n', '            trade = trades[i];                                          // Cache trade\n', '            maker_index = trade.maker_order;                            // Cache maker order index\n', '            taker_index = trade.taker_order;                            // Cache taker order index\n', '            addressCache1 = addresses[orders[maker_index].buy_token];   // Cache first of the two swapped token addresses\n', '            addressCache2 = addresses[orders[taker_index].buy_token];   // Cache second of the two swapped token addresses\n', '            \n', '            if( // Check if the arbiter has matched following the conditions of the two order signees\n', '                // Do maker and taker want to trade the same tokens with each other\n', '                    orders[maker_index].buy_token == orders[taker_index].sell_token\n', '                && orders[taker_index].buy_token == orders[maker_index].sell_token\n', '                \n', '                // Do maker and taker hold the required balances\n', '                && balances[addressCache2][signee[maker_index]] >= trade.maker_amount - trade.maker_rebate\n', '                && balances[addressCache1][signee[taker_index]] >= trade.taker_amount\n', '                \n', '                // Are they both matched at a rate better or equal to the one they signed\n', "                && trade.maker_amount - trade.maker_rebate <= orders[maker_index].sell_amount * trade.taker_amount / orders[maker_index].buy_amount + 1  // Check maker doesn't overpay (+ 1 to deal with rouding errors for very smal amounts)\n", "                && trade.taker_amount <= orders[taker_index].sell_amount * trade.maker_amount / orders[taker_index].buy_amount + 1                       // Check taker doesn't overpay (+ 1 to deal with rouding errors for very smal amounts)\n", '                \n', "                // Check if the matched amount + previously matched trades doesn't exceed the amount specified by the order signee\n", '                && trade.taker_amount + matched[hashes[taker_index]] <= orders[taker_index].sell_amount\n', '                && trade.maker_amount - trade.maker_rebate + matched[hashes[maker_index]] <= orders[maker_index].sell_amount\n', '                    \n', '                // Check if the charged fee is not too high\n', '                && trade.maker_fee <= trade.taker_amount / 100\n', '                && trade.taker_fee <= trade.maker_amount / 50\n', '                \n', "                // Check if maker_rebate is smaller than or equal to the taker's fee which compensates it\n", '                && trade.maker_rebate <= trade.taker_fee\n', '            ){\n', '                // Settle the trade:\n', '                \n', '                // Substract sold amounts\n', "                balances[addressCache2][signee[maker_index]] -= trade.maker_amount - trade.maker_rebate;    // Substract maker's sold amount minus the makers rebate\n", "                balances[addressCache1][signee[taker_index]] -= trade.taker_amount;                         // Substract taker's sold amount\n", '                \n', '                // Add bought amounts\n', '                balances[addressCache1][signee[maker_index]] += trade.taker_amount - trade.maker_fee;       // Give the maker his bought amount minus the fee\n', '                balances[addressCache2][signee[taker_index]] += trade.maker_amount - trade.taker_fee;       // Give the taker his bought amount minus the fee\n', '                \n', '                // Save bought amounts to prevent double matching\n', '                matched[hashes[maker_index]] += trade.maker_amount;                                         // Prevent maker order from being reused\n', '                matched[hashes[taker_index]] += trade.taker_amount;                                         // Prevent taker order from being reused\n', '                \n', '                // Give fee to feeCollector\n', '                balances[addressCache2][feeCollector] += trade.taker_fee - trade.maker_rebate;              // Give the feeColletor the taker fee minus the maker rebate \n', '                balances[addressCache1][feeCollector] += trade.maker_fee;                                   // Give the feeColletor the maker fee\n', '                \n', '                // Set possible previous manual blocking of these funds to 0\n', '                blocked_for_single_sig_withdrawal[addressCache2][signee[maker_index]] = 0;                  // If the maker tried to block funds which he/she used in this order we have to unblock them\n', '                blocked_for_single_sig_withdrawal[addressCache1][signee[taker_index]] = 0;                  // If the taker tried to block funds which he/she used in this order we have to unblock them\n', '                \n', '                emit TradeSettled(i);                                                                       // Emit tradeSettled Event to confirm the trade was settled\n', '            }else{\n', '                emit TradeFailed(i);                                                                        // Emit tradeFailed Event because the trade checks failed\n', '            }\n', '        }\n', '    }\n', '\n', '\n', '    // Order cancellation functions\n', '\n', '    /** @notice Give the user the option to perform multiple on-chain cancellations of orders at once with arbiters multi-sig\n', '      * @param  orderHashes Array of orderHashes of the orders to be canceled\n', '      * @param  v           Multi-sig v\n', '      * @param  r           Multi-sig r\n', '      * @param  s           Multi-sig s\n', '      */\n', '    function multiSigOrderBatchCancel(bytes32[] orderHashes, uint8 v, bytes32 r, bytes32 s) public {\n', '        if(\n', '            arbiters[                                               // Check if the signee is an arbiter\n', '                ecrecover(                                          // Restore the signing address\n', '                    keccak256(abi.encodePacked(                     // Restore the signed hash (hash of all orderHashes)\n', '                        "\\x19Ethereum Signed Message:\\n32", \n', '                        keccak256(abi.encodePacked(orderHashes))\n', '                    )),\n', '                    v, r, s\n', '                )\n', '            ]\n', '        ){\n', '            uint len = orderHashes.length;\n', '            for(uint8 i = 0; i < len; i++){\n', '                matched[orderHashes[i]] = 2**256 - 1;               // Set the matched amount of all orders to the maximum\n', '                emit OrderCanceled(orderHashes[i]);                 // emit OrderCanceled event\n', '            }\n', '        }else{\n', '            revert();\n', '        }\n', '    }\n', '        \n', '    /** @notice Give arbiters the option to perform on-chain multiple cancellations of orders at once  \n', '      * @param orderHashes Array of hashes of the orders to be canceled\n', '      */\n', '    function orderBatchCancel(bytes32[] orderHashes) public {\n', '        if(\n', '            arbiters[msg.sender]                        // Check if the sender is an arbiter\n', '        ){\n', '            uint len = orderHashes.length;\n', '            for(uint8 i = 0; i < len; i++){\n', '                matched[orderHashes[i]] = 2**256 - 1;   // Set the matched amount of all orders to the maximum\n', '                emit OrderCanceled(orderHashes[i]);     // emit OrderCanceled event\n', '            }\n', '        }else{\n', '            revert();\n', '        }\n', '    }\n', '        \n', '        \n', '    // Signature delegation\n', '\n', '    /** @notice delegate an address to allow it to sign orders on your behalf\n', '      * @param delegate  The address to delegate\n', '      */\n', '    function delegateAddress(address delegate) public {\n', '        // set as delegate\n', '        require(delegates[delegate] == address(0), "Address is already a delegate");\n', '        delegates[delegate] = msg.sender;\n', '        \n', '        emit DelegateStatus(msg.sender, delegate, true);\n', '    }\n', '    \n', '    /** @notice revoke the delegation of an address\n', '      * @param  delegate  The delegated address\n', '      * @param  v         Multi-sig v\n', '      * @param  r         Multi-sig r\n', '      * @param  s         Multi-sig s\n', '      */\n', '    function revokeDelegation(address delegate, uint8 v, bytes32 r, bytes32 s) public {\n', '        bytes32 hash = keccak256(abi.encodePacked(              // Restore the signed hash\n', '            "\\x19Ethereum Signed Message:\\n32", \n', '            keccak256(abi.encodePacked(\n', '                delegate,\n', '                msg.sender,\n', '                address(this)\n', '            ))\n', '        ));\n', '\n', '        require(arbiters[ecrecover(hash, v, r, s)], "MultiSig is not from known arbiter");  // Check if signee is an arbiter\n', '        \n', '        delegates[delegate] = address(1);       // set to 1 not 0 to prevent double delegation, which would make old signed order valid for the new delegator\n', '        \n', '        emit DelegateStatus(msg.sender, delegate, false);\n', '    }\n', '    \n', '\n', '    // Management functions:\n', '\n', '    address owner;                      // Contract owner address (has the right to nominate arbiters and the feeCollectors addresses)   \n', '    address feeCollector;               // feeCollector address\n', '    bool marketActive = true;           // Make it possible to pause the market\n', '    bool feeCollectorLocked = false;    // Make it possible to lock the feeCollector address (to allow to change the feeCollector to a fee distribution contract)\n', '    mapping(address => bool) arbiters;  // Mapping of arbiters\n', '    \n', '    /** @notice Constructor function\n', '      */\n', '    constructor() public {\n', '        owner = msg.sender;             // Nominate sender to be the contract owner\n', '        feeCollector = msg.sender;      // Nominate sender to be the standart feeCollector\n', '        arbiters[msg.sender] = true;    // Nominate sender to be an arbiter\n', '        \n', '        // create EIP712 domain seperator\n', '        EIP712_Domain memory eip712Domain = EIP712_Domain({\n', '            name              : "dex.blue",\n', '            version           : "1",\n', '            chainId           : 1,\n', '            verifyingContract : this\n', '        });\n', '        EIP712_DOMAIN_SEPARATOR = keccak256(abi.encode(\n', '            EIP712_DOMAIN_TYPEHASH,\n', '            keccak256(bytes(eip712Domain.name)),\n', '            keccak256(bytes(eip712Domain.version)),\n', '            eip712Domain.chainId,\n', '            eip712Domain.verifyingContract\n', '        ));\n', '    }\n', '    \n', '    /** @notice Allows the owner to nominate or denominate trade arbitting addresses\n', '      * @param  arbiter The arbiter whose status to change\n', '      * @param  status  Whether the address should be an arbiter (true) or not (false)\n', '      */\n', '    function nominateArbiter(address arbiter, bool status) public {\n', '        require(msg.sender == owner);                           // Check if sender is owner\n', '        arbiters[arbiter] = status;                             // Update address status\n', '    }\n', '\n', '    /** @notice Allows the owner to pause / unpause the market\n', '      * @param  state  Whether the the market should be active (true) or paused (false)\n', '      */\n', '    function setMarketActiveState(bool state) public {\n', '        require(msg.sender == owner);                           // Check if sender is owner\n', '        marketActive = state;                                   // pause / unpause market\n', '    }\n', '    \n', '    /** @notice Allows the owner to nominate the feeCollector address\n', '      * @param  collector The address to nominate as feeCollector\n', '      */\n', '    function nominateFeeCollector(address collector) public {\n', '        require(msg.sender == owner && !feeCollectorLocked);    // Check if sender is owner and feeCollector address is not locked\n', '        feeCollector = collector;                               // Update feeCollector address\n', '    }\n', '    \n', '    /** @notice Allows the owner to lock the feeCollector address\n', '  */\n', '    function lockFeeCollector() public {\n', '        require(msg.sender == owner);                           // Check if sender is owner\n', '        feeCollectorLocked = true;                              // Lock feeCollector address\n', '    }\n', '    \n', '    /** @notice Get the feeCollectors address\n', '      * @return The feeCollectors address\n', '      */\n', '    function getFeeCollector() public constant returns (address){\n', '        return feeCollector;\n', '    }\n', '\n', '    /** @notice Allows the feeCollector to directly withdraw his funds (would allow a fee distribution contract to withdraw collected fees)\n', '      * @param  token   The token to withdraw\n', '      * @param  amount  The amount of tokens to withdraw\n', '  */\n', '    function feeWithdrawal(address token, uint256 amount) public {\n', '        if (\n', '            msg.sender == feeCollector                              // Check if the sender is the feeCollector\n', '            && balances[token][feeCollector] >= amount              // Check if feeCollector has the sufficient balance\n', '        ){\n', '            balances[token][feeCollector] -= amount;                // Substract the feeCollectors balance\n', '            if(token == address(0)){                                // Is the withdrawal token ETH\n', '                require(\n', '                    feeCollector.send(amount),                      // Withdraw ETH\n', '                    "Sending of ETH failed."\n', '                );\n', '            }else{\n', '                Token(token).transfer(feeCollector, amount);        // Withdraw ERC20\n', '                require(                                            // Revert if the withdrawal failed\n', '                    checkERC20TransferSuccess(),\n', '                    "ERC20 token transfer failed."\n', '                );\n', '            }\n', '            emit FeeWithdrawal(token,amount);                       // Emit FeeWithdrawal event\n', '        }else{\n', '            revert();                                               // Revert the transaction if the checks fail\n', '        }\n', '    }\n', '    \n', '    // We have to check returndatasize after ERC20 tokens transfers, as some tokens are implemented badly (dont return a boolean)\n', '    function checkERC20TransferSuccess() pure private returns(bool){\n', '        uint256 success = 0;\n', '\n', '        assembly {\n', '            switch returndatasize               // Check the number of bytes the token contract returned\n', '                case 0 {                        // Nothing returned, but contract did not throw > assume our transfer succeeded\n', '                    success := 1\n', '                }\n', '                case 32 {                       // 32 bytes returned, result is the returned bool\n', '                    returndatacopy(0, 0, 32)\n', '                    success := mload(0)\n', '                }\n', '        }\n', '\n', '        return success != 0;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '// Standart ERC20 token interface to interact with ERC20 token contracts\n', '// To support badly implemented tokens (which dont return a boolean on the transfer functions)\n', '// we have to expect a badly implemented token and then check with checkERC20TransferSuccess() whether the transfer succeeded\n', '\n', 'contract Token {\n', '    /** @return total amount of tokens\n', '      */\n', '    function totalSupply() constant public returns (uint256 supply) {}\n', '\n', '    /** @param _owner The address from which the balance will be retrieved\n', '      * @return The balance\n', '      */\n', '    function balanceOf(address _owner) constant public returns (uint256 balance) {}\n', '\n', '    /** @notice send `_value` token to `_to` from `msg.sender`\n', '      * @param  _to     The address of the recipient\n', '      * @param  _value  The amount of tokens to be transferred\n', '      * @return Whether the transfer was successful or not\n', '      */\n', '    function transfer(address _to, uint256 _value) public {}\n', '\n', '    /** @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '      * @param  _from   The address of the sender\n', '      * @param  _to     The address of the recipient\n', '      * @param  _value  The amount of tokens to be transferred\n', '      * @return Whether the transfer was successful or not\n', '      */\n', '    function transferFrom(address _from, address _to, uint256 _value)  public {}\n', '\n', '    /** @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '      * @param  _spender The address of the account able to transfer the tokens\n', '      * @param  _value   The amount of wei to be approved for transfer\n', '      * @return Whether the approval was successful or not\n', '      */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {}\n', '\n', '    /** @param  _owner   The address of the account owning tokens\n', '      * @param  _spender The address of the account able to transfer the tokens\n', '      * @return Amount of remaining tokens allowed to spend\n', '      */\n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {}\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    uint public decimals;\n', '    string public name;\n', '}']