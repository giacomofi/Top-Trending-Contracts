['pragma solidity ^0.5.3;\n', '\n', 'interface Token {\n', '  function transfer( address to, uint amount ) external;\n', '  function transferFrom( address from, address to, uint amount ) external;\n', '}\n', '\n', 'interface Membership {\n', '  function isMember( address pusher ) external returns (bool);\n', '}\n', '\n', 'contract Owned\n', '{\n', '  address payable public owner;\n', '  constructor() public { owner = msg.sender; }\n', '\n', '  function changeOwner( address payable newOwner ) isOwner public {\n', '    owner = newOwner;\n', '  }\n', '\n', '  modifier isOwner {\n', '    require( msg.sender == owner );\n', '    _;\n', '  }\n', '}\n', '\n', 'contract Publisher is Owned\n', '{\n', '  event Published( bytes indexed receiverpubkey,\n', '                   string ipfshash,\n', '                   string redmeta );\n', '\n', '  Membership public membership;\n', '\n', '  address payable public treasury;\n', '  uint256 public fee;\n', '  uint256 dao;\n', '\n', '  uint256 public tokenFee;\n', '  Token   public token;\n', '\n', '  constructor() public {\n', '    dao = uint256(100);\n', '  }\n', '\n', '  function setFee( uint256 _fee ) isOwner public {\n', '    fee = _fee;\n', '  }\n', '\n', '  function setDao( uint256 _dao ) isOwner public {\n', '    dao = _dao;\n', '  }\n', '\n', '  function setTreasury( address payable _treasury ) isOwner public {\n', '    treasury = _treasury;\n', '  }\n', '\n', '  function setMembership( address _contract ) isOwner public {\n', '    membership = Membership(_contract);\n', '  }\n', '\n', '  function setTokenFee( uint256 _fee ) isOwner public {\n', '    tokenFee = _fee;\n', '  }\n', '\n', '  function setToken( address _token ) isOwner public {\n', '    token = Token(_token);\n', '  }\n', '\n', '  function publish( bytes memory receiverpubkey,\n', '                    string memory ipfshash,\n', '                    string memory redmeta ) payable public {\n', '\n', '    require(    msg.value >= fee\n', '             && membership.isMember(msg.sender) );\n', '\n', '    if (treasury != address(0))\n', '      treasury.transfer( msg.value - msg.value / dao );\n', '\n', '    emit Published( receiverpubkey, ipfshash, redmeta );\n', '  }\n', '\n', '  function publish_t( bytes memory receiverpubkey,\n', '                      string memory ipfshash,\n', '                      string memory redmeta ) public {\n', '\n', '    require( membership.isMember(msg.sender) );\n', '\n', '    token.transferFrom( msg.sender, address(this), tokenFee );\n', '\n', '    if (treasury != address(0)) {\n', '      token.transfer( treasury, tokenFee - tokenFee/dao );\n', '    }\n', '\n', '    emit Published( receiverpubkey, ipfshash, redmeta );\n', '  }\n', '\n', '  function withdraw( uint256 amount ) isOwner public {\n', '    owner.transfer( amount );\n', '  }\n', '\n', '  function sendTok( address _tok, address _to, uint256 _qty ) isOwner public {\n', '    Token(_tok).transfer( _to, _qty );\n', '  }\n', '}']