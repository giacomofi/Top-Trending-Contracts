['pragma solidity ^0.5.8;\n', '\n', '/**\n', ' * @title SafeMath\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '   function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '}\n', '\n', 'contract ERC20Standard {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address tokenOwner) public view returns (uint256 balance);\n', '    function allowance(address tokenOwner, address spender) public view returns (uint256 remaining);\n', '    function transfer(address to, uint256 tokens) public returns (bool success);\n', '    function approve(address spender, uint256 tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\n', '}\n', '\n', 'contract Owned {\n', '    address payable public owner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address payable newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', 'contract Exsender is Owned {\n', '    using SafeMath for uint256;\n', '    \n', '    function distributeForeignTokenWithUnifiedAmount(ERC20Standard _tokenContract, address[] calldata _addresses, uint256 _amount) external {\n', '        for (uint256 i = 0; i < _addresses.length; i++) {\n', '            _tokenContract.transferFrom(msg.sender, _addresses[i], _amount);\n', '        }\n', '    }\n', '    \n', '    function distributeForeignTokenWithSplittedAmount(ERC20Standard _tokenContract, address[] calldata _addresses, uint256[] calldata _amounts) external {\n', '        require(_addresses.length == _amounts.length);\n', '        for (uint256 i = 0; i < _addresses.length; i++) {\n', '            _tokenContract.transferFrom(msg.sender, _addresses[i], _amounts[i]);\n', '        }\n', '    }\n', '    \n', '    function distributeEtherWithUnifiedAmount(address payable[] calldata _addresses) payable external {\n', '        uint256 amount = msg.value.div(_addresses.length);\n', '        for (uint256 i = 0; i < _addresses.length; i++) {\n', '            _addresses[i].transfer(amount);\n', '        }\n', '    }\n', '    \n', '    function distributeEtherWithSplittedAmount(address payable[] calldata _addresses, uint256[] calldata _amounts) payable external {\n', '        require(_addresses.length == _amounts.length);\n', '        require(msg.value >= sumArray(_amounts));\n', '        for (uint256 i = 0; i < _addresses.length; i++) {\n', '            _addresses[i].transfer(_amounts[i]);\n', '        }\n', '    }\n', '    \n', '    function liftTokensToSingleAddress(ERC20Standard[] calldata _tokenContract, address _receiver, uint256[] calldata _amounts) external {\n', '        for (uint256 i = 0; i < _tokenContract.length; i++) {\n', '            _tokenContract[i].transferFrom(msg.sender, _receiver, _amounts[i]);\n', '        }\n', '    }\n', '\n', '    function liftTokensToMultipleAddresses(ERC20Standard[] calldata _tokenContract, address[] calldata _receiver, uint256[] calldata _amounts) external {\n', '        for (uint256 i = 0; i < _tokenContract.length; i++) {\n', '            _tokenContract[i].transferFrom(msg.sender, _receiver[i], _amounts[i]);\n', '        }\n', '    }\n', '    \n', '    function getForeignTokenBalance(ERC20Standard _tokenContract, address who) view public returns (uint256) {\n', '        return _tokenContract.balanceOf(who);\n', '    }\n', '        \n', '    function transferEther(address payable _receiver, uint256 _amount) public onlyOwner {\n', '        require(_amount <= address(this).balance);\n', '        emit TransferEther(address(this), _receiver, _amount);\n', '        _receiver.transfer(_amount);\n', '    }\n', '    \n', '    function withdrawFund() onlyOwner public {\n', '        uint256 balance = address(this).balance;\n', '        owner.transfer(balance);\n', '    }\n', '    \n', '    function withdrawForeignTokens(ERC20Standard _tokenContract) onlyOwner public {\n', '        uint256 amount = _tokenContract.balanceOf(address(this));\n', '        _tokenContract.transfer(owner, amount);\n', '    }\n', '\n', '    function sumArray(uint256[] memory _array) public pure returns (uint256 sum_) {\n', '        sum_ = 0;\n', '        for (uint256 i = 0; i < _array.length; i++) {\n', '            sum_ += _array[i];\n', '        }\n', '    }\n', '    event TransferEther(address indexed _from, address indexed _to, uint256 _value);\n', '}']