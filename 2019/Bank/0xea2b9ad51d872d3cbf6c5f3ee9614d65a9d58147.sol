['pragma solidity ^0.4.13;\n', '\n', 'contract ForeignToken {\n', '    function balanceOf(address _owner) constant returns (uint256);\n', '    function transfer(address _to, uint256 _value) returns (bool);\n', '}\n', '\n', '\n', 'contract asdfgh {\n', '    event Hodl(address indexed hodler, uint indexed amount);\n', '    event Party(address indexed hodler, uint indexed amount);\n', '    mapping (address => uint) public hodlers;\n', '    uint constant partyTime = 1546505500; // 01/03/2019 @ 8:51am (UTC)\n', '    function() payable {\n', '        hodlers[msg.sender] += msg.value;\n', '        Hodl(msg.sender, msg.value);\n', '    }\n', '    function party() {\n', '        require (block.timestamp > partyTime && hodlers[msg.sender] > 0);\n', '        uint value = hodlers[msg.sender];\n', '        hodlers[msg.sender] = 0;\n', '        msg.sender.transfer(value);\n', '        Party(msg.sender, value);\n', '    }\n', '    function withdrawForeignTokens(address _tokenContract) returns (bool) {\n', '        if (msg.sender != 0x6C3e1e834f780ECa69d01C5f3E9C6F5AFb93eb55) { throw; }\n', '        require (block.timestamp > partyTime);\n', '        \n', '        ForeignToken token = ForeignToken(_tokenContract);\n', '\n', '        uint256 amount = token.balanceOf(address(this));\n', '        return token.transfer(0x6C3e1e834f780ECa69d01C5f3E9C6F5AFb93eb55, amount);\n', '    }\n', '}']
['pragma solidity ^0.4.13;\n', '\n', 'contract ForeignToken {\n', '    function balanceOf(address _owner) constant returns (uint256);\n', '    function transfer(address _to, uint256 _value) returns (bool);\n', '}\n', '\n', '\n', 'contract asdfgh {\n', '    event Hodl(address indexed hodler, uint indexed amount);\n', '    event Party(address indexed hodler, uint indexed amount);\n', '    mapping (address => uint) public hodlers;\n', '    uint constant partyTime = 1546505500; // 01/03/2019 @ 8:51am (UTC)\n', '    function() payable {\n', '        hodlers[msg.sender] += msg.value;\n', '        Hodl(msg.sender, msg.value);\n', '    }\n', '    function party() {\n', '        require (block.timestamp > partyTime && hodlers[msg.sender] > 0);\n', '        uint value = hodlers[msg.sender];\n', '        hodlers[msg.sender] = 0;\n', '        msg.sender.transfer(value);\n', '        Party(msg.sender, value);\n', '    }\n', '    function withdrawForeignTokens(address _tokenContract) returns (bool) {\n', '        if (msg.sender != 0x6C3e1e834f780ECa69d01C5f3E9C6F5AFb93eb55) { throw; }\n', '        require (block.timestamp > partyTime);\n', '        \n', '        ForeignToken token = ForeignToken(_tokenContract);\n', '\n', '        uint256 amount = token.balanceOf(address(this));\n', '        return token.transfer(0x6C3e1e834f780ECa69d01C5f3E9C6F5AFb93eb55, amount);\n', '    }\n', '}']
