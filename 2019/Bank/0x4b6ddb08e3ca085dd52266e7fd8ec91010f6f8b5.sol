['pragma solidity ^0.5.4;\n', '\n', '////////////////////////////////////////////////////////////////////////////////\n', 'contract SafeMath \n', '{\n', '    function safeMul(uint a, uint b) internal pure returns (uint) \n', '    {\n', '        uint c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '    //--------------------------------------------------------------------------\n', '    function safeSub(uint a, uint b) internal pure returns (uint) \n', '    {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    //--------------------------------------------------------------------------\n', '    function safeAdd(uint a, uint b) internal pure returns (uint) \n', '    {\n', '        uint c = a + b;\n', '        assert(c>=a && c>=b);\n', '        return c;\n', '    }\n', '}\n', '////////////////////////////////////////////////////////////////////////////////\n', 'contract    ERC20   is SafeMath\n', '{\n', '    mapping(address => uint256)                         balances;\n', '    mapping(address => mapping (address => uint256))    allowances;\n', '\n', '    uint256 public  totalSupply;\n', '    uint    public  decimals;\n', '    \n', '    string  public  name;\n', '\n', '    event Transfer(address indexed _from,  address indexed _to,      uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    //--------------------------------------------------------------------------\n', '    constructor()   public \n', '    {\n', '    }\n', '    //--------------------------------------------------------------------------\n', '    function        transfer(address toAddr, uint256 amountInWei)  public   returns (bool)\n', '    {\n', '        uint256         baseAmount;\n', '        uint256         finalAmount;\n', '\n', '        require(toAddr!=address(0x0) && toAddr!=msg.sender \n', '                                     && amountInWei!=0\n', '                                     && amountInWei<=balances[msg.sender]);\n', '        //-----\n', '\n', '        baseAmount  = balances[msg.sender];\n', '        finalAmount = baseAmount - amountInWei;\n', '        \n', '        assert(finalAmount <= baseAmount);\n', '        \n', '        balances[msg.sender] = finalAmount;\n', '\n', '        //-----\n', '       \n', '        baseAmount  = balances[toAddr];\n', '        finalAmount = baseAmount + amountInWei;\n', '\n', '        assert(finalAmount >= baseAmount);\n', '        \n', '        balances[toAddr] = finalAmount;\n', '        \n', '        emit Transfer(msg.sender, toAddr, amountInWei);\n', '\n', '        return true;\n', '    }\n', '    //--------------------------------------------------------------------------\n', '    function transferFrom(address fromAddr, address toAddr, uint256 amountInWei)  public  returns (bool) \n', '    {\n', '        require(amountInWei!=0                                   &&\n', '                balances[fromAddr]               >= amountInWei  &&\n', '                allowances[fromAddr][msg.sender] >= amountInWei);\n', '\n', '                //-----\n', '\n', '        uint256 baseAmount  = balances[fromAddr];\n', '        uint256 finalAmount = baseAmount - amountInWei;\n', '        \n', '        assert(finalAmount <= baseAmount);\n', '        \n', '        balances[fromAddr] = finalAmount;\n', '        \n', '                //-----\n', '                \n', '        baseAmount  = balances[toAddr];\n', '        finalAmount = baseAmount + amountInWei;\n', '        \n', '        assert(finalAmount >= baseAmount);\n', '        \n', '        balances[toAddr] = finalAmount;\n', '        \n', '                //-----\n', '                \n', '        baseAmount  = allowances[fromAddr][msg.sender];\n', '        finalAmount = baseAmount - amountInWei;\n', '        \n', '        assert(finalAmount <= baseAmount);\n', '        \n', '        allowances[fromAddr][msg.sender] = finalAmount;\n', '        \n', '        //-----           \n', '        \n', '        emit Transfer(fromAddr, toAddr, amountInWei);\n', '        return true;\n', '    }\n', '     //--------------------------------------------------------------------------\n', '    function balanceOf(address _owner) public view returns (uint256 balance) \n', '    {\n', '        return balances[_owner];\n', '    }\n', '    //--------------------------------------------------------------------------\n', '    function approve(address _spender, uint256 _value) public returns (bool success) \n', '    {\n', '        allowances[msg.sender][_spender] = _value;\n', '        \n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    //--------------------------------------------------------------------------\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) \n', '    {\n', '        return allowances[_owner][_spender];\n', '    }\n', '}\n', '////////////////////////////////////////////////////////////////////////////////\n', 'contract    ReserveToken    is ERC20\n', '{\n', '    address public minter;\n', '  \n', '    modifier onlyMinter()            { require(msg.sender==minter);   _; }\n', '    //--------------------------------------------------------------------------\n', '    constructor()   public \n', '    {\n', '        minter = msg.sender;\n', '    }\n', '    //--------------------------------------------------------------------------\n', '    function    create(address account, uint amount)    onlyMinter  public\n', '    {\n', '        balances[account] = safeAdd(balances[account], amount);\n', '        totalSupply       = safeAdd(totalSupply, amount);\n', '    }\n', '    //--------------------------------------------------------------------------\n', '    function    destroy(address account, uint amount)   onlyMinter  public\n', '    {\n', '        require(balances[account]>=amount);\n', '\n', '        balances[account] = safeSub(balances[account], amount);\n', '        totalSupply       = safeSub(totalSupply, amount);\n', '    }\n', '}\n', '////////////////////////////////////////////////////////////////////////////////\n', 'contract EtherDelta is SafeMath \n', '{\n', '    address public  admin;              // the admin address\n', '    address public  feeAccount;         // the account that will receive fees\n', '\n', '    uint public     feeTake;            // percentage times (1 ether)\n', '\n', '    address         etherAddress = address(0x0);\n', '  \n', '    mapping (address => mapping (address => uint)) public tokens;       //mapping of token addresses to mapping of account balances (token=0 means Ether)\n', '    mapping (address => mapping (bytes32 => bool)) public orders;       //mapping of user accounts to mapping of order hashes to booleans (true = submitted by user, equivalent to offchain signature)\n', '    mapping (address => mapping (bytes32 => uint)) public orderFills;   //mapping of user accounts to mapping of order hashes to uints (amount of order that has been filled)\n', '\n', '    event   Order(   address tokenGet, uint    amountGet, address tokenGive, uint amountGive, uint    expires, uint    nonce, address user);\n', '    event   Cancel(  address tokenGet, uint    amountGet, address tokenGive, uint amountGive, uint    expires, uint    nonce, address user, uint8 v, bytes32 r, bytes32 s);\n', '    event   Trade(   address tokenGet, uint    amountGet, address tokenGive, uint amountGive, address get,     address give);\n', '    event   Deposit( address token,    address user,      uint    amount,    uint balance);\n', '    event   Withdraw(address token,    address user,      uint    amount,    uint balance);\n', '    \n', '    event   OnFeeAccountChanged(address oldWallet, address newWallet);\n', '    event   OnChangeAdmin(     address oldAmin,    address newAdmin);\n', '    event   OnchangeFee(uint256 oldFee, uint256 newFee);\n', '    event   OnTradeTested(uint256 status);\n', '\n', '    modifier onlyAdmin()            { require(msg.sender==admin);   _; }\n', '    //--------------------------------------------------------------------------\n', '    constructor()   public \n', '    {\n', '        admin      = msg.sender;\n', '        \n', '        feeTake    = 3000000000000000;\n', '        feeAccount = 0x88df955fc88f253e21beECcfdD81f01D141219c9;\n', '    }\n', '    //--------------------------------------------------------------------------\n', '    function() external\n', '    {\n', '        assert(true==false);\n', '    }\n', '    //--------------------------------------------------------------------------\n', '    function changeAdmin(address newAdmin)    onlyAdmin    public\n', '    {\n', '        emit OnChangeAdmin(admin, newAdmin);\n', '        \n', '        admin = newAdmin;\n', '    }\n', '    //--------------------------------------------------------------------------\n', '    function changeFeeAccount(address newWallet) onlyAdmin     public\n', '    {\n', '        emit OnFeeAccountChanged(feeAccount, newWallet);\n', '        \n', '        feeAccount = newWallet;\n', '    }\n', '    //--------------------------------------------------------------------------\n', '    function changeFeeTake(uint newFee)    onlyAdmin           public\n', '    {\n', "        require(newFee<30000000000000000000);   // don't allow change if above 3%\n", '    \n', '        emit OnchangeFee(feeTake, newFee);\n', '    \n', '        feeTake = newFee;\n', '    }\n', '    //--------------------------------------------------------------------------\n', '    function deposit() payable                          public\n', '    {\n', '        tokens[etherAddress][msg.sender] = safeAdd(tokens[etherAddress][msg.sender], msg.value);\n', '        \n', '        emit Deposit(etherAddress, msg.sender, msg.value, tokens[etherAddress][msg.sender]);\n', '    }\n', '    //--------------------------------------------------------------------------\n', '    function withdraw(uint amount)                      public\n', '    {\n', '        require(tokens[etherAddress][msg.sender]>=amount);\n', '    \n', '        tokens[etherAddress][msg.sender] = safeSub(tokens[etherAddress][msg.sender], amount);\n', '    \n', '        msg.sender.transfer(amount);\n', '    \n', '        emit Withdraw(etherAddress, msg.sender, amount, tokens[etherAddress][msg.sender]);\n', '    }\n', '    //--------------------------------------------------------------------------\n', '    function depositToken(address token, uint amount)   public\n', '    {\n', '        //!!!!!!! Remember to call Token(address).approve(this, amount) \n', '        //!!!!!!! or this contract will not be able to do the transfer on your behalf.\n', '        \n', '        require(token!=address(0x0));\n', '        \n', '        //if (!ERC20(token).transferFrom(msg.sender, this, amount))\n', '        if (!ERC20(token).transferFrom(msg.sender, address(this), amount)) \n', '        {\n', '            assert(true==false);\n', '        }\n', '        \n', '        tokens[token][msg.sender] = safeAdd(tokens[token][msg.sender], amount);\n', '        \n', '        emit Deposit(token, msg.sender, amount, tokens[token][msg.sender]);\n', '    }\n', '    //--------------------------------------------------------------------------\n', '    function withdrawToken(address token, uint amount)  public\n', '    {\n', '        require(token!=address(0x0));\n', '        \n', '        if (tokens[token][msg.sender] < amount)     assert(true==false);\n', '        \n', '        tokens[token][msg.sender] = safeSub(tokens[token][msg.sender], amount);\n', '    \n', '        if (!ERC20(token).transfer(msg.sender, amount)) assert(true==false);\n', '    \n', '        emit Withdraw(token, msg.sender, amount, tokens[token][msg.sender]);\n', '    }\n', '    //--------------------------------------------------------------------------\n', '    function balanceOf(address token, address user)     public view returns (uint) \n', '    {\n', '        return tokens[token][user];\n', '    }\n', '    //--------------------------------------------------------------------------\n', '    function    generateHash(   address tokenGet, \n', '                                uint    amountGet,  \n', '                                address tokenGive, \n', '                                uint    amountGive, \n', '                                uint    expires, \n', '                                uint    nonce)     private view returns(bytes32)\n', '    {\n', '        return sha256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n', '    }\n', '    //--------------------------------------------------------------------------\n', '    function    order(  address tokenGet, \n', '                        uint    amountGet,  \n', '                        address tokenGive, \n', '                        uint    amountGive, \n', '                        uint    expires, \n', '                        uint    nonce)     public \n', '    {\n', '        bytes32 hash = generateHash(tokenGet, amountGet, tokenGive, amountGive, expires, nonce);\n', '    \n', '        orders[msg.sender][hash] = true;\n', '    \n', '        emit Order(tokenGet, amountGet, tokenGive, amountGive, expires, nonce, msg.sender);\n', '    }\n', '    //--------------------------------------------------------------------------\n', '    function    trade(address tokenGet, uint    amountGet, \n', '                                        address tokenGive, \n', '                                        uint    amountGive, \n', '                                        uint    expires, \n', '                                        uint    nonce, \n', '                                        address user, \n', '                                        uint8   v, \n', '                                        bytes32 r, \n', '                                        bytes32 s, \n', '                                        uint    amount)   public\n', '    {\n', '        bytes32 hash = sha256(abi.encodePacked(this, tokenGet, amountGet, tokenGive, amountGive, expires, nonce));\n', '\n', '        require\n', '        (\n', '            (orders[user][hash]                                                                             ||\n', '             ecrecover(keccak256(abi.encodePacked("\\x19Ethereum Signed Message:\\n32", hash)),v,r,s)==user\n', '            )                                                                                               &&\n', '             block.number <= expires                                                                        &&\n', '             safeAdd(orderFills[user][hash], amount) <= amountGet\n', '        );\n', '\n', '        tradeBalances(tokenGet, amountGet, tokenGive, amountGive, user, amount);\n', '        \n', '        orderFills[user][hash] = safeAdd(orderFills[user][hash], amount);\n', '    \n', '        emit Trade(tokenGet, amount, tokenGive, amountGive * amount / amountGet, user, msg.sender);\n', '    }\n', '    //--------------------------------------------------------------------------\n', '    function    tradeBalances(address tokenGet, uint    amountGet, \n', '                                                address tokenGive, \n', '                                                uint    amountGive, \n', '                                                address user,\n', '                                                uint    amount) private \n', '    {\n', '        uint feeTakeXfer   = safeMul(amount, feeTake) / (1 ether);\n', '\n', '        tokens[tokenGet][msg.sender]  = safeSub(tokens[tokenGet][msg.sender],  safeAdd(amount, feeTakeXfer));\n', '        tokens[tokenGet][user]        = safeAdd(tokens[tokenGet][user],        amount);\n', '        tokens[tokenGet][feeAccount]  = safeAdd(tokens[tokenGet][feeAccount],  feeTakeXfer);\n', '        tokens[tokenGive][user]       = safeSub(tokens[tokenGive][user],       safeMul(amountGive, amount) / amountGet);\n', '        tokens[tokenGive][msg.sender] = safeAdd(tokens[tokenGive][msg.sender], safeMul(amountGive, amount) / amountGet);\n', '    }\n', '    //--------------------------------------------------------------------------\n', '    function    testTrade(address tokenGet, uint amountGet, \n', '                                            address tokenGive, \n', '                                            uint amountGive, \n', '                                            uint expires, \n', '                                            uint nonce, \n', '                                            address user, \n', '                                            uint8 v, \n', '                                            bytes32 r, \n', '                                            bytes32 s, \n', '                                            uint amount, \n', '                                            address sender) public /*view*/  returns(bool) \n', '    {\n', '        if (!(tokens[tokenGet][sender] >= amount &&\n', '            availableVolume(tokenGet, amountGet, tokenGive, amountGive, expires, nonce, user, v, r, s) >= amount)) \n', '        {\n', '            emit OnTradeTested(0);\n', '            return false;\n', '        }\n', '\n', '        emit OnTradeTested(1);\n', '        return true;\n', '    }\n', '    //--------------------------------------------------------------------------\n', '    function    availableVolume(address tokenGet,   uint    amountGet, \n', '                                                    address tokenGive, \n', '                                                    uint    amountGive, \n', '                                                    uint    expires, \n', '                                                    uint    nonce, \n', '                                                    address user, \n', '                                                    uint8   v, \n', '                                                    bytes32 r, \n', '                                                    bytes32 s)  public  view returns(uint) \n', '    {\n', '        bytes32 hash = generateHash(tokenGet, amountGet, tokenGive, amountGive, expires, nonce);\n', '\n', '        if\n', '        (!(\n', '            (orders[user][hash]                                                                             ||\n', '             ecrecover(keccak256(abi.encodePacked("\\x19Ethereum Signed Message:\\n32", hash)),v,r,s)==user)  &&\n', '             block.number <= expires\n', '        ))\n', '        {\n', '            return 0;\n', '        }\n', '\n', '        uint available1 = safeSub(amountGet, orderFills[user][hash]);\n', '        uint available2 = safeMul(tokens[tokenGive][user], amountGet) / amountGive;\n', '        \n', '        if (available1<available2) return available1;\n', '        \n', '        return available2;\n', '    }\n', '    //--------------------------------------------------------------------------\n', '    function amountFilled(address tokenGet, uint    amountGet, \n', '                                            address tokenGive, \n', '                                            uint    amountGive, \n', '                                            uint    expires, \n', '                                            uint    nonce, \n', '                                            address user, \n', '                                            uint8   v, \n', '                                            bytes32 r, \n', '                                            bytes32 s) public  returns(uint) \n', '    {\n', '        bytes32 hash = generateHash(tokenGet, amountGet, tokenGive, amountGive, expires, nonce);\n', '        \n', '        return orderFills[user][hash];\n', '    }\n', '    //--------------------------------------------------------------------------\n', '    function cancelOrder(address tokenGet,  uint    amountGet, \n', '                                            address tokenGive, \n', '                                            uint    amountGive, \n', '                                            uint    expires, \n', '                                            uint    nonce, \n', '                                            uint8   v, \n', '                                            bytes32 r, \n', '                                            bytes32 s)  public\n', '    {\n', '        bytes32 hash = generateHash(tokenGet, amountGet, tokenGive, amountGive, expires, nonce);\n', '\n', '        require\n', '        (\n', '             orders[msg.sender][hash]     ||\n', '             ecrecover(keccak256(abi.encodePacked("\\x19Ethereum Signed Message:\\n32", hash)),v,r,s)==msg.sender\n', '        );\n', '\n', '        orderFills[msg.sender][hash] = amountGet;\n', '    \n', '        emit Cancel(tokenGet, amountGet, tokenGive, amountGive, expires, nonce, msg.sender, v, r, s);\n', '    }\n', '}']