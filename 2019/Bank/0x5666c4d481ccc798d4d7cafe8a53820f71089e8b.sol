['pragma solidity 0.4.25;\n', '\n', 'contract E2D {\n', '    /*=================================\n', '    =            MODIFIERS            =\n', '    =================================*/\n', '    // only people with tokens\n', '    modifier onlyBagholders() {\n', '        require(myTokens() > 0);\n', '        _;\n', '    }\n', '\n', '    // only people with profits\n', '    modifier onlyStronghands() {\n', '        require(myDividends() > 0);\n', '        _;\n', '    }\n', '\n', '    // owner can:\n', '    // -> change the name of the contract\n', '    // -> change the name of the token\n', '    // they CANNOT:\n', '    // -> take funds\n', '    // -> disable withdrawals\n', '    // -> kill the contract\n', '    // -> change the price of tokens\n', '    modifier onlyOwner(){\n', '        require(ownerAddr == msg.sender || OWNER_ADDRESS_2 == msg.sender, "only owner can perform this!");\n', '        _;\n', '    }\n', '\n', '    modifier onlyInitialInvestors(){\n', '        if(initialState) {\n', '            require(initialInvestors[msg.sender] == true, "only allowed investor can invest!");\n', '            _;\n', '        } else {\n', '            _;\n', '        }\n', '    }\n', '\n', '    /*==============================\n', '    =            EVENTS            =\n', '    ==============================*/\n', '    event onTokenPurchase(\n', '        address indexed customerAddress,\n', '        uint256 incomingEthereum,\n', '        uint256 tokensMinted\n', '    );\n', '\n', '    event onTokenSell(\n', '        address indexed customerAddress,\n', '        uint256 tokensBurned,\n', '        uint256 ethereumEarned\n', '    );\n', '\n', '    event onReinvestment(\n', '        address indexed customerAddress,\n', '        uint256 ethereumReinvested,\n', '        uint256 tokensMinted\n', '    );\n', '\n', '    event onWithdraw(\n', '        address indexed customerAddress,\n', '        uint256 ethereumWithdrawn\n', '    );\n', '\n', '    event onPayDividends(\n', '        uint256 dividends,\n', '        uint256 profitPerShare\n', '    );\n', '\n', '    // ERC20\n', '    event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 tokens\n', '    );\n', '\n', '    /*=====================================\n', '    =            CONFIGURABLES            =\n', '    =====================================*/\n', '    string public name = "E2D";\n', '    string public symbol = "E2D";\n', '    uint8 constant public decimals = 18;\n', '    uint8 constant internal dividendFee_ = 10;\n', '    uint256 constant internal tokenPriceInitial_ = 0.0000001 ether;\n', '    uint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;\n', '    uint256 constant internal magnitude = 2**64;\n', '    address constant internal OWNER_ADDRESS = address(0x508b828440D72B0De506c86DB79D9E2c19810442);\n', '    address constant internal OWNER_ADDRESS_2 = address(0x508b828440D72B0De506c86DB79D9E2c19810442);\n', '    uint256 constant public INVESTOR_QUOTA = 0.01 ether;\n', '\n', '   /*================================\n', '    =            DATASETS            =\n', '    ================================*/\n', '    // amount of shares for each address (scaled number)\n', '    mapping(address => uint256) internal tokenBalanceLedger_;\n', '    mapping(address => int256) internal payoutsTo_;\n', '    uint256 internal tokenSupply_ = 0;\n', '    uint256 internal profitPerShare_;\n', '    uint256 internal totalInvestment_ = 0;\n', '    uint256 internal totalGameDividends_ = 0;\n', '\n', '    // smart contract owner address (see above on what they can do)\n', '    address public ownerAddr;\n', '\n', '    // initial investor list who can purchase tokens (this prevents a whale premine, it ensures a fairly distributed upper pyramid)\n', '    mapping(address => bool) public initialInvestors;\n', '\n', '    // when this is set to true, only allowed initialInvestors can purchase tokens.\n', '    bool public initialState = true;\n', '\n', '    /*=======================================\n', '    =            PUBLIC FUNCTIONS            =\n', '    =======================================*/\n', '    /*\n', '    * -- APPLICATION ENTRY POINTS --  \n', '    */\n', '\n', '    constructor() public {\n', '        // add initialInvestors here\n', '        ownerAddr = OWNER_ADDRESS;\n', '        initialInvestors[OWNER_ADDRESS] = true;\n', '        initialInvestors[OWNER_ADDRESS_2] = true;\n', '    }\n', '\n', '    /**\n', '     * Converts all incoming ethereum to tokens for the caller\n', '     */\n', '    function buy() public payable returns(uint256) {\n', '        purchaseTokens(msg.value);\n', '    }\n', '\n', '    /**\n', '     * Fallback function to handle ethereum that was send straight to the contract\n', '     */\n', '    function() public payable {\n', '        purchaseTokens(msg.value);\n', '    }\n', '\n', '    /**\n', "     * Converts all of caller's dividends to tokens.\n", '     */\n', '    function reinvest() public onlyStronghands() {\n', '        // fetch dividends\n', '        uint256 _dividends = myDividends();\n', '\n', '        // pay out the dividends virtually\n', '        address _customerAddress = msg.sender;\n', '        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n', '\n', '        // dispatch a buy order with the virtualized "withdrawn dividends"\n', '        uint256 _tokens = purchaseTokens(_dividends);\n', '\n', '        // fire event\n', '        emit onReinvestment(_customerAddress, _dividends, _tokens);\n', '    }\n', '\n', '    /**\n', '     * Alias of sell() and withdraw().\n', '     */\n', '    function exit() public {\n', '        // get token count for caller & sell them all\n', '        address _customerAddress = msg.sender;\n', '        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n', '        if(_tokens > 0) sell(_tokens);\n', '\n', '        // lambo delivery service\n', '        withdraw();\n', '    }\n', '\n', '    /**\n', '     * Withdraws all of the callers earnings.\n', '     */\n', '    function withdraw() public onlyStronghands() {\n', '        // setup data\n', '        address _customerAddress = msg.sender;\n', '        uint256 _dividends = myDividends();\n', '\n', '        // update dividend tracker\n', '        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n', '\n', '        // lambo delivery service\n', '        _customerAddress.transfer(_dividends);\n', '\n', '        // fire event\n', '        emit onWithdraw(_customerAddress, _dividends);\n', '    }\n', '\n', '    /**\n', '     * Liquifies tokens to ethereum.\n', '     */\n', '    function sell(uint256 _amountOfTokens) public onlyBagholders() {\n', '        // setup data\n', '        address _customerAddress = msg.sender;\n', '        // russian hackers BTFO\n', '        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress], "token to sell should be less then balance!");\n', '        uint256 _tokens = _amountOfTokens;\n', '        uint256 _ethereum = tokensToEthereum_(_tokens);\n', '        uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\n', '        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n', '\n', '        // burn the sold tokens\n', '        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n', '\n', '        // update dividends tracker\n', '        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n', '        payoutsTo_[_customerAddress] -= _updatedPayouts;      \n', '\n', '        // dividing by zero is a bad idea\n', '        if (tokenSupply_ > 0) {\n', '            // update the amount of dividends per token\n', '            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n', '        }\n', '\n', '        // fire event\n', '        emit onTokenSell(_customerAddress, _tokens, _taxedEthereum);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from the caller to a new holder.\n', "     * Remember, there's a 10% fee here as well.\n", '     */\n', '    function transfer(address _toAddress, uint256 _amountOfTokens) public onlyBagholders() returns(bool) {\n', '        // setup\n', '        address _customerAddress = msg.sender;\n', '\n', '        // make sure we have the requested tokens\n', '        // also disables transfers until adminstrator phase is over\n', '        require(!initialState && (_amountOfTokens <= tokenBalanceLedger_[_customerAddress]), "initial state or token > balance!");\n', '\n', '        // withdraw all outstanding dividends first\n', '        if(myDividends() > 0) withdraw();\n', '\n', '        // liquify 10% of the tokens that are transfered\n', '        // these are dispersed to shareholders\n', '        uint256 _tokenFee = SafeMath.div(_amountOfTokens, dividendFee_);\n', '        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\n', '        uint256 _dividends = tokensToEthereum_(_tokenFee);\n', '  \n', '        // burn the fee tokens\n', '        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\n', '\n', '        // exchange tokens\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n', '        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _taxedTokens);\n', '\n', '        // update dividend trackers\n', '        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\n', '        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _taxedTokens);\n', '\n', '        // disperse dividends among holders\n', '        profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n', '\n', '        // fire event\n', '        emit Transfer(_customerAddress, _toAddress, _taxedTokens);\n', '\n', '        // ERC20\n', '        return true;\n', '    }\n', '\n', '    function payDividends() external payable {\n', '        uint256 _dividends = msg.value;\n', '        require(_dividends > 0, "dividends should be greater then 0!");\n', '        // dividing by zero is a bad idea\n', '        if (tokenSupply_ > 0) {\n', '            // update the amount of dividends per token\n', '            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n', '            totalGameDividends_ = SafeMath.add(totalGameDividends_, _dividends);\n', '            // fire event\n', '            emit onPayDividends(_dividends, profitPerShare_);\n', '        }\n', '    }\n', '\n', '    /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/\n', '    /**\n', '     * In case the amassador quota is not met, the administrator can manually disable the ambassador phase.\n', '     */\n', '    function disableInitialStage() public onlyOwner() {\n', '        require(initialState == true, "initial stage is already false!");\n', '        initialState = false;\n', '    }\n', '\n', '    /**\n', '     * In case one of us dies, we need to replace ourselves.\n', '     */\n', '    function setInitialInvestors(address _addr, bool _status) public onlyOwner() {\n', '        initialInvestors[_addr] = _status;\n', '    }\n', '\n', '    /**\n', '     * If we want to rebrand, we can.\n', '     */\n', '    function setName(string _name) public onlyOwner() {\n', '        name = _name;\n', '    }\n', '\n', '    /**\n', '     * If we want to rebrand, we can.\n', '     */\n', '    function setSymbol(string _symbol) public onlyOwner() {\n', '        symbol = _symbol;\n', '    }\n', '\n', '    /*----------  HELPERS AND CALCULATORS  ----------*/\n', '    /**\n', '     * Method to view the current Ethereum stored in the contract\n', '     * Example: totalEthereumBalance()\n', '     */\n', '    function totalEthereumBalance() public view returns(uint) {\n', '        return address(this).balance;\n', '    }\n', '\n', '    /**\n', '     * Retrieve the total token supply.\n', '     */\n', '    function totalSupply() public view returns(uint256) {\n', '        return tokenSupply_;\n', '    }\n', '\n', '    /**\n', '     * Retrieve the total Investment.\n', '     */\n', '    function totalInvestment() public view returns(uint256) {\n', '        return totalInvestment_;\n', '    }\n', '\n', '    /**\n', '     * Retrieve the total Game Dividends Paid.\n', '     */\n', '    function totalGameDividends() public view returns(uint256) {\n', '        return totalGameDividends_;\n', '    }\n', '\n', '    /**\n', '     * Retrieve the tokens owned by the caller.\n', '     */\n', '    function myTokens() public view returns(uint256) {\n', '        address _customerAddress = msg.sender;\n', '        return balanceOf(_customerAddress);\n', '    }\n', '\n', '    /**\n', '     * Retrieve the dividends owned by the caller.\n', '     */ \n', '    function myDividends() public view returns(uint256) {\n', '        address _customerAddress = msg.sender;\n', '        return dividendsOf(_customerAddress) ;\n', '    }\n', '\n', '    /**\n', '     * Retrieve the token balance of any single address.\n', '     */\n', '    function balanceOf(address _customerAddress) public view returns(uint256) {\n', '        return tokenBalanceLedger_[_customerAddress];\n', '    }\n', '\n', '    /**\n', '     * Retrieve the dividend balance of any single address.\n', '     */\n', '    function dividendsOf(address _customerAddress) public view returns(uint256) {\n', '        return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n', '    }\n', '\n', '    /**\n', '     * Return the sell price of 1 individual token.\n', '     */\n', '    function sellPrice() public view returns(uint256) {\n', '        // our calculation relies on the token supply, so we need supply.\n', '        if(tokenSupply_ == 0){\n', '            return 0;\n', '        } else {\n', '            uint256 _ethereum = tokensToEthereum_(1e18);\n', '            uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\n', '            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n', '            return _taxedEthereum;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Return the buy price of 1 individual token.\n', '     */\n', '    function buyPrice() public view returns(uint256) {\n', '        // our calculation relies on the token supply, so we need supply.\n', '        if(tokenSupply_ == 0){\n', '            return tokenPriceInitial_ + tokenPriceIncremental_;\n', '        } else {\n', '            uint256 _ethereum = tokensToEthereum_(1e18);\n', '            uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\n', '            uint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);\n', '            return _taxedEthereum;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Function for the frontend to dynamically retrieve the price scaling of buy orders.\n', '     */\n', '    function calculateTokensReceived(uint256 _ethereumToSpend) public view returns(uint256) {\n', '        uint256 _dividends = SafeMath.div(_ethereumToSpend, dividendFee_);\n', '        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\n', '        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n', '        return _amountOfTokens;\n', '    }\n', '\n', '    /**\n', '     * Function for the frontend to dynamically retrieve the price scaling of sell orders.\n', '     */\n', '    function calculateEthereumReceived(uint256 _tokensToSell) public view returns(uint256) {\n', '        require(_tokensToSell <= tokenSupply_, "token to sell should be less then total supply!");\n', '        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n', '        uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\n', '        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n', '        return _taxedEthereum;\n', '    }\n', '\n', '    /*==========================================\n', '    =            INTERNAL FUNCTIONS            =\n', '    ==========================================*/\n', '    function purchaseTokens(uint256 _incomingEthereum) internal onlyInitialInvestors() returns(uint256) {\n', '        // data setup\n', '        address _customerAddress = msg.sender;\n', '        uint256 _dividends = SafeMath.div(_incomingEthereum, dividendFee_);\n', '        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _dividends);\n', '        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n', '        uint256 _fee = _dividends * magnitude;\n', '\n', '        require((_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens, tokenSupply_) > tokenSupply_)), "token should be > 0!");\n', '\n', "        // we can't give people infinite ethereum\n", '        if(tokenSupply_ > 0) {\n', '\n', '            // add tokens to the pool\n', '            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n', ' \n', '            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\n', '            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\n', '\n', '            // calculate the amount of tokens the customer receives over his purchase \n', '            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\n', '        } else {\n', '            // add tokens to the pool\n', '            tokenSupply_ = _amountOfTokens;\n', '        }\n', '\n', '        totalInvestment_ = SafeMath.add(totalInvestment_, _incomingEthereum);\n', '\n', '        // update circulating supply & the ledger address for the customer\n', '        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n', '\n', "        // Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them;\n", "        //really i know you think you do but you don't\n", '        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\n', '        payoutsTo_[_customerAddress] += _updatedPayouts;\n', '\n', '        // disable initial stage if investor quota of 0.01 eth is reached\n', '        if(address(this).balance >= INVESTOR_QUOTA) {\n', '            initialState = false;\n', '        }\n', '\n', '        // fire event\n', '        emit onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens);\n', '\n', '        return _amountOfTokens;\n', '    }\n', '\n', '    /**\n', '     * Calculate Token price based on an amount of incoming ethereum\n', "     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n", '     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n', '     */\n', '    function ethereumToTokens_(uint256 _ethereum) internal view returns(uint256) {\n', '        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\n', '        uint256 _tokensReceived = \n', '         (\n', '            (\n', '                // underflow attempts BTFO\n', '                SafeMath.sub(\n', '                    (sqrt\n', '                        (\n', '                            (_tokenPriceInitial**2)\n', '                            +\n', '                            (2*(tokenPriceIncremental_ * 1e18)*(_ethereum * 1e18))\n', '                            +\n', '                            (((tokenPriceIncremental_)**2)*(tokenSupply_**2))\n', '                            +\n', '                            (2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\n', '                        )\n', '                    ), _tokenPriceInitial\n', '                )\n', '            )/(tokenPriceIncremental_)\n', '        )-(tokenSupply_);\n', '        return _tokensReceived;\n', '    }\n', '\n', '    /**\n', '     * Calculate token sell value.\n', "     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n", '     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n', '     */\n', '    function tokensToEthereum_(uint256 _tokens) internal view returns(uint256) {\n', '        uint256 tokens_ = (_tokens + 1e18);\n', '        uint256 _tokenSupply = (tokenSupply_ + 1e18);\n', '        uint256 _etherReceived =\n', '        (\n', '            // underflow attempts BTFO\n', '            SafeMath.sub(\n', '                (\n', '                    (\n', '                        (\n', '                            tokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\n', '                        )-tokenPriceIncremental_\n', '                    )*(tokens_ - 1e18)\n', '                ),(tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\n', '            )\n', '        /1e18);\n', '        return _etherReceived;\n', '    }\n', '\n', '    //This is where all your gas goes, sorry\n', '    //Not sorry, you probably only paid 1 gwei\n', '    function sqrt(uint x) internal pure returns (uint y) {\n', '        uint z = (x + 1) / 2;\n', '        y = x;\n', '        while (z < y) {\n', '            y = z;\n', '            z = (x / z + z) / 2;\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (_a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = _a * _b;\n', '        require(c / _a == _b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        require(_b > 0); // Solidity only automatically asserts when dividing by 0\n', '        uint256 c = _a / _b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        require(_b <= _a);\n', '        uint256 c = _a - _b;\n', '        return c;\n', '    }\n', '\n', '    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        uint256 c = _a + _b;\n', '        require(c >= _a);\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}']