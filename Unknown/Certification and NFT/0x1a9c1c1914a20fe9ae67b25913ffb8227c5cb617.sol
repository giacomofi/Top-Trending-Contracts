['pragma solidity ^0.4.8;\n', '\n', 'contract token { function transferFrom(address sender, address receiver, uint amount){  } }\n', '\n', 'contract Crowdsale {\n', '    address public beneficiary;\n', '    address public tokenAdmin;\n', '    uint public fundingGoal; uint public amountRaised; uint public deadline; uint public price;\n', '    token public tokenReward;\n', '    mapping(address => uint256) public balanceOf;\n', '    bool fundingGoalReached = false;\n', '    event GoalReached(address beneficiary, uint amountRaised);\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '    bool public crowdsaleClosed = false;\n', '\n', '    /* data structure to hold information about campaign contributors */\n', '\n', '    /*  at initialization, setup the owner */\n', '    function Crowdsale() {\n', '        beneficiary = 0xDbe120fD820a0A4cc9E715f0cbD47d94f5c23638;\n', '        // Token admin address with total supply. Admin must approve transctions!\n', '        tokenAdmin = 0x934b1498F515E74C6Ec5524A53086e4A02a9F2b8;\n', '        // Finding goal in ether\n', '        fundingGoal = 1 * 1 ether;\n', '        // Length of sale in weeks\n', '        deadline = now + 5 * 1 weeks;\n', '        // Price of 1 token in ethers / decimals\n', '        price = 0.01 / 100 * 1 ether;\n', '        // Token used as reward address\n', '        tokenReward = token(0xb16dab600fc05702132602f4922c0e89e2985b9a);\n', '    }\n', '\n', '    /* The function without name is the default function that is called whenever anyone sends funds to a contract */\n', '    function () payable {\n', '        if (crowdsaleClosed) revert();\n', '        uint amount = msg.value;\n', '        balanceOf[msg.sender] = amount;\n', '        amountRaised += amount;\n', '        tokenReward.transferFrom(tokenAdmin, msg.sender, amount / price);\n', '        FundTransfer(msg.sender, amount, true);\n', '    }\n', '\n', '    modifier afterDeadline() { if (now >= deadline) _; }\n', '\n', '    /* checks if the goal or time limit has been reached and ends the campaign */\n', '    function checkGoalReached() afterDeadline {\n', '        if (amountRaised >= fundingGoal){\n', '            fundingGoalReached = true;\n', '            GoalReached(beneficiary, amountRaised);\n', '        }\n', '        crowdsaleClosed = true;\n', '    }\n', '\n', '    function safeWithdrawal() afterDeadline {\n', '        if (beneficiary == msg.sender) {\n', '            if (beneficiary.send(amountRaised)) {\n', '                FundTransfer(beneficiary, amountRaised, false);\n', '            }\n', '        }\n', '    }\n', '}']
['pragma solidity ^0.4.8;\n', '\n', 'contract token { function transferFrom(address sender, address receiver, uint amount){  } }\n', '\n', 'contract Crowdsale {\n', '    address public beneficiary;\n', '    address public tokenAdmin;\n', '    uint public fundingGoal; uint public amountRaised; uint public deadline; uint public price;\n', '    token public tokenReward;\n', '    mapping(address => uint256) public balanceOf;\n', '    bool fundingGoalReached = false;\n', '    event GoalReached(address beneficiary, uint amountRaised);\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '    bool public crowdsaleClosed = false;\n', '\n', '    /* data structure to hold information about campaign contributors */\n', '\n', '    /*  at initialization, setup the owner */\n', '    function Crowdsale() {\n', '        beneficiary = 0xDbe120fD820a0A4cc9E715f0cbD47d94f5c23638;\n', '        // Token admin address with total supply. Admin must approve transctions!\n', '        tokenAdmin = 0x934b1498F515E74C6Ec5524A53086e4A02a9F2b8;\n', '        // Finding goal in ether\n', '        fundingGoal = 1 * 1 ether;\n', '        // Length of sale in weeks\n', '        deadline = now + 5 * 1 weeks;\n', '        // Price of 1 token in ethers / decimals\n', '        price = 0.01 / 100 * 1 ether;\n', '        // Token used as reward address\n', '        tokenReward = token(0xb16dab600fc05702132602f4922c0e89e2985b9a);\n', '    }\n', '\n', '    /* The function without name is the default function that is called whenever anyone sends funds to a contract */\n', '    function () payable {\n', '        if (crowdsaleClosed) revert();\n', '        uint amount = msg.value;\n', '        balanceOf[msg.sender] = amount;\n', '        amountRaised += amount;\n', '        tokenReward.transferFrom(tokenAdmin, msg.sender, amount / price);\n', '        FundTransfer(msg.sender, amount, true);\n', '    }\n', '\n', '    modifier afterDeadline() { if (now >= deadline) _; }\n', '\n', '    /* checks if the goal or time limit has been reached and ends the campaign */\n', '    function checkGoalReached() afterDeadline {\n', '        if (amountRaised >= fundingGoal){\n', '            fundingGoalReached = true;\n', '            GoalReached(beneficiary, amountRaised);\n', '        }\n', '        crowdsaleClosed = true;\n', '    }\n', '\n', '    function safeWithdrawal() afterDeadline {\n', '        if (beneficiary == msg.sender) {\n', '            if (beneficiary.send(amountRaised)) {\n', '                FundTransfer(beneficiary, amountRaised, false);\n', '            }\n', '        }\n', '    }\n', '}']
