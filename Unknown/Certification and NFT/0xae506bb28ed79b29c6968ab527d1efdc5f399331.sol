['contract WavesPresale {\n', '    address public owner;\n', '    \n', '    struct Sale\n', '    {\n', '        uint amount;\n', '        uint date;\n', '    }\n', '\n', '    mapping (bytes16 => Sale[]) public sales;\n', '    uint32 public numberOfSales;\n', '    uint public totalTokens;\n', '\n', '    function WavesPresale() {\n', '        owner = msg.sender;\n', '        numberOfSales = 0;\n', '    }\n', '\n', '    function changeOwner(address newOwner) {\n', '        if (msg.sender != owner) return;\n', '\n', '        owner = newOwner;\n', '    }\n', '\n', '    function newSale(bytes16 txidHash, uint amount, uint timestamp) {\n', '        if (msg.sender != owner) return;\n', '\n', '        sales[txidHash].push(Sale({\n', '                    amount: amount,\n', '                    date: timestamp\n', '                }));\n', '        numberOfSales += 1;\n', '        totalTokens += amount;\n', '    }\n', '\n', '    function getNumOfSalesWithSameId(bytes16 txidHash) constant returns (uint) {\n', '        return sales[txidHash].length;\n', '    }\n', '\n', '    function getSaleDate(bytes16 txidHash, uint num) constant returns (uint, uint) {\n', '    \treturn (sales[txidHash][num].amount, sales[txidHash][num].date);\n', '    }\n', '\n', '    function () {\n', '        // This function gets executed if a\n', '        // transaction with invalid data is sent to\n', '        // the contract or just ether without data.\n', '        // We revert the send so that no-one\n', '        // accidentally loses money when using the\n', '        // contract.\n', '        throw;\n', '    }\n', '\n', '}']