['pragma solidity ^0.4.10;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        assert(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract ERC20 is Owned {\n', '\n', '    // Get the account balance of another account with address _owner\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '    // Send _value amount of tokens to address _to\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '    // Send _value amount of tokens from address _from to address _to on the condition it is approved by _from\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '    // If this function is called again it overwrites the current allowance with _value.\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '    // Returns the amount which _spender is still allowed to withdraw from _owner\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    // Triggered when tokens are transferred.\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    // Triggered whenever approve(address _spender, uint256 _value) is called.\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract ThankYouToken is ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    // Total amount of token\n', '    uint256 public totalSupply;\n', '\n', '    // Balances for each account\n', '    mapping(address => uint256) balances;\n', '\n', '    // Owner of account approves the transfer of an amount to another account\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    //Fix for the ERC20 short address attack\n', '    modifier onlyPayloadSize(uint256 size) {\n', '        assert(msg.data.length >= size + 4);\n', '        _;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance){\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (balances[_from] >= _value\n', '        && allowed[_from][msg.sender] >= _value //the transfer is approved\n', '        && _value > 0\n', '        && balances[_to] + _value > balances[_to]) {\n', '\n', '            balances[_to]   = balances[_to].add(_value);\n', '            balances[_from] = balances[_from].sub(_value);\n', '            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) onlyPayloadSize(2*32) returns (bool success) {\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) {\n', '            return false;\n', '        }\n', '        allowed[msg.sender][_spender] = _value;\n', '\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    // Transfer the balance _value from owner&#39;s account (msg.sender) to another account (_to)\n', '    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) returns (bool success) {\n', '        if (balances[msg.sender] >= _value && _value > 0 && balances[_to] + _value > balances[_to]) {\n', '\n', '            balances[msg.sender] = balances[msg.sender].sub(_value);\n', '            balances[_to] = balances[_to].add(_value);\n', '            Transfer(msg.sender, _to, _value);\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '\n', '    string public thankYou  = "ThankYou!";\n', '    string public name;\n', '    string public symbol;\n', '    uint256 public decimals = 18;\n', '\n', '    function ThankYouToken(uint256 _initialSupply) {\n', '        name = "ThankYou! Token";\n', '        symbol = "TYT";\n', '        totalSupply = _initialSupply;\n', '        balances[msg.sender] = _initialSupply;\n', '    }\n', '    //---------------------------------------------------------------------------------------------------\n', '\n', '    //Number of purchases per address\n', '    mapping(address => uint256) numPurchasesPerAddress;\n', '\n', '    bool public crowdsaleClosed = true;\n', '    uint256 bonusMultiplier             = 50 * 10**decimals;\n', '    uint256 public bonusTokensIssued    = 0;\n', '    uint256 public freeTokensAvailable  = 10000 * 10**decimals;\n', '    uint256 public freeTokensIssued     = 0;\n', '    uint256 freeTokensPerAddress        = 2 * 10**decimals;\n', '    uint256 public contribution         = 0;\n', '    uint256 public totalTokensIssued    = 0;\n', '    // Accounts that have received the 2 TYT for free\n', '    mapping(address => bool) addressBonusReceived;\n', '\n', '    event BonusTokens(address _from, address _to, uint256 _bonusToken);\n', '    event FreeTokensIssued(address _from, address _to, uint256 _value);\n', '\n', '    function openCrowdsale() onlyOwner {\n', '        crowdsaleClosed = false;\n', '    }\n', '\n', '    function stopCrowdsale() onlyOwner {\n', '        crowdsaleClosed = true;\n', '    }\n', '\n', '\n', '    function() payable {\n', '        if(msg.value == 0){\n', '            assert(!addressBonusReceived[msg.sender]);\n', '            assert(freeTokensAvailable >= freeTokensPerAddress);\n', '            assert(balances[owner] >= freeTokensPerAddress);\n', '\n', '            addressBonusReceived[msg.sender] = true;\n', '\n', '            freeTokensAvailable = freeTokensAvailable.sub(freeTokensPerAddress);\n', '            freeTokensIssued    = freeTokensIssued.add(freeTokensPerAddress);\n', '\n', '            balances[msg.sender] = balances[msg.sender].add(freeTokensPerAddress);\n', '            balances[owner] = balances[owner].sub(freeTokensPerAddress);\n', '\n', '            totalTokensIssued = totalTokensIssued.add(freeTokensPerAddress);\n', '\n', '            Transfer(owner, msg.sender, freeTokensPerAddress);\n', '            FreeTokensIssued(owner, msg.sender, freeTokensPerAddress);\n', '            \n', '        } else {\n', '            assert(!crowdsaleClosed);\n', '\n', '            // 1 ETH = 1000 ThankYou tokens\n', '            uint256 tokensSent = (msg.value * 1000);\n', '            assert(balances[owner] >= tokensSent);\n', '\n', '            if(msg.value >= 50 finney){\n', '                numPurchasesPerAddress[msg.sender] = numPurchasesPerAddress[msg.sender].add(1);\n', '\n', '                uint256 bonusTokens = numPurchasesPerAddress[msg.sender].mul(bonusMultiplier);\n', '                tokensSent = tokensSent.add(bonusTokens);\n', '                bonusTokensIssued = bonusTokensIssued.add(bonusTokens);\n', '\n', '                assert(balances[owner] >= tokensSent);\n', '                BonusTokens(owner, msg.sender, bonusTokens);\n', '            }\n', '\n', '            owner.transfer(msg.value);\n', '            contribution = contribution.add(msg.value);\n', '\n', '            balances[owner] = balances[owner].sub(tokensSent);\n', '            totalTokensIssued = totalTokensIssued.add(tokensSent);\n', '            balances[msg.sender] = balances[msg.sender].add(tokensSent);\n', '            Transfer(owner, msg.sender, tokensSent);\n', '        }\n', '        \n', '\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.10;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        assert(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract ERC20 is Owned {\n', '\n', '    // Get the account balance of another account with address _owner\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '    // Send _value amount of tokens to address _to\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '    // Send _value amount of tokens from address _from to address _to on the condition it is approved by _from\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '    // If this function is called again it overwrites the current allowance with _value.\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '    // Returns the amount which _spender is still allowed to withdraw from _owner\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    // Triggered when tokens are transferred.\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    // Triggered whenever approve(address _spender, uint256 _value) is called.\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract ThankYouToken is ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    // Total amount of token\n', '    uint256 public totalSupply;\n', '\n', '    // Balances for each account\n', '    mapping(address => uint256) balances;\n', '\n', '    // Owner of account approves the transfer of an amount to another account\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    //Fix for the ERC20 short address attack\n', '    modifier onlyPayloadSize(uint256 size) {\n', '        assert(msg.data.length >= size + 4);\n', '        _;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance){\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (balances[_from] >= _value\n', '        && allowed[_from][msg.sender] >= _value //the transfer is approved\n', '        && _value > 0\n', '        && balances[_to] + _value > balances[_to]) {\n', '\n', '            balances[_to]   = balances[_to].add(_value);\n', '            balances[_from] = balances[_from].sub(_value);\n', '            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) onlyPayloadSize(2*32) returns (bool success) {\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) {\n', '            return false;\n', '        }\n', '        allowed[msg.sender][_spender] = _value;\n', '\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', "    // Transfer the balance _value from owner's account (msg.sender) to another account (_to)\n", '    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) returns (bool success) {\n', '        if (balances[msg.sender] >= _value && _value > 0 && balances[_to] + _value > balances[_to]) {\n', '\n', '            balances[msg.sender] = balances[msg.sender].sub(_value);\n', '            balances[_to] = balances[_to].add(_value);\n', '            Transfer(msg.sender, _to, _value);\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '\n', '    string public thankYou  = "ThankYou!";\n', '    string public name;\n', '    string public symbol;\n', '    uint256 public decimals = 18;\n', '\n', '    function ThankYouToken(uint256 _initialSupply) {\n', '        name = "ThankYou! Token";\n', '        symbol = "TYT";\n', '        totalSupply = _initialSupply;\n', '        balances[msg.sender] = _initialSupply;\n', '    }\n', '    //---------------------------------------------------------------------------------------------------\n', '\n', '    //Number of purchases per address\n', '    mapping(address => uint256) numPurchasesPerAddress;\n', '\n', '    bool public crowdsaleClosed = true;\n', '    uint256 bonusMultiplier             = 50 * 10**decimals;\n', '    uint256 public bonusTokensIssued    = 0;\n', '    uint256 public freeTokensAvailable  = 10000 * 10**decimals;\n', '    uint256 public freeTokensIssued     = 0;\n', '    uint256 freeTokensPerAddress        = 2 * 10**decimals;\n', '    uint256 public contribution         = 0;\n', '    uint256 public totalTokensIssued    = 0;\n', '    // Accounts that have received the 2 TYT for free\n', '    mapping(address => bool) addressBonusReceived;\n', '\n', '    event BonusTokens(address _from, address _to, uint256 _bonusToken);\n', '    event FreeTokensIssued(address _from, address _to, uint256 _value);\n', '\n', '    function openCrowdsale() onlyOwner {\n', '        crowdsaleClosed = false;\n', '    }\n', '\n', '    function stopCrowdsale() onlyOwner {\n', '        crowdsaleClosed = true;\n', '    }\n', '\n', '\n', '    function() payable {\n', '        if(msg.value == 0){\n', '            assert(!addressBonusReceived[msg.sender]);\n', '            assert(freeTokensAvailable >= freeTokensPerAddress);\n', '            assert(balances[owner] >= freeTokensPerAddress);\n', '\n', '            addressBonusReceived[msg.sender] = true;\n', '\n', '            freeTokensAvailable = freeTokensAvailable.sub(freeTokensPerAddress);\n', '            freeTokensIssued    = freeTokensIssued.add(freeTokensPerAddress);\n', '\n', '            balances[msg.sender] = balances[msg.sender].add(freeTokensPerAddress);\n', '            balances[owner] = balances[owner].sub(freeTokensPerAddress);\n', '\n', '            totalTokensIssued = totalTokensIssued.add(freeTokensPerAddress);\n', '\n', '            Transfer(owner, msg.sender, freeTokensPerAddress);\n', '            FreeTokensIssued(owner, msg.sender, freeTokensPerAddress);\n', '            \n', '        } else {\n', '            assert(!crowdsaleClosed);\n', '\n', '            // 1 ETH = 1000 ThankYou tokens\n', '            uint256 tokensSent = (msg.value * 1000);\n', '            assert(balances[owner] >= tokensSent);\n', '\n', '            if(msg.value >= 50 finney){\n', '                numPurchasesPerAddress[msg.sender] = numPurchasesPerAddress[msg.sender].add(1);\n', '\n', '                uint256 bonusTokens = numPurchasesPerAddress[msg.sender].mul(bonusMultiplier);\n', '                tokensSent = tokensSent.add(bonusTokens);\n', '                bonusTokensIssued = bonusTokensIssued.add(bonusTokens);\n', '\n', '                assert(balances[owner] >= tokensSent);\n', '                BonusTokens(owner, msg.sender, bonusTokens);\n', '            }\n', '\n', '            owner.transfer(msg.value);\n', '            contribution = contribution.add(msg.value);\n', '\n', '            balances[owner] = balances[owner].sub(tokensSent);\n', '            totalTokensIssued = totalTokensIssued.add(tokensSent);\n', '            balances[msg.sender] = balances[msg.sender].add(tokensSent);\n', '            Transfer(owner, msg.sender, tokensSent);\n', '        }\n', '        \n', '\n', '    }\n', '\n', '}']
