['contract DaoAccount\n', '{\n', '\t/**************************\n', '\t\t\t    Constants\n', '\t***************************/\n', '\n', '\tuint256 constant tokenPrice = 1000000000000000; // 1 finney\n', '\n', '\t/**************************\n', '\t\t\t\t\tEvents\n', '\t***************************/\n', '\n', '\t// No events\n', '\t\n', '\t/**************************\n', '\t     Public variables\n', '\t***************************/\n', '\n', '  uint256 public tokenBalance; // number of tokens in this account\n', '\n', '\t/**************************\n', '\t     Private variables\n', '\t***************************/\n', '\n', '  address owner;        // owner of the otkens\n', '\taddress daoChallenge; // the DaoChallenge this account belongs to\n', '\n', '  // Owner of the challenge with backdoor access.\n', '  // Remove for a real DAO contract:\n', '  address challengeOwner;\n', '\n', '\t/**************************\n', '\t\t\t     Modifiers\n', '\t***************************/\n', '\n', '\tmodifier noEther() {if (msg.value > 0) throw; _}\n', '\n', '\tmodifier onlyOwner() {if (owner != msg.sender) throw; _}\n', '\n', '\tmodifier onlyChallengeOwner() {if (challengeOwner != msg.sender) throw; _}\n', '\n', '\t/**************************\n', '\t Constructor and fallback\n', '\t**************************/\n', '\n', '  function DaoAccount (address _owner, address _challengeOwner) {\n', '    owner = _owner;\n', '    daoChallenge = msg.sender;\n', '\n', '    // Remove for a real DAO contract:\n', '    challengeOwner = _challengeOwner;\n', '\t}\n', '\n', '  // Only owner can fund:\n', '\tfunction () onlyOwner returns (uint256 newBalance){\n', '\t\tuint256 amount = msg.value;\n', '\n', '\t\t// No fractional tokens:\n', '\t\tif (amount % tokenPrice != 0) {\n', '\t\t\tthrow;\n', '\t\t}\n', '\n', '    uint256 tokens = amount / tokenPrice;\n', '\n', '\t\ttokenBalance += tokens;\n', '\n', '    return tokenBalance;\n', '\t}\n', '\n', '\t/**************************\n', '\t     Private functions\n', '\t***************************/\n', '\n', '\t// This uses call.value()() rather than send(), but only sends to msg.sender\n', '  // who is also the owner.\n', '\tfunction withdrawEtherOrThrow(uint256 amount) private {\n', '    if (msg.sender != owner) throw;\n', '\t\tbool result = owner.call.value(amount)();\n', '\t\tif (!result) {\n', '\t\t\tthrow;\n', '\t\t}\n', '\t}\n', '\n', '\t/**************************\n', '\t\t\t Public functions\n', '\t***************************/\n', '\n', '\tfunction refund() noEther onlyOwner {\n', '\t\tif (tokenBalance == 0) throw;\n', '\t\ttokenBalance = 0;\n', '\t\twithdrawEtherOrThrow(tokenBalance * tokenPrice);\n', '\t}\n', '\n', "\t// The owner of the challenge can terminate it. Don't use this in a real DAO.\n", '\tfunction terminate() noEther onlyChallengeOwner {\n', '\t\tsuicide(challengeOwner);\n', '\t}\n', '}\n', 'contract DaoChallenge\n', '{\n', '\t/**************************\n', '\t\t\t\t\tConstants\n', '\t***************************/\n', '\n', '\t// No Constants\n', '\n', '\t/**************************\n', '\t\t\t\t\tEvents\n', '\t***************************/\n', '\n', '\tevent notifyTerminate(uint256 finalBalance);\n', '\n', '\t/**************************\n', '\t     Public variables\n', '\t***************************/\n', '\n', '\t/**************************\n', '\t\t\t Private variables\n', '\t***************************/\n', '\n', "\t// Owner of the challenge; a real DAO doesn't an owner.\n", '\taddress owner;\n', '\n', '\tmapping (address => DaoAccount) private daoAccounts;\n', '\n', '\t/**************************\n', '\t\t\t\t\t Modifiers\n', '\t***************************/\n', '\n', '\tmodifier noEther() {if (msg.value > 0) throw; _}\n', '\n', '\tmodifier onlyOwner() {if (owner != msg.sender) throw; _}\n', '\n', '\t/**************************\n', '\t Constructor and fallback\n', '\t**************************/\n', '\n', '\tfunction DaoChallenge () {\n', "\t\towner = msg.sender; // Owner of the challenge. Don't use this in a real DAO.\n", '\t}\n', '\n', '\tfunction () noEther {\n', '\t}\n', '\n', '\t/**************************\n', '\t     Private functions\n', '\t***************************/\n', '\n', '\t// No private functions\n', '\n', '\t/**************************\n', '\t     Public functions\n', '\t***************************/\n', '\n', '\tfunction createAccount () noEther returns (DaoAccount account) {\n', '\t\taddress accountOwner = msg.sender;\n', "\t\taddress challengeOwner = owner; // Don't use in a real DAO\n", '\n', '\t\t// One account per address:\n', '\t\tif(daoAccounts[accountOwner] != DaoAccount(0x00)) throw;\n', '\n', '\t\tdaoAccounts[accountOwner] = new DaoAccount(accountOwner, challengeOwner);\n', '\t\treturn daoAccounts[accountOwner];\n', '\t}\n', '\n', '\tfunction myAccount () noEther returns (DaoAccount) {\n', '\t\taddress accountOwner = msg.sender;\n', '\t\treturn daoAccounts[accountOwner];\n', '\t}\n', '\n', "\t// The owner of the challenge can terminate it. Don't use this in a real DAO.\n", '\tfunction terminate() noEther onlyOwner {\n', '\t\tnotifyTerminate(this.balance);\n', '\t\tsuicide(owner);\n', '\t}\n', '}']