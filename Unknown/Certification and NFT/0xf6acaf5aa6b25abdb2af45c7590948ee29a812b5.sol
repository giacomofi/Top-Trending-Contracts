['pragma solidity ^0.4.4;\n', '\n', 'contract RaffleStrangeLoop {\n', '    address owner;\n', '    address public winner;\n', '    mapping(uint => address) public tickets;\n', '\n', '    uint public numTickets;\n', '    uint public ethereumFoundationTickets;\n', '\n', '    uint public chooseWinnerDeadline;\n', '\n', '    uint public lastBlock;\n', '    bytes32 public serverSeedHash;\n', '    bytes32 public clientSeed;\n', '\n', '    event Winner(address value);\n', '\n', '    modifier isOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier notFinished() {\n', '        require(winner == 0x0);\n', '        _;\n', '    }\n', '\n', '    function RaffleStrangeLoop(bytes32 secretHash) {\n', '        owner = msg.sender;\n', '        serverSeedHash = secretHash;\n', '        chooseWinnerDeadline = block.timestamp + 15 days;\n', '    }\n', '\n', '    function getRaffleTimeLeft() constant returns (uint) {\n', '        int timeLeft = int(chooseWinnerDeadline) - int(block.timestamp);\n', '        if (timeLeft > 0) {\n', '            return uint(timeLeft);\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '\n', '    function chooseWinner(bytes32 seed) isOwner notFinished {\n', '        // make sure the provided seed matches the initial server seed hash\n', '        require(sha3(seed) == serverSeedHash);\n', '\n', '        // Allow a period of 24 hours to choose a winner\n', '        int timeLeft = int(chooseWinnerDeadline) - int(block.timestamp);\n', '        require(timeLeft < 0 && timeLeft > -86400);\n', '\n', '        // Require that at least one person bought the ticket\n', '        require(numTickets > 0);\n', '\n', '        // Choose winner\n', '        bytes32 serverClientHash = sha3(seed, clientSeed);\n', '\n', '        uint winnerIdx = (uint(serverClientHash) ^ lastBlock) % numTickets;\n', '        winner = tickets[winnerIdx];\n', '        Winner(winner);\n', '\n', '        // Send donation to ethereum foundation\n', '        uint donation = ethereumFoundationTickets * 10000000000000000;\n', '        if (donation > 0) {\n', '            // See https://www.ethereum.org/donate\n', '            address ethereumTipJar = 0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359;\n', '            ethereumTipJar.transfer(donation);\n', '        }\n', '\n', '        // Send remaining balance to owner\n', '        owner.transfer(this.balance);\n', '    }\n', '\n', '    function buyTickets(bytes32 beneficiary) payable notFinished {\n', '        // only allow if there is time left\n', '        require(getRaffleTimeLeft() > 0);\n', '\n', '        // ticket value = 0.01 ETH\n', '        uint ticketsBought = msg.value / 10000000000000000;\n', '\n', '        // Refund the difference\n', '        msg.sender.transfer(msg.value % 10000000000000000);\n', '\n', '        //Update client seed\n', '        clientSeed = sha3(clientSeed, msg.sender, msg.value);\n', '\n', '        // Save last block and its hash\n', '        lastBlock = block.number;\n', '\n', '        // Buy tickets\n', '        for (uint i = 0; i < ticketsBought; i++) {\n', '            tickets[numTickets++] = msg.sender;\n', '        }\n', '\n', '        if (beneficiary == "ethereum-foundation") {\n', '            ethereumFoundationTickets += ticketsBought;\n', '        }\n', '    }\n', '\n', '    function getRefund() notFinished {\n', '        // Can only refund when it&#39;s been 24 hours after the deadline\n', '        int timeLeft = int(chooseWinnerDeadline) - int(block.timestamp);\n', '        require(timeLeft < -86400);\n', '\n', '        uint amountToRefund = 0;\n', '        for (uint i = 0; i < numTickets; i++) {\n', '            if(tickets[i] == msg.sender) {\n', '                amountToRefund += 10000000000000000;\n', '                tickets[i] = 0x0;\n', '            }\n', '        }\n', '\n', '        msg.sender.transfer(amountToRefund);\n', '    }\n', '\n', '    function () payable notFinished {\n', '        buyTickets("owner");\n', '    }\n', '}']