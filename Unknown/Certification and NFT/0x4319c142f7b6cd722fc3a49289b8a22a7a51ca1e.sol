['pragma solidity ^0.4.4;\n', '\n', '/// @title Migration Agent interface\n', 'contract MigrationAgent {\n', '    function migrateFrom(address _from, uint256 _value);\n', '}\n', '\n', '/// @title Golem Network Token (GNT) - crowdfunding code for Golem Project\n', 'contract GolemNetworkToken {\n', '    string public constant name = "Golem Network Token";\n', '    string public constant symbol = "GNT";\n', '    uint8 public constant decimals = 18;  // 18 decimal places, the same as ETH.\n', '\n', '    uint256 public constant tokenCreationRate = 1000;\n', '\n', '    // The funding cap in weis.\n', '    uint256 public constant tokenCreationCap = 820000 ether * tokenCreationRate;\n', '    uint256 public constant tokenCreationMin = 150000 ether * tokenCreationRate;\n', '\n', '    uint256 public fundingStartBlock;\n', '    uint256 public fundingEndBlock;\n', '\n', '    // The flag indicates if the GNT contract is in Funding state.\n', '    bool public funding = true;\n', '\n', '    // Receives ETH and its own GNT endowment.\n', '    address public golemFactory;\n', '\n', '    // Has control over token migration to next version of token.\n', '    address public migrationMaster;\n', '\n', '    GNTAllocation lockedAllocation;\n', '\n', '    // The current total token supply.\n', '    uint256 totalTokens;\n', '\n', '    mapping (address => uint256) balances;\n', '\n', '    address public migrationAgent;\n', '    uint256 public totalMigrated;\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Migrate(address indexed _from, address indexed _to, uint256 _value);\n', '    event Refund(address indexed _from, uint256 _value);\n', '\n', '    function GolemNetworkToken(address _golemFactory,\n', '                               address _migrationMaster,\n', '                               uint256 _fundingStartBlock,\n', '                               uint256 _fundingEndBlock) {\n', '\n', '        if (_golemFactory == 0) throw;\n', '        if (_migrationMaster == 0) throw;\n', '        if (_fundingStartBlock <= block.number) throw;\n', '        if (_fundingEndBlock   <= _fundingStartBlock) throw;\n', '\n', '        lockedAllocation = new GNTAllocation(_golemFactory);\n', '        migrationMaster = _migrationMaster;\n', '        golemFactory = _golemFactory;\n', '        fundingStartBlock = _fundingStartBlock;\n', '        fundingEndBlock = _fundingEndBlock;\n', '    }\n', '\n', "    /// @notice Transfer `_value` GNT tokens from sender's account\n", '    /// `msg.sender` to provided account address `_to`.\n', '    /// @notice This function is disabled during the funding.\n', '    /// @dev Required state: Operational\n', '    /// @param _to The address of the tokens recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool) {\n', '        // Abort if not in Operational state.\n', '        if (funding) throw;\n', '\n', '        var senderBalance = balances[msg.sender];\n', '        if (senderBalance >= _value && _value > 0) {\n', '            senderBalance -= _value;\n', '            balances[msg.sender] = senderBalance;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function totalSupply() external constant returns (uint256) {\n', '        return totalTokens;\n', '    }\n', '\n', '    function balanceOf(address _owner) external constant returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    // Token migration support:\n', '\n', '    /// @notice Migrate tokens to the new token contract.\n', '    /// @dev Required state: Operational Migration\n', '    /// @param _value The amount of token to be migrated\n', '    function migrate(uint256 _value) external {\n', '        // Abort if not in Operational Migration state.\n', '        if (funding) throw;\n', '        if (migrationAgent == 0) throw;\n', '\n', '        // Validate input value.\n', '        if (_value == 0) throw;\n', '        if (_value > balances[msg.sender]) throw;\n', '\n', '        balances[msg.sender] -= _value;\n', '        totalTokens -= _value;\n', '        totalMigrated += _value;\n', '        MigrationAgent(migrationAgent).migrateFrom(msg.sender, _value);\n', '        Migrate(msg.sender, migrationAgent, _value);\n', '    }\n', '\n', '    /// @notice Set address of migration target contract and enable migration\n', '\t/// process.\n', '    /// @dev Required state: Operational Normal\n', '    /// @dev State transition: -> Operational Migration\n', '    /// @param _agent The address of the MigrationAgent contract\n', '    function setMigrationAgent(address _agent) external {\n', '        // Abort if not in Operational Normal state.\n', '        if (funding) throw;\n', '        if (migrationAgent != 0) throw;\n', '        if (msg.sender != migrationMaster) throw;\n', '        migrationAgent = _agent;\n', '    }\n', '\n', '    function setMigrationMaster(address _master) external {\n', '        if (msg.sender != migrationMaster) throw;\n', '        if (_master == 0) throw;\n', '        migrationMaster = _master;\n', '    }\n', '\n', '    // Crowdfunding:\n', '\n', '    /// @notice Create tokens when funding is active.\n', '    /// @dev Required state: Funding Active\n', '    /// @dev State transition: -> Funding Success (only if cap reached)\n', '    function create() payable external {\n', '        // Abort if not in Funding Active state.\n', '        // The checks are split (instead of using or operator) because it is\n', '        // cheaper this way.\n', '        if (!funding) throw;\n', '        if (block.number < fundingStartBlock) throw;\n', '        if (block.number > fundingEndBlock) throw;\n', '\n', '        // Do not allow creating 0 or more than the cap tokens.\n', '        if (msg.value == 0) throw;\n', '        if (msg.value > (tokenCreationCap - totalTokens) / tokenCreationRate)\n', '            throw;\n', '\n', '        var numTokens = msg.value * tokenCreationRate;\n', '        totalTokens += numTokens;\n', '\n', '        // Assign new tokens to the sender\n', '        balances[msg.sender] += numTokens;\n', '\n', '        // Log token creation event\n', '        Transfer(0, msg.sender, numTokens);\n', '    }\n', '\n', '    /// @notice Finalize crowdfunding\n', '    /// @dev If cap was reached or crowdfunding has ended then:\n', '    /// create GNT for the Golem Factory and developer,\n', '    /// transfer ETH to the Golem Factory address.\n', '    /// @dev Required state: Funding Success\n', '    /// @dev State transition: -> Operational Normal\n', '    function finalize() external {\n', '        // Abort if not in Funding Success state.\n', '        if (!funding) throw;\n', '        if ((block.number <= fundingEndBlock ||\n', '             totalTokens < tokenCreationMin) &&\n', '            totalTokens < tokenCreationCap) throw;\n', '\n', '        // Switch to Operational state. This is the only place this can happen.\n', '        funding = false;\n', '\n', '        // Create additional GNT for the Golem Factory and developers as\n', '        // the 18% of total number of tokens.\n', '        // All additional tokens are transfered to the account controller by\n', '        // GNTAllocation contract which will not allow using them for 6 months.\n', '        uint256 percentOfTotal = 18;\n', '        uint256 additionalTokens =\n', '            totalTokens * percentOfTotal / (100 - percentOfTotal);\n', '        totalTokens += additionalTokens;\n', '        balances[lockedAllocation] += additionalTokens;\n', '        Transfer(0, lockedAllocation, additionalTokens);\n', '\n', '        // Transfer ETH to the Golem Factory address.\n', '        if (!golemFactory.send(this.balance)) throw;\n', '    }\n', '\n', '    /// @notice Get back the ether sent during the funding in case the funding\n', '    /// has not reached the minimum level.\n', '    /// @dev Required state: Funding Failure\n', '    function refund() external {\n', '        // Abort if not in Funding Failure state.\n', '        if (!funding) throw;\n', '        if (block.number <= fundingEndBlock) throw;\n', '        if (totalTokens >= tokenCreationMin) throw;\n', '\n', '        var gntValue = balances[msg.sender];\n', '        if (gntValue == 0) throw;\n', '        balances[msg.sender] = 0;\n', '        totalTokens -= gntValue;\n', '\n', '        var ethValue = gntValue / tokenCreationRate;\n', '        Refund(msg.sender, ethValue);\n', '        if (!msg.sender.send(ethValue)) throw;\n', '    }\n', '}\n', '\n', '/// @title GNT Allocation - Time-locked vault of tokens allocated\n', '/// to developers and Golem Factory\n', 'contract GNTAllocation {\n', '    // Total number of allocations to distribute additional tokens among\n', '    // developers and the Golem Factory. The Golem Factory has right to 20000\n', '    // allocations, developers to 10000 allocations, divides among individual\n', '    // developers by numbers specified in  `allocations` table.\n', '    uint256 constant totalAllocations = 30000;\n', '\n', '    // Addresses of developer and the Golem Factory to allocations mapping.\n', '    mapping (address => uint256) allocations;\n', '\n', '    GolemNetworkToken gnt;\n', '    uint256 unlockedAt;\n', '\n', '    uint256 tokensCreated = 0;\n', '\n', '    function GNTAllocation(address _golemFactory) internal {\n', '        gnt = GolemNetworkToken(msg.sender);\n', '        unlockedAt = now + 6 * 30 days;\n', '\n', '        // For the Golem Factory:\n', '        allocations[_golemFactory] = 20000; // 12/18 pp of 30000 allocations.\n', '\n', '        // For developers:\n', "        allocations[0x9d3F257827B17161a098d380822fa2614FF540c8] = 2500; // 25.0% of developers' allocations (10000).\n", "        allocations[0xd7406E50b73972Fa4aa533a881af68B623Ba3F66] =  730; //  7.3% of developers' allocations.\n", '        allocations[0xd15356D05A7990dE7eC94304B0fD538e550c09C0] =  730;\n', '        allocations[0x3971D17B62b825b151760E2451F818BfB64489A7] =  730;\n', '        allocations[0x95e337d09f1bc67681b1cab7ed1125ea2bae5ca8] =  730;\n', '        allocations[0x0025C58dB686b8CEce05CB8c50C1858b63Aa396E] =  730;\n', "        allocations[0xB127FC62dE6ca30aAc9D551591daEDdeBB2eFD7A] =  630; //  6.3% of developers' allocations.\n", '        allocations[0x21AF2E2c240a71E9fB84e90d71c2B2AddE0D0e81] =  630;\n', '        allocations[0x682AA1C3b3E102ACB9c97B861d595F9fbfF0f1B8] =  630;\n', '        allocations[0x6edd429c77803606cBd6Bb501CC701a6CAD6be01] =  630;\n', "        allocations[0x5E455624372FE11b39464e93d41D1F6578c3D9f6] =  310; //  3.1% of developers' allocations.\n", "        allocations[0xB7c7EaD515Ca275d53e30B39D8EBEdb3F19dA244] =  138; //  1.38% of developers' allocations.\n", "        allocations[0xD513b1c3fe31F3Fe0b1E42aa8F55e903F19f1730] =  135; //  1.35% of developers' allocations.\n", "        allocations[0x70cac7f8E404EEFce6526823452e428b5Ab09b00] =  100; //  1.0% of developers' allocations.\n", '        allocations[0xe0d5861e7be0fac6c85ecde6e8bf76b046a96149] =  100;\n', '        allocations[0x17488694D2feE4377Ec718836bb9d4910E81D9Cf] =  100;\n', '        allocations[0xb481372086dEc3ca2FCCD3EB2f462c9C893Ef3C5] =  100;\n', "        allocations[0xFB6D91E69CD7990651f26a3aa9f8d5a89159fC92] =   70; //  0.7% of developers' allocations.\n", '        allocations[0xE2ABdAe2980a1447F445cb962f9c0bef1B63EE13] =   70;\n', '        allocations[0x729A5c0232712caAf365fDd03c39cb361Bd41b1C] =   70;\n', '        allocations[0x12FBD8fef4903f62e30dD79AC7F439F573E02697] =   70;\n', "        allocations[0x657013005e5cFAF76f75d03b465cE085d402469A] =   42; //  0.42% of developers' allocations.\n", "        allocations[0xD0AF9f75EA618163944585bF56aCA98204d0AB66] =   25; //  0.25% of developers' allocations.\n", '    }\n', '\n', '    /// @notice Allow developer to unlock allocated tokens by transferring them\n', "    /// from GNTAllocation to developer's address.\n", '    function unlock() external {\n', '        if (now < unlockedAt) throw;\n', '\n', '        // During first unlock attempt fetch total number of locked tokens.\n', '        if (tokensCreated == 0)\n', '            tokensCreated = gnt.balanceOf(this);\n', '\n', '        var allocation = allocations[msg.sender];\n', '        allocations[msg.sender] = 0;\n', '        var toTransfer = tokensCreated * allocation / totalAllocations;\n', '\n', '        // Will fail if allocation (and therefore toTransfer) is 0.\n', '        if (!gnt.transfer(msg.sender, toTransfer)) throw;\n', '    }\n', '}']