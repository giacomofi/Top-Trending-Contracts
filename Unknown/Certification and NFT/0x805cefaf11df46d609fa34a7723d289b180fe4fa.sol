['/**\n', ' *  NTRY Cointract contract, ERC20 compliant (see https://github.com/ethereum/EIPs/issues/20)\n', ' *\n', ' *  Code is based on multiple sources:\n', ' *  https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts\n', ' *  https://github.com/TokenMarketNet/ico/blob/master/contracts\n', ' *  https://github.com/ConsenSys/Tokens/blob/master/Token_Contracts/contracts\n', ' */\n', 'pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * Centrally issued Ethereum token.\n', ' *\n', ' * We mix in burnable and upgradeable traits.\n', ' *\n', ' * Token supply is created in the token contract creation and allocated to owner.\n', ' * The owner can then transfer from its supply to crowdsale participants.\n', ' * The owner, or anybody, can burn any excessive tokens they are holding.\n', ' *\n', ' */\n', '\n', '/**\n', ' *  NTRY Cointract contract, ERC20 compliant (see https://github.com/ethereum/EIPs/issues/20)\n', ' *\n', ' *  Code is based on multiple sources:\n', ' *  https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts\n', ' *  https://github.com/TokenMarketNet/ico/blob/master/contracts\n', ' *  https://github.com/ConsenSys/Tokens/blob/master/Token_Contracts/contracts\n', ' */\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool success);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' *  NTRY Cointract contract, ERC20 compliant (see https://github.com/ethereum/EIPs/issues/20)\n', ' *\n', ' *  Code is based on multiple sources:\n', ' *  https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts\n', ' *  https://github.com/TokenMarketNet/ico/blob/master/contracts\n', ' *  https://github.com/ConsenSys/Tokens/blob/master/Token_Contracts/contracts\n', ' */\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool success);\n', '  function approve(address spender, uint256 value) returns (bool success);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' *  NTRY Cointract contract, ERC20 compliant (see https://github.com/ethereum/EIPs/issues/20)\n', ' *\n', ' *  Code is based on multiple sources:\n', ' *  https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts\n', ' *  https://github.com/TokenMarketNet/ico/blob/master/contracts\n', ' *  https://github.com/ConsenSys/Tokens/blob/master/Token_Contracts/contracts\n', ' */\n', '\n', 'contract ErrorHandler {\n', '    bool public isInTestMode = false;\n', '    event evRecord(address msg_sender, uint msg_value, string message);\n', '\n', '    function doThrow(string message) internal {\n', '        evRecord(msg.sender, msg.value, message);\n', '        if (!isInTestMode) {\n', '        \tthrow;\n', '\t\t}\n', '    }\n', '}\n', '\n', '/**\n', ' *  NTRY Cointract contract, ERC20 compliant (see https://github.com/ethereum/EIPs/issues/20)\n', ' *\n', ' *  Code is based on multiple sources:\n', ' *  https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts\n', ' *  https://github.com/TokenMarketNet/ico/blob/master/contracts\n', ' *  https://github.com/ConsenSys/Tokens/blob/master/Token_Contracts/contracts\n', ' */\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' *  NTRY Cointract contract, ERC20 compliant (see https://github.com/ethereum/EIPs/issues/20)\n', ' *\n', ' *  Code is based on multiple sources:\n', ' *  https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts\n', ' *  https://github.com/TokenMarketNet/ico/blob/master/contracts\n', ' *  https://github.com/ConsenSys/Tokens/blob/master/Token_Contracts/contracts\n', ' */\n', '\n', '\n', '/**\n', ' * Standard ERC20 token with Short Hand Attack and approve() race condition mitigation.\n', ' *\n', ' * Based on code by FirstBlood:\n', ' * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract NTRYStandardToken is ERC20, ErrorHandler {\n', '  address public owner;\n', '\n', '  /* NTRY functional is paused if there is any emergency */\n', '  bool public emergency = false;\n', '\n', '  using SafeMath for uint;\n', '\n', '  /* Actual balances of token holders */\n', '  mapping(address => uint) balances;\n', '\n', '  /* approve() allowances */\n', '  mapping (address => mapping (address => uint)) allowed;\n', '  \n', '  /* freezeAccount() frozen() */\n', '  mapping (address => bool) frozenAccount;\n', '\n', '  /* Notify account frozen activity */\n', '  event FrozenFunds(address target, bool frozen);\n', '\n', '  /* Interface declaration */\n', '  function isToken() public constant returns (bool weAre) {\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner. \n', '   */\n', '  modifier onlyOwner() {\n', '    if (msg.sender != owner) {\n', '      doThrow("Only Owner!");\n', '    }\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * Fix for the ERC20 short address attack\n', '   *\n', '   * http://vessenes.com/the-erc20-short-address-attack-explained/\n', '   */\n', '  modifier onlyPayloadSize(uint size) {\n', '     if(msg.data.length < size + 4) {\n', '       doThrow("Short address attack!");\n', '     }\n', '     _;\n', '  }\n', '\n', '  modifier stopInEmergency {\n', '    if (emergency){\n', '        doThrow("Emergency state!");\n', '    }\n', '    _;\n', '  }\n', '  \n', '  function transfer(address _to, uint _value) stopInEmergency onlyPayloadSize(2 * 32) returns (bool success) {\n', '    // Check if frozen //\n', '    if (frozenAccount[msg.sender]) doThrow("Account freezed!");  \n', '                  \n', '    balances[msg.sender] = balances[msg.sender].sub( _value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _value) stopInEmergency returns (bool success) {\n', '    // Check if frozen //\n', '    if (frozenAccount[_from]) doThrow("Account freezed!");\n', '\n', '    uint _allowance = allowed[_from][msg.sender];\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function approve(address _spender, uint _value) stopInEmergency returns (bool success) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) doThrow("Allowance race condition!");\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '\n', '  /**\n', '  * It is called Circuit Breakers (Pause contract functionality), it stop execution if certain conditions are met, \n', '  * and can be useful when new errors are discovered. For example, most actions may be suspended in a contract if a \n', '  * bug is discovered, so the most feasible option to stop and updated migration message about launching an updated version of contract. \n', '  * @param _stop Switch the circuite breaker on or off\n', '  */\n', '  function emergencyStop(bool _stop) onlyOwner {\n', '      emergency = _stop;\n', '  }\n', '\n', '  /**\n', '  * Owner can set any account into freeze state. It is helpful in case if account holder has \n', '  * lost his key and he want administrator to freeze account until account key is recovered\n', '  * @param target The account address\n', '  * @param freeze The state of account\n', '  */\n', '  function freezeAccount(address target, bool freeze) onlyOwner {\n', '      frozenAccount[target] = freeze;\n', '      FrozenFunds(target, freeze);\n', '  }\n', '\n', '  function frozen(address _target) constant returns (bool frozen) {\n', '    return frozenAccount[_target];\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to. \n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      balances[newOwner] = balances[owner];\n', '      balances[owner] = 0;\n', '      owner = newOwner;\n', '      Transfer(owner, newOwner,balances[newOwner]);\n', '    }\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' *  NTRY Cointract contract, ERC20 compliant (see https://github.com/ethereum/EIPs/issues/20)\n', ' *\n', ' *  Code is based on multiple sources:\n', ' *  https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts\n', ' *  https://github.com/TokenMarketNet/ico/blob/master/contracts\n', ' *  https://github.com/ConsenSys/Tokens/blob/master/Token_Contracts/contracts\n', ' */\n', '\n', '/**\n', ' * Upgrade agent interface inspired by Lunyr.\n', ' *\n', ' * Upgrade agent transfers tokens to a new contract.\n', ' * Upgrade agent itself can be the token contract, or just a middle man contract doing the heavy lifting.\n', ' */\n', 'contract UpgradeAgent {\n', '\n', '  uint public originalSupply;\n', '\n', '  /** Interface marker */\n', '  function isUpgradeAgent() public constant returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  function upgradeFrom(address _from, uint256 _value) public;\n', '\n', '}\n', '\n', '\n', '/**\n', ' *  NTRY Cointract contract, ERC20 compliant (see https://github.com/ethereum/EIPs/issues/20)\n', ' *\n', ' *  Code is based on multiple sources:\n', ' *  https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts\n', ' *  https://github.com/TokenMarketNet/ico/blob/master/contracts\n', ' *  https://github.com/ConsenSys/Tokens/blob/master/Token_Contracts/contracts\n', ' */\n', '\n', '\n', '/**\n', ' * A token upgrade mechanism where users can opt-in amount of tokens to the next smart contract revision.\n', ' *\n', ' * First envisioned by Golem and Lunyr projects.\n', ' */\n', 'contract UpgradeableToken is NTRYStandardToken {\n', '\n', '  /** Contract / person who can set the upgrade path. This can be the same as team multisig wallet, as what it is with its default value. */\n', '  address public upgradeMaster;\n', '\n', '  /** The next contract where the tokens will be migrated. */\n', '  UpgradeAgent public upgradeAgent;\n', '\n', '  /** How many tokens we have upgraded by now. */\n', '  uint256 public totalUpgraded;\n', '\n', '  /**\n', '   * Upgrade states.\n', '   *\n', '   * - NotAllowed: The child contract has not reached a condition where the upgrade can bgun\n', '   * - WaitingForAgent: Token allows upgrade, but we don&#39;t have a new agent yet\n', '   * - ReadyToUpgrade: The agent is set, but not a single token has been upgraded yet\n', '   * - Upgrading: Upgrade agent is set and the balance holders can upgrade their tokens\n', '   *\n', '   */\n', '  enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\n', '\n', '  /**\n', '   * Somebody has upgraded some of his tokens.\n', '   */\n', '  event Upgrade(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '  /**\n', '   * New upgrade agent available.\n', '   */\n', '  event UpgradeAgentSet(address agent);\n', '\n', '  /**\n', '   * Do not allow construction without upgrade master set.\n', '   */\n', '  function UpgradeableToken(address _upgradeMaster) {\n', '    upgradeMaster = _upgradeMaster;\n', '  }\n', '\n', '  /**\n', '   * Allow the token holder to upgrade some of their tokens to a new contract.\n', '   */\n', '  function upgrade(uint256 value) public {\n', '\n', '      UpgradeState state = getUpgradeState();\n', '      if(!(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading)) {\n', '        doThrow("Called in a bad state!");\n', '      }\n', '\n', '      // Validate input value.\n', '      if (value == 0) doThrow("Value to upgrade is zero!");\n', '\n', '      balances[msg.sender] = balances[msg.sender].sub(value);\n', '\n', '      // Take tokens out from circulation\n', '      totalSupply = totalSupply.sub(value);\n', '      totalUpgraded = totalUpgraded.add(value);\n', '\n', '      // Upgrade agent reissues the tokens\n', '      upgradeAgent.upgradeFrom(msg.sender, value);\n', '      Upgrade(msg.sender, upgradeAgent, value);\n', '  }\n', '\n', '  /**\n', '   * Set an upgrade agent that handles\n', '   */\n', '  function setUpgradeAgent(address agent) external {\n', '\n', '      if(!canUpgrade()) {\n', '        // The token is not yet in a state that we could think upgrading\n', '        doThrow("Token state is not feasible for upgrading yet!");\n', '      }\n', '\n', '      if (agent == 0x0) doThrow("Invalid address!");\n', '      // Only a master can designate the next agent\n', '      if (msg.sender != upgradeMaster) doThrow("Only upgrade master!");\n', '      // Upgrade has already begun for an agent\n', '      if (getUpgradeState() == UpgradeState.Upgrading) doThrow("Upgrade started already!");\n', '\n', '      upgradeAgent = UpgradeAgent(agent);\n', '\n', '      // Bad interface\n', '      if(!upgradeAgent.isUpgradeAgent()) doThrow("Bad interface!");\n', '      // Make sure that token supplies match in source and target\n', '      if (upgradeAgent.originalSupply() != totalSupply) doThrow("Total supply source is not equall to target!");\n', '\n', '      UpgradeAgentSet(upgradeAgent);\n', '  }\n', '\n', '  /**\n', '   * Get the state of the token upgrade.\n', '   */\n', '  function getUpgradeState() public constant returns(UpgradeState) {\n', '    if(!canUpgrade()) return UpgradeState.NotAllowed;\n', '    else if(address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\n', '    else if(totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\n', '    else return UpgradeState.Upgrading;\n', '  }\n', '\n', '  /**\n', '   * Change the upgrade master.\n', '   *\n', '   * This allows us to set a new owner for the upgrade mechanism.\n', '   */\n', '  function setUpgradeMaster(address master) public {\n', '      if (master == 0x0) doThrow("Invalid address of upgrade master!");\n', '      if (msg.sender != upgradeMaster) doThrow("Only upgrade master!");\n', '      upgradeMaster = master;\n', '  }\n', '\n', '  /**\n', '   * Child contract can enable to provide the condition when the upgrade can begun.\n', '   */\n', '  function canUpgrade() public constant returns(bool) {\n', '     return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' *  NTRY Cointract contract, ERC20 compliant (see https://github.com/ethereum/EIPs/issues/20)\n', ' *\n', ' *  Code is based on multiple sources:\n', ' *  https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts\n', ' *  https://github.com/TokenMarketNet/ico/blob/master/contracts\n', ' *  https://github.com/ConsenSys/Tokens/blob/master/Token_Contracts/contracts\n', ' */\n', '\n', '\n', 'contract BurnableToken is NTRYStandardToken {\n', '\n', '  address public constant BURN_ADDRESS = 0;\n', '\n', '  /** How many tokens we burned */\n', '  event Burned(address burner, uint burnedAmount);\n', '\n', '  /**\n', '   * Burn extra tokens from a balance.\n', '   *\n', '   */\n', '  function burn(uint burnAmount) {\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(burnAmount);\n', '    totalSupply = totalSupply.sub(burnAmount);\n', '    Burned(burner, burnAmount);\n', '  }\n', '}\n', '\n', '\n', 'contract CentrallyIssuedToken is BurnableToken, UpgradeableToken {\n', '\n', '  string public name;\n', '  string public symbol;\n', '  uint public decimals;\n', '\n', '  function CentrallyIssuedToken() UpgradeableToken(owner) {\n', '    name = "Notary Platform Token";\n', '    symbol = "NTRY";\n', '    decimals = 18;\n', '    owner = 0x1538EF80213cde339A333Ee420a85c21905b1b2D;\n', '\n', '    totalSupply = 150000000 * 1 ether;\n', '    \n', '    // Allocate initial balance to the owner //\n', '    balances[owner] = 150000000 * 1 ether;\n', '\n', '    // Freeze notary team funds for one year (One month with pre ico already passed)//\n', '    unlockedAt =  now + 330 * 1 days;\n', '  }\n', '\n', '  uint256 public constant teamAllocations = 15000000 * 1 ether;\n', '  uint256 public unlockedAt;\n', '  mapping (address => uint256) allocations;\n', '  function allocate() public {\n', '      allocations[0xab1cb1740344A9280dC502F3B8545248Dc3045eA] = 2500000 * 1 ether;\n', '      allocations[0x330709A59Ab2D1E1105683F92c1EE8143955a357] = 2500000 * 1 ether;\n', '      allocations[0xAa0887fc6e8896C4A80Ca3368CFd56D203dB39db] = 2500000 * 1 ether;\n', '      allocations[0x1fbA1d22435DD3E7Fa5ba4b449CC550a933E72b3] = 2500000 * 1 ether;\n', '      allocations[0xC9d5E2c7e40373ae576a38cD7e62E223C95aBFD4] = 500000 * 1 ether;\n', '      allocations[0xabc0B64a38DE4b767313268F0db54F4cf8816D9C] = 500000 * 1 ether;\n', '      allocations[0x5d85bCDe5060C5Bd00DBeDF5E07F43CE3Ccade6f] = 250000 * 1 ether;\n', '      allocations[0xecb1b0231CBC0B04015F9e5132C62465C128B578] = 250000 * 1 ether;\n', '      allocations[0xF9b1Cfc7fe3B63bEDc594AD20132CB06c18FD5F2] = 250000 * 1 ether;\n', '      allocations[0xDbb89a87d9f91EA3f0Ab035a67E3A951A05d0130] = 250000 * 1 ether;\n', '      allocations[0xC1530645E21D27AB4b567Bac348721eE3E244Cbd] = 200000 * 1 ether;\n', '      allocations[0xcfb44162030e6CBca88e65DffA21911e97ce8533] = 200000 * 1 ether;\n', '      allocations[0x64f748a5C5e504DbDf61d49282d6202Bc1311c3E] = 200000 * 1 ether;\n', '      allocations[0xFF22FA2B3e5E21817b02a45Ba693B7aC01485a9C] = 200000 * 1 ether;\n', '      allocations[0xC9856112DCb8eE449B83604438611EdCf61408AF] = 200000 * 1 ether;\n', '      allocations[0x689CCfEABD99081D061aE070b1DA5E1f6e4B9fB2] = 2000000 * 1 ether;\n', '  }\n', '\n', '  function withDraw() public {\n', '      if(now < unlockedAt){ \n', '          doThrow("Allocations are freezed!");\n', '      }\n', '      if (allocations[msg.sender] == 0){\n', '          doThrow("No allocation found!");\n', '      }\n', '      balances[owner] -= allocations[msg.sender];\n', '      balances[msg.sender] += allocations[msg.sender];\n', '      Transfer(owner, msg.sender, allocations[msg.sender]);\n', '      allocations[msg.sender] = 0;\n', '      \n', '  }\n', '  \n', '   function () {\n', '        //if ether is sent to this address, send it back.\n', '        throw;\n', '    }\n', '  \n', '}']
['/**\n', ' *  NTRY Cointract contract, ERC20 compliant (see https://github.com/ethereum/EIPs/issues/20)\n', ' *\n', ' *  Code is based on multiple sources:\n', ' *  https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts\n', ' *  https://github.com/TokenMarketNet/ico/blob/master/contracts\n', ' *  https://github.com/ConsenSys/Tokens/blob/master/Token_Contracts/contracts\n', ' */\n', 'pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * Centrally issued Ethereum token.\n', ' *\n', ' * We mix in burnable and upgradeable traits.\n', ' *\n', ' * Token supply is created in the token contract creation and allocated to owner.\n', ' * The owner can then transfer from its supply to crowdsale participants.\n', ' * The owner, or anybody, can burn any excessive tokens they are holding.\n', ' *\n', ' */\n', '\n', '/**\n', ' *  NTRY Cointract contract, ERC20 compliant (see https://github.com/ethereum/EIPs/issues/20)\n', ' *\n', ' *  Code is based on multiple sources:\n', ' *  https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts\n', ' *  https://github.com/TokenMarketNet/ico/blob/master/contracts\n', ' *  https://github.com/ConsenSys/Tokens/blob/master/Token_Contracts/contracts\n', ' */\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool success);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' *  NTRY Cointract contract, ERC20 compliant (see https://github.com/ethereum/EIPs/issues/20)\n', ' *\n', ' *  Code is based on multiple sources:\n', ' *  https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts\n', ' *  https://github.com/TokenMarketNet/ico/blob/master/contracts\n', ' *  https://github.com/ConsenSys/Tokens/blob/master/Token_Contracts/contracts\n', ' */\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool success);\n', '  function approve(address spender, uint256 value) returns (bool success);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' *  NTRY Cointract contract, ERC20 compliant (see https://github.com/ethereum/EIPs/issues/20)\n', ' *\n', ' *  Code is based on multiple sources:\n', ' *  https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts\n', ' *  https://github.com/TokenMarketNet/ico/blob/master/contracts\n', ' *  https://github.com/ConsenSys/Tokens/blob/master/Token_Contracts/contracts\n', ' */\n', '\n', 'contract ErrorHandler {\n', '    bool public isInTestMode = false;\n', '    event evRecord(address msg_sender, uint msg_value, string message);\n', '\n', '    function doThrow(string message) internal {\n', '        evRecord(msg.sender, msg.value, message);\n', '        if (!isInTestMode) {\n', '        \tthrow;\n', '\t\t}\n', '    }\n', '}\n', '\n', '/**\n', ' *  NTRY Cointract contract, ERC20 compliant (see https://github.com/ethereum/EIPs/issues/20)\n', ' *\n', ' *  Code is based on multiple sources:\n', ' *  https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts\n', ' *  https://github.com/TokenMarketNet/ico/blob/master/contracts\n', ' *  https://github.com/ConsenSys/Tokens/blob/master/Token_Contracts/contracts\n', ' */\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' *  NTRY Cointract contract, ERC20 compliant (see https://github.com/ethereum/EIPs/issues/20)\n', ' *\n', ' *  Code is based on multiple sources:\n', ' *  https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts\n', ' *  https://github.com/TokenMarketNet/ico/blob/master/contracts\n', ' *  https://github.com/ConsenSys/Tokens/blob/master/Token_Contracts/contracts\n', ' */\n', '\n', '\n', '/**\n', ' * Standard ERC20 token with Short Hand Attack and approve() race condition mitigation.\n', ' *\n', ' * Based on code by FirstBlood:\n', ' * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract NTRYStandardToken is ERC20, ErrorHandler {\n', '  address public owner;\n', '\n', '  /* NTRY functional is paused if there is any emergency */\n', '  bool public emergency = false;\n', '\n', '  using SafeMath for uint;\n', '\n', '  /* Actual balances of token holders */\n', '  mapping(address => uint) balances;\n', '\n', '  /* approve() allowances */\n', '  mapping (address => mapping (address => uint)) allowed;\n', '  \n', '  /* freezeAccount() frozen() */\n', '  mapping (address => bool) frozenAccount;\n', '\n', '  /* Notify account frozen activity */\n', '  event FrozenFunds(address target, bool frozen);\n', '\n', '  /* Interface declaration */\n', '  function isToken() public constant returns (bool weAre) {\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner. \n', '   */\n', '  modifier onlyOwner() {\n', '    if (msg.sender != owner) {\n', '      doThrow("Only Owner!");\n', '    }\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * Fix for the ERC20 short address attack\n', '   *\n', '   * http://vessenes.com/the-erc20-short-address-attack-explained/\n', '   */\n', '  modifier onlyPayloadSize(uint size) {\n', '     if(msg.data.length < size + 4) {\n', '       doThrow("Short address attack!");\n', '     }\n', '     _;\n', '  }\n', '\n', '  modifier stopInEmergency {\n', '    if (emergency){\n', '        doThrow("Emergency state!");\n', '    }\n', '    _;\n', '  }\n', '  \n', '  function transfer(address _to, uint _value) stopInEmergency onlyPayloadSize(2 * 32) returns (bool success) {\n', '    // Check if frozen //\n', '    if (frozenAccount[msg.sender]) doThrow("Account freezed!");  \n', '                  \n', '    balances[msg.sender] = balances[msg.sender].sub( _value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _value) stopInEmergency returns (bool success) {\n', '    // Check if frozen //\n', '    if (frozenAccount[_from]) doThrow("Account freezed!");\n', '\n', '    uint _allowance = allowed[_from][msg.sender];\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function approve(address _spender, uint _value) stopInEmergency returns (bool success) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) doThrow("Allowance race condition!");\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '\n', '  /**\n', '  * It is called Circuit Breakers (Pause contract functionality), it stop execution if certain conditions are met, \n', '  * and can be useful when new errors are discovered. For example, most actions may be suspended in a contract if a \n', '  * bug is discovered, so the most feasible option to stop and updated migration message about launching an updated version of contract. \n', '  * @param _stop Switch the circuite breaker on or off\n', '  */\n', '  function emergencyStop(bool _stop) onlyOwner {\n', '      emergency = _stop;\n', '  }\n', '\n', '  /**\n', '  * Owner can set any account into freeze state. It is helpful in case if account holder has \n', '  * lost his key and he want administrator to freeze account until account key is recovered\n', '  * @param target The account address\n', '  * @param freeze The state of account\n', '  */\n', '  function freezeAccount(address target, bool freeze) onlyOwner {\n', '      frozenAccount[target] = freeze;\n', '      FrozenFunds(target, freeze);\n', '  }\n', '\n', '  function frozen(address _target) constant returns (bool frozen) {\n', '    return frozenAccount[_target];\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to. \n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      balances[newOwner] = balances[owner];\n', '      balances[owner] = 0;\n', '      owner = newOwner;\n', '      Transfer(owner, newOwner,balances[newOwner]);\n', '    }\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' *  NTRY Cointract contract, ERC20 compliant (see https://github.com/ethereum/EIPs/issues/20)\n', ' *\n', ' *  Code is based on multiple sources:\n', ' *  https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts\n', ' *  https://github.com/TokenMarketNet/ico/blob/master/contracts\n', ' *  https://github.com/ConsenSys/Tokens/blob/master/Token_Contracts/contracts\n', ' */\n', '\n', '/**\n', ' * Upgrade agent interface inspired by Lunyr.\n', ' *\n', ' * Upgrade agent transfers tokens to a new contract.\n', ' * Upgrade agent itself can be the token contract, or just a middle man contract doing the heavy lifting.\n', ' */\n', 'contract UpgradeAgent {\n', '\n', '  uint public originalSupply;\n', '\n', '  /** Interface marker */\n', '  function isUpgradeAgent() public constant returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  function upgradeFrom(address _from, uint256 _value) public;\n', '\n', '}\n', '\n', '\n', '/**\n', ' *  NTRY Cointract contract, ERC20 compliant (see https://github.com/ethereum/EIPs/issues/20)\n', ' *\n', ' *  Code is based on multiple sources:\n', ' *  https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts\n', ' *  https://github.com/TokenMarketNet/ico/blob/master/contracts\n', ' *  https://github.com/ConsenSys/Tokens/blob/master/Token_Contracts/contracts\n', ' */\n', '\n', '\n', '/**\n', ' * A token upgrade mechanism where users can opt-in amount of tokens to the next smart contract revision.\n', ' *\n', ' * First envisioned by Golem and Lunyr projects.\n', ' */\n', 'contract UpgradeableToken is NTRYStandardToken {\n', '\n', '  /** Contract / person who can set the upgrade path. This can be the same as team multisig wallet, as what it is with its default value. */\n', '  address public upgradeMaster;\n', '\n', '  /** The next contract where the tokens will be migrated. */\n', '  UpgradeAgent public upgradeAgent;\n', '\n', '  /** How many tokens we have upgraded by now. */\n', '  uint256 public totalUpgraded;\n', '\n', '  /**\n', '   * Upgrade states.\n', '   *\n', '   * - NotAllowed: The child contract has not reached a condition where the upgrade can bgun\n', "   * - WaitingForAgent: Token allows upgrade, but we don't have a new agent yet\n", '   * - ReadyToUpgrade: The agent is set, but not a single token has been upgraded yet\n', '   * - Upgrading: Upgrade agent is set and the balance holders can upgrade their tokens\n', '   *\n', '   */\n', '  enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\n', '\n', '  /**\n', '   * Somebody has upgraded some of his tokens.\n', '   */\n', '  event Upgrade(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '  /**\n', '   * New upgrade agent available.\n', '   */\n', '  event UpgradeAgentSet(address agent);\n', '\n', '  /**\n', '   * Do not allow construction without upgrade master set.\n', '   */\n', '  function UpgradeableToken(address _upgradeMaster) {\n', '    upgradeMaster = _upgradeMaster;\n', '  }\n', '\n', '  /**\n', '   * Allow the token holder to upgrade some of their tokens to a new contract.\n', '   */\n', '  function upgrade(uint256 value) public {\n', '\n', '      UpgradeState state = getUpgradeState();\n', '      if(!(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading)) {\n', '        doThrow("Called in a bad state!");\n', '      }\n', '\n', '      // Validate input value.\n', '      if (value == 0) doThrow("Value to upgrade is zero!");\n', '\n', '      balances[msg.sender] = balances[msg.sender].sub(value);\n', '\n', '      // Take tokens out from circulation\n', '      totalSupply = totalSupply.sub(value);\n', '      totalUpgraded = totalUpgraded.add(value);\n', '\n', '      // Upgrade agent reissues the tokens\n', '      upgradeAgent.upgradeFrom(msg.sender, value);\n', '      Upgrade(msg.sender, upgradeAgent, value);\n', '  }\n', '\n', '  /**\n', '   * Set an upgrade agent that handles\n', '   */\n', '  function setUpgradeAgent(address agent) external {\n', '\n', '      if(!canUpgrade()) {\n', '        // The token is not yet in a state that we could think upgrading\n', '        doThrow("Token state is not feasible for upgrading yet!");\n', '      }\n', '\n', '      if (agent == 0x0) doThrow("Invalid address!");\n', '      // Only a master can designate the next agent\n', '      if (msg.sender != upgradeMaster) doThrow("Only upgrade master!");\n', '      // Upgrade has already begun for an agent\n', '      if (getUpgradeState() == UpgradeState.Upgrading) doThrow("Upgrade started already!");\n', '\n', '      upgradeAgent = UpgradeAgent(agent);\n', '\n', '      // Bad interface\n', '      if(!upgradeAgent.isUpgradeAgent()) doThrow("Bad interface!");\n', '      // Make sure that token supplies match in source and target\n', '      if (upgradeAgent.originalSupply() != totalSupply) doThrow("Total supply source is not equall to target!");\n', '\n', '      UpgradeAgentSet(upgradeAgent);\n', '  }\n', '\n', '  /**\n', '   * Get the state of the token upgrade.\n', '   */\n', '  function getUpgradeState() public constant returns(UpgradeState) {\n', '    if(!canUpgrade()) return UpgradeState.NotAllowed;\n', '    else if(address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\n', '    else if(totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\n', '    else return UpgradeState.Upgrading;\n', '  }\n', '\n', '  /**\n', '   * Change the upgrade master.\n', '   *\n', '   * This allows us to set a new owner for the upgrade mechanism.\n', '   */\n', '  function setUpgradeMaster(address master) public {\n', '      if (master == 0x0) doThrow("Invalid address of upgrade master!");\n', '      if (msg.sender != upgradeMaster) doThrow("Only upgrade master!");\n', '      upgradeMaster = master;\n', '  }\n', '\n', '  /**\n', '   * Child contract can enable to provide the condition when the upgrade can begun.\n', '   */\n', '  function canUpgrade() public constant returns(bool) {\n', '     return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' *  NTRY Cointract contract, ERC20 compliant (see https://github.com/ethereum/EIPs/issues/20)\n', ' *\n', ' *  Code is based on multiple sources:\n', ' *  https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts\n', ' *  https://github.com/TokenMarketNet/ico/blob/master/contracts\n', ' *  https://github.com/ConsenSys/Tokens/blob/master/Token_Contracts/contracts\n', ' */\n', '\n', '\n', 'contract BurnableToken is NTRYStandardToken {\n', '\n', '  address public constant BURN_ADDRESS = 0;\n', '\n', '  /** How many tokens we burned */\n', '  event Burned(address burner, uint burnedAmount);\n', '\n', '  /**\n', '   * Burn extra tokens from a balance.\n', '   *\n', '   */\n', '  function burn(uint burnAmount) {\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(burnAmount);\n', '    totalSupply = totalSupply.sub(burnAmount);\n', '    Burned(burner, burnAmount);\n', '  }\n', '}\n', '\n', '\n', 'contract CentrallyIssuedToken is BurnableToken, UpgradeableToken {\n', '\n', '  string public name;\n', '  string public symbol;\n', '  uint public decimals;\n', '\n', '  function CentrallyIssuedToken() UpgradeableToken(owner) {\n', '    name = "Notary Platform Token";\n', '    symbol = "NTRY";\n', '    decimals = 18;\n', '    owner = 0x1538EF80213cde339A333Ee420a85c21905b1b2D;\n', '\n', '    totalSupply = 150000000 * 1 ether;\n', '    \n', '    // Allocate initial balance to the owner //\n', '    balances[owner] = 150000000 * 1 ether;\n', '\n', '    // Freeze notary team funds for one year (One month with pre ico already passed)//\n', '    unlockedAt =  now + 330 * 1 days;\n', '  }\n', '\n', '  uint256 public constant teamAllocations = 15000000 * 1 ether;\n', '  uint256 public unlockedAt;\n', '  mapping (address => uint256) allocations;\n', '  function allocate() public {\n', '      allocations[0xab1cb1740344A9280dC502F3B8545248Dc3045eA] = 2500000 * 1 ether;\n', '      allocations[0x330709A59Ab2D1E1105683F92c1EE8143955a357] = 2500000 * 1 ether;\n', '      allocations[0xAa0887fc6e8896C4A80Ca3368CFd56D203dB39db] = 2500000 * 1 ether;\n', '      allocations[0x1fbA1d22435DD3E7Fa5ba4b449CC550a933E72b3] = 2500000 * 1 ether;\n', '      allocations[0xC9d5E2c7e40373ae576a38cD7e62E223C95aBFD4] = 500000 * 1 ether;\n', '      allocations[0xabc0B64a38DE4b767313268F0db54F4cf8816D9C] = 500000 * 1 ether;\n', '      allocations[0x5d85bCDe5060C5Bd00DBeDF5E07F43CE3Ccade6f] = 250000 * 1 ether;\n', '      allocations[0xecb1b0231CBC0B04015F9e5132C62465C128B578] = 250000 * 1 ether;\n', '      allocations[0xF9b1Cfc7fe3B63bEDc594AD20132CB06c18FD5F2] = 250000 * 1 ether;\n', '      allocations[0xDbb89a87d9f91EA3f0Ab035a67E3A951A05d0130] = 250000 * 1 ether;\n', '      allocations[0xC1530645E21D27AB4b567Bac348721eE3E244Cbd] = 200000 * 1 ether;\n', '      allocations[0xcfb44162030e6CBca88e65DffA21911e97ce8533] = 200000 * 1 ether;\n', '      allocations[0x64f748a5C5e504DbDf61d49282d6202Bc1311c3E] = 200000 * 1 ether;\n', '      allocations[0xFF22FA2B3e5E21817b02a45Ba693B7aC01485a9C] = 200000 * 1 ether;\n', '      allocations[0xC9856112DCb8eE449B83604438611EdCf61408AF] = 200000 * 1 ether;\n', '      allocations[0x689CCfEABD99081D061aE070b1DA5E1f6e4B9fB2] = 2000000 * 1 ether;\n', '  }\n', '\n', '  function withDraw() public {\n', '      if(now < unlockedAt){ \n', '          doThrow("Allocations are freezed!");\n', '      }\n', '      if (allocations[msg.sender] == 0){\n', '          doThrow("No allocation found!");\n', '      }\n', '      balances[owner] -= allocations[msg.sender];\n', '      balances[msg.sender] += allocations[msg.sender];\n', '      Transfer(owner, msg.sender, allocations[msg.sender]);\n', '      allocations[msg.sender] = 0;\n', '      \n', '  }\n', '  \n', '   function () {\n', '        //if ether is sent to this address, send it back.\n', '        throw;\n', '    }\n', '  \n', '}']
