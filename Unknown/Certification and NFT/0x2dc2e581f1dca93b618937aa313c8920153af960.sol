['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ContributorApprover {\n', '    KyberContributorWhitelist public list;\n', '    mapping(address=>uint)    public participated;\n', '\n', '    uint                      public cappedSaleStartTime;\n', '    uint                      public openSaleStartTime;\n', '    uint                      public openSaleEndTime;\n', '\n', '    using SafeMath for uint;\n', '\n', '\n', '    function ContributorApprover( KyberContributorWhitelist _whitelistContract,\n', '                                  uint                      _cappedSaleStartTime,\n', '                                  uint                      _openSaleStartTime,\n', '                                  uint                      _openSaleEndTime ) {\n', '        list = _whitelistContract;\n', '        cappedSaleStartTime = _cappedSaleStartTime;\n', '        openSaleStartTime = _openSaleStartTime;\n', '        openSaleEndTime = _openSaleEndTime;\n', '\n', '        require( list != KyberContributorWhitelist(0x0) );\n', '        require( cappedSaleStartTime < openSaleStartTime );\n', '        require(  openSaleStartTime < openSaleEndTime );\n', '    }\n', '\n', '    // this is a seperate function so user could query it before crowdsale starts\n', '    function contributorCap( address contributor ) constant returns(uint) {\n', '        return list.getCap( contributor );\n', '    }\n', '\n', '    function eligible( address contributor, uint amountInWei ) constant returns(uint) {\n', '        if( now < cappedSaleStartTime ) return 0;\n', '        if( now >= openSaleEndTime ) return 0;\n', '\n', '        uint cap = contributorCap( contributor );\n', '\n', '        if( cap == 0 ) return 0;\n', '        if( now < openSaleStartTime ) {\n', '            uint remainedCap = cap.sub( participated[ contributor ] );\n', '\n', '            if( remainedCap > amountInWei ) return amountInWei;\n', '            else return remainedCap;\n', '        }\n', '        else {\n', '            return amountInWei;\n', '        }\n', '    }\n', '\n', '    function eligibleTestAndIncrement( address contributor, uint amountInWei ) internal returns(uint) {\n', '        uint result = eligible( contributor, amountInWei );\n', '        participated[contributor] = participated[contributor].add( result );\n', '\n', '        return result;\n', '    }\n', '\n', '    function saleEnded() constant returns(bool) {\n', '        return now > openSaleEndTime;\n', '    }\n', '\n', '    function saleStarted() constant returns(bool) {\n', '        return now >= cappedSaleStartTime;\n', '    }\n', '}\n', '\n', 'contract KyberNetworkTokenSale is ContributorApprover {\n', '    address             public admin;\n', '    address             public kyberMultiSigWallet;\n', '    KyberNetworkCrystal public token;\n', '    uint                public raisedWei;\n', '    bool                public haltSale;\n', '\n', '    mapping(bytes32=>uint) public proxyPurchases;\n', '\n', '    function KyberNetworkTokenSale( address _admin,\n', '                                    address _kyberMultiSigWallet,\n', '                                    KyberContributorWhitelist _whilteListContract,\n', '                                    uint _totalTokenSupply,\n', '                                    uint _premintedTokenSupply,\n', '                                    uint _cappedSaleStartTime,\n', '                                    uint _publicSaleStartTime,\n', '                                    uint _publicSaleEndTime )\n', '\n', '        ContributorApprover( _whilteListContract,\n', '                             _cappedSaleStartTime,\n', '                             _publicSaleStartTime,\n', '                             _publicSaleEndTime )\n', '    {\n', '        admin = _admin;\n', '        kyberMultiSigWallet = _kyberMultiSigWallet;\n', '\n', '        token = new KyberNetworkCrystal( _totalTokenSupply,\n', '                                         _cappedSaleStartTime,\n', '                                         _publicSaleEndTime + 7 days,\n', '                                         _admin );\n', '\n', '        // transfer preminted tokens to company wallet\n', '        token.transfer( kyberMultiSigWallet, _premintedTokenSupply );\n', '    }\n', '\n', '    function setHaltSale( bool halt ) {\n', '        require( msg.sender == admin );\n', '        haltSale = halt;\n', '    }\n', '\n', '    function() payable {\n', '        buy( msg.sender );\n', '    }\n', '\n', '    event ProxyBuy( bytes32 indexed _proxy, address _recipient, uint _amountInWei );\n', '    function proxyBuy( bytes32 proxy, address recipient ) payable returns(uint){\n', '        uint amount = buy( recipient );\n', '        proxyPurchases[proxy] = proxyPurchases[proxy].add(amount);\n', '        ProxyBuy( proxy, recipient, amount );\n', '\n', '        return amount;\n', '    }\n', '\n', '    event Buy( address _buyer, uint _tokens, uint _payedWei );\n', '    function buy( address recipient ) payable returns(uint){\n', '        require( tx.gasprice <= 50000000000 wei );\n', '\n', '        require( ! haltSale );\n', '        require( saleStarted() );\n', '        require( ! saleEnded() );\n', '\n', '        uint weiPayment = eligibleTestAndIncrement( recipient, msg.value );\n', '\n', '        require( weiPayment > 0 );\n', '\n', '        // send to msg.sender, not to recipient\n', '        if( msg.value > weiPayment ) {\n', '            msg.sender.transfer( msg.value.sub( weiPayment ) );\n', '        }\n', '\n', '        // send payment to wallet\n', '        sendETHToMultiSig( weiPayment );\n', '        raisedWei = raisedWei.add( weiPayment );\n', '        uint recievedTokens = weiPayment.mul( 600 );\n', '\n', '        assert( token.transfer( recipient, recievedTokens ) );\n', '\n', '\n', '        Buy( recipient, recievedTokens, weiPayment );\n', '\n', '        return weiPayment;\n', '    }\n', '\n', '    function sendETHToMultiSig( uint value ) internal {\n', '        kyberMultiSigWallet.transfer( value );\n', '    }\n', '\n', '    event FinalizeSale();\n', '    // function is callable by everyone\n', '    function finalizeSale() {\n', '        require( saleEnded() );\n', '        require( msg.sender == admin );\n', '\n', '        // burn remaining tokens\n', '        token.burn(token.balanceOf(this));\n', '\n', '        FinalizeSale();\n', '    }\n', '\n', '    // ETH balance is always expected to be 0.\n', '    // but in case something went wrong, we use this function to extract the eth.\n', '    function emergencyDrain(ERC20 anyToken) returns(bool){\n', '        require( msg.sender == admin );\n', '        require( saleEnded() );\n', '\n', '        if( this.balance > 0 ) {\n', '            sendETHToMultiSig( this.balance );\n', '        }\n', '\n', '        if( anyToken != address(0x0) ) {\n', '            assert( anyToken.transfer(kyberMultiSigWallet, anyToken.balanceOf(this)) );\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    // just to check that funds goes to the right place\n', '    // tokens are not given in return\n', '    function debugBuy() payable {\n', '        require( msg.value == 123 );\n', '        sendETHToMultiSig( msg.value );\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', 'contract KyberContributorWhitelist is Ownable {\n', '    // cap is in wei. The value of 7 is just a stub.\n', '    // after kyc registration ends, we change it to the actual value with setSlackUsersCap\n', '    uint public slackUsersCap = 7;\n', '    mapping(address=>uint) public addressCap;\n', '\n', '    function KyberContributorWhitelist() {}\n', '\n', '    event ListAddress( address _user, uint _cap, uint _time );\n', '\n', '    // Owner can delist by setting cap = 0.\n', '    // Onwer can also change it at any time\n', '    function listAddress( address _user, uint _cap ) onlyOwner {\n', '        addressCap[_user] = _cap;\n', '        ListAddress( _user, _cap, now );\n', '    }\n', '\n', '    // an optimization in case of network congestion\n', '    function listAddresses( address[] _users, uint[] _cap ) onlyOwner {\n', '        require(_users.length == _cap.length );\n', '        for( uint i = 0 ; i < _users.length ; i++ ) {\n', '            listAddress( _users[i], _cap[i] );\n', '        }\n', '    }\n', '\n', '    function setSlackUsersCap( uint _cap ) onlyOwner {\n', '        slackUsersCap = _cap;\n', '    }\n', '\n', '    function getCap( address _user ) constant returns(uint) {\n', '        uint cap = addressCap[_user];\n', '\n', '        if( cap == 1 ) return slackUsersCap;\n', '        else return cap;\n', '    }\n', '\n', '    function destroy() onlyOwner {\n', '        selfdestruct(owner);\n', '    }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  \n', '  // KYBER-NOTE! code changed to comply with ERC20 standard\n', '  event Transfer(address indexed _from, address indexed _to, uint _value);\n', '  //event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  \n', '  // KYBER-NOTE! code changed to comply with ERC20 standard\n', '  event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '  //event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    // KYBER-NOTE! code changed to comply with ERC20 standard\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    //balances[_from] = balances[_from].sub(_value); // this was removed\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', 'contract KyberNetworkCrystal is StandardToken, Ownable {\n', '    string  public  constant name = "Kyber Network Crystal";\n', '    string  public  constant symbol = "KNC";\n', '    uint    public  constant decimals = 18;\n', '\n', '    uint    public  saleStartTime;\n', '    uint    public  saleEndTime;\n', '\n', '    address public  tokenSaleContract;\n', '\n', '    modifier onlyWhenTransferEnabled() {\n', '        if( now <= saleEndTime && now >= saleStartTime ) {\n', '            require( msg.sender == tokenSaleContract );\n', '        }\n', '        _;\n', '    }\n', '\n', '    modifier validDestination( address to ) {\n', '        require(to != address(0x0));\n', '        require(to != address(this) );\n', '        _;\n', '    }\n', '\n', '    function KyberNetworkCrystal( uint tokenTotalAmount, uint startTime, uint endTime, address admin ) {\n', '        // Mint all tokens. Then disable minting forever.\n', '        balances[msg.sender] = tokenTotalAmount;\n', '        totalSupply = tokenTotalAmount;\n', '        Transfer(address(0x0), msg.sender, tokenTotalAmount);\n', '\n', '        saleStartTime = startTime;\n', '        saleEndTime = endTime;\n', '\n', '        tokenSaleContract = msg.sender;\n', '        transferOwnership(admin); // admin could drain tokens that were sent here by mistake\n', '    }\n', '\n', '    function transfer(address _to, uint _value)\n', '        onlyWhenTransferEnabled\n', '        validDestination(_to)\n', '        returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value)\n', '        onlyWhenTransferEnabled\n', '        validDestination(_to)\n', '        returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    event Burn(address indexed _burner, uint _value);\n', '\n', '    function burn(uint _value) onlyWhenTransferEnabled\n', '        returns (bool){\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(msg.sender, _value);\n', '        Transfer(msg.sender, address(0x0), _value);\n', '        return true;\n', '    }\n', '\n', '    // save some gas by making only one contract call\n', '    function burnFrom(address _from, uint256 _value) onlyWhenTransferEnabled\n', '        returns (bool) {\n', '        assert( transferFrom( _from, msg.sender, _value ) );\n', '        return burn(_value);\n', '    }\n', '\n', '    function emergencyERC20Drain( ERC20 token, uint amount ) onlyOwner {\n', '        token.transfer( owner, amount );\n', '    }\n', '}']