['pragma solidity ^0.4.0;\n', '\n', 'contract AbstractENS {\n', '    function owner(bytes32 node) constant returns(address);\n', '    function resolver(bytes32 node) constant returns(address);\n', '    function setOwner(bytes32 node, address owner);\n', '    function setSubnodeOwner(bytes32 node, bytes32 label, address owner);\n', '    function setResolver(bytes32 node, address resolver);\n', '}\n', '\n', 'contract Resolver {\n', '    function setAddr(bytes32 nodeHash, address addr);\n', '}\n', 'contract ReverseRegistrar {\n', '    function claim(address owner) returns (bytes32 node);\n', '}\n', '\n', '\n', '/**\n', ' *  FireflyRegistrar\n', ' *\n', ' *  This registrar allows arbitrary labels below the root node for a fixed minimum fee.\n', ' *  Labels must conform to the regex /^[a-z0-9-]{4, 20}$/.\n', ' *\n', ' *  Admin priviledges:\n', ' *    - change the admin\n', ' *    - change the fee\n', ' *    - change the default resolver\n', ' *    - withdrawl funds\n', ' *\n', ' *  This resolver should is designed to be self-contained, so that in the future\n', ' *  switching to a new Resolver should not impact this one.\n', ' *\n', ' */\n', 'contract FireflyRegistrar {\n', '     // namehash(&#39;addr.reverse&#39;)\n', '     bytes32 constant RR_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\n', '\n', '    // Admin triggered events\n', '    event adminChanged(address oldAdmin, address newAdmin);\n', '    event feeChanged(uint256 oldFee, uint256 newFee);\n', '    event defaultResolverChanged(address oldResolver, address newResolver);\n', '    event didWithdraw(address target, uint256 amount);\n', '\n', '    // Registration\n', '    event nameRegistered(bytes32 indexed nodeHash, address owner, uint256 fee);\n', '\n', '    // Donations\n', '    event donation(bytes32 indexed nodeHash, uint256 amount);\n', '\n', '    AbstractENS _ens;\n', '    Resolver _defaultResolver;\n', '\n', '    address _admin;\n', '    bytes32 _nodeHash;\n', '\n', '    uint256 _fee;\n', '\n', '    uint256 _totalPaid = 0;\n', '    uint256 _nameCount = 0;\n', '\n', '    mapping (bytes32 => uint256) _donations;\n', '\n', '    function FireflyRegistrar(address ens, bytes32 nodeHash, address defaultResolver) {\n', '        _ens = AbstractENS(ens);\n', '        _nodeHash = nodeHash;\n', '        _defaultResolver = Resolver(defaultResolver);\n', '\n', '        _admin = msg.sender;\n', '\n', '        _fee = 0.1 ether;\n', '\n', '        // Give the admin access to the reverse entry\n', '        ReverseRegistrar(_ens.owner(RR_NODE)).claim(_admin);\n', '    }\n', '\n', '    /**\n', '     *  setAdmin(admin)\n', '     *\n', '     *  Change the admin of this contract. This should be used shortly after\n', '     *  deployment and live testing to switch to a multi-sig contract.\n', '     */\n', '    function setAdmin(address admin) {\n', '        if (msg.sender != _admin) { throw; }\n', '\n', '        adminChanged(_admin, admin);\n', '        _admin = admin;\n', '\n', '        // Give the admin access to the reverse entry\n', '        ReverseRegistrar(_ens.owner(RR_NODE)).claim(admin);\n', '\n', '        // Point the resolved addr to the new admin\n', '        Resolver(_ens.resolver(_nodeHash)).setAddr(_nodeHash, _admin);\n', '    }\n', '\n', '    /**\n', '     *  setFee(fee)\n', '     *\n', '     *  This is useful if the price of ether sky-rockets or plummets, but\n', '     *  for the most part should remain unused\n', '     */\n', '    function setFee(uint256 fee) {\n', '        if (msg.sender != _admin) { throw; }\n', '        feeChanged(_fee, fee);\n', '        _fee = fee;\n', '    }\n', '\n', '    /**\n', '     *  setDefaultResolver(resolver)\n', '     *\n', '     *  Allow the admin to change the default resolver that is setup with\n', '     *  new name registrations.\n', '     */\n', '    function setDefaultResolver(address defaultResolver) {\n', '        if (msg.sender != _admin) { throw; }\n', '        defaultResolverChanged(_defaultResolver, defaultResolver);\n', '        _defaultResolver = Resolver(defaultResolver);\n', '    }\n', '\n', '    /**\n', '     *  withdraw(target, amount)\n', '     *\n', '     *  Allow the admin to withdrawl funds.\n', '     */\n', '    function withdraw(address target, uint256 amount) {\n', '        if (msg.sender != _admin) { throw; }\n', '        if (!target.send(amount)) { throw; }\n', '        didWithdraw(target, amount);\n', '    }\n', '\n', '    /**\n', '     *  register(label)\n', '     *\n', '     *  Allows anyone to send *fee* ether to the contract with a name to register.\n', '     *\n', '     *  Note: A name must match the regex /^[a-z0-9-]{4,20}$/\n', '     */\n', '    function register(string label) payable {\n', '\n', '        // Check the label is legal\n', '        uint256 position;\n', '        uint256 length;\n', '        assembly {\n', '            // The first word of a string is its length\n', '            length := mload(label)\n', '\n', '            // The first character position is the beginning of the second word\n', '            position := add(label, 1)\n', '        }\n', '\n', '        // Labels must be at least 4 characters and at most 20 characters\n', '        if (length < 4 || length > 20) { throw; }\n', '\n', '        // Only allow /^[a-z0-9-]*$/\n', '        for (uint256 i = 0; i < length; i++) {\n', '            uint8 c;\n', '            assembly { c := and(mload(position), 0xFF) }\n', '            //       &#39;a&#39;         &#39;z&#39;           &#39;0&#39;         &#39;9&#39;           &#39;-&#39;\n', '            if ((c < 0x61 || c > 0x7a) && (c < 0x30 || c > 0x39) && c != 0x2d) {\n', '                throw;\n', '            }\n', '            position++;\n', '        }\n', '\n', '        // Paid too little; participants may pay more (as a donation)\n', '        if (msg.value < _fee) { throw; }\n', '\n', '        // Compute the label and node hash\n', '        var labelHash = sha3(label);\n', '        var nodeHash = sha3(_nodeHash, labelHash);\n', '\n', '        // This is already owned in ENS\n', '        if (_ens.owner(nodeHash) != address(0)) { throw; }\n', '\n', '        // Make this registrar the owner (so we can set it up before giving it away)\n', '        _ens.setSubnodeOwner(_nodeHash, labelHash, this);\n', '\n', '        // Set up the default resolver and point to the sender\n', '        _ens.setResolver(nodeHash, _defaultResolver);\n', '        _defaultResolver.setAddr(nodeHash, msg.sender);\n', '\n', '        // Now give it to the sender\n', '        _ens.setOwner(nodeHash, msg.sender);\n', '\n', '        _totalPaid += msg.value;\n', '        _nameCount++;\n', '\n', '        _donations[nodeHash] += msg.value;\n', '\n', '        nameRegistered(nodeHash, msg.sender, msg.value);\n', '        donation(nodeHash, msg.value);\n', '    }\n', '\n', '    /**\n', '     *  donate(nodeHash)\n', '     *\n', '     *  Allow a registered name to donate more and get attribution. This may\n', '     *  be useful if special limited edition Firefly devices are awarded to\n', '     *  certain tiers of donors or such.\n', '     */\n', '    function donate(bytes32 nodeHash) payable {\n', '        _donations[nodeHash] += msg.value;\n', '        donation(nodeHash, msg.value);\n', '    }\n', '\n', '    /**\n', '     *  config()\n', '     *\n', '     *  Get the configuration of this registrar.\n', '     */\n', '    function config() constant returns (address ens, bytes32 nodeHash, address admin, uint256 fee, address defaultResolver) {\n', '        ens = _ens;\n', '        nodeHash = _nodeHash;\n', '        admin = _admin;\n', '        fee = _fee;\n', '        defaultResolver = _defaultResolver;\n', '    }\n', '\n', '    /**\n', '     *  stats()\n', '     *\n', '     *  Get some statistics for this registrar.\n', '     */\n', '    function stats() constant returns (uint256 nameCount, uint256 totalPaid, uint256 balance) {\n', '        nameCount = _nameCount;\n', '        totalPaid = _totalPaid;\n', '        balance = this.balance;\n', '    }\n', '\n', '    /**\n', '     *  donations(nodeHash)\n', '     *\n', '     *  Returns the amount of donations a nodeHash has provided.\n', '     */\n', '    function donations(bytes32 nodeHash) constant returns (uint256 donation) {\n', '        return _donations[nodeHash];\n', '    }\n', '\n', '    /**\n', '     *  fee()\n', '     *\n', '     *  The current fee forregistering a name.\n', '     */\n', '    function fee() constant returns (uint256 fee) {\n', '        return _fee;\n', '    }\n', '\n', '    /**\n', '     *  Allow anonymous donations.\n', '     */\n', '    function () payable {\n', '        _donations[0] += msg.value;\n', '        donation(0, msg.value);\n', '    }\n', '}']
['pragma solidity ^0.4.0;\n', '\n', 'contract AbstractENS {\n', '    function owner(bytes32 node) constant returns(address);\n', '    function resolver(bytes32 node) constant returns(address);\n', '    function setOwner(bytes32 node, address owner);\n', '    function setSubnodeOwner(bytes32 node, bytes32 label, address owner);\n', '    function setResolver(bytes32 node, address resolver);\n', '}\n', '\n', 'contract Resolver {\n', '    function setAddr(bytes32 nodeHash, address addr);\n', '}\n', 'contract ReverseRegistrar {\n', '    function claim(address owner) returns (bytes32 node);\n', '}\n', '\n', '\n', '/**\n', ' *  FireflyRegistrar\n', ' *\n', ' *  This registrar allows arbitrary labels below the root node for a fixed minimum fee.\n', ' *  Labels must conform to the regex /^[a-z0-9-]{4, 20}$/.\n', ' *\n', ' *  Admin priviledges:\n', ' *    - change the admin\n', ' *    - change the fee\n', ' *    - change the default resolver\n', ' *    - withdrawl funds\n', ' *\n', ' *  This resolver should is designed to be self-contained, so that in the future\n', ' *  switching to a new Resolver should not impact this one.\n', ' *\n', ' */\n', 'contract FireflyRegistrar {\n', "     // namehash('addr.reverse')\n", '     bytes32 constant RR_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\n', '\n', '    // Admin triggered events\n', '    event adminChanged(address oldAdmin, address newAdmin);\n', '    event feeChanged(uint256 oldFee, uint256 newFee);\n', '    event defaultResolverChanged(address oldResolver, address newResolver);\n', '    event didWithdraw(address target, uint256 amount);\n', '\n', '    // Registration\n', '    event nameRegistered(bytes32 indexed nodeHash, address owner, uint256 fee);\n', '\n', '    // Donations\n', '    event donation(bytes32 indexed nodeHash, uint256 amount);\n', '\n', '    AbstractENS _ens;\n', '    Resolver _defaultResolver;\n', '\n', '    address _admin;\n', '    bytes32 _nodeHash;\n', '\n', '    uint256 _fee;\n', '\n', '    uint256 _totalPaid = 0;\n', '    uint256 _nameCount = 0;\n', '\n', '    mapping (bytes32 => uint256) _donations;\n', '\n', '    function FireflyRegistrar(address ens, bytes32 nodeHash, address defaultResolver) {\n', '        _ens = AbstractENS(ens);\n', '        _nodeHash = nodeHash;\n', '        _defaultResolver = Resolver(defaultResolver);\n', '\n', '        _admin = msg.sender;\n', '\n', '        _fee = 0.1 ether;\n', '\n', '        // Give the admin access to the reverse entry\n', '        ReverseRegistrar(_ens.owner(RR_NODE)).claim(_admin);\n', '    }\n', '\n', '    /**\n', '     *  setAdmin(admin)\n', '     *\n', '     *  Change the admin of this contract. This should be used shortly after\n', '     *  deployment and live testing to switch to a multi-sig contract.\n', '     */\n', '    function setAdmin(address admin) {\n', '        if (msg.sender != _admin) { throw; }\n', '\n', '        adminChanged(_admin, admin);\n', '        _admin = admin;\n', '\n', '        // Give the admin access to the reverse entry\n', '        ReverseRegistrar(_ens.owner(RR_NODE)).claim(admin);\n', '\n', '        // Point the resolved addr to the new admin\n', '        Resolver(_ens.resolver(_nodeHash)).setAddr(_nodeHash, _admin);\n', '    }\n', '\n', '    /**\n', '     *  setFee(fee)\n', '     *\n', '     *  This is useful if the price of ether sky-rockets or plummets, but\n', '     *  for the most part should remain unused\n', '     */\n', '    function setFee(uint256 fee) {\n', '        if (msg.sender != _admin) { throw; }\n', '        feeChanged(_fee, fee);\n', '        _fee = fee;\n', '    }\n', '\n', '    /**\n', '     *  setDefaultResolver(resolver)\n', '     *\n', '     *  Allow the admin to change the default resolver that is setup with\n', '     *  new name registrations.\n', '     */\n', '    function setDefaultResolver(address defaultResolver) {\n', '        if (msg.sender != _admin) { throw; }\n', '        defaultResolverChanged(_defaultResolver, defaultResolver);\n', '        _defaultResolver = Resolver(defaultResolver);\n', '    }\n', '\n', '    /**\n', '     *  withdraw(target, amount)\n', '     *\n', '     *  Allow the admin to withdrawl funds.\n', '     */\n', '    function withdraw(address target, uint256 amount) {\n', '        if (msg.sender != _admin) { throw; }\n', '        if (!target.send(amount)) { throw; }\n', '        didWithdraw(target, amount);\n', '    }\n', '\n', '    /**\n', '     *  register(label)\n', '     *\n', '     *  Allows anyone to send *fee* ether to the contract with a name to register.\n', '     *\n', '     *  Note: A name must match the regex /^[a-z0-9-]{4,20}$/\n', '     */\n', '    function register(string label) payable {\n', '\n', '        // Check the label is legal\n', '        uint256 position;\n', '        uint256 length;\n', '        assembly {\n', '            // The first word of a string is its length\n', '            length := mload(label)\n', '\n', '            // The first character position is the beginning of the second word\n', '            position := add(label, 1)\n', '        }\n', '\n', '        // Labels must be at least 4 characters and at most 20 characters\n', '        if (length < 4 || length > 20) { throw; }\n', '\n', '        // Only allow /^[a-z0-9-]*$/\n', '        for (uint256 i = 0; i < length; i++) {\n', '            uint8 c;\n', '            assembly { c := and(mload(position), 0xFF) }\n', "            //       'a'         'z'           '0'         '9'           '-'\n", '            if ((c < 0x61 || c > 0x7a) && (c < 0x30 || c > 0x39) && c != 0x2d) {\n', '                throw;\n', '            }\n', '            position++;\n', '        }\n', '\n', '        // Paid too little; participants may pay more (as a donation)\n', '        if (msg.value < _fee) { throw; }\n', '\n', '        // Compute the label and node hash\n', '        var labelHash = sha3(label);\n', '        var nodeHash = sha3(_nodeHash, labelHash);\n', '\n', '        // This is already owned in ENS\n', '        if (_ens.owner(nodeHash) != address(0)) { throw; }\n', '\n', '        // Make this registrar the owner (so we can set it up before giving it away)\n', '        _ens.setSubnodeOwner(_nodeHash, labelHash, this);\n', '\n', '        // Set up the default resolver and point to the sender\n', '        _ens.setResolver(nodeHash, _defaultResolver);\n', '        _defaultResolver.setAddr(nodeHash, msg.sender);\n', '\n', '        // Now give it to the sender\n', '        _ens.setOwner(nodeHash, msg.sender);\n', '\n', '        _totalPaid += msg.value;\n', '        _nameCount++;\n', '\n', '        _donations[nodeHash] += msg.value;\n', '\n', '        nameRegistered(nodeHash, msg.sender, msg.value);\n', '        donation(nodeHash, msg.value);\n', '    }\n', '\n', '    /**\n', '     *  donate(nodeHash)\n', '     *\n', '     *  Allow a registered name to donate more and get attribution. This may\n', '     *  be useful if special limited edition Firefly devices are awarded to\n', '     *  certain tiers of donors or such.\n', '     */\n', '    function donate(bytes32 nodeHash) payable {\n', '        _donations[nodeHash] += msg.value;\n', '        donation(nodeHash, msg.value);\n', '    }\n', '\n', '    /**\n', '     *  config()\n', '     *\n', '     *  Get the configuration of this registrar.\n', '     */\n', '    function config() constant returns (address ens, bytes32 nodeHash, address admin, uint256 fee, address defaultResolver) {\n', '        ens = _ens;\n', '        nodeHash = _nodeHash;\n', '        admin = _admin;\n', '        fee = _fee;\n', '        defaultResolver = _defaultResolver;\n', '    }\n', '\n', '    /**\n', '     *  stats()\n', '     *\n', '     *  Get some statistics for this registrar.\n', '     */\n', '    function stats() constant returns (uint256 nameCount, uint256 totalPaid, uint256 balance) {\n', '        nameCount = _nameCount;\n', '        totalPaid = _totalPaid;\n', '        balance = this.balance;\n', '    }\n', '\n', '    /**\n', '     *  donations(nodeHash)\n', '     *\n', '     *  Returns the amount of donations a nodeHash has provided.\n', '     */\n', '    function donations(bytes32 nodeHash) constant returns (uint256 donation) {\n', '        return _donations[nodeHash];\n', '    }\n', '\n', '    /**\n', '     *  fee()\n', '     *\n', '     *  The current fee forregistering a name.\n', '     */\n', '    function fee() constant returns (uint256 fee) {\n', '        return _fee;\n', '    }\n', '\n', '    /**\n', '     *  Allow anonymous donations.\n', '     */\n', '    function () payable {\n', '        _donations[0] += msg.value;\n', '        donation(0, msg.value);\n', '    }\n', '}']
