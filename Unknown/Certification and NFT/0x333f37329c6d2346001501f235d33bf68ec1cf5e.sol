['pragma solidity ^0.4.11;\n', '\n', 'contract Ambi2 {\n', '    function hasRole(address, bytes32, address) constant returns(bool);\n', '    function claimFor(address, address) returns(bool);\n', '    function isOwner(address, address) constant returns(bool);\n', '}\n', '\n', 'contract Ambi2Enabled {\n', '    Ambi2 ambi2;\n', '\n', '    modifier onlyRole(bytes32 _role) {\n', '        if (address(ambi2) != 0x0 && ambi2.hasRole(this, _role, msg.sender)) {\n', '            _;\n', '        }\n', '    }\n', '\n', '    // Perform only after claiming the node, or claim in the same tx.\n', '    function setupAmbi2(Ambi2 _ambi2) returns(bool) {\n', '        if (address(ambi2) != 0x0) {\n', '            return false;\n', '        }\n', '\n', '        ambi2 = _ambi2;\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Ambi2EnabledFull is Ambi2Enabled {\n', '    // Setup and claim atomically.\n', '    function setupAmbi2(Ambi2 _ambi2) returns(bool) {\n', '        if (address(ambi2) != 0x0) {\n', '            return false;\n', '        }\n', '        if (!_ambi2.claimFor(this, msg.sender) && !_ambi2.isOwner(this, msg.sender)) {\n', '            return false;\n', '        }\n', '\n', '        ambi2 = _ambi2;\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract EToken2Interface {\n', '    function reissueAsset(bytes32 _symbol, uint _value) returns(bool);\n', '    function changeOwnership(bytes32 _symbol, address _newOwner) returns(bool);\n', '}\n', '\n', 'contract AssetProxy {\n', '    EToken2Interface public etoken2;\n', '    bytes32 public etoken2Symbol;\n', '    function transferWithReference(address _to, uint _value, string _reference) returns (bool);\n', '}\n', '\n', 'contract BloquidIssuer is Ambi2EnabledFull {\n', '\n', '    AssetProxy public assetProxy;\n', '\n', '    function setupAssetProxy(AssetProxy _assetProxy) onlyRole("__root__") returns(bool) {\n', '        if ((address(assetProxy) != 0x0) || (address(_assetProxy) == 0x0)) {\n', '            return false;\n', '        }\n', '        assetProxy = _assetProxy;\n', '        return true;\n', '    }\n', '\n', '    function issueTokens(uint _value, string _regNumber) onlyRole("issuer") returns(bool) {\n', '        bytes32 symbol = assetProxy.etoken2Symbol();\n', '        EToken2Interface etoken2 = assetProxy.etoken2();\n', '        if (!etoken2.reissueAsset(symbol, _value)) {\n', '            return false;\n', '        }\n', '        if (!assetProxy.transferWithReference(msg.sender, _value, _regNumber)) {\n', '            throw;\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function changeAssetOwner(address _newOwner) onlyRole("__root__") returns(bool) {\n', '        if (_newOwner == 0x0) {\n', '            return false;\n', '        }\n', '        bytes32 symbol = assetProxy.etoken2Symbol();\n', '        EToken2Interface etoken2 = assetProxy.etoken2();\n', '        if (!etoken2.changeOwnership(symbol, _newOwner)) {\n', '            return false;\n', '        }\n', '        return true;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.11;\n', '\n', 'contract Ambi2 {\n', '    function hasRole(address, bytes32, address) constant returns(bool);\n', '    function claimFor(address, address) returns(bool);\n', '    function isOwner(address, address) constant returns(bool);\n', '}\n', '\n', 'contract Ambi2Enabled {\n', '    Ambi2 ambi2;\n', '\n', '    modifier onlyRole(bytes32 _role) {\n', '        if (address(ambi2) != 0x0 && ambi2.hasRole(this, _role, msg.sender)) {\n', '            _;\n', '        }\n', '    }\n', '\n', '    // Perform only after claiming the node, or claim in the same tx.\n', '    function setupAmbi2(Ambi2 _ambi2) returns(bool) {\n', '        if (address(ambi2) != 0x0) {\n', '            return false;\n', '        }\n', '\n', '        ambi2 = _ambi2;\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Ambi2EnabledFull is Ambi2Enabled {\n', '    // Setup and claim atomically.\n', '    function setupAmbi2(Ambi2 _ambi2) returns(bool) {\n', '        if (address(ambi2) != 0x0) {\n', '            return false;\n', '        }\n', '        if (!_ambi2.claimFor(this, msg.sender) && !_ambi2.isOwner(this, msg.sender)) {\n', '            return false;\n', '        }\n', '\n', '        ambi2 = _ambi2;\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract EToken2Interface {\n', '    function reissueAsset(bytes32 _symbol, uint _value) returns(bool);\n', '    function changeOwnership(bytes32 _symbol, address _newOwner) returns(bool);\n', '}\n', '\n', 'contract AssetProxy {\n', '    EToken2Interface public etoken2;\n', '    bytes32 public etoken2Symbol;\n', '    function transferWithReference(address _to, uint _value, string _reference) returns (bool);\n', '}\n', '\n', 'contract BloquidIssuer is Ambi2EnabledFull {\n', '\n', '    AssetProxy public assetProxy;\n', '\n', '    function setupAssetProxy(AssetProxy _assetProxy) onlyRole("__root__") returns(bool) {\n', '        if ((address(assetProxy) != 0x0) || (address(_assetProxy) == 0x0)) {\n', '            return false;\n', '        }\n', '        assetProxy = _assetProxy;\n', '        return true;\n', '    }\n', '\n', '    function issueTokens(uint _value, string _regNumber) onlyRole("issuer") returns(bool) {\n', '        bytes32 symbol = assetProxy.etoken2Symbol();\n', '        EToken2Interface etoken2 = assetProxy.etoken2();\n', '        if (!etoken2.reissueAsset(symbol, _value)) {\n', '            return false;\n', '        }\n', '        if (!assetProxy.transferWithReference(msg.sender, _value, _regNumber)) {\n', '            throw;\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function changeAssetOwner(address _newOwner) onlyRole("__root__") returns(bool) {\n', '        if (_newOwner == 0x0) {\n', '            return false;\n', '        }\n', '        bytes32 symbol = assetProxy.etoken2Symbol();\n', '        EToken2Interface etoken2 = assetProxy.etoken2();\n', '        if (!etoken2.changeOwnership(symbol, _newOwner)) {\n', '            return false;\n', '        }\n', '        return true;\n', '    }\n', '\n', '}']
