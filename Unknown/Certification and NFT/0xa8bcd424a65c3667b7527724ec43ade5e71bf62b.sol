['/******************************************************************************\\\n', '\n', 'file:   RegBase.sol\n', 'ver:    0.3.3\n', 'updated:12-Sep-2017\n', 'author: Darryl Morris (o0ragman0o)\n', 'email:  o0ragman0o AT gmail.com\n', '\n', 'This file is part of the SandalStraps framework\n', '\n', '`RegBase` provides an inheriting contract the minimal API to be compliant with \n', '`Registrar`.  It includes a set-once, `bytes32 public regName` which is refered\n', 'to by `Registrar` lookups.\n', '\n', 'An owner updatable `address public owner` state variable is also provided and is\n', 'required by `Factory.createNew()`.\n', '\n', 'This software is distributed in the hope that it will be useful,\n', 'but WITHOUT ANY WARRANTY; without even the implied warranty of\n', 'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  \n', 'See MIT Licence for further details.\n', '<https://opensource.org/licenses/MIT>.\n', '\n', 'Release notes:\n', '* Framworking changing to Factory v0.3.3 usage\n', '\\******************************************************************************/\n', '\n', 'pragma solidity ^0.4.13;\n', '\n', 'contract RegBaseAbstract\n', '{\n', '    /// @dev A static identifier, set in the constructor and used for registrar\n', '    /// lookup\n', '    /// @return Registrar name SandalStraps registrars\n', '    bytes32 public regName;\n', '\n', '    /// @dev An general purpose resource such as short text or a key to a\n', '    /// string in a StringsMap\n', '    /// @return resource\n', '    bytes32 public resource;\n', '    \n', '    /// @dev An address permissioned to enact owner restricted functions\n', '    /// @return owner\n', '    address public owner;\n', '    \n', '    /// @dev An address permissioned to take ownership of the contract\n', '    /// @return newOwner\n', '    address public newOwner;\n', '\n', '//\n', '// Events\n', '//\n', '\n', '    /// @dev Triggered on initiation of change owner address\n', '    event ChangeOwnerTo(address indexed _newOwner);\n', '\n', '    /// @dev Triggered on change of owner address\n', '    event ChangedOwner(address indexed _oldOwner, address indexed _newOwner);\n', '\n', '    /// @dev Triggered when the contract accepts ownership of another contract.\n', '    event ReceivedOwnership(address indexed _kAddr);\n', '\n', '    /// @dev Triggered on change of resource\n', '    event ChangedResource(bytes32 indexed _resource);\n', '\n', '//\n', '// Function Abstracts\n', '//\n', '\n', '    /// @notice Will selfdestruct the contract\n', '    function destroy() public;\n', '\n', '    /// @notice Initiate a change of owner to `_owner`\n', '    /// @param _owner The address to which ownership is to be transfered\n', '    function changeOwner(address _owner) public returns (bool);\n', '\n', '    /// @notice Finalise change of ownership to newOwner\n', '    function acceptOwnership() public returns (bool);\n', '\n', '    /// @notice Change the resource to `_resource`\n', '    /// @param _resource A key or short text to be stored as the resource.\n', '    function changeResource(bytes32 _resource) public returns (bool);\n', '}\n', '\n', '\n', 'contract RegBase is RegBaseAbstract\n', '{\n', '//\n', '// Constants\n', '//\n', '\n', '    bytes32 constant public VERSION = "RegBase v0.3.3";\n', '\n', '//\n', '// State Variables\n', '//\n', '\n', '    // Declared in RegBaseAbstract for reasons that an inherited abstract\n', '    // function is not seen as implimented by a public state identifier of\n', '    // the same name.\n', '    \n', '//\n', '// Modifiers\n', '//\n', '\n', '    // Permits only the owner\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '//\n', '// Functions\n', '//\n', '\n', '    /// @param _creator The calling address passed through by a factory,\n', '    /// typically msg.sender\n', '    /// @param _regName A static name referenced by a Registrar\n', '    /// @param _owner optional owner address if creator is not the intended\n', '    /// owner\n', '    /// @dev On 0x0 value for owner, ownership precedence is:\n', '    /// `_owner` else `_creator` else msg.sender\n', '    function RegBase(address _creator, bytes32 _regName, address _owner)\n', '    {\n', '        require(_regName != 0x0);\n', '        regName = _regName;\n', '        owner = _owner != 0x0 ? _owner : \n', '                _creator != 0x0 ? _creator : msg.sender;\n', '    }\n', '    \n', '    /// @notice Will selfdestruct the contract\n', '    function destroy()\n', '        public\n', '        onlyOwner\n', '    {\n', '        selfdestruct(msg.sender);\n', '    }\n', '    \n', '    /// @notice Initiate a change of owner to `_owner`\n', '    /// @param _owner The address to which ownership is to be transfered\n', '    function changeOwner(address _owner)\n', '        public\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        ChangeOwnerTo(_owner);\n', '        newOwner = _owner;\n', '        return true;\n', '    }\n', '    \n', '    /// @notice Finalise change of ownership to newOwner\n', '    function acceptOwnership()\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(msg.sender == newOwner);\n', '        ChangedOwner(owner, msg.sender);\n', '        owner = newOwner;\n', '        delete newOwner;\n', '        return true;\n', '    }\n', '\n', '    /// @notice Change the resource to `_resource`\n', '    /// @param _resource A key or short text to be stored as the resource.\n', '    function changeResource(bytes32 _resource)\n', '        public\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        resource = _resource;\n', '        ChangedResource(_resource);\n', '        return true;\n', '    }\n', '}\n', '\n', '/******************************************************************************\\\n', '\n', 'file:   Factory.sol\n', 'ver:    0.3.3\n', 'updated:12-Sep-2017\n', 'author: Darryl Morris (o0ragman0o)\n', 'email:  o0ragman0o AT gmail.com\n', '\n', 'This file is part of the SandalStraps framework\n', '\n', 'Factories are a core but independant concept of the SandalStraps framework and \n', 'can be used to create SandalStraps compliant &#39;product&#39; contracts from embed\n', 'bytecode.\n', '\n', 'The abstract Factory contract is to be used as a SandalStraps compliant base for\n', 'product specific factories which must impliment the createNew() function.\n', '\n', 'is itself compliant with `Registrar` by inhereting `RegBase` and\n', 'compiant with `Factory` through the `createNew(bytes32 _name, address _owner)`\n', 'API.\n', '\n', 'An optional creation fee can be set and manually collected by the owner.\n', '\n', 'This software is distributed in the hope that it will be useful,\n', 'but WITHOUT ANY WARRANTY; without even the implied warranty of\n', 'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  \n', 'See MIT Licence for further details.\n', '<https://opensource.org/licenses/MIT>.\n', '\n', 'Release Notes\n', '-------------\n', '* Changed from`withdaw(<value>)` to `withdrawAll()`\n', '\\******************************************************************************/\n', '\n', 'pragma solidity ^0.4.13;\n', '\n', '// import "./RegBase.sol";\n', '\n', 'contract Factory is RegBase\n', '{\n', '//\n', '// Constants\n', '//\n', '\n', '    // Deriving factories should have `bytes32 constant public regName` being\n', '    // the product&#39;s contract name, e.g for products "Foo":\n', '    // bytes32 constant public regName = "Foo";\n', '\n', '    // Deriving factories should have `bytes32 constant public VERSION` being\n', '    // the product&#39;s contract name appended with &#39;Factory` and the version\n', '    // of the product, e.g for products "Foo":\n', '    // bytes32 constant public VERSION "FooFactory 0.0.1";\n', '\n', '//\n', '// State Variables\n', '//\n', '\n', '    /// @return The payment in wei required to create the product contract.\n', '    uint public value;\n', '\n', '//\n', '// Events\n', '//\n', '\n', '    // Is triggered when a product is created\n', '    event Created(address indexed _creator, bytes32 indexed _regName, address indexed _addr);\n', '\n', '//\n', '// Modifiers\n', '//\n', '\n', '    // To check that the correct fee has bene paid\n', '    modifier feePaid() {\n', '        require(msg.value == value || msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '//\n', '// Functions\n', '//\n', '\n', '    /// @param _creator The calling address passed through by a factory,\n', '    /// typically msg.sender\n', '    /// @param _regName A static name referenced by a Registrar\n', '    /// @param _owner optional owner address if creator is not the intended\n', '    /// owner\n', '    /// @dev On 0x0 value for _owner or _creator, ownership precedence is:\n', '    /// `_owner` else `_creator` else msg.sender\n', '    function Factory(address _creator, bytes32 _regName, address _owner)\n', '        RegBase(_creator, _regName, _owner)\n', '    {\n', '        // nothing left to construct\n', '    }\n', '    \n', '    /// @notice Set the product creation fee\n', '    /// @param _fee The desired fee in wei\n', '    function set(uint _fee) \n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        value = _fee;\n', '        return true;\n', '    }\n', '\n', '    /// @notice Send contract balance to `owner`\n', '    function withdrawAll()\n', '        public\n', '        returns (bool)\n', '    {\n', '        owner.transfer(this.balance);\n', '        return true;\n', '    }\n', '\n', '    /// @notice Create a new product contract\n', '    /// @param _regName A unique name if the the product is to be registered in\n', '    /// a SandalStraps registrar\n', '    /// @param _owner An address of a third party owner.  Will default to\n', '    /// msg.sender if 0x0\n', '    /// @return kAddr_ The address of the new product contract\n', '    function createNew(bytes32 _regName, address _owner) \n', '        payable returns(address kAddr_);\n', '}\n', '\n', '/******************************************************************************\\\n', '\n', 'file:   Forwarder.sol\n', 'ver:    0.3.0\n', 'updated:4-Oct-2017\n', 'author: Darryl Morris (o0ragman0o)\n', 'email:  o0ragman0o AT gmail.com\n', '\n', 'This file is part of the SandalStraps framework\n', '\n', 'Forwarder acts as a proxy address for payment pass-through.\n', '\n', 'This software is distributed in the hope that it will be useful,\n', 'but WITHOUT ANY WARRANTY; without even the implied warranty of\n', 'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  \n', 'See MIT Licence for further details.\n', '<https://opensource.org/licenses/MIT>.\n', '\n', 'Release Notes\n', '-------------\n', '* Name change from &#39;Redirector&#39; to &#39;Forwarder&#39;\n', '* Changes state name from &#39;payTo&#39; to &#39;forwardTo&#39;\n', '\n', '\\******************************************************************************/\n', '\n', 'pragma solidity ^0.4.13;\n', '\n', '// import "https://github.com/o0ragman0o/SandalStraps/contracts/Factory.sol";\n', '\n', 'contract Forwarder is RegBase {\n', '//\n', '// Constants\n', '//\n', '\n', '    bytes32 constant public VERSION = "Forwarder v0.3.0";\n', '\n', '//\n', '// State\n', '//\n', '\n', '    address public forwardTo;\n', '    \n', '//\n', '// Events\n', '//\n', '    \n', '    event Forwarded(\n', '        address indexed _from,\n', '        address indexed _to,\n', '        uint _value);\n', '\n', '//\n', '// Functions\n', '//\n', '\n', '    function Forwarder(address _creator, bytes32 _regName, address _owner)\n', '        public\n', '        RegBase(_creator, _regName, _owner)\n', '    {\n', '        // forwardTo will be set to msg.sender of if _owner == 0x0 or _owner\n', '        // otherwise\n', '        forwardTo = owner;\n', '    }\n', '    \n', '    function ()\n', '        public\n', '        payable \n', '    {\n', '        Forwarded(msg.sender, forwardTo, msg.value);\n', '        require(forwardTo.call.value(msg.value)(msg.data));\n', '    }\n', '    \n', '    function changeForwardTo(address _forwardTo)\n', '        public\n', '        returns (bool)\n', '    {\n', '        // Only owner or forwarding address can change forwarding address \n', '        require(msg.sender == owner || msg.sender == forwardTo);\n', '        forwardTo = _forwardTo;\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', 'contract ForwarderFactory is Factory\n', '{\n', '//\n', '// Constants\n', '//\n', '\n', '    /// @return registrar name\n', '    bytes32 constant public regName = "forwarder";\n', '    \n', '    /// @return version string\n', '    bytes32 constant public VERSION = "ForwarderFactory v0.3.0";\n', '\n', '//\n', '// Functions\n', '//\n', '\n', '    /// @param _creator The calling address passed through by a factory,\n', '    /// typically msg.sender\n', '    /// @param _regName A static name referenced by a Registrar\n', '    /// @param _owner optional owner address if creator is not the intended\n', '    /// owner\n', '    /// @dev On 0x0 value for _owner or _creator, ownership precedence is:\n', '    /// `_owner` else `_creator` else msg.sender\n', '    function ForwarderFactory(\n', '            address _creator, bytes32 _regName, address _owner) public\n', '        Factory(_creator, regName, _owner)\n', '    {\n', '        // _regName is ignored as `regName` is already a constant\n', '        // nothing to construct\n', '    }\n', '\n', '    /// @notice Create a new product contract\n', '    /// @param _regName A unique name if the the product is to be registered in\n', '    /// a SandalStraps registrar\n', '    /// @param _owner An address of a third party owner.  Will default to\n', '    /// msg.sender if 0x0\n', '    /// @return kAddr_ The address of the new product contract\n', '    function createNew(bytes32 _regName, address _owner)\n', '        public\n', '        payable\n', '        feePaid\n', '        returns (address kAddr_)\n', '    {\n', '        kAddr_ = address(new Forwarder(msg.sender, _regName, _owner));\n', '        Created(msg.sender, _regName, kAddr_);\n', '    }\n', '}']
['/******************************************************************************\\\n', '\n', 'file:   RegBase.sol\n', 'ver:    0.3.3\n', 'updated:12-Sep-2017\n', 'author: Darryl Morris (o0ragman0o)\n', 'email:  o0ragman0o AT gmail.com\n', '\n', 'This file is part of the SandalStraps framework\n', '\n', '`RegBase` provides an inheriting contract the minimal API to be compliant with \n', '`Registrar`.  It includes a set-once, `bytes32 public regName` which is refered\n', 'to by `Registrar` lookups.\n', '\n', 'An owner updatable `address public owner` state variable is also provided and is\n', 'required by `Factory.createNew()`.\n', '\n', 'This software is distributed in the hope that it will be useful,\n', 'but WITHOUT ANY WARRANTY; without even the implied warranty of\n', 'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  \n', 'See MIT Licence for further details.\n', '<https://opensource.org/licenses/MIT>.\n', '\n', 'Release notes:\n', '* Framworking changing to Factory v0.3.3 usage\n', '\\******************************************************************************/\n', '\n', 'pragma solidity ^0.4.13;\n', '\n', 'contract RegBaseAbstract\n', '{\n', '    /// @dev A static identifier, set in the constructor and used for registrar\n', '    /// lookup\n', '    /// @return Registrar name SandalStraps registrars\n', '    bytes32 public regName;\n', '\n', '    /// @dev An general purpose resource such as short text or a key to a\n', '    /// string in a StringsMap\n', '    /// @return resource\n', '    bytes32 public resource;\n', '    \n', '    /// @dev An address permissioned to enact owner restricted functions\n', '    /// @return owner\n', '    address public owner;\n', '    \n', '    /// @dev An address permissioned to take ownership of the contract\n', '    /// @return newOwner\n', '    address public newOwner;\n', '\n', '//\n', '// Events\n', '//\n', '\n', '    /// @dev Triggered on initiation of change owner address\n', '    event ChangeOwnerTo(address indexed _newOwner);\n', '\n', '    /// @dev Triggered on change of owner address\n', '    event ChangedOwner(address indexed _oldOwner, address indexed _newOwner);\n', '\n', '    /// @dev Triggered when the contract accepts ownership of another contract.\n', '    event ReceivedOwnership(address indexed _kAddr);\n', '\n', '    /// @dev Triggered on change of resource\n', '    event ChangedResource(bytes32 indexed _resource);\n', '\n', '//\n', '// Function Abstracts\n', '//\n', '\n', '    /// @notice Will selfdestruct the contract\n', '    function destroy() public;\n', '\n', '    /// @notice Initiate a change of owner to `_owner`\n', '    /// @param _owner The address to which ownership is to be transfered\n', '    function changeOwner(address _owner) public returns (bool);\n', '\n', '    /// @notice Finalise change of ownership to newOwner\n', '    function acceptOwnership() public returns (bool);\n', '\n', '    /// @notice Change the resource to `_resource`\n', '    /// @param _resource A key or short text to be stored as the resource.\n', '    function changeResource(bytes32 _resource) public returns (bool);\n', '}\n', '\n', '\n', 'contract RegBase is RegBaseAbstract\n', '{\n', '//\n', '// Constants\n', '//\n', '\n', '    bytes32 constant public VERSION = "RegBase v0.3.3";\n', '\n', '//\n', '// State Variables\n', '//\n', '\n', '    // Declared in RegBaseAbstract for reasons that an inherited abstract\n', '    // function is not seen as implimented by a public state identifier of\n', '    // the same name.\n', '    \n', '//\n', '// Modifiers\n', '//\n', '\n', '    // Permits only the owner\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '//\n', '// Functions\n', '//\n', '\n', '    /// @param _creator The calling address passed through by a factory,\n', '    /// typically msg.sender\n', '    /// @param _regName A static name referenced by a Registrar\n', '    /// @param _owner optional owner address if creator is not the intended\n', '    /// owner\n', '    /// @dev On 0x0 value for owner, ownership precedence is:\n', '    /// `_owner` else `_creator` else msg.sender\n', '    function RegBase(address _creator, bytes32 _regName, address _owner)\n', '    {\n', '        require(_regName != 0x0);\n', '        regName = _regName;\n', '        owner = _owner != 0x0 ? _owner : \n', '                _creator != 0x0 ? _creator : msg.sender;\n', '    }\n', '    \n', '    /// @notice Will selfdestruct the contract\n', '    function destroy()\n', '        public\n', '        onlyOwner\n', '    {\n', '        selfdestruct(msg.sender);\n', '    }\n', '    \n', '    /// @notice Initiate a change of owner to `_owner`\n', '    /// @param _owner The address to which ownership is to be transfered\n', '    function changeOwner(address _owner)\n', '        public\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        ChangeOwnerTo(_owner);\n', '        newOwner = _owner;\n', '        return true;\n', '    }\n', '    \n', '    /// @notice Finalise change of ownership to newOwner\n', '    function acceptOwnership()\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(msg.sender == newOwner);\n', '        ChangedOwner(owner, msg.sender);\n', '        owner = newOwner;\n', '        delete newOwner;\n', '        return true;\n', '    }\n', '\n', '    /// @notice Change the resource to `_resource`\n', '    /// @param _resource A key or short text to be stored as the resource.\n', '    function changeResource(bytes32 _resource)\n', '        public\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        resource = _resource;\n', '        ChangedResource(_resource);\n', '        return true;\n', '    }\n', '}\n', '\n', '/******************************************************************************\\\n', '\n', 'file:   Factory.sol\n', 'ver:    0.3.3\n', 'updated:12-Sep-2017\n', 'author: Darryl Morris (o0ragman0o)\n', 'email:  o0ragman0o AT gmail.com\n', '\n', 'This file is part of the SandalStraps framework\n', '\n', 'Factories are a core but independant concept of the SandalStraps framework and \n', "can be used to create SandalStraps compliant 'product' contracts from embed\n", 'bytecode.\n', '\n', 'The abstract Factory contract is to be used as a SandalStraps compliant base for\n', 'product specific factories which must impliment the createNew() function.\n', '\n', 'is itself compliant with `Registrar` by inhereting `RegBase` and\n', 'compiant with `Factory` through the `createNew(bytes32 _name, address _owner)`\n', 'API.\n', '\n', 'An optional creation fee can be set and manually collected by the owner.\n', '\n', 'This software is distributed in the hope that it will be useful,\n', 'but WITHOUT ANY WARRANTY; without even the implied warranty of\n', 'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  \n', 'See MIT Licence for further details.\n', '<https://opensource.org/licenses/MIT>.\n', '\n', 'Release Notes\n', '-------------\n', '* Changed from`withdaw(<value>)` to `withdrawAll()`\n', '\\******************************************************************************/\n', '\n', 'pragma solidity ^0.4.13;\n', '\n', '// import "./RegBase.sol";\n', '\n', 'contract Factory is RegBase\n', '{\n', '//\n', '// Constants\n', '//\n', '\n', '    // Deriving factories should have `bytes32 constant public regName` being\n', '    // the product\'s contract name, e.g for products "Foo":\n', '    // bytes32 constant public regName = "Foo";\n', '\n', '    // Deriving factories should have `bytes32 constant public VERSION` being\n', "    // the product's contract name appended with 'Factory` and the version\n", '    // of the product, e.g for products "Foo":\n', '    // bytes32 constant public VERSION "FooFactory 0.0.1";\n', '\n', '//\n', '// State Variables\n', '//\n', '\n', '    /// @return The payment in wei required to create the product contract.\n', '    uint public value;\n', '\n', '//\n', '// Events\n', '//\n', '\n', '    // Is triggered when a product is created\n', '    event Created(address indexed _creator, bytes32 indexed _regName, address indexed _addr);\n', '\n', '//\n', '// Modifiers\n', '//\n', '\n', '    // To check that the correct fee has bene paid\n', '    modifier feePaid() {\n', '        require(msg.value == value || msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '//\n', '// Functions\n', '//\n', '\n', '    /// @param _creator The calling address passed through by a factory,\n', '    /// typically msg.sender\n', '    /// @param _regName A static name referenced by a Registrar\n', '    /// @param _owner optional owner address if creator is not the intended\n', '    /// owner\n', '    /// @dev On 0x0 value for _owner or _creator, ownership precedence is:\n', '    /// `_owner` else `_creator` else msg.sender\n', '    function Factory(address _creator, bytes32 _regName, address _owner)\n', '        RegBase(_creator, _regName, _owner)\n', '    {\n', '        // nothing left to construct\n', '    }\n', '    \n', '    /// @notice Set the product creation fee\n', '    /// @param _fee The desired fee in wei\n', '    function set(uint _fee) \n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        value = _fee;\n', '        return true;\n', '    }\n', '\n', '    /// @notice Send contract balance to `owner`\n', '    function withdrawAll()\n', '        public\n', '        returns (bool)\n', '    {\n', '        owner.transfer(this.balance);\n', '        return true;\n', '    }\n', '\n', '    /// @notice Create a new product contract\n', '    /// @param _regName A unique name if the the product is to be registered in\n', '    /// a SandalStraps registrar\n', '    /// @param _owner An address of a third party owner.  Will default to\n', '    /// msg.sender if 0x0\n', '    /// @return kAddr_ The address of the new product contract\n', '    function createNew(bytes32 _regName, address _owner) \n', '        payable returns(address kAddr_);\n', '}\n', '\n', '/******************************************************************************\\\n', '\n', 'file:   Forwarder.sol\n', 'ver:    0.3.0\n', 'updated:4-Oct-2017\n', 'author: Darryl Morris (o0ragman0o)\n', 'email:  o0ragman0o AT gmail.com\n', '\n', 'This file is part of the SandalStraps framework\n', '\n', 'Forwarder acts as a proxy address for payment pass-through.\n', '\n', 'This software is distributed in the hope that it will be useful,\n', 'but WITHOUT ANY WARRANTY; without even the implied warranty of\n', 'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  \n', 'See MIT Licence for further details.\n', '<https://opensource.org/licenses/MIT>.\n', '\n', 'Release Notes\n', '-------------\n', "* Name change from 'Redirector' to 'Forwarder'\n", "* Changes state name from 'payTo' to 'forwardTo'\n", '\n', '\\******************************************************************************/\n', '\n', 'pragma solidity ^0.4.13;\n', '\n', '// import "https://github.com/o0ragman0o/SandalStraps/contracts/Factory.sol";\n', '\n', 'contract Forwarder is RegBase {\n', '//\n', '// Constants\n', '//\n', '\n', '    bytes32 constant public VERSION = "Forwarder v0.3.0";\n', '\n', '//\n', '// State\n', '//\n', '\n', '    address public forwardTo;\n', '    \n', '//\n', '// Events\n', '//\n', '    \n', '    event Forwarded(\n', '        address indexed _from,\n', '        address indexed _to,\n', '        uint _value);\n', '\n', '//\n', '// Functions\n', '//\n', '\n', '    function Forwarder(address _creator, bytes32 _regName, address _owner)\n', '        public\n', '        RegBase(_creator, _regName, _owner)\n', '    {\n', '        // forwardTo will be set to msg.sender of if _owner == 0x0 or _owner\n', '        // otherwise\n', '        forwardTo = owner;\n', '    }\n', '    \n', '    function ()\n', '        public\n', '        payable \n', '    {\n', '        Forwarded(msg.sender, forwardTo, msg.value);\n', '        require(forwardTo.call.value(msg.value)(msg.data));\n', '    }\n', '    \n', '    function changeForwardTo(address _forwardTo)\n', '        public\n', '        returns (bool)\n', '    {\n', '        // Only owner or forwarding address can change forwarding address \n', '        require(msg.sender == owner || msg.sender == forwardTo);\n', '        forwardTo = _forwardTo;\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', 'contract ForwarderFactory is Factory\n', '{\n', '//\n', '// Constants\n', '//\n', '\n', '    /// @return registrar name\n', '    bytes32 constant public regName = "forwarder";\n', '    \n', '    /// @return version string\n', '    bytes32 constant public VERSION = "ForwarderFactory v0.3.0";\n', '\n', '//\n', '// Functions\n', '//\n', '\n', '    /// @param _creator The calling address passed through by a factory,\n', '    /// typically msg.sender\n', '    /// @param _regName A static name referenced by a Registrar\n', '    /// @param _owner optional owner address if creator is not the intended\n', '    /// owner\n', '    /// @dev On 0x0 value for _owner or _creator, ownership precedence is:\n', '    /// `_owner` else `_creator` else msg.sender\n', '    function ForwarderFactory(\n', '            address _creator, bytes32 _regName, address _owner) public\n', '        Factory(_creator, regName, _owner)\n', '    {\n', '        // _regName is ignored as `regName` is already a constant\n', '        // nothing to construct\n', '    }\n', '\n', '    /// @notice Create a new product contract\n', '    /// @param _regName A unique name if the the product is to be registered in\n', '    /// a SandalStraps registrar\n', '    /// @param _owner An address of a third party owner.  Will default to\n', '    /// msg.sender if 0x0\n', '    /// @return kAddr_ The address of the new product contract\n', '    function createNew(bytes32 _regName, address _owner)\n', '        public\n', '        payable\n', '        feePaid\n', '        returns (address kAddr_)\n', '    {\n', '        kAddr_ = address(new Forwarder(msg.sender, _regName, _owner));\n', '        Created(msg.sender, _regName, kAddr_);\n', '    }\n', '}']
