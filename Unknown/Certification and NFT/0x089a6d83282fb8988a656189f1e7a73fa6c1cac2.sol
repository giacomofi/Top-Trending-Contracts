['pragma solidity ^0.4.14;\n', '\n', 'contract ERC20 {\n', '    function totalSupply() constant returns (uint supply);\n', '    function balanceOf( address who ) constant returns (uint value);\n', '    function allowance( address owner, address spender ) constant returns (uint _allowance);\n', '\n', '    function transfer( address to, uint value) returns (bool ok);\n', '    function transferFrom( address from, address to, uint value) returns (bool ok);\n', '    function approve( address spender, uint value ) returns (bool ok);\n', '\n', '    event Transfer( address indexed from, address indexed to, uint value);\n', '    event Approval( address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'contract DSMath {\n', '    \n', '    /*\n', '    standard uint256 functions\n', '     */\n', '\n', '    function add(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        assert((z = x + y) >= x);\n', '    }\n', '\n', '    function sub(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        assert((z = x - y) <= x);\n', '    }\n', '\n', '    function mul(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        assert((z = x * y) >= x);\n', '    }\n', '\n', '    function div(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        z = x / y;\n', '    }\n', '\n', '    function min(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function max(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    /*\n', '    uint128 functions (h is for half)\n', '     */\n', '\n', '\n', '    function hadd(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        assert((z = x + y) >= x);\n', '    }\n', '\n', '    function hsub(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        assert((z = x - y) <= x);\n', '    }\n', '\n', '    function hmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        assert((z = x * y) >= x);\n', '    }\n', '\n', '    function hdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = x / y;\n', '    }\n', '\n', '    function hmin(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function hmax(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '\n', '    /*\n', '    int256 functions\n', '     */\n', '\n', '    function imin(int256 x, int256 y) constant internal returns (int256 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function imax(int256 x, int256 y) constant internal returns (int256 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    /*\n', '    WAD math\n', '     */\n', '\n', '    uint128 constant WAD = 10 ** 18;\n', '\n', '    function wadd(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hadd(x, y);\n', '    }\n', '\n', '    function wsub(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hsub(x, y);\n', '    }\n', '\n', '    function wmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = cast((uint256(x) * y + WAD / 2) / WAD);\n', '    }\n', '\n', '    function wdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = cast((uint256(x) * WAD + y / 2) / y);\n', '    }\n', '\n', '    function wmin(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hmin(x, y);\n', '    }\n', '    function wmax(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hmax(x, y);\n', '    }\n', '\n', '    /*\n', '    RAY math\n', '     */\n', '\n', '    uint128 constant RAY = 10 ** 27;\n', '\n', '    function radd(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hadd(x, y);\n', '    }\n', '\n', '    function rsub(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hsub(x, y);\n', '    }\n', '\n', '    function rmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = cast((uint256(x) * y + RAY / 2) / RAY);\n', '    }\n', '\n', '    function rdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = cast((uint256(x) * RAY + y / 2) / y);\n', '    }\n', '\n', '    function rpow(uint128 x, uint64 n) constant internal returns (uint128 z) {\n', '        // This famous algorithm is called "exponentiation by squaring"\n', '        // and calculates x^n with x as fixed-point and n as regular unsigned.\n', '        //\n', '        // It&#39;s O(log n), instead of O(n) for naive repeated multiplication.\n', '        //\n', '        // These facts are why it works:\n', '        //\n', '        //  If n is even, then x^n = (x^2)^(n/2).\n', '        //  If n is odd,  then x^n = x * x^(n-1),\n', '        //   and applying the equation for even x gives\n', '        //    x^n = x * (x^2)^((n-1) / 2).\n', '        //\n', '        //  Also, EVM division is flooring and\n', '        //    floor[(n-1) / 2] = floor[n / 2].\n', '\n', '        z = n % 2 != 0 ? x : RAY;\n', '\n', '        for (n /= 2; n != 0; n /= 2) {\n', '            x = rmul(x, x);\n', '\n', '            if (n % 2 != 0) {\n', '                z = rmul(z, x);\n', '            }\n', '        }\n', '    }\n', '\n', '    function rmin(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hmin(x, y);\n', '    }\n', '    function rmax(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hmax(x, y);\n', '    }\n', '\n', '    function cast(uint256 x) constant internal returns (uint128 z) {\n', '        assert((z = uint128(x)) == x);\n', '    }\n', '\n', '}\n', '\n', 'contract TokenBase is ERC20, DSMath {\n', '    uint256                                            _supply;\n', '    mapping (address => uint256)                       _balances;\n', '    mapping (address => mapping (address => uint256))  _approvals;\n', '\n', '    function totalSupply() constant returns (uint256) {\n', '        return _supply;\n', '    }\n', '    function balanceOf(address addr) constant returns (uint256) {\n', '        return _balances[addr];\n', '    }\n', '    function allowance(address from, address to) constant returns (uint256) {\n', '        return _approvals[from][to];\n', '    }\n', '    \n', '    function transfer(address to, uint value) returns (bool) {\n', '        assert(_balances[msg.sender] >= value);\n', '        \n', '        _balances[msg.sender] = sub(_balances[msg.sender], value);\n', '        _balances[to] = add(_balances[to], value);\n', '        \n', '        Transfer(msg.sender, to, value);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address from, address to, uint value) returns (bool) {\n', '        assert(_balances[from] >= value);\n', '        assert(_approvals[from][msg.sender] >= value);\n', '        \n', '        _approvals[from][msg.sender] = sub(_approvals[from][msg.sender], value);\n', '        _balances[from] = sub(_balances[from], value);\n', '        _balances[to] = add(_balances[to], value);\n', '        \n', '        Transfer(from, to, value);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function approve(address to, uint256 value) returns (bool) {\n', '        _approvals[msg.sender][to] = value;\n', '        \n', '        Approval(msg.sender, to, value);\n', '        \n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract Owned\n', '{\n', '    address public owner;\n', '    \n', '    function Owned()\n', '    {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    modifier onlyOwner()\n', '    {\n', '        if (msg.sender != owner) revert();\n', '        _;\n', '    }\n', '}\n', '\n', 'contract Migrable is TokenBase, Owned\n', '{\n', '    event Migrate(address indexed _from, address indexed _to, uint256 _value);\n', '    address public migrationAgent;\n', '    uint256 public totalMigrated;\n', '\n', '\n', '    function migrate() external {\n', '        migrate_participant(msg.sender);\n', '    }\n', '    \n', '    function migrate_participant(address _participant) internal\n', '    {\n', '        // Abort if not in Operational Migration state.\n', '        if (migrationAgent == 0)  revert();\n', '        if (_balances[_participant] == 0)  revert();\n', '        \n', '        uint256 _value = _balances[_participant];\n', '        _balances[_participant] = 0;\n', '        _supply = sub(_supply, _value);\n', '        totalMigrated = add(totalMigrated, _value);\n', '        MigrationAgent(migrationAgent).migrateFrom(_participant, _value);\n', '        Migrate(_participant, migrationAgent, _value);\n', '        \n', '    }\n', '\n', '    function setMigrationAgent(address _agent) onlyOwner external {\n', '        if (migrationAgent != 0)  revert();\n', '        migrationAgent = _agent;\n', '    }\n', '}\n', '\n', 'contract ProspectorsGoldToken is TokenBase, Owned, Migrable {\n', '    string public constant name = "Prospectors Gold";\n', '    string public constant symbol = "PGL";\n', '    uint8 public constant decimals = 18;  // 18 decimal places, the same as ETH.\n', '\n', '    address private game_address = 0xb1; // Address 0xb1 is provably non-transferrable. Game tokens will be moved to game platform after developing\n', '    uint public constant game_allocation = 110000000 * WAD; // Base allocation of tokens owned by game (50%). Not saled tokens will be moved to game balance.\n', '    uint public constant dev_allocation = 45000000 * WAD; //tokens allocated to prospectors team and developers (~20.5%)\n', '    uint public constant crowdfunding_allocation = 60000000 * WAD; //tokens allocated to crowdsale (~27.2%)\n', '    uint public constant bounty_allocation = 500000 * WAD; //tokens allocated to bounty program (~0.2%)\n', '    uint public constant presale_allocation = 4500000 * WAD; //tokens allocated to very early investors (~2%)\n', '\n', '    bool public locked = true; //token non transfarable yet. it can be unlocked after success crowdsale\n', '\n', '    address public bounty; //bounty tokens manager contract address\n', '    address public prospectors_dev_allocation; //prospectors team and developers tokens holder. Contract allows to get tokens in 5 periods (180, 360 days, 1, 2, 3 and 4 years)\n', '    ProspectorsCrowdsale public crowdsale; //crowdsale contract address\n', '\n', '    function ProspectorsGoldToken() {\n', '        _supply = 220000000 * WAD;\n', '        _balances[this] = _supply;\n', '        mint_for(game_address, game_allocation);\n', '    }\n', '    \n', '    //override and prevent transfer if crowdsale fails\n', '    function transfer(address to, uint value) returns (bool)\n', '    {\n', '        if (locked == true && msg.sender != address(crowdsale)) revert();\n', '        return super.transfer(to, value);\n', '    }\n', '    \n', '    //override and prevent transfer if crowdsale fails\n', '    function transferFrom(address from, address to, uint value)  returns (bool)\n', '    {\n', '        if (locked == true) revert();\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '    \n', '    //unlock transfers if crowdsale success\n', '    function unlock() returns (bool)\n', '    {\n', '        if (locked == true && crowdsale.is_success() == true)\n', '        {\n', '            locked = false;\n', '            return true;\n', '        }\n', '        else\n', '        {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    //mint tokens for crowdsale\n', '    function init_crowdsale(address _crowdsale) onlyOwner\n', '    {\n', '        if (address(0) != address(crowdsale)) revert();\n', '        crowdsale = ProspectorsCrowdsale(_crowdsale);\n', '        mint_for(crowdsale, crowdfunding_allocation);\n', '    }\n', '    \n', '    //mint tokens for bounty contract.\n', '    function init_bounty_program(address _bounty) onlyOwner\n', '    {\n', '        if (address(0) != address(bounty)) revert();\n', '        bounty = _bounty;\n', '        mint_for(bounty, bounty_allocation);\n', '    }\n', '    \n', '    //mint tokens for dev. Also mint tokens for very early investors.\n', '    function init_dev_and_presale_allocation(address presale_token_address, address _prospectors_dev_allocation) onlyOwner\n', '    {\n', '        if (address(0) != prospectors_dev_allocation) revert();\n', '        prospectors_dev_allocation = _prospectors_dev_allocation;\n', '        mint_for(prospectors_dev_allocation, dev_allocation);\n', '        mint_for(presale_token_address, presale_allocation);\n', '    }\n', '    \n', '    //this function will be called after game release\n', '    function migrate_game_balance() onlyOwner\n', '    {\n', '        migrate_participant(game_address);\n', '    }\n', '    \n', '    //adding tokens to crowdsale, bounty, game and prospectors team\n', '    function mint_for(address addr, uint amount) private\n', '    {\n', '        if (_balances[this] >= amount)\n', '        {\n', '            _balances[this] = sub(_balances[this], amount);\n', '            _balances[addr] = add(_balances[addr], amount);\n', '            Transfer(this, addr, amount);\n', '        }\n', '    }\n', '}\n', '\n', 'contract ProspectorsCrowdsale {\n', '    function is_success() returns (bool);\n', '}\n', '\n', 'contract MigrationAgent {\n', '    function migrateFrom(address _from, uint256 _value);\n', '}']
['pragma solidity ^0.4.14;\n', '\n', 'contract ERC20 {\n', '    function totalSupply() constant returns (uint supply);\n', '    function balanceOf( address who ) constant returns (uint value);\n', '    function allowance( address owner, address spender ) constant returns (uint _allowance);\n', '\n', '    function transfer( address to, uint value) returns (bool ok);\n', '    function transferFrom( address from, address to, uint value) returns (bool ok);\n', '    function approve( address spender, uint value ) returns (bool ok);\n', '\n', '    event Transfer( address indexed from, address indexed to, uint value);\n', '    event Approval( address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'contract DSMath {\n', '    \n', '    /*\n', '    standard uint256 functions\n', '     */\n', '\n', '    function add(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        assert((z = x + y) >= x);\n', '    }\n', '\n', '    function sub(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        assert((z = x - y) <= x);\n', '    }\n', '\n', '    function mul(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        assert((z = x * y) >= x);\n', '    }\n', '\n', '    function div(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        z = x / y;\n', '    }\n', '\n', '    function min(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function max(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    /*\n', '    uint128 functions (h is for half)\n', '     */\n', '\n', '\n', '    function hadd(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        assert((z = x + y) >= x);\n', '    }\n', '\n', '    function hsub(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        assert((z = x - y) <= x);\n', '    }\n', '\n', '    function hmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        assert((z = x * y) >= x);\n', '    }\n', '\n', '    function hdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = x / y;\n', '    }\n', '\n', '    function hmin(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function hmax(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '\n', '    /*\n', '    int256 functions\n', '     */\n', '\n', '    function imin(int256 x, int256 y) constant internal returns (int256 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function imax(int256 x, int256 y) constant internal returns (int256 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    /*\n', '    WAD math\n', '     */\n', '\n', '    uint128 constant WAD = 10 ** 18;\n', '\n', '    function wadd(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hadd(x, y);\n', '    }\n', '\n', '    function wsub(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hsub(x, y);\n', '    }\n', '\n', '    function wmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = cast((uint256(x) * y + WAD / 2) / WAD);\n', '    }\n', '\n', '    function wdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = cast((uint256(x) * WAD + y / 2) / y);\n', '    }\n', '\n', '    function wmin(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hmin(x, y);\n', '    }\n', '    function wmax(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hmax(x, y);\n', '    }\n', '\n', '    /*\n', '    RAY math\n', '     */\n', '\n', '    uint128 constant RAY = 10 ** 27;\n', '\n', '    function radd(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hadd(x, y);\n', '    }\n', '\n', '    function rsub(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hsub(x, y);\n', '    }\n', '\n', '    function rmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = cast((uint256(x) * y + RAY / 2) / RAY);\n', '    }\n', '\n', '    function rdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = cast((uint256(x) * RAY + y / 2) / y);\n', '    }\n', '\n', '    function rpow(uint128 x, uint64 n) constant internal returns (uint128 z) {\n', '        // This famous algorithm is called "exponentiation by squaring"\n', '        // and calculates x^n with x as fixed-point and n as regular unsigned.\n', '        //\n', "        // It's O(log n), instead of O(n) for naive repeated multiplication.\n", '        //\n', '        // These facts are why it works:\n', '        //\n', '        //  If n is even, then x^n = (x^2)^(n/2).\n', '        //  If n is odd,  then x^n = x * x^(n-1),\n', '        //   and applying the equation for even x gives\n', '        //    x^n = x * (x^2)^((n-1) / 2).\n', '        //\n', '        //  Also, EVM division is flooring and\n', '        //    floor[(n-1) / 2] = floor[n / 2].\n', '\n', '        z = n % 2 != 0 ? x : RAY;\n', '\n', '        for (n /= 2; n != 0; n /= 2) {\n', '            x = rmul(x, x);\n', '\n', '            if (n % 2 != 0) {\n', '                z = rmul(z, x);\n', '            }\n', '        }\n', '    }\n', '\n', '    function rmin(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hmin(x, y);\n', '    }\n', '    function rmax(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hmax(x, y);\n', '    }\n', '\n', '    function cast(uint256 x) constant internal returns (uint128 z) {\n', '        assert((z = uint128(x)) == x);\n', '    }\n', '\n', '}\n', '\n', 'contract TokenBase is ERC20, DSMath {\n', '    uint256                                            _supply;\n', '    mapping (address => uint256)                       _balances;\n', '    mapping (address => mapping (address => uint256))  _approvals;\n', '\n', '    function totalSupply() constant returns (uint256) {\n', '        return _supply;\n', '    }\n', '    function balanceOf(address addr) constant returns (uint256) {\n', '        return _balances[addr];\n', '    }\n', '    function allowance(address from, address to) constant returns (uint256) {\n', '        return _approvals[from][to];\n', '    }\n', '    \n', '    function transfer(address to, uint value) returns (bool) {\n', '        assert(_balances[msg.sender] >= value);\n', '        \n', '        _balances[msg.sender] = sub(_balances[msg.sender], value);\n', '        _balances[to] = add(_balances[to], value);\n', '        \n', '        Transfer(msg.sender, to, value);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address from, address to, uint value) returns (bool) {\n', '        assert(_balances[from] >= value);\n', '        assert(_approvals[from][msg.sender] >= value);\n', '        \n', '        _approvals[from][msg.sender] = sub(_approvals[from][msg.sender], value);\n', '        _balances[from] = sub(_balances[from], value);\n', '        _balances[to] = add(_balances[to], value);\n', '        \n', '        Transfer(from, to, value);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function approve(address to, uint256 value) returns (bool) {\n', '        _approvals[msg.sender][to] = value;\n', '        \n', '        Approval(msg.sender, to, value);\n', '        \n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract Owned\n', '{\n', '    address public owner;\n', '    \n', '    function Owned()\n', '    {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    modifier onlyOwner()\n', '    {\n', '        if (msg.sender != owner) revert();\n', '        _;\n', '    }\n', '}\n', '\n', 'contract Migrable is TokenBase, Owned\n', '{\n', '    event Migrate(address indexed _from, address indexed _to, uint256 _value);\n', '    address public migrationAgent;\n', '    uint256 public totalMigrated;\n', '\n', '\n', '    function migrate() external {\n', '        migrate_participant(msg.sender);\n', '    }\n', '    \n', '    function migrate_participant(address _participant) internal\n', '    {\n', '        // Abort if not in Operational Migration state.\n', '        if (migrationAgent == 0)  revert();\n', '        if (_balances[_participant] == 0)  revert();\n', '        \n', '        uint256 _value = _balances[_participant];\n', '        _balances[_participant] = 0;\n', '        _supply = sub(_supply, _value);\n', '        totalMigrated = add(totalMigrated, _value);\n', '        MigrationAgent(migrationAgent).migrateFrom(_participant, _value);\n', '        Migrate(_participant, migrationAgent, _value);\n', '        \n', '    }\n', '\n', '    function setMigrationAgent(address _agent) onlyOwner external {\n', '        if (migrationAgent != 0)  revert();\n', '        migrationAgent = _agent;\n', '    }\n', '}\n', '\n', 'contract ProspectorsGoldToken is TokenBase, Owned, Migrable {\n', '    string public constant name = "Prospectors Gold";\n', '    string public constant symbol = "PGL";\n', '    uint8 public constant decimals = 18;  // 18 decimal places, the same as ETH.\n', '\n', '    address private game_address = 0xb1; // Address 0xb1 is provably non-transferrable. Game tokens will be moved to game platform after developing\n', '    uint public constant game_allocation = 110000000 * WAD; // Base allocation of tokens owned by game (50%). Not saled tokens will be moved to game balance.\n', '    uint public constant dev_allocation = 45000000 * WAD; //tokens allocated to prospectors team and developers (~20.5%)\n', '    uint public constant crowdfunding_allocation = 60000000 * WAD; //tokens allocated to crowdsale (~27.2%)\n', '    uint public constant bounty_allocation = 500000 * WAD; //tokens allocated to bounty program (~0.2%)\n', '    uint public constant presale_allocation = 4500000 * WAD; //tokens allocated to very early investors (~2%)\n', '\n', '    bool public locked = true; //token non transfarable yet. it can be unlocked after success crowdsale\n', '\n', '    address public bounty; //bounty tokens manager contract address\n', '    address public prospectors_dev_allocation; //prospectors team and developers tokens holder. Contract allows to get tokens in 5 periods (180, 360 days, 1, 2, 3 and 4 years)\n', '    ProspectorsCrowdsale public crowdsale; //crowdsale contract address\n', '\n', '    function ProspectorsGoldToken() {\n', '        _supply = 220000000 * WAD;\n', '        _balances[this] = _supply;\n', '        mint_for(game_address, game_allocation);\n', '    }\n', '    \n', '    //override and prevent transfer if crowdsale fails\n', '    function transfer(address to, uint value) returns (bool)\n', '    {\n', '        if (locked == true && msg.sender != address(crowdsale)) revert();\n', '        return super.transfer(to, value);\n', '    }\n', '    \n', '    //override and prevent transfer if crowdsale fails\n', '    function transferFrom(address from, address to, uint value)  returns (bool)\n', '    {\n', '        if (locked == true) revert();\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '    \n', '    //unlock transfers if crowdsale success\n', '    function unlock() returns (bool)\n', '    {\n', '        if (locked == true && crowdsale.is_success() == true)\n', '        {\n', '            locked = false;\n', '            return true;\n', '        }\n', '        else\n', '        {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    //mint tokens for crowdsale\n', '    function init_crowdsale(address _crowdsale) onlyOwner\n', '    {\n', '        if (address(0) != address(crowdsale)) revert();\n', '        crowdsale = ProspectorsCrowdsale(_crowdsale);\n', '        mint_for(crowdsale, crowdfunding_allocation);\n', '    }\n', '    \n', '    //mint tokens for bounty contract.\n', '    function init_bounty_program(address _bounty) onlyOwner\n', '    {\n', '        if (address(0) != address(bounty)) revert();\n', '        bounty = _bounty;\n', '        mint_for(bounty, bounty_allocation);\n', '    }\n', '    \n', '    //mint tokens for dev. Also mint tokens for very early investors.\n', '    function init_dev_and_presale_allocation(address presale_token_address, address _prospectors_dev_allocation) onlyOwner\n', '    {\n', '        if (address(0) != prospectors_dev_allocation) revert();\n', '        prospectors_dev_allocation = _prospectors_dev_allocation;\n', '        mint_for(prospectors_dev_allocation, dev_allocation);\n', '        mint_for(presale_token_address, presale_allocation);\n', '    }\n', '    \n', '    //this function will be called after game release\n', '    function migrate_game_balance() onlyOwner\n', '    {\n', '        migrate_participant(game_address);\n', '    }\n', '    \n', '    //adding tokens to crowdsale, bounty, game and prospectors team\n', '    function mint_for(address addr, uint amount) private\n', '    {\n', '        if (_balances[this] >= amount)\n', '        {\n', '            _balances[this] = sub(_balances[this], amount);\n', '            _balances[addr] = add(_balances[addr], amount);\n', '            Transfer(this, addr, amount);\n', '        }\n', '    }\n', '}\n', '\n', 'contract ProspectorsCrowdsale {\n', '    function is_success() returns (bool);\n', '}\n', '\n', 'contract MigrationAgent {\n', '    function migrateFrom(address _from, uint256 _value);\n', '}']
