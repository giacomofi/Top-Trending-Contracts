['pragma solidity ^0.4.13;\n', '\n', 'contract Latium {\n', '    string public constant name = "Latium";\n', '    string public constant symbol = "LAT";\n', '    uint8 public constant decimals = 16;\n', '    uint256 public constant totalSupply =\n', '        30000000 * 10 ** uint256(decimals);\n', '\n', '    // owner of this contract\n', '    address public owner;\n', '\n', '    // balances for each account\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '    // triggered when tokens are transferred\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '\n', '    // constructor\n', '    function Latium() {\n', '        owner = msg.sender;\n', '        balanceOf[owner] = totalSupply;\n', '    }\n', '\n', '    // transfer the balance from sender&#39;s account to another one\n', '    function transfer(address _to, uint256 _value) {\n', '        // prevent transfer to 0x0 address\n', '        require(_to != 0x0);\n', '        // sender and recipient should be different\n', '        require(msg.sender != _to);\n', '        // check if the sender has enough coins\n', '        require(_value > 0 && balanceOf[msg.sender] >= _value);\n', '        // check for overflows\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // subtract coins from sender&#39;s account\n', '        balanceOf[msg.sender] -= _value;\n', '        // add coins to recipient&#39;s account\n', '        balanceOf[_to] += _value;\n', '        // notify listeners about this transfer\n', '        Transfer(msg.sender, _to, _value);\n', '    }\n', '}\n', '\n', 'contract LatiumSeller {\n', '    address private constant _latiumAddress = 0xBb31037f997553BEc50510a635d231A35F8EC640;\n', '    Latium private constant _latium = Latium(_latiumAddress);\n', '\n', '    // amount of Ether collected from buyers and not withdrawn yet\n', '    uint256 private _etherAmount = 0;\n', '\n', '    // sale settings\n', '    uint256 private constant _tokenPrice = 10 finney; // 0.01 Ether\n', '    uint256 private _minimumPurchase =\n', '        10 * 10 ** uint256(_latium.decimals()); // 10 Latium\n', '\n', '    // owner of this contract\n', '    address public owner;\n', '\n', '    // constructor\n', '    function LatiumSeller() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function tokenPrice() constant returns(uint256 tokenPrice) {\n', '        return _tokenPrice;\n', '    }\n', '\n', '    function minimumPurchase() constant returns(uint256 minimumPurchase) {\n', '        return _minimumPurchase;\n', '    }\n', '\n', '    // function to get current Latium balance of this contract\n', '    function _tokensToSell() private returns (uint256 tokensToSell) {\n', '        return _latium.balanceOf(address(this));\n', '    }\n', '\n', '    // function without name is the default function that is called\n', '    // whenever anyone sends funds to a contract\n', '    function () payable {\n', '        // we shouldn&#39;t sell tokens to their owner\n', '        require(msg.sender != owner && msg.sender != address(this));\n', '        // check if we have tokens to sell\n', '        uint256 tokensToSell = _tokensToSell();\n', '        require(tokensToSell > 0);\n', '        // calculate amount of tokens that can be bought\n', '        // with this amount of Ether\n', '        // NOTE: make multiplication first; otherwise we can lose\n', '        // fractional part after division\n', '        uint256 tokensToBuy =\n', '            msg.value * 10 ** uint256(_latium.decimals()) / _tokenPrice;\n', '        // check if user&#39;s purchase is above the minimum\n', '        require(tokensToBuy >= _minimumPurchase);\n', '        // check if we have enough tokens to sell\n', '        require(tokensToBuy <= tokensToSell);\n', '        _etherAmount += msg.value;\n', '        _latium.transfer(msg.sender, tokensToBuy);\n', '    }\n', '\n', '    // functions with this modifier can only be executed by the owner\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    // function to withdraw Ether to owner&#39;s account\n', '    function withdrawEther(uint256 _amount) onlyOwner {\n', '        if (_amount == 0) {\n', '            // withdraw all available Ether\n', '            _amount = _etherAmount;\n', '        }\n', '        require(_amount > 0 && _etherAmount >= _amount);\n', '        _etherAmount -= _amount;\n', '        msg.sender.transfer(_amount);\n', '    }\n', '\n', '    // function to withdraw Latium to owner&#39;s account\n', '    function withdrawLatium(uint256 _amount) onlyOwner {\n', '        uint256 availableLatium = _tokensToSell();\n', '        require(availableLatium > 0);\n', '        if (_amount == 0) {\n', '            // withdraw all available Latium\n', '            _amount = availableLatium;\n', '        }\n', '        require(availableLatium >= _amount);\n', '        _latium.transfer(msg.sender, _amount);\n', '    }\n', '}']