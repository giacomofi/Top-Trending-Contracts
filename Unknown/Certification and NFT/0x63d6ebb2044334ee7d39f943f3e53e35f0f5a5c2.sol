['pragma solidity 0.4.11;\n', '\n', '/**\n', ' * Copyright 2017 Nodalblock http://nodalblock.com\n', ' *\n', ' * Licensed under the Apache License, Version 2.0 (the "License");\n', ' * you may not use this file except in compliance with the License.\n', ' * You may obtain a copy of the License at\n', ' *\n', ' *     http://www.apache.org/licenses/LICENSE-2.0\n', ' *\n', ' * Unless required by applicable law or agreed to in writing, software\n', ' * distributed under the License is distributed on an "AS IS" BASIS,\n', ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', ' * See the License for the specific language governing permissions and\n', ' * limitations under the License.\n', ' */\n', '\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        if (msg.sender != owner) throw;\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'library strUtils {\n', '    string constant NODALBLOCK_JSON_ID = \'"id":"NODALBLOCK"\';\n', '    uint8 constant NODALBLOCK_JSON_MIN_LEN = 32;\n', '\n', '    function toBase58(uint256 _value, uint8 _maxLength) internal returns (string) {\n', '        string memory letters = "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ";\n', '        bytes memory alphabet = bytes(letters);\n', '        uint8 base = 58;\n', '        uint8 len = 0;\n', '        uint256 remainder = 0;\n', '        bool needBreak = false;\n', '        bytes memory bytesReversed = bytes(new string(_maxLength));\n', '\n', '        for (uint8 i = 0; i < _maxLength; i++) {\n', '            if(_value < base){\n', '                needBreak = true;\n', '            }\n', '            remainder = _value % base;\n', '            _value = uint256(_value / base);\n', '            bytesReversed[i] = alphabet[remainder];\n', '            len++;\n', '            if(needBreak){\n', '                break;\n', '            }\n', '        }\n', '\n', '        // Reverse\n', '        bytes memory result = bytes(new string(len));\n', '        for (i = 0; i < len; i++) {\n', '            result[i] = bytesReversed[len - i - 1];\n', '        }\n', '        return string(result);\n', '    }\n', '\n', '    function concat(string _s1, string _s2) internal returns (string) {\n', '        bytes memory bs1 = bytes(_s1);\n', '        bytes memory bs2 = bytes(_s2);\n', '        string memory s3 = new string(bs1.length + bs2.length);\n', '        bytes memory bs3 = bytes(s3);\n', '\n', '        uint256 j = 0;\n', '        for (uint256 i = 0; i < bs1.length; i++) {\n', '            bs3[j++] = bs1[i];\n', '        }\n', '        for (i = 0; i < bs2.length; i++) {\n', '            bs3[j++] = bs2[i];\n', '        }\n', '\n', '        return string(bs3);\n', '    }\n', '\n', '\n', '    function isValidNodalblockJson(string _json) internal returns (bool) {\n', '        bytes memory json = bytes(_json);\n', '        bytes memory id = bytes(NODALBLOCK_JSON_ID);\n', '\n', '        if (json.length < NODALBLOCK_JSON_MIN_LEN) {\n', '            return false;\n', '        } else {\n', '            uint len = 0;\n', '            if (json[1] == id[0]) {\n', '                len = 1;\n', '                while (len < id.length && (1 + len) < json.length && json[1 + len] == id[len]) {\n', '                    len++;\n', '                }\n', '                if (len == id.length) {\n', '                    return true;\n', '                }\n', '            }\n', '        }\n', '\n', '        return false;\n', '    }\n', '}\n', '\n', 'contract Nodalblock is owned {\n', '\n', '    string  NODALBLOCK_URL;\n', '\n', '    // Configuration\n', '    mapping(string => uint256) private nodalblockConfig;\n', '\n', '    // Service accounts\n', '    mapping (address => bool) private srvAccount;\n', '\n', '    // Fee receiver\n', '    address private receiverAddress;\n', '\n', '    struct data {uint256 timestamp; string json; address sender;}\n', '    mapping (string => data) private nodalblock;\n', '\n', '    event nodalblockShortLink(uint256 timestamp, string code);\n', '\n', '    // Constructor\n', '    function Nodalblock(){\n', '        setConfig("fee", 0);\n', '        setConfig("blockoffset", 2000000);\n', '        setNodalblockURL("http://nodalblock.com/");\n', '    }\n', '\n', '    function setNodalblockURL(string _url) onlyOwner {\n', '        NODALBLOCK_URL = _url;\n', '    }\n', '\n', '    function getNodalblockURL() constant returns(string){\n', '        return NODALBLOCK_URL;\n', '    }\n', '\n', '    function setConfig(string _key, uint256 _value) onlyOwner {\n', '        nodalblockConfig[_key] = _value;\n', '    }\n', '\n', '    function getConfig(string _key) constant returns (uint256 _value) {\n', '        return nodalblockConfig[_key];\n', '    }\n', '\n', '    function setServiceAccount(address _address, bool _value) onlyOwner {\n', '        srvAccount[_address] = _value;\n', '    }\n', '    function setReceiverAddress(address _address) onlyOwner {\n', '        receiverAddress = _address;\n', '    }\n', '\n', '    function releaseFunds() onlyOwner {\n', '        if(!owner.send(this.balance)) throw;\n', '    }\n', '\n', '    function addNodalblockData(string json) {\n', '        checkFormat(json);\n', '\n', '        var code = generateShortLink();\n', '        // Checks if the record exist\n', '        if (getNodalblockTimestamp(code) > 0) throw;\n', '\n', '        processFee();\n', '        nodalblock[code] = data({\n', '            timestamp: block.timestamp,\n', '            json: json,\n', '            sender: tx.origin\n', '        });\n', '\n', '        // Fire event\n', '        var link = strUtils.concat(NODALBLOCK_URL, code);\n', '        nodalblockShortLink(block.timestamp, link);\n', '    }\n', '\n', '    function getNodalblockTimestamp(string code) constant returns (uint256) {\n', '        return nodalblock[code].timestamp;\n', '    }\n', '\n', '    function getNodalblockData(string code) constant returns (string) {\n', '        return nodalblock[code].json;\n', '    }\n', '\n', '    function getNodalblockSender(string code) constant returns (address) {\n', '        return nodalblock[code].sender;\n', '    }\n', '\n', '    function processFee() internal {\n', '        var fee = getConfig("fee");\n', '        if (srvAccount[msg.sender] || (fee == 0)) return;\n', '\n', '        if (msg.value < fee)\n', '            throw;\n', '        else\n', '            if (!receiverAddress.send(fee)) throw;\n', '    }\n', '    function checkFormat(string json) internal {\n', '        if (!strUtils.isValidNodalblockJson(json)) throw;\n', '    }\n', '\n', '    function generateShortLink() internal returns (string) {\n', '        var s1 = strUtils.toBase58(block.number - getConfig("blockoffset"), 11);\n', '        var s2 = strUtils.toBase58(uint256(tx.origin), 2);\n', '\n', '        var s = strUtils.concat(s1, s2);\n', '        return s;\n', '    }\n', '\n', '}']