['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', 'contract MilitaryPay is StandardToken {\n', '\tusing SafeMath for uint256;\n', '\n', '    // EVENTS\n', '    event CreatedMTP(address indexed _creator, uint256 _amountOfMTP);\n', '\n', '\t\n', '\t// TOKEN DATA\n', '\tstring public constant name = "MilitaryPay";\n', '\tstring public constant symbol = "MTP";\n', '\tuint256 public constant decimals = 18;\n', '\tstring public version = "1.0";\n', '\n', '\t// MTP TOKEN PURCHASE LIMITS\n', '\tuint256 public maxPresaleSupply; \t\t\t\t\t\t\t\t\t\t\t\t\t\t// MAX TOTAL DURING PRESALE (0.8% of MAXTOTALSUPPLY)\n', '\n', '\t// PURCHASE DATES\n', '\tuint256 public constant preSaleStartTime = 1503130673; \t\t\t\t\t\t\t\t\t// GMT: Saturday, August 19, 2017 8:00:00 AM\n', '\tuint256 public constant preSaleEndTime = 1505894400; \t\t\t\t\t\t\t\t\t// GMT: Wednesday, September 20, 2017 8:00:00 AM\n', '\tuint256 public saleStartTime = 1509696000; \t\t\t\t\t\t\t\t\t\t\t\t// GMT: Friday, November 3, 2017 8:00:00 AM\n', '\tuint256 public saleEndTime = 1514707200; \t\t\t\t\t\t\t\t\t\t\t\t// GMT: Sunday, December 31, 2017 8:00:00 AM\n', '\n', '\n', '\t// PURCHASE BONUSES\n', '\tuint256 public lowEtherBonusLimit = 5 * 1 ether; \t\t\t\t\t\t\t\t\t\t// 5+ Ether\n', '\tuint256 public lowEtherBonusValue = 110;\t\t\t\t\t\t\t\t\t\t\t\t// 10% Discount\n', '\tuint256 public midEtherBonusLimit = 24 * 1 ether; \t\t\t\t\t\t\t\t\t\t// 24+ Ether\n', '\tuint256 public midEtherBonusValue = 115;\t\t\t\t\t\t\t\t\t\t\t\t// 15% Discount\n', '\tuint256 public highEtherBonusLimit = 50 * 1 ether; \t\t\t\t\t\t\t\t\t\t// 50+ Ether\n', '\tuint256 public highEtherBonusValue = 120; \t\t\t\t\t\t\t\t\t\t\t\t// 20% Discount\n', '\tuint256 public highTimeBonusLimit = 0; \t\t\t\t\t\t\t\t\t\t\t\t\t// 1-12 Days\n', '\tuint256 public highTimeBonusValue = 120; \t\t\t\t\t\t\t\t\t\t\t\t// 20% Discount\n', '\tuint256 public midTimeBonusLimit = 1036800; \t\t\t\t\t\t\t\t\t\t\t// 12-24 Days\n', '\tuint256 public midTimeBonusValue = 115; \t\t\t\t\t\t\t\t\t\t\t\t// 15% Discount\n', '\tuint256 public lowTimeBonusLimit = 2073600;\t\t\t\t\t\t\t\t\t\t\t\t// 24+ Days\n', '\tuint256 public lowTimeBonusValue = 110;\t\t\t\t\t\t\t\t\t\t\t\t\t// 10% Discount\n', '\n', '\t// PRICING INFO\n', '\tuint256 public constant MTP_PER_ETH_PRE_SALE = 4000;  \t\t\t\t\t\t\t\t// 4000 MTP = 1 ETH\n', '\tuint256 public constant MTP_PER_ETH_SALE = 2000;  \t\t\t\t\t\t\t\t\t// 2000 MTP = 1 ETH\n', '\t\n', '\t// ADDRESSES\n', '\taddress public constant ownerAddress = 0x144EFeF99F7F126987c2b5cCD717CF6eDad1E67d; \t\t// The owners address\n', '\n', '\t// STATE INFO\t\n', '\tbool public allowInvestment = true;\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Flag to change if transfering is allowed\n', '\tuint256 public totalWEIInvested = 0; \t\t\t\t\t\t\t\t\t\t\t\t\t// Total WEI invested\n', '\tuint256 public totalMTPAllocated = 0;\t\t\t\t\t\t\t\t\t\t\t\t// Total MTP allocated\n', '\tmapping (address => uint256) public WEIContributed; \t\t\t\t\t\t\t\t\t// Total WEI Per Account\n', '\n', '\n', '\t// INITIALIZATIONS FUNCTION\n', '\tfunction MTPToken() {\n', '\t\trequire(msg.sender == ownerAddress);\n', '\n', '\t\ttotalSupply = 631*1000000*1000000000000000000; \t\t\t\t\t\t\t\t\t\t// MAX TOTAL MTP 631 million\n', '\t\tuint256 totalMTPReserved = totalSupply.mul(55).div(100);\t\t\t\t\t\t\t// 55% reserved for MTP\n', '\t\tmaxPresaleSupply = totalSupply*8/1000 + totalMTPReserved; \t\t\t\t\t\t// MAX TOTAL DURING PRESALE (0.8% of MAXTOTALSUPPLY)\n', '\n', '\t\tbalances[msg.sender] = totalMTPReserved;\n', '\t\ttotalMTPAllocated = totalMTPReserved;\t\t\t\t\n', '\t}\n', '\n', '\n', '\t// FALL BACK FUNCTION TO ALLOW ETHER DONATIONS\n', '\tfunction() payable {\n', '\n', '\t\trequire(allowInvestment);\n', '\n', '\t\t// Smallest investment is 0.00001 ether\n', '\t\tuint256 amountOfWei = msg.value;\n', '\t\trequire(amountOfWei >= 10000000000000);\n', '\n', '\t\tuint256 amountOfMTP = 0;\n', '\t\tuint256 absLowTimeBonusLimit = 0;\n', '\t\tuint256 absMidTimeBonusLimit = 0;\n', '\t\tuint256 absHighTimeBonusLimit = 0;\n', '\t\tuint256 totalMTPAvailable = 0;\n', '\n', '\t\t// Investment periods\n', '\t\tif (block.timestamp > preSaleStartTime && block.timestamp < preSaleEndTime) {\n', '\t\t\t// Pre-sale ICO\n', '\t\t\tamountOfMTP = amountOfWei.mul(MTP_PER_ETH_PRE_SALE);\n', '\t\t\tabsLowTimeBonusLimit = preSaleStartTime + lowTimeBonusLimit;\n', '\t\t\tabsMidTimeBonusLimit = preSaleStartTime + midTimeBonusLimit;\n', '\t\t\tabsHighTimeBonusLimit = preSaleStartTime + highTimeBonusLimit;\n', '\t\t\ttotalMTPAvailable = maxPresaleSupply - totalMTPAllocated;\n', '\t\t} else if (block.timestamp > saleStartTime && block.timestamp < saleEndTime) {\n', '\t\t\t// ICO\n', '\t\t\tamountOfMTP = amountOfWei.mul(MTP_PER_ETH_SALE);\n', '\t\t\tabsLowTimeBonusLimit = saleStartTime + lowTimeBonusLimit;\n', '\t\t\tabsMidTimeBonusLimit = saleStartTime + midTimeBonusLimit;\n', '\t\t\tabsHighTimeBonusLimit = saleStartTime + highTimeBonusLimit;\n', '\t\t\ttotalMTPAvailable = totalSupply - totalMTPAllocated;\n', '\t\t} else {\n', '\t\t\t// Invalid investment period\n', '\t\t\trevert();\n', '\t\t}\n', '\n', '\t\t// Check that MTP calculated greater than zero\n', '\t\tassert(amountOfMTP > 0);\n', '\n', '\t\t// Apply Bonuses\n', '\t\tif (amountOfWei >= highEtherBonusLimit) {\n', '\t\t\tamountOfMTP = amountOfMTP.mul(highEtherBonusValue).div(100);\n', '\t\t} else if (amountOfWei >= midEtherBonusLimit) {\n', '\t\t\tamountOfMTP = amountOfMTP.mul(midEtherBonusValue).div(100);\n', '\t\t} else if (amountOfWei >= lowEtherBonusLimit) {\n', '\t\t\tamountOfMTP = amountOfMTP.mul(lowEtherBonusValue).div(100);\n', '\t\t}\n', '\t\tif (block.timestamp >= absLowTimeBonusLimit) {\n', '\t\t\tamountOfMTP = amountOfMTP.mul(lowTimeBonusValue).div(100);\n', '\t\t} else if (block.timestamp >= absMidTimeBonusLimit) {\n', '\t\t\tamountOfMTP = amountOfMTP.mul(midTimeBonusValue).div(100);\n', '\t\t} else if (block.timestamp >= absHighTimeBonusLimit) {\n', '\t\t\tamountOfMTP = amountOfMTP.mul(highTimeBonusValue).div(100);\n', '\t\t}\n', '\n', '\t\t// Max sure it doesn&#39;t exceed remaining supply\n', '\t\tassert(amountOfMTP <= totalMTPAvailable);\n', '\n', '\t\t// Update total MTP balance\n', '\t\ttotalMTPAllocated = totalMTPAllocated + amountOfMTP;\n', '\n', '\t\t// Update user MTP balance\n', '\t\tuint256 balanceSafe = balances[msg.sender].add(amountOfMTP);\n', '\t\tbalances[msg.sender] = balanceSafe;\n', '\n', '\t\t// Update total WEI Invested\n', '\t\ttotalWEIInvested = totalWEIInvested.add(amountOfWei);\n', '\n', '\t\t// Update total WEI Invested by account\n', '\t\tuint256 contributedSafe = WEIContributed[msg.sender].add(amountOfWei);\n', '\t\tWEIContributed[msg.sender] = contributedSafe;\n', '\n', '\t\t// CHECK VALUES\n', '\t\tassert(totalMTPAllocated <= totalSupply);\n', '\t\tassert(totalMTPAllocated > 0);\n', '\t\tassert(balanceSafe > 0);\n', '\t\tassert(totalWEIInvested > 0);\n', '\t\tassert(contributedSafe > 0);\n', '\n', '\t\t// CREATE EVENT FOR SENDER\n', '\t\tCreatedMTP(msg.sender, amountOfMTP);\n', '\t}\n', '\t\n', '\t\n', '\t// CHANGE PARAMETERS METHODS\n', '\tfunction transferEther(address addressToSendTo, uint256 value) {\n', '\t\trequire(msg.sender == ownerAddress);\n', '\t\taddressToSendTo.transfer(value);\n', '\t}\t\n', '\tfunction changeAllowInvestment(bool _allowInvestment) {\n', '\t\trequire(msg.sender == ownerAddress);\n', '\t\tallowInvestment = _allowInvestment;\n', '\t}\n', '\tfunction changeSaleTimes(uint256 _saleStartTime, uint256 _saleEndTime) {\n', '\t\trequire(msg.sender == ownerAddress);\n', '\t\tsaleStartTime = _saleStartTime;\n', '\t\tsaleEndTime\t= _saleEndTime;\n', '\t}\n', '\tfunction changeEtherBonuses(uint256 _lowEtherBonusLimit, uint256 _lowEtherBonusValue, uint256 _midEtherBonusLimit, uint256 _midEtherBonusValue, uint256 _highEtherBonusLimit, uint256 _highEtherBonusValue) {\n', '\t\trequire(msg.sender == ownerAddress);\n', '\t\tlowEtherBonusLimit = _lowEtherBonusLimit;\n', '\t\tlowEtherBonusValue = _lowEtherBonusValue;\n', '\t\tmidEtherBonusLimit = _midEtherBonusLimit;\n', '\t\tmidEtherBonusValue = _midEtherBonusValue;\n', '\t\thighEtherBonusLimit = _highEtherBonusLimit;\n', '\t\thighEtherBonusValue = _highEtherBonusValue;\n', '\t}\n', '\tfunction changeTimeBonuses(uint256 _highTimeBonusLimit, uint256 _highTimeBonusValue, uint256 _midTimeBonusLimit, uint256 _midTimeBonusValue, uint256 _lowTimeBonusLimit, uint256 _lowTimeBonusValue) {\n', '\t\trequire(msg.sender == ownerAddress);\n', '\t\thighTimeBonusLimit = _highTimeBonusLimit;\n', '\t\thighTimeBonusValue = _highTimeBonusValue;\n', '\t\tmidTimeBonusLimit = _midTimeBonusLimit;\n', '\t\tmidTimeBonusValue = _midTimeBonusValue;\n', '\t\tlowTimeBonusLimit = _lowTimeBonusLimit;\n', '\t\tlowTimeBonusValue = _lowTimeBonusValue;\n', '\t}\n', '\n', '}']