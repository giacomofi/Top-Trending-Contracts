['pragma solidity ^0.4.12;\n', '/**\n', ' * Overflow aware uint math functions.\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Token\n', ' * @dev Adds token security measures\n', ' */\n', 'contract Token is ERC20 { using SafeMath for uint;\n', '\n', '    mapping (address => uint256) balances;\n', '\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    /**\n', '    * @dev Fix for the ERC20 short address attack.\n', '    */\n', '    modifier onlyPayloadSize(uint size) {\n', '        if(msg.data.length < size + 4) revert();\n', '        _;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) returns (bool success) {\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] = balances[msg.sender].sub(_value);\n', '            balances[_to] = balances[_to].add(_value);\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) returns (bool success) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] = balances[_to].add(_value);\n', '            balances[_from] = balances[_from].sub(_value);\n', '            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) revert();\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    // A vulernability of the approve method in the ERC20 standard was identified by\n', '    // Mikhail Vladimirov and Dmitry Khovratovich here:\n', '    // https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM\n', '    // It&#39;s better to use this method which is not susceptible to over-withdrawing by the approvee.\n', '    /// @param _spender The address to approve\n', '    /// @param _currentValue The previous value approved, which can be retrieved with allowance(msg.sender, _spender)\n', '    /// @param _newValue The new value to approve, this will replace the _currentValue\n', '    /// @return bool Whether the approval was a success (see ERC20&#39;s `approve`)\n', '    function compareAndApprove(address _spender, uint256 _currentValue, uint256 _newValue) public returns(bool) {\n', '        if (allowed[msg.sender][_spender] != _currentValue) {\n', '            return false;\n', '        }\n', '            return approve(_spender, _newValue);\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', '/**\n', ' *  @title CHEXToken\n', ' *  @dev ERC20 compliant (see https://github.com/ethereum/EIPs/issues/20)\n', ' */\n', 'contract CHEXToken is Token { using SafeMath for uint;\n', '\n', '    string public constant name = "CHEX Token";\n', '    string public constant symbol = "CHX";\n', '    uint public constant decimals = 18;\n', '    uint public startBlock; //crowdsale start block\n', '    uint public endBlock; //crowdsale end block\n', '\n', '    address public founder;\n', '    \n', '    uint public tokenCap = 2000000000 * 10**decimals; // 2b tokens, each divided to up to 10^decimals units.\n', '    uint public crowdsaleSupply = 0;\n', '\n', '    event Issuance(address indexed recipient, uint chx, uint eth);\n', '\n', '    uint public crowdsaleAllocation = tokenCap; //100% of token supply allocated for crowdsale\n', '\n', '    uint public etherRaised = 0;\n', '\n', '    uint public constant MIN_ETHER = 1 finney; //minimum ether required to buy tokens\n', '    uint public constant HALVING_DELAY = 460800; //~80 days after sale begins, drop discount to 25%\n', '\n', '    enum TokenSaleState {\n', '        Initial,    //contract initialized, bonus token\n', '        Crowdsale,  //limited time crowdsale\n', '        Live,       //default price\n', '        Frozen      //prevent sale of tokens\n', '    }\n', '\n', '    TokenSaleState public _saleState = TokenSaleState.Initial;\n', '\n', '    function CHEXToken(address founderInput, uint startBlockInput, uint endBlockInput) {\n', '        founder = founderInput;\n', '        startBlock = startBlockInput;\n', '        endBlock = endBlockInput;\n', '        \n', '        updateTokenSaleState();\n', '    }\n', '\n', '    function price() constant returns(uint) {\n', '        if (_saleState == TokenSaleState.Initial) return 42007;\n', '        if (_saleState == TokenSaleState.Crowdsale) {\n', '            uint discount = 1000;\n', '            if (block.number > startBlock + HALVING_DELAY) discount = 500;\n', '            return 21000 + 21 * discount;\n', '        }\n', '        return 21000;\n', '    }\n', '\n', '    function() payable {\n', '        buy(msg.sender);\n', '    }\n', '\n', '    function tokenFallback() payable {\n', '        buy(msg.sender);\n', '    }\n', '\n', '    function buy(address recipient) payable {\n', '        if (recipient == 0x0) revert();\n', '        if (msg.value < MIN_ETHER) revert();\n', '        if (_saleState == TokenSaleState.Frozen) revert();\n', '        \n', '        updateTokenSaleState();\n', '\n', '        uint tokens = msg.value.mul(price());\n', '        uint nextTotal = totalSupply.add(tokens);\n', '        uint nextCrowdsaleTotal = crowdsaleSupply.add(tokens);\n', '\n', '        if (nextTotal >= tokenCap) revert();\n', '        if (nextCrowdsaleTotal >= crowdsaleAllocation) revert();\n', '        \n', '        balances[recipient] = balances[recipient].add(tokens);\n', '\n', '        totalSupply = nextTotal;\n', '        crowdsaleSupply = nextCrowdsaleTotal;\n', '    \n', '        etherRaised = etherRaised.add(msg.value);\n', '        \n', '        Transfer(0, recipient, tokens);\n', '        Issuance(recipient, tokens, msg.value);\n', '    }\n', '\n', '    function updateTokenSaleState () {\n', '        if (_saleState == TokenSaleState.Frozen) return;\n', '\n', '        if (_saleState == TokenSaleState.Live && block.number > endBlock) return;\n', '        \n', '        if (_saleState == TokenSaleState.Initial && block.number >= startBlock) {\n', '            _saleState = TokenSaleState.Crowdsale;\n', '        }\n', '        \n', '        if (_saleState == TokenSaleState.Crowdsale && block.number > endBlock) {\n', '            _saleState = TokenSaleState.Live;\n', '        }\n', '    }\n', '\n', '    /*\n', '    * FOR AUTHORIZED USE ONLY\n', '    */\n', '    modifier onlyInternal {\n', '        require(msg.sender == founder);\n', '        _;\n', '    }\n', '\n', '    function freeze() onlyInternal {\n', '        _saleState = TokenSaleState.Frozen;\n', '    }\n', '\n', '    function unfreeze() onlyInternal {\n', '        _saleState = TokenSaleState.Initial;\n', '        updateTokenSaleState();\n', '    }\n', '\n', '    function withdrawFunds() onlyInternal {\n', '\t\tif (this.balance == 0) revert();\n', '\n', '\t\tfounder.transfer(this.balance);\n', '\t}\n', '\n', '    function changeFounder(address _newAddress) onlyInternal {\n', '        if (msg.sender != founder) revert();\n', '        if (_newAddress == 0x0) revert();\n', '        \n', '\n', '\t\tfounder = _newAddress;\n', '\t}\n', '\n', '}']