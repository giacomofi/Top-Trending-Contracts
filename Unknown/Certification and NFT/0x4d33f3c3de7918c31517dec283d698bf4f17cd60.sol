['pragma solidity ^0.4.11;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ContractReceiver{\n', '    function tokenFallback(address _from, uint256 _value, bytes  _data) external;\n', '}\n', '\n', '\n', '//Basic ERC23 token, backward compatible with ERC20 transfer function.\n', '//Based in part on code by open-zeppelin: https://github.com/OpenZeppelin/zeppelin-solidity.git\n', 'contract ERC23BasicToken {\n', '    using SafeMath for uint256;\n', '    uint256 public totalSupply;\n', '    mapping(address => uint256) balances;\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\n', '\n', '    function tokenFallback(address _from, uint256 _value, bytes  _data) external {\n', '        throw;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value, bytes _data) returns (bool success) {\n', '\n', '        //Standard ERC23 transfer function\n', '\n', '        if(isContract(_to)) {\n', '            transferToContract(_to, _value, _data);\n', '        }\n', '        else {\n', '            transferToAddress(_to, _value, _data);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) {\n', '\n', '        //standard function transfer similar to ERC20 transfer with no _data\n', '        //added due to backwards compatibility reasons\n', '\n', '        bytes memory empty;\n', '        if(isContract(_to)) {\n', '            transferToContract(_to, _value, empty);\n', '        }\n', '        else {\n', '            transferToAddress(_to, _value, empty);\n', '        }\n', '    }\n', '\n', '    function transferToAddress(address _to, uint256 _value, bytes _data) internal {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        Transfer(msg.sender, _to, _value, _data);\n', '    }\n', '\n', '    function transferToContract(address _to, uint256 _value, bytes _data) internal {\n', '        balances[msg.sender] = balances[msg.sender].sub( _value);\n', '        balances[_to] = balances[_to].add( _value);\n', '        ContractReceiver receiver = ContractReceiver(_to);\n', '        receiver.tokenFallback(msg.sender, _value, _data);\n', '        Transfer(msg.sender, _to, _value);\n', '        Transfer(msg.sender, _to, _value, _data);\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n', '    function isContract(address _addr) returns (bool is_contract) {\n', '          uint256 length;\n', '          assembly {\n', '              //retrieve the size of the code on target address, this needs assembly\n', '              length := extcodesize(_addr)\n', '          }\n', '          if(length>0) {\n', '              return true;\n', '          }\n', '          else {\n', '              return false;\n', '          }\n', '    }\n', '}\n', '\n', '// Standard ERC23 token, backward compatible with ERC20 standards.\n', '// Based on code by open-zeppelin: https://github.com/OpenZeppelin/zeppelin-solidity.git\n', 'contract ERC23StandardToken is ERC23BasicToken {\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    event Approval (address indexed owner, address indexed spender, uint256 value);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) {\n', '        var _allowance = allowed[_from][msg.sender];\n', '\n', '        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '        // if (_value > _allowance) throw;\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) {\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', '// Based in part on code by Open-Zeppelin: https://github.com/OpenZeppelin/zeppelin-solidity.git\n', '// Based in part on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', '\n', 'contract STRIMToken is ERC23StandardToken {\n', '\n', '    // metadata\n', '    string public constant name = "STRIM Token";\n', '    string public constant symbol = "STR";\n', '    uint256 public constant decimals = 18;\n', '    uint256 public fundsFromPreSale;\n', '    string public version = "0.4";\n', '    bool public halted; //Halt crowdsale in emergency\n', '    bool public isFinalized; // switched to true in operational state\n', '\tmapping(address => uint256) exchangeRate;\n', '    uint256 public fundingStartBlock;\n', '    uint256 public fundingEndBlock;\n', '    uint256 public constant tokenExchangeRatePreSale = 10000; // 10000 STR tokens for 1 eth at the presale\n', '    uint256 public constant tokenExchangeRateMile1 = 3000; // 3000 STR tokens for the 1 eth at first phase\n', '    uint256 public constant tokenExchangeRateMile2 = 2000; // 2000 STR tokens for the 1 eth at second phase\n', '    uint256 public constant tokenExchangeRateMile3 = 1000; // 1000 STR tokens for the 1 eth at third phase   \n', '    uint256 public constant tokenCreationMinMile1 = 10 * (10 ** 6) * 10 ** decimals; //minimum ammount of tokens to be created for the ICO to be succesfull\n', '    uint256 public constant tokenCreationMinMile2 = 78 * (10 ** 6) * 10 ** decimals; //tokens to be created for the ICO for the second milestone \n', '\tuint256 public constant tokenCreationMaxCap = 168 * (10 ** 6) * 10 ** decimals; //max tokens to be created\n', '\n', '    // contracts\n', '    address public ethFundDeposit; // deposit address for ETH for Strim Team\n', '    address public strFundDeposit; // deposit address for Strim Team use and STR User Fund\n', '    address public StrimTeam; //contract owner\n', '\n', '    // events\n', '    event LogRefund(address indexed _to, uint256 _value);\n', '    event CreateSTR(address indexed _to, uint256 _value);\n', '    event Halt(); //Halt event\n', '    event Unhalt(); //Unhalt event\n', '\n', '    modifier onlyTeam() {\n', '        //only do if call is from owner modifier\n', '        require(msg.sender == StrimTeam);\n', '        _;\n', '    }\n', '\n', '    modifier crowdsaleTransferLock() {\n', '        require(isFinalized);\n', '        _;\n', '    }\n', '\n', '    modifier whenNotHalted() {\n', '        // only do when not halted modifier\n', '        require(!halted);\n', '        _;\n', '    }\n', '\n', '    // constructor\n', '    function STRIMToken(\n', '        address _ethFundDeposit,\n', '        address _strFundDeposit,\n', '        uint256 _fundingStartBlock,\n', '        uint256 _fundingEndBlock) {\n', '        isFinalized = false; //controls pre through crowdsale state\n', '        halted = false;\n', '        ethFundDeposit = _ethFundDeposit;\n', '        strFundDeposit = _strFundDeposit;\n', '        fundingStartBlock = _fundingStartBlock;\n', '        fundingEndBlock = _fundingEndBlock;\n', '        totalSupply = 0;\n', '        StrimTeam = msg.sender;\n', '        fundsFromPreSale = 0;\n', '    }\n', '\n', '    //Fallback function when receiving Ether.\n', '    function() payable {\n', '        buy();\n', '    }\n', '\n', '    //Halt ICO in case of emergency.\n', '    function halt() onlyTeam {\n', '        halted = true;\n', '        Halt();\n', '    }\n', '\n', '    function unhalt() onlyTeam {\n', '        halted = false;\n', '        Unhalt();\n', '    }\n', '\n', '    function buy() payable {\n', '        createTokens(msg.sender);\n', '    }\n', '\n', '\n', '\n', '    //mint Tokens. Accepts ether and creates new STR tokens.\n', '    function createTokens(address recipient) public payable whenNotHalted {\n', '        require(!isFinalized);\n', '        require(block.number >= fundingStartBlock);\n', '        require(block.number <= fundingEndBlock);\n', '\t\trequire (totalSupply < tokenCreationMaxCap);\n', '        require(msg.value > 0);\n', '\n', '        uint256 retRate = returnRate();\n', '\n', '        uint256 tokens = msg.value.mul(retRate); //decimals=18, so no need to adjust for unit   \n', '        if (retRate == 10000) {\n', '            fundsFromPreSale = fundsFromPreSale.add(tokens);\n', '\t\t\texchangeRate[recipient]=0;//presale ether is non refundable as it will be used for marketing during the ICO period\n', '        } else {\n', '\t\t    exchangeRate[recipient]=retRate;\n', '\t\t}\n', '        balances[recipient] = balances[recipient].add(tokens);//map tokens to the reciepient address\t\n', '        totalSupply = totalSupply.add(tokens);\n', '\n', '        CreateSTR(msg.sender, tokens); // logs token creation\n', '        Transfer(this, recipient, tokens);\n', '    }\n', '\n', '    //Return rate of token against ether.\n', '    function returnRate() public constant returns(uint256) {\n', '        if (block.number < fundingStartBlock.add(5000)) {\n', '            return tokenExchangeRatePreSale;\n', '        } else if (totalSupply.sub(fundsFromPreSale) < tokenCreationMinMile1) {\n', '            return tokenExchangeRateMile1;\n', '        } else if (totalSupply.sub(fundsFromPreSale) < tokenCreationMinMile2) {\n', '            return tokenExchangeRateMile2;\n', '        } else {\n', '            return tokenExchangeRateMile3;  \n', '        }\n', '    }\n', '\n', '    function finalize() external onlyTeam{\n', '        require(!isFinalized);//check if already ran        \n', '        require(totalSupply >= tokenCreationMinMile1); // have to sell minimum to move to operational\n', '        require(block.number > fundingEndBlock || totalSupply >= tokenCreationMaxCap);//don&#39;t end before ico period ends or max cap reached\n', '\n', '        uint256 strVal = totalSupply.div(2);\n', '        balances[strFundDeposit] = strVal; // deposit Strim share\n', '        CreateSTR(msg.sender, strVal); // logs token creation\n', '\n', '        // move to operational        \n', '        if (!ethFundDeposit.send(this.balance)) revert(); // send the eth to Strim Team\n', '        if (!strFundDeposit.send(this.balance)) revert(); // send the str to Strim Team\n', '        isFinalized = true;\n', '    }\n', '\n', '    function sendPreSaleETH() external onlyTeam{        \n', '        require(block.number > fundingStartBlock.add(5000)); //check if the presale passed the 2 day limit \n', '        require(fundsFromPreSale > 0); //make sure that there are funds to transfer\n', '\n', '        uint256 ethFromPreSale = fundsFromPreSale.div(10000); //convert from tokens to ether\n', '        fundsFromPreSale = 0; //revert to initial state so it can&#39;t be reused \n', '\n', '        if (!ethFundDeposit.send(ethFromPreSale)) revert(); // send the eth raised for the pre sale to Strim Team\n', '\n', '    }\n', '\n', '    // Allows contributors to recover their ether in the case of a failed funding campaign.\n', '    function refund() external {\n', '        require(!isFinalized); // prevents refund if operational\n', '        require(block.number > fundingEndBlock); // prevents refund until sale period is over\n', '        require(totalSupply < tokenCreationMinMile1); // no refunds if we sold enough\n', '        require(msg.sender != strFundDeposit); // Strim not entitled to a refund\n', '        \n', '        if (exchangeRate[msg.sender] > 0) {  //presale ether is non refundable as it will be used for marketing during the ICO period\n', '\t\t    uint256 strVal = balances[msg.sender];\n', '            balances[msg.sender] = 0; //if refunded delete the users tokens\n', '            totalSupply = totalSupply.sub(strVal); // extra safe\n', '       \t    uint256 ethVal = strVal / exchangeRate[msg.sender]; // should be safe; considering it never reached the first milestone;\n', '            LogRefund(msg.sender, ethVal); // log it \n', '            if (!msg.sender.send(ethVal)) revert(); // if you&#39;re using a contract; make sure it works with .send gas limits\n', '\t\t}\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value, bytes _data) public crowdsaleTransferLock returns(bool success) {\n', '        return super.transfer(_to, _value, _data);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public crowdsaleTransferLock {\n', '        super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public crowdsaleTransferLock {\n', '        super.transferFrom(_from, _to, _value);\n', '    }\n', '}']
['pragma solidity ^0.4.11;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ContractReceiver{\n', '    function tokenFallback(address _from, uint256 _value, bytes  _data) external;\n', '}\n', '\n', '\n', '//Basic ERC23 token, backward compatible with ERC20 transfer function.\n', '//Based in part on code by open-zeppelin: https://github.com/OpenZeppelin/zeppelin-solidity.git\n', 'contract ERC23BasicToken {\n', '    using SafeMath for uint256;\n', '    uint256 public totalSupply;\n', '    mapping(address => uint256) balances;\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\n', '\n', '    function tokenFallback(address _from, uint256 _value, bytes  _data) external {\n', '        throw;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value, bytes _data) returns (bool success) {\n', '\n', '        //Standard ERC23 transfer function\n', '\n', '        if(isContract(_to)) {\n', '            transferToContract(_to, _value, _data);\n', '        }\n', '        else {\n', '            transferToAddress(_to, _value, _data);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) {\n', '\n', '        //standard function transfer similar to ERC20 transfer with no _data\n', '        //added due to backwards compatibility reasons\n', '\n', '        bytes memory empty;\n', '        if(isContract(_to)) {\n', '            transferToContract(_to, _value, empty);\n', '        }\n', '        else {\n', '            transferToAddress(_to, _value, empty);\n', '        }\n', '    }\n', '\n', '    function transferToAddress(address _to, uint256 _value, bytes _data) internal {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        Transfer(msg.sender, _to, _value, _data);\n', '    }\n', '\n', '    function transferToContract(address _to, uint256 _value, bytes _data) internal {\n', '        balances[msg.sender] = balances[msg.sender].sub( _value);\n', '        balances[_to] = balances[_to].add( _value);\n', '        ContractReceiver receiver = ContractReceiver(_to);\n', '        receiver.tokenFallback(msg.sender, _value, _data);\n', '        Transfer(msg.sender, _to, _value);\n', '        Transfer(msg.sender, _to, _value, _data);\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n', '    function isContract(address _addr) returns (bool is_contract) {\n', '          uint256 length;\n', '          assembly {\n', '              //retrieve the size of the code on target address, this needs assembly\n', '              length := extcodesize(_addr)\n', '          }\n', '          if(length>0) {\n', '              return true;\n', '          }\n', '          else {\n', '              return false;\n', '          }\n', '    }\n', '}\n', '\n', '// Standard ERC23 token, backward compatible with ERC20 standards.\n', '// Based on code by open-zeppelin: https://github.com/OpenZeppelin/zeppelin-solidity.git\n', 'contract ERC23StandardToken is ERC23BasicToken {\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    event Approval (address indexed owner, address indexed spender, uint256 value);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) {\n', '        var _allowance = allowed[_from][msg.sender];\n', '\n', '        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '        // if (_value > _allowance) throw;\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) {\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', '// Based in part on code by Open-Zeppelin: https://github.com/OpenZeppelin/zeppelin-solidity.git\n', '// Based in part on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', '\n', 'contract STRIMToken is ERC23StandardToken {\n', '\n', '    // metadata\n', '    string public constant name = "STRIM Token";\n', '    string public constant symbol = "STR";\n', '    uint256 public constant decimals = 18;\n', '    uint256 public fundsFromPreSale;\n', '    string public version = "0.4";\n', '    bool public halted; //Halt crowdsale in emergency\n', '    bool public isFinalized; // switched to true in operational state\n', '\tmapping(address => uint256) exchangeRate;\n', '    uint256 public fundingStartBlock;\n', '    uint256 public fundingEndBlock;\n', '    uint256 public constant tokenExchangeRatePreSale = 10000; // 10000 STR tokens for 1 eth at the presale\n', '    uint256 public constant tokenExchangeRateMile1 = 3000; // 3000 STR tokens for the 1 eth at first phase\n', '    uint256 public constant tokenExchangeRateMile2 = 2000; // 2000 STR tokens for the 1 eth at second phase\n', '    uint256 public constant tokenExchangeRateMile3 = 1000; // 1000 STR tokens for the 1 eth at third phase   \n', '    uint256 public constant tokenCreationMinMile1 = 10 * (10 ** 6) * 10 ** decimals; //minimum ammount of tokens to be created for the ICO to be succesfull\n', '    uint256 public constant tokenCreationMinMile2 = 78 * (10 ** 6) * 10 ** decimals; //tokens to be created for the ICO for the second milestone \n', '\tuint256 public constant tokenCreationMaxCap = 168 * (10 ** 6) * 10 ** decimals; //max tokens to be created\n', '\n', '    // contracts\n', '    address public ethFundDeposit; // deposit address for ETH for Strim Team\n', '    address public strFundDeposit; // deposit address for Strim Team use and STR User Fund\n', '    address public StrimTeam; //contract owner\n', '\n', '    // events\n', '    event LogRefund(address indexed _to, uint256 _value);\n', '    event CreateSTR(address indexed _to, uint256 _value);\n', '    event Halt(); //Halt event\n', '    event Unhalt(); //Unhalt event\n', '\n', '    modifier onlyTeam() {\n', '        //only do if call is from owner modifier\n', '        require(msg.sender == StrimTeam);\n', '        _;\n', '    }\n', '\n', '    modifier crowdsaleTransferLock() {\n', '        require(isFinalized);\n', '        _;\n', '    }\n', '\n', '    modifier whenNotHalted() {\n', '        // only do when not halted modifier\n', '        require(!halted);\n', '        _;\n', '    }\n', '\n', '    // constructor\n', '    function STRIMToken(\n', '        address _ethFundDeposit,\n', '        address _strFundDeposit,\n', '        uint256 _fundingStartBlock,\n', '        uint256 _fundingEndBlock) {\n', '        isFinalized = false; //controls pre through crowdsale state\n', '        halted = false;\n', '        ethFundDeposit = _ethFundDeposit;\n', '        strFundDeposit = _strFundDeposit;\n', '        fundingStartBlock = _fundingStartBlock;\n', '        fundingEndBlock = _fundingEndBlock;\n', '        totalSupply = 0;\n', '        StrimTeam = msg.sender;\n', '        fundsFromPreSale = 0;\n', '    }\n', '\n', '    //Fallback function when receiving Ether.\n', '    function() payable {\n', '        buy();\n', '    }\n', '\n', '    //Halt ICO in case of emergency.\n', '    function halt() onlyTeam {\n', '        halted = true;\n', '        Halt();\n', '    }\n', '\n', '    function unhalt() onlyTeam {\n', '        halted = false;\n', '        Unhalt();\n', '    }\n', '\n', '    function buy() payable {\n', '        createTokens(msg.sender);\n', '    }\n', '\n', '\n', '\n', '    //mint Tokens. Accepts ether and creates new STR tokens.\n', '    function createTokens(address recipient) public payable whenNotHalted {\n', '        require(!isFinalized);\n', '        require(block.number >= fundingStartBlock);\n', '        require(block.number <= fundingEndBlock);\n', '\t\trequire (totalSupply < tokenCreationMaxCap);\n', '        require(msg.value > 0);\n', '\n', '        uint256 retRate = returnRate();\n', '\n', '        uint256 tokens = msg.value.mul(retRate); //decimals=18, so no need to adjust for unit   \n', '        if (retRate == 10000) {\n', '            fundsFromPreSale = fundsFromPreSale.add(tokens);\n', '\t\t\texchangeRate[recipient]=0;//presale ether is non refundable as it will be used for marketing during the ICO period\n', '        } else {\n', '\t\t    exchangeRate[recipient]=retRate;\n', '\t\t}\n', '        balances[recipient] = balances[recipient].add(tokens);//map tokens to the reciepient address\t\n', '        totalSupply = totalSupply.add(tokens);\n', '\n', '        CreateSTR(msg.sender, tokens); // logs token creation\n', '        Transfer(this, recipient, tokens);\n', '    }\n', '\n', '    //Return rate of token against ether.\n', '    function returnRate() public constant returns(uint256) {\n', '        if (block.number < fundingStartBlock.add(5000)) {\n', '            return tokenExchangeRatePreSale;\n', '        } else if (totalSupply.sub(fundsFromPreSale) < tokenCreationMinMile1) {\n', '            return tokenExchangeRateMile1;\n', '        } else if (totalSupply.sub(fundsFromPreSale) < tokenCreationMinMile2) {\n', '            return tokenExchangeRateMile2;\n', '        } else {\n', '            return tokenExchangeRateMile3;  \n', '        }\n', '    }\n', '\n', '    function finalize() external onlyTeam{\n', '        require(!isFinalized);//check if already ran        \n', '        require(totalSupply >= tokenCreationMinMile1); // have to sell minimum to move to operational\n', "        require(block.number > fundingEndBlock || totalSupply >= tokenCreationMaxCap);//don't end before ico period ends or max cap reached\n", '\n', '        uint256 strVal = totalSupply.div(2);\n', '        balances[strFundDeposit] = strVal; // deposit Strim share\n', '        CreateSTR(msg.sender, strVal); // logs token creation\n', '\n', '        // move to operational        \n', '        if (!ethFundDeposit.send(this.balance)) revert(); // send the eth to Strim Team\n', '        if (!strFundDeposit.send(this.balance)) revert(); // send the str to Strim Team\n', '        isFinalized = true;\n', '    }\n', '\n', '    function sendPreSaleETH() external onlyTeam{        \n', '        require(block.number > fundingStartBlock.add(5000)); //check if the presale passed the 2 day limit \n', '        require(fundsFromPreSale > 0); //make sure that there are funds to transfer\n', '\n', '        uint256 ethFromPreSale = fundsFromPreSale.div(10000); //convert from tokens to ether\n', "        fundsFromPreSale = 0; //revert to initial state so it can't be reused \n", '\n', '        if (!ethFundDeposit.send(ethFromPreSale)) revert(); // send the eth raised for the pre sale to Strim Team\n', '\n', '    }\n', '\n', '    // Allows contributors to recover their ether in the case of a failed funding campaign.\n', '    function refund() external {\n', '        require(!isFinalized); // prevents refund if operational\n', '        require(block.number > fundingEndBlock); // prevents refund until sale period is over\n', '        require(totalSupply < tokenCreationMinMile1); // no refunds if we sold enough\n', '        require(msg.sender != strFundDeposit); // Strim not entitled to a refund\n', '        \n', '        if (exchangeRate[msg.sender] > 0) {  //presale ether is non refundable as it will be used for marketing during the ICO period\n', '\t\t    uint256 strVal = balances[msg.sender];\n', '            balances[msg.sender] = 0; //if refunded delete the users tokens\n', '            totalSupply = totalSupply.sub(strVal); // extra safe\n', '       \t    uint256 ethVal = strVal / exchangeRate[msg.sender]; // should be safe; considering it never reached the first milestone;\n', '            LogRefund(msg.sender, ethVal); // log it \n', "            if (!msg.sender.send(ethVal)) revert(); // if you're using a contract; make sure it works with .send gas limits\n", '\t\t}\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value, bytes _data) public crowdsaleTransferLock returns(bool success) {\n', '        return super.transfer(_to, _value, _data);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public crowdsaleTransferLock {\n', '        super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public crowdsaleTransferLock {\n', '        super.transferFrom(_from, _to, _value);\n', '    }\n', '}']
