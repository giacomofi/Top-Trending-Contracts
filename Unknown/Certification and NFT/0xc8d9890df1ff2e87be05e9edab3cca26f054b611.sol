['contract AmIOnTheFork {\n', '    function forked() constant returns(bool);\n', '}\n', '\n', 'contract SellETCSafely {\n', '    // fork oracle to use\n', '    AmIOnTheFork amIOnTheFork = AmIOnTheFork(0x2bd2326c993dfaef84f696526064ff22eba5b362);\n', '\n', '    // recipient of the 1 % fee on the ETC side\n', '    address feeRecipient = 0x46a1e8814af10Ef6F1a8449dA0EC72a59B29EA54;\n', '\n', '    function split(address ethDestination, address etcDestination) {\n', '        if (amIOnTheFork.forked()) {\n', '            // The following happens on the forked chain:\n', '            // 100 % is forwarded to the provided destination for ETH\n', '            ethDestination.call.value(msg.value)();\n', '        } else {\n', '            // The following happens on the classic chain:\n', '            // 1 % is forwarded to the fee recipient\n', '            // 99 % is forwarded to the provided destination for ETC\n', '            uint fee = msg.value / 100;\n', '            feeRecipient.send(fee);\n', '            etcDestination.call.value(msg.value - fee)();\n', '        }\n', '    }\n', '\n', '    function () {\n', '        throw;  // do not accept value transfers\n', '    }\n', '}']