['pragma solidity ^0.4.13;\n', 'contract token { \n', '    function transfer(address receiver, uint amount);\n', '    function balanceOf(address _owner) constant returns (uint256 balance); \n', '}\n', '\n', 'contract Presale {\n', '    address public beneficiary;\n', '    uint public min_fundingGoal; \n', '    uint public max_fundingGoal;\n', '    uint public amountRaised; \n', '    uint public deadline; \n', '    uint public rate;\n', '    token public tokenReward;\n', '    mapping(address => uint256) public balanceOf;\n', '    bool fundingGoalReached = false;\n', '    event GoalReached(address beneficiary, uint amountRaised);\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '    bool crowdsaleClosed = false;\n', '\n', '    /* data structure to hold information about campaign contributors */\n', '\n', '    /*  at initialization, setup the owner */\n', '    function Presale() {\n', '        beneficiary = msg.sender;\n', '        min_fundingGoal = 100 * 1 ether;\n', '        max_fundingGoal = 2000 * 1 ether;\n', '        deadline = now + 30 * 1 days;\n', '        rate = 1500;     // Each ether exchange for 1500.00000000 PAT\n', '        tokenReward = token(0x990da731331aE62c3e8f3f73cB4ebeb6F082Bc7c);\n', '    }\n', '\n', '    /* The function without name is the default function that is called whenever anyone sends funds to a contract */\n', '    function () payable {\n', '        uint amount = msg.value;\n', '        require (!crowdsaleClosed);\n', '        require (amountRaised + amount <= max_fundingGoal);\n', '        require (amount >= 10 * 1 ether);\n', '        \n', '        balanceOf[msg.sender] += amount;\n', '        amountRaised += amount;\n', '        tokenReward.transfer(msg.sender, amount * rate * 10 ** 8 / 1 ether);\n', '        FundTransfer(msg.sender, amount, true);\n', '    }\n', '\n', '    modifier afterDeadline() { if (now >= deadline) _; }\n', '\n', '    /* checks if the goal or time limit has been reached and ends the campaign */\n', '    function checkGoalReached() afterDeadline {\n', '        if (amountRaised >= min_fundingGoal){\n', '            fundingGoalReached = true;\n', '            GoalReached(beneficiary, amountRaised);\n', '        }\n', '        crowdsaleClosed = true;\n', '    }\n', '\n', '\n', '    function safeWithdrawal() afterDeadline {\n', '        if (!fundingGoalReached) {\n', '            uint amount = balanceOf[msg.sender];\n', '            balanceOf[msg.sender] = 0;\n', '            if (amount > 0) {\n', '                if (msg.sender.send(amount)) {\n', '                    FundTransfer(msg.sender, amount, false);\n', '                } else {\n', '                    balanceOf[msg.sender] = amount;\n', '                }\n', '            }\n', '        }\n', '\n', '        if (fundingGoalReached && beneficiary == msg.sender) {\n', '            if (beneficiary.send(amountRaised)) {\n', '                FundTransfer(beneficiary, amountRaised, false);\n', '            } else {\n', '                //If we fail to send the funds to beneficiary, unlock funders balance\n', '                fundingGoalReached = false;\n', '            }\n', '        }\n', '    }\n', '\n', '    function WithdrawlRemainingPAT() afterDeadline {\n', '        require(msg.sender == beneficiary);\n', '        uint remainingAmount = tokenReward.balanceOf(this);\n', '        remainingAmount = remainingAmount * 99 / 100;\n', '        tokenReward.transfer(beneficiary, remainingAmount);\n', '        FundTransfer(beneficiary, remainingAmount, false);\n', '    }\n', '}']