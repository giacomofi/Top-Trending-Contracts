['pragma solidity ^0.4.7;\n', '\n', 'contract AbstractZENOSCrowdsale {\n', '    function crowdsaleStartingBlock() constant returns (uint256 startingBlock) {}\n', '}\n', '\n', '/// @title EarlyPurchase contract - Keep track of purchased amount by Early Purchasers\n', '/// Project by ZENOS Team (http://www.thezenos.com/)\n', '/// This smart contract developed by Starbase - Token funding & payment Platform for innovative projects <support[at]starbase.co>\n', '\n', 'contract ZENOSEarlyPurchase {\n', '    /*\n', '     *  Properties\n', '     */\n', '    string public constant PURCHASE_AMOUNT_UNIT = &#39;ETH&#39;;    // Ether\n', '    address public owner;\n', '    EarlyPurchase[] public earlyPurchases;\n', '    uint public earlyPurchaseClosedAt;\n', '\n', '    /*\n', '     *  Types\n', '     */\n', '    struct EarlyPurchase {\n', '        address purchaser;\n', '        uint amount;        // Amount in Wei( = 1/ 10^18 Ether)\n', '        uint purchasedAt;   // timestamp\n', '    }\n', '\n', '    /*\n', '     *  External contracts\n', '     */\n', '    AbstractZENOSCrowdsale public zenOSCrowdsale;\n', '\n', '\n', '    /*\n', '     *  Modifiers\n', '     */\n', '    modifier onlyOwner() {\n', '        if (msg.sender != owner) {\n', '            throw;\n', '        }\n', '        _;\n', '    }\n', '\n', '    modifier onlyBeforeCrowdsale() {\n', '        if (address(zenOSCrowdsale) != 0 &&\n', '            zenOSCrowdsale.crowdsaleStartingBlock() > 0)\n', '        {\n', '            throw;\n', '        }\n', '        _;\n', '    }\n', '\n', '    modifier onlyEarlyPurchaseTerm() {\n', '        if (earlyPurchaseClosedAt > 0) {\n', '            throw;\n', '        }\n', '        _;\n', '    }\n', '\n', '    /// @dev Contract constructor function\n', '    function ZENOSEarlyPurchase() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /*\n', '     *  Contract functions\n', '     */\n', '    /// @dev Returns early purchased amount by purchaser&#39;s address\n', '    /// @param purchaser Purchaser address\n', '    function purchasedAmountBy(address purchaser)\n', '        external\n', '        constant\n', '        returns (uint amount)\n', '    {\n', '        for (uint i; i < earlyPurchases.length; i++) {\n', '            if (earlyPurchases[i].purchaser == purchaser) {\n', '                amount += earlyPurchases[i].amount;\n', '            }\n', '        }\n', '    }\n', '\n', '    /// @dev Returns total amount of raised funds by Early Purchasers\n', '    function totalAmountOfEarlyPurchases()\n', '        constant\n', '        returns (uint totalAmount)\n', '    {\n', '        for (uint i; i < earlyPurchases.length; i++) {\n', '            totalAmount += earlyPurchases[i].amount;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns number of early purchases\n', '    function numberOfEarlyPurchases()\n', '        external\n', '        constant\n', '        returns (uint)\n', '    {\n', '        return earlyPurchases.length;\n', '    }\n', '\n', '    /// @dev Append an early purchase log\n', '    /// @param purchaser Purchaser address\n', '    /// @param amount Purchase amount\n', '    /// @param purchasedAt Timestamp of purchased date\n', '    function appendEarlyPurchase(address purchaser, uint amount, uint purchasedAt)\n', '        internal\n', '        onlyBeforeCrowdsale\n', '        onlyEarlyPurchaseTerm\n', '        returns (bool)\n', '    {\n', '\n', '        if (purchasedAt == 0 || purchasedAt > now) {\n', '            throw;\n', '        }\n', '\n', '        earlyPurchases.push(EarlyPurchase(purchaser, amount, purchasedAt));\n', '        return true;\n', '    }\n', '\n', '    /// @dev Close early purchase term\n', '    function closeEarlyPurchase()\n', '        external\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        earlyPurchaseClosedAt = now;\n', '    }\n', '\n', '    /// @dev Setup function sets external crowdsale contract&#39;s address\n', '    /// @param zenOSCrowdsaleAddress Token address\n', '    function setup(address zenOSCrowdsaleAddress)\n', '        external\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        if (address(zenOSCrowdsale) == 0) {\n', '            zenOSCrowdsale = AbstractZENOSCrowdsale(zenOSCrowdsaleAddress);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function withdraw(uint withdrawalAmount) onlyOwner {\n', '          if(!owner.send(withdrawalAmount)) throw;  // send collected ETH to ZENOS team\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '\n', '    /// @dev By sending Ether to the contract, early purchase will be recorded.\n', '    function () payable {\n', '        appendEarlyPurchase(msg.sender, msg.value, block.timestamp);\n', '    }\n', '}']
['pragma solidity ^0.4.7;\n', '\n', 'contract AbstractZENOSCrowdsale {\n', '    function crowdsaleStartingBlock() constant returns (uint256 startingBlock) {}\n', '}\n', '\n', '/// @title EarlyPurchase contract - Keep track of purchased amount by Early Purchasers\n', '/// Project by ZENOS Team (http://www.thezenos.com/)\n', '/// This smart contract developed by Starbase - Token funding & payment Platform for innovative projects <support[at]starbase.co>\n', '\n', 'contract ZENOSEarlyPurchase {\n', '    /*\n', '     *  Properties\n', '     */\n', "    string public constant PURCHASE_AMOUNT_UNIT = 'ETH';    // Ether\n", '    address public owner;\n', '    EarlyPurchase[] public earlyPurchases;\n', '    uint public earlyPurchaseClosedAt;\n', '\n', '    /*\n', '     *  Types\n', '     */\n', '    struct EarlyPurchase {\n', '        address purchaser;\n', '        uint amount;        // Amount in Wei( = 1/ 10^18 Ether)\n', '        uint purchasedAt;   // timestamp\n', '    }\n', '\n', '    /*\n', '     *  External contracts\n', '     */\n', '    AbstractZENOSCrowdsale public zenOSCrowdsale;\n', '\n', '\n', '    /*\n', '     *  Modifiers\n', '     */\n', '    modifier onlyOwner() {\n', '        if (msg.sender != owner) {\n', '            throw;\n', '        }\n', '        _;\n', '    }\n', '\n', '    modifier onlyBeforeCrowdsale() {\n', '        if (address(zenOSCrowdsale) != 0 &&\n', '            zenOSCrowdsale.crowdsaleStartingBlock() > 0)\n', '        {\n', '            throw;\n', '        }\n', '        _;\n', '    }\n', '\n', '    modifier onlyEarlyPurchaseTerm() {\n', '        if (earlyPurchaseClosedAt > 0) {\n', '            throw;\n', '        }\n', '        _;\n', '    }\n', '\n', '    /// @dev Contract constructor function\n', '    function ZENOSEarlyPurchase() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /*\n', '     *  Contract functions\n', '     */\n', "    /// @dev Returns early purchased amount by purchaser's address\n", '    /// @param purchaser Purchaser address\n', '    function purchasedAmountBy(address purchaser)\n', '        external\n', '        constant\n', '        returns (uint amount)\n', '    {\n', '        for (uint i; i < earlyPurchases.length; i++) {\n', '            if (earlyPurchases[i].purchaser == purchaser) {\n', '                amount += earlyPurchases[i].amount;\n', '            }\n', '        }\n', '    }\n', '\n', '    /// @dev Returns total amount of raised funds by Early Purchasers\n', '    function totalAmountOfEarlyPurchases()\n', '        constant\n', '        returns (uint totalAmount)\n', '    {\n', '        for (uint i; i < earlyPurchases.length; i++) {\n', '            totalAmount += earlyPurchases[i].amount;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns number of early purchases\n', '    function numberOfEarlyPurchases()\n', '        external\n', '        constant\n', '        returns (uint)\n', '    {\n', '        return earlyPurchases.length;\n', '    }\n', '\n', '    /// @dev Append an early purchase log\n', '    /// @param purchaser Purchaser address\n', '    /// @param amount Purchase amount\n', '    /// @param purchasedAt Timestamp of purchased date\n', '    function appendEarlyPurchase(address purchaser, uint amount, uint purchasedAt)\n', '        internal\n', '        onlyBeforeCrowdsale\n', '        onlyEarlyPurchaseTerm\n', '        returns (bool)\n', '    {\n', '\n', '        if (purchasedAt == 0 || purchasedAt > now) {\n', '            throw;\n', '        }\n', '\n', '        earlyPurchases.push(EarlyPurchase(purchaser, amount, purchasedAt));\n', '        return true;\n', '    }\n', '\n', '    /// @dev Close early purchase term\n', '    function closeEarlyPurchase()\n', '        external\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        earlyPurchaseClosedAt = now;\n', '    }\n', '\n', "    /// @dev Setup function sets external crowdsale contract's address\n", '    /// @param zenOSCrowdsaleAddress Token address\n', '    function setup(address zenOSCrowdsaleAddress)\n', '        external\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        if (address(zenOSCrowdsale) == 0) {\n', '            zenOSCrowdsale = AbstractZENOSCrowdsale(zenOSCrowdsaleAddress);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function withdraw(uint withdrawalAmount) onlyOwner {\n', '          if(!owner.send(withdrawalAmount)) throw;  // send collected ETH to ZENOS team\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '\n', '    /// @dev By sending Ether to the contract, early purchase will be recorded.\n', '    function () payable {\n', '        appendEarlyPurchase(msg.sender, msg.value, block.timestamp);\n', '    }\n', '}']
