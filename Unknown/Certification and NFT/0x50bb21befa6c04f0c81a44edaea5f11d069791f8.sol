['pragma solidity ^0.4.5;\n', '\n', 'contract PPBC_API {\n', '\n', '   /*******************************************************************************\n', '        PADDYPOWER.BLOCKCHAIN Promo Concept/Proposal, RFP Response / PoC\n', '        Module PPBC_API - back-end module\n', '        \n', '        [private API],  v1.22, 2016 11 27 \n', '        $Id: add rcs tag $\n', '        \n', '        vendor presentation/  @TowerRoom, 12/12/16 10am\n', '        \n', '        @MC/KC - Refer to instructions at PP Tech Vendor Portal\n', '        \n', '        Abstract: Blockchain Contract API Demo, providing access to 3:5 and 2:5 betting odds \n', '        (3:5 for first bet, 2:5 for consecutive bets)\n', '        \n', '   ********************************************************************************/\n', '\n', '   // Do not invoke contract directly (API code protected), only via main PPBC contract\n', '   //       ToDo: protect API with passcode/hash\n', '\n', '    // declare variables\n', '    address paddyAdmin;          // contract owner          \n', '    uint256 public gamesPlayed;  // Game Counter\n', '    \n', '    mapping ( address => bool ) alreadyPlayed; // Ensure every user can only play ONCE using the 3:5 odds\n', '                                               // to prevent abuse of benef. odds.\n', '                                               // Consecutive games from the same account only run at 2:5 odds.\n', '\n', '    /* GetMinimumBet_ether()  ToDo: add doc @MC*/\n', '    /* GetMaximumBet_ether()  ToDo: add doc @MC*/\n', '    // Minimum/Maximum Bet (in ETHER) that can be placed: 1%-10% of available Ether Winning Pool       \n', '    function GetMinimumBet_ether() constant returns (uint256){ return GetMinimumBet() / 1000000000000000000;   }\n', '    function GetMaximumBet_ether() constant returns (uint256){ return GetMaximumBet() / 1000000000000000000;  } \n', '    function GetMinimumBet() returns (uint256) {return this.balance/100;}   // Minimum Bet that can be placed: 1% of available Ether Winning Pool       \n', '    function GetMaximumBet() returns (uint256) {return this.balance/10;}   // Maximum Bet that can be placed: 10% of available Ether Winning Pool        \n', '\n', '    /* PlaceBet using Access Code, and Mode parameter */\n', '    /********************************************************************\n', '        First game for any account will run at 3:5 odds (double win).\n', '        Consecutive  game for any account will run at 2:5 odds (double win).\n', '\n', '        Cannot be invoked directly, only via PaddyPowerPromo contract     MC\n', '        \n', '        Parameters:\n', '        - Access Code is SHA3 hashed code, provided by PaddyPowerPromo contract (prevents direct call).\n', '        - modeA selects Lower vs. Upper number range (same odds)\n', '    *******************************************************************************************/\n', '    \n', '    function _api_PlaceBet (bool modeA) payable{\n', '    //function _api_PlaceBet (uint256 accessCode, bool modeA) payable returns (uint256){\n', '        //\n', '        // Note total transaction cost ~ 100-200K Gas    \n', '        // START Initial checks\n', '        // use Sha3 for increased API security (cannot be "converted back" to original accessCode) - prevents direct access\n', '        // if ( sha3( accessCode ) != 19498834600303040700126754596537880312193431075463488515213744382615666721600) throw; \n', '        // @MC disabled access check for PoC, ToDo: enable for Prod release, and allow change of hash if compromised\n', '        \n', '        // Check if Bet amount is within limits 1-10% of winning pool (account) balance\n', '        if (msg.value < GetMinimumBet() || msg.value > GetMaximumBet() ) throw; \n', '        \n', '        // Only allow x games per block - to ensure outcome is as random as possible\n', '        uint256 cntBlockUsed = blockUsed[block.number];  \n', '        if (cntBlockUsed > maxGamesPerBlock) throw; \n', '        blockUsed[block.number] = cntBlockUsed + 1; \n', '          \n', '        gamesPlayed++;            // game counter\n', '        lastPlayer = msg.sender;  // remember last player, part of seed for random number generator\n', '        // END initial checks\n', '        \n', '        // START - Set winning odds\n', '        uint winnerOdds = 3;  // 3 out of 5 win (for first game)\n', '        uint totalPartition  = 5;  \n', '        \n', '        if (alreadyPlayed[msg.sender]){  // has user played before? then odds are 2:5, not 3:5\n', '            winnerOdds = 2; \n', '        }\n', '        \n', '        alreadyPlayed[msg.sender] = true; // remember that user has already played for next time\n', '        \n', '        // expand partitions to % (minimizes rounding), calculate winning change in % (x out of 100)\n', '        winnerOdds = winnerOdds * 20;  // 3*20 = 60% winning chance, or 2*20 = 40% winning chance\n', '        totalPartition = totalPartition * 20;    // 5*20 = 100%\n', '        // END - Set winning odds\n', '        \n', '        // Create new random number\n', '        uint256 random = createRandomNumber(totalPartition); // creates a random number between 0 and 99\n', '        bool winner = true;\n', '        \n', '        // Depending on mode, user wins if numbers are in the lower range or higher range.\n', '        if (modeA){  // Mode A (default) is: lower numbers win,  0-60, or 0-40, depending on odds\n', '            if (random > winnerOdds ) winner = false;\n', '        }\n', '        else {   // Mode B is: higer numbers win 40-100, or 60-100, depending on odds\n', '            if (random < (100 - winnerOdds) ) winner = false;\n', '        }\n', '\n', '        // Pay winner (2 * bet amount)\n', '        if (winner){\n', '            if (!msg.sender.send(msg.value * 2)) // winner double\n', '                throw; // roll back if there was an error\n', '        }\n', '        // GAME FINISHED.\n', '    }\n', '\n', '\n', '      ///////////////////////////////////////////////\n', '     // Random Number Generator\n', '    //////////////////////////////////////////////\n', '\n', '    address lastPlayer;\n', '    uint256 private seed1;\n', '    uint256 private seed2;\n', '    uint256 private seed3;\n', '    uint256 private seed4;\n', '    uint256 private seed5;\n', '    uint256 private lastBlock;\n', '    uint256 private lastRandom;\n', '    uint256 private lastGas;\n', '    uint256 private customSeed;\n', '    \n', '    function createRandomNumber(uint maxnum) returns (uint256) {\n', '        uint cnt;\n', '        for (cnt = 0; cnt < lastRandom % 5; cnt++){lastBlock = lastBlock - block.timestamp;} // randomize gas\n', '        uint256 random = \n', '                  block.difficulty + block.gaslimit + \n', '                  block.timestamp + msg.gas + \n', '                  msg.value + tx.gasprice + \n', '                  seed1 + seed2 + seed3 + seed4 + seed5;\n', '        random = random + uint256(block.blockhash(block.number - (lastRandom+1))[cnt]) +\n', '                  (gamesPlayed*1234567890) * lastBlock + customSeed;\n', '        random = random + uint256(lastPlayer) +  uint256(sha3(msg.sender)[cnt]);\n', '        lastBlock = block.number;\n', '        seed5 = seed4; seed4 = seed3; seed3 = seed2;\n', '        seed2 = seed1; seed1 = (random / 43) + lastRandom; \n', '        bytes32 randomsha = sha3(random);\n', '        lastRandom = (uint256(randomsha[cnt]) * maxnum) / 256;\n', '        \n', '        return lastRandom ;\n', '        \n', '    }\n', '    \n', '    \n', '    ///////////////////////////////////////////////\n', '    // Maintenance    ToDo: doc @MC\n', '    /////////////////////////////\n', '    uint256 public maxGamesPerBlock;  // Block limit\n', '    mapping ( uint256 => uint256 ) blockUsed;  // prevent more than 2 games per block; \n', '                                               //\n', '    \n', '    function PPBC_API()  { // Constructor: ToDo: obfuscate\n', '        //initialize\n', '        gamesPlayed = 0;\n', '        paddyAdmin = msg.sender;\n', '        lastPlayer = msg.sender;\n', '        seed1 = 2; seed2 = 3; seed3 = 5; seed4 = 7; seed5 = 11;\n', '        lastBlock = 0;\n', '        customSeed = block.number;\n', '        maxGamesPerBlock = 3;\n', '    }\n', '    \n', '    modifier onlyOwner {\n', '        if (msg.sender != paddyAdmin) throw;\n', '        _;\n', '    }\n', '\n', '    function _maint_withdrawFromPool (uint256 amt) onlyOwner{ // balance to stay below approved limit / comply with regulation\n', '            if (!paddyAdmin.send(amt)) throw;\n', '    }\n', '    \n', '    function _maint_EndPromo () onlyOwner {\n', '         selfdestruct(paddyAdmin); \n', '    }\n', '\n', '    function _maint_setBlockLimit (uint256 n_limit) onlyOwner {\n', '         maxGamesPerBlock = n_limit;\n', '    }\n', '    \n', '    function _maint_setCustomSeed(uint256 newSeed) onlyOwner {\n', '        customSeed = newSeed;\n', '    }\n', '    \n', '    function _maint_updateOwner (address newOwner) onlyOwner {\n', '        paddyAdmin = newOwner;\n', '    }\n', '    \n', '    function () payable {} // Used by PaddyPower Admin to load Pool\n', '    \n', '}']