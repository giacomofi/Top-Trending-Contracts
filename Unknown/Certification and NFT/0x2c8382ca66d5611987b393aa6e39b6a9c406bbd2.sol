['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    assert(b > 0);\n', '    uint c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', ' \n', '}\n', '\n', '/*\n', ' * Token - is a smart contract interface \n', ' * for managing common functionality of \n', ' * a token.\n', ' *\n', ' * ERC.20 Token standard: https://github.com/eth ereum/EIPs/issues/20\n', ' */\n', 'contract TokenInterface {\n', '        // total amount of tokens\n', '        uint256 totalSupply;\n', '\n', '        /**\n', '         *\n', '         * balanceOf() - constant function check concrete tokens balance  \n', '         *\n', '         *  @param owner - account owner\n', '         *  \n', '         *  @return the value of balance \n', '         */\n', '        function balanceOf(address owner) constant returns(uint256 balance);\n', '        function transfer(address to, uint256 value) returns(bool success);\n', '        function transferFrom(address from, address to, uint256 value) returns(bool success);\n', '\n', '        /**\n', '         *\n', '         * approve() - function approves to a person to spend some tokens from \n', '         *           owner balance. \n', '         *\n', '         *  @param spender - person whom this right been granted.\n', '         *  @param value   - value to spend.\n', '         * \n', '         *  @return true in case of succes, otherwise failure\n', '         * \n', '         */\n', '        function approve(address spender, uint256 value) returns(bool success);\n', '\n', '        /**\n', '         *\n', '         * allowance() - constant function to check how much is \n', '         *               permitted to spend to 3rd person from owner balance\n', '         *\n', '         *  @param owner   - owner of the balance\n', '         *  @param spender - permitted to spend from this balance person \n', '         *  \n', '         *  @return - remaining right to spend \n', '         * \n', '         */\n', '        function allowance(address owner, address spender) constant returns(uint256 remaining);\n', '\n', '        // events notifications\n', '        event Transfer(address indexed from, address indexed to, uint256 value);\n', '        event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/*\n', ' * StandardToken - is a smart contract  \n', ' * for managing common functionality of \n', ' * a token.\n', ' *\n', ' * ERC.20 Token standard: \n', ' *         https://github.com/eth ereum/EIPs/issues/20\n', ' */\n', 'contract StandardToken is TokenInterface {\n', '        // token ownership\n', '        mapping(address => uint256) balances;\n', '\n', '        // spending permision management\n', '        mapping(address => mapping(address => uint256)) allowed;\n', '\n', '        address owner;\n', '        //best 10 owners\n', '        address[] best_wals;\n', '        uint[] best_count;\n', '\n', '        function StandardToken() {\n', '            for(uint8 i = 0; i < 10; i++) {\n', '                best_wals.push(address(0));\n', '                best_count.push(0);\n', '            }\n', '        }\n', '        \n', '        /**\n', '         * transfer() - transfer tokens from msg.sender balance \n', '         *              to requested account\n', '         *\n', '         *  @param to    - target address to transfer tokens\n', '         *  @param value - ammount of tokens to transfer\n', '         *\n', '         *  @return - success / failure of the transaction\n', '         */\n', '        function transfer(address to, uint256 value) returns(bool success) {\n', '\n', '                if (balances[msg.sender] >= value && value > 0) {\n', '                        // do actual tokens transfer       \n', '                        balances[msg.sender] -= value;\n', '                        balances[to] += value;\n', '\n', '                        CheckBest(balances[to], to);\n', '\n', '                        // rise the Transfer event\n', '                        Transfer(msg.sender, to, value);\n', '                        return true;\n', '                } else {\n', '\n', '                        return false;\n', '                }\n', '\n', '        }\n', '\n', '        function transferWithoutChangeBest(address to, uint256 value) returns(bool success) {\n', '\n', '                if (balances[msg.sender] >= value && value > 0) {\n', '                        // do actual tokens transfer       \n', '                        balances[msg.sender] -= value;\n', '                        balances[to] += value;\n', '\n', '                        // rise the Transfer event\n', '                        Transfer(msg.sender, to, value);\n', '                        return true;\n', '                } else {\n', '\n', '                        return false;\n', '                }\n', '\n', '        }\n', '\n', '        /**\n', '         * transferFrom() - \n', '         *\n', '         *  @param from  - \n', '         *  @param to    - \n', '         *  @param value - \n', '         *\n', '         *  @return \n', '         */\n', '        function transferFrom(address from, address to, uint256 value) returns(bool success) {\n', '\n', '                if (balances[from] >= value &&\n', '                        allowed[from][msg.sender] >= value &&\n', '                        value > 0) {\n', '\n', '\n', '                        // do the actual transfer\n', '                        balances[from] -= value;\n', '                        balances[to] += value;\n', '\n', '                        CheckBest(balances[to], to);\n', '\n', '                        // addjust the permision, after part of \n', '                        // permited to spend value was used\n', '                        allowed[from][msg.sender] -= value;\n', '\n', '                        // rise the Transfer event\n', '                        Transfer(from, to, value);\n', '                        return true;\n', '                } else {\n', '\n', '                        return false;\n', '                }\n', '        }\n', '\n', '        function CheckBest(uint _tokens, address _address) {\n', '            //дописать токен проверку лучших (перенести из краудсейла)\n', '            for(uint8 i = 0; i < 10; i++) {\n', '                            if(best_count[i] < _tokens) {\n', '                                for(uint8 j = 9; j > i; j--) {\n', '                                    best_count[j] = best_count[j-1];\n', '                                    best_wals[j] = best_wals[j-1];\n', '                                }\n', '\n', '                                best_count[i] = _tokens;\n', '                                best_wals[i] = _address;\n', '                                break;\n', '                            }\n', '                        }\n', '        }\n', '\n', '        /**\n', '         *\n', '         * balanceOf() - constant function check concrete tokens balance  \n', '         *\n', '         *  @param owner - account owner\n', '         *  \n', '         *  @return the value of balance \n', '         */\n', '        function balanceOf(address owner) constant returns(uint256 balance) {\n', '                return balances[owner];\n', '        }\n', '\n', '        /**\n', '         *\n', '         * approve() - function approves to a person to spend some tokens from \n', '         *           owner balance. \n', '         *\n', '         *  @param spender - person whom this right been granted.\n', '         *  @param value   - value to spend.\n', '         * \n', '         *  @return true in case of succes, otherwise failure\n', '         * \n', '         */\n', '        function approve(address spender, uint256 value) returns(bool success) {\n', '\n', '                // now spender can use balance in \n', '                // ammount of value from owner balance\n', '                allowed[msg.sender][spender] = value;\n', '\n', '                // rise event about the transaction\n', '                Approval(msg.sender, spender, value);\n', '\n', '                return true;\n', '        }\n', '\n', '        /**\n', '         *\n', '         * allowance() - constant function to check how mouch is \n', '         *               permited to spend to 3rd person from owner balance\n', '         *\n', '         *  @param owner   - owner of the balance\n', '         *  @param spender - permited to spend from this balance person \n', '         *  \n', '         *  @return - remaining right to spend \n', '         * \n', '         */\n', '        function allowance(address owner, address spender) constant returns(uint256 remaining) {\n', '                return allowed[owner][spender];\n', '        }\n', '\n', '}\n', '\n', 'contract LeviusDAO is StandardToken {\n', '\n', '    string public constant symbol = "LeviusDAO";\n', '    string public constant name = "LeviusDAO";\n', '\n', '    uint8 public constant decimals = 8;\n', '    uint DECIMAL_ZEROS = 10**8;\n', '\n', '    modifier onlyOwner { assert(msg.sender == owner); _; }\n', '\n', '    event BestCountTokens(uint _amount);\n', '    event BestWallet(address _address);\n', '\n', '    // Constructor\n', '    function LeviusDAO() {\n', '        totalSupply = 5000000000 * DECIMAL_ZEROS;\n', '        owner = msg.sender;\n', '        balances[msg.sender] = totalSupply;\n', '    }\n', '\n', '    function GetBestTokenCount(uint8 _num) returns (uint) {\n', '        assert(_num < 10);\n', '        BestCountTokens(best_count[_num]);\n', '        return best_count[_num];\n', '    }\n', '\n', '    function GetBestWalletAddress(uint8 _num) onlyOwner returns (address) {\n', '        assert(_num < 10);\n', '        BestWallet(best_wals[_num]);\n', '        return best_wals[_num];\n', '    }\n', '}\n', '\n', 'contract CrowdsaleLeviusDAO {\n', '    using SafeMath for uint;\n', '    uint public start_ico = 1503964800;//P2: GMT: 29-Aug-2017 00:00  => Start ico\n', '    uint public round1 = 1504224000;//P3: GMT: 1-Sep-2017 00:00  => End round1\n', '    uint public deadline = 1509148800;// GMT: 28-Oct-2017 00:00 => End ico\n', '\n', '    //uint public start_ico = now + 5 minutes;//P2: GMT: 18-Aug-2017 00:00  => Start ico\n', '    //uint public round1 = now + 10 minutes;//P3: GMT: 13-Aug-2017 00:00  => End round1\n', '    //uint public deadline = now + 15 minutes;\n', '\n', '    uint amountRaised;\n', '    LeviusDAO public tokenReward;\n', '    bool crowdsaleClosed = false;\n', '    bool public fundingGoalReached = false;\n', '    address owner;\n', '\n', '    // 1 ether = 300$\n', '    // 1 ether = 12,000 LeviusDAO (1 LeviusDAO = 0.03$) Bonus: 20%\n', '    uint PRICE_01 = 12000;\n', '\n', '    // 1 ether = 9,000 LeviusDAO (1 LeviusDAO = 0.04$) Bonus: 20%\n', '    uint PRICE_02 = 9000;\n', '\n', '    // 1 ether = 7,500 LeviusDAO (1 LeviusDAO = 0.04$) Bonus: 0%\n', '    uint PRICE_03 = 7500;\n', '\n', '    uint DECIMAL_ZEROS = 100000000;\n', '\n', '    //12,500,000 LeviusDAO * 0.04$ = 500,000$\n', '    //500,000 / 300 = 1,700 ethers\n', '    uint public constant MIN_CAP = 1700 ether;    \n', '\n', '    mapping(address => uint256) eth_balance;\n', '\n', '    //if (addr == address(0)) throw;\n', '\n', '    event FundTransfer(address backer, uint amount);\n', '    event SendTokens(uint amount);\n', '    \n', '    modifier afterDeadline() { if (now >= deadline) _; }\n', '    modifier onlyOwner { assert(msg.sender == owner); _; }\n', '\n', '    function CrowdsaleLeviusDAO(\n', '        address addressOfTokenUsedAsReward\n', '        ) {\n', '        \n', '        tokenReward = LeviusDAO(addressOfTokenUsedAsReward);\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function () payable {\n', '        assert(now <= deadline);\n', '\n', '        uint tokens = msg.value * getPrice() * DECIMAL_ZEROS / 1 ether;\n', '\n', '        assert(tokenReward.balanceOf(address(this)) >= tokens);\n', '\n', '        amountRaised += msg.value;\n', '        eth_balance[msg.sender] += msg.value;\n', '        tokenReward.transfer(msg.sender, tokens);        \n', '\n', '        if(!fundingGoalReached) {\n', '            if(amountRaised >= MIN_CAP) {\n', '                fundingGoalReached = true;\n', '            }\n', '        }\n', '\n', '        SendTokens(tokens);\n', '        FundTransfer(msg.sender, msg.value);\n', '    }\n', '\n', '    function getPrice() constant returns(uint result) {\n', '        if (now <= start_ico) {\n', '            result = PRICE_01;\n', '        }\n', '        else {\n', '            if(now <= round1) {\n', '                result = PRICE_02;\n', '            }\n', '            else {\n', '                result = PRICE_03;\n', '            }\n', '        }\n', '    }\n', '\n', '    function safeWithdrawal() afterDeadline {\n', '        if (!fundingGoalReached) {\n', '            uint amount = eth_balance[msg.sender];\n', '            eth_balance[msg.sender] = 0;\n', '\n', '            if (amount > 0) {\n', '                if (msg.sender.send(amount)) {\n', '                    FundTransfer(msg.sender, amount);\n', '                } else {\n', '                    eth_balance[msg.sender] = amount;\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    function WithdrawalTokensAfterDeadLine() onlyOwner {\n', '        assert(now > deadline);\n', '\n', '        tokenReward.transferWithoutChangeBest(msg.sender, tokenReward.balanceOf(address(this)));\n', '    }\n', '\n', '    function WithdrawalAfterGoalReached() {\n', '        assert(fundingGoalReached && owner == msg.sender);\n', '            \n', '            if (owner.send(amountRaised)) {\n', '                FundTransfer(owner, amountRaised);\n', '            } else {\n', '                //If we fail to send the funds to beneficiary, unlock funders balance\n', '                fundingGoalReached = false;\n', '            }\n', '        //}\n', '    }\n', '}']