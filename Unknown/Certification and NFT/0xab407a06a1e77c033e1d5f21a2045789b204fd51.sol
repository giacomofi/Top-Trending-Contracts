['pragma solidity ^0.4.8;\n', 'contract token { function transfer(address receiver, uint amount) returns (bool) {  } }\n', '\n', 'contract LuxPresale {\n', '    address public beneficiary;\n', '    uint public totalLux; uint public amountRaised; uint public deadline; uint public price; uint public presaleStartDate;\n', '    token public tokenReward;\n', '    mapping(address => uint) public balanceOf;\n', '    bool fundingGoalReached = false; //закрыт ли сбор денег\n', '    event GoalReached(address beneficiary, uint amountRaised);\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '    bool crowdsaleClosed = false;\n', '\n', '    /* data structure to hold information about campaign contributors */\n', '\n', '    /*  at initialization, setup the owner */\n', '    function LuxPresale(\n', '        address ifSuccessfulSendTo,\n', '        uint fundingGoalInLux,\n', '        uint startDate,\n', '        uint durationInMinutes,\n', '        token addressOfTokenUsedAsReward\n', '    ) {\n', '        beneficiary = ifSuccessfulSendTo;\n', '        totalLux = fundingGoalInLux * 100; // сколько люксов раздадим\n', '        presaleStartDate = startDate; // дата начала пресейла\n', '        deadline = startDate + durationInMinutes * 1 minutes;\n', '        tokenReward = token(addressOfTokenUsedAsReward);\n', '    }\n', '    \n', '    /* The function without name is the default function that is called whenever anyone sends funds to a contract */\n', '    \n', '    function () payable {\n', '        if (now < presaleStartDate) throw; // A participant cannot send funds before the presale start date\n', '\n', '        if (crowdsaleClosed) { // выплачиваем токины \n', '\t\t\tif (msg.value > 0) throw; // если после закрытия перечисляем эфиры\n', '            uint reward = balanceOf[msg.sender];\n', '            balanceOf[msg.sender] = 0;\n', '            if (reward > 0) {\n', '                if (!tokenReward.transfer(msg.sender, reward/price)) {\n', '                    balanceOf[msg.sender] = reward;\n', '                }\n', '            }        \n', '        } else { // Сохраняем данные о том кто сколько заплатил\n', '            uint amount = msg.value; // сколько переведено средств\n', '            balanceOf[msg.sender] += amount; // обновляем баланс\n', '            amountRaised += amount; // увеличиваем сумму собранных денег\n', '        }\n', '    }\n', '    \n', '    modifier afterDeadline() { if (now >= deadline) _; }\n', '    \n', '    modifier onlyOwner() {\n', '        if (msg.sender != beneficiary) {\n', '            throw;\n', '        }\n', '        _;\n', '    }\n', '\n', '    /* checks if the goal or time limit has been reached and ends the campaign */\n', '    /* закрываем сбор денег */\n', '    function setGoalReached() afterDeadline {\n', '        if (amountRaised == 0) throw; // если не собрали денег\n', '        if (crowdsaleClosed) throw; // попытка второй раз закрыть\n', '        crowdsaleClosed = true;\n', '        price = amountRaised/totalLux; // цена 1 люкса\n', '    }\n', '\n', '    /*  */\n', '    function safeWithdrawal() afterDeadline onlyOwner {\n', '        if (!crowdsaleClosed) throw;\n', '        if (beneficiary.send(amountRaised)) {\n', '            FundTransfer(beneficiary, amountRaised, false);\n', '        }\n', '    }\n', '}']
['pragma solidity ^0.4.8;\n', 'contract token { function transfer(address receiver, uint amount) returns (bool) {  } }\n', '\n', 'contract LuxPresale {\n', '    address public beneficiary;\n', '    uint public totalLux; uint public amountRaised; uint public deadline; uint public price; uint public presaleStartDate;\n', '    token public tokenReward;\n', '    mapping(address => uint) public balanceOf;\n', '    bool fundingGoalReached = false; //закрыт ли сбор денег\n', '    event GoalReached(address beneficiary, uint amountRaised);\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '    bool crowdsaleClosed = false;\n', '\n', '    /* data structure to hold information about campaign contributors */\n', '\n', '    /*  at initialization, setup the owner */\n', '    function LuxPresale(\n', '        address ifSuccessfulSendTo,\n', '        uint fundingGoalInLux,\n', '        uint startDate,\n', '        uint durationInMinutes,\n', '        token addressOfTokenUsedAsReward\n', '    ) {\n', '        beneficiary = ifSuccessfulSendTo;\n', '        totalLux = fundingGoalInLux * 100; // сколько люксов раздадим\n', '        presaleStartDate = startDate; // дата начала пресейла\n', '        deadline = startDate + durationInMinutes * 1 minutes;\n', '        tokenReward = token(addressOfTokenUsedAsReward);\n', '    }\n', '    \n', '    /* The function without name is the default function that is called whenever anyone sends funds to a contract */\n', '    \n', '    function () payable {\n', '        if (now < presaleStartDate) throw; // A participant cannot send funds before the presale start date\n', '\n', '        if (crowdsaleClosed) { // выплачиваем токины \n', '\t\t\tif (msg.value > 0) throw; // если после закрытия перечисляем эфиры\n', '            uint reward = balanceOf[msg.sender];\n', '            balanceOf[msg.sender] = 0;\n', '            if (reward > 0) {\n', '                if (!tokenReward.transfer(msg.sender, reward/price)) {\n', '                    balanceOf[msg.sender] = reward;\n', '                }\n', '            }        \n', '        } else { // Сохраняем данные о том кто сколько заплатил\n', '            uint amount = msg.value; // сколько переведено средств\n', '            balanceOf[msg.sender] += amount; // обновляем баланс\n', '            amountRaised += amount; // увеличиваем сумму собранных денег\n', '        }\n', '    }\n', '    \n', '    modifier afterDeadline() { if (now >= deadline) _; }\n', '    \n', '    modifier onlyOwner() {\n', '        if (msg.sender != beneficiary) {\n', '            throw;\n', '        }\n', '        _;\n', '    }\n', '\n', '    /* checks if the goal or time limit has been reached and ends the campaign */\n', '    /* закрываем сбор денег */\n', '    function setGoalReached() afterDeadline {\n', '        if (amountRaised == 0) throw; // если не собрали денег\n', '        if (crowdsaleClosed) throw; // попытка второй раз закрыть\n', '        crowdsaleClosed = true;\n', '        price = amountRaised/totalLux; // цена 1 люкса\n', '    }\n', '\n', '    /*  */\n', '    function safeWithdrawal() afterDeadline onlyOwner {\n', '        if (!crowdsaleClosed) throw;\n', '        if (beneficiary.send(amountRaised)) {\n', '            FundTransfer(beneficiary, amountRaised, false);\n', '        }\n', '    }\n', '}']
