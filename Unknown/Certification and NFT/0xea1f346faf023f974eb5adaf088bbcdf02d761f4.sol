['pragma solidity ^0.4.11;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value);\n', '  function approve(address spender, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // if (_value > _allowance) throw;\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Stalled ERC20 token\n', ' */\n', 'contract TIXStalledToken {\n', '  uint256 public totalSupply;\n', '  bool public isFinalized; // switched to true in operational state\n', '  address public ethFundDeposit; // deposit address for ETH for Blocktix\n', '\n', '  function balanceOf(address who) constant returns (uint256);\n', '}\n', '\n', '\n', '/**\n', ' * @title Blocktix Token Generation Event contract\n', ' *\n', ' * @dev Based on code by BAT: https://github.com/brave-intl/basic-attention-token-crowdsale/blob/master/contracts/BAToken.sol\n', ' */\n', 'contract TIXToken is StandardToken {\n', '    mapping(address => bool) converted; // Converting from old token contract\n', '\n', '    string public constant name = "Blocktix Token";\n', '    string public constant symbol = "TIX";\n', '    uint256 public constant decimals = 18;\n', '    string public version = "1.0.1";\n', '\n', '    // crowdsale parameters\n', '    bool public isFinalized;                      // switched to true in operational state\n', '    uint256 public startTime = 1501271999;        // crowdsale start time (in seconds) - this will be set once the conversion is done\n', '    uint256 public constant endTime = 1501271999; // crowdsale end time (in seconds)\n', '    uint256 public constant tokenGenerationCap =  62.5 * (10**6) * 10**decimals; // 62.5m TIX\n', '    uint256 public constant tokenExchangeRate = 1041;\n', '\n', '    // addresses\n', '    address public tixGenerationContract; // contract address for TIX v1 Funding\n', '    address public ethFundDeposit;        // deposit address for ETH for Blocktix\n', '\n', '    /**\n', '    * @dev modifier to allow actions only when the contract IS finalized\n', '    */\n', '    modifier whenFinalized() {\n', '        if (!isFinalized) throw;\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev modifier to allow actions only when the contract IS NOT finalized\n', '    */\n', '    modifier whenNotFinalized() {\n', '        if (isFinalized) throw;\n', '        _;\n', '    }\n', '\n', '    // ensures that the current time is between _startTime (inclusive) and _endTime (exclusive)\n', '    modifier between(uint256 _startTime, uint256 _endTime) {\n', '        assert(now >= _startTime && now < _endTime);\n', '        _;\n', '    }\n', '\n', '    // verifies that an amount is greater than zero\n', '    modifier validAmount() {\n', '        require(msg.value > 0);\n', '        _;\n', '    }\n', '\n', '    // validates an address - currently only checks that it isn&#39;t null\n', '    modifier validAddress(address _address) {\n', '        require(_address != 0x0);\n', '        _;\n', '    }\n', '\n', '    // events\n', '    event CreateTIX(address indexed _to, uint256 _value);\n', '\n', '    /**\n', '    * @dev Contructor that assigns all presale tokens and starts the sale\n', '    */\n', '    function TIXToken(address _tixGenerationContract)\n', '    {\n', '        isFinalized = false; // Initialize presale\n', '        tixGenerationContract = _tixGenerationContract;\n', '        ethFundDeposit = TIXStalledToken(tixGenerationContract).ethFundDeposit();\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    *\n', '    * can only be called during once the the funding period has been finalized\n', '    */\n', '    function transfer(address _to, uint _value) whenFinalized {\n', '        super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amout of tokens to be transfered\n', '    *\n', '    * can only be called during once the the funding period has been finalized\n', '    */\n', '    function transferFrom(address _from, address _to, uint _value) whenFinalized {\n', '        super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Accepts ETH and generates TIX tokens\n', '     *\n', '     * can only be called during the crowdsale\n', '     */\n', '    function generateTokens()\n', '        public\n', '        payable\n', '        whenNotFinalized\n', '        between(startTime, endTime)\n', '        validAmount\n', '    {\n', '        if (totalSupply == tokenGenerationCap)\n', '            throw;\n', '\n', '        uint256 tokens = SafeMath.mul(msg.value, tokenExchangeRate); // check that we&#39;re not over totals\n', '        uint256 checkedSupply = SafeMath.add(totalSupply, tokens);\n', '        uint256 diff;\n', '\n', '        // return if something goes wrong\n', '        if (tokenGenerationCap < checkedSupply)\n', '        {\n', '            diff = SafeMath.sub(checkedSupply, tokenGenerationCap);\n', '            if (diff > 10**12)\n', '                throw;\n', '            checkedSupply = SafeMath.sub(checkedSupply, diff);\n', '            tokens = SafeMath.sub(tokens, diff);\n', '        }\n', '\n', '        totalSupply = checkedSupply;\n', '        balances[msg.sender] += tokens;\n', '        CreateTIX(msg.sender, tokens); // logs token creation\n', '    }\n', '\n', '    function hasConverted(address who) constant returns (bool)\n', '    {\n', '      return converted[who];\n', '    }\n', '\n', '    function convert(address _owner)\n', '        external\n', '    {\n', '        TIXStalledToken tixStalled = TIXStalledToken(tixGenerationContract);\n', '        if (tixStalled.isFinalized()) throw; // We can&#39;t convert tokens after the contract is finalized\n', '        if (converted[_owner]) throw; // Throw if they have already converted\n', '        uint256 balanceOf = tixStalled.balanceOf(_owner);\n', '        if (balanceOf <= 0) throw; // Throw if they don&#39;t have an existing balance\n', '        converted[_owner] = true;\n', '        totalSupply += balanceOf;\n', '        balances[_owner] += balanceOf;\n', '        Transfer(this, _owner, balanceOf);\n', '    }\n', '\n', '    function continueGeneration()\n', '        external\n', '    {\n', '        TIXStalledToken tixStalled = TIXStalledToken(tixGenerationContract);\n', '        // Allow the sale to continue\n', '        if (totalSupply == tixStalled.totalSupply() && tixStalled.isFinalized())\n', '          startTime = now;\n', '        else\n', '          throw;\n', '    }\n', '\n', '    /**\n', '    * @dev Ends the funding period and sends the ETH home\n', '    */\n', '    function finalize()\n', '        external\n', '        whenNotFinalized\n', '    {\n', '        if (msg.sender != ethFundDeposit) throw; // locks finalize to the ultimate ETH owner\n', '        if (now <= endTime && totalSupply != tokenGenerationCap) throw;\n', '        // move to operational\n', '        isFinalized = true;\n', '        if(!ethFundDeposit.send(this.balance)) throw;  // send the eth to Blocktix\n', '    }\n', '\n', '    // fallback\n', '    function()\n', '        payable\n', '        whenNotFinalized\n', '    {\n', '        generateTokens();\n', '    }\n', '}']
['pragma solidity ^0.4.11;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value);\n', '  function approve(address spender, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // if (_value > _allowance) throw;\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Stalled ERC20 token\n', ' */\n', 'contract TIXStalledToken {\n', '  uint256 public totalSupply;\n', '  bool public isFinalized; // switched to true in operational state\n', '  address public ethFundDeposit; // deposit address for ETH for Blocktix\n', '\n', '  function balanceOf(address who) constant returns (uint256);\n', '}\n', '\n', '\n', '/**\n', ' * @title Blocktix Token Generation Event contract\n', ' *\n', ' * @dev Based on code by BAT: https://github.com/brave-intl/basic-attention-token-crowdsale/blob/master/contracts/BAToken.sol\n', ' */\n', 'contract TIXToken is StandardToken {\n', '    mapping(address => bool) converted; // Converting from old token contract\n', '\n', '    string public constant name = "Blocktix Token";\n', '    string public constant symbol = "TIX";\n', '    uint256 public constant decimals = 18;\n', '    string public version = "1.0.1";\n', '\n', '    // crowdsale parameters\n', '    bool public isFinalized;                      // switched to true in operational state\n', '    uint256 public startTime = 1501271999;        // crowdsale start time (in seconds) - this will be set once the conversion is done\n', '    uint256 public constant endTime = 1501271999; // crowdsale end time (in seconds)\n', '    uint256 public constant tokenGenerationCap =  62.5 * (10**6) * 10**decimals; // 62.5m TIX\n', '    uint256 public constant tokenExchangeRate = 1041;\n', '\n', '    // addresses\n', '    address public tixGenerationContract; // contract address for TIX v1 Funding\n', '    address public ethFundDeposit;        // deposit address for ETH for Blocktix\n', '\n', '    /**\n', '    * @dev modifier to allow actions only when the contract IS finalized\n', '    */\n', '    modifier whenFinalized() {\n', '        if (!isFinalized) throw;\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev modifier to allow actions only when the contract IS NOT finalized\n', '    */\n', '    modifier whenNotFinalized() {\n', '        if (isFinalized) throw;\n', '        _;\n', '    }\n', '\n', '    // ensures that the current time is between _startTime (inclusive) and _endTime (exclusive)\n', '    modifier between(uint256 _startTime, uint256 _endTime) {\n', '        assert(now >= _startTime && now < _endTime);\n', '        _;\n', '    }\n', '\n', '    // verifies that an amount is greater than zero\n', '    modifier validAmount() {\n', '        require(msg.value > 0);\n', '        _;\n', '    }\n', '\n', "    // validates an address - currently only checks that it isn't null\n", '    modifier validAddress(address _address) {\n', '        require(_address != 0x0);\n', '        _;\n', '    }\n', '\n', '    // events\n', '    event CreateTIX(address indexed _to, uint256 _value);\n', '\n', '    /**\n', '    * @dev Contructor that assigns all presale tokens and starts the sale\n', '    */\n', '    function TIXToken(address _tixGenerationContract)\n', '    {\n', '        isFinalized = false; // Initialize presale\n', '        tixGenerationContract = _tixGenerationContract;\n', '        ethFundDeposit = TIXStalledToken(tixGenerationContract).ethFundDeposit();\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    *\n', '    * can only be called during once the the funding period has been finalized\n', '    */\n', '    function transfer(address _to, uint _value) whenFinalized {\n', '        super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amout of tokens to be transfered\n', '    *\n', '    * can only be called during once the the funding period has been finalized\n', '    */\n', '    function transferFrom(address _from, address _to, uint _value) whenFinalized {\n', '        super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Accepts ETH and generates TIX tokens\n', '     *\n', '     * can only be called during the crowdsale\n', '     */\n', '    function generateTokens()\n', '        public\n', '        payable\n', '        whenNotFinalized\n', '        between(startTime, endTime)\n', '        validAmount\n', '    {\n', '        if (totalSupply == tokenGenerationCap)\n', '            throw;\n', '\n', "        uint256 tokens = SafeMath.mul(msg.value, tokenExchangeRate); // check that we're not over totals\n", '        uint256 checkedSupply = SafeMath.add(totalSupply, tokens);\n', '        uint256 diff;\n', '\n', '        // return if something goes wrong\n', '        if (tokenGenerationCap < checkedSupply)\n', '        {\n', '            diff = SafeMath.sub(checkedSupply, tokenGenerationCap);\n', '            if (diff > 10**12)\n', '                throw;\n', '            checkedSupply = SafeMath.sub(checkedSupply, diff);\n', '            tokens = SafeMath.sub(tokens, diff);\n', '        }\n', '\n', '        totalSupply = checkedSupply;\n', '        balances[msg.sender] += tokens;\n', '        CreateTIX(msg.sender, tokens); // logs token creation\n', '    }\n', '\n', '    function hasConverted(address who) constant returns (bool)\n', '    {\n', '      return converted[who];\n', '    }\n', '\n', '    function convert(address _owner)\n', '        external\n', '    {\n', '        TIXStalledToken tixStalled = TIXStalledToken(tixGenerationContract);\n', "        if (tixStalled.isFinalized()) throw; // We can't convert tokens after the contract is finalized\n", '        if (converted[_owner]) throw; // Throw if they have already converted\n', '        uint256 balanceOf = tixStalled.balanceOf(_owner);\n', "        if (balanceOf <= 0) throw; // Throw if they don't have an existing balance\n", '        converted[_owner] = true;\n', '        totalSupply += balanceOf;\n', '        balances[_owner] += balanceOf;\n', '        Transfer(this, _owner, balanceOf);\n', '    }\n', '\n', '    function continueGeneration()\n', '        external\n', '    {\n', '        TIXStalledToken tixStalled = TIXStalledToken(tixGenerationContract);\n', '        // Allow the sale to continue\n', '        if (totalSupply == tixStalled.totalSupply() && tixStalled.isFinalized())\n', '          startTime = now;\n', '        else\n', '          throw;\n', '    }\n', '\n', '    /**\n', '    * @dev Ends the funding period and sends the ETH home\n', '    */\n', '    function finalize()\n', '        external\n', '        whenNotFinalized\n', '    {\n', '        if (msg.sender != ethFundDeposit) throw; // locks finalize to the ultimate ETH owner\n', '        if (now <= endTime && totalSupply != tokenGenerationCap) throw;\n', '        // move to operational\n', '        isFinalized = true;\n', '        if(!ethFundDeposit.send(this.balance)) throw;  // send the eth to Blocktix\n', '    }\n', '\n', '    // fallback\n', '    function()\n', '        payable\n', '        whenNotFinalized\n', '    {\n', '        generateTokens();\n', '    }\n', '}']
