['pragma solidity ^0.4.11;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title PullPayment\n', ' * @dev Base contract supporting async send for pull payments. Inherit from this\n', ' * contract and use asyncSend instead of send.\n', ' */\n', 'contract PullPayment {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) public payments;\n', '  uint256 public totalPayments;\n', '\n', '  /**\n', '  * @dev Called by the payer to store the sent amount as credit to be pulled.\n', '  * @param dest The destination address of the funds.\n', '  * @param amount The amount to transfer.\n', '  */\n', '  function asyncSend(address dest, uint256 amount) internal {\n', '    payments[dest] = payments[dest].add(amount);\n', '    totalPayments = totalPayments.add(amount);\n', '  }\n', '\n', '  /**\n', '  * @dev withdraw accumulated balance, called by payee.\n', '  */\n', '  function withdrawPayments() {\n', '    address payee = msg.sender;\n', '    uint256 payment = payments[payee];\n', '\n', '    require(payment != 0);\n', '    require(this.balance >= payment);\n', '\n', '    totalPayments = totalPayments.sub(payment);\n', '    payments[payee] = 0;\n', '\n', '    assert(payee.send(payment));\n', '  }\n', '}\n', '\n', 'contract TrivialToken is StandardToken, PullPayment {\n', '    //Constants\n', '    uint8 constant DECIMALS = 0;\n', '    uint256 constant MIN_ETH_AMOUNT = 0.005 ether;\n', '    uint256 constant MIN_BID_PERCENTAGE = 10;\n', '    uint256 constant TOTAL_SUPPLY = 1000000;\n', '    uint256 constant TOKENS_PERCENTAGE_FOR_KEY_HOLDER = 25;\n', '    uint256 constant CLEANUP_DELAY = 180 days;\n', '    uint256 constant FREE_PERIOD_DURATION = 60 days;\n', '\n', '    //Basic\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '\n', '    //Accounts\n', '    address public artist;\n', '    address public trivial;\n', '\n', '    //Time information\n', '    uint256 public icoDuration;\n', '    uint256 public icoEndTime;\n', '    uint256 public auctionDuration;\n', '    uint256 public auctionEndTime;\n', '    uint256 public freePeriodEndTime;\n', '\n', '    //Token information\n', '    uint256 public tokensForArtist;\n', '    uint256 public tokensForTrivial;\n', '    uint256 public tokensForIco;\n', '\n', '    //ICO and auction results\n', '    uint256 public amountRaised;\n', '    address public highestBidder;\n', '    uint256 public highestBid;\n', '    bytes32 public auctionWinnerMessageHash;\n', '    uint256 public nextContributorIndexToBeGivenTokens;\n', '    uint256 public tokensDistributedToContributors;\n', '\n', '    //Events\n', '    event IcoStarted(uint256 icoEndTime);\n', '    event IcoContributed(address contributor, uint256 amountContributed, uint256 amountRaised);\n', '    event IcoFinished(uint256 amountRaised);\n', '    event IcoCancelled();\n', '    event AuctionStarted(uint256 auctionEndTime);\n', '    event HighestBidChanged(address highestBidder, uint256 highestBid);\n', '    event AuctionFinished(address highestBidder, uint256 highestBid);\n', '    event WinnerProvidedHash();\n', '\n', '    //State\n', '    enum State { Created, IcoStarted, IcoFinished, AuctionStarted, AuctionFinished, IcoCancelled }\n', '    State public currentState;\n', '\n', '    //Item description\n', '    struct DescriptionHash {\n', '        bytes32 descriptionHash;\n', '        uint256 timestamp;\n', '    }\n', '    DescriptionHash public descriptionHash;\n', '    DescriptionHash[] public descriptionHashHistory;\n', '\n', '    //Token contributors and holders\n', '    mapping(address => uint) public contributions;\n', '    address[] public contributors;\n', '\n', '    //Modififers\n', '    modifier onlyInState(State expectedState) { require(expectedState == currentState); _; }\n', '    modifier onlyBefore(uint256 _time) { require(now < _time); _; }\n', '    modifier onlyAfter(uint256 _time) { require(now > _time); _; }\n', '    modifier onlyTrivial() { require(msg.sender == trivial); _; }\n', '    modifier onlyArtist() { require(msg.sender == artist); _; }\n', '    modifier onlyAuctionWinner() {\n', '        require(currentState == State.AuctionFinished);\n', '        require(msg.sender == highestBidder);\n', '        _;\n', '    }\n', '\n', '    function TrivialToken(\n', '        string _name, string _symbol,\n', '        uint256 _icoDuration, uint256 _auctionDuration,\n', '        address _artist, address _trivial,\n', '        uint256 _tokensForArtist,\n', '        uint256 _tokensForTrivial,\n', '        uint256 _tokensForIco,\n', '        bytes32 _descriptionHash\n', '    ) {\n', '        /*require(\n', '            TOTAL_SUPPLY == SafeMath.add(\n', '                _tokensForArtist,\n', '                SafeMath.add(_tokensForTrivial, _tokensForIco)\n', '            )\n', '        );*/\n', '        require(MIN_BID_PERCENTAGE < 100);\n', '        require(TOKENS_PERCENTAGE_FOR_KEY_HOLDER < 100);\n', '\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = DECIMALS;\n', '\n', '        icoDuration = _icoDuration;\n', '        auctionDuration = _auctionDuration;\n', '        artist = _artist;\n', '        trivial = _trivial;\n', '\n', '        tokensForArtist = _tokensForArtist;\n', '        tokensForTrivial = _tokensForTrivial;\n', '        tokensForIco = _tokensForIco;\n', '\n', '        descriptionHash = DescriptionHash(_descriptionHash, now);\n', '        currentState = State.Created;\n', '    }\n', '\n', '    /*\n', '        ICO methods\n', '    */\n', '    function startIco()\n', '    onlyInState(State.Created)\n', '    onlyTrivial() {\n', '        icoEndTime = SafeMath.add(now, icoDuration);\n', '        freePeriodEndTime = SafeMath.add(icoEndTime, FREE_PERIOD_DURATION);\n', '        currentState = State.IcoStarted;\n', '        IcoStarted(icoEndTime);\n', '    }\n', '\n', '    function contributeInIco() payable\n', '    onlyInState(State.IcoStarted)\n', '    onlyBefore(icoEndTime) {\n', '        require(msg.value > MIN_ETH_AMOUNT);\n', '\n', '        if (contributions[msg.sender] == 0) {\n', '            contributors.push(msg.sender);\n', '        }\n', '        contributions[msg.sender] = SafeMath.add(contributions[msg.sender], msg.value);\n', '        amountRaised = SafeMath.add(amountRaised, msg.value);\n', '\n', '        IcoContributed(msg.sender, msg.value, amountRaised);\n', '    }\n', '\n', '    function distributeTokens(uint256 contributorsNumber)\n', '    onlyInState(State.IcoStarted)\n', '    onlyAfter(icoEndTime) {\n', '        for (uint256 i = 0; i < contributorsNumber && nextContributorIndexToBeGivenTokens < contributors.length; ++i) {\n', '            address currentContributor = contributors[nextContributorIndexToBeGivenTokens++];\n', '            uint256 tokensForContributor = SafeMath.div(\n', '                SafeMath.mul(tokensForIco, contributions[currentContributor]),\n', '                amountRaised  // amountRaised can&#39;t be 0, ICO is cancelled then\n', '            );\n', '            balances[currentContributor] = tokensForContributor;\n', '            tokensDistributedToContributors = SafeMath.add(tokensDistributedToContributors, tokensForContributor);\n', '        }\n', '    }\n', '\n', '    function finishIco()\n', '    onlyInState(State.IcoStarted)\n', '    onlyAfter(icoEndTime) {\n', '        if (amountRaised == 0) {\n', '            currentState = State.IcoCancelled;\n', '            return;\n', '        }\n', '\n', '        // all contributors must have received their tokens to finish ICO\n', '        require(nextContributorIndexToBeGivenTokens >= contributors.length);\n', '\n', '        balances[artist] = SafeMath.add(balances[artist], tokensForArtist);\n', '        balances[trivial] = SafeMath.add(balances[trivial], tokensForTrivial);\n', '        uint256 leftovers = SafeMath.sub(tokensForIco, tokensDistributedToContributors);\n', '        balances[artist] = SafeMath.add(balances[artist], leftovers);\n', '\n', '        if (!artist.send(this.balance)) {\n', '            asyncSend(artist, this.balance);\n', '        }\n', '        currentState = State.IcoFinished;\n', '        IcoFinished(amountRaised);\n', '    }\n', '\n', '    function checkContribution(address contributor) constant returns (uint) {\n', '        return contributions[contributor];\n', '    }\n', '\n', '    /*\n', '        Auction methods\n', '    */\n', '    function canStartAuction() returns (bool) {\n', '        bool isArtist = msg.sender == artist;\n', '        bool isKeyHolder = balances[msg.sender] >= SafeMath.div(\n', '        SafeMath.mul(TOTAL_SUPPLY, TOKENS_PERCENTAGE_FOR_KEY_HOLDER), 100);\n', '        return isArtist || isKeyHolder;\n', '    }\n', '\n', '    function startAuction()\n', '    onlyAfter(freePeriodEndTime)\n', '    onlyInState(State.IcoFinished) {\n', '        require(canStartAuction());\n', '\n', '        // 100% tokens owner is the only key holder\n', '        if (balances[msg.sender] == TOTAL_SUPPLY) {\n', '            // no auction takes place,\n', '            highestBidder = msg.sender;\n', '            currentState = State.AuctionFinished;\n', '            AuctionFinished(highestBidder, highestBid);\n', '            return;\n', '        }\n', '\n', '        auctionEndTime = SafeMath.add(now, auctionDuration);\n', '        currentState = State.AuctionStarted;\n', '        AuctionStarted(auctionEndTime);\n', '    }\n', '\n', '    function bidInAuction() payable\n', '    onlyInState(State.AuctionStarted)\n', '    onlyBefore(auctionEndTime) {\n', '        //Must be greater or equal to minimal amount\n', '        require(msg.value >= MIN_ETH_AMOUNT);\n', '        uint256 bid = calculateUserBid();\n', '\n', '        //If there was a bid already\n', '        if (highestBid >= MIN_ETH_AMOUNT) {\n', '            //Must be greater or equal to 105% of previous bid\n', '            uint256 minimalOverBid = SafeMath.add(highestBid, SafeMath.div(\n', '                SafeMath.mul(highestBid, MIN_BID_PERCENTAGE), 100\n', '            ));\n', '            require(bid >= minimalOverBid);\n', '            //Return to previous bidder his balance\n', '            //Value to return: current balance - current bid - paymentsInAsyncSend\n', '            uint256 amountToReturn = SafeMath.sub(SafeMath.sub(\n', '                this.balance, msg.value\n', '            ), totalPayments);\n', '            if (!highestBidder.send(amountToReturn)) {\n', '                asyncSend(highestBidder, amountToReturn);\n', '            }\n', '        }\n', '\n', '        highestBidder = msg.sender;\n', '        highestBid = bid;\n', '        HighestBidChanged(highestBidder, highestBid);\n', '    }\n', '\n', '    function calculateUserBid() private returns (uint256) {\n', '        uint256 bid = msg.value;\n', '        uint256 contribution = balanceOf(msg.sender);\n', '        if (contribution > 0) {\n', '            //Formula: (sentETH * allTokens) / (allTokens - userTokens)\n', '            //User sends 16ETH, has 40 of 200 tokens\n', '            //(16 * 200) / (200 - 40) => 3200 / 160 => 20\n', '            bid = SafeMath.div(\n', '                SafeMath.mul(msg.value, TOTAL_SUPPLY),\n', '                SafeMath.sub(TOTAL_SUPPLY, contribution)\n', '            );\n', '        }\n', '        return bid;\n', '    }\n', '\n', '    function finishAuction()\n', '    onlyInState(State.AuctionStarted)\n', '    onlyAfter(auctionEndTime) {\n', '        require(highestBid > 0);  // auction cannot be finished until at least one person bids\n', '        currentState = State.AuctionFinished;\n', '        AuctionFinished(highestBidder, highestBid);\n', '    }\n', '\n', '    function withdrawShares(address holder) public\n', '    onlyInState(State.AuctionFinished) {\n', '        uint256 availableTokens = balances[holder];\n', '        require(availableTokens > 0);\n', '        balances[holder] = 0;\n', '\n', '        if (holder != highestBidder) {\n', '            holder.transfer(\n', '                SafeMath.div(SafeMath.mul(highestBid, availableTokens), TOTAL_SUPPLY)\n', '            );\n', '        }\n', '    }\n', '\n', '    function isKeyHolder(address person) constant returns (bool) {\n', '        return balances[person] >= SafeMath.div(tokensForIco, TOKENS_PERCENTAGE_FOR_KEY_HOLDER); }\n', '\n', '    /*\n', '        General methods\n', '    */\n', '\n', '    function contributorsCount() constant returns (uint256) { return contributors.length; }\n', '\n', '    // Cancel ICO will be redesigned to prevent\n', '    // risk of user funds overtaken\n', '\n', '    /*function cancelIco()\n', '    onlyInState(State.IcoStarted)\n', '    onlyTrivial() {\n', '        currentState = State.IcoCancelled;\n', '        IcoCancelled();\n', '    }\n', '\n', '    function claimIcoContribution(address contributor) onlyInState(State.IcoCancelled) {\n', '        uint256 contribution = contributions[contributor];\n', '        require(contribution > 0);\n', '        contributions[contributor] = 0;\n', '        contributor.transfer(contribution);\n', '    }*/\n', '\n', '    function setDescriptionHash(bytes32 _descriptionHash)\n', '    onlyArtist() {\n', '        descriptionHashHistory.push(descriptionHash);\n', '        descriptionHash = DescriptionHash(_descriptionHash, now);\n', '    }\n', '\n', '    function setAuctionWinnerMessageHash(bytes32 _auctionWinnerMessageHash)\n', '    onlyAuctionWinner() {\n', '        auctionWinnerMessageHash = _auctionWinnerMessageHash;\n', '        WinnerProvidedHash();\n', '    }\n', '\n', '    function killContract()\n', '    onlyTrivial() {\n', '        require(\n', '            (\n', '                currentState == State.AuctionFinished &&\n', '                now > SafeMath.add(auctionEndTime, CLEANUP_DELAY) // Delay in correct state\n', '            ) ||\n', '            currentState == State.IcoCancelled // No delay in cancelled state\n', '        );\n', '        selfdestruct(trivial);\n', '    }\n', '\n', '    // helper function to avoid too many contract calls on frontend side\n', '    function getContractState() constant returns (\n', '        uint256, uint256, uint256, uint256, uint256,\n', '        uint256, uint256, address, uint256, State,\n', '        uint256, uint256, uint256\n', '    ) {\n', '        return (\n', '            icoEndTime, auctionDuration, auctionEndTime,\n', '            tokensForArtist, tokensForTrivial, tokensForIco,\n', '            amountRaised, highestBidder, highestBid, currentState,\n', '            TOKENS_PERCENTAGE_FOR_KEY_HOLDER, MIN_BID_PERCENTAGE,\n', '            freePeriodEndTime\n', '        );\n', '    }\n', '\n', '    function transfer(address _to, uint _value)\n', '    onlyInState(State.IcoFinished) returns (bool) {\n', '        return BasicToken.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '    onlyInState(State.IcoFinished) returns (bool) {\n', '        return StandardToken.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function () payable {\n', '        if (currentState == State.IcoStarted) {\n', '            contributeInIco();\n', '        }\n', '        else if (currentState == State.AuctionStarted) {\n', '            bidInAuction();\n', '        }\n', '        else {\n', '            revert();\n', '        }\n', '    }\n', '}']
['pragma solidity ^0.4.11;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title PullPayment\n', ' * @dev Base contract supporting async send for pull payments. Inherit from this\n', ' * contract and use asyncSend instead of send.\n', ' */\n', 'contract PullPayment {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) public payments;\n', '  uint256 public totalPayments;\n', '\n', '  /**\n', '  * @dev Called by the payer to store the sent amount as credit to be pulled.\n', '  * @param dest The destination address of the funds.\n', '  * @param amount The amount to transfer.\n', '  */\n', '  function asyncSend(address dest, uint256 amount) internal {\n', '    payments[dest] = payments[dest].add(amount);\n', '    totalPayments = totalPayments.add(amount);\n', '  }\n', '\n', '  /**\n', '  * @dev withdraw accumulated balance, called by payee.\n', '  */\n', '  function withdrawPayments() {\n', '    address payee = msg.sender;\n', '    uint256 payment = payments[payee];\n', '\n', '    require(payment != 0);\n', '    require(this.balance >= payment);\n', '\n', '    totalPayments = totalPayments.sub(payment);\n', '    payments[payee] = 0;\n', '\n', '    assert(payee.send(payment));\n', '  }\n', '}\n', '\n', 'contract TrivialToken is StandardToken, PullPayment {\n', '    //Constants\n', '    uint8 constant DECIMALS = 0;\n', '    uint256 constant MIN_ETH_AMOUNT = 0.005 ether;\n', '    uint256 constant MIN_BID_PERCENTAGE = 10;\n', '    uint256 constant TOTAL_SUPPLY = 1000000;\n', '    uint256 constant TOKENS_PERCENTAGE_FOR_KEY_HOLDER = 25;\n', '    uint256 constant CLEANUP_DELAY = 180 days;\n', '    uint256 constant FREE_PERIOD_DURATION = 60 days;\n', '\n', '    //Basic\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '\n', '    //Accounts\n', '    address public artist;\n', '    address public trivial;\n', '\n', '    //Time information\n', '    uint256 public icoDuration;\n', '    uint256 public icoEndTime;\n', '    uint256 public auctionDuration;\n', '    uint256 public auctionEndTime;\n', '    uint256 public freePeriodEndTime;\n', '\n', '    //Token information\n', '    uint256 public tokensForArtist;\n', '    uint256 public tokensForTrivial;\n', '    uint256 public tokensForIco;\n', '\n', '    //ICO and auction results\n', '    uint256 public amountRaised;\n', '    address public highestBidder;\n', '    uint256 public highestBid;\n', '    bytes32 public auctionWinnerMessageHash;\n', '    uint256 public nextContributorIndexToBeGivenTokens;\n', '    uint256 public tokensDistributedToContributors;\n', '\n', '    //Events\n', '    event IcoStarted(uint256 icoEndTime);\n', '    event IcoContributed(address contributor, uint256 amountContributed, uint256 amountRaised);\n', '    event IcoFinished(uint256 amountRaised);\n', '    event IcoCancelled();\n', '    event AuctionStarted(uint256 auctionEndTime);\n', '    event HighestBidChanged(address highestBidder, uint256 highestBid);\n', '    event AuctionFinished(address highestBidder, uint256 highestBid);\n', '    event WinnerProvidedHash();\n', '\n', '    //State\n', '    enum State { Created, IcoStarted, IcoFinished, AuctionStarted, AuctionFinished, IcoCancelled }\n', '    State public currentState;\n', '\n', '    //Item description\n', '    struct DescriptionHash {\n', '        bytes32 descriptionHash;\n', '        uint256 timestamp;\n', '    }\n', '    DescriptionHash public descriptionHash;\n', '    DescriptionHash[] public descriptionHashHistory;\n', '\n', '    //Token contributors and holders\n', '    mapping(address => uint) public contributions;\n', '    address[] public contributors;\n', '\n', '    //Modififers\n', '    modifier onlyInState(State expectedState) { require(expectedState == currentState); _; }\n', '    modifier onlyBefore(uint256 _time) { require(now < _time); _; }\n', '    modifier onlyAfter(uint256 _time) { require(now > _time); _; }\n', '    modifier onlyTrivial() { require(msg.sender == trivial); _; }\n', '    modifier onlyArtist() { require(msg.sender == artist); _; }\n', '    modifier onlyAuctionWinner() {\n', '        require(currentState == State.AuctionFinished);\n', '        require(msg.sender == highestBidder);\n', '        _;\n', '    }\n', '\n', '    function TrivialToken(\n', '        string _name, string _symbol,\n', '        uint256 _icoDuration, uint256 _auctionDuration,\n', '        address _artist, address _trivial,\n', '        uint256 _tokensForArtist,\n', '        uint256 _tokensForTrivial,\n', '        uint256 _tokensForIco,\n', '        bytes32 _descriptionHash\n', '    ) {\n', '        /*require(\n', '            TOTAL_SUPPLY == SafeMath.add(\n', '                _tokensForArtist,\n', '                SafeMath.add(_tokensForTrivial, _tokensForIco)\n', '            )\n', '        );*/\n', '        require(MIN_BID_PERCENTAGE < 100);\n', '        require(TOKENS_PERCENTAGE_FOR_KEY_HOLDER < 100);\n', '\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = DECIMALS;\n', '\n', '        icoDuration = _icoDuration;\n', '        auctionDuration = _auctionDuration;\n', '        artist = _artist;\n', '        trivial = _trivial;\n', '\n', '        tokensForArtist = _tokensForArtist;\n', '        tokensForTrivial = _tokensForTrivial;\n', '        tokensForIco = _tokensForIco;\n', '\n', '        descriptionHash = DescriptionHash(_descriptionHash, now);\n', '        currentState = State.Created;\n', '    }\n', '\n', '    /*\n', '        ICO methods\n', '    */\n', '    function startIco()\n', '    onlyInState(State.Created)\n', '    onlyTrivial() {\n', '        icoEndTime = SafeMath.add(now, icoDuration);\n', '        freePeriodEndTime = SafeMath.add(icoEndTime, FREE_PERIOD_DURATION);\n', '        currentState = State.IcoStarted;\n', '        IcoStarted(icoEndTime);\n', '    }\n', '\n', '    function contributeInIco() payable\n', '    onlyInState(State.IcoStarted)\n', '    onlyBefore(icoEndTime) {\n', '        require(msg.value > MIN_ETH_AMOUNT);\n', '\n', '        if (contributions[msg.sender] == 0) {\n', '            contributors.push(msg.sender);\n', '        }\n', '        contributions[msg.sender] = SafeMath.add(contributions[msg.sender], msg.value);\n', '        amountRaised = SafeMath.add(amountRaised, msg.value);\n', '\n', '        IcoContributed(msg.sender, msg.value, amountRaised);\n', '    }\n', '\n', '    function distributeTokens(uint256 contributorsNumber)\n', '    onlyInState(State.IcoStarted)\n', '    onlyAfter(icoEndTime) {\n', '        for (uint256 i = 0; i < contributorsNumber && nextContributorIndexToBeGivenTokens < contributors.length; ++i) {\n', '            address currentContributor = contributors[nextContributorIndexToBeGivenTokens++];\n', '            uint256 tokensForContributor = SafeMath.div(\n', '                SafeMath.mul(tokensForIco, contributions[currentContributor]),\n', "                amountRaised  // amountRaised can't be 0, ICO is cancelled then\n", '            );\n', '            balances[currentContributor] = tokensForContributor;\n', '            tokensDistributedToContributors = SafeMath.add(tokensDistributedToContributors, tokensForContributor);\n', '        }\n', '    }\n', '\n', '    function finishIco()\n', '    onlyInState(State.IcoStarted)\n', '    onlyAfter(icoEndTime) {\n', '        if (amountRaised == 0) {\n', '            currentState = State.IcoCancelled;\n', '            return;\n', '        }\n', '\n', '        // all contributors must have received their tokens to finish ICO\n', '        require(nextContributorIndexToBeGivenTokens >= contributors.length);\n', '\n', '        balances[artist] = SafeMath.add(balances[artist], tokensForArtist);\n', '        balances[trivial] = SafeMath.add(balances[trivial], tokensForTrivial);\n', '        uint256 leftovers = SafeMath.sub(tokensForIco, tokensDistributedToContributors);\n', '        balances[artist] = SafeMath.add(balances[artist], leftovers);\n', '\n', '        if (!artist.send(this.balance)) {\n', '            asyncSend(artist, this.balance);\n', '        }\n', '        currentState = State.IcoFinished;\n', '        IcoFinished(amountRaised);\n', '    }\n', '\n', '    function checkContribution(address contributor) constant returns (uint) {\n', '        return contributions[contributor];\n', '    }\n', '\n', '    /*\n', '        Auction methods\n', '    */\n', '    function canStartAuction() returns (bool) {\n', '        bool isArtist = msg.sender == artist;\n', '        bool isKeyHolder = balances[msg.sender] >= SafeMath.div(\n', '        SafeMath.mul(TOTAL_SUPPLY, TOKENS_PERCENTAGE_FOR_KEY_HOLDER), 100);\n', '        return isArtist || isKeyHolder;\n', '    }\n', '\n', '    function startAuction()\n', '    onlyAfter(freePeriodEndTime)\n', '    onlyInState(State.IcoFinished) {\n', '        require(canStartAuction());\n', '\n', '        // 100% tokens owner is the only key holder\n', '        if (balances[msg.sender] == TOTAL_SUPPLY) {\n', '            // no auction takes place,\n', '            highestBidder = msg.sender;\n', '            currentState = State.AuctionFinished;\n', '            AuctionFinished(highestBidder, highestBid);\n', '            return;\n', '        }\n', '\n', '        auctionEndTime = SafeMath.add(now, auctionDuration);\n', '        currentState = State.AuctionStarted;\n', '        AuctionStarted(auctionEndTime);\n', '    }\n', '\n', '    function bidInAuction() payable\n', '    onlyInState(State.AuctionStarted)\n', '    onlyBefore(auctionEndTime) {\n', '        //Must be greater or equal to minimal amount\n', '        require(msg.value >= MIN_ETH_AMOUNT);\n', '        uint256 bid = calculateUserBid();\n', '\n', '        //If there was a bid already\n', '        if (highestBid >= MIN_ETH_AMOUNT) {\n', '            //Must be greater or equal to 105% of previous bid\n', '            uint256 minimalOverBid = SafeMath.add(highestBid, SafeMath.div(\n', '                SafeMath.mul(highestBid, MIN_BID_PERCENTAGE), 100\n', '            ));\n', '            require(bid >= minimalOverBid);\n', '            //Return to previous bidder his balance\n', '            //Value to return: current balance - current bid - paymentsInAsyncSend\n', '            uint256 amountToReturn = SafeMath.sub(SafeMath.sub(\n', '                this.balance, msg.value\n', '            ), totalPayments);\n', '            if (!highestBidder.send(amountToReturn)) {\n', '                asyncSend(highestBidder, amountToReturn);\n', '            }\n', '        }\n', '\n', '        highestBidder = msg.sender;\n', '        highestBid = bid;\n', '        HighestBidChanged(highestBidder, highestBid);\n', '    }\n', '\n', '    function calculateUserBid() private returns (uint256) {\n', '        uint256 bid = msg.value;\n', '        uint256 contribution = balanceOf(msg.sender);\n', '        if (contribution > 0) {\n', '            //Formula: (sentETH * allTokens) / (allTokens - userTokens)\n', '            //User sends 16ETH, has 40 of 200 tokens\n', '            //(16 * 200) / (200 - 40) => 3200 / 160 => 20\n', '            bid = SafeMath.div(\n', '                SafeMath.mul(msg.value, TOTAL_SUPPLY),\n', '                SafeMath.sub(TOTAL_SUPPLY, contribution)\n', '            );\n', '        }\n', '        return bid;\n', '    }\n', '\n', '    function finishAuction()\n', '    onlyInState(State.AuctionStarted)\n', '    onlyAfter(auctionEndTime) {\n', '        require(highestBid > 0);  // auction cannot be finished until at least one person bids\n', '        currentState = State.AuctionFinished;\n', '        AuctionFinished(highestBidder, highestBid);\n', '    }\n', '\n', '    function withdrawShares(address holder) public\n', '    onlyInState(State.AuctionFinished) {\n', '        uint256 availableTokens = balances[holder];\n', '        require(availableTokens > 0);\n', '        balances[holder] = 0;\n', '\n', '        if (holder != highestBidder) {\n', '            holder.transfer(\n', '                SafeMath.div(SafeMath.mul(highestBid, availableTokens), TOTAL_SUPPLY)\n', '            );\n', '        }\n', '    }\n', '\n', '    function isKeyHolder(address person) constant returns (bool) {\n', '        return balances[person] >= SafeMath.div(tokensForIco, TOKENS_PERCENTAGE_FOR_KEY_HOLDER); }\n', '\n', '    /*\n', '        General methods\n', '    */\n', '\n', '    function contributorsCount() constant returns (uint256) { return contributors.length; }\n', '\n', '    // Cancel ICO will be redesigned to prevent\n', '    // risk of user funds overtaken\n', '\n', '    /*function cancelIco()\n', '    onlyInState(State.IcoStarted)\n', '    onlyTrivial() {\n', '        currentState = State.IcoCancelled;\n', '        IcoCancelled();\n', '    }\n', '\n', '    function claimIcoContribution(address contributor) onlyInState(State.IcoCancelled) {\n', '        uint256 contribution = contributions[contributor];\n', '        require(contribution > 0);\n', '        contributions[contributor] = 0;\n', '        contributor.transfer(contribution);\n', '    }*/\n', '\n', '    function setDescriptionHash(bytes32 _descriptionHash)\n', '    onlyArtist() {\n', '        descriptionHashHistory.push(descriptionHash);\n', '        descriptionHash = DescriptionHash(_descriptionHash, now);\n', '    }\n', '\n', '    function setAuctionWinnerMessageHash(bytes32 _auctionWinnerMessageHash)\n', '    onlyAuctionWinner() {\n', '        auctionWinnerMessageHash = _auctionWinnerMessageHash;\n', '        WinnerProvidedHash();\n', '    }\n', '\n', '    function killContract()\n', '    onlyTrivial() {\n', '        require(\n', '            (\n', '                currentState == State.AuctionFinished &&\n', '                now > SafeMath.add(auctionEndTime, CLEANUP_DELAY) // Delay in correct state\n', '            ) ||\n', '            currentState == State.IcoCancelled // No delay in cancelled state\n', '        );\n', '        selfdestruct(trivial);\n', '    }\n', '\n', '    // helper function to avoid too many contract calls on frontend side\n', '    function getContractState() constant returns (\n', '        uint256, uint256, uint256, uint256, uint256,\n', '        uint256, uint256, address, uint256, State,\n', '        uint256, uint256, uint256\n', '    ) {\n', '        return (\n', '            icoEndTime, auctionDuration, auctionEndTime,\n', '            tokensForArtist, tokensForTrivial, tokensForIco,\n', '            amountRaised, highestBidder, highestBid, currentState,\n', '            TOKENS_PERCENTAGE_FOR_KEY_HOLDER, MIN_BID_PERCENTAGE,\n', '            freePeriodEndTime\n', '        );\n', '    }\n', '\n', '    function transfer(address _to, uint _value)\n', '    onlyInState(State.IcoFinished) returns (bool) {\n', '        return BasicToken.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '    onlyInState(State.IcoFinished) returns (bool) {\n', '        return StandardToken.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function () payable {\n', '        if (currentState == State.IcoStarted) {\n', '            contributeInIco();\n', '        }\n', '        else if (currentState == State.AuctionStarted) {\n', '            bidInAuction();\n', '        }\n', '        else {\n', '            revert();\n', '        }\n', '    }\n', '}']
