['//A BurnableOpenPaymet is instantiated with a specified payer and a commitThreshold.\n', '//The recipient not set when the contract is instantiated.\n', '\n', '//All behavior of the contract is directed by the payer, but\n', '//the payer can never directly recover the payment unless he becomes the recipient.\n', '\n', '//Anyone can become the recipient by contributing the commitThreshold.\n', "//The recipient cannot change once it's been set.\n", '\n', '//The payer can at any time choose to burn or release to the recipient any amount of funds.\n', '\n', 'pragma solidity ^0.4.1;\n', '\n', 'contract BurnableOpenPayment {\n', '    address public payer;\n', '    address public recipient;\n', '    address public burnAddress = 0xdead;\n', '    uint public commitThreshold;\n', '    \n', '    modifier onlyPayer() {\n', '        if (msg.sender != payer) throw;\n', '        _;\n', '    }\n', '    \n', '    modifier onlyWithRecipient() {\n', '        if (recipient == address(0x0)) throw;\n', '        _;\n', '    }\n', '    \n', "    //Only allowing the payer to fund the contract ensures that the contract's\n", '    //balance is at most as difficult to predict or interpret as the payer.\n', '    //If the payer is another smart contract or script-based, balance changes\n', '    //could reliably indicate certain intentions, judgements or states of the payer.\n', '    function () payable onlyPayer { }\n', '    \n', '    function BurnableOpenPayment(address _payer, uint _commitThreshold) payable {\n', '        payer = _payer;\n', '        commitThreshold = _commitThreshold;\n', '    }\n', '    \n', '    function getPayer() returns (address) {\n', '        return payer;\n', '    }\n', '    \n', '    function getRecipient() returns (address) {\n', '        return recipient;\n', '    }\n', '    \n', '    function getCommitThreshold() returns (uint) {\n', '        return commitThreshold;\n', '    }\n', '    \n', '    function commit()\n', '    payable\n', '    {\n', '        if (recipient != address(0x0)) throw;\n', '        if (msg.value < commitThreshold) throw;\n', '        recipient = msg.sender;\n', '    }\n', '    \n', '    function burn(uint amount)\n', '    onlyPayer()\n', '    onlyWithRecipient()\n', '    returns (bool)\n', '    {\n', '        return burnAddress.send(amount);\n', '    }\n', '    \n', '    function release(uint amount)\n', '    onlyPayer()\n', '    onlyWithRecipient()\n', '    returns (bool)\n', '    {\n', '        return recipient.send(amount);\n', '    }\n', '}\n', '\n', 'contract BurnableOpenPaymentFactory {\n', '    function newBurnableOpenPayment(address payer, uint commitThreshold) payable returns (address) {\n', '        //pass along any ether to the constructor\n', '        return (new BurnableOpenPayment).value(msg.value)(payer, commitThreshold);\n', '    }\n', '}']