['pragma solidity ^0.4.15;\n', '\n', '// ERC20 Interface: https://github.com/ethereum/EIPs/issues/20\n', 'contract ERC20 {\n', '  function transfer(address _to, uint256 _value) returns (bool success);\n', '  function balanceOf(address _owner) constant returns (uint256 balance);\n', '}\n', '\n', 'contract Equio {\n', '  // Store the amount of ETH deposited by each account.\n', '  mapping (address => uint256) public balances;\n', '  // Track whether the contract has bought the tokens yet.\n', '  bool public bought_tokens;\n', '  // Record the time the contract bought the tokens.\n', '  uint256 public time_bought;\n', '  // Record ETH value of tokens currently held by contract.\n', '  uint256 public contract_eth_value;\n', '  // Emergency kill switch in case a critical bug is found.\n', '  bool public kill_switch;\n', '  // Record the address of the contract creator\n', '  address public creator;\n', '  // The sale name.\n', '  string name;\n', '  // The sale address.\n', '  address public sale; // = 0xA66d83716c7CFE425B44D0f7ef92dE263468fb3d; // config.get(&#39;saleAddress&#39;);\n', '  // The token address.\n', '  ERC20 public token; // = ERC20(0x0F5D2fB29fb7d3CFeE444a200298f468908cC942); // config.get(&#39;tokenAddress&#39;);\n', '  // SHA3 hash of kill switch password.\n', '  bytes32 password_hash; // = 0x8223cba4d8b54dc1e03c41c059667f6adb1a642a0a07bef5a9d11c18c4f14612; // config.get(&#39;password&#39;);\n', '  // Earliest block contract is allowed to buy into the crowdsale.\n', '  uint256 earliest_buy_block; // = 4170700; // config.get(&#39;block&#39;);\n', '  // Earliest time contract is allowed to buy into the crowdsale. (unix time)\n', '  uint256 earliest_buy_time; // config.get(&#39;block&#39;);\n', '\n', '  function Equio(\n', '    string _name,\n', '    address _sale,\n', '    address _token,\n', '    bytes32 _password_hash,\n', '    uint256 _earliest_buy_block,\n', '    uint256 _earliest_buy_time\n', '  ) payable {\n', '      creator = msg.sender;\n', '      name = _name;\n', '      sale = _sale;\n', '      token = ERC20(_token);\n', '      password_hash = _password_hash;\n', '      earliest_buy_block = _earliest_buy_block;\n', '      earliest_buy_time = _earliest_buy_time;\n', '  }\n', '\n', '  // Withdraws all ETH deposited or tokens purchased by the user.\n', '  // "internal" means this function is not externally callable.\n', '  function withdraw(address user) internal {\n', '    // If called before the ICO, cancel user&#39;s participation in the sale.\n', '    if (!bought_tokens) {\n', '      // Store the user&#39;s balance prior to withdrawal in a temporary variable.\n', '      uint256 eth_to_withdraw = balances[user];\n', '      // Update the user&#39;s balance prior to sending ETH to prevent recursive call.\n', '      balances[user] = 0;\n', '      // Return the user&#39;s funds. Throws on failure to prevent loss of funds.\n', '      user.transfer(eth_to_withdraw);\n', '    } else { // Withdraw the user&#39;s tokens if the contract has already purchased them.\n', '      // Retrieve current token balance of contract.\n', '      uint256 contract_token_balance = token.balanceOf(address(this));\n', '      // Disallow token withdrawals if there are no tokens to withdraw.\n', '      require(contract_token_balance > 0);\n', '      // Store the user&#39;s token balance in a temporary variable.\n', '      uint256 tokens_to_withdraw = (balances[user] * contract_token_balance) / contract_eth_value;\n', '      // Update the value of tokens currently held by the contract.\n', '      contract_eth_value -= balances[user];\n', '      // Update the user&#39;s balance prior to sending to prevent recursive call.\n', '      balances[user] = 0;\n', '      // Send the funds. Throws on failure to prevent loss of funds.\n', '      // Use require here because this is doing ERC20.transfer [not <address>.transfer] which returns bool\n', '      require(token.transfer(user, tokens_to_withdraw));\n', '    }\n', '  }\n', '\n', '  // Withdraws for a given users. Callable by anyone\n', '  // TODO: Do we want this?\n', '  function auto_withdraw(address user){\n', '    // TODO: why wait 1 hour\n', '    // Only allow automatic withdrawals after users have had a chance to manually withdraw.\n', '    require (bought_tokens && now > time_bought + 1 hours);\n', '    // Withdraw the user&#39;s funds for them.\n', '    withdraw(user);\n', '  }\n', '\n', '  // Buys tokens in the sale and rewards the caller, callable by anyone.\n', '  function buy_sale(){\n', '    // Short circuit to save gas if the contract has already bought tokens.\n', '    require(bought_tokens);\n', '    // Short circuit to save gas if the earliest buy time and block hasn&#39;t been reached.\n', '    require(block.number < earliest_buy_block);\n', '    require(now < earliest_buy_time);\n', '    // Short circuit to save gas if kill switch is active.\n', '    require(!kill_switch);\n', '    // Record that the contract has bought the tokens.\n', '    bought_tokens = true;\n', '    // Record the time the contract bought the tokens.\n', '    time_bought = now;\n', '    // Record the amount of ETH sent as the contract&#39;s current value.\n', '    contract_eth_value = this.balance;\n', '    // Transfer all the funds to the crowdsale address\n', '    // to buy tokens.  Throws if the crowdsale hasn&#39;t started yet or has\n', '    // already completed, preventing loss of funds.\n', '    // TODO: is this always the correct way to send ETH to a sale? (It should be!)\n', '    // This calls the sale contracts fallback function.\n', '    require(sale.call.value(contract_eth_value)());\n', '  }\n', '\n', '  // Allows anyone with the password to shut down everything except withdrawals in emergencies.\n', '  function activate_kill_switch(string password) {\n', '    // Only activate the kill switch if the password is correct.\n', '    require(sha3(password) == password_hash);\n', '    // Irreversibly activate the kill switch.\n', '    kill_switch = true;\n', '  }\n', '\n', '  // A helper function for the default function, allowing contracts to interact.\n', '  function default_helper() payable {\n', '    // Treat near-zero ETH transactions as withdrawal requests.\n', '    if (msg.value <= 1 finney) {\n', '      withdraw(msg.sender);\n', '    } else { // Deposit the user&#39;s funds for use in purchasing tokens.\n', '      // Disallow deposits if kill switch is active.\n', '      require (!kill_switch);\n', '      // TODO: do we care about this? Why not allow running investment?\n', '      // Only allow deposits if the contract hasn&#39;t already purchased the tokens.\n', '      require (!bought_tokens);\n', '      // Update records of deposited ETH to include the received amount.\n', '      balances[msg.sender] += msg.value;\n', '    }\n', '  }\n', '\n', '  // Default function.  Called when a user sends ETH to the contract.\n', '  function () payable {\n', '    // TODO: How to handle sale contract refunding ETH?\n', '    // Prevent sale contract from refunding ETH to avoid partial fulfillment.\n', '    require(msg.sender != address(sale));\n', '    // Delegate to the helper function.\n', '    default_helper();\n', '  }\n', '}\n', '\n', 'contract EquioGenesis {\n', '\n', '  /// Create a Equio conteact with `_name`, sale address `_sale`, token address `_token`,\n', '  /// password hash `_password_hash`, earliest buy block `earliest_buy_block`,\n', '  /// earliest buy time `_earliest_buy_time`.\n', '  function generate (\n', '    string _name,\n', '    address _sale,\n', '    address _token,\n', '    bytes32 _password_hash,\n', '    uint256 _earliest_buy_block,\n', '    uint256 _earliest_buy_time\n', '  ) returns (Equio equioAddess) {\n', '    return new Equio(\n', '      _name,\n', '      _sale,\n', '      _token,\n', '      _password_hash,\n', '      _earliest_buy_block,\n', '      _earliest_buy_time\n', '    );\n', '  }\n', '}']
['pragma solidity ^0.4.15;\n', '\n', '// ERC20 Interface: https://github.com/ethereum/EIPs/issues/20\n', 'contract ERC20 {\n', '  function transfer(address _to, uint256 _value) returns (bool success);\n', '  function balanceOf(address _owner) constant returns (uint256 balance);\n', '}\n', '\n', 'contract Equio {\n', '  // Store the amount of ETH deposited by each account.\n', '  mapping (address => uint256) public balances;\n', '  // Track whether the contract has bought the tokens yet.\n', '  bool public bought_tokens;\n', '  // Record the time the contract bought the tokens.\n', '  uint256 public time_bought;\n', '  // Record ETH value of tokens currently held by contract.\n', '  uint256 public contract_eth_value;\n', '  // Emergency kill switch in case a critical bug is found.\n', '  bool public kill_switch;\n', '  // Record the address of the contract creator\n', '  address public creator;\n', '  // The sale name.\n', '  string name;\n', '  // The sale address.\n', "  address public sale; // = 0xA66d83716c7CFE425B44D0f7ef92dE263468fb3d; // config.get('saleAddress');\n", '  // The token address.\n', "  ERC20 public token; // = ERC20(0x0F5D2fB29fb7d3CFeE444a200298f468908cC942); // config.get('tokenAddress');\n", '  // SHA3 hash of kill switch password.\n', "  bytes32 password_hash; // = 0x8223cba4d8b54dc1e03c41c059667f6adb1a642a0a07bef5a9d11c18c4f14612; // config.get('password');\n", '  // Earliest block contract is allowed to buy into the crowdsale.\n', "  uint256 earliest_buy_block; // = 4170700; // config.get('block');\n", '  // Earliest time contract is allowed to buy into the crowdsale. (unix time)\n', "  uint256 earliest_buy_time; // config.get('block');\n", '\n', '  function Equio(\n', '    string _name,\n', '    address _sale,\n', '    address _token,\n', '    bytes32 _password_hash,\n', '    uint256 _earliest_buy_block,\n', '    uint256 _earliest_buy_time\n', '  ) payable {\n', '      creator = msg.sender;\n', '      name = _name;\n', '      sale = _sale;\n', '      token = ERC20(_token);\n', '      password_hash = _password_hash;\n', '      earliest_buy_block = _earliest_buy_block;\n', '      earliest_buy_time = _earliest_buy_time;\n', '  }\n', '\n', '  // Withdraws all ETH deposited or tokens purchased by the user.\n', '  // "internal" means this function is not externally callable.\n', '  function withdraw(address user) internal {\n', "    // If called before the ICO, cancel user's participation in the sale.\n", '    if (!bought_tokens) {\n', "      // Store the user's balance prior to withdrawal in a temporary variable.\n", '      uint256 eth_to_withdraw = balances[user];\n', "      // Update the user's balance prior to sending ETH to prevent recursive call.\n", '      balances[user] = 0;\n', "      // Return the user's funds. Throws on failure to prevent loss of funds.\n", '      user.transfer(eth_to_withdraw);\n', "    } else { // Withdraw the user's tokens if the contract has already purchased them.\n", '      // Retrieve current token balance of contract.\n', '      uint256 contract_token_balance = token.balanceOf(address(this));\n', '      // Disallow token withdrawals if there are no tokens to withdraw.\n', '      require(contract_token_balance > 0);\n', "      // Store the user's token balance in a temporary variable.\n", '      uint256 tokens_to_withdraw = (balances[user] * contract_token_balance) / contract_eth_value;\n', '      // Update the value of tokens currently held by the contract.\n', '      contract_eth_value -= balances[user];\n', "      // Update the user's balance prior to sending to prevent recursive call.\n", '      balances[user] = 0;\n', '      // Send the funds. Throws on failure to prevent loss of funds.\n', '      // Use require here because this is doing ERC20.transfer [not <address>.transfer] which returns bool\n', '      require(token.transfer(user, tokens_to_withdraw));\n', '    }\n', '  }\n', '\n', '  // Withdraws for a given users. Callable by anyone\n', '  // TODO: Do we want this?\n', '  function auto_withdraw(address user){\n', '    // TODO: why wait 1 hour\n', '    // Only allow automatic withdrawals after users have had a chance to manually withdraw.\n', '    require (bought_tokens && now > time_bought + 1 hours);\n', "    // Withdraw the user's funds for them.\n", '    withdraw(user);\n', '  }\n', '\n', '  // Buys tokens in the sale and rewards the caller, callable by anyone.\n', '  function buy_sale(){\n', '    // Short circuit to save gas if the contract has already bought tokens.\n', '    require(bought_tokens);\n', "    // Short circuit to save gas if the earliest buy time and block hasn't been reached.\n", '    require(block.number < earliest_buy_block);\n', '    require(now < earliest_buy_time);\n', '    // Short circuit to save gas if kill switch is active.\n', '    require(!kill_switch);\n', '    // Record that the contract has bought the tokens.\n', '    bought_tokens = true;\n', '    // Record the time the contract bought the tokens.\n', '    time_bought = now;\n', "    // Record the amount of ETH sent as the contract's current value.\n", '    contract_eth_value = this.balance;\n', '    // Transfer all the funds to the crowdsale address\n', "    // to buy tokens.  Throws if the crowdsale hasn't started yet or has\n", '    // already completed, preventing loss of funds.\n', '    // TODO: is this always the correct way to send ETH to a sale? (It should be!)\n', '    // This calls the sale contracts fallback function.\n', '    require(sale.call.value(contract_eth_value)());\n', '  }\n', '\n', '  // Allows anyone with the password to shut down everything except withdrawals in emergencies.\n', '  function activate_kill_switch(string password) {\n', '    // Only activate the kill switch if the password is correct.\n', '    require(sha3(password) == password_hash);\n', '    // Irreversibly activate the kill switch.\n', '    kill_switch = true;\n', '  }\n', '\n', '  // A helper function for the default function, allowing contracts to interact.\n', '  function default_helper() payable {\n', '    // Treat near-zero ETH transactions as withdrawal requests.\n', '    if (msg.value <= 1 finney) {\n', '      withdraw(msg.sender);\n', "    } else { // Deposit the user's funds for use in purchasing tokens.\n", '      // Disallow deposits if kill switch is active.\n', '      require (!kill_switch);\n', '      // TODO: do we care about this? Why not allow running investment?\n', "      // Only allow deposits if the contract hasn't already purchased the tokens.\n", '      require (!bought_tokens);\n', '      // Update records of deposited ETH to include the received amount.\n', '      balances[msg.sender] += msg.value;\n', '    }\n', '  }\n', '\n', '  // Default function.  Called when a user sends ETH to the contract.\n', '  function () payable {\n', '    // TODO: How to handle sale contract refunding ETH?\n', '    // Prevent sale contract from refunding ETH to avoid partial fulfillment.\n', '    require(msg.sender != address(sale));\n', '    // Delegate to the helper function.\n', '    default_helper();\n', '  }\n', '}\n', '\n', 'contract EquioGenesis {\n', '\n', '  /// Create a Equio conteact with `_name`, sale address `_sale`, token address `_token`,\n', '  /// password hash `_password_hash`, earliest buy block `earliest_buy_block`,\n', '  /// earliest buy time `_earliest_buy_time`.\n', '  function generate (\n', '    string _name,\n', '    address _sale,\n', '    address _token,\n', '    bytes32 _password_hash,\n', '    uint256 _earliest_buy_block,\n', '    uint256 _earliest_buy_time\n', '  ) returns (Equio equioAddess) {\n', '    return new Equio(\n', '      _name,\n', '      _sale,\n', '      _token,\n', '      _password_hash,\n', '      _earliest_buy_block,\n', '      _earliest_buy_time\n', '    );\n', '  }\n', '}']
