['pragma solidity ^0.4.14;\n', '\n', 'contract DSMath {\n', '    \n', '    /*\n', '    standard uint256 functions\n', '     */\n', '\n', '    function add(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        assert((z = x + y) >= x);\n', '    }\n', '\n', '    function sub(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        assert((z = x - y) <= x);\n', '    }\n', '\n', '    function mul(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        assert((z = x * y) >= x);\n', '    }\n', '\n', '    function div(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        z = x / y;\n', '    }\n', '\n', '    function min(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function max(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    /*\n', '    uint128 functions (h is for half)\n', '     */\n', '\n', '\n', '    function hadd(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        assert((z = x + y) >= x);\n', '    }\n', '\n', '    function hsub(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        assert((z = x - y) <= x);\n', '    }\n', '\n', '    function hmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        assert((z = x * y) >= x);\n', '    }\n', '\n', '    function hdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = x / y;\n', '    }\n', '\n', '    function hmin(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function hmax(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '\n', '    /*\n', '    int256 functions\n', '     */\n', '\n', '    function imin(int256 x, int256 y) constant internal returns (int256 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function imax(int256 x, int256 y) constant internal returns (int256 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    /*\n', '    WAD math\n', '     */\n', '\n', '    uint128 constant WAD = 10 ** 18;\n', '\n', '    function wadd(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hadd(x, y);\n', '    }\n', '\n', '    function wsub(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hsub(x, y);\n', '    }\n', '\n', '    function wmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = cast((uint256(x) * y + WAD / 2) / WAD);\n', '    }\n', '\n', '    function wdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = cast((uint256(x) * WAD + y / 2) / y);\n', '    }\n', '\n', '    function wmin(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hmin(x, y);\n', '    }\n', '    function wmax(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hmax(x, y);\n', '    }\n', '\n', '    /*\n', '    RAY math\n', '     */\n', '\n', '    uint128 constant RAY = 10 ** 27;\n', '\n', '    function radd(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hadd(x, y);\n', '    }\n', '\n', '    function rsub(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hsub(x, y);\n', '    }\n', '\n', '    function rmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = cast((uint256(x) * y + RAY / 2) / RAY);\n', '    }\n', '\n', '    function rdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = cast((uint256(x) * RAY + y / 2) / y);\n', '    }\n', '\n', '    function rpow(uint128 x, uint64 n) constant internal returns (uint128 z) {\n', '        // This famous algorithm is called "exponentiation by squaring"\n', '        // and calculates x^n with x as fixed-point and n as regular unsigned.\n', '        //\n', '        // It&#39;s O(log n), instead of O(n) for naive repeated multiplication.\n', '        //\n', '        // These facts are why it works:\n', '        //\n', '        //  If n is even, then x^n = (x^2)^(n/2).\n', '        //  If n is odd,  then x^n = x * x^(n-1),\n', '        //   and applying the equation for even x gives\n', '        //    x^n = x * (x^2)^((n-1) / 2).\n', '        //\n', '        //  Also, EVM division is flooring and\n', '        //    floor[(n-1) / 2] = floor[n / 2].\n', '\n', '        z = n % 2 != 0 ? x : RAY;\n', '\n', '        for (n /= 2; n != 0; n /= 2) {\n', '            x = rmul(x, x);\n', '\n', '            if (n % 2 != 0) {\n', '                z = rmul(z, x);\n', '            }\n', '        }\n', '    }\n', '\n', '    function rmin(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hmin(x, y);\n', '    }\n', '    function rmax(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hmax(x, y);\n', '    }\n', '\n', '    function cast(uint256 x) constant internal returns (uint128 z) {\n', '        assert((z = uint128(x)) == x);\n', '    }\n', '\n', '}\n', '\n', 'contract Owned\n', '{\n', '    address public owner;\n', '    \n', '    function Owned()\n', '    {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    modifier onlyOwner()\n', '    {\n', '        if (msg.sender != owner) revert();\n', '        _;\n', '    }\n', '}\n', '\n', 'contract ProspectorsCrowdsale is Owned, DSMath\n', '{\n', '    ProspectorsGoldToken public token;\n', '    address public dev_multisig; //multisignature wallet to collect funds\n', '    \n', '    uint public total_raised; //crowdsale total funds raised\n', '    uint public contributors_count = 0; //crowdsale total funds raised\n', '    \n', '    uint public constant start_time = 1502377200; //crowdsale start time - August 10, 15:00 UTC\n', '    uint public constant end_time = 1505055600; //crowdsale end time - Septempber 10, 15:00 UTC\n', '    uint public constant bonus_amount = 10000000 * 10**18; //amount of tokens by bonus price\n', '    uint public constant start_amount = 60000000 * 10**18; //tokens amount allocated for crowdsale\n', '    uint public constant price =  0.0005 * 10**18; //standart token price in ETH \n', '    uint public constant bonus_price = 0.0004 * 10**18; //bonus token price in ETH\n', '    uint public constant goal = 2000 ether; //soft crowdsale cap. If not reached funds will be returned\n', '    bool private closed = false; //can be true after end_time or when all tokens sold\n', '    \n', '    mapping(address => uint) funded; //needed to save amounts of ETH for refund\n', '    \n', '    modifier in_time //allows send eth only when crowdsale is active\n', '    {\n', '        if (time() < start_time || time() > end_time)  revert();\n', '        _;\n', '    }\n', '\n', '    function is_success() public constant returns (bool)\n', '    {\n', '        return closed == true && total_raised >= goal;\n', '    }\n', '    \n', '    function time() public constant returns (uint)\n', '    {\n', '        return block.timestamp;\n', '    }\n', '    \n', '    function my_token_balance() public constant returns (uint)\n', '    {\n', '        return token.balanceOf(this);\n', '    }\n', '    \n', '    //tokens amount available by bonus price\n', '    function available_with_bonus() public constant returns (uint)\n', '    {\n', '        return my_token_balance() >=  min_balance_for_bonus() ? \n', '                my_token_balance() - min_balance_for_bonus() \n', '                : \n', '                0;\n', '    }\n', '    \n', '    function available_without_bonus() private constant returns (uint)\n', '    {\n', '        return min(my_token_balance(),  min_balance_for_bonus());\n', '    }\n', '    \n', '    function min_balance_for_bonus() private constant returns (uint)\n', '    {\n', '        return start_amount - bonus_amount;\n', '    }\n', '    \n', '    //prevent send less than 0.01 ETH\n', '    modifier has_value\n', '    {\n', '        if (msg.value < 0.01 ether) revert();\n', '        _;\n', '    }\n', '\n', '    function init(address _token_address, address _dev_multisig) onlyOwner\n', '    {\n', '        if (address(0) != address(token)) revert();\n', '        token = ProspectorsGoldToken(_token_address);\n', '        dev_multisig = _dev_multisig;\n', '    }\n', '    \n', '    //main contribute function\n', '    function participate() in_time has_value private {\n', '        if (my_token_balance() == 0 || closed == true) revert();\n', '\n', '        var remains = msg.value;\n', '        \n', '         //calculate tokens amount by bonus price\n', '        var can_with_bonus = wdiv(cast(remains), cast(bonus_price));\n', '        var buy_amount = cast(min(can_with_bonus, available_with_bonus()));\n', '        remains = sub(remains, wmul(buy_amount, cast(bonus_price)));\n', '        \n', '        if (buy_amount < can_with_bonus) //calculate tokens amount by standart price if tokens with bonus don&#39;t cover eth amount\n', '        {\n', '            var can_without_bonus = wdiv(cast(remains), cast(price));\n', '            var buy_without_bonus = cast(min(can_without_bonus, available_without_bonus()));\n', '            remains = sub(remains, wmul(buy_without_bonus, cast(price)));\n', '            buy_amount = hadd(buy_amount, buy_without_bonus);\n', '        }\n', '\n', '        if (remains > 0) revert();\n', '\n', '        total_raised = add(total_raised, msg.value);\n', '        if (funded[msg.sender] == 0) contributors_count++;\n', '        funded[msg.sender] = add(funded[msg.sender], msg.value);\n', '\n', '        token.transfer(msg.sender, buy_amount); //transfer tokens to participant\n', '    }\n', '    \n', '    function refund() //allows get eth back if min goal not reached\n', '    {\n', '        if (total_raised >= goal || closed == false) revert();\n', '        var amount = funded[msg.sender];\n', '        if (amount > 0)\n', '        {\n', '            funded[msg.sender] = 0;\n', '            msg.sender.transfer(amount);\n', '        }\n', '    }\n', '    \n', '    function closeCrowdsale() //close crowdsale. this action unlocks refunds or token transfers\n', '    {\n', '        if (closed == false && time() > start_time && (time() > end_time || my_token_balance() == 0))\n', '        {\n', '            closed = true;\n', '            if (is_success())\n', '            {\n', '                token.unlock(); //unlock token transfers\n', '                if (my_token_balance() > 0)\n', '                {\n', '                    token.transfer(0xb1, my_token_balance()); //move not saled tokens to game balance\n', '                }\n', '            }\n', '        }\n', '        else\n', '        {\n', '            revert();\n', '        }\n', '    }\n', '    \n', '    function collect() //collect eth by devs if min goal reached\n', '    {\n', '        if (total_raised < goal) revert();\n', '        dev_multisig.transfer(this.balance);\n', '    }\n', '\n', '    function () payable external \n', '    {\n', '        participate();\n', '    }\n', '    \n', '    //allows destroy this whithin 180 days after crowdsale ends\n', '    function destroy() onlyOwner\n', '    {\n', '        if (time() > end_time + 180 days)\n', '        {\n', '            selfdestruct(dev_multisig);\n', '        }\n', '    }\n', '}\n', '\n', 'contract ProspectorsGoldToken {\n', '    function balanceOf( address who ) constant returns (uint value);\n', '    function transfer( address to, uint value) returns (bool ok);\n', '    function unlock() returns (bool ok);\n', '}']
['pragma solidity ^0.4.14;\n', '\n', 'contract DSMath {\n', '    \n', '    /*\n', '    standard uint256 functions\n', '     */\n', '\n', '    function add(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        assert((z = x + y) >= x);\n', '    }\n', '\n', '    function sub(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        assert((z = x - y) <= x);\n', '    }\n', '\n', '    function mul(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        assert((z = x * y) >= x);\n', '    }\n', '\n', '    function div(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        z = x / y;\n', '    }\n', '\n', '    function min(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function max(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    /*\n', '    uint128 functions (h is for half)\n', '     */\n', '\n', '\n', '    function hadd(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        assert((z = x + y) >= x);\n', '    }\n', '\n', '    function hsub(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        assert((z = x - y) <= x);\n', '    }\n', '\n', '    function hmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        assert((z = x * y) >= x);\n', '    }\n', '\n', '    function hdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = x / y;\n', '    }\n', '\n', '    function hmin(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function hmax(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '\n', '    /*\n', '    int256 functions\n', '     */\n', '\n', '    function imin(int256 x, int256 y) constant internal returns (int256 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function imax(int256 x, int256 y) constant internal returns (int256 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    /*\n', '    WAD math\n', '     */\n', '\n', '    uint128 constant WAD = 10 ** 18;\n', '\n', '    function wadd(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hadd(x, y);\n', '    }\n', '\n', '    function wsub(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hsub(x, y);\n', '    }\n', '\n', '    function wmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = cast((uint256(x) * y + WAD / 2) / WAD);\n', '    }\n', '\n', '    function wdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = cast((uint256(x) * WAD + y / 2) / y);\n', '    }\n', '\n', '    function wmin(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hmin(x, y);\n', '    }\n', '    function wmax(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hmax(x, y);\n', '    }\n', '\n', '    /*\n', '    RAY math\n', '     */\n', '\n', '    uint128 constant RAY = 10 ** 27;\n', '\n', '    function radd(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hadd(x, y);\n', '    }\n', '\n', '    function rsub(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hsub(x, y);\n', '    }\n', '\n', '    function rmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = cast((uint256(x) * y + RAY / 2) / RAY);\n', '    }\n', '\n', '    function rdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = cast((uint256(x) * RAY + y / 2) / y);\n', '    }\n', '\n', '    function rpow(uint128 x, uint64 n) constant internal returns (uint128 z) {\n', '        // This famous algorithm is called "exponentiation by squaring"\n', '        // and calculates x^n with x as fixed-point and n as regular unsigned.\n', '        //\n', "        // It's O(log n), instead of O(n) for naive repeated multiplication.\n", '        //\n', '        // These facts are why it works:\n', '        //\n', '        //  If n is even, then x^n = (x^2)^(n/2).\n', '        //  If n is odd,  then x^n = x * x^(n-1),\n', '        //   and applying the equation for even x gives\n', '        //    x^n = x * (x^2)^((n-1) / 2).\n', '        //\n', '        //  Also, EVM division is flooring and\n', '        //    floor[(n-1) / 2] = floor[n / 2].\n', '\n', '        z = n % 2 != 0 ? x : RAY;\n', '\n', '        for (n /= 2; n != 0; n /= 2) {\n', '            x = rmul(x, x);\n', '\n', '            if (n % 2 != 0) {\n', '                z = rmul(z, x);\n', '            }\n', '        }\n', '    }\n', '\n', '    function rmin(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hmin(x, y);\n', '    }\n', '    function rmax(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hmax(x, y);\n', '    }\n', '\n', '    function cast(uint256 x) constant internal returns (uint128 z) {\n', '        assert((z = uint128(x)) == x);\n', '    }\n', '\n', '}\n', '\n', 'contract Owned\n', '{\n', '    address public owner;\n', '    \n', '    function Owned()\n', '    {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    modifier onlyOwner()\n', '    {\n', '        if (msg.sender != owner) revert();\n', '        _;\n', '    }\n', '}\n', '\n', 'contract ProspectorsCrowdsale is Owned, DSMath\n', '{\n', '    ProspectorsGoldToken public token;\n', '    address public dev_multisig; //multisignature wallet to collect funds\n', '    \n', '    uint public total_raised; //crowdsale total funds raised\n', '    uint public contributors_count = 0; //crowdsale total funds raised\n', '    \n', '    uint public constant start_time = 1502377200; //crowdsale start time - August 10, 15:00 UTC\n', '    uint public constant end_time = 1505055600; //crowdsale end time - Septempber 10, 15:00 UTC\n', '    uint public constant bonus_amount = 10000000 * 10**18; //amount of tokens by bonus price\n', '    uint public constant start_amount = 60000000 * 10**18; //tokens amount allocated for crowdsale\n', '    uint public constant price =  0.0005 * 10**18; //standart token price in ETH \n', '    uint public constant bonus_price = 0.0004 * 10**18; //bonus token price in ETH\n', '    uint public constant goal = 2000 ether; //soft crowdsale cap. If not reached funds will be returned\n', '    bool private closed = false; //can be true after end_time or when all tokens sold\n', '    \n', '    mapping(address => uint) funded; //needed to save amounts of ETH for refund\n', '    \n', '    modifier in_time //allows send eth only when crowdsale is active\n', '    {\n', '        if (time() < start_time || time() > end_time)  revert();\n', '        _;\n', '    }\n', '\n', '    function is_success() public constant returns (bool)\n', '    {\n', '        return closed == true && total_raised >= goal;\n', '    }\n', '    \n', '    function time() public constant returns (uint)\n', '    {\n', '        return block.timestamp;\n', '    }\n', '    \n', '    function my_token_balance() public constant returns (uint)\n', '    {\n', '        return token.balanceOf(this);\n', '    }\n', '    \n', '    //tokens amount available by bonus price\n', '    function available_with_bonus() public constant returns (uint)\n', '    {\n', '        return my_token_balance() >=  min_balance_for_bonus() ? \n', '                my_token_balance() - min_balance_for_bonus() \n', '                : \n', '                0;\n', '    }\n', '    \n', '    function available_without_bonus() private constant returns (uint)\n', '    {\n', '        return min(my_token_balance(),  min_balance_for_bonus());\n', '    }\n', '    \n', '    function min_balance_for_bonus() private constant returns (uint)\n', '    {\n', '        return start_amount - bonus_amount;\n', '    }\n', '    \n', '    //prevent send less than 0.01 ETH\n', '    modifier has_value\n', '    {\n', '        if (msg.value < 0.01 ether) revert();\n', '        _;\n', '    }\n', '\n', '    function init(address _token_address, address _dev_multisig) onlyOwner\n', '    {\n', '        if (address(0) != address(token)) revert();\n', '        token = ProspectorsGoldToken(_token_address);\n', '        dev_multisig = _dev_multisig;\n', '    }\n', '    \n', '    //main contribute function\n', '    function participate() in_time has_value private {\n', '        if (my_token_balance() == 0 || closed == true) revert();\n', '\n', '        var remains = msg.value;\n', '        \n', '         //calculate tokens amount by bonus price\n', '        var can_with_bonus = wdiv(cast(remains), cast(bonus_price));\n', '        var buy_amount = cast(min(can_with_bonus, available_with_bonus()));\n', '        remains = sub(remains, wmul(buy_amount, cast(bonus_price)));\n', '        \n', "        if (buy_amount < can_with_bonus) //calculate tokens amount by standart price if tokens with bonus don't cover eth amount\n", '        {\n', '            var can_without_bonus = wdiv(cast(remains), cast(price));\n', '            var buy_without_bonus = cast(min(can_without_bonus, available_without_bonus()));\n', '            remains = sub(remains, wmul(buy_without_bonus, cast(price)));\n', '            buy_amount = hadd(buy_amount, buy_without_bonus);\n', '        }\n', '\n', '        if (remains > 0) revert();\n', '\n', '        total_raised = add(total_raised, msg.value);\n', '        if (funded[msg.sender] == 0) contributors_count++;\n', '        funded[msg.sender] = add(funded[msg.sender], msg.value);\n', '\n', '        token.transfer(msg.sender, buy_amount); //transfer tokens to participant\n', '    }\n', '    \n', '    function refund() //allows get eth back if min goal not reached\n', '    {\n', '        if (total_raised >= goal || closed == false) revert();\n', '        var amount = funded[msg.sender];\n', '        if (amount > 0)\n', '        {\n', '            funded[msg.sender] = 0;\n', '            msg.sender.transfer(amount);\n', '        }\n', '    }\n', '    \n', '    function closeCrowdsale() //close crowdsale. this action unlocks refunds or token transfers\n', '    {\n', '        if (closed == false && time() > start_time && (time() > end_time || my_token_balance() == 0))\n', '        {\n', '            closed = true;\n', '            if (is_success())\n', '            {\n', '                token.unlock(); //unlock token transfers\n', '                if (my_token_balance() > 0)\n', '                {\n', '                    token.transfer(0xb1, my_token_balance()); //move not saled tokens to game balance\n', '                }\n', '            }\n', '        }\n', '        else\n', '        {\n', '            revert();\n', '        }\n', '    }\n', '    \n', '    function collect() //collect eth by devs if min goal reached\n', '    {\n', '        if (total_raised < goal) revert();\n', '        dev_multisig.transfer(this.balance);\n', '    }\n', '\n', '    function () payable external \n', '    {\n', '        participate();\n', '    }\n', '    \n', '    //allows destroy this whithin 180 days after crowdsale ends\n', '    function destroy() onlyOwner\n', '    {\n', '        if (time() > end_time + 180 days)\n', '        {\n', '            selfdestruct(dev_multisig);\n', '        }\n', '    }\n', '}\n', '\n', 'contract ProspectorsGoldToken {\n', '    function balanceOf( address who ) constant returns (uint value);\n', '    function transfer( address to, uint value) returns (bool ok);\n', '    function unlock() returns (bool ok);\n', '}']
