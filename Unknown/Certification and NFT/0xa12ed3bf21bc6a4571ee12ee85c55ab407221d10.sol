['pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control \n', ' * functions, this simplifies the implementation of "user permissions". \n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    /** \n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner. \n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to. \n', '    */\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) constant returns (uint256);\n', '    function transfer(address to, uint256 value);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) constant returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value);\n', '    function approve(address spender, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of. \n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amout of tokens to be transfered\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) {\n', '        var _allowance = allowed[_from][msg.sender];\n', '\n', '        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '        // if (_value > _allowance) throw;\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        Transfer(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint256 _value) {\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param _owner address The address which owns the funds.\n', '    * @param _spender address The address which will spend the funds.\n', '    * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '    */\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', '/**\n', ' * @title TKRPToken\n', ' * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator. \n', ' * Note they can later distribute these tokens as they wish using `transfer` and other\n', ' * `StandardToken` functions.\n', ' */\n', 'contract TKRPToken is StandardToken {\n', '    event Destroy(address indexed _from);\n', '\n', '    string public name = "TKRPToken";\n', '    string public symbol = "TKRP";\n', '    uint256 public decimals = 18;\n', '    uint256 public initialSupply = 500000;\n', '\n', '    /**\n', '    * @dev Contructor that gives the sender all tokens\n', '    */\n', '    function TKRPToken() {\n', '        totalSupply = initialSupply;\n', '        balances[msg.sender] = initialSupply;\n', '    }\n', '\n', '    /**\n', '    * @dev Destroys tokens from an address, this process is irrecoverable.\n', '    * @param _from The address to destroy the tokens from.\n', '    */\n', '    function destroyFrom(address _from) onlyOwner returns (bool) {\n', '        uint256 balance = balanceOf(_from);\n', '        require(balance > 0);\n', '\n', '        balances[_from] = 0;\n', '        totalSupply = totalSupply.sub(balance);\n', '\n', '        Destroy(_from);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title TKRToken\n', ' * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator. \n', ' * Note they can later distribute these tokens as they wish using `transfer` and other\n', ' * `StandardToken` functions.\n', ' */\n', 'contract TKRToken is StandardToken {\n', '    event Destroy(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    string public name = "TKRToken";\n', '    string public symbol = "TKR";\n', '    uint256 public decimals = 18;\n', '    uint256 public initialSupply = 65500000 * 10 ** 18;\n', '\n', '    /**\n', '    * @dev Contructor that gives the sender all tokens\n', '    */\n', '    function TKRToken() {\n', '        totalSupply = initialSupply;\n', '        balances[msg.sender] = initialSupply;\n', '    }\n', '\n', '    /**\n', '    * @dev Destroys tokens, this process is irrecoverable.\n', '    * @param _value The amount to destroy.\n', '    */\n', '    function destroy(uint256 _value) onlyOwner returns (bool) {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Destroy(msg.sender, 0x0, _value);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Smart contract which collects ETH and in return transfers the TKRToken to the contributors\n', ' * Log events are emitted for each transaction \n', ' */\n', 'contract Crowdsale is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    /* \n', '    * Stores the contribution in wei\n', '    * Stores the amount received in TKR\n', '    */\n', '    struct Contributor {\n', '        uint256 contributed;\n', '        uint256 received;\n', '    }\n', '\n', '    /* Backers are keyed by their address containing a Contributor struct */\n', '    mapping(address => Contributor) public contributors;\n', '\n', '    /* Events to emit when a contribution has successfully processed */\n', '    event TokensSent(address indexed to, uint256 value);\n', '    event ContributionReceived(address indexed to, uint256 value);\n', '    event MigratedTokens(address indexed _address, uint256 value);\n', '\n', '    /* Constants */\n', '    uint256 public constant TOKEN_CAP = 58500000 * 10 ** 18;\n', '    uint256 public constant MINIMUM_CONTRIBUTION = 10 finney;\n', '    uint256 public constant TOKENS_PER_ETHER = 5000 * 10 ** 18;\n', '    uint256 public constant CROWDSALE_DURATION = 30 days;\n', '\n', '    /* Public Variables */\n', '    TKRToken public token;\n', '    TKRPToken public preToken;\n', '    address public crowdsaleOwner;\n', '    uint256 public etherReceived;\n', '    uint256 public tokensSent;\n', '    uint256 public crowdsaleStartTime;\n', '    uint256 public crowdsaleEndTime;\n', '\n', '    /* Modifier to check whether the crowdsale is running */\n', '    modifier crowdsaleRunning() {\n', '        require(now < crowdsaleEndTime && crowdsaleStartTime != 0);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Fallback function which invokes the processContribution function\n', '    * @param _tokenAddress TKR Token address\n', '    * @param _to crowdsale owner address\n', '    */\n', '    function Crowdsale(address _tokenAddress, address _preTokenAddress, address _to) {\n', '        token = TKRToken(_tokenAddress);\n', '        preToken = TKRPToken(_preTokenAddress);\n', '        crowdsaleOwner = _to;\n', '    }\n', '\n', '    /**\n', '    * @dev Fallback function which invokes the processContribution function\n', '    */\n', '    function() crowdsaleRunning payable {\n', '        processContribution(msg.sender);\n', '    }\n', '\n', '    /**\n', '    * @dev Starts the crowdsale\n', '    */\n', '    function start() onlyOwner {\n', '        require(crowdsaleStartTime == 0);\n', '\n', '        crowdsaleStartTime = now;            \n', '        crowdsaleEndTime = now + CROWDSALE_DURATION;    \n', '    }\n', '\n', '    /**\n', '    * @dev A backup fail-safe drain if required\n', '    */\n', '    function drain() onlyOwner {\n', '        assert(crowdsaleOwner.send(this.balance));\n', '    }\n', '\n', '    /**\n', '    * @dev Finalizes the crowdsale and sends funds\n', '    */\n', '    function finalize() onlyOwner {\n', '        require((crowdsaleStartTime != 0 && now > crowdsaleEndTime) || tokensSent == TOKEN_CAP);\n', '\n', '        uint256 remainingBalance = token.balanceOf(this);\n', '        if (remainingBalance > 0) token.destroy(remainingBalance);\n', '\n', '        assert(crowdsaleOwner.send(this.balance));\n', '    }\n', '\n', '    /**\n', '    * @dev Migrates TKRP tokens to TKR token at a rate of 1:1 during the Crowdsale.\n', '    */\n', '    function migrate() crowdsaleRunning {\n', '        uint256 preTokenBalance = preToken.balanceOf(msg.sender);\n', '        require(preTokenBalance != 0);\n', '        uint256 tokenBalance = preTokenBalance * 10 ** 18;\n', '\n', '        preToken.destroyFrom(msg.sender);\n', '        token.transfer(msg.sender, tokenBalance);\n', '        MigratedTokens(msg.sender, tokenBalance);\n', '    }\n', '\n', '    /**\n', '    * @dev Processes the contribution given, sends the tokens and emits events\n', '    * @param sender The address of the contributor\n', '    */\n', '    function processContribution(address sender) internal {\n', '        require(msg.value >= MINIMUM_CONTRIBUTION);\n', '\n', '        // // /* Calculate total (+bonus) amount to send, throw if it exceeds cap*/\n', '        uint256 contributionInTokens = bonus(msg.value.mul(TOKENS_PER_ETHER).div(1 ether));\n', '        require(contributionInTokens.add(tokensSent) <= TOKEN_CAP);\n', '\n', '        /* Send the tokens */\n', '        token.transfer(sender, contributionInTokens);\n', '\n', '        /* Create a contributor struct and store the contributed/received values */\n', '        Contributor storage contributor = contributors[sender];\n', '        contributor.received = contributor.received.add(contributionInTokens);\n', '        contributor.contributed = contributor.contributed.add(msg.value);\n', '\n', '        // /* Update the total amount of tokens sent and ether received */\n', '        etherReceived = etherReceived.add(msg.value);\n', '        tokensSent = tokensSent.add(contributionInTokens);\n', '\n', '        // /* Emit log events */\n', '        TokensSent(sender, contributionInTokens);\n', '        ContributionReceived(sender, msg.value);\n', '    }\n', '\n', '    /**\n', '    * @dev Calculates the bonus amount based on the contribution date\n', '    * @param amount The contribution amount given\n', '    */\n', '    function bonus(uint256 amount) internal constant returns (uint256) {\n', '        /* This adds a bonus 20% such as 100 + 100/5 = 120 */\n', '        if (now < crowdsaleStartTime.add(2 days)) return amount.add(amount.div(5));\n', '\n', '        /* This adds a bonus 10% such as 100 + 100/10 = 110 */\n', '        if (now < crowdsaleStartTime.add(14 days)) return amount.add(amount.div(10));\n', '\n', '        /* This adds a bonus 5% such as 100 + 100/20 = 105 */\n', '        if (now < crowdsaleStartTime.add(21 days)) return amount.add(amount.div(20));\n', '\n', '        /* No bonus is given */\n', '        return amount;\n', '    }\n', '}']