['pragma solidity ^0.4.11;\n', '\n', 'contract MiningRig {\n', '    // 警告\n', '    string public warning = "請各位要有耐心等候交易完成喔";\n', '    \n', '    // 合約部署者\n', '    address public owner = 0x0;\n', '    \n', '    // 合約停止合資的區塊，初始 0 \n', '    uint public closeBlock = 0;\n', '    \n', '    // 大家一起合資的總新台幣\n', '    uint public totalNTD = 0;\n', '    \n', '    // 這個合約過去總共被提領過的 reward\n', '    uint public totalWithdrew = 0;\n', '    \n', '    // 使用者各自合資的新台幣\n', '    mapping(address => uint) public usersNTD;\n', '    \n', '    // 使用者提領過的 ether\n', '    mapping(address => uint) public usersWithdrew;\n', '    \n', '    // 只能 owner 才行 的修飾子\n', '    modifier onlyOwner () {\n', '        assert(owner == msg.sender);\n', '        _;\n', '    }\n', '    \n', '    // 在關閉合資前才行 的修飾子\n', '    modifier beforeCloseBlock () {\n', '        assert(block.number <= closeBlock);\n', '        _;\n', '    }\n', '    \n', '    // 在關閉合資後才行 的修飾子\n', '    modifier afterCloseBlock () {\n', '        assert(block.number > closeBlock);\n', '        _;\n', '    }\n', '    \n', '    // 只有有合資過的人才行 的修飾子\n', '    modifier onlyMember () {\n', '        assert(usersNTD[msg.sender] != 0);\n', '        _;\n', '    }\n', '    \n', '    // 建構子\n', '    function MiningRig () {\n', '        owner = msg.sender;\n', '        closeBlock = block.number + 5760; // 一天的 block 數\n', '    }\n', '    \n', '    // 合資，由舉辦人註冊 (因為是合資新台幣，所以必須中心化)\n', '    function Register (address theUser, uint NTD) onlyOwner beforeCloseBlock {\n', '        usersNTD[theUser] += NTD;\n', '        totalNTD += NTD;\n', '    }\n', '    \n', '    // 反合資\n', '    function Unregister (address theUser, uint NTD) onlyOwner beforeCloseBlock {\n', '        assert(usersNTD[theUser] >= NTD);\n', '        \n', '        usersNTD[theUser] -= NTD;\n', '        totalNTD -= NTD;\n', '    }\n', '    \n', '    // 提領所分配之以太幣\n', '    function Withdraw () onlyMember afterCloseBlock {\n', '        // 這個合約曾經得到過的 ether 等於現有 balance + 曾經被提領過的\n', '        uint everMined = this.balance + totalWithdrew;\n', '        \n', '        // 這個 user 總共終究可以領的\n', '        uint totalUserCanWithdraw = everMined * usersNTD[msg.sender] / totalNTD;\n', '        \n', '        // 這個 user 現在還可以領的\n', '        uint userCanWithdrawNow = totalUserCanWithdraw - usersWithdrew[msg.sender];\n', '        \n', '        // 防止 reentrance 攻擊，先改狀態\n', '        totalWithdrew += userCanWithdrawNow;\n', '        usersWithdrew[msg.sender] += userCanWithdrawNow;\n', '\n', '        assert(userCanWithdrawNow > 0);\n', '        \n', '        msg.sender.transfer(userCanWithdrawNow);\n', '    }\n', '    \n', '    // 貼現轉讓\n', '    // 轉讓之前必須把能領的 ether 領完\n', '    function Cashing (address targetAddress, uint permilleToCashing) onlyMember afterCloseBlock {\n', '        //permilleToCashing 是千分比\n', '        assert(permilleToCashing <= 1000);\n', '        assert(permilleToCashing > 0);\n', '        \n', '        // 這個合約曾經得到過的 ether 等於現有 balance + 曾經被提領過的\n', '        uint everMined = this.balance + totalWithdrew;\n', '        \n', '        // 這個要發起轉讓的 user 總共終究可以領的\n', '        uint totalUserCanWithdraw = everMined * usersNTD[msg.sender] / totalNTD;\n', '        \n', '        // 這個要發起轉讓的 user 現在還可以領的\n', '        uint userCanWithdrawNow = totalUserCanWithdraw - usersWithdrew[msg.sender];\n', '        \n', '        // 要接收轉讓的 user 總共終究可以領的\n', '        uint totalTargetUserCanWithdraw = everMined * usersNTD[targetAddress] / totalNTD;\n', '        \n', '        // 要接收轉讓的 user 現在還可以領的\n', '        uint targetUserCanWithdrawNow = totalTargetUserCanWithdraw - usersWithdrew[targetAddress];\n', '        \n', '        // 發起轉讓及接收轉讓之前，雙方皆需要淨空可提領 ether\n', '        assert(userCanWithdrawNow == 0);\n', '        assert(targetUserCanWithdrawNow == 0);\n', '        \n', '        uint NTDToTransfer = usersNTD[msg.sender] * permilleToCashing / 1000;\n', '        uint WithdrewToTransfer = usersWithdrew[msg.sender] * permilleToCashing / 1000;\n', '        \n', '        usersNTD[msg.sender] -= NTDToTransfer;\n', '        usersWithdrew[msg.sender] -= WithdrewToTransfer;\n', '        \n', '        usersNTD[targetAddress] += NTDToTransfer;\n', '        usersWithdrew[targetAddress] += WithdrewToTransfer;\n', '    }\n', '    \n', '    function ContractBalance () constant returns (uint) {\n', '        return this.balance;\n', '    }\n', '    \n', '    function ContractTotalMined() constant returns (uint) {\n', '        return this.balance + totalWithdrew;\n', '    }\n', '    \n', '    function MyTotalNTD () constant returns (uint) {\n', '        return usersNTD[msg.sender];\n', '    }\n', '    \n', '    function MyTotalWithdrew () constant returns (uint) {\n', '        return usersWithdrew[msg.sender];\n', '    }\n', ' \n', '    function () payable {}\n', '}']