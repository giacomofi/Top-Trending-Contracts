['pragma solidity ^0.4.11;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Crowdsale {\n', '  function buyTokens(address _recipient) payable;\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', 'contract Preallocation is Ownable {\n', '    using SafeMath for uint;\n', '\n', '    address public investor;\n', '    uint public maxBalance;\n', '\n', '    enum States { Pending, Success, Fail }\n', '    States public state = States.Pending;\n', '\n', '    event InvestorChanged(address from, address to);\n', '\n', '    event FundsLoaded(uint value, address from);\n', '    event FundsRefunded(uint balance);\n', '\n', '    event InvestmentSucceeded(uint value);\n', '    event InvestmentFailed();\n', '\n', '\n', '    function Preallocation(address _investor, uint _maxBalance) {\n', '        investor = _investor;\n', '        maxBalance = _maxBalance;\n', '    }\n', '\n', '    function () payable {\n', '        if (this.balance > maxBalance) {\n', '          throw;\n', '        }\n', '        FundsLoaded(msg.value, msg.sender);\n', '    }\n', '\n', '    function withdraw() onlyOwner notState(States.Success) {\n', '        uint bal = this.balance;\n', '        if (!investor.send(bal)) {\n', '            throw;\n', '        }\n', '\n', '        FundsRefunded(bal);\n', '    }\n', '\n', '    function setInvestor(address _investor) onlyOwner {\n', '        InvestorChanged(investor, _investor);\n', '        investor = _investor;\n', '    }\n', '\n', '    function buyTokens(Crowdsale crowdsale) onlyOwner {\n', '        uint bal = Math.min256(this.balance, maxBalance);\n', '        crowdsale.buyTokens.value(bal)(investor);\n', '\n', '        state = States.Success;\n', '        InvestmentSucceeded(bal);\n', '    }\n', '\n', '    function setFailed() onlyOwner {\n', '      state = States.Fail;\n', '      InvestmentFailed();\n', '    }\n', '\n', '    function stateIs(States _state) constant returns (bool) {\n', '        return state == _state;\n', '    }\n', '\n', '    modifier onlyState(States _state) {\n', '        require (state == _state);\n', '        _;\n', '    }\n', '\n', '    modifier notState(States _state) {\n', '        require (state != _state);\n', '        _;\n', '    }\n', '}\n', '\n', 'library Math {\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}']