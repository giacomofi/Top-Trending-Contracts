['pragma solidity ^0.4.11;\n', '\n', '// ================= Ownable Contract start =============================\n', '/*\n', ' * Ownable\n', ' *\n', ' * Base contract with an owner.\n', ' * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    \n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '}\n', '// ================= Ownable Contract end ===============================\n', '\n', '// ================= Safemath Contract start ============================\n', '/* taking ideas from FirstBlood token */\n', 'contract SafeMath {\n', '\n', '    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x + y;\n', '      assert((z >= x) && (z >= y));\n', '      return z;\n', '    }\n', '\n', '    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\n', '      assert(x >= y);\n', '      uint256 z = x - y;\n', '      return z;\n', '    }\n', '\n', '    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x * y;\n', '      assert((x == 0)||(z/x == y));\n', '      return z;\n', '    }\n', '}\n', '// ================= Safemath Contract end ==============================\n', '\n', '// ================= ERC20 Token Contract start =========================\n', '/*\n', ' * ERC20 interface\n', ' * see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) constant returns (uint);\n', '  function allowance(address owner, address spender) constant returns (uint);\n', '\n', '  function transfer(address to, uint value) returns (bool ok);\n', '  function transferFrom(address from, address to, uint value) returns (bool ok);\n', '  function approve(address spender, uint value) returns (bool ok);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '// ================= ERC20 Token Contract end ===========================\n', '\n', '// ================= Standard Token Contract start ======================\n', 'contract StandardToken is ERC20, SafeMath {\n', '\n', '  /**\n', '   * @dev Fix for the ERC20 short address attack.\n', '   */\n', '  modifier onlyPayloadSize(uint size) {\n', '     require(msg.data.length >= size + 4) ;\n', '     _;\n', '  }\n', '\n', '  mapping(address => uint) balances;\n', '  mapping (address => mapping (address => uint)) allowed;\n', '\n', '  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32)  returns (bool success){\n', '    balances[msg.sender] = safeSubtract(balances[msg.sender], _value);\n', '    balances[_to] = safeAdd(balances[_to], _value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) returns (bool success) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because safeSub(_allowance, _value) will already throw if this condition is not met\n', '    // if (_value > _allowance) throw;\n', '\n', '    balances[_to] = safeAdd(balances[_to], _value);\n', '    balances[_from] = safeSubtract(balances[_from], _value);\n', '    allowed[_from][msg.sender] = safeSubtract(_allowance, _value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function approve(address _spender, uint _value) returns (bool success) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '}\n', '// ================= Standard Token Contract end ========================\n', '\n', '// ================= Pausable Token Contract start ======================\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS paused\n', '   */\n', '  modifier whenNotPaused() {\n', '    require (!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS NOT paused\n', '   */\n', '  modifier whenPaused {\n', '    require (paused) ;\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused returns (bool) {\n', '    paused = true;\n', '    Pause();\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused returns (bool) {\n', '    paused = false;\n', '    Unpause();\n', '    return true;\n', '  }\n', '}\n', '// ================= Pausable Token Contract end ========================\n', '\n', '// ================= Indorse Token Contract start =======================\n', 'contract IndorseToken is SafeMath, StandardToken, Pausable {\n', '    // metadata\n', '    string public constant name = "Indorse Token";\n', '    string public constant symbol = "IND";\n', '    uint256 public constant decimals = 18;\n', '    string public version = "1.0";\n', '\n', '    // contracts\n', '    address public indSaleDeposit        = 0x0053B91E38B207C97CBff06f48a0f7Ab2Dd81449;      // deposit address for Indorse Sale contract\n', '    address public indSeedDeposit        = 0x0083fdFB328fC8D07E2a7933e3013e181F9798Ad;      // deposit address for Indorse Seed Contributors\n', '    address public indPresaleDeposit     = 0x007AB99FBf023Cb41b50AE7D24621729295EdBFA;      // deposit address for Indorse Presale Contributors\n', '    address public indVestingDeposit     = 0x0011349f715cf59F75F0A00185e7B1c36f55C3ab;      // deposit address for Indorse Vesting for team and advisors\n', '    address public indCommunityDeposit   = 0x0097ec8840E682d058b24E6e19E68358d97A6E5C;      // deposit address for Indorse Marketing, etc\n', '    address public indFutureDeposit      = 0x00d1bCbCDE9Ca431f6dd92077dFaE98f94e446e4;      // deposit address for Indorse Future token sale\n', '    address public indInflationDeposit   = 0x00D31206E625F1f30039d1Fa472303E71317870A;      // deposit address for Indorse Inflation pool\n', '    \n', '    uint256 public constant indSale      = 31603785 * 10**decimals;                         \n', '    uint256 public constant indSeed      = 3566341  * 10**decimals; \n', '    uint256 public constant indPreSale   = 22995270 * 10**decimals;                       \n', '    uint256 public constant indVesting   = 28079514 * 10**decimals;  \n', '    uint256 public constant indCommunity = 10919811 * 10**decimals;  \n', '    uint256 public constant indFuture    = 58832579 * 10**decimals;  \n', '    uint256 public constant indInflation = 14624747 * 10**decimals;  \n', '   \n', '    // constructor\n', '    function IndorseToken()\n', '    {\n', '      balances[indSaleDeposit]           = indSale;                                         // Deposit IND share\n', '      balances[indSeedDeposit]           = indSeed;                                         // Deposit IND share\n', '      balances[indPresaleDeposit]        = indPreSale;                                      // Deposit IND future share\n', '      balances[indVestingDeposit]        = indVesting;                                      // Deposit IND future share\n', '      balances[indCommunityDeposit]      = indCommunity;                                    // Deposit IND future share\n', '      balances[indFutureDeposit]         = indFuture;                                       // Deposit IND future share\n', '      balances[indInflationDeposit]      = indInflation;                                    // Deposit for inflation\n', '\n', '      totalSupply = indSale + indSeed + indPreSale + indVesting + indCommunity + indFuture + indInflation;\n', '\n', '      Transfer(0x0,indSaleDeposit,indSale);\n', '      Transfer(0x0,indSeedDeposit,indSeed);\n', '      Transfer(0x0,indPresaleDeposit,indPreSale);\n', '      Transfer(0x0,indVestingDeposit,indVesting);\n', '      Transfer(0x0,indCommunityDeposit,indCommunity);\n', '      Transfer(0x0,indFutureDeposit,indFuture);\n', '      Transfer(0x0,indInflationDeposit,indInflation);\n', '   }\n', '\n', '  function transfer(address _to, uint _value) whenNotPaused returns (bool success)  {\n', '    return super.transfer(_to,_value);\n', '  }\n', '\n', '  function approve(address _spender, uint _value) whenNotPaused returns (bool success)  {\n', '    return super.approve(_spender,_value);\n', '  }\n', '}\n', '// ================= Indorse Token Contract end =======================\n', '\n', '// ================= Actual Sale Contract Start ====================\n', 'contract IndorseSaleContract is  Ownable,SafeMath,Pausable {\n', '    IndorseToken    ind;\n', '\n', '    // crowdsale parameters\n', '    uint256 public fundingStartTime = 1502193600;\n', '    uint256 public fundingEndTime   = 1504785600;\n', '    uint256 public totalSupply;\n', '    address public ethFundDeposit   = 0x26967201d4D1e1aA97554838dEfA4fC4d010FF6F;      // deposit address for ETH for Indorse Fund\n', '    address public indFundDeposit   = 0x0053B91E38B207C97CBff06f48a0f7Ab2Dd81449;      // deposit address for Indorse reserve\n', '    address public indAddress       = 0xf8e386EDa857484f5a12e4B5DAa9984E06E73705;\n', '\n', '    bool public isFinalized;                                                            // switched to true in operational state\n', '    uint256 public constant decimals = 18;                                              // #dp in Indorse contract\n', '    uint256 public tokenCreationCap;\n', '    uint256 public constant tokenExchangeRate = 1000;                                   // 1000 IND tokens per 1 ETH\n', '    uint256 public constant minContribution = 0.05 ether;\n', '    uint256 public constant maxTokens = 1 * (10 ** 6) * 10**decimals;\n', '    uint256 public constant MAX_GAS_PRICE = 50000000000 wei;                            // maximum gas price for contribution transactions\n', ' \n', '    function IndorseSaleContract() {\n', '        ind = IndorseToken(indAddress);\n', '        tokenCreationCap = ind.balanceOf(indFundDeposit);\n', '        isFinalized = false;\n', '    }\n', '\n', '    event MintIND(address from, address to, uint256 val);\n', '    event LogRefund(address indexed _to, uint256 _value);\n', '\n', '    function CreateIND(address to, uint256 val) internal returns (bool success){\n', '        MintIND(indFundDeposit,to,val);\n', '        return ind.transferFrom(indFundDeposit,to,val);\n', '    }\n', '\n', '    function () payable {    \n', '        createTokens(msg.sender,msg.value);\n', '    }\n', '\n', '    /// @dev Accepts ether and creates new IND tokens.\n', '    function createTokens(address _beneficiary, uint256 _value) internal whenNotPaused {\n', '      require (tokenCreationCap > totalSupply);                                         // CAP reached no more please\n', '      require (now >= fundingStartTime);\n', '      require (now <= fundingEndTime);\n', '      require (_value >= minContribution);                                              // To avoid spam transactions on the network    \n', '      require (!isFinalized);\n', '      require (tx.gasprice <= MAX_GAS_PRICE);\n', '\n', '      uint256 tokens = safeMult(_value, tokenExchangeRate);                             // check that we&#39;re not over totals\n', '      uint256 checkedSupply = safeAdd(totalSupply, tokens);\n', '\n', '      require (ind.balanceOf(msg.sender) + tokens <= maxTokens);\n', '      \n', '      // DA 8/6/2017 to fairly allocate the last few tokens\n', '      if (tokenCreationCap < checkedSupply) {        \n', '        uint256 tokensToAllocate = safeSubtract(tokenCreationCap,totalSupply);\n', '        uint256 tokensToRefund   = safeSubtract(tokens,tokensToAllocate);\n', '        totalSupply = tokenCreationCap;\n', '        uint256 etherToRefund = tokensToRefund / tokenExchangeRate;\n', '\n', '        require(CreateIND(_beneficiary,tokensToAllocate));                              // Create IND\n', '        msg.sender.transfer(etherToRefund);\n', '        LogRefund(msg.sender,etherToRefund);\n', '        ethFundDeposit.transfer(this.balance);\n', '        return;\n', '      }\n', '      // DA 8/6/2017 end of fair allocation code\n', '\n', '      totalSupply = checkedSupply;\n', '      require(CreateIND(_beneficiary, tokens));                                         // logs token creation\n', '      ethFundDeposit.transfer(this.balance);\n', '    }\n', '    \n', '    /// @dev Ends the funding period and sends the ETH home\n', '    function finalize() external onlyOwner {\n', '      require (!isFinalized);\n', '      // move to operational\n', '      isFinalized = true;\n', '      ethFundDeposit.transfer(this.balance);                                            // send the eth to Indorse multi-sig\n', '    }\n', '}']