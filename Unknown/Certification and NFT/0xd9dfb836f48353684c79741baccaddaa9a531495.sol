['pragma solidity ^0.4.8;\n', '\n', '/// @title Oracle contract where m of n predetermined voters determine a value\n', 'contract FederatedOracleBytes8 {\n', '    struct Voter {\n', '        bool isVoter;\n', '        bool hasVoted;\n', '    }\n', '\n', '    event VoterAdded(address account);\n', '    event VoteSubmitted(address account, bytes8 value);\n', '    event ValueFinalized(bytes8 value);\n', '\n', '    mapping(address => Voter) public voters;\n', '    mapping(bytes8 => uint8) public votes;\n', '\n', '    uint8 public m;\n', '    uint8 public n;\n', '    bytes8 public finalValue;\n', '\n', '    uint8 private voterCount;\n', '    address private creator;\n', '\n', '    function FederatedOracleBytes8(uint8 m_, uint8 n_) {\n', '        creator = msg.sender;\n', '        m = m_;\n', '        n = n_;\n', '    }\n', '\n', '    function addVoter(address account) {\n', '        if (msg.sender != creator) {\n', '            throw;\n', '        }\n', '        if (voterCount == n) {\n', '            throw;\n', '        }\n', '\n', '        var voter = voters[account];\n', '        if (voter.isVoter) {\n', '            throw;\n', '        }\n', '\n', '        voter.isVoter = true;\n', '        voterCount++;\n', '        VoterAdded(account);\n', '    }\n', '\n', '    function submitValue(bytes8 value) {\n', '        var voter = voters[msg.sender];\n', '        if (!voter.isVoter) {\n', '            throw;\n', '        }\n', '        if (voter.hasVoted) {\n', '            throw;\n', '        }\n', '\n', '        voter.hasVoted = true;\n', '        votes[value]++;\n', '        VoteSubmitted(msg.sender, value);\n', '\n', '        if (votes[value] == m) {\n', '            finalValue = value;\n', '            ValueFinalized(value);\n', '        }\n', '    }\n', '}']