['pragma solidity ^0.4.13;\n', '\n', '/*\n', '\n', 'Monetha Buyer\n', '========================\n', '\n', 'Buys Monetha tokens from the crowdsale on your behalf.\n', 'Author: /u/Cintix\n', '\n', '*/\n', '\n', '// ERC20 Interface: https://github.com/ethereum/EIPs/issues/20\n', 'contract ERC20 {\n', '  function transfer(address _to, uint256 _value) returns (bool success);\n', '  function balanceOf(address _owner) constant returns (uint256 balance);\n', '}\n', '\n', 'contract MonethaBuyer {\n', '  // Store the amount of ETH deposited by each account.\n', '  mapping (address => uint256) public balances;\n', '  // Bounty for executing buy.\n', '  uint256 public buy_bounty;\n', '  // Bounty for executing withdrawals.\n', '  uint256 public withdraw_bounty;\n', '  // Track whether the contract has bought the tokens yet.\n', '  bool public bought_tokens;\n', '  // Record ETH value of tokens currently held by contract.\n', '  uint256 public contract_eth_value;\n', '  // Emergency kill switch in case a critical bug is found.\n', '  bool public kill_switch;\n', '  \n', '  // SHA3 hash of kill switch password.\n', '  bytes32 password_hash = 0x8223cba4d8b54dc1e03c41c059667f6adb1a642a0a07bef5a9d11c18c4f14612;\n', '  // Earliest time contract is allowed to buy into the crowdsale.\n', '  uint256 public earliest_buy_time = 1504188000;\n', '  // Maximum amount of user ETH contract will accept.  Reduces risk of hard cap related failure.\n', '  uint256 public eth_cap = 30000 ether;\n', '  // The developer address.\n', '  address public developer = 0x000Fb8369677b3065dE5821a86Bc9551d5e5EAb9;\n', '  // The crowdsale address.  Settable by the developer.\n', '  address public sale;\n', '  // The token address.  Settable by the developer.\n', '  ERC20 public token;\n', '  \n', '  // Allows the developer to set the crowdsale and token addresses.\n', '  function set_addresses(address _sale, address _token) {\n', '    // Only allow the developer to set the sale and token addresses.\n', '    require(msg.sender == developer);\n', '    // Only allow setting the addresses once.\n', '    require(sale == 0x0);\n', '    // Set the crowdsale and token addresses.\n', '    sale = _sale;\n', '    token = ERC20(_token);\n', '  }\n', '  \n', '  // Allows the developer or anyone with the password to shut down everything except withdrawals in emergencies.\n', '  function activate_kill_switch(string password) {\n', '    // Only activate the kill switch if the sender is the developer or the password is correct.\n', '    require(msg.sender == developer || sha3(password) == password_hash);\n', '    // Store the claimed bounty in a temporary variable.\n', '    uint256 claimed_bounty = buy_bounty;\n', '    // Update bounty prior to sending to prevent recursive call.\n', '    buy_bounty = 0;\n', '    // Irreversibly activate the kill switch.\n', '    kill_switch = true;\n', '    // Send the caller their bounty for activating the kill switch.\n', '    msg.sender.transfer(claimed_bounty);\n', '  }\n', '  \n', '  // Withdraws all ETH deposited or tokens purchased by the given user and rewards the caller.\n', '  function withdraw(address user){\n', '    // Only allow withdrawals after the contract has had a chance to buy in.\n', '    require(bought_tokens || now > earliest_buy_time + 1 hours);\n', '    // Short circuit to save gas if the user doesn&#39;t have a balance.\n', '    if (balances[user] == 0) return;\n', '    // If the contract failed to buy into the sale, withdraw the user&#39;s ETH.\n', '    if (!bought_tokens) {\n', '      // Store the user&#39;s balance prior to withdrawal in a temporary variable.\n', '      uint256 eth_to_withdraw = balances[user];\n', '      // Update the user&#39;s balance prior to sending ETH to prevent recursive call.\n', '      balances[user] = 0;\n', '      // Return the user&#39;s funds.  Throws on failure to prevent loss of funds.\n', '      user.transfer(eth_to_withdraw);\n', '    }\n', '    // Withdraw the user&#39;s tokens if the contract has purchased them.\n', '    else {\n', '      // Retrieve current token balance of contract.\n', '      uint256 contract_token_balance = token.balanceOf(address(this));\n', '      // Disallow token withdrawals if there are no tokens to withdraw.\n', '      require(contract_token_balance != 0);\n', '      // Store the user&#39;s token balance in a temporary variable.\n', '      uint256 tokens_to_withdraw = (balances[user] * contract_token_balance) / contract_eth_value;\n', '      // Update the value of tokens currently held by the contract.\n', '      contract_eth_value -= balances[user];\n', '      // Update the user&#39;s balance prior to sending to prevent recursive call.\n', '      balances[user] = 0;\n', '      // 1% fee if contract successfully bought tokens.\n', '      uint256 fee = tokens_to_withdraw / 100;\n', '      // Send the fee to the developer.\n', '      require(token.transfer(developer, fee));\n', '      // Send the funds.  Throws on failure to prevent loss of funds.\n', '      require(token.transfer(user, tokens_to_withdraw - fee));\n', '    }\n', '    // Each withdraw call earns 1% of the current withdraw bounty.\n', '    uint256 claimed_bounty = withdraw_bounty / 100;\n', '    // Update the withdraw bounty prior to sending to prevent recursive call.\n', '    withdraw_bounty -= claimed_bounty;\n', '    // Send the caller their bounty for withdrawing on the user&#39;s behalf.\n', '    msg.sender.transfer(claimed_bounty);\n', '  }\n', '  \n', '  // Allows developer to add ETH to the buy execution bounty.\n', '  function add_to_buy_bounty() payable {\n', '    // Only allow the developer to contribute to the buy execution bounty.\n', '    require(msg.sender == developer);\n', '    // Update bounty to include received amount.\n', '    buy_bounty += msg.value;\n', '  }\n', '  \n', '  // Allows developer to add ETH to the withdraw execution bounty.\n', '  function add_to_withdraw_bounty() payable {\n', '    // Only allow the developer to contribute to the buy execution bounty.\n', '    require(msg.sender == developer);\n', '    // Update bounty to include received amount.\n', '    withdraw_bounty += msg.value;\n', '  }\n', '  \n', '  // Buys tokens in the crowdsale and rewards the caller, callable by anyone.\n', '  function claim_bounty(){\n', '    // Short circuit to save gas if the contract has already bought tokens.\n', '    if (bought_tokens) return;\n', '    // Short circuit to save gas if the earliest buy time hasn&#39;t been reached.\n', '    if (now < earliest_buy_time) return;\n', '    // Short circuit to save gas if kill switch is active.\n', '    if (kill_switch) return;\n', '    // Disallow buying in if the developer hasn&#39;t set the sale address yet.\n', '    require(sale != 0x0);\n', '    // Record that the contract has bought the tokens.\n', '    bought_tokens = true;\n', '    // Store the claimed bounty in a temporary variable.\n', '    uint256 claimed_bounty = buy_bounty;\n', '    // Update bounty prior to sending to prevent recursive call.\n', '    buy_bounty = 0;\n', '    // Record the amount of ETH sent as the contract&#39;s current value.\n', '    contract_eth_value = this.balance - (claimed_bounty + withdraw_bounty);\n', '    // Transfer all the funds (less the bounties) to the crowdsale address\n', '    // to buy tokens.  Throws if the crowdsale hasn&#39;t started yet or has\n', '    // already completed, preventing loss of funds.\n', '    require(sale.call.value(contract_eth_value)());\n', '    // Send the caller their bounty for buying tokens for the contract.\n', '    msg.sender.transfer(claimed_bounty);\n', '  }\n', '  \n', '  // Default function.  Called when a user sends ETH to the contract.\n', '  function () payable {\n', '    // Disallow deposits if kill switch is active.\n', '    require(!kill_switch);\n', '    // Only allow deposits if the contract hasn&#39;t already purchased the tokens.\n', '    require(!bought_tokens);\n', '    // Only allow deposits that won&#39;t exceed the contract&#39;s ETH cap.\n', '    require(this.balance < eth_cap);\n', '    // Update records of deposited ETH to include the received amount.\n', '    balances[msg.sender] += msg.value;\n', '  }\n', '}']
['pragma solidity ^0.4.13;\n', '\n', '/*\n', '\n', 'Monetha Buyer\n', '========================\n', '\n', 'Buys Monetha tokens from the crowdsale on your behalf.\n', 'Author: /u/Cintix\n', '\n', '*/\n', '\n', '// ERC20 Interface: https://github.com/ethereum/EIPs/issues/20\n', 'contract ERC20 {\n', '  function transfer(address _to, uint256 _value) returns (bool success);\n', '  function balanceOf(address _owner) constant returns (uint256 balance);\n', '}\n', '\n', 'contract MonethaBuyer {\n', '  // Store the amount of ETH deposited by each account.\n', '  mapping (address => uint256) public balances;\n', '  // Bounty for executing buy.\n', '  uint256 public buy_bounty;\n', '  // Bounty for executing withdrawals.\n', '  uint256 public withdraw_bounty;\n', '  // Track whether the contract has bought the tokens yet.\n', '  bool public bought_tokens;\n', '  // Record ETH value of tokens currently held by contract.\n', '  uint256 public contract_eth_value;\n', '  // Emergency kill switch in case a critical bug is found.\n', '  bool public kill_switch;\n', '  \n', '  // SHA3 hash of kill switch password.\n', '  bytes32 password_hash = 0x8223cba4d8b54dc1e03c41c059667f6adb1a642a0a07bef5a9d11c18c4f14612;\n', '  // Earliest time contract is allowed to buy into the crowdsale.\n', '  uint256 public earliest_buy_time = 1504188000;\n', '  // Maximum amount of user ETH contract will accept.  Reduces risk of hard cap related failure.\n', '  uint256 public eth_cap = 30000 ether;\n', '  // The developer address.\n', '  address public developer = 0x000Fb8369677b3065dE5821a86Bc9551d5e5EAb9;\n', '  // The crowdsale address.  Settable by the developer.\n', '  address public sale;\n', '  // The token address.  Settable by the developer.\n', '  ERC20 public token;\n', '  \n', '  // Allows the developer to set the crowdsale and token addresses.\n', '  function set_addresses(address _sale, address _token) {\n', '    // Only allow the developer to set the sale and token addresses.\n', '    require(msg.sender == developer);\n', '    // Only allow setting the addresses once.\n', '    require(sale == 0x0);\n', '    // Set the crowdsale and token addresses.\n', '    sale = _sale;\n', '    token = ERC20(_token);\n', '  }\n', '  \n', '  // Allows the developer or anyone with the password to shut down everything except withdrawals in emergencies.\n', '  function activate_kill_switch(string password) {\n', '    // Only activate the kill switch if the sender is the developer or the password is correct.\n', '    require(msg.sender == developer || sha3(password) == password_hash);\n', '    // Store the claimed bounty in a temporary variable.\n', '    uint256 claimed_bounty = buy_bounty;\n', '    // Update bounty prior to sending to prevent recursive call.\n', '    buy_bounty = 0;\n', '    // Irreversibly activate the kill switch.\n', '    kill_switch = true;\n', '    // Send the caller their bounty for activating the kill switch.\n', '    msg.sender.transfer(claimed_bounty);\n', '  }\n', '  \n', '  // Withdraws all ETH deposited or tokens purchased by the given user and rewards the caller.\n', '  function withdraw(address user){\n', '    // Only allow withdrawals after the contract has had a chance to buy in.\n', '    require(bought_tokens || now > earliest_buy_time + 1 hours);\n', "    // Short circuit to save gas if the user doesn't have a balance.\n", '    if (balances[user] == 0) return;\n', "    // If the contract failed to buy into the sale, withdraw the user's ETH.\n", '    if (!bought_tokens) {\n', "      // Store the user's balance prior to withdrawal in a temporary variable.\n", '      uint256 eth_to_withdraw = balances[user];\n', "      // Update the user's balance prior to sending ETH to prevent recursive call.\n", '      balances[user] = 0;\n', "      // Return the user's funds.  Throws on failure to prevent loss of funds.\n", '      user.transfer(eth_to_withdraw);\n', '    }\n', "    // Withdraw the user's tokens if the contract has purchased them.\n", '    else {\n', '      // Retrieve current token balance of contract.\n', '      uint256 contract_token_balance = token.balanceOf(address(this));\n', '      // Disallow token withdrawals if there are no tokens to withdraw.\n', '      require(contract_token_balance != 0);\n', "      // Store the user's token balance in a temporary variable.\n", '      uint256 tokens_to_withdraw = (balances[user] * contract_token_balance) / contract_eth_value;\n', '      // Update the value of tokens currently held by the contract.\n', '      contract_eth_value -= balances[user];\n', "      // Update the user's balance prior to sending to prevent recursive call.\n", '      balances[user] = 0;\n', '      // 1% fee if contract successfully bought tokens.\n', '      uint256 fee = tokens_to_withdraw / 100;\n', '      // Send the fee to the developer.\n', '      require(token.transfer(developer, fee));\n', '      // Send the funds.  Throws on failure to prevent loss of funds.\n', '      require(token.transfer(user, tokens_to_withdraw - fee));\n', '    }\n', '    // Each withdraw call earns 1% of the current withdraw bounty.\n', '    uint256 claimed_bounty = withdraw_bounty / 100;\n', '    // Update the withdraw bounty prior to sending to prevent recursive call.\n', '    withdraw_bounty -= claimed_bounty;\n', "    // Send the caller their bounty for withdrawing on the user's behalf.\n", '    msg.sender.transfer(claimed_bounty);\n', '  }\n', '  \n', '  // Allows developer to add ETH to the buy execution bounty.\n', '  function add_to_buy_bounty() payable {\n', '    // Only allow the developer to contribute to the buy execution bounty.\n', '    require(msg.sender == developer);\n', '    // Update bounty to include received amount.\n', '    buy_bounty += msg.value;\n', '  }\n', '  \n', '  // Allows developer to add ETH to the withdraw execution bounty.\n', '  function add_to_withdraw_bounty() payable {\n', '    // Only allow the developer to contribute to the buy execution bounty.\n', '    require(msg.sender == developer);\n', '    // Update bounty to include received amount.\n', '    withdraw_bounty += msg.value;\n', '  }\n', '  \n', '  // Buys tokens in the crowdsale and rewards the caller, callable by anyone.\n', '  function claim_bounty(){\n', '    // Short circuit to save gas if the contract has already bought tokens.\n', '    if (bought_tokens) return;\n', "    // Short circuit to save gas if the earliest buy time hasn't been reached.\n", '    if (now < earliest_buy_time) return;\n', '    // Short circuit to save gas if kill switch is active.\n', '    if (kill_switch) return;\n', "    // Disallow buying in if the developer hasn't set the sale address yet.\n", '    require(sale != 0x0);\n', '    // Record that the contract has bought the tokens.\n', '    bought_tokens = true;\n', '    // Store the claimed bounty in a temporary variable.\n', '    uint256 claimed_bounty = buy_bounty;\n', '    // Update bounty prior to sending to prevent recursive call.\n', '    buy_bounty = 0;\n', "    // Record the amount of ETH sent as the contract's current value.\n", '    contract_eth_value = this.balance - (claimed_bounty + withdraw_bounty);\n', '    // Transfer all the funds (less the bounties) to the crowdsale address\n', "    // to buy tokens.  Throws if the crowdsale hasn't started yet or has\n", '    // already completed, preventing loss of funds.\n', '    require(sale.call.value(contract_eth_value)());\n', '    // Send the caller their bounty for buying tokens for the contract.\n', '    msg.sender.transfer(claimed_bounty);\n', '  }\n', '  \n', '  // Default function.  Called when a user sends ETH to the contract.\n', '  function () payable {\n', '    // Disallow deposits if kill switch is active.\n', '    require(!kill_switch);\n', "    // Only allow deposits if the contract hasn't already purchased the tokens.\n", '    require(!bought_tokens);\n', "    // Only allow deposits that won't exceed the contract's ETH cap.\n", '    require(this.balance < eth_cap);\n', '    // Update records of deposited ETH to include the received amount.\n', '    balances[msg.sender] += msg.value;\n', '  }\n', '}']
