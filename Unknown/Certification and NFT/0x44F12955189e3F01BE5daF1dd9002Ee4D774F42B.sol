['pragma solidity ^0.4.15;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply = 800000000 * 10**18;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue)\n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue)\n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '\n', '  address public owner;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '/*\n', ' * AfterSchoolCrowdsaleToken\n', ' *\n', ' * Simple ERC20 Token example, with crowdsale token creation\n', ' */\n', 'contract AfterSchoolCrowdsaleToken is StandardToken, Ownable {\n', '    \n', '  string public standard = "AfterSchool Token v1.1";\n', '  string public name = "AfterSchool Token";\n', '  string public symbol = "AST";\n', '  uint public decimals = 18;\n', '  address public multisig = 0x8Dab59292A76114776B4933aD6F1246Bf647aB90;\n', '  \n', '  // 1 ETH = 5800 AST tokens (1 AST = 0.05 USD)\n', '  uint PRICE = 5800;\n', '  \n', '  struct ContributorData {\n', '    uint contributionAmount;\n', '    uint tokensIssued;\n', '  }\n', '\n', '  function AfterSchoolCrowdsaleToken() {\n', '    balances[msg.sender] = totalSupply;\n', '  }\n', '\n', '  mapping(address => ContributorData) public contributorList;\n', '  uint nextContributorIndex;\n', '  mapping(uint => address) contributorIndexes;\n', '  \n', '  state public crowdsaleState = state.pendingStart;\n', '  enum state { pendingStart, crowdsale, crowdsaleEnded }\n', '  \n', '  event CrowdsaleStarted(uint blockNumber);\n', '  event CrowdsaleEnded(uint blockNumber);\n', '  event ErrorSendingETH(address to, uint amount);\n', '  event MinCapReached(uint blockNumber);\n', '  event MaxCapReached(uint blockNumber);\n', '  \n', '  uint public constant BEGIN_TIME = 1506420000;\n', '  \n', '  uint public constant END_TIME = 1509012000;\n', '\n', '  uint public minCap = 3500 ether;\n', '  uint public maxCap = 50000 ether;\n', '  uint public ethRaised = 0;\n', '  uint public tokenTotalSupply = 800000000 * 10**decimals;\n', '  \n', '  uint crowdsaleTokenCap =            480000000 * 10**decimals; // 60%\n', '  uint foundersAndTeamTokens =        120000000 * 10**decimals; // 15%\n', '  uint advisorAndAmbassadorTokens =    56000000 * 10**decimals; // 7%\n', '  uint investorTokens =                8000000 * 10**decimals; // 10%\n', '  uint afterschoolContributorTokens = 56000000 * 10**decimals; // 7%\n', '  uint futurePartnerTokens =          64000000 * 10**decimals; // 8%\n', '  \n', '  bool foundersAndTeamTokensClaimed = false;\n', '  bool advisorAndAmbassadorTokensClaimed = false;\n', '  bool investorTokensClaimed = false;\n', '  bool afterschoolContributorTokensClaimed = false;\n', '  bool futurePartnerTokensClaimed = false;\n', '  uint nextContributorToClaim;\n', '  mapping(address => bool) hasClaimedEthWhenFail;\n', '\n', '  function() payable {\n', '  require(msg.value != 0);\n', '  require(crowdsaleState != state.crowdsaleEnded);// Check if crowdsale has ended\n', '  \n', '  bool stateChanged = checkCrowdsaleState();      // Check blocks and calibrate crowdsale state\n', '  \n', '  if(crowdsaleState == state.crowdsale) {\n', '      createTokens(msg.sender);             // Process transaction and issue tokens\n', '    } else {\n', '      refundTransaction(stateChanged);              // Set state and return funds or throw\n', '    }\n', '  }\n', '  \n', '  //\n', '  // Check crowdsale state and calibrate it\n', '  //\n', '  function checkCrowdsaleState() internal returns (bool) {\n', '    if (ethRaised >= maxCap && crowdsaleState != state.crowdsaleEnded) { // Check if max cap is reached\n', '      crowdsaleState = state.crowdsaleEnded;\n', '      CrowdsaleEnded(block.number); // Raise event\n', '      return true;\n', '    }\n', '    \n', '    if(now >= END_TIME) {   \n', '      crowdsaleState = state.crowdsaleEnded;\n', '      CrowdsaleEnded(block.number); // Raise event\n', '      return true;\n', '    }\n', '\n', '    if(now >= BEGIN_TIME && now < END_TIME) {        // Check if we are in crowdsale state\n', '      if (crowdsaleState != state.crowdsale) {                                                   // Check if state needs to be changed\n', '        crowdsaleState = state.crowdsale;                                                       // Set new state\n', '        CrowdsaleStarted(block.number);                                                         // Raise event\n', '        return true;\n', '      }\n', '    }\n', '    \n', '    return false;\n', '  }\n', '  \n', '  //\n', '  // Decide if throw or only return ether\n', '  //\n', '  function refundTransaction(bool _stateChanged) internal {\n', '    if (_stateChanged) {\n', '      msg.sender.transfer(msg.value);\n', '    } else {\n', '      revert();\n', '    }\n', '  }\n', '  \n', '  function createTokens(address _contributor) payable {\n', '  \n', '    uint _amount = msg.value;\n', '  \n', '    uint contributionAmount = _amount;\n', '    uint returnAmount = 0;\n', '    \n', '    if (_amount > (maxCap - ethRaised)) {                                          // Check if max contribution is lower than _amount sent\n', '      contributionAmount = maxCap - ethRaised;                                     // Set that user contibutes his maximum alowed contribution\n', '      returnAmount = _amount - contributionAmount;                                 // Calculate how much he must get back\n', '    }\n', '\n', '    if (ethRaised + contributionAmount > minCap && minCap > ethRaised) {\n', '      MinCapReached(block.number);\n', '    }\n', '\n', '    if (ethRaised + contributionAmount == maxCap && ethRaised < maxCap) {\n', '      MaxCapReached(block.number);\n', '    }\n', '\n', '    if (contributorList[_contributor].contributionAmount == 0){\n', '        contributorIndexes[nextContributorIndex] = _contributor;\n', '        nextContributorIndex += 1;\n', '    }\n', '  \n', '    contributorList[_contributor].contributionAmount += contributionAmount;\n', '    ethRaised += contributionAmount;                                              // Add to eth raised\n', '\n', '    uint256 tokenAmount = calculateEthToAfterschool(contributionAmount);      // Calculate how much tokens must contributor get\n', '    if (tokenAmount > 0) {\n', '      transferToContributor(_contributor, tokenAmount);\n', '      contributorList[_contributor].tokensIssued += tokenAmount;                  // log token issuance\n', '    }\n', '\n', '    if (!multisig.send(msg.value)) {\n', '        revert();\n', '    }\n', '  }\n', '\n', '\n', '    function transferToContributor(address _to, uint256 _value)  {\n', '    balances[owner] = balances[owner].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '  }\n', '  \n', '  function calculateEthToAfterschool(uint _eth) constant returns(uint256) {\n', '  \n', '    uint tokens = _eth.mul(getPrice());\n', '    uint percentage = 0;\n', '    \n', '    if (ethRaised > 0)\n', '    {\n', '        percentage = ethRaised * 100 / maxCap;\n', '    }\n', '    \n', '    return tokens + getStageBonus(percentage, tokens) + getAmountBonus(_eth, tokens);\n', '  }\n', '\n', '  function getStageBonus(uint percentage, uint tokens) constant returns (uint) {\n', '    uint stageBonus = 0;\n', '      \n', '    if (percentage <= 10) stageBonus = tokens * 60 / 100; // Stage 1\n', '    else if (percentage <= 50) stageBonus = tokens * 30 / 100;\n', '    else if (percentage <= 70) stageBonus = tokens * 20 / 100;\n', '    else if (percentage <= 90) stageBonus = tokens * 15 / 100;\n', '    else if (percentage <= 100) stageBonus = tokens * 10 / 100;\n', '\n', '    return stageBonus;\n', '  }\n', '\n', '  function getAmountBonus(uint _eth, uint tokens) constant returns (uint) {\n', '    uint amountBonus = 0;  \n', '      \n', '    if (_eth >= 3000 ether) amountBonus = tokens * 13 / 100;\n', '    else if (_eth >= 2000 ether) amountBonus = tokens * 12 / 100;\n', '    else if (_eth >= 1500 ether) amountBonus = tokens * 11 / 100;\n', '    else if (_eth >= 1000 ether) amountBonus = tokens * 10 / 100;\n', '    else if (_eth >= 750 ether) amountBonus = tokens * 9 / 100;\n', '    else if (_eth >= 500 ether) amountBonus = tokens * 8 / 100;\n', '    else if (_eth >= 300 ether) amountBonus = tokens * 75 / 1000;\n', '    else if (_eth >= 200 ether) amountBonus = tokens * 7 / 100;\n', '    else if (_eth >= 150 ether) amountBonus = tokens * 6 / 100;\n', '    else if (_eth >= 100 ether) amountBonus = tokens * 55 / 1000;\n', '    else if (_eth >= 75 ether) amountBonus = tokens * 5 / 100;\n', '    else if (_eth >= 50 ether) amountBonus = tokens * 45 / 1000;\n', '    else if (_eth >= 30 ether) amountBonus = tokens * 4 / 100;\n', '    else if (_eth >= 20 ether) amountBonus = tokens * 35 / 1000;\n', '    else if (_eth >= 15 ether) amountBonus = tokens * 3 / 100;\n', '    else if (_eth >= 10 ether) amountBonus = tokens * 25 / 1000;\n', '    else if (_eth >= 7 ether) amountBonus = tokens * 2 / 100;\n', '    else if (_eth >= 5 ether) amountBonus = tokens * 15 / 1000;\n', '    else if (_eth >= 3 ether) amountBonus = tokens * 1 / 100;\n', '    else if (_eth >= 2 ether) amountBonus = tokens * 5 / 1000;\n', '    \n', '    return amountBonus;\n', '  }\n', '  \n', '  // replace this with any other price function\n', '  function getPrice() constant returns (uint result) {\n', '    return PRICE;\n', '  }\n', '  \n', '  //\n', '  // Owner can batch return contributors contributions(eth)\n', '  //\n', '  function batchReturnEthIfFailed(uint _numberOfReturns) onlyOwner {\n', '    require(crowdsaleState != state.crowdsaleEnded);                // Check if crowdsale has ended\n', '    require(ethRaised < minCap);                // Check if crowdsale has failed\n', '    address currentParticipantAddress;\n', '    uint contribution;\n', '    for (uint cnt = 0; cnt < _numberOfReturns; cnt++){\n', '      currentParticipantAddress = contributorIndexes[nextContributorToClaim];         // Get next unclaimed participant\n', '      if (currentParticipantAddress == 0x0) return;                                   // Check if all the participants were compensated\n', '      if (!hasClaimedEthWhenFail[currentParticipantAddress]) {                        // Check if participant has already claimed\n', '        contribution = contributorList[currentParticipantAddress].contributionAmount; // Get contribution of participant\n', '        hasClaimedEthWhenFail[currentParticipantAddress] = true;                      // Set that he has claimed\n', '        balances[currentParticipantAddress] = 0;\n', '        if (!currentParticipantAddress.send(contribution)){                           // Refund eth\n', '          ErrorSendingETH(currentParticipantAddress, contribution);                   // If there is an issue raise event for manual recovery\n', '        }\n', '      }\n', '      nextContributorToClaim += 1;                                                    // Repeat\n', '    }\n', '  }\n', '  \n', '    //\n', '  // Owner can set multisig address for crowdsale\n', '  //\n', '  function setMultisigAddress(address _newAddress) onlyOwner {\n', '    multisig = _newAddress;\n', '  }\n', '  \n', '}']