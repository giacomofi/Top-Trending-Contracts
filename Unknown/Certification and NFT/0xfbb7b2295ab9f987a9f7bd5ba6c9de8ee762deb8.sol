['// Abstract contract for the full ERC 20 Token standard\n', '// https://github.com/ethereum/EIPs/issues/20\n', 'pragma solidity ^0.4.11;\n', '\n', 'contract Token {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract CNYTokenPlus is StandardToken {\n', '\n', '    function () {\n', '        //if ether is sent to this address, send it back.\n', '        throw;\n', '    }\n', '\n', '    address public founder;               // The address of the founder\n', '    string public name;                   // fancy name: eg Simon Bucks\n', '    uint8 public decimals;                // How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It&#39;s like comparing 1 wei to 1 ether.\n', '    string public symbol;                 // An identifier: eg SBX\n', '    string public version = &#39;CNYt+1.0&#39;;     // CNYt+ 1.0 standard. Just an arbitrary versioning scheme.\n', '    \n', '\n', '    // The nonce for avoid transfer replay attacks\n', '    mapping(address => uint256) nonces;\n', '\n', '    // The last comment for address\n', '    mapping(address => string) lastComment;\n', '\n', '    // The comments for transfers per address\n', '    mapping (address => mapping (uint256 => string)) comments;\n', '\n', '    function CNYTokenPlus(\n', '        uint256 _initialAmount,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol) {\n', '        founder = msg.sender;                                // Save the creator address\n', '        balances[msg.sender] = _initialAmount;               // Give the creator all initial tokens\n', '        totalSupply = _initialAmount;                        // Update total supply\n', '        name = _tokenName;                                   // Set the name for display purposes\n', '        decimals = _decimalUnits;                            // Amount of decimals for display purposes\n', '        symbol = _tokenSymbol;                               // Set the symbol for display purposes  \n', '    }\n', '\n', '   function transferWithComment(address _to, uint256 _value, string _comment) returns (bool success) {\n', '        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            lastComment[msg.sender] = _comment;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFromWithComment(address _from, address _to, uint256 _value, string _comment) returns (bool success) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            lastComment[_from] = _comment;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /*\n', '     * Proxy transfer CNY token. When some users of the ethereum account has no ether,\n', '     * he or she can authorize the agent for broadcast transactions, and agents may charge agency fees\n', '     * @param _from\n', '     * @param _to\n', '     * @param _value\n', '     * @param fee\n', '     * @param _v\n', '     * @param _r\n', '     * @param _s\n', '     * @param _comment\n', '     */\n', '    function transferProxy(address _from, address _to, uint256 _value, uint256 _fee,\n', '        uint8 _v,bytes32 _r, bytes32 _s, string _comment) returns (bool){\n', '\n', '        if(balances[_from] < _fee + _value) throw;\n', '\n', '        uint256 nonce = nonces[_from];\n', '                \n', '        bytes32 hash = sha3(_from,_to,_value,_fee,nonce);\n', '        bytes memory prefix = "\\x19Ethereum Signed Message:\\n32";\n', '        bytes32 prefixedHash = sha3(prefix, hash);\n', '        if(_from != ecrecover(prefixedHash,_v,_r,_s)) throw;\n', '\n', '        if(balances[_to] + _value < balances[_to]\n', '            || balances[msg.sender] + _fee < balances[msg.sender]) throw;\n', '        balances[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '\n', '        balances[msg.sender] += _fee;\n', '        Transfer(_from, msg.sender, _fee);\n', '\n', '        balances[_from] -= _value + _fee;\n', '        lastComment[_from] = _comment;\n', '        comments[_from][nonce] = _comment;\n', '        nonces[_from] = nonce + 1;\n', '        \n', '        return true;\n', '    }\n', '\n', '    /*\n', '     * Proxy approve that some one can authorize the agent for broadcast transaction\n', '     * which call approve method, and agents may charge agency fees\n', '     * @param _from The  address which should tranfer CNY to others\n', '     * @param _spender The spender who allowed by _from\n', '     * @param _value The value that should be tranfered.\n', '     * @param _v\n', '     * @param _r\n', '     * @param _s\n', '     * @param _comment\n', '     */\n', '    function approveProxy(address _from, address _spender, uint256 _value,\n', '        uint8 _v,bytes32 _r, bytes32 _s, string _comment) returns (bool success) {\n', '\n', '        if(balances[_from] < _value) throw;\n', '        \n', '        uint256 nonce = nonces[_from];\n', '        \n', '        bytes32 hash = sha3(_from,_spender,_value,nonce);\n', '        bytes memory prefix = "\\x19Ethereum Signed Message:\\n32";\n', '        bytes32 prefixedHash = sha3(prefix, hash);\n', '        if(_from != ecrecover(prefixedHash,_v,_r,_s)) throw;\n', '\n', '        allowed[_from][_spender] = _value;\n', '        Approval(_from, _spender, _value);\n', '        lastComment[_from] = _comment;\n', '        comments[_from][nonce] = _comment;\n', '        nonces[_from] = nonce + 1;\n', '        return true;\n', '    }\n', '\n', '\n', '    /*\n', '     * Get the nonce\n', '     * @param _addr\n', '     */\n', '    function getNonce(address _addr) constant returns (uint256){\n', '        return nonces[_addr];\n', '    }\n', '\n', '    /*\n', '     * Get last comment\n', '     * @param _addr\n', '     */\n', '    function getLastComment(address _addr) constant returns (string){\n', '        return lastComment[_addr];\n', '    }\n', '\n', '    /*\n', '     * Get specified comment\n', '     * @param _addr\n', '     */\n', '    function getSpecifiedComment(address _addr, uint256 _nonce) constant returns (string){\n', '        if (nonces[_addr] < _nonce) throw;\n', '        return comments[_addr][_nonce];\n', '    }\n', '\n', '    /* Approves and then calls the receiving contract */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '\n', '        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn&#39;t have to include a contract in here just for this.\n', '        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '        if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { throw; }\n', '        return true;\n', '    }\n', '\n', '    /* Approves and then calls the contract code*/\n', '    function approveAndCallcode(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '\n', '        //Call the contract code\n', '        if(!_spender.call(_extraData)) { throw; }\n', '        return true;\n', '    }\n', '\n', '    /* This notifies clients about the amount burnt */\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    function burn(uint256 _value) returns (bool success) {\n', '        if (balances[msg.sender] < _value) throw;            // Check if the sender has enough\n', '        balances[msg.sender] -= _value;                      // Subtract from the sender\n', '        totalSupply -= _value;                                // Updates totalSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _value) returns (bool success) {\n', '        if (balances[_from] < _value) throw;                // Check if the sender has enough\n', '        if (_value > allowed[_from][msg.sender]) throw;    // Check allowance\n', '        balances[_from] -= _value;                          // Subtract from the sender\n', '        totalSupply -= _value;                               // Updates totalSupply\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '}']