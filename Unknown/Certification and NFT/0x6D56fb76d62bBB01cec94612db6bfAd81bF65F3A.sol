['pragma solidity^0.4.13;\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      throw;\n', '    }\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20Basic {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) constant returns (uint);\n', '  function transfer(address to, uint value);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint);\n', '  function transferFrom(address from, address to, uint value);\n', '  function approve(address spender, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint;\n', '\n', '  mapping(address => uint) balances;\n', '\n', '  /**\n', '   * @dev Fix for the ERC20 short address attack.\n', '   */\n', '  modifier onlyPayloadSize(uint size) {\n', '     if(msg.data.length < size + 4) {\n', '       throw;\n', '     }\n', '     _;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is BasicToken, ERC20 {\n', '\n', '  mapping (address => mapping (address => uint)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // if (_value > _allowance) throw;\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on beahlf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint _value) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens than an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract SFTToken is StandardToken {\n', '\tusing SafeMath for uint256;\n', '\n', '\tstring public constant name = "SFT Token";\n', '\tstring public constant symbol = "SFT";\n', '\tuint256 public constant decimals = 18; \n', '\tstring public version = "1.0";\n', '\t\n', '\taddress public executor;\n', '\taddress public devETHDestination;\n', '\taddress public devSFTDestination;\n', '\t\n', '\tbool public saleHasEnded;\n', '\tbool public minCapReached;\n', '\tbool public allowRefund;\n', '\n', '\tmapping (address => uint256) public ETHContributed;\n', '\n', '\tuint256 public totalETHRaised;\n', '\n', '\tuint256 public saleStartBlock;\n', '\tuint256 public saleEndBlock;\n', '\n', '        uint256 public saleFirstEarlyBirdEndBlock;\n', '\tuint256 public saleSecondEarlyBirdEndBlock;\n', '\n', '\tuint256 public constant DEV_PORTION = 45;\n', '\tuint256 public constant SECURITY_ETHER_CAP = 20000 ether;\n', '\n', '        uint256 public constant SFT_PER_ETH_FIRST_EARLY_BIRD_RATE = 550;\n', '\tuint256 public constant SFT_PER_ETH_SECOND_EARLY_BIRD_RATE = 525;\n', '\tuint256 public constant SFT_PER_ETH_BASE_RATE = 500; \n', '\t\n', '\tfunction SFTToken() {\n', '\t        executor = msg.sender;\n', '\n', '\t\tsaleHasEnded = false;\n', '                minCapReached = false;\n', '\t\tallowRefund = false;\n', '\n', '\t\tdevETHDestination = 0x8C5CbE9B28618Dd2d7e6A4110FB52DFa378a0196;\n', '\t\tdevSFTDestination = 0x8C5CbE9B28618Dd2d7e6A4110FB52DFa378a0196;\n', '\n', '\t\ttotalETHRaised = 0;\n', '\t\ttotalSupply = 0;\n', '\n', '\t\tsaleStartBlock = 4166530;\n', '\t\tsaleEndBlock = 4291810;\n', '\n', '                saleFirstEarlyBirdEndBlock = 4194610;\n', '                saleSecondEarlyBirdEndBlock = 4227010 ;\n', '\n', '\t}\n', '\t\n', '\tfunction createTokens() payable external {\n', '\t\tif (saleHasEnded) throw;\n', '\t\tif (block.number < saleStartBlock) throw;\n', '\t\tif (block.number > saleEndBlock) throw;\n', '\t\tuint256 newEtherBalance = totalETHRaised.add(msg.value);\n', '\t\tif (newEtherBalance > SECURITY_ETHER_CAP) throw; \n', '\t\tif (0 == msg.value) throw;\n', '\t\t\n', '\t\tuint256 curTokenRate = SFT_PER_ETH_BASE_RATE;\n', '\n', '                if (block.number < saleFirstEarlyBirdEndBlock) {\n', '\t          curTokenRate = SFT_PER_ETH_FIRST_EARLY_BIRD_RATE;\n', '\t\t}\n', '\t\telse if (block.number < saleSecondEarlyBirdEndBlock) {\n', '\t\t  curTokenRate = SFT_PER_ETH_SECOND_EARLY_BIRD_RATE;\n', '\t\t}\n', '\n', '\t\tuint256 amountOfETH = msg.value.mul(curTokenRate);\n', '\n', '\t\tuint256 totalSupplySafe = totalSupply.add(amountOfETH);\n', '\t\tuint256 balanceSafe = balances[msg.sender].add(amountOfETH);\n', '\t\tuint256 contributedSafe = ETHContributed[msg.sender].add(msg.value);\n', '\n', '\t\ttotalSupply = totalSupplySafe;\n', '\t\tbalances[msg.sender] = balanceSafe;\n', '\n', '\t\ttotalETHRaised = newEtherBalance;\n', '\t\tETHContributed[msg.sender] = contributedSafe;\n', '\n', '\t}\n', '\t\n', '\tfunction endSale() {\n', '\t\tif (saleHasEnded) throw;\n', '\t\tif (!minCapReached) throw;\n', '\t\tif (msg.sender != executor) throw;\n', '\n', '                uint256 additionalSFT = (totalSupply.mul(DEV_PORTION)).div(100 - DEV_PORTION);\n', '\t\tuint256 totalSupplySafe = totalSupply.add(additionalSFT);\n', '\t\tuint256 devShare = additionalSFT;\n', '\n', '\t\ttotalSupply = totalSupplySafe;\n', '\t\tbalances[devSFTDestination] = devShare;\n', '\n', '\t        saleHasEnded = true;\n', '\n', '\t\tif (this.balance > 0) {\n', '\t\t\tif (!devETHDestination.call.value(this.balance)()) throw;\n', '\t\t}\n', '\t}\n', '\n', '      \tfunction withdrawFunds() {\n', '\t\tif (0 == this.balance) throw;\n', '\t\tif (!minCapReached) throw;\n', '\t\tif (!devETHDestination.call.value(this.balance)()) throw;\n', '\t}\n', '\n', '        function triggerMinCap() {\n', '\t\tif (msg.sender != executor) throw;\n', '\t\tminCapReached = true;\n', '\t}\n', '\n', '\tfunction triggerRefund() {\n', '\t\t// No refunds if the sale was successful\n', '\t\tif (saleHasEnded) throw;\n', '\t\t// No refunds if minimum cap is hit\n', '\t\tif (minCapReached) throw;\n', '\t\t// No refunds if the sale is still progressing\n', '\t\tif (block.number < saleEndBlock) throw;\n', '\t\tif (msg.sender != executor) throw;\n', '\n', '\t\tallowRefund = true;\n', '\t}\n', '\n', '\tfunction refund() external {\n', '\t\t// No refunds until it is approved\n', '\t\tif (!allowRefund) throw;\n', '\t\t// Nothing to refund\n', '\t\tif (0 == ETHContributed[msg.sender]) throw;\n', '\n', '\t\t// Do the refund.\n', '\t\tuint256 etherAmount = ETHContributed[msg.sender];\n', '\t\tETHContributed[msg.sender] = 0;\n', '\n', '\t\tif (!msg.sender.send(etherAmount)) throw;\n', '\t}\n', '\t\n', '\tfunction changeDeveloperETHDestinationAddress(address _newAddress) {\n', '\t\tif (msg.sender != executor) throw;\n', '\t\tdevETHDestination = _newAddress;\n', '\t}\n', '\t\n', '\tfunction changeDeveloperSFTDestinationAddress(address _newAddress) {\n', '\t\tif (msg.sender != executor) throw;\n', '\t\tdevSFTDestination = _newAddress;\n', '\t}\n', '\t\n', '\tfunction transfer(address _to, uint _value) {\n', '\t\tsuper.transfer(_to, _value);\n', '\t}\n', '\t\n', '\tfunction transferFrom(address _from, address _to, uint _value) {\n', '\t\tsuper.transferFrom(_from, _to, _value);\n', '\t}\n', '\n', '        function() payable{\n', '          this.createTokens();\n', '        }\n', '}']