['/*\n', '\n', '  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '  http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '\n', '*/\n', 'pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '/// @title Token Register Contract\n', '/// @author Kongliang Zhong - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="6a0105040d06030b040d2a0605051a1803040d4405180d">[email&#160;protected]</a>>,\n', '/// @author Daniel Wang - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="4521242b2c202905292a2a35372c2b226b2a3722">[email&#160;protected]</a>>.\n', 'contract TokenRegistry is Ownable {\n', '\n', '    address[] public tokens;\n', '\n', '    mapping (string => address) tokenSymbolMap;\n', '\n', '    function registerToken(address _token, string _symbol)\n', '        public\n', '        onlyOwner {\n', '        require(_token != address(0));\n', '        require(!isTokenRegisteredBySymbol(_symbol));\n', '        require(!isTokenRegistered(_token));\n', '        tokens.push(_token);\n', '        tokenSymbolMap[_symbol] = _token;\n', '    }\n', '\n', '    function unregisterToken(address _token, string _symbol)\n', '        public\n', '        onlyOwner {\n', '        require(tokenSymbolMap[_symbol] == _token);\n', '        delete tokenSymbolMap[_symbol];\n', '        for (uint i = 0; i < tokens.length; i++) {\n', '            if (tokens[i] == _token) {\n', '                tokens[i] == tokens[tokens.length - 1];\n', '                tokens.length --;\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '    function isTokenRegisteredBySymbol(string symbol)\n', '        public\n', '        constant\n', '        returns (bool) {\n', '        return tokenSymbolMap[symbol] != address(0);\n', '    }\n', '\n', '    function isTokenRegistered(address _token)\n', '        public\n', '        constant\n', '        returns (bool) {\n', '\n', '        for (uint i = 0; i < tokens.length; i++) {\n', '            if (tokens[i] == _token) {\n', '                return true;\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function getAddressBySymbol(string symbol)\n', '        public\n', '        constant\n', '        returns (address) {\n', '        return tokenSymbolMap[symbol];\n', '    }\n', '}']