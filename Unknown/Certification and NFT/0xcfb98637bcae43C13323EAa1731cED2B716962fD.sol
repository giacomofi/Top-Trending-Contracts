['pragma solidity ^0.4.11;\n', '\n', '/* taking ideas from FirstBlood token */\n', 'contract SafeMath {\n', '\n', '    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\n', '        uint256 z = x + y;\n', '        assert((z >= x) && (z >= y));\n', '        return z;\n', '    }\n', '\n', '    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\n', '        assert(x >= y);\n', '        uint256 z = x - y;\n', '        return z;\n', '    }\n', '\n', '    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\n', '        uint256 z = x * y;\n', '        assert((x == 0)||(z/x == y));\n', '        return z;\n', '    }\n', '}\n', '\n', 'contract Token {\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '/*  ERC 20 token */\n', 'contract StandardToken is Token, SafeMath {\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    modifier onlyPayloadSize(uint numwords) {\n', '        assert(msg.data.length == numwords * 32 + 4);\n', '        _;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value)\n', '    returns (bool success)\n', '    {\n', '        if (balances[msg.sender] >= _value && _value > 0 && balances[_to] + _value > balances[_to]) {\n', '            balances[msg.sender] = safeSubtract(balances[msg.sender], _value);\n', '            balances[_to] = safeAdd(balances[_to], _value);\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '    returns (bool success)\n', '    {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0 && balances[_to] + _value > balances[_to]) {\n', '            balances[_to] = safeAdd(balances[_to], _value);\n', '            balances[_from] = safeSubtract(balances[_from], _value);\n', '            allowed[_from][msg.sender] = safeSubtract(allowed[_from][msg.sender], _value);\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value)\n', '    onlyPayloadSize(2)\n', '    returns (bool success)\n', '    {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender)\n', '    constant\n', '    onlyPayloadSize(2)\n', '    returns (uint256 remaining)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', '/* Taking ideas from BAT token */\n', 'contract NEToken is StandardToken {\n', '\n', '    // Token metadata\n', '    string public constant name = "Nimiq Network Interim Token";\n', '    string public constant symbol = "NET";\n', '    uint256 public constant decimals = 18;\n', '    string public version = "0.8";\n', '\n', '    // Deposit address of Multisig account controlled by the creators\n', '    address public ethFundDeposit;\n', '\n', '    // Fundraising parameters\n', '    enum ContractState { Fundraising, Finalized, Redeeming, Paused }\n', '    ContractState public state;           // Current state of the contract\n', '    ContractState private savedState;     // State of the contract before pause\n', '\n', '    uint256 public fundingStartBlock;        // These two blocks need to be chosen to comply with the\n', '    uint256 public fundingEndBlock;          // start date and 28 day duration requirements\n', '    uint256 public exchangeRateChangesBlock; // block number that triggers the exchange rate change\n', '\n', '    uint256 public constant TOKEN_FIRST_EXCHANGE_RATE = 175; // 175 NETs per 1 ETH\n', '    uint256 public constant TOKEN_SECOND_EXCHANGE_RATE = 125; // 125 NETs per 1 ETH\n', '    uint256 public constant TOKEN_CREATION_CAP = 10.5 * (10**6) * 10**decimals; // 10.5 million NETs\n', '    uint256 public constant ETH_RECEIVED_CAP = 60 * (10**3) * 10**decimals; // 60 000 ETH\n', '    uint256 public constant ETH_RECEIVED_MIN = 5 * (10**3) * 10**decimals; // 5 000 ETH\n', '    uint256 public constant TOKEN_MIN = 1 * 10**decimals; // 1 NET\n', '\n', '    // We need to keep track of how much ether have been contributed, since we have a cap for ETH too\n', '    uint256 public totalReceivedEth = 0;\n', '\n', '    // Since we have different exchange rates at different stages, we need to keep track\n', '    // of how much ether each contributed in case that we need to issue a refund\n', '    mapping (address => uint256) private ethBalances;\n', '\n', '    // Events used for logging\n', '    event LogRefund(address indexed _to, uint256 _value);\n', '    event LogCreateNET(address indexed _to, uint256 _value);\n', '    event LogRedeemNET(address indexed _to, uint256 _value, bytes32 _nimiqAddress);\n', '\n', '    modifier isFinalized() {\n', '        require(state == ContractState.Finalized);\n', '        _;\n', '    }\n', '\n', '    modifier isFundraising() {\n', '        require(state == ContractState.Fundraising);\n', '        _;\n', '    }\n', '\n', '    modifier isRedeeming() {\n', '        require(state == ContractState.Redeeming);\n', '        _;\n', '    }\n', '\n', '    modifier isPaused() {\n', '        require(state == ContractState.Paused);\n', '        _;\n', '    }\n', '\n', '    modifier notPaused() {\n', '        require(state != ContractState.Paused);\n', '        _;\n', '    }\n', '\n', '    modifier isFundraisingIgnorePaused() {\n', '        require(state == ContractState.Fundraising || (state == ContractState.Paused && savedState == ContractState.Fundraising));\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == ethFundDeposit);\n', '        _;\n', '    }\n', '\n', '    modifier minimumReached() {\n', '        require(totalReceivedEth >= ETH_RECEIVED_MIN);\n', '        _;\n', '    }\n', '\n', '    // Constructor\n', '    function NEToken(\n', '    address _ethFundDeposit,\n', '    uint256 _fundingStartBlock,\n', '    uint256 _fundingEndBlock,\n', '    uint256 _exchangeRateChangesBlock)\n', '    {\n', '        // Check that the parameters make sense\n', '        require(block.number <= _fundingStartBlock); // The start of the fundraising should happen in the future\n', '        require(_fundingStartBlock <= _exchangeRateChangesBlock); // The exchange rate change should happen after the start of the fundraising\n', '        require(_exchangeRateChangesBlock <= _fundingEndBlock); // And the end of the fundraising should happen after the exchange rate change\n', '\n', '        // Contract state\n', '        state = ContractState.Fundraising;\n', '        savedState = ContractState.Fundraising;\n', '\n', '        ethFundDeposit = _ethFundDeposit;\n', '        fundingStartBlock = _fundingStartBlock;\n', '        fundingEndBlock = _fundingEndBlock;\n', '        exchangeRateChangesBlock = _exchangeRateChangesBlock;\n', '        totalSupply = 0;\n', '    }\n', '\n', '    // Overridden method to check for end of fundraising before allowing transfer of tokens\n', '    function transfer(address _to, uint256 _value)\n', '    isFinalized // Only allow token transfer after the fundraising has ended\n', '    onlyPayloadSize(2)\n', '    returns (bool success)\n', '    {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '\n', '    // Overridden method to check for end of fundraising before allowing transfer of tokens\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '    isFinalized // Only allow token transfer after the fundraising has ended\n', '    onlyPayloadSize(3)\n', '    returns (bool success)\n', '    {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '\n', '    /// @dev Accepts ether and creates new NET tokens\n', '    function createTokens()\n', '    payable\n', '    external\n', '    isFundraising\n', '    {\n', '        require(block.number >= fundingStartBlock);\n', '        require(block.number <= fundingEndBlock);\n', '        require(msg.value > 0);\n', '\n', '        // First we check the ETH cap, as it&#39;s easier to calculate, return\n', '        // the contribution if the cap has been reached already\n', '        uint256 checkedReceivedEth = safeAdd(totalReceivedEth, msg.value);\n', '        require(checkedReceivedEth <= ETH_RECEIVED_CAP);\n', '\n', '        // If all is fine with the ETH cap, we continue to check the\n', '        // minimum amount of tokens and the cap for how many tokens\n', '        // have been generated so far\n', '        uint256 tokens = safeMult(msg.value, getCurrentTokenPrice());\n', '        require(tokens >= TOKEN_MIN);\n', '        uint256 checkedSupply = safeAdd(totalSupply, tokens);\n', '        require(checkedSupply <= TOKEN_CREATION_CAP);\n', '\n', '        // Only when all the checks have passed, then we update the state (ethBalances,\n', '        // totalReceivedEth, totalSupply, and balances) of the contract\n', '        ethBalances[msg.sender] = safeAdd(ethBalances[msg.sender], msg.value);\n', '        totalReceivedEth = checkedReceivedEth;\n', '        totalSupply = checkedSupply;\n', '        balances[msg.sender] += tokens;  // safeAdd not needed; bad semantics to use here\n', '\n', '        // Log the creation of this tokens\n', '        LogCreateNET(msg.sender, tokens);\n', '    }\n', '\n', '\n', '    /// @dev Returns the current token price\n', '    function getCurrentTokenPrice()\n', '    private\n', '    constant\n', '    returns (uint256 currentPrice)\n', '    {\n', '        if (block.number < exchangeRateChangesBlock) {\n', '            return TOKEN_FIRST_EXCHANGE_RATE;\n', '        } else {\n', '            return TOKEN_SECOND_EXCHANGE_RATE;\n', '        }\n', '    }\n', '\n', '\n', '    /// @dev Redeems NETs and records the Nimiq address of the sender\n', '    function redeemTokens(bytes32 nimiqAddress)\n', '    external\n', '    isRedeeming\n', '    {\n', '        uint256 netVal = balances[msg.sender];\n', '        require(netVal >= TOKEN_MIN); // At least TOKEN_MIN tokens have to be redeemed\n', '\n', '        // Move the tokens of the caller to Nimiq&#39;s address\n', '        if (!super.transfer(ethFundDeposit, netVal)) throw;\n', '\n', '        // Log the redeeming of this tokens\n', '        LogRedeemNET(msg.sender, netVal, nimiqAddress);\n', '    }\n', '\n', '\n', '    /// @dev Allows to transfer ether from the contract as soon as the minimum is reached\n', '    function retrieveEth(uint256 _value)\n', '    external\n', '    minimumReached\n', '    onlyOwner\n', '    {\n', '        require(_value <= this.balance);\n', '\n', '        // send the eth to Nimiq Creators\n', '        ethFundDeposit.transfer(_value);\n', '    }\n', '\n', '\n', '    /// @dev Ends the fundraising period and sends the ETH to the Multisig wallet\n', '    function finalize()\n', '    external\n', '    isFundraising\n', '    minimumReached\n', '    onlyOwner // Only the owner of the ethFundDeposit address can finalize the contract\n', '    {\n', '        require(block.number > fundingEndBlock || totalSupply >= TOKEN_CREATION_CAP || totalReceivedEth >= ETH_RECEIVED_CAP); // Only allow to finalize the contract before the ending block if we already reached any of the two caps\n', '\n', '        // Move the contract to Finalized state\n', '        state = ContractState.Finalized;\n', '        savedState = ContractState.Finalized;\n', '\n', '        // Send the ETH to Nimiq Creators\n', '        ethFundDeposit.transfer(this.balance);\n', '    }\n', '\n', '\n', '    /// @dev Starts the redeeming period\n', '    function startRedeeming()\n', '    external\n', '    isFinalized // The redeeming period can only be started after the contract is finalized\n', '    onlyOwner   // Only the owner of the ethFundDeposit address can start the redeeming period\n', '    {\n', '        // Move the contract to Redeeming state\n', '        state = ContractState.Redeeming;\n', '        savedState = ContractState.Redeeming;\n', '    }\n', '\n', '\n', '    /// @dev Pauses the contract\n', '    function pause()\n', '    external\n', '    notPaused   // Prevent the contract getting stuck in the Paused state\n', '    onlyOwner   // Only the owner of the ethFundDeposit address can pause the contract\n', '    {\n', '        // Move the contract to Paused state\n', '        savedState = state;\n', '        state = ContractState.Paused;\n', '    }\n', '\n', '\n', '    /// @dev Proceeds with the contract\n', '    function proceed()\n', '    external\n', '    isPaused\n', '    onlyOwner   // Only the owner of the ethFundDeposit address can proceed with the contract\n', '    {\n', '        // Move the contract to the previous state\n', '        state = savedState;\n', '    }\n', '\n', '\n', '    /// @dev Allows contributors to recover their ether in case the minimum funding goal is not reached\n', '    function refund()\n', '    external\n', '    isFundraisingIgnorePaused // Refunding is only possible in the fundraising phase (no matter if paused) by definition\n', '    {\n', '        require(block.number > fundingEndBlock); // Prevents refund until fundraising period is over\n', '        require(totalReceivedEth < ETH_RECEIVED_MIN);  // No refunds if the minimum has been reached\n', '\n', '        uint256 netVal = balances[msg.sender];\n', '        require(netVal > 0);\n', '        uint256 ethVal = ethBalances[msg.sender];\n', '        require(ethVal > 0);\n', '\n', '        // Update the state only after all the checks have passed\n', '        balances[msg.sender] = 0;\n', '        ethBalances[msg.sender] = 0;\n', '        totalSupply = safeSubtract(totalSupply, netVal); // Extra safe\n', '\n', '        // Log this refund\n', '        LogRefund(msg.sender, ethVal);\n', '\n', '        // Send the contributions only after we have updated all the balances\n', '        // If you&#39;re using a contract, make sure it works with .transfer() gas limits\n', '        msg.sender.transfer(ethVal);\n', '    }\n', '}']