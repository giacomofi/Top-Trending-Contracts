['pragma solidity^0.4.11;\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      throw;\n', '    }\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20Basic {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) constant returns (uint);\n', '  function transfer(address to, uint value);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint);\n', '  function transferFrom(address from, address to, uint value);\n', '  function approve(address spender, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint;\n', '\n', '  mapping(address => uint) balances;\n', '\n', '  /**\n', '   * @dev Fix for the ERC20 short address attack.\n', '   */\n', '  modifier onlyPayloadSize(uint size) {\n', '     if(msg.data.length < size + 4) {\n', '       throw;\n', '     }\n', '     _;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implemantation of the basic standart token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is BasicToken, ERC20 {\n', '\n', '  mapping (address => mapping (address => uint)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // if (_value > _allowance) throw;\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint _value) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens than an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '// ERC20 token interface is implemented only partially.\n', '// Token transfer is prohibited due to spec (see PRESALE-SPEC.md),\n', '// hence some functions are left undefined:\n', '//  - transfer, transferFrom,\n', '//  - approve, allowance.\n', '\n', '\n', 'contract EthsMePresale is StandardToken {\n', '\n', '    string public constant name = "EthsMe Presale token";\n', '    string public constant symbol = "ETME";\n', '    uint256   public constant decimals = 18;\n', '\n', '    uint256 public constant PRICE = 1000; // 1000 EthsMe per Ether\n', '    uint256 public constant TOKEN_SUPPLY_LIMIT = 2500 * 10000 * (1 ether / 1 wei);\n', '    uint256 public constant SECURITY_ETHER_CAP = 35 ether;\n', '    uint256 public totalSupply = 0; \n', '    uint256 public totalETHRaised;\n', '\n', '    enum Phase {\n', '        Created,\n', '        Running,\n', '        Paused,\n', '        Migrating,\n', '        Migrated\n', '    }\n', '\n', '    Phase public currentPhase = Phase.Running;\n', '    \n', '    address public tokenManager;\n', '    address public escrow;\n', '    address public crowdsaleManager;\n', '\n', '    mapping (address => uint256) private balance;\n', '\n', '    modifier onlyTokenManager()     { if(msg.sender != tokenManager) throw; _; }\n', '    modifier onlyCrowdsaleManager() { if(msg.sender != crowdsaleManager) throw; _; }\n', '\n', '    event LogBuy(address indexed owner, uint value);\n', '    event LogBurn(address indexed owner, uint value);\n', '    event LogPhaseSwitch(Phase newPhase);\n', '\n', '\n', '    function EthsMePresale(address _tokenManager, address _escrow) {\n', '        tokenManager = _tokenManager;\n', '        escrow = _escrow;\n', '        totalETHRaised = 0;\n', '    }\n', '\n', '    function() payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    /// @dev Lets buy you some tokens.\n', '    function buyTokens(address _buyer) public payable {\n', '\n', '        uint256 newEtherBalance = totalETHRaised.add(msg.value);\n', '        if(currentPhase != Phase.Running) throw;\n', '\t\tif (newEtherBalance > SECURITY_ETHER_CAP) throw; \n', '        if(msg.value == 0) throw;\n', '        uint newTokens = msg.value * PRICE;\n', '        if (totalSupply + newTokens > TOKEN_SUPPLY_LIMIT) throw;\n', '        balance[_buyer] += newTokens;\n', '        totalSupply += newTokens;\n', '        totalETHRaised = newEtherBalance;\n', '        LogBuy(_buyer, newTokens);\n', '    }\n', '\n', '    function burnTokens(address _owner) public\n', '        onlyCrowdsaleManager\n', '    {\n', '        // Available only during migration phase\n', '        if(currentPhase != Phase.Migrating) throw;\n', '\n', '        uint tokens = balance[_owner];\n', '        if(tokens == 0) throw;\n', '        balance[_owner] = 0;\n', '        totalSupply -= tokens;\n', '        LogBurn(_owner, tokens);\n', '\n', '        if(totalSupply == 0) {\n', '            currentPhase = Phase.Migrated;\n', '            LogPhaseSwitch(Phase.Migrated);\n', '        }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256) {\n', '        return balance[_owner];\n', '    }\n', '\n', '    function setPresalePhase(Phase _nextPhase) public\n', '        onlyTokenManager\n', '    {\n', '        bool canSwitchPhase\n', '            =  (currentPhase == Phase.Created && _nextPhase == Phase.Running)\n', '            || (currentPhase == Phase.Running && _nextPhase == Phase.Paused)\n', '                // switch to migration phase only if crowdsale manager is set\n', '            || ((currentPhase == Phase.Running || currentPhase == Phase.Paused)\n', '                && _nextPhase == Phase.Migrating\n', '                && crowdsaleManager != 0x0)\n', '            || (currentPhase == Phase.Paused && _nextPhase == Phase.Running)\n', '                // switch to migrated only if everyting is migrated\n', '            || (currentPhase == Phase.Migrating && _nextPhase == Phase.Migrated\n', '                && totalSupply == 0);\n', '\n', '        if(!canSwitchPhase) throw;\n', '        currentPhase = _nextPhase;\n', '        LogPhaseSwitch(_nextPhase);\n', '    }\n', '\n', '\n', '    function withdrawEther() public\n', '        onlyTokenManager\n', '    {\n', '        // Available at any phase.\n', '        if(this.balance > 0) {\n', '            if(!escrow.send(this.balance)) throw;\n', '        }\n', '    }\n', '\n', '\n', '    function setCrowdsaleManager(address _mgr) public\n', '        onlyTokenManager\n', '    {\n', '        // You can&#39;t change crowdsale contract when migration is in progress.\n', '        if(currentPhase == Phase.Migrating) throw;\n', '        crowdsaleManager = _mgr;\n', '    }\n', '    \n', '    function transfer(address _to, uint _value) {\n', '\t\tsuper.transfer(_to, _value);\n', '\t}\n', '\t\n', '\tfunction transferFrom(address _from, address _to, uint _value) {\n', '\t\tsuper.transferFrom(_from, _to, _value);\n', '\t}\n', '}']