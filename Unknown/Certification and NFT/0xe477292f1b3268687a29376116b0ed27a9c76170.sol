['library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', 'contract HeroCoin is StandardToken {\n', '\n', '    // data structures\n', '    enum States {\n', '    Initial, // deployment time\n', '    ValuationSet,\n', '    Ico, // whitelist addresses, accept funds, update balances\n', '    Underfunded, // ICO time finished and minimal amount not raised\n', '    Operational, // manage contests\n', '    Paused         // for contract upgrades\n', '    }\n', '\n', '    //should be constant, but is not, to avoid compiler warning\n', '    address public  rakeEventPlaceholderAddress = 0x0000000000000000000000000000000000000000;\n', '\n', '    string public constant name = "Herocoin";\n', '\n', '    string public constant symbol = "PLAY";\n', '\n', '    uint8 public constant decimals = 18;\n', '\n', '    mapping (address => bool) public whitelist;\n', '\n', '    address public initialHolder;\n', '\n', '    address public stateControl;\n', '\n', '    address public whitelistControl;\n', '\n', '    address public withdrawControl;\n', '\n', '    States public state;\n', '\n', '    uint256 public weiICOMinimum;\n', '\n', '    uint256 public weiICOMaximum;\n', '\n', '    uint256 public silencePeriod;\n', '\n', '    uint256 public startAcceptingFundsBlock;\n', '\n', '    uint256 public endBlock;\n', '\n', '    uint256 public ETH_HEROCOIN; //number of herocoins per ETH\n', '\n', '    mapping (address => uint256) lastRakePoints;\n', '\n', '\n', '    uint256 pointMultiplier = 1e18; //100% = 1*10^18 points\n', '    uint256 totalRakePoints; //total amount of rakes ever paid out as a points value. increases monotonically, but the number range is 2^256, that&#39;s enough.\n', '    uint256 unclaimedRakes; //amount of coins unclaimed. acts like a special entry to balances\n', '    uint256 constant percentForSale = 30;\n', '\n', '    mapping (address => bool) public contests; // true if this address holds a contest\n', '\n', '    //this creates the contract and stores the owner. it also passes in 3 addresses to be used later during the lifetime of the contract.\n', '    function HeroCoin(address _stateControl, address _whitelistControl, address _withdraw, address _initialHolder) {\n', '        initialHolder = _initialHolder;\n', '        stateControl = _stateControl;\n', '        whitelistControl = _whitelistControl;\n', '        withdrawControl = _withdraw;\n', '        moveToState(States.Initial);\n', '        weiICOMinimum = 0;\n', '        //to be overridden\n', '        weiICOMaximum = 0;\n', '        endBlock = 0;\n', '        ETH_HEROCOIN = 0;\n', '        totalSupply = 2000000000 * pointMultiplier;\n', '        //sets the value in the superclass.\n', '        balances[initialHolder] = totalSupply;\n', '        //initially, initialHolder has 100%\n', '    }\n', '\n', '    event ContestAnnouncement(address addr);\n', '\n', '    event Whitelisted(address addr);\n', '\n', '    event Credited(address addr, uint balance, uint txAmount);\n', '\n', '    event StateTransition(States oldState, States newState);\n', '\n', '    modifier onlyWhitelist() {\n', '        require(msg.sender == whitelistControl);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == initialHolder);\n', '        _;\n', '    }\n', '\n', '    modifier onlyStateControl() {\n', '        require(msg.sender == stateControl);\n', '        _;\n', '    }\n', '\n', '    modifier onlyWithdraw() {\n', '        require(msg.sender == withdrawControl);\n', '        _;\n', '    }\n', '\n', '    modifier requireState(States _requiredState) {\n', '        require(state == _requiredState);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    BEGIN ICO functions\n', '    */\n', '\n', '    //this is the main funding function, it updates the balances of Herocoins during the ICO.\n', '    //no particular incentive schemes have been implemented here\n', '    //it is only accessible during the "ICO" phase.\n', '    function() payable\n', '    requireState(States.Ico)\n', '    {\n', '        require(whitelist[msg.sender] == true);\n', '        require(this.balance <= weiICOMaximum); //note that msg.value is already included in this.balance\n', '        require(block.number < endBlock);\n', '        require(block.number >= startAcceptingFundsBlock);\n', '        uint256 heroCoinIncrease = msg.value * ETH_HEROCOIN;\n', '        balances[initialHolder] -= heroCoinIncrease;\n', '        balances[msg.sender] += heroCoinIncrease;\n', '        Credited(msg.sender, balances[msg.sender], msg.value);\n', '    }\n', '\n', '    function moveToState(States _newState)\n', '    internal\n', '    {\n', '        StateTransition(state, _newState);\n', '        state = _newState;\n', '    }\n', '\n', '    // ICO contract configuration function\n', '    // newEthICOMinimum is the minimum amount of funds to raise\n', '    // newEthICOMaximum is the maximum amount of funds to raise\n', '    // silencePeriod is a number of blocks to wait after starting the ICO. No funds are accepted during the silence period. It can be set to zero.\n', '    // newEndBlock is the absolute block number at which the ICO must stop. It must be set after now + silence period.\n', '    function updateEthICOThresholds(uint256 _newWeiICOMinimum, uint256 _newWeiICOMaximum, uint256 _silencePeriod, uint256 _newEndBlock)\n', '    onlyStateControl\n', '    {\n', '        require(state == States.Initial || state == States.ValuationSet);\n', '        require(_newWeiICOMaximum > _newWeiICOMinimum);\n', '        require(block.number + silencePeriod < _newEndBlock);\n', '        require(block.number < _newEndBlock);\n', '        weiICOMinimum = _newWeiICOMinimum;\n', '        weiICOMaximum = _newWeiICOMaximum;\n', '        silencePeriod = _silencePeriod;\n', '        endBlock = _newEndBlock;\n', '        // initial conversion rate of ETH_HEROCOIN set now, this is used during the Ico phase.\n', '        ETH_HEROCOIN = ((totalSupply * percentForSale) / 100) / weiICOMaximum;\n', '        // check pointMultiplier\n', '        moveToState(States.ValuationSet);\n', '    }\n', '\n', '    function startICO()\n', '    onlyStateControl\n', '    requireState(States.ValuationSet)\n', '    {\n', '        require(block.number < endBlock);\n', '        require(block.number + silencePeriod < endBlock);\n', '        startAcceptingFundsBlock = block.number + silencePeriod;\n', '        moveToState(States.Ico);\n', '    }\n', '\n', '\n', '    function endICO()\n', '    onlyStateControl\n', '    requireState(States.Ico)\n', '    {\n', '        if (this.balance < weiICOMinimum) {\n', '            moveToState(States.Underfunded);\n', '        }\n', '        else {\n', '            burnUnsoldCoins();\n', '            moveToState(States.Operational);\n', '        }\n', '    }\n', '\n', '    function anyoneEndICO()\n', '    requireState(States.Ico)\n', '    {\n', '        require(block.number > endBlock);\n', '        if (this.balance < weiICOMinimum) {\n', '            moveToState(States.Underfunded);\n', '        }\n', '        else {\n', '            burnUnsoldCoins();\n', '            moveToState(States.Operational);\n', '        }\n', '    }\n', '\n', '    function burnUnsoldCoins()\n', '    internal\n', '    {\n', '        uint256 soldcoins = this.balance * ETH_HEROCOIN;\n', '        totalSupply = soldcoins * 100 / percentForSale;\n', '        balances[initialHolder] = totalSupply - soldcoins;\n', '        //slashing the initial supply, so that the ico is selling 30% total\n', '    }\n', '\n', '    function addToWhitelist(address _whitelisted)\n', '    onlyWhitelist\n', '        //    requireState(States.Ico)\n', '    {\n', '        whitelist[_whitelisted] = true;\n', '        Whitelisted(_whitelisted);\n', '    }\n', '\n', '\n', '    //emergency pause for the ICO\n', '    function pause()\n', '    onlyStateControl\n', '    requireState(States.Ico)\n', '    {\n', '        moveToState(States.Paused);\n', '    }\n', '\n', '    //in case we want to completely abort\n', '    function abort()\n', '    onlyStateControl\n', '    requireState(States.Paused)\n', '    {\n', '        moveToState(States.Underfunded);\n', '    }\n', '\n', '    //un-pause\n', '    function resumeICO()\n', '    onlyStateControl\n', '    requireState(States.Paused)\n', '    {\n', '        moveToState(States.Ico);\n', '    }\n', '\n', '    //in case of a failed/aborted ICO every investor can get back their money\n', '    function requestRefund()\n', '    requireState(States.Underfunded)\n', '    {\n', '        require(balances[msg.sender] > 0);\n', '        //there is no need for updateAccount(msg.sender) since the token never became active.\n', '        uint256 payout = balances[msg.sender] / ETH_HEROCOIN;\n', '        //reverse calculate the amount to pay out\n', '        balances[msg.sender] = 0;\n', '        msg.sender.transfer(payout);\n', '    }\n', '\n', '    //after the ico has run its course, the withdraw account can drain funds bit-by-bit as needed.\n', '    function requestPayout(uint _amount)\n', '    onlyWithdraw //very important!\n', '    requireState(States.Operational)\n', '    {\n', '        msg.sender.transfer(_amount);\n', '    }\n', '    /**\n', '    END ICO functions\n', '    */\n', '\n', '    /**\n', '    BEGIN ERC20 functions\n', '    */\n', '    function transfer(address _to, uint256 _value)\n', '    requireState(States.Operational)\n', '    updateAccount(msg.sender) //update senders rake before transfer, so they can access their full balance\n', '    updateAccount(_to) //update receivers rake before transfer as well, to avoid over-attributing rake\n', '    enforceRake(msg.sender, _value)\n', '    returns (bool success) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '    requireState(States.Operational)\n', '    updateAccount(_from) //update senders rake before transfer, so they can access their full balance\n', '    updateAccount(_to) //update receivers rake before transfer as well, to avoid over-attributing rake\n', '    enforceRake(_from, _value)\n', '    returns (bool success) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function balanceOf(address _account)\n', '    constant\n', '    returns (uint256 balance) {\n', '        return balances[_account] + rakesOwing(_account);\n', '    }\n', '\n', '    function payRake(uint256 _value)\n', '    requireState(States.Operational)\n', '    updateAccount(msg.sender)\n', '    returns (bool success) {\n', '        return payRakeInternal(msg.sender, _value);\n', '    }\n', '\n', '\n', '    function\n', '    payRakeInternal(address _sender, uint256 _value)\n', '    internal\n', '    returns (bool success) {\n', '\n', '        if (balances[_sender] <= _value) {\n', '            return false;\n', '        }\n', '        if (_value != 0) {\n', '            Transfer(_sender, rakeEventPlaceholderAddress, _value);\n', '            balances[_sender] -= _value;\n', '            unclaimedRakes += _value;\n', '            //   calc amount of points from total:\n', '            uint256 pointsPaid = _value * pointMultiplier / totalSupply;\n', '            totalRakePoints += pointsPaid;\n', '        }\n', '        return true;\n', '\n', '    }\n', '    /**\n', '    END ERC20 functions\n', '    */\n', '    /**\n', '    BEGIN Rake modifier updateAccount\n', '    */\n', '    modifier updateAccount(address _account) {\n', '        uint256 owing = rakesOwing(_account);\n', '        if (owing != 0) {\n', '            unclaimedRakes -= owing;\n', '            balances[_account] += owing;\n', '            Transfer(rakeEventPlaceholderAddress, _account, owing);\n', '        }\n', '        //also if 0 this needs to be called, since lastRakePoints need the right value\n', '        lastRakePoints[_account] = totalRakePoints;\n', '        _;\n', '    }\n', '\n', '    //todo use safemath.sol\n', '    function rakesOwing(address _account)\n', '    internal\n', '    constant\n', '    returns (uint256) {//returns always > 0 value\n', '        //how much is _account owed, denominated in points from total supply\n', '        uint256 newRakePoints = totalRakePoints - lastRakePoints[_account];\n', '        //always positive\n', '        //weigh by my balance (dimension HC*10^18)\n', '        uint256 basicPoints = balances[_account] * newRakePoints;\n', '        //still positive\n', '        //normalize to dimension HC by moving comma left by 18 places\n', '        return (basicPoints) / pointMultiplier;\n', '    }\n', '    /**\n', '    END Rake modifier updateAccount\n', '    */\n', '\n', '    // contest management functions\n', '\n', '    modifier enforceRake(address _contest, uint256 _value){\n', '        //we calculate 1% of the total value, rounded up. division would round down otherwise.\n', '        //explicit brackets illustrate that the calculation only round down when dividing by 100, to avoid an expression\n', '        // like value * (99/100)\n', '        if (contests[_contest]) {\n', '            uint256 toPay = _value - ((_value * 99) / 100);\n', '            bool paid = payRakeInternal(_contest, toPay);\n', '            require(paid);\n', '        }\n', '        _;\n', '    }\n', '\n', '    // all functions require HeroCoin operational state\n', '\n', '\n', '    // registerContest declares a contest to HeroCoin.\n', '    // It must be called from an address that has HeroCoin.\n', '    // This address is recorded as the contract admin.\n', '    function registerContest()\n', '    {\n', '        contests[msg.sender] = true;\n', '        ContestAnnouncement(msg.sender);\n', '    }\n', '}']
['library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', 'contract HeroCoin is StandardToken {\n', '\n', '    // data structures\n', '    enum States {\n', '    Initial, // deployment time\n', '    ValuationSet,\n', '    Ico, // whitelist addresses, accept funds, update balances\n', '    Underfunded, // ICO time finished and minimal amount not raised\n', '    Operational, // manage contests\n', '    Paused         // for contract upgrades\n', '    }\n', '\n', '    //should be constant, but is not, to avoid compiler warning\n', '    address public  rakeEventPlaceholderAddress = 0x0000000000000000000000000000000000000000;\n', '\n', '    string public constant name = "Herocoin";\n', '\n', '    string public constant symbol = "PLAY";\n', '\n', '    uint8 public constant decimals = 18;\n', '\n', '    mapping (address => bool) public whitelist;\n', '\n', '    address public initialHolder;\n', '\n', '    address public stateControl;\n', '\n', '    address public whitelistControl;\n', '\n', '    address public withdrawControl;\n', '\n', '    States public state;\n', '\n', '    uint256 public weiICOMinimum;\n', '\n', '    uint256 public weiICOMaximum;\n', '\n', '    uint256 public silencePeriod;\n', '\n', '    uint256 public startAcceptingFundsBlock;\n', '\n', '    uint256 public endBlock;\n', '\n', '    uint256 public ETH_HEROCOIN; //number of herocoins per ETH\n', '\n', '    mapping (address => uint256) lastRakePoints;\n', '\n', '\n', '    uint256 pointMultiplier = 1e18; //100% = 1*10^18 points\n', "    uint256 totalRakePoints; //total amount of rakes ever paid out as a points value. increases monotonically, but the number range is 2^256, that's enough.\n", '    uint256 unclaimedRakes; //amount of coins unclaimed. acts like a special entry to balances\n', '    uint256 constant percentForSale = 30;\n', '\n', '    mapping (address => bool) public contests; // true if this address holds a contest\n', '\n', '    //this creates the contract and stores the owner. it also passes in 3 addresses to be used later during the lifetime of the contract.\n', '    function HeroCoin(address _stateControl, address _whitelistControl, address _withdraw, address _initialHolder) {\n', '        initialHolder = _initialHolder;\n', '        stateControl = _stateControl;\n', '        whitelistControl = _whitelistControl;\n', '        withdrawControl = _withdraw;\n', '        moveToState(States.Initial);\n', '        weiICOMinimum = 0;\n', '        //to be overridden\n', '        weiICOMaximum = 0;\n', '        endBlock = 0;\n', '        ETH_HEROCOIN = 0;\n', '        totalSupply = 2000000000 * pointMultiplier;\n', '        //sets the value in the superclass.\n', '        balances[initialHolder] = totalSupply;\n', '        //initially, initialHolder has 100%\n', '    }\n', '\n', '    event ContestAnnouncement(address addr);\n', '\n', '    event Whitelisted(address addr);\n', '\n', '    event Credited(address addr, uint balance, uint txAmount);\n', '\n', '    event StateTransition(States oldState, States newState);\n', '\n', '    modifier onlyWhitelist() {\n', '        require(msg.sender == whitelistControl);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == initialHolder);\n', '        _;\n', '    }\n', '\n', '    modifier onlyStateControl() {\n', '        require(msg.sender == stateControl);\n', '        _;\n', '    }\n', '\n', '    modifier onlyWithdraw() {\n', '        require(msg.sender == withdrawControl);\n', '        _;\n', '    }\n', '\n', '    modifier requireState(States _requiredState) {\n', '        require(state == _requiredState);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    BEGIN ICO functions\n', '    */\n', '\n', '    //this is the main funding function, it updates the balances of Herocoins during the ICO.\n', '    //no particular incentive schemes have been implemented here\n', '    //it is only accessible during the "ICO" phase.\n', '    function() payable\n', '    requireState(States.Ico)\n', '    {\n', '        require(whitelist[msg.sender] == true);\n', '        require(this.balance <= weiICOMaximum); //note that msg.value is already included in this.balance\n', '        require(block.number < endBlock);\n', '        require(block.number >= startAcceptingFundsBlock);\n', '        uint256 heroCoinIncrease = msg.value * ETH_HEROCOIN;\n', '        balances[initialHolder] -= heroCoinIncrease;\n', '        balances[msg.sender] += heroCoinIncrease;\n', '        Credited(msg.sender, balances[msg.sender], msg.value);\n', '    }\n', '\n', '    function moveToState(States _newState)\n', '    internal\n', '    {\n', '        StateTransition(state, _newState);\n', '        state = _newState;\n', '    }\n', '\n', '    // ICO contract configuration function\n', '    // newEthICOMinimum is the minimum amount of funds to raise\n', '    // newEthICOMaximum is the maximum amount of funds to raise\n', '    // silencePeriod is a number of blocks to wait after starting the ICO. No funds are accepted during the silence period. It can be set to zero.\n', '    // newEndBlock is the absolute block number at which the ICO must stop. It must be set after now + silence period.\n', '    function updateEthICOThresholds(uint256 _newWeiICOMinimum, uint256 _newWeiICOMaximum, uint256 _silencePeriod, uint256 _newEndBlock)\n', '    onlyStateControl\n', '    {\n', '        require(state == States.Initial || state == States.ValuationSet);\n', '        require(_newWeiICOMaximum > _newWeiICOMinimum);\n', '        require(block.number + silencePeriod < _newEndBlock);\n', '        require(block.number < _newEndBlock);\n', '        weiICOMinimum = _newWeiICOMinimum;\n', '        weiICOMaximum = _newWeiICOMaximum;\n', '        silencePeriod = _silencePeriod;\n', '        endBlock = _newEndBlock;\n', '        // initial conversion rate of ETH_HEROCOIN set now, this is used during the Ico phase.\n', '        ETH_HEROCOIN = ((totalSupply * percentForSale) / 100) / weiICOMaximum;\n', '        // check pointMultiplier\n', '        moveToState(States.ValuationSet);\n', '    }\n', '\n', '    function startICO()\n', '    onlyStateControl\n', '    requireState(States.ValuationSet)\n', '    {\n', '        require(block.number < endBlock);\n', '        require(block.number + silencePeriod < endBlock);\n', '        startAcceptingFundsBlock = block.number + silencePeriod;\n', '        moveToState(States.Ico);\n', '    }\n', '\n', '\n', '    function endICO()\n', '    onlyStateControl\n', '    requireState(States.Ico)\n', '    {\n', '        if (this.balance < weiICOMinimum) {\n', '            moveToState(States.Underfunded);\n', '        }\n', '        else {\n', '            burnUnsoldCoins();\n', '            moveToState(States.Operational);\n', '        }\n', '    }\n', '\n', '    function anyoneEndICO()\n', '    requireState(States.Ico)\n', '    {\n', '        require(block.number > endBlock);\n', '        if (this.balance < weiICOMinimum) {\n', '            moveToState(States.Underfunded);\n', '        }\n', '        else {\n', '            burnUnsoldCoins();\n', '            moveToState(States.Operational);\n', '        }\n', '    }\n', '\n', '    function burnUnsoldCoins()\n', '    internal\n', '    {\n', '        uint256 soldcoins = this.balance * ETH_HEROCOIN;\n', '        totalSupply = soldcoins * 100 / percentForSale;\n', '        balances[initialHolder] = totalSupply - soldcoins;\n', '        //slashing the initial supply, so that the ico is selling 30% total\n', '    }\n', '\n', '    function addToWhitelist(address _whitelisted)\n', '    onlyWhitelist\n', '        //    requireState(States.Ico)\n', '    {\n', '        whitelist[_whitelisted] = true;\n', '        Whitelisted(_whitelisted);\n', '    }\n', '\n', '\n', '    //emergency pause for the ICO\n', '    function pause()\n', '    onlyStateControl\n', '    requireState(States.Ico)\n', '    {\n', '        moveToState(States.Paused);\n', '    }\n', '\n', '    //in case we want to completely abort\n', '    function abort()\n', '    onlyStateControl\n', '    requireState(States.Paused)\n', '    {\n', '        moveToState(States.Underfunded);\n', '    }\n', '\n', '    //un-pause\n', '    function resumeICO()\n', '    onlyStateControl\n', '    requireState(States.Paused)\n', '    {\n', '        moveToState(States.Ico);\n', '    }\n', '\n', '    //in case of a failed/aborted ICO every investor can get back their money\n', '    function requestRefund()\n', '    requireState(States.Underfunded)\n', '    {\n', '        require(balances[msg.sender] > 0);\n', '        //there is no need for updateAccount(msg.sender) since the token never became active.\n', '        uint256 payout = balances[msg.sender] / ETH_HEROCOIN;\n', '        //reverse calculate the amount to pay out\n', '        balances[msg.sender] = 0;\n', '        msg.sender.transfer(payout);\n', '    }\n', '\n', '    //after the ico has run its course, the withdraw account can drain funds bit-by-bit as needed.\n', '    function requestPayout(uint _amount)\n', '    onlyWithdraw //very important!\n', '    requireState(States.Operational)\n', '    {\n', '        msg.sender.transfer(_amount);\n', '    }\n', '    /**\n', '    END ICO functions\n', '    */\n', '\n', '    /**\n', '    BEGIN ERC20 functions\n', '    */\n', '    function transfer(address _to, uint256 _value)\n', '    requireState(States.Operational)\n', '    updateAccount(msg.sender) //update senders rake before transfer, so they can access their full balance\n', '    updateAccount(_to) //update receivers rake before transfer as well, to avoid over-attributing rake\n', '    enforceRake(msg.sender, _value)\n', '    returns (bool success) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '    requireState(States.Operational)\n', '    updateAccount(_from) //update senders rake before transfer, so they can access their full balance\n', '    updateAccount(_to) //update receivers rake before transfer as well, to avoid over-attributing rake\n', '    enforceRake(_from, _value)\n', '    returns (bool success) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function balanceOf(address _account)\n', '    constant\n', '    returns (uint256 balance) {\n', '        return balances[_account] + rakesOwing(_account);\n', '    }\n', '\n', '    function payRake(uint256 _value)\n', '    requireState(States.Operational)\n', '    updateAccount(msg.sender)\n', '    returns (bool success) {\n', '        return payRakeInternal(msg.sender, _value);\n', '    }\n', '\n', '\n', '    function\n', '    payRakeInternal(address _sender, uint256 _value)\n', '    internal\n', '    returns (bool success) {\n', '\n', '        if (balances[_sender] <= _value) {\n', '            return false;\n', '        }\n', '        if (_value != 0) {\n', '            Transfer(_sender, rakeEventPlaceholderAddress, _value);\n', '            balances[_sender] -= _value;\n', '            unclaimedRakes += _value;\n', '            //   calc amount of points from total:\n', '            uint256 pointsPaid = _value * pointMultiplier / totalSupply;\n', '            totalRakePoints += pointsPaid;\n', '        }\n', '        return true;\n', '\n', '    }\n', '    /**\n', '    END ERC20 functions\n', '    */\n', '    /**\n', '    BEGIN Rake modifier updateAccount\n', '    */\n', '    modifier updateAccount(address _account) {\n', '        uint256 owing = rakesOwing(_account);\n', '        if (owing != 0) {\n', '            unclaimedRakes -= owing;\n', '            balances[_account] += owing;\n', '            Transfer(rakeEventPlaceholderAddress, _account, owing);\n', '        }\n', '        //also if 0 this needs to be called, since lastRakePoints need the right value\n', '        lastRakePoints[_account] = totalRakePoints;\n', '        _;\n', '    }\n', '\n', '    //todo use safemath.sol\n', '    function rakesOwing(address _account)\n', '    internal\n', '    constant\n', '    returns (uint256) {//returns always > 0 value\n', '        //how much is _account owed, denominated in points from total supply\n', '        uint256 newRakePoints = totalRakePoints - lastRakePoints[_account];\n', '        //always positive\n', '        //weigh by my balance (dimension HC*10^18)\n', '        uint256 basicPoints = balances[_account] * newRakePoints;\n', '        //still positive\n', '        //normalize to dimension HC by moving comma left by 18 places\n', '        return (basicPoints) / pointMultiplier;\n', '    }\n', '    /**\n', '    END Rake modifier updateAccount\n', '    */\n', '\n', '    // contest management functions\n', '\n', '    modifier enforceRake(address _contest, uint256 _value){\n', '        //we calculate 1% of the total value, rounded up. division would round down otherwise.\n', '        //explicit brackets illustrate that the calculation only round down when dividing by 100, to avoid an expression\n', '        // like value * (99/100)\n', '        if (contests[_contest]) {\n', '            uint256 toPay = _value - ((_value * 99) / 100);\n', '            bool paid = payRakeInternal(_contest, toPay);\n', '            require(paid);\n', '        }\n', '        _;\n', '    }\n', '\n', '    // all functions require HeroCoin operational state\n', '\n', '\n', '    // registerContest declares a contest to HeroCoin.\n', '    // It must be called from an address that has HeroCoin.\n', '    // This address is recorded as the contract admin.\n', '    function registerContest()\n', '    {\n', '        contests[msg.sender] = true;\n', '        ContestAnnouncement(msg.sender);\n', '    }\n', '}']
