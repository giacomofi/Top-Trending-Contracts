['pragma solidity ^ 0.4.15;\n', '/**\n', '*contract name : GodzSwapGodzEtherCompliance\n', '*purpose : be the smart contract for compliance of the greater than usd5000\n', '*/\n', 'contract GodzSwapGodzEtherCompliance{\n', '    //address of the owner of the contract\n', '    address public owner;\n', '    \n', '    /*structure for store the sale*/\n', '    struct GodzBuyAccounts\n', '    {\n', '        uint256 amount;/*amount sent*/\n', '        address account;/*account that sent*/\n', '        uint sendGodz;/*if send the godz back*/\n', '    }\n', '\n', '    /*mapping of the acounts that send more than usd5000*/\n', '    mapping(uint=>GodzBuyAccounts) public accountsHolding;\n', '    \n', '    /*index of the account information*/\n', '    uint public indexAccount = 0;\n', '\n', '    /*account information*/\n', '    address public swapContract;/*address of the swap contract*/\n', '\n', '\n', '    /*function name : GodzSwapGodzEtherCompliance*/\n', '    /*purpose : be the constructor and the setter of the owner*/\n', '    /*goal : to set the owner of the contract*/    \n', '    function GodzSwapGodzEtherCompliance()\n', '    {\n', '        /*sets the owner of the contract than compliance with the greater than usd5000 maximiun*/\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /*function name : setHolderInformation*/\n', '    /*purpose : be the setter of the swap contract and wallet holder*/\n', '    /*goal : to set de swap contract address and the wallet holder address*/    \n', '    function setHolderInformation(address _swapContract)\n', '    {    \n', '        /*if the owner is setting the information of the holder and the swap*/\n', '        if (msg.sender==owner)\n', '        {\n', '            /*address of the swap contract*/\n', '            swapContract = _swapContract;\n', '        }\n', '    }\n', '\n', '    /*function name : SaveAccountBuyingGodz*/\n', '    /*purpose : be the safe function that map the account that send it*/\n', '    /*goal : to store the account information*/\n', '    function SaveAccountBuyingGodz(address account, uint256 amount) public returns (bool success) \n', '    {\n', '        /*if the sender is the swapContract*/\n', '        if (msg.sender==swapContract)\n', '        {\n', '            /*increment the index*/\n', '            indexAccount += 1;\n', '            /*store the account informacion*/\n', '            accountsHolding[indexAccount].account = account;\n', '            accountsHolding[indexAccount].amount = amount;\n', '            accountsHolding[indexAccount].sendGodz = 0;\n', '            /*transfer the ether to the wallet holder*/\n', '            /*account save was completed*/\n', '            return true;\n', '        }\n', '        else\n', '        {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /*function name : setSendGodz*/\n', '    /*purpose : be the flag update for the compliance account*/\n', '    /*goal : to get the flag on the account*/\n', '    function setSendGodz(uint index) public \n', '    {\n', '        if (owner == msg.sender)\n', '        {\n', '            accountsHolding[index].sendGodz = 1;\n', '        }\n', '    }\n', '\n', '    /*function name : getAccountInformation*/\n', '    /*purpose : be the getter of the information of the account*/\n', '    /*goal : to get the amount and the acount of a compliance account*/\n', '    function getAccountInformation(uint index) public returns (address account, uint256 amount, uint sendGodz)\n', '    {\n', '        /*return the account of a compliance*/\n', '        return (accountsHolding[index].account, accountsHolding[index].amount, accountsHolding[index].sendGodz);\n', '    }\n', '}']
['pragma solidity ^ 0.4.15;\n', '/**\n', '*contract name : GodzSwapGodzEtherCompliance\n', '*purpose : be the smart contract for compliance of the greater than usd5000\n', '*/\n', 'contract GodzSwapGodzEtherCompliance{\n', '    //address of the owner of the contract\n', '    address public owner;\n', '    \n', '    /*structure for store the sale*/\n', '    struct GodzBuyAccounts\n', '    {\n', '        uint256 amount;/*amount sent*/\n', '        address account;/*account that sent*/\n', '        uint sendGodz;/*if send the godz back*/\n', '    }\n', '\n', '    /*mapping of the acounts that send more than usd5000*/\n', '    mapping(uint=>GodzBuyAccounts) public accountsHolding;\n', '    \n', '    /*index of the account information*/\n', '    uint public indexAccount = 0;\n', '\n', '    /*account information*/\n', '    address public swapContract;/*address of the swap contract*/\n', '\n', '\n', '    /*function name : GodzSwapGodzEtherCompliance*/\n', '    /*purpose : be the constructor and the setter of the owner*/\n', '    /*goal : to set the owner of the contract*/    \n', '    function GodzSwapGodzEtherCompliance()\n', '    {\n', '        /*sets the owner of the contract than compliance with the greater than usd5000 maximiun*/\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /*function name : setHolderInformation*/\n', '    /*purpose : be the setter of the swap contract and wallet holder*/\n', '    /*goal : to set de swap contract address and the wallet holder address*/    \n', '    function setHolderInformation(address _swapContract)\n', '    {    \n', '        /*if the owner is setting the information of the holder and the swap*/\n', '        if (msg.sender==owner)\n', '        {\n', '            /*address of the swap contract*/\n', '            swapContract = _swapContract;\n', '        }\n', '    }\n', '\n', '    /*function name : SaveAccountBuyingGodz*/\n', '    /*purpose : be the safe function that map the account that send it*/\n', '    /*goal : to store the account information*/\n', '    function SaveAccountBuyingGodz(address account, uint256 amount) public returns (bool success) \n', '    {\n', '        /*if the sender is the swapContract*/\n', '        if (msg.sender==swapContract)\n', '        {\n', '            /*increment the index*/\n', '            indexAccount += 1;\n', '            /*store the account informacion*/\n', '            accountsHolding[indexAccount].account = account;\n', '            accountsHolding[indexAccount].amount = amount;\n', '            accountsHolding[indexAccount].sendGodz = 0;\n', '            /*transfer the ether to the wallet holder*/\n', '            /*account save was completed*/\n', '            return true;\n', '        }\n', '        else\n', '        {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /*function name : setSendGodz*/\n', '    /*purpose : be the flag update for the compliance account*/\n', '    /*goal : to get the flag on the account*/\n', '    function setSendGodz(uint index) public \n', '    {\n', '        if (owner == msg.sender)\n', '        {\n', '            accountsHolding[index].sendGodz = 1;\n', '        }\n', '    }\n', '\n', '    /*function name : getAccountInformation*/\n', '    /*purpose : be the getter of the information of the account*/\n', '    /*goal : to get the amount and the acount of a compliance account*/\n', '    function getAccountInformation(uint index) public returns (address account, uint256 amount, uint sendGodz)\n', '    {\n', '        /*return the account of a compliance*/\n', '        return (accountsHolding[index].account, accountsHolding[index].amount, accountsHolding[index].sendGodz);\n', '    }\n', '}']
