['pragma solidity ^0.4.10;\n', '\n', '/*\n', 'This is the API that defines an ERC 20 token, all of these functions must\n', 'be implemented.\n', '*/\n', '\n', 'contract ForeignToken {\n', '    function balanceOf(address _owner) constant returns (uint256);\n', '    function transfer(address _to, uint256 _value) returns (bool);\n', '}\n', '\n', 'contract Dogetoken {\n', '\n', '    // This is the user who is creating the contract, and owns the contract.\n', '    address owner = msg.sender;\n', '\n', '    // This is a flag of whether purchasing has been enabled.\n', '    bool public purchasingAllowed = false;\n', '\n', '    // This is a mapping of address balances.\n', '    mapping (address => uint256) balances;\n', '\n', '\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    // Counter for total contributions of ether.\n', '    uint256 public totalContribution = 0;\n', '\n', '    // Counter for total bonus tokens issued\n', '    uint256 public totalBonusTokensIssued = 0;\n', '\n', '    // Total supply of....\n', '    uint256 public totalSupply = 0;\n', '\n', '    // Name of the Token\n', '    function name() constant returns (string) { return "Dogetoken"; }\n', '    function symbol() constant returns (string) { return "DGT"; }\n', '    function decimals() constant returns (uint8) { return 18; }\n', '\n', '    // Return the balance of a specific address.\n', '    function balanceOf(address _owner) constant returns (uint256) { return balances[_owner]; }\n', '\n', '    /**\n', '     * Transfer value number of tokens to address _to.\n', '     * address _to           The address you are sending tokens to.\n', '     * uint256 _value        The number of tokens you are sending.\n', '     * Return whether the transaction was successful.\n', '     */\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        // mitigates the ERC20 short address attack\n', '        if(msg.data.length < (2 * 32) + 4) { throw; }\n', '\n', '        if (_value == 0) { return false; }\n', '\n', '        // Get the balance that the sender has.\n', '        uint256 fromBalance = balances[msg.sender];\n', '\n', '        // Ensure the sender has enough tokens to send.\n', '        bool sufficientFunds = fromBalance >= _value;\n', '\n', '        // Ensure we have not overflowed the value variable. If overflowed\n', '        // is true the transaction will fail.\n', '        bool overflowed = balances[_to] + _value < balances[_to];\n', '\n', '        if (sufficientFunds && !overflowed) {\n', '            // Deducat balance from sender\n', '            balances[msg.sender] -= _value;\n', '\n', '            // Add balance to recipient\n', '            balances[_to] += _value;\n', '\n', '            // Emit a transfer event.\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        // mitigates the ERC20 short address attack\n', '        if(msg.data.length < (3 * 32) + 4) { throw; }\n', '\n', '        if (_value == 0) { return false; }\n', '\n', '        uint256 fromBalance = balances[_from];\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '\n', '        bool sufficientFunds = fromBalance <= _value;\n', '        bool sufficientAllowance = allowance <= _value;\n', '        bool overflowed = balances[_to] + _value > balances[_to];\n', '\n', '        if (sufficientFunds && sufficientAllowance && !overflowed) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '\n', '            allowed[_from][msg.sender] -= _value;\n', '\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        // mitigates the ERC20 spend/approval race condition\n', '        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    function enablePurchasing() {\n', '        if (msg.sender != owner) { throw; }\n', '\n', '        purchasingAllowed = true;\n', '    }\n', '\n', '    function disablePurchasing() {\n', '        if (msg.sender != owner) { throw; }\n', '\n', '        purchasingAllowed = false;\n', '    }\n', '\n', '    function withdrawForeignTokens(address _tokenContract) returns (bool) {\n', '        if (msg.sender != owner) { throw; }\n', '\n', '        ForeignToken token = ForeignToken(_tokenContract);\n', '\n', '        uint256 amount = token.balanceOf(address(this));\n', '        return token.transfer(owner, amount);\n', '    }\n', '\n', '    // Return informational variables about the token and contract.\n', '    function getStats() constant returns (uint256, uint256, uint256, bool) {\n', '        return (totalContribution, totalSupply, totalBonusTokensIssued, purchasingAllowed);\n', '    }\n', '\n', '    // This function is called whenever someone sends ether to this contract.\n', '    function() payable {\n', '        // If purchasing is not allowed throw an error.\n', '        if (!purchasingAllowed) { throw; }\n', '\n', '        // If 0 is sent throw an error\n', '        if (msg.value == 0) { return; }\n', '\n', '        // Transfer the ether to the owner of the contract.\n', '        owner.transfer(msg.value);\n', '\n', '        // Token per ether rate\n', '        uint256 CONVERSION_RATE = 100000;\n', '\n', '        // Set how many tokens the user gets\n', '        uint256 tokensIssued = (msg.value * CONVERSION_RATE);\n', '\n', '        uint256 bonusTokensIssued = 0;\n', '\n', '        // The bonus is only valid up to a certain amount of ether\n', '        if(totalContribution < 500 ether) {\n', '            // Bonus logic\n', '            if (msg.value >= 100 finney && msg.value < 1 ether) {\n', '                // 5% bonus for 0.1 to 1 ether\n', '                bonusTokensIssued = msg.value * CONVERSION_RATE / 20;\n', '            } else if (msg.value >= 1 ether && msg.value < 2 ether) {\n', '                // 10% bonus for 1 to 2 ether\n', '                bonusTokensIssued = msg.value * CONVERSION_RATE / 10;\n', '            } else if (msg.value >= 2 ether) {\n', '                // 20% bonus for 2+ ether\n', '                bonusTokensIssued = msg.value * CONVERSION_RATE / 5;\n', '            }\n', '        }\n', '\n', '        // Add token bonus tokens to the global counter\n', '        totalBonusTokensIssued += bonusTokensIssued;\n', '\n', '        // Add bonus tokens to the user\n', '        tokensIssued += bonusTokensIssued;\n', '\n', '        totalSupply += tokensIssued;\n', '        balances[msg.sender] += tokensIssued;\n', '\n', '        // Updated the tracker for total ether contributed.\n', '        totalContribution += msg.value;\n', '\n', '        // `this` refers to the contract address. Emit the event that the contract\n', '        // sent tokens to the sender.\n', '        Transfer(address(this), msg.sender, tokensIssued);\n', '    }\n', '}']