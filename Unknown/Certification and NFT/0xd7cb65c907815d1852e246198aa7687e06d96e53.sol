['pragma solidity ^0.4.10;\n', '\n', '\n', '// title Migration Agent interface\n', 'contract MigrationAgent {\n', '    function migrateFrom(address _from, uint256 _value);\n', '}\n', '\n', '// title preICO honestis networkToken (H.N Token) - crowdfunding code for preICO honestis networkToken PreICO\n', 'contract HonestisNetworkETHpreICO {\n', '    string public constant name = "preICO seed for Honestis.Network on ETH";\n', '    string public constant symbol = "HNT";\n', '    uint8 public constant decimals = 18;  // 18 decimal places, the same as ETC/ETH.\n', '\n', '    uint256 public constant tokenCreationRate = 1000;\n', '    // The funding cap in weis.\n', '    uint256 public constant tokenCreationCap = 66200 ether * tokenCreationRate;\n', '    uint256 public constant tokenCreationMinConversion = 1 ether * tokenCreationRate;\n', '\tuint256 public constant tokenSEEDcap = 2.3 * 125 * 1 ether * tokenCreationRate;\n', '\tuint256 public constant token3MstepCAP = tokenSEEDcap + 10000 * 1 ether * tokenCreationRate;\n', '\tuint256 public constant token10MstepCAP = token3MstepCAP + 22000 * 1 ether * tokenCreationRate;\n', '\n', '  // weeks and hours in block distance on ETH\n', '   uint256 public constant oneweek = 36000;\n', '   uint256 public constant oneday = 5136;\n', '    uint256 public constant onehour = 214;\n', '\t\n', '    uint256 public fundingStartBlock = 3962754 + 4*onehour;\n', '\t//  weeks\n', '    uint256 public fundingEndBlock = fundingStartBlock+14*oneweek;\n', '\n', '\t\n', '    // The flag indicates if the H.N Token contract is in Funding state.\n', '    bool public funding = true;\n', '\tbool public refundstate = false;\n', '\tbool public migratestate = false;\n', '\t\n', '    // Receives ETH and its own H.N Token endowment.\n', '    address public honestisFort = 0xF03e8E4cbb2865fCc5a02B61cFCCf86E9aE021b5;\n', '\taddress public honestisFortbackup =0x13746D9489F7e56f6d2d8676086577297FC0B492;\n', '    // Has control over token migration to next version of token.\n', '    address public migrationMaster = 0x8585D5A25b1FA2A0E6c3BcfC098195bac9789BE2;\n', '\n', '   \n', '    // The current total token supply.\n', '    uint256 totalTokens;\n', '\tuint256 bonusCreationRate;\n', '    mapping (address => uint256) balances;\n', '    mapping (address => uint256) balancesRAW;\n', '\n', '\n', '\taddress public migrationAgent=0x8585D5A25b1FA2A0E6c3BcfC098195bac9789BE2;\n', '    uint256 public totalMigrated;\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Migrate(address indexed _from, address indexed _to, uint256 _value);\n', '    event Refund(address indexed _from, uint256 _value);\n', '\n', '    function HonestisNetworkETHpreICO() {\n', '\n', '        if (honestisFort == 0) throw;\n', '        if (migrationMaster == 0) throw;\n', '        if (fundingEndBlock   <= fundingStartBlock) throw;\n', '\n', '    }\n', '\n', '    // notice Transfer `_value` H.N Token tokens from sender&#39;s account\n', '    // `msg.sender` to provided account address `_to`.\n', '    // notice This function is disabled during the funding.\n', '    // dev Required state: Operational\n', '    // param _to The address of the tokens recipient\n', '    // param _value The amount of token to be transferred\n', '    // return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool) {\n', '\n', '// freez till end of crowdfunding + 2 about weeks\n', 'if ((msg.sender!=migrationMaster)&&(block.number < fundingEndBlock + 73000)) throw;\n', '\n', '        var senderBalance = balances[msg.sender];\n', '        if (senderBalance >= _value && _value > 0) {\n', '            senderBalance -= _value;\n', '            balances[msg.sender] = senderBalance;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function totalSupply() external constant returns (uint256) {\n', '        return totalTokens;\n', '    }\n', '\n', '    function balanceOf(address _owner) external constant returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '\tfunction() payable {\n', '    if(funding){\n', '   createHNtokens(msg.sender);\n', '   }\n', '}\n', '\n', '     // Crowdfunding:\n', '\n', '        function createHNtokens(address holder) payable {\n', '\n', '        if (!funding) throw;\n', '        if (block.number < fundingStartBlock) throw;\n', '        if (block.number > fundingEndBlock) throw;\n', '\n', '        // Do not allow creating 0 or more than the cap tokens.\n', '        if (msg.value == 0) throw;\n', '\t\t// check the maximum token creation cap\n', '        if (msg.value > (tokenCreationCap - totalTokens) / tokenCreationRate)\n', '          throw;\n', '\t\t\n', '\t\t//bonus structure\n', '\t\tbonusCreationRate = tokenCreationRate;\n', '\t\t// early birds bonuses :\n', '        if (totalTokens < tokenSEEDcap) bonusCreationRate = tokenCreationRate +500;\n', '\t\n', '\t\t//after preICO period\n', '\t\tif (block.number > (fundingStartBlock + 6*oneweek +2*oneday)) {\n', '\t\t\tbonusCreationRate = tokenCreationRate - 200;//min 800\n', '\t\tif\t(totalTokens > token3MstepCAP){bonusCreationRate = tokenCreationRate - 300;}//min 500\n', '\t\tif\t(totalTokens > token10MstepCAP){bonusCreationRate = tokenCreationRate - 250;} //min 250\n', '\t\t}\n', '\t//time bonuses\n', '\t// 1 block = 16-16.8 s\n', '\t\tif (block.number < (fundingStartBlock + 5*oneweek )){\n', '\t\tbonusCreationRate = bonusCreationRate + (fundingStartBlock+5*oneweek-block.number)/(5*oneweek)*800;\n', '\t\t}\n', '\t\t\n', '\n', '\t var numTokensRAW = msg.value * tokenCreationRate;\n', '\n', '        var numTokens = msg.value * bonusCreationRate;\n', '        totalTokens += numTokens;\n', '\n', '        // Assign new tokens to the sender\n', '        balances[holder] += numTokens;\n', '        balancesRAW[holder] += numTokensRAW;\n', '        // Log token creation event\n', '        Transfer(0, holder, numTokens);\n', '\t\t\n', '\t\t// Create additional H.N Token for the community and developers around 14%\n', '        uint256 percentOfTotal = 14;\n', '        uint256 additionalTokens = \tnumTokens * percentOfTotal / (100);\n', '\n', '        totalTokens += additionalTokens;\n', '\n', '        balances[migrationMaster] += additionalTokens;\n', '        Transfer(0, migrationMaster, additionalTokens);\n', '\t\n', '\t}\n', '\n', '    function Partial23Transfer() external {\n', '         honestisFort.transfer(this.balance - 1 ether);\n', '    }\n', '\t\n', '    function Partial23Send() external {\n', '\t      if (msg.sender != honestisFort) throw;\n', '        honestisFort.send(this.balance - 1 ether);\n', '\t}\n', '\tfunction turnrefund() external {\n', '\t      if (msg.sender != honestisFort) throw;\n', '\trefundstate=!refundstate;\n', '        }\n', '    function turnmigrate() external {\n', '\t      if (msg.sender != migrationMaster) throw;\n', '\tmigratestate=!migratestate;\n', '}\n', '\n', '    // notice Finalize crowdfunding clossing funding options\n', '\t\n', 'function finalizebackup() external {\n', '        if (block.number <= fundingEndBlock+oneweek) throw;\n', '        // Switch to Operational state. This is the only place this can happen.\n', '        funding = false;\t\t\n', '        // Transfer ETH to the preICO honestis network Fort address.\n', '        if (!honestisFortbackup.send(this.balance)) throw;\n', '    }\n', '    function migrate(uint256 _value) external {\n', '        // Abort if not in Operational Migration state.\n', '        if (migratestate) throw;\n', '\n', '\n', '        // Validate input value.\n', '        if (_value == 0) throw;\n', '        if (_value > balances[msg.sender]) throw;\n', '\n', '        balances[msg.sender] -= _value;\n', '        totalTokens -= _value;\n', '        totalMigrated += _value;\n', '        MigrationAgent(migrationAgent).migrateFrom(msg.sender, _value);\n', '        Migrate(msg.sender, migrationAgent, _value);\n', '    }\n', '\t\n', 'function refundTRA() external {\n', '        // Abort if not in Funding Failure state.\n', '        if (!refundstate) throw;\n', '\n', '        var HNTokenValue = balances[msg.sender];\n', '        var HNTokenValueRAW = balancesRAW[msg.sender];\n', '        if (HNTokenValueRAW == 0) throw;\n', '        balancesRAW[msg.sender] = 0;\n', '        totalTokens -= HNTokenValue;\n', '        var ETHValue = HNTokenValueRAW / tokenCreationRate;\n', '        Refund(msg.sender, ETHValue);\n', '        msg.sender.transfer(ETHValue);\n', '}\n', '\n', 'function preICOregulations() external returns(string wow) {\n', '\treturn &#39;Regulations of preICO are present at website  honestis.network and by using this smartcontract you commit that you accept and will follow those rules&#39;;\n', '}\n', '}']
['pragma solidity ^0.4.10;\n', '\n', '\n', '// title Migration Agent interface\n', 'contract MigrationAgent {\n', '    function migrateFrom(address _from, uint256 _value);\n', '}\n', '\n', '// title preICO honestis networkToken (H.N Token) - crowdfunding code for preICO honestis networkToken PreICO\n', 'contract HonestisNetworkETHpreICO {\n', '    string public constant name = "preICO seed for Honestis.Network on ETH";\n', '    string public constant symbol = "HNT";\n', '    uint8 public constant decimals = 18;  // 18 decimal places, the same as ETC/ETH.\n', '\n', '    uint256 public constant tokenCreationRate = 1000;\n', '    // The funding cap in weis.\n', '    uint256 public constant tokenCreationCap = 66200 ether * tokenCreationRate;\n', '    uint256 public constant tokenCreationMinConversion = 1 ether * tokenCreationRate;\n', '\tuint256 public constant tokenSEEDcap = 2.3 * 125 * 1 ether * tokenCreationRate;\n', '\tuint256 public constant token3MstepCAP = tokenSEEDcap + 10000 * 1 ether * tokenCreationRate;\n', '\tuint256 public constant token10MstepCAP = token3MstepCAP + 22000 * 1 ether * tokenCreationRate;\n', '\n', '  // weeks and hours in block distance on ETH\n', '   uint256 public constant oneweek = 36000;\n', '   uint256 public constant oneday = 5136;\n', '    uint256 public constant onehour = 214;\n', '\t\n', '    uint256 public fundingStartBlock = 3962754 + 4*onehour;\n', '\t//  weeks\n', '    uint256 public fundingEndBlock = fundingStartBlock+14*oneweek;\n', '\n', '\t\n', '    // The flag indicates if the H.N Token contract is in Funding state.\n', '    bool public funding = true;\n', '\tbool public refundstate = false;\n', '\tbool public migratestate = false;\n', '\t\n', '    // Receives ETH and its own H.N Token endowment.\n', '    address public honestisFort = 0xF03e8E4cbb2865fCc5a02B61cFCCf86E9aE021b5;\n', '\taddress public honestisFortbackup =0x13746D9489F7e56f6d2d8676086577297FC0B492;\n', '    // Has control over token migration to next version of token.\n', '    address public migrationMaster = 0x8585D5A25b1FA2A0E6c3BcfC098195bac9789BE2;\n', '\n', '   \n', '    // The current total token supply.\n', '    uint256 totalTokens;\n', '\tuint256 bonusCreationRate;\n', '    mapping (address => uint256) balances;\n', '    mapping (address => uint256) balancesRAW;\n', '\n', '\n', '\taddress public migrationAgent=0x8585D5A25b1FA2A0E6c3BcfC098195bac9789BE2;\n', '    uint256 public totalMigrated;\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Migrate(address indexed _from, address indexed _to, uint256 _value);\n', '    event Refund(address indexed _from, uint256 _value);\n', '\n', '    function HonestisNetworkETHpreICO() {\n', '\n', '        if (honestisFort == 0) throw;\n', '        if (migrationMaster == 0) throw;\n', '        if (fundingEndBlock   <= fundingStartBlock) throw;\n', '\n', '    }\n', '\n', "    // notice Transfer `_value` H.N Token tokens from sender's account\n", '    // `msg.sender` to provided account address `_to`.\n', '    // notice This function is disabled during the funding.\n', '    // dev Required state: Operational\n', '    // param _to The address of the tokens recipient\n', '    // param _value The amount of token to be transferred\n', '    // return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool) {\n', '\n', '// freez till end of crowdfunding + 2 about weeks\n', 'if ((msg.sender!=migrationMaster)&&(block.number < fundingEndBlock + 73000)) throw;\n', '\n', '        var senderBalance = balances[msg.sender];\n', '        if (senderBalance >= _value && _value > 0) {\n', '            senderBalance -= _value;\n', '            balances[msg.sender] = senderBalance;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function totalSupply() external constant returns (uint256) {\n', '        return totalTokens;\n', '    }\n', '\n', '    function balanceOf(address _owner) external constant returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '\tfunction() payable {\n', '    if(funding){\n', '   createHNtokens(msg.sender);\n', '   }\n', '}\n', '\n', '     // Crowdfunding:\n', '\n', '        function createHNtokens(address holder) payable {\n', '\n', '        if (!funding) throw;\n', '        if (block.number < fundingStartBlock) throw;\n', '        if (block.number > fundingEndBlock) throw;\n', '\n', '        // Do not allow creating 0 or more than the cap tokens.\n', '        if (msg.value == 0) throw;\n', '\t\t// check the maximum token creation cap\n', '        if (msg.value > (tokenCreationCap - totalTokens) / tokenCreationRate)\n', '          throw;\n', '\t\t\n', '\t\t//bonus structure\n', '\t\tbonusCreationRate = tokenCreationRate;\n', '\t\t// early birds bonuses :\n', '        if (totalTokens < tokenSEEDcap) bonusCreationRate = tokenCreationRate +500;\n', '\t\n', '\t\t//after preICO period\n', '\t\tif (block.number > (fundingStartBlock + 6*oneweek +2*oneday)) {\n', '\t\t\tbonusCreationRate = tokenCreationRate - 200;//min 800\n', '\t\tif\t(totalTokens > token3MstepCAP){bonusCreationRate = tokenCreationRate - 300;}//min 500\n', '\t\tif\t(totalTokens > token10MstepCAP){bonusCreationRate = tokenCreationRate - 250;} //min 250\n', '\t\t}\n', '\t//time bonuses\n', '\t// 1 block = 16-16.8 s\n', '\t\tif (block.number < (fundingStartBlock + 5*oneweek )){\n', '\t\tbonusCreationRate = bonusCreationRate + (fundingStartBlock+5*oneweek-block.number)/(5*oneweek)*800;\n', '\t\t}\n', '\t\t\n', '\n', '\t var numTokensRAW = msg.value * tokenCreationRate;\n', '\n', '        var numTokens = msg.value * bonusCreationRate;\n', '        totalTokens += numTokens;\n', '\n', '        // Assign new tokens to the sender\n', '        balances[holder] += numTokens;\n', '        balancesRAW[holder] += numTokensRAW;\n', '        // Log token creation event\n', '        Transfer(0, holder, numTokens);\n', '\t\t\n', '\t\t// Create additional H.N Token for the community and developers around 14%\n', '        uint256 percentOfTotal = 14;\n', '        uint256 additionalTokens = \tnumTokens * percentOfTotal / (100);\n', '\n', '        totalTokens += additionalTokens;\n', '\n', '        balances[migrationMaster] += additionalTokens;\n', '        Transfer(0, migrationMaster, additionalTokens);\n', '\t\n', '\t}\n', '\n', '    function Partial23Transfer() external {\n', '         honestisFort.transfer(this.balance - 1 ether);\n', '    }\n', '\t\n', '    function Partial23Send() external {\n', '\t      if (msg.sender != honestisFort) throw;\n', '        honestisFort.send(this.balance - 1 ether);\n', '\t}\n', '\tfunction turnrefund() external {\n', '\t      if (msg.sender != honestisFort) throw;\n', '\trefundstate=!refundstate;\n', '        }\n', '    function turnmigrate() external {\n', '\t      if (msg.sender != migrationMaster) throw;\n', '\tmigratestate=!migratestate;\n', '}\n', '\n', '    // notice Finalize crowdfunding clossing funding options\n', '\t\n', 'function finalizebackup() external {\n', '        if (block.number <= fundingEndBlock+oneweek) throw;\n', '        // Switch to Operational state. This is the only place this can happen.\n', '        funding = false;\t\t\n', '        // Transfer ETH to the preICO honestis network Fort address.\n', '        if (!honestisFortbackup.send(this.balance)) throw;\n', '    }\n', '    function migrate(uint256 _value) external {\n', '        // Abort if not in Operational Migration state.\n', '        if (migratestate) throw;\n', '\n', '\n', '        // Validate input value.\n', '        if (_value == 0) throw;\n', '        if (_value > balances[msg.sender]) throw;\n', '\n', '        balances[msg.sender] -= _value;\n', '        totalTokens -= _value;\n', '        totalMigrated += _value;\n', '        MigrationAgent(migrationAgent).migrateFrom(msg.sender, _value);\n', '        Migrate(msg.sender, migrationAgent, _value);\n', '    }\n', '\t\n', 'function refundTRA() external {\n', '        // Abort if not in Funding Failure state.\n', '        if (!refundstate) throw;\n', '\n', '        var HNTokenValue = balances[msg.sender];\n', '        var HNTokenValueRAW = balancesRAW[msg.sender];\n', '        if (HNTokenValueRAW == 0) throw;\n', '        balancesRAW[msg.sender] = 0;\n', '        totalTokens -= HNTokenValue;\n', '        var ETHValue = HNTokenValueRAW / tokenCreationRate;\n', '        Refund(msg.sender, ETHValue);\n', '        msg.sender.transfer(ETHValue);\n', '}\n', '\n', 'function preICOregulations() external returns(string wow) {\n', "\treturn 'Regulations of preICO are present at website  honestis.network and by using this smartcontract you commit that you accept and will follow those rules';\n", '}\n', '}']
