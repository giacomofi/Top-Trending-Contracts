['pragma solidity^0.4.17;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable{\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', 'contract VuePayTokenSale is StandardToken, Ownable {\n', '\tusing SafeMath for uint256;\n', '\t// Events\n', '\tevent CreatedVUP(address indexed _creator, uint256 _amountOfVUP);\n', '\tevent VUPRefundedForWei(address indexed _refunder, uint256 _amountOfWei);\n', '\tevent print(uint256 vup);\n', '\t// Token data\n', '\tstring public constant name = "VuePay Token";\n', '\tstring public constant symbol = "VUP";\n', '\tuint256 public constant decimals = 18;  // Since our decimals equals the number of wei per ether, we needn&#39;t multiply sent values when converting between VUP and ETH.\n', '\tstring public version = "1.0";\n', '\t\n', '\t// Addresses and contracts\n', '\taddress public executor;\n', '\t//Vuepay Multisig Wallet\n', '\taddress public vuePayETHDestination=0x8B8698DEe100FC5F561848D0E57E94502Bd9318b;\n', '\t//Vuepay Development activities Wallet\n', '\taddress public constant devVUPDestination=0x31403fA55aEa2065bBDd2778bFEd966014ab0081;\n', '\t//VuePay Core Team reserve Wallet\n', '\taddress public constant coreVUPDestination=0x22d310194b5ac5086bDacb2b0f36D8f0a5971b23;\n', '\t//VuePay Advisory and Promotions (PR/Marketing/Media etcc.) wallet\n', '\taddress public constant advisoryVUPDestination=0x991ABE74a1AC3d903dA479Ca9fede3d0954d430B;\n', '\t//VuePay User DEvelopment Fund Wallet\n', '\taddress public constant udfVUPDestination=0xf4307C073451b80A0BaD1E099fD2B7f0fe38b7e9;\n', '\t//Vuepay Cofounder Wallet\n', '\taddress public constant cofounderVUPDestination=0x863B2217E80e6C6192f63D3716c0cC7711Fad5b4;\n', '\t//VuePay Unsold Tokens wallet\n', '\taddress public constant unsoldVUPDestination=0x5076084a3377ecDF8AD5cD0f26A21bA848DdF435;\n', '\t//Total VuePay Sold\n', '\tuint256 public totalVUP;\n', '\t\n', '\t// Sale data\n', '\tbool public saleHasEnded;\n', '\tbool public minCapReached;\n', '\tbool public preSaleEnded;\n', '\tbool public allowRefund;\n', '\tmapping (address => uint256) public ETHContributed;\n', '\tuint256 public totalETHRaised;\n', '\tuint256 public preSaleStartBlock;\n', '\tuint256 public preSaleEndBlock;\n', '\tuint256 public icoEndBlock;\n', '\t\n', '    uint public constant coldStorageYears = 10 years;\n', '    uint public coreTeamUnlockedAt;\n', '    uint public unsoldUnlockedAt;\n', '    uint256 coreTeamShare;\n', '    uint256 cofounderShare;\n', '    uint256 advisoryTeamShare;\n', '    \n', '\t// Calculate the VUP to ETH rate for the current time period of the sale\n', '\tuint256 curTokenRate = VUP_PER_ETH_BASE_RATE;\n', '\tuint256 public constant INITIAL_VUP_TOKEN_SUPPLY =1000000000e18;\n', '\tuint256 public constant VUP_TOKEN_SUPPLY_TIER1 =150000000e18;\n', '    uint256 public constant VUP_TOKEN_SUPPLY_TIER2 =270000000e18;\n', '\tuint256 public constant VUP_TOKEN_SUPPLY_TIER3 =380000000e18;\n', '\tuint256 public constant VUP_TOKEN_SUPPLY_TIER4 =400000000e18;\n', '\t\n', '\tuint256 public constant PRESALE_ICO_PORTION =400000000e18;  // Total for sale in Pre Sale and ICO In percentage\n', '\tuint256 public constant ADVISORY_TEAM_PORTION =50000000e18;  // Total Advisory share In percentage\n', '\tuint256 public constant CORE_TEAM_PORTION =50000000e18;  // Total core Team share  percentage\n', '\tuint256 public constant DEV_TEAM_PORTION =50000000e18;  // Total dev team share In percentage\n', '\tuint256 public constant CO_FOUNDER_PORTION = 350000000e18;  // Total cofounder share In percentage\n', '\tuint256 public constant UDF_PORTION =100000000e18;  // Total user deve fund share In percentage\n', '\t\n', '\tuint256 public constant VUP_PER_ETH_BASE_RATE = 2000;  // 2000 VUP = 1 ETH during normal part of token sale\n', '\tuint256 public constant VUP_PER_ETH_PRE_SALE_RATE = 3000; // 3000 VUP @ 50%  discount in pre sale\n', '\t\n', '\tuint256 public constant VUP_PER_ETH_ICO_TIER2_RATE = 2500; // 2500 VUP @ 25% discount\n', '\tuint256 public constant VUP_PER_ETH_ICO_TIER3_RATE = 2250;// 2250 VUP @ 12.5% discount\n', '\t\n', '\t\n', '\tfunction VuePayTokenSale () public payable\n', '\t{\n', '\n', '\t    totalSupply = INITIAL_VUP_TOKEN_SUPPLY;\n', '\n', '\t\t//Start Pre-sale approx on the 6th october 8:00 GMT\n', '\t    preSaleStartBlock=4340582;\n', '\t    //preSaleStartBlock=block.number;\n', '\t    preSaleEndBlock = preSaleStartBlock + 37800;  // Equivalent to 14 days later, assuming 32 second blocks\n', '\t    icoEndBlock = preSaleEndBlock + 81000;  // Equivalent to 30 days , assuming 32 second blocks\n', '\t\texecutor = msg.sender;\n', '\t\tsaleHasEnded = false;\n', '\t\tminCapReached = false;\n', '\t\tallowRefund = false;\n', '\t\tadvisoryTeamShare = ADVISORY_TEAM_PORTION;\n', '\t\ttotalETHRaised = 0;\n', '\t\ttotalVUP=0;\n', '\n', '\t}\n', '\n', '\tfunction () payable public {\n', '\t\t\n', '\t\t//minimum .05 Ether required.\n', '\t\trequire(msg.value >= .05 ether);\n', '\t\t// If sale is not active, do not create VUP\n', '\t\trequire(!saleHasEnded);\n', '\t\t//Requires block to be >= Pre-Sale start block \n', '\t\trequire(block.number >= preSaleStartBlock);\n', '\t\t//Requires block.number to be less than icoEndBlock number\n', '\t\trequire(block.number < icoEndBlock);\n', '\t\t//Has the Pre-Sale ended, after 14 days, Pre-Sale ends.\n', '\t\tif (block.number > preSaleEndBlock){\n', '\t\t    preSaleEnded=true;\n', '\t\t}\n', '\t\t// Do not do anything if the amount of ether sent is 0\n', '\t\trequire(msg.value!=0);\n', '\n', '\t\tuint256 newEtherBalance = totalETHRaised.add(msg.value);\n', '\t\t//Get the appropriate rate which applies\n', '\t\tgetCurrentVUPRate();\n', '\t\t// Calculate the amount of VUP being purchase\n', '\t\t\n', '\t\tuint256 amountOfVUP = msg.value.mul(curTokenRate);\n', '\t\n', '        //Accrue VUP tokens\n', '\t\ttotalVUP=totalVUP.add(amountOfVUP);\n', '\t    // if all tokens sold out , sale ends.\n', '\t\trequire(totalVUP<= PRESALE_ICO_PORTION);\n', '\t\t\n', '\t\t// Ensure that the transaction is safe\n', '\t\tuint256 totalSupplySafe = totalSupply.sub(amountOfVUP);\n', '\t\tuint256 balanceSafe = balances[msg.sender].add(amountOfVUP);\n', '\t\tuint256 contributedSafe = ETHContributed[msg.sender].add(msg.value);\n', '\t\t\n', '\t\t// Update individual and total balances\n', '\t\ttotalSupply = totalSupplySafe;\n', '\t\tbalances[msg.sender] = balanceSafe;\n', '\n', '\t\ttotalETHRaised = newEtherBalance;\n', '\t\tETHContributed[msg.sender] = contributedSafe;\n', '\n', '\t\tCreatedVUP(msg.sender, amountOfVUP);\n', '\t}\n', '\t\n', '\tfunction getCurrentVUPRate() internal {\n', '\t        //default to the base rate\n', '\t        curTokenRate = VUP_PER_ETH_BASE_RATE;\n', '\n', '\t        //if VUP sold < 100 mill and still in presale, use Pre-Sale rate\n', '\t        if ((totalVUP <= VUP_TOKEN_SUPPLY_TIER1) && (!preSaleEnded)) {    \n', '\t\t\t        curTokenRate = VUP_PER_ETH_PRE_SALE_RATE;\n', '\t        }\n', '\t\t    //If VUP Sold < 100 mill and Pre-Sale ended, use Tier2 rate\n', '\t        if ((totalVUP <= VUP_TOKEN_SUPPLY_TIER1) && (preSaleEnded)) {\n', '\t\t\t     curTokenRate = VUP_PER_ETH_ICO_TIER2_RATE;\n', '\t\t    }\n', '\t\t    //if VUP Sold > 100 mill, use Tier 2 rate irrespective of Pre-Sale end or not\n', '\t\t    if (totalVUP >VUP_TOKEN_SUPPLY_TIER1 ) {\n', '\t\t\t    curTokenRate = VUP_PER_ETH_ICO_TIER2_RATE;\n', '\t\t    }\n', '\t\t    //if VUP sold more than 200 mill use Tier3 rate\n', '\t\t    if (totalVUP >VUP_TOKEN_SUPPLY_TIER2 ) {\n', '\t\t\t    curTokenRate = VUP_PER_ETH_ICO_TIER3_RATE;\n', '\t\t        \n', '\t\t    }\n', '            //if VUP sod more than 300mill\n', '\t\t    if (totalVUP >VUP_TOKEN_SUPPLY_TIER3){\n', '\t\t        curTokenRate = VUP_PER_ETH_BASE_RATE;\n', '\t\t    }\n', '\t}\n', '    // Create VUP tokens from the Advisory bucket for marketing, PR, Media where we are \n', '    //paying upfront for these activities in VUP tokens.\n', '    //Clients = Media, PR, Marketing promotion etc.\n', '    function createCustomVUP(address _clientVUPAddress,uint256 _value) public onlyOwner {\n', '\t    //Check the address is valid\n', '\t    require(_clientVUPAddress != address(0x0));\n', '\t\trequire(_value >0);\n', '\t\trequire(advisoryTeamShare>= _value);\n', '\t   \n', '\t  \tuint256 amountOfVUP = _value;\n', '\t  \t//Reduce from advisoryTeamShare\n', '\t    advisoryTeamShare=advisoryTeamShare.sub(amountOfVUP);\n', '        //Accrue VUP tokens\n', '\t\ttotalVUP=totalVUP.add(amountOfVUP);\n', '\t\t//Assign tokens to the client\n', '\t\tuint256 balanceSafe = balances[_clientVUPAddress].add(amountOfVUP);\n', '\t\tbalances[_clientVUPAddress] = balanceSafe;\n', '\t\t//Create VUP Created event\n', '\t\tCreatedVUP(_clientVUPAddress, amountOfVUP);\n', '\t\n', '\t}\n', '    \n', '\tfunction endICO() public onlyOwner{\n', '\t\t// Do not end an already ended sale\n', '\t\trequire(!saleHasEnded);\n', '\t\t// Can&#39;t end a sale that hasn&#39;t hit its minimum cap\n', '\t\trequire(minCapReached);\n', '\t\t\n', '\t\tsaleHasEnded = true;\n', '\n', '\t\t// Calculate and create all team share VUPs\n', '\t\n', '\t    coreTeamShare = CORE_TEAM_PORTION;\n', '\t    uint256 devTeamShare = DEV_TEAM_PORTION;\n', '\t    cofounderShare = CO_FOUNDER_PORTION;\n', '\t    uint256 udfShare = UDF_PORTION;\n', '\t\n', '\t    \n', '\t\tbalances[devVUPDestination] = devTeamShare;\n', '\t\tbalances[advisoryVUPDestination] = advisoryTeamShare;\n', '\t\tbalances[udfVUPDestination] = udfShare;\n', '       \n', '        // Locked time of approximately 9 months before team members are able to redeeem tokens.\n', '        uint nineMonths = 9 * 30 days;\n', '        coreTeamUnlockedAt = now.add(nineMonths);\n', '        // Locked time of approximately 10 years before team members are able to redeeem tokens.\n', '        uint lockTime = coldStorageYears;\n', '        unsoldUnlockedAt = now.add(lockTime);\n', '\n', '\t\tCreatedVUP(devVUPDestination, devTeamShare);\n', '\t\tCreatedVUP(advisoryVUPDestination, advisoryTeamShare);\n', '\t\tCreatedVUP(udfVUPDestination, udfShare);\n', '\n', '\t}\n', '\tfunction unlock() public onlyOwner{\n', '\t   require(saleHasEnded);\n', '       require(now > coreTeamUnlockedAt || now > unsoldUnlockedAt);\n', '       if (now > coreTeamUnlockedAt) {\n', '          balances[coreVUPDestination] = coreTeamShare;\n', '          CreatedVUP(coreVUPDestination, coreTeamShare);\n', '          balances[cofounderVUPDestination] = cofounderShare;\n', '          CreatedVUP(cofounderVUPDestination, cofounderShare);\n', '         \n', '       }\n', '       if (now > unsoldUnlockedAt) {\n', '          uint256 unsoldTokens=PRESALE_ICO_PORTION.sub(totalVUP);\n', '          require(unsoldTokens > 0);\n', '          balances[unsoldVUPDestination] = unsoldTokens;\n', '          CreatedVUP(coreVUPDestination, unsoldTokens);\n', '         }\n', '    }\n', '\n', '\t// Allows VuePay to withdraw funds\n', '\tfunction withdrawFunds() public onlyOwner {\n', '\t\t// Disallow withdraw if the minimum hasn&#39;t been reached\n', '\t\trequire(minCapReached);\n', '\t\trequire(this.balance > 0);\n', '\t\tif(this.balance > 0) {\n', '\t\t\tvuePayETHDestination.transfer(this.balance);\n', '\t\t}\n', '\t}\n', '\n', '\t// Signals that the sale has reached its minimum funding goal\n', '\tfunction triggerMinCap() public onlyOwner {\n', '\t\tminCapReached = true;\n', '\t}\n', '\n', '\t// Opens refunding.\n', '\tfunction triggerRefund() public onlyOwner{\n', '\t\t// No refunds if the sale was successful\n', '\t\trequire(!saleHasEnded);\n', '\t\t// No refunds if minimum cap is hit\n', '\t\trequire(!minCapReached);\n', '\t\t// No refunds if the sale is still progressing\n', '\t    require(block.number >icoEndBlock);\n', '\t\trequire(msg.sender == executor);\n', '\t\tallowRefund = true;\n', '\t}\n', '\n', '\tfunction claimRefund() external {\n', '\t\t// No refunds until it is approved\n', '\t\trequire(allowRefund);\n', '\t\t// Nothing to refund\n', '\t\trequire(ETHContributed[msg.sender]!=0);\n', '\n', '\t\t// Do the refund.\n', '\t\tuint256 etherAmount = ETHContributed[msg.sender];\n', '\t\tETHContributed[msg.sender] = 0;\n', '\n', '\t\tVUPRefundedForWei(msg.sender, etherAmount);\n', '\t\tmsg.sender.transfer(etherAmount);\n', '\t}\n', '    //Allow changing the Vuepay MultiSig wallet incase of emergency\n', '\tfunction changeVuePayETHDestinationAddress(address _newAddress) public onlyOwner {\n', '\t\tvuePayETHDestination = _newAddress;\n', '\t}\n', '\t\n', '\tfunction transfer(address _to, uint _value) public returns (bool) {\n', '\t\t// Cannot transfer unless the minimum cap is hit\n', '\t\trequire(minCapReached);\n', '\t\treturn super.transfer(_to, _value);\n', '\t}\n', '\t\n', '\tfunction transferFrom(address _from, address _to, uint _value) public returns (bool) {\n', '\t\t// Cannot transfer unless the minimum cap is hit\n', '\t\trequire(minCapReached);\n', '\t\treturn super.transferFrom(_from, _to, _value);\n', '\t}\n', '\n', '\t\n', '}']
['pragma solidity^0.4.17;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable{\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', 'contract VuePayTokenSale is StandardToken, Ownable {\n', '\tusing SafeMath for uint256;\n', '\t// Events\n', '\tevent CreatedVUP(address indexed _creator, uint256 _amountOfVUP);\n', '\tevent VUPRefundedForWei(address indexed _refunder, uint256 _amountOfWei);\n', '\tevent print(uint256 vup);\n', '\t// Token data\n', '\tstring public constant name = "VuePay Token";\n', '\tstring public constant symbol = "VUP";\n', "\tuint256 public constant decimals = 18;  // Since our decimals equals the number of wei per ether, we needn't multiply sent values when converting between VUP and ETH.\n", '\tstring public version = "1.0";\n', '\t\n', '\t// Addresses and contracts\n', '\taddress public executor;\n', '\t//Vuepay Multisig Wallet\n', '\taddress public vuePayETHDestination=0x8B8698DEe100FC5F561848D0E57E94502Bd9318b;\n', '\t//Vuepay Development activities Wallet\n', '\taddress public constant devVUPDestination=0x31403fA55aEa2065bBDd2778bFEd966014ab0081;\n', '\t//VuePay Core Team reserve Wallet\n', '\taddress public constant coreVUPDestination=0x22d310194b5ac5086bDacb2b0f36D8f0a5971b23;\n', '\t//VuePay Advisory and Promotions (PR/Marketing/Media etcc.) wallet\n', '\taddress public constant advisoryVUPDestination=0x991ABE74a1AC3d903dA479Ca9fede3d0954d430B;\n', '\t//VuePay User DEvelopment Fund Wallet\n', '\taddress public constant udfVUPDestination=0xf4307C073451b80A0BaD1E099fD2B7f0fe38b7e9;\n', '\t//Vuepay Cofounder Wallet\n', '\taddress public constant cofounderVUPDestination=0x863B2217E80e6C6192f63D3716c0cC7711Fad5b4;\n', '\t//VuePay Unsold Tokens wallet\n', '\taddress public constant unsoldVUPDestination=0x5076084a3377ecDF8AD5cD0f26A21bA848DdF435;\n', '\t//Total VuePay Sold\n', '\tuint256 public totalVUP;\n', '\t\n', '\t// Sale data\n', '\tbool public saleHasEnded;\n', '\tbool public minCapReached;\n', '\tbool public preSaleEnded;\n', '\tbool public allowRefund;\n', '\tmapping (address => uint256) public ETHContributed;\n', '\tuint256 public totalETHRaised;\n', '\tuint256 public preSaleStartBlock;\n', '\tuint256 public preSaleEndBlock;\n', '\tuint256 public icoEndBlock;\n', '\t\n', '    uint public constant coldStorageYears = 10 years;\n', '    uint public coreTeamUnlockedAt;\n', '    uint public unsoldUnlockedAt;\n', '    uint256 coreTeamShare;\n', '    uint256 cofounderShare;\n', '    uint256 advisoryTeamShare;\n', '    \n', '\t// Calculate the VUP to ETH rate for the current time period of the sale\n', '\tuint256 curTokenRate = VUP_PER_ETH_BASE_RATE;\n', '\tuint256 public constant INITIAL_VUP_TOKEN_SUPPLY =1000000000e18;\n', '\tuint256 public constant VUP_TOKEN_SUPPLY_TIER1 =150000000e18;\n', '    uint256 public constant VUP_TOKEN_SUPPLY_TIER2 =270000000e18;\n', '\tuint256 public constant VUP_TOKEN_SUPPLY_TIER3 =380000000e18;\n', '\tuint256 public constant VUP_TOKEN_SUPPLY_TIER4 =400000000e18;\n', '\t\n', '\tuint256 public constant PRESALE_ICO_PORTION =400000000e18;  // Total for sale in Pre Sale and ICO In percentage\n', '\tuint256 public constant ADVISORY_TEAM_PORTION =50000000e18;  // Total Advisory share In percentage\n', '\tuint256 public constant CORE_TEAM_PORTION =50000000e18;  // Total core Team share  percentage\n', '\tuint256 public constant DEV_TEAM_PORTION =50000000e18;  // Total dev team share In percentage\n', '\tuint256 public constant CO_FOUNDER_PORTION = 350000000e18;  // Total cofounder share In percentage\n', '\tuint256 public constant UDF_PORTION =100000000e18;  // Total user deve fund share In percentage\n', '\t\n', '\tuint256 public constant VUP_PER_ETH_BASE_RATE = 2000;  // 2000 VUP = 1 ETH during normal part of token sale\n', '\tuint256 public constant VUP_PER_ETH_PRE_SALE_RATE = 3000; // 3000 VUP @ 50%  discount in pre sale\n', '\t\n', '\tuint256 public constant VUP_PER_ETH_ICO_TIER2_RATE = 2500; // 2500 VUP @ 25% discount\n', '\tuint256 public constant VUP_PER_ETH_ICO_TIER3_RATE = 2250;// 2250 VUP @ 12.5% discount\n', '\t\n', '\t\n', '\tfunction VuePayTokenSale () public payable\n', '\t{\n', '\n', '\t    totalSupply = INITIAL_VUP_TOKEN_SUPPLY;\n', '\n', '\t\t//Start Pre-sale approx on the 6th october 8:00 GMT\n', '\t    preSaleStartBlock=4340582;\n', '\t    //preSaleStartBlock=block.number;\n', '\t    preSaleEndBlock = preSaleStartBlock + 37800;  // Equivalent to 14 days later, assuming 32 second blocks\n', '\t    icoEndBlock = preSaleEndBlock + 81000;  // Equivalent to 30 days , assuming 32 second blocks\n', '\t\texecutor = msg.sender;\n', '\t\tsaleHasEnded = false;\n', '\t\tminCapReached = false;\n', '\t\tallowRefund = false;\n', '\t\tadvisoryTeamShare = ADVISORY_TEAM_PORTION;\n', '\t\ttotalETHRaised = 0;\n', '\t\ttotalVUP=0;\n', '\n', '\t}\n', '\n', '\tfunction () payable public {\n', '\t\t\n', '\t\t//minimum .05 Ether required.\n', '\t\trequire(msg.value >= .05 ether);\n', '\t\t// If sale is not active, do not create VUP\n', '\t\trequire(!saleHasEnded);\n', '\t\t//Requires block to be >= Pre-Sale start block \n', '\t\trequire(block.number >= preSaleStartBlock);\n', '\t\t//Requires block.number to be less than icoEndBlock number\n', '\t\trequire(block.number < icoEndBlock);\n', '\t\t//Has the Pre-Sale ended, after 14 days, Pre-Sale ends.\n', '\t\tif (block.number > preSaleEndBlock){\n', '\t\t    preSaleEnded=true;\n', '\t\t}\n', '\t\t// Do not do anything if the amount of ether sent is 0\n', '\t\trequire(msg.value!=0);\n', '\n', '\t\tuint256 newEtherBalance = totalETHRaised.add(msg.value);\n', '\t\t//Get the appropriate rate which applies\n', '\t\tgetCurrentVUPRate();\n', '\t\t// Calculate the amount of VUP being purchase\n', '\t\t\n', '\t\tuint256 amountOfVUP = msg.value.mul(curTokenRate);\n', '\t\n', '        //Accrue VUP tokens\n', '\t\ttotalVUP=totalVUP.add(amountOfVUP);\n', '\t    // if all tokens sold out , sale ends.\n', '\t\trequire(totalVUP<= PRESALE_ICO_PORTION);\n', '\t\t\n', '\t\t// Ensure that the transaction is safe\n', '\t\tuint256 totalSupplySafe = totalSupply.sub(amountOfVUP);\n', '\t\tuint256 balanceSafe = balances[msg.sender].add(amountOfVUP);\n', '\t\tuint256 contributedSafe = ETHContributed[msg.sender].add(msg.value);\n', '\t\t\n', '\t\t// Update individual and total balances\n', '\t\ttotalSupply = totalSupplySafe;\n', '\t\tbalances[msg.sender] = balanceSafe;\n', '\n', '\t\ttotalETHRaised = newEtherBalance;\n', '\t\tETHContributed[msg.sender] = contributedSafe;\n', '\n', '\t\tCreatedVUP(msg.sender, amountOfVUP);\n', '\t}\n', '\t\n', '\tfunction getCurrentVUPRate() internal {\n', '\t        //default to the base rate\n', '\t        curTokenRate = VUP_PER_ETH_BASE_RATE;\n', '\n', '\t        //if VUP sold < 100 mill and still in presale, use Pre-Sale rate\n', '\t        if ((totalVUP <= VUP_TOKEN_SUPPLY_TIER1) && (!preSaleEnded)) {    \n', '\t\t\t        curTokenRate = VUP_PER_ETH_PRE_SALE_RATE;\n', '\t        }\n', '\t\t    //If VUP Sold < 100 mill and Pre-Sale ended, use Tier2 rate\n', '\t        if ((totalVUP <= VUP_TOKEN_SUPPLY_TIER1) && (preSaleEnded)) {\n', '\t\t\t     curTokenRate = VUP_PER_ETH_ICO_TIER2_RATE;\n', '\t\t    }\n', '\t\t    //if VUP Sold > 100 mill, use Tier 2 rate irrespective of Pre-Sale end or not\n', '\t\t    if (totalVUP >VUP_TOKEN_SUPPLY_TIER1 ) {\n', '\t\t\t    curTokenRate = VUP_PER_ETH_ICO_TIER2_RATE;\n', '\t\t    }\n', '\t\t    //if VUP sold more than 200 mill use Tier3 rate\n', '\t\t    if (totalVUP >VUP_TOKEN_SUPPLY_TIER2 ) {\n', '\t\t\t    curTokenRate = VUP_PER_ETH_ICO_TIER3_RATE;\n', '\t\t        \n', '\t\t    }\n', '            //if VUP sod more than 300mill\n', '\t\t    if (totalVUP >VUP_TOKEN_SUPPLY_TIER3){\n', '\t\t        curTokenRate = VUP_PER_ETH_BASE_RATE;\n', '\t\t    }\n', '\t}\n', '    // Create VUP tokens from the Advisory bucket for marketing, PR, Media where we are \n', '    //paying upfront for these activities in VUP tokens.\n', '    //Clients = Media, PR, Marketing promotion etc.\n', '    function createCustomVUP(address _clientVUPAddress,uint256 _value) public onlyOwner {\n', '\t    //Check the address is valid\n', '\t    require(_clientVUPAddress != address(0x0));\n', '\t\trequire(_value >0);\n', '\t\trequire(advisoryTeamShare>= _value);\n', '\t   \n', '\t  \tuint256 amountOfVUP = _value;\n', '\t  \t//Reduce from advisoryTeamShare\n', '\t    advisoryTeamShare=advisoryTeamShare.sub(amountOfVUP);\n', '        //Accrue VUP tokens\n', '\t\ttotalVUP=totalVUP.add(amountOfVUP);\n', '\t\t//Assign tokens to the client\n', '\t\tuint256 balanceSafe = balances[_clientVUPAddress].add(amountOfVUP);\n', '\t\tbalances[_clientVUPAddress] = balanceSafe;\n', '\t\t//Create VUP Created event\n', '\t\tCreatedVUP(_clientVUPAddress, amountOfVUP);\n', '\t\n', '\t}\n', '    \n', '\tfunction endICO() public onlyOwner{\n', '\t\t// Do not end an already ended sale\n', '\t\trequire(!saleHasEnded);\n', "\t\t// Can't end a sale that hasn't hit its minimum cap\n", '\t\trequire(minCapReached);\n', '\t\t\n', '\t\tsaleHasEnded = true;\n', '\n', '\t\t// Calculate and create all team share VUPs\n', '\t\n', '\t    coreTeamShare = CORE_TEAM_PORTION;\n', '\t    uint256 devTeamShare = DEV_TEAM_PORTION;\n', '\t    cofounderShare = CO_FOUNDER_PORTION;\n', '\t    uint256 udfShare = UDF_PORTION;\n', '\t\n', '\t    \n', '\t\tbalances[devVUPDestination] = devTeamShare;\n', '\t\tbalances[advisoryVUPDestination] = advisoryTeamShare;\n', '\t\tbalances[udfVUPDestination] = udfShare;\n', '       \n', '        // Locked time of approximately 9 months before team members are able to redeeem tokens.\n', '        uint nineMonths = 9 * 30 days;\n', '        coreTeamUnlockedAt = now.add(nineMonths);\n', '        // Locked time of approximately 10 years before team members are able to redeeem tokens.\n', '        uint lockTime = coldStorageYears;\n', '        unsoldUnlockedAt = now.add(lockTime);\n', '\n', '\t\tCreatedVUP(devVUPDestination, devTeamShare);\n', '\t\tCreatedVUP(advisoryVUPDestination, advisoryTeamShare);\n', '\t\tCreatedVUP(udfVUPDestination, udfShare);\n', '\n', '\t}\n', '\tfunction unlock() public onlyOwner{\n', '\t   require(saleHasEnded);\n', '       require(now > coreTeamUnlockedAt || now > unsoldUnlockedAt);\n', '       if (now > coreTeamUnlockedAt) {\n', '          balances[coreVUPDestination] = coreTeamShare;\n', '          CreatedVUP(coreVUPDestination, coreTeamShare);\n', '          balances[cofounderVUPDestination] = cofounderShare;\n', '          CreatedVUP(cofounderVUPDestination, cofounderShare);\n', '         \n', '       }\n', '       if (now > unsoldUnlockedAt) {\n', '          uint256 unsoldTokens=PRESALE_ICO_PORTION.sub(totalVUP);\n', '          require(unsoldTokens > 0);\n', '          balances[unsoldVUPDestination] = unsoldTokens;\n', '          CreatedVUP(coreVUPDestination, unsoldTokens);\n', '         }\n', '    }\n', '\n', '\t// Allows VuePay to withdraw funds\n', '\tfunction withdrawFunds() public onlyOwner {\n', "\t\t// Disallow withdraw if the minimum hasn't been reached\n", '\t\trequire(minCapReached);\n', '\t\trequire(this.balance > 0);\n', '\t\tif(this.balance > 0) {\n', '\t\t\tvuePayETHDestination.transfer(this.balance);\n', '\t\t}\n', '\t}\n', '\n', '\t// Signals that the sale has reached its minimum funding goal\n', '\tfunction triggerMinCap() public onlyOwner {\n', '\t\tminCapReached = true;\n', '\t}\n', '\n', '\t// Opens refunding.\n', '\tfunction triggerRefund() public onlyOwner{\n', '\t\t// No refunds if the sale was successful\n', '\t\trequire(!saleHasEnded);\n', '\t\t// No refunds if minimum cap is hit\n', '\t\trequire(!minCapReached);\n', '\t\t// No refunds if the sale is still progressing\n', '\t    require(block.number >icoEndBlock);\n', '\t\trequire(msg.sender == executor);\n', '\t\tallowRefund = true;\n', '\t}\n', '\n', '\tfunction claimRefund() external {\n', '\t\t// No refunds until it is approved\n', '\t\trequire(allowRefund);\n', '\t\t// Nothing to refund\n', '\t\trequire(ETHContributed[msg.sender]!=0);\n', '\n', '\t\t// Do the refund.\n', '\t\tuint256 etherAmount = ETHContributed[msg.sender];\n', '\t\tETHContributed[msg.sender] = 0;\n', '\n', '\t\tVUPRefundedForWei(msg.sender, etherAmount);\n', '\t\tmsg.sender.transfer(etherAmount);\n', '\t}\n', '    //Allow changing the Vuepay MultiSig wallet incase of emergency\n', '\tfunction changeVuePayETHDestinationAddress(address _newAddress) public onlyOwner {\n', '\t\tvuePayETHDestination = _newAddress;\n', '\t}\n', '\t\n', '\tfunction transfer(address _to, uint _value) public returns (bool) {\n', '\t\t// Cannot transfer unless the minimum cap is hit\n', '\t\trequire(minCapReached);\n', '\t\treturn super.transfer(_to, _value);\n', '\t}\n', '\t\n', '\tfunction transferFrom(address _from, address _to, uint _value) public returns (bool) {\n', '\t\t// Cannot transfer unless the minimum cap is hit\n', '\t\trequire(minCapReached);\n', '\t\treturn super.transferFrom(_from, _to, _value);\n', '\t}\n', '\n', '\t\n', '}']
