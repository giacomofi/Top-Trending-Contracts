['pragma solidity ^0.4.13;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function add(uint256 x, uint256 y) internal returns (uint256) {\n', '        uint256 z = x + y;\n', '        assert((z >= x) && (z >= y));\n', '        return z;\n', '    }\n', '\n', '    function sub(uint256 x, uint256 y) internal returns (uint256) {\n', '        assert(x >= y);\n', '        uint256 z = x - y;\n', '        return z;\n', '    }\n', '\n', '    function mul(uint256 x, uint256 y) internal returns (uint256) {\n', '        uint256 z = x * y;\n', '        assert((x == 0) || (z / x == y));\n', '        return z;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '/*\n', ' * Haltable\n', ' *\n', ' * Abstract contract that allows children to implement an\n', ' * emergency stop mechanism. Differs from Pausable by causing a throw when in halt mode.\n', ' *\n', ' *\n', ' * Originally envisioned in FirstBlood ICO contract.\n', ' */\n', 'contract Haltable is Ownable {\n', '  bool public halted;\n', '\n', '  modifier stopInEmergency {\n', '    require (!halted);\n', '    _;\n', '  }\n', '\n', '  modifier onlyInEmergency {\n', '    require (halted);\n', '    _;\n', '  }\n', '\n', '  // called by the owner on emergency, triggers stopped state\n', '  function halt() external onlyOwner {\n', '    halted = true;\n', '  }\n', '\n', '  // called by the owner on end of emergency, returns to normal state\n', '  function unhalt() external onlyOwner onlyInEmergency {\n', '    halted = false;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', 'contract preDGZToken is StandardToken {\n', '    using SafeMath for uint256;\n', '\n', '    /*/ Public variables of the token /*/\n', '    string public constant name = "Dogezer preDGZ Token";\n', '    string public constant symbol = "preDGZ";\n', '    uint8 public decimals = 8;\n', '    uint256 public totalSupply = 200000000000000;\n', '\n', '    /*/ Initializes contract with initial supply tokens to the creator of the contract /*/\n', '    function preDGZToken() \n', '    {\n', '        balances[msg.sender] = totalSupply;              // Give the creator all initial tokens\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract DogezerPreICOCrowdsale is Haltable{\n', '    using SafeMath for uint;\n', '    string public name = "Dogezer preITO";\n', '\n', '    address public beneficiary;\n', '    uint public startTime;\n', '    uint public duration;\n', '\n', '\n', '    uint public fundingGoal; \n', '    uint public amountRaised; \n', '    uint public price; \n', '    preDGZToken public tokenReward;\n', '\n', '    mapping(address => uint256) public balanceOf;\n', '\n', '    event SaleFinished(uint finishAmountRaised);\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '    bool public crowdsaleClosed = false;\n', '\n', '\n', '    /*  at initialization, setup the owner */\n', '    function DogezerPreICOCrowdsale(\n', '        address addressOfTokenUsedAsReward,\n', '\t\taddress addressOfBeneficiary\n', '    ) {\n', '        beneficiary = addressOfBeneficiary;\n', '        startTime = 1504270800;\n', '        duration = 707 hours;\n', '        fundingGoal = 4000 * 1 ether;\n', '        amountRaised = 0;\n', '        price = 0.00000000002 * 1 ether;\n', '        tokenReward = preDGZToken(addressOfTokenUsedAsReward);\n', '    }\n', '\n', '    modifier onlyAfterStart() {\n', '        require (now >= startTime);\n', '        _;\n', '    }\n', '\n', '    modifier onlyBeforeEnd() {\n', '        require (now <= startTime + duration);\n', '        _;\n', '    }\n', '\n', '    /* The function without name is the default function that is called whenever anyone sends funds to a contract */\n', '    function () payable stopInEmergency onlyAfterStart onlyBeforeEnd\n', '    {\n', '\t\trequire (msg.value >= 0.002 * 1 ether);\n', '        require (crowdsaleClosed == false);\n', '        require (fundingGoal >= amountRaised + msg.value);\n', '        uint amount = msg.value;\n', '        balanceOf[msg.sender] += amount;\n', '        amountRaised += amount;  \n', '        tokenReward.transfer(msg.sender, amount / price);\n', '        FundTransfer(msg.sender, amount, true); \n', '        if (amountRaised == fundingGoal)\n', '        {\n', '            crowdsaleClosed = true;\n', '            SaleFinished(amountRaised);\n', '        }\n', '    }\n', ' \n', '   function withdrawal (uint amountWithdraw) onlyOwner\n', '   {\n', '\t\tbeneficiary.transfer(amountWithdraw);\n', '   }\n', '   \n', '   function changeBeneficiary(address newBeneficiary) onlyOwner {\n', '\t\tif (newBeneficiary != address(0)) {\n', '\t\t  beneficiary = newBeneficiary;\n', '\t\t}\n', '\t}\n', '   \n', '   function finalizeSale () onlyOwner\n', '   {\n', '       require (crowdsaleClosed == false);\n', '       crowdsaleClosed = true;\n', '       SaleFinished(amountRaised);\n', '   }\n', '}']