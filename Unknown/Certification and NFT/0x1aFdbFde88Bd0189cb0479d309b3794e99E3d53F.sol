['pragma solidity ^0.4.13;\n', '\n', 'contract ERC20 {\n', '      function totalSupply() constant returns (uint totalSupply);\n', '      function balanceOf(address _owner) constant returns (uint balance);\n', '      function transfer(address _to, uint _value) returns (bool success);\n', '      function transferFrom(address _from, address _to, uint _value) returns (bool success);\n', '      function approve(address _spender, uint _value) returns (bool success);\n', '      function allowance(address _owner, address _spender) constant returns (uint remaining);\n', ' }\n', '\n', '/*\n', '    ERC20 Standard Token interface\n', '*/\n', 'contract IERC20Token {\n', '    // these functions aren&#39;t abstract since the compiler emits automatically generated getter functions as external\n', '    function name() public constant returns (string name) { name; }\n', '    function symbol() public constant returns (string symbol) { symbol; }\n', '    function decimals() public constant returns (uint8 decimals) { decimals; }\n', '    function totalSupply() public constant returns (uint256 totalSupply) { totalSupply; }\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) { _owner; balance; }\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) { _owner; _spender; remaining; }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '}\n', '\n', '\n', '/*\n', '    EIP228 Token Changer interface\n', '*/\n', 'contract ITokenChanger {\n', '    function changeableTokenCount() public constant returns (uint16 count);\n', '    function changeableToken(uint16 _tokenIndex) public constant returns (address tokenAddress);\n', '    function getReturn(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount) public constant returns (uint256 amount);\n', '    function change(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount, uint256 _minReturn) public returns (uint256 amount);\n', '}\n', '\n', '/*\n', '    Owned contract interface\n', '*/\n', 'contract IOwned {\n', '    // this function isn&#39;t abstract since the compiler emits automatically generated getter functions as external\n', '    function owner() public constant returns (address owner) { owner; }\n', '\n', '    function transferOwnership(address _newOwner) public;\n', '    function acceptOwnership() public;\n', '}\n', '\n', '\n', '/*\n', '    Token Holder interface\n', '*/\n', 'contract ITokenHolder is IOwned {\n', '    function withdrawTokens(IERC20Token _token, address _to, uint256 _amount) public;\n', '}\n', '\n', '\n', '/*\n', '    Smart Token interface\n', '*/\n', 'contract ISmartToken is ITokenHolder, IERC20Token {\n', '    function disableTransfers(bool _disable) public;\n', '    function issue(address _to, uint256 _amount) public;\n', '    function destroy(address _from, uint256 _amount) public;\n', '}\n', '\n', '\n', '\n', '/*\n', '    Bancor Changer interface\n', '*/\n', 'contract IBancorChanger is ITokenChanger {\n', '    function token() public constant returns (ISmartToken _token) { _token; }\n', '    function getReserveBalance(IERC20Token _reserveToken) public constant returns (uint256 balance);\n', '}\n', '\n', '/*\n', '    Ether Token interface\n', '*/\n', 'contract IEtherToken is ITokenHolder, IERC20Token {\n', '    function deposit() public payable;\n', '    function withdraw(uint256 _amount) public;\n', '}\n', '\n', '\n', 'contract MarginBanc {\n', '    \n', '    address public owner;\n', '    \n', '    IBancorChanger public tokenChanger; // bancor ETH <-> smart token changer\n', '    IEtherToken public etherToken;      // ether token\n', '    ERC20  public  bnt;\n', '    ISmartToken public smartToken;\n', '    \n', '    struct position {\n', '        uint openTime;\n', '        uint closeTime;\n', '        \n', '        \n', '        uint256 amountETH;\n', '        uint256 amountBNT;\n', '    }\n', '    \n', '    mapping (address => uint256) public positions;\n', '    \n', '    event LongClosed(address indexed by, uint256 amount);\n', '    \n', '    function MarginBanc() {\n', '        owner = msg.sender;\n', '        \n', '        tokenChanger = IBancorChanger(0xCA83bD8c4C7B1c0409B25FbD7e70B1ef57629fF4);\n', '        etherToken =  IEtherToken(0xD76b5c2A23ef78368d8E34288B5b65D616B746aE);\n', '        bnt = ERC20(0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C);\n', '        smartToken = tokenChanger.token();\n', '        \n', '    }\n', '    \n', '\n', '    \n', '    /**\n', '     * Deposit ETH. Will buy bancor at 2x\n', '     **/\n', '    function long() payable returns (uint256 amount) {\n', '        \n', '        etherToken.deposit.value(msg.value)(); // deposit ETH in the reserve\n', '        assert(etherToken.approve(tokenChanger, 0)); // need to reset the allowance to 0 before setting a new one\n', '        assert(etherToken.approve(tokenChanger, msg.value)); // approve the changer to use the ETH amount for the purchase\n', '\n', '        ISmartToken smartToken = tokenChanger.token();\n', '        uint256 returnAmount = tokenChanger.change(etherToken, smartToken, msg.value, 1); // do the actual change using the current price\n', '        assert(smartToken.transfer(msg.sender, returnAmount)); // transfer the tokens to the sender\n', '        return returnAmount;\n', '    \n', '    }\n', '    \n', '    \n', '    function release() {\n', '        if(owner != msg.sender) {\n', '          revert();\n', '        }\n', '        selfdestruct(owner);\n', '  \n', '    }\n', '    \n', '    \n', '    function getBuyReturn(uint256 _amount) public constant returns (uint256 amount) {\n', '        return tokenChanger.getReturn(etherToken, smartToken, _amount); \n', '    }\n', '    \n', '    function getSellReturn(uint256 _amount) public constant returns (uint256 amount) {\n', '        return tokenChanger.getReturn(smartToken, etherToken, _amount); \n', '    }\n', '    \n', '    function getReturn(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount) public constant returns (uint256 amount) {\n', '        return tokenChanger.getReturn(_fromToken, _toToken, _amount); \n', '    }\n', '    \n', '    /**\n', '     * Close a long position, this will:\n', '     * - sell the bancor for ETH\n', '     * - deduct interest, this will go to the house\n', '     * metamask 3.8.6\n', '     */\n', '     \n', '     function closeLong() returns (uint256) {\n', '         \n', '        //uint256 bal = getBNTBalance(msg.sender);\n', '        \n', '        //assert(bnt.approve(tokenChanger, 0)); // need to reset the allowance to 0 before setting a new one\n', '        //assert(bnt.approve(tokenChanger, bal)); // approve the changer to use the ETH amount for the purchase\n', '        \n', '       // ISmartToken smartToken = tokenChanger.token();\n', '         return tokenChanger.change(smartToken, etherToken, getBNTBalance(msg.sender), 1); // do the actual change using the current price\n', '        \n', '        // return returnAmount;\n', '         //LongClosed(msg.sender, returnAmount);\n', '        // \n', '         \n', '         //return returnAmount;\n', '         \n', '     }\n', '     \n', '     function moo() {\n', '         \n', '         tokenChanger.change(smartToken, etherToken, 877843110001289470, 1);\n', '         \n', '         \n', '     }\n', '     \n', '     function getReturn() constant returns (uint256) {\n', '         \n', '       // ISmartToken smartToken = tokenChanger.token();\n', '        return tokenChanger.getReturn(smartToken, etherToken, getBNTBalance(msg.sender));\n', '        \n', '     }\n', '     \n', '     function withdraw(uint256 returnAmount) {\n', '         etherToken.withdraw(returnAmount);\n', '     }\n', '     \n', '    \n', '     function getETHBalance(address a) constant returns (uint256 amount) {\n', '         return etherToken.balanceOf(a);\n', '     }\n', '     \n', '     \n', '     function getBNTBalance(address a) constant returns (uint256 amount) {\n', '         return bnt.balanceOf(a);\n', '     }\n', '     \n', '     /**\n', '      * Anybody can call margin call. by doing  \n', '      **/\n', '     function marginCall() {\n', '         \n', '     }\n', '     \n', '    \n', '    \n', '}']