['pragma solidity ^0.4.11;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        assert(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        assert(newOwner != address(0));\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '/*\n', ' * @title Haltable\n', ' * @dev Abstract contract that allows children to implement an emergency stop mechanism.\n', ' * @dev Differs from Pausable by causing a throw when in halt mode.\n', ' */\n', 'contract Haltable is Ownable {\n', '    bool public halted;\n', '\n', '    modifier stopInEmergency {\n', '        assert(!halted);\n', '        _;\n', '    }\n', '\n', '    modifier onlyInEmergency {\n', '        assert(halted);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Called by the owner on emergency, triggers stopped state.\n', '     */\n', '    function halt() external onlyOwner {\n', '        halted = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Called by the owner on end of emergency, returns to normal state.\n', '     */\n', '    function unhalt() external onlyOwner onlyInEmergency {\n', '        halted = false;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) constant returns (uint256);\n', '    function transfer(address to, uint256 value) returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) constant returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) returns (bool);\n', '    function approve(address spender, uint256 value) returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    /**\n', '     * @dev transfer token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) returns (bool) {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param _owner The address to query the the balance of.\n', '     * @return An uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Fix for the ERC20 short address attack\n', '     * @dev see: http://vessenes.com/the-erc20-short-address-attack-explained/\n', '     * @dev see: https://www.reddit.com/r/ethereum/comments/63s917/worrysome_bug_exploit_with_erc20_token/dfwmhc3/\n', '     */\n', '    modifier onlyPayloadSize(uint size) {\n', '        assert (msg.data.length >= size + 4);\n', '        _;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amout of tokens to be transfered\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '        var _allowance = allowed[_from][msg.sender];\n', '        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '        // assert (_value <= _allowance);\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) returns (bool) {\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        assert((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifing the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title MintableToken\n', ' * @dev Token that can be minted by another contract until the defined cap is reached.\n', ' * @dev Based on https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '    using SafeMath for uint;\n', '\n', '    uint256 public mintableSupply;\n', '\n', '    /**\n', '     * @dev List of agents that are allowed to create new tokens\n', '     */\n', '    mapping(address => bool) public mintAgents;\n', '\n', '    event MintingAgentChanged(address addr, bool state);\n', '\n', '    /**\n', '     * @dev Mint token from pool of mintable tokens.\n', '     * @dev Only callable by the mint-agent.\n', '     */\n', '    function mint(address receiver, uint256 amount) onlyPayloadSize(2 * 32) onlyMintAgent canMint public {\n', '        mintableSupply = mintableSupply.sub(amount);\n', '        balances[receiver] = balances[receiver].add(amount);\n', '        // This will make the mint transaction appear in EtherScan.io\n', '        // We can remove this after there is a standardized minting event\n', '        Transfer(0, receiver, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Owner can allow a crowdsale contract to mint new tokens.\n', '     */\n', '    function setMintAgent(address addr, bool state) onlyOwner canMint public {\n', '        mintAgents[addr] = state;\n', '        MintingAgentChanged(addr, state);\n', '    }\n', '\n', '    modifier onlyMintAgent() {\n', '        // Only the mint-agent is allowed to mint new tokens\n', '        assert (mintAgents[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Make sure we are not done yet.\n', '     */\n', '    modifier canMint() {\n', '        assert(mintableSupply > 0);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Fix for the ERC20 short address attack\n', '     * @dev see: http://vessenes.com/the-erc20-short-address-attack-explained/\n', '     * @dev see: https://www.reddit.com/r/ethereum/comments/63s917/worrysome_bug_exploit_with_erc20_token/dfwmhc3/\n', '     */\n', '    modifier onlyPayloadSize(uint size) {\n', '        assert (msg.data.length >= size + 4);\n', '        _;\n', '    }\n', '}\n', '\n', '\n', '/*\n', ' * @title ReleasableToken\n', ' * @dev Token that may not be transfered until it was released.\n', ' */\n', 'contract ReleasableToken is ERC20, Ownable {\n', '    address public releaseAgent;\n', '    bool public released = false;\n', '\n', '    /**\n', '     * @dev One way function to release the tokens to the wild.\n', '     */\n', '    function releaseToken() public onlyReleaseAgent {\n', '        released = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Set the contract that may call the release function.\n', '     */\n', '    function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\n', '        releaseAgent = addr;\n', '    }\n', '\n', '    function transfer(address _to, uint _value) inReleaseState(true) returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) inReleaseState(true) returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev The function can be called only before or after the tokens have been releasesd\n', '     */\n', '    modifier inReleaseState(bool releaseState) {\n', '        assert(releaseState == released);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev The function can be called only by a whitelisted release agent.\n', '     */\n', '    modifier onlyReleaseAgent() {\n', '        assert(msg.sender == releaseAgent);\n', '        _;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title EventChain\n', ' * @dev Contract for the EventChain token.\n', ' */\n', 'contract EventChain is ReleasableToken, MintableToken {\n', '    string public name = "EventChain";\n', '    string public symbol = "EVC";\n', '    uint8 public decimals = 18;\n', '    \n', '    function EventChain() {\n', '        // total supply is 84 million tokens\n', '        totalSupply = 84000000 ether;\n', '        mintableSupply = totalSupply;\n', '        // allow deployer to unlock token transfer and mint tokens\n', '        setReleaseAgent(msg.sender);\n', '        setMintAgent(msg.sender, true);\n', '    }\n', '}\n', '\n', '\n', '/*\n', ' * @title Crowdsale\n', ' * @dev Contract to manage the EVC crowdsale\n', ' * @dev Using assert over assert within the contract in order to generate error opscodes (0xfe), that will properly show up in etherscan\n', ' * @dev The assert error opscode (0xfd) will show up in etherscan after the metropolis release\n', ' * @dev see: https://ethereum.stackexchange.com/a/24185\n', ' */\n', 'contract EventChainCrowdsale is Haltable {\n', '    using SafeMath for uint256;\n', '\n', '    enum State{Ready, Phase1, Phase2, Phase3, CrowdsaleEnded}\n', '\n', '    uint256 constant public PHASE2_SUPPLY = 21000000 ether;\n', '    uint256 constant public PHASE3_SUPPLY = 22600000 ether;\n', '\n', '    uint256 constant public PHASE1_RATE = 1140;\n', '    uint256 constant public PHASE2_RATE = 920;\n', '    uint256 constant public PHASE3_RATE = 800;\n', '\n', '    uint256 constant public MIN_INVEST = 10 finney;\n', '    uint256 constant public BTWO_CLAIM_PERCENT = 3;\n', '\n', '    EventChain public evc;\n', '    address public beneficiary;\n', '    address public beneficiaryTwo;\n', '    uint256 public totalRaised;\n', '\n', '    State public currentState;\n', '    uint256 public currentRate; \n', '    uint256 public currentSupply;\n', '    uint256 public currentTotalSupply;\n', '\n', '    event StateChanged(State from, State to);\n', '    event FundsClaimed(address receiver, uint256 claim, string crowdsalePhase);\n', '    event InvestmentMade(\n', '        address investor,\n', '        uint256 weiAmount,\n', '        uint256 tokenAmount,\n', '        string crowdsalePhase,\n', '        bytes calldata\n', '    );\n', '\n', '    function EventChainCrowdsale(EventChain _evc, address _beneficiary, address _beneficiaryTwo) {\n', '        assert(address(_evc) != 0x0);\n', '        assert(address(_beneficiary) != 0x0);\n', '        assert(address(_beneficiaryTwo) != 0x0);\n', '\n', '        beneficiary = _beneficiary;\n', '        beneficiaryTwo = _beneficiaryTwo;\n', '        evc = _evc;\n', '    }\n', '\n', '    function() payable onlyWhenCrowdsaleIsOpen stopInEmergency external {\n', '        assert(msg.data.length <= 68); // 64 bytes data limit plus 4 for the prefix\n', '        assert(msg.value >= MIN_INVEST);\n', '\n', '        uint256 tokens = msg.value.mul(currentRate);\n', '        currentSupply = currentSupply.sub(tokens);\n', '        evc.mint(msg.sender, tokens);\n', '        totalRaised = totalRaised.add(msg.value);\n', '\n', '        InvestmentMade(\n', '            msg.sender,\n', '            msg.value,\n', '            tokens,\n', '            currentStateToString(),\n', '            msg.data\n', '        );\n', '    }\n', '\n', '    function startPhase1() onlyOwner inState(State.Ready) stopInEmergency external {\n', '        currentTotalSupply = evc.mintableSupply().sub(PHASE2_SUPPLY).sub(PHASE3_SUPPLY);\n', '        currentSupply = currentTotalSupply;\n', '        currentRate = PHASE1_RATE;\n', '        currentState = State.Phase1;\n', '\n', '        StateChanged(State.Ready, currentState);\n', '    }\n', '\n', '    function startPhase2() onlyOwner inState(State.Phase1) stopInEmergency external {\n', '        phaseClaim();\n', '\n', '        currentTotalSupply = currentSupply.add(PHASE2_SUPPLY);\n', '        currentSupply = currentTotalSupply;\n', '        currentRate = PHASE2_RATE;\n', '        currentState = State.Phase2;\n', '\n', '        StateChanged(State.Phase1, currentState);\n', '    }\n', '\n', '    function startPhase3() onlyOwner inState(State.Phase2) stopInEmergency external {\n', '        phaseClaim();\n', '\n', '        currentTotalSupply = currentSupply.add(PHASE3_SUPPLY);\n', '        currentSupply = currentTotalSupply;\n', '        currentRate = PHASE3_RATE;\n', '        currentState = State.Phase3;\n', '\n', '        StateChanged(State.Phase2, currentState);\n', '    }\n', '\n', '    function endCrowdsale() onlyOwner inState(State.Phase3) stopInEmergency external {\n', '        phaseClaim();\n', '\n', '        currentTotalSupply = 0;\n', '        currentSupply = 0;\n', '        currentRate = 0;\n', '        currentState = State.CrowdsaleEnded;\n', '\n', '        StateChanged(State.Phase3, currentState);\n', '    }\n', '\n', '    function currentStateToString() constant returns (string) {\n', '        if (currentState == State.Ready) {\n', '            return "Ready";\n', '        } else if (currentState == State.Phase1) {\n', '            return "Phase 1";\n', '        } else if (currentState == State.Phase2) {\n', '            return "Phase 2";\n', '        } else if (currentState == State.Phase3) {\n', '            return "Phase 3";\n', '        } else {\n', '            return "Crowdsale ended";\n', '        }\n', '    }\n', '\n', '    function phaseClaim() internal {\n', '        uint256 beneficiaryTwoClaim = this.balance.div(100).mul(BTWO_CLAIM_PERCENT);\n', '        beneficiaryTwo.transfer(beneficiaryTwoClaim);\n', '        FundsClaimed(beneficiaryTwo, beneficiaryTwoClaim, currentStateToString());\n', '\n', '        uint256 beneficiaryClaim = this.balance;\n', '        beneficiary.transfer(this.balance);\n', '        FundsClaimed(beneficiary, beneficiaryClaim, currentStateToString());\n', '    }\n', '\n', '    modifier inState(State _state) {\n', '        assert(currentState == _state);\n', '        _;\n', '    }\n', '\n', '    modifier onlyWhenCrowdsaleIsOpen() {\n', '        assert(currentState == State.Phase1 || currentState == State.Phase2 || currentState == State.Phase3);\n', '        _;\n', '    }\n', '}']
['pragma solidity ^0.4.11;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        assert(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        assert(newOwner != address(0));\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '/*\n', ' * @title Haltable\n', ' * @dev Abstract contract that allows children to implement an emergency stop mechanism.\n', ' * @dev Differs from Pausable by causing a throw when in halt mode.\n', ' */\n', 'contract Haltable is Ownable {\n', '    bool public halted;\n', '\n', '    modifier stopInEmergency {\n', '        assert(!halted);\n', '        _;\n', '    }\n', '\n', '    modifier onlyInEmergency {\n', '        assert(halted);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Called by the owner on emergency, triggers stopped state.\n', '     */\n', '    function halt() external onlyOwner {\n', '        halted = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Called by the owner on end of emergency, returns to normal state.\n', '     */\n', '    function unhalt() external onlyOwner onlyInEmergency {\n', '        halted = false;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) constant returns (uint256);\n', '    function transfer(address to, uint256 value) returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) constant returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) returns (bool);\n', '    function approve(address spender, uint256 value) returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    /**\n', '     * @dev transfer token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) returns (bool) {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param _owner The address to query the the balance of.\n', '     * @return An uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Fix for the ERC20 short address attack\n', '     * @dev see: http://vessenes.com/the-erc20-short-address-attack-explained/\n', '     * @dev see: https://www.reddit.com/r/ethereum/comments/63s917/worrysome_bug_exploit_with_erc20_token/dfwmhc3/\n', '     */\n', '    modifier onlyPayloadSize(uint size) {\n', '        assert (msg.data.length >= size + 4);\n', '        _;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amout of tokens to be transfered\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '        var _allowance = allowed[_from][msg.sender];\n', '        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '        // assert (_value <= _allowance);\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) returns (bool) {\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        assert((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifing the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title MintableToken\n', ' * @dev Token that can be minted by another contract until the defined cap is reached.\n', ' * @dev Based on https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '    using SafeMath for uint;\n', '\n', '    uint256 public mintableSupply;\n', '\n', '    /**\n', '     * @dev List of agents that are allowed to create new tokens\n', '     */\n', '    mapping(address => bool) public mintAgents;\n', '\n', '    event MintingAgentChanged(address addr, bool state);\n', '\n', '    /**\n', '     * @dev Mint token from pool of mintable tokens.\n', '     * @dev Only callable by the mint-agent.\n', '     */\n', '    function mint(address receiver, uint256 amount) onlyPayloadSize(2 * 32) onlyMintAgent canMint public {\n', '        mintableSupply = mintableSupply.sub(amount);\n', '        balances[receiver] = balances[receiver].add(amount);\n', '        // This will make the mint transaction appear in EtherScan.io\n', '        // We can remove this after there is a standardized minting event\n', '        Transfer(0, receiver, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Owner can allow a crowdsale contract to mint new tokens.\n', '     */\n', '    function setMintAgent(address addr, bool state) onlyOwner canMint public {\n', '        mintAgents[addr] = state;\n', '        MintingAgentChanged(addr, state);\n', '    }\n', '\n', '    modifier onlyMintAgent() {\n', '        // Only the mint-agent is allowed to mint new tokens\n', '        assert (mintAgents[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Make sure we are not done yet.\n', '     */\n', '    modifier canMint() {\n', '        assert(mintableSupply > 0);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Fix for the ERC20 short address attack\n', '     * @dev see: http://vessenes.com/the-erc20-short-address-attack-explained/\n', '     * @dev see: https://www.reddit.com/r/ethereum/comments/63s917/worrysome_bug_exploit_with_erc20_token/dfwmhc3/\n', '     */\n', '    modifier onlyPayloadSize(uint size) {\n', '        assert (msg.data.length >= size + 4);\n', '        _;\n', '    }\n', '}\n', '\n', '\n', '/*\n', ' * @title ReleasableToken\n', ' * @dev Token that may not be transfered until it was released.\n', ' */\n', 'contract ReleasableToken is ERC20, Ownable {\n', '    address public releaseAgent;\n', '    bool public released = false;\n', '\n', '    /**\n', '     * @dev One way function to release the tokens to the wild.\n', '     */\n', '    function releaseToken() public onlyReleaseAgent {\n', '        released = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Set the contract that may call the release function.\n', '     */\n', '    function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\n', '        releaseAgent = addr;\n', '    }\n', '\n', '    function transfer(address _to, uint _value) inReleaseState(true) returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) inReleaseState(true) returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev The function can be called only before or after the tokens have been releasesd\n', '     */\n', '    modifier inReleaseState(bool releaseState) {\n', '        assert(releaseState == released);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev The function can be called only by a whitelisted release agent.\n', '     */\n', '    modifier onlyReleaseAgent() {\n', '        assert(msg.sender == releaseAgent);\n', '        _;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title EventChain\n', ' * @dev Contract for the EventChain token.\n', ' */\n', 'contract EventChain is ReleasableToken, MintableToken {\n', '    string public name = "EventChain";\n', '    string public symbol = "EVC";\n', '    uint8 public decimals = 18;\n', '    \n', '    function EventChain() {\n', '        // total supply is 84 million tokens\n', '        totalSupply = 84000000 ether;\n', '        mintableSupply = totalSupply;\n', '        // allow deployer to unlock token transfer and mint tokens\n', '        setReleaseAgent(msg.sender);\n', '        setMintAgent(msg.sender, true);\n', '    }\n', '}\n', '\n', '\n', '/*\n', ' * @title Crowdsale\n', ' * @dev Contract to manage the EVC crowdsale\n', ' * @dev Using assert over assert within the contract in order to generate error opscodes (0xfe), that will properly show up in etherscan\n', ' * @dev The assert error opscode (0xfd) will show up in etherscan after the metropolis release\n', ' * @dev see: https://ethereum.stackexchange.com/a/24185\n', ' */\n', 'contract EventChainCrowdsale is Haltable {\n', '    using SafeMath for uint256;\n', '\n', '    enum State{Ready, Phase1, Phase2, Phase3, CrowdsaleEnded}\n', '\n', '    uint256 constant public PHASE2_SUPPLY = 21000000 ether;\n', '    uint256 constant public PHASE3_SUPPLY = 22600000 ether;\n', '\n', '    uint256 constant public PHASE1_RATE = 1140;\n', '    uint256 constant public PHASE2_RATE = 920;\n', '    uint256 constant public PHASE3_RATE = 800;\n', '\n', '    uint256 constant public MIN_INVEST = 10 finney;\n', '    uint256 constant public BTWO_CLAIM_PERCENT = 3;\n', '\n', '    EventChain public evc;\n', '    address public beneficiary;\n', '    address public beneficiaryTwo;\n', '    uint256 public totalRaised;\n', '\n', '    State public currentState;\n', '    uint256 public currentRate; \n', '    uint256 public currentSupply;\n', '    uint256 public currentTotalSupply;\n', '\n', '    event StateChanged(State from, State to);\n', '    event FundsClaimed(address receiver, uint256 claim, string crowdsalePhase);\n', '    event InvestmentMade(\n', '        address investor,\n', '        uint256 weiAmount,\n', '        uint256 tokenAmount,\n', '        string crowdsalePhase,\n', '        bytes calldata\n', '    );\n', '\n', '    function EventChainCrowdsale(EventChain _evc, address _beneficiary, address _beneficiaryTwo) {\n', '        assert(address(_evc) != 0x0);\n', '        assert(address(_beneficiary) != 0x0);\n', '        assert(address(_beneficiaryTwo) != 0x0);\n', '\n', '        beneficiary = _beneficiary;\n', '        beneficiaryTwo = _beneficiaryTwo;\n', '        evc = _evc;\n', '    }\n', '\n', '    function() payable onlyWhenCrowdsaleIsOpen stopInEmergency external {\n', '        assert(msg.data.length <= 68); // 64 bytes data limit plus 4 for the prefix\n', '        assert(msg.value >= MIN_INVEST);\n', '\n', '        uint256 tokens = msg.value.mul(currentRate);\n', '        currentSupply = currentSupply.sub(tokens);\n', '        evc.mint(msg.sender, tokens);\n', '        totalRaised = totalRaised.add(msg.value);\n', '\n', '        InvestmentMade(\n', '            msg.sender,\n', '            msg.value,\n', '            tokens,\n', '            currentStateToString(),\n', '            msg.data\n', '        );\n', '    }\n', '\n', '    function startPhase1() onlyOwner inState(State.Ready) stopInEmergency external {\n', '        currentTotalSupply = evc.mintableSupply().sub(PHASE2_SUPPLY).sub(PHASE3_SUPPLY);\n', '        currentSupply = currentTotalSupply;\n', '        currentRate = PHASE1_RATE;\n', '        currentState = State.Phase1;\n', '\n', '        StateChanged(State.Ready, currentState);\n', '    }\n', '\n', '    function startPhase2() onlyOwner inState(State.Phase1) stopInEmergency external {\n', '        phaseClaim();\n', '\n', '        currentTotalSupply = currentSupply.add(PHASE2_SUPPLY);\n', '        currentSupply = currentTotalSupply;\n', '        currentRate = PHASE2_RATE;\n', '        currentState = State.Phase2;\n', '\n', '        StateChanged(State.Phase1, currentState);\n', '    }\n', '\n', '    function startPhase3() onlyOwner inState(State.Phase2) stopInEmergency external {\n', '        phaseClaim();\n', '\n', '        currentTotalSupply = currentSupply.add(PHASE3_SUPPLY);\n', '        currentSupply = currentTotalSupply;\n', '        currentRate = PHASE3_RATE;\n', '        currentState = State.Phase3;\n', '\n', '        StateChanged(State.Phase2, currentState);\n', '    }\n', '\n', '    function endCrowdsale() onlyOwner inState(State.Phase3) stopInEmergency external {\n', '        phaseClaim();\n', '\n', '        currentTotalSupply = 0;\n', '        currentSupply = 0;\n', '        currentRate = 0;\n', '        currentState = State.CrowdsaleEnded;\n', '\n', '        StateChanged(State.Phase3, currentState);\n', '    }\n', '\n', '    function currentStateToString() constant returns (string) {\n', '        if (currentState == State.Ready) {\n', '            return "Ready";\n', '        } else if (currentState == State.Phase1) {\n', '            return "Phase 1";\n', '        } else if (currentState == State.Phase2) {\n', '            return "Phase 2";\n', '        } else if (currentState == State.Phase3) {\n', '            return "Phase 3";\n', '        } else {\n', '            return "Crowdsale ended";\n', '        }\n', '    }\n', '\n', '    function phaseClaim() internal {\n', '        uint256 beneficiaryTwoClaim = this.balance.div(100).mul(BTWO_CLAIM_PERCENT);\n', '        beneficiaryTwo.transfer(beneficiaryTwoClaim);\n', '        FundsClaimed(beneficiaryTwo, beneficiaryTwoClaim, currentStateToString());\n', '\n', '        uint256 beneficiaryClaim = this.balance;\n', '        beneficiary.transfer(this.balance);\n', '        FundsClaimed(beneficiary, beneficiaryClaim, currentStateToString());\n', '    }\n', '\n', '    modifier inState(State _state) {\n', '        assert(currentState == _state);\n', '        _;\n', '    }\n', '\n', '    modifier onlyWhenCrowdsaleIsOpen() {\n', '        assert(currentState == State.Phase1 || currentState == State.Phase2 || currentState == State.Phase3);\n', '        _;\n', '    }\n', '}']
