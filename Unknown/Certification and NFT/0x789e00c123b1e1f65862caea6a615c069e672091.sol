['pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control \n', ' * functions, this simplifies the implementation of "user permissions". \n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /** \n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner. \n', '   */\n', '  modifier onlyOwner() {\n', '    if (msg.sender != owner) {\n', '      throw;\n', '    }\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to. \n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS paused\n', '   */\n', '  modifier whenNotPaused() {\n', '    if (paused) throw;\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS NOT paused\n', '   */\n', '  modifier whenPaused {\n', '    if (!paused) throw;\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused returns (bool) {\n', '    paused = true;\n', '    Pause();\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused returns (bool) {\n', '    paused = false;\n', '    Unpause();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '   * @dev Fix for the ERC20 short address attack.\n', '   */\n', '  modifier onlyPayloadSize(uint256 size) {\n', '     if(msg.data.length < size + 4) {\n', '       throw;\n', '     }\n', '     _;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Helps contracts guard agains rentrancy attacks.\n', ' * @author Remco Bloemen <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="ec9e89818f83acde">[email&#160;protected]</a>Ï€.com>\n', ' * @notice If you mark a function `nonReentrant`, you should also\n', ' * mark it `external`.\n', ' */\n', 'contract ReentrancyGuard {\n', '\n', '  /**\n', '   * @dev We use a single lock for the whole contract. \n', '   */\n', '  bool private rentrancy_lock = false;\n', '\n', '  /**\n', '   * @dev Prevents a contract from calling itself, directly or indirectly.\n', '   * @notice If you mark a function `nonReentrant`, you should also\n', '   * mark it `external`. Calling one nonReentrant function from\n', '   * another is not supported. Instead, you can implement a\n', '   * `private` function doing the actual work, and a `external`\n', '   * wrapper marked as `nonReentrant`.\n', '   */\n', '  modifier nonReentrant() {\n', '    if(rentrancy_lock == false) {\n', '      rentrancy_lock = true;\n', '      _;\n', '      rentrancy_lock = false;\n', '    } else {\n', '      throw;\n', '    }\n', '  }\n', '\n', '}\n', '\n', 'contract EtchReward is Pausable, BasicToken, ReentrancyGuard {\n', '\n', '    // address public owner;                // Ownable\n', '    // bool public paused = false;          // Pausable\n', '    // mapping(address => uint) balances;   // BasicToken\n', '    // uint public totalSupply;             // ERC20Basic\n', '    // bool private rentrancy_lock = false; // ReentrancyGuard\n', '\n', '    //\n', '    // @dev constants\n', '    //\n', '    string public constant name   = "Etch Reward Token";\n', '    string public constant symbol = "ETCHR";\n', '    uint public constant decimals = 18;\n', '\n', '    //\n', '    // @dev the main address to be forwarded all ether\n', '    //\n', '    address public constant BENEFICIARY = 0x651A3731f717a17777c9D8d6f152Aa9284978Ea3;\n', '\n', '    // @dev number of tokens one receives for every 1 ether they send\n', '    uint public constant PRICE = 8;\n', '\n', '    // avg block time = 15.2569 https://etherscan.io/chart/blocktime\n', '    uint public constant AVG_BLOCKS_24H = 5663;  // 3600 * 24 / 15.2569 = 5663.011489883266\n', '    uint public constant AVG_BLOCKS_02W = 79282; // 3600 * 24 * 14 / 15.2569 =  79282.16085836572\n', '\n', '    uint public constant MAX_ETHER_24H = 40 ether;\n', '    uint public constant ETHER_CAP     = 2660 ether;\n', '\n', '    uint public totalEther = 0;\n', '    uint public blockStart = 0;\n', '    uint public block24h   = 0;\n', '    uint public block02w   = 0;\n', '\n', '    // @dev address of the actual ICO contract to be deployed later\n', '    address public icoContract = 0x0;\n', '\n', '    //\n', '    // @dev owner authorized addresses to participate in this pre-ico\n', '    //\n', '    mapping(address => bool) contributors;\n', '\n', '\n', '    // @dev constructor function\n', '    function EtchReward(uint _blockStart) {\n', '        blockStart  = _blockStart;\n', '        block24h = blockStart + AVG_BLOCKS_24H;\n', '        block02w = blockStart + AVG_BLOCKS_02W;\n', '    }\n', '\n', '    //\n', '    // @notice the ability to transfer tokens is disabled\n', '    //\n', '    function transfer(address, uint) {\n', '        throw;\n', '    }\n', '\n', '    //\n', '    // @notice we DO allow sending ether directly to the contract address\n', '    //\n', '    function () payable {\n', '        buy();\n', '    }\n', '\n', '    //\n', '    // @dev modifiers\n', '    //\n', '    modifier onlyContributors() {\n', '        if(contributors[msg.sender] != true) {\n', '            throw;\n', '        }\n', '        _;\n', '    }\n', '\n', '    modifier onlyIcoContract() {\n', '        if(icoContract == 0x0 || msg.sender != icoContract) {\n', '            throw;\n', '        }\n', '        _;\n', '    }\n', '\n', '    //\n', '    // @dev call this to authorize participants to this pre-ico sale\n', '    // @param the authorized participant address\n', '    //\n', '    function addContributor(address _who) public onlyOwner {\n', '        contributors[_who] = true;\n', '    }\n', '\n', '    // @dev useful for contributor to check before sending ether\n', '    function isContributor(address _who) public constant returns(bool) {\n', '        return contributors[_who];\n', '    }\n', '\n', '    //\n', '    // @dev this will be later set by the owner of this contract\n', '    //\n', '    function setIcoContract(address _contract) public onlyOwner {\n', '        icoContract = _contract;\n', '    }\n', '\n', '    //\n', '    // @dev function called by the ICO contract to transform the tokens into ETCH tokens\n', '    //\n', '    function migrate(address _contributor) public\n', '    onlyIcoContract\n', '    whenNotPaused {\n', '\n', '        if(getBlock() < block02w) {\n', '            throw;\n', '        }\n', '        totalSupply = totalSupply.sub(balances[_contributor]);\n', '        balances[_contributor] = 0;\n', '    }\n', '\n', '    function buy() payable\n', '    nonReentrant\n', '    onlyContributors\n', '    whenNotPaused {\n', '\n', '        address _recipient = msg.sender;\n', '        uint blockNow = getBlock();\n', '\n', '        // are we before or after the sale period?\n', '        if(blockNow < blockStart || block02w <= blockNow) {\n', '            throw;\n', '        }\n', '\n', '        if (blockNow < block24h) {\n', '\n', '            // only one transaction is authorized\n', '            if (balances[_recipient] > 0) {\n', '                throw;\n', '            }\n', '\n', '            // only allowed to buy a certain amount\n', '            if (msg.value > MAX_ETHER_24H) {\n', '                throw;\n', '            }\n', '        }\n', '\n', '        // make sure we don&#39;t go over the ether cap\n', '        if (totalEther.add(msg.value) > ETHER_CAP) {\n', '            throw;\n', '        }\n', '\n', '        uint tokens = msg.value.mul(PRICE);\n', '        totalSupply = totalSupply.add(tokens);\n', '\n', '        balances[_recipient] = balances[_recipient].add(tokens);\n', '        totalEther.add(msg.value);\n', '\n', '        if (!BENEFICIARY.send(msg.value)) {\n', '            throw;\n', '        }\n', '    }\n', '\n', '    uint public blockNumber = 0;\n', '\n', '    function getBlock() public constant returns (uint) {\n', '        if(blockNumber != 0) {\n', '            return blockNumber;\n', '        }\n', '        return block.number;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control \n', ' * functions, this simplifies the implementation of "user permissions". \n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /** \n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner. \n', '   */\n', '  modifier onlyOwner() {\n', '    if (msg.sender != owner) {\n', '      throw;\n', '    }\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to. \n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS paused\n', '   */\n', '  modifier whenNotPaused() {\n', '    if (paused) throw;\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS NOT paused\n', '   */\n', '  modifier whenPaused {\n', '    if (!paused) throw;\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused returns (bool) {\n', '    paused = true;\n', '    Pause();\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused returns (bool) {\n', '    paused = false;\n', '    Unpause();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '   * @dev Fix for the ERC20 short address attack.\n', '   */\n', '  modifier onlyPayloadSize(uint256 size) {\n', '     if(msg.data.length < size + 4) {\n', '       throw;\n', '     }\n', '     _;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Helps contracts guard agains rentrancy attacks.\n', ' * @author Remco Bloemen <remco@2Ï€.com>\n', ' * @notice If you mark a function `nonReentrant`, you should also\n', ' * mark it `external`.\n', ' */\n', 'contract ReentrancyGuard {\n', '\n', '  /**\n', '   * @dev We use a single lock for the whole contract. \n', '   */\n', '  bool private rentrancy_lock = false;\n', '\n', '  /**\n', '   * @dev Prevents a contract from calling itself, directly or indirectly.\n', '   * @notice If you mark a function `nonReentrant`, you should also\n', '   * mark it `external`. Calling one nonReentrant function from\n', '   * another is not supported. Instead, you can implement a\n', '   * `private` function doing the actual work, and a `external`\n', '   * wrapper marked as `nonReentrant`.\n', '   */\n', '  modifier nonReentrant() {\n', '    if(rentrancy_lock == false) {\n', '      rentrancy_lock = true;\n', '      _;\n', '      rentrancy_lock = false;\n', '    } else {\n', '      throw;\n', '    }\n', '  }\n', '\n', '}\n', '\n', 'contract EtchReward is Pausable, BasicToken, ReentrancyGuard {\n', '\n', '    // address public owner;                // Ownable\n', '    // bool public paused = false;          // Pausable\n', '    // mapping(address => uint) balances;   // BasicToken\n', '    // uint public totalSupply;             // ERC20Basic\n', '    // bool private rentrancy_lock = false; // ReentrancyGuard\n', '\n', '    //\n', '    // @dev constants\n', '    //\n', '    string public constant name   = "Etch Reward Token";\n', '    string public constant symbol = "ETCHR";\n', '    uint public constant decimals = 18;\n', '\n', '    //\n', '    // @dev the main address to be forwarded all ether\n', '    //\n', '    address public constant BENEFICIARY = 0x651A3731f717a17777c9D8d6f152Aa9284978Ea3;\n', '\n', '    // @dev number of tokens one receives for every 1 ether they send\n', '    uint public constant PRICE = 8;\n', '\n', '    // avg block time = 15.2569 https://etherscan.io/chart/blocktime\n', '    uint public constant AVG_BLOCKS_24H = 5663;  // 3600 * 24 / 15.2569 = 5663.011489883266\n', '    uint public constant AVG_BLOCKS_02W = 79282; // 3600 * 24 * 14 / 15.2569 =  79282.16085836572\n', '\n', '    uint public constant MAX_ETHER_24H = 40 ether;\n', '    uint public constant ETHER_CAP     = 2660 ether;\n', '\n', '    uint public totalEther = 0;\n', '    uint public blockStart = 0;\n', '    uint public block24h   = 0;\n', '    uint public block02w   = 0;\n', '\n', '    // @dev address of the actual ICO contract to be deployed later\n', '    address public icoContract = 0x0;\n', '\n', '    //\n', '    // @dev owner authorized addresses to participate in this pre-ico\n', '    //\n', '    mapping(address => bool) contributors;\n', '\n', '\n', '    // @dev constructor function\n', '    function EtchReward(uint _blockStart) {\n', '        blockStart  = _blockStart;\n', '        block24h = blockStart + AVG_BLOCKS_24H;\n', '        block02w = blockStart + AVG_BLOCKS_02W;\n', '    }\n', '\n', '    //\n', '    // @notice the ability to transfer tokens is disabled\n', '    //\n', '    function transfer(address, uint) {\n', '        throw;\n', '    }\n', '\n', '    //\n', '    // @notice we DO allow sending ether directly to the contract address\n', '    //\n', '    function () payable {\n', '        buy();\n', '    }\n', '\n', '    //\n', '    // @dev modifiers\n', '    //\n', '    modifier onlyContributors() {\n', '        if(contributors[msg.sender] != true) {\n', '            throw;\n', '        }\n', '        _;\n', '    }\n', '\n', '    modifier onlyIcoContract() {\n', '        if(icoContract == 0x0 || msg.sender != icoContract) {\n', '            throw;\n', '        }\n', '        _;\n', '    }\n', '\n', '    //\n', '    // @dev call this to authorize participants to this pre-ico sale\n', '    // @param the authorized participant address\n', '    //\n', '    function addContributor(address _who) public onlyOwner {\n', '        contributors[_who] = true;\n', '    }\n', '\n', '    // @dev useful for contributor to check before sending ether\n', '    function isContributor(address _who) public constant returns(bool) {\n', '        return contributors[_who];\n', '    }\n', '\n', '    //\n', '    // @dev this will be later set by the owner of this contract\n', '    //\n', '    function setIcoContract(address _contract) public onlyOwner {\n', '        icoContract = _contract;\n', '    }\n', '\n', '    //\n', '    // @dev function called by the ICO contract to transform the tokens into ETCH tokens\n', '    //\n', '    function migrate(address _contributor) public\n', '    onlyIcoContract\n', '    whenNotPaused {\n', '\n', '        if(getBlock() < block02w) {\n', '            throw;\n', '        }\n', '        totalSupply = totalSupply.sub(balances[_contributor]);\n', '        balances[_contributor] = 0;\n', '    }\n', '\n', '    function buy() payable\n', '    nonReentrant\n', '    onlyContributors\n', '    whenNotPaused {\n', '\n', '        address _recipient = msg.sender;\n', '        uint blockNow = getBlock();\n', '\n', '        // are we before or after the sale period?\n', '        if(blockNow < blockStart || block02w <= blockNow) {\n', '            throw;\n', '        }\n', '\n', '        if (blockNow < block24h) {\n', '\n', '            // only one transaction is authorized\n', '            if (balances[_recipient] > 0) {\n', '                throw;\n', '            }\n', '\n', '            // only allowed to buy a certain amount\n', '            if (msg.value > MAX_ETHER_24H) {\n', '                throw;\n', '            }\n', '        }\n', '\n', "        // make sure we don't go over the ether cap\n", '        if (totalEther.add(msg.value) > ETHER_CAP) {\n', '            throw;\n', '        }\n', '\n', '        uint tokens = msg.value.mul(PRICE);\n', '        totalSupply = totalSupply.add(tokens);\n', '\n', '        balances[_recipient] = balances[_recipient].add(tokens);\n', '        totalEther.add(msg.value);\n', '\n', '        if (!BENEFICIARY.send(msg.value)) {\n', '            throw;\n', '        }\n', '    }\n', '\n', '    uint public blockNumber = 0;\n', '\n', '    function getBlock() public constant returns (uint) {\n', '        if(blockNumber != 0) {\n', '            return blockNumber;\n', '        }\n', '        return block.number;\n', '    }\n', '\n', '}']
