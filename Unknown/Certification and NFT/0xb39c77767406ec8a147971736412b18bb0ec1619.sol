['pragma solidity ^0.4.11;\n', '\n', '// ----------------------------------------------------------------------------\n', '// Dao.Casino Crowdsale Token Contract (Under Consideration)\n', '//\n', '// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2017\n', '// The MIT Licence (Under Consideration).\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths, borrowed from OpenZeppelin\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Add a number to another number, checking for overflows\n', '    // ------------------------------------------------------------------------\n', '    function add(uint a, uint b) internal returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a && c >= b);\n', '        return c;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Subtract a number from another number, checking for underflows\n', '    // ------------------------------------------------------------------------\n', '    function sub(uint a, uint b) internal returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        if (msg.sender != owner) throw;\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', ' \n', '    function acceptOwnership() {\n', '        if (msg.sender == newOwner) {\n', '            OwnershipTransferred(owner, newOwner);\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals\n', '// https://github.com/ethereum/EIPs/issues/20\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Token is Owned {\n', '    using SafeMath for uint;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total Supply\n', '    // ------------------------------------------------------------------------\n', '    uint256 _totalSupply = 0;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Balances for each account\n', '    // ------------------------------------------------------------------------\n', '    mapping(address => uint256) balances;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner of account approves the transfer of an amount to another account\n', '    // ------------------------------------------------------------------------\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the total token supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() constant returns (uint256 totalSupply) {\n', '        totalSupply = _totalSupply;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the account balance of another account with address _owner\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer the balance from owner&#39;s account to another account\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address _to, uint256 _amount) returns (bool success) {\n', '        if (balances[msg.sender] >= _amount                // User has balance\n', '            && _amount > 0                                 // Non-zero transfer\n', '            && balances[_to] + _amount > balances[_to]     // Overflow check\n', '        ) {\n', '            balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '            balances[_to] = balances[_to].add(_amount);\n', '            Transfer(msg.sender, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Allow _spender to withdraw from your account, multiple times, up to the\n', '    // _value amount. If this function is called again it overwrites the\n', '    // current allowance with _value.\n', '    // ------------------------------------------------------------------------\n', '    function approve(\n', '        address _spender,\n', '        uint256 _amount\n', '    ) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Spender of tokens transfer an amount of tokens from the token owner&#39;s\n', '    // balance to the spender&#39;s account. The owner of the tokens must already\n', '    // have approve(...)-d this transfer\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', '    ) returns (bool success) {\n', '        if (balances[_from] >= _amount                  // From a/c has balance\n', '            && allowed[_from][msg.sender] >= _amount    // Transfer approved\n', '            && _amount > 0                              // Non-zero transfer\n', '            && balances[_to] + _amount > balances[_to]  // Overflow check\n', '        ) {\n', '            balances[_from] = balances[_from].sub(_amount);\n', '            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '            balances[_to] = balances[_to].add(_amount);\n', '            Transfer(_from, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', '    // transferred to the spender&#39;s account\n', '    // ------------------------------------------------------------------------\n', '    function allowance(\n', '        address _owner, \n', '        address _spender\n', '    ) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender,\n', '        uint256 _value);\n', '}\n', '\n', '\n', 'contract DaoCasinoToken is ERC20Token {\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token information\n', '    // ------------------------------------------------------------------------\n', '    string public constant symbol = "BET";\n', '    string public constant name = "Dao.Casino";\n', '    uint8 public constant decimals = 18;\n', '\n', '    // Do not use `now` here\n', '    uint256 public STARTDATE;\n', '    uint256 public ENDDATE;\n', '\n', '    // Cap USD 25mil @ 296.1470 ETH/USD\n', '    uint256 public CAP;\n', '\n', '    // Cannot have a constant address here - Solidity bug\n', '    // https://github.com/ethereum/solidity/issues/2441\n', '    address public multisig;\n', '\n', '    function DaoCasinoToken(uint256 _start, uint256 _end, uint256 _cap, address _multisig) {\n', '        STARTDATE = _start;\n', '        ENDDATE   = _end;\n', '        CAP       = _cap;\n', '        multisig  = _multisig;\n', '    }\n', '\n', '    // > new Date("2017-06-29T13:00:00").getTime()/1000\n', '    // 1498741200\n', '\n', '    uint256 public totalEthers;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Tokens per ETH\n', '    // Day  1    : 2,000 BET = 1 Ether\n', '    // Days 2–14 : 1,800 BET = 1 Ether\n', '    // Days 15–17: 1,700 BET = 1 Ether\n', '    // Days 18–20: 1,600 BET = 1 Ether\n', '    // Days 21–23: 1,500 BET = 1 Ether\n', '    // Days 24–26: 1,400 BET = 1 Ether\n', '    // Days 27–28: 1,300 BET = 1 Ether\n', '    // ------------------------------------------------------------------------\n', '    function buyPrice() constant returns (uint256) {\n', '        return buyPriceAt(now);\n', '    }\n', '\n', '    function buyPriceAt(uint256 at) constant returns (uint256) {\n', '        if (at < STARTDATE) {\n', '            return 0;\n', '        } else if (at < (STARTDATE + 2 days)) {\n', '            return 2000;\n', '        } else if (at < (STARTDATE + 15 days)) {\n', '            return 1800;\n', '        } else if (at < (STARTDATE + 18 days)) {\n', '            return 1700;\n', '        } else if (at < (STARTDATE + 21 days)) {\n', '            return 1600;\n', '        } else if (at < (STARTDATE + 24 days)) {\n', '            return 1500;\n', '        } else if (at < (STARTDATE + 27 days)) {\n', '            return 1400;\n', '        } else if (at <= ENDDATE) {\n', '            return 1300;\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Buy tokens from the contract\n', '    // ------------------------------------------------------------------------\n', '    function () payable {\n', '        proxyPayment(msg.sender);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Exchanges can buy on behalf of participant\n', '    // ------------------------------------------------------------------------\n', '    function proxyPayment(address participant) payable {\n', '        // No contributions before the start of the crowdsale\n', '        require(now >= STARTDATE);\n', '        // No contributions after the end of the crowdsale\n', '        require(now <= ENDDATE);\n', '        // No 0 contributions\n', '        require(msg.value > 0);\n', '\n', '        // Add ETH raised to total\n', '        totalEthers = totalEthers.add(msg.value);\n', '        // Cannot exceed cap\n', '        require(totalEthers <= CAP);\n', '\n', '        // What is the BET to ETH rate\n', '        uint256 _buyPrice = buyPrice();\n', '\n', '        // Calculate #BET - this is safe as _buyPrice is known\n', '        // and msg.value is restricted to valid values\n', '        uint tokens = msg.value * _buyPrice;\n', '\n', '        // Check tokens > 0\n', '        require(tokens > 0);\n', '        // Compute tokens for foundation 30%\n', '        // Number of tokens restricted so maths is safe\n', '        uint multisigTokens = tokens * 3 / 7;\n', '\n', '        // Add to total supply\n', '        _totalSupply = _totalSupply.add(tokens);\n', '        _totalSupply = _totalSupply.add(multisigTokens);\n', '\n', '        // Add to balances\n', '        balances[participant] = balances[participant].add(tokens);\n', '        balances[multisig] = balances[multisig].add(multisigTokens);\n', '\n', '        // Log events\n', '        TokensBought(participant, msg.value, totalEthers, tokens,\n', '            multisigTokens, _totalSupply, _buyPrice);\n', '        Transfer(0x0, participant, tokens);\n', '        Transfer(0x0, multisig, multisigTokens);\n', '\n', '        // Move the funds to a safe wallet\n', '        multisig.transfer(msg.value);\n', '    }\n', '    event TokensBought(address indexed buyer, uint256 ethers, \n', '        uint256 newEtherBalance, uint256 tokens, uint256 multisigTokens, \n', '        uint256 newTotalSupply, uint256 buyPrice);\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner to add precommitment funding token balance before the crowdsale\n', '    // commences\n', '    // ------------------------------------------------------------------------\n', '    function addPrecommitment(address participant, uint balance) onlyOwner {\n', '        require(now < STARTDATE);\n', '        require(balance > 0);\n', '        balances[participant] = balances[participant].add(balance);\n', '        _totalSupply = _totalSupply.add(balance);\n', '        Transfer(0x0, participant, balance);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer the balance from owner&#39;s account to another account, with a\n', '    // check that the crowdsale is finalised\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address _to, uint _amount) returns (bool success) {\n', '        // Cannot transfer before crowdsale ends or cap reached\n', '        require(now > ENDDATE || totalEthers == CAP);\n', '        // Standard transfer\n', '        return super.transfer(_to, _amount);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Spender of tokens transfer an amount of tokens from the token owner&#39;s\n', '    // balance to another account, with a check that the crowdsale is\n', '    // finalised\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address _from, address _to, uint _amount) \n', '        returns (bool success)\n', '    {\n', '        // Cannot transfer before crowdsale ends or cap reached\n', '        require(now > ENDDATE || totalEthers == CAP);\n', '        // Standard transferFrom\n', '        return super.transferFrom(_from, _to, _amount);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint amount)\n', '      onlyOwner returns (bool success) \n', '    {\n', '        return ERC20Token(tokenAddress).transfer(owner, amount);\n', '    }\n', '}\n', '\n', 'library CreatorDaoCasinoToken {\n', '    function create(uint256 _start, uint256 _end, uint256 _cap, address _multisig) returns (DaoCasinoToken)\n', '    { return new DaoCasinoToken(_start, _end, _cap, _multisig); }\n', '\n', '    function version() constant returns (string)\n', '    { return "v0.6.3"; }\n', '}\n', '\n', '/**\n', ' * @title Builder based contract\n', ' */\n', 'contract Builder is Owned {\n', '    /**\n', '     * @dev this event emitted for every builded contract\n', '     */\n', '    event Builded(address indexed client, address indexed instance);\n', ' \n', '    /* Addresses builded contracts at sender */\n', '    mapping(address => address[]) public getContractsOf;\n', ' \n', '    /**\n', '     * @dev Get last address\n', '     * @return last address contract\n', '     */\n', '    function getLastContract() constant returns (address) {\n', '        var sender_contracts = getContractsOf[msg.sender];\n', '        return sender_contracts[sender_contracts.length - 1];\n', '    }\n', '\n', '    /* Building beneficiary */\n', '    address public beneficiary;\n', '\n', '    /**\n', '     * @dev Set beneficiary\n', '     * @param _beneficiary is address of beneficiary\n', '     */\n', '    function setBeneficiary(address _beneficiary) onlyOwner\n', '    { beneficiary = _beneficiary; }\n', '\n', '    /* Building cost  */\n', '    uint public buildingCostWei;\n', '\n', '    /**\n', '     * @dev Set building cost\n', '     * @param _buildingCostWei is cost\n', '     */\n', '    function setCost(uint _buildingCostWei) onlyOwner\n', '    { buildingCostWei = _buildingCostWei; }\n', '\n', '    /* Security check report */\n', '    string public securityCheckURI;\n', '\n', '    /**\n', '     * @dev Set security check report URI\n', '     * @param _uri is an URI to report\n', '     */\n', '    function setSecurityCheck(string _uri) onlyOwner\n', '    { securityCheckURI = _uri; }\n', '}\n', '\n', '/**\n', ' * @title BuilderDaoCasinoToken contract\n', ' */\n', 'contract BuilderDaoCasinoToken is Builder {\n', '    /**\n', '     * @dev Run script creation contract\n', '     * @param _client is a contract destination address (zero for sender)\n', '     * @return address new contract\n', '     */\n', '    function create(uint256 _start, uint256 _end, uint256 _cap, address _multisig, address _client) payable returns (address) {\n', '        if (buildingCostWei > 0 && beneficiary != 0) {\n', '            // Too low value\n', '            if (msg.value < buildingCostWei) throw;\n', '            // Beneficiary send\n', '            if (!beneficiary.send(buildingCostWei)) throw;\n', '            // Refund\n', '            if (msg.value > buildingCostWei) {\n', '                if (!msg.sender.send(msg.value - buildingCostWei)) throw;\n', '            }\n', '        } else {\n', '            // Refund all\n', '            if (msg.value > 0) {\n', '                if (!msg.sender.send(msg.value)) throw;\n', '            }\n', '        }\n', '\n', '        if (_client == 0)\n', '            _client = msg.sender;\n', ' \n', '        var inst = CreatorDaoCasinoToken.create(_start, _end, _cap, _multisig);\n', '        getContractsOf[_client].push(inst);\n', '        Builded(_client, inst);\n', '        inst.transferOwnership(_client);\n', '        return inst;\n', '    }\n', '}']
['pragma solidity ^0.4.11;\n', '\n', '// ----------------------------------------------------------------------------\n', '// Dao.Casino Crowdsale Token Contract (Under Consideration)\n', '//\n', '// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2017\n', '// The MIT Licence (Under Consideration).\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths, borrowed from OpenZeppelin\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Add a number to another number, checking for overflows\n', '    // ------------------------------------------------------------------------\n', '    function add(uint a, uint b) internal returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a && c >= b);\n', '        return c;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Subtract a number from another number, checking for underflows\n', '    // ------------------------------------------------------------------------\n', '    function sub(uint a, uint b) internal returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        if (msg.sender != owner) throw;\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', ' \n', '    function acceptOwnership() {\n', '        if (msg.sender == newOwner) {\n', '            OwnershipTransferred(owner, newOwner);\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals\n', '// https://github.com/ethereum/EIPs/issues/20\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Token is Owned {\n', '    using SafeMath for uint;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total Supply\n', '    // ------------------------------------------------------------------------\n', '    uint256 _totalSupply = 0;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Balances for each account\n', '    // ------------------------------------------------------------------------\n', '    mapping(address => uint256) balances;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner of account approves the transfer of an amount to another account\n', '    // ------------------------------------------------------------------------\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the total token supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() constant returns (uint256 totalSupply) {\n', '        totalSupply = _totalSupply;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the account balance of another account with address _owner\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from owner's account to another account\n", '    // ------------------------------------------------------------------------\n', '    function transfer(address _to, uint256 _amount) returns (bool success) {\n', '        if (balances[msg.sender] >= _amount                // User has balance\n', '            && _amount > 0                                 // Non-zero transfer\n', '            && balances[_to] + _amount > balances[_to]     // Overflow check\n', '        ) {\n', '            balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '            balances[_to] = balances[_to].add(_amount);\n', '            Transfer(msg.sender, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Allow _spender to withdraw from your account, multiple times, up to the\n', '    // _value amount. If this function is called again it overwrites the\n', '    // current allowance with _value.\n', '    // ------------------------------------------------------------------------\n', '    function approve(\n', '        address _spender,\n', '        uint256 _amount\n', '    ) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Spender of tokens transfer an amount of tokens from the token owner's\n", "    // balance to the spender's account. The owner of the tokens must already\n", '    // have approve(...)-d this transfer\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', '    ) returns (bool success) {\n', '        if (balances[_from] >= _amount                  // From a/c has balance\n', '            && allowed[_from][msg.sender] >= _amount    // Transfer approved\n', '            && _amount > 0                              // Non-zero transfer\n', '            && balances[_to] + _amount > balances[_to]  // Overflow check\n', '        ) {\n', '            balances[_from] = balances[_from].sub(_amount);\n', '            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '            balances[_to] = balances[_to].add(_amount);\n', '            Transfer(_from, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    // ------------------------------------------------------------------------\n', '    function allowance(\n', '        address _owner, \n', '        address _spender\n', '    ) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender,\n', '        uint256 _value);\n', '}\n', '\n', '\n', 'contract DaoCasinoToken is ERC20Token {\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token information\n', '    // ------------------------------------------------------------------------\n', '    string public constant symbol = "BET";\n', '    string public constant name = "Dao.Casino";\n', '    uint8 public constant decimals = 18;\n', '\n', '    // Do not use `now` here\n', '    uint256 public STARTDATE;\n', '    uint256 public ENDDATE;\n', '\n', '    // Cap USD 25mil @ 296.1470 ETH/USD\n', '    uint256 public CAP;\n', '\n', '    // Cannot have a constant address here - Solidity bug\n', '    // https://github.com/ethereum/solidity/issues/2441\n', '    address public multisig;\n', '\n', '    function DaoCasinoToken(uint256 _start, uint256 _end, uint256 _cap, address _multisig) {\n', '        STARTDATE = _start;\n', '        ENDDATE   = _end;\n', '        CAP       = _cap;\n', '        multisig  = _multisig;\n', '    }\n', '\n', '    // > new Date("2017-06-29T13:00:00").getTime()/1000\n', '    // 1498741200\n', '\n', '    uint256 public totalEthers;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Tokens per ETH\n', '    // Day  1    : 2,000 BET = 1 Ether\n', '    // Days 2–14 : 1,800 BET = 1 Ether\n', '    // Days 15–17: 1,700 BET = 1 Ether\n', '    // Days 18–20: 1,600 BET = 1 Ether\n', '    // Days 21–23: 1,500 BET = 1 Ether\n', '    // Days 24–26: 1,400 BET = 1 Ether\n', '    // Days 27–28: 1,300 BET = 1 Ether\n', '    // ------------------------------------------------------------------------\n', '    function buyPrice() constant returns (uint256) {\n', '        return buyPriceAt(now);\n', '    }\n', '\n', '    function buyPriceAt(uint256 at) constant returns (uint256) {\n', '        if (at < STARTDATE) {\n', '            return 0;\n', '        } else if (at < (STARTDATE + 2 days)) {\n', '            return 2000;\n', '        } else if (at < (STARTDATE + 15 days)) {\n', '            return 1800;\n', '        } else if (at < (STARTDATE + 18 days)) {\n', '            return 1700;\n', '        } else if (at < (STARTDATE + 21 days)) {\n', '            return 1600;\n', '        } else if (at < (STARTDATE + 24 days)) {\n', '            return 1500;\n', '        } else if (at < (STARTDATE + 27 days)) {\n', '            return 1400;\n', '        } else if (at <= ENDDATE) {\n', '            return 1300;\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Buy tokens from the contract\n', '    // ------------------------------------------------------------------------\n', '    function () payable {\n', '        proxyPayment(msg.sender);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Exchanges can buy on behalf of participant\n', '    // ------------------------------------------------------------------------\n', '    function proxyPayment(address participant) payable {\n', '        // No contributions before the start of the crowdsale\n', '        require(now >= STARTDATE);\n', '        // No contributions after the end of the crowdsale\n', '        require(now <= ENDDATE);\n', '        // No 0 contributions\n', '        require(msg.value > 0);\n', '\n', '        // Add ETH raised to total\n', '        totalEthers = totalEthers.add(msg.value);\n', '        // Cannot exceed cap\n', '        require(totalEthers <= CAP);\n', '\n', '        // What is the BET to ETH rate\n', '        uint256 _buyPrice = buyPrice();\n', '\n', '        // Calculate #BET - this is safe as _buyPrice is known\n', '        // and msg.value is restricted to valid values\n', '        uint tokens = msg.value * _buyPrice;\n', '\n', '        // Check tokens > 0\n', '        require(tokens > 0);\n', '        // Compute tokens for foundation 30%\n', '        // Number of tokens restricted so maths is safe\n', '        uint multisigTokens = tokens * 3 / 7;\n', '\n', '        // Add to total supply\n', '        _totalSupply = _totalSupply.add(tokens);\n', '        _totalSupply = _totalSupply.add(multisigTokens);\n', '\n', '        // Add to balances\n', '        balances[participant] = balances[participant].add(tokens);\n', '        balances[multisig] = balances[multisig].add(multisigTokens);\n', '\n', '        // Log events\n', '        TokensBought(participant, msg.value, totalEthers, tokens,\n', '            multisigTokens, _totalSupply, _buyPrice);\n', '        Transfer(0x0, participant, tokens);\n', '        Transfer(0x0, multisig, multisigTokens);\n', '\n', '        // Move the funds to a safe wallet\n', '        multisig.transfer(msg.value);\n', '    }\n', '    event TokensBought(address indexed buyer, uint256 ethers, \n', '        uint256 newEtherBalance, uint256 tokens, uint256 multisigTokens, \n', '        uint256 newTotalSupply, uint256 buyPrice);\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner to add precommitment funding token balance before the crowdsale\n', '    // commences\n', '    // ------------------------------------------------------------------------\n', '    function addPrecommitment(address participant, uint balance) onlyOwner {\n', '        require(now < STARTDATE);\n', '        require(balance > 0);\n', '        balances[participant] = balances[participant].add(balance);\n', '        _totalSupply = _totalSupply.add(balance);\n', '        Transfer(0x0, participant, balance);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from owner's account to another account, with a\n", '    // check that the crowdsale is finalised\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address _to, uint _amount) returns (bool success) {\n', '        // Cannot transfer before crowdsale ends or cap reached\n', '        require(now > ENDDATE || totalEthers == CAP);\n', '        // Standard transfer\n', '        return super.transfer(_to, _amount);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Spender of tokens transfer an amount of tokens from the token owner's\n", '    // balance to another account, with a check that the crowdsale is\n', '    // finalised\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address _from, address _to, uint _amount) \n', '        returns (bool success)\n', '    {\n', '        // Cannot transfer before crowdsale ends or cap reached\n', '        require(now > ENDDATE || totalEthers == CAP);\n', '        // Standard transferFrom\n', '        return super.transferFrom(_from, _to, _amount);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint amount)\n', '      onlyOwner returns (bool success) \n', '    {\n', '        return ERC20Token(tokenAddress).transfer(owner, amount);\n', '    }\n', '}\n', '\n', 'library CreatorDaoCasinoToken {\n', '    function create(uint256 _start, uint256 _end, uint256 _cap, address _multisig) returns (DaoCasinoToken)\n', '    { return new DaoCasinoToken(_start, _end, _cap, _multisig); }\n', '\n', '    function version() constant returns (string)\n', '    { return "v0.6.3"; }\n', '}\n', '\n', '/**\n', ' * @title Builder based contract\n', ' */\n', 'contract Builder is Owned {\n', '    /**\n', '     * @dev this event emitted for every builded contract\n', '     */\n', '    event Builded(address indexed client, address indexed instance);\n', ' \n', '    /* Addresses builded contracts at sender */\n', '    mapping(address => address[]) public getContractsOf;\n', ' \n', '    /**\n', '     * @dev Get last address\n', '     * @return last address contract\n', '     */\n', '    function getLastContract() constant returns (address) {\n', '        var sender_contracts = getContractsOf[msg.sender];\n', '        return sender_contracts[sender_contracts.length - 1];\n', '    }\n', '\n', '    /* Building beneficiary */\n', '    address public beneficiary;\n', '\n', '    /**\n', '     * @dev Set beneficiary\n', '     * @param _beneficiary is address of beneficiary\n', '     */\n', '    function setBeneficiary(address _beneficiary) onlyOwner\n', '    { beneficiary = _beneficiary; }\n', '\n', '    /* Building cost  */\n', '    uint public buildingCostWei;\n', '\n', '    /**\n', '     * @dev Set building cost\n', '     * @param _buildingCostWei is cost\n', '     */\n', '    function setCost(uint _buildingCostWei) onlyOwner\n', '    { buildingCostWei = _buildingCostWei; }\n', '\n', '    /* Security check report */\n', '    string public securityCheckURI;\n', '\n', '    /**\n', '     * @dev Set security check report URI\n', '     * @param _uri is an URI to report\n', '     */\n', '    function setSecurityCheck(string _uri) onlyOwner\n', '    { securityCheckURI = _uri; }\n', '}\n', '\n', '/**\n', ' * @title BuilderDaoCasinoToken contract\n', ' */\n', 'contract BuilderDaoCasinoToken is Builder {\n', '    /**\n', '     * @dev Run script creation contract\n', '     * @param _client is a contract destination address (zero for sender)\n', '     * @return address new contract\n', '     */\n', '    function create(uint256 _start, uint256 _end, uint256 _cap, address _multisig, address _client) payable returns (address) {\n', '        if (buildingCostWei > 0 && beneficiary != 0) {\n', '            // Too low value\n', '            if (msg.value < buildingCostWei) throw;\n', '            // Beneficiary send\n', '            if (!beneficiary.send(buildingCostWei)) throw;\n', '            // Refund\n', '            if (msg.value > buildingCostWei) {\n', '                if (!msg.sender.send(msg.value - buildingCostWei)) throw;\n', '            }\n', '        } else {\n', '            // Refund all\n', '            if (msg.value > 0) {\n', '                if (!msg.sender.send(msg.value)) throw;\n', '            }\n', '        }\n', '\n', '        if (_client == 0)\n', '            _client = msg.sender;\n', ' \n', '        var inst = CreatorDaoCasinoToken.create(_start, _end, _cap, _multisig);\n', '        getContractsOf[_client].push(inst);\n', '        Builded(_client, inst);\n', '        inst.transferOwnership(_client);\n', '        return inst;\n', '    }\n', '}']
