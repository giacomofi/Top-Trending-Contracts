['pragma solidity ^0.4.11;\n', '/**\n', '* Eth Hodler (f.k.a. Hodl DAO) and ERC20 token\n', '* Author: CurrencyTycoon on GitHub\n', '* License: MIT\n', '* Date: 2017\n', '*\n', '* Deploy with the following args:\n', '* "Eth Hodler", 18, "EHDL"\n', '*\n', '*/\n', 'contract EthHodler {\n', '    /* ERC20 Public variables of the token */\n', "    string public constant version = 'HDAO 0.7';\n", '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '\n', '    /* ERC20 This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '\n', '    /* store the block number when a withdrawal has been requested*/\n', '    mapping (address => withdrawalRequest) public withdrawalRequests;\n', '    struct withdrawalRequest {\n', '    uint sinceTime;\n', '    uint256 amount;\n', '    }\n', '\n', '    /**\n', '     * feePot collects fees from quick withdrawals. This gets re-distributed to slow-withdrawals\n', '    */\n', '    uint256 public feePot;\n', '\n', '    uint public timeWait = 30 days;\n', '    //uint public timeWait = 1 minutes; // uncomment for TestNet\n', '\n', '    uint256 public constant initialSupply = 0;\n', '\n', '    /**\n', '     * ERC20 events these generate a public event on the blockchain that will notify clients\n', '    */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    event WithdrawalQuick(address indexed by, uint256 amount, uint256 fee); // quick withdrawal done\n', '    event IncorrectFee(address indexed by, uint256 feeRequired);  // incorrect fee paid for quick withdrawal\n', '    event WithdrawalStarted(address indexed by, uint256 amount);\n', '    event WithdrawalDone(address indexed by, uint256 amount, uint256 reward); // amount is the amount that was used to calculate reward\n', '    event WithdrawalPremature(address indexed by, uint timeToWait); // Needs to wait timeToWait before withdrawal unlocked\n', '    event Deposited(address indexed by, uint256 amount);\n', '\n', '    /**\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', "     * In our case, there's no initial supply. Tokens will be created as ether is sent\n", '     * to the fall-back function. Then tokens are burned when ether is withdrawn.\n', '     */\n', '    function EthHodler(\n', '    string tokenName,\n', '    uint8 decimalUnits,\n', '    string tokenSymbol\n', '    ) {\n', '\n', '        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens (0 in this case)\n', '        totalSupply = initialSupply;                        // Update total supply (0 in this case)\n', '        name = tokenName;                                   // Set the name for display purposes\n', '        symbol = tokenSymbol;                               // Set the symbol for display purposes\n', '        decimals = decimalUnits;                            // Amount of decimals for display purposes\n', '    }\n', '\n', '    /**\n', '     * notPendingWithdrawal modifier guards the function from executing when a\n', '     * withdrawal has been requested and is currently pending\n', '     */\n', '    modifier notPendingWithdrawal {\n', '        if (withdrawalRequests[msg.sender].sinceTime > 0) throw;\n', '        _;\n', '    }\n', '\n', '    /** ERC20 - transfer sends tokens\n', '     * @notice send `_value` token to `_to` from `msg.sender`\n', '     * @param _to The address of the recipient\n', '     * @param _value The amount of token to be transferred\n', '     * @return Whether the transfer was successful or not\n', '     */\n', '    function transfer(address _to, uint256 _value) notPendingWithdrawal {\n', '        if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\n', "        if (withdrawalRequests[_to].sinceTime > 0) throw;    // can't move tokens when _to is pending withdrawal\n", '        balanceOf[msg.sender] -= _value;                     // Subtract from the sender\n', '        balanceOf[_to] += _value;                            // Add the same to the recipient\n', '        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n', '    }\n', '\n', '    /** ERC20 approve allows another contract to spend some tokens in your behalf\n', '     * @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '     * @param _spender The address of the account able to transfer the tokens\n', '     * @param _value The amount of tokens to be approved for transfer\n', '     * @return Whether the approval was successful or not\n', '     *\n', '     *\n', "     * Note, there are some edge-cases with the ERC-20 approve mechanism. In this case a 'bounds check'\n", "     * was added to make sure Alice cant' approve Bob for more tokens than she has.\n", '     * The assumptions are that these scenarios could still happen if not mitigated by Alice:\n', '     *\n', '     * Scenario 1:\n', '     *\n', '     * The following scenario could be the expected outcome by Alice, but if not, Alice would need to set\n', '     * her approval to Bob to 0 before Alice purchases more tokens.\n', '     *\n', '     *  1. Alice has 100 tokens.\n', '     *  2. Alice approves 50 tokens for Bob.\n', '     *  3. Alice approves 100 tokens for Charles\n', '     *  4. Bob calls transferFrom and receives his 50 tokens.\n', '     *  5. Charles calls transferFrom and receives the remaining 50 tokens\n', '     *  6. Charles still has an approval for 50 more tokens from Alice, even though she now owns 0 tokens.\n', '     *  7. Alice purchases 50 more tokens\n', '     *  8. Charles sees this, and immediately calls transferFrom and receives those 50 tokens.\n', '     *\n', '     * Scenario 2:\n', '     *\n', '     * This is a race condition. To mitigate this problem, Alice should set the allowance to 0 in step 2,\n', "     * then wait until it's mined, then if Bob didn't take the 100 she can set to 50. (Otherwise Bob may\n", '     * potentially get 150 tokens)\n', '     *\n', '     *\n', '     *  1. Alice approves Bob for 100,\n', '     *  2. Alice changes it to 50\n', "     *  3. Bob sees the change in the mempool before it's mined, and sends a new transaction\n", '     *     that will hopefully win the race and withdraw the 100 first, meanwhile the 50 will\n', '     *     be mined after and allow Bob to withdraw another 50.\n', '     *\n', '     *\n', '     */\n', '    function approve(address _spender, uint256 _value) notPendingWithdrawal\n', '    returns (bool success) {\n', '\n', '        // The following line has been commented out after peer review #2\n', '        // It may be possible that Alice can pre-approve the recipient in advance, before she has a balance.\n', '        // eg. Alice may approve a total lifetime amount for her child to spend, but only fund her account monthly.\n', '        // It also allows her to have multiple equal approvees\n', '\n', "        //if (balanceOf[msg.sender] < _value) return false; // Don't allow more than they currently have (bounds check)\n", '\n', '        // To change the approve amount you first have to reduce the addressesÂ´\n', '        //  allowance to zero by calling `approve(_spender,0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        if ((_value != 0) && (allowance[msg.sender][_spender] != 0)) throw;\n', '        allowance[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;                                      // we must return a bool as part of the ERC20\n', '    }\n', '\n', '\n', '    /**\n', '     * ERC-20 Approves and then calls the receiving contract\n', '    */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) notPendingWithdrawal\n', '    returns (bool success) {\n', '\n', '        if (!approve(_spender, _value)) return false;\n', '\n', "        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\n", '        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '        if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) {\n', '            throw;\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * ERC20 A contract attempts to get the coins. Note: We are not allowing a transfer if\n', '     * either the from or to address is pending withdrawal\n', '     * @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value The amount of token to be transferred\n', '     * @return Whether the transfer was successful or not\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '    returns (bool success) {\n', "        // note that we can't use notPendingWithdrawal modifier here since this function does a transfer\n", '        // on the behalf of _from\n', "        if (withdrawalRequests[_from].sinceTime > 0) throw;   // can't move tokens when _from is pending withdrawal\n", "        if (withdrawalRequests[_to].sinceTime > 0) throw;     // can't move tokens when _to is pending withdrawal\n", '        if (balanceOf[_from] < _value) throw;                 // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows\n', '        if (_value > allowance[_from][msg.sender]) throw;     // Check allowance\n', '        balanceOf[_from] -= _value;                           // Subtract from the sender\n', '        balanceOf[_to] += _value;                             // Add the same to the recipient\n', '        allowance[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * withdrawalInitiate initiates the withdrawal by going into a waiting period\n', '     * It remembers the block number & amount held at the time of request.\n', '     * Tokens cannot be moved out during the waiting period, locking the tokens until then.\n', '     * After the waiting period finishes, the call withdrawalComplete\n', '     *\n', '     * Gas: 64490\n', '     *\n', '     */\n', '    function withdrawalInitiate() notPendingWithdrawal {\n', '        WithdrawalStarted(msg.sender, balanceOf[msg.sender]);\n', '        withdrawalRequests[msg.sender] = withdrawalRequest(now, balanceOf[msg.sender]);\n', '    }\n', '\n', '    /**\n', '     * withdrawalComplete is called after the waiting period. The ether will be\n', '     * returned to the caller and the tokens will be burned.\n', '     * A reward will be issued based on the current amount in the feePot, relative to the\n', '     * amount that was requested for withdrawal when withdrawalInitiate() was called.\n', '     *\n', '     * Gas: 30946\n', '     */\n', '    function withdrawalComplete() returns (bool) {\n', '        withdrawalRequest r = withdrawalRequests[msg.sender];\n', '        if (r.sinceTime == 0) throw;\n', '        if ((r.sinceTime + timeWait) > now) {\n', '            // holder needs to wait some more blocks\n', '            WithdrawalPremature(msg.sender, r.sinceTime + timeWait - now);\n', '            return false;\n', '        }\n', '        uint256 amount = withdrawalRequests[msg.sender].amount;\n', '        uint256 reward = calculateReward(r.amount);\n', '        withdrawalRequests[msg.sender].sinceTime = 0;   // This will unlock the holders tokens\n', '        withdrawalRequests[msg.sender].amount = 0;      // clear the amount that was requested\n', '\n', '        if (reward > 0) {\n', '            if (feePot - reward > feePot) {             // underflow check\n', '                feePot = 0;\n', '            } else {\n', '                feePot -= reward;\n', '            }\n', '        }\n', '        doWithdrawal(reward);                           // burn the tokens and send back the ether\n', '        WithdrawalDone(msg.sender, amount, reward);\n', '        return true;\n', '\n', '    }\n', '\n', '    /**\n', '     * Reward is based on the amount held, relative to total supply of tokens.\n', '     */\n', '    function calculateReward(uint256 v) constant returns (uint256) {\n', '        uint256 reward = 0;\n', '        if (feePot > 0) {\n', '            reward = feePot * v / totalSupply; // assuming that if feePot > 0 then also totalSupply > 0\n', '        }\n', '        return reward;\n', '    }\n', '\n', '    /** calculate the fee for quick withdrawal\n', '     */\n', '    function calculateFee(uint256 v) constant returns  (uint256) {\n', '        uint256 feeRequired = v / 100; // 1%\n', '        return feeRequired;\n', '    }\n', '\n', '    /**\n', '     * Quick withdrawal, needs to send ether to this function for the fee.\n', '     *\n', '     * Gas use: ? (including call to processWithdrawal)\n', '    */\n', '    function quickWithdraw() payable notPendingWithdrawal returns (bool) {\n', '        uint256 amount = balanceOf[msg.sender];\n', '        if (amount == 0) throw;\n', '        // calculate required fee\n', '        uint256 feeRequired = calculateFee(amount);\n', '        if (msg.value != feeRequired) {\n', '            IncorrectFee(msg.sender, feeRequired);   // notify the exact fee that needs to be sent\n', '            throw;\n', '        }\n', '        feePot += msg.value;                         // add fee to the feePot\n', '        doWithdrawal(0);                             // withdraw, 0 reward\n', '        WithdrawalDone(msg.sender, amount, 0);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * do withdrawal\n', '     */\n', '    function doWithdrawal(uint256 extra) internal {\n', '        uint256 amount = balanceOf[msg.sender];\n', '        if (amount == 0) throw;                      // cannot withdraw\n', '        if (amount + extra > this.balance) {\n', "            throw;                                   // contract doesn't have enough balance\n", '        }\n', '\n', '        balanceOf[msg.sender] = 0;\n', '        if (totalSupply < totalSupply - amount) {\n', "            throw;                                   // don't let it underflow (should not happen since amount <= totalSupply)\n", '        } else {\n', '            totalSupply -= amount;                   // deflate the supply!\n', '        }\n', '        Transfer(msg.sender, 0, amount);             // burn baby burn\n', '        if (!msg.sender.send(amount + extra)) throw; // return back the ether or rollback if failed\n', '    }\n', '\n', '\n', '    /**\n', '     * Fallback function when sending ether to the contract\n', '     * Gas use: 65051\n', '    */\n', '    function () payable notPendingWithdrawal {\n', '        uint256 amount = msg.value;         // amount that was sent\n', '        if (amount == 0) throw;             // need to send some ETH\n', '        balanceOf[msg.sender] += amount;    // mint new tokens\n', '        totalSupply += amount;              // track the supply\n', '        Transfer(0, msg.sender, amount);    // notify of the event\n', '        Deposited(msg.sender, amount);\n', '    }\n', '}']