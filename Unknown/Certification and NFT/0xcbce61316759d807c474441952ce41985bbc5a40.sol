['pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * ERC 20 token\n', ' *\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract MoacToken  {\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping(address => uint256) redeem;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    uint256 public totalSupply;\n', '    string public name = "MoacToken Token";\n', '    string public symbol = "MOAC";\n', '    uint public decimals = 18;\n', '\n', '    uint public startBlock; //crowdsale start block (set in constructor)\n', '    uint public endBlock; //crowdsale end block (set in constructor)\n', '\n', '    address public founder = 0x0;\n', '    address public owner = 0x0;\n', '\n', '    // signer address \n', '    address public signer = 0x0;\n', '\n', '    // price is defined by levels\n', '    uint256 public levelOneTokenNum = 30000000 * 10**18; //first level \n', '    uint256 public levelTwoTokenNum = 50000000 * 10**18; //second level \n', '    uint256 public levelThreeTokenNum = 75000000 * 10**18; //third level \n', '    uint256 public levelFourTokenNum = 100000000 * 10**18; //fourth level \n', '    \n', '    //max amount raised during crowdsale\n', '    uint256 public etherCap = 1000000 * 10**18;  \n', '    uint public transferLockup = 370285; \n', '    uint public founderLockup = 86400; \n', '    \n', '    uint256 public founderAllocation = 100 * 10**16; \n', '    bool public founderAllocated = false; \n', '\n', '    uint256 public saleTokenSupply = 0; \n', '    uint256 public saleEtherRaised = 0; \n', '    bool public halted = false; \n', '\n', '    event Donate(uint256 eth, uint256 fbt);\n', '    event AllocateFounderTokens(address indexed sender);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event print(bytes32 msg);\n', '\n', '    function MoacToken(address founderInput, address signerInput, uint startBlockInput, uint endBlockInput) {\n', '        founder = founderInput;\n', '        signer = signerInput;\n', '        startBlock = startBlockInput;\n', '        endBlock = endBlockInput;\n', '        owner = msg.sender;\n', '    }\n', '\n', '    //price based on current token supply\n', '    function price() constant returns(uint256) {\n', '        if (totalSupply<levelOneTokenNum) return 1600;\n', '        if (totalSupply>=levelOneTokenNum && totalSupply < levelTwoTokenNum) return 1000;\n', '        if (totalSupply>=levelTwoTokenNum && totalSupply < levelThreeTokenNum) return 800;\n', '        if (totalSupply>=levelThreeTokenNum && totalSupply < levelFourTokenNum) return 730;\n', '        if (totalSupply>=levelFourTokenNum) return 680;\n', '        return 1600;\n', '    }\n', '\n', '    // price() exposed for unit tests\n', '    function testPrice(uint256 currentSupply) constant returns(uint256) {\n', '        if (currentSupply<levelOneTokenNum) return 1600;\n', '        if (currentSupply>=levelOneTokenNum && currentSupply < levelTwoTokenNum) return 1000;\n', '        if (currentSupply>=levelTwoTokenNum && currentSupply < levelThreeTokenNum) return 800;\n', '        if (currentSupply>=levelThreeTokenNum && currentSupply < levelFourTokenNum) return 730;\n', '        if (currentSupply>=levelFourTokenNum) return 680;\n', '        return 1600;\n', '    }\n', '\n', '\n', '    // Donate entry point\n', '    function donate( bytes32 hash) payable {\n', '        print(hash);\n', '        if (block.number<startBlock || block.number>endBlock || (saleEtherRaised + msg.value)>etherCap || halted) throw;\n', '        uint256 tokens = (msg.value * price());\n', '        balances[msg.sender] = (balances[msg.sender] + tokens);\n', '        totalSupply = (totalSupply + tokens);\n', '        saleEtherRaised = (saleEtherRaised + msg.value);\n', '        //immediately send Ether to founder address\n', '        if (!founder.call.value(msg.value)()) throw; \n', '        Donate(msg.value, tokens);\n', '    }\n', '\n', '    /**\n', '     * Set up founder address token balance.\n', '     */\n', '    function allocateFounderTokens() {\n', '        if (msg.sender!=founder) throw;\n', '        if (block.number <= endBlock + founderLockup) throw;\n', '        if (founderAllocated) throw;\n', '        balances[founder] = (balances[founder] + saleTokenSupply * founderAllocation / (1 ether));\n', '        totalSupply = (totalSupply + saleTokenSupply * founderAllocation / (1 ether));\n', '        founderAllocated = true;\n', '        AllocateFounderTokens(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * For offline donation, executed by signer only. only available during the sale\n', '     */\n', '    function offlineDonate(uint256 offlineTokenNum, uint256 offlineEther) {\n', '        if (msg.sender!=signer) throw;\n', '        if (block.number >= endBlock) throw; //offline can be done only before end block\n', '        \n', '        //check if overflow\n', '        if( (totalSupply +offlineTokenNum) > totalSupply && (saleEtherRaised + offlineEther)>saleEtherRaised){\n', '            totalSupply = (totalSupply + offlineTokenNum);\n', '            balances[founder] = (balances[founder] + offlineTokenNum );\n', '            saleEtherRaised = (saleEtherRaised + offlineEther);\n', '        }\n', '    }\n', '\n', '\n', '    /** \n', '     * emergency adjust if incorrectly set by signer, only available during the sale\n', '     */\n', '    function offlineAdjust(uint256 offlineTokenNum, uint256 offlineEther) {\n', '        if (msg.sender!=founder) throw;\n', '        if (block.number >= endBlock) throw; //offline can be done only before end block\n', '        \n', '        //check if overflow\n', '        if( (totalSupply - offlineTokenNum) > 0 && (saleEtherRaised - offlineEther) > 0 && (balances[founder] - offlineTokenNum)>0){\n', '            totalSupply = (totalSupply - offlineTokenNum);\n', '            balances[founder] = (balances[founder] - offlineTokenNum );\n', '            saleEtherRaised = (saleEtherRaised - offlineEther);\n', '        }\n', '    }\n', '\n', '\n', '    //check for redeemed balance\n', '    function redeemBalanceOf(address _owner) constant returns (uint256 balance) {\n', '        return redeem[_owner];\n', '    }\n', '\n', '    /**\n', '     * redeem token in MOAC network\n', '     */\n', '    function redeemToken(uint256 tokenNum) {\n', '        if (block.number <= (endBlock + transferLockup) && msg.sender!=founder) throw; \n', '        if( balances[msg.sender] < tokenNum ) throw;\n', '        balances[msg.sender] = (balances[msg.sender] - tokenNum );\n', '        redeem[msg.sender] += tokenNum;\n', '    }\n', '\n', '    /**\n', '     * restore redeemed back to user, only founder can do, if user made an error\n', '     */\n', '    function redeemRestore(address _to, uint256 tokenNum){\n', '        if( msg.sender != founder) throw;\n', '        if( redeem[_to] < tokenNum ) throw;\n', '\n', '        redeem[_to] -= tokenNum;\n', '        balances[_to] += tokenNum;\n', '    }\n', '\n', '\n', '    /**\n', '     * Emergency Stop ICO.\n', '     */\n', '    function halt() {\n', '        if (msg.sender!=founder) throw;\n', '        halted = true;\n', '    }\n', '\n', '    function unhalt() {\n', '        if (msg.sender!=founder) throw;\n', '        halted = false;\n', '    }\n', '\n', '    // only owner can kill\n', '    function kill() { \n', '        if (msg.sender == owner) suicide(owner); \n', '    }\n', '\n', '\n', '    /**\n', '     * Change founder address (where ICO ETH is being forwarded).\n', '     */\n', '    function changeFounder(address newFounder) {\n', '        if (msg.sender!=founder) throw;\n', '        founder = newFounder;\n', '    }\n', '\n', '    /**\n', '     * ERC 20 Standard Token interface transfer function\n', '     */\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        if (block.number <= (endBlock + transferLockup) && msg.sender!=founder) throw;\n', '\n', "        //Default assumes totalSupply can't be over max (2^256 - 1).\n", '        if (balances[msg.sender] >= _value && (balances[_to] + _value) > balances[_to]) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '\n', '    }\n', '\n', '    /**\n', '     * ERC 20 Standard Token interface transfer function\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (block.number <= (endBlock + transferLockup) && msg.sender!=founder) throw;\n', '\n', '        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && (balances[_to] + _value) > balances[_to]) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    /**\n', '     * Do not allow direct deposits.\n', '     *\n', '     * All crowdsale depositors must have read the legal agreement.\n', '     * This is confirmed by having them signing the terms of service on the website.\n', '     * The give their crowdsale Ethereum source address on the website.\n', '     * donate() takes data as input and rejects all deposits that do not have\n', '     * signature you receive after reading terms of service.\n', '     *\n', '     */\n', '    function() {\n', '        throw;\n', '    }\n', '\n', '}']