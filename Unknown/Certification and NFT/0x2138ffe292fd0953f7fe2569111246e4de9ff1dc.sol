['pragma solidity ^0.4.15;\n', '\n', '/*\n', '\n', '    Crypto Market Prices via Ethereum Smart Contract\n', '\n', '    A community driven smart contract that lets your contracts use fiat\n', '    amounts in USD, EURO, and GBP. Need to charge $10.50 for a contract call?\n', '    With this contract, you can convert ETH and other crypto&#39;s.\n', '\n', '    Repo: https://github.com/hunterlong/marketprice\n', '    Look at repo for more token examples\n', '\n', '    Examples:\n', '\n', '      MarketPrice price = MarketPrice(CONTRACT_ADDRESS);\n', '\n', '      uint256 ethCent = price.USD(0);        // returns $0.01 worth of ETH in USD.\n', '      uint256 weiAmount = ethCent * 2500     // returns $25.00 worth of ETH in USD\n', '      require(msg.value == weiAmount);       // require $25.00 worth of ETH as a payment\n', '\n', '    @author Hunter Long\n', '*/\n', '\n', 'contract MarketPrice {\n', '\n', '    mapping(uint => Token) public tokens;\n', '\n', '    address public sender;\n', '    address public creator;\n', '\n', '    event NewPrice(uint id, string token);\n', '    event DeletePrice(uint id);\n', '    event UpdatedPrice(uint id);\n', '    event RequestUpdate(uint id);\n', '\n', '    struct Token {\n', '        string name;\n', '        uint256 eth;\n', '        uint256 usd;\n', '        uint256 eur;\n', '        uint256 gbp;\n', '        uint block;\n', '    }\n', '\n', '    // initialize function\n', '    function MarketPrice() {\n', '        creator = msg.sender;\n', '        sender = msg.sender;\n', '    }\n', '\n', '    // returns the Token struct\n', '    function getToken(uint _id) internal constant returns (Token) {\n', '        return tokens[_id];\n', '    }\n', '\n', '    // returns rate price of coin related to ETH.\n', '    function ETH(uint _id) constant returns (uint256) {\n', '        return tokens[_id].eth;\n', '    }\n', '\n', '    // returns 0.01 value in United States Dollar\n', '    function USD(uint _id) constant returns (uint256) {\n', '        return tokens[_id].usd;\n', '    }\n', '\n', '    // returns 0.01 value in Euro\n', '    function EUR(uint _id) constant returns (uint256) {\n', '        return tokens[_id].eur;\n', '    }\n', '\n', '    // returns 0.01 value in British Pound\n', '    function GBP(uint _id) constant returns (uint256) {\n', '        return tokens[_id].gbp;\n', '    }\n', '\n', '    // returns block when price was updated last\n', '    function updatedAt(uint _id) constant returns (uint) {\n', '        return tokens[_id].block;\n', '    }\n', '\n', '    // update market rates in USD, EURO, and GBP for a specific coin\n', '    function update(uint id, string _token, uint256 eth, uint256 usd, uint256 eur, uint256 gbp) external {\n', '        require(msg.sender==sender);\n', '        tokens[id] = Token(_token, eth, usd, eur, gbp, block.number);\n', '        NewPrice(id, _token);\n', '    }\n', '\n', '    // delete a token from the contract\n', '    function deleteToken(uint id) {\n', '        require(msg.sender==sender);\n', '        DeletePrice(id);\n', '        delete tokens[id];\n', '    }\n', '\n', '    // change creator address\n', '    function changeCreator(address _creator){\n', '        require(msg.sender==creator);\n', '        creator = _creator;\n', '    }\n', '\n', '    // change sender address\n', '    function changeSender(address _sender){\n', '        require(msg.sender==creator);\n', '        sender = _sender;\n', '    }\n', '\n', '    // execute function for creator if ERC20&#39;s get stuck in this wallet\n', '    function execute(address _to, uint _value, bytes _data) external returns (bytes32 _r) {\n', '        require(msg.sender==creator);\n', '        require(_to.call.value(_value)(_data));\n', '        return 0;\n', '    }\n', '\n', '    // default function so this contract can accept ETH with low gas limits.\n', '    function() payable {\n', '\n', '    }\n', '\n', '    // public function for requesting an updated price from server\n', '    // using this function requires a payment of $0.35 USD\n', '    function requestUpdate(uint id) external payable {\n', '        uint256 weiAmount = tokens[0].usd * 35;\n', '        require(msg.value >= weiAmount);\n', '        sender.transfer(msg.value);\n', '        RequestUpdate(id);\n', '    }\n', '\n', '    // donation function that get forwarded to the contract updater\n', '    function donate() external payable {\n', '        require(msg.value >= 0);\n', '        sender.transfer(msg.value);\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.15;\n', '\n', '/*\n', '\n', '    Crypto Market Prices via Ethereum Smart Contract\n', '\n', '    A community driven smart contract that lets your contracts use fiat\n', '    amounts in USD, EURO, and GBP. Need to charge $10.50 for a contract call?\n', "    With this contract, you can convert ETH and other crypto's.\n", '\n', '    Repo: https://github.com/hunterlong/marketprice\n', '    Look at repo for more token examples\n', '\n', '    Examples:\n', '\n', '      MarketPrice price = MarketPrice(CONTRACT_ADDRESS);\n', '\n', '      uint256 ethCent = price.USD(0);        // returns $0.01 worth of ETH in USD.\n', '      uint256 weiAmount = ethCent * 2500     // returns $25.00 worth of ETH in USD\n', '      require(msg.value == weiAmount);       // require $25.00 worth of ETH as a payment\n', '\n', '    @author Hunter Long\n', '*/\n', '\n', 'contract MarketPrice {\n', '\n', '    mapping(uint => Token) public tokens;\n', '\n', '    address public sender;\n', '    address public creator;\n', '\n', '    event NewPrice(uint id, string token);\n', '    event DeletePrice(uint id);\n', '    event UpdatedPrice(uint id);\n', '    event RequestUpdate(uint id);\n', '\n', '    struct Token {\n', '        string name;\n', '        uint256 eth;\n', '        uint256 usd;\n', '        uint256 eur;\n', '        uint256 gbp;\n', '        uint block;\n', '    }\n', '\n', '    // initialize function\n', '    function MarketPrice() {\n', '        creator = msg.sender;\n', '        sender = msg.sender;\n', '    }\n', '\n', '    // returns the Token struct\n', '    function getToken(uint _id) internal constant returns (Token) {\n', '        return tokens[_id];\n', '    }\n', '\n', '    // returns rate price of coin related to ETH.\n', '    function ETH(uint _id) constant returns (uint256) {\n', '        return tokens[_id].eth;\n', '    }\n', '\n', '    // returns 0.01 value in United States Dollar\n', '    function USD(uint _id) constant returns (uint256) {\n', '        return tokens[_id].usd;\n', '    }\n', '\n', '    // returns 0.01 value in Euro\n', '    function EUR(uint _id) constant returns (uint256) {\n', '        return tokens[_id].eur;\n', '    }\n', '\n', '    // returns 0.01 value in British Pound\n', '    function GBP(uint _id) constant returns (uint256) {\n', '        return tokens[_id].gbp;\n', '    }\n', '\n', '    // returns block when price was updated last\n', '    function updatedAt(uint _id) constant returns (uint) {\n', '        return tokens[_id].block;\n', '    }\n', '\n', '    // update market rates in USD, EURO, and GBP for a specific coin\n', '    function update(uint id, string _token, uint256 eth, uint256 usd, uint256 eur, uint256 gbp) external {\n', '        require(msg.sender==sender);\n', '        tokens[id] = Token(_token, eth, usd, eur, gbp, block.number);\n', '        NewPrice(id, _token);\n', '    }\n', '\n', '    // delete a token from the contract\n', '    function deleteToken(uint id) {\n', '        require(msg.sender==sender);\n', '        DeletePrice(id);\n', '        delete tokens[id];\n', '    }\n', '\n', '    // change creator address\n', '    function changeCreator(address _creator){\n', '        require(msg.sender==creator);\n', '        creator = _creator;\n', '    }\n', '\n', '    // change sender address\n', '    function changeSender(address _sender){\n', '        require(msg.sender==creator);\n', '        sender = _sender;\n', '    }\n', '\n', "    // execute function for creator if ERC20's get stuck in this wallet\n", '    function execute(address _to, uint _value, bytes _data) external returns (bytes32 _r) {\n', '        require(msg.sender==creator);\n', '        require(_to.call.value(_value)(_data));\n', '        return 0;\n', '    }\n', '\n', '    // default function so this contract can accept ETH with low gas limits.\n', '    function() payable {\n', '\n', '    }\n', '\n', '    // public function for requesting an updated price from server\n', '    // using this function requires a payment of $0.35 USD\n', '    function requestUpdate(uint id) external payable {\n', '        uint256 weiAmount = tokens[0].usd * 35;\n', '        require(msg.value >= weiAmount);\n', '        sender.transfer(msg.value);\n', '        RequestUpdate(id);\n', '    }\n', '\n', '    // donation function that get forwarded to the contract updater\n', '    function donate() external payable {\n', '        require(msg.value >= 0);\n', '        sender.transfer(msg.value);\n', '    }\n', '\n', '}']
