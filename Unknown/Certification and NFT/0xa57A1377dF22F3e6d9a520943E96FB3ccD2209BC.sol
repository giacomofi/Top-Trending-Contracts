['contract Gamble {\n', '    address owner;\n', '    Bet[] bets;\n', '    address[] winners;\n', '\n', '    struct Bet {\n', '        address sender;\n', '        int8 range;\n', '    }\n', '\n', '    function Gamble() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function place (int8 range) public payable {\n', '        if (msg.value >= 50 finney && range <= 100) {\n', '            bets[bets.length++] = Bet({sender: msg.sender, range: range});\n', '        }\n', '    }\n', '\n', '    function solve (int8 range) public {\n', '        if (msg.sender == owner && range <= 100) {\n', '            for (uint i = 0; i < bets.length; ++i) {\n', '                if (bets[i].range == range) {\n', '                    winners[winners.length++] = bets[i].sender;\n', '                }\n', '            }\n', '\n', '            for (uint j = 0; j < winners.length; ++j) {\n', '                winners[j].send(winners.length / this.balance);\n', '            }\n', '\n', '            selfdestruct(owner);\n', '        }\n', '    }\n', '}']