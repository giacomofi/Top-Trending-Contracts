['pragma solidity ^0.4.11;\n', '/*\n', 'Original Code from Toshendra Sharma Course at UDEMY\n', 'Personalization and modifications by Fares Akel - <span class="__cf_email__" data-cfemail="096f2768677d666760662768626c65496e64686065276a6664">[email&#160;protected]</span>\n', '*/\n', 'contract token { function transfer(address receiver, uint amount);\n', '                 function balanceOf(address addr);\n', '                }\n', 'contract CrowdSale {\n', '    enum State {\n', '        Fundraising,\n', '        Successful\n', '    }\n', '    State public state = State.Fundraising;\n', '    \n', '    mapping (address => uint) balances;\n', '    address[] contributors;\n', '    uint public totalRaised;\n', '    uint public currentBalance;\n', '    uint public deadline;\n', '    uint public completedAt;\n', '    token public tokenReward;\n', '    address public creator;\n', '    address public beneficiary; \n', '    string campaignUrl;\n', '    uint constant version = 1;\n', '\n', '    event LogFundingReceived(address addr, uint amount, uint currentTotal);\n', '    event LogWinnerPaid(address winnerAddress);\n', '    event LogFundingSuccessful(uint totalRaised);\n', '    event LogFunderInitialized(\n', '        address creator,\n', '        address beneficiary,\n', '        string url,\n', '        uint256 deadline);\n', '    event LogContributorsContributed(address addr, uint amount, uint id);\n', '    event LogContributorsPayout(address addr, uint amount);\n', '\n', '    modifier inState(State _state) {\n', '        if (state != _state) revert();\n', '        _;\n', '    }\n', '    modifier isCreator() {\n', '        if (msg.sender != creator) revert();\n', '        _;\n', '    }\n', '    modifier atEndOfLifecycle() {\n', '        if(!(state == State.Successful && completedAt + 1 hours < now)) {\n', '            revert();\n', '        }\n', '        _;\n', '    }\n', '    function CrowdSale(\n', '        uint _timeInMinutesForFundraising,\n', '        string _campaignUrl,\n', '        address _ifSuccessfulSendTo,\n', '        token _addressOfTokenUsedAsReward)\n', '    {\n', '        creator = msg.sender;\n', '        beneficiary = _ifSuccessfulSendTo;\n', '        campaignUrl = _campaignUrl;\n', '        deadline = now + (_timeInMinutesForFundraising * 1 minutes);\n', '        currentBalance = 0;\n', '        tokenReward = token(_addressOfTokenUsedAsReward);\n', '        LogFunderInitialized(\n', '            creator,\n', '            beneficiary,\n', '            campaignUrl,\n', '            deadline);\n', '    }\n', '    function contribute()\n', '    public\n', '    inState(State.Fundraising) payable returns (uint256)\n', '    {\n', '        uint id;\n', '\n', '        if(contributors.length == 0){\n', '            contributors.push(msg.sender);\n', '            id=0;\n', '        }\n', '        else{\n', '            for(uint i = 0; i < contributors.length; i++)\n', '            {\n', '                if(contributors[i]==msg.sender)\n', '                {\n', '                    id = i;\n', '                    break;\n', '                }\n', '                else if(i == contributors.length - 1)\n', '                {\n', '                    contributors.push(msg.sender);\n', '                    id = i+1;\n', '                }\n', '            }\n', '        }\n', '        balances[msg.sender]+=msg.value;\n', '        totalRaised += msg.value;\n', '        currentBalance = totalRaised;\n', '\n', '        LogContributorsContributed (msg.sender, balances[msg.sender], id);\n', '        LogFundingReceived(msg.sender, msg.value, totalRaised);\n', '        checkIfFundingCompleteOrExpired();\n', '\n', '        return contributors.length - 1; \n', '    }\n', '\n', '    function checkIfFundingCompleteOrExpired() {\n', '        if ( now > deadline ) {\n', '            state = State.Successful;\n', '            LogFundingSuccessful(totalRaised);\n', '            finished();  \n', '            completedAt = now;\n', '        }\n', '    }\n', '\n', '    function payOut()\n', '    public\n', '    inState(State.Successful)\n', '    {\n', '        if (msg.sender == creator){\n', '\n', '            if(!beneficiary.send(this.balance)) {\n', '            revert();\n', '\n', '            }\n', '\n', '        currentBalance = 0;\n', '        LogWinnerPaid(beneficiary);\n', '\n', '        }\n', '        else\n', '        {\n', '\n', '            uint amount = 0;\n', '            address add;\n', '\n', '            for(uint i=0; i<contributors.length ;i++){\n', '                if (contributors[i]==msg.sender){\n', '                    add = contributors[i];\n', '                    amount = balances[add]*9000000/totalRaised;\n', '                    balances[add] = 0;\n', '                    tokenReward.transfer(add, amount);\n', '                    LogContributorsPayout(add, amount);\n', '                    amount = 0;\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    function finished()\n', '    inState(State.Successful)\n', '    {\n', '        if(!beneficiary.send(this.balance)) {\n', '            revert();\n', '        }\n', '        currentBalance = 0;\n', '\n', '        LogWinnerPaid(beneficiary);\n', '    }\n', '\n', '    function removeContract()\n', '    public\n', '    isCreator()\n', '    atEndOfLifecycle()\n', '    {\n', '        selfdestruct(msg.sender);\n', '    }\n', '\n', '    function () payable {\n', '        if (msg.value > 0){\n', '            contribute();\n', '        }\n', '        else revert();\n', '    }\n', '}']
['pragma solidity ^0.4.11;\n', '/*\n', 'Original Code from Toshendra Sharma Course at UDEMY\n', 'Personalization and modifications by Fares Akel - f.antonio.akel@gmail.com\n', '*/\n', 'contract token { function transfer(address receiver, uint amount);\n', '                 function balanceOf(address addr);\n', '                }\n', 'contract CrowdSale {\n', '    enum State {\n', '        Fundraising,\n', '        Successful\n', '    }\n', '    State public state = State.Fundraising;\n', '    \n', '    mapping (address => uint) balances;\n', '    address[] contributors;\n', '    uint public totalRaised;\n', '    uint public currentBalance;\n', '    uint public deadline;\n', '    uint public completedAt;\n', '    token public tokenReward;\n', '    address public creator;\n', '    address public beneficiary; \n', '    string campaignUrl;\n', '    uint constant version = 1;\n', '\n', '    event LogFundingReceived(address addr, uint amount, uint currentTotal);\n', '    event LogWinnerPaid(address winnerAddress);\n', '    event LogFundingSuccessful(uint totalRaised);\n', '    event LogFunderInitialized(\n', '        address creator,\n', '        address beneficiary,\n', '        string url,\n', '        uint256 deadline);\n', '    event LogContributorsContributed(address addr, uint amount, uint id);\n', '    event LogContributorsPayout(address addr, uint amount);\n', '\n', '    modifier inState(State _state) {\n', '        if (state != _state) revert();\n', '        _;\n', '    }\n', '    modifier isCreator() {\n', '        if (msg.sender != creator) revert();\n', '        _;\n', '    }\n', '    modifier atEndOfLifecycle() {\n', '        if(!(state == State.Successful && completedAt + 1 hours < now)) {\n', '            revert();\n', '        }\n', '        _;\n', '    }\n', '    function CrowdSale(\n', '        uint _timeInMinutesForFundraising,\n', '        string _campaignUrl,\n', '        address _ifSuccessfulSendTo,\n', '        token _addressOfTokenUsedAsReward)\n', '    {\n', '        creator = msg.sender;\n', '        beneficiary = _ifSuccessfulSendTo;\n', '        campaignUrl = _campaignUrl;\n', '        deadline = now + (_timeInMinutesForFundraising * 1 minutes);\n', '        currentBalance = 0;\n', '        tokenReward = token(_addressOfTokenUsedAsReward);\n', '        LogFunderInitialized(\n', '            creator,\n', '            beneficiary,\n', '            campaignUrl,\n', '            deadline);\n', '    }\n', '    function contribute()\n', '    public\n', '    inState(State.Fundraising) payable returns (uint256)\n', '    {\n', '        uint id;\n', '\n', '        if(contributors.length == 0){\n', '            contributors.push(msg.sender);\n', '            id=0;\n', '        }\n', '        else{\n', '            for(uint i = 0; i < contributors.length; i++)\n', '            {\n', '                if(contributors[i]==msg.sender)\n', '                {\n', '                    id = i;\n', '                    break;\n', '                }\n', '                else if(i == contributors.length - 1)\n', '                {\n', '                    contributors.push(msg.sender);\n', '                    id = i+1;\n', '                }\n', '            }\n', '        }\n', '        balances[msg.sender]+=msg.value;\n', '        totalRaised += msg.value;\n', '        currentBalance = totalRaised;\n', '\n', '        LogContributorsContributed (msg.sender, balances[msg.sender], id);\n', '        LogFundingReceived(msg.sender, msg.value, totalRaised);\n', '        checkIfFundingCompleteOrExpired();\n', '\n', '        return contributors.length - 1; \n', '    }\n', '\n', '    function checkIfFundingCompleteOrExpired() {\n', '        if ( now > deadline ) {\n', '            state = State.Successful;\n', '            LogFundingSuccessful(totalRaised);\n', '            finished();  \n', '            completedAt = now;\n', '        }\n', '    }\n', '\n', '    function payOut()\n', '    public\n', '    inState(State.Successful)\n', '    {\n', '        if (msg.sender == creator){\n', '\n', '            if(!beneficiary.send(this.balance)) {\n', '            revert();\n', '\n', '            }\n', '\n', '        currentBalance = 0;\n', '        LogWinnerPaid(beneficiary);\n', '\n', '        }\n', '        else\n', '        {\n', '\n', '            uint amount = 0;\n', '            address add;\n', '\n', '            for(uint i=0; i<contributors.length ;i++){\n', '                if (contributors[i]==msg.sender){\n', '                    add = contributors[i];\n', '                    amount = balances[add]*9000000/totalRaised;\n', '                    balances[add] = 0;\n', '                    tokenReward.transfer(add, amount);\n', '                    LogContributorsPayout(add, amount);\n', '                    amount = 0;\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    function finished()\n', '    inState(State.Successful)\n', '    {\n', '        if(!beneficiary.send(this.balance)) {\n', '            revert();\n', '        }\n', '        currentBalance = 0;\n', '\n', '        LogWinnerPaid(beneficiary);\n', '    }\n', '\n', '    function removeContract()\n', '    public\n', '    isCreator()\n', '    atEndOfLifecycle()\n', '    {\n', '        selfdestruct(msg.sender);\n', '    }\n', '\n', '    function () payable {\n', '        if (msg.value > 0){\n', '            contribute();\n', '        }\n', '        else revert();\n', '    }\n', '}']
