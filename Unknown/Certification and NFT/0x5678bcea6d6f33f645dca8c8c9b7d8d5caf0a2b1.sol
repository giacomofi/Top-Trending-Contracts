['contract Token {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        //Default assumes totalSupply can&#39;t be over max (2^256 - 1).\n', '        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn&#39;t wrap.\n', '        //Replace the if with this one instead.\n', '        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract HumanStandardToken is StandardToken {\n', '\n', '    function () {\n', '        //if ether is sent to this address, send it back.\n', '        throw;\n', '    }\n', '\n', '    /* Public variables of the token */\n', '\n', '    /*\n', '    NOTE:\n', '    The following variables are OPTIONAL vanities. One does not have to include them.\n', '    They allow one to customise the token contract & in no way influences the core functionality.\n', '    Some wallets/interfaces might not even bother to look at this information.\n', '    */\n', '    string public name;                   //fancy name: eg Simon Bucks\n', '    uint8 public decimals;                //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It&#39;s like comparing 1 wei to 1 ether.\n', '    string public symbol;                 //An identifier: eg SBX\n', '    string public version = &#39;H0.1&#39;;       //human 0.1 standard. Just an arbitrary versioning scheme.\n', '\n', '    function HumanStandardToken(\n', '        uint256 _initialAmount,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol\n', '        ) {\n', '        balances[msg.sender] = _initialAmount;               // Give the creator all initial tokens\n', '        totalSupply = _initialAmount;                        // Update total supply\n', '        name = _tokenName;                                   // Set the name for display purposes\n', '        decimals = _decimalUnits;                            // Amount of decimals for display purposes\n', '        symbol = _tokenSymbol;                               // Set the symbol for display purposes\n', '    }\n', '\n', '    /* Approves and then calls the receiving contract */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '\n', '        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn&#39;t have to include a contract in here just for this.\n', '        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '        if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { throw; }\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Disbursement {\n', '\n', '    /*\n', '     *  Storage\n', '     */\n', '    address public owner;\n', '    address public receiver;\n', '    uint public disbursementPeriod;\n', '    uint public startDate;\n', '    uint public withdrawnTokens;\n', '    Token public token;\n', '\n', '    /*\n', '     *  Modifiers\n', '     */\n', '    modifier isOwner() {\n', '        if (msg.sender != owner)\n', '            // Only owner is allowed to proceed\n', '            revert();\n', '        _;\n', '    }\n', '\n', '    modifier isReceiver() {\n', '        if (msg.sender != receiver)\n', '            // Only receiver is allowed to proceed\n', '            revert();\n', '        _;\n', '    }\n', '\n', '    modifier isSetUp() {\n', '        if (address(token) == 0)\n', '            // Contract is not set up\n', '            revert();\n', '        _;\n', '    }\n', '\n', '    /*\n', '     *  Public functions\n', '     */\n', '    /// @dev Constructor function sets contract owner\n', '    /// @param _receiver Receiver of vested tokens\n', '    /// @param _disbursementPeriod Vesting period in seconds\n', '    /// @param _startDate Start date of disbursement period (cliff)\n', '    function Disbursement(address _receiver, uint _disbursementPeriod, uint _startDate)\n', '        public\n', '    {\n', '        if (_receiver == 0 || _disbursementPeriod == 0)\n', '            // Arguments are null\n', '            revert();\n', '        owner = msg.sender;\n', '        receiver = _receiver;\n', '        disbursementPeriod = _disbursementPeriod;\n', '        startDate = _startDate;\n', '        if (startDate == 0)\n', '            startDate = now;\n', '    }\n', '\n', '    /// @dev Setup function sets external contracts&#39; addresses\n', '    /// @param _token Token address\n', '    function setup(Token _token)\n', '        public\n', '        isOwner\n', '    {\n', '        if (address(token) != 0 || address(_token) == 0)\n', '            // Setup was executed already or address is null\n', '            revert();\n', '        token = _token;\n', '    }\n', '\n', '    /// @dev Transfers tokens to a given address\n', '    /// @param _to Address of token receiver\n', '    /// @param _value Number of tokens to transfer\n', '    function withdraw(address _to, uint256 _value)\n', '        public\n', '        isReceiver\n', '        isSetUp\n', '    {\n', '        uint maxTokens = calcMaxWithdraw();\n', '        if (_value > maxTokens)\n', '            revert();\n', '        withdrawnTokens += _value;\n', '        token.transfer(_to, _value);\n', '    }\n', '\n', '    /// @dev Calculates the maximum amount of vested tokens\n', '    /// @return Number of vested tokens to withdraw\n', '    function calcMaxWithdraw()\n', '        public\n', '        constant\n', '        returns (uint)\n', '    {\n', '        uint maxTokens = (token.balanceOf(this) + withdrawnTokens) * (now - startDate) / disbursementPeriod;\n', '        if (withdrawnTokens >= maxTokens || startDate > now)\n', '            return 0;\n', '        return maxTokens - withdrawnTokens;\n', '    }\n', '}\n', '\n', 'contract Filter {\n', '\n', '    event SetupAllowance(address indexed beneficiary, uint amount);\n', '\n', '    Disbursement public disburser;\n', '    address public owner;\n', '    mapping(address => Beneficiary) public beneficiaries;\n', '\n', '    struct Beneficiary {\n', '        uint claimAmount;\n', '        bool claimed;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function Filter(\n', '        address[] _beneficiaries,\n', '        uint[] _beneficiaryTokens\n', '    ) {\n', '        owner = msg.sender;\n', '        for(uint i = 0; i < _beneficiaries.length; i++) {\n', '            beneficiaries[_beneficiaries[i]] = Beneficiary({\n', '                claimAmount: _beneficiaryTokens[i],\n', '                claimed: false\n', '            });\n', '            SetupAllowance(_beneficiaries[i],\n', '                           beneficiaries[_beneficiaries[i]].claimAmount);\n', '        }\n', '    }\n', '\n', '    function setup(Disbursement _disburser)\n', '        public\n', '        onlyOwner\n', '    {\n', '        require(address(disburser) == 0 && address(_disburser) != 0);\n', '        disburser = _disburser; \n', '    }\n', '\n', '    function claim()\n', '        public\n', '    {\n', '        require(beneficiaries[msg.sender].claimed == false);\n', '        beneficiaries[msg.sender].claimed = true;\n', '        disburser.withdraw(msg.sender, beneficiaries[msg.sender].claimAmount);\n', '    }\n', '}\n', '\n', 'contract Sale {\n', '\n', '    /*\n', '     * Events\n', '     */\n', '\n', '    event PurchasedTokens(address indexed purchaser, uint amount);\n', '    event TransferredPreBuyersReward(address indexed preBuyer, uint amount);\n', '    event TransferredFoundersTokens(address vault, uint amount);\n', '\n', '    /*\n', '     * Storage\n', '     */\n', '\n', '    address public owner;\n', '    address public wallet;\n', '    HumanStandardToken public token;\n', '    uint public price;\n', '    uint public startBlock;\n', '    uint public freezeBlock;\n', '    bool public emergencyFlag = false;\n', '    bool public preSaleTokensDisbursed = false;\n', '    bool public foundersTokensDisbursed = false;\n', '    address[] public filters;\n', '\n', '    /*\n', '     * Modifiers\n', '     */\n', '\n', '    modifier saleStarted {\n', '        require(block.number >= startBlock);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier notFrozen {\n', '        require(block.number < freezeBlock);\n', '        _;\n', '    }\n', '\n', '    modifier setupComplete {\n', '        assert(preSaleTokensDisbursed && foundersTokensDisbursed);\n', '        _;\n', '    }\n', '\n', '    modifier notInEmergency {\n', '        assert(emergencyFlag == false);\n', '        _;\n', '    }\n', '\n', '    /*\n', '     * Public functions\n', '     */\n', '\n', '    /// @dev Sale(): constructor for Sale contract\n', '    /// @param _owner the address which owns the sale, can access owner-only functions\n', '    /// @param _wallet the sale&#39;s beneficiary address \n', '    /// @param _tokenSupply the total number of AdToken to mint\n', '    /// @param _tokenName AdToken&#39;s human-readable name\n', '    /// @param _tokenDecimals the number of display decimals in AdToken balances\n', '    /// @param _tokenSymbol AdToken&#39;s human-readable asset symbol\n', '    /// @param _price price of the token in Wei (ADT/Wei pair price)\n', '    /// @param _startBlock the block at which this contract will begin selling its ADT balance\n', '    function Sale(\n', '        address _owner,\n', '        address _wallet,\n', '        uint256 _tokenSupply,\n', '        string _tokenName,\n', '        uint8 _tokenDecimals,\n', '        string _tokenSymbol,\n', '        uint _price,\n', '        uint _startBlock,\n', '        uint _freezeBlock\n', '    ) {\n', '        owner = _owner;\n', '        wallet = _wallet;\n', '        token = new HumanStandardToken(_tokenSupply, _tokenName, _tokenDecimals, _tokenSymbol);\n', '        price = _price;\n', '        startBlock = _startBlock;\n', '        freezeBlock = _freezeBlock;\n', '\n', '        assert(token.transfer(this, token.totalSupply()));\n', '        assert(token.balanceOf(this) == token.totalSupply());\n', '        assert(token.balanceOf(this) == 10**18);\n', '    }\n', '\n', '    /// @dev distributeFoundersRewards(): private utility function called by constructor\n', '    /// @param _preBuyers an array of addresses to which awards will be distributed\n', '    /// @param _preBuyersTokens an array of integers specifying preBuyers rewards\n', '    function distributePreBuyersRewards(\n', '        address[] _preBuyers,\n', '        uint[] _preBuyersTokens\n', '    ) \n', '        public\n', '        onlyOwner\n', '    { \n', '        assert(!preSaleTokensDisbursed);\n', '\n', '        for(uint i = 0; i < _preBuyers.length; i++) {\n', '            require(token.transfer(_preBuyers[i], _preBuyersTokens[i]));\n', '            TransferredPreBuyersReward(_preBuyers[i], _preBuyersTokens[i]);\n', '        }\n', '\n', '        preSaleTokensDisbursed = true;\n', '    }\n', '\n', '    /// @dev distributeTimelockedRewards(): private utility function called by constructor\n', '    /// @param _founders an array of addresses specifying disbursement beneficiaries\n', '    /// @param _foundersTokens an array of integers specifying disbursement amounts\n', '    /// @param _founderTimelocks an array of UNIX timestamps specifying vesting dates\n', '    function distributeFoundersRewards(\n', '        address[] _founders,\n', '        uint[] _foundersTokens,\n', '        uint[] _founderTimelocks\n', '    ) \n', '        public\n', '        onlyOwner\n', '    { \n', '        assert(preSaleTokensDisbursed);\n', '        assert(!foundersTokensDisbursed);\n', '\n', '        /* Total number of tokens to be disbursed for a given tranch. Used when\n', '           tokens are transferred to disbursement contracts. */\n', '        uint tokensPerTranch = 0;\n', '        // Alias of founderTimelocks.length for legibility\n', '        uint tranches = _founderTimelocks.length;\n', '        // The number of tokens which may be withdrawn per founder for each tranch\n', '        uint[] memory foundersTokensPerTranch = new uint[](_foundersTokens.length);\n', '\n', '        // Compute foundersTokensPerTranch and tokensPerTranch\n', '        for(uint i = 0; i < _foundersTokens.length; i++) {\n', '            foundersTokensPerTranch[i] = _foundersTokens[i]/tranches;\n', '            tokensPerTranch = tokensPerTranch + foundersTokensPerTranch[i];\n', '        }\n', '\n', '        /* Deploy disbursement and filter contract pairs, initialize both and store\n', '           filter addresses in filters array. Finally, transfer tokensPerTranch to\n', '           disbursement contracts. */\n', '        for(uint j = 0; j < tranches; j++) {\n', '            Filter filter = new Filter(_founders, foundersTokensPerTranch);\n', '            filters.push(filter);\n', '            Disbursement vault = new Disbursement(filter, 1, _founderTimelocks[j]);\n', '            // Give the disbursement contract the address of the token it disburses.\n', '            vault.setup(token);             \n', '            /* Give the filter contract the address of the disbursement contract\n', '               it access controls */\n', '            filter.setup(vault);             \n', '            // Transfer to the vault the tokens it is to disburse\n', '            assert(token.transfer(vault, tokensPerTranch));\n', '            TransferredFoundersTokens(vault, tokensPerTranch);\n', '        }\n', '\n', '        assert(token.balanceOf(this) == 5 * 10**17);\n', '        foundersTokensDisbursed = true;\n', '    }\n', '\n', '    /// @dev purchaseToken(): function that exchanges ETH for ADT (main sale function)\n', '    /// @notice You&#39;re about to purchase the equivalent of `msg.value` Wei in ADT tokens\n', '    function purchaseTokens()\n', '        saleStarted\n', '        payable\n', '        setupComplete\n', '        notInEmergency\n', '    {\n', '        /* Calculate whether any of the msg.value needs to be returned to\n', '           the sender. The tokenPurchase is the actual number of tokens which\n', '           will be purchased once any excessAmount included in the msg.value\n', '           is removed from the purchaseAmount. */\n', '        uint excessAmount = msg.value % price;\n', '        uint purchaseAmount = msg.value - excessAmount;\n', '        uint tokenPurchase = purchaseAmount / price;\n', '\n', '        // Cannot purchase more tokens than this contract has available to sell\n', '        require(tokenPurchase <= token.balanceOf(this));\n', '\n', '        // Return any excess msg.value\n', '        if (excessAmount > 0) {\n', '            msg.sender.transfer(excessAmount);\n', '        }\n', '\n', '        // Forward received ether minus any excessAmount to the wallet\n', '        wallet.transfer(purchaseAmount);\n', '\n', '        // Transfer the sum of tokens tokenPurchase to the msg.sender\n', '        assert(token.transfer(msg.sender, tokenPurchase));\n', '\n', '        PurchasedTokens(msg.sender, tokenPurchase);\n', '    }\n', '\n', '    /*\n', '     * Owner-only functions\n', '     */\n', '\n', '    function changeOwner(address _newOwner)\n', '        onlyOwner\n', '    {\n', '        require(_newOwner != 0);\n', '        owner = _newOwner;\n', '    }\n', '\n', '    function changePrice(uint _newPrice)\n', '        onlyOwner\n', '        notFrozen\n', '    {\n', '        require(_newPrice != 0);\n', '        price = _newPrice;\n', '    }\n', '\n', '    function changeWallet(address _wallet)\n', '        onlyOwner\n', '        notFrozen\n', '    {\n', '        require(_wallet != 0);\n', '        wallet = _wallet;\n', '    }\n', '\n', '    function changeStartBlock(uint _newBlock)\n', '        onlyOwner\n', '        notFrozen\n', '    {\n', '        require(_newBlock != 0);\n', '\n', '        freezeBlock = _newBlock - (startBlock - freezeBlock);\n', '        startBlock = _newBlock;\n', '    }\n', '\n', '    function emergencyToggle()\n', '        onlyOwner\n', '    {\n', '        emergencyFlag = !emergencyFlag;\n', '    }\n', '\n', '}']
['contract Token {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', "        //Default assumes totalSupply can't be over max (2^256 - 1).\n", "        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n", '        //Replace the if with this one instead.\n', '        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract HumanStandardToken is StandardToken {\n', '\n', '    function () {\n', '        //if ether is sent to this address, send it back.\n', '        throw;\n', '    }\n', '\n', '    /* Public variables of the token */\n', '\n', '    /*\n', '    NOTE:\n', '    The following variables are OPTIONAL vanities. One does not have to include them.\n', '    They allow one to customise the token contract & in no way influences the core functionality.\n', '    Some wallets/interfaces might not even bother to look at this information.\n', '    */\n', '    string public name;                   //fancy name: eg Simon Bucks\n', "    uint8 public decimals;                //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.\n", '    string public symbol;                 //An identifier: eg SBX\n', "    string public version = 'H0.1';       //human 0.1 standard. Just an arbitrary versioning scheme.\n", '\n', '    function HumanStandardToken(\n', '        uint256 _initialAmount,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol\n', '        ) {\n', '        balances[msg.sender] = _initialAmount;               // Give the creator all initial tokens\n', '        totalSupply = _initialAmount;                        // Update total supply\n', '        name = _tokenName;                                   // Set the name for display purposes\n', '        decimals = _decimalUnits;                            // Amount of decimals for display purposes\n', '        symbol = _tokenSymbol;                               // Set the symbol for display purposes\n', '    }\n', '\n', '    /* Approves and then calls the receiving contract */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '\n', "        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\n", '        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '        if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { throw; }\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Disbursement {\n', '\n', '    /*\n', '     *  Storage\n', '     */\n', '    address public owner;\n', '    address public receiver;\n', '    uint public disbursementPeriod;\n', '    uint public startDate;\n', '    uint public withdrawnTokens;\n', '    Token public token;\n', '\n', '    /*\n', '     *  Modifiers\n', '     */\n', '    modifier isOwner() {\n', '        if (msg.sender != owner)\n', '            // Only owner is allowed to proceed\n', '            revert();\n', '        _;\n', '    }\n', '\n', '    modifier isReceiver() {\n', '        if (msg.sender != receiver)\n', '            // Only receiver is allowed to proceed\n', '            revert();\n', '        _;\n', '    }\n', '\n', '    modifier isSetUp() {\n', '        if (address(token) == 0)\n', '            // Contract is not set up\n', '            revert();\n', '        _;\n', '    }\n', '\n', '    /*\n', '     *  Public functions\n', '     */\n', '    /// @dev Constructor function sets contract owner\n', '    /// @param _receiver Receiver of vested tokens\n', '    /// @param _disbursementPeriod Vesting period in seconds\n', '    /// @param _startDate Start date of disbursement period (cliff)\n', '    function Disbursement(address _receiver, uint _disbursementPeriod, uint _startDate)\n', '        public\n', '    {\n', '        if (_receiver == 0 || _disbursementPeriod == 0)\n', '            // Arguments are null\n', '            revert();\n', '        owner = msg.sender;\n', '        receiver = _receiver;\n', '        disbursementPeriod = _disbursementPeriod;\n', '        startDate = _startDate;\n', '        if (startDate == 0)\n', '            startDate = now;\n', '    }\n', '\n', "    /// @dev Setup function sets external contracts' addresses\n", '    /// @param _token Token address\n', '    function setup(Token _token)\n', '        public\n', '        isOwner\n', '    {\n', '        if (address(token) != 0 || address(_token) == 0)\n', '            // Setup was executed already or address is null\n', '            revert();\n', '        token = _token;\n', '    }\n', '\n', '    /// @dev Transfers tokens to a given address\n', '    /// @param _to Address of token receiver\n', '    /// @param _value Number of tokens to transfer\n', '    function withdraw(address _to, uint256 _value)\n', '        public\n', '        isReceiver\n', '        isSetUp\n', '    {\n', '        uint maxTokens = calcMaxWithdraw();\n', '        if (_value > maxTokens)\n', '            revert();\n', '        withdrawnTokens += _value;\n', '        token.transfer(_to, _value);\n', '    }\n', '\n', '    /// @dev Calculates the maximum amount of vested tokens\n', '    /// @return Number of vested tokens to withdraw\n', '    function calcMaxWithdraw()\n', '        public\n', '        constant\n', '        returns (uint)\n', '    {\n', '        uint maxTokens = (token.balanceOf(this) + withdrawnTokens) * (now - startDate) / disbursementPeriod;\n', '        if (withdrawnTokens >= maxTokens || startDate > now)\n', '            return 0;\n', '        return maxTokens - withdrawnTokens;\n', '    }\n', '}\n', '\n', 'contract Filter {\n', '\n', '    event SetupAllowance(address indexed beneficiary, uint amount);\n', '\n', '    Disbursement public disburser;\n', '    address public owner;\n', '    mapping(address => Beneficiary) public beneficiaries;\n', '\n', '    struct Beneficiary {\n', '        uint claimAmount;\n', '        bool claimed;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function Filter(\n', '        address[] _beneficiaries,\n', '        uint[] _beneficiaryTokens\n', '    ) {\n', '        owner = msg.sender;\n', '        for(uint i = 0; i < _beneficiaries.length; i++) {\n', '            beneficiaries[_beneficiaries[i]] = Beneficiary({\n', '                claimAmount: _beneficiaryTokens[i],\n', '                claimed: false\n', '            });\n', '            SetupAllowance(_beneficiaries[i],\n', '                           beneficiaries[_beneficiaries[i]].claimAmount);\n', '        }\n', '    }\n', '\n', '    function setup(Disbursement _disburser)\n', '        public\n', '        onlyOwner\n', '    {\n', '        require(address(disburser) == 0 && address(_disburser) != 0);\n', '        disburser = _disburser; \n', '    }\n', '\n', '    function claim()\n', '        public\n', '    {\n', '        require(beneficiaries[msg.sender].claimed == false);\n', '        beneficiaries[msg.sender].claimed = true;\n', '        disburser.withdraw(msg.sender, beneficiaries[msg.sender].claimAmount);\n', '    }\n', '}\n', '\n', 'contract Sale {\n', '\n', '    /*\n', '     * Events\n', '     */\n', '\n', '    event PurchasedTokens(address indexed purchaser, uint amount);\n', '    event TransferredPreBuyersReward(address indexed preBuyer, uint amount);\n', '    event TransferredFoundersTokens(address vault, uint amount);\n', '\n', '    /*\n', '     * Storage\n', '     */\n', '\n', '    address public owner;\n', '    address public wallet;\n', '    HumanStandardToken public token;\n', '    uint public price;\n', '    uint public startBlock;\n', '    uint public freezeBlock;\n', '    bool public emergencyFlag = false;\n', '    bool public preSaleTokensDisbursed = false;\n', '    bool public foundersTokensDisbursed = false;\n', '    address[] public filters;\n', '\n', '    /*\n', '     * Modifiers\n', '     */\n', '\n', '    modifier saleStarted {\n', '        require(block.number >= startBlock);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier notFrozen {\n', '        require(block.number < freezeBlock);\n', '        _;\n', '    }\n', '\n', '    modifier setupComplete {\n', '        assert(preSaleTokensDisbursed && foundersTokensDisbursed);\n', '        _;\n', '    }\n', '\n', '    modifier notInEmergency {\n', '        assert(emergencyFlag == false);\n', '        _;\n', '    }\n', '\n', '    /*\n', '     * Public functions\n', '     */\n', '\n', '    /// @dev Sale(): constructor for Sale contract\n', '    /// @param _owner the address which owns the sale, can access owner-only functions\n', "    /// @param _wallet the sale's beneficiary address \n", '    /// @param _tokenSupply the total number of AdToken to mint\n', "    /// @param _tokenName AdToken's human-readable name\n", '    /// @param _tokenDecimals the number of display decimals in AdToken balances\n', "    /// @param _tokenSymbol AdToken's human-readable asset symbol\n", '    /// @param _price price of the token in Wei (ADT/Wei pair price)\n', '    /// @param _startBlock the block at which this contract will begin selling its ADT balance\n', '    function Sale(\n', '        address _owner,\n', '        address _wallet,\n', '        uint256 _tokenSupply,\n', '        string _tokenName,\n', '        uint8 _tokenDecimals,\n', '        string _tokenSymbol,\n', '        uint _price,\n', '        uint _startBlock,\n', '        uint _freezeBlock\n', '    ) {\n', '        owner = _owner;\n', '        wallet = _wallet;\n', '        token = new HumanStandardToken(_tokenSupply, _tokenName, _tokenDecimals, _tokenSymbol);\n', '        price = _price;\n', '        startBlock = _startBlock;\n', '        freezeBlock = _freezeBlock;\n', '\n', '        assert(token.transfer(this, token.totalSupply()));\n', '        assert(token.balanceOf(this) == token.totalSupply());\n', '        assert(token.balanceOf(this) == 10**18);\n', '    }\n', '\n', '    /// @dev distributeFoundersRewards(): private utility function called by constructor\n', '    /// @param _preBuyers an array of addresses to which awards will be distributed\n', '    /// @param _preBuyersTokens an array of integers specifying preBuyers rewards\n', '    function distributePreBuyersRewards(\n', '        address[] _preBuyers,\n', '        uint[] _preBuyersTokens\n', '    ) \n', '        public\n', '        onlyOwner\n', '    { \n', '        assert(!preSaleTokensDisbursed);\n', '\n', '        for(uint i = 0; i < _preBuyers.length; i++) {\n', '            require(token.transfer(_preBuyers[i], _preBuyersTokens[i]));\n', '            TransferredPreBuyersReward(_preBuyers[i], _preBuyersTokens[i]);\n', '        }\n', '\n', '        preSaleTokensDisbursed = true;\n', '    }\n', '\n', '    /// @dev distributeTimelockedRewards(): private utility function called by constructor\n', '    /// @param _founders an array of addresses specifying disbursement beneficiaries\n', '    /// @param _foundersTokens an array of integers specifying disbursement amounts\n', '    /// @param _founderTimelocks an array of UNIX timestamps specifying vesting dates\n', '    function distributeFoundersRewards(\n', '        address[] _founders,\n', '        uint[] _foundersTokens,\n', '        uint[] _founderTimelocks\n', '    ) \n', '        public\n', '        onlyOwner\n', '    { \n', '        assert(preSaleTokensDisbursed);\n', '        assert(!foundersTokensDisbursed);\n', '\n', '        /* Total number of tokens to be disbursed for a given tranch. Used when\n', '           tokens are transferred to disbursement contracts. */\n', '        uint tokensPerTranch = 0;\n', '        // Alias of founderTimelocks.length for legibility\n', '        uint tranches = _founderTimelocks.length;\n', '        // The number of tokens which may be withdrawn per founder for each tranch\n', '        uint[] memory foundersTokensPerTranch = new uint[](_foundersTokens.length);\n', '\n', '        // Compute foundersTokensPerTranch and tokensPerTranch\n', '        for(uint i = 0; i < _foundersTokens.length; i++) {\n', '            foundersTokensPerTranch[i] = _foundersTokens[i]/tranches;\n', '            tokensPerTranch = tokensPerTranch + foundersTokensPerTranch[i];\n', '        }\n', '\n', '        /* Deploy disbursement and filter contract pairs, initialize both and store\n', '           filter addresses in filters array. Finally, transfer tokensPerTranch to\n', '           disbursement contracts. */\n', '        for(uint j = 0; j < tranches; j++) {\n', '            Filter filter = new Filter(_founders, foundersTokensPerTranch);\n', '            filters.push(filter);\n', '            Disbursement vault = new Disbursement(filter, 1, _founderTimelocks[j]);\n', '            // Give the disbursement contract the address of the token it disburses.\n', '            vault.setup(token);             \n', '            /* Give the filter contract the address of the disbursement contract\n', '               it access controls */\n', '            filter.setup(vault);             \n', '            // Transfer to the vault the tokens it is to disburse\n', '            assert(token.transfer(vault, tokensPerTranch));\n', '            TransferredFoundersTokens(vault, tokensPerTranch);\n', '        }\n', '\n', '        assert(token.balanceOf(this) == 5 * 10**17);\n', '        foundersTokensDisbursed = true;\n', '    }\n', '\n', '    /// @dev purchaseToken(): function that exchanges ETH for ADT (main sale function)\n', "    /// @notice You're about to purchase the equivalent of `msg.value` Wei in ADT tokens\n", '    function purchaseTokens()\n', '        saleStarted\n', '        payable\n', '        setupComplete\n', '        notInEmergency\n', '    {\n', '        /* Calculate whether any of the msg.value needs to be returned to\n', '           the sender. The tokenPurchase is the actual number of tokens which\n', '           will be purchased once any excessAmount included in the msg.value\n', '           is removed from the purchaseAmount. */\n', '        uint excessAmount = msg.value % price;\n', '        uint purchaseAmount = msg.value - excessAmount;\n', '        uint tokenPurchase = purchaseAmount / price;\n', '\n', '        // Cannot purchase more tokens than this contract has available to sell\n', '        require(tokenPurchase <= token.balanceOf(this));\n', '\n', '        // Return any excess msg.value\n', '        if (excessAmount > 0) {\n', '            msg.sender.transfer(excessAmount);\n', '        }\n', '\n', '        // Forward received ether minus any excessAmount to the wallet\n', '        wallet.transfer(purchaseAmount);\n', '\n', '        // Transfer the sum of tokens tokenPurchase to the msg.sender\n', '        assert(token.transfer(msg.sender, tokenPurchase));\n', '\n', '        PurchasedTokens(msg.sender, tokenPurchase);\n', '    }\n', '\n', '    /*\n', '     * Owner-only functions\n', '     */\n', '\n', '    function changeOwner(address _newOwner)\n', '        onlyOwner\n', '    {\n', '        require(_newOwner != 0);\n', '        owner = _newOwner;\n', '    }\n', '\n', '    function changePrice(uint _newPrice)\n', '        onlyOwner\n', '        notFrozen\n', '    {\n', '        require(_newPrice != 0);\n', '        price = _newPrice;\n', '    }\n', '\n', '    function changeWallet(address _wallet)\n', '        onlyOwner\n', '        notFrozen\n', '    {\n', '        require(_wallet != 0);\n', '        wallet = _wallet;\n', '    }\n', '\n', '    function changeStartBlock(uint _newBlock)\n', '        onlyOwner\n', '        notFrozen\n', '    {\n', '        require(_newBlock != 0);\n', '\n', '        freezeBlock = _newBlock - (startBlock - freezeBlock);\n', '        startBlock = _newBlock;\n', '    }\n', '\n', '    function emergencyToggle()\n', '        onlyOwner\n', '    {\n', '        emergencyFlag = !emergencyFlag;\n', '    }\n', '\n', '}']
