['pragma solidity ^0.4.13;\n', '\n', 'contract EthereumLottery {\n', '    function admin() constant returns (address);\n', '    function needsInitialization() constant returns (bool);\n', '    function initLottery(uint _jackpot, uint _numTickets,\n', '                         uint _ticketPrice, int _durationInBlocks) payable;\n', '    function needsFinalization() constant returns (bool);\n', '    function finalizeLottery(uint _steps);\n', '}\n', '\n', 'contract LotteryAdmin {\n', '    address public owner;\n', '    address public admin;\n', '    address public proposedOwner;\n', '\n', '    address public ethereumLottery;\n', '\n', '    uint public dailyAdminAllowance;\n', '    uint public maximumJackpot;\n', '    int public minimumDurationInBlocks;\n', '\n', '    uint public lastAllowancePaymentTimestamp;\n', '    uint public nextProfile;\n', '\n', '    event Deposit(address indexed _from, uint _value);\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAdminOrOwner {\n', '        require(msg.sender == owner || msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    function LotteryAdmin(address _ethereumLottery) {\n', '        owner = msg.sender;\n', '        admin = msg.sender;\n', '        ethereumLottery = _ethereumLottery;\n', '\n', '        dailyAdminAllowance = 50 finney;\n', '        maximumJackpot = 100 ether;\n', '        minimumDurationInBlocks = 6;\n', '    }\n', '\n', '    function () payable {\n', '        Deposit(msg.sender, msg.value);\n', '    }\n', '\n', '    function allowsAllowance() constant returns (bool) {\n', '        return now - lastAllowancePaymentTimestamp >= 24 hours;\n', '    }\n', '\n', '    function requestAllowance() onlyAdminOrOwner {\n', '        require(allowsAllowance());\n', '\n', '        lastAllowancePaymentTimestamp = now;\n', '        admin.transfer(dailyAdminAllowance);\n', '    }\n', '\n', '    function needsAdministration() constant returns (bool) {\n', '        if (EthereumLottery(ethereumLottery).admin() != address(this)) {\n', '            return false;\n', '        }\n', '\n', '        return EthereumLottery(ethereumLottery).needsFinalization();\n', '    }\n', '\n', '    function administrate(uint _steps) onlyAdminOrOwner {\n', '        EthereumLottery(ethereumLottery).finalizeLottery(_steps);\n', '    }\n', '\n', '    function needsInitialization() constant returns (bool) {\n', '        if (EthereumLottery(ethereumLottery).admin() != address(this)) {\n', '            return false;\n', '        }\n', '\n', '        return EthereumLottery(ethereumLottery).needsInitialization();\n', '    }\n', '\n', '    function initLottery(uint _nextProfile,\n', '                         uint _jackpot, uint _numTickets,\n', '                         uint _ticketPrice, int _durationInBlocks)\n', '             onlyAdminOrOwner {\n', '        require(_jackpot <= maximumJackpot);\n', '        require(_durationInBlocks >= minimumDurationInBlocks);\n', '\n', '        nextProfile = _nextProfile;\n', '        EthereumLottery(ethereumLottery).initLottery.value(_jackpot)(\n', '            _jackpot, _numTickets, _ticketPrice, _durationInBlocks);\n', '    }\n', '\n', '    function withdraw(uint _value) onlyOwner {\n', '        owner.transfer(_value);\n', '    }\n', '\n', '    function setConfiguration(uint _dailyAdminAllowance,\n', '                              uint _maximumJackpot,\n', '                              int _minimumDurationInBlocks)\n', '             onlyOwner {\n', '        dailyAdminAllowance = _dailyAdminAllowance;\n', '        maximumJackpot = _maximumJackpot;\n', '        minimumDurationInBlocks = _minimumDurationInBlocks;\n', '    }\n', '\n', '    function setLottery(address _ethereumLottery) onlyOwner {\n', '        ethereumLottery = _ethereumLottery;\n', '    }\n', '\n', '    function setAdmin(address _admin) onlyOwner {\n', '        admin = _admin;\n', '    }\n', '\n', '    function proposeOwner(address _owner) onlyOwner {\n', '        proposedOwner = _owner;\n', '    }\n', '\n', '    function acceptOwnership() {\n', '        require(proposedOwner != 0);\n', '        require(msg.sender == proposedOwner);\n', '        owner = proposedOwner;\n', '    }\n', '\n', '    function destruct() onlyOwner {\n', '        selfdestruct(owner);\n', '    }\n', '}']
['pragma solidity ^0.4.13;\n', '\n', 'contract EthereumLottery {\n', '    function admin() constant returns (address);\n', '    function needsInitialization() constant returns (bool);\n', '    function initLottery(uint _jackpot, uint _numTickets,\n', '                         uint _ticketPrice, int _durationInBlocks) payable;\n', '    function needsFinalization() constant returns (bool);\n', '    function finalizeLottery(uint _steps);\n', '}\n', '\n', 'contract LotteryAdmin {\n', '    address public owner;\n', '    address public admin;\n', '    address public proposedOwner;\n', '\n', '    address public ethereumLottery;\n', '\n', '    uint public dailyAdminAllowance;\n', '    uint public maximumJackpot;\n', '    int public minimumDurationInBlocks;\n', '\n', '    uint public lastAllowancePaymentTimestamp;\n', '    uint public nextProfile;\n', '\n', '    event Deposit(address indexed _from, uint _value);\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAdminOrOwner {\n', '        require(msg.sender == owner || msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    function LotteryAdmin(address _ethereumLottery) {\n', '        owner = msg.sender;\n', '        admin = msg.sender;\n', '        ethereumLottery = _ethereumLottery;\n', '\n', '        dailyAdminAllowance = 50 finney;\n', '        maximumJackpot = 100 ether;\n', '        minimumDurationInBlocks = 6;\n', '    }\n', '\n', '    function () payable {\n', '        Deposit(msg.sender, msg.value);\n', '    }\n', '\n', '    function allowsAllowance() constant returns (bool) {\n', '        return now - lastAllowancePaymentTimestamp >= 24 hours;\n', '    }\n', '\n', '    function requestAllowance() onlyAdminOrOwner {\n', '        require(allowsAllowance());\n', '\n', '        lastAllowancePaymentTimestamp = now;\n', '        admin.transfer(dailyAdminAllowance);\n', '    }\n', '\n', '    function needsAdministration() constant returns (bool) {\n', '        if (EthereumLottery(ethereumLottery).admin() != address(this)) {\n', '            return false;\n', '        }\n', '\n', '        return EthereumLottery(ethereumLottery).needsFinalization();\n', '    }\n', '\n', '    function administrate(uint _steps) onlyAdminOrOwner {\n', '        EthereumLottery(ethereumLottery).finalizeLottery(_steps);\n', '    }\n', '\n', '    function needsInitialization() constant returns (bool) {\n', '        if (EthereumLottery(ethereumLottery).admin() != address(this)) {\n', '            return false;\n', '        }\n', '\n', '        return EthereumLottery(ethereumLottery).needsInitialization();\n', '    }\n', '\n', '    function initLottery(uint _nextProfile,\n', '                         uint _jackpot, uint _numTickets,\n', '                         uint _ticketPrice, int _durationInBlocks)\n', '             onlyAdminOrOwner {\n', '        require(_jackpot <= maximumJackpot);\n', '        require(_durationInBlocks >= minimumDurationInBlocks);\n', '\n', '        nextProfile = _nextProfile;\n', '        EthereumLottery(ethereumLottery).initLottery.value(_jackpot)(\n', '            _jackpot, _numTickets, _ticketPrice, _durationInBlocks);\n', '    }\n', '\n', '    function withdraw(uint _value) onlyOwner {\n', '        owner.transfer(_value);\n', '    }\n', '\n', '    function setConfiguration(uint _dailyAdminAllowance,\n', '                              uint _maximumJackpot,\n', '                              int _minimumDurationInBlocks)\n', '             onlyOwner {\n', '        dailyAdminAllowance = _dailyAdminAllowance;\n', '        maximumJackpot = _maximumJackpot;\n', '        minimumDurationInBlocks = _minimumDurationInBlocks;\n', '    }\n', '\n', '    function setLottery(address _ethereumLottery) onlyOwner {\n', '        ethereumLottery = _ethereumLottery;\n', '    }\n', '\n', '    function setAdmin(address _admin) onlyOwner {\n', '        admin = _admin;\n', '    }\n', '\n', '    function proposeOwner(address _owner) onlyOwner {\n', '        proposedOwner = _owner;\n', '    }\n', '\n', '    function acceptOwnership() {\n', '        require(proposedOwner != 0);\n', '        require(msg.sender == proposedOwner);\n', '        owner = proposedOwner;\n', '    }\n', '\n', '    function destruct() onlyOwner {\n', '        selfdestruct(owner);\n', '    }\n', '}']
