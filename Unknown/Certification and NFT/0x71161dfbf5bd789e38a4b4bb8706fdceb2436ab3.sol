['pragma solidity ^0.4.10;\n', '\n', 'contract SafeMath {\n', '\n', '    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x + y;\n', '      assert((z >= x) && (z >= y));\n', '      return z;\n', '    }\n', '\n', '    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\n', '      assert(x >= y);\n', '      uint256 z = x - y;\n', '      return z;\n', '    }\n', '\n', '    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x * y;\n', '      assert((x == 0)||(z/x == y));\n', '      return z;\n', '    }\n', '    \n', '    function safeDiv(uint256 a, uint256 b) internal returns (uint256) {\n', '      assert(b > 0);\n', '      uint c = a / b;\n', '      assert(a == b * c + a % b);\n', '      return c;\n', '    }\n', '\n', '}\n', '\n', 'contract Token {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '      if (balances[msg.sender] >= _value && _value > 0) {\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract Mondo is SafeMath, StandardToken {\n', '\n', '    string public constant name = "Mondo Token";\n', '    string public constant symbol = "MND";\n', '    uint256 public constant decimals = 18;\n', '    \n', '    uint256 private constant tokenCreationCapPreICO02 =  5000000*10**decimals;\n', '    uint256 private constant tokenCreationCapPreICO15 =  6000000*10**decimals;\n', '    uint256 public constant tokenCreationCap = 12500000*10**decimals;\n', '\n', '    address public constant owner = 0x0077DA9DF6507655CDb3aB9277A347EDe759F93F;\n', '\n', '    // 1 ETH = 300 USD Date: 11.08.2017\n', '    uint private oneTokenInWeiSale1 = 70175438596491; // 0,02 $\n', '    uint private oneTokenInWei1Sale2 = 526315789473684; // 0,15 $\n', '    uint private oneTokenInWei = 5473684210526320; // 1,56 $\n', '    \n', '    Phase public currentPhase = Phase.PreICO1;\n', '    \n', '    enum Phase {\n', '        PreICO1,\n', '        PreICO2,\n', '        ICO\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        if(owner != msg.sender) revert();\n', '        _;\n', '    }\n', '\n', '    event CreateMND(address indexed _to, uint256 _value);\n', '\n', '    function Mondo() {}\n', '\n', '    function () payable {\n', '        createTokens();\n', '    }\n', '\n', '    function createTokens() internal {\n', '        if (msg.value <= 0) revert();\n', '        \n', '        if (currentPhase == Phase.PreICO1) {\n', '            if (totalSupply <= tokenCreationCapPreICO02) {\n', '                generateTokens(oneTokenInWeiSale1);\n', '            }\n', '        } \n', '        else if (currentPhase == Phase.PreICO2) {\n', '            if (totalSupply > tokenCreationCapPreICO02 && totalSupply <= tokenCreationCapPreICO15) {\n', '                generateTokens(oneTokenInWei1Sale2);\n', '            }\n', '        }\n', '        else if (currentPhase == Phase.ICO) {\n', '            if (totalSupply > tokenCreationCapPreICO15 && totalSupply <= tokenCreationCap) {\n', '                generateTokens(oneTokenInWei);\n', '            }\n', '        } else { \n', '            revert();\n', '        }\n', '    }\n', '    \n', '    function generateTokens(uint _oneTokenInWei) internal {\n', '        uint multiplier = 10 ** decimals;\n', '        uint256 tokens = safeDiv(msg.value, _oneTokenInWei)*multiplier;\n', '        uint256 checkedSupply = safeAdd(totalSupply, tokens);\n', '        if (tokenCreationCap <= checkedSupply) revert();\n', '        balances[msg.sender] += tokens;\n', '        totalSupply = safeAdd(totalSupply, tokens);\n', '        CreateMND(msg.sender,tokens);\n', '    }\n', '    \n', '    function changePhaseToPreICO2() external onlyOwner returns (bool){\n', '        currentPhase = Phase.PreICO2;\n', '        return true;\n', '    }\n', '    \n', '    function changePhaseToICO() external onlyOwner returns (bool){\n', '        currentPhase = Phase.ICO;\n', '        return true;\n', '    }\n', '    \n', '    function changeTokenPrice(uint tpico1, uint tpico2, uint tpico) external onlyOwner returns (bool){\n', '        oneTokenInWeiSale1 = tpico1;\n', '        oneTokenInWei1Sale2 = tpico2;\n', '        oneTokenInWei = tpico;\n', '        return true;\n', '    }\n', '\n', '    function finalize() external onlyOwner returns (bool){\n', '      owner.transfer(this.balance);\n', '      return true;\n', '    }\n', '}']
['pragma solidity ^0.4.10;\n', '\n', 'contract SafeMath {\n', '\n', '    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x + y;\n', '      assert((z >= x) && (z >= y));\n', '      return z;\n', '    }\n', '\n', '    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\n', '      assert(x >= y);\n', '      uint256 z = x - y;\n', '      return z;\n', '    }\n', '\n', '    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x * y;\n', '      assert((x == 0)||(z/x == y));\n', '      return z;\n', '    }\n', '    \n', '    function safeDiv(uint256 a, uint256 b) internal returns (uint256) {\n', '      assert(b > 0);\n', '      uint c = a / b;\n', '      assert(a == b * c + a % b);\n', '      return c;\n', '    }\n', '\n', '}\n', '\n', 'contract Token {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '      if (balances[msg.sender] >= _value && _value > 0) {\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract Mondo is SafeMath, StandardToken {\n', '\n', '    string public constant name = "Mondo Token";\n', '    string public constant symbol = "MND";\n', '    uint256 public constant decimals = 18;\n', '    \n', '    uint256 private constant tokenCreationCapPreICO02 =  5000000*10**decimals;\n', '    uint256 private constant tokenCreationCapPreICO15 =  6000000*10**decimals;\n', '    uint256 public constant tokenCreationCap = 12500000*10**decimals;\n', '\n', '    address public constant owner = 0x0077DA9DF6507655CDb3aB9277A347EDe759F93F;\n', '\n', '    // 1 ETH = 300 USD Date: 11.08.2017\n', '    uint private oneTokenInWeiSale1 = 70175438596491; // 0,02 $\n', '    uint private oneTokenInWei1Sale2 = 526315789473684; // 0,15 $\n', '    uint private oneTokenInWei = 5473684210526320; // 1,56 $\n', '    \n', '    Phase public currentPhase = Phase.PreICO1;\n', '    \n', '    enum Phase {\n', '        PreICO1,\n', '        PreICO2,\n', '        ICO\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        if(owner != msg.sender) revert();\n', '        _;\n', '    }\n', '\n', '    event CreateMND(address indexed _to, uint256 _value);\n', '\n', '    function Mondo() {}\n', '\n', '    function () payable {\n', '        createTokens();\n', '    }\n', '\n', '    function createTokens() internal {\n', '        if (msg.value <= 0) revert();\n', '        \n', '        if (currentPhase == Phase.PreICO1) {\n', '            if (totalSupply <= tokenCreationCapPreICO02) {\n', '                generateTokens(oneTokenInWeiSale1);\n', '            }\n', '        } \n', '        else if (currentPhase == Phase.PreICO2) {\n', '            if (totalSupply > tokenCreationCapPreICO02 && totalSupply <= tokenCreationCapPreICO15) {\n', '                generateTokens(oneTokenInWei1Sale2);\n', '            }\n', '        }\n', '        else if (currentPhase == Phase.ICO) {\n', '            if (totalSupply > tokenCreationCapPreICO15 && totalSupply <= tokenCreationCap) {\n', '                generateTokens(oneTokenInWei);\n', '            }\n', '        } else { \n', '            revert();\n', '        }\n', '    }\n', '    \n', '    function generateTokens(uint _oneTokenInWei) internal {\n', '        uint multiplier = 10 ** decimals;\n', '        uint256 tokens = safeDiv(msg.value, _oneTokenInWei)*multiplier;\n', '        uint256 checkedSupply = safeAdd(totalSupply, tokens);\n', '        if (tokenCreationCap <= checkedSupply) revert();\n', '        balances[msg.sender] += tokens;\n', '        totalSupply = safeAdd(totalSupply, tokens);\n', '        CreateMND(msg.sender,tokens);\n', '    }\n', '    \n', '    function changePhaseToPreICO2() external onlyOwner returns (bool){\n', '        currentPhase = Phase.PreICO2;\n', '        return true;\n', '    }\n', '    \n', '    function changePhaseToICO() external onlyOwner returns (bool){\n', '        currentPhase = Phase.ICO;\n', '        return true;\n', '    }\n', '    \n', '    function changeTokenPrice(uint tpico1, uint tpico2, uint tpico) external onlyOwner returns (bool){\n', '        oneTokenInWeiSale1 = tpico1;\n', '        oneTokenInWei1Sale2 = tpico2;\n', '        oneTokenInWei = tpico;\n', '        return true;\n', '    }\n', '\n', '    function finalize() external onlyOwner returns (bool){\n', '      owner.transfer(this.balance);\n', '      return true;\n', '    }\n', '}']
