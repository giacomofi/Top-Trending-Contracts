['//! By Parity Technologies, 2017.\n', '//! Released under the Apache Licence 2.\n', '\n', 'pragma solidity ^0.4.15;\n', '\n', '// ECR20 standard token interface\n', 'contract Token {\n', '\tevent Transfer(address indexed from, address indexed to, uint256 value);\n', '\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '\tfunction balanceOf(address _owner) constant returns (uint256 balance);\n', '\tfunction transfer(address _to, uint256 _value) returns (bool success);\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\tfunction approve(address _spender, uint256 _value) returns (bool success);\n', '\tfunction allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '}\n', '\n', '// Owner-specific contract interface\n', 'contract Owned {\n', '\tevent NewOwner(address indexed old, address indexed current);\n', '\n', '\tmodifier only_owner {\n', '\t\trequire (msg.sender == owner);\n', '\t\t_;\n', '\t}\n', '\n', '\taddress public owner = msg.sender;\n', '\n', '\tfunction setOwner(address _new) only_owner {\n', '\t\tNewOwner(owner, _new);\n', '\t\towner = _new;\n', '\t}\n', '}\n', '\n', '/// Stripped down certifier interface.\n', 'contract Certifier {\n', '\tfunction certified(address _who) constant returns (bool);\n', '}\n', '\n', '// BasicCoin, ECR20 tokens that all belong to the owner for sending around\n', 'contract AmberToken is Token, Owned {\n', '\tstruct Account {\n', '\t\t// Balance is always less than or equal totalSupply since totalSupply is increased straight away of when releasing locked tokens.\n', '\t\tuint balance;\n', '\t\tmapping (address => uint) allowanceOf;\n', '\n', '\t\t// TokensPerPhase is always less than or equal to totalSupply since anything added to it is UNLOCK_PHASES times lower than added to totalSupply.\n', '\t\tuint tokensPerPhase;\n', '\t\tuint nextPhase;\n', '\t}\n', '\n', '\tevent Minted(address indexed who, uint value);\n', '\tevent MintedLocked(address indexed who, uint value);\n', '\n', '\tfunction AmberToken() {}\n', '\n', '\t// Mint a certain number of tokens.\n', '\t// _value has to be bounded not to overflow.\n', '\tfunction mint(address _who, uint _value)\n', '\t\tonly_owner\n', '\t\tpublic\n', '\t{\n', '\t\taccounts[_who].balance += _value;\n', '\t\ttotalSupply += _value;\n', '\t\tMinted(_who, _value);\n', '\t}\n', '\n', '\t// Mint a certain number of tokens that are locked up.\n', '\t// _value has to be bounded not to overflow.\n', '\tfunction mintLocked(address _who, uint _value)\n', '\t\tonly_owner\n', '\t\tpublic\n', '\t{\n', '\t\taccounts[_who].tokensPerPhase += _value / UNLOCK_PHASES;\n', '\t\ttotalSupply += _value;\n', '\t\tMintedLocked(_who, _value);\n', '\t}\n', '\n', '\t/// Finalise any minting operations. Resets the owner and causes normal tokens\n', '\t/// to be liquid. Also begins the countdown for locked-up tokens.\n', '\tfunction finalise()\n', '\t\tonly_owner\n', '\t\tpublic\n', '\t{\n', '\t\tlocked = false;\n', '\t\towner = 0;\n', '\t\tphaseStart = now;\n', '\t}\n', '\n', '\t/// Return the current unlock-phase. Won&#39;t work until after the contract\n', '\t/// has `finalise()` called.\n', '\tfunction currentPhase()\n', '\t\tpublic\n', '\t\tconstant\n', '\t\treturns (uint)\n', '\t{\n', '\t\trequire (phaseStart > 0);\n', '\t\tuint p = (now - phaseStart) / PHASE_DURATION;\n', '\t\treturn p > UNLOCK_PHASES ? UNLOCK_PHASES : p;\n', '\t}\n', '\n', '\t/// Unlock any now freeable tokens that are locked up for account `_who`.\n', '\tfunction unlockTokens(address _who)\n', '\t\tpublic\n', '\t{\n', '\t\tuint phase = currentPhase();\n', '\t\tuint tokens = accounts[_who].tokensPerPhase;\n', '\t\tuint nextPhase = accounts[_who].nextPhase;\n', '\t\tif (tokens > 0 && phase > nextPhase) {\n', '\t\t\taccounts[_who].balance += tokens * (phase - nextPhase);\n', '\t\t\taccounts[_who].nextPhase = phase;\n', '\t\t}\n', '\t}\n', '\n', '\t// Transfer tokens between accounts.\n', '\tfunction transfer(address _to, uint256 _value)\n', '\t\twhen_owns(msg.sender, _value)\n', '\t\twhen_liquid\n', '\t\treturns (bool)\n', '\t{\n', '\t\tTransfer(msg.sender, _to, _value);\n', '\t\taccounts[msg.sender].balance -= _value;\n', '\t\taccounts[_to].balance += _value;\n', '\n', '\t\treturn true;\n', '\t}\n', '\n', '\t// Transfer via allowance.\n', '\tfunction transferFrom(address _from, address _to, uint256 _value)\n', '\t\twhen_owns(_from, _value)\n', '\t\twhen_has_allowance(_from, msg.sender, _value)\n', '\t\twhen_liquid\n', '\t\treturns (bool)\n', '\t{\n', '\t\tTransfer(_from, _to, _value);\n', '\t\taccounts[_from].allowanceOf[msg.sender] -= _value;\n', '\t\taccounts[_from].balance -= _value;\n', '\t\taccounts[_to].balance += _value;\n', '\n', '\t\treturn true;\n', '\t}\n', '\n', '\t// Approve allowances\n', '\tfunction approve(address _spender, uint256 _value)\n', '\t\twhen_liquid\n', '\t\treturns (bool)\n', '\t{\n', '\t\t// Mitigate the race condition described here:\n', '\t\t// https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '\t\trequire (_value == 0 || accounts[msg.sender].allowanceOf[_spender] == 0);\n', '\t\tApproval(msg.sender, _spender, _value);\n', '\t\taccounts[msg.sender].allowanceOf[_spender] = _value;\n', '\n', '\t\treturn true;\n', '\t}\n', '\n', '\t// Get the balance of a specific address.\n', '\tfunction balanceOf(address _who) constant returns (uint256) {\n', '\t\treturn accounts[_who].balance;\n', '\t}\n', '\n', '\t// Available allowance\n', '\tfunction allowance(address _owner, address _spender)\n', '\t\tconstant\n', '\t\treturns (uint256)\n', '\t{\n', '\t\treturn accounts[_owner].allowanceOf[_spender];\n', '\t}\n', '\n', '\t// The balance should be available\n', '\tmodifier when_owns(address _owner, uint _amount) {\n', '\t\trequire (accounts[_owner].balance >= _amount);\n', '\t\t_;\n', '\t}\n', '\n', '\t// An allowance should be available\n', '\tmodifier when_has_allowance(address _owner, address _spender, uint _amount) {\n', '\t\trequire (accounts[_owner].allowanceOf[_spender] >= _amount);\n', '\t\t_;\n', '\t}\n', '\n', '\t// Tokens must not be locked.\n', '\tmodifier when_liquid {\n', '\t\trequire (!locked);\n', '\t\t_;\n', '\t}\n', '\n', '\t/// Usual token descriptors.\n', '\tstring constant public name = "Amber Token";\n', '\tuint8 constant public decimals = 18;\n', '\tstring constant public symbol = "AMB";\n', '\n', '\t// Are the tokens non-transferrable?\n', '\tbool public locked = true;\n', '\n', '\t// Phase information for slow-release tokens.\n', '\tuint public phaseStart = 0;\n', '\tuint public constant PHASE_DURATION = 180 days;\n', '\tuint public constant UNLOCK_PHASES = 4;\n', '\n', '\t// available token supply\n', '\tuint public totalSupply;\n', '\n', '\t// storage and mapping of all balances & allowances\n', '\tmapping (address => Account) accounts;\n', '}\n', '\n', '/// Will accept Ether "contributions" and record each both as a log and in a\n', '/// queryable record.\n', 'contract AmbrosusSale {\n', '\t/// Constructor.\n', '\tfunction AmbrosusSale() {\n', '\t\ttokens = new AmberToken();\n', '\t}\n', '\n', '\t// Can only be called by the administrator.\n', '\tmodifier only_admin { require (msg.sender == ADMINISTRATOR); _; }\n', '\t// Can only be called by the prepurchaser.\n', '\tmodifier only_prepurchaser { require (msg.sender == PREPURCHASER); _; }\n', '\n', '\t// The transaction params are valid for buying in.\n', '\tmodifier is_valid_buyin { require (tx.gasprice <= MAX_BUYIN_GAS_PRICE && msg.value >= MIN_BUYIN_VALUE); _; }\n', '\t// Requires the hard cap to be respected given the desired amount for `buyin`.\n', '\tmodifier is_under_cap_with(uint buyin) { require (buyin + saleRevenue <= MAX_REVENUE); _; }\n', '\t// Requires sender to be certified.\n', '\tmodifier only_certified(address who) { require (CERTIFIER.certified(who)); _; }\n', '\n', '\t/*\n', '\t\tSale life cycle:\n', '\t\t1. Not yet started.\n', '\t\t2. Started, further purchases possible.\n', '\t\t\ta. Normal operation (next step can be 2b or 3)\n', '\t\t\tb. Paused (next step can be 2a or 3)\n', '\t\t3. Complete (equivalent to Allocation Lifecycle 2 & 3).\n', '\t*/\n', '\n', '\t// Can only be called by prior to the period (1).\n', '\tmodifier only_before_period { require (now < BEGIN_TIME); _; }\n', '\t// Can only be called during the period when not paused (2a).\n', '\tmodifier only_during_period { require (now >= BEGIN_TIME && now < END_TIME && !isPaused); _; }\n', '\t// Can only be called during the period when paused (2b)\n', '\tmodifier only_during_paused_period { require (now >= BEGIN_TIME && now < END_TIME && isPaused); _; }\n', '\t// Can only be called after the period (3).\n', '\tmodifier only_after_sale { require (now >= END_TIME || saleRevenue >= MAX_REVENUE); _; }\n', '\n', '\t/*\n', '\t\tAllocation life cycle:\n', '\t\t1. Uninitialised (sale not yet started/ended, equivalent to Sale Lifecycle 1 & 2).\n', '\t\t2. Initialised, not yet completed (further allocations possible).\n', '\t\t3. Completed (no further allocations possible).\n', '\t*/\n', '\n', '\t// Only when allocations have not yet been initialised (1).\n', '\tmodifier when_allocations_uninitialised { require (!allocationsInitialised); _; }\n', '\t// Only when sufficient allocations remain for making this liquid allocation (2).\n', '\tmodifier when_allocatable_liquid(uint amount) { require (liquidAllocatable >= amount); _; }\n', '\t// Only when sufficient allocations remain for making this locked allocation (2).\n', '\tmodifier when_allocatable_locked(uint amount) { require (lockedAllocatable >= amount); _; }\n', '\t// Only when no further allocations are possible (3).\n', '\tmodifier when_allocations_complete { require (allocationsInitialised && liquidAllocatable == 0 && lockedAllocatable == 0); _; }\n', '\n', '\t/// Note a pre-ICO sale.\n', '\tevent Prepurchased(address indexed recipient, uint etherPaid, uint amberSold);\n', '\t/// Some contribution `amount` received from `recipient`.\n', '\tevent Purchased(address indexed recipient, uint amount);\n', '\t/// Some contribution `amount` received from `recipient`.\n', '\tevent SpecialPurchased(address indexed recipient, uint etherPaid, uint amberSold);\n', '\t/// Period paused abnormally.\n', '\tevent Paused();\n', '\t/// Period restarted after abnormal halt.\n', '\tevent Unpaused();\n', '\t/// Some contribution `amount` received from `recipient`.\n', '\tevent Allocated(address indexed recipient, uint amount, bool liquid);\n', '\n', '\t/// Note a prepurchase that has already happened.\n', '\t/// Up to owner to ensure that values do not overflow.\n', '\t///\n', '\t/// Preconditions: !sale_started\n', '\t/// Writes {Tokens, Sale}\n', '\tfunction notePrepurchase(address _who, uint _etherPaid, uint _amberSold)\n', '\t\tonly_prepurchaser\n', '\t\tonly_before_period\n', '\t\tpublic\n', '\t{\n', '\t\t// Admin ensures bounded value.\n', '\t\ttokens.mint(_who, _amberSold);\n', '\t\tsaleRevenue += _etherPaid;\n', '\t\ttotalSold += _amberSold;\n', '\t\tPrepurchased(_who, _etherPaid, _amberSold);\n', '\t}\n', '\n', '\t/// Make a purchase from a privileged account. No KYC is required and a\n', '\t/// preferential buyin rate may be given.\n', '\t///\n', '\t/// Preconditions: !paused, sale_ongoing\n', '\t/// Postconditions: !paused, ?!sale_ongoing\n', '\t/// Writes {Tokens, Sale}\n', '\tfunction specialPurchase()\n', '\t\tonly_before_period\n', '\t\tis_under_cap_with(msg.value)\n', '\t\tpayable\n', '\t\tpublic\n', '\t{\n', '\t\tuint256 bought = buyinReturn(msg.sender) * msg.value;\n', '\t\trequire (bought > 0);   // be kind and don&#39;t punish the idiots.\n', '\n', '\t\t// Bounded value, see STANDARD_BUYIN.\n', '\t\ttokens.mint(msg.sender, bought);\n', '\t\tTREASURY.transfer(msg.value);\n', '\t\tsaleRevenue += msg.value;\n', '\t\ttotalSold += bought;\n', '\t\tSpecialPurchased(msg.sender, msg.value, bought);\n', '   }\n', '\n', '\t/// Let sender make a purchase to their account.\n', '\t///\n', '\t/// Preconditions: !paused, sale_ongoing\n', '\t/// Postconditions: ?!sale_ongoing\n', '\t/// Writes {Tokens, Sale}\n', '\tfunction ()\n', '\t\tonly_certified(msg.sender)\n', '\t\tpayable\n', '\t\tpublic\n', '\t{\n', '\t\tprocessPurchase(msg.sender);\n', '\t}\n', '\n', '\t/// Let sender make a standard purchase; AMB goes into another account.\n', '\t///\n', '\t/// Preconditions: !paused, sale_ongoing\n', '\t/// Postconditions: ?!sale_ongoing\n', '\t/// Writes {Tokens, Sale}\n', '\tfunction purchaseTo(address _recipient)\n', '\t\tonly_certified(msg.sender)\n', '\t\tpayable\n', '\t\tpublic\n', '\t{\n', '\t\tprocessPurchase(_recipient);\n', '\t}\n', '\n', '\t/// Receive a contribution from `_recipient`.\n', '\t///\n', '\t/// Preconditions: !paused, sale_ongoing\n', '\t/// Postconditions: ?!sale_ongoing\n', '\t/// Writes {Tokens, Sale}\n', '\tfunction processPurchase(address _recipient)\n', '\t\tonly_during_period\n', '\t\tis_valid_buyin\n', '\t\tis_under_cap_with(msg.value)\n', '\t\tprivate\n', '\t{\n', '\t\t// Bounded value, see STANDARD_BUYIN.\n', '\t\ttokens.mint(_recipient, msg.value * STANDARD_BUYIN);\n', '\t\tTREASURY.transfer(msg.value);\n', '\t\tsaleRevenue += msg.value;\n', '\t\ttotalSold += msg.value * STANDARD_BUYIN;\n', '\t\tPurchased(_recipient, msg.value);\n', '\t}\n', '\n', '\t/// Determine purchase price for a given address.\n', '\tfunction buyinReturn(address _who)\n', '\t\tconstant\n', '\t\tpublic\n', '\t\treturns (uint)\n', '\t{\n', '\t\t// Chinese exchanges.\n', '\t\tif (\n', '\t\t\t_who == CHINESE_EXCHANGE_1 || _who == CHINESE_EXCHANGE_2 ||\n', '\t\t\t_who == CHINESE_EXCHANGE_3 || _who == CHINESE_EXCHANGE_4\n', '\t\t)\n', '\t\t\treturn CHINESE_EXCHANGE_BUYIN;\n', '\n', '\t\t// BTCSuisse tier 1\n', '\t\tif (_who == BTC_SUISSE_TIER_1)\n', '\t\t\treturn STANDARD_BUYIN;\n', '\t\t// BTCSuisse tier 2\n', '\t\tif (_who == BTC_SUISSE_TIER_2)\n', '\t\t\treturn TIER_2_BUYIN;\n', '\t\t// BTCSuisse tier 3\n', '\t\tif (_who == BTC_SUISSE_TIER_3)\n', '\t\t\treturn TIER_3_BUYIN;\n', '\t\t// BTCSuisse tier 4\n', '\t\tif (_who == BTC_SUISSE_TIER_4)\n', '\t\t\treturn TIER_4_BUYIN;\n', '\n', '\t\treturn 0;\n', '\t}\n', '\n', '\t/// Halt the contribution period. Any attempt at contributing will fail.\n', '\t///\n', '\t/// Preconditions: !paused, sale_ongoing\n', '\t/// Postconditions: paused\n', '\t/// Writes {Paused}\n', '\tfunction pause()\n', '\t\tonly_admin\n', '\t\tonly_during_period\n', '\t\tpublic\n', '\t{\n', '\t\tisPaused = true;\n', '\t\tPaused();\n', '\t}\n', '\n', '\t/// Unhalt the contribution period.\n', '\t///\n', '\t/// Preconditions: paused\n', '\t/// Postconditions: !paused\n', '\t/// Writes {Paused}\n', '\tfunction unpause()\n', '\t\tonly_admin\n', '\t\tonly_during_paused_period\n', '\t\tpublic\n', '\t{\n', '\t\tisPaused = false;\n', '\t\tUnpaused();\n', '\t}\n', '\n', '\t/// Called once by anybody after the sale ends.\n', '\t/// Initialises the specific values (i.e. absolute token quantities) of the\n', '\t/// allowed liquid/locked allocations.\n', '\t///\n', '\t/// Preconditions: !allocations_initialised\n', '\t/// Postconditions: allocations_initialised, !allocations_complete\n', '\t/// Writes {Allocations}\n', '\tfunction initialiseAllocations()\n', '\t\tpublic\n', '\t\tonly_after_sale\n', '\t\twhen_allocations_uninitialised\n', '\t{\n', '\t\tallocationsInitialised = true;\n', '\t\tliquidAllocatable = LIQUID_ALLOCATION_PPM * totalSold / SALES_ALLOCATION_PPM;\n', '\t\tlockedAllocatable = LOCKED_ALLOCATION_PPM * totalSold / SALES_ALLOCATION_PPM;\n', '\t}\n', '\n', '\t/// Preallocate a liquid portion of tokens.\n', '\t/// Admin may call this to allocate a share of the liquid tokens.\n', '\t/// Up to admin to ensure that value does not overflow.\n', '\t///\n', '\t/// Preconditions: allocations_initialised\n', '\t/// Postconditions: ?allocations_complete\n', '\t/// Writes {Allocations, Tokens}\n', '\tfunction allocateLiquid(address _who, uint _value)\n', '\t\tonly_admin\n', '\t\twhen_allocatable_liquid(_value)\n', '\t\tpublic\n', '\t{\n', '\t\t// Admin ensures bounded value.\n', '\t\ttokens.mint(_who, _value);\n', '\t\tliquidAllocatable -= _value;\n', '\t\tAllocated(_who, _value, true);\n', '\t}\n', '\n', '\t/// Preallocate a locked-up portion of tokens.\n', '\t/// Admin may call this to allocate a share of the locked tokens.\n', '\t/// Up to admin to ensure that value does not overflow and _value is divisible by UNLOCK_PHASES.\n', '\t///\n', '\t/// Preconditions: allocations_initialised\n', '\t/// Postconditions: ?allocations_complete\n', '\t/// Writes {Allocations, Tokens}\n', '\tfunction allocateLocked(address _who, uint _value)\n', '\t\tonly_admin\n', '\t\twhen_allocatable_locked(_value)\n', '\t\tpublic\n', '\t{\n', '\t\t// Admin ensures bounded value.\n', '\t\ttokens.mintLocked(_who, _value);\n', '\t\tlockedAllocatable -= _value;\n', '\t\tAllocated(_who, _value, false);\n', '\t}\n', '\n', '\t/// End of the sale and token allocation; retire this contract.\n', '\t/// Once called, no more tokens can be minted, basic tokens are now liquid.\n', '\t/// Anyone can call, but only once this contract can properly be retired.\n', '\t///\n', '\t/// Preconditions: allocations_complete\n', '\t/// Postconditions: liquid_tokens_transferable, this_is_dead\n', '\t/// Writes {Tokens}\n', '\tfunction finalise()\n', '\t\twhen_allocations_complete\n', '\t\tpublic\n', '\t{\n', '\t\ttokens.finalise();\n', '\t}\n', '\n', '\t//////\n', '\t// STATE\n', '\t//////\n', '\n', '\t// How much is enough?\n', '\tuint public constant MIN_BUYIN_VALUE = 1;\n', '\t// Max gas price for buyins.\n', '\tuint public constant MAX_BUYIN_GAS_PRICE = 25000000000;\n', '\t// The exposed hard cap.\n', '\tuint public constant MAX_REVENUE = 328103 ether;\n', '\n', '\t// The total share of tokens, expressed in PPM, allocated to pre-ICO and ICO.\n', '\tuint constant public SALES_ALLOCATION_PPM = 400000;\n', '\t// The total share of tokens, expressed in PPM, the admin may later allocate, as locked tokens.\n', '\tuint constant public LOCKED_ALLOCATION_PPM = 337000;\n', '\t// The total share of tokens, expressed in PPM, the admin may later allocate, as liquid tokens.\n', '\tuint constant public LIQUID_ALLOCATION_PPM = 263000;\n', '\n', '\t/// The certifier resource. TODO: set address\n', '\tCertifier public constant CERTIFIER = Certifier(0x7b1Ab331546F021A40bd4D09fFb802261CaACcc9);\n', '\t// Who can halt/unhalt/kill?\n', '\taddress public constant ADMINISTRATOR = 0x11bF17B890a80080A8F9C1673D2951296a6F3D91;\n', '\t// Who can prepurchase?\n', '\taddress public constant PREPURCHASER = 0x00C269e9D02188E39C9922386De631c6AED5b4d4;\n', '\t// Who gets the stash? Should not release funds during minting process.\n', '\taddress public constant TREASURY = 0xB47aD434C6e401473F1d3442001Ac69cda1dcFDd;\n', '\t// When does the contribution period begin?\n', '\tuint public constant BEGIN_TIME = 1505986211;\n', '\t// How long does the sale last for?\n', '\tuint public constant DURATION = 30 days;\n', '\t// When does the period end?\n', '\tuint public constant END_TIME = BEGIN_TIME + DURATION;\n', '\n', '\t// The privileged buyin accounts.\n', '\taddress public constant BTC_SUISSE_TIER_1 = 0x53B3D4f98fcb6f0920096fe1cCCa0E4327Da7a1D;\n', '\taddress public constant BTC_SUISSE_TIER_2 = 0x642fDd12b1Dd27b9E19758F0AefC072dae7Ab996;\n', '\taddress public constant BTC_SUISSE_TIER_3 = 0x64175446A1e3459c3E9D650ec26420BA90060d28;\n', '\taddress public constant BTC_SUISSE_TIER_4 = 0xB17C2f9a057a2640309e41358a22Cf00f8B51626;\n', '\taddress public constant CHINESE_EXCHANGE_1 = 0x36f548fAB37Fcd39cA8725B8fA214fcd784FE0A3;\n', '\taddress public constant CHINESE_EXCHANGE_2 = 0x877Da872D223AB3D073Ab6f9B4bb27540E387C5F;\n', '\taddress public constant CHINESE_EXCHANGE_3 = 0xCcC088ec38A4dbc15Ba269A176883F6ba302eD8d;\n', '\t// TODO: set address\n', '\taddress public constant CHINESE_EXCHANGE_4 = 0;\n', '\n', '\t// Tokens per eth for the various buy-in rates.\n', '\t// 1e8 ETH in existence, means at most 1.5e11 issued.\n', '\tuint public constant STANDARD_BUYIN = 1000;\n', '\tuint public constant TIER_2_BUYIN = 1111;\n', '\tuint public constant TIER_3_BUYIN = 1250;\n', '\tuint public constant TIER_4_BUYIN = 1429;\n', '\tuint public constant CHINESE_EXCHANGE_BUYIN = 1087;\n', '\n', '\t//////\n', '\t// State Subset: Allocations\n', '\t//\n', '\t// Invariants:\n', '\t// !allocationsInitialised ||\n', '\t//   (liquidAllocatable + tokens.liquidAllocated) / LIQUID_ALLOCATION_PPM == totalSold / SALES_ALLOCATION_PPM &&\n', '\t//   (lockedAllocatable + tokens.lockedAllocated) / LOCKED_ALLOCATION_PPM == totalSold / SALES_ALLOCATION_PPM\n', '\t//\n', '\t// when_allocations_complete || (now < END_TIME && saleRevenue < MAX_REVENUE)\n', '\n', '\t// Have post-sale token allocations been initialised?\n', '\tbool public allocationsInitialised = false;\n', '\t// How many liquid tokens may yet be allocated?\n', '\tuint public liquidAllocatable;\n', '\t// How many locked tokens may yet be allocated?\n', '\tuint public lockedAllocatable;\n', '\n', '\t//////\n', '\t// State Subset: Sale\n', '\t//\n', '\t// Invariants:\n', '\t// saleRevenue <= MAX_REVENUE\n', '\n', '\t// Total amount raised in both presale and sale, in Wei.\n', '\t// Assuming TREASURY locks funds, so can not exceed total amount of Ether 1e8.\n', '\tuint public saleRevenue = 0;\n', '\t// Total amount minted in both presale and sale, in AMB * 10^-18.\n', '\t// Assuming the TREASURY locks funds, msg.value * STANDARD_BUYIN will be less than 1.5e11.\n', '\tuint public totalSold = 0;\n', '\n', '\t//////\n', '\t// State Subset: Tokens\n', '\n', '\t// The contract which gets called whenever anything is received.\n', '\tAmberToken public tokens;\n', '\n', '\t//////\n', '\t// State Subset: Pause\n', '\n', '\t// Are contributions abnormally paused?\n', '\tbool public isPaused = false;\n', '}']
['//! By Parity Technologies, 2017.\n', '//! Released under the Apache Licence 2.\n', '\n', 'pragma solidity ^0.4.15;\n', '\n', '// ECR20 standard token interface\n', 'contract Token {\n', '\tevent Transfer(address indexed from, address indexed to, uint256 value);\n', '\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '\tfunction balanceOf(address _owner) constant returns (uint256 balance);\n', '\tfunction transfer(address _to, uint256 _value) returns (bool success);\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\tfunction approve(address _spender, uint256 _value) returns (bool success);\n', '\tfunction allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '}\n', '\n', '// Owner-specific contract interface\n', 'contract Owned {\n', '\tevent NewOwner(address indexed old, address indexed current);\n', '\n', '\tmodifier only_owner {\n', '\t\trequire (msg.sender == owner);\n', '\t\t_;\n', '\t}\n', '\n', '\taddress public owner = msg.sender;\n', '\n', '\tfunction setOwner(address _new) only_owner {\n', '\t\tNewOwner(owner, _new);\n', '\t\towner = _new;\n', '\t}\n', '}\n', '\n', '/// Stripped down certifier interface.\n', 'contract Certifier {\n', '\tfunction certified(address _who) constant returns (bool);\n', '}\n', '\n', '// BasicCoin, ECR20 tokens that all belong to the owner for sending around\n', 'contract AmberToken is Token, Owned {\n', '\tstruct Account {\n', '\t\t// Balance is always less than or equal totalSupply since totalSupply is increased straight away of when releasing locked tokens.\n', '\t\tuint balance;\n', '\t\tmapping (address => uint) allowanceOf;\n', '\n', '\t\t// TokensPerPhase is always less than or equal to totalSupply since anything added to it is UNLOCK_PHASES times lower than added to totalSupply.\n', '\t\tuint tokensPerPhase;\n', '\t\tuint nextPhase;\n', '\t}\n', '\n', '\tevent Minted(address indexed who, uint value);\n', '\tevent MintedLocked(address indexed who, uint value);\n', '\n', '\tfunction AmberToken() {}\n', '\n', '\t// Mint a certain number of tokens.\n', '\t// _value has to be bounded not to overflow.\n', '\tfunction mint(address _who, uint _value)\n', '\t\tonly_owner\n', '\t\tpublic\n', '\t{\n', '\t\taccounts[_who].balance += _value;\n', '\t\ttotalSupply += _value;\n', '\t\tMinted(_who, _value);\n', '\t}\n', '\n', '\t// Mint a certain number of tokens that are locked up.\n', '\t// _value has to be bounded not to overflow.\n', '\tfunction mintLocked(address _who, uint _value)\n', '\t\tonly_owner\n', '\t\tpublic\n', '\t{\n', '\t\taccounts[_who].tokensPerPhase += _value / UNLOCK_PHASES;\n', '\t\ttotalSupply += _value;\n', '\t\tMintedLocked(_who, _value);\n', '\t}\n', '\n', '\t/// Finalise any minting operations. Resets the owner and causes normal tokens\n', '\t/// to be liquid. Also begins the countdown for locked-up tokens.\n', '\tfunction finalise()\n', '\t\tonly_owner\n', '\t\tpublic\n', '\t{\n', '\t\tlocked = false;\n', '\t\towner = 0;\n', '\t\tphaseStart = now;\n', '\t}\n', '\n', "\t/// Return the current unlock-phase. Won't work until after the contract\n", '\t/// has `finalise()` called.\n', '\tfunction currentPhase()\n', '\t\tpublic\n', '\t\tconstant\n', '\t\treturns (uint)\n', '\t{\n', '\t\trequire (phaseStart > 0);\n', '\t\tuint p = (now - phaseStart) / PHASE_DURATION;\n', '\t\treturn p > UNLOCK_PHASES ? UNLOCK_PHASES : p;\n', '\t}\n', '\n', '\t/// Unlock any now freeable tokens that are locked up for account `_who`.\n', '\tfunction unlockTokens(address _who)\n', '\t\tpublic\n', '\t{\n', '\t\tuint phase = currentPhase();\n', '\t\tuint tokens = accounts[_who].tokensPerPhase;\n', '\t\tuint nextPhase = accounts[_who].nextPhase;\n', '\t\tif (tokens > 0 && phase > nextPhase) {\n', '\t\t\taccounts[_who].balance += tokens * (phase - nextPhase);\n', '\t\t\taccounts[_who].nextPhase = phase;\n', '\t\t}\n', '\t}\n', '\n', '\t// Transfer tokens between accounts.\n', '\tfunction transfer(address _to, uint256 _value)\n', '\t\twhen_owns(msg.sender, _value)\n', '\t\twhen_liquid\n', '\t\treturns (bool)\n', '\t{\n', '\t\tTransfer(msg.sender, _to, _value);\n', '\t\taccounts[msg.sender].balance -= _value;\n', '\t\taccounts[_to].balance += _value;\n', '\n', '\t\treturn true;\n', '\t}\n', '\n', '\t// Transfer via allowance.\n', '\tfunction transferFrom(address _from, address _to, uint256 _value)\n', '\t\twhen_owns(_from, _value)\n', '\t\twhen_has_allowance(_from, msg.sender, _value)\n', '\t\twhen_liquid\n', '\t\treturns (bool)\n', '\t{\n', '\t\tTransfer(_from, _to, _value);\n', '\t\taccounts[_from].allowanceOf[msg.sender] -= _value;\n', '\t\taccounts[_from].balance -= _value;\n', '\t\taccounts[_to].balance += _value;\n', '\n', '\t\treturn true;\n', '\t}\n', '\n', '\t// Approve allowances\n', '\tfunction approve(address _spender, uint256 _value)\n', '\t\twhen_liquid\n', '\t\treturns (bool)\n', '\t{\n', '\t\t// Mitigate the race condition described here:\n', '\t\t// https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '\t\trequire (_value == 0 || accounts[msg.sender].allowanceOf[_spender] == 0);\n', '\t\tApproval(msg.sender, _spender, _value);\n', '\t\taccounts[msg.sender].allowanceOf[_spender] = _value;\n', '\n', '\t\treturn true;\n', '\t}\n', '\n', '\t// Get the balance of a specific address.\n', '\tfunction balanceOf(address _who) constant returns (uint256) {\n', '\t\treturn accounts[_who].balance;\n', '\t}\n', '\n', '\t// Available allowance\n', '\tfunction allowance(address _owner, address _spender)\n', '\t\tconstant\n', '\t\treturns (uint256)\n', '\t{\n', '\t\treturn accounts[_owner].allowanceOf[_spender];\n', '\t}\n', '\n', '\t// The balance should be available\n', '\tmodifier when_owns(address _owner, uint _amount) {\n', '\t\trequire (accounts[_owner].balance >= _amount);\n', '\t\t_;\n', '\t}\n', '\n', '\t// An allowance should be available\n', '\tmodifier when_has_allowance(address _owner, address _spender, uint _amount) {\n', '\t\trequire (accounts[_owner].allowanceOf[_spender] >= _amount);\n', '\t\t_;\n', '\t}\n', '\n', '\t// Tokens must not be locked.\n', '\tmodifier when_liquid {\n', '\t\trequire (!locked);\n', '\t\t_;\n', '\t}\n', '\n', '\t/// Usual token descriptors.\n', '\tstring constant public name = "Amber Token";\n', '\tuint8 constant public decimals = 18;\n', '\tstring constant public symbol = "AMB";\n', '\n', '\t// Are the tokens non-transferrable?\n', '\tbool public locked = true;\n', '\n', '\t// Phase information for slow-release tokens.\n', '\tuint public phaseStart = 0;\n', '\tuint public constant PHASE_DURATION = 180 days;\n', '\tuint public constant UNLOCK_PHASES = 4;\n', '\n', '\t// available token supply\n', '\tuint public totalSupply;\n', '\n', '\t// storage and mapping of all balances & allowances\n', '\tmapping (address => Account) accounts;\n', '}\n', '\n', '/// Will accept Ether "contributions" and record each both as a log and in a\n', '/// queryable record.\n', 'contract AmbrosusSale {\n', '\t/// Constructor.\n', '\tfunction AmbrosusSale() {\n', '\t\ttokens = new AmberToken();\n', '\t}\n', '\n', '\t// Can only be called by the administrator.\n', '\tmodifier only_admin { require (msg.sender == ADMINISTRATOR); _; }\n', '\t// Can only be called by the prepurchaser.\n', '\tmodifier only_prepurchaser { require (msg.sender == PREPURCHASER); _; }\n', '\n', '\t// The transaction params are valid for buying in.\n', '\tmodifier is_valid_buyin { require (tx.gasprice <= MAX_BUYIN_GAS_PRICE && msg.value >= MIN_BUYIN_VALUE); _; }\n', '\t// Requires the hard cap to be respected given the desired amount for `buyin`.\n', '\tmodifier is_under_cap_with(uint buyin) { require (buyin + saleRevenue <= MAX_REVENUE); _; }\n', '\t// Requires sender to be certified.\n', '\tmodifier only_certified(address who) { require (CERTIFIER.certified(who)); _; }\n', '\n', '\t/*\n', '\t\tSale life cycle:\n', '\t\t1. Not yet started.\n', '\t\t2. Started, further purchases possible.\n', '\t\t\ta. Normal operation (next step can be 2b or 3)\n', '\t\t\tb. Paused (next step can be 2a or 3)\n', '\t\t3. Complete (equivalent to Allocation Lifecycle 2 & 3).\n', '\t*/\n', '\n', '\t// Can only be called by prior to the period (1).\n', '\tmodifier only_before_period { require (now < BEGIN_TIME); _; }\n', '\t// Can only be called during the period when not paused (2a).\n', '\tmodifier only_during_period { require (now >= BEGIN_TIME && now < END_TIME && !isPaused); _; }\n', '\t// Can only be called during the period when paused (2b)\n', '\tmodifier only_during_paused_period { require (now >= BEGIN_TIME && now < END_TIME && isPaused); _; }\n', '\t// Can only be called after the period (3).\n', '\tmodifier only_after_sale { require (now >= END_TIME || saleRevenue >= MAX_REVENUE); _; }\n', '\n', '\t/*\n', '\t\tAllocation life cycle:\n', '\t\t1. Uninitialised (sale not yet started/ended, equivalent to Sale Lifecycle 1 & 2).\n', '\t\t2. Initialised, not yet completed (further allocations possible).\n', '\t\t3. Completed (no further allocations possible).\n', '\t*/\n', '\n', '\t// Only when allocations have not yet been initialised (1).\n', '\tmodifier when_allocations_uninitialised { require (!allocationsInitialised); _; }\n', '\t// Only when sufficient allocations remain for making this liquid allocation (2).\n', '\tmodifier when_allocatable_liquid(uint amount) { require (liquidAllocatable >= amount); _; }\n', '\t// Only when sufficient allocations remain for making this locked allocation (2).\n', '\tmodifier when_allocatable_locked(uint amount) { require (lockedAllocatable >= amount); _; }\n', '\t// Only when no further allocations are possible (3).\n', '\tmodifier when_allocations_complete { require (allocationsInitialised && liquidAllocatable == 0 && lockedAllocatable == 0); _; }\n', '\n', '\t/// Note a pre-ICO sale.\n', '\tevent Prepurchased(address indexed recipient, uint etherPaid, uint amberSold);\n', '\t/// Some contribution `amount` received from `recipient`.\n', '\tevent Purchased(address indexed recipient, uint amount);\n', '\t/// Some contribution `amount` received from `recipient`.\n', '\tevent SpecialPurchased(address indexed recipient, uint etherPaid, uint amberSold);\n', '\t/// Period paused abnormally.\n', '\tevent Paused();\n', '\t/// Period restarted after abnormal halt.\n', '\tevent Unpaused();\n', '\t/// Some contribution `amount` received from `recipient`.\n', '\tevent Allocated(address indexed recipient, uint amount, bool liquid);\n', '\n', '\t/// Note a prepurchase that has already happened.\n', '\t/// Up to owner to ensure that values do not overflow.\n', '\t///\n', '\t/// Preconditions: !sale_started\n', '\t/// Writes {Tokens, Sale}\n', '\tfunction notePrepurchase(address _who, uint _etherPaid, uint _amberSold)\n', '\t\tonly_prepurchaser\n', '\t\tonly_before_period\n', '\t\tpublic\n', '\t{\n', '\t\t// Admin ensures bounded value.\n', '\t\ttokens.mint(_who, _amberSold);\n', '\t\tsaleRevenue += _etherPaid;\n', '\t\ttotalSold += _amberSold;\n', '\t\tPrepurchased(_who, _etherPaid, _amberSold);\n', '\t}\n', '\n', '\t/// Make a purchase from a privileged account. No KYC is required and a\n', '\t/// preferential buyin rate may be given.\n', '\t///\n', '\t/// Preconditions: !paused, sale_ongoing\n', '\t/// Postconditions: !paused, ?!sale_ongoing\n', '\t/// Writes {Tokens, Sale}\n', '\tfunction specialPurchase()\n', '\t\tonly_before_period\n', '\t\tis_under_cap_with(msg.value)\n', '\t\tpayable\n', '\t\tpublic\n', '\t{\n', '\t\tuint256 bought = buyinReturn(msg.sender) * msg.value;\n', "\t\trequire (bought > 0);   // be kind and don't punish the idiots.\n", '\n', '\t\t// Bounded value, see STANDARD_BUYIN.\n', '\t\ttokens.mint(msg.sender, bought);\n', '\t\tTREASURY.transfer(msg.value);\n', '\t\tsaleRevenue += msg.value;\n', '\t\ttotalSold += bought;\n', '\t\tSpecialPurchased(msg.sender, msg.value, bought);\n', '   }\n', '\n', '\t/// Let sender make a purchase to their account.\n', '\t///\n', '\t/// Preconditions: !paused, sale_ongoing\n', '\t/// Postconditions: ?!sale_ongoing\n', '\t/// Writes {Tokens, Sale}\n', '\tfunction ()\n', '\t\tonly_certified(msg.sender)\n', '\t\tpayable\n', '\t\tpublic\n', '\t{\n', '\t\tprocessPurchase(msg.sender);\n', '\t}\n', '\n', '\t/// Let sender make a standard purchase; AMB goes into another account.\n', '\t///\n', '\t/// Preconditions: !paused, sale_ongoing\n', '\t/// Postconditions: ?!sale_ongoing\n', '\t/// Writes {Tokens, Sale}\n', '\tfunction purchaseTo(address _recipient)\n', '\t\tonly_certified(msg.sender)\n', '\t\tpayable\n', '\t\tpublic\n', '\t{\n', '\t\tprocessPurchase(_recipient);\n', '\t}\n', '\n', '\t/// Receive a contribution from `_recipient`.\n', '\t///\n', '\t/// Preconditions: !paused, sale_ongoing\n', '\t/// Postconditions: ?!sale_ongoing\n', '\t/// Writes {Tokens, Sale}\n', '\tfunction processPurchase(address _recipient)\n', '\t\tonly_during_period\n', '\t\tis_valid_buyin\n', '\t\tis_under_cap_with(msg.value)\n', '\t\tprivate\n', '\t{\n', '\t\t// Bounded value, see STANDARD_BUYIN.\n', '\t\ttokens.mint(_recipient, msg.value * STANDARD_BUYIN);\n', '\t\tTREASURY.transfer(msg.value);\n', '\t\tsaleRevenue += msg.value;\n', '\t\ttotalSold += msg.value * STANDARD_BUYIN;\n', '\t\tPurchased(_recipient, msg.value);\n', '\t}\n', '\n', '\t/// Determine purchase price for a given address.\n', '\tfunction buyinReturn(address _who)\n', '\t\tconstant\n', '\t\tpublic\n', '\t\treturns (uint)\n', '\t{\n', '\t\t// Chinese exchanges.\n', '\t\tif (\n', '\t\t\t_who == CHINESE_EXCHANGE_1 || _who == CHINESE_EXCHANGE_2 ||\n', '\t\t\t_who == CHINESE_EXCHANGE_3 || _who == CHINESE_EXCHANGE_4\n', '\t\t)\n', '\t\t\treturn CHINESE_EXCHANGE_BUYIN;\n', '\n', '\t\t// BTCSuisse tier 1\n', '\t\tif (_who == BTC_SUISSE_TIER_1)\n', '\t\t\treturn STANDARD_BUYIN;\n', '\t\t// BTCSuisse tier 2\n', '\t\tif (_who == BTC_SUISSE_TIER_2)\n', '\t\t\treturn TIER_2_BUYIN;\n', '\t\t// BTCSuisse tier 3\n', '\t\tif (_who == BTC_SUISSE_TIER_3)\n', '\t\t\treturn TIER_3_BUYIN;\n', '\t\t// BTCSuisse tier 4\n', '\t\tif (_who == BTC_SUISSE_TIER_4)\n', '\t\t\treturn TIER_4_BUYIN;\n', '\n', '\t\treturn 0;\n', '\t}\n', '\n', '\t/// Halt the contribution period. Any attempt at contributing will fail.\n', '\t///\n', '\t/// Preconditions: !paused, sale_ongoing\n', '\t/// Postconditions: paused\n', '\t/// Writes {Paused}\n', '\tfunction pause()\n', '\t\tonly_admin\n', '\t\tonly_during_period\n', '\t\tpublic\n', '\t{\n', '\t\tisPaused = true;\n', '\t\tPaused();\n', '\t}\n', '\n', '\t/// Unhalt the contribution period.\n', '\t///\n', '\t/// Preconditions: paused\n', '\t/// Postconditions: !paused\n', '\t/// Writes {Paused}\n', '\tfunction unpause()\n', '\t\tonly_admin\n', '\t\tonly_during_paused_period\n', '\t\tpublic\n', '\t{\n', '\t\tisPaused = false;\n', '\t\tUnpaused();\n', '\t}\n', '\n', '\t/// Called once by anybody after the sale ends.\n', '\t/// Initialises the specific values (i.e. absolute token quantities) of the\n', '\t/// allowed liquid/locked allocations.\n', '\t///\n', '\t/// Preconditions: !allocations_initialised\n', '\t/// Postconditions: allocations_initialised, !allocations_complete\n', '\t/// Writes {Allocations}\n', '\tfunction initialiseAllocations()\n', '\t\tpublic\n', '\t\tonly_after_sale\n', '\t\twhen_allocations_uninitialised\n', '\t{\n', '\t\tallocationsInitialised = true;\n', '\t\tliquidAllocatable = LIQUID_ALLOCATION_PPM * totalSold / SALES_ALLOCATION_PPM;\n', '\t\tlockedAllocatable = LOCKED_ALLOCATION_PPM * totalSold / SALES_ALLOCATION_PPM;\n', '\t}\n', '\n', '\t/// Preallocate a liquid portion of tokens.\n', '\t/// Admin may call this to allocate a share of the liquid tokens.\n', '\t/// Up to admin to ensure that value does not overflow.\n', '\t///\n', '\t/// Preconditions: allocations_initialised\n', '\t/// Postconditions: ?allocations_complete\n', '\t/// Writes {Allocations, Tokens}\n', '\tfunction allocateLiquid(address _who, uint _value)\n', '\t\tonly_admin\n', '\t\twhen_allocatable_liquid(_value)\n', '\t\tpublic\n', '\t{\n', '\t\t// Admin ensures bounded value.\n', '\t\ttokens.mint(_who, _value);\n', '\t\tliquidAllocatable -= _value;\n', '\t\tAllocated(_who, _value, true);\n', '\t}\n', '\n', '\t/// Preallocate a locked-up portion of tokens.\n', '\t/// Admin may call this to allocate a share of the locked tokens.\n', '\t/// Up to admin to ensure that value does not overflow and _value is divisible by UNLOCK_PHASES.\n', '\t///\n', '\t/// Preconditions: allocations_initialised\n', '\t/// Postconditions: ?allocations_complete\n', '\t/// Writes {Allocations, Tokens}\n', '\tfunction allocateLocked(address _who, uint _value)\n', '\t\tonly_admin\n', '\t\twhen_allocatable_locked(_value)\n', '\t\tpublic\n', '\t{\n', '\t\t// Admin ensures bounded value.\n', '\t\ttokens.mintLocked(_who, _value);\n', '\t\tlockedAllocatable -= _value;\n', '\t\tAllocated(_who, _value, false);\n', '\t}\n', '\n', '\t/// End of the sale and token allocation; retire this contract.\n', '\t/// Once called, no more tokens can be minted, basic tokens are now liquid.\n', '\t/// Anyone can call, but only once this contract can properly be retired.\n', '\t///\n', '\t/// Preconditions: allocations_complete\n', '\t/// Postconditions: liquid_tokens_transferable, this_is_dead\n', '\t/// Writes {Tokens}\n', '\tfunction finalise()\n', '\t\twhen_allocations_complete\n', '\t\tpublic\n', '\t{\n', '\t\ttokens.finalise();\n', '\t}\n', '\n', '\t//////\n', '\t// STATE\n', '\t//////\n', '\n', '\t// How much is enough?\n', '\tuint public constant MIN_BUYIN_VALUE = 1;\n', '\t// Max gas price for buyins.\n', '\tuint public constant MAX_BUYIN_GAS_PRICE = 25000000000;\n', '\t// The exposed hard cap.\n', '\tuint public constant MAX_REVENUE = 328103 ether;\n', '\n', '\t// The total share of tokens, expressed in PPM, allocated to pre-ICO and ICO.\n', '\tuint constant public SALES_ALLOCATION_PPM = 400000;\n', '\t// The total share of tokens, expressed in PPM, the admin may later allocate, as locked tokens.\n', '\tuint constant public LOCKED_ALLOCATION_PPM = 337000;\n', '\t// The total share of tokens, expressed in PPM, the admin may later allocate, as liquid tokens.\n', '\tuint constant public LIQUID_ALLOCATION_PPM = 263000;\n', '\n', '\t/// The certifier resource. TODO: set address\n', '\tCertifier public constant CERTIFIER = Certifier(0x7b1Ab331546F021A40bd4D09fFb802261CaACcc9);\n', '\t// Who can halt/unhalt/kill?\n', '\taddress public constant ADMINISTRATOR = 0x11bF17B890a80080A8F9C1673D2951296a6F3D91;\n', '\t// Who can prepurchase?\n', '\taddress public constant PREPURCHASER = 0x00C269e9D02188E39C9922386De631c6AED5b4d4;\n', '\t// Who gets the stash? Should not release funds during minting process.\n', '\taddress public constant TREASURY = 0xB47aD434C6e401473F1d3442001Ac69cda1dcFDd;\n', '\t// When does the contribution period begin?\n', '\tuint public constant BEGIN_TIME = 1505986211;\n', '\t// How long does the sale last for?\n', '\tuint public constant DURATION = 30 days;\n', '\t// When does the period end?\n', '\tuint public constant END_TIME = BEGIN_TIME + DURATION;\n', '\n', '\t// The privileged buyin accounts.\n', '\taddress public constant BTC_SUISSE_TIER_1 = 0x53B3D4f98fcb6f0920096fe1cCCa0E4327Da7a1D;\n', '\taddress public constant BTC_SUISSE_TIER_2 = 0x642fDd12b1Dd27b9E19758F0AefC072dae7Ab996;\n', '\taddress public constant BTC_SUISSE_TIER_3 = 0x64175446A1e3459c3E9D650ec26420BA90060d28;\n', '\taddress public constant BTC_SUISSE_TIER_4 = 0xB17C2f9a057a2640309e41358a22Cf00f8B51626;\n', '\taddress public constant CHINESE_EXCHANGE_1 = 0x36f548fAB37Fcd39cA8725B8fA214fcd784FE0A3;\n', '\taddress public constant CHINESE_EXCHANGE_2 = 0x877Da872D223AB3D073Ab6f9B4bb27540E387C5F;\n', '\taddress public constant CHINESE_EXCHANGE_3 = 0xCcC088ec38A4dbc15Ba269A176883F6ba302eD8d;\n', '\t// TODO: set address\n', '\taddress public constant CHINESE_EXCHANGE_4 = 0;\n', '\n', '\t// Tokens per eth for the various buy-in rates.\n', '\t// 1e8 ETH in existence, means at most 1.5e11 issued.\n', '\tuint public constant STANDARD_BUYIN = 1000;\n', '\tuint public constant TIER_2_BUYIN = 1111;\n', '\tuint public constant TIER_3_BUYIN = 1250;\n', '\tuint public constant TIER_4_BUYIN = 1429;\n', '\tuint public constant CHINESE_EXCHANGE_BUYIN = 1087;\n', '\n', '\t//////\n', '\t// State Subset: Allocations\n', '\t//\n', '\t// Invariants:\n', '\t// !allocationsInitialised ||\n', '\t//   (liquidAllocatable + tokens.liquidAllocated) / LIQUID_ALLOCATION_PPM == totalSold / SALES_ALLOCATION_PPM &&\n', '\t//   (lockedAllocatable + tokens.lockedAllocated) / LOCKED_ALLOCATION_PPM == totalSold / SALES_ALLOCATION_PPM\n', '\t//\n', '\t// when_allocations_complete || (now < END_TIME && saleRevenue < MAX_REVENUE)\n', '\n', '\t// Have post-sale token allocations been initialised?\n', '\tbool public allocationsInitialised = false;\n', '\t// How many liquid tokens may yet be allocated?\n', '\tuint public liquidAllocatable;\n', '\t// How many locked tokens may yet be allocated?\n', '\tuint public lockedAllocatable;\n', '\n', '\t//////\n', '\t// State Subset: Sale\n', '\t//\n', '\t// Invariants:\n', '\t// saleRevenue <= MAX_REVENUE\n', '\n', '\t// Total amount raised in both presale and sale, in Wei.\n', '\t// Assuming TREASURY locks funds, so can not exceed total amount of Ether 1e8.\n', '\tuint public saleRevenue = 0;\n', '\t// Total amount minted in both presale and sale, in AMB * 10^-18.\n', '\t// Assuming the TREASURY locks funds, msg.value * STANDARD_BUYIN will be less than 1.5e11.\n', '\tuint public totalSold = 0;\n', '\n', '\t//////\n', '\t// State Subset: Tokens\n', '\n', '\t// The contract which gets called whenever anything is received.\n', '\tAmberToken public tokens;\n', '\n', '\t//////\n', '\t// State Subset: Pause\n', '\n', '\t// Are contributions abnormally paused?\n', '\tbool public isPaused = false;\n', '}']
