['pragma solidity ^0.4.13;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', 'contract MigrationAgent {\n', '    function migrateFrom(address _from, uint256 _value);\n', '}\n', '\n', '/**\n', '    BlockChain Board Of Derivatives Token.\n', ' */\n', 'contract BBDToken is StandardToken, Ownable {\n', '\n', '    // Metadata\n', '    string public constant name = "BlockChain Board Of Derivatives Token";\n', '    string public constant symbol = "BBD";\n', '    uint256 public constant decimals = 18;\n', "    string private constant version = '1.0.0';\n", '\n', '    // Crowdsale parameters\n', '    uint256 public constant startTime = 1506844800; //Sunday, 1 October 2017 08:00:00 GMT\n', '    uint256 public constant endTime = 1509523200;  // Wednesday, 1 November 2017 08:00:00 GMT\n', '\n', '    uint256 public constant creationMaxCap = 300000000 * 10 ** decimals;\n', '    uint256 public constant creationMinCap = 2500000 * 10 ** decimals;\n', '\n', '    uint256 private constant startCreationRateOnTime = 1666; // 1666 BDD per 1 ETH\n', '    uint256 private constant endCreationRateOnTime = 1000; // 1000 BDD per 1 ETH\n', '\n', '    uint256 private constant quantityThreshold_10 = 10 ether;\n', '    uint256 private constant quantityThreshold_30 = 30 ether;\n', '    uint256 private constant quantityThreshold_100 = 100 ether;\n', '    uint256 private constant quantityThreshold_300 = 300 ether;\n', '\n', '    uint256 private constant quantityBonus_10 = 500;    // 5%\n', '    uint256 private constant quantityBonus_30 = 1000;  // 10%\n', '    uint256 private constant quantityBonus_100 = 1500; // 15%\n', '    uint256 private constant quantityBonus_300 = 2000; // 20%\n', '\n', '    // The flag indicates if the crowdsale was finalized\n', '    bool public finalized = false;\n', '\n', '    // Migration information\n', '    address public migrationAgent;\n', '    uint256 public totalMigrated;\n', '\n', '    // Exchange address\n', '    address public exchangeAddress;\n', '\n', '    // Team accounts\n', '    address private constant mainAccount = 0xEB1D40f6DA0E77E2cA046325F6F2a76081B4c7f4;\n', '    address private constant coreTeamMemberOne = 0xe43088E823eA7422D77E32a195267aE9779A8B07;\n', '    address private constant coreTeamMemberTwo = 0xad00884d1E7D0354d16fa8Ab083208c2cC3Ed515;\n', '\n', '    // Ether raised\n', '    uint256 private raised = 0;\n', '\n', '    // Since we have different exchange rates, we need to keep track of how\n', '    // much ether each contributed in case that we need to issue a refund\n', '    mapping (address => uint256) private ethBalances;\n', '\n', '    uint256 private constant divisor = 10000;\n', '\n', '    // Events\n', '    event LogRefund(address indexed _from, uint256 _value);\n', '    event LogMigrate(address indexed _from, address indexed _to, uint256 _value);\n', '    event LogBuy(address indexed _purchaser, address indexed _beneficiary, uint256 _value, uint256 _amount);\n', '\n', '    // Check if min cap was archived.\n', '    modifier onlyWhenICOReachedCreationMinCap() {\n', '        require( totalSupply >= creationMinCap );\n', '        _;\n', '    }\n', '\n', '    function() payable {\n', '        buy(msg.sender);\n', '    }\n', '\n', '    function creationRateOnTime() public constant returns (uint256) {\n', '        uint256 currentPrice;\n', '\n', '        if (now > endTime) {\n', '            currentPrice = endCreationRateOnTime;\n', '        }\n', '        else {\n', '            //Price is changing lineral starting from  startCreationRateOnTime to endCreationRateOnTime\n', '            uint256 rateRange = startCreationRateOnTime - endCreationRateOnTime;\n', '            uint256 timeRange = endTime - startTime;\n', '            currentPrice = startCreationRateOnTime.sub(rateRange.mul(now.sub(startTime)).div(timeRange));\n', '        }\n', '\n', '        return currentPrice;\n', '    }\n', '\n', '    //Calculate number of BBD tokens for provided ether\n', '    function calculateBDD(uint256 _ethVal) private constant returns (uint256) {\n', '        uint256 bonus;\n', '\n', '        //We provide bonus depending on eth value\n', '        if (_ethVal < quantityThreshold_10) {\n', '            bonus = 0; // 0% bonus\n', '        }\n', '        else if (_ethVal < quantityThreshold_30) {\n', '            bonus = quantityBonus_10; // 5% bonus\n', '        }\n', '        else if (_ethVal < quantityThreshold_100) {\n', '            bonus = quantityBonus_30; // 10% bonus\n', '        }\n', '        else if (_ethVal < quantityThreshold_300) {\n', '            bonus = quantityBonus_100; // 15% bonus\n', '        }\n', '        else {\n', '            bonus = quantityBonus_300; // 20% bonus\n', '        }\n', '\n', '        // Get number of BBD tokens\n', '        return _ethVal.mul(creationRateOnTime()).mul(divisor.add(bonus)).div(divisor);\n', '    }\n', '\n', '    // Buy BBD\n', '    function buy(address _beneficiary) payable {\n', '        require(!finalized);\n', '        require(msg.value != 0);\n', '        require(now <= endTime);\n', '        require(now >= startTime);\n', '\n', '        uint256 bbdTokens = calculateBDD(msg.value);\n', '        uint256 additionalBBDTokensForMainAccount = bbdTokens.mul(2250).div(divisor); // 22.5%\n', '        uint256 additionalBBDTokensForCoreTeamMember = bbdTokens.mul(125).div(divisor); // 1.25%\n', '\n', '        //Increase by 25% number of bbd tokens on each buy.\n', '        uint256 checkedSupply = totalSupply.add(bbdTokens)\n', '                                           .add(additionalBBDTokensForMainAccount)\n', '                                           .add(2 * additionalBBDTokensForCoreTeamMember);\n', '\n', '        require(creationMaxCap >= checkedSupply);\n', '\n', '        totalSupply = checkedSupply;\n', '\n', '        //Update balances\n', '        balances[_beneficiary] = balances[_beneficiary].add(bbdTokens);\n', '        balances[mainAccount] = balances[mainAccount].add(additionalBBDTokensForMainAccount);\n', '        balances[coreTeamMemberOne] = balances[coreTeamMemberOne].add(additionalBBDTokensForCoreTeamMember);\n', '        balances[coreTeamMemberTwo] = balances[coreTeamMemberTwo].add(additionalBBDTokensForCoreTeamMember);\n', '\n', '        ethBalances[_beneficiary] = ethBalances[_beneficiary].add(msg.value);\n', '\n', '        raised += msg.value;\n', '\n', '        if (exchangeAddress != 0x0 && totalSupply >= creationMinCap && msg.value >= 1 ether) {\n', '            // After archiving min cap we start moving 10% to exchange. It will help with liquidity on exchange.\n', '            exchangeAddress.transfer(msg.value.mul(1000).div(divisor)); // 10%\n', '        }\n', '\n', '        LogBuy(msg.sender, _beneficiary, msg.value, bbdTokens);\n', '    }\n', '\n', '    // Finalize for successful ICO\n', '    function finalize() onlyOwner external {\n', '        require(!finalized);\n', '        require(now >= endTime || totalSupply >= creationMaxCap);\n', '\n', '        finalized = true;\n', '\n', '        uint256 ethForCoreMember = raised.mul(500).div(divisor);\n', '\n', '        coreTeamMemberOne.transfer(ethForCoreMember); // 5%\n', '        coreTeamMemberTwo.transfer(ethForCoreMember); // 5%\n', '        mainAccount.transfer(this.balance); //90%\n', '    }\n', '\n', "    // Refund if ICO won't reach min cap\n", '    function refund() external {\n', '        require(now > endTime);\n', '        require(totalSupply < creationMinCap);\n', '\n', '        uint256 bddVal = balances[msg.sender];\n', '        require(bddVal > 0);\n', '        uint256 ethVal = ethBalances[msg.sender];\n', '        require(ethVal > 0);\n', '\n', '        balances[msg.sender] = 0;\n', '        ethBalances[msg.sender] = 0;\n', '        totalSupply = totalSupply.sub(bddVal);\n', '\n', '        msg.sender.transfer(ethVal);\n', '\n', '        LogRefund(msg.sender, ethVal);\n', '    }\n', '\n', '    // Allow to migrate to next version of contract\n', '    function migrate(uint256 _value) external {\n', '        require(finalized);\n', '        require(migrationAgent != 0x0);\n', '        require(_value > 0);\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        totalMigrated = totalMigrated.add(_value);\n', '\n', '        MigrationAgent(migrationAgent).migrateFrom(msg.sender, _value);\n', '\n', '        LogMigrate(msg.sender, migrationAgent, _value);\n', '    }\n', '\n', '    // Set migration Agent\n', '    function setMigrationAgent(address _agent) onlyOwner external {\n', '        require(finalized);\n', '        require(migrationAgent == 0x0);\n', '\n', '        migrationAgent = _agent;\n', '    }\n', '\n', '    // Set exchange address\n', '    function setExchangeAddress(address _exchangeAddress) onlyOwner external {\n', '        require(exchangeAddress == 0x0);\n', '\n', '        exchangeAddress = _exchangeAddress;\n', '    }\n', '\n', '    function transfer(address _to, uint _value) onlyWhenICOReachedCreationMinCap returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) onlyWhenICOReachedCreationMinCap returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    // Transfer BBD to exchange.\n', '    function transferToExchange(address _from, uint256 _value) onlyWhenICOReachedCreationMinCap returns (bool) {\n', '        require(msg.sender == exchangeAddress);\n', '\n', '        balances[exchangeAddress] = balances[exchangeAddress].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '\n', '        Transfer(_from, exchangeAddress, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    // ICO overview\n', '    function icoOverview() constant returns (uint256 currentlyRaised, uint256 currentlyTotalSupply, uint256 currentlyCreationRateOnTime){\n', '        currentlyRaised = raised;\n', '        currentlyTotalSupply = totalSupply;\n', '        currentlyCreationRateOnTime = creationRateOnTime();\n', '    }\n', '}']