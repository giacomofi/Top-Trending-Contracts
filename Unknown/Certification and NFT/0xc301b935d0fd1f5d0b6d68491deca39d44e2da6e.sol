['pragma solidity ^0.4.13;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue)\n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue)\n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract AbstractStarbaseCrowdsale {\n', '    function startDate() constant returns (uint256) {}\n', '    function endedAt() constant returns (uint256) {}\n', '    function isEnded() constant returns (bool);\n', '    function totalRaisedAmountInCny() constant returns (uint256);\n', '    function numOfPurchasedTokensOnCsBy(address purchaser) constant returns (uint256);\n', '    function numOfPurchasedTokensOnEpBy(address purchaser) constant returns (uint256);\n', '}\n', '\n', 'contract AbstractStarbaseMarketingCampaign {}\n', '\n', '/// @title Token contract - ERC20 compatible Starbase token contract.\n', '/// @author Starbase PTE. LTD. - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="462f282029063532273424273523682529">[email&#160;protected]</a>>\n', 'contract StarbaseToken is StandardToken {\n', '    /*\n', '     *  Events\n', '     */\n', '    event PublicOfferingPlanDeclared(uint256 tokenCount, uint256 unlockCompanysTokensAt);\n', '    event MvpLaunched(uint256 launchedAt);\n', '    event LogNewFundraiser (address indexed fundraiserAddress, bool isBonaFide);\n', '    event LogUpdateFundraiser(address indexed fundraiserAddress, bool isBonaFide);\n', '\n', '    /*\n', '     *  Types\n', '     */\n', '    struct PublicOfferingPlan {\n', '        uint256 tokenCount;\n', '        uint256 unlockCompanysTokensAt;\n', '        uint256 declaredAt;\n', '    }\n', '\n', '    /*\n', '     *  External contracts\n', '     */\n', '    AbstractStarbaseCrowdsale public starbaseCrowdsale;\n', '    AbstractStarbaseMarketingCampaign public starbaseMarketingCampaign;\n', '\n', '    /*\n', '     *  Storage\n', '     */\n', '    address public company;\n', '    PublicOfferingPlan[] public publicOfferingPlans;  // further crowdsales\n', '    mapping(address => uint256) public initialEcTokenAllocation;    // Initial token allocations for Early Contributors\n', '    uint256 public mvpLaunchedAt;  // 0 until a MVP of Starbase Platform launches\n', '    mapping(address => bool) private fundraisers; // Fundraisers are vetted addresses that are allowed to execute functions within the contract\n', '\n', '    /*\n', '     *  Constants / Token meta data\n', '     */\n', '    string constant public name = "Starbase";  // Token name\n', '    string constant public symbol = "STAR";  // Token symbol\n', '    uint8 constant public decimals = 18;\n', '    uint256 constant public initialSupply = 1000000000e18; // 1B STAR tokens\n', '    uint256 constant public initialCompanysTokenAllocation = 750000000e18;  // 750M\n', '    uint256 constant public initialBalanceForCrowdsale = 175000000e18;  // CS(125M)+EP(50M)\n', '    uint256 constant public initialBalanceForMarketingCampaign = 12500000e18;   // 12.5M\n', '\n', '    /*\n', '     *  Modifiers\n', '     */\n', '    modifier onlyCrowdsaleContract() {\n', '        assert(msg.sender == address(starbaseCrowdsale));\n', '        _;\n', '    }\n', '\n', '    modifier onlyMarketingCampaignContract() {\n', '        assert(msg.sender == address(starbaseMarketingCampaign));\n', '        _;\n', '    }\n', '\n', '    modifier onlyFundraiser() {\n', '        // Only rightful fundraiser is permitted.\n', '        assert(isFundraiser(msg.sender));\n', '        _;\n', '    }\n', '\n', '    modifier onlyBeforeCrowdsale() {\n', '        require(starbaseCrowdsale.startDate() == 0);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAfterCrowdsale() {\n', '        require(starbaseCrowdsale.isEnded());\n', '        _;\n', '    }\n', '\n', '    /*\n', '     *  Contract functions\n', '     */\n', '\n', '    /**\n', '     * @dev Contract constructor function\n', '     * @param starbaseCompanyAddr The address that will holds untransferrable tokens\n', '     * @param starbaseCrowdsaleAddr Address of the crowdsale contract\n', '     * @param starbaseMarketingCampaignAddr The address of the marketing campaign contract\n', '     */\n', '\n', '    function StarbaseToken(\n', '        address starbaseCompanyAddr,\n', '        address starbaseCrowdsaleAddr,\n', '        address starbaseMarketingCampaignAddr\n', '    ) {\n', '        assert(\n', '            starbaseCompanyAddr != 0 &&\n', '            starbaseCrowdsaleAddr != 0 &&\n', '            starbaseMarketingCampaignAddr != 0);\n', '\n', '        starbaseCrowdsale = AbstractStarbaseCrowdsale(starbaseCrowdsaleAddr);\n', '        starbaseMarketingCampaign = AbstractStarbaseMarketingCampaign(starbaseMarketingCampaignAddr);\n', '        company = starbaseCompanyAddr;\n', '\n', '        // msg.sender becomes first fundraiser\n', '        fundraisers[msg.sender] = true;\n', '        LogNewFundraiser(msg.sender, true);\n', '\n', '        // Tokens for crowdsale and early purchasers\n', '        balances[address(starbaseCrowdsale)] = initialBalanceForCrowdsale;\n', '\n', '        // Tokens for marketing campaign supporters\n', '        balances[address(starbaseMarketingCampaign)] = initialBalanceForMarketingCampaign;\n', '\n', '        // Tokens for early contributors, should be allocated by function\n', '        balances[0] = 62500000e18; // 62.5M\n', '\n', '        // Starbase company holds untransferrable tokens initially\n', '        balances[starbaseCompanyAddr] = initialCompanysTokenAllocation; // 750M\n', '\n', '        totalSupply = initialSupply;    // 1B\n', '    }\n', '\n', '    /**\n', '     * @dev Setup function sets external contracts&#39; addresses\n', '     * @param starbaseCrowdsaleAddr Crowdsale contract address.\n', '     * @param starbaseMarketingCampaignAddr Marketing campaign contract address\n', '     */\n', '    function setup(address starbaseCrowdsaleAddr, address starbaseMarketingCampaignAddr)\n', '        external\n', '        onlyFundraiser\n', '        onlyBeforeCrowdsale\n', '        returns (bool)\n', '    {\n', '        require(starbaseCrowdsaleAddr != 0 && starbaseMarketingCampaignAddr != 0);\n', '        assert(balances[address(starbaseCrowdsale)] == initialBalanceForCrowdsale);\n', '        assert(balances[address(starbaseMarketingCampaign)] == initialBalanceForMarketingCampaign);\n', '\n', '        // Move the balances to the new ones\n', '        balances[address(starbaseCrowdsale)] = 0;\n', '        balances[address(starbaseMarketingCampaign)] = 0;\n', '        balances[starbaseCrowdsaleAddr] = initialBalanceForCrowdsale;\n', '        balances[starbaseMarketingCampaignAddr] = initialBalanceForMarketingCampaign;\n', '\n', '        // Update the references\n', '        starbaseCrowdsale = AbstractStarbaseCrowdsale(starbaseCrowdsaleAddr);\n', '        starbaseMarketingCampaign = AbstractStarbaseMarketingCampaign(starbaseMarketingCampaignAddr);\n', '        return true;\n', '    }\n', '\n', '    /*\n', '     *  External functions\n', '     */\n', '\n', '    /**\n', '     * @dev Returns number of declared public offering plans\n', '     */\n', '    function numOfDeclaredPublicOfferingPlans()\n', '        external\n', '        constant\n', '        returns (uint256)\n', '    {\n', '        return publicOfferingPlans.length;\n', '    }\n', '\n', '    /**\n', '     * @dev Declares a public offering plan to make company&#39;s tokens transferable\n', '     * @param tokenCount Number of tokens to transfer.\n', '     * @param unlockCompanysTokensAt Time of the tokens will be unlocked\n', '     */\n', '    function declarePublicOfferingPlan(uint256 tokenCount, uint256 unlockCompanysTokensAt)\n', '        external\n', '        onlyFundraiser\n', '        onlyAfterCrowdsale\n', '        returns (bool)\n', '    {\n', '        assert(tokenCount <= 100000000e18);    // shall not exceed 100M tokens\n', '        assert(SafeMath.sub(now, starbaseCrowdsale.endedAt()) >= 180 days);   // shall not be declared for 6 months after the crowdsale ended\n', '        assert(SafeMath.sub(unlockCompanysTokensAt, now) >= 60 days);   // tokens must be untransferable at least for 2 months\n', '\n', '        // check if last declaration was more than 6 months ago\n', '        if (publicOfferingPlans.length > 0) {\n', '            uint256 lastDeclaredAt =\n', '                publicOfferingPlans[publicOfferingPlans.length - 1].declaredAt;\n', '            assert(SafeMath.sub(now, lastDeclaredAt) >= 180 days);\n', '        }\n', '\n', '        uint256 totalDeclaredTokenCount = tokenCount;\n', '        for (uint8 i; i < publicOfferingPlans.length; i++) {\n', '            totalDeclaredTokenCount = SafeMath.add(totalDeclaredTokenCount, publicOfferingPlans[i].tokenCount);\n', '        }\n', '        assert(totalDeclaredTokenCount <= initialCompanysTokenAllocation);   // shall not exceed the initial token allocation\n', '\n', '        publicOfferingPlans.push(\n', '            PublicOfferingPlan(tokenCount, unlockCompanysTokensAt, now));\n', '\n', '        PublicOfferingPlanDeclared(tokenCount, unlockCompanysTokensAt);\n', '    }\n', '\n', '    /**\n', '     * @dev Allocate tokens to a marketing supporter from the marketing campaign share\n', '     * @param to Address to where tokens are allocated\n', '     * @param value Number of tokens to transfer\n', '     */\n', '    function allocateToMarketingSupporter(address to, uint256 value)\n', '        external\n', '        onlyMarketingCampaignContract\n', '        returns (bool)\n', '    {\n', '        return allocateFrom(address(starbaseMarketingCampaign), to, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Allocate tokens to an early contributor from the early contributor share\n', '     * @param to Address to where tokens are allocated\n', '     * @param value Number of tokens to transfer\n', '     */\n', '    function allocateToEarlyContributor(address to, uint256 value)\n', '        external\n', '        onlyFundraiser\n', '        returns (bool)\n', '    {\n', '        initialEcTokenAllocation[to] =\n', '            SafeMath.add(initialEcTokenAllocation[to], value);\n', '        return allocateFrom(0, to, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Issue new tokens according to the STAR token inflation limits\n', '     * @param _for Address to where tokens are allocated\n', '     * @param value Number of tokens to issue\n', '     */\n', '    function issueTokens(address _for, uint256 value)\n', '        external\n', '        onlyFundraiser\n', '        onlyAfterCrowdsale\n', '        returns (bool)\n', '    {\n', '        // check if the value under the limits\n', '        assert(value <= numOfInflatableTokens());\n', '\n', '        totalSupply = SafeMath.add(totalSupply, value);\n', '        balances[_for] = SafeMath.add(balances[_for], value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Declares Starbase MVP has been launched\n', '     * @param launchedAt When the MVP launched (timestamp)\n', '     */\n', '    function declareMvpLaunched(uint256 launchedAt)\n', '        external\n', '        onlyFundraiser\n', '        onlyAfterCrowdsale\n', '        returns (bool)\n', '    {\n', '        require(mvpLaunchedAt == 0); // overwriting the launch date is not permitted\n', '        require(launchedAt <= now);\n', '        require(starbaseCrowdsale.isEnded());\n', '\n', '        mvpLaunchedAt = launchedAt;\n', '        MvpLaunched(launchedAt);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Allocate tokens to a crowdsale or early purchaser from the crowdsale share\n', '     * @param to Address to where tokens are allocated\n', '     * @param value Number of tokens to transfer\n', '     */\n', '    function allocateToCrowdsalePurchaser(address to, uint256 value)\n', '        external\n', '        onlyCrowdsaleContract\n', '        onlyAfterCrowdsale\n', '        returns (bool)\n', '    {\n', '        return allocateFrom(address(starbaseCrowdsale), to, value);\n', '    }\n', '\n', '    /*\n', '     *  Public functions\n', '     */\n', '\n', '    /**\n', '     * @dev Transfers sender&#39;s tokens to a given address. Returns success.\n', '     * @param to Address of token receiver.\n', '     * @param value Number of tokens to transfer.\n', '     */\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        assert(isTransferable(msg.sender, value));\n', '        return super.transfer(to, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows third party to transfer tokens from one address to another. Returns success.\n', '     * @param from Address from where tokens are withdrawn.\n', '     * @param to Address to where tokens are sent.\n', '     * @param value Number of tokens to transfer.\n', '     */\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '        assert(isTransferable(from, value));\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Adds fundraiser. Only called by another fundraiser.\n', '     * @param fundraiserAddress The address in check\n', '     */\n', '    function addFundraiser(address fundraiserAddress) public onlyFundraiser {\n', '        assert(!isFundraiser(fundraiserAddress));\n', '\n', '        fundraisers[fundraiserAddress] = true;\n', '        LogNewFundraiser(fundraiserAddress, true);\n', '    }\n', '\n', '    /**\n', '     * @dev Update fundraiser address rights.\n', '     * @param fundraiserAddress The address to update\n', '     * @param isBonaFide Boolean that denotes whether fundraiser is active or not.\n', '     */\n', '    function updateFundraiser(address fundraiserAddress, bool isBonaFide)\n', '       public\n', '       onlyFundraiser\n', '       returns(bool)\n', '    {\n', '        assert(isFundraiser(fundraiserAddress));\n', '\n', '        fundraisers[fundraiserAddress] = isBonaFide;\n', '        LogUpdateFundraiser(fundraiserAddress, isBonaFide);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns whether fundraiser address has rights.\n', '     * @param fundraiserAddress The address in check\n', '     */\n', '    function isFundraiser(address fundraiserAddress) constant public returns(bool) {\n', '        return fundraisers[fundraiserAddress];\n', '    }\n', '\n', '    /**\n', '     * @dev Returns whether the transferring of tokens is available fundraiser.\n', '     * @param from Address of token sender\n', '     * @param tokenCount Number of tokens to transfer.\n', '     */\n', '    function isTransferable(address from, uint256 tokenCount)\n', '        constant\n', '        public\n', '        returns (bool)\n', '    {\n', '        if (tokenCount == 0 || balances[from] < tokenCount) {\n', '            return false;\n', '        }\n', '\n', '        // company&#39;s tokens may be locked up\n', '        if (from == company) {\n', '            if (tokenCount > numOfTransferableCompanysTokens()) {\n', '                return false;\n', '            }\n', '        }\n', '\n', '        uint256 untransferableTokenCount = 0;\n', '\n', '        // early contributor&#39;s tokens may be locked up\n', '        if (initialEcTokenAllocation[from] > 0) {\n', '            untransferableTokenCount = SafeMath.add(\n', '                untransferableTokenCount,\n', '                numOfUntransferableEcTokens(from));\n', '        }\n', '\n', '        // EP and CS purchasers&#39; tokens should be untransferable initially\n', '        if (starbaseCrowdsale.isEnded()) {\n', '            uint256 passedDays =\n', '                SafeMath.sub(now, starbaseCrowdsale.endedAt()) / 86400; // 1d = 86400s\n', '            if (passedDays < 7) {  // within a week\n', '                // crowdsale purchasers cannot transfer their tokens for a week\n', '                untransferableTokenCount = SafeMath.add(\n', '                    untransferableTokenCount,\n', '                    starbaseCrowdsale.numOfPurchasedTokensOnCsBy(from));\n', '            }\n', '            if (passedDays < 14) {  // within two weeks\n', '                // early purchasers cannot transfer their tokens for two weeks\n', '                untransferableTokenCount = SafeMath.add(\n', '                    untransferableTokenCount,\n', '                    starbaseCrowdsale.numOfPurchasedTokensOnEpBy(from));\n', '            }\n', '        }\n', '\n', '        uint256 transferableTokenCount =\n', '            SafeMath.sub(balances[from], untransferableTokenCount);\n', '\n', '        if (transferableTokenCount < tokenCount) {\n', '            return false;\n', '        } else {\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of transferable company&#39;s tokens\n', '     */\n', '    function numOfTransferableCompanysTokens() constant public returns (uint256) {\n', '        uint256 unlockedTokens = 0;\n', '        for (uint8 i; i < publicOfferingPlans.length; i++) {\n', '            PublicOfferingPlan memory plan = publicOfferingPlans[i];\n', '            if (plan.unlockCompanysTokensAt <= now) {\n', '                unlockedTokens = SafeMath.add(unlockedTokens, plan.tokenCount);\n', '            }\n', '        }\n', '        return SafeMath.sub(\n', '            balances[company],\n', '            initialCompanysTokenAllocation - unlockedTokens);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of untransferable tokens of the early contributor\n', '     * @param _for Address of early contributor to check\n', '     */\n', '    function numOfUntransferableEcTokens(address _for) constant public returns (uint256) {\n', '        uint256 initialCount = initialEcTokenAllocation[_for];\n', '        if (mvpLaunchedAt == 0) {\n', '            return initialCount;\n', '        }\n', '\n', '        uint256 passedWeeks = SafeMath.sub(now, mvpLaunchedAt) / 7 days;\n', '        if (passedWeeks <= 52) {    // a year ≈ 52 weeks\n', '            // all tokens should be locked up for a year\n', '            return initialCount;\n', '        }\n', '\n', '        // unlock 1/52 tokens every weeks after a year\n', '        uint256 transferableTokenCount = initialCount / 52 * (passedWeeks - 52);\n', '        if (transferableTokenCount >= initialCount) {\n', '            return 0;\n', '        } else {\n', '            return SafeMath.sub(initialCount, transferableTokenCount);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns number of tokens which can be issued according to the inflation rules\n', '     */\n', '    function numOfInflatableTokens() constant public returns (uint256) {\n', '        if (starbaseCrowdsale.endedAt() == 0) {\n', '            return 0;\n', '        }\n', '        uint256 passedDays = SafeMath.sub(now, starbaseCrowdsale.endedAt()) / 86400;  // 1d = 60s * 60m * 24h = 86400s\n', '        uint256 passedYears = passedDays * 100 / 36525;    // about 365.25 days in a year\n', '        uint256 inflatedSupply = initialSupply;\n', '        for (uint256 i; i < passedYears; i++) {\n', '            inflatedSupply = SafeMath.add(inflatedSupply, SafeMath.mul(inflatedSupply, 25) / 1000); // 2.5%/y = 0.025/y\n', '        }\n', '\n', '        uint256 remainderedDays = passedDays * 100 % 36525 / 100;\n', '        if (remainderedDays > 0) {\n', '            uint256 inflatableTokensOfNextYear =\n', '                SafeMath.mul(inflatedSupply, 25) / 1000;\n', '            inflatedSupply = SafeMath.add(inflatedSupply, SafeMath.mul(\n', '                inflatableTokensOfNextYear, remainderedDays * 100) / 36525);\n', '        }\n', '\n', '        return SafeMath.sub(inflatedSupply, totalSupply);\n', '    }\n', '\n', '    /*\n', '     *  Internal functions\n', '     */\n', '\n', '    /**\n', '     * @dev Allocate tokens value from an address to another one. This function is only called internally.\n', '     * @param from Address from where tokens come\n', '     * @param to Address to where tokens are allocated\n', '     * @param value Number of tokens to transfer\n', '     */\n', '    function allocateFrom(address from, address to, uint256 value) internal returns (bool) {\n', '        assert(value > 0 && balances[from] >= value);\n', '        balances[from] = SafeMath.sub(balances[from], value);\n', '        balances[to] = SafeMath.add(balances[to], value);\n', '        Transfer(from, to, value);\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.13;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue)\n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue)\n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract AbstractStarbaseCrowdsale {\n', '    function startDate() constant returns (uint256) {}\n', '    function endedAt() constant returns (uint256) {}\n', '    function isEnded() constant returns (bool);\n', '    function totalRaisedAmountInCny() constant returns (uint256);\n', '    function numOfPurchasedTokensOnCsBy(address purchaser) constant returns (uint256);\n', '    function numOfPurchasedTokensOnEpBy(address purchaser) constant returns (uint256);\n', '}\n', '\n', 'contract AbstractStarbaseMarketingCampaign {}\n', '\n', '/// @title Token contract - ERC20 compatible Starbase token contract.\n', '/// @author Starbase PTE. LTD. - <info@starbase.co>\n', 'contract StarbaseToken is StandardToken {\n', '    /*\n', '     *  Events\n', '     */\n', '    event PublicOfferingPlanDeclared(uint256 tokenCount, uint256 unlockCompanysTokensAt);\n', '    event MvpLaunched(uint256 launchedAt);\n', '    event LogNewFundraiser (address indexed fundraiserAddress, bool isBonaFide);\n', '    event LogUpdateFundraiser(address indexed fundraiserAddress, bool isBonaFide);\n', '\n', '    /*\n', '     *  Types\n', '     */\n', '    struct PublicOfferingPlan {\n', '        uint256 tokenCount;\n', '        uint256 unlockCompanysTokensAt;\n', '        uint256 declaredAt;\n', '    }\n', '\n', '    /*\n', '     *  External contracts\n', '     */\n', '    AbstractStarbaseCrowdsale public starbaseCrowdsale;\n', '    AbstractStarbaseMarketingCampaign public starbaseMarketingCampaign;\n', '\n', '    /*\n', '     *  Storage\n', '     */\n', '    address public company;\n', '    PublicOfferingPlan[] public publicOfferingPlans;  // further crowdsales\n', '    mapping(address => uint256) public initialEcTokenAllocation;    // Initial token allocations for Early Contributors\n', '    uint256 public mvpLaunchedAt;  // 0 until a MVP of Starbase Platform launches\n', '    mapping(address => bool) private fundraisers; // Fundraisers are vetted addresses that are allowed to execute functions within the contract\n', '\n', '    /*\n', '     *  Constants / Token meta data\n', '     */\n', '    string constant public name = "Starbase";  // Token name\n', '    string constant public symbol = "STAR";  // Token symbol\n', '    uint8 constant public decimals = 18;\n', '    uint256 constant public initialSupply = 1000000000e18; // 1B STAR tokens\n', '    uint256 constant public initialCompanysTokenAllocation = 750000000e18;  // 750M\n', '    uint256 constant public initialBalanceForCrowdsale = 175000000e18;  // CS(125M)+EP(50M)\n', '    uint256 constant public initialBalanceForMarketingCampaign = 12500000e18;   // 12.5M\n', '\n', '    /*\n', '     *  Modifiers\n', '     */\n', '    modifier onlyCrowdsaleContract() {\n', '        assert(msg.sender == address(starbaseCrowdsale));\n', '        _;\n', '    }\n', '\n', '    modifier onlyMarketingCampaignContract() {\n', '        assert(msg.sender == address(starbaseMarketingCampaign));\n', '        _;\n', '    }\n', '\n', '    modifier onlyFundraiser() {\n', '        // Only rightful fundraiser is permitted.\n', '        assert(isFundraiser(msg.sender));\n', '        _;\n', '    }\n', '\n', '    modifier onlyBeforeCrowdsale() {\n', '        require(starbaseCrowdsale.startDate() == 0);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAfterCrowdsale() {\n', '        require(starbaseCrowdsale.isEnded());\n', '        _;\n', '    }\n', '\n', '    /*\n', '     *  Contract functions\n', '     */\n', '\n', '    /**\n', '     * @dev Contract constructor function\n', '     * @param starbaseCompanyAddr The address that will holds untransferrable tokens\n', '     * @param starbaseCrowdsaleAddr Address of the crowdsale contract\n', '     * @param starbaseMarketingCampaignAddr The address of the marketing campaign contract\n', '     */\n', '\n', '    function StarbaseToken(\n', '        address starbaseCompanyAddr,\n', '        address starbaseCrowdsaleAddr,\n', '        address starbaseMarketingCampaignAddr\n', '    ) {\n', '        assert(\n', '            starbaseCompanyAddr != 0 &&\n', '            starbaseCrowdsaleAddr != 0 &&\n', '            starbaseMarketingCampaignAddr != 0);\n', '\n', '        starbaseCrowdsale = AbstractStarbaseCrowdsale(starbaseCrowdsaleAddr);\n', '        starbaseMarketingCampaign = AbstractStarbaseMarketingCampaign(starbaseMarketingCampaignAddr);\n', '        company = starbaseCompanyAddr;\n', '\n', '        // msg.sender becomes first fundraiser\n', '        fundraisers[msg.sender] = true;\n', '        LogNewFundraiser(msg.sender, true);\n', '\n', '        // Tokens for crowdsale and early purchasers\n', '        balances[address(starbaseCrowdsale)] = initialBalanceForCrowdsale;\n', '\n', '        // Tokens for marketing campaign supporters\n', '        balances[address(starbaseMarketingCampaign)] = initialBalanceForMarketingCampaign;\n', '\n', '        // Tokens for early contributors, should be allocated by function\n', '        balances[0] = 62500000e18; // 62.5M\n', '\n', '        // Starbase company holds untransferrable tokens initially\n', '        balances[starbaseCompanyAddr] = initialCompanysTokenAllocation; // 750M\n', '\n', '        totalSupply = initialSupply;    // 1B\n', '    }\n', '\n', '    /**\n', "     * @dev Setup function sets external contracts' addresses\n", '     * @param starbaseCrowdsaleAddr Crowdsale contract address.\n', '     * @param starbaseMarketingCampaignAddr Marketing campaign contract address\n', '     */\n', '    function setup(address starbaseCrowdsaleAddr, address starbaseMarketingCampaignAddr)\n', '        external\n', '        onlyFundraiser\n', '        onlyBeforeCrowdsale\n', '        returns (bool)\n', '    {\n', '        require(starbaseCrowdsaleAddr != 0 && starbaseMarketingCampaignAddr != 0);\n', '        assert(balances[address(starbaseCrowdsale)] == initialBalanceForCrowdsale);\n', '        assert(balances[address(starbaseMarketingCampaign)] == initialBalanceForMarketingCampaign);\n', '\n', '        // Move the balances to the new ones\n', '        balances[address(starbaseCrowdsale)] = 0;\n', '        balances[address(starbaseMarketingCampaign)] = 0;\n', '        balances[starbaseCrowdsaleAddr] = initialBalanceForCrowdsale;\n', '        balances[starbaseMarketingCampaignAddr] = initialBalanceForMarketingCampaign;\n', '\n', '        // Update the references\n', '        starbaseCrowdsale = AbstractStarbaseCrowdsale(starbaseCrowdsaleAddr);\n', '        starbaseMarketingCampaign = AbstractStarbaseMarketingCampaign(starbaseMarketingCampaignAddr);\n', '        return true;\n', '    }\n', '\n', '    /*\n', '     *  External functions\n', '     */\n', '\n', '    /**\n', '     * @dev Returns number of declared public offering plans\n', '     */\n', '    function numOfDeclaredPublicOfferingPlans()\n', '        external\n', '        constant\n', '        returns (uint256)\n', '    {\n', '        return publicOfferingPlans.length;\n', '    }\n', '\n', '    /**\n', "     * @dev Declares a public offering plan to make company's tokens transferable\n", '     * @param tokenCount Number of tokens to transfer.\n', '     * @param unlockCompanysTokensAt Time of the tokens will be unlocked\n', '     */\n', '    function declarePublicOfferingPlan(uint256 tokenCount, uint256 unlockCompanysTokensAt)\n', '        external\n', '        onlyFundraiser\n', '        onlyAfterCrowdsale\n', '        returns (bool)\n', '    {\n', '        assert(tokenCount <= 100000000e18);    // shall not exceed 100M tokens\n', '        assert(SafeMath.sub(now, starbaseCrowdsale.endedAt()) >= 180 days);   // shall not be declared for 6 months after the crowdsale ended\n', '        assert(SafeMath.sub(unlockCompanysTokensAt, now) >= 60 days);   // tokens must be untransferable at least for 2 months\n', '\n', '        // check if last declaration was more than 6 months ago\n', '        if (publicOfferingPlans.length > 0) {\n', '            uint256 lastDeclaredAt =\n', '                publicOfferingPlans[publicOfferingPlans.length - 1].declaredAt;\n', '            assert(SafeMath.sub(now, lastDeclaredAt) >= 180 days);\n', '        }\n', '\n', '        uint256 totalDeclaredTokenCount = tokenCount;\n', '        for (uint8 i; i < publicOfferingPlans.length; i++) {\n', '            totalDeclaredTokenCount = SafeMath.add(totalDeclaredTokenCount, publicOfferingPlans[i].tokenCount);\n', '        }\n', '        assert(totalDeclaredTokenCount <= initialCompanysTokenAllocation);   // shall not exceed the initial token allocation\n', '\n', '        publicOfferingPlans.push(\n', '            PublicOfferingPlan(tokenCount, unlockCompanysTokensAt, now));\n', '\n', '        PublicOfferingPlanDeclared(tokenCount, unlockCompanysTokensAt);\n', '    }\n', '\n', '    /**\n', '     * @dev Allocate tokens to a marketing supporter from the marketing campaign share\n', '     * @param to Address to where tokens are allocated\n', '     * @param value Number of tokens to transfer\n', '     */\n', '    function allocateToMarketingSupporter(address to, uint256 value)\n', '        external\n', '        onlyMarketingCampaignContract\n', '        returns (bool)\n', '    {\n', '        return allocateFrom(address(starbaseMarketingCampaign), to, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Allocate tokens to an early contributor from the early contributor share\n', '     * @param to Address to where tokens are allocated\n', '     * @param value Number of tokens to transfer\n', '     */\n', '    function allocateToEarlyContributor(address to, uint256 value)\n', '        external\n', '        onlyFundraiser\n', '        returns (bool)\n', '    {\n', '        initialEcTokenAllocation[to] =\n', '            SafeMath.add(initialEcTokenAllocation[to], value);\n', '        return allocateFrom(0, to, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Issue new tokens according to the STAR token inflation limits\n', '     * @param _for Address to where tokens are allocated\n', '     * @param value Number of tokens to issue\n', '     */\n', '    function issueTokens(address _for, uint256 value)\n', '        external\n', '        onlyFundraiser\n', '        onlyAfterCrowdsale\n', '        returns (bool)\n', '    {\n', '        // check if the value under the limits\n', '        assert(value <= numOfInflatableTokens());\n', '\n', '        totalSupply = SafeMath.add(totalSupply, value);\n', '        balances[_for] = SafeMath.add(balances[_for], value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Declares Starbase MVP has been launched\n', '     * @param launchedAt When the MVP launched (timestamp)\n', '     */\n', '    function declareMvpLaunched(uint256 launchedAt)\n', '        external\n', '        onlyFundraiser\n', '        onlyAfterCrowdsale\n', '        returns (bool)\n', '    {\n', '        require(mvpLaunchedAt == 0); // overwriting the launch date is not permitted\n', '        require(launchedAt <= now);\n', '        require(starbaseCrowdsale.isEnded());\n', '\n', '        mvpLaunchedAt = launchedAt;\n', '        MvpLaunched(launchedAt);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Allocate tokens to a crowdsale or early purchaser from the crowdsale share\n', '     * @param to Address to where tokens are allocated\n', '     * @param value Number of tokens to transfer\n', '     */\n', '    function allocateToCrowdsalePurchaser(address to, uint256 value)\n', '        external\n', '        onlyCrowdsaleContract\n', '        onlyAfterCrowdsale\n', '        returns (bool)\n', '    {\n', '        return allocateFrom(address(starbaseCrowdsale), to, value);\n', '    }\n', '\n', '    /*\n', '     *  Public functions\n', '     */\n', '\n', '    /**\n', "     * @dev Transfers sender's tokens to a given address. Returns success.\n", '     * @param to Address of token receiver.\n', '     * @param value Number of tokens to transfer.\n', '     */\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        assert(isTransferable(msg.sender, value));\n', '        return super.transfer(to, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows third party to transfer tokens from one address to another. Returns success.\n', '     * @param from Address from where tokens are withdrawn.\n', '     * @param to Address to where tokens are sent.\n', '     * @param value Number of tokens to transfer.\n', '     */\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '        assert(isTransferable(from, value));\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Adds fundraiser. Only called by another fundraiser.\n', '     * @param fundraiserAddress The address in check\n', '     */\n', '    function addFundraiser(address fundraiserAddress) public onlyFundraiser {\n', '        assert(!isFundraiser(fundraiserAddress));\n', '\n', '        fundraisers[fundraiserAddress] = true;\n', '        LogNewFundraiser(fundraiserAddress, true);\n', '    }\n', '\n', '    /**\n', '     * @dev Update fundraiser address rights.\n', '     * @param fundraiserAddress The address to update\n', '     * @param isBonaFide Boolean that denotes whether fundraiser is active or not.\n', '     */\n', '    function updateFundraiser(address fundraiserAddress, bool isBonaFide)\n', '       public\n', '       onlyFundraiser\n', '       returns(bool)\n', '    {\n', '        assert(isFundraiser(fundraiserAddress));\n', '\n', '        fundraisers[fundraiserAddress] = isBonaFide;\n', '        LogUpdateFundraiser(fundraiserAddress, isBonaFide);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns whether fundraiser address has rights.\n', '     * @param fundraiserAddress The address in check\n', '     */\n', '    function isFundraiser(address fundraiserAddress) constant public returns(bool) {\n', '        return fundraisers[fundraiserAddress];\n', '    }\n', '\n', '    /**\n', '     * @dev Returns whether the transferring of tokens is available fundraiser.\n', '     * @param from Address of token sender\n', '     * @param tokenCount Number of tokens to transfer.\n', '     */\n', '    function isTransferable(address from, uint256 tokenCount)\n', '        constant\n', '        public\n', '        returns (bool)\n', '    {\n', '        if (tokenCount == 0 || balances[from] < tokenCount) {\n', '            return false;\n', '        }\n', '\n', "        // company's tokens may be locked up\n", '        if (from == company) {\n', '            if (tokenCount > numOfTransferableCompanysTokens()) {\n', '                return false;\n', '            }\n', '        }\n', '\n', '        uint256 untransferableTokenCount = 0;\n', '\n', "        // early contributor's tokens may be locked up\n", '        if (initialEcTokenAllocation[from] > 0) {\n', '            untransferableTokenCount = SafeMath.add(\n', '                untransferableTokenCount,\n', '                numOfUntransferableEcTokens(from));\n', '        }\n', '\n', "        // EP and CS purchasers' tokens should be untransferable initially\n", '        if (starbaseCrowdsale.isEnded()) {\n', '            uint256 passedDays =\n', '                SafeMath.sub(now, starbaseCrowdsale.endedAt()) / 86400; // 1d = 86400s\n', '            if (passedDays < 7) {  // within a week\n', '                // crowdsale purchasers cannot transfer their tokens for a week\n', '                untransferableTokenCount = SafeMath.add(\n', '                    untransferableTokenCount,\n', '                    starbaseCrowdsale.numOfPurchasedTokensOnCsBy(from));\n', '            }\n', '            if (passedDays < 14) {  // within two weeks\n', '                // early purchasers cannot transfer their tokens for two weeks\n', '                untransferableTokenCount = SafeMath.add(\n', '                    untransferableTokenCount,\n', '                    starbaseCrowdsale.numOfPurchasedTokensOnEpBy(from));\n', '            }\n', '        }\n', '\n', '        uint256 transferableTokenCount =\n', '            SafeMath.sub(balances[from], untransferableTokenCount);\n', '\n', '        if (transferableTokenCount < tokenCount) {\n', '            return false;\n', '        } else {\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', "     * @dev Returns the number of transferable company's tokens\n", '     */\n', '    function numOfTransferableCompanysTokens() constant public returns (uint256) {\n', '        uint256 unlockedTokens = 0;\n', '        for (uint8 i; i < publicOfferingPlans.length; i++) {\n', '            PublicOfferingPlan memory plan = publicOfferingPlans[i];\n', '            if (plan.unlockCompanysTokensAt <= now) {\n', '                unlockedTokens = SafeMath.add(unlockedTokens, plan.tokenCount);\n', '            }\n', '        }\n', '        return SafeMath.sub(\n', '            balances[company],\n', '            initialCompanysTokenAllocation - unlockedTokens);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of untransferable tokens of the early contributor\n', '     * @param _for Address of early contributor to check\n', '     */\n', '    function numOfUntransferableEcTokens(address _for) constant public returns (uint256) {\n', '        uint256 initialCount = initialEcTokenAllocation[_for];\n', '        if (mvpLaunchedAt == 0) {\n', '            return initialCount;\n', '        }\n', '\n', '        uint256 passedWeeks = SafeMath.sub(now, mvpLaunchedAt) / 7 days;\n', '        if (passedWeeks <= 52) {    // a year ≈ 52 weeks\n', '            // all tokens should be locked up for a year\n', '            return initialCount;\n', '        }\n', '\n', '        // unlock 1/52 tokens every weeks after a year\n', '        uint256 transferableTokenCount = initialCount / 52 * (passedWeeks - 52);\n', '        if (transferableTokenCount >= initialCount) {\n', '            return 0;\n', '        } else {\n', '            return SafeMath.sub(initialCount, transferableTokenCount);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns number of tokens which can be issued according to the inflation rules\n', '     */\n', '    function numOfInflatableTokens() constant public returns (uint256) {\n', '        if (starbaseCrowdsale.endedAt() == 0) {\n', '            return 0;\n', '        }\n', '        uint256 passedDays = SafeMath.sub(now, starbaseCrowdsale.endedAt()) / 86400;  // 1d = 60s * 60m * 24h = 86400s\n', '        uint256 passedYears = passedDays * 100 / 36525;    // about 365.25 days in a year\n', '        uint256 inflatedSupply = initialSupply;\n', '        for (uint256 i; i < passedYears; i++) {\n', '            inflatedSupply = SafeMath.add(inflatedSupply, SafeMath.mul(inflatedSupply, 25) / 1000); // 2.5%/y = 0.025/y\n', '        }\n', '\n', '        uint256 remainderedDays = passedDays * 100 % 36525 / 100;\n', '        if (remainderedDays > 0) {\n', '            uint256 inflatableTokensOfNextYear =\n', '                SafeMath.mul(inflatedSupply, 25) / 1000;\n', '            inflatedSupply = SafeMath.add(inflatedSupply, SafeMath.mul(\n', '                inflatableTokensOfNextYear, remainderedDays * 100) / 36525);\n', '        }\n', '\n', '        return SafeMath.sub(inflatedSupply, totalSupply);\n', '    }\n', '\n', '    /*\n', '     *  Internal functions\n', '     */\n', '\n', '    /**\n', '     * @dev Allocate tokens value from an address to another one. This function is only called internally.\n', '     * @param from Address from where tokens come\n', '     * @param to Address to where tokens are allocated\n', '     * @param value Number of tokens to transfer\n', '     */\n', '    function allocateFrom(address from, address to, uint256 value) internal returns (bool) {\n', '        assert(value > 0 && balances[from] >= value);\n', '        balances[from] = SafeMath.sub(balances[from], value);\n', '        balances[to] = SafeMath.add(balances[to], value);\n', '        Transfer(from, to, value);\n', '        return true;\n', '    }\n', '}']
