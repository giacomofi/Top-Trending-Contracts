['pragma solidity ^0.4.15;\n', '\n', '\n', '/**\n', ' * @title Eliptic curve signature operations\n', ' *\n', ' * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\n', ' */\n', '\n', 'library ECRecovery {\n', '\n', '  /**\n', '   * @dev Recover signer address from a message by using his signature\n', '   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n', '   * @param sig bytes signature, the signature is generated using web3.eth.sign()\n', '   */\n', '  function recover(bytes32 hash, bytes sig) public constant returns (address) {\n', '    bytes32 r;\n', '    bytes32 s;\n', '    uint8 v;\n', '\n', '    //Check the signature length\n', '    if (sig.length != 65) {\n', '      return (address(0));\n', '    }\n', '\n', '    // Divide the signature in r, s and v variables\n', '    assembly {\n', '      r := mload(add(sig, 32))\n', '      s := mload(add(sig, 64))\n', '      v := byte(0, mload(add(sig, 96)))\n', '    }\n', '\n', '    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n', '    if (v < 27) {\n', '      v += 27;\n', '    }\n', '\n', '    // If the version is correct return the signer address\n', '    if (v != 27 && v != 28) {\n', '      return (address(0));\n', '    } else {\n', '      return ecrecover(hash, v, r, s);\n', '    }\n', '  }\n', '\n', '}\n', '\n', '\n', '//Papyrus State Channel Library\n', '//moved to separate library to save gas\n', 'library ChannelLibrary {\n', '    \n', '    struct Data {\n', '        uint close_timeout;\n', '        uint settle_timeout;\n', '        uint audit_timeout;\n', '        uint opened;\n', '        uint close_requested;\n', '        uint closed;\n', '        uint settled;\n', '        uint audited;\n', '        ChannelManagerContract manager;\n', '    \n', '        address sender;\n', '        address receiver;\n', '        address client;\n', '        uint balance;\n', '        address auditor;\n', '\n', '        //state update for close\n', '        uint nonce;\n', '        uint completed_transfers;\n', '    }\n', '\n', '    struct StateUpdate {\n', '        uint nonce;\n', '        uint completed_transfers;\n', '    }\n', '\n', '    modifier notSettledButClosed(Data storage self) {\n', '        require(self.settled <= 0 && self.closed > 0);\n', '        _;\n', '    }\n', '\n', '    modifier notAuditedButClosed(Data storage self) {\n', '        require(self.audited <= 0 && self.closed > 0);\n', '        _;\n', '    }\n', '\n', '    modifier stillTimeout(Data storage self) {\n', '        require(self.closed + self.settle_timeout >= block.number);\n', '        _;\n', '    }\n', '\n', '    modifier timeoutOver(Data storage self) {\n', '        require(self.closed + self.settle_timeout <= block.number);\n', '        _;\n', '    }\n', '\n', '    modifier channelSettled(Data storage self) {\n', '        require(self.settled != 0);\n', '        _;\n', '    }\n', '\n', '    modifier senderOnly(Data storage self) {\n', '        require(self.sender == msg.sender);\n', '        _;\n', '    }\n', '\n', '    modifier receiverOnly(Data storage self) {\n', '        require(self.receiver == msg.sender);\n', '        _;\n', '    }\n', '\n', '    /// @notice Sender deposits amount to channel.\n', '    /// must deposit before the channel is opened.\n', '    /// @param amount The amount to be deposited to the address\n', '    /// @return Success if the transfer was successful\n', '    /// @return The new balance of the invoker\n', '    function deposit(Data storage self, uint256 amount) \n', '    senderOnly(self)\n', '    returns (bool success, uint256 balance)\n', '    {\n', '        require(self.opened > 0);\n', '        require(self.closed == 0);\n', '\n', '        StandardToken token = self.manager.token();\n', '\n', '        require (token.balanceOf(msg.sender) >= amount);\n', '\n', '        success = token.transferFrom(msg.sender, this, amount);\n', '    \n', '        if (success == true) {\n', '            self.balance += amount;\n', '\n', '            return (true, self.balance);\n', '        }\n', '\n', '        return (false, 0);\n', '    }\n', '\n', '    function request_close(\n', '        Data storage self\n', '    ) {\n', '        require(msg.sender == self.sender || msg.sender == self.receiver);\n', '        require(self.close_requested == 0);\n', '        self.close_requested = block.number;\n', '    }\n', '\n', '    function close(\n', '        Data storage self,\n', '        address channel_address,\n', '        uint nonce,\n', '        uint completed_transfers,\n', '        bytes signature\n', '    )\n', '    {\n', '        if (self.close_timeout > 0) {\n', '            require(self.close_requested > 0);\n', '            require(block.number - self.close_requested >= self.close_timeout);\n', '        }\n', '        require(nonce > self.nonce);\n', '        require(completed_transfers >= self.completed_transfers);\n', '        require(completed_transfers <= self.balance);\n', '    \n', '        if (msg.sender != self.sender) {\n', '            //checking signature\n', '            bytes32 signed_hash = hashState(\n', '                channel_address,\n', '                nonce,\n', '                completed_transfers\n', '            );\n', '\n', '            address sign_address = ECRecovery.recover(signed_hash, signature);\n', '            require(sign_address == self.sender);\n', '        }\n', '\n', '        if (self.closed == 0) {\n', '            self.closed = block.number;\n', '        }\n', '    \n', '        self.nonce = nonce;\n', '        self.completed_transfers = completed_transfers;\n', '    }\n', '\n', '    function hashState (\n', '        address channel_address,\n', '        uint nonce,\n', '        uint completed_transfers\n', '    ) returns (bytes32) {\n', '        return sha3 (\n', '            channel_address,\n', '            nonce,\n', '            completed_transfers\n', '        );\n', '    }\n', '\n', '    /// @notice Settles the balance between the two parties\n', '    /// @dev Settles the balances of the two parties fo the channel\n', '    /// @return The participants with netted balances\n', '    function settle(Data storage self)\n', '        notSettledButClosed(self)\n', '        timeoutOver(self)\n', '    {\n', '        StandardToken token = self.manager.token();\n', '        \n', '        if (self.completed_transfers > 0) {\n', '            require(token.transfer(self.receiver, self.completed_transfers));\n', '        }\n', '\n', '        if (self.completed_transfers < self.balance) {\n', '            require(token.transfer(self.sender, self.balance - self.completed_transfers));\n', '        }\n', '\n', '        self.settled = block.number;\n', '    }\n', '\n', '    function audit(Data storage self, address auditor)\n', '        notAuditedButClosed(self) {\n', '        require(self.auditor == auditor);\n', '        require(block.number <= self.closed + self.audit_timeout);\n', '        self.audited = block.number;\n', '    }\n', '\n', '    function validateTransfer(\n', '        Data storage self,\n', '        address transfer_id,\n', '        address channel_address,\n', '        uint sum,\n', '        bytes lock_data,\n', '        bytes signature\n', '    ) returns (uint256) {\n', '\n', '        bytes32 signed_hash = hashTransfer(\n', '            transfer_id,\n', '            channel_address,\n', '            lock_data,\n', '            sum\n', '        );\n', '\n', '        address sign_address = ECRecovery.recover(signed_hash, signature);\n', '        require(sign_address == self.client);\n', '    }\n', '\n', '    function hashTransfer(\n', '        address transfer_id,\n', '        address channel_address,\n', '        bytes lock_data,\n', '        uint sum\n', '    ) returns (bytes32) {\n', '        if (lock_data.length > 0) {\n', '            return sha3 (\n', '                transfer_id,\n', '                channel_address,\n', '                sum,\n', '                lock_data\n', '            );\n', '        } else {\n', '            return sha3 (\n', '                transfer_id,\n', '                channel_address,\n', '                sum\n', '            );\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/// @title ERC20 interface\n', '/// @dev Full ERC20 interface described at https://github.com/ethereum/EIPs/issues/20.\n', 'contract ERC20 {\n', '\n', '  // EVENTS\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '  // PUBLIC FUNCTIONS\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  function balanceOf(address _owner) public constant returns (uint256);\n', '  function allowance(address _owner, address _spender) public constant returns (uint256);\n', '\n', '  // FIELDS\n', '\n', '  uint256 public totalSupply;\n', '}\n', '\n', '\n', '/// @title SafeMath\n', '/// @dev Math operations with safety checks that throw on error.\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/// @title Standard ERC20 token\n', '/// @dev Implementation of the basic standard token.\n', 'contract StandardToken is ERC20 {\n', '  using SafeMath for uint256;\n', '\n', '  // PUBLIC FUNCTIONS\n', '\n', '  /// @dev Transfers tokens to a specified address.\n', '  /// @param _to The address which you want to transfer to.\n', '  /// @param _value The amount of tokens to be transferred.\n', '  /// @return A boolean that indicates if the operation was successful.\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '  \n', '  /// @dev Transfers tokens from one address to another.\n', '  /// @param _from The address which you want to send tokens from.\n', '  /// @param _to The address which you want to transfer to.\n', '  /// @param _value The amount of tokens to be transferred.\n', '  /// @return A boolean that indicates if the operation was successful.\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowances[_from][msg.sender]);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowances[_from][msg.sender] = allowances[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /// @dev Approves the specified address to spend the specified amount of tokens on behalf of msg.sender.\n', '  /// Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '  /// and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "  /// race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '  /// https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '  /// @param _spender The address which will spend tokens.\n', '  /// @param _value The amount of tokens to be spent.\n', '  /// @return A boolean that indicates if the operation was successful.\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowances[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /// @dev Gets the balance of the specified address.\n', '  /// @param _owner The address to query the balance of.\n', '  /// @return An uint256 representing the amount owned by the specified address.\n', '  function balanceOf(address _owner) public constant returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  /// @dev Function to check the amount of tokens that an owner allowances to a spender.\n', '  /// @param _owner The address which owns tokens.\n', '  /// @param _spender The address which will spend tokens.\n', '  /// @return A uint256 specifying the amount of tokens still available for the spender.\n', '  function allowance(address _owner, address _spender) public constant returns (uint256) {\n', '    return allowances[_owner][_spender];\n', '  }\n', '\n', '  // FIELDS\n', '\n', '  mapping (address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) allowances;\n', '}\n', '\n', '\n', 'contract ChannelApi {\n', '    function applyRuntimeUpdate(address from, address to, uint impressionsCount, uint fraudCount);\n', '\n', '    function applyAuditorsCheckUpdate(address from, address to, uint fraudCountDelta);\n', '}\n', '\n', '\n', 'contract ChannelContract {\n', '    using ChannelLibrary for ChannelLibrary.Data;\n', '    ChannelLibrary.Data data;\n', '\n', '    event ChannelNewBalance(address token_address, address participant, uint balance, uint block_number);\n', '    event ChannelCloseRequested(address closing_address, uint block_number);\n', '    event ChannelClosed(address closing_address, uint block_number);\n', '    event TransferUpdated(address node_address, uint block_number);\n', '    event ChannelSettled(uint block_number);\n', '    event ChannelAudited(uint block_number);\n', '    event ChannelSecretRevealed(bytes32 secret, address receiver_address);\n', '\n', '    modifier onlyManager() {\n', '        require(msg.sender == address(data.manager));\n', '        _;\n', '    }\n', '\n', '    function ChannelContract(\n', '        address manager_address,\n', '        address sender,\n', '        address client,\n', '        address receiver,\n', '        uint close_timeout,\n', '        uint settle_timeout,\n', '        uint audit_timeout,\n', '        address auditor\n', '    )\n', '    {\n', '        //allow creation only from manager contract\n', '        require(msg.sender == manager_address);\n', '        require (sender != receiver);\n', '        require (client != receiver);\n', '        require (audit_timeout >= 0);\n', '        require (settle_timeout > 0);\n', '        require (close_timeout >= 0);\n', '\n', '        data.sender = sender;\n', '        data.client = client;\n', '        data.receiver = receiver;\n', '        data.auditor = auditor;\n', '        data.manager = ChannelManagerContract(manager_address);\n', '        data.close_timeout = close_timeout;\n', '        data.settle_timeout = settle_timeout;\n', '        data.audit_timeout = audit_timeout;\n', '        data.opened = block.number;\n', '    }\n', '\n', '    /// @notice Caller makes a deposit into their channel balance.\n', '    /// @param amount The amount caller wants to deposit.\n', '    /// @return True if deposit is successful.\n', '    function deposit(uint256 amount) returns (bool) {\n', '        bool success;\n', '        uint256 balance;\n', '\n', '        (success, balance) = data.deposit(amount);\n', '\n', '        if (success == true) {\n', '            ChannelNewBalance(data.manager.token(), msg.sender, balance, 0);\n', '        }\n', '\n', '        return success;\n', '    }\n', '\n', '    /// @notice Get the address and balance of both partners in a channel.\n', '    /// @return The address and balance pairs.\n', '    function addressAndBalance()\n', '        constant\n', '        returns (\n', '        address sender,\n', '        address receiver,\n', '        uint balance)\n', '    {\n', '        sender = data.sender;\n', '        receiver = data.receiver;\n', '        balance = data.balance;\n', '    }\n', '\n', '    /// @notice Request to close the channel. \n', '    function request_close () {\n', '        data.request_close();\n', '        ChannelCloseRequested(msg.sender, data.closed);\n', '    }\n', '\n', '    /// @notice Close the channel. \n', '    function close (\n', '        uint nonce,\n', '        uint256 completed_transfers,\n', '        bytes signature\n', '    ) {\n', '        data.close(address(this), nonce, completed_transfers, signature);\n', '        ChannelClosed(msg.sender, data.closed);\n', '    }\n', '\n', '    /// @notice Settle the transfers and balances of the channel and pay out to\n', '    ///         each participant. Can only be called after the channel is closed\n', '    ///         and only after the number of blocks in the settlement timeout\n', '    ///         have passed.\n', '    function settle() {\n', '        data.settle();\n', '        ChannelSettled(data.settled);\n', '    }\n', '\n', '    /// @notice Settle the transfers and balances of the channel and pay out to\n', '    ///         each participant. Can only be called after the channel is closed\n', '    ///         and only after the number of blocks in the settlement timeout\n', '    ///         have passed.\n', '    function audit(address auditor) onlyManager {\n', '        data.audit(auditor);\n', '        ChannelAudited(data.audited);\n', '    }\n', '\n', '    function destroy() onlyManager {\n', '        require(data.settled > 0);\n', '        require(data.audited > 0 || block.number > data.closed + data.audit_timeout);\n', '        selfdestruct(0);\n', '    }\n', '\n', '    function sender() constant returns (address) {\n', '        return data.sender;\n', '    }\n', '\n', '    function receiver() constant returns (address) {\n', '        return data.receiver;\n', '    }\n', '\n', '    function client() constant returns (address) {\n', '        return data.client;\n', '    }\n', '\n', '    function auditor() constant returns (address) {\n', '        return data.auditor;\n', '    }\n', '\n', '    function closeTimeout() constant returns (uint) {\n', '        return data.close_timeout;\n', '    }\n', '\n', '    function settleTimeout() constant returns (uint) {\n', '        return data.settle_timeout;\n', '    }\n', '\n', '    function auditTimeout() constant returns (uint) {\n', '        return data.audit_timeout;\n', '    }\n', '\n', '    /// @return Returns the address of the manager.\n', '    function manager() constant returns (address) {\n', '        return data.manager;\n', '    }\n', '\n', '    function balance() constant returns (uint) {\n', '        return data.balance;\n', '    }\n', '\n', '    function nonce() constant returns (uint) {\n', '        return data.nonce;\n', '    }\n', '\n', '    function completedTransfers() constant returns (uint) {\n', '        return data.completed_transfers;\n', '    }\n', '\n', '    /// @notice Returns the block number for when the channel was opened.\n', '    /// @return The block number for when the channel was opened.\n', '    function opened() constant returns (uint) {\n', '        return data.opened;\n', '    }\n', '\n', '    function closeRequested() constant returns (uint) {\n', '        return data.close_requested;\n', '    }\n', '\n', '    function closed() constant returns (uint) {\n', '        return data.closed;\n', '    }\n', '\n', '    function settled() constant returns (uint) {\n', '        return data.settled;\n', '    }\n', '\n', '    function audited() constant returns (uint) {\n', '        return data.audited;\n', '    }\n', '\n', '    function () { revert(); }\n', '}\n', '\n', '\n', 'contract ChannelManagerContract {\n', '\n', '    event ChannelNew(\n', '        address channel_address,\n', '        address indexed sender,\n', '        address client,\n', '        address indexed receiver,\n', '        uint close_timeout,\n', '        uint settle_timeout,\n', '        uint audit_timeout\n', '    );\n', '\n', '    event ChannelDeleted(\n', '        address channel_address,\n', '        address indexed sender,\n', '        address indexed receiver\n', '    );\n', '\n', '    StandardToken public token;\n', '    ChannelApi public channel_api;\n', '\n', '    function ChannelManagerContract(address token_address, address channel_api_address) {\n', '        require(token_address != 0);\n', '        require(channel_api_address != 0);\n', '        token = StandardToken(token_address);\n', '        channel_api = ChannelApi(channel_api_address);\n', '    }\n', '\n', '    /// @notice Create a new channel from msg.sender to receiver\n', '    /// @param receiver The address of the receiver\n', '    /// @param settle_timeout The settle timeout in blocks\n', '    /// @return The address of the newly created ChannelContract.\n', '    function newChannel(\n', '        address client, \n', '        address receiver, \n', '        uint close_timeout,\n', '        uint settle_timeout,\n', '        uint audit_timeout,\n', '        address auditor\n', '    )\n', '        returns (address)\n', '    {\n', '        address new_channel_address = new ChannelContract(\n', '            this,\n', '            msg.sender,\n', '            client,\n', '            receiver,\n', '            close_timeout,\n', '            settle_timeout,\n', '            audit_timeout,\n', '            auditor\n', '        );\n', '\n', '        ChannelNew(\n', '            new_channel_address, \n', '            msg.sender, \n', '            client, \n', '            receiver,\n', '            close_timeout,\n', '            settle_timeout,\n', '            audit_timeout\n', '        );\n', '\n', '        return new_channel_address;\n', '    }\n', '\n', '    function auditReport(address contract_address, uint total, uint fraud) {\n', '        ChannelContract ch = ChannelContract(contract_address);\n', '        require(ch.manager() == address(this));\n', '        address auditor = msg.sender;\n', '        ch.audit(auditor);\n', '        channel_api.applyRuntimeUpdate(ch.sender(), ch.receiver(), total, fraud);\n', '    }\n', '    \n', '    function destroyChannel(address channel_address) {\n', '        ChannelContract ch = ChannelContract(channel_address);\n', '        require(ch.manager() == address(this));\n', '        ChannelDeleted(channel_address,ch.sender(),ch.receiver());\n', '        ch.destroy();\n', '    }\n', '}']