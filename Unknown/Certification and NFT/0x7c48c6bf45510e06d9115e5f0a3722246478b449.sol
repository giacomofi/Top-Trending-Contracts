['pragma solidity ^0.4.14;\n', '\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    function Ownable() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        require(newOwner != address(0));\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract MintableToken {\n', '    function mint(address _to, uint256 _amount) returns (bool);\n', '}\n', '\n', '\n', 'contract CryptoSlotsCrowdsale is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    MintableToken public token;\n', '\n', '    bool public isCrowdsaleOpen = true;\n', '\n', '    address public wallet;\n', '\n', '    uint256 public rate = 400;\n', '\n', '    uint256 public weiRaised;\n', '\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 weiAmount, uint256 tokenAmount);\n', '\n', '    event CrowdsaleFinished();\n', '\n', '    function CryptoSlotsCrowdsale() {\n', '        wallet = msg.sender;\n', '    }\n', '\n', '    function deleteContract() onlyOwner\n', '    {\n', '        selfdestruct(msg.sender);\n', '    }\n', '\n', '    function() payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    function buyTokens(address beneficiary) payable {\n', '        require(beneficiary != 0x0);\n', '        require(msg.value != 0);\n', '        require(isCrowdsaleOpen);\n', '\n', '        uint256 weiAmount = msg.value;\n', '\n', '        uint256 tokenAmount = weiAmount.mul(rate);\n', '\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        token.mint(beneficiary, tokenAmount);\n', '        TokenPurchase(msg.sender, beneficiary, weiAmount, tokenAmount);\n', '\n', '        wallet.transfer(msg.value);\n', '    }\n', '\n', '    function stopCrowdsale() onlyOwner {\n', '        require(isCrowdsaleOpen);\n', '\n', '        isCrowdsaleOpen = false;\n', '        CrowdsaleFinished();\n', '    }\n', '\n', '    function setWallet(address value) onlyOwner {\n', '        require(value != 0x0);\n', '        wallet = value;\n', '    }\n', '\n', '    function setRate(uint value) onlyOwner {\n', '        require(value != 0);\n', '        rate = value;\n', '    }\n', '\n', '    function setToken(address value) onlyOwner {\n', '        require(value != 0x0);\n', '        token = MintableToken(value);\n', '    }\n', '}']
['pragma solidity ^0.4.14;\n', '\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    function Ownable() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        require(newOwner != address(0));\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract MintableToken {\n', '    function mint(address _to, uint256 _amount) returns (bool);\n', '}\n', '\n', '\n', 'contract CryptoSlotsCrowdsale is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    MintableToken public token;\n', '\n', '    bool public isCrowdsaleOpen = true;\n', '\n', '    address public wallet;\n', '\n', '    uint256 public rate = 400;\n', '\n', '    uint256 public weiRaised;\n', '\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 weiAmount, uint256 tokenAmount);\n', '\n', '    event CrowdsaleFinished();\n', '\n', '    function CryptoSlotsCrowdsale() {\n', '        wallet = msg.sender;\n', '    }\n', '\n', '    function deleteContract() onlyOwner\n', '    {\n', '        selfdestruct(msg.sender);\n', '    }\n', '\n', '    function() payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    function buyTokens(address beneficiary) payable {\n', '        require(beneficiary != 0x0);\n', '        require(msg.value != 0);\n', '        require(isCrowdsaleOpen);\n', '\n', '        uint256 weiAmount = msg.value;\n', '\n', '        uint256 tokenAmount = weiAmount.mul(rate);\n', '\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        token.mint(beneficiary, tokenAmount);\n', '        TokenPurchase(msg.sender, beneficiary, weiAmount, tokenAmount);\n', '\n', '        wallet.transfer(msg.value);\n', '    }\n', '\n', '    function stopCrowdsale() onlyOwner {\n', '        require(isCrowdsaleOpen);\n', '\n', '        isCrowdsaleOpen = false;\n', '        CrowdsaleFinished();\n', '    }\n', '\n', '    function setWallet(address value) onlyOwner {\n', '        require(value != 0x0);\n', '        wallet = value;\n', '    }\n', '\n', '    function setRate(uint value) onlyOwner {\n', '        require(value != 0);\n', '        rate = value;\n', '    }\n', '\n', '    function setToken(address value) onlyOwner {\n', '        require(value != 0x0);\n', '        token = MintableToken(value);\n', '    }\n', '}']
