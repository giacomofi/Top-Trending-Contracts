['pragma solidity ^0.4.13;\n', '\n', 'contract ERC20 {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) constant returns (uint);\n', '  function allowance(address owner, address spender) constant returns (uint);\n', '\n', '  function transfer(address to, uint value) returns (bool ok);\n', '  function transferFrom(address from, address to, uint value) returns (bool ok);\n', '  function approve(address spender, uint value) returns (bool ok);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'contract SafeMath {\n', '  function safeMul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint a, uint b) internal returns (uint) {\n', '    assert(b > 0);\n', '    uint c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, SafeMath {\n', '\n', '  /* Token supply got increased and a new owner received these tokens */\n', '  event Minted(address receiver, uint amount);\n', '\n', '  /* Actual balances of token holders */\n', '  mapping(address => uint) balances;\n', '\n', '  /* approve() allowances */\n', '  mapping (address => mapping (address => uint)) allowed;\n', '\n', '  /* Interface declaration */\n', '  function isToken() public constant returns (bool weAre) {\n', '    return true;\n', '  }\n', '\n', '  function transfer(address _to, uint _value) returns (bool success) {\n', '    balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '    balances[_to] = safeAdd(balances[_to], _value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _value) returns (bool success) {\n', '    uint _allowance = allowed[_from][msg.sender];\n', '\n', '    balances[_to] = safeAdd(balances[_to], _value);\n', '    balances[_from] = safeSub(balances[_from], _value);\n', '    allowed[_from][msg.sender] = safeSub(_allowance, _value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function approve(address _spender, uint _value) returns (bool success) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', 'contract QvoltaToken is StandardToken {\n', '\n', '    string public name = "QVT";\n', '    string public symbol = "QVT";\n', '    uint public decimals = 0;\n', '\n', '    /**\n', '     * Boolean contract states\n', '     */\n', '    bool public halted = false; //the founder address can set this to true to halt the crowdsale due to emergency\n', '    bool public preIco = true; //Pre-ico state\n', '    bool public freeze = true; //Freeze state\n', '\n', '    /**\n', '     * Initial founder address (set in constructor)\n', '     * All deposited ETH will be forwarded to this address.\n', '     * Address is a multisig wallet.\n', '     */\n', '    address public founder = 0x0;\n', '    address public owner = 0x0;\n', '\n', '    /**\n', '     * Token count\n', '     */\n', '    uint public totalTokens = 218750000;\n', '    uint public team = 41562500;\n', '    uint public bounty = 2187500; // Bounty count\n', '\n', '    /**\n', '     * Ico and pre-ico cap\n', '     */\n', '    uint public preIcoCap = 17500000; // Max amount raised during pre ico 17500 ether (10%)\n', '    uint public icoCap = 175000000; // Max amount raised during crowdsale 175000 ether\n', '\n', '    /**\n', '     * Statistic values\n', '     */\n', '    uint public presaleTokenSupply = 0; // This will keep track of the token supply created during the crowdsale\n', '    uint public presaleEtherRaised = 0; // This will keep track of the Ether raised during the crowdsale\n', '    uint public preIcoTokenSupply = 0; // This will keep track of the token supply created during the pre-ico\n', '\n', '    event Buy(address indexed sender, uint eth, uint fbt);\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event TokensSent(address indexed to, uint256 value);\n', '    event ContributionReceived(address indexed to, uint256 value);\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    function QvoltaToken(address _founder) payable {\n', '        owner = msg.sender;\n', '        founder = _founder;\n', '\n', '        // Move team token pool to founder balance\n', '        balances[founder] = team;\n', '        // Sub from total tokens team pool\n', '        totalTokens = safeSub(totalTokens, team);\n', '        // Sub from total tokens bounty pool\n', '        totalTokens = safeSub(totalTokens, bounty);\n', '        // Total supply is 175000000\n', '        totalSupply = totalTokens;\n', '        balances[owner] = totalSupply;\n', '    }\n', '\n', '    /**\n', '     * 1 QVT = 1 FINNEY\n', '     * Rrice is 1000 Qvolta for 1 ETH\n', '     */\n', '    function price() constant returns (uint){\n', '        return 1 finney;\n', '    }\n', '\n', '    /**\n', '      * The basic entry point to participate the crowdsale process.\n', '      *\n', '      * Pay for funding, get invested tokens back in the sender address.\n', '      */\n', '    function buy() public payable returns(bool) {\n', '        // Buy allowed if contract is not on halt\n', '        require(!halted);\n', '        // Amount of wei should be more that 0\n', '        require(msg.value>0);\n', '\n', '        // Count expected tokens price\n', '        uint tokens = msg.value / price();\n', '\n', '        // Total tokens should be more than user want&#39;s to buy\n', '        require(balances[owner]>tokens);\n', '\n', '        // Gave +50% of tokents on pre-ico\n', '        if (preIco) {\n', '            tokens = tokens + (tokens / 2);\n', '        }\n', '\n', '        // Check how much tokens already sold\n', '        if (preIco) {\n', '            // Check that required tokens count are less than tokens already sold on pre-ico\n', '            require(safeAdd(presaleTokenSupply, tokens) < preIcoCap);\n', '        } else {\n', '            // Check that required tokens count are less than tokens already sold on ico sub pre-ico\n', '            require(safeAdd(presaleTokenSupply, tokens) < safeSub(icoCap, preIcoTokenSupply));\n', '        }\n', '\n', '        // Send wei to founder address\n', '        founder.transfer(msg.value);\n', '\n', '        // Add tokens to user balance and remove from totalSupply\n', '        balances[msg.sender] = safeAdd(balances[msg.sender], tokens);\n', '        // Remove sold tokens from total supply count\n', '        balances[owner] = safeSub(balances[owner], tokens);\n', '\n', '        // Update stats\n', '        if (preIco) {\n', '            preIcoTokenSupply  = safeAdd(preIcoTokenSupply, tokens);\n', '        }\n', '        presaleTokenSupply = safeAdd(presaleTokenSupply, tokens);\n', '        presaleEtherRaised = safeAdd(presaleEtherRaised, msg.value);\n', '\n', '        // Send buy Qvolta token action\n', '        Buy(msg.sender, msg.value, tokens);\n', '\n', '        // /* Emit log events */\n', '        TokensSent(msg.sender, tokens);\n', '        ContributionReceived(msg.sender, msg.value);\n', '        Transfer(owner, msg.sender, tokens);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Pre-ico state.\n', '     */\n', '    function setPreIco() onlyOwner() {\n', '        preIco = true;\n', '    }\n', '\n', '    function unPreIco() onlyOwner() {\n', '        preIco = false;\n', '    }\n', '\n', '    /**\n', '     * Emergency Stop ICO.\n', '     */\n', '    function halt() onlyOwner() {\n', '        halted = true;\n', '    }\n', '\n', '    function unHalt() onlyOwner() {\n', '        halted = false;\n', '    }\n', '\n', '    /**\n', '     * Transfer bounty to target address from bounty pool\n', '     */\n', '    function sendTeamTokens(address _to, uint256 _value) onlyOwner() {\n', '        balances[founder] = safeSub(balances[founder], _value);\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        // /* Emit log events */\n', '        TokensSent(_to, _value);\n', '        Transfer(owner, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Transfer team tokens to target address\n', '     */\n', '    function sendBounty(address _to, uint256 _value) onlyOwner() {\n', '        bounty = safeSub(bounty, _value);\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        // /* Emit log events */\n', '        TokensSent(_to, _value);\n', '        Transfer(owner, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Transfer bounty to target address from bounty pool\n', '     */\n', '    function sendSupplyTokens(address _to, uint256 _value) onlyOwner() {\n', '        balances[owner] = safeSub(balances[owner], _value);\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        // /* Emit log events */\n', '        TokensSent(_to, _value);\n', '        Transfer(owner, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * ERC 20 Standard Token interface transfer function\n', '     *\n', '     * Prevent transfers until halt period is over.\n', '     */\n', '    function transfer(address _to, uint256 _value) isAvailable() returns (bool success) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '    /**\n', '     * ERC 20 Standard Token interface transfer function\n', '     *\n', '     * Prevent transfers until halt period is over.\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) isAvailable() returns (bool success) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Burn all tokens from a balance.\n', '     */\n', '    function burnRemainingTokens() isAvailable() onlyOwner() {\n', '        Burn(owner, balances[owner]);\n', '        balances[owner] = 0;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier isAvailable() {\n', '        require(!halted && !freeze);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Just being sent some cash? Let&#39;s buy tokens\n', '     */\n', '    function() payable {\n', '        buy();\n', '    }\n', '\n', '    /**\n', '     * Freeze and unfreeze ICO.\n', '     */\n', '    function freeze() onlyOwner() {\n', '         freeze = true;\n', '    }\n', '\n', '     function unFreeze() onlyOwner() {\n', '         freeze = false;\n', '     }\n', '\n', '    /**\n', '     * Replaces an owner\n', '     */\n', '    function changeOwner(address _to) onlyOwner() {\n', '        balances[_to] = balances[owner];\n', '        balances[owner] = 0;\n', '        owner = _to;\n', '    }\n', '\n', '    /**\n', '     * Replaces a founder, transfer team pool to new founder balance\n', '     */\n', '    function changeFounder(address _to) onlyOwner() {\n', '        balances[_to] = balances[founder];\n', '        balances[founder] = 0;\n', '        founder = _to;\n', '    }\n', '}']
['pragma solidity ^0.4.13;\n', '\n', 'contract ERC20 {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) constant returns (uint);\n', '  function allowance(address owner, address spender) constant returns (uint);\n', '\n', '  function transfer(address to, uint value) returns (bool ok);\n', '  function transferFrom(address from, address to, uint value) returns (bool ok);\n', '  function approve(address spender, uint value) returns (bool ok);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'contract SafeMath {\n', '  function safeMul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint a, uint b) internal returns (uint) {\n', '    assert(b > 0);\n', '    uint c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, SafeMath {\n', '\n', '  /* Token supply got increased and a new owner received these tokens */\n', '  event Minted(address receiver, uint amount);\n', '\n', '  /* Actual balances of token holders */\n', '  mapping(address => uint) balances;\n', '\n', '  /* approve() allowances */\n', '  mapping (address => mapping (address => uint)) allowed;\n', '\n', '  /* Interface declaration */\n', '  function isToken() public constant returns (bool weAre) {\n', '    return true;\n', '  }\n', '\n', '  function transfer(address _to, uint _value) returns (bool success) {\n', '    balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '    balances[_to] = safeAdd(balances[_to], _value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _value) returns (bool success) {\n', '    uint _allowance = allowed[_from][msg.sender];\n', '\n', '    balances[_to] = safeAdd(balances[_to], _value);\n', '    balances[_from] = safeSub(balances[_from], _value);\n', '    allowed[_from][msg.sender] = safeSub(_allowance, _value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function approve(address _spender, uint _value) returns (bool success) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', 'contract QvoltaToken is StandardToken {\n', '\n', '    string public name = "QVT";\n', '    string public symbol = "QVT";\n', '    uint public decimals = 0;\n', '\n', '    /**\n', '     * Boolean contract states\n', '     */\n', '    bool public halted = false; //the founder address can set this to true to halt the crowdsale due to emergency\n', '    bool public preIco = true; //Pre-ico state\n', '    bool public freeze = true; //Freeze state\n', '\n', '    /**\n', '     * Initial founder address (set in constructor)\n', '     * All deposited ETH will be forwarded to this address.\n', '     * Address is a multisig wallet.\n', '     */\n', '    address public founder = 0x0;\n', '    address public owner = 0x0;\n', '\n', '    /**\n', '     * Token count\n', '     */\n', '    uint public totalTokens = 218750000;\n', '    uint public team = 41562500;\n', '    uint public bounty = 2187500; // Bounty count\n', '\n', '    /**\n', '     * Ico and pre-ico cap\n', '     */\n', '    uint public preIcoCap = 17500000; // Max amount raised during pre ico 17500 ether (10%)\n', '    uint public icoCap = 175000000; // Max amount raised during crowdsale 175000 ether\n', '\n', '    /**\n', '     * Statistic values\n', '     */\n', '    uint public presaleTokenSupply = 0; // This will keep track of the token supply created during the crowdsale\n', '    uint public presaleEtherRaised = 0; // This will keep track of the Ether raised during the crowdsale\n', '    uint public preIcoTokenSupply = 0; // This will keep track of the token supply created during the pre-ico\n', '\n', '    event Buy(address indexed sender, uint eth, uint fbt);\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event TokensSent(address indexed to, uint256 value);\n', '    event ContributionReceived(address indexed to, uint256 value);\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    function QvoltaToken(address _founder) payable {\n', '        owner = msg.sender;\n', '        founder = _founder;\n', '\n', '        // Move team token pool to founder balance\n', '        balances[founder] = team;\n', '        // Sub from total tokens team pool\n', '        totalTokens = safeSub(totalTokens, team);\n', '        // Sub from total tokens bounty pool\n', '        totalTokens = safeSub(totalTokens, bounty);\n', '        // Total supply is 175000000\n', '        totalSupply = totalTokens;\n', '        balances[owner] = totalSupply;\n', '    }\n', '\n', '    /**\n', '     * 1 QVT = 1 FINNEY\n', '     * Rrice is 1000 Qvolta for 1 ETH\n', '     */\n', '    function price() constant returns (uint){\n', '        return 1 finney;\n', '    }\n', '\n', '    /**\n', '      * The basic entry point to participate the crowdsale process.\n', '      *\n', '      * Pay for funding, get invested tokens back in the sender address.\n', '      */\n', '    function buy() public payable returns(bool) {\n', '        // Buy allowed if contract is not on halt\n', '        require(!halted);\n', '        // Amount of wei should be more that 0\n', '        require(msg.value>0);\n', '\n', '        // Count expected tokens price\n', '        uint tokens = msg.value / price();\n', '\n', "        // Total tokens should be more than user want's to buy\n", '        require(balances[owner]>tokens);\n', '\n', '        // Gave +50% of tokents on pre-ico\n', '        if (preIco) {\n', '            tokens = tokens + (tokens / 2);\n', '        }\n', '\n', '        // Check how much tokens already sold\n', '        if (preIco) {\n', '            // Check that required tokens count are less than tokens already sold on pre-ico\n', '            require(safeAdd(presaleTokenSupply, tokens) < preIcoCap);\n', '        } else {\n', '            // Check that required tokens count are less than tokens already sold on ico sub pre-ico\n', '            require(safeAdd(presaleTokenSupply, tokens) < safeSub(icoCap, preIcoTokenSupply));\n', '        }\n', '\n', '        // Send wei to founder address\n', '        founder.transfer(msg.value);\n', '\n', '        // Add tokens to user balance and remove from totalSupply\n', '        balances[msg.sender] = safeAdd(balances[msg.sender], tokens);\n', '        // Remove sold tokens from total supply count\n', '        balances[owner] = safeSub(balances[owner], tokens);\n', '\n', '        // Update stats\n', '        if (preIco) {\n', '            preIcoTokenSupply  = safeAdd(preIcoTokenSupply, tokens);\n', '        }\n', '        presaleTokenSupply = safeAdd(presaleTokenSupply, tokens);\n', '        presaleEtherRaised = safeAdd(presaleEtherRaised, msg.value);\n', '\n', '        // Send buy Qvolta token action\n', '        Buy(msg.sender, msg.value, tokens);\n', '\n', '        // /* Emit log events */\n', '        TokensSent(msg.sender, tokens);\n', '        ContributionReceived(msg.sender, msg.value);\n', '        Transfer(owner, msg.sender, tokens);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Pre-ico state.\n', '     */\n', '    function setPreIco() onlyOwner() {\n', '        preIco = true;\n', '    }\n', '\n', '    function unPreIco() onlyOwner() {\n', '        preIco = false;\n', '    }\n', '\n', '    /**\n', '     * Emergency Stop ICO.\n', '     */\n', '    function halt() onlyOwner() {\n', '        halted = true;\n', '    }\n', '\n', '    function unHalt() onlyOwner() {\n', '        halted = false;\n', '    }\n', '\n', '    /**\n', '     * Transfer bounty to target address from bounty pool\n', '     */\n', '    function sendTeamTokens(address _to, uint256 _value) onlyOwner() {\n', '        balances[founder] = safeSub(balances[founder], _value);\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        // /* Emit log events */\n', '        TokensSent(_to, _value);\n', '        Transfer(owner, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Transfer team tokens to target address\n', '     */\n', '    function sendBounty(address _to, uint256 _value) onlyOwner() {\n', '        bounty = safeSub(bounty, _value);\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        // /* Emit log events */\n', '        TokensSent(_to, _value);\n', '        Transfer(owner, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Transfer bounty to target address from bounty pool\n', '     */\n', '    function sendSupplyTokens(address _to, uint256 _value) onlyOwner() {\n', '        balances[owner] = safeSub(balances[owner], _value);\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        // /* Emit log events */\n', '        TokensSent(_to, _value);\n', '        Transfer(owner, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * ERC 20 Standard Token interface transfer function\n', '     *\n', '     * Prevent transfers until halt period is over.\n', '     */\n', '    function transfer(address _to, uint256 _value) isAvailable() returns (bool success) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '    /**\n', '     * ERC 20 Standard Token interface transfer function\n', '     *\n', '     * Prevent transfers until halt period is over.\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) isAvailable() returns (bool success) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Burn all tokens from a balance.\n', '     */\n', '    function burnRemainingTokens() isAvailable() onlyOwner() {\n', '        Burn(owner, balances[owner]);\n', '        balances[owner] = 0;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier isAvailable() {\n', '        require(!halted && !freeze);\n', '        _;\n', '    }\n', '\n', '    /**\n', "     * Just being sent some cash? Let's buy tokens\n", '     */\n', '    function() payable {\n', '        buy();\n', '    }\n', '\n', '    /**\n', '     * Freeze and unfreeze ICO.\n', '     */\n', '    function freeze() onlyOwner() {\n', '         freeze = true;\n', '    }\n', '\n', '     function unFreeze() onlyOwner() {\n', '         freeze = false;\n', '     }\n', '\n', '    /**\n', '     * Replaces an owner\n', '     */\n', '    function changeOwner(address _to) onlyOwner() {\n', '        balances[_to] = balances[owner];\n', '        balances[owner] = 0;\n', '        owner = _to;\n', '    }\n', '\n', '    /**\n', '     * Replaces a founder, transfer team pool to new founder balance\n', '     */\n', '    function changeFounder(address _to) onlyOwner() {\n', '        balances[_to] = balances[founder];\n', '        balances[founder] = 0;\n', '        founder = _to;\n', '    }\n', '}']
