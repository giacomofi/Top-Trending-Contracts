['pragma solidity ^0.4.2;\n', 'contract Deed {\n', '    address public owner;\n', '    address public previousOwner;\n', '}\n', 'contract Registry {\n', '    function owner(bytes32 _hash) public constant returns (address);\n', '}\n', 'contract Registrar {\n', '    function transfer(bytes32 _hash, address newOwner) public;\n', '    function entries(bytes32 _hash) public constant returns (uint, Deed, uint, uint, uint);\n', '}\n', 'contract Permissioned {\n', '    mapping(address=>mapping(bytes32=>bool)) internal permissions;\n', '    bytes32 internal constant PERM_SUPERUSER = keccak256("_superuser");\n', '    function Permissioned() public {\n', '        permissions[msg.sender][PERM_SUPERUSER] = true;\n', '    }\n', '    modifier ifPermitted(address addr, bytes32 permission) {\n', '        require(permissions[addr][permission] || permissions[addr][PERM_SUPERUSER]);\n', '        _;\n', '    }\n', '    function isPermitted(address addr, bytes32 permission) public constant returns (bool) {\n', '        return(permissions[addr][permission] || permissions[addr][PERM_SUPERUSER]);\n', '    }\n', '    function setPermission(address addr, bytes32 permission, bool allowed) public ifPermitted(msg.sender, PERM_SUPERUSER) {\n', '        permissions[addr][permission] = allowed;\n', '    }\n', '}\n', 'contract RegistryRef {\n', '    function owner(bytes32 node) public constant returns (address);\n', '}\n', 'contract ReverseRegistrarRef {\n', '    function setName(string name) public returns (bytes32 node);\n', '}\n', 'contract ENSReverseRegister {\n', '    function ENSReverseRegister(address registry, string name) public {\n', '        if (registry != 0) {\n', '            var reverseRegistrar = RegistryRef(registry).owner(0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2);\n', '            if (reverseRegistrar != 0) {\n', '                ReverseRegistrarRef(reverseRegistrar).setName(name);\n', '            }\n', '        }\n', '    }\n', '}\n', 'contract Pausable is Permissioned {\n', '    event Pause();\n', '    event Unpause();\n', '    bool public paused = false;\n', '    bytes32 internal constant PERM_PAUSE = keccak256("_pausable");\n', '    modifier ifNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '    modifier ifPaused {\n', '        require(paused);\n', '        _;\n', '    }\n', '    function pause() public ifPermitted(msg.sender, PERM_PAUSE) ifNotPaused returns (bool) {\n', '        paused = true;\n', '        Pause();\n', '        return true;\n', '    }\n', '    function unpause() public ifPermitted(msg.sender, PERM_PAUSE) ifPaused returns (bool) {\n', '        paused = false;\n', '        Unpause();\n', '        return true;\n', '    }\n', '}\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', 'contract DomainSale is ENSReverseRegister, Pausable {\n', '    using SafeMath for uint256;\n', '    Registrar public registrar;\n', '    mapping (string => Sale) private sales;\n', '    mapping (address => uint256) private balances;\n', '    uint256 private constant AUCTION_DURATION = 24 hours;\n', '    uint256 private constant HIGH_BID_KICKIN = 7 days;\n', '    uint256 private constant NORMAL_BID_INCREASE_PERCENTAGE = 10;\n', '    uint256 private constant HIGH_BID_INCREASE_PERCENTAGE = 50;\n', '    uint256 private constant SELLER_SALE_PERCENTAGE = 90;\n', '    uint256 private constant START_REFERRER_SALE_PERCENTAGE = 5;\n', '    uint256 private constant BID_REFERRER_SALE_PERCENTAGE = 5;\n', '    string private constant CONTRACT_ENS = "domainsale.eth";\n', '    bytes32 private constant NAMEHASH_ETH = 0x93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae;\n', '    struct Sale {\n', '        uint256 price;\n', '        uint256 reserve;\n', '        uint256 lastBid;\n', '        address lastBidder;\n', '        uint256 auctionStarted;\n', '        uint256 auctionEnds;\n', '        address startReferrer;\n', '        address bidReferrer;\n', '    }\n', '    event Offer(address indexed seller, string name, uint256 price, uint256 reserve);\n', '    event Bid(address indexed bidder, string name, uint256 bid);\n', '    event Transfer(address indexed seller, address indexed buyer, string name, uint256 value);\n', '    event Cancel(string name);\n', '    event Withdraw(address indexed recipient, uint256 amount);\n', '    modifier onlyNameSeller(string _name) {\n', '        Deed deed;\n', '        (,deed,,,) = registrar.entries(keccak256(_name));\n', '        require(deed.owner() == address(this));\n', '        require(deed.previousOwner() == msg.sender);\n', '        _;\n', '    }\n', '    modifier deedValid(string _name) {\n', '        address deed;\n', '        (,deed,,,) = registrar.entries(keccak256(_name));\n', '        require(deed != 0);\n', '        _;\n', '    }\n', '    modifier auctionNotStarted(string _name) {\n', '        require(sales[_name].auctionStarted == 0);\n', '        _;\n', '    }\n', '    modifier canBid(string _name) {\n', '        require(sales[_name].reserve != 0);\n', '        _;\n', '    }\n', '    modifier canBuy(string _name) {\n', '        require(sales[_name].price != 0);\n', '        _;\n', '    }\n', '    function DomainSale(address _registry) public ENSReverseRegister(_registry, CONTRACT_ENS) {\n', '        registrar = Registrar(Registry(_registry).owner(NAMEHASH_ETH));\n', '    }\n', '    function sale(string _name) public constant returns (uint256, uint256, uint256, address, uint256, uint256) {\n', '        Sale storage s = sales[_name];\n', '        return (s.price, s.reserve, s.lastBid, s.lastBidder, s.auctionStarted, s.auctionEnds);\n', '    }\n', '    function isAuction(string _name) public constant returns (bool) {\n', '        return sales[_name].reserve != 0;\n', '    }\n', '    function isBuyable(string _name) public constant returns (bool) {\n', '        return sales[_name].price != 0 && sales[_name].auctionStarted == 0;\n', '    }\n', '    function auctionStarted(string _name) public constant returns (bool) {\n', '        return sales[_name].lastBid != 0;\n', '    }\n', '    function auctionEnds(string _name) public constant returns (uint256) {\n', '        return sales[_name].auctionEnds;\n', '    }\n', '    function minimumBid(string _name) public constant returns (uint256) {\n', '        Sale storage s = sales[_name];\n', '        if (s.auctionStarted == 0) {\n', '            return s.reserve;\n', '        } else if (s.auctionStarted.add(HIGH_BID_KICKIN) > now) {\n', '            return s.lastBid.add(s.lastBid.mul(NORMAL_BID_INCREASE_PERCENTAGE).div(100));\n', '        } else {\n', '            return s.lastBid.add(s.lastBid.mul(HIGH_BID_INCREASE_PERCENTAGE).div(100));\n', '        }\n', '    }\n', '    function price(string _name) public constant returns (uint256) {\n', '        return sales[_name].price;\n', '    }\n', '    function balance(address addr) public constant returns (uint256) {\n', '        return balances[addr];\n', '    }\n', '    function offer(string _name, uint256 _price, uint256 reserve, address referrer) onlyNameSeller(_name) auctionNotStarted(_name) deedValid(_name) ifNotPaused public {\n', '        require(_price == 0 || _price > reserve);\n', '        require(_price != 0 || reserve != 0);\n', '        Sale storage s = sales[_name];\n', '        s.reserve = reserve;\n', '        s.price = _price;\n', '        s.startReferrer = referrer;\n', '        Offer(msg.sender, _name, _price, reserve);\n', '    }\n', '    function cancel(string _name) onlyNameSeller(_name) auctionNotStarted(_name) deedValid(_name) ifNotPaused public {\n', '        delete sales[_name];\n', '        registrar.transfer(keccak256(_name), msg.sender);\n', '        Cancel(_name);\n', '    }\n', '    function buy(string _name, address bidReferrer) canBuy(_name) deedValid(_name) ifNotPaused public payable {\n', '        Sale storage s = sales[_name];\n', '        require(msg.value >= s.price);\n', '        require(s.auctionStarted == 0);\n', '        Deed deed;\n', '        (,deed,,,) = registrar.entries(keccak256(_name));\n', '        address previousOwner = deed.previousOwner();\n', '        registrar.transfer(keccak256(_name), msg.sender);\n', '        Transfer(previousOwner, msg.sender, _name, msg.value);\n', '        distributeFunds(msg.value, previousOwner, s.startReferrer, bidReferrer);\n', '        delete sales[_name];\n', '        withdraw();\n', '    }\n', '    function bid(string _name, address bidReferrer) canBid(_name) deedValid(_name) ifNotPaused public payable {\n', '        require(msg.value >= minimumBid(_name));\n', '        Sale storage s = sales[_name];\n', '        require(s.auctionStarted == 0 || now < s.auctionEnds);\n', '        if (s.auctionStarted == 0) {\n', '          s.auctionStarted = now;\n', '        } else {\n', '          balances[s.lastBidder] = balances[s.lastBidder].add(s.lastBid);\n', '        }\n', '        s.lastBidder = msg.sender;\n', '        s.lastBid = msg.value;\n', '        s.auctionEnds = now.add(AUCTION_DURATION);\n', '        s.bidReferrer = bidReferrer;\n', '        Bid(msg.sender, _name, msg.value);\n', '        withdraw();\n', '    }\n', '    function finish(string _name) deedValid(_name) ifNotPaused public {\n', '        Sale storage s = sales[_name];\n', '        require(now > s.auctionEnds);\n', '        Deed deed;\n', '        (,deed,,,) = registrar.entries(keccak256(_name));\n', '        address previousOwner = deed.previousOwner();\n', '        registrar.transfer(keccak256(_name), s.lastBidder);\n', '        Transfer(previousOwner, s.lastBidder, _name, s.lastBid);\n', '        distributeFunds(s.lastBid, previousOwner, s.startReferrer, s.bidReferrer);\n', '        delete sales[_name];\n', '        withdraw();\n', '    }\n', '    function withdraw() ifNotPaused public {\n', '        uint256 amount = balances[msg.sender];\n', '        if (amount > 0) {\n', '            balances[msg.sender] = 0;\n', '            msg.sender.transfer(amount);\n', '            Withdraw(msg.sender, amount);\n', '        }\n', '    }\n', '    function invalidate(string _name) ifNotPaused public {\n', '        address deed;\n', '        (,deed,,,) = registrar.entries(keccak256(_name));\n', '        require(deed == 0);\n', '        Sale storage s = sales[_name];\n', '        balances[s.lastBidder] = balances[s.lastBidder].add(s.lastBid);\n', '        delete sales[_name];\n', '        Cancel(_name);\n', '        withdraw();\n', '    }\n', '    function distributeFunds(uint256 amount, address seller, address startReferrer, address bidReferrer) internal {\n', '        uint256 startReferrerFunds = amount.mul(START_REFERRER_SALE_PERCENTAGE).div(100);\n', '        balances[startReferrer] = balances[startReferrer].add(startReferrerFunds);\n', '        uint256 bidReferrerFunds = amount.mul(BID_REFERRER_SALE_PERCENTAGE).div(100);\n', '        balances[bidReferrer] = balances[bidReferrer].add(bidReferrerFunds);\n', '        uint256 sellerFunds = amount.sub(startReferrerFunds).sub(bidReferrerFunds);\n', '        balances[seller] = balances[seller].add(sellerFunds);\n', '    }\n', '}']