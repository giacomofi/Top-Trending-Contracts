['/**\n', ' * ERC-20 Standard Token Smart Contract implementation.\n', ' * \n', ' * Copyright &#169; 2017 by Hive Project Ltd.\n', ' *\n', ' * Licensed under the Apache License, Version 2.0 (the "License").\n', ' * You may not use this file except in compliance with the License.\n', ' *\n', ' * Unless required by applicable law or agreed to in writing, software\n', ' * distributed under the License is distributed on an "AS IS" BASIS,\n', ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND (express or implied).\n', ' */\n', '\n', 'pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * ERC-20 Standard Token Smart Contract Interface.\n', ' *\n', ' * Copyright &#169; 2017 by Hive Project Ltd.\n', ' *\n', ' * Licensed under the Apache License, Version 2.0 (the "License").\n', ' * You may not use this file except in compliance with the License.\n', ' *\n', ' * Unless required by applicable law or agreed to in writing, software\n', ' * distributed under the License is distributed on an "AS IS" BASIS,\n', ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND (express or implied).\n', ' */\n', '\n', '\n', '/**\n', ' * ERC-20 standard token interface, as defined\n', ' * <a href="http://github.com/ethereum/EIPs/issues/20">here</a>.\n', ' */\n', 'contract ERC20Interface {\n', '  /**\n', '   * Get total number of tokens in circulation.\n', '   */\n', '  uint256 public totalSupply;\n', '\n', '  /**\n', '   * @dev Get number of tokens currently belonging to given owner.\n', '   *\n', '   * @param _owner address to get number of tokens currently belonging to the\n', '   *         owner of\n', '   * @return number of tokens currently belonging to the owner of given address\n', '   */\n', '  function balanceOf (address _owner) constant returns (uint256 balance);\n', '\n', '  /**\n', '   * @dev Transfer given number of tokens from message sender to given recipient.\n', '   *\n', '   * @param _to address to transfer tokens to the owner of\n', '   * @param _value number of tokens to transfer to the owner of given address\n', '   * @return true if tokens were transferred successfully, false otherwise\n', '   */\n', '  function transfer (address _to, uint256 _value) returns (bool success);\n', '\n', '  /**\n', '   * @dev Transfer given number of tokens from given owner to given recipient.\n', '   *\n', '   * @param _from address to transfer tokens from the owner of\n', '   * @param _to address to transfer tokens to the owner of\n', '   * @param _value number of tokens to transfer from given owner to given\n', '   *         recipient\n', '   * @return true if tokens were transferred successfully, false otherwise\n', '   */\n', '  function transferFrom (address _from, address _to, uint256 _value)\n', '  returns (bool success);\n', '\n', '  /**\n', '   * @dev Allow given spender to transfer given number of tokens from message sender.\n', '   *\n', '   * @param _spender address to allow the owner of to transfer tokens from\n', '   *         message sender\n', '   * @param _value number of tokens to allow to transfer\n', '   * @return true if token transfer was successfully approved, false otherwise\n', '   */\n', '  function approve (address _spender, uint256 _value) returns (bool success);\n', '\n', '  /**\n', '   * @dev Tell how many tokens given spender is currently allowed to transfer from\n', '   * given owner.\n', '   *\n', '   * @param _owner address to get number of tokens allowed to be transferred\n', '   *        from the owner of\n', '   * @param _spender address to get number of tokens allowed to be transferred\n', '   *        by the owner of\n', '   * @return number of tokens given spender is currently allowed to transfer\n', '   *         from given owner\n', '   */\n', '  function allowance (address _owner, address _spender) constant\n', '  returns (uint256 remaining);\n', '\n', '  /**\n', '   * @dev Logged when tokens were transferred from one owner to another.\n', '   *\n', '   * @param _from address of the owner, tokens were transferred from\n', '   * @param _to address of the owner, tokens were transferred to\n', '   * @param _value number of tokens transferred\n', '   */\n', '  event Transfer (address indexed _from, address indexed _to, uint256 _value);\n', '\n', '  /**\n', '   * @dev Logged when owner approved his tokens to be transferred by some spender.\n', '   *\n', '   * @param _owner owner who approved his tokens to be transferred\n', '   * @param _spender spender who were allowed to transfer the tokens belonging\n', '   *        to the owner\n', '   * @param _value number of tokens belonging to the owner, approved to be\n', '   *        transferred by the spender\n', '   */\n', '  event Approval (\n', '    address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    function Owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier ownerOnly {\n', '        assert(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership. New owner has to accept in order ownership change to take effect\n', '     */\n', '    function transferOwnership(address _newOwner) public ownerOnly {\n', '        require(_newOwner != owner);\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    /**\n', '     * @dev Accepts transferred ownership\n', '     */\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        OwnerUpdate(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = 0x0;\n', '    }\n', '\n', '    event OwnerUpdate(address _prevOwner, address _newOwner);\n', '}\n', '\n', '/**\n', ' * Safe Math Smart Contract.  \n', ' * \n', ' * Copyright &#169; 2017 by Hive Project Ltd.\n', ' *\n', ' * Licensed under the Apache License, Version 2.0 (the "License").\n', ' * You may not use this file except in compliance with the License.\n', ' *\n', ' * Unless required by applicable law or agreed to in writing, software\n', ' * distributed under the License is distributed on an "AS IS" BASIS,\n', ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND (express or implied).\n', ' */\n', ' \n', '\n', '/**\n', ' * Provides methods to safely add, subtract and multiply uint256 numbers.\n', ' */\n', 'contract SafeMath {\n', ' \n', '  /**\n', '   * @dev Add two uint256 values, throw in case of overflow.\n', '   *\n', '   * @param a first value to add\n', '   * @param b second value to add\n', '   * @return x + y\n', '   */\n', '    function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '  /**\n', '   * @dev Subtract one uint256 value from another, throw in case of underflow.\n', '   *\n', '   * @param a value to subtract from\n', '   * @param b value to subtract\n', '   * @return a - b\n', '   */\n', '    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '\n', '  /**\n', '   * @dev Multiply two uint256 values, throw in case of overflow.\n', '   *\n', '   * @param a first value to multiply\n', '   * @param b second value to multiply\n', '   * @return c = a * b\n', '   */\n', '    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', ' /**\n', '   * @dev Divide two uint256 values, throw in case of overflow.\n', '   *\n', '   * @param a first value to divide\n', '   * @param b second value to divide\n', '   * @return c = a / b\n', '   */\n', '        function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '}\n', '\n', '/*\n', ' * TokenRecepient\n', ' *\n', ' * Copyright &#169; 2017 by Hive Project Ltd.\n', ' *\n', ' * Licensed under the Apache License, Version 2.0 (the "License").\n', ' * You may not use this file except in compliance with the License.\n', ' *\n', ' * Unless required by applicable law or agreed to in writing, software\n', ' * distributed under the License is distributed on an "AS IS" BASIS,\n', ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND (express or implied).\n', ' */\n', '\n', '\n', 'contract TokenRecipient {\n', '    /**\n', '     * receive approval\n', '     */\n', '    function receiveApproval(address _from, uint256 _value, address _to, bytes _extraData);\n', '}\n', '\n', '/**\n', ' * Standard Token Smart Contract that implements ERC-20 token interface\n', ' */\n', 'contract HVNToken is ERC20Interface, SafeMath, Owned {\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    string public constant name = "Hive Project Token";\n', '    string public constant symbol = "HVN";\n', '    uint8 public constant decimals = 8;\n', '    string public version = &#39;0.0.2&#39;;\n', '\n', '    bool public transfersFrozen = false;\n', '\n', '    /**\n', '     * Protection against short address attack\n', '     */\n', '    modifier onlyPayloadSize(uint numwords) {\n', '        assert(msg.data.length == numwords * 32 + 4);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Check if transfers are on hold - frozen\n', '     */\n', '    modifier whenNotFrozen(){\n', '        if (transfersFrozen) revert();\n', '        _;\n', '    }\n', '\n', '\n', '    function HVNToken() ownerOnly {\n', '        totalSupply = 50000000000000000;\n', '        balances[owner] = totalSupply;\n', '    }\n', '\n', '\n', '    /**\n', '     * Freeze token transfers.\n', '     */\n', '    function freezeTransfers () ownerOnly {\n', '        if (!transfersFrozen) {\n', '            transfersFrozen = true;\n', '            Freeze (msg.sender);\n', '        }\n', '    }\n', '\n', '\n', '    /**\n', '     * Unfreeze token transfers.\n', '     */\n', '    function unfreezeTransfers () ownerOnly {\n', '        if (transfersFrozen) {\n', '            transfersFrozen = false;\n', '            Unfreeze (msg.sender);\n', '        }\n', '    }\n', '\n', '\n', '    /**\n', '     * Transfer sender&#39;s tokens to a given address\n', '     */\n', '    function transfer(address _to, uint256 _value) whenNotFrozen onlyPayloadSize(2) returns (bool success) {\n', '        require(_to != 0x0);\n', '\n', '        balances[msg.sender] = sub(balances[msg.sender], _value);\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * Transfer _from&#39;s tokens to _to&#39;s address\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) whenNotFrozen onlyPayloadSize(3) returns (bool success) {\n', '        require(_to != 0x0);\n', '        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n', '\n', '        balances[_from] = sub(balances[_from], _value);\n', '        balances[_to] += _value;\n', '        allowed[_from][msg.sender] = sub(allowed[_from][msg.sender], _value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * Returns number of tokens owned by given address.\n', '     */\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '\n', '    /**\n', '     * Sets approved amount of tokens for spender.\n', '     */\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        require(_value == 0 || allowed[msg.sender][_spender] == 0);\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * Approve and then communicate the approved contract in a single transaction\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        TokenRecipient spender = TokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '\n', '    /**\n', '     * Returns number of allowed tokens for given address.\n', '     */\n', '    function allowance(address _owner, address _spender) onlyPayloadSize(2) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '\n', '    /**\n', '     * Peterson&#39;s Law Protection\n', '     * Claim tokens\n', '     */\n', '    function claimTokens(address _token) ownerOnly {\n', '        if (_token == 0x0) {\n', '            owner.transfer(this.balance);\n', '            return;\n', '        }\n', '\n', '        HVNToken token = HVNToken(_token);\n', '        uint balance = token.balanceOf(this);\n', '        token.transfer(owner, balance);\n', '\n', '        Transfer(_token, owner, balance);\n', '    }\n', '\n', '\n', '    event Freeze (address indexed owner);\n', '    event Unfreeze (address indexed owner);\n', '}']