['pragma solidity ^0.4.11;\n', '\n', '/*\n', '\n', 'Bancor Buyer\n', '========================\n', '\n', 'Buys Bancor tokens from the crowdsale on your behalf.\n', 'Author: /u/Cintix\n', '\n', '*/\n', '\n', '// ERC20 Interface: https://github.com/ethereum/EIPs/issues/20\n', 'contract ERC20 {\n', '  function transfer(address _to, uint _value) returns (bool success);\n', '}\n', '\n', '// Interface to Bancor ICO Contract\n', 'contract CrowdsaleController {\n', '  function contributeETH() payable returns (uint256 amount);\n', '}\n', '\n', 'contract BancorBuyer {\n', '  // Store the amount of ETH deposited or BNT owned by each account.\n', '  mapping (address => uint) public balances;\n', '  // Reward for first to execute the buy.\n', '  uint public reward;\n', '  // Track whether the contract has bought the tokens yet.\n', '  bool public bought_tokens;\n', '  // Record the time the contract bought the tokens.\n', '  uint public time_bought;\n', '\n', '  // The Bancor Token Sale address.\n', '  address sale = 0xBbc79794599b19274850492394004087cBf89710;\n', '  // Bancor Smart Token Contract address.\n', '  address token = 0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C;\n', '  // The developer address.\n', '  address developer = 0x4e6A1c57CdBfd97e8efe831f8f4418b1F2A09e6e;\n', '  \n', '  // Withdraws all ETH deposited by the sender.\n', "  // Called to cancel a user's participation in the sale.\n", '  function withdraw(){\n', "    // Store the user's balance prior to withdrawal in a temporary variable.\n", '    uint amount = balances[msg.sender];\n', "    // Update the user's balance prior to sending ETH to prevent recursive call.\n", '    balances[msg.sender] = 0;\n', "    // Return the user's funds.  Throws on failure to prevent loss of funds.\n", '    msg.sender.transfer(amount);\n', '  }\n', '  \n', "  // Allow anyone to contribute to the buy executer's reward.\n", '  function add_reward() payable {\n', '    // Update reward value to include received amount.\n', '    reward += msg.value;\n', '  }\n', '  \n', '  // Buys tokens in the crowdsale and rewards the caller, callable by anyone.\n', '  function buy(){\n', '    // Record that the contract has bought the tokens.\n', '    bought_tokens = true;\n', '    // Record the time the contract bought the tokens.\n', '    time_bought = now;\n', '    // Transfer all the funds (less the caller reward) \n', '    // to the Bancor crowdsale contract to buy tokens.\n', "    // Throws if the crowdsale hasn't started yet or has\n", '    // already completed, preventing loss of funds.\n', '    CrowdsaleController(sale).contributeETH.value(this.balance - reward)();\n', '    // Reward the caller for being the first to execute the buy.\n', '    msg.sender.transfer(reward);\n', '  }\n', '  \n', '  // A helper function for the default function, allowing contracts to interact.\n', '  function default_helper() payable {\n', "    // Only allow deposits if the contract hasn't already purchased the tokens.\n", '    if (!bought_tokens) {\n', '      // Update records of deposited ETH to include the received amount.\n', '      balances[msg.sender] += msg.value;\n', '    }\n', "    // Withdraw the sender's tokens if the contract has already purchased them.\n", '    else {\n', "      // Store the user's BNT balance in a temporary variable (1 ETHWei -> 100 BNTWei).\n", '      uint amount = balances[msg.sender] * 100;\n', "      // Update the user's balance prior to sending BNT to prevent recursive call.\n", '      balances[msg.sender] = 0;\n', '      // No fee for withdrawing during the crowdsale.\n', '      uint fee = 0;\n', '      // 1% fee for withdrawing after the crowdsale has ended.\n', '      if (now > time_bought + 1 hours) {\n', '        fee = amount / 100;\n', '      }\n', '      // Transfer the tokens to the sender and the developer.\n', '      ERC20(token).transfer(msg.sender, amount - fee);\n', '      ERC20(token).transfer(developer, fee);\n', '      // Refund any ETH sent after the contract has already purchased tokens.\n', '      msg.sender.transfer(msg.value);\n', '    }\n', '  }\n', '  \n', '  function () payable {\n', '    default_helper();\n', '  }\n', '}']