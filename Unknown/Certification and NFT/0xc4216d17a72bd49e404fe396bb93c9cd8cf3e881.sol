['contract AmIOnTheFork {\n', '    function forked() constant returns(bool);\n', '}\n', '\n', 'contract Owned{\n', '\n', '    //Address of owner\n', '    address Owner;\n', '\n', '    //Add modifier\n', '    modifier OnlyOwner{\n', '        if(msg.sender != Owner){\n', '            throw;\n', '        }\n', '        _\n', '    }\n', '\n', '    //Contruction function\n', '    function Owned(){\n', '        Owner = msg.sender;\n', '    }\n', '\n', '}\n', '\n', '//Ethereum Safely Transfer Contract\n', '//https://github.com/etcrelay/ether-transfer\n', 'contract EtherTransfer is Owned{\n', '\n', '    //"If you are good at something, never do it for free" - Joker\n', "    //Fee is 0.1% (it's mean you send 1 ETH fee is 0.001 ETH)\n", '    //Notice Fee is not include transaction fee\n', '    uint constant Fee = 1;\n', '    uint constant Decs = 1000;\n', '\n', '    bool public IsEthereum = false; \n', '\n', '    //Events log\n', '    event ETHTransfer(address indexed From,address indexed To, uint Value);\n', '    event ETCReturn(address indexed Return, uint Value);\n', '\n', '    event ETCTransfer(address indexed From,address indexed To, uint Value);\n', '    event ETHReturn(address indexed Return, uint Value);\n', '    \n', '    //Is Vitalik Buterin on the Fork ? >_<\n', '    AmIOnTheFork IsHeOnTheFork = AmIOnTheFork(0x2bd2326c993dfaef84f696526064ff22eba5b362);\n', '\n', '    //Construction function\n', '    function EtherTransfer(){\n', '        IsEthereum = IsHeOnTheFork.forked();\n', '    }\n', '\n', '    //Only send ETH\n', '    function SendETH(address ETHAddress) returns(bool){\n', '        uint Value = msg.value - (msg.value*Fee/Decs);\n', '        //It is forked chain ETH\n', '        if(IsEthereum && ETHAddress.send(Value)){\n', '            ETHTransfer(msg.sender, ETHAddress, Value);\n', '            return true;\n', '        }else if(!IsEthereum && msg.sender.send(msg.value)){\n', '            ETCReturn(msg.sender, msg.value);\n', '            return true;\n', '        }\n', '        //No ETC is trapped\n', '        throw;\n', '    }\n', '\n', '    //Only send ETC\n', '    function SendETC(address ETCAddress) returns(bool){\n', '        uint Value = msg.value - (msg.value*Fee/Decs);\n', '        //It is non-forked chain ETC\n', '        if(!IsEthereum && ETCAddress.send(Value)){\n', '            ETCTransfer(msg.sender, ETCAddress, Value);\n', '            return true;\n', '        } else if(IsEthereum && msg.sender.send(msg.value)){\n', '            ETHReturn(msg.sender, msg.value);\n', '            return true;\n', '        }\n', '        //No ETH is trapped\n', '        throw;\n', '    }\n', '\n', '    //Protect user from ETC/ETH trapped\n', '    function (){\n', '        throw;\n', '    }\n', '\n', '    //I get rich lol, ez\n', '    function WithDraw() OnlyOwner returns(bool){\n', '        if(this.balance > 0 && Owner.send(this.balance)){\n', '            return true;\n', '        }\n', '        throw;\n', '    }\n', '\n', '}']