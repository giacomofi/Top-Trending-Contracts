['pragma solidity ^0.4.11;\n', '\n', 'contract SimpleAuction {\n', '    // \n', '    // This is an auction where UNICEF is the beneficiary \n', '    //\n', '    // The highest bidder of this auction is entiteled to Poster Number one of the worlds first Ehtereum funded movie The-Pitt-Circus Movie. \n', '    // The Poster is a limited editions serigraphy (numbered and signed by the artist).\n', '    // To claim the poster the highest bidder can get in touch with the-pitts-circus.com or send the address an data-field transation to the contract of the beneficiary = 0xb23397f97715118532c8c1207F5678Ed4FbaEA6c after the auction has ended\n', '    // \n', '    // \n', '    //\n', '    //Parameters of the auction. Times are either\n', '    // absolute unix timestamps (seconds since 1970-01-01)\n', '    // or time periods in seconds.\n', '    // \n', '  \t\n', '    uint public auctionStart;\n', '    uint public biddingTime;\n', '\n', '    // Current state of the auction.\n', '    address public highestBidder;\n', '    uint public highestBid;\n', '\n', '    // Allowed withdrawals of previous bids\n', '    mapping(address => uint) pendingReturns;\n', '\n', '    // Set to true at the end, disallows any change\n', '    bool ended;\n', '\n', '    // Events that will be fired on changes.\n', '    event HighestBidIncreased(address bidder, uint amount);\n', '    event AuctionEnded(address winner, uint amount);\n', '\n', '    // The following is a so-called natspec comment,\n', '    // recognizable by the three slashes.\n', '    // It will be shown when the user is asked to\n', '    // confirm a transaction.\n', '\n', '    /// Create a simple auction with `_biddingTime`\n', '    /// seconds bidding time on behalf of the\n', '    /// beneficiary address `_beneficiary`.\n', '    \n', '    address _beneficiary = 0xb23397f97715118532c8c1207F5678Ed4FbaEA6c;\n', '\t// UNICEF Multisig Wallet according to:\n', '\t// unicefstories.org/2017/08/04/unicef-ventures-exploring-smart-contracts/\n', '\taddress beneficiary;\n', '    \n', '    function SimpleAuction() {\n', '        beneficiary = _beneficiary;\n', '        auctionStart = now;\n', '        biddingTime = 2587587;\n', '    }\n', '\n', '    /// Bid on the auction with the value sent\n', '    /// together with this transaction.\n', '    /// The value will only be refunded if the\n', '    /// auction is not won.\n', '    function bid() payable {\n', '        // No arguments are necessary, all\n', '        // information is already part of\n', '        // the transaction. The keyword payable\n', '        // is required for the function to\n', '        // be able to receive Ether.\n', '\n', '        // Revert the call if the bidding\n', '        // period is over.\n', '        require(now <= (auctionStart + biddingTime));\n', '\n', '        // If the bid is not higher, send the\n', '        // money back.\n', '        require(msg.value > highestBid);\n', '\n', '        if (highestBidder != 0) {\n', '            // Sending back the money by simply using\n', '            // highestBidder.send(highestBid) is a security risk\n', '            // because it can be prevented by the caller by e.g.\n', '            // raising the call stack to 1023. It is always safer\n', '            // to let the recipients withdraw their money themselves.\n', '            pendingReturns[highestBidder] += highestBid;\n', '        }\n', '        highestBidder = msg.sender;\n', '        highestBid = msg.value;\n', '        HighestBidIncreased(msg.sender, msg.value);\n', '    }\n', '\n', '    /// Withdraw a bid that was overbid.\n', '    function withdraw() returns (bool) {\n', '        uint amount = pendingReturns[msg.sender];\n', '        if (amount > 0) {\n', '            // It is important to set this to zero because the recipient\n', '            // can call this function again as part of the receiving call\n', '            // before `send` returns.\n', '            pendingReturns[msg.sender] = 0;\n', '\n', '            if (!msg.sender.send(amount)) {\n', '                // No need to call throw here, just reset the amount owing\n', '                pendingReturns[msg.sender] = amount;\n', '                return false;\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '    // Users want to know when the auction ends, seconds from 1970-01-01\n', '    function auctionEndTime() constant returns (uint256) {\n', '        return auctionStart + biddingTime;\n', '    }\n', '    \n', '    /// End the auction and send the highest bid\n', '    /// to the beneficiary.\n', '    function auctionEnd() {\n', '        // It is a good guideline to structure functions that interact\n', '        // with other contracts (i.e. they call functions or send Ether)\n', '        // into three phases:\n', '        // 1. checking conditions\n', '        // 2. performing actions (potentially changing conditions)\n', '        // 3. interacting with other contracts\n', '        // If these phases are mixed up, the other contract could call\n', '        // back into the current contract and modify the state or cause\n', '        // effects (ether payout) to be performed multiple times.\n', '        // If functions called internally include interaction with external\n', '        // contracts, they also have to be considered interaction with\n', '        // external contracts.\n', '\n', '        // 1. Conditions\n', '        require(now >= (auctionStart + biddingTime)); // auction did not yet end\n', '        require(!ended); // this function has already been called\n', '\n', '        // 2. Effects\n', '        ended = true;\n', '        AuctionEnded(highestBidder, highestBid);\n', '\n', '        // 3. Interaction\n', '        beneficiary.transfer(highestBid);\n', '    }\n', '}']
['pragma solidity ^0.4.11;\n', '\n', 'contract SimpleAuction {\n', '    // \n', '    // This is an auction where UNICEF is the beneficiary \n', '    //\n', '    // The highest bidder of this auction is entiteled to Poster Number one of the worlds first Ehtereum funded movie The-Pitt-Circus Movie. \n', '    // The Poster is a limited editions serigraphy (numbered and signed by the artist).\n', '    // To claim the poster the highest bidder can get in touch with the-pitts-circus.com or send the address an data-field transation to the contract of the beneficiary = 0xb23397f97715118532c8c1207F5678Ed4FbaEA6c after the auction has ended\n', '    // \n', '    // \n', '    //\n', '    //Parameters of the auction. Times are either\n', '    // absolute unix timestamps (seconds since 1970-01-01)\n', '    // or time periods in seconds.\n', '    // \n', '  \t\n', '    uint public auctionStart;\n', '    uint public biddingTime;\n', '\n', '    // Current state of the auction.\n', '    address public highestBidder;\n', '    uint public highestBid;\n', '\n', '    // Allowed withdrawals of previous bids\n', '    mapping(address => uint) pendingReturns;\n', '\n', '    // Set to true at the end, disallows any change\n', '    bool ended;\n', '\n', '    // Events that will be fired on changes.\n', '    event HighestBidIncreased(address bidder, uint amount);\n', '    event AuctionEnded(address winner, uint amount);\n', '\n', '    // The following is a so-called natspec comment,\n', '    // recognizable by the three slashes.\n', '    // It will be shown when the user is asked to\n', '    // confirm a transaction.\n', '\n', '    /// Create a simple auction with `_biddingTime`\n', '    /// seconds bidding time on behalf of the\n', '    /// beneficiary address `_beneficiary`.\n', '    \n', '    address _beneficiary = 0xb23397f97715118532c8c1207F5678Ed4FbaEA6c;\n', '\t// UNICEF Multisig Wallet according to:\n', '\t// unicefstories.org/2017/08/04/unicef-ventures-exploring-smart-contracts/\n', '\taddress beneficiary;\n', '    \n', '    function SimpleAuction() {\n', '        beneficiary = _beneficiary;\n', '        auctionStart = now;\n', '        biddingTime = 2587587;\n', '    }\n', '\n', '    /// Bid on the auction with the value sent\n', '    /// together with this transaction.\n', '    /// The value will only be refunded if the\n', '    /// auction is not won.\n', '    function bid() payable {\n', '        // No arguments are necessary, all\n', '        // information is already part of\n', '        // the transaction. The keyword payable\n', '        // is required for the function to\n', '        // be able to receive Ether.\n', '\n', '        // Revert the call if the bidding\n', '        // period is over.\n', '        require(now <= (auctionStart + biddingTime));\n', '\n', '        // If the bid is not higher, send the\n', '        // money back.\n', '        require(msg.value > highestBid);\n', '\n', '        if (highestBidder != 0) {\n', '            // Sending back the money by simply using\n', '            // highestBidder.send(highestBid) is a security risk\n', '            // because it can be prevented by the caller by e.g.\n', '            // raising the call stack to 1023. It is always safer\n', '            // to let the recipients withdraw their money themselves.\n', '            pendingReturns[highestBidder] += highestBid;\n', '        }\n', '        highestBidder = msg.sender;\n', '        highestBid = msg.value;\n', '        HighestBidIncreased(msg.sender, msg.value);\n', '    }\n', '\n', '    /// Withdraw a bid that was overbid.\n', '    function withdraw() returns (bool) {\n', '        uint amount = pendingReturns[msg.sender];\n', '        if (amount > 0) {\n', '            // It is important to set this to zero because the recipient\n', '            // can call this function again as part of the receiving call\n', '            // before `send` returns.\n', '            pendingReturns[msg.sender] = 0;\n', '\n', '            if (!msg.sender.send(amount)) {\n', '                // No need to call throw here, just reset the amount owing\n', '                pendingReturns[msg.sender] = amount;\n', '                return false;\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '    // Users want to know when the auction ends, seconds from 1970-01-01\n', '    function auctionEndTime() constant returns (uint256) {\n', '        return auctionStart + biddingTime;\n', '    }\n', '    \n', '    /// End the auction and send the highest bid\n', '    /// to the beneficiary.\n', '    function auctionEnd() {\n', '        // It is a good guideline to structure functions that interact\n', '        // with other contracts (i.e. they call functions or send Ether)\n', '        // into three phases:\n', '        // 1. checking conditions\n', '        // 2. performing actions (potentially changing conditions)\n', '        // 3. interacting with other contracts\n', '        // If these phases are mixed up, the other contract could call\n', '        // back into the current contract and modify the state or cause\n', '        // effects (ether payout) to be performed multiple times.\n', '        // If functions called internally include interaction with external\n', '        // contracts, they also have to be considered interaction with\n', '        // external contracts.\n', '\n', '        // 1. Conditions\n', '        require(now >= (auctionStart + biddingTime)); // auction did not yet end\n', '        require(!ended); // this function has already been called\n', '\n', '        // 2. Effects\n', '        ended = true;\n', '        AuctionEnded(highestBidder, highestBid);\n', '\n', '        // 3. Interaction\n', '        beneficiary.transfer(highestBid);\n', '    }\n', '}']
