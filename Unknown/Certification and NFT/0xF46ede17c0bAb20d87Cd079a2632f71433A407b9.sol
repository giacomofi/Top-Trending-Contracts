['pragma solidity ^0.4.11;\n', '\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    assert(b > 0);\n', '    uint c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      throw;\n', '    }\n', '  }\n', '}\n', '\n', 'contract PreICO {\n', '  function balanceOf(address _owner) constant returns (uint256);\n', '  function burnTokens(address _owner);\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) constant returns (uint);\n', '  function transfer(address to, uint value);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint);\n', '  function transferFrom(address from, address to, uint value);\n', '  function approve(address spender, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint;\n', '\n', '  mapping(address => uint) balances;\n', '\n', '  /*\n', '   * Fix for the ERC20 short address attack  \n', '   */\n', '  modifier onlyPayloadSize(uint size) {\n', '     if(msg.data.length < size + 4) {\n', '       throw;\n', '     }\n', '     _;\n', '  }\n', '\n', '  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '  }\n', '\n', '  function balanceOf(address _owner) constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '  \n', '}\n', '\n', 'contract StandardToken is BasicToken, ERC20 {\n', '\n', '  mapping (address => mapping (address => uint)) allowed;\n', '\n', '  function transferFrom(address _from, address _to, uint _value) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // if (_value > _allowance) throw;\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint _value) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', 'contract ATL is StandardToken {\n', '\n', '  string public name = "ATLANT Token";\n', '  string public symbol = "ATL";\n', '  uint public decimals = 18;\n', '  uint constant TOKEN_LIMIT = 150 * 1e6 * 1e18;\n', '\n', '  address public ico;\n', '\n', '  bool public tokensAreFrozen = true;\n', '\n', '  function ATL(address _ico) {\n', '    ico = _ico;\n', '  }\n', '\n', '  function mint(address _holder, uint _value) external {\n', '    require(msg.sender == ico);\n', '    require(_value != 0);\n', '    require(totalSupply + _value <= TOKEN_LIMIT);\n', '\n', '    balances[_holder] += _value;\n', '    totalSupply += _value;\n', '    Transfer(0x0, _holder, _value);\n', '  }\n', '\n', '  function unfreeze() external {\n', '    require(msg.sender == ico);\n', '    tokensAreFrozen = false;\n', '  }\n', '\n', '  function transfer(address _to, uint _value) public {\n', '    require(!tokensAreFrozen);\n', '    super.transfer(_to, _value);\n', '  }\n', '\n', '\n', '  function transferFrom(address _from, address _to, uint _value) public {\n', '    require(!tokensAreFrozen);\n', '    super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '\n', '  function approve(address _spender, uint _value) public {\n', '    require(!tokensAreFrozen);\n', '    super.approve(_spender, _value);\n', '  }\n', '}\n', '\n', 'contract ICO {\n', '\n', '  uint public constant MIN_TOKEN_PRICE = 425; // min atl per ETH\n', '  uint public constant TOKENS_FOR_SALE = 103548812 * 1e18;\n', '  uint public constant ATL_PER_ATP = 2; // Migration rate\n', '\n', '  event Buy(address holder, uint atlValue);\n', '  event ForeignBuy(address holder, uint atlValue, string txHash);\n', '  event Migrate(address holder, uint atlValue);\n', '  event RunIco();\n', '  event PauseIco();\n', '  event FinishIco(address teamFund, address bountyFund);\n', '\n', '  PreICO preICO;\n', '  ATL public atl;\n', '\n', '  address public team;\n', '  address public tradeRobot;\n', '  modifier teamOnly { require(msg.sender == team); _; }\n', '  modifier robotOnly { require(msg.sender == tradeRobot); _; }\n', '\n', '  uint public tokensSold = 0;\n', '\n', '  enum IcoState { Created, Running, Paused, Finished }\n', '  IcoState icoState = IcoState.Created;\n', '\n', '\n', '  function ICO(address _team, address _preICO, address _tradeRobot) {\n', '    atl = new ATL(this);\n', '    preICO = PreICO(_preICO);\n', '    team = _team;\n', '    tradeRobot = _tradeRobot;\n', '  }\n', '\n', '\n', '  function() external payable {\n', '    buyFor(msg.sender);\n', '  }\n', '\n', '\n', '  function buyFor(address _investor) public payable {\n', '    require(icoState == IcoState.Running);\n', '    require(msg.value > 0);\n', '    uint _total = buy(_investor, msg.value * MIN_TOKEN_PRICE);\n', '    Buy(_investor, _total);\n', '  }\n', '\n', '\n', '  function getBonus(uint _value, uint _sold)\n', '    public constant returns (uint)\n', '  {\n', '    uint[8] memory _bonusPricePattern = [ 505, 495, 485, 475, 465, 455, 445, uint(435) ];\n', '    uint _step = TOKENS_FOR_SALE / 10;\n', '    uint _bonus = 0;\n', '\n', '    for (uint8 i = 0; _value > 0 && i < _bonusPricePattern.length; ++i) {\n', '      uint _min = _step * i;\n', '      uint _max = _step * (i+1);\n', '\n', '      if (_sold >= _min && _sold < _max) {\n', '        uint bonusedPart = min(_value, _max - _sold);\n', '        _bonus += bonusedPart * _bonusPricePattern[i] / MIN_TOKEN_PRICE - bonusedPart;\n', '        _value -= bonusedPart;\n', '        _sold += bonusedPart;\n', '      }\n', '    }\n', '\n', '    return _bonus;\n', '  }\n', '\n', '  function foreignBuy(address _investor, uint _atlValue, string _txHash)\n', '    external robotOnly\n', '  {\n', '    require(icoState == IcoState.Running);\n', '    require(_atlValue > 0);\n', '    uint _total = buy(_investor, _atlValue);\n', '    ForeignBuy(_investor, _total, _txHash);\n', '  }\n', '\n', '\n', '  function setRobot(address _robot) external teamOnly {\n', '    tradeRobot = _robot;\n', '  }\n', '\n', '\n', '  function migrateSome(address[] _investors) external robotOnly {\n', '    for (uint i = 0; i < _investors.length; i++)\n', '      doMigration(_investors[i]);\n', '  }\n', '\n', '\n', '  function startIco() external teamOnly {\n', '    require(icoState == IcoState.Created || icoState == IcoState.Paused);\n', '    icoState = IcoState.Running;\n', '    RunIco();\n', '  }\n', '\n', '\n', '  function pauseIco() external teamOnly {\n', '    require(icoState == IcoState.Running);\n', '    icoState = IcoState.Paused;\n', '    PauseIco();\n', '  }\n', '\n', '\n', '  function finishIco(\n', '    address _teamFund,\n', '    address _bountyFund\n', '  )\n', '    external teamOnly\n', '  {\n', '    require(icoState == IcoState.Running || icoState == IcoState.Paused);\n', '\n', '    atl.mint(_teamFund, 22500000 * 1e18);\n', '    atl.mint(_bountyFund, 18750000 * 1e18);\n', '    atl.unfreeze();\n', '\n', '    icoState = IcoState.Finished;\n', '    FinishIco(_teamFund, _bountyFund);\n', '  }\n', '\n', '\n', '  function withdrawEther(uint _value) external teamOnly {\n', '    team.transfer(_value);\n', '  }\n', '\n', '\n', '  function withdrawToken(address _tokenContract, uint _val) external teamOnly\n', '  {\n', '    ERC20 _tok = ERC20(_tokenContract);\n', '    _tok.transfer(team, _val);\n', '  }\n', '\n', '\n', '  function min(uint a, uint b) internal constant returns (uint) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '\n', '  function buy(address _investor, uint _atlValue) internal returns (uint) {\n', '    uint _bonus = getBonus(_atlValue, tokensSold);\n', '    uint _total = _atlValue + _bonus;\n', '\n', '    require(tokensSold + _total <= TOKENS_FOR_SALE);\n', '\n', '    atl.mint(_investor, _total);\n', '    tokensSold += _total;\n', '    return _total;\n', '  }\n', '\n', '\n', '  function doMigration(address _investor) internal {\n', '    uint _atpBalance = preICO.balanceOf(_investor);\n', '    require(_atpBalance > 0);\n', '\n', '    preICO.burnTokens(_investor);\n', '\n', '    uint _atlValue = _atpBalance * ATL_PER_ATP;\n', '    atl.mint(_investor, _atlValue);\n', '\n', '    Migrate(_investor, _atlValue);\n', '  }\n', '}']