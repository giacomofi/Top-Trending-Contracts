['// AP Ok - Recent version\n', 'pragma solidity ^0.4.13;\n', '\n', '// ----------------------------------------------------------------------------\n', '// Arenaplay Crowdsale Token Contract\n', '//\n', '// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd\n', '// The MIT Licence.\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths, borrowed from OpenZeppelin\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Add a number to another number, checking for overflows\n', '    // ------------------------------------------------------------------------\n', '    // AP Ok - Overflow protected\n', '    function add(uint a, uint b) internal returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a && c >= b);\n', '        return c;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Subtract a number from another number, checking for underflows\n', '    // ------------------------------------------------------------------------\n', '    // AP Ok - Underflow protected\n', '    function sub(uint a, uint b) internal returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    // AP Next 3 lines Ok\n', '    address public owner;\n', '    address public newOwner;\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    // AP Ok - Constructor assigns `owner` variable\n', '    function Owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    // AP Ok - Only owner can execute function\n', '    modifier onlyOwner {\n', '        // AP Ok - Could be replaced with `require(msg.sender == owner);`\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    // AP Ok - Propose ownership transfer\n', '    function transferOwnership(address _newOwner) onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', ' \n', '    // AP Ok - Accept ownership transfer\n', '    function acceptOwnership() {\n', '        if (msg.sender == newOwner) {\n', '            OwnershipTransferred(owner, newOwner);\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals\n', '// https://github.com/ethereum/EIPs/issues/20\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Token is Owned {\n', '    // AP Ok - For overflow and underflow protection\n', '    using SafeMath for uint;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total Supply\n', '    // ------------------------------------------------------------------------\n', '    // AP Ok\n', '    uint256 _totalSupply = 0;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Balances for each account\n', '    // ------------------------------------------------------------------------\n', '    // AP Ok\n', '    mapping(address => uint256) balances;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner of account approves the transfer of an amount to another account\n', '    // ------------------------------------------------------------------------\n', '    // AP Ok\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the total token supply\n', '    // ------------------------------------------------------------------------\n', '    // AP Ok\n', '    function totalSupply() constant returns (uint256 totalSupply) {\n', '        totalSupply = _totalSupply;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the account balance of another account with address _owner\n', '    // ------------------------------------------------------------------------\n', '    // AP Ok\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from owner's account to another account\n", '    // ------------------------------------------------------------------------\n', '    // AP NOTE - This function will return true/false instead of throwing an\n', '    //           error, as the conditions protect against overflows and \n', '    //           underflows\n', '    // AP NOTE - This function does not protect against the short address\n', '    //           bug, but the short address bug is more the responsibility\n', '    //           of automated processes checking the data sent to this function\n', '    function transfer(address _to, uint256 _amount) returns (bool success) {\n', '        // AP Ok - Account has sufficient balance to transfer\n', '        if (balances[msg.sender] >= _amount                // User has balance\n', '            // AP Ok - Non-zero amount\n', '            && _amount > 0                                 // Non-zero transfer\n', '            // AP Ok - Overflow protection\n', '            && balances[_to] + _amount > balances[_to]     // Overflow check\n', '        ) {\n', '            // AP Ok\n', '            balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '            // AP Ok\n', '            balances[_to] = balances[_to].add(_amount);\n', '            // AP Ok - Logging\n', '            Transfer(msg.sender, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Allow _spender to withdraw from your account, multiple times, up to the\n', '    // _value amount. If this function is called again it overwrites the\n', '    // current allowance with _value.\n', '    // ------------------------------------------------------------------------\n', '    // AP NOTE - This simpler method of `approve(...)` together with \n', '    //           `transferFrom(...)` can be used in the double spending attack, \n', '    //           but the risk is low, and can be mitigated by the user setting \n', '    //           the approval limit to 0 before changing the limit \n', '    function approve(\n', '        address _spender,\n', '        uint256 _amount\n', '    ) returns (bool success) {\n', '        // AP Ok\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Spender of tokens transfer an amount of tokens from the token owner's\n", "    // balance to the spender's account. The owner of the tokens must already\n", '    // have approve(...)-d this transfer\n', '    // ------------------------------------------------------------------------\n', '    // AP NOTE - This function will return true/false instead of throwing an\n', '    //           error, as the conditions protect against overflows and \n', '    //           underflows\n', '    // AP NOTE - This simpler method of `transferFrom(...)` together with \n', '    //           `approve(...)` can be used in the double spending attack, \n', '    //           but the risk is low, and can be mitigated by the user setting \n', '    //           the approval limit to 0 before changing the limit \n', '    // AP NOTE - This function does not protect against the short address\n', '    //           bug, but the short address bug is more the responsibility\n', '    //           of automated processes checking the data sent to this function\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', '    ) returns (bool success) {\n', '        // AP Ok - Account has sufficient balance to transfer\n', '        if (balances[_from] >= _amount                  // From a/c has balance\n', '            // AP Ok - Account is authorised to spend at least this amount\n', '            && allowed[_from][msg.sender] >= _amount    // Transfer approved\n', '            // AP Ok - Non-zero amount\n', '            && _amount > 0                              // Non-zero transfer\n', '            // AP Ok - Overflow protection\n', '            && balances[_to] + _amount > balances[_to]  // Overflow check\n', '        ) {\n', '            // AP Ok\n', '            balances[_from] = balances[_from].sub(_amount);\n', '            // AP Ok\n', '            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '            // AP Ok\n', '            balances[_to] = balances[_to].add(_amount);\n', '            // AP Ok\n', '            Transfer(_from, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    // ------------------------------------------------------------------------\n', '    // AP Ok\n', '    function allowance(\n', '        address _owner, \n', '        address _spender\n', '    ) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    // AP Ok\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    // AP Ok\n', '    event Approval(address indexed _owner, address indexed _spender,\n', '        uint256 _value);\n', '}\n', '\n', '\n', 'contract ArenaplayToken is ERC20Token {\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token information\n', '    // ------------------------------------------------------------------------\n', '    // AP Next 3 lines Ok. Using uint8 for decimals instead of uint256\n', '    string public constant symbol = "APY";\n', '    string public constant name = "Arenaplay.io";\n', '    uint8 public constant decimals = 18;\n', '\n', '    // > new Date("2017-06-29T13:00:00").getTime()/1000\n', '    // 1498741200\n', '    // Do not use `now` here\n', '    // AP NOTE - This contract uses the date/time instead of blocks to determine\n', '    //           the start, end and BET/ETH scale. The use of date/time in \n', '    //           these contracts can be used by miners to skew the block time.\n', '    //           This is not a significant risk in a crowdfunding contract.\n', '    uint256 public constant STARTDATE = 1501173471;\n', '    // BK Ok\n', '    uint256 public constant ENDDATE = STARTDATE + 39 days;\n', '\n', '    // Cap USD 10mil @ 200 ETH/USD\n', '    // AP NOTE - The following constant will need to be updated with the correct\n', '    //           ETH/USD exchange rate. The aim for Arenaplay.io is to raise\n', '    //           USD 10 million, INCLUDING the precommitments. This cap will\n', '    //           have to take into account the ETH equivalent amount of the\n', '    //           precommitment \n', '    uint256 public constant CAP = 50000 ether;\n', '\n', '    // Cannot have a constant address here - Solidity bug\n', '    // https://github.com/ethereum/solidity/issues/2441\n', '    // AP Ok\n', '    address public multisig = 0x0e43311768025D0773F62fBF4a6cd083C508d979;\n', '\n', '    // AP Ok - To compare against the `CAP` variable\n', '    uint256 public totalEthers;\n', '\n', '    // AP Ok - Constructor\n', '    function ArenaplayToken() {\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', ' \n', '    // ------------------------------------------------------------------------\n', '    // AP Ok - Calculate the APY/ETH at this point in time\n', '    function buyPrice() constant returns (uint256) {\n', '        return buyPriceAt(now);\n', '    }\n', '\n', '    // AP Ok - Calculate APY/ETH at any point in time. Can be used in EtherScan\n', '    //         to determine past, current or future APY/ETH rate \n', '    // AP NOTE - Scale is continuous\n', '    function buyPriceAt(uint256 at) constant returns (uint256) {\n', '        if (at < STARTDATE) {\n', '            return 0;\n', '        } else if (at < (STARTDATE + 9 days)) {\n', '            return 2700;\n', '        } else if (at < (STARTDATE + 18 days)) {\n', '            return 2400;\n', '        } else if (at < (STARTDATE + 27 days)) {\n', '            return 2050;\n', '        } else if (at <= ENDDATE) {\n', '            return 1500;\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Buy tokens from the contract\n', '    // ------------------------------------------------------------------------\n', "    // AP Ok - Account can send tokens directly to this contract's address\n", '    function () payable {\n', '        proxyPayment(msg.sender);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Exchanges can buy on behalf of participant\n', '    // ------------------------------------------------------------------------\n', '    // AP Ok\n', '    function proxyPayment(address participant) payable {\n', '        // No contributions before the start of the crowdsale\n', '        // AP Ok\n', '        require(now >= STARTDATE);\n', '        // No contributions after the end of the crowdsale\n', '        // AP Ok\n', '        require(now <= ENDDATE);\n', '        // No 0 contributions\n', '        // AP Ok\n', '        require(msg.value > 0);\n', '\n', '        // Add ETH raised to total\n', '        // AP Ok - Overflow protected\n', '        totalEthers = totalEthers.add(msg.value);\n', '        // Cannot exceed cap\n', '        // AP Ok\n', '        require(totalEthers <= CAP);\n', '\n', '        // What is the APY to ETH rate\n', '        // AP Ok\n', '        uint256 _buyPrice = buyPrice();\n', '\n', '        // Calculate #APY - this is safe as _buyPrice is known\n', '        // and msg.value is restricted to valid values\n', '        // AP Ok\n', '        uint tokens = msg.value * _buyPrice;\n', '\n', '        // Check tokens > 0\n', '        // AP Ok\n', '        require(tokens > 0);\n', '        // Compute tokens for foundation 20%\n', '        // Number of tokens restricted so maths is safe\n', '        // AP Ok\n', '        uint multisigTokens = tokens * 2 / 10 ;\n', '\n', '        // Add to total supply\n', '        // AP Ok\n', '        _totalSupply = _totalSupply.add(tokens);\n', '        // AP Ok\n', '        _totalSupply = _totalSupply.add(multisigTokens);\n', '\n', '        // Add to balances\n', '        // AP Ok\n', '        balances[participant] = balances[participant].add(tokens);\n', '        // AP Ok\n', '        balances[multisig] = balances[multisig].add(multisigTokens);\n', '\n', '        // Log events\n', '        // AP Next 4 lines Ok\n', '        TokensBought(participant, msg.value, totalEthers, tokens,\n', '            multisigTokens, _totalSupply, _buyPrice);\n', '        Transfer(0x0, participant, tokens);\n', '        Transfer(0x0, multisig, multisigTokens);\n', '\n', '        // Move the funds to a safe wallet\n', '        // https://github.com/ConsenSys/smart-contract-best-practices#be-aware-of-the-tradeoffs-between-send-transfer-and-callvalue\n', '        multisig.transfer(msg.value);\n', '    }\n', '    // AP Ok\n', '    event TokensBought(address indexed buyer, uint256 ethers, \n', '        uint256 newEtherBalance, uint256 tokens, uint256 multisigTokens, \n', '        uint256 newTotalSupply, uint256 buyPrice);\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner to add precommitment funding token balance before the crowdsale\n', '    // commences\n', '    // ------------------------------------------------------------------------\n', '    // AP NOTE - Owner can only execute this before the crowdsale starts\n', '    // AP NOTE - Owner must add amount * 3 / 7 for the foundation for each\n', '    //           precommitment amount\n', '    // AP NOTE - The CAP must take into account the equivalent ETH raised\n', '    //           for the precommitment amounts\n', '    function addPrecommitment(address participant, uint balance) onlyOwner {\n', '        //APK Ok\n', '        require(now < STARTDATE);\n', '        // AP Ok\n', '        require(balance > 0);\n', '        // AP Ok\n', '        balances[participant] = balances[participant].add(balance);\n', '        // AP Ok\n', '        _totalSupply = _totalSupply.add(balance);\n', '        // AP Ok\n', '        Transfer(0x0, participant, balance);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from owner's account to another account, with a\n", '    // check that the crowdsale is finalised\n', '    // ------------------------------------------------------------------------\n', '    // AP Ok\n', '    function transfer(address _to, uint _amount) returns (bool success) {\n', '        // Cannot transfer before crowdsale ends or cap reached\n', '        // AP Ok\n', '        require(now > ENDDATE || totalEthers == CAP);\n', '        // Standard transfer\n', '        // AP Ok\n', '        return super.transfer(_to, _amount);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Spender of tokens transfer an amount of tokens from the token owner's\n", '    // balance to another account, with a check that the crowdsale is\n', '    // finalised\n', '    // ------------------------------------------------------------------------\n', '    // AP Ok\n', '    function transferFrom(address _from, address _to, uint _amount) \n', '        returns (bool success)\n', '    {\n', '        // Cannot transfer before crowdsale ends or cap reached\n', '        // AP Ok\n', '        require(now > ENDDATE || totalEthers == CAP);\n', '        // Standard transferFrom\n', '        // AP Ok\n', '        return super.transferFrom(_from, _to, _amount);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    // AP Ok - Only owner\n', '    function transferAnyERC20Token(address tokenAddress, uint amount)\n', '      onlyOwner returns (bool success) \n', '    {\n', '        // AP Ok\n', '        return ERC20Token(tokenAddress).transfer(owner, amount);\n', '    }\n', '}']