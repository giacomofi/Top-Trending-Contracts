['pragma solidity ^0.4.11;\n', '\n', 'contract token {\n', '    function transfer(address receiver, uint amount);\n', '    function balanceOf( address _address )returns(uint256);\n', '}\n', '\n', 'contract DragonCrowdsale {\n', '    address public beneficiary;\n', '    address public owner;\n', '  \n', '    uint public amountRaised;\n', '    uint public tokensSold;\n', '    uint public deadline;\n', '    uint public price;\n', '    token public tokenReward;\n', '    mapping(address => uint256) public contributions;\n', '    bool crowdSaleStart;\n', '    bool crowdSalePause;\n', '    bool crowdSaleClosed;\n', '\n', '   \n', '    event FundTransfer(address participant, uint amount);\n', '\n', '    modifier onlyOwner() {\n', '        if (msg.sender != owner) {\n', '            throw;\n', '        }\n', '        _;\n', '    }\n', '\n', '    function DragonCrowdsale() {\n', '        beneficiary = msg.sender;\n', '        owner = msg.sender;\n', '        price =  .003333333333333 ether;\n', '        tokenReward = token(0x5b29a6277c996b477d6632E60EEf41268311cE1c);\n', '    }\n', '\n', '    function () payable {\n', '        require(!crowdSaleClosed);\n', '        require(!crowdSalePause);\n', '        if ( crowdSaleStart) require( now < deadline );\n', '        uint amount = msg.value;\n', '        contributions[msg.sender] += amount;\n', '        amountRaised += amount;\n', '        tokensSold += amount / price;\n', '        tokenReward.transfer(msg.sender, amount / price);\n', '        FundTransfer(msg.sender, amount );\n', '        beneficiary.transfer( amount );\n', '    }\n', '\n', '    // Start this October 27\n', '    function startCrowdsale() onlyOwner  {\n', '        \n', '        crowdSaleStart = true;\n', '        deadline = now + 60 days;\n', '    }\n', '\n', '    function endCrowdsale() onlyOwner  {\n', '        \n', '        \n', '        crowdSaleClosed = true;\n', '    }\n', '\n', '\n', '    function pauseCrowdsale() onlyOwner {\n', '        \n', '        crowdSalePause = true;\n', '        \n', '        \n', '    }\n', '\n', '    function unpauseCrowdsale() onlyOwner {\n', '        \n', '        crowdSalePause = false;\n', '        \n', '        \n', '    }\n', '    \n', '    function transferOwnership ( address _newowner ) onlyOwner {\n', '        \n', '        owner = _newowner;\n', '        \n', '    }\n', '    \n', '    function transferBeneficiary ( address _newbeneficiary ) onlyOwner {\n', '        \n', '        beneficiary = _newbeneficiary;\n', '        \n', '    }\n', '    \n', '    function withdrawDragons() onlyOwner{\n', '        \n', '        uint256 balance = tokenReward.balanceOf(address(this));\n', '        \n', '        tokenReward.transfer( beneficiary, balance );\n', '        \n', '        \n', '    }\n', '    \n', '}']
['pragma solidity ^0.4.11;\n', '\n', 'contract token {\n', '    function transfer(address receiver, uint amount);\n', '    function balanceOf( address _address )returns(uint256);\n', '}\n', '\n', 'contract DragonCrowdsale {\n', '    address public beneficiary;\n', '    address public owner;\n', '  \n', '    uint public amountRaised;\n', '    uint public tokensSold;\n', '    uint public deadline;\n', '    uint public price;\n', '    token public tokenReward;\n', '    mapping(address => uint256) public contributions;\n', '    bool crowdSaleStart;\n', '    bool crowdSalePause;\n', '    bool crowdSaleClosed;\n', '\n', '   \n', '    event FundTransfer(address participant, uint amount);\n', '\n', '    modifier onlyOwner() {\n', '        if (msg.sender != owner) {\n', '            throw;\n', '        }\n', '        _;\n', '    }\n', '\n', '    function DragonCrowdsale() {\n', '        beneficiary = msg.sender;\n', '        owner = msg.sender;\n', '        price =  .003333333333333 ether;\n', '        tokenReward = token(0x5b29a6277c996b477d6632E60EEf41268311cE1c);\n', '    }\n', '\n', '    function () payable {\n', '        require(!crowdSaleClosed);\n', '        require(!crowdSalePause);\n', '        if ( crowdSaleStart) require( now < deadline );\n', '        uint amount = msg.value;\n', '        contributions[msg.sender] += amount;\n', '        amountRaised += amount;\n', '        tokensSold += amount / price;\n', '        tokenReward.transfer(msg.sender, amount / price);\n', '        FundTransfer(msg.sender, amount );\n', '        beneficiary.transfer( amount );\n', '    }\n', '\n', '    // Start this October 27\n', '    function startCrowdsale() onlyOwner  {\n', '        \n', '        crowdSaleStart = true;\n', '        deadline = now + 60 days;\n', '    }\n', '\n', '    function endCrowdsale() onlyOwner  {\n', '        \n', '        \n', '        crowdSaleClosed = true;\n', '    }\n', '\n', '\n', '    function pauseCrowdsale() onlyOwner {\n', '        \n', '        crowdSalePause = true;\n', '        \n', '        \n', '    }\n', '\n', '    function unpauseCrowdsale() onlyOwner {\n', '        \n', '        crowdSalePause = false;\n', '        \n', '        \n', '    }\n', '    \n', '    function transferOwnership ( address _newowner ) onlyOwner {\n', '        \n', '        owner = _newowner;\n', '        \n', '    }\n', '    \n', '    function transferBeneficiary ( address _newbeneficiary ) onlyOwner {\n', '        \n', '        beneficiary = _newbeneficiary;\n', '        \n', '    }\n', '    \n', '    function withdrawDragons() onlyOwner{\n', '        \n', '        uint256 balance = tokenReward.balanceOf(address(this));\n', '        \n', '        tokenReward.transfer( beneficiary, balance );\n', '        \n', '        \n', '    }\n', '    \n', '}']
