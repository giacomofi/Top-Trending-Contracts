['pragma solidity ^0.4.4;\n', '/**\n', ' * @title Contract for object that have an owner\n', ' */\n', 'contract Owned {\n', '    /**\n', '     * Contract owner address\n', '     */\n', '    address public owner;\n', '\n', '    /**\n', '     * @dev Store owner on creation\n', '     */\n', '    function Owned() { owner = msg.sender; }\n', '\n', '    /**\n', '     * @dev Delegate contract to another person\n', '     * @param _owner is another person address\n', '     */\n', '    function delegate(address _owner) onlyOwner\n', '    { owner = _owner; }\n', '\n', '    /**\n', '     * @dev Owner check modifier\n', '     */\n', '    modifier onlyOwner { if (msg.sender != owner) throw; _; }\n', '}\n', '\n', '\n', '/**\n', ' * @title Contract for objects that can be morder\n', ' */\n', 'contract Mortal is Owned {\n', '    /**\n', '     * @dev Destroy contract and scrub a data\n', '     * @notice Only owner can kill me\n', '     */\n', '    function kill() onlyOwner\n', '    { suicide(owner); }\n', '}\n', '\n', '\n', 'contract Comission is Mortal {\n', '    address public ledger;\n', '    bytes32 public taxman;\n', '    uint    public taxPerc;\n', '\n', '    /**\n', '     * @dev Comission contract constructor\n', '     * @param _ledger Processing ledger contract\n', '     * @param _taxman Tax receiver account\n', '     * @param _taxPerc Processing tax in percent\n', '     */\n', '    function Comission(address _ledger, bytes32 _taxman, uint _taxPerc) {\n', '        ledger  = _ledger;\n', '        taxman  = _taxman;\n', '        taxPerc = _taxPerc;\n', '    }\n', '\n', '    /**\n', '     * @dev Refill ledger with comission\n', '     * @param _destination Destination account\n', '     */\n', '    function process(bytes32 _destination) payable returns (bool) {\n', "        // Handle value below 100 isn't possible\n", '        if (msg.value < 100) throw;\n', '\n', '        var tax = msg.value * taxPerc / 100; \n', '        var refill = bytes4(sha3("refill(bytes32)")); \n', '        if ( !ledger.call.value(tax)(refill, taxman)\n', '          || !ledger.call.value(msg.value - tax)(refill, _destination)\n', '           ) throw;\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', 'library CreatorComission {\n', '    function create(address _ledger, bytes32 _taxman, uint256 _taxPerc) returns (Comission)\n', '    { return new Comission(_ledger, _taxman, _taxPerc); }\n', '\n', '    function version() constant returns (string)\n', '    { return "v0.5.0 (a9ea4c6c)"; }\n', '\n', '    function abi() constant returns (string)\n', '    { return \'[{"constant":false,"inputs":[{"name":"_destination","type":"bytes32"}],"name":"process","outputs":[{"name":"","type":"bool"}],"payable":true,"type":"function"},{"constant":false,"inputs":[],"name":"kill","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"taxman","outputs":[{"name":"","type":"bytes32"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"ledger","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_owner","type":"address"}],"name":"delegate","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"taxPerc","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[{"name":"_ledger","type":"address"},{"name":"_taxman","type":"bytes32"},{"name":"_taxPerc","type":"uint256"}],"type":"constructor"}]\'; }\n', '}\n', '\n', '\n', '/**\n', ' * @title Builder based contract\n', ' */\n', 'contract Builder is Mortal {\n', '    /**\n', '     * @dev this event emitted for every builded contract\n', '     */\n', '    event Builded(address indexed client, address indexed instance);\n', ' \n', '    /* Addresses builded contracts at sender */\n', '    mapping(address => address[]) public getContractsOf;\n', ' \n', '    /**\n', '     * @dev Get last address\n', '     * @return last address contract\n', '     */\n', '    function getLastContract() constant returns (address) {\n', '        var sender_contracts = getContractsOf[msg.sender];\n', '        return sender_contracts[sender_contracts.length - 1];\n', '    }\n', '\n', '    /* Building beneficiary */\n', '    address public beneficiary;\n', '\n', '    /**\n', '     * @dev Set beneficiary\n', '     * @param _beneficiary is address of beneficiary\n', '     */\n', '    function setBeneficiary(address _beneficiary) onlyOwner\n', '    { beneficiary = _beneficiary; }\n', '\n', '    /* Building cost  */\n', '    uint public buildingCostWei;\n', '\n', '    /**\n', '     * @dev Set building cost\n', '     * @param _buildingCostWei is cost\n', '     */\n', '    function setCost(uint _buildingCostWei) onlyOwner\n', '    { buildingCostWei = _buildingCostWei; }\n', '\n', '    /* Security check report */\n', '    string public securityCheckURI;\n', '\n', '    /**\n', '     * @dev Set security check report URI\n', '     * @param _uri is an URI to report\n', '     */\n', '    function setSecurityCheck(string _uri) onlyOwner\n', '    { securityCheckURI = _uri; }\n', '}\n', '\n', '//\n', '// AIRA Builder for Comission contract\n', '//\n', '\n', '/**\n', ' * @title BuilderComission contract\n', ' */\n', 'contract BuilderComission is Builder {\n', '    /**\n', '     * @dev Run script creation contract\n', '     * @return address new contract\n', '     */\n', '    function create(address _ledger, bytes32 _taxman, uint _taxPerc,\n', '                    address _client) payable returns (address) {\n', '        if (buildingCostWei > 0 && beneficiary != 0) {\n', '            // Too low value\n', '            if (msg.value < buildingCostWei) throw;\n', '            // Beneficiary send\n', '            if (!beneficiary.send(buildingCostWei)) throw;\n', '            // Refund\n', '            if (msg.value > buildingCostWei) {\n', '                if (!msg.sender.send(msg.value - buildingCostWei)) throw;\n', '            }\n', '        } else {\n', '            // Refund all\n', '            if (msg.value > 0) {\n', '                if (!msg.sender.send(msg.value)) throw;\n', '            }\n', '        }\n', '\n', '        if (_client == 0)\n', '            _client = msg.sender;\n', ' \n', '        var inst = CreatorComission.create(_ledger, _taxman, _taxPerc);\n', '        inst.delegate(_client);\n', '        Builded(_client, inst);\n', '        getContractsOf[_client].push(inst);\n', '        return inst;\n', '    }\n', '}']