['pragma solidity ^0.4.10;\n', '\n', '// Token selling smart contract\n', '// Inspired by https://github.com/bokkypoobah/TokenTrader\n', '\n', '// https://github.com/ethereum/EIPs/issues/20\n', 'contract ERC20 {\n', '    function totalSupply() constant returns (uint totalSupply);\n', '    function balanceOf(address _owner) constant returns (uint balance);\n', '    function transfer(address _to, uint _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint _value) returns (bool success);\n', '    function approve(address _spender, uint _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', '// `owned` contracts allows us to specify an owner address\n', '// which has admin right to this contract\n', 'contract owned {\n', '    address public owner;\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '// `halting` contracts allow us to stop activity on this contract,\n', '// or even self-destruct if need be.\n', 'contract halting is owned {\n', '    bool public running = true;\n', '\n', '    function start() onlyOwner {\n', '        running = true;\n', '    }\n', '\n', '    function stop() onlyOwner {\n', '        running = false;\n', '    }\n', '\n', '    function destruct() onlyOwner {\n', '        selfdestruct(owner);\n', '    }\n', '\n', '    modifier halting {\n', '        assert(running);\n', '        _;\n', '    }\n', '}\n', '\n', '// contract can buy or sell tokens for ETH\n', '// prices are in amount of wei per batch of token units\n', 'contract TokenVault is owned, halting {\n', '\n', '    address public asset;    // address of token\n', '    uint public sellPrice;   // contract sells lots at this price (in wei)\n', '    uint public units;       // lot size (token-wei)\n', '\n', '    event MakerWithdrewAsset(uint tokens);\n', '    event MakerWithdrewEther(uint ethers);\n', '    event SoldTokens(uint tokens);\n', '\n', '    // Constructor - only to be called by the TokenTraderFactory contract\n', '    function TokenVault (\n', '        address _asset,\n', '        uint _sellPrice,\n', '        uint _units\n', '    ) {\n', '        asset       = _asset;\n', '        sellPrice   = _sellPrice;\n', '        units       = _units;\n', '\n', '        require(asset != 0);\n', '        require(sellPrice > 0);\n', '        require(units > 0);\n', '    }\n', '\n', '    // Withdraw asset ERC20 Token\n', '    function makerWithdrawAsset(uint tokens) onlyOwner returns (bool ok) {\n', '        MakerWithdrewAsset(tokens);\n', '        return ERC20(asset).transfer(owner, tokens);\n', '    }\n', '\n', '    // Withdraw all eth from this contract\n', '    function makerWithdrawEther() onlyOwner {\n', '        MakerWithdrewEther(this.balance);\n', '        return owner.transfer(this.balance);\n', '    }\n', '\n', '    // Function to easily check this contracts balance\n', '    function getAssetBalance() constant returns (uint) {\n', '        return ERC20(asset).balanceOf(address(this));\n', '    }\n', '\n', '    function min(uint a, uint b) private returns (uint) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    // Primary function; called with Ether sent to contract\n', '    function takerBuyAsset() payable halting {\n', '\n', '        // Must request at least one asset\n', '        require(msg.value >= sellPrice);\n', '\n', '        uint order    = msg.value / sellPrice;\n', '        uint can_sell = getAssetBalance() / units;\n', '        // start with no change\n', '        uint256 change = 0;\n', '        if (msg.value > (can_sell * sellPrice)) {\n', '            change  = msg.value - (can_sell * sellPrice);\n', '            order = can_sell;\n', '        }\n', '        if (change > 0) {\n', '            if (!msg.sender.send(change)) throw;\n', '        }\n', '        if (order > 0) {\n', '            if (!ERC20(asset).transfer(msg.sender, order * units)) throw;\n', '        }\n', '        SoldTokens(order);\n', '\n', '    }\n', '\n', '    // Ether is sent to the contract; can be either Maker or Taker\n', '    function () payable {\n', '        if (msg.sender == owner) {\n', '            // Allow owner to simply add eth to contract\n', '            return;\n', '        }\n', '        else {\n', '            // Otherwise, interpret as a buy request\n', '            takerBuyAsset();\n', '        }\n', '    }\n', '}']