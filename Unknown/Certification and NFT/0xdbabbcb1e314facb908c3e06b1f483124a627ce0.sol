['// Abstract contract for the full ERC 20 Token standard\n', '// https://github.com/ethereum/EIPs/issues/20\n', 'pragma solidity ^0.4.10;\n', '\n', 'contract Token {\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '\t\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\t\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '\t\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\t\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '\t\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\t\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\t\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\t\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '\t\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\t\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\t\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract IMigrationContract {\n', '    function migrate(address addr, uint256 uip) returns (bool success);\n', '}\n', '\n', 'contract SafeMath {\n', '\n', '    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x + y;\n', '      assert((z >= x) && (z >= y));\n', '      return z;\n', '    }\n', '\n', '    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\n', '      assert(x >= y);\n', '      uint256 z = x - y;\n', '      return z;\n', '    }\n', '\n', '    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x * y;\n', '      assert((x == 0)||(z/x == y));\n', '      return z;\n', '    }\n', '\n', '}\n', '\n', '/*  ERC 20 token */\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '      if (balances[msg.sender] >= _value && _value > 0) {\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract STANToken is StandardToken, SafeMath {\n', '\n', '    // metadata\n', '    string  public constant name = "STANToken";\n', '    string  public constant symbol = "STAN";\n', '    uint256 public constant decimals = 18;\n', '    string  public version = "1.0";\n', '\n', '    // contracts\n', '    address public ethFundDeposit;          // deposit address for ETH for UnlimitedIP Team.\n', '    address public newContractAddr;         // the new contract for UnlimitedIP token updates;\n', '\n', '    // crowdsale parameters\n', '    bool    public isFunding;                // switched to true in operational state\n', '    uint256 public fundingStartBlock;\n', '    uint256 public fundingStopBlock;\n', '\n', '    uint256 public currentSupply;           // current supply tokens for sell\n', '    uint256 public tokenRaised = 0;         // the number of total sold token\n', '    uint256 public tokenMigrated = 0;     // the number of total transferted token\n', '    uint256 public tokenExchangeRate = 1000;             // 1000 UIP tokens per 1 ETH\n', '\n', '    // events\n', '    event AllocateToken(address indexed _to, uint256 _value);   // allocate token for private sale;\n', '    event IssueToken(address indexed _to, uint256 _value);      // issue token for public sale;\n', '    event IncreaseSupply(uint256 _value);\n', '    event DecreaseSupply(uint256 _value);\n', '    event Migrate(address indexed _to, uint256 _value);\n', '    event Burn(address indexed from, uint256 _value);\n', '    // format decimals.\n', '    function formatDecimals(uint256 _value) internal returns (uint256 ) {\n', '        return _value * 10 ** decimals;\n', '    }\n', '\n', '    // constructor\n', '    function STANToken()\n', '    {\n', '        ethFundDeposit = 0xa1e57e38f347f4CCCb441366A35d949142fAd7b0;\n', '\n', '        isFunding = false;                           //controls pre through crowdsale state\n', '        fundingStartBlock = 0;\n', '        fundingStopBlock = 0;\n', '\n', '        currentSupply = formatDecimals(0);\n', '        totalSupply = formatDecimals(100000000);\n', '        require(currentSupply <= totalSupply);\n', '        balances[ethFundDeposit] = totalSupply-currentSupply;\n', '    }\n', '\n', '    modifier isOwner()  { require(msg.sender == ethFundDeposit); _; }\n', '\n', '    /// @dev set the token&#39;s tokenExchangeRate,\n', '    function setTokenExchangeRate(uint256 _tokenExchangeRate) isOwner external {\n', '        require(_tokenExchangeRate > 0);\n', '        require(_tokenExchangeRate != tokenExchangeRate);\n', '        tokenExchangeRate = _tokenExchangeRate;\n', '    }\n', '\n', '    /// @dev increase the token&#39;s supply\n', '    function increaseSupply (uint256 _value) isOwner external {\n', '        uint256 value = formatDecimals(_value);\n', '        require (value + currentSupply <= totalSupply);\n', '        require (balances[msg.sender] >= value && value>0);\n', '        balances[msg.sender] -= value;\n', '        currentSupply = safeAdd(currentSupply, value);\n', '        IncreaseSupply(value);\n', '    }\n', '\n', '    /// @dev decrease the token&#39;s supply\n', '    function decreaseSupply (uint256 _value) isOwner external {\n', '        uint256 value = formatDecimals(_value);\n', '        require (value + tokenRaised < currentSupply);\n', '        require (value <= currentSupply - tokenRaised);\n', '        currentSupply = safeSubtract(currentSupply, value);\n', '        balances[msg.sender] += value;\n', '        DecreaseSupply(value);\n', '    }\n', '\n', '    /// @dev turn on the funding state\n', '    function startFunding (uint256 _fundingStartBlock, uint256 _fundingStopBlock) isOwner external {\n', '        require(!isFunding);\n', '        require(_fundingStartBlock < _fundingStopBlock);\n', '        require(block.number < _fundingStartBlock) ;\n', '        fundingStartBlock = _fundingStartBlock;\n', '        fundingStopBlock = _fundingStopBlock;\n', '        isFunding = true;\n', '    }\n', '\n', '    /// @dev turn off the funding state\n', '    function stopFunding() isOwner external {\n', '        require(isFunding);\n', '        isFunding = false;\n', '    }\n', '\n', '    /// @dev set a new contract for recieve the tokens (for update contract)\n', '    function setMigrateContract(address _newContractAddr) isOwner external {\n', '        require(_newContractAddr != newContractAddr);\n', '        newContractAddr = _newContractAddr;\n', '    }\n', '\n', '    /// @dev set a new owner.\n', '    function changeOwner(address _newFundDeposit) isOwner() external {\n', '        require(_newFundDeposit != address(0x0));\n', '        ethFundDeposit = _newFundDeposit;\n', '    }\n', '\n', '    /// sends the tokens to new contract\n', '    function migrate() external {\n', '        require(!isFunding);\n', '        require(newContractAddr != address(0x0));\n', '\n', '        uint256 tokens = balances[msg.sender];\n', '        require (tokens > 0);\n', '\n', '        balances[msg.sender] = 0;\n', '        tokenMigrated = safeAdd(tokenMigrated, tokens);\n', '\n', '        IMigrationContract newContract = IMigrationContract(newContractAddr);\n', '        require(newContract.migrate(msg.sender, tokens));\n', '\n', '        Migrate(msg.sender, tokens);               // log it\n', '    }\n', '\n', '    /// @dev withdraw ETH from contract to UnlimitedIP team address\n', '    function transferETH() isOwner external {\n', '        require(this.balance > 0);\n', '        require(ethFundDeposit.send(this.balance));\n', '    }\n', '\n', '    /// @dev allocates UIP tokens to pre-sell address.\n', '    function allocateToken (address _addr, uint256 _eth) isOwner external {\n', '        require(_eth != 0);\n', '        require(_addr != address(0x0));\n', '\n', '        uint256 tokens = safeMult(formatDecimals(_eth), tokenExchangeRate);\n', '        require(tokens + tokenRaised <= currentSupply);\n', '\n', '        tokenRaised = safeAdd(tokenRaised, tokens);\n', '        balances[_addr] += tokens;\n', '\n', '        AllocateToken(_addr, tokens);  // logs token issued\n', '    }\n', '\n', '    function burn(uint256 _value) isOwner returns (bool success){\n', '        uint256 value = formatDecimals(_value);\n', '        require(balances[msg.sender] >= value);\n', '        balances[msg.sender] -= value;\n', '        totalSupply -= value;\n', '        Burn(msg.sender,value);\n', '        return true;\n', '    }\n', '\n', '    /// buys the tokens\n', '    function () payable {\n', '        require (isFunding);\n', '        require(msg.value > 0);\n', '\n', '        require(block.number >= fundingStartBlock);\n', '        require(block.number <= fundingStopBlock);\n', '\n', '        uint256 tokens = safeMult(msg.value, tokenExchangeRate);\n', '        require(tokens + tokenRaised <= currentSupply);\n', '\n', '        tokenRaised = safeAdd(tokenRaised, tokens);\n', '        balances[msg.sender] += tokens;\n', '\n', '        IssueToken(msg.sender, tokens);  // logs token issued\n', '    }\n', '}']