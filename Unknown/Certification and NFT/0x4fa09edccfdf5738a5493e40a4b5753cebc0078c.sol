['pragma solidity ^0.4.10;\n', '\n', '\n', 'contract Token { \n', '    function transfer(address receiver, uint amount);\n', '}\n', '\n', '\n', 'contract TemplateCrowdSale {\n', '    address public beneficiary;\n', '    uint public fundingGoal; \n', '    uint public amountRaised; \n', '    uint public deadline; \n', '    uint public price;\n', '    uint public minAmount = 1 ether;\n', '    Token public tokenReward;\n', '    mapping(address => uint256) public balanceOf;\n', '    bool fundingGoalReached = false;\n', '    bool crowdsaleClosed = false;\n', '    \n', '    event GoalReached(address beneficiary, uint amountRaised);\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '\n', '    /* data structure to hold information about campaign contributors */\n', '\n', '    /*  at initialization, setup the owner */\n', '    function TemplateCrowdSale(\n', '        address ifSuccessfulSendTo,\n', '        uint fundingGoalInEthers,\n', '        uint durationInMinutes,\n', '        uint etherCostOf10000Token,\n', '        Token addressOfTokenUsedAsReward\n', '    ) {\n', '        beneficiary = ifSuccessfulSendTo;\n', '        fundingGoal = fundingGoalInEthers * 1 ether;\n', '        deadline = now + durationInMinutes * 1 minutes;\n', '        price = etherCostOf10000Token ;\n', '        tokenReward = Token(addressOfTokenUsedAsReward);\n', '    }\n', '\n', '    /* The function without name is the default function that is called whenever anyone sends funds to a contract */\n', '    function () payable {\n', '        if (crowdsaleClosed) {\n', '            revert();\n', '        }\n', '        uint amount = msg.value;\n', '        if (amount < minAmount) {\n', '            revert();\n', '        }\n', '        balanceOf[msg.sender] = amount;\n', '        amountRaised += amount;\n', '        tokenReward.transfer(msg.sender, amount*10000 / price);\n', '        FundTransfer(msg.sender, amount, true);\n', '    }\n', '\n', '    modifier afterDeadline() { \n', '        require(now >= deadline);\n', '        _;\n', '    }\n', '\n', '    /* checks if the goal or time limit has been reached and ends the campaign */\n', '    function checkGoalReached() afterDeadline {\n', '        if (amountRaised >= fundingGoal) {\n', '            fundingGoalReached = true;\n', '            GoalReached(beneficiary, amountRaised);\n', '        }\n', '        crowdsaleClosed = true;\n', '    }\n', '\n', '    function safeWithdrawal() afterDeadline {\n', '        if (!fundingGoalReached) {\n', '            uint amount = balanceOf[msg.sender];\n', '            balanceOf[msg.sender] = 0;\n', '            if (amount > 0) {\n', '                if (msg.sender.send(amount)) {\n', '                    FundTransfer(msg.sender, amount, false);\n', '                } else {\n', '                    balanceOf[msg.sender] = amount;\n', '                }\n', '            }\n', '        }\n', '\n', '        if (fundingGoalReached && beneficiary == msg.sender) {\n', '            if (beneficiary.send(amountRaised)) {\n', '                FundTransfer(beneficiary, amountRaised, false);\n', '            } else {\n', '                //If we fail to send the funds to beneficiary, unlock funders balance\n', '                fundingGoalReached = false;\n', '            }\n', '        }\n', '    }\n', '}']
['pragma solidity ^0.4.10;\n', '\n', '\n', 'contract Token { \n', '    function transfer(address receiver, uint amount);\n', '}\n', '\n', '\n', 'contract TemplateCrowdSale {\n', '    address public beneficiary;\n', '    uint public fundingGoal; \n', '    uint public amountRaised; \n', '    uint public deadline; \n', '    uint public price;\n', '    uint public minAmount = 1 ether;\n', '    Token public tokenReward;\n', '    mapping(address => uint256) public balanceOf;\n', '    bool fundingGoalReached = false;\n', '    bool crowdsaleClosed = false;\n', '    \n', '    event GoalReached(address beneficiary, uint amountRaised);\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '\n', '    /* data structure to hold information about campaign contributors */\n', '\n', '    /*  at initialization, setup the owner */\n', '    function TemplateCrowdSale(\n', '        address ifSuccessfulSendTo,\n', '        uint fundingGoalInEthers,\n', '        uint durationInMinutes,\n', '        uint etherCostOf10000Token,\n', '        Token addressOfTokenUsedAsReward\n', '    ) {\n', '        beneficiary = ifSuccessfulSendTo;\n', '        fundingGoal = fundingGoalInEthers * 1 ether;\n', '        deadline = now + durationInMinutes * 1 minutes;\n', '        price = etherCostOf10000Token ;\n', '        tokenReward = Token(addressOfTokenUsedAsReward);\n', '    }\n', '\n', '    /* The function without name is the default function that is called whenever anyone sends funds to a contract */\n', '    function () payable {\n', '        if (crowdsaleClosed) {\n', '            revert();\n', '        }\n', '        uint amount = msg.value;\n', '        if (amount < minAmount) {\n', '            revert();\n', '        }\n', '        balanceOf[msg.sender] = amount;\n', '        amountRaised += amount;\n', '        tokenReward.transfer(msg.sender, amount*10000 / price);\n', '        FundTransfer(msg.sender, amount, true);\n', '    }\n', '\n', '    modifier afterDeadline() { \n', '        require(now >= deadline);\n', '        _;\n', '    }\n', '\n', '    /* checks if the goal or time limit has been reached and ends the campaign */\n', '    function checkGoalReached() afterDeadline {\n', '        if (amountRaised >= fundingGoal) {\n', '            fundingGoalReached = true;\n', '            GoalReached(beneficiary, amountRaised);\n', '        }\n', '        crowdsaleClosed = true;\n', '    }\n', '\n', '    function safeWithdrawal() afterDeadline {\n', '        if (!fundingGoalReached) {\n', '            uint amount = balanceOf[msg.sender];\n', '            balanceOf[msg.sender] = 0;\n', '            if (amount > 0) {\n', '                if (msg.sender.send(amount)) {\n', '                    FundTransfer(msg.sender, amount, false);\n', '                } else {\n', '                    balanceOf[msg.sender] = amount;\n', '                }\n', '            }\n', '        }\n', '\n', '        if (fundingGoalReached && beneficiary == msg.sender) {\n', '            if (beneficiary.send(amountRaised)) {\n', '                FundTransfer(beneficiary, amountRaised, false);\n', '            } else {\n', '                //If we fail to send the funds to beneficiary, unlock funders balance\n', '                fundingGoalReached = false;\n', '            }\n', '        }\n', '    }\n', '}']
