['pragma solidity ^0.4.11;\n', '// Thanks to OpenZeppeline & TokenMarket for the awesome Libraries.\n', 'contract SafeMathLib {\n', '  function safeMul(uint a, uint b) returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint a, uint b) returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint a, uint b) returns (uint) {\n', '    uint c = a + b;\n', '    assert(c>=a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '  address public newOwner;\n', '  event OwnershipTransferred(address indexed _from, address indexed _to);\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '  modifier onlyOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  function transferOwnership(address _newOwner) onlyOwner {\n', '    newOwner = _newOwner;\n', '  }\n', '\n', '  function acceptOwnership() {\n', '    require(msg.sender == newOwner);\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '  \n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) constant returns (uint);\n', '  function transfer(address _to, uint _value) returns (bool success);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint);\n', '  function transferFrom(address _from, address _to, uint _value) returns (bool success);\n', '  function approve(address _spender, uint _value) returns (bool success);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'contract FractionalERC20 is ERC20 {\n', '  uint8 public decimals;\n', '}\n', '\n', 'contract StandardToken is ERC20, SafeMathLib {\n', '  /* Token supply got increased and a new owner received these tokens */\n', '  event Minted(address receiver, uint amount);\n', '\n', '  /* Actual balances of token holders */\n', '  mapping(address => uint) balances;\n', '\n', '  /* approve() allowances */\n', '  mapping (address => mapping (address => uint)) allowed;\n', '\n', '  function transfer(address _to, uint _value) returns (bool success) {\n', '    if (balances[msg.sender] >= _value \n', '        && _value > 0 \n', '        && balances[_to] + _value > balances[_to]\n', '        ) {\n', '      balances[msg.sender] = safeSub(balances[msg.sender],_value);\n', '      balances[_to] = safeAdd(balances[_to],_value);\n', '      Transfer(msg.sender, _to, _value);\n', '      return true;\n', '    }\n', '    else{\n', '      return false;\n', '    }\n', '    \n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _value) returns (bool success) {\n', '    uint _allowance = allowed[_from][msg.sender];\n', '\n', '    if (balances[_from] >= _value   // From a/c has balance\n', '        && _allowance >= _value    // Transfer approved\n', '        && _value > 0              // Non-zero transfer\n', '        && balances[_to] + _value > balances[_to]  // Overflow check\n', '        ){\n', '    balances[_to] = safeAdd(balances[_to],_value);\n', '    balances[_from] = safeSub(balances[_from],_value);\n', '    allowed[_from][msg.sender] = safeSub(_allowance,_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '        }\n', '    else {\n', '      return false;\n', '    }\n', '  }\n', '\n', '  function balanceOf(address _owner) constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function approve(address _spender, uint _value) returns (bool success) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\n', '    //if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * Upgrade agent interface inspired by Lunyr.\n', ' *\n', ' * Upgrade agent transfers tokens to a new contract.\n', ' * Upgrade agent itself can be the token contract, or just a middle man contract doing the heavy lifting.\n', ' */\n', 'contract UpgradeAgent {\n', '  uint public originalSupply;\n', '  /** Interface marker */\n', '  function isUpgradeAgent() public constant returns (bool) {\n', '    return true;\n', '  }\n', '  function upgradeFrom(address _from, uint256 _value) public;\n', '}\n', '\n', '/**\n', ' * A token upgrade mechanism where users can opt-in amount of tokens to the next smart contract revision.\n', ' *\n', ' * First envisioned by Golem and Lunyr projects.\n', ' */\n', 'contract UpgradeableToken is StandardToken {\n', '\n', '  /** Contract / person who can set the upgrade path. This can be the same as team multisig wallet, as what it is with its default value. */\n', '  address public upgradeMaster;\n', '\n', '  /** The next contract where the tokens will be migrated. */\n', '  UpgradeAgent public upgradeAgent;\n', '\n', '  /** How many tokens we have upgraded by now. */\n', '  uint256 public totalUpgraded;\n', '\n', '  /**\n', '   * Upgrade states.\n', '   *\n', '   * - NotAllowed: The child contract has not reached a condition where the upgrade can bgun\n', '   * - WaitingForAgent: Token allows upgrade, but we don&#39;t have a new agent yet\n', '   * - ReadyToUpgrade: The agent is set, but not a single token has been upgraded yet\n', '   * - Upgrading: Upgrade agent is set and the balance holders can upgrade their tokens\n', '   *\n', '   */\n', '  enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\n', '\n', '  /**\n', '   * Somebody has upgraded some of his tokens.\n', '   */\n', '  event Upgrade(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '  /**\n', '   * New upgrade agent available.\n', '   */\n', '  event UpgradeAgentSet(address agent);\n', '\n', '  /**\n', '   * Do not allow construction without upgrade master set.\n', '   */\n', '  function UpgradeableToken(address _upgradeMaster) {\n', '    upgradeMaster = _upgradeMaster;\n', '  }\n', '\n', '  /**\n', '   * Allow the token holder to upgrade some of their tokens to a new contract.\n', '   */\n', '  function upgrade(uint256 value) public {\n', '    UpgradeState state = getUpgradeState();\n', '    require((state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading));\n', '    // if(!(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading)) {\n', '    //   // Called in a bad state\n', '    //   throw;\n', '    // }\n', '\n', '    // Validate input value.\n', '    if (value == 0) throw;\n', '\n', '    balances[msg.sender] = safeSub(balances[msg.sender],value);\n', '\n', '    // Take tokens out from circulation\n', '    totalSupply = safeSub(totalSupply,value);\n', '    totalUpgraded = safeAdd(totalUpgraded,value);\n', '\n', '    // Upgrade agent reissues the tokens\n', '    upgradeAgent.upgradeFrom(msg.sender, value);\n', '    Upgrade(msg.sender, upgradeAgent, value);\n', '  }\n', '\n', '  /**\n', '   * Set an upgrade agent that handles\n', '   */\n', '  function setUpgradeAgent(address agent) external {\n', '    require(canUpgrade());\n', '    // if(!canUpgrade()) {\n', '    //   // The token is not yet in a state that we could think upgrading\n', '    //   throw;\n', '    // }\n', '\n', '    require(agent != 0x0);\n', '    //if (agent == 0x0) throw;\n', '    // Only a master can designate the next agent\n', '    require(msg.sender == upgradeMaster);\n', '    //if (msg.sender != upgradeMaster) throw;\n', '    // Upgrade has already begun for an agent\n', '    require(getUpgradeState() != UpgradeState.Upgrading);\n', '    //if (getUpgradeState() == UpgradeState.Upgrading) throw;\n', '\n', '    upgradeAgent = UpgradeAgent(agent);\n', '\n', '    // Bad interface\n', '    require(upgradeAgent.isUpgradeAgent());\n', '    //if(!upgradeAgent.isUpgradeAgent()) throw;\n', '    // Make sure that token supplies match in source and target\n', '    require(upgradeAgent.originalSupply() == totalSupply);\n', '    //if (upgradeAgent.originalSupply() != totalSupply) throw;\n', '\n', '    UpgradeAgentSet(upgradeAgent);\n', '  }\n', '\n', '  /**\n', '   * Get the state of the token upgrade.\n', '   */\n', '  function getUpgradeState() public constant returns(UpgradeState) {\n', '    if(!canUpgrade()) return UpgradeState.NotAllowed;\n', '    else if(address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\n', '    else if(totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\n', '    else return UpgradeState.Upgrading;\n', '  }\n', '\n', '  /**\n', '   * Change the upgrade master.\n', '   *\n', '   * This allows us to set a new owner for the upgrade mechanism.\n', '   */\n', '  function setUpgradeMaster(address master) public {\n', '    require(master != 0x0);\n', '    //if (master == 0x0) throw;\n', '    require(msg.sender == upgradeMaster);\n', '    //if (msg.sender != upgradeMaster) throw;\n', '    upgradeMaster = master;\n', '  }\n', '\n', '  /**\n', '   * Child contract can enable to provide the condition when the upgrade can begun.\n', '   */\n', '  function canUpgrade() public constant returns(bool) {\n', '     return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * Define interface for releasing the token transfer after a successful crowdsale.\n', ' */\n', 'contract ReleasableToken is ERC20, Ownable {\n', '\n', '  /* The finalizer contract that allows unlift the transfer limits on this token */\n', '  address public releaseAgent;\n', '\n', '  /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\n', '  bool public released = false;\n', '\n', '  /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\n', '  mapping (address => bool) public transferAgents;\n', '\n', '  /**\n', '   * Limit token transfer until the crowdsale is over.\n', '   *\n', '   */\n', '  modifier canTransfer(address _sender) {\n', '\n', '    if(!released) {\n', '        require(transferAgents[_sender]);\n', '        // if(!transferAgents[_sender]) {\n', '        //     throw;\n', '        // }\n', '    }\n', '\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * Set the contract that can call release and make the token transferable.\n', '   *\n', '   * Design choice. Allow reset the release agent to fix fat finger mistakes.\n', '   */\n', '  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\n', '\n', '    // We don&#39;t do interface check here as we might want to a normal wallet address to act as a release agent\n', '    releaseAgent = addr;\n', '  }\n', '\n', '  /**\n', '   * Owner can allow a particular address (a crowdsale contract) to transfer tokens despite the lock up period.\n', '   */\n', '  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\n', '    transferAgents[addr] = state;\n', '  }\n', '\n', '  /**\n', '   * One way function to release the tokens to the wild.\n', '   *\n', '   * Can be called only from the release agent that is the final ICO contract. It is only called if the crowdsale has been success (first milestone reached).\n', '   */\n', '  function releaseTokenTransfer() public onlyReleaseAgent {\n', '    released = true;\n', '  }\n', '\n', '  /** The function can be called only before or after the tokens have been releasesd */\n', '  modifier inReleaseState(bool releaseState) {\n', '    require(releaseState == released);\n', '    // if(releaseState != released) {\n', '    //     throw;\n', '    // }\n', '    _;\n', '  }\n', '\n', '  /** The function can be called only by a whitelisted release agent. */\n', '  modifier onlyReleaseAgent() {\n', '    require(msg.sender == releaseAgent);\n', '    // if(msg.sender != releaseAgent) {\n', '    //     throw;\n', '    // }\n', '    _;\n', '  }\n', '\n', '  function transfer(address _to, uint _value) canTransfer(msg.sender) returns (bool success) {\n', '    // Call StandardToken.transfer()\n', '   return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _value) canTransfer(_from) returns (bool success) {\n', '    // Call StandardToken.transferForm()\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * A token that can increase its supply by another contract.\n', ' *\n', ' * This allows uncapped crowdsale by dynamically increasing the supply when money pours in.\n', ' * Only mint agents, contracts whitelisted by owner, can mint new tokens.\n', ' *\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '\n', '  bool public mintingFinished = false;\n', '\n', '  /** List of agents that are allowed to create new tokens */\n', '  mapping (address => bool) public mintAgents;\n', '\n', '  event MintingAgentChanged(address addr, bool state  );\n', '\n', '  /**\n', '   * Create new tokens and allocate them to an address..\n', '   *\n', '   * Only callably by a crowdsale contract (mint agent).\n', '   */\n', '  function mint(address receiver, uint amount) onlyMintAgent canMint public {\n', '    totalSupply = safeAdd(totalSupply, amount);\n', '    balances[receiver] = safeAdd(balances[receiver], amount);\n', '\n', '    // This will make the mint transaction apper in EtherScan.io\n', '    // We can remove this after there is a standardized minting event\n', '    Transfer(0, receiver, amount);\n', '  }\n', '\n', '  /**\n', '   * Owner can allow a crowdsale contract to mint new tokens.\n', '   */\n', '  function setMintAgent(address addr, bool state) onlyOwner canMint public {\n', '    mintAgents[addr] = state;\n', '    MintingAgentChanged(addr, state);\n', '  }\n', '\n', '  modifier onlyMintAgent() {\n', '    // Only crowdsale contracts are allowed to mint new tokens\n', '    require(mintAgents[msg.sender]);\n', '    // if(!mintAgents[msg.sender]) {\n', '    //     throw;\n', '    // }\n', '    _;\n', '  }\n', '\n', '  /** Make sure we are not done yet. */\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    //if(mintingFinished) throw;\n', '    _;\n', '  }\n', '}\n', '\n', '/**\n', ' * A crowdsaled token.\n', ' *\n', ' * An ERC-20 token designed specifically for crowdsales with investor protection and further development path.\n', ' *\n', ' * - The token transfer() is disabled until the crowdsale is over\n', ' * - The token contract gives an opt-in upgrade path to a new contract\n', ' * - The same token can be part of several crowdsales through approve() mechanism\n', ' * - The token can be capped (supply set in the constructor) or uncapped (crowdsale contract can mint new tokens)\n', ' *\n', ' */\n', 'contract CrowdsaleToken is ReleasableToken, MintableToken, UpgradeableToken {\n', '\n', '  event UpdatedTokenInformation(string newName, string newSymbol);\n', '\n', '  string public name;\n', '\n', '  string public symbol;\n', '\n', '  uint8 public decimals;\n', '\n', '  /**\n', '   * Construct the token.\n', '   *\n', '   * This token must be created through a team multisig wallet, so that it is owned by that wallet.\n', '   *\n', '   * @param _name Token name\n', '   * @param _symbol Token symbol - should be all caps\n', '   * @param _initialSupply How many tokens we start with\n', '   * @param _decimals Number of decimal places\n', '   * @param _mintable Are new tokens created over the crowdsale or do we distribute only the initial supply? Note that when the token becomes transferable the minting always ends.\n', '   */\n', '  function CrowdsaleToken(string _name, string _symbol, uint _initialSupply, uint8 _decimals, bool _mintable)\n', '    UpgradeableToken(msg.sender) {\n', '\n', '    // Create any address, can be transferred\n', '    // to team multisig via changeOwner(),\n', '    // also remember to call setUpgradeMaster()\n', '    owner = msg.sender;\n', '\n', '    name = _name;\n', '    symbol = _symbol;\n', '\n', '    totalSupply = _initialSupply;\n', '\n', '    decimals = _decimals;\n', '\n', '    // Create initially all balance on the team multisig\n', '    balances[owner] = totalSupply;\n', '\n', '    if(totalSupply > 0) {\n', '      Minted(owner, totalSupply);\n', '    }\n', '\n', '    // No more new supply allowed after the token creation\n', '    if(!_mintable) {\n', '      mintingFinished = true;\n', '      require(totalSupply != 0);\n', '      // if(totalSupply == 0) {\n', '      //   throw; // Cannot create a token without supply and no minting\n', '      // }\n', '    }\n', '  }\n', '\n', '  /**\n', '   * When token is released to be transferable, enforce no new tokens can be created.\n', '   */\n', '  function releaseTokenTransfer() public onlyReleaseAgent {\n', '    mintingFinished = true;\n', '    super.releaseTokenTransfer();\n', '  }\n', '\n', '  /**\n', '   * Allow upgrade agent functionality kick in only if the crowdsale was success.\n', '   */\n', '  function canUpgrade() public constant returns(bool) {\n', '    return released && super.canUpgrade();\n', '  }\n', '\n', '  /**\n', '   * Owner can update token information here\n', '   */\n', '  function setTokenInformation(string _name, string _symbol) onlyOwner {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    UpdatedTokenInformation(name, symbol);\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * Finalize agent defines what happens at the end of succeseful crowdsale.\n', ' *\n', ' * - Allocate tokens for founders, bounties and community\n', ' * - Make tokens transferable\n', ' * - etc.\n', ' */\n', 'contract FinalizeAgent {\n', '\n', '  function isFinalizeAgent() public constant returns(bool) {\n', '    return true;\n', '  }\n', '\n', '  /** Return true if we can run finalizeCrowdsale() properly.\n', '   *\n', '   * This is a safety check function that doesn&#39;t allow crowdsale to begin\n', '   * unless the finalizer has been set up properly.\n', '   */\n', '  function isSane() public constant returns (bool);\n', '\n', '  /** Called once by crowdsale finalize() if the sale was success. */\n', '  function finalizeCrowdsale();\n', '\n', '}\n', '\n', '/**\n', ' * Interface for defining crowdsale pricing.\n', ' */\n', 'contract PricingStrategy {\n', '\n', '  /** Interface declaration. */\n', '  function isPricingStrategy() public constant returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  /** Self check if all references are correctly set.\n', '   *\n', '   * Checks that pricing strategy matches crowdsale parameters.\n', '   */\n', '  function isSane(address crowdsale) public constant returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * When somebody tries to buy tokens for X eth, calculate how many tokens they get.\n', '   *\n', '   *\n', '   * @param value - What is the value of the transaction send in as wei\n', '   * @param tokensSold - how much tokens have been sold this far\n', '   * @param weiRaised - how much money has been raised this far\n', '   * @param msgSender - who is the investor of this transaction\n', '   * @param decimals - how many decimal units the token has\n', '   * @return Amount of tokens the investor receives\n', '   */\n', '  function calculatePrice(uint value, uint weiRaised, uint tokensSold, address msgSender, uint decimals) public constant returns (uint tokenAmount);\n', '}\n', '\n', '/*\n', ' * Haltable\n', ' *\n', ' * Abstract contract that allows children to implement an\n', ' * emergency stop mechanism. Differs from Pausable by causing a throw when in halt mode.\n', ' *\n', ' *\n', ' * Originally envisioned in FirstBlood ICO contract.\n', ' */\n', 'contract Haltable is Ownable {\n', '  bool public halted;\n', '\n', '  modifier stopInEmergency {\n', '    require(!halted);\n', '    //if (halted) throw;\n', '    _;\n', '  }\n', '\n', '  modifier onlyInEmergency {\n', '    require(halted);\n', '    //if (!halted) throw;\n', '    _;\n', '  }\n', '\n', '  // called by the owner on emergency, triggers stopped state\n', '  function halt() external onlyOwner {\n', '    halted = true;\n', '  }\n', '\n', '  // called by the owner on end of emergency, returns to normal state\n', '  function unhalt() external onlyOwner onlyInEmergency {\n', '    halted = false;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * Abstract base contract for token sales.\n', ' *\n', ' * Handle\n', ' * - start and end dates\n', ' * - accepting investments\n', ' * - minimum funding goal and refund\n', ' * - various statistics during the crowdfund\n', ' * - different pricing strategies\n', ' * - different investment policies (require server side customer id, allow only whitelisted addresses)\n', ' *\n', ' */\n', 'contract Crowdsale is Haltable, SafeMathLib {\n', '\n', '  /* Max investment count when we are still allowed to change the multisig address */\n', '  uint public MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE = 5;\n', '\n', '  /* The token we are selling */\n', '  FractionalERC20 public token;\n', '\n', '  /* How we are going to price our offering */\n', '  PricingStrategy public pricingStrategy;\n', '\n', '  /* Post-success callback */\n', '  FinalizeAgent public finalizeAgent;\n', '\n', '  /* tokens will be transfered from this address */\n', '  address public multisigWallet;\n', '\n', '  /* if the funding goal is not reached, investors may withdraw their funds */\n', '  uint public minimumFundingGoal;\n', '\n', '  /* the UNIX timestamp start date of the crowdsale */\n', '  uint public startsAt;\n', '\n', '  /* the UNIX timestamp end date of the crowdsale */\n', '  uint public endsAt;\n', '\n', '  /* the number of tokens already sold through this contract*/\n', '  uint public tokensSold = 0;\n', '\n', '  /* How many wei of funding we have raised */\n', '  uint public weiRaised = 0;\n', '\n', '  /* How many distinct addresses have invested */\n', '  uint public investorCount = 0;\n', '\n', '  /* How much wei we have returned back to the contract after a failed crowdfund. */\n', '  uint public loadedRefund = 0;\n', '\n', '  /* How much wei we have given back to investors.*/\n', '  uint public weiRefunded = 0;\n', '\n', '  /* Has this crowdsale been finalized */\n', '  bool public finalized;\n', '\n', '  /* Do we need to have unique contributor id for each customer */\n', '  bool public requireCustomerId;\n', '\n', '  /**\n', '    * Do we verify that contributor has been cleared on the server side (accredited investors only).\n', '    * This method was first used in FirstBlood crowdsale to ensure all contributors have accepted terms on sale (on the web).\n', '    */\n', '  bool public requiredSignedAddress;\n', '\n', '  /* Server side address that signed allowed contributors (Ethereum addresses) that can participate the crowdsale */\n', '  address public signerAddress;\n', '\n', '  /** How much ETH each address has invested to this crowdsale */\n', '  mapping (address => uint256) public investedAmountOf;\n', '\n', '  /** How much tokens this crowdsale has credited for each investor address */\n', '  mapping (address => uint256) public tokenAmountOf;\n', '\n', '  /** Addresses that are allowed to invest even before ICO offical opens. For testing, for ICO partners, etc. */\n', '  mapping (address => bool) public earlyParticipantWhitelist;\n', '\n', '  /** This is for manul testing for the interaction from owner wallet. You can set it to any value and inspect this in blockchain explorer to see that crowdsale interaction works. */\n', '  uint public ownerTestValue;\n', '\n', '  /** State machine\n', '   *\n', '   * - Preparing: All contract initialization calls and variables have not been set yet\n', '   * - Prefunding: We have not passed start time yet\n', '   * - Funding: Active crowdsale\n', '   * - Success: Minimum funding goal reached\n', '   * - Failure: Minimum funding goal not reached before ending time\n', '   * - Finalized: The finalized has been called and succesfully executed\n', '   * - Refunding: Refunds are loaded on the contract for reclaim.\n', '   */\n', '  enum State{Unknown, Preparing, PreFunding, Funding, Success, Failure, Finalized, Refunding}\n', '\n', '  // A new investment was made\n', '  event Invested(address investor, uint weiAmount, uint tokenAmount, uint128 customerId);\n', '\n', '  // Refund was processed for a contributor\n', '  event Refund(address investor, uint weiAmount);\n', '\n', '  // The rules were changed what kind of investments we accept\n', '  event InvestmentPolicyChanged(bool requireCustomerId, bool requiredSignedAddress, address signerAddress);\n', '\n', '  // Address early participation whitelist status changed\n', '  event Whitelisted(address addr, bool status);\n', '\n', '  // Crowdsale end time has been changed\n', '  event EndsAtChanged(uint endsAt);\n', '\n', '  // Crowdsale start time has been changed\n', '  event StartsAtChanged(uint startsAt);\n', '\n', '  function Crowdsale(address _token, PricingStrategy _pricingStrategy, address _multisigWallet, uint _start, uint _end, uint _minimumFundingGoal) {\n', '\n', '    owner = msg.sender;\n', '\n', '    token = FractionalERC20(_token);\n', '\n', '    setPricingStrategy(_pricingStrategy);\n', '\n', '    multisigWallet = _multisigWallet;\n', '    require(multisigWallet != 0);\n', '    // if(multisigWallet == 0) {\n', '    //     throw;\n', '    // }\n', '\n', '    require(_start != 0);\n', '    // if(_start == 0) {\n', '    //     throw;\n', '    // }\n', '\n', '    startsAt = _start;\n', '\n', '    require(_end != 0);\n', '    // if(_end == 0) {\n', '    //     throw;\n', '    // }\n', '\n', '    endsAt = _end;\n', '\n', '    // Don&#39;t mess the dates\n', '    require(startsAt < endsAt);\n', '    // if(startsAt >= endsAt) {\n', '    //     throw;\n', '    // }\n', '\n', '    // Minimum funding goal can be zero\n', '    minimumFundingGoal = _minimumFundingGoal;\n', '  }\n', '\n', '  /**\n', '   * Don&#39;t expect to just send in money and get tokens.\n', '   */\n', '  function() payable {\n', '    throw;\n', '  }\n', '\n', '  /**\n', '   * Make an investment.\n', '   *\n', '   * Crowdsale must be running for one to invest.\n', '   * We must have not pressed the emergency brake.\n', '   *\n', '   * @param receiver The Ethereum address who receives the tokens\n', '   * @param customerId (optional) UUID v4 to track the successful payments on the server side\n', '   *\n', '   */\n', '  function investInternal(address receiver, uint128 customerId) stopInEmergency private {\n', '\n', '    // Determine if it&#39;s a good time to accept investment from this participant\n', '    if(getState() == State.PreFunding) {\n', '      // Are we whitelisted for early deposit\n', '      require(earlyParticipantWhitelist[receiver]);\n', '      // if(!earlyParticipantWhitelist[receiver]) {\n', '      //   throw;\n', '      // }\n', '    } else if(getState() == State.Funding) {\n', '      // Retail participants can only come in when the crowdsale is running\n', '      // pass\n', '    } else {\n', '      // Unwanted state\n', '      throw;\n', '    }\n', '\n', '    uint weiAmount = msg.value;\n', '    uint tokenAmount = pricingStrategy.calculatePrice(weiAmount, weiRaised, tokensSold, msg.sender, token.decimals());\n', '\n', '    require(tokenAmount != 0);\n', '    // if(tokenAmount == 0) {\n', '    //   // Dust transaction\n', '    //   throw;\n', '    // }\n', '\n', '    if(investedAmountOf[receiver] == 0) {\n', '       // A new investor\n', '       investorCount++;\n', '    }\n', '\n', '    // Update investor\n', '    investedAmountOf[receiver] = safeAdd(investedAmountOf[receiver],weiAmount);\n', '    tokenAmountOf[receiver] = safeAdd(tokenAmountOf[receiver],tokenAmount);\n', '\n', '    // Update totals\n', '    weiRaised = safeAdd(weiRaised,weiAmount);\n', '    tokensSold = safeAdd(tokensSold,tokenAmount);\n', '\n', '    // Check that we did not bust the cap\n', '    require(!isBreakingCap(weiAmount, tokenAmount, weiRaised, tokensSold));\n', '    // if(isBreakingCap(weiAmount, tokenAmount, weiRaised, tokensSold)) {\n', '    //   throw;\n', '    // }\n', '\n', '    assignTokens(receiver, tokenAmount);\n', '\n', '    // Pocket the money\n', '    if(!multisigWallet.send(weiAmount)) throw;\n', '\n', '    // Tell us invest was success\n', '    Invested(receiver, weiAmount, tokenAmount, customerId);\n', '  }\n', '\n', '  /**\n', '   * Preallocate tokens for the early investors.\n', '   *\n', '   * Preallocated tokens have been sold before the actual crowdsale opens.\n', '   * This function mints the tokens and moves the crowdsale needle.\n', '   *\n', '   * Investor count is not handled; it is assumed this goes for multiple investors\n', '   * and the token distribution happens outside the smart contract flow.\n', '   *\n', '   * No money is exchanged, as the crowdsale team already have received the payment.\n', '   *\n', '   * @param fullTokens tokens as full tokens - decimal places added internally\n', '   * @param weiPrice Price of a single full token in wei\n', '   *\n', '   */\n', '  function preallocate(address receiver, uint fullTokens, uint weiPrice) public onlyOwner {\n', '\n', '    uint tokenAmount = fullTokens * 10**uint(token.decimals());\n', '    uint weiAmount = weiPrice * fullTokens; // This can be also 0, we give out tokens for free\n', '\n', '    weiRaised = safeAdd(weiRaised,weiAmount);\n', '    tokensSold = safeAdd(tokensSold,tokenAmount);\n', '\n', '    investedAmountOf[receiver] = safeAdd(investedAmountOf[receiver],weiAmount);\n', '    tokenAmountOf[receiver] = safeAdd(tokenAmountOf[receiver],tokenAmount);\n', '\n', '    assignTokens(receiver, tokenAmount);\n', '\n', '    // Tell us invest was success\n', '    Invested(receiver, weiAmount, tokenAmount, 0);\n', '  }\n', '\n', '  /**\n', '   * Allow anonymous contributions to this crowdsale.\n', '   */\n', '  // function investWithSignedAddress(address addr, uint128 customerId, uint8 v, bytes32 r, bytes32 s) public payable {\n', '  //    bytes32 hash = sha256(addr);\n', '  //    if (ecrecover(hash, v, r, s) != signerAddress) throw;\n', '  //    require(customerId != 0);\n', '  //    //if(customerId == 0) throw;  // UUIDv4 sanity check\n', '  //    investInternal(addr, customerId);\n', '  // }\n', '\n', '  /**\n', '   * Track who is the customer making the payment so we can send thank you email.\n', '   */\n', '  function investWithCustomerId(address addr, uint128 customerId) public payable {\n', '    require(!requiredSignedAddress);\n', '    //if(requiredSignedAddress) throw; // Crowdsale allows only server-side signed participants\n', '    \n', '    require(customerId != 0);\n', '    //if(customerId == 0) throw;  // UUIDv4 sanity check\n', '    investInternal(addr, customerId);\n', '  }\n', '\n', '  /**\n', '   * Allow anonymous contributions to this crowdsale.\n', '   */\n', '  function invest(address addr) public payable {\n', '    require(!requireCustomerId);\n', '    //if(requireCustomerId) throw; // Crowdsale needs to track partipants for thank you email\n', '    \n', '    require(!requiredSignedAddress);\n', '    //if(requiredSignedAddress) throw; // Crowdsale allows only server-side signed participants\n', '    investInternal(addr, 0);\n', '  }\n', '\n', '  /**\n', '   * Invest to tokens, recognize the payer and clear his address.\n', '   *\n', '   */\n', '  \n', '  // function buyWithSignedAddress(uint128 customerId, uint8 v, bytes32 r, bytes32 s) public payable {\n', '  //   investWithSignedAddress(msg.sender, customerId, v, r, s);\n', '  // }\n', '\n', '  /**\n', '   * Invest to tokens, recognize the payer.\n', '   *\n', '   */\n', '  function buyWithCustomerId(uint128 customerId) public payable {\n', '    investWithCustomerId(msg.sender, customerId);\n', '  }\n', '\n', '  /**\n', '   * The basic entry point to participate the crowdsale process.\n', '   *\n', '   * Pay for funding, get invested tokens back in the sender address.\n', '   */\n', '  function buy() public payable {\n', '    invest(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * Finalize a succcesful crowdsale.\n', '   *\n', '   * The owner can triggre a call the contract that provides post-crowdsale actions, like releasing the tokens.\n', '   */\n', '  function finalize() public inState(State.Success) onlyOwner stopInEmergency {\n', '\n', '    // Already finalized\n', '    require(!finalized);\n', '    // if(finalized) {\n', '    //   throw;\n', '    // }\n', '\n', '    // Finalizing is optional. We only call it if we are given a finalizing agent.\n', '    if(address(finalizeAgent) != 0) {\n', '      finalizeAgent.finalizeCrowdsale();\n', '    }\n', '\n', '    finalized = true;\n', '  }\n', '\n', '  /**\n', '   * Allow to (re)set finalize agent.\n', '   *\n', '   * Design choice: no state restrictions on setting this, so that we can fix fat finger mistakes.\n', '   */\n', '  function setFinalizeAgent(FinalizeAgent addr) onlyOwner {\n', '    finalizeAgent = addr;\n', '\n', '    // Don&#39;t allow setting bad agent\n', '    require(finalizeAgent.isFinalizeAgent());\n', '    // if(!finalizeAgent.isFinalizeAgent()) {\n', '    //   throw;\n', '    // }\n', '  }\n', '\n', '  /**\n', '   * Set policy do we need to have server-side customer ids for the investments.\n', '   *\n', '   */\n', '  function setRequireCustomerId(bool value) onlyOwner {\n', '    requireCustomerId = value;\n', '    InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);\n', '  }\n', '\n', '  /**\n', '   * Set policy if all investors must be cleared on the server side first.\n', '   *\n', '   * This is e.g. for the accredited investor clearing.\n', '   *\n', '   */\n', '  // function setRequireSignedAddress(bool value, address _signerAddress) onlyOwner {\n', '  //   requiredSignedAddress = value;\n', '  //   signerAddress = _signerAddress;\n', '  //   InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);\n', '  // }\n', '\n', '  /**\n', '   * Allow addresses to do early participation.\n', '   *\n', '   * TODO: Fix spelling error in the name\n', '   */\n', '  function setEarlyParicipantWhitelist(address addr, bool status) onlyOwner {\n', '    earlyParticipantWhitelist[addr] = status;\n', '    Whitelisted(addr, status);\n', '  }\n', '\n', '  /**\n', '   * Allow crowdsale owner to close early or extend the crowdsale.\n', '   *\n', '   * This is useful e.g. for a manual soft cap implementation:\n', '   * - after X amount is reached determine manual closing\n', '   *\n', '   * This may put the crowdsale to an invalid state,\n', '   * but we trust owners know what they are doing.\n', '   *\n', '   */\n', '  function setEndsAt(uint time) onlyOwner {\n', '\n', '    if(now > time) {\n', '      throw; // Don&#39;t change past\n', '    }\n', '\n', '    endsAt = time;\n', '    EndsAtChanged(endsAt);\n', '  }\n', '\n', '  /**\n', '   * Allow crowdsale owner to start early or extend the crowdsale.\n', '   *\n', '   * This is useful if the beginning of the crowdsale is not determined\n', '   *\n', '   * This may put the crowdsale to an invalid state,\n', '   * but we trust owners know what they are doing.\n', '   *\n', '   */\n', '  function setStartsAt(uint time) onlyOwner {\n', '\n', '    // new start time must be 10 minutes ahead from current time\n', '    if(now+600 > time) {\n', '      throw; // Don&#39;t change past\n', '    }\n', '\n', '    startsAt = time;\n', '    StartsAtChanged(startsAt);\n', '  }\n', '\n', '  /**\n', '   * Allow to (re)set pricing strategy.\n', '   *\n', '   * Design choice: no state restrictions on the set, so that we can fix fat finger mistakes.\n', '   */\n', '  function setPricingStrategy(PricingStrategy _pricingStrategy) onlyOwner {\n', '    pricingStrategy = _pricingStrategy;\n', '\n', '    // Don&#39;t allow setting bad agent\n', '    require(pricingStrategy.isPricingStrategy());\n', '    // if(!pricingStrategy.isPricingStrategy()) {\n', '    //   throw;\n', '    // }\n', '  }\n', '\n', '  /**\n', '   * Allow to change the team multisig address in the case of emergency.\n', '   *\n', '   * This allows to save a deployed crowdsale wallet in the case the crowdsale has not yet begun\n', '   * (we have done only few test transactions). After the crowdsale is going\n', '   * then multisig address stays locked for the safety reasons.\n', '   */\n', '  function setMultisig(address addr) public onlyOwner {\n', '\n', '    // Change\n', '    if(investorCount > MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE) {\n', '      throw;\n', '    }\n', '\n', '    multisigWallet = addr;\n', '  }\n', '\n', '  /**\n', '   * Allow load refunds back on the contract for the refunding.\n', '   *\n', '   * The team can transfer the funds back on the smart contract in the case the minimum goal was not reached..\n', '   */\n', '  function loadRefund() public payable inState(State.Failure) {\n', '    require(msg.value != 0);\n', '    //if(msg.value == 0) throw;\n', '    loadedRefund = safeAdd(loadedRefund,msg.value);\n', '  }\n', '\n', '  /**\n', '   * Investors can claim refund.\n', '   */\n', '  function refund() public inState(State.Refunding) {\n', '    uint256 weiValue = investedAmountOf[msg.sender];\n', '    require(weiValue != 0);\n', '    //if (weiValue == 0) throw;\n', '    investedAmountOf[msg.sender] = 0;\n', '    weiRefunded = safeAdd(weiRefunded,weiValue);\n', '    Refund(msg.sender, weiValue);\n', '    if (!msg.sender.send(weiValue)) throw;\n', '  }\n', '\n', '  /**\n', '   * @return true if the crowdsale has raised enough money to be a succes\n', '   */\n', '  function isMinimumGoalReached() public constant returns (bool reached) {\n', '    return weiRaised >= minimumFundingGoal;\n', '  }\n', '\n', '  /**\n', '   * Check if the contract relationship looks good.\n', '   */\n', '  function isFinalizerSane() public constant returns (bool sane) {\n', '    return finalizeAgent.isSane();\n', '  }\n', '\n', '  /**\n', '   * Check if the contract relationship looks good.\n', '   */\n', '  function isPricingSane() public constant returns (bool sane) {\n', '    return pricingStrategy.isSane(address(this));\n', '  }\n', '\n', '  /**\n', '   * Crowdfund state machine management.\n', '   *\n', '   * We make it a function and do not assign the result to a variable, so there is no chance of the variable being stale.\n', '   */\n', '  function getState() public constant returns (State) {\n', '    if(finalized) return State.Finalized;\n', '    else if (address(finalizeAgent) == 0) return State.Preparing;\n', '    else if (!finalizeAgent.isSane()) return State.Preparing;\n', '    else if (!pricingStrategy.isSane(address(this))) return State.Preparing;\n', '    else if (block.timestamp < startsAt) return State.PreFunding;\n', '    else if (block.timestamp <= endsAt && !isCrowdsaleFull()) return State.Funding;\n', '    else if (isMinimumGoalReached()) return State.Success;\n', '    else if (!isMinimumGoalReached() && weiRaised > 0 && loadedRefund >= weiRaised) return State.Refunding;\n', '    else return State.Failure;\n', '  }\n', '\n', '  /** This is for manual testing of multisig wallet interaction */\n', '  function setOwnerTestValue(uint val) onlyOwner {\n', '    ownerTestValue = val;\n', '  }\n', '\n', '  /** Interface marker. */\n', '  function isCrowdsale() public constant returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  //\n', '  // Modifiers\n', '  //\n', '\n', '  /** Modified allowing execution only if the crowdsale is currently running.  */\n', '  modifier inState(State state) {\n', '    require(getState() == state);\n', '    //if(getState() != state) throw;\n', '    _;\n', '  }\n', '\n', '\n', '  //\n', '  // Abstract functions\n', '  //\n', '\n', '  /**\n', '   * Check if the current invested breaks our cap rules.\n', '   *\n', '   *\n', '   * The child contract must define their own cap setting rules.\n', '   * We allow a lot of flexibility through different capping strategies (ETH, token count)\n', '   * Called from invest().\n', '   *\n', '   * @param weiAmount The amount of wei the investor tries to invest in the current transaction\n', '   * @param tokenAmount The amount of tokens we try to give to the investor in the current transaction\n', '   * @param weiRaisedTotal What would be our total raised balance after this transaction\n', '   * @param tokensSoldTotal What would be our total sold tokens count after this transaction\n', '   *\n', '   * @return true if taking this investment would break our cap rules\n', '   */\n', '  function isBreakingCap(uint weiAmount, uint tokenAmount, uint weiRaisedTotal, uint tokensSoldTotal) constant returns (bool limitBroken);\n', '  /**\n', '   * Check if the current crowdsale is full and we can no longer sell any tokens.\n', '   */\n', '  function isCrowdsaleFull() public constant returns (bool);\n', '\n', '  /**\n', '   * Create new tokens or transfer issued tokens to the investor depending on the cap model.\n', '   */\n', '  function assignTokens(address receiver, uint tokenAmount) private;\n', '}\n', '\n', '\n', '/**\n', ' * At the end of the successful crowdsale allocate % bonus of tokens to the team.\n', ' *\n', ' * Unlock tokens.\n', ' *\n', ' * BonusAllocationFinal must be set as the minting agent for the MintableToken.\n', ' *\n', ' */\n', 'contract BonusFinalizeAgent is FinalizeAgent, SafeMathLib {\n', '\n', '  CrowdsaleToken public token;\n', '  Crowdsale public crowdsale;\n', '\n', '  /** Total percent of tokens minted to the team at the end of the sale as base points (0.0001) */\n', '  uint public totalMembers;\n', '  uint public allocatedBonus;\n', '  mapping (address=>uint) bonusOf;\n', '  /** Where we move the tokens at the end of the sale. */\n', '  address[] public teamAddresses;\n', '\n', '\n', '  function BonusFinalizeAgent(CrowdsaleToken _token, Crowdsale _crowdsale, uint[] _bonusBasePoints, address[] _teamAddresses) {\n', '    token = _token;\n', '    crowdsale = _crowdsale;\n', '\n', '    //crowdsale address must not be 0\n', '    require(address(crowdsale) != 0);\n', '\n', '    //bonus & team address array size must match\n', '    require(_bonusBasePoints.length == _teamAddresses.length);\n', '\n', '    totalMembers = _teamAddresses.length;\n', '    teamAddresses = _teamAddresses;\n', '    \n', '    //if any of the bonus is 0 throw\n', '    // otherwise sum it up in totalAllocatedBonus\n', '    for (uint i=0;i<totalMembers;i++){\n', '      require(_bonusBasePoints[i] != 0);\n', '      //if(_bonusBasePoints[i] == 0) throw;\n', '    }\n', '\n', '    //if any of the address is 0 or invalid throw\n', '    //otherwise initialize the bonusOf array\n', '    for (uint j=0;j<totalMembers;j++){\n', '      require(_teamAddresses[j] != 0);\n', '      //if(_teamAddresses[j] == 0) throw;\n', '      bonusOf[_teamAddresses[j]] = _bonusBasePoints[j];\n', '    }\n', '  }\n', '\n', '  /* Can we run finalize properly */\n', '  function isSane() public constant returns (bool) {\n', '    return (token.mintAgents(address(this)) == true) && (token.releaseAgent() == address(this));\n', '  }\n', '\n', '  /** Called once by crowdsale finalize() if the sale was success. */\n', '  function finalizeCrowdsale() {\n', '\n', '    // if finalized is not being called from the crowdsale \n', '    // contract then throw\n', '    require(msg.sender == address(crowdsale));\n', '\n', '    // if(msg.sender != address(crowdsale)) {\n', '    //   throw;\n', '    // }\n', '\n', '    // get the total sold tokens count.\n', '    uint tokensSold = crowdsale.tokensSold();\n', '\n', '    for (uint i=0;i<totalMembers;i++){\n', '      allocatedBonus = safeMul(tokensSold, bonusOf[teamAddresses[i]]) / 10000;\n', '      // move tokens to the team multisig wallet\n', '      token.mint(teamAddresses[i], allocatedBonus);\n', '    }\n', '\n', '    // Make token transferable\n', '    // realease them in the wild\n', '    // Hell yeah!!! we did it.\n', '    token.releaseTokenTransfer();\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * ICO crowdsale contract that is capped by amout of ETH.\n', ' *\n', ' * - Tokens are dynamically created during the crowdsale\n', ' *\n', ' *\n', ' */\n', 'contract MintedEthCappedCrowdsale is Crowdsale {\n', '\n', '  /* Maximum amount of wei this crowdsale can raise. */\n', '  uint public weiCap;\n', '\n', '  function MintedEthCappedCrowdsale(address _token, PricingStrategy _pricingStrategy, address _multisigWallet, uint _start, uint _end, uint _minimumFundingGoal, uint _weiCap) Crowdsale(_token, _pricingStrategy, _multisigWallet, _start, _end, _minimumFundingGoal) {\n', '    weiCap = _weiCap;\n', '  }\n', '\n', '  /**\n', '   * Called from invest() to confirm if the curret investment does not break our cap rule.\n', '   */\n', '  function isBreakingCap(uint weiAmount, uint tokenAmount, uint weiRaisedTotal, uint tokensSoldTotal) constant returns (bool limitBroken) {\n', '    return weiRaisedTotal > weiCap;\n', '  }\n', '\n', '  function isCrowdsaleFull() public constant returns (bool) {\n', '    return weiRaised >= weiCap;\n', '  }\n', '\n', '  /**\n', '   * Dynamically create tokens and assign them to the investor.\n', '   */\n', '  function assignTokens(address receiver, uint tokenAmount) private {\n', '    MintableToken mintableToken = MintableToken(token);\n', '    mintableToken.mint(receiver, tokenAmount);\n', '  }\n', '}\n', '\n', '/** Tranche based pricing with special support for pre-ico deals.\n', ' *      Implementing "first price" tranches, meaning, that if byers order is\n', ' *      covering more than one tranche, the price of the lowest tranche will apply\n', ' *      to the whole order.\n', ' */\n', 'contract EthTranchePricing is PricingStrategy, Ownable, SafeMathLib {\n', '\n', '  uint public constant MAX_TRANCHES = 10;\n', ' \n', ' \n', '  // This contains all pre-ICO addresses, and their prices (weis per token)\n', '  mapping (address => uint) public preicoAddresses;\n', '\n', '  /**\n', '  * Define pricing schedule using tranches.\n', '  */\n', '\n', '  struct Tranche {\n', '      // Amount in weis when this tranche becomes active\n', '      uint amount;\n', '      // How many tokens per wei you will get while this tranche is active\n', '      uint price;\n', '  }\n', '\n', '  // Store tranches in a fixed array, so that it can be seen in a blockchain explorer\n', '  // Tranche 0 is always (0, 0)\n', '  // (TODO: change this when we confirm dynamic arrays are explorable)\n', '  Tranche[10] public tranches;\n', '\n', '  // How many active tranches we have\n', '  uint public trancheCount;\n', '\n', '  /// @dev Contruction, creating a list of tranches\n', '  /// @param _tranches uint[] tranches Pairs of (start amount, price)\n', '  function EthTranchePricing(uint[] _tranches) {\n', '    // [ 0, 666666666666666,\n', '    //   3000000000000000000000, 769230769230769,\n', '    //   5000000000000000000000, 909090909090909,\n', '    //   8000000000000000000000, 952380952380952,\n', '    //   2000000000000000000000, 1000000000000000 ]\n', '    // Need to have tuples, length check\n', '    require(!(_tranches.length % 2 == 1 || _tranches.length >= MAX_TRANCHES*2));\n', '    // if(_tranches.length % 2 == 1 || _tranches.length >= MAX_TRANCHES*2) {\n', '    //   throw;\n', '    // }\n', '    trancheCount = _tranches.length / 2;\n', '    uint highestAmount = 0;\n', '    for(uint i=0; i<_tranches.length/2; i++) {\n', '      tranches[i].amount = _tranches[i*2];\n', '      tranches[i].price = _tranches[i*2+1];\n', '      // No invalid steps\n', '      require(!((highestAmount != 0) && (tranches[i].amount <= highestAmount)));\n', '      // if((highestAmount != 0) && (tranches[i].amount <= highestAmount)) {\n', '      //   throw;\n', '      // }\n', '      highestAmount = tranches[i].amount;\n', '    }\n', '\n', '    // We need to start from zero, otherwise we blow up our deployment\n', '    require(tranches[0].amount == 0);\n', '    // if(tranches[0].amount != 0) {\n', '    //   throw;\n', '    // }\n', '\n', '    // Last tranche price must be zero, terminating the crowdale\n', '    require(tranches[trancheCount-1].price == 0);\n', '    // if(tranches[trancheCount-1].price != 0) {\n', '    //   throw;\n', '    // }\n', '  }\n', '\n', '  /// @dev This is invoked once for every pre-ICO address, set pricePerToken\n', '  ///      to 0 to disable\n', '  /// @param preicoAddress PresaleFundCollector address\n', '  /// @param pricePerToken How many weis one token cost for pre-ico investors\n', '  function setPreicoAddress(address preicoAddress, uint pricePerToken)\n', '    public\n', '    onlyOwner\n', '  {\n', '    preicoAddresses[preicoAddress] = pricePerToken;\n', '  }\n', '\n', '  /// @dev Iterate through tranches. You reach end of tranches when price = 0\n', '  /// @return tuple (time, price)\n', '  function getTranche(uint n) public constant returns (uint, uint) {\n', '    return (tranches[n].amount, tranches[n].price);\n', '  }\n', '\n', '  function getFirstTranche() private constant returns (Tranche) {\n', '    return tranches[0];\n', '  }\n', '\n', '  function getLastTranche() private constant returns (Tranche) {\n', '    return tranches[trancheCount-1];\n', '  }\n', '\n', '  function getPricingStartsAt() public constant returns (uint) {\n', '    return getFirstTranche().amount;\n', '  }\n', '\n', '  function getPricingEndsAt() public constant returns (uint) {\n', '    return getLastTranche().amount;\n', '  }\n', '\n', '  function isSane(address _crowdsale) public constant returns(bool) {\n', '    // Our tranches are not bound by time, so we can&#39;t really check are we sane\n', '    // so we presume we are ;)\n', '    // In the future we could save and track raised tokens, and compare it to\n', '    // the Crowdsale contract.\n', '    return true;\n', '  }\n', '\n', '  /// @dev Get the current tranche or bail out if we are not in the tranche periods.\n', '  /// @param weiRaised total amount of weis raised, for calculating the current tranche\n', '  /// @return {[type]} [description]\n', '  function getCurrentTranche(uint weiRaised) private constant returns (Tranche) {\n', '    uint i;\n', '    for(i=0; i < tranches.length; i++) {\n', '      if(weiRaised < tranches[i].amount) {\n', '        return tranches[i-1];\n', '      }\n', '    }\n', '  }\n', '\n', '  /// @dev Get the current price.\n', '  /// @param weiRaised total amount of weis raised, for calculating the current tranche\n', '  /// @return The current price or 0 if we are outside trache ranges\n', '  function getCurrentPrice(uint weiRaised) public constant returns (uint result) {\n', '    return getCurrentTranche(weiRaised).price;\n', '  }\n', '\n', '  /// @dev Calculate the current price for buy in amount.\n', '  function calculatePrice(uint value, uint weiRaised, uint tokensSold, address msgSender, uint decimals) public constant returns (uint) {\n', '\n', '    uint multiplier = 10 ** decimals;\n', '\n', '    // This investor is coming through pre-ico\n', '    if(preicoAddresses[msgSender] > 0) {\n', '      return safeMul(value, multiplier) / preicoAddresses[msgSender];\n', '    }\n', '\n', '    uint price = getCurrentPrice(weiRaised);\n', '    \n', '    return safeMul(value, multiplier) / price;\n', '  }\n', '\n', '  function() payable {\n', '    throw; // No money on this contract\n', '  }\n', '\n', '}']