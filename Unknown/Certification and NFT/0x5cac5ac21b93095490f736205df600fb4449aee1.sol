['pragma solidity ^0.4.11;\n', '\n', 'contract token {function transfer(address receiver, uint amount){ }}\n', '\n', 'contract FazBitsCrowdsale {\n', '    uint public amountRaised; uint public resAmount; uint public soldTokens;\n', '    mapping(address => uint256) public balanceOf;\n', '    event GoalReached(address beneficiary, uint amountRaised);\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '    bool public crowdsaleClosed = false;\n', '    bool public minimumTargetReached = false;\n', '\n', '    // initialization\n', '    address public beneficiary = 0x89464d51Af1C6edb2E116c28798C9A06e574d299;/*ifSuccessfulSendTo*/\n', '    uint public price = 0.0015 ether;/*costOfEachToken*/\n', '    uint public minimumTarget = 100 * price;/*minimumTargetInTokens*/\n', '    uint public maximumTarget = 250000 * price;/*maximumTargetInTokens*/\n', '    uint public deadline =  now + 10080 * 1 minutes;/*durationInMinutes*/\n', '    token public tokenReward = token(0xD8a19038Ca6d75227Ad5a5d7ec335a111ad6E141);/*addressOfTokenUsedAsReward*/\n', '\n', '\n', '    // the function without name is the default function that is called whenever anyone sends funds to a contract\n', '    function () payable {\n', '        if (crowdsaleClosed || (maximumTarget - amountRaised) < msg.value) throw;\n', '        uint amount = msg.value;\n', '        balanceOf[msg.sender] += amount;\n', '        amountRaised += amount;\n', '        resAmount += amount;\n', '        soldTokens += amount / price;\n', '        tokenReward.transfer(msg.sender, amount / price);\n', '        FundTransfer(msg.sender, amount, true);\n', '\n', '        if (amountRaised >= minimumTarget && !minimumTargetReached) {\n', '            minimumTargetReached = true;\n', '            GoalReached(beneficiary, minimumTarget);\n', '        }\n', '\n', '        // funds are sending to beneficiary account after minimumTarget will be reached\n', '        if (minimumTargetReached) {\n', '            if (beneficiary.send(amount)) {\n', '                FundTransfer(beneficiary, amount, false);\n', '                resAmount -= amount;\n', '            }\n', '        }\n', '    }\n', '\n', '    // dev function for withdraw any amount from raised funds (activate only if minimumTarget is reached)\n', '    function devWithdrawal(uint num, uint den) {\n', '        if (!minimumTargetReached || !(beneficiary == msg.sender)) throw;\n', '        uint wAmount = num / den;\n', '        if (beneficiary.send(wAmount)) {\n', '            FundTransfer(beneficiary, wAmount, false);\n', '        }\n', '    }\n', '\n', '    // dev function for withdraw amount, which be reserved by minimumTarget (activate only if minimumTarget is reached)\n', '    function devResWithdrawal() {\n', '        if (!minimumTargetReached || !(beneficiary == msg.sender)) throw;\n', '        if (beneficiary.send(resAmount)) {\n', '            FundTransfer(beneficiary, resAmount, false);\n', '            resAmount = 0;\n', '        }\n', '    }\n', '\n', '    // dev function for close crowdsale  \n', '    function closeCrowdsale(bool closeType) {\n', '         if (beneficiary == msg.sender) {\n', '            crowdsaleClosed = closeType;\n', '         }\n', '    }\n', '\n', '\n', '    modifier afterDeadline() { if (now >= deadline) _; }\n', '\n', '    // checks if the minimumTarget has been reached\n', '    function checkTargetReached() afterDeadline {\n', '        if (amountRaised >= minimumTarget) {\n', '            minimumTargetReached = true;\n', '        }\n', '    }\n', '\n', '    // function for return non sold tokens to dev account after crowdsale\n', '    function returnTokens(uint tokensAmount) afterDeadline {\n', '        if (!crowdsaleClosed) throw;\n', '        if (beneficiary == msg.sender) {\n', '            tokenReward.transfer(beneficiary, tokensAmount);\n', '        }\n', '    }\n', '\n', '    // return your funds after deadline if minimumTarget is not reached (activate if crowdsale closing)\n', '    function safeWithdrawal() afterDeadline {\n', '        if (!minimumTargetReached && crowdsaleClosed) {\n', '            uint amount = balanceOf[msg.sender];\n', '            balanceOf[msg.sender] = 0;\n', '            if (amount > 0) {\n', '                if (msg.sender.send(amount)) {\n', '                    FundTransfer(msg.sender, amount, false);\n', '                } else {\n', '                    balanceOf[msg.sender] = amount;\n', '                }\n', '            }\n', '        }\n', '    }\n', '}']
['pragma solidity ^0.4.11;\n', '\n', 'contract token {function transfer(address receiver, uint amount){ }}\n', '\n', 'contract FazBitsCrowdsale {\n', '    uint public amountRaised; uint public resAmount; uint public soldTokens;\n', '    mapping(address => uint256) public balanceOf;\n', '    event GoalReached(address beneficiary, uint amountRaised);\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '    bool public crowdsaleClosed = false;\n', '    bool public minimumTargetReached = false;\n', '\n', '    // initialization\n', '    address public beneficiary = 0x89464d51Af1C6edb2E116c28798C9A06e574d299;/*ifSuccessfulSendTo*/\n', '    uint public price = 0.0015 ether;/*costOfEachToken*/\n', '    uint public minimumTarget = 100 * price;/*minimumTargetInTokens*/\n', '    uint public maximumTarget = 250000 * price;/*maximumTargetInTokens*/\n', '    uint public deadline =  now + 10080 * 1 minutes;/*durationInMinutes*/\n', '    token public tokenReward = token(0xD8a19038Ca6d75227Ad5a5d7ec335a111ad6E141);/*addressOfTokenUsedAsReward*/\n', '\n', '\n', '    // the function without name is the default function that is called whenever anyone sends funds to a contract\n', '    function () payable {\n', '        if (crowdsaleClosed || (maximumTarget - amountRaised) < msg.value) throw;\n', '        uint amount = msg.value;\n', '        balanceOf[msg.sender] += amount;\n', '        amountRaised += amount;\n', '        resAmount += amount;\n', '        soldTokens += amount / price;\n', '        tokenReward.transfer(msg.sender, amount / price);\n', '        FundTransfer(msg.sender, amount, true);\n', '\n', '        if (amountRaised >= minimumTarget && !minimumTargetReached) {\n', '            minimumTargetReached = true;\n', '            GoalReached(beneficiary, minimumTarget);\n', '        }\n', '\n', '        // funds are sending to beneficiary account after minimumTarget will be reached\n', '        if (minimumTargetReached) {\n', '            if (beneficiary.send(amount)) {\n', '                FundTransfer(beneficiary, amount, false);\n', '                resAmount -= amount;\n', '            }\n', '        }\n', '    }\n', '\n', '    // dev function for withdraw any amount from raised funds (activate only if minimumTarget is reached)\n', '    function devWithdrawal(uint num, uint den) {\n', '        if (!minimumTargetReached || !(beneficiary == msg.sender)) throw;\n', '        uint wAmount = num / den;\n', '        if (beneficiary.send(wAmount)) {\n', '            FundTransfer(beneficiary, wAmount, false);\n', '        }\n', '    }\n', '\n', '    // dev function for withdraw amount, which be reserved by minimumTarget (activate only if minimumTarget is reached)\n', '    function devResWithdrawal() {\n', '        if (!minimumTargetReached || !(beneficiary == msg.sender)) throw;\n', '        if (beneficiary.send(resAmount)) {\n', '            FundTransfer(beneficiary, resAmount, false);\n', '            resAmount = 0;\n', '        }\n', '    }\n', '\n', '    // dev function for close crowdsale  \n', '    function closeCrowdsale(bool closeType) {\n', '         if (beneficiary == msg.sender) {\n', '            crowdsaleClosed = closeType;\n', '         }\n', '    }\n', '\n', '\n', '    modifier afterDeadline() { if (now >= deadline) _; }\n', '\n', '    // checks if the minimumTarget has been reached\n', '    function checkTargetReached() afterDeadline {\n', '        if (amountRaised >= minimumTarget) {\n', '            minimumTargetReached = true;\n', '        }\n', '    }\n', '\n', '    // function for return non sold tokens to dev account after crowdsale\n', '    function returnTokens(uint tokensAmount) afterDeadline {\n', '        if (!crowdsaleClosed) throw;\n', '        if (beneficiary == msg.sender) {\n', '            tokenReward.transfer(beneficiary, tokensAmount);\n', '        }\n', '    }\n', '\n', '    // return your funds after deadline if minimumTarget is not reached (activate if crowdsale closing)\n', '    function safeWithdrawal() afterDeadline {\n', '        if (!minimumTargetReached && crowdsaleClosed) {\n', '            uint amount = balanceOf[msg.sender];\n', '            balanceOf[msg.sender] = 0;\n', '            if (amount > 0) {\n', '                if (msg.sender.send(amount)) {\n', '                    FundTransfer(msg.sender, amount, false);\n', '                } else {\n', '                    balanceOf[msg.sender] = amount;\n', '                }\n', '            }\n', '        }\n', '    }\n', '}']
