['pragma solidity ^0.4.11;\n', '\n', '// ==== DISCLAIMER ====\n', '//\n', '// ETHEREUM IS STILL AN EXPEREMENTAL TECHNOLOGY.\n', '// ALTHOUGH THIS SMART CONTRACT WAS CREATED WITH GREAT CARE AND IN THE HOPE OF BEING USEFUL, NO GUARANTEES OF FLAWLESS OPERATION CAN BE GIVEN.\n', '// IN PARTICULAR - SUBTILE BUGS, HACKER ATTACKS OR MALFUNCTION OF UNDERLYING TECHNOLOGY CAN CAUSE UNINTENTIONAL BEHAVIOUR.\n', '// YOU ARE STRONGLY ENCOURAGED TO STUDY THIS SMART CONTRACT CAREFULLY IN ORDER TO UNDERSTAND POSSIBLE EDGE CASES AND RISKS.\n', '// DON&#39;T USE THIS SMART CONTRACT IF YOU HAVE SUBSTANTIAL DOUBTS OR IF YOU DON&#39;T KNOW WHAT YOU ARE DOING.\n', '//\n', '// THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY\n', '// AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n', '// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n', '// OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n', '// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n', '// ====\n', '//\n', '\n', '/// @author Santiment Sagl\n', '/// @title  CrowdsaleMinter\n', '\n', 'contract Base {\n', '\n', '    function max(uint a, uint b) returns (uint) { return a >= b ? a : b; }\n', '    function min(uint a, uint b) returns (uint) { return a <= b ? a : b; }\n', '\n', '    modifier only(address allowed) {\n', '        if (msg.sender != allowed) throw;\n', '        _;\n', '    }\n', '\n', '\n', '    ///@return True if `_addr` is a contract\n', '    function isContract(address _addr) constant internal returns (bool) {\n', '        if (_addr == 0) return false;\n', '        uint size;\n', '        assembly {\n', '            size := extcodesize(_addr)\n', '        }\n', '        return (size > 0);\n', '    }\n', '\n', '    // *************************************************\n', '    // *          reentrancy handling                  *\n', '    // *************************************************\n', '\n', '    //@dev predefined locks (up to uint bit length, i.e. 256 possible)\n', '    uint constant internal L00 = 2 ** 0;\n', '    uint constant internal L01 = 2 ** 1;\n', '    uint constant internal L02 = 2 ** 2;\n', '    uint constant internal L03 = 2 ** 3;\n', '    uint constant internal L04 = 2 ** 4;\n', '    uint constant internal L05 = 2 ** 5;\n', '\n', '    //prevents reentrancy attacs: specific locks\n', '    uint private bitlocks = 0;\n', '    modifier noReentrancy(uint m) {\n', '        var _locks = bitlocks;\n', '        if (_locks & m > 0) throw;\n', '        bitlocks |= m;\n', '        _;\n', '        bitlocks = _locks;\n', '    }\n', '\n', '    modifier noAnyReentrancy {\n', '        var _locks = bitlocks;\n', '        if (_locks > 0) throw;\n', '        bitlocks = uint(-1);\n', '        _;\n', '        bitlocks = _locks;\n', '    }\n', '\n', '    ///@dev empty marking modifier signaling to user of the marked function , that it can cause an reentrant call.\n', '    ///     developer should make the caller function reentrant-safe if it use a reentrant function.\n', '    modifier reentrant { _; }\n', '\n', '}\n', '\n', 'contract MintableToken {\n', '    //target token contract is responsible to accept only authorized mint calls.\n', '    function mint(uint amount, address account);\n', '\n', '    //start the token on minting finished,\n', '    function start();\n', '}\n', '\n', 'contract Owned is Base {\n', '\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    function Owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) only(owner) {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() only(newOwner) {\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '}\n', '\n', 'contract BalanceStorage {\n', '    function balances(address account) public constant returns(uint balance);\n', '}\n', '\n', 'contract AddressList {\n', '    function contains(address addr) public constant returns (bool);\n', '}\n', '\n', 'contract MinMaxWhiteList {\n', '    function allowed(address addr) public constant returns (uint /*finney*/, uint /*finney*/ );\n', '}\n', '\n', 'contract PresaleBonusVoting {\n', '    function rawVotes(address addr) public constant returns (uint rawVote);\n', '}\n', '\n', 'contract CrowdsaleMinter is Owned {\n', '\n', '    string public constant VERSION = "0.2.1-TEST.1";\n', '\n', '    /* ====== configuration START ====== */\n', '    uint public constant COMMUNITY_SALE_START = 3968190; /* approx. 03.07.2017 15:39 */\n', '    uint public constant PRIORITY_SALE_START  = 3968310; /* approx. 30.07.2017 16:00 */\n', '    uint public constant PUBLIC_SALE_START    = 3968430; /* approx. 30.07.2017 16:30 */\n', '    uint public constant PUBLIC_SALE_END      = 3968550; /* approx. 30.07.2017 17:00 */\n', '    uint public constant WITHDRAWAL_END       = 3968670; /* approx. 30.07.2017 17:10 */\n', '\n', '    address public TEAM_GROUP_WALLET           = 0x008cdC9b89AD677CEf7F2C055efC97d3606a50Bd;\n', '    address public ADVISERS_AND_FRIENDS_WALLET = 0x00eCf92fA3678678a1B82899da1307a0083b6379;\n', '\n', '    uint public constant TEAM_BONUS_PER_CENT            = 18;\n', '    uint public constant ADVISORS_AND_PARTNERS_PER_CENT = 10;\n', '\n', '    MintableToken      public TOKEN                    = MintableToken(0x00000000000000000000000000);\n', '\n', '    AddressList        public PRIORITY_ADDRESS_LIST    = AddressList(0x463635eFd22558c64Efa6227A45649eeDc0e4888);\n', '    MinMaxWhiteList    public COMMUNITY_ALLOWANCE_LIST = MinMaxWhiteList(0x3375D3d9df8C67b3D7EBcE220c3DDa4BE03dCE31);\n', '    BalanceStorage     public PRESALE_BALANCES         = BalanceStorage(0x4Fd997Ed7c10DbD04e95d3730cd77D79513076F2);\n', '    PresaleBonusVoting public PRESALE_BONUS_VOTING     = PresaleBonusVoting(0x283a97Af867165169AECe0b2E963b9f0FC7E5b8c);\n', '\n', '    uint public constant COMMUNITY_PLUS_PRIORITY_SALE_CAP_ETH = 5;\n', '    uint public constant MIN_TOTAL_AMOUNT_TO_RECEIVE_ETH = 3;\n', '    uint public constant MAX_TOTAL_AMOUNT_TO_RECEIVE_ETH = 5;\n', '    uint public constant MIN_ACCEPTED_AMOUNT_FINNEY = 500;\n', '    uint public constant TOKEN_PER_ETH = 1000;\n', '    uint public constant PRE_SALE_BONUS_PER_CENT = 54;\n', '\n', '    //constructor\n', '    function CrowdsaleMinter() {\n', '        //check configuration if something in setup is looking weird\n', '        if (\n', '            TOKEN_PER_ETH == 0\n', '            || TEAM_BONUS_PER_CENT + ADVISORS_AND_PARTNERS_PER_CENT >=100\n', '            || MIN_ACCEPTED_AMOUNT_FINNEY < 1\n', '            || owner == 0x0\n', '            || address(COMMUNITY_ALLOWANCE_LIST) == 0x0\n', '            || address(PRIORITY_ADDRESS_LIST) == 0x0\n', '            || address(PRESALE_BONUS_VOTING) == 0x0\n', '            || address(PRESALE_BALANCES) == 0x0\n', '            || COMMUNITY_SALE_START == 0\n', '            || PRIORITY_SALE_START == 0\n', '            || PUBLIC_SALE_START == 0\n', '            || PUBLIC_SALE_END == 0\n', '            || WITHDRAWAL_END == 0\n', '            || MIN_TOTAL_AMOUNT_TO_RECEIVE == 0\n', '            || MAX_TOTAL_AMOUNT_TO_RECEIVE == 0\n', '            || COMMUNITY_PLUS_PRIORITY_SALE_CAP == 0\n', '            || COMMUNITY_SALE_START <= block.number\n', '            || COMMUNITY_SALE_START >= PRIORITY_SALE_START\n', '            || PRIORITY_SALE_START >= PUBLIC_SALE_START\n', '            || PUBLIC_SALE_START >= PUBLIC_SALE_END\n', '            || PUBLIC_SALE_END >= WITHDRAWAL_END\n', '            || COMMUNITY_PLUS_PRIORITY_SALE_CAP > MAX_TOTAL_AMOUNT_TO_RECEIVE\n', '            || MIN_TOTAL_AMOUNT_TO_RECEIVE > MAX_TOTAL_AMOUNT_TO_RECEIVE )\n', '        throw;\n', '    }\n', '\n', '    /* ====== configuration END ====== */\n', '\n', '    /* ====== public states START====== */\n', '\n', '    bool public isAborted = false;\n', '    mapping (address => uint) public balances;\n', '    bool public TOKEN_STARTED = false;\n', '    uint public total_received_amount;\n', '    address[] public investors;\n', '\n', '    //displays number of uniq investors\n', '    function investorsCount() constant external returns(uint) { return investors.length; }\n', '\n', '    //displays received amount in eth upto now\n', '    function TOTAL_RECEIVED_ETH() constant external returns (uint) { return total_received_amount / 1 ether; }\n', '\n', '    //displays current contract state in human readable form\n', '    function state() constant external returns (string) { return stateNames[ uint(currentState()) ]; }\n', '\n', '    function san_whitelist(address addr) public constant returns(uint, uint) { return COMMUNITY_ALLOWANCE_LIST.allowed(addr); }\n', '    function cfi_whitelist(address addr) public constant returns(bool) { return PRIORITY_ADDRESS_LIST.contains(addr); }\n', '\n', '    /* ====== public states END ====== */\n', '\n', '    string[] private stateNames = ["BEFORE_START", "COMMUNITY_SALE", "PRIORITY_SALE", "PRIORITY_SALE_FINISHED", "PUBLIC_SALE", "BONUS_MINTING", "WITHDRAWAL_RUNNING", "REFUND_RUNNING", "CLOSED" ];\n', '    enum State { BEFORE_START, COMMUNITY_SALE, PRIORITY_SALE, PRIORITY_SALE_FINISHED, PUBLIC_SALE, BONUS_MINTING, WITHDRAWAL_RUNNING, REFUND_RUNNING, CLOSED }\n', '\n', '    uint private constant COMMUNITY_PLUS_PRIORITY_SALE_CAP = COMMUNITY_PLUS_PRIORITY_SALE_CAP_ETH * 1 ether;\n', '    uint private constant MIN_TOTAL_AMOUNT_TO_RECEIVE = MIN_TOTAL_AMOUNT_TO_RECEIVE_ETH * 1 ether;\n', '    uint private constant MAX_TOTAL_AMOUNT_TO_RECEIVE = MAX_TOTAL_AMOUNT_TO_RECEIVE_ETH * 1 ether;\n', '    uint private constant MIN_ACCEPTED_AMOUNT = MIN_ACCEPTED_AMOUNT_FINNEY * 1 finney;\n', '    bool private allBonusesAreMinted = false;\n', '\n', '    //\n', '    // ======= interface methods =======\n', '    //\n', '\n', '    //accept payments here\n', '    function ()\n', '    payable\n', '    noAnyReentrancy\n', '    {\n', '        State state = currentState();\n', '        uint amount_allowed;\n', '        if (state == State.COMMUNITY_SALE) {\n', '            var (min_finney, max_finney) = COMMUNITY_ALLOWANCE_LIST.allowed(msg.sender);\n', '            var (min, max) = (min_finney * 1 finney, max_finney * 1 finney);\n', '            var sender_balance = balances[msg.sender];\n', '            assert (sender_balance <= max); //sanity check: should be always true;\n', '            assert (msg.value >= min);      //reject payments less than minimum\n', '            amount_allowed = max - sender_balance;\n', '            _receiveFundsUpTo(amount_allowed);\n', '        } else if (state == State.PRIORITY_SALE) {\n', '            assert (PRIORITY_ADDRESS_LIST.contains(msg.sender));\n', '            amount_allowed = COMMUNITY_PLUS_PRIORITY_SALE_CAP - total_received_amount;\n', '            _receiveFundsUpTo(amount_allowed);\n', '        } else if (state == State.PUBLIC_SALE) {\n', '            amount_allowed = MAX_TOTAL_AMOUNT_TO_RECEIVE - total_received_amount;\n', '            _receiveFundsUpTo(amount_allowed);\n', '        } else if (state == State.REFUND_RUNNING) {\n', '            // any entring call in Refund Phase will cause full refund\n', '            _sendRefund();\n', '        } else {\n', '            throw;\n', '        }\n', '    }\n', '\n', '\n', '    function refund() external\n', '    inState(State.REFUND_RUNNING)\n', '    noAnyReentrancy\n', '    {\n', '        _sendRefund();\n', '    }\n', '\n', '\n', '    function withdrawFundsAndStartToken() external\n', '    inState(State.WITHDRAWAL_RUNNING)\n', '    noAnyReentrancy\n', '    only(owner)\n', '    {\n', '        // transfer funds to owner\n', '        if (!owner.send(this.balance)) throw;\n', '\n', '        //notify token contract to start\n', '        if (TOKEN.call(bytes4(sha3("start()")))) {\n', '            TOKEN_STARTED = true;\n', '            TokenStarted(TOKEN);\n', '        }\n', '    }\n', '\n', '    event TokenStarted(address tokenAddr);\n', '\n', '    //there are around 40 addresses in PRESALE_ADDRESSES list. Everything fits into single Tx.\n', '    function mintAllBonuses() external\n', '    inState(State.BONUS_MINTING)\n', '    noAnyReentrancy\n', '    {\n', '        assert(!allBonusesAreMinted);\n', '        allBonusesAreMinted = true;\n', '\n', '        uint TEAM_AND_PARTNERS_PER_CENT = TEAM_BONUS_PER_CENT + ADVISORS_AND_PARTNERS_PER_CENT;\n', '\n', '        uint total_presale_amount_with_bonus = mintPresaleBonuses();\n', '        uint total_collected_amount = total_received_amount + total_presale_amount_with_bonus;\n', '        uint extra_amount = total_collected_amount * TEAM_AND_PARTNERS_PER_CENT / (100 - TEAM_AND_PARTNERS_PER_CENT);\n', '        uint extra_team_amount = extra_amount * TEAM_BONUS_PER_CENT / TEAM_AND_PARTNERS_PER_CENT;\n', '        uint extra_partners_amount = extra_amount * ADVISORS_AND_PARTNERS_PER_CENT / TEAM_AND_PARTNERS_PER_CENT;\n', '\n', '        //beautify total supply: round down to full eth.\n', '        uint total_to_mint = total_collected_amount + extra_amount;\n', '        uint round_remainder = total_to_mint - (total_to_mint / 1 ether * 1 ether);\n', '        extra_team_amount -= round_remainder; //this will reduce total_supply to rounded value\n', '\n', '        //mint group bonuses\n', '        _mint(extra_team_amount , TEAM_GROUP_WALLET);\n', '        _mint(extra_partners_amount, ADVISERS_AND_FRIENDS_WALLET);\n', '\n', '    }\n', '\n', '    function mintPresaleBonuses() internal returns(uint amount) {\n', '        uint total_presale_amount_with_bonus = 0;\n', '        //mint presale bonuses\n', '        for(uint i=0; i < PRESALE_ADDRESSES.length; ++i) {\n', '            address addr = PRESALE_ADDRESSES[i];\n', '            var amount_with_bonus = presaleTokenAmount(addr);\n', '            if (amount_with_bonus>0) {\n', '                _mint(amount_with_bonus, addr);\n', '                total_presale_amount_with_bonus += amount_with_bonus;\n', '            }\n', '        }//for\n', '        return total_presale_amount_with_bonus;\n', '    }\n', '\n', '    function presaleTokenAmount(address addr) public constant returns(uint){\n', '        uint presale_balance = PRESALE_BALANCES.balances(addr);\n', '        if (presale_balance > 0) {\n', '            // this calculation is about waived pre-sale bonus.\n', '            // rawVote contains a value [0..1 ether].\n', '            //     0 ether    - means "default value" or "no vote" : 100% bonus saved\n', '            //     1 ether    - means "vote 100%" : 100% bonus saved\n', '            //    <=10 finney - special value "vote 0%" : no bonus at all (100% bonus waived).\n', '            //  other value - "PRE_SALE_BONUS_PER_CENT * rawVote / 1 ether" is an effective bonus per cent for particular presale member.\n', '            //\n', '            var rawVote = PRESALE_BONUS_VOTING.rawVotes(addr);\n', '            if (rawVote == 0)              rawVote = 1 ether; //special case "no vote" (default value) ==> (1 ether is 100%)\n', '            else if (rawVote <= 10 finney) rawVote = 0;       //special case "0%" (no bonus)           ==> (0 ether is   0%)\n', '            else if (rawVote > 1 ether)    rawVote = 1 ether; //max bonus is 100% (should not occur)\n', '            var presale_bonus = presale_balance * PRE_SALE_BONUS_PER_CENT * rawVote / 1 ether / 100;\n', '            return presale_balance + presale_bonus;\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '\n', '    function attachToToken(MintableToken tokenAddr) external\n', '    inState(State.BEFORE_START)\n', '    only(owner)\n', '    {\n', '        TOKEN = tokenAddr;\n', '    }\n', '\n', '    function abort() external\n', '    inStateBefore(State.REFUND_RUNNING)\n', '    only(owner)\n', '    {\n', '        isAborted = true;\n', '    }\n', '\n', '    //\n', '    // ======= implementation methods =======\n', '    //\n', '\n', '    function _sendRefund() private\n', '    tokenHoldersOnly\n', '    {\n', '        // load balance to refund plus amount currently sent\n', '        var amount_to_refund = balances[msg.sender] + msg.value;\n', '        // reset balance\n', '        balances[msg.sender] = 0;\n', '        // send refund back to sender\n', '        if (!msg.sender.send(amount_to_refund)) throw;\n', '    }\n', '\n', '    function _receiveFundsUpTo(uint amount) private\n', '    notTooSmallAmountOnly\n', '    {\n', '        require (amount > 0);\n', '        if (msg.value > amount) {\n', '            // accept amount only and return change\n', '            var change_to_return = msg.value - amount;\n', '            if (!msg.sender.send(change_to_return)) throw;\n', '        } else {\n', '            // accept full amount\n', '            amount = msg.value;\n', '        }\n', '        if (balances[msg.sender] == 0) investors.push(msg.sender);\n', '        balances[msg.sender] += amount;\n', '        total_received_amount += amount;\n', '        _mint(amount,msg.sender);\n', '    }\n', '\n', '    function _mint(uint amount, address account) private {\n', '        MintableToken(TOKEN).mint(amount * TOKEN_PER_ETH, account);\n', '    }\n', '\n', '    function currentState() private constant\n', '    returns (State)\n', '    {\n', '        if (isAborted) {\n', '            return this.balance > 0\n', '                   ? State.REFUND_RUNNING\n', '                   : State.CLOSED;\n', '        } else if (block.number < COMMUNITY_SALE_START || address(TOKEN) == 0x0) {\n', '             return State.BEFORE_START;\n', '        } else if (block.number < PRIORITY_SALE_START) {\n', '            return State.COMMUNITY_SALE;\n', '        } else if (block.number < PUBLIC_SALE_START) {\n', '            return total_received_amount < COMMUNITY_PLUS_PRIORITY_SALE_CAP\n', '                ? State.PRIORITY_SALE\n', '                : State.PRIORITY_SALE_FINISHED;\n', '        } else if (block.number <= PUBLIC_SALE_END && total_received_amount < MAX_TOTAL_AMOUNT_TO_RECEIVE) {\n', '            return State.PUBLIC_SALE;\n', '        } else if (this.balance == 0) {\n', '            return State.CLOSED;\n', '        } else if (block.number <= WITHDRAWAL_END && total_received_amount >= MIN_TOTAL_AMOUNT_TO_RECEIVE) {\n', '            return allBonusesAreMinted\n', '                ? State.WITHDRAWAL_RUNNING\n', '                : State.BONUS_MINTING;\n', '        } else {\n', '            return State.REFUND_RUNNING;\n', '        }\n', '    }\n', '\n', '    //\n', '    // ============ modifiers ============\n', '    //\n', '\n', '    //fails if state dosn&#39;t match\n', '    modifier inState(State state) {\n', '        if (state != currentState()) throw;\n', '        _;\n', '    }\n', '\n', '    //fails if the current state is not before than the given one.\n', '    modifier inStateBefore(State state) {\n', '        if (currentState() >= state) throw;\n', '        _;\n', '    }\n', '\n', '    //accepts calls from token holders only\n', '    modifier tokenHoldersOnly(){\n', '        if (balances[msg.sender] == 0) throw;\n', '        _;\n', '    }\n', '\n', '\n', '    // don`t accept transactions with value less than allowed minimum\n', '    modifier notTooSmallAmountOnly(){\n', '        if (msg.value < MIN_ACCEPTED_AMOUNT) throw;\n', '        _;\n', '    }\n', '\n', '    //\n', '    // ============ DATA ============\n', '    //\n', '\n', '    address[] PRESALE_ADDRESSES = [\n', '        0xF55DFd2B02Cf3282680C94BD01E9Da044044E6A2,\n', '        0x0D40B53828948b340673674Ae65Ee7f5D8488e33,\n', '        0x0ea690d466d6bbd18F124E204EA486a4Bf934cbA,\n', '        0x6d25B9f40b92CcF158250625A152574603465192,\n', '        0x481Da0F1e89c206712BCeA4f7D6E60d7b42f6C6C,\n', '        0x416EDa5D6Ed29CAc3e6D97C102d61BC578C5dB87,\n', '        0xD78Ac6FFc90E084F5fD563563Cc9fD33eE303f18,\n', '        0xe6714ab523acEcf9b85d880492A2AcDBe4184892,\n', '        0x285A9cA5fE9ee854457016a7a5d3A3BB95538093,\n', '        0x600ca6372f312B081205B2C3dA72517a603a15Cc,\n', '        0x2b8d5C9209fBD500Fd817D960830AC6718b88112,\n', '        0x4B15Dd23E5f9062e4FB3a9B7DECF653C0215e560,\n', '        0xD67449e6AB23c1f46dea77d3f5E5D47Ff33Dc9a9,\n', '        0xd0ADaD7ed81AfDa039969566Ceb8423E0ab14d90,\n', '        0x245f27796a44d7E3D30654eD62850ff09EE85656,\n', '        0x639D6eC2cef4d6f7130b40132B3B6F5b667e5105,\n', '        0x5e9a69B8656914965d69d8da49c3709F0bF2B5Ef,\n', '        0x0832c3B801319b62aB1D3535615d1fe9aFc3397A,\n', '        0xf6Dd631279377205818C3a6725EeEFB9D0F6b9F3,\n', '        0x47696054e71e4c3f899119601a255a7065C3087B,\n', '        0xf107bE6c6833f61A24c64D63c8A7fcD784Abff06,\n', '        0x056f072Bd2240315b708DBCbDDE80d400f0394a1,\n', '        0x9e5BaeC244D8cCD49477037E28ed70584EeAD956,\n', '        0x40A0b2c1B4E30F27e21DF94e734671856b485966,\n', '        0x84f0620A547a4D14A7987770c4F5C25d488d6335,\n', '        0x036Ac11c161C09d94cA39F7B24C1bC82046c332B,\n', '        0x2912A18C902dE6f95321D6d6305D7B80Eec4C055,\n', '        0xE1Ad30971b83c17E2A24c0334CB45f808AbEBc87,\n', '        0x07f35b7FE735c49FD5051D5a0C2e74c9177fEa6d,\n', '        0x11669Cce6AF3ce1Ef3777721fCC0eef0eE57Eaba,\n', '        0xBDbaF6434d40D6355B1e80e40Cc4AB9C68D96116,\n', '        0x17125b59ac51cEe029E4bD78D7f5947D1eA49BB2,\n', '        0xA382A3A65c3F8ee2b726A2535B3c34A89D9094D4,\n', '        0xAB78c8781fB64Bed37B274C5EE759eE33465f1f3,\n', '        0xE74F2062612E3cAE8a93E24b2f0D3a2133373884,\n', '        0x505120957A9806827F8F111A123561E82C40bC78,\n', '        0x00A46922B1C54Ae6b5818C49B97E03EB4BB352e1,\n', '        0xE76fE52a251C8F3a5dcD657E47A6C8D16Fdf4bFA\n', '    ];\n', '\n', '}// CrowdsaleMinter']