['pragma solidity ^0.4.0;\n', '\n', 'contract SpaCoin {\n', '    int64 constant TOTAL_UNITS = 100000 ;\n', '    int64 outstanding_coins ;\n', '    address owner ;\n', '    mapping (address => int64) holdings ;\n', '    \n', '    function SpaCoin() payable {\n', '        outstanding_coins = TOTAL_UNITS ;\n', '        owner = msg.sender ;\n', '    }\n', '    \n', '    event CoinAllocation(address holder, int64 number, int64 remaining) ;\n', '    event CoinMovement(address from, address to, int64 v) ;\n', '    event InvalidCoinUsage(string reason) ;\n', '\n', '    function getOwner()  constant returns(address) {\n', '        return owner ;\n', '    }\n', '\n', '    function allocate(address newHolder, int64 value)  payable {\n', '        if (msg.sender != owner) {\n', '            InvalidCoinUsage(&#39;Only owner can allocate coins&#39;) ;\n', '            return ;\n', '        }\n', '        if (value < 0) {\n', '            InvalidCoinUsage(&#39;Cannot allocate negative value&#39;) ;\n', '            return ;\n', '        }\n', '\n', '        if (value <= outstanding_coins) {\n', '            holdings[newHolder] += value ;\n', '            outstanding_coins -= value ;\n', '            CoinAllocation(newHolder, value, outstanding_coins) ;\n', '        } else {\n', '            InvalidCoinUsage(&#39;value to allocate larger than outstanding coins&#39;) ;\n', '        }\n', '    }\n', '    \n', '    function move(address destination, int64 value)  {\n', '        address source = msg.sender ;\n', '        if (value <= 0) {\n', '            InvalidCoinUsage(&#39;Must move value greater than zero&#39;) ;\n', '            return ;\n', '        }\n', '        if (holdings[source] >= value) {\n', '            holdings[destination] += value ;\n', '            holdings[source] -= value ;\n', '            CoinMovement(source, destination, value) ;\n', '        } else {\n', '            InvalidCoinUsage(&#39;value to move larger than holdings&#39;) ;\n', '        }\n', '    }\n', '    \n', '    function myBalance() constant returns(int64) {\n', '        return holdings[msg.sender] ;\n', '    }\n', '    \n', '    function holderBalance(address holder) constant returns(int64) {\n', '        if (msg.sender != owner) return ;\n', '        return holdings[holder] ;\n', '    }\n', '\n', '    function outstandingValue() constant returns(int64) {\n', '        if (msg.sender != owner) return ;\n', '        return outstanding_coins ;\n', '    }\n', '    \n', '}']