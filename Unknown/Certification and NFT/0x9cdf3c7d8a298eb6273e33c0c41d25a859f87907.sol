['pragma solidity ^0.4.13;\n', '// -------------------------------------------------\n', '// 0.4.13+commit.0fb4cb1a\n', '// [Assistive Reality ARX ERC20 client presold packages 25,50,100 ETH]\n', '// [https://aronline.io/icoinfo]\n', '// [Adapted from Ethereum standard crowdsale contract]\n', '// [Contact <span class="__cf_email__" data-cfemail="e49790858282a485968b8a888d8a81ca8d8b">[email&#160;protected]</span> for any queries]\n', '// [Join us in changing the world]\n', '// [aronline.io]\n', '// -------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/issues/20\n', '// -------------------------------------------------\n', '// Security reviews completed 26/09/17 [passed OK]\n', '// Functional reviews completed 26/09/17 [passed OK]\n', '// Final code revision and regression test cycle complete 26/09/17 [passed]\n', '// https://github.com/assistivereality/ico/blob/master/3.2packagesaletestsARXmainnet.txt\n', '// -------------------------------------------------\n', '// 3 packages offered in this contract:\n', '// 25 ETH  = 8500 ARX per 1 ETH\n', '// 50 ETH  = 10500 ARX per 1 ETH\n', '// 100 ETH = 12500 ARX per 1 ETH\n', '// -------------------------------------------------\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() {\n', '        owner = msg.sender;\n', '    }\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract safeMath {\n', '  function safeMul(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a * b;\n', '    safeAssert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint256 a, uint256 b) internal returns (uint256) {\n', '    safeAssert(b > 0);\n', '    uint256 c = a / b;\n', '    safeAssert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal returns (uint256) {\n', '    safeAssert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a + b;\n', '    safeAssert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '  function safeAssert(bool assertion) internal {\n', '    if (!assertion) revert();\n', '  }\n', '}\n', '\n', 'contract ERC20Interface is owned, safeMath {\n', '  function balanceOf(address _owner) constant returns (uint256 balance);\n', '  function transfer(address _to, uint256 _value) returns (bool success);\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '  function approve(address _spender, uint256 _value) returns (bool success);\n', '  function increaseApproval (address _spender, uint _addedValue) returns (bool success);\n', '  function decreaseApproval (address _spender, uint _subtractedValue) returns (bool success);\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '  event Buy(address indexed _sender, uint256 _eth, uint256 _ARX);\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract ARXPackageSale is owned, safeMath {\n', '  // owner/admin & token reward\n', '  address        public admin                       = owner;      // admin address\n', '  ERC20Interface public tokenReward;                              // address of the token used as reward\n', '\n', '  // deployment variables for static supply sale\n', '  uint256 public initialARXSupplyInWei;                           // initial ARX to be sent to this packagesale contract (requires 6.25M ARX, sending 6.5M ARX)\n', '  uint256 public CurrentARXSupplyInWei;                           // tracking to see how many to return\n', '  uint256 public EthCapInWei;                                     // maximum amount to raise in Eth\n', '  uint256 public tokensPerEthPrice;                               // floating price based on package size purchased\n', '\n', '  // multi-sig addresses and price variable\n', '  address public beneficiaryMultisig;                             // beneficiaryMultiSig (founder group) live is 0x00F959866E977698D14a36eB332686304a4d6AbA\n', '  address public foundationMultisig;                              // foundationMultiSig (Assistive Reality foundation) live is\n', '\n', '  // uint256 values for min,max,caps,tracking\n', '  uint256 public amountRaisedInWei;                               // amount raised in Wei\n', '\n', '  // loop control, ICO startup and limiters\n', '  string  public CurrentStatus                     = "";          // current packagesale status\n', '  uint256 public fundingStartBlock;                               // packagesale start block#\n', '  uint256 public fundingEndBlock;                                 // packagesale end block#\n', '\n', '  bool    public ispackagesaleSetup                = false;       // boolean for packagesale setup\n', '  bool    public ispackagesaleClosed               = false;       // packagesale completion boolean\n', '\n', '  event Buy(address indexed _sender, uint256 _eth, uint256 _ARX);\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '  mapping (address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  // default function, map admin\n', '  function ARXPackageSale() onlyOwner {\n', '    admin = msg.sender;\n', '    CurrentStatus = "packagesale deployed to chain";\n', '  }\n', '\n', '  // total number of tokens initially simplified from wei\n', '  function initialARXtokenSupply() constant returns (uint256 initialARXtokenSupplyCount) {\n', '      initialARXtokenSupplyCount = safeDiv(initialARXSupplyInWei,1 ether);\n', '  }\n', '\n', '  // current number of tokens simplified from wei\n', '  function currentARXtokenSupply() constant returns (uint256 currentARXtokenSupplyCount) {\n', '      currentARXtokenSupplyCount = safeDiv(CurrentARXSupplyInWei,1 ether);\n', '  }\n', '\n', '  // setup the packagesale parameters\n', '  function Setuppackagesale(uint256 _fundingStartBlock, uint256 _fundingEndBlock) onlyOwner returns (bytes32 response) {\n', '      if ((msg.sender == admin)\n', '      && (!(ispackagesaleSetup))\n', '      && (!(beneficiaryMultisig > 0))){\n', '          // init addresses\n', '          tokenReward                             = ERC20Interface(0xb0D926c1BC3d78064F3e1075D5bD9A24F35Ae6C5);   // mainnet is 0x7D5Edcd23dAa3fB94317D32aE253eE1Af08Ba14d //testnet = 0x75508c2B1e46ea29B7cCf0308d4Cb6f6af6211e0\n', '          beneficiaryMultisig                     = 0x5Ed4706A93b8a3239f97F7d2025cE1f9eaDcD9A4;                   // mainnet ARX foundation cold storage wallet\n', '          foundationMultisig                      = 0x5Ed4706A93b8a3239f97F7d2025cE1f9eaDcD9A4;                   // mainnet ARX foundation cold storage wallet\n', '          tokensPerEthPrice                       = 8500;                                                         // 8500 ARX per Eth default flat (this is altered in BuyTokens function based on amount sent for package deals)\n', '\n', '          // funding targets\n', '          initialARXSupplyInWei                   = 6500000000000000000000000;                                    //   6,500,000 + 18 decimals = 6500000000000000000000000 //testnet 650k tokens = 65000000000000000000000\n', '          CurrentARXSupplyInWei                   = initialARXSupplyInWei;\n', '          EthCapInWei                             = 500000000000000000000;                                        //   500000000000000000000 =  500 Eth (max cap) - packages won&#39;t sell beyond this amount //testnet 5Eth 5000000000000000000\n', '          amountRaisedInWei                       = 0;\n', '\n', '          // update values\n', '          fundingStartBlock                       = _fundingStartBlock;\n', '          fundingEndBlock                         = _fundingEndBlock;\n', '\n', '          // configure packagesale\n', '          ispackagesaleSetup                      = true;\n', '          ispackagesaleClosed                     = false;\n', '          CurrentStatus                           = "packagesale is activated";\n', '\n', '          return "packagesale is setup";\n', '      } else if (msg.sender != admin) {\n', '          return "not authorized";\n', '      } else  {\n', '          return "campaign cannot be changed";\n', '      }\n', '    }\n', '\n', '    // default payable function when sending ether to this contract\n', '    function () payable {\n', '      require(msg.data.length == 0);\n', '      BuyARXtokens();\n', '    }\n', '\n', '    function BuyARXtokens() payable {\n', '      // 0. conditions (length, packagesale setup, zero check, exceed funding contrib check, contract valid check, within funding block range check, balance overflow check etc)\n', '      require(!(msg.value == 0)\n', '      && (ispackagesaleSetup)\n', '      && (block.number >= fundingStartBlock)\n', '      && (block.number <= fundingEndBlock)\n', '      && (amountRaisedInWei < EthCapInWei));\n', '\n', '      // 1. vars\n', '      uint256 rewardTransferAmount    = 0;\n', '\n', '      // 2. effects\n', '      if (msg.value==25000000000000000000) { // 25 ETH (18 decimals) = 8500 ARX per 1 ETH\n', '        tokensPerEthPrice=8500;\n', '      } else if (msg.value==50000000000000000000) { // 50 ETH (18 decimals) = 10500 ARX per 1 ETH\n', '        tokensPerEthPrice=10500;\n', '      } else if (msg.value==100000000000000000000) { // 100 ETH (18 decimals) = 12500 ARX per 1 ETH\n', '        tokensPerEthPrice=12500;\n', '      } else {\n', '        revert();\n', '      }\n', '\n', '      amountRaisedInWei               = safeAdd(amountRaisedInWei,msg.value);\n', '      rewardTransferAmount            = safeMul(msg.value,tokensPerEthPrice);\n', '      CurrentARXSupplyInWei           = safeSub(CurrentARXSupplyInWei,rewardTransferAmount);\n', '\n', '      // 3. interaction\n', '      tokenReward.transfer(msg.sender, rewardTransferAmount);\n', '\n', '      // 4. events\n', '      Transfer(this, msg.sender, msg.value);\n', '      Buy(msg.sender, msg.value, rewardTransferAmount);\n', '    }\n', '\n', '    function beneficiaryMultiSigWithdraw(uint256 _amount) onlyOwner {\n', '      beneficiaryMultisig.transfer(_amount);\n', '    }\n', '\n', '    function updateStatus() onlyOwner {\n', '      require((block.number >= fundingEndBlock) || (amountRaisedInWei >= EthCapInWei));\n', '      CurrentStatus = "packagesale is closed";\n', '    }\n', '\n', '    function withdrawRemainingTokens(uint256 _amountToPull) onlyOwner {\n', '      require(block.number >= fundingEndBlock);\n', '      tokenReward.transfer(msg.sender, _amountToPull);\n', '    }\n', '}']
['pragma solidity ^0.4.13;\n', '// -------------------------------------------------\n', '// 0.4.13+commit.0fb4cb1a\n', '// [Assistive Reality ARX ERC20 client presold packages 25,50,100 ETH]\n', '// [https://aronline.io/icoinfo]\n', '// [Adapted from Ethereum standard crowdsale contract]\n', '// [Contact staff@aronline.io for any queries]\n', '// [Join us in changing the world]\n', '// [aronline.io]\n', '// -------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/issues/20\n', '// -------------------------------------------------\n', '// Security reviews completed 26/09/17 [passed OK]\n', '// Functional reviews completed 26/09/17 [passed OK]\n', '// Final code revision and regression test cycle complete 26/09/17 [passed]\n', '// https://github.com/assistivereality/ico/blob/master/3.2packagesaletestsARXmainnet.txt\n', '// -------------------------------------------------\n', '// 3 packages offered in this contract:\n', '// 25 ETH  = 8500 ARX per 1 ETH\n', '// 50 ETH  = 10500 ARX per 1 ETH\n', '// 100 ETH = 12500 ARX per 1 ETH\n', '// -------------------------------------------------\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() {\n', '        owner = msg.sender;\n', '    }\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract safeMath {\n', '  function safeMul(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a * b;\n', '    safeAssert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint256 a, uint256 b) internal returns (uint256) {\n', '    safeAssert(b > 0);\n', '    uint256 c = a / b;\n', '    safeAssert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal returns (uint256) {\n', '    safeAssert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a + b;\n', '    safeAssert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '  function safeAssert(bool assertion) internal {\n', '    if (!assertion) revert();\n', '  }\n', '}\n', '\n', 'contract ERC20Interface is owned, safeMath {\n', '  function balanceOf(address _owner) constant returns (uint256 balance);\n', '  function transfer(address _to, uint256 _value) returns (bool success);\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '  function approve(address _spender, uint256 _value) returns (bool success);\n', '  function increaseApproval (address _spender, uint _addedValue) returns (bool success);\n', '  function decreaseApproval (address _spender, uint _subtractedValue) returns (bool success);\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '  event Buy(address indexed _sender, uint256 _eth, uint256 _ARX);\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract ARXPackageSale is owned, safeMath {\n', '  // owner/admin & token reward\n', '  address        public admin                       = owner;      // admin address\n', '  ERC20Interface public tokenReward;                              // address of the token used as reward\n', '\n', '  // deployment variables for static supply sale\n', '  uint256 public initialARXSupplyInWei;                           // initial ARX to be sent to this packagesale contract (requires 6.25M ARX, sending 6.5M ARX)\n', '  uint256 public CurrentARXSupplyInWei;                           // tracking to see how many to return\n', '  uint256 public EthCapInWei;                                     // maximum amount to raise in Eth\n', '  uint256 public tokensPerEthPrice;                               // floating price based on package size purchased\n', '\n', '  // multi-sig addresses and price variable\n', '  address public beneficiaryMultisig;                             // beneficiaryMultiSig (founder group) live is 0x00F959866E977698D14a36eB332686304a4d6AbA\n', '  address public foundationMultisig;                              // foundationMultiSig (Assistive Reality foundation) live is\n', '\n', '  // uint256 values for min,max,caps,tracking\n', '  uint256 public amountRaisedInWei;                               // amount raised in Wei\n', '\n', '  // loop control, ICO startup and limiters\n', '  string  public CurrentStatus                     = "";          // current packagesale status\n', '  uint256 public fundingStartBlock;                               // packagesale start block#\n', '  uint256 public fundingEndBlock;                                 // packagesale end block#\n', '\n', '  bool    public ispackagesaleSetup                = false;       // boolean for packagesale setup\n', '  bool    public ispackagesaleClosed               = false;       // packagesale completion boolean\n', '\n', '  event Buy(address indexed _sender, uint256 _eth, uint256 _ARX);\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '  mapping (address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  // default function, map admin\n', '  function ARXPackageSale() onlyOwner {\n', '    admin = msg.sender;\n', '    CurrentStatus = "packagesale deployed to chain";\n', '  }\n', '\n', '  // total number of tokens initially simplified from wei\n', '  function initialARXtokenSupply() constant returns (uint256 initialARXtokenSupplyCount) {\n', '      initialARXtokenSupplyCount = safeDiv(initialARXSupplyInWei,1 ether);\n', '  }\n', '\n', '  // current number of tokens simplified from wei\n', '  function currentARXtokenSupply() constant returns (uint256 currentARXtokenSupplyCount) {\n', '      currentARXtokenSupplyCount = safeDiv(CurrentARXSupplyInWei,1 ether);\n', '  }\n', '\n', '  // setup the packagesale parameters\n', '  function Setuppackagesale(uint256 _fundingStartBlock, uint256 _fundingEndBlock) onlyOwner returns (bytes32 response) {\n', '      if ((msg.sender == admin)\n', '      && (!(ispackagesaleSetup))\n', '      && (!(beneficiaryMultisig > 0))){\n', '          // init addresses\n', '          tokenReward                             = ERC20Interface(0xb0D926c1BC3d78064F3e1075D5bD9A24F35Ae6C5);   // mainnet is 0x7D5Edcd23dAa3fB94317D32aE253eE1Af08Ba14d //testnet = 0x75508c2B1e46ea29B7cCf0308d4Cb6f6af6211e0\n', '          beneficiaryMultisig                     = 0x5Ed4706A93b8a3239f97F7d2025cE1f9eaDcD9A4;                   // mainnet ARX foundation cold storage wallet\n', '          foundationMultisig                      = 0x5Ed4706A93b8a3239f97F7d2025cE1f9eaDcD9A4;                   // mainnet ARX foundation cold storage wallet\n', '          tokensPerEthPrice                       = 8500;                                                         // 8500 ARX per Eth default flat (this is altered in BuyTokens function based on amount sent for package deals)\n', '\n', '          // funding targets\n', '          initialARXSupplyInWei                   = 6500000000000000000000000;                                    //   6,500,000 + 18 decimals = 6500000000000000000000000 //testnet 650k tokens = 65000000000000000000000\n', '          CurrentARXSupplyInWei                   = initialARXSupplyInWei;\n', "          EthCapInWei                             = 500000000000000000000;                                        //   500000000000000000000 =  500 Eth (max cap) - packages won't sell beyond this amount //testnet 5Eth 5000000000000000000\n", '          amountRaisedInWei                       = 0;\n', '\n', '          // update values\n', '          fundingStartBlock                       = _fundingStartBlock;\n', '          fundingEndBlock                         = _fundingEndBlock;\n', '\n', '          // configure packagesale\n', '          ispackagesaleSetup                      = true;\n', '          ispackagesaleClosed                     = false;\n', '          CurrentStatus                           = "packagesale is activated";\n', '\n', '          return "packagesale is setup";\n', '      } else if (msg.sender != admin) {\n', '          return "not authorized";\n', '      } else  {\n', '          return "campaign cannot be changed";\n', '      }\n', '    }\n', '\n', '    // default payable function when sending ether to this contract\n', '    function () payable {\n', '      require(msg.data.length == 0);\n', '      BuyARXtokens();\n', '    }\n', '\n', '    function BuyARXtokens() payable {\n', '      // 0. conditions (length, packagesale setup, zero check, exceed funding contrib check, contract valid check, within funding block range check, balance overflow check etc)\n', '      require(!(msg.value == 0)\n', '      && (ispackagesaleSetup)\n', '      && (block.number >= fundingStartBlock)\n', '      && (block.number <= fundingEndBlock)\n', '      && (amountRaisedInWei < EthCapInWei));\n', '\n', '      // 1. vars\n', '      uint256 rewardTransferAmount    = 0;\n', '\n', '      // 2. effects\n', '      if (msg.value==25000000000000000000) { // 25 ETH (18 decimals) = 8500 ARX per 1 ETH\n', '        tokensPerEthPrice=8500;\n', '      } else if (msg.value==50000000000000000000) { // 50 ETH (18 decimals) = 10500 ARX per 1 ETH\n', '        tokensPerEthPrice=10500;\n', '      } else if (msg.value==100000000000000000000) { // 100 ETH (18 decimals) = 12500 ARX per 1 ETH\n', '        tokensPerEthPrice=12500;\n', '      } else {\n', '        revert();\n', '      }\n', '\n', '      amountRaisedInWei               = safeAdd(amountRaisedInWei,msg.value);\n', '      rewardTransferAmount            = safeMul(msg.value,tokensPerEthPrice);\n', '      CurrentARXSupplyInWei           = safeSub(CurrentARXSupplyInWei,rewardTransferAmount);\n', '\n', '      // 3. interaction\n', '      tokenReward.transfer(msg.sender, rewardTransferAmount);\n', '\n', '      // 4. events\n', '      Transfer(this, msg.sender, msg.value);\n', '      Buy(msg.sender, msg.value, rewardTransferAmount);\n', '    }\n', '\n', '    function beneficiaryMultiSigWithdraw(uint256 _amount) onlyOwner {\n', '      beneficiaryMultisig.transfer(_amount);\n', '    }\n', '\n', '    function updateStatus() onlyOwner {\n', '      require((block.number >= fundingEndBlock) || (amountRaisedInWei >= EthCapInWei));\n', '      CurrentStatus = "packagesale is closed";\n', '    }\n', '\n', '    function withdrawRemainingTokens(uint256 _amountToPull) onlyOwner {\n', '      require(block.number >= fundingEndBlock);\n', '      tokenReward.transfer(msg.sender, _amountToPull);\n', '    }\n', '}']
