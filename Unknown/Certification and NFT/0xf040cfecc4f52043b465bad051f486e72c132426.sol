['pragma solidity ^0.4.7;\n', '\n', '/// @title 2nd EarlyPurchase contract - Keep track of purchased amount by Early Purchasers\n', '/// Project by SynchroLife Team (https://synchrolife.org)\n', '/// This smart contract developed by Starbase - Token funding & payment Platform for innovative projects <support[at]starbase.co>\n', '/// 1504526400  = Startingï¼š9/4 12:00GMT\n', '/// 1504785599 = Ending: 9/7 11:59GMT\n', '/// now (uint): current block timestamp (alias for block.timestamp)\n', '\n', 'contract SYC2ndEarlyPurchase {\n', '    /*\n', '     *  Properties\n', '     */\n', '    string public constant PURCHASE_AMOUNT_UNIT = &#39;ETH&#39;;    // Ether\n', '    uint public constant WEI_MINIMUM_PURCHASE = 10 * 10 ** 18;\n', '    uint public constant WEI_MAXIMUM_EARLYPURCHASE = 7000 * 10 ** 18;\n', '    uint public constant STARTING_TIME = 1504526400;\n', '    uint public constant ENDING_TIME = 1504785599;\n', '    address public owner;\n', '    EarlyPurchase[] public earlyPurchases;\n', '    uint public earlyPurchaseClosedAt;\n', '    uint public totalEarlyPurchaseRaised;\n', '    address public sycCrowdsale;\n', '\n', '\n', '    /*\n', '     *  Types\n', '     */\n', '    struct EarlyPurchase {\n', '        address purchaser;\n', '        uint amount;        // Amount in Wei( = 1/ 10^18 Ether)\n', '        uint purchasedAt;   // timestamp\n', '    }\n', '\n', '    /*\n', '     *  Modifiers\n', '     */\n', '    modifier onlyOwner() {\n', '        if (msg.sender != owner) {\n', '            throw;\n', '        }\n', '        _;\n', '    }\n', '\n', '    modifier onlyEarlyPurchaseTerm() {\n', '        if (earlyPurchaseClosedAt > 0 && now >= STARTING_TIME && now <= ENDING_TIME) {\n', '            throw;\n', '        }\n', '        _;\n', '    }\n', '\n', '    /// @dev Contract constructor function\n', '    function SYC2ndEarlyPurchase() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /*\n', '     *  Contract functions\n', '     */\n', '    /// @dev Returns early purchased amount by purchaser&#39;s address\n', '    /// @param purchaser Purchaser address\n', '    function purchasedAmountBy(address purchaser)\n', '        external\n', '        constant\n', '        returns (uint amount)\n', '    {\n', '        for (uint i; i < earlyPurchases.length; i++) {\n', '            if (earlyPurchases[i].purchaser == purchaser) {\n', '                amount += earlyPurchases[i].amount;\n', '            }\n', '        }\n', '    }\n', '\n', '    /// @dev Setup function sets external contracts&#39; addresses.\n', '    /// @param _sycCrowdsale SYC token crowdsale address.\n', '    function setup(address _sycCrowdsale)\n', '        external\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        if (address(_sycCrowdsale) == 0) {\n', '            sycCrowdsale = _sycCrowdsale;\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /// @dev Returns number of early purchases\n', '    function numberOfEarlyPurchases()\n', '        external\n', '        constant\n', '        returns (uint)\n', '    {\n', '        return earlyPurchases.length;\n', '    }\n', '\n', '    /// @dev Append an early purchase log\n', '    /// @param purchaser Purchaser address\n', '    /// @param amount Purchase amount\n', '    /// @param purchasedAt Timestamp of purchased date\n', '    function appendEarlyPurchase(address purchaser, uint amount, uint purchasedAt)\n', '        internal\n', '        onlyEarlyPurchaseTerm\n', '        returns (bool)\n', '    {\n', '        if (purchasedAt == 0 || purchasedAt > now) {\n', '            throw;\n', '        }\n', '\n', '        if(totalEarlyPurchaseRaised + amount >= WEI_MAXIMUM_EARLYPURCHASE){\n', '           purchaser.send(totalEarlyPurchaseRaised + amount - WEI_MAXIMUM_EARLYPURCHASE);\n', '           earlyPurchases.push(EarlyPurchase(purchaser, WEI_MAXIMUM_EARLYPURCHASE - totalEarlyPurchaseRaised, purchasedAt));\n', '           totalEarlyPurchaseRaised += WEI_MAXIMUM_EARLYPURCHASE - totalEarlyPurchaseRaised;\n', '        }\n', '        else{\n', '           earlyPurchases.push(EarlyPurchase(purchaser, amount, purchasedAt));\n', '           totalEarlyPurchaseRaised += amount;\n', '        }\n', '\n', '        if(totalEarlyPurchaseRaised >= WEI_MAXIMUM_EARLYPURCHASE || now >= ENDING_TIME){\n', '            earlyPurchaseClosedAt = now;\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /// @dev Close early purchase term\n', '    function closeEarlyPurchase()\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        earlyPurchaseClosedAt = now;\n', '    }\n', '\n', '    function withdraw(uint withdrawalAmount) onlyOwner {\n', '          if(!owner.send(withdrawalAmount)) throw;  // send collected ETH to SynchroLife team\n', '    }\n', '\n', '    function withdrawAll() onlyOwner {\n', '          if(!owner.send(this.balance)) throw;  // send all collected ETH to SynchroLife team\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '\n', '    /// @dev By sending Ether to the contract, early purchase will be recorded.\n', '    function () payable{\n', '        require(msg.value >= WEI_MINIMUM_PURCHASE);\n', '        appendEarlyPurchase(msg.sender, msg.value, now);\n', '    }\n', '}']