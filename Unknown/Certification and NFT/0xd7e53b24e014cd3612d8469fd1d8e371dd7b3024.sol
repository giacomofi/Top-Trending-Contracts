['pragma solidity 0.4.16;\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    function Ownable() { //This call only first time when contract deployed by person\n', '        owner = msg.sender;\n', '    }\n', '    modifier onlyOwner() { //This modifier is for checking owner is calling\n', '        if (owner == msg.sender) {\n', '            _;\n', '        } else {\n', '            revert();\n', '        }\n', '\n', '    }\n', '\n', '}\n', '\n', 'contract Mortal is Ownable {\n', '    \n', '    function kill() {\n', '        if (msg.sender == owner)\n', '            selfdestruct(owner);\n', '    }\n', '}\n', '\n', 'contract Token {\n', '    uint256 public totalSupply;\n', '    uint256 tokensForICO;\n', '    uint256 etherRaised;\n', '\n', '    function balanceOf(address _owner) constant returns(uint256 balance);\n', '\n', '    function transfer(address _to, uint256 _tokens) public returns(bool resultTransfer);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _tokens) public returns(bool resultTransfer);\n', '\n', '    function approve(address _spender, uint _value) returns(bool success);\n', '\n', '    function allowance(address _owner, address _spender) constant returns(uint remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS paused\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS NOT paused\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', 'contract StandardToken is Token,Mortal,Pausable {\n', '    \n', '    function transfer(address _to, uint256 _value) whenNotPaused returns (bool success) {\n', '        require(_to!=0x0);\n', '        require(_value>0);\n', '         if (balances[msg.sender] >= _value) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 totalTokensToTransfer)whenNotPaused returns (bool success) {\n', '        require(_from!=0x0);\n', '        require(_to!=0x0);\n', '        require(totalTokensToTransfer>0);\n', '    \n', '       if (balances[_from] >= totalTokensToTransfer&&allowance(_from,_to)>=totalTokensToTransfer) {\n', '            balances[_to] += totalTokensToTransfer;\n', '            balances[_from] -= totalTokensToTransfer;\n', '            allowed[_from][msg.sender] -= totalTokensToTransfer;\n', '            Transfer(_from, _to, totalTokensToTransfer);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balanceOfUser) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', 'contract DIGI is StandardToken{\n', '    string public constant name = "DIGI";\n', '    uint8 public constant decimals = 4;\n', '    string public constant symbol = "DIGI";\n', '    uint256 constant priceOfToken=1666666666666666;\n', '    uint256 twoWeeksBonusTime;\n', '    uint256 thirdWeekBonusTime;\n', '    uint256 fourthWeekBonusTime;\n', '    uint256 public deadLine;\n', '    function DIGI(){\n', '       totalSupply=980000000000;  //98 Million\n', '       owner = msg.sender;\n', '       balances[msg.sender] = (980000000000);\n', '       twoWeeksBonusTime=now + 2 * 1 weeks;//set time for first two week relative to deploy time\n', '       thirdWeekBonusTime=twoWeeksBonusTime+1 * 1 weeks;//third week calculate by adding one week by first two week\n', '       fourthWeekBonusTime=thirdWeekBonusTime+1 * 1 weeks;\n', '       deadLine=fourthWeekBonusTime+1 *1 weeks;//deadline is after fourth week just add one week\n', '       etherRaised=0;\n', '    }\n', '    /**\n', '     * @dev directly send ether and transfer token to that account \n', '     */\n', '    function() payable whenNotPaused{\n', '        require(msg.sender != 0x0);\n', '        require(msg.value >= priceOfToken);//must be atleate single token price\n', '        require(now<deadLine);\n', '        uint bonus=0;\n', '        if(now < twoWeeksBonusTime){\n', '            bonus=40;\n', '        }\n', '        else if(now<thirdWeekBonusTime){\n', '          bonus=20;  \n', '        }\n', '        else if (now <fourthWeekBonusTime){\n', '            bonus = 10;\n', '        }\n', '        uint tokensToTransfer=((msg.value*10000)/priceOfToken);\n', '        uint bonusTokens=(tokensToTransfer * bonus) /100;\n', '        tokensToTransfer=tokensToTransfer+bonusTokens;\n', '       if(balances[owner] <tokensToTransfer) //check etiher owner can have token otherwise reject transaction and ether\n', '       {\n', '           revert();\n', '       }\n', '        allowed[owner][msg.sender] += tokensToTransfer;\n', '        bool transferRes=transferFrom(owner, msg.sender, tokensToTransfer);\n', '        if (!transferRes) {\n', '            revert();\n', '        }\n', '        else{\n', '        etherRaised+=msg.value;\n', '        }\n', '        \n', '    }\n', '    \n', '    /**\n', '   * @dev called by the owner to extend deadline relative to last deadLine Time,\n', '   * to accept ether and transfer tokens\n', '   */\n', '   function extendDeadline(uint daysToExtend) onlyOwner{\n', '       deadLine=deadLine +daysToExtend * 1 days;\n', '   }\n', '   \n', '   /**\n', '    * To transfer all balace to any account by only owner\n', '    * */\n', '    function transferFundToAccount(address _accountByOwner) onlyOwner whenPaused returns(uint256 result){\n', '        require(etherRaised>0);\n', '        _accountByOwner.transfer(etherRaised);\n', '        etherRaised=0;\n', '        return etherRaised;\n', '    }\n', '       /**\n', '    * To transfer all balace to any account by only owner\n', '    * */\n', '    function transferLimitedFundToAccount(address _accountByOwner,uint256 balanceToTransfer) onlyOwner whenPaused {\n', '        require(etherRaised>0);\n', '        require(balanceToTransfer<etherRaised);\n', '        _accountByOwner.transfer(balanceToTransfer);\n', '        etherRaised=etherRaised-balanceToTransfer;\n', '    }\n', '    \n', '}']
['pragma solidity 0.4.16;\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    function Ownable() { //This call only first time when contract deployed by person\n', '        owner = msg.sender;\n', '    }\n', '    modifier onlyOwner() { //This modifier is for checking owner is calling\n', '        if (owner == msg.sender) {\n', '            _;\n', '        } else {\n', '            revert();\n', '        }\n', '\n', '    }\n', '\n', '}\n', '\n', 'contract Mortal is Ownable {\n', '    \n', '    function kill() {\n', '        if (msg.sender == owner)\n', '            selfdestruct(owner);\n', '    }\n', '}\n', '\n', 'contract Token {\n', '    uint256 public totalSupply;\n', '    uint256 tokensForICO;\n', '    uint256 etherRaised;\n', '\n', '    function balanceOf(address _owner) constant returns(uint256 balance);\n', '\n', '    function transfer(address _to, uint256 _tokens) public returns(bool resultTransfer);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _tokens) public returns(bool resultTransfer);\n', '\n', '    function approve(address _spender, uint _value) returns(bool success);\n', '\n', '    function allowance(address _owner, address _spender) constant returns(uint remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS paused\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS NOT paused\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', 'contract StandardToken is Token,Mortal,Pausable {\n', '    \n', '    function transfer(address _to, uint256 _value) whenNotPaused returns (bool success) {\n', '        require(_to!=0x0);\n', '        require(_value>0);\n', '         if (balances[msg.sender] >= _value) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 totalTokensToTransfer)whenNotPaused returns (bool success) {\n', '        require(_from!=0x0);\n', '        require(_to!=0x0);\n', '        require(totalTokensToTransfer>0);\n', '    \n', '       if (balances[_from] >= totalTokensToTransfer&&allowance(_from,_to)>=totalTokensToTransfer) {\n', '            balances[_to] += totalTokensToTransfer;\n', '            balances[_from] -= totalTokensToTransfer;\n', '            allowed[_from][msg.sender] -= totalTokensToTransfer;\n', '            Transfer(_from, _to, totalTokensToTransfer);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balanceOfUser) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', 'contract DIGI is StandardToken{\n', '    string public constant name = "DIGI";\n', '    uint8 public constant decimals = 4;\n', '    string public constant symbol = "DIGI";\n', '    uint256 constant priceOfToken=1666666666666666;\n', '    uint256 twoWeeksBonusTime;\n', '    uint256 thirdWeekBonusTime;\n', '    uint256 fourthWeekBonusTime;\n', '    uint256 public deadLine;\n', '    function DIGI(){\n', '       totalSupply=980000000000;  //98 Million\n', '       owner = msg.sender;\n', '       balances[msg.sender] = (980000000000);\n', '       twoWeeksBonusTime=now + 2 * 1 weeks;//set time for first two week relative to deploy time\n', '       thirdWeekBonusTime=twoWeeksBonusTime+1 * 1 weeks;//third week calculate by adding one week by first two week\n', '       fourthWeekBonusTime=thirdWeekBonusTime+1 * 1 weeks;\n', '       deadLine=fourthWeekBonusTime+1 *1 weeks;//deadline is after fourth week just add one week\n', '       etherRaised=0;\n', '    }\n', '    /**\n', '     * @dev directly send ether and transfer token to that account \n', '     */\n', '    function() payable whenNotPaused{\n', '        require(msg.sender != 0x0);\n', '        require(msg.value >= priceOfToken);//must be atleate single token price\n', '        require(now<deadLine);\n', '        uint bonus=0;\n', '        if(now < twoWeeksBonusTime){\n', '            bonus=40;\n', '        }\n', '        else if(now<thirdWeekBonusTime){\n', '          bonus=20;  \n', '        }\n', '        else if (now <fourthWeekBonusTime){\n', '            bonus = 10;\n', '        }\n', '        uint tokensToTransfer=((msg.value*10000)/priceOfToken);\n', '        uint bonusTokens=(tokensToTransfer * bonus) /100;\n', '        tokensToTransfer=tokensToTransfer+bonusTokens;\n', '       if(balances[owner] <tokensToTransfer) //check etiher owner can have token otherwise reject transaction and ether\n', '       {\n', '           revert();\n', '       }\n', '        allowed[owner][msg.sender] += tokensToTransfer;\n', '        bool transferRes=transferFrom(owner, msg.sender, tokensToTransfer);\n', '        if (!transferRes) {\n', '            revert();\n', '        }\n', '        else{\n', '        etherRaised+=msg.value;\n', '        }\n', '        \n', '    }\n', '    \n', '    /**\n', '   * @dev called by the owner to extend deadline relative to last deadLine Time,\n', '   * to accept ether and transfer tokens\n', '   */\n', '   function extendDeadline(uint daysToExtend) onlyOwner{\n', '       deadLine=deadLine +daysToExtend * 1 days;\n', '   }\n', '   \n', '   /**\n', '    * To transfer all balace to any account by only owner\n', '    * */\n', '    function transferFundToAccount(address _accountByOwner) onlyOwner whenPaused returns(uint256 result){\n', '        require(etherRaised>0);\n', '        _accountByOwner.transfer(etherRaised);\n', '        etherRaised=0;\n', '        return etherRaised;\n', '    }\n', '       /**\n', '    * To transfer all balace to any account by only owner\n', '    * */\n', '    function transferLimitedFundToAccount(address _accountByOwner,uint256 balanceToTransfer) onlyOwner whenPaused {\n', '        require(etherRaised>0);\n', '        require(balanceToTransfer<etherRaised);\n', '        _accountByOwner.transfer(balanceToTransfer);\n', '        etherRaised=etherRaised-balanceToTransfer;\n', '    }\n', '    \n', '}']
