['pragma solidity ^0.4.13;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', 'contract BBDToken {\n', '    function totalSupply() constant returns (uint256);\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool);\n', '\n', '    function creationRateOnTime() constant returns (uint256);\n', '    function creationMinCap() constant returns (uint256);\n', '    function transferToExchange(address _from, uint256 _value) returns (bool);\n', '    function buy(address _beneficiary) payable;\n', '}\n', '\n', '/**\n', '    Exchange for BlockChain Board Of Derivatives Token.\n', ' */\n', 'contract BBDExchange is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public constant startTime = 1506844800; //Sunday, 1 October 2017 08:00:00 GMT\n', '    uint256 public constant endTime = 1509523200;  // Wednesday, 1 November 2017 08:00:00 GMT\n', '\n', '    BBDToken private bbdToken;\n', '\n', '    // Events\n', '    event LogSell(address indexed _seller, uint256 _value, uint256 _amount);\n', '    event LogBuy(address indexed _purchaser, uint256 _value, uint256 _amount);\n', '\n', '    // Check if min cap was archived.\n', '    modifier onlyWhenICOReachedCreationMinCap() {\n', '        require(bbdToken.totalSupply() >= bbdToken.creationMinCap());\n', '        _;\n', '    }\n', '\n', '    function() payable {}\n', '\n', '    function Exchange(address bbdTokenAddress) {\n', '        bbdToken = BBDToken(bbdTokenAddress);\n', '    }\n', '\n', '    // Current exchange rate for BBD\n', '    function exchangeRate() constant returns (uint256){\n', '        return bbdToken.creationRateOnTime().mul(100).div(93); // 93% of price on current contract sale\n', '    }\n', '\n', '    // Number of BBD tokens on exchange\n', '    function exchangeBBDBalance() constant returns (uint256){\n', '        return bbdToken.balanceOf(this);\n', '    }\n', '\n', '    // Max number of BBD tokens on exchange to sell\n', '    function maxSell() constant returns (uint256 valueBbd) {\n', '        valueBbd = this.balance.mul(exchangeRate());\n', '    }\n', '\n', '    // Max value of wei for buy on exchange\n', '    function maxBuy() constant returns (uint256 valueInEthWei) {\n', '        valueInEthWei = exchangeBBDBalance().div(exchangeRate());\n', '    }\n', '\n', '    // Check if sell is possible\n', '    function checkSell(uint256 _valueBbd) constant returns (bool isPossible, uint256 valueInEthWei) {\n', '        valueInEthWei = _valueBbd.div(exchangeRate());\n', '        isPossible = this.balance >= valueInEthWei ? true : false;\n', '    }\n', '\n', '    // Check if buy is possible\n', '    function checkBuy(uint256 _valueInEthWei) constant returns (bool isPossible, uint256 valueBbd) {\n', '        valueBbd = _valueInEthWei.mul(exchangeRate());\n', '        isPossible = exchangeBBDBalance() >= valueBbd ? true : false;\n', '    }\n', '\n', '    // Sell BBD\n', '    function sell(uint256 _valueBbd) onlyWhenICOReachedCreationMinCap external {\n', '        require(_valueBbd > 0);\n', '        require(now >= startTime);\n', '        require(now <= endTime);\n', '        require(_valueBbd <= bbdToken.balanceOf(msg.sender));\n', '\n', '        uint256 checkedEth = _valueBbd.div(exchangeRate());\n', '        require(checkedEth <= this.balance);\n', '\n', '        //Transfer BBD to exchange and ETH to user \n', '        require(bbdToken.transferToExchange(msg.sender, _valueBbd));\n', '        msg.sender.transfer(checkedEth);\n', '\n', '        LogSell(msg.sender, checkedEth, _valueBbd);\n', '    }\n', '\n', '    // Buy BBD\n', '    function buy() onlyWhenICOReachedCreationMinCap payable external {\n', '        require(msg.value != 0);\n', '        require(now >= startTime);\n', '        require(now <= endTime);\n', '\n', '        uint256 checkedBBDTokens = msg.value.mul(exchangeRate());\n', '        require(checkedBBDTokens <= exchangeBBDBalance());\n', '\n', '        //Transfer BBD to user. \n', '        require(bbdToken.transfer(msg.sender, checkedBBDTokens));\n', '\n', '        LogBuy(msg.sender, msg.value, checkedBBDTokens);\n', '    }\n', '\n', '    // Close Exchange\n', '    function close() onlyOwner {\n', '        require(now >= endTime);\n', '\n', '        //Transfer BBD and ETH to owner\n', '        require(bbdToken.transfer(owner, exchangeBBDBalance()));\n', '        owner.transfer(this.balance);\n', '    }\n', '}']
['pragma solidity ^0.4.13;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', 'contract BBDToken {\n', '    function totalSupply() constant returns (uint256);\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool);\n', '\n', '    function creationRateOnTime() constant returns (uint256);\n', '    function creationMinCap() constant returns (uint256);\n', '    function transferToExchange(address _from, uint256 _value) returns (bool);\n', '    function buy(address _beneficiary) payable;\n', '}\n', '\n', '/**\n', '    Exchange for BlockChain Board Of Derivatives Token.\n', ' */\n', 'contract BBDExchange is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public constant startTime = 1506844800; //Sunday, 1 October 2017 08:00:00 GMT\n', '    uint256 public constant endTime = 1509523200;  // Wednesday, 1 November 2017 08:00:00 GMT\n', '\n', '    BBDToken private bbdToken;\n', '\n', '    // Events\n', '    event LogSell(address indexed _seller, uint256 _value, uint256 _amount);\n', '    event LogBuy(address indexed _purchaser, uint256 _value, uint256 _amount);\n', '\n', '    // Check if min cap was archived.\n', '    modifier onlyWhenICOReachedCreationMinCap() {\n', '        require(bbdToken.totalSupply() >= bbdToken.creationMinCap());\n', '        _;\n', '    }\n', '\n', '    function() payable {}\n', '\n', '    function Exchange(address bbdTokenAddress) {\n', '        bbdToken = BBDToken(bbdTokenAddress);\n', '    }\n', '\n', '    // Current exchange rate for BBD\n', '    function exchangeRate() constant returns (uint256){\n', '        return bbdToken.creationRateOnTime().mul(100).div(93); // 93% of price on current contract sale\n', '    }\n', '\n', '    // Number of BBD tokens on exchange\n', '    function exchangeBBDBalance() constant returns (uint256){\n', '        return bbdToken.balanceOf(this);\n', '    }\n', '\n', '    // Max number of BBD tokens on exchange to sell\n', '    function maxSell() constant returns (uint256 valueBbd) {\n', '        valueBbd = this.balance.mul(exchangeRate());\n', '    }\n', '\n', '    // Max value of wei for buy on exchange\n', '    function maxBuy() constant returns (uint256 valueInEthWei) {\n', '        valueInEthWei = exchangeBBDBalance().div(exchangeRate());\n', '    }\n', '\n', '    // Check if sell is possible\n', '    function checkSell(uint256 _valueBbd) constant returns (bool isPossible, uint256 valueInEthWei) {\n', '        valueInEthWei = _valueBbd.div(exchangeRate());\n', '        isPossible = this.balance >= valueInEthWei ? true : false;\n', '    }\n', '\n', '    // Check if buy is possible\n', '    function checkBuy(uint256 _valueInEthWei) constant returns (bool isPossible, uint256 valueBbd) {\n', '        valueBbd = _valueInEthWei.mul(exchangeRate());\n', '        isPossible = exchangeBBDBalance() >= valueBbd ? true : false;\n', '    }\n', '\n', '    // Sell BBD\n', '    function sell(uint256 _valueBbd) onlyWhenICOReachedCreationMinCap external {\n', '        require(_valueBbd > 0);\n', '        require(now >= startTime);\n', '        require(now <= endTime);\n', '        require(_valueBbd <= bbdToken.balanceOf(msg.sender));\n', '\n', '        uint256 checkedEth = _valueBbd.div(exchangeRate());\n', '        require(checkedEth <= this.balance);\n', '\n', '        //Transfer BBD to exchange and ETH to user \n', '        require(bbdToken.transferToExchange(msg.sender, _valueBbd));\n', '        msg.sender.transfer(checkedEth);\n', '\n', '        LogSell(msg.sender, checkedEth, _valueBbd);\n', '    }\n', '\n', '    // Buy BBD\n', '    function buy() onlyWhenICOReachedCreationMinCap payable external {\n', '        require(msg.value != 0);\n', '        require(now >= startTime);\n', '        require(now <= endTime);\n', '\n', '        uint256 checkedBBDTokens = msg.value.mul(exchangeRate());\n', '        require(checkedBBDTokens <= exchangeBBDBalance());\n', '\n', '        //Transfer BBD to user. \n', '        require(bbdToken.transfer(msg.sender, checkedBBDTokens));\n', '\n', '        LogBuy(msg.sender, msg.value, checkedBBDTokens);\n', '    }\n', '\n', '    // Close Exchange\n', '    function close() onlyOwner {\n', '        require(now >= endTime);\n', '\n', '        //Transfer BBD and ETH to owner\n', '        require(bbdToken.transfer(owner, exchangeBBDBalance()));\n', '        owner.transfer(this.balance);\n', '    }\n', '}']
