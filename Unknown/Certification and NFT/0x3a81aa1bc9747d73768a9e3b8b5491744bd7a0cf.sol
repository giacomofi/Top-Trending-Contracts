['pragma solidity ^0.4.15;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '\n', '  address public owner;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'interface Token {\n', '  function transfer(address _to, uint256 _value) returns (bool);\n', '  function balanceOf(address _owner) constant returns (uint256 balance);\n', '}\n', '\n', 'contract Crowdsale is Ownable {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  Token token;\n', '\n', '  uint256 public constant RATE = 1000; // Number of tokens per Ether\n', '  uint256 public constant CAP = 100000; // Cap in Ether\n', '  uint256 public constant START = 1505138400; // Sep 11, 2017 @ 14:00 GMT\n', '  uint256 public DAYS = 30; // 30 Days\n', '\n', '  uint256 public raisedAmount = 0;\n', '\n', '  event BoughtTokens(address indexed to, uint256 value);\n', '\n', '  modifier whenSaleIsActive() {\n', '    // Check how much Ether has been raised\n', '    assert(!goalReached());\n', '\n', '    // Check if sale is active\n', '    assert(isActive());\n', '\n', '    _;\n', '  }\n', '\n', '  function Crowdsale(address _tokenAddr) {\n', '      require(_tokenAddr != 0);\n', '      token = Token(_tokenAddr);\n', '  }\n', '\n', '  function isActive() constant returns (bool) {\n', '    return (now <= START.add(DAYS * 1 days));\n', '  }\n', '\n', '  function goalReached() constant returns (bool) {\n', '    return (raisedAmount >= CAP * 1 ether);\n', '  }\n', '\n', '  function () payable {\n', '    buyTokens();\n', '  }\n', '\n', '  /**\n', '  * @dev function that sells available tokens\n', '  */\n', '  function buyTokens() payable whenSaleIsActive {\n', '\n', '    // Calculate tokens to sell\n', '    uint256 weiAmount = msg.value;\n', '    uint256 tokens = weiAmount.mul(RATE);\n', '    uint256 bonus = 0;\n', '\n', '    // Calculate Bonus\n', '    if (now <= START.add(7 days)) {\n', '      bonus = tokens.mul(30).div(100);\n', '    } else if (now <= START.add(14 days)) {\n', '      bonus = tokens.mul(25).div(100);\n', '    } else if (now <= START.add(21 days)) {\n', '      bonus = tokens.mul(20).div(100);\n', '    } else if (now <= START.add(30 days)) {\n', '      bonus = tokens.mul(10).div(100);\n', '    }\n', '\n', '    tokens = tokens.add(bonus);\n', '\n', '    BoughtTokens(msg.sender, tokens);\n', '\n', '    // Send tokens to buyer\n', '    token.transfer(msg.sender, tokens);\n', '\n', '    // Send money to owner\n', '    owner.transfer(msg.value);\n', '  }\n', '\n', '  /**\n', '   * @dev returns the number of tokens allocated to this contract\n', '   */\n', '  function tokensAvailable() constant returns (uint256) {\n', '    return token.balanceOf(this);\n', '  }\n', '\n', '  /**\n', '   * @notice Terminate contract and refund to owner\n', '   */\n', '  function destroy() onlyOwner {\n', '    // Transfer tokens back to owner\n', '    uint256 balance = token.balanceOf(this);\n', '    token.transfer(owner, balance);\n', '\n', '    // There should be no ether in the contract but just in case\n', '    selfdestruct(owner);\n', '  }\n', '\n', '}']
['pragma solidity ^0.4.15;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '\n', '  address public owner;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'interface Token {\n', '  function transfer(address _to, uint256 _value) returns (bool);\n', '  function balanceOf(address _owner) constant returns (uint256 balance);\n', '}\n', '\n', 'contract Crowdsale is Ownable {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  Token token;\n', '\n', '  uint256 public constant RATE = 1000; // Number of tokens per Ether\n', '  uint256 public constant CAP = 100000; // Cap in Ether\n', '  uint256 public constant START = 1505138400; // Sep 11, 2017 @ 14:00 GMT\n', '  uint256 public DAYS = 30; // 30 Days\n', '\n', '  uint256 public raisedAmount = 0;\n', '\n', '  event BoughtTokens(address indexed to, uint256 value);\n', '\n', '  modifier whenSaleIsActive() {\n', '    // Check how much Ether has been raised\n', '    assert(!goalReached());\n', '\n', '    // Check if sale is active\n', '    assert(isActive());\n', '\n', '    _;\n', '  }\n', '\n', '  function Crowdsale(address _tokenAddr) {\n', '      require(_tokenAddr != 0);\n', '      token = Token(_tokenAddr);\n', '  }\n', '\n', '  function isActive() constant returns (bool) {\n', '    return (now <= START.add(DAYS * 1 days));\n', '  }\n', '\n', '  function goalReached() constant returns (bool) {\n', '    return (raisedAmount >= CAP * 1 ether);\n', '  }\n', '\n', '  function () payable {\n', '    buyTokens();\n', '  }\n', '\n', '  /**\n', '  * @dev function that sells available tokens\n', '  */\n', '  function buyTokens() payable whenSaleIsActive {\n', '\n', '    // Calculate tokens to sell\n', '    uint256 weiAmount = msg.value;\n', '    uint256 tokens = weiAmount.mul(RATE);\n', '    uint256 bonus = 0;\n', '\n', '    // Calculate Bonus\n', '    if (now <= START.add(7 days)) {\n', '      bonus = tokens.mul(30).div(100);\n', '    } else if (now <= START.add(14 days)) {\n', '      bonus = tokens.mul(25).div(100);\n', '    } else if (now <= START.add(21 days)) {\n', '      bonus = tokens.mul(20).div(100);\n', '    } else if (now <= START.add(30 days)) {\n', '      bonus = tokens.mul(10).div(100);\n', '    }\n', '\n', '    tokens = tokens.add(bonus);\n', '\n', '    BoughtTokens(msg.sender, tokens);\n', '\n', '    // Send tokens to buyer\n', '    token.transfer(msg.sender, tokens);\n', '\n', '    // Send money to owner\n', '    owner.transfer(msg.value);\n', '  }\n', '\n', '  /**\n', '   * @dev returns the number of tokens allocated to this contract\n', '   */\n', '  function tokensAvailable() constant returns (uint256) {\n', '    return token.balanceOf(this);\n', '  }\n', '\n', '  /**\n', '   * @notice Terminate contract and refund to owner\n', '   */\n', '  function destroy() onlyOwner {\n', '    // Transfer tokens back to owner\n', '    uint256 balance = token.balanceOf(this);\n', '    token.transfer(owner, balance);\n', '\n', '    // There should be no ether in the contract but just in case\n', '    selfdestruct(owner);\n', '  }\n', '\n', '}']
