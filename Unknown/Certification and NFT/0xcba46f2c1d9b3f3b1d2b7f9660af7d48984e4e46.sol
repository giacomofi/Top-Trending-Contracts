['pragma solidity ^0.4.11;\n', '\n', '// By contributing you agree to our terms & conditions.\n', '// https://harbour.tokenate.io/HarbourTermsOfSale.pdf\n', '\n', 'library SafeMath {\n', '    function mul(uint a, uint b) internal returns (uint) {\n', '        uint c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint a, uint b) internal returns (uint) {\n', '        assert(b > 0);\n', '        uint c = a / b;\n', '        assert(a == b * c + a % b);\n', '        return c;\n', '    }\n', '\n', '    function sub(uint a, uint b) internal returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint a, uint b) internal returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function assert(bool assertion) internal {\n', '        if (!assertion) {\n', '            throw;\n', '        }\n', '    }\n', '}\n', '\n', 'contract ownable {\n', '\n', '    address public owner;\n', '\n', '    modifier onlyOwner {\n', '        if (!isOwner(msg.sender)) throw;\n', '        _;\n', '    }\n', '\n', '    function ownable() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) onlyOwner {\n', '        owner = _newOwner;\n', '    }\n', '\n', '    function isOwner(address _address) returns (bool) {\n', '        return owner == _address;\n', '    }\n', '}\n', '\n', 'contract Burnable {\n', '\n', '    event Burn(address indexed owner, uint amount);\n', '    function burn(address _owner, uint _amount) public;\n', '\n', '}\n', '\n', 'contract ERC20 {\n', '    uint public totalSupply;\n', '    \n', '    function totalSupply() constant returns (uint);\n', '    function balanceOf(address _owner) constant returns (uint);\n', '    function allowance(address _owner, address _spender) constant returns (uint);\n', '    function transfer(address _to, uint _value) returns (bool);\n', '    function transferFrom(address _from, address _to, uint _value) returns (bool);\n', '    function approve(address _spender, uint _value) returns (bool);\n', '    \n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', 'contract Mintable {\n', '\n', '    event Mint(address indexed to, uint value);\n', '    function mint(address _to, uint _amount) public;\n', '}\n', '\n', 'contract Token is ERC20, Mintable, Burnable, ownable {\n', '    using SafeMath for uint;\n', '\n', '    string public name;\n', '    string public symbol;\n', '\n', '    uint public decimals = 18;\n', '    uint public maxSupply;\n', '    uint public totalSupply;\n', '    uint public freezeMintUntil;\n', '\n', '    mapping (address => mapping (address => uint)) allowed;\n', '    mapping (address => uint) balances;\n', '\n', '    modifier canMint {\n', '        require(totalSupply < maxSupply);\n', '        _;\n', '    }\n', '\n', '    modifier mintIsNotFrozen {\n', '        require(freezeMintUntil < now);\n', '        _;\n', '    }\n', '\n', '    function Token(string _name, string _symbol, uint _maxSupply) {\n', '        name = _name;\n', '        symbol = _symbol;\n', '        maxSupply = _maxSupply;\n', '        totalSupply = 0;\n', '        freezeMintUntil = 0;\n', '    }\n', '\n', '    function totalSupply() constant returns (uint) {\n', '        return totalSupply;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function transfer(address _to, uint _value) returns (bool) {\n', '        if (_value <= 0) {\n', '            return false;\n', '        }\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) returns (bool) {\n', '        if (_value <= 0) {\n', '            return false;\n', '        }\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint _value) returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function mint(address _to, uint _amount) public canMint mintIsNotFrozen onlyOwner {\n', '        if (maxSupply < totalSupply.add(_amount)) throw;\n', '\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '\n', '        Mint(_to, _amount);\n', '    }\n', '\n', '    function burn(address _owner, uint _amount) public onlyOwner {\n', '        totalSupply = totalSupply.sub(_amount);\n', '        balances[_owner] = balances[_owner].sub(_amount);\n', '\n', '        Burn(_owner, _amount);\n', '    }\n', '\n', '    function freezeMintingFor(uint _weeks) public onlyOwner {\n', '        freezeMintUntil = now + _weeks * 1 weeks;\n', '    }\n', '}\n', '\n', 'contract TokenSale is ownable {\n', '    using SafeMath for uint;\n', '\n', '    uint256 public constant MINT_LOCK_DURATION_IN_WEEKS = 26;\n', '\n', '    Token public token;\n', '\n', '    address public beneficiary;\n', '\n', '    uint public cap;\n', '    uint public collected;\n', '    uint public price;\n', '    uint public purchaseLimit;\n', '\n', '    uint public whitelistStartBlock;\n', '    uint public startBlock;\n', '    uint public endBlock;\n', '\n', '    bool public capReached = false;\n', '    bool public isFinalized = false;\n', '\n', '    mapping (address => uint) contributed;\n', '    mapping (address => bool) whitelisted;\n', '\n', '    event GoalReached(uint amountRaised);\n', '    event NewContribution(address indexed holder, uint256 tokens, uint256 contributed);\n', '    event Refunded(address indexed beneficiary, uint amount);\n', '\n', '    modifier onlyAfterSale { require(block.number > endBlock); _; }\n', '\n', '    modifier onlyWhenFinalized { require(isFinalized); _; }\n', '\n', '    modifier onlyDuringSale {\n', '        require(block.number >= startBlock(msg.sender));\n', '        require(block.number <= endBlock);\n', '        _;\n', '    }\n', '\n', '    modifier onlyWhenEnded {\n', '        if (block.number < endBlock && !capReached) throw;\n', '        _;\n', '    }\n', '\n', '    function TokenSale(\n', '        uint _cap,\n', '        uint _whitelistStartBlock,\n', '        uint _startBlock,\n', '        uint _endBlock,\n', '        address _token,\n', '        uint _price,\n', '        uint _purchaseLimit,\n', '        address _beneficiary\n', '    )\n', '    {\n', '        cap = _cap * 1 ether;\n', '        price = _price;\n', '        purchaseLimit = (_purchaseLimit * 1 ether) * price;\n', '        token = Token(_token);\n', '        beneficiary = _beneficiary;\n', '\n', '        whitelistStartBlock = _whitelistStartBlock;\n', '        startBlock = _startBlock;\n', '        endBlock = _endBlock;\n', '    }\n', '\n', '    function () payable {\n', '        doPurchase(msg.sender);\n', '    }\n', '\n', '    function refund() public onlyWhenFinalized {\n', '        if (capReached) throw;\n', '\n', '        uint balance = token.balanceOf(msg.sender);\n', '        if (balance == 0) throw;\n', '\n', '        uint refund = balance.div(price);\n', '        if (refund > this.balance) {\n', '            refund = this.balance;\n', '        }\n', '\n', '        token.burn(msg.sender, balance);\n', '        contributed[msg.sender] = 0;\n', '\n', '        msg.sender.transfer(refund);\n', '        Refunded(msg.sender, refund);\n', '    }\n', '\n', '    function finalize() public onlyWhenEnded onlyOwner {\n', '        require(!isFinalized);\n', '        isFinalized = true;\n', '\n', '        if (!capReached) {\n', '            return;\n', '        }\n', '\n', '        if (!beneficiary.send(collected)) throw;\n', '        token.freezeMintingFor(MINT_LOCK_DURATION_IN_WEEKS);\n', '    }\n', '\n', '    function doPurchase(address _owner) internal onlyDuringSale {\n', '        if (msg.value <= 0) throw;\n', '        if (collected >= cap) throw;\n', '\n', '        uint value = msg.value;\n', '        if (collected.add(value) > cap) {\n', '            uint difference = cap.sub(collected);\n', '            msg.sender.transfer(value.sub(difference));\n', '            value = difference;\n', '        }\n', '\n', '        uint tokens = value.mul(price);\n', '        if (token.balanceOf(msg.sender) + tokens > purchaseLimit) throw;\n', '\n', '        collected = collected.add(value);\n', '        token.mint(msg.sender, tokens);\n', '        NewContribution(_owner, tokens, value);\n', '\n', '        if (collected != cap) {\n', '            return;\n', '        }\n', '\n', '        GoalReached(collected);\n', '        capReached = true;\n', '    }\n', '\n', '    function addToWhitelist(address _address) public onlyOwner {\n', '        whitelisted[_address] = true;\n', '    }\n', '\n', '    function startBlock(address contributor) constant returns (uint) {\n', '        if (whitelisted[contributor]) {\n', '            return whitelistStartBlock;\n', '        }\n', '\n', '        return startBlock;\n', '    }\n', '\n', '    function tokenTransferOwnership(address _newOwner) public onlyWhenFinalized {\n', '        if (!capReached) throw; // only transfer if cap reached, otherwise we need burning for refund\n', '        token.transferOwnership(_newOwner);\n', '    }\n', '}']
['pragma solidity ^0.4.11;\n', '\n', '// By contributing you agree to our terms & conditions.\n', '// https://harbour.tokenate.io/HarbourTermsOfSale.pdf\n', '\n', 'library SafeMath {\n', '    function mul(uint a, uint b) internal returns (uint) {\n', '        uint c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint a, uint b) internal returns (uint) {\n', '        assert(b > 0);\n', '        uint c = a / b;\n', '        assert(a == b * c + a % b);\n', '        return c;\n', '    }\n', '\n', '    function sub(uint a, uint b) internal returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint a, uint b) internal returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function assert(bool assertion) internal {\n', '        if (!assertion) {\n', '            throw;\n', '        }\n', '    }\n', '}\n', '\n', 'contract ownable {\n', '\n', '    address public owner;\n', '\n', '    modifier onlyOwner {\n', '        if (!isOwner(msg.sender)) throw;\n', '        _;\n', '    }\n', '\n', '    function ownable() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) onlyOwner {\n', '        owner = _newOwner;\n', '    }\n', '\n', '    function isOwner(address _address) returns (bool) {\n', '        return owner == _address;\n', '    }\n', '}\n', '\n', 'contract Burnable {\n', '\n', '    event Burn(address indexed owner, uint amount);\n', '    function burn(address _owner, uint _amount) public;\n', '\n', '}\n', '\n', 'contract ERC20 {\n', '    uint public totalSupply;\n', '    \n', '    function totalSupply() constant returns (uint);\n', '    function balanceOf(address _owner) constant returns (uint);\n', '    function allowance(address _owner, address _spender) constant returns (uint);\n', '    function transfer(address _to, uint _value) returns (bool);\n', '    function transferFrom(address _from, address _to, uint _value) returns (bool);\n', '    function approve(address _spender, uint _value) returns (bool);\n', '    \n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', 'contract Mintable {\n', '\n', '    event Mint(address indexed to, uint value);\n', '    function mint(address _to, uint _amount) public;\n', '}\n', '\n', 'contract Token is ERC20, Mintable, Burnable, ownable {\n', '    using SafeMath for uint;\n', '\n', '    string public name;\n', '    string public symbol;\n', '\n', '    uint public decimals = 18;\n', '    uint public maxSupply;\n', '    uint public totalSupply;\n', '    uint public freezeMintUntil;\n', '\n', '    mapping (address => mapping (address => uint)) allowed;\n', '    mapping (address => uint) balances;\n', '\n', '    modifier canMint {\n', '        require(totalSupply < maxSupply);\n', '        _;\n', '    }\n', '\n', '    modifier mintIsNotFrozen {\n', '        require(freezeMintUntil < now);\n', '        _;\n', '    }\n', '\n', '    function Token(string _name, string _symbol, uint _maxSupply) {\n', '        name = _name;\n', '        symbol = _symbol;\n', '        maxSupply = _maxSupply;\n', '        totalSupply = 0;\n', '        freezeMintUntil = 0;\n', '    }\n', '\n', '    function totalSupply() constant returns (uint) {\n', '        return totalSupply;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function transfer(address _to, uint _value) returns (bool) {\n', '        if (_value <= 0) {\n', '            return false;\n', '        }\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) returns (bool) {\n', '        if (_value <= 0) {\n', '            return false;\n', '        }\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint _value) returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function mint(address _to, uint _amount) public canMint mintIsNotFrozen onlyOwner {\n', '        if (maxSupply < totalSupply.add(_amount)) throw;\n', '\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '\n', '        Mint(_to, _amount);\n', '    }\n', '\n', '    function burn(address _owner, uint _amount) public onlyOwner {\n', '        totalSupply = totalSupply.sub(_amount);\n', '        balances[_owner] = balances[_owner].sub(_amount);\n', '\n', '        Burn(_owner, _amount);\n', '    }\n', '\n', '    function freezeMintingFor(uint _weeks) public onlyOwner {\n', '        freezeMintUntil = now + _weeks * 1 weeks;\n', '    }\n', '}\n', '\n', 'contract TokenSale is ownable {\n', '    using SafeMath for uint;\n', '\n', '    uint256 public constant MINT_LOCK_DURATION_IN_WEEKS = 26;\n', '\n', '    Token public token;\n', '\n', '    address public beneficiary;\n', '\n', '    uint public cap;\n', '    uint public collected;\n', '    uint public price;\n', '    uint public purchaseLimit;\n', '\n', '    uint public whitelistStartBlock;\n', '    uint public startBlock;\n', '    uint public endBlock;\n', '\n', '    bool public capReached = false;\n', '    bool public isFinalized = false;\n', '\n', '    mapping (address => uint) contributed;\n', '    mapping (address => bool) whitelisted;\n', '\n', '    event GoalReached(uint amountRaised);\n', '    event NewContribution(address indexed holder, uint256 tokens, uint256 contributed);\n', '    event Refunded(address indexed beneficiary, uint amount);\n', '\n', '    modifier onlyAfterSale { require(block.number > endBlock); _; }\n', '\n', '    modifier onlyWhenFinalized { require(isFinalized); _; }\n', '\n', '    modifier onlyDuringSale {\n', '        require(block.number >= startBlock(msg.sender));\n', '        require(block.number <= endBlock);\n', '        _;\n', '    }\n', '\n', '    modifier onlyWhenEnded {\n', '        if (block.number < endBlock && !capReached) throw;\n', '        _;\n', '    }\n', '\n', '    function TokenSale(\n', '        uint _cap,\n', '        uint _whitelistStartBlock,\n', '        uint _startBlock,\n', '        uint _endBlock,\n', '        address _token,\n', '        uint _price,\n', '        uint _purchaseLimit,\n', '        address _beneficiary\n', '    )\n', '    {\n', '        cap = _cap * 1 ether;\n', '        price = _price;\n', '        purchaseLimit = (_purchaseLimit * 1 ether) * price;\n', '        token = Token(_token);\n', '        beneficiary = _beneficiary;\n', '\n', '        whitelistStartBlock = _whitelistStartBlock;\n', '        startBlock = _startBlock;\n', '        endBlock = _endBlock;\n', '    }\n', '\n', '    function () payable {\n', '        doPurchase(msg.sender);\n', '    }\n', '\n', '    function refund() public onlyWhenFinalized {\n', '        if (capReached) throw;\n', '\n', '        uint balance = token.balanceOf(msg.sender);\n', '        if (balance == 0) throw;\n', '\n', '        uint refund = balance.div(price);\n', '        if (refund > this.balance) {\n', '            refund = this.balance;\n', '        }\n', '\n', '        token.burn(msg.sender, balance);\n', '        contributed[msg.sender] = 0;\n', '\n', '        msg.sender.transfer(refund);\n', '        Refunded(msg.sender, refund);\n', '    }\n', '\n', '    function finalize() public onlyWhenEnded onlyOwner {\n', '        require(!isFinalized);\n', '        isFinalized = true;\n', '\n', '        if (!capReached) {\n', '            return;\n', '        }\n', '\n', '        if (!beneficiary.send(collected)) throw;\n', '        token.freezeMintingFor(MINT_LOCK_DURATION_IN_WEEKS);\n', '    }\n', '\n', '    function doPurchase(address _owner) internal onlyDuringSale {\n', '        if (msg.value <= 0) throw;\n', '        if (collected >= cap) throw;\n', '\n', '        uint value = msg.value;\n', '        if (collected.add(value) > cap) {\n', '            uint difference = cap.sub(collected);\n', '            msg.sender.transfer(value.sub(difference));\n', '            value = difference;\n', '        }\n', '\n', '        uint tokens = value.mul(price);\n', '        if (token.balanceOf(msg.sender) + tokens > purchaseLimit) throw;\n', '\n', '        collected = collected.add(value);\n', '        token.mint(msg.sender, tokens);\n', '        NewContribution(_owner, tokens, value);\n', '\n', '        if (collected != cap) {\n', '            return;\n', '        }\n', '\n', '        GoalReached(collected);\n', '        capReached = true;\n', '    }\n', '\n', '    function addToWhitelist(address _address) public onlyOwner {\n', '        whitelisted[_address] = true;\n', '    }\n', '\n', '    function startBlock(address contributor) constant returns (uint) {\n', '        if (whitelisted[contributor]) {\n', '            return whitelistStartBlock;\n', '        }\n', '\n', '        return startBlock;\n', '    }\n', '\n', '    function tokenTransferOwnership(address _newOwner) public onlyWhenFinalized {\n', '        if (!capReached) throw; // only transfer if cap reached, otherwise we need burning for refund\n', '        token.transferOwnership(_newOwner);\n', '    }\n', '}']
