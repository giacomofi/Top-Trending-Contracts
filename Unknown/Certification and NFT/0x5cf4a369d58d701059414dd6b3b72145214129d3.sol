['pragma solidity ^0.4.11;\n', '\n', 'contract ERC20Constant {\n', '    function balanceOf( address who ) constant returns (uint value);\n', '}\n', 'contract ERC20Stateful {\n', '    function transfer( address to, uint value) returns (bool ok);\n', '}\n', 'contract ERC20Events {\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', 'contract ERC20 is ERC20Constant, ERC20Stateful, ERC20Events {}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '\n', '    function Owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract ClosedSale is Owned {\n', '\n', '    ERC20 public token;\n', '\n', '    // Amount of Token received per ETH\n', '    uint256 public tokenPerEth;\n', '\n', '    // Address that can buy the Token\n', '    address public buyer;\n', '\n', '    // Forwarding address\n', '    address public receiver;\n', '\n', '    event LogWithdrawal(uint256 _value);\n', '    event LogBought(uint _value);\n', '\n', '    function ClosedSale (\n', '        ERC20   _token,\n', '        address _buyer,\n', '        uint256 _tokenPerEth,\n', '        address _receiver\n', '    )\n', '        Owned()\n', '    {\n', '        token       = _token;\n', '        receiver    = _receiver;\n', '        buyer       = _buyer;\n', '        tokenPerEth = _tokenPerEth;\n', '    }\n', '\n', '    // Withdraw the token\n', '    function withdrawToken(uint256 _value) onlyOwner returns (bool ok) {\n', '        return ERC20(token).transfer(owner,_value);\n', '        LogWithdrawal(_value);\n', '    }\n', '\n', '    function buy(address beneficiary) payable {\n', '        require(beneficiary == buyer);\n', '\n', '        uint orderInTokens = msg.value * tokenPerEth;\n', '        token.transfer(beneficiary, orderInTokens);\n', '        receiver.transfer(msg.value);\n', '\n', '        LogBought(orderInTokens);\n', '    }\n', '\n', '    function() payable {\n', '        buy(msg.sender);\n', '    }\n', '}']