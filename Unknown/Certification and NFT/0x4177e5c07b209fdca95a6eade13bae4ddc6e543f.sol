['pragma solidity ^0.4.16;\n', '\n', '\n', '/// @title etherfund.me  basic crowdfunding contract\n', 'contract EtherFundMeCrowdfunding {\n', '\n', '\t/// The crowdfunding project name\n', '\tstring public name;\n', '\n', '\t/// The crowdfunding project description\n', '\tstring public description;\n', '\n', '    /// The crowdfunding team contact\n', '\tstring public teamContact;\n', '\n', '\t/// The start time of crowdfunding\n', '    uint public startsAt;\n', '\n', '\t/// The end time of crowdfunding\n', '    uint public endsAt;\n', '\n', '\t/// Crowdfunding team wallet\n', '    address public team;\n', '\n', '    /// etherfund.me fee wallet\n', '    address public feeReceiver;\n', '\n', '\t/// etherfund.me deploy agent\n', '\taddress public deployAgent;\n', '\n', '\t/// if the funding goal is not reached, investors may withdraw their funds\n', '    uint public fundingGoal;\n', '\n', '    ///  How many distinct addresses have invested\n', '    uint public investorCount = 0;\n', '\n', '\t///  Has this crowdfunding been finalized\n', '    bool public finalized;\n', '\n', '    ///  Has this crowdfunding been paused\n', '\tbool public halted;\n', '\n', '    ///  How much ETH each address has invested to this crowdfunding\n', '    mapping (address => uint256) public investedAmountOf;\n', '\n', '\t/// etherfund.me final fee in %\n', '    uint public constant ETHERFUNDME_FEE = 2;\n', '\n', '\t/// etherfund.me each transaction fee in %\n', '    uint public constant ETHERFUNDME_ONLINE_FEE = 1;\n', '\n', '    /// if a project reach 60% of their funding goal it becomes successful\n', '\tuint public constant GOAL_REACHED_CRITERION = 60;\n', '\n', '\t/// State machine\n', '\t/// Preparing: All contract initialization calls and variables have not been set yet\n', '\t/// Funding: Active crowdsale\n', '\t/// Success: Minimum funding goal reached\n', '\t/// Failure: Minimum funding goal not reached before ending time\n', '\t/// Finalized: The finalized has been called and succesfully executed\n', '\t/// Refunding: Refunds are loaded on the contract for reclaim\n', '    enum State { Unknown, Preparing, Funding, Success, Failure, Finalized, Refunding }\n', '\n', '    /// A new investment was made\n', '    event Invested(address investor, uint weiAmount);\n', '\n', '    /// Withdraw was processed for a contributor\n', '    event Withdraw(address receiver, uint weiAmount);\n', '\n', '    /// Returning funds for a contributor\n', '    event Refund(address receiver, uint weiAmount);\n', '\n', '    /// Modified allowing execution only if the crowdfunding is currently running\n', '\t modifier inState(State state) {\n', '\t\trequire(getState() == state);\n', '\t\t_;\n', '\t }\n', '\n', '\t /// Modified allowing execution only if deploy agent call\n', '\t modifier onlyDeployAgent() {\n', '\t\trequire(msg.sender == deployAgent);\n', '\t\t_;\n', '\t }\n', '\n', '\t /// Modified allowing execution only if not stopped\n', '\t modifier stopInEmergency {\n', '\t\trequire(!halted);\n', '\t\t_;\n', '\t }\n', '\n', '\t /// Modified allowing execution only if stopped\n', '\t modifier onlyInEmergency {\n', '\t\trequire(halted);\n', '\t\t_;\n', '\t }\n', '\n', '\t /// @dev Constructor\n', '\t /// @param _name crowdfunding project name\n', '\t /// @param _description crowdfunding project short description\n', '\t /// @param _teamContact crowdfunding team contact\n', '\t /// @param _startsAt crowdfunding start time\n', '\t /// @param _endsAt crowdfunding end time\n', '\t /// @param _fundingGoal funding goal in wei\n', '\t /// @param _team  team address\n', '\t /// @param _feeReceiver  fee receiver address\n', '\t function EtherFundMeCrowdfunding(string _name, string _description, string _teamContact, uint _startsAt, uint _endsAt, uint _fundingGoal, address _team, address _feeReceiver) {\n', '\t\trequire(_startsAt != 0);\n', '\t \trequire(_endsAt != 0);\n', '\t\trequire(_fundingGoal != 0);\n', '\t \trequire(_team != 0);\n', '\t\trequire(_feeReceiver != 0);\n', '\n', '\t\tdeployAgent = msg.sender;\n', '\t\tname = _name;\n', '\t\tdescription = _description;\n', '\t\tteamContact = _teamContact;\n', '\t\tstartsAt = _startsAt;\n', '\t\tendsAt = _endsAt;\n', '\t\tfundingGoal = _fundingGoal;\n', '\t\tteam = _team;\n', '\t\tfeeReceiver = _feeReceiver;\n', '\t }\n', '\n', '\t /// @dev Crowdfund state machine management.\n', '\t /// @return State current state\n', '\tfunction getState() public constant returns (State) {\n', '\t\tif (finalized)\n', '\t\t\treturn State.Finalized;\n', '\t\tif (startsAt > now)\n', '\t\t\treturn State.Preparing;\n', '\t\tif (now >= startsAt && now < endsAt)\n', '\t\t\treturn State.Funding;\n', '\t\tif (isGoalReached())\n', '\t\t\treturn State.Success;\n', '\t\tif (!isGoalReached() && this.balance > 0)\n', '\t\t\treturn State.Refunding;\n', '\t\treturn State.Failure;\n', '\t}\n', '\n', '\t/// @dev Goal was reached\n', '\t/// @return true if the crowdsale has raised enough money to be a succes\n', '\tfunction isGoalReached() public constant returns (bool reached) {\n', '\t\treturn this.balance >= (fundingGoal * GOAL_REACHED_CRITERION) / 100;\n', '\t}\n', '\n', '\t /// @dev Fallback method\n', '\t function() payable {\n', '\t\tinvest();\n', '\t }\n', '\n', '\t /// @dev Allow contributions to this crowdfunding.\n', '\t function invest() public payable stopInEmergency  {\n', '\t\trequire(getState() == State.Funding);\n', '\t\trequire(msg.value > 0);\n', '\n', '\t\tuint weiAmount = msg.value;\n', '\t\taddress investor = msg.sender;\n', '\n', '\t\tif(investedAmountOf[investor] == 0) {\n', '\t\t\t// A new investor\n', '\t\t\tinvestorCount++;\n', '\t\t}\n', '\n', '\t    // calculate online fee\n', '\t\tuint onlineFeeAmount = (weiAmount * ETHERFUNDME_ONLINE_FEE) / 100;\n', '\t\tWithdraw(feeReceiver, onlineFeeAmount);\n', '\t\t// send online fee\n', '\t\tfeeReceiver.transfer(onlineFeeAmount);\n', '\n', '\t\tuint investedAmount = weiAmount - onlineFeeAmount;\n', '\t\t// Update investor\n', '\t\tinvestedAmountOf[investor] += investedAmount;\n', '\t\t// Tell us invest was success\n', '\t\tInvested(investor, investedAmount);\n', '\t }\n', '\n', '\t /// @dev Finalize a succcesful crowdfunding. The team can triggre a call the contract that provides post-crowdfunding actions, like releasing the funds.\n', '\t function finalize() public inState(State.Success) stopInEmergency  {\n', '\t\trequire(msg.sender == deployAgent || msg.sender == team);\n', '\t\trequire(!finalized);\n', '\n', '\t\tfinalized = true;\n', '\n', '\t\tuint feeAmount = (this.balance * ETHERFUNDME_FEE) / 100;\n', '\t\tuint teamAmount = this.balance - feeAmount;\n', '\n', '\t\tWithdraw(team, teamAmount);\n', '\t\tteam.transfer(teamAmount);\n', '\n', '\t\tWithdraw(feeReceiver, feeAmount);\n', '\t\tfeeReceiver.transfer(feeAmount);\n', '\t }\n', '\n', '\t /// @dev Investors can claim refund.\n', '\t function refund() public inState(State.Refunding) {\n', '\t\tuint weiValue = investedAmountOf[msg.sender];\n', '\t    if (weiValue == 0) revert();\n', '\t    investedAmountOf[msg.sender] = 0;\n', '\t    Refund(msg.sender, weiValue);\n', '\t\tmsg.sender.transfer(weiValue);\n', '\t }\n', '\n', '\t /// called by the deploy agent on emergency, triggers stopped state\n', '\t function halt() public onlyDeployAgent {\n', '\t\thalted = true;\n', '\t }\n', '\n', '\t /// called by the deploy agent on end of emergency, returns to normal state\n', '\t function unhalt() public onlyDeployAgent onlyInEmergency {\n', '\t\thalted = false;\n', '\t }\n', '}']