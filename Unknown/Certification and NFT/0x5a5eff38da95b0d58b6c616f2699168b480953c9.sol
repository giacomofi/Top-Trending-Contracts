['// A life-log, done for Charlyn Greeff, born 18 April 2016 @ 15h30 (1460993400)\n', '//    Mother: Mirana Hotz, 16 December 1977 (251078400)\n', '//    Father: Jaco Greeff, 11 June 1973 (108604800)\n', '//\n', '// version: 1.0.0\n', '// source: https://github.com/jacogr/ethcontracts/tree/master/src/LifeLog\n', '\n', 'contract CharlyLifeLog {\n', '  // allow a maximum 20% withdrawal at any time\n', '  uint private constant MAX_WITHDRAW_DIV = 5; // 100/20\n', '\n', '  // allow one withdrawal every 6 months/180 days\n', '  uint private constant WITHDRAW_INTERVAL = 180 days;\n', '\n', '  // all the actual events that can be created\n', '  event LogDonation(address indexed by, uint loggedAt, uint amount);\n', '  event LogWithdrawal(address indexed by, uint loggedAt, uint amount);\n', '  event LogPersonNew(address indexed by, uint loggedAt, uint index);\n', '  event LogPersonUpdate(address indexed by, uint loggedAt, uint index, string field);\n', '  event LogWhitelistAdd(address indexed by, uint loggedAt, address addr);\n', '  event LogWhitelistRemove(address indexed by, uint loggedAt);\n', '  event LogEvent(address indexed by, uint loggedAt, uint when, string description);\n', '\n', '  // a structure describing a person\n', '  struct Person {\n', '    bool active;\n', '    uint activatedAt;\n', '    uint deactivatedAt;\n', '    int dateOfBirth;\n', '    int dateOfDeath;\n', '    string name;\n', '    string relation;\n', '  }\n', '\n', '  // next time whitelist address is allowed to get some funds\n', '  uint public nextWithdrawal = now + WITHDRAW_INTERVAL;\n', '\n', '  // totals of received and withdrawn amounts\n', '  uint public totalDonated = 0;\n', '  uint public totalWithdrawn = 0;\n', '\n', "  // people in the life of ([0] == 'self')\n", '  Person[] public people;\n', '\n', '  // donations received\n', '  mapping(address => uint) public donations;\n', '\n', '  // whitelisted modifier accounts\n', '  mapping(address => bool) public whitelist;\n', '\n', '  // modifier to allow only the whitelisted addresses\n', '  modifier isOnWhitelist {\n', '    // if not in the whitelist, throw error\n', '    if (!whitelist[msg.sender]) {\n', '      throw;\n', '    }\n', '\n', "    // if any value attached, don't accept it\n", '    if (msg.value > 0) {\n', '      throw;\n', '    }\n', '\n', '    // original code executes in here\n', '    _\n', '  }\n', '\n', '  // construct a lifelog for this specific person\n', '  function CharlyLifeLog(string name, int dateOfBirth) {\n', '    // creator should go on the whitelist\n', '    whitelist[msg.sender] = true;\n', '\n', '    // add the first person\n', "    personAdd(name, dateOfBirth, 0, 'self');\n", '\n', '    // any donations?\n', '    if (msg.value > 0) {\n', '      donate();\n', '    }\n', '  }\n', '\n', '  // log an event\n', '  function log(string description, uint _when) public isOnWhitelist {\n', '    // infer timestamp or use specified\n', '    uint when = _when;\n', '    if (when == 0) {\n', '      when = now;\n', '    }\n', '\n', '    // create the event\n', '    LogEvent(msg.sender, now, when, description);\n', '  }\n', '\n', '  // add a specific person\n', '  function personAdd(string name, int dateOfBirth, int dateOfDeath, string relation) public isOnWhitelist {\n', '    // create the event\n', '    LogPersonNew(msg.sender, now, people.length);\n', '\n', '    // add the person\n', '    people.push(\n', '      Person({\n', '        active: true,\n', '        activatedAt: now,\n', '        deactivatedAt: 0,\n', '        dateOfBirth: dateOfBirth,\n', '        dateOfDeath: dateOfDeath,\n', '        name: name,\n', '        relation: relation\n', '      })\n', '    );\n', '  }\n', '\n', '  // activate/deactivate a specific person\n', '  function personUpdateActivity(uint index, bool active) public isOnWhitelist {\n', '    // set the flag\n', '    people[index].active = active;\n', '\n', '    // activate/deactivate\n', '    if (active) {\n', '      // create the event\n', "      LogPersonUpdate(msg.sender, now, index, 'active');\n", '\n', '      // make it so\n', '      people[index].activatedAt = now;\n', '      people[index].deactivatedAt = 0;\n', '    } else {\n', '      // create the event\n', "      LogPersonUpdate(msg.sender, now, index, 'inactive');\n", '\n', '      // make it so\n', '      people[index].deactivatedAt = now;\n', '    }\n', '  }\n', '\n', "  // update a person's name\n", '  function personUpdateName(uint index, string name) public isOnWhitelist {\n', '    // create the event\n', "    LogPersonUpdate(msg.sender, now, index, 'name');\n", '\n', '    // update\n', '    people[index].name = name;\n', '  }\n', '\n', "  // update a person's relation\n", '  function personUpdateRelation(uint index, string relation) public isOnWhitelist {\n', '    // create the event\n', "    LogPersonUpdate(msg.sender, now, index, 'relation');\n", '\n', '    // update\n', '    people[index].relation = relation;\n', '  }\n', '\n', "  // update a person's DOB\n", '  function personUpdateDOB(uint index, int dateOfBirth) public isOnWhitelist {\n', '    // create the event\n', "    LogPersonUpdate(msg.sender, now, index, 'dateOfBirth');\n", '\n', '    // update\n', '    people[index].dateOfBirth = dateOfBirth;\n', '  }\n', '\n', "  // update a person's DOD\n", '  function personUpdateDOD(uint index, int dateOfDeath) public isOnWhitelist {\n', '    // create the event\n', "    LogPersonUpdate(msg.sender, now, index, 'dateOfDeath');\n", '\n', '    // update\n', '    people[index].dateOfDeath = dateOfDeath;\n', '  }\n', '\n', '  // add a whitelist address\n', '  function whitelistAdd(address addr) public isOnWhitelist {\n', '    // create the event\n', '    LogWhitelistAdd(msg.sender, now, addr);\n', '\n', '    // update\n', '    whitelist[addr] = true;\n', '  }\n', '\n', '  // remove a whitelist address\n', '  function whitelistRemove(address addr) public isOnWhitelist {\n', '    // we can only remove ourselves, double-validate failsafe\n', '    if (msg.sender != addr) {\n', '      throw;\n', '    }\n', '\n', '    // create the event\n', '    LogWhitelistRemove(msg.sender, now);\n', '\n', '    // remove\n', '    whitelist[msg.sender] = false;\n', '  }\n', '\n', '  // withdraw funds as/when needed\n', '  function withdraw(uint amount) public isOnWhitelist {\n', '    // the maximum we are allowed to take out right now\n', '    uint max = this.balance / MAX_WITHDRAW_DIV;\n', '\n', '    // see that we are in range and the timing matches\n', '    if (amount > max || now < nextWithdrawal) {\n', '      throw;\n', '    }\n', '\n', '    // update the event log with the action\n', '    LogWithdrawal(msg.sender, now, amount);\n', '\n', '    // set the next withdrawal date/time & totals\n', '    nextWithdrawal = now + WITHDRAW_INTERVAL;\n', '    totalWithdrawn += amount;\n', '\n', '    // send and throw if not ok\n', '    if (!msg.sender.send(amount)) {\n', '      throw;\n', '    }\n', '  }\n', '\n', '  // accept donations from anywhere and give credit\n', '  function donate() public {\n', '    // there needs to be something here\n', '    if (msg.value == 0) {\n', '      throw;\n', '    }\n', '\n', '    // update the event log with the action\n', '    LogDonation(msg.sender, now, msg.value);\n', '\n', '    // store the donation\n', '    donations[msg.sender] += msg.value;\n', '    totalDonated += msg.value;\n', '  }\n', '\n', '  // fallback is a donation\n', '  function() public {\n', '    donate();\n', '  }\n', '}']