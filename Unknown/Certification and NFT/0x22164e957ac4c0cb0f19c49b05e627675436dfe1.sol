['pragma solidity ^0.4.11;\n', '\n', '/* Ethart unindexed Factory Contract:\n', '\n', '\tEthart ARCHITECTURE\n', '\t-------------------\n', '\t\t\t\t\t\t_________________________________________\n', '\t\t\t\t\t\tV\t\t\t\t\t\t\t\t\t\tV\n', '\tController --> Registrar <--> Factory Contract1 --> Artwork Contract1\n', '\t\t\t\t\t\t\t\t  Factory Contract2\t    Artwork Contract2\n', '\t\t\t\t\t\t\t\t  \t\t...\t\t\t\t\t...\n', '\t\t\t\t\t\t\t\t  Factory ContractN\t    Artwork ContractN\n', '\n', '\tController: The controler contract is the owner of the Registrar contract and can\n', '\t\t- Set a new owner\n', '\t\t- Controll the assets of the Registrar (withdraw ETH, transfer, sell, burn pieces owned by the Registrar)\n', '\t\t- The plan is to replace the controller contract with a DAO in preperation for a possible ICO\n', '\t\n', '\tRegistrar:\n', '\t\t- The Registrar contract atcs as the central registry for all sha256 hashes in the Ethart factory contract network.\n', '\t\t- Approved Factory Contracts can register sha256 hashes using the Registrar interface.\n', '\t\t- 2.5% of the art produced and 2.5% of turnover of the contract network will be transfered to the Registrar.\n', '\t\n', '\tFactory Contracts:\n', '\t\t- Factory Contracts can spawn Artwork Contracts in line with artists specifications\n', '\t\t- Factory Contracts will only spawn Artwork Contracts who&#39;s sha256 hashes are unique per the Registrar&#39;s sha256 registry\n', '\t\t- Factory Contracts will register every new Artwork Contract with it&#39;s details with the Registrar contract\n', '\t\n', '\tArtwork Contracts:\n', '\t\t- Artwork Contracts act as minimalist decentralized exchanges for their pieces in line with specified conditions\n', '\t\t- Artwork Contracts will interact with the Registrar to issue buyers of pieces a predetermined amount of Patron tokens based on the transaction value \n', '\t\t- Artwork Contracts can be interacted with by the Controller via the Registrar using their interfaces to transfer, sell, burn etc pieces\n', '\t\n', '\t(c) Stefan Pernar 2017 - all rights reserved\n', '\t(c) ERC20 functions BokkyPooBah 2017. The MIT Licence.\n', '\n', 'Artworks created with this factory have the following ABI:\n', '\n', '[{"constant":true,"inputs":[],"name":"pieceForSale","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_amount","type":"uint256"}],"name":"approve","outputs":[{"name":"success","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"ownerCommission","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_proofLink","type":"string"}],"name":"setProof","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"proofLink","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"totalSupply","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"lowestAskAddress","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_amount","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"success","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"fillBid","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"burn","outputs":[{"name":"success","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"highestBidPrice","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"highestBidAddress","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"highestBidTime","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_value","type":"uint256"}],"name":"burnFrom","outputs":[{"name":"success","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"lowestAskPrice","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"cancelBid","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"changeOwner","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_amount","type":"uint256"}],"name":"transfer","outputs":[{"name":"success","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"pieceWanted","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"SHA256ofArtwork","outputs":[{"name":"","type":"bytes32"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_price","type":"uint256"}],"name":"offerPieceForSale","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"buyPiece","outputs":[],"payable":true,"type":"function"},{"constant":true,"inputs":[],"name":"activationTime","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"remaining","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"piecesOwned","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"cancelSale","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"placeBid","outputs":[],"payable":true,"type":"function"},{"constant":true,"inputs":[],"name":"lowestAskTime","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[{"name":"_SHA256ofArtwork","type":"bytes32"},{"name":"_editionSize","type":"uint256"},{"name":"_title","type":"string"},{"name":"_fileLink","type":"string"},{"name":"_ownerCommission","type":"uint256"},{"name":"_owner","type":"address"}],"payable":false,"type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"name":"price","type":"uint256"},{"indexed":false,"name":"seller","type":"address"}],"name":"newLowestAsk","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"price","type":"uint256"},{"indexed":false,"name":"bidder","type":"address"}],"name":"newHighestBid","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"amount","type":"uint256"},{"indexed":false,"name":"from","type":"address"},{"indexed":false,"name":"to","type":"address"}],"name":"pieceTransfered","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"from","type":"address"},{"indexed":false,"name":"to","type":"address"},{"indexed":false,"name":"price","type":"uint256"}],"name":"pieceSold","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_from","type":"address"},{"indexed":true,"name":"_to","type":"address"},{"indexed":false,"name":"_value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_owner","type":"address"},{"indexed":true,"name":"_spender","type":"address"},{"indexed":false,"name":"_value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_owner","type":"address"},{"indexed":false,"name":"_amount","type":"uint256"}],"name":"Burn","type":"event"}]\n', '\n', '*/\n', '\n', 'contract Interface {\n', '\n', '\t// Ethart network interface\n', '    function registerArtwork (address _contract, bytes32 _SHA256Hash, uint256 _editionSize, string _title, string _fileLink, uint256 _ownerCommission, address _artist, bool _indexed, bool _ouroboros);\t\t// Registers a new sha256 hash.\n', '\tfunction isSHA256HashRegistered (bytes32 _SHA256Hash) returns (bool _registered);\t\t\t// Check if a sha256 hash is registared\n', '\tfunction isFactoryApproved (address _factory) returns (bool _approved);\t\t\t\t\t\t// Check if an address is a registred factory contract\n', '\tfunction issuePatrons (address _to, uint256 _amount);\t\t\t\t\t\t\t\t\t\t// Issues Patron tokens according to conditions specified in factory contracts\n', '\n', '\t// ERC20 interface\n', '    function totalSupply() constant returns (uint256 totalSupply);\n', '\tfunction balanceOf(address _owner) constant returns (uint256 balance);\n', ' \tfunction transfer(address _to, uint256 _value) returns (bool success);\n', ' \tfunction transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\tfunction approve(address _spender, uint256 _value) returns (bool success);\n', '\tfunction allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '\tfunction burn(uint256 _amount) returns (bool success);\n', '\tfunction burnFrom(address _from, uint256 _amount) returns (bool success);\n', '}\n', '\n', 'contract Artwork {\n', '\n', '/* 1. Introduction\n', '\n', 'This text is a plain English translation of the smart contract&#39;s programming logic and represent its terms of use (terms). This plain English translation is a best effort only and while all reasonable precautions have been taken to ensure that the smart contract will behave in the exact way outlined in these terms, mistakes do happen (see The DAO) which may result in unexpected and unintended contract behaviour which may include the total loss of invested funds (Ether), other tokens sent to it as well as accessibility of the contract itself. Due to the nature of smart contracts, once it is deployed on the blockchain it becomes immutably imbedded in it which means that any bugs and/or exploits discovered after deployment are unfixable. Should the code behave differently than outlined in these terms, the code - by the very nature of smart contracts - takes precedent over the terms. By deploying, interacting or otherwise using the smart contract you acknowledge and accept all associated risks while at the same time waive all rights to hold the creator of the smart contract, the artists who deployed the smart contract, its current owner as well as any other parties responsible for potential damages suffered by or caused by you through your interaction with the smart contract to yourself or others. No backsies.\n', '\n', '2. Contract deployment\n', '\n', 'This smart contract enables its owner to issue limited edition pieces of art (pieces) that are cryptographically embedded in the Ethereum blockchain. Every piece can be owned, offered for sale, sold, bought, transferred and burned. The contract accepts bid from interested buyers and allows for the cancelation of bids as well as the cancelation of pieces offered for sale and filling of bids. In addition the owner of the contract as well as Ethart will earn a commission for every future sales of pieces irrespective of who owns, buys or sells them using the contract.\n', '\n', 'The contract creation costs approximately 1.7-1.8 Mgas - assuming a gas price of 20 Gwei, contract creation will cost ~0.03-0.034 ETH or about $12 (@$300/ETH) on the Ethereum main net. If contract creation is not urgent and Ethereum&#39;s pending transactions pool is not congested gas prices can be lowered to ~4 Gwei which would reduce the cost of deployment to ~$2-$3 per artwork.\n', '\n', 'During creation the contract asks for the following parameters:\n', '\n', '\t- The SHA256 hash of your piece (the cryptographic link of your artwork to the Ethereum blockchain)\n', '\t- Edition size (the maximum number of pieces you plan to issue)\n', '\t- Title (the title or name of your artwork, if any)\n', '\t- The link to your file (if any)\n', '\t- Custom text\n', '\t- The owner&#39;s commission in basis points (i.e. 1/100th of a percent)\n', '\n', 'SHA256 hash: A SHA256 hash is a fixed length cryptographic digest of a file. On Mac and Linux it can be calculated by opening a terminal window and typing "openssl sha -sha256" followed by a space and the filename (i.e. "openssl sha -sha256 <FILENAME>") one wants to calculate the hash for. An online tool that serves the same purpose can be found at http://hash.online-convert.com/sha256-generator. By the nature of the cryptographic math the resulting hash is a) a unique fingerprint of the input file which can be independently verified by whomever has access to the original file, b) different for (almost) every file as long as at least one bit is different and c) almost impossible to reverse, meaning you can calculate a SHA256 hash from a file very easily but you can not generate the file from the SHA256 hash. Embedding the SHA256 hash in the contract at it&#39;s deployment therefore proofs that the limited edition pieces controlled by the smart contract&#39;s logic are linked to a particular file: the artwork.\n', '\n', 'Edition size: The edition size is currently limited to a minimum of 1 and a maximum of 1,000 pieces.\n', '\n', 'Title: the title is stored as a public string in the contract\n', '\n', 'File link: So people can independently verify that a particular file is associated with a particular instance of a smart contract you can here specify the publicly accessible link to the file. Note that providing a link is not mandatory and some artists may decide to only provide the SHA256 hash and reveal the actual file associated with it at a later point in time or never.\n', '\n', 'Custom text: This field can be whatever you want it to be. One use case could be a set of custom attributes for limited edition collectible playing cards. In this case you would format your game card attributes in a standard manner for later use e.g. Strength, Constitution, Dexterity, Intelligence, Wisdom as "12,8,6,9,3" which a later application can then read and interpreted according to your game&#39;s rules.\n', '\n', 'Owner&#39;s commission: the account that deploys the smart contract can set a commission for future sales that will be paid out to the current owner of smart contract. The commission is specified in basis points where 1 basis point equals 0.01%. The commission must be greater than 0 and lower than 9750. If the owner wants to receive 5% for all future sales for example the commission will have to be set as 500.\n', '\n', 'At deployment the owner of the smart contract will be set as the account that deployed it. Please make sure to carefully note down your account details including your address, private key, password, JSON file etc and keep it safe and secret. Remember: whoever has access to this information has access to the contract and all the funds and rights associated with it. If you loose this information it is almost certainly lost forever and your funds and artwork with it. Make at least one backup and keep it in a safe location. After contract deployment it is important for you to carefully note down the contract creation transaction receipt number, contract address and ABI for later reference. You and others will require this information to interact with the contract once it is live.\n', '\n', 'The contract acts as it&#39;s own decentralised exchange with an on chain order book of the lowest ask and highest bid for a piece and allows for trustless trade of the pieces of art via the Ethereum blockchain.\n', '\n', '3. Providing a proof\n', '\n', 'After deployment and before the first pieces can be bought or sold the owner has to provide a proof. This proof demonstrates that the artwork was in fact deployed by the artist. The proof can be in the form of a link to a blog post, a tweet or press release providing at the very least the artwork&#39;s contract address or contract creation transaction number.\n', '\n', '4. Ethart commission\n', '\n', 'The fee for letting you deploy your artworks will be 2.5% of the edition size as well as 2.5% of future revenues. So you basically pay in art. After you have provided the proof, the contract issues 2.5% of the edition size to Ethart automatically as following:\n', '\n', '- 1 piece for every 40 pieces increase in edition size\n', '- a (remainder / 40) chance of an additional piece\n', '\n', 'Example: Say you create a 100 piece limited edition artwork. The contract will then issue at least 2 pieces to Ethart. In addition there will be a 20 in 40 chance (i.e. 50%) that one additional piece will be issued to Ethart. In other words, if you create a limited edition of 1 piece there is a chance of 2.5% that after you provide the proof this one piece will be transferred to Ethart. To avoid disappointment we therefore recommend a minimum edition size of 2 - then you are guaranteed to keep at least one piece with an additional 5% chance of loosing the other. The way the math works out Ethart will on average retain 2.5% of all pieces.\n', '\n', 'The pieces transferred to Ethart can not be sold or transferred by Ethart for a minimum of one year (31,556,926 seconds) giving you plenty of time to monopolise the market.\n', '\n', '5. Changing the owner\n', '\n', 'The current owner can transfer ownership of the contract to another account.\n', '\n', '6. Transferring pieces\n', '\n', 'Your artworks is in fact an ERC20 token (https://theethereum.wiki/w/index.php/ERC20_Token_Standard) and supports all ERC20 features. Pieces can be transferred to other addresses (as long as they are not being offered for sale) by their respective owners. Make sure that pieces are only being transferred to accounts that have access to their private keys. Pieces send to exchanges or other accounts that do not have access to their private keys will be lost - most likely forever.\n', '\n', '7. Offering a piece for sale\n', '\n', 'The owner of a piece can offer it for sale. The price for which it is offered (the ask) has to be lower than the current lowest ask. Once a piece is offered for sale by its owner for a lower price than the currently lowest ask it will become the lowest ask and replace the previous lowest ask. The sale price has to be specified in wei (1000000000000000000 wei = 1 ETH). Offering a piece for sale at an ask that is lower or equal to the highest bid will result in an instant sale for the highest bid.\n', '\n', '8. Canceling a sale\n', '\n', 'The owner of a piece offered for sale can cancel the sale 24 hours after having offered the piece for sale. The 24 hour limited is intended to prevent owners to offer a piece at an artificially low price, displacing the currently lowest ask and then immediately canceling the sale.\n', '\n', '10. Buying a piece\n', '\n', 'As long as a piece is being offered for sale, anyone can buy it as long as the buyer sends at least the current lowest ask price with the buy order. Any buy orders that do not send at least the current lowest ask price will be rejects. All the funds send with a buy order will be paid out to the seller of the piece, the contract owner as well as Ethart respectively and in proportion to the commission rules outlined above. There will be no refunds for funds sent in excess of the lowest ask price. Once a piece has been sold the lowest ask will be reset and the next piece offered for sale will become the lowest ask if any. Patrons that buy pieces via the artwork’s smart contract will be issued 2.5 Patron tokens for every Ether spend in the transaction.\n', '\n', '11. Placing a bid\n', '\n', 'Buyers can place bids in wei (1000000000000000000 wei = 1 ETH). Bids have to be higher than the currently highest bid. Placing a bid that is higher than the current lowest ask price will result in the bidder instantly buying the piece offered by the lowest ask seller for the bid amount.\n', '\n', '12. Cancelling a bid\n', '\n', 'Bids can be canceled by the buyer 24 hours after they have been placed. The 24 hour limited is intended to prevent buyers from placing an artificially high bid, displacing the currently highest bid and then immediately canceling the bid.\n', '\n', '13. Filling a bid\n', '\n', 'Bids can be filled by anyone who owns a piece. The contract owner has a 24 hour exclusive first right of refusal to fill a bid.\n', '\n', '14. Burning a piece\n', '\n', 'The owner of a piece can burn it, removing it permanently from the pool of available pieces and thereby reducing the edition size. Artists may choose to do so to increase the value of the remaining pieces or for any other reason.\n', '\n', '\t(c) Stefan Pernar 2017 - all rights reserved\n', '\t(c) ERC20 functions BokkyPooBah 2017. The MIT Licence.\n', '\n', '*/\n', '\n', '/* Public variables */\n', '\taddress public owner;\t\t\t\t\t\t// Contract owner.\n', '\tbytes32 public SHA256ofArtwork;\t\t\t\t// sha256 hash of the artwork.\n', '\tuint256 public editionSize;\t\t\t\t\t// The edition size of the artwork.\n', '\tstring public title;\t\t\t\t\t\t// The title of the artwork.\n', '\tstring public fileLink;\t\t\t\t\t\t// The link to the file of the artwork.\n', '\tstring public proofLink;\t\t\t\t\t// Link to the creation proof by the artist -> this has to be done after contract creation\n', '\tstring public customText;\t\t\t\t\t// Custom text\n', '\tuint256 public ownerCommission;\t\t\t\t// Percent given to the contract owner for every sale - must be >=0 && <=975 1000 = 100%.\n', '\t\n', '\tuint256 public lowestAskPrice;\t\t\t\t// The lowest price an owner of a piece is willing to sell it for.\n', '\taddress public lowestAskAddress;\t\t\t// The address of the lowest ask.\n', '\tuint256 public lowestAskTime;\t\t\t\t// The time by which the ask can be withdrawn.\n', '\tbool public pieceForSale;\t\t\t\t\t// Is a piece for sale?\n', '\n', '\tuint256 public highestBidPrice;\t\t\t\t// The highest price a buyer is willing to pay for a piece.\n', '\taddress public highestBidAddress;\t\t\t// The address of the highest bidder\n', '\tuint256 public highestBidTime;\t\t\t\t// The time by which the bid can be withdrawn\n', '\tuint public activationTime;\t\t\t\t\t// Time this contract has been activated.\n', '\tbool public pieceWanted;\t\t\t\t\t// Is a buyer interested in a piece?\n', '\n', '\t/* Events */\n', '\tevent newLowestAsk (uint256 price, address seller);\t\t\t\t\t\t\t// Informs watchers of the contract when a new lowest ask price has been set. (price, seller)\n', '\tevent newHighestBid (uint256 price, address bidder);\t\t\t\t\t\t\t// Informs watchers of the contract when a new highest bid price has been placed. (price, bidder)\n', '\tevent pieceTransfered (uint256 amount, address from, address to);\t\t\t\t// Informs watchers of the contract when a piece has been transfered. (amount, from, to)\n', '\tevent pieceSold (address from, address to, uint256 price);\t\t\t\t\t// Informs watchers of the contract when a piece has been sold. (from, to, price)\n', '\n', '\tevent Transfer (address indexed _from, address indexed _to, uint256 _value);\n', '\tevent Approval (address indexed _owner, address indexed _spender, uint256 _value);\n', '\tevent Burn (address indexed _owner, uint256 _amount);\n', '\n', '\t/* Other variables */\n', '\tbool public proofSet;\t\t\t\t\t\t\t// Has the proof been set yet?\n', '\tuint256 ethartAward;\t\t\t\t\t// # of pieces awarded to Ethart.\n', '\n', '\tmapping (address => uint256) public piecesOwned;\t\t\t\t// Maps the number of pieces owned by an address\n', ' \tmapping (address => mapping (address => uint256)) allowed;\t\t// Used in burnFrom and transferFrom\n', '    address registrar = 0xaD3e7D2788126250d48598e1DB6A2D3E19B89738;\t\t\t\t\t\t// set after deployment of Registrar contract\n', '\n', '\tfunction Artwork (\t\t\t\t\t\t\t\t// Constructor\n', '\t\tbytes32 _SHA256ofArtwork,\n', '\t\tuint256 _editionSize,\n', '\t\tstring _title,\n', '\t\tstring _fileLink,\n', '\t\tstring _customText,\n', '\t\tuint256 _ownerCommission,\n', '\t\taddress _owner\n', '\t) {\n', '\t\tif (_ownerCommission > 9750 || _ownerCommission <0) {throw;}\n', '\t\towner = _owner;                            // Owner is set as the address spawning the contract\n', '\t\tSHA256ofArtwork = _SHA256ofArtwork;\n', '\t\teditionSize = _editionSize;\n', '\t\ttitle = _title;\n', '\t\tfileLink = _fileLink;\n', '\t\tcustomText = _customText;\n', '\t\townerCommission = _ownerCommission;\n', '\t\tactivationTime = now;\t\n', '\t}\n', '\n', '    modifier onlyBy(address _account)\n', '    {\n', '        require(msg.sender == _account);\n', '        _;\n', '    }\n', '\n', '\tmodifier ethArtOnlyAfterOneYear()\n', '\t{\n', '\t\trequire(msg.sender != registrar || now > activationTime + 31536000);\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier ownerFirst()\n', '\t{\n', '\t\trequire(msg.sender == owner || now > highestBidTime + 86400 || piecesOwned[owner] == 0);\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier notLocked(address _owner, uint256 _amount)\n', '\t{\n', '\t\trequire(_owner != lowestAskAddress || piecesOwned[_owner] > _amount);\n', '\t\t_;\n', '\t}\n', '\n', '\t// allows the current owner to assign a new owner\n', '\tfunction changeOwner (address newOwner) onlyBy (owner) {\n', '\t\towner = newOwner;\n', '\t\t}\n', '\n', '\tfunction setProof (string _proofLink) onlyBy (owner) {\n', '\t\tif (!proofSet) {\n', '\t\t\tuint256 remainder;\n', '\t\t\tproofLink = _proofLink;\n', '\t\t\tproofSet = true;\n', '\t\t\tremainder = editionSize % 40;\n', '\t\t\tethartAward = (editionSize - remainder) / 40;\n', '\t\t\tif (remainder > 0 && now % 39 <= remainder) {ethartAward++;}\t\t// Yes - this is gameable - if it is that important to you: go ahead.\n', '\t\t\tpiecesOwned[registrar] = ethartAward;\n', '\t\t\tpiecesOwned[owner] = editionSize - ethartAward;\n', '\t\t\t}\n', '\t\telse {throw;}\n', '\t\t}\n', '\n', '\tfunction transfer(address _to, uint256 _amount) notLocked(msg.sender, _amount) returns (bool success) {\n', '\t\tif (piecesOwned[msg.sender] >= _amount \n', '\t\t\t&& _amount > 0\n', '\t\t\t&& piecesOwned[_to] + _amount > piecesOwned[_to]\n', '\t\t\t&& _to != 0x0)\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// use burn() instead\n', '\t\t\t{\n', '\t\t\tpiecesOwned[msg.sender] -= _amount;\n', '\t\t\tpiecesOwned[_to] += _amount;\n', '\t\t\tTransfer(msg.sender, _to, _amount);\n', '\t\t\treturn true;\n', '\t\t\t}\n', '\t\t\telse { return false;}\n', ' \t\t }\n', '\n', '    function totalSupply() constant returns (uint256 totalSupply) {\n', '\t\ttotalSupply = editionSize;\n', '\t\t}\n', '\n', '\tfunction balanceOf(address _owner) constant returns (uint256 balance) {\n', ' \t\treturn piecesOwned[_owner];\n', '\t\t}\n', '\n', ' \tfunction transferFrom(address _from, address _to, uint256 _amount) notLocked(_from, _amount) returns (bool success)\n', '\t\t{\n', '\t\t\tif (piecesOwned[_from] >= _amount\n', '\t\t\t\t&& allowed[_from][msg.sender] >= _amount\n', '\t\t\t\t&& _amount > 0\n', '\t\t\t\t&& piecesOwned[_to] + _amount > piecesOwned[_to]\n', '\t\t\t\t&& _to != 0x0\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// use burn() instead\n', '\t\t\t\t&& (_from != lowestAskAddress || piecesOwned[_from] > _amount))\n', '\t\t\t\t\t{\n', '\t\t\t\t\tpiecesOwned[_from] -= _amount;\n', '\t\t\t\t\tallowed[_from][msg.sender] -= _amount;\n', '\t\t\t\t\tpiecesOwned[_to] += _amount;\n', '\t\t\t\t\tTransfer(_from, _to, _amount);\n', '\t\t\t\t\treturn true;\n', '\t\t\t\t\t} else {return false;}\n', '\t\t}\n', '\n', '\tfunction approve(address _spender, uint256 _amount) returns (bool success) {\n', '\t\tallowed[msg.sender][_spender] = _amount;\n', '\t\tApproval(msg.sender, _spender, _amount);\n', '\t\treturn true;\n', '\t\t}\n', '\n', '\tfunction allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '\t\treturn allowed[_owner][_spender];\n', '\t\t}\n', '\n', '\tfunction burn(uint256 _amount) notLocked(msg.sender, _amount) returns (bool success) {\n', '\t\t\tif (piecesOwned[msg.sender] >= _amount) {\n', '\t\t\t\tpiecesOwned[msg.sender] -= _amount;\n', '\t\t\t\teditionSize -= _amount;\n', '\t\t\t\tBurn(msg.sender, _amount);\n', '\t\t\t\treturn true;\n', '\t\t\t}\n', '\t\t\telse {throw;}\n', '\t\t}\n', '\n', '\tfunction burnFrom(address _from, uint256 _value) notLocked(_from, _value) returns (bool success) {\n', '\t\tif (piecesOwned[_from] >= _value && allowed[_from][msg.sender] >= _value) {\n', '\t\t\tpiecesOwned[_from] -= _value;\n', '\t\t\tallowed[_from][msg.sender] -= _value;\n', '\t\t\teditionSize -= _value;\n', '\t\t\tBurn(_from, _value);\n', '\t\t\treturn true;\n', '\t\t}\n', '\t\telse {throw;}\n', '\t}\n', '\n', '\tfunction buyPiece() payable {\n', '\t\tif (pieceForSale && msg.value >= lowestAskPrice) {\n', '\t\t\tuint256 _amountOwner;\n', '\t\t\tuint256 _amountEthart;\n', '\t\t\tuint256 _amountSeller;\n', '\t\t\t_amountOwner = msg.value / 10000 * ownerCommission;\n', '\t\t\t_amountEthart = msg.value / 40;\n', '\t\t\t_amountSeller = msg.value - _amountOwner - _amountEthart;\n', '\t\t\towner.transfer(_amountOwner);\t\t\t\t\t\t\t\t\t// Transfer the contract owner&#39;s commission\n', '\t\t\tlowestAskAddress.transfer(_amountSeller);\t\t\t\t\t\t// Transfer the buy price - commissions to seller\n', '\t\t\tregistrar.transfer(_amountEthart);\t\t\t\t\t\t\t\t// Transfer Ethart comission to Ethart\n', '\t\t\tpiecesOwned[lowestAskAddress]--;\n', '\t\t\tpiecesOwned[msg.sender]++;\n', '\t\t\tInterface a = Interface(registrar);\n', '\t\t\ta.issuePatrons(msg.sender, msg.value / 5 * 2);\n', '\t\t\tpieceSold (lowestAskAddress, msg.sender, msg.value);\n', '\t\t\tpieceForSale = false;\n', '\t\t\tlowestAskPrice = 0;\n', '\t\t\tlowestAskAddress = 0x0;\n', '\t\t}\n', '\t\telse {throw;}\n', '\t}\n', '\n', '\t// Offer a piece for sale at a fixed price - the price has to be lower than the current lowest price\n', '\tfunction offerPieceForSale (uint256 _price) ethArtOnlyAfterOneYear {\n', '\t\tif (_price < lowestAskPrice || !pieceForSale) {\n', '\t\t\t\tif (_price <= highestBidPrice) {fillBid();}\n', '\t\t\t\telse {\n', '\t\t\t\tpieceForSale = true;\n', '\t\t\t\tlowestAskPrice = _price;\n', '\t\t\t\tlowestAskAddress = msg.sender;\n', '\t\t\t\tlowestAskTime = now;\n', '\t\t\t\tnewLowestAsk (_price, lowestAskAddress);\t\t\t// alerts contract watchers about new lowest ask price.\n', '\t\t\t\t}\n', '\t\t}\n', '\t\telse {throw;}\n', '\t}\n', '\n', '\t// place a bid for any piece in the edition - bid has to be higher than current highest bid\n', '\tfunction placeBid () payable {\n', '\t\tif (msg.value > highestBidPrice || (pieceForSale && msg.value >= lowestAskPrice)) {\n', '\t\t\tif (pieceWanted) {highestBidAddress.transfer (highestBidPrice);}\n', '\t\t\tif (pieceForSale && msg.value >= lowestAskPrice) {buyPiece();}\n', '\t\t\telse {\n', '\t\t\t\tpieceWanted = true;\n', '\t\t\t\thighestBidPrice = msg.value;\n', '\t\t\t\thighestBidAddress = msg.sender;\n', '\t\t\t\thighestBidTime = now;\n', '\t\t\t\tnewHighestBid (msg.value, highestBidAddress);\n', '\t\t\t\t}\n', '\t\t}\n', '\t\telse {throw;}\n', '\t}\n', '\n', '\tfunction fillBid () ownerFirst ethArtOnlyAfterOneYear notLocked(msg.sender, 1) {\t// Owner has 24h first right of refusual to fill the bid. Ethart can only fill bids after 1 year.\n', '\t\tif (pieceWanted && piecesOwned[msg.sender] >= 1) {\t\t\t\t\t\t\t\t// If the current lowest ask address wants to fill a bid it has to cancel it&#39;s sale first and then\n', '\t\t\tuint256 _amountOwner;\t\t\t\t\t\t\t\t\t\t\t\t\t\t// fill the bid.\n', '\t\t\tuint256 _amountEthart;\n', '\t\t\tuint256 _amountSeller;\n', '\t\t\tuint256 patronReward;\n', '\t\t\t_amountOwner = highestBidPrice / 10000 * ownerCommission;\n', '\t\t\t_amountEthart = highestBidPrice / 40;\n', '\t\t\t_amountSeller = highestBidPrice - _amountOwner - _amountEthart;\n', '\t\t\towner.transfer(_amountOwner);\t\t\t\t\t\t\t\t\t// Transfer the contract&#39;s owner&#39;s commission\n', '\t\t\tmsg.sender.transfer(_amountSeller);\t\t\t\t\t\t\t\t// Transfer the buy price - commissions to seller\n', '\t\t\tregistrar.transfer(_amountEthart);\t\t\t\t\t\t\t\t// Transfer Ethart comission to Ethart\n', '\t\t\tpiecesOwned[highestBidAddress]++;\n', '\t\t\tInterface a = Interface(registrar);\n', '\t\t\tpatronReward = highestBidPrice  / 5 * 2;\n', '\t\t\ta.issuePatrons(highestBidAddress, patronReward);\t\t\t\t\n', '\t\t\tpiecesOwned[msg.sender]--;\n', '\t\t\tpieceSold (msg.sender, highestBidAddress, highestBidPrice);\n', '\t\t\tpieceWanted = false;\n', '\t\t\thighestBidPrice = 0;\n', '\t\t\thighestBidAddress = 0x0;\n', '\t\t}\n', '\t\telse {throw;}\n', '\t}\n', '\n', '\t// withdraw a bid - bids can only be withdrawn after 24 hours of being placed\n', '\tfunction cancelBid () onlyBy (highestBidAddress){\n', '\t\tif (pieceWanted && now > highestBidTime + 86400) {\n', '\t\t\tpieceWanted = false;\n', '\t\t\tmsg.sender.transfer(highestBidPrice);\n', '\t\t\thighestBidPrice = 0;\n', '\t\t\thighestBidAddress = 0x0;\n', '\t\t\tnewHighestBid (0, 0x0);\n', '\t\t}\n', '\t\telse {throw;}\n', '\t}\n', '\n', '\t// cancels sales - sales can only be canceled 24 hours after it has been offered for sale\n', '\tfunction cancelSale () onlyBy (lowestAskAddress){\n', '\t\tif(pieceForSale && now > lowestAskTime + 86400) {\n', '\t\t\tpieceForSale = false;\n', '\t\t\tlowestAskPrice = 0;\n', '\t\t\tlowestAskAddress = 0x0;\n', '\t\t\tnewLowestAsk (0, 0x0);\n', '\t\t}\n', '\t\telse {throw;}\n', '\t}\n', '\n', '}']