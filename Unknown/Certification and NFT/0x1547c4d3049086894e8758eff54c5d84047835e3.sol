['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract ERC23ContractInterface {\n', '  function tokenFallback(address _from, uint256 _value, bytes _data) external;\n', '}\n', '\n', 'contract ERC23Contract is ERC23ContractInterface {\n', '\n', ' /**\n', '  * @dev Reject all ERC23 compatible tokens\n', '  * param _from address that is transferring the tokens\n', '  * param _value amount of specified token\n', '  * param _data bytes data passed from the caller\n', '  */\n', '  function tokenFallback(address /*_from*/, uint256 /*_value*/, bytes /*_data*/) external {\n', '    revert();\n', '  }\n', '\n', '}\n', '\n', 'contract EthMatch is Ownable, ERC23Contract {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public constant MASTERY_THRESHOLD = 10 finney; // new master allowed if balance falls below this (10 finney == .01 ETH)\n', '  uint256 public constant PAYOUT_PCT = 95; // % to winner (rest to creator)\n', '\n', '  uint256 public startTime; // start timestamp when matches may begin\n', '  address public master; // current Matchmaster\n', '  uint256 public gasReq; // only a var in case it ever needs to be updated for future Ethereum releases\n', '\n', '  event MatchmakerPrevails(address indexed matchmaster, address indexed matchmaker, uint256 sent, uint256 actual, uint256 winnings);\n', '  event MatchmasterPrevails(address indexed matchmaster, address indexed matchmaker, uint256 sent, uint256 actual, uint256 winnings);\n', '  event MatchmasterTakeover(address indexed matchmasterPrev, address indexed matchmasterNew, uint256 balanceNew);\n', '\n', '  function EthMatch(uint256 _startTime) public {\n', '    require(_startTime >= now);\n', '\n', '    startTime = _startTime;\n', '    master = msg.sender; // initial\n', '    gasReq = 21000;\n', '  }\n', '\n', '  // fallback function\n', '  // make a match\n', '  function () public payable {\n', '    maker(msg.sender);\n', '  }\n', '\n', '  // make a match (and specify payout address)\n', '  function maker(address _payoutAddr) public payable {\n', "    require(this.balance > 0); // else we haven't started yet\n", '    require(msg.gas >= gasReq); // require same amount every time (overages auto-returned)\n', '\n', '    require(now >= startTime);\n', '    require(_payoutAddr != 0x0);\n', '\n', '    uint256 weiPaid = msg.value;\n', '    require(weiPaid > 0);\n', '\n', '    uint256 balPrev = this.balance.sub(weiPaid);\n', '\n', '    if (balPrev == weiPaid) {\n', '      // maker wins\n', '      uint256 winnings = weiPaid.add(balPrev.div(2));\n', '      pay(_payoutAddr, winnings);\n', '      MatchmakerPrevails(master, _payoutAddr, weiPaid, balPrev, winnings);\n', '    } else {\n', '      // master wins\n', '      pay(master, weiPaid);\n', '      MatchmasterPrevails(master, _payoutAddr, weiPaid, balPrev, weiPaid);\n', '    }\n', '  }\n', '\n', '  // send proceeds\n', '  function pay(address _payoutAddr, uint256 _amount) internal {\n', '    require(_amount > 0);\n', '\n', '    uint256 payout = _amount.mul(PAYOUT_PCT).div(100);\n', '    _payoutAddr.transfer(payout);\n', '\n', '    uint256 remainder = _amount.sub(payout);\n', '    owner.transfer(remainder);\n', '  }\n', '\n', '  // become the new master\n', '  function mastery() public payable {\n', '    mastery(msg.sender);\n', '  }\n', '\n', '  // become the new master (and specify payout address)\n', '  function mastery(address _payoutAddr) public payable {\n', "    require(this.balance > 0); // else we haven't started yet\n", '    require(now >= startTime);\n', '    require(_payoutAddr != 0x0);\n', '\n', '    uint256 weiPaid = msg.value;\n', '    require(weiPaid >= MASTERY_THRESHOLD);\n', '\n', '    uint256 balPrev = this.balance.sub(weiPaid);\n', '    require(balPrev < MASTERY_THRESHOLD);\n', '\n', '    pay(master, balPrev);\n', '\n', '    MatchmasterTakeover(master, _payoutAddr, weiPaid); // called before new master set\n', '\n', '    master = _payoutAddr; // set after event\n', '  }\n', '\n', '  // in case it ever needs to be updated for future Ethereum releases\n', '  function setGasReq(uint256 _gasReq) onlyOwner external {\n', '    gasReq = _gasReq;\n', '  }\n', '\n', '  // initial funding\n', '  function fund() onlyOwner external payable {\n', '    require(this.balance == msg.value); // ensures balance was 0 before this, i.e. uninitialized\n', '    require(msg.value >= MASTERY_THRESHOLD);\n', '  }\n', '\n', '}']