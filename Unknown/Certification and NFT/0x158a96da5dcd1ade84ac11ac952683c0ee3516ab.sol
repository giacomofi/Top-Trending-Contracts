['pragma solidity ^0.4.11;\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC223TokenInterface {\n', '    function name() constant returns (string _name);\n', '    function symbol() constant returns (string _symbol);\n', '    function decimals() constant returns (uint8 _decimals);\n', '    function totalSupply() constant returns (uint256 _totalSupply);\n', '\n', '    function transfer(address to, uint value, bytes data) returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes data);\n', '}\n', '\n', 'contract ERC223ReceiverInterface {\n', '    function tokenFallback(address from, uint value, bytes data);\n', '}\n', '\n', 'contract ERC223Token is BasicToken, ERC223TokenInterface {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '\n', '    function name() constant returns (string _name) {\n', '        return name;\n', '    }\n', '    function symbol() constant returns (string _symbol) {\n', '        return symbol;\n', '    }\n', '    function decimals() constant returns (uint8 _decimals) {\n', '        return decimals;\n', '    }\n', '    function totalSupply() constant returns (uint256 _totalSupply) {\n', '        return totalSupply;\n', '    }\n', '\n', '    modifier onlyPayloadSize(uint size) {\n', '        require(msg.data.length >= size + 4);\n', '        _;\n', '    }\n', '\n', '    function transfer(address to, uint value, bytes data) onlyPayloadSize(2 * 32) returns (bool) {\n', '        balances[msg.sender] = SafeMath.sub(balances[msg.sender], value);\n', '        balances[to] = SafeMath.add(balances[to], value);\n', '        if (isContract(to)){\n', '            ERC223ReceiverInterface receiver = ERC223ReceiverInterface(to);\n', '            receiver.tokenFallback(msg.sender, value, data);\n', '        }\n', '        //ERC223 event\n', '        Transfer(msg.sender, to, value, data);\n', '        return true;\n', '    }\n', '\n', '    function transfer(address to, uint value) returns (bool) {\n', '        bytes memory empty;\n', '        transfer(to, value, empty);\n', '        //ERC20 legacy event\n', '        Transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    function isContract(address _address) private returns (bool isContract) {\n', '        uint length;\n', '        _address = _address; //Silence compiler warning\n', '        assembly { length := extcodesize(_address) }\n', '        return length > 0;\n', '    }\n', '}\n', '\n', 'contract PullPayment {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) public payments;\n', '  uint256 public totalPayments;\n', '\n', '  function asyncSend(address dest, uint256 amount) internal {\n', '    payments[dest] = payments[dest].add(amount);\n', '    totalPayments = totalPayments.add(amount);\n', '  }\n', '\n', '\n', '  function withdrawPayments() {\n', '    address payee = msg.sender;\n', '    uint256 payment = payments[payee];\n', '\n', '    require(payment != 0);\n', '    require(this.balance >= payment);\n', '\n', '    totalPayments = totalPayments.sub(payment);\n', '    payments[payee] = 0;\n', '\n', '    assert(payee.send(payment));\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract TrivialToken is ERC223Token, PullPayment {\n', '\n', '    //Constants\n', '    uint8 constant DECIMALS = 0;\n', '    uint256 constant MIN_ETH_AMOUNT = 0.005 ether;\n', '    uint256 constant MIN_BID_PERCENTAGE = 10;\n', '    uint256 constant TOTAL_SUPPLY = 1000000;\n', '    uint256 constant TOKENS_PERCENTAGE_FOR_KEY_HOLDER = 25;\n', '    uint256 constant CLEANUP_DELAY = 180 days;\n', '\n', '    //Accounts\n', '    address public artist;\n', '    address public trivial;\n', '\n', '    //Time information\n', '    uint256 public icoEndTime;\n', '    uint256 public auctionDuration;\n', '    uint256 public auctionEndTime;\n', '\n', '    //Token information\n', '    uint256 public tokensForArtist;\n', '    uint256 public tokensForTrivial;\n', '    uint256 public tokensForIco;\n', '\n', '    //ICO and auction results\n', '    uint256 public amountRaised;\n', '    address public highestBidder;\n', '    uint256 public highestBid;\n', '    bytes32 public auctionWinnerMessageHash;\n', '    uint256 public nextContributorIndexToBeGivenTokens;\n', '    uint256 public tokensDistributedToContributors;\n', '\n', '    //Events\n', '    event IcoStarted(uint256 icoEndTime);\n', '    event IcoContributed(address contributor, uint256 amountContributed, uint256 amountRaised);\n', '    event IcoFinished(uint256 amountRaised);\n', '    event IcoCancelled();\n', '    event AuctionStarted(uint256 auctionEndTime);\n', '    event HighestBidChanged(address highestBidder, uint256 highestBid);\n', '    event AuctionFinished(address highestBidder, uint256 highestBid);\n', '    event WinnerProvidedHash();\n', '\n', '    //State\n', '    enum State { Created, IcoStarted, IcoFinished, AuctionStarted, AuctionFinished, IcoCancelled }\n', '    State public currentState;\n', '\n', '    //Token contributors and holders\n', '    mapping(address => uint) public contributions;\n', '    address[] public contributors;\n', '\n', '    //Modififers\n', '    modifier onlyInState(State expectedState) { require(expectedState == currentState); _; }\n', '    modifier onlyBefore(uint256 _time) { require(now < _time); _; }\n', '    modifier onlyAfter(uint256 _time) { require(now > _time); _; }\n', '    modifier onlyTrivial() { require(msg.sender == trivial); _; }\n', '    modifier onlyKeyHolders() { require(balances[msg.sender] >= SafeMath.div(\n', '        SafeMath.mul(tokensForIco, TOKENS_PERCENTAGE_FOR_KEY_HOLDER), 100)); _;\n', '    }\n', '    modifier onlyAuctionWinner() {\n', '        require(currentState == State.AuctionFinished);\n', '        require(msg.sender == highestBidder);\n', '        _;\n', '    }\n', '\n', '    function TrivialToken(\n', '        string _name, string _symbol,\n', '        uint256 _icoEndTime, uint256 _auctionDuration,\n', '        address _artist, address _trivial,\n', '        uint256 _tokensForArtist,\n', '        uint256 _tokensForTrivial,\n', '        uint256 _tokensForIco\n', '    ) {\n', '        require(now < _icoEndTime);\n', '        require(\n', '            TOTAL_SUPPLY == SafeMath.add(\n', '                _tokensForArtist,\n', '                SafeMath.add(_tokensForTrivial, _tokensForIco)\n', '            )\n', '        );\n', '        require(MIN_BID_PERCENTAGE < 100);\n', '        require(TOKENS_PERCENTAGE_FOR_KEY_HOLDER < 100);\n', '\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = DECIMALS;\n', '\n', '        icoEndTime = _icoEndTime;\n', '        auctionDuration = _auctionDuration;\n', '        artist = _artist;\n', '        trivial = _trivial;\n', '\n', '        tokensForArtist = _tokensForArtist;\n', '        tokensForTrivial = _tokensForTrivial;\n', '        tokensForIco = _tokensForIco;\n', '\n', '        currentState = State.Created;\n', '    }\n', '\n', '    /*\n', '        ICO methods\n', '    */\n', '    function startIco()\n', '    onlyInState(State.Created)\n', '    onlyTrivial() {\n', '        currentState = State.IcoStarted;\n', '        IcoStarted(icoEndTime);\n', '    }\n', '\n', '    function contributeInIco() payable\n', '    onlyInState(State.IcoStarted)\n', '    onlyBefore(icoEndTime) {\n', '        require(msg.value > MIN_ETH_AMOUNT);\n', '\n', '        if (contributions[msg.sender] == 0) {\n', '            contributors.push(msg.sender);\n', '        }\n', '        contributions[msg.sender] = SafeMath.add(contributions[msg.sender], msg.value);\n', '        amountRaised = SafeMath.add(amountRaised, msg.value);\n', '\n', '        IcoContributed(msg.sender, msg.value, amountRaised);\n', '    }\n', '\n', '    function distributeTokens(uint256 contributorsNumber)\n', '    onlyInState(State.IcoStarted)\n', '    onlyAfter(icoEndTime) {\n', '        for (uint256 i = 0; i < contributorsNumber && nextContributorIndexToBeGivenTokens < contributors.length; ++i) {\n', '            address currentContributor = contributors[nextContributorIndexToBeGivenTokens++];\n', '            uint256 tokensForContributor = SafeMath.div(\n', '                SafeMath.mul(tokensForIco, contributions[currentContributor]),\n', '                amountRaised  // amountRaised can&#39;t be 0, ICO is cancelled then\n', '            );\n', '            balances[currentContributor] = tokensForContributor;\n', '            tokensDistributedToContributors = SafeMath.add(tokensDistributedToContributors, tokensForContributor);\n', '        }\n', '    }\n', '\n', '    function finishIco()\n', '    onlyInState(State.IcoStarted)\n', '    onlyAfter(icoEndTime) {\n', '        if (amountRaised == 0) {\n', '            currentState = State.IcoCancelled;\n', '            return;\n', '        }\n', '\n', '        // all contributors must have received their tokens to finish ICO\n', '        require(nextContributorIndexToBeGivenTokens >= contributors.length);\n', '\n', '        balances[artist] = SafeMath.add(balances[artist], tokensForArtist);\n', '        balances[trivial] = SafeMath.add(balances[trivial], tokensForTrivial);\n', '        uint256 leftovers = SafeMath.sub(tokensForIco, tokensDistributedToContributors);\n', '        balances[artist] = SafeMath.add(balances[artist], leftovers);\n', '\n', '        if (!artist.send(this.balance)) {\n', '            asyncSend(artist, this.balance);\n', '        }\n', '        currentState = State.IcoFinished;\n', '        IcoFinished(amountRaised);\n', '    }\n', '\n', '    function checkContribution(address contributor) constant returns (uint) {\n', '        return contributions[contributor];\n', '    }\n', '\n', '    /*\n', '        Auction methods\n', '    */\n', '    function startAuction()\n', '    onlyInState(State.IcoFinished)\n', '    onlyKeyHolders() {\n', '        // 100% tokens owner is the only key holder\n', '        if (balances[msg.sender] == TOTAL_SUPPLY) {\n', '            // no auction takes place,\n', '            highestBidder = msg.sender;\n', '            currentState = State.AuctionFinished;\n', '            AuctionFinished(highestBidder, highestBid);\n', '            return;\n', '        }\n', '\n', '        auctionEndTime = SafeMath.add(now, auctionDuration);\n', '        currentState = State.AuctionStarted;\n', '        AuctionStarted(auctionEndTime);\n', '    }\n', '\n', '    function bidInAuction() payable\n', '    onlyInState(State.AuctionStarted)\n', '    onlyBefore(auctionEndTime) {\n', '        //Must be greater or equal to minimal amount\n', '        require(msg.value >= MIN_ETH_AMOUNT);\n', '        uint256 bid = calculateUserBid();\n', '\n', '        //If there was a bid already\n', '        if (highestBid >= MIN_ETH_AMOUNT) {\n', '            //Must be greater or equal to 105% of previous bid\n', '            uint256 minimalOverBid = SafeMath.add(highestBid, SafeMath.div(\n', '                SafeMath.mul(highestBid, MIN_BID_PERCENTAGE), 100\n', '            ));\n', '            require(bid >= minimalOverBid);\n', '            //Return to previous bidder his balance\n', '            //Value to return: current balance - current bid - paymentsInAsyncSend\n', '            uint256 amountToReturn = SafeMath.sub(SafeMath.sub(\n', '                this.balance, msg.value\n', '            ), totalPayments);\n', '            if (!highestBidder.send(amountToReturn)) {\n', '                asyncSend(highestBidder, amountToReturn);\n', '            }\n', '        }\n', '\n', '        highestBidder = msg.sender;\n', '        highestBid = bid;\n', '        HighestBidChanged(highestBidder, highestBid);\n', '    }\n', '\n', '    function calculateUserBid() private returns (uint256) {\n', '        uint256 bid = msg.value;\n', '        uint256 contribution = balanceOf(msg.sender);\n', '        if (contribution > 0) {\n', '            //Formula: (sentETH * allTokens) / (allTokens - userTokens)\n', '            //User sends 16ETH, has 40 of 200 tokens\n', '            //(16 * 200) / (200 - 40) => 3200 / 160 => 20\n', '            bid = SafeMath.div(\n', '                SafeMath.mul(msg.value, TOTAL_SUPPLY),\n', '                SafeMath.sub(TOTAL_SUPPLY, contribution)\n', '            );\n', '        }\n', '        return bid;\n', '    }\n', '\n', '    function finishAuction()\n', '    onlyInState(State.AuctionStarted)\n', '    onlyAfter(auctionEndTime) {\n', '        require(highestBid > 0);  // auction cannot be finished until at least one person bids\n', '        currentState = State.AuctionFinished;\n', '        AuctionFinished(highestBidder, highestBid);\n', '    }\n', '\n', '    function withdrawShares(address holder) public\n', '    onlyInState(State.AuctionFinished) {\n', '        uint256 availableTokens = balances[holder];\n', '        require(availableTokens > 0);\n', '        balances[holder] = 0;\n', '\n', '        if (holder != highestBidder) {\n', '            holder.transfer(\n', '                SafeMath.div(SafeMath.mul(highestBid, availableTokens), TOTAL_SUPPLY)\n', '            );\n', '        }\n', '    }\n', '\n', '    function isKeyHolder(address person) constant returns (bool) {\n', '        return balances[person] >= SafeMath.div(tokensForIco, TOKENS_PERCENTAGE_FOR_KEY_HOLDER); }\n', '\n', '    /*\n', '        General methods\n', '    */\n', '\n', '    // Cancel ICO will be redesigned to prevent\n', '    // risk of user funds overtaken\n', '\n', '    /*function cancelIco()\n', '    onlyInState(State.IcoStarted)\n', '    onlyTrivial() {\n', '        currentState = State.IcoCancelled;\n', '        IcoCancelled();\n', '    }\n', '\n', '    function claimIcoContribution(address contributor) onlyInState(State.IcoCancelled) {\n', '        uint256 contribution = contributions[contributor];\n', '        require(contribution > 0);\n', '        contributions[contributor] = 0;\n', '        contributor.transfer(contribution);\n', '    }*/\n', '\n', '    function setAuctionWinnerMessageHash(bytes32 _auctionWinnerMessageHash)\n', '    onlyAuctionWinner() {\n', '        auctionWinnerMessageHash = _auctionWinnerMessageHash;\n', '        WinnerProvidedHash();\n', '    }\n', '\n', '    function killContract()\n', '    onlyTrivial() {\n', '        require(\n', '            (\n', '                currentState == State.AuctionFinished &&\n', '                now > SafeMath.add(auctionEndTime, CLEANUP_DELAY) // Delay in correct state\n', '            ) ||\n', '            currentState == State.IcoCancelled // No delay in cancelled state\n', '        );\n', '        selfdestruct(trivial);\n', '    }\n', '\n', '    // helper function to avoid too many contract calls on frontend side\n', '    function getContractState() constant returns (\n', '        uint256, uint256, uint256, uint256, uint256,\n', '        uint256, uint256, address, uint256, State,\n', '        uint256, uint256\n', '    ) {\n', '        return (\n', '            icoEndTime, auctionDuration, auctionEndTime,\n', '            tokensForArtist, tokensForTrivial, tokensForIco,\n', '            amountRaised, highestBidder, highestBid, currentState,\n', '            TOKENS_PERCENTAGE_FOR_KEY_HOLDER, MIN_BID_PERCENTAGE\n', '        );\n', '    }\n', '\n', '    function transfer(address _to, uint _value, bytes _data) onlyInState(State.IcoFinished) returns (bool) {\n', '        return ERC223Token.transfer(_to, _value, _data);\n', '    }\n', '\n', '    function transfer(address _to, uint _value) returns (bool) {\n', '        // onlyInState(IcoFinished) check is contained in a call below\n', '        bytes memory empty;\n', '        return transfer(_to, _value, empty);\n', '    }\n', '\n', '    function () payable {\n', '        revert();\n', '    }\n', '}']
['pragma solidity ^0.4.11;\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC223TokenInterface {\n', '    function name() constant returns (string _name);\n', '    function symbol() constant returns (string _symbol);\n', '    function decimals() constant returns (uint8 _decimals);\n', '    function totalSupply() constant returns (uint256 _totalSupply);\n', '\n', '    function transfer(address to, uint value, bytes data) returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes data);\n', '}\n', '\n', 'contract ERC223ReceiverInterface {\n', '    function tokenFallback(address from, uint value, bytes data);\n', '}\n', '\n', 'contract ERC223Token is BasicToken, ERC223TokenInterface {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '\n', '    function name() constant returns (string _name) {\n', '        return name;\n', '    }\n', '    function symbol() constant returns (string _symbol) {\n', '        return symbol;\n', '    }\n', '    function decimals() constant returns (uint8 _decimals) {\n', '        return decimals;\n', '    }\n', '    function totalSupply() constant returns (uint256 _totalSupply) {\n', '        return totalSupply;\n', '    }\n', '\n', '    modifier onlyPayloadSize(uint size) {\n', '        require(msg.data.length >= size + 4);\n', '        _;\n', '    }\n', '\n', '    function transfer(address to, uint value, bytes data) onlyPayloadSize(2 * 32) returns (bool) {\n', '        balances[msg.sender] = SafeMath.sub(balances[msg.sender], value);\n', '        balances[to] = SafeMath.add(balances[to], value);\n', '        if (isContract(to)){\n', '            ERC223ReceiverInterface receiver = ERC223ReceiverInterface(to);\n', '            receiver.tokenFallback(msg.sender, value, data);\n', '        }\n', '        //ERC223 event\n', '        Transfer(msg.sender, to, value, data);\n', '        return true;\n', '    }\n', '\n', '    function transfer(address to, uint value) returns (bool) {\n', '        bytes memory empty;\n', '        transfer(to, value, empty);\n', '        //ERC20 legacy event\n', '        Transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    function isContract(address _address) private returns (bool isContract) {\n', '        uint length;\n', '        _address = _address; //Silence compiler warning\n', '        assembly { length := extcodesize(_address) }\n', '        return length > 0;\n', '    }\n', '}\n', '\n', 'contract PullPayment {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) public payments;\n', '  uint256 public totalPayments;\n', '\n', '  function asyncSend(address dest, uint256 amount) internal {\n', '    payments[dest] = payments[dest].add(amount);\n', '    totalPayments = totalPayments.add(amount);\n', '  }\n', '\n', '\n', '  function withdrawPayments() {\n', '    address payee = msg.sender;\n', '    uint256 payment = payments[payee];\n', '\n', '    require(payment != 0);\n', '    require(this.balance >= payment);\n', '\n', '    totalPayments = totalPayments.sub(payment);\n', '    payments[payee] = 0;\n', '\n', '    assert(payee.send(payment));\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract TrivialToken is ERC223Token, PullPayment {\n', '\n', '    //Constants\n', '    uint8 constant DECIMALS = 0;\n', '    uint256 constant MIN_ETH_AMOUNT = 0.005 ether;\n', '    uint256 constant MIN_BID_PERCENTAGE = 10;\n', '    uint256 constant TOTAL_SUPPLY = 1000000;\n', '    uint256 constant TOKENS_PERCENTAGE_FOR_KEY_HOLDER = 25;\n', '    uint256 constant CLEANUP_DELAY = 180 days;\n', '\n', '    //Accounts\n', '    address public artist;\n', '    address public trivial;\n', '\n', '    //Time information\n', '    uint256 public icoEndTime;\n', '    uint256 public auctionDuration;\n', '    uint256 public auctionEndTime;\n', '\n', '    //Token information\n', '    uint256 public tokensForArtist;\n', '    uint256 public tokensForTrivial;\n', '    uint256 public tokensForIco;\n', '\n', '    //ICO and auction results\n', '    uint256 public amountRaised;\n', '    address public highestBidder;\n', '    uint256 public highestBid;\n', '    bytes32 public auctionWinnerMessageHash;\n', '    uint256 public nextContributorIndexToBeGivenTokens;\n', '    uint256 public tokensDistributedToContributors;\n', '\n', '    //Events\n', '    event IcoStarted(uint256 icoEndTime);\n', '    event IcoContributed(address contributor, uint256 amountContributed, uint256 amountRaised);\n', '    event IcoFinished(uint256 amountRaised);\n', '    event IcoCancelled();\n', '    event AuctionStarted(uint256 auctionEndTime);\n', '    event HighestBidChanged(address highestBidder, uint256 highestBid);\n', '    event AuctionFinished(address highestBidder, uint256 highestBid);\n', '    event WinnerProvidedHash();\n', '\n', '    //State\n', '    enum State { Created, IcoStarted, IcoFinished, AuctionStarted, AuctionFinished, IcoCancelled }\n', '    State public currentState;\n', '\n', '    //Token contributors and holders\n', '    mapping(address => uint) public contributions;\n', '    address[] public contributors;\n', '\n', '    //Modififers\n', '    modifier onlyInState(State expectedState) { require(expectedState == currentState); _; }\n', '    modifier onlyBefore(uint256 _time) { require(now < _time); _; }\n', '    modifier onlyAfter(uint256 _time) { require(now > _time); _; }\n', '    modifier onlyTrivial() { require(msg.sender == trivial); _; }\n', '    modifier onlyKeyHolders() { require(balances[msg.sender] >= SafeMath.div(\n', '        SafeMath.mul(tokensForIco, TOKENS_PERCENTAGE_FOR_KEY_HOLDER), 100)); _;\n', '    }\n', '    modifier onlyAuctionWinner() {\n', '        require(currentState == State.AuctionFinished);\n', '        require(msg.sender == highestBidder);\n', '        _;\n', '    }\n', '\n', '    function TrivialToken(\n', '        string _name, string _symbol,\n', '        uint256 _icoEndTime, uint256 _auctionDuration,\n', '        address _artist, address _trivial,\n', '        uint256 _tokensForArtist,\n', '        uint256 _tokensForTrivial,\n', '        uint256 _tokensForIco\n', '    ) {\n', '        require(now < _icoEndTime);\n', '        require(\n', '            TOTAL_SUPPLY == SafeMath.add(\n', '                _tokensForArtist,\n', '                SafeMath.add(_tokensForTrivial, _tokensForIco)\n', '            )\n', '        );\n', '        require(MIN_BID_PERCENTAGE < 100);\n', '        require(TOKENS_PERCENTAGE_FOR_KEY_HOLDER < 100);\n', '\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = DECIMALS;\n', '\n', '        icoEndTime = _icoEndTime;\n', '        auctionDuration = _auctionDuration;\n', '        artist = _artist;\n', '        trivial = _trivial;\n', '\n', '        tokensForArtist = _tokensForArtist;\n', '        tokensForTrivial = _tokensForTrivial;\n', '        tokensForIco = _tokensForIco;\n', '\n', '        currentState = State.Created;\n', '    }\n', '\n', '    /*\n', '        ICO methods\n', '    */\n', '    function startIco()\n', '    onlyInState(State.Created)\n', '    onlyTrivial() {\n', '        currentState = State.IcoStarted;\n', '        IcoStarted(icoEndTime);\n', '    }\n', '\n', '    function contributeInIco() payable\n', '    onlyInState(State.IcoStarted)\n', '    onlyBefore(icoEndTime) {\n', '        require(msg.value > MIN_ETH_AMOUNT);\n', '\n', '        if (contributions[msg.sender] == 0) {\n', '            contributors.push(msg.sender);\n', '        }\n', '        contributions[msg.sender] = SafeMath.add(contributions[msg.sender], msg.value);\n', '        amountRaised = SafeMath.add(amountRaised, msg.value);\n', '\n', '        IcoContributed(msg.sender, msg.value, amountRaised);\n', '    }\n', '\n', '    function distributeTokens(uint256 contributorsNumber)\n', '    onlyInState(State.IcoStarted)\n', '    onlyAfter(icoEndTime) {\n', '        for (uint256 i = 0; i < contributorsNumber && nextContributorIndexToBeGivenTokens < contributors.length; ++i) {\n', '            address currentContributor = contributors[nextContributorIndexToBeGivenTokens++];\n', '            uint256 tokensForContributor = SafeMath.div(\n', '                SafeMath.mul(tokensForIco, contributions[currentContributor]),\n', "                amountRaised  // amountRaised can't be 0, ICO is cancelled then\n", '            );\n', '            balances[currentContributor] = tokensForContributor;\n', '            tokensDistributedToContributors = SafeMath.add(tokensDistributedToContributors, tokensForContributor);\n', '        }\n', '    }\n', '\n', '    function finishIco()\n', '    onlyInState(State.IcoStarted)\n', '    onlyAfter(icoEndTime) {\n', '        if (amountRaised == 0) {\n', '            currentState = State.IcoCancelled;\n', '            return;\n', '        }\n', '\n', '        // all contributors must have received their tokens to finish ICO\n', '        require(nextContributorIndexToBeGivenTokens >= contributors.length);\n', '\n', '        balances[artist] = SafeMath.add(balances[artist], tokensForArtist);\n', '        balances[trivial] = SafeMath.add(balances[trivial], tokensForTrivial);\n', '        uint256 leftovers = SafeMath.sub(tokensForIco, tokensDistributedToContributors);\n', '        balances[artist] = SafeMath.add(balances[artist], leftovers);\n', '\n', '        if (!artist.send(this.balance)) {\n', '            asyncSend(artist, this.balance);\n', '        }\n', '        currentState = State.IcoFinished;\n', '        IcoFinished(amountRaised);\n', '    }\n', '\n', '    function checkContribution(address contributor) constant returns (uint) {\n', '        return contributions[contributor];\n', '    }\n', '\n', '    /*\n', '        Auction methods\n', '    */\n', '    function startAuction()\n', '    onlyInState(State.IcoFinished)\n', '    onlyKeyHolders() {\n', '        // 100% tokens owner is the only key holder\n', '        if (balances[msg.sender] == TOTAL_SUPPLY) {\n', '            // no auction takes place,\n', '            highestBidder = msg.sender;\n', '            currentState = State.AuctionFinished;\n', '            AuctionFinished(highestBidder, highestBid);\n', '            return;\n', '        }\n', '\n', '        auctionEndTime = SafeMath.add(now, auctionDuration);\n', '        currentState = State.AuctionStarted;\n', '        AuctionStarted(auctionEndTime);\n', '    }\n', '\n', '    function bidInAuction() payable\n', '    onlyInState(State.AuctionStarted)\n', '    onlyBefore(auctionEndTime) {\n', '        //Must be greater or equal to minimal amount\n', '        require(msg.value >= MIN_ETH_AMOUNT);\n', '        uint256 bid = calculateUserBid();\n', '\n', '        //If there was a bid already\n', '        if (highestBid >= MIN_ETH_AMOUNT) {\n', '            //Must be greater or equal to 105% of previous bid\n', '            uint256 minimalOverBid = SafeMath.add(highestBid, SafeMath.div(\n', '                SafeMath.mul(highestBid, MIN_BID_PERCENTAGE), 100\n', '            ));\n', '            require(bid >= minimalOverBid);\n', '            //Return to previous bidder his balance\n', '            //Value to return: current balance - current bid - paymentsInAsyncSend\n', '            uint256 amountToReturn = SafeMath.sub(SafeMath.sub(\n', '                this.balance, msg.value\n', '            ), totalPayments);\n', '            if (!highestBidder.send(amountToReturn)) {\n', '                asyncSend(highestBidder, amountToReturn);\n', '            }\n', '        }\n', '\n', '        highestBidder = msg.sender;\n', '        highestBid = bid;\n', '        HighestBidChanged(highestBidder, highestBid);\n', '    }\n', '\n', '    function calculateUserBid() private returns (uint256) {\n', '        uint256 bid = msg.value;\n', '        uint256 contribution = balanceOf(msg.sender);\n', '        if (contribution > 0) {\n', '            //Formula: (sentETH * allTokens) / (allTokens - userTokens)\n', '            //User sends 16ETH, has 40 of 200 tokens\n', '            //(16 * 200) / (200 - 40) => 3200 / 160 => 20\n', '            bid = SafeMath.div(\n', '                SafeMath.mul(msg.value, TOTAL_SUPPLY),\n', '                SafeMath.sub(TOTAL_SUPPLY, contribution)\n', '            );\n', '        }\n', '        return bid;\n', '    }\n', '\n', '    function finishAuction()\n', '    onlyInState(State.AuctionStarted)\n', '    onlyAfter(auctionEndTime) {\n', '        require(highestBid > 0);  // auction cannot be finished until at least one person bids\n', '        currentState = State.AuctionFinished;\n', '        AuctionFinished(highestBidder, highestBid);\n', '    }\n', '\n', '    function withdrawShares(address holder) public\n', '    onlyInState(State.AuctionFinished) {\n', '        uint256 availableTokens = balances[holder];\n', '        require(availableTokens > 0);\n', '        balances[holder] = 0;\n', '\n', '        if (holder != highestBidder) {\n', '            holder.transfer(\n', '                SafeMath.div(SafeMath.mul(highestBid, availableTokens), TOTAL_SUPPLY)\n', '            );\n', '        }\n', '    }\n', '\n', '    function isKeyHolder(address person) constant returns (bool) {\n', '        return balances[person] >= SafeMath.div(tokensForIco, TOKENS_PERCENTAGE_FOR_KEY_HOLDER); }\n', '\n', '    /*\n', '        General methods\n', '    */\n', '\n', '    // Cancel ICO will be redesigned to prevent\n', '    // risk of user funds overtaken\n', '\n', '    /*function cancelIco()\n', '    onlyInState(State.IcoStarted)\n', '    onlyTrivial() {\n', '        currentState = State.IcoCancelled;\n', '        IcoCancelled();\n', '    }\n', '\n', '    function claimIcoContribution(address contributor) onlyInState(State.IcoCancelled) {\n', '        uint256 contribution = contributions[contributor];\n', '        require(contribution > 0);\n', '        contributions[contributor] = 0;\n', '        contributor.transfer(contribution);\n', '    }*/\n', '\n', '    function setAuctionWinnerMessageHash(bytes32 _auctionWinnerMessageHash)\n', '    onlyAuctionWinner() {\n', '        auctionWinnerMessageHash = _auctionWinnerMessageHash;\n', '        WinnerProvidedHash();\n', '    }\n', '\n', '    function killContract()\n', '    onlyTrivial() {\n', '        require(\n', '            (\n', '                currentState == State.AuctionFinished &&\n', '                now > SafeMath.add(auctionEndTime, CLEANUP_DELAY) // Delay in correct state\n', '            ) ||\n', '            currentState == State.IcoCancelled // No delay in cancelled state\n', '        );\n', '        selfdestruct(trivial);\n', '    }\n', '\n', '    // helper function to avoid too many contract calls on frontend side\n', '    function getContractState() constant returns (\n', '        uint256, uint256, uint256, uint256, uint256,\n', '        uint256, uint256, address, uint256, State,\n', '        uint256, uint256\n', '    ) {\n', '        return (\n', '            icoEndTime, auctionDuration, auctionEndTime,\n', '            tokensForArtist, tokensForTrivial, tokensForIco,\n', '            amountRaised, highestBidder, highestBid, currentState,\n', '            TOKENS_PERCENTAGE_FOR_KEY_HOLDER, MIN_BID_PERCENTAGE\n', '        );\n', '    }\n', '\n', '    function transfer(address _to, uint _value, bytes _data) onlyInState(State.IcoFinished) returns (bool) {\n', '        return ERC223Token.transfer(_to, _value, _data);\n', '    }\n', '\n', '    function transfer(address _to, uint _value) returns (bool) {\n', '        // onlyInState(IcoFinished) check is contained in a call below\n', '        bytes memory empty;\n', '        return transfer(_to, _value, empty);\n', '    }\n', '\n', '    function () payable {\n', '        revert();\n', '    }\n', '}']
