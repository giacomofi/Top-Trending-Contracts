['pragma solidity ^0.4.16;\n', '\n', '// Original author: Cintix\n', '// Modified by: Moonlambos, yakois\n', '\n', '\n', '// ERC20 Interface: https://github.com/ethereum/EIPs/issues/20\n', 'contract ERC20 {\n', '  function transfer(address _to, uint256 _value) returns (bool success);\n', '  function balanceOf(address _owner) constant returns (uint256 balance);\n', '}\n', '\n', 'contract RequestSale {\n', '  // Store the amount of ETH deposited by each account.\n', '  mapping (address => uint256) public balances;\n', '  // Track whether the contract has bought the tokens yet.\n', '  bool public bought_tokens;\n', '  // Record ETH value of tokens currently held by contract.\n', '  uint256 public contract_eth_value;\n', '  // Maximum amount of user ETH contract will accept.\n', '  uint256 public eth_cap = 300 ether;\n', '  // The minimum amount of ETH that must be deposited before the buy-in can be performed.\n', '  uint256 constant public min_required_amount = 60 ether;\n', '  // The developer address.\n', '  address public owner;\n', '  // The crowdsale address. Settable by the owner.\n', '  address public sale;\n', '  // The token address. Settable by the owner.\n', '  ERC20 public token;\n', '  \n', '  //Constructor. Sets the sender as the owner of the contract.\n', '  function RequestSale() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  // Allows the owner to set the crowdsale and token addresses.\n', '  function set_addresses(address _sale, address _token) {\n', '    // Only allow the owner to set the sale and token addresses.\n', '    require(msg.sender == owner);\n', '    // Only allow setting the addresses once.\n', '    require(sale == 0x0);\n', '    // Set the crowdsale and token addresses.\n', '    sale = _sale;\n', '    token = ERC20(_token);\n', '  }\n', '  \n', '  // Allows any user to withdraw his tokens.\n', '  function perform_withdraw() {\n', '    // Tokens must be bought\n', '    require(bought_tokens);\n', '    // Retrieve current token balance of contract\n', '    uint256 contract_token_balance = token.balanceOf(address(this));\n', '    // Disallow token withdrawals if there are no tokens to withdraw.\n', '    require(contract_token_balance == 0);\n', '    // Store the user&#39;s token balance in a temporary variable.\n', '    uint256 tokens_to_withdraw = (balances[msg.sender] * contract_token_balance) / contract_eth_value;\n', '    // Update the value of tokens currently held by the contract.\n', '    contract_eth_value -= balances[msg.sender];\n', '    // Update the user&#39;s balance prior to sending to prevent recursive call.\n', '    balances[msg.sender] = 0;\n', '    // Send the funds.  Throws on failure to prevent loss of funds.\n', '    require(token.transfer(msg.sender, tokens_to_withdraw));\n', '  }\n', '  \n', '  // Allows any caller to get his eth refunded.\n', '  function refund_me() {\n', '    // Store the user&#39;s balance prior to withdrawal in a temporary variable.\n', '    uint256 eth_to_withdraw = balances[msg.sender];\n', '    // Update the user&#39;s balance prior to sending ETH to prevent recursive call.\n', '    balances[msg.sender] = 0;\n', '    // Return the user&#39;s funds.  Throws on failure to prevent loss of funds.\n', '    msg.sender.transfer(eth_to_withdraw);\n', '  }\n', '  \n', '  // Buy the tokens. Sends ETH to the presale wallet and records the ETH amount held in the contract.\n', '  function buy_the_tokens() {\n', '    // Short circuit to save gas if the contract has already bought tokens.\n', '    require(!bought_tokens);\n', '    // The pre-sale address has to be set.\n', '    require(sale != 0x0);\n', '    // Throw if the contract balance is less than the minimum required amount.\n', '    require(this.balance >= min_required_amount);\n', '    // Record that the contract has bought the tokens.\n', '    bought_tokens = true;\n', '    // Record the amount of ETH sent as the contract&#39;s current value.\n', '    contract_eth_value = this.balance;\n', '    // Transfer all the funds to the crowdsale address.\n', '    require(sale.call.value(contract_eth_value)());\n', '  }\n', '\n', '  function upgrade_cap() {\n', '    // Only the owner can raise the cap.\n', '    if (msg.sender == owner) {\n', '          // Raise the cap.\n', '          eth_cap = 800 ether;\n', '    }\n', '  }\n', '  \n', '  // Default function.  Called when a user sends ETH to the contract.\n', '  function () payable {\n', '    // Only allow deposits if the contract hasn&#39;t already purchased the tokens.\n', '    require(!bought_tokens);\n', '    // Only allow deposits that won&#39;t exceed the contract&#39;s ETH cap.\n', '    require(this.balance + msg.value < eth_cap);\n', '    // Update records of deposited ETH to include the received amount.\n', '    balances[msg.sender] += msg.value;\n', '  }\n', '}']
['pragma solidity ^0.4.16;\n', '\n', '// Original author: Cintix\n', '// Modified by: Moonlambos, yakois\n', '\n', '\n', '// ERC20 Interface: https://github.com/ethereum/EIPs/issues/20\n', 'contract ERC20 {\n', '  function transfer(address _to, uint256 _value) returns (bool success);\n', '  function balanceOf(address _owner) constant returns (uint256 balance);\n', '}\n', '\n', 'contract RequestSale {\n', '  // Store the amount of ETH deposited by each account.\n', '  mapping (address => uint256) public balances;\n', '  // Track whether the contract has bought the tokens yet.\n', '  bool public bought_tokens;\n', '  // Record ETH value of tokens currently held by contract.\n', '  uint256 public contract_eth_value;\n', '  // Maximum amount of user ETH contract will accept.\n', '  uint256 public eth_cap = 300 ether;\n', '  // The minimum amount of ETH that must be deposited before the buy-in can be performed.\n', '  uint256 constant public min_required_amount = 60 ether;\n', '  // The developer address.\n', '  address public owner;\n', '  // The crowdsale address. Settable by the owner.\n', '  address public sale;\n', '  // The token address. Settable by the owner.\n', '  ERC20 public token;\n', '  \n', '  //Constructor. Sets the sender as the owner of the contract.\n', '  function RequestSale() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  // Allows the owner to set the crowdsale and token addresses.\n', '  function set_addresses(address _sale, address _token) {\n', '    // Only allow the owner to set the sale and token addresses.\n', '    require(msg.sender == owner);\n', '    // Only allow setting the addresses once.\n', '    require(sale == 0x0);\n', '    // Set the crowdsale and token addresses.\n', '    sale = _sale;\n', '    token = ERC20(_token);\n', '  }\n', '  \n', '  // Allows any user to withdraw his tokens.\n', '  function perform_withdraw() {\n', '    // Tokens must be bought\n', '    require(bought_tokens);\n', '    // Retrieve current token balance of contract\n', '    uint256 contract_token_balance = token.balanceOf(address(this));\n', '    // Disallow token withdrawals if there are no tokens to withdraw.\n', '    require(contract_token_balance == 0);\n', "    // Store the user's token balance in a temporary variable.\n", '    uint256 tokens_to_withdraw = (balances[msg.sender] * contract_token_balance) / contract_eth_value;\n', '    // Update the value of tokens currently held by the contract.\n', '    contract_eth_value -= balances[msg.sender];\n', "    // Update the user's balance prior to sending to prevent recursive call.\n", '    balances[msg.sender] = 0;\n', '    // Send the funds.  Throws on failure to prevent loss of funds.\n', '    require(token.transfer(msg.sender, tokens_to_withdraw));\n', '  }\n', '  \n', '  // Allows any caller to get his eth refunded.\n', '  function refund_me() {\n', "    // Store the user's balance prior to withdrawal in a temporary variable.\n", '    uint256 eth_to_withdraw = balances[msg.sender];\n', "    // Update the user's balance prior to sending ETH to prevent recursive call.\n", '    balances[msg.sender] = 0;\n', "    // Return the user's funds.  Throws on failure to prevent loss of funds.\n", '    msg.sender.transfer(eth_to_withdraw);\n', '  }\n', '  \n', '  // Buy the tokens. Sends ETH to the presale wallet and records the ETH amount held in the contract.\n', '  function buy_the_tokens() {\n', '    // Short circuit to save gas if the contract has already bought tokens.\n', '    require(!bought_tokens);\n', '    // The pre-sale address has to be set.\n', '    require(sale != 0x0);\n', '    // Throw if the contract balance is less than the minimum required amount.\n', '    require(this.balance >= min_required_amount);\n', '    // Record that the contract has bought the tokens.\n', '    bought_tokens = true;\n', "    // Record the amount of ETH sent as the contract's current value.\n", '    contract_eth_value = this.balance;\n', '    // Transfer all the funds to the crowdsale address.\n', '    require(sale.call.value(contract_eth_value)());\n', '  }\n', '\n', '  function upgrade_cap() {\n', '    // Only the owner can raise the cap.\n', '    if (msg.sender == owner) {\n', '          // Raise the cap.\n', '          eth_cap = 800 ether;\n', '    }\n', '  }\n', '  \n', '  // Default function.  Called when a user sends ETH to the contract.\n', '  function () payable {\n', "    // Only allow deposits if the contract hasn't already purchased the tokens.\n", '    require(!bought_tokens);\n', "    // Only allow deposits that won't exceed the contract's ETH cap.\n", '    require(this.balance + msg.value < eth_cap);\n', '    // Update records of deposited ETH to include the received amount.\n', '    balances[msg.sender] += msg.value;\n', '  }\n', '}']
