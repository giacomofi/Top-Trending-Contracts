['pragma solidity ^0.4.13;\n', '\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    return a / b;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function assertTrue(bool val) internal {\n', '    assert(val);\n', '  }\n', '\n', '  function assertFalse(bool val) internal {\n', '    assert(!val);\n', '  }\n', '}\n', '\n', '\n', '/*\n', ' * Ownable\n', ' *\n', ' * Base contract with an owner.\n', ' *\n', ' * Provides onlyOwner modifier, which prevents function from running\n', ' * if it is called by anyone other than the owner.\n', ' */\n', 'contract Ownable {\n', '\n', '  address public owner;\n', '\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    if (msg.sender != owner) {\n', '      revert();\n', '    }\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '}\n', '\n', '\n', '/*\n', ' * Haltable\n', ' *\n', ' * Abstract contract that allows children to implement a halt mechanism.\n', ' */\n', 'contract Haltable is Ownable {\n', '\n', '  bool public halted;\n', '\n', '  modifier revertIfHalted {\n', '    if (halted) revert();\n', '    _;\n', '  }\n', '\n', '  modifier onlyIfHalted {\n', '    if (!halted) revert();\n', '    _;\n', '  }\n', '\n', '  function halt() external onlyOwner {\n', '    halted = true;\n', '  }\n', '\n', '  function unhalt() external onlyOwner onlyIfHalted {\n', '    halted = false;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * Forward ETH payments associated with the Provide (PRVD)\n', ' * token sale and track them with an event.\n', ' *\n', ' * Associates purchasers who made payment for token issuance with an identifier.\n', ' * Enables the ability to make a purchase on behalf of another address.\n', ' *\n', ' * Allows the sale to be halted upon completion.\n', ' */\n', 'contract ProvideSale is Haltable {\n', '  using SafeMath for uint;\n', '\n', '  /** Multisig to which all ETH is forwarded. */\n', '  address public multisig;\n', '\n', '  /** Total ETH raised (in wei). */\n', '  uint public totalTransferred;\n', '\n', '  /** Total number of distinct purchasers. */\n', '  uint public purchaserCount;\n', '\n', '  /** Total incoming ETH (in wei) per centrally tracked purchaser. */\n', '  mapping (uint128 => uint) public paymentsByPurchaser;\n', '\n', '  /** Total incoming ETH (in wei) per benefactor address. */\n', '  mapping (address => uint) public paymentsByBenefactor;\n', '\n', '  /** Emitted when a purchase is made; benefactor is the address where the tokens will be ultimately issued. */\n', '  event PaymentForwarded(address source, uint amount, uint128 identifier, address benefactor);\n', '\n', '  /**\n', '   * @param _owner Owner is able to pause and resume crowdsale\n', '   * @param _multisig Multisig to which all ETH is forwarded\n', '   */\n', '  function ProvideSale(address _owner, address _multisig) {\n', '    owner = _owner;\n', '    multisig = _multisig;\n', '  }\n', '\n', '  /**\n', '   * Purchase on a behalf of a benefactor.\n', '   *\n', '   * The payment event is logged so interested parties can keep tally of the invested amounts\n', '   * and token recipients.\n', '   *\n', '   * The actual payment is forwarded to the multisig.\n', '   *\n', '   * @param identifier Identifier in the centralized database - UUID v4\n', '   * @param benefactor Address who will receive the tokens\n', '   */\n', '  function purchaseFor(uint128 identifier, address benefactor) public revertIfHalted payable {\n', '    uint weiAmount = msg.value;\n', '\n', '    if (weiAmount == 0) {\n', '      revert(); // no invalid payments\n', '    }\n', '\n', '    if (benefactor == 0) {\n', '      revert(); // bad payment address\n', '    }\n', '\n', '    PaymentForwarded(msg.sender, weiAmount, identifier, benefactor);\n', '\n', '    totalTransferred = totalTransferred.add(weiAmount);\n', '\n', '    if (paymentsByPurchaser[identifier] == 0) {\n', '      purchaserCount++;\n', '    }\n', '\n', '    paymentsByPurchaser[identifier] = paymentsByPurchaser[identifier].add(weiAmount);\n', '    paymentsByBenefactor[benefactor] = paymentsByBenefactor[benefactor].add(weiAmount);\n', '\n', '    if (!multisig.send(weiAmount)) revert(); // may run out of gas\n', '  }\n', '\n', '  /**\n', '   * Purchase on a behalf of the sender.\n', '   *\n', '   * @param identifier Identifier of the purchaser - UUID v4\n', '   */\n', '  function purchase(uint128 identifier) public payable {\n', '    purchaseFor(identifier, msg.sender);\n', '  }\n', '\n', '  /**\n', '   * Purchase on a behalf of the sender, but uses a nil identifier.\n', '   */\n', '  function() public payable {\n', '    purchase(0);\n', '  }\n', '}']
['pragma solidity ^0.4.13;\n', '\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    return a / b;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function assertTrue(bool val) internal {\n', '    assert(val);\n', '  }\n', '\n', '  function assertFalse(bool val) internal {\n', '    assert(!val);\n', '  }\n', '}\n', '\n', '\n', '/*\n', ' * Ownable\n', ' *\n', ' * Base contract with an owner.\n', ' *\n', ' * Provides onlyOwner modifier, which prevents function from running\n', ' * if it is called by anyone other than the owner.\n', ' */\n', 'contract Ownable {\n', '\n', '  address public owner;\n', '\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    if (msg.sender != owner) {\n', '      revert();\n', '    }\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '}\n', '\n', '\n', '/*\n', ' * Haltable\n', ' *\n', ' * Abstract contract that allows children to implement a halt mechanism.\n', ' */\n', 'contract Haltable is Ownable {\n', '\n', '  bool public halted;\n', '\n', '  modifier revertIfHalted {\n', '    if (halted) revert();\n', '    _;\n', '  }\n', '\n', '  modifier onlyIfHalted {\n', '    if (!halted) revert();\n', '    _;\n', '  }\n', '\n', '  function halt() external onlyOwner {\n', '    halted = true;\n', '  }\n', '\n', '  function unhalt() external onlyOwner onlyIfHalted {\n', '    halted = false;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * Forward ETH payments associated with the Provide (PRVD)\n', ' * token sale and track them with an event.\n', ' *\n', ' * Associates purchasers who made payment for token issuance with an identifier.\n', ' * Enables the ability to make a purchase on behalf of another address.\n', ' *\n', ' * Allows the sale to be halted upon completion.\n', ' */\n', 'contract ProvideSale is Haltable {\n', '  using SafeMath for uint;\n', '\n', '  /** Multisig to which all ETH is forwarded. */\n', '  address public multisig;\n', '\n', '  /** Total ETH raised (in wei). */\n', '  uint public totalTransferred;\n', '\n', '  /** Total number of distinct purchasers. */\n', '  uint public purchaserCount;\n', '\n', '  /** Total incoming ETH (in wei) per centrally tracked purchaser. */\n', '  mapping (uint128 => uint) public paymentsByPurchaser;\n', '\n', '  /** Total incoming ETH (in wei) per benefactor address. */\n', '  mapping (address => uint) public paymentsByBenefactor;\n', '\n', '  /** Emitted when a purchase is made; benefactor is the address where the tokens will be ultimately issued. */\n', '  event PaymentForwarded(address source, uint amount, uint128 identifier, address benefactor);\n', '\n', '  /**\n', '   * @param _owner Owner is able to pause and resume crowdsale\n', '   * @param _multisig Multisig to which all ETH is forwarded\n', '   */\n', '  function ProvideSale(address _owner, address _multisig) {\n', '    owner = _owner;\n', '    multisig = _multisig;\n', '  }\n', '\n', '  /**\n', '   * Purchase on a behalf of a benefactor.\n', '   *\n', '   * The payment event is logged so interested parties can keep tally of the invested amounts\n', '   * and token recipients.\n', '   *\n', '   * The actual payment is forwarded to the multisig.\n', '   *\n', '   * @param identifier Identifier in the centralized database - UUID v4\n', '   * @param benefactor Address who will receive the tokens\n', '   */\n', '  function purchaseFor(uint128 identifier, address benefactor) public revertIfHalted payable {\n', '    uint weiAmount = msg.value;\n', '\n', '    if (weiAmount == 0) {\n', '      revert(); // no invalid payments\n', '    }\n', '\n', '    if (benefactor == 0) {\n', '      revert(); // bad payment address\n', '    }\n', '\n', '    PaymentForwarded(msg.sender, weiAmount, identifier, benefactor);\n', '\n', '    totalTransferred = totalTransferred.add(weiAmount);\n', '\n', '    if (paymentsByPurchaser[identifier] == 0) {\n', '      purchaserCount++;\n', '    }\n', '\n', '    paymentsByPurchaser[identifier] = paymentsByPurchaser[identifier].add(weiAmount);\n', '    paymentsByBenefactor[benefactor] = paymentsByBenefactor[benefactor].add(weiAmount);\n', '\n', '    if (!multisig.send(weiAmount)) revert(); // may run out of gas\n', '  }\n', '\n', '  /**\n', '   * Purchase on a behalf of the sender.\n', '   *\n', '   * @param identifier Identifier of the purchaser - UUID v4\n', '   */\n', '  function purchase(uint128 identifier) public payable {\n', '    purchaseFor(identifier, msg.sender);\n', '  }\n', '\n', '  /**\n', '   * Purchase on a behalf of the sender, but uses a nil identifier.\n', '   */\n', '  function() public payable {\n', '    purchase(0);\n', '  }\n', '}']
