['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  MintableToken public token;\n', '\n', '  // start and end block where investments are allowed (both inclusive)\n', '  uint256 public startBlock;\n', '  uint256 public endBlock;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */ \n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  function Crowdsale(uint256 _startBlock, uint256 _endBlock, uint256 _rate, address _wallet) {\n', '    require(_startBlock >= block.number);\n', '    require(_endBlock >= _startBlock);\n', '    require(_rate > 0);\n', '    require(_wallet != 0x0);\n', '\n', '    token = createTokenContract();\n', '    startBlock = _startBlock;\n', '    endBlock = _endBlock;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '  }\n', '\n', '  // creates the token to be sold. \n', '  // override this method to have crowdsale of a specific mintable token.\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new MintableToken();\n', '  }\n', '\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) payable {\n', '    require(beneficiary != 0x0);\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal constant returns (bool) {\n', '    uint256 current = block.number;\n', '    bool withinPeriod = current >= startBlock && current <= endBlock;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    return block.number > endBlock;\n', '  }\n', '\n', '\n', '}\n', '\n', 'contract WhiteListCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public whiteListEndBlock;\n', '  mapping(address => bool) isWhiteListed;\n', '\n', '  event InvestorWhiteListAddition(address investor);\n', '\n', '  function WhiteListCrowdsale(uint256 _whiteListEndBlock) {\n', '    require(_whiteListEndBlock > startBlock);\n', '    whiteListEndBlock = _whiteListEndBlock;\n', '  }\n', '\n', '  function addToWhiteList(address investor) public {\n', '    require(startBlock > block.number);\n', '    require(!isWhiteListed[investor]);\n', '    require(investor != 0);\n', '\n', '    isWhiteListed[investor] = true;\n', '    InvestorWhiteListAddition(investor);\n', '  }\n', '\n', '  // overriding Crowdsale#buyTokens to add extra whitelist logic\n', '  // we did not use validPurchase because we cannot get the beneficiary address\n', '  function buyTokens(address beneficiary) payable {\n', '    require(validWhiteListedPurchase(beneficiary));\n', '    return super.buyTokens(beneficiary);\n', '  }\n', '\n', '  function validWhiteListedPurchase(address beneficiary) internal constant returns (bool) {\n', '    return isWhiteListed[beneficiary] || whiteListEndBlock <= block.number;\n', '  }\n', '\n', '}\n', '\n', 'contract BonusWhiteListCrowdsale is WhiteListCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 bonusWhiteListRate;\n', '\n', '  event BonusWhiteList(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  function BonusWhiteListCrowdsale(uint256 _bonusWhiteListRate) {\n', '    require(_bonusWhiteListRate > 0);\n', '    bonusWhiteListRate = _bonusWhiteListRate;\n', '  }\n', '\n', '  function buyTokens(address beneficiary) payable {\n', '    super.buyTokens(beneficiary);\n', '\n', '    if(whiteListEndBlock > block.number && isWhiteListed[beneficiary]){\n', '      uint256 weiAmount = msg.value;\n', '      uint256 bonusTokens = weiAmount.mul(rate).mul(bonusWhiteListRate).div(100);\n', '      token.mint(beneficiary, bonusTokens);\n', '      BonusWhiteList(msg.sender, beneficiary, weiAmount, bonusTokens);\n', '    }\n', '  }\n', '\n', '}\n', '\n', 'contract ReferedCrowdsale is WhiteListCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => address) referrals;\n', '\n', '  event ReferredInvestorAddition(address whiteListedInvestor, address referredInvestor);\n', '\n', '  function ReferedCrowdsale() {}\n', '\n', '  function addToReferrals(address whiteListedInvestor, address referredInvestor) public {\n', '    require(isWhiteListed[whiteListedInvestor]);\n', '    require(!isWhiteListed[referredInvestor]);\n', '    require(whiteListedInvestor != 0);\n', '    require(referredInvestor != 0);\n', '    require(referrals[referredInvestor] == 0x0);\n', '\n', '    referrals[referredInvestor] = whiteListedInvestor;\n', '    ReferredInvestorAddition(whiteListedInvestor, referredInvestor);\n', '  }\n', '\n', '  function validWhiteListedPurchase(address beneficiary) internal constant returns (bool) {\n', '    return super.validWhiteListedPurchase(beneficiary) || referrals[beneficiary] != 0x0;\n', '  }\n', '\n', '}\n', '\n', 'contract BonusReferrerCrowdsale is ReferedCrowdsale, BonusWhiteListCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 bonusReferredRate;\n', '\n', '  event BonusReferred(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  function BonusReferrerCrowdsale(uint256 _bonusReferredRate) {\n', '    require(_bonusReferredRate > 0 && _bonusReferredRate < bonusWhiteListRate);\n', '    bonusReferredRate = _bonusReferredRate;\n', '  }\n', '\n', '  function buyTokens(address beneficiary) payable {\n', '    super.buyTokens(beneficiary);\n', '\n', '    if(whiteListEndBlock > block.number && referrals[beneficiary] != 0x0){\n', '      uint256 weiAmount = msg.value;\n', '      uint256 bonusReferrerTokens = weiAmount.mul(rate).mul(bonusWhiteListRate - bonusReferredRate).div(100);\n', '      uint256 bonusReferredTokens = weiAmount.mul(rate).mul(bonusReferredRate).div(100);\n', '      token.mint(beneficiary, bonusReferredTokens);\n', '      token.mint(referrals[beneficiary], bonusReferrerTokens);\n', '      BonusWhiteList(msg.sender, referrals[beneficiary], weiAmount, bonusReferrerTokens);\n', '      BonusReferred(msg.sender, beneficiary, weiAmount, bonusReferredTokens);\n', '    }\n', '  }\n', '\n', '}\n', '\n', 'contract PartialOwnershipCrowdsale is BonusReferrerCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 percentToInvestor;\n', '\n', '  event CompanyTokenIssued(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  function PartialOwnershipCrowdsale(uint256 _percentToInvestor) {\n', '    require(_percentToInvestor != 0);\n', '    percentToInvestor = _percentToInvestor;\n', '  }\n', '\n', '  function buyTokens(address beneficiary) payable {\n', '    super.buyTokens(beneficiary);\n', '    uint256 weiAmount = msg.value;\n', '    uint256 investorTokens = weiAmount.mul(rate);\n', '    uint256 companyTokens = investorTokens.mul(100 - percentToInvestor).div(percentToInvestor);\n', '    if(whiteListEndBlock > block.number && (referrals[beneficiary] != 0x0 || isWhiteListed[beneficiary])){\n', '      companyTokens = companyTokens.sub(investorTokens.mul(bonusWhiteListRate).div(100));\n', '    }\n', '\n', '    token.mint(wallet, companyTokens);\n', '    CompanyTokenIssued(msg.sender, beneficiary, weiAmount, companyTokens);\n', '  }\n', '\n', '}\n', '\n', 'contract CappedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public cap;\n', '\n', '  function CappedCrowdsale(uint256 _cap) {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  // overriding Crowdsale#validPurchase to add extra cap logic\n', '  // @return true if investors can buy at the moment\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinCap = weiRaised.add(msg.value) <= cap;\n', '    return super.validPurchase() && withinCap;\n', '  }\n', '\n', '  // overriding Crowdsale#hasEnded to add cap logic\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    bool capReached = weiRaised >= cap;\n', '    return super.hasEnded() || capReached;\n', '  }\n', '\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', 'contract FinalizableCrowdsale is Crowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  // should be called after crowdsale ends, to do\n', '  // some extra finalization work\n', '  function finalize() onlyOwner {\n', '    require(!isFinalized);\n', '    require(hasEnded());\n', '\n', '    finalization();\n', '    Finalized();\n', '    \n', '    isFinalized = true;\n', '  }\n', '\n', '  // end token minting on finalization\n', '  // override this with custom logic if needed\n', '  function finalization() internal {\n', '    token.finishMinting();\n', '  }\n', '\n', '\n', '\n', '}\n', '\n', 'contract RefundVault is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  enum State { Active, Refunding, Closed }\n', '\n', '  mapping (address => uint256) public deposited;\n', '  address public wallet;\n', '  State public state;\n', '\n', '  event Closed();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '\n', '  function RefundVault(address _wallet) {\n', '    require(_wallet != 0x0);\n', '    wallet = _wallet;\n', '    state = State.Active;\n', '  }\n', '\n', '  function deposit(address investor) onlyOwner payable {\n', '    require(state == State.Active);\n', '    deposited[investor] = deposited[investor].add(msg.value);\n', '  }\n', '\n', '  function close() onlyOwner {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    Closed();\n', '    wallet.transfer(this.balance);\n', '  }\n', '\n', '  function enableRefunds() onlyOwner {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    RefundsEnabled();\n', '  }\n', '\n', '  function refund(address investor) {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    investor.transfer(depositedValue);\n', '    Refunded(investor, depositedValue);\n', '  }\n', '}\n', '\n', 'contract RefundableCrowdsale is FinalizableCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // minimum amount of funds to be raised in weis\n', '  uint256 public goal;\n', '\n', '  // refund vault used to hold funds while crowdsale is running\n', '  RefundVault public vault;\n', '\n', '  function RefundableCrowdsale(uint256 _goal) {\n', '    require(_goal > 0);\n', '    vault = new RefundVault(wallet);\n', '    goal = _goal;\n', '  }\n', '\n', '  // We&#39;re overriding the fund forwarding from Crowdsale.\n', '  // In addition to sending the funds, we want to call\n', '  // the RefundVault deposit function\n', '  function forwardFunds() internal {\n', '    vault.deposit.value(msg.value)(msg.sender);\n', '  }\n', '\n', '  // if crowdsale is unsuccessful, investors can claim refunds here\n', '  function claimRefund() {\n', '    require(isFinalized);\n', '    require(!goalReached());\n', '\n', '    vault.refund(msg.sender);\n', '  }\n', '\n', '  // vault finalization task, called when owner calls finalize()\n', '  function finalization() internal {\n', '    if (goalReached()) {\n', '      vault.close();\n', '    } else {\n', '      vault.enableRefunds();\n', '    }\n', '\n', '    super.finalization();\n', '  }\n', '\n', '  function goalReached() public constant returns (bool) {\n', '    return weiRaised >= goal;\n', '  }\n', '\n', '}\n', '\n', 'contract DemeterCrowdsale is\n', '  Crowdsale,\n', '  CappedCrowdsale,\n', '  RefundableCrowdsale,\n', '  WhiteListCrowdsale,\n', '  ReferedCrowdsale,\n', '  BonusWhiteListCrowdsale,\n', '  BonusReferrerCrowdsale,\n', '  PartialOwnershipCrowdsale {\n', '\n', '    uint256 endBlock;\n', '\n', '  function DemeterCrowdsale(\n', '    uint256 _startBlock,\n', '    uint256 _endBlock,\n', '    uint256 _rate,\n', '    address _wallet,\n', '    uint256 _cap,\n', '    uint256 _goal,\n', '    uint256 _whiteListEndBlock,\n', '    uint256 _bonusWhiteListRate,\n', '    uint256 _bonusReferredRate,\n', '    uint256 _percentToInvestor\n', '  )\n', '    Crowdsale(_startBlock, _endBlock, _rate, _wallet)\n', '    CappedCrowdsale(_cap)\n', '    RefundableCrowdsale(_goal)\n', '    WhiteListCrowdsale(_whiteListEndBlock)\n', '    ReferedCrowdsale()\n', '    BonusWhiteListCrowdsale(_bonusWhiteListRate)\n', '    BonusReferrerCrowdsale(_bonusReferredRate)\n', '    PartialOwnershipCrowdsale(_percentToInvestor)\n', '  {\n', '    DemeterToken(token).setEndBlock(_endBlock);\n', '  }\n', '\n', '  // creates the token to be sold.\n', '  // override this method to have crowdsale of a specific MintableToken token.\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new DemeterToken();\n', '  }\n', '\n', '}\n', '\n', 'contract DemeterCrowdsaleInstance is DemeterCrowdsale {\n', '\n', '  function DemeterCrowdsaleInstance() DemeterCrowdsale(\n', '    4164989,\n', '    4176989,\n', '    1000000000000,\n', '    0x14f01e00092a5b0dBD43414793541df316363D82,\n', '    20000000000000000,\n', '    10000000000000000,\n', '    4168989,\n', '    7,\n', '    3,\n', '    30\n', '  ){}\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract TimeBlockedToken is ERC20, Ownable {\n', '\n', '  uint256 endBlock;\n', '\n', '  /**\n', '   * @dev Checks whether it can transfer or otherwise throws.\n', '   */\n', '  modifier canTransfer() {\n', '    require(block.number > endBlock);\n', '    _;\n', '  }\n', '\n', '  function setEndBlock(uint256 _endBlock) onlyOwner {\n', '    endBlock = _endBlock;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks modifier and allows transfer if tokens are not locked.\n', '   * @param _to The address that will recieve the tokens.\n', '   * @param _value The amount of tokens to be transferred.\n', '   */\n', '  function transfer(address _to, uint256 _value) canTransfer returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  /**\n', '  * @dev Checks modifier and allows transfer if tokens are not locked.\n', '  * @param _from The address that will send the tokens.\n', '  * @param _to The address that will recieve the tokens.\n', '  * @param _value The amount of tokens to be transferred.\n', '  */\n', '  function transferFrom(address _from, address _to, uint256 _value) canTransfer returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will recieve the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract DemeterToken is MintableToken, TimeBlockedToken {\n', '  string public name = "Demeter";\n', '  string public symbol = "DMT";\n', '  uint256 public decimals = 18;\n', '}']
['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  MintableToken public token;\n', '\n', '  // start and end block where investments are allowed (both inclusive)\n', '  uint256 public startBlock;\n', '  uint256 public endBlock;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */ \n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  function Crowdsale(uint256 _startBlock, uint256 _endBlock, uint256 _rate, address _wallet) {\n', '    require(_startBlock >= block.number);\n', '    require(_endBlock >= _startBlock);\n', '    require(_rate > 0);\n', '    require(_wallet != 0x0);\n', '\n', '    token = createTokenContract();\n', '    startBlock = _startBlock;\n', '    endBlock = _endBlock;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '  }\n', '\n', '  // creates the token to be sold. \n', '  // override this method to have crowdsale of a specific mintable token.\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new MintableToken();\n', '  }\n', '\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) payable {\n', '    require(beneficiary != 0x0);\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal constant returns (bool) {\n', '    uint256 current = block.number;\n', '    bool withinPeriod = current >= startBlock && current <= endBlock;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    return block.number > endBlock;\n', '  }\n', '\n', '\n', '}\n', '\n', 'contract WhiteListCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public whiteListEndBlock;\n', '  mapping(address => bool) isWhiteListed;\n', '\n', '  event InvestorWhiteListAddition(address investor);\n', '\n', '  function WhiteListCrowdsale(uint256 _whiteListEndBlock) {\n', '    require(_whiteListEndBlock > startBlock);\n', '    whiteListEndBlock = _whiteListEndBlock;\n', '  }\n', '\n', '  function addToWhiteList(address investor) public {\n', '    require(startBlock > block.number);\n', '    require(!isWhiteListed[investor]);\n', '    require(investor != 0);\n', '\n', '    isWhiteListed[investor] = true;\n', '    InvestorWhiteListAddition(investor);\n', '  }\n', '\n', '  // overriding Crowdsale#buyTokens to add extra whitelist logic\n', '  // we did not use validPurchase because we cannot get the beneficiary address\n', '  function buyTokens(address beneficiary) payable {\n', '    require(validWhiteListedPurchase(beneficiary));\n', '    return super.buyTokens(beneficiary);\n', '  }\n', '\n', '  function validWhiteListedPurchase(address beneficiary) internal constant returns (bool) {\n', '    return isWhiteListed[beneficiary] || whiteListEndBlock <= block.number;\n', '  }\n', '\n', '}\n', '\n', 'contract BonusWhiteListCrowdsale is WhiteListCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 bonusWhiteListRate;\n', '\n', '  event BonusWhiteList(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  function BonusWhiteListCrowdsale(uint256 _bonusWhiteListRate) {\n', '    require(_bonusWhiteListRate > 0);\n', '    bonusWhiteListRate = _bonusWhiteListRate;\n', '  }\n', '\n', '  function buyTokens(address beneficiary) payable {\n', '    super.buyTokens(beneficiary);\n', '\n', '    if(whiteListEndBlock > block.number && isWhiteListed[beneficiary]){\n', '      uint256 weiAmount = msg.value;\n', '      uint256 bonusTokens = weiAmount.mul(rate).mul(bonusWhiteListRate).div(100);\n', '      token.mint(beneficiary, bonusTokens);\n', '      BonusWhiteList(msg.sender, beneficiary, weiAmount, bonusTokens);\n', '    }\n', '  }\n', '\n', '}\n', '\n', 'contract ReferedCrowdsale is WhiteListCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => address) referrals;\n', '\n', '  event ReferredInvestorAddition(address whiteListedInvestor, address referredInvestor);\n', '\n', '  function ReferedCrowdsale() {}\n', '\n', '  function addToReferrals(address whiteListedInvestor, address referredInvestor) public {\n', '    require(isWhiteListed[whiteListedInvestor]);\n', '    require(!isWhiteListed[referredInvestor]);\n', '    require(whiteListedInvestor != 0);\n', '    require(referredInvestor != 0);\n', '    require(referrals[referredInvestor] == 0x0);\n', '\n', '    referrals[referredInvestor] = whiteListedInvestor;\n', '    ReferredInvestorAddition(whiteListedInvestor, referredInvestor);\n', '  }\n', '\n', '  function validWhiteListedPurchase(address beneficiary) internal constant returns (bool) {\n', '    return super.validWhiteListedPurchase(beneficiary) || referrals[beneficiary] != 0x0;\n', '  }\n', '\n', '}\n', '\n', 'contract BonusReferrerCrowdsale is ReferedCrowdsale, BonusWhiteListCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 bonusReferredRate;\n', '\n', '  event BonusReferred(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  function BonusReferrerCrowdsale(uint256 _bonusReferredRate) {\n', '    require(_bonusReferredRate > 0 && _bonusReferredRate < bonusWhiteListRate);\n', '    bonusReferredRate = _bonusReferredRate;\n', '  }\n', '\n', '  function buyTokens(address beneficiary) payable {\n', '    super.buyTokens(beneficiary);\n', '\n', '    if(whiteListEndBlock > block.number && referrals[beneficiary] != 0x0){\n', '      uint256 weiAmount = msg.value;\n', '      uint256 bonusReferrerTokens = weiAmount.mul(rate).mul(bonusWhiteListRate - bonusReferredRate).div(100);\n', '      uint256 bonusReferredTokens = weiAmount.mul(rate).mul(bonusReferredRate).div(100);\n', '      token.mint(beneficiary, bonusReferredTokens);\n', '      token.mint(referrals[beneficiary], bonusReferrerTokens);\n', '      BonusWhiteList(msg.sender, referrals[beneficiary], weiAmount, bonusReferrerTokens);\n', '      BonusReferred(msg.sender, beneficiary, weiAmount, bonusReferredTokens);\n', '    }\n', '  }\n', '\n', '}\n', '\n', 'contract PartialOwnershipCrowdsale is BonusReferrerCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 percentToInvestor;\n', '\n', '  event CompanyTokenIssued(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  function PartialOwnershipCrowdsale(uint256 _percentToInvestor) {\n', '    require(_percentToInvestor != 0);\n', '    percentToInvestor = _percentToInvestor;\n', '  }\n', '\n', '  function buyTokens(address beneficiary) payable {\n', '    super.buyTokens(beneficiary);\n', '    uint256 weiAmount = msg.value;\n', '    uint256 investorTokens = weiAmount.mul(rate);\n', '    uint256 companyTokens = investorTokens.mul(100 - percentToInvestor).div(percentToInvestor);\n', '    if(whiteListEndBlock > block.number && (referrals[beneficiary] != 0x0 || isWhiteListed[beneficiary])){\n', '      companyTokens = companyTokens.sub(investorTokens.mul(bonusWhiteListRate).div(100));\n', '    }\n', '\n', '    token.mint(wallet, companyTokens);\n', '    CompanyTokenIssued(msg.sender, beneficiary, weiAmount, companyTokens);\n', '  }\n', '\n', '}\n', '\n', 'contract CappedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public cap;\n', '\n', '  function CappedCrowdsale(uint256 _cap) {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  // overriding Crowdsale#validPurchase to add extra cap logic\n', '  // @return true if investors can buy at the moment\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinCap = weiRaised.add(msg.value) <= cap;\n', '    return super.validPurchase() && withinCap;\n', '  }\n', '\n', '  // overriding Crowdsale#hasEnded to add cap logic\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    bool capReached = weiRaised >= cap;\n', '    return super.hasEnded() || capReached;\n', '  }\n', '\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', 'contract FinalizableCrowdsale is Crowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  // should be called after crowdsale ends, to do\n', '  // some extra finalization work\n', '  function finalize() onlyOwner {\n', '    require(!isFinalized);\n', '    require(hasEnded());\n', '\n', '    finalization();\n', '    Finalized();\n', '    \n', '    isFinalized = true;\n', '  }\n', '\n', '  // end token minting on finalization\n', '  // override this with custom logic if needed\n', '  function finalization() internal {\n', '    token.finishMinting();\n', '  }\n', '\n', '\n', '\n', '}\n', '\n', 'contract RefundVault is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  enum State { Active, Refunding, Closed }\n', '\n', '  mapping (address => uint256) public deposited;\n', '  address public wallet;\n', '  State public state;\n', '\n', '  event Closed();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '\n', '  function RefundVault(address _wallet) {\n', '    require(_wallet != 0x0);\n', '    wallet = _wallet;\n', '    state = State.Active;\n', '  }\n', '\n', '  function deposit(address investor) onlyOwner payable {\n', '    require(state == State.Active);\n', '    deposited[investor] = deposited[investor].add(msg.value);\n', '  }\n', '\n', '  function close() onlyOwner {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    Closed();\n', '    wallet.transfer(this.balance);\n', '  }\n', '\n', '  function enableRefunds() onlyOwner {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    RefundsEnabled();\n', '  }\n', '\n', '  function refund(address investor) {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    investor.transfer(depositedValue);\n', '    Refunded(investor, depositedValue);\n', '  }\n', '}\n', '\n', 'contract RefundableCrowdsale is FinalizableCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // minimum amount of funds to be raised in weis\n', '  uint256 public goal;\n', '\n', '  // refund vault used to hold funds while crowdsale is running\n', '  RefundVault public vault;\n', '\n', '  function RefundableCrowdsale(uint256 _goal) {\n', '    require(_goal > 0);\n', '    vault = new RefundVault(wallet);\n', '    goal = _goal;\n', '  }\n', '\n', "  // We're overriding the fund forwarding from Crowdsale.\n", '  // In addition to sending the funds, we want to call\n', '  // the RefundVault deposit function\n', '  function forwardFunds() internal {\n', '    vault.deposit.value(msg.value)(msg.sender);\n', '  }\n', '\n', '  // if crowdsale is unsuccessful, investors can claim refunds here\n', '  function claimRefund() {\n', '    require(isFinalized);\n', '    require(!goalReached());\n', '\n', '    vault.refund(msg.sender);\n', '  }\n', '\n', '  // vault finalization task, called when owner calls finalize()\n', '  function finalization() internal {\n', '    if (goalReached()) {\n', '      vault.close();\n', '    } else {\n', '      vault.enableRefunds();\n', '    }\n', '\n', '    super.finalization();\n', '  }\n', '\n', '  function goalReached() public constant returns (bool) {\n', '    return weiRaised >= goal;\n', '  }\n', '\n', '}\n', '\n', 'contract DemeterCrowdsale is\n', '  Crowdsale,\n', '  CappedCrowdsale,\n', '  RefundableCrowdsale,\n', '  WhiteListCrowdsale,\n', '  ReferedCrowdsale,\n', '  BonusWhiteListCrowdsale,\n', '  BonusReferrerCrowdsale,\n', '  PartialOwnershipCrowdsale {\n', '\n', '    uint256 endBlock;\n', '\n', '  function DemeterCrowdsale(\n', '    uint256 _startBlock,\n', '    uint256 _endBlock,\n', '    uint256 _rate,\n', '    address _wallet,\n', '    uint256 _cap,\n', '    uint256 _goal,\n', '    uint256 _whiteListEndBlock,\n', '    uint256 _bonusWhiteListRate,\n', '    uint256 _bonusReferredRate,\n', '    uint256 _percentToInvestor\n', '  )\n', '    Crowdsale(_startBlock, _endBlock, _rate, _wallet)\n', '    CappedCrowdsale(_cap)\n', '    RefundableCrowdsale(_goal)\n', '    WhiteListCrowdsale(_whiteListEndBlock)\n', '    ReferedCrowdsale()\n', '    BonusWhiteListCrowdsale(_bonusWhiteListRate)\n', '    BonusReferrerCrowdsale(_bonusReferredRate)\n', '    PartialOwnershipCrowdsale(_percentToInvestor)\n', '  {\n', '    DemeterToken(token).setEndBlock(_endBlock);\n', '  }\n', '\n', '  // creates the token to be sold.\n', '  // override this method to have crowdsale of a specific MintableToken token.\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new DemeterToken();\n', '  }\n', '\n', '}\n', '\n', 'contract DemeterCrowdsaleInstance is DemeterCrowdsale {\n', '\n', '  function DemeterCrowdsaleInstance() DemeterCrowdsale(\n', '    4164989,\n', '    4176989,\n', '    1000000000000,\n', '    0x14f01e00092a5b0dBD43414793541df316363D82,\n', '    20000000000000000,\n', '    10000000000000000,\n', '    4168989,\n', '    7,\n', '    3,\n', '    30\n', '  ){}\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract TimeBlockedToken is ERC20, Ownable {\n', '\n', '  uint256 endBlock;\n', '\n', '  /**\n', '   * @dev Checks whether it can transfer or otherwise throws.\n', '   */\n', '  modifier canTransfer() {\n', '    require(block.number > endBlock);\n', '    _;\n', '  }\n', '\n', '  function setEndBlock(uint256 _endBlock) onlyOwner {\n', '    endBlock = _endBlock;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks modifier and allows transfer if tokens are not locked.\n', '   * @param _to The address that will recieve the tokens.\n', '   * @param _value The amount of tokens to be transferred.\n', '   */\n', '  function transfer(address _to, uint256 _value) canTransfer returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  /**\n', '  * @dev Checks modifier and allows transfer if tokens are not locked.\n', '  * @param _from The address that will send the tokens.\n', '  * @param _to The address that will recieve the tokens.\n', '  * @param _value The amount of tokens to be transferred.\n', '  */\n', '  function transferFrom(address _from, address _to, uint256 _value) canTransfer returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will recieve the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract DemeterToken is MintableToken, TimeBlockedToken {\n', '  string public name = "Demeter";\n', '  string public symbol = "DMT";\n', '  uint256 public decimals = 18;\n', '}']
