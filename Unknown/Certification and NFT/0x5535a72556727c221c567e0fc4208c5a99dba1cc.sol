['pragma solidity 0.4.14;\n', '\n', '// -----------------------------------------------------------------------------\n', '// PembiCoin crowdsale contract.\n', '// Copyright (c) 2017 Pembient, Inc.\n', '// The MIT License.\n', '// -----------------------------------------------------------------------------\n', '\n', 'contract PembiCoinICO {\n', '\n', '    enum State {Active, Idle, Successful, Failed}\n', '\n', '    State public currentState = State.Idle;\n', '    uint256 public contributorCount = 0;\n', '\n', '    address public owner;\n', '\n', '    mapping(uint256 => address) private contributors;\n', '    mapping(address => uint256) private amounts;\n', '\n', '    event Transferred(\n', '        address indexed _from,\n', '        address indexed _to,\n', '        uint256 _amount\n', '    );\n', '\n', '    event Transitioned(\n', '        address indexed _subject,\n', '        address indexed _object,\n', '        State _oldState,\n', '        State _newState\n', '    );\n', '\n', '    function PembiCoinICO() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function() external payable inState(State.Active) {\n', '        require(msg.value > 0);\n', '        if (amounts[msg.sender] == 0) {\n', '            contributors[contributorCount] = msg.sender;\n', '            contributorCount = safeAdd(contributorCount, 1);\n', '        }\n', '        amounts[msg.sender] = safeAdd(amounts[msg.sender], msg.value);\n', '        Transferred(msg.sender, address(this), msg.value);\n', '    }\n', '\n', '    function refund() external inState(State.Failed) {\n', '        uint256 amount = amounts[msg.sender];\n', '        assert(amount > 0 && amount <= this.balance);\n', '        amounts[msg.sender] = 0;\n', '        msg.sender.transfer(amount);\n', '        Transferred(address(this), msg.sender, amount);\n', '    }\n', '\n', '    function payout() external inState(State.Successful) onlyOwner {\n', '        uint256 amount = this.balance;\n', '        owner.transfer(amount);\n', '        Transferred(address(this), owner, amount);\n', '    }\n', '\n', '    function setActive() external inState(State.Idle) onlyOwner {\n', '        State oldState = currentState;\n', '        currentState = State.Active;\n', '        Transitioned(msg.sender, address(this), oldState, currentState);\n', '    }\n', '\n', '    function setIdle() external inState(State.Active) onlyOwner {\n', '        State oldState = currentState;\n', '        currentState = State.Idle;\n', '        Transitioned(msg.sender, address(this), oldState, currentState);\n', '    }\n', '\n', '    function setSuccessful() external inState(State.Idle) onlyOwner {\n', '        State oldState = currentState;\n', '        currentState = State.Successful;\n', '        Transitioned(msg.sender, address(this), oldState, currentState);\n', '    }\n', '\n', '    function setFailed() external inState(State.Idle) onlyOwner {\n', '        State oldState = currentState;\n', '        currentState = State.Failed;\n', '        Transitioned(msg.sender, address(this), oldState, currentState);\n', '    }\n', '\n', '    function getContribution(uint256 _i)\n', '        external\n', '        constant\n', '        returns (address o_contributor, uint256 o_amount)\n', '    {\n', '        require(_i >= 0 && _i < contributorCount);\n', '        o_contributor = contributors[_i];\n', '        o_amount = amounts[o_contributor];\n', '    }\n', '\n', '    function safeAdd(uint256 a, uint256 b)\n', '        private\n', '        constant\n', '        returns (uint256 o_sum)\n', '    {\n', '        o_sum = a + b;\n', '        assert(o_sum >= a && o_sum >= b);\n', '    }\n', '\n', '    modifier inState(State _state) {\n', '        require(_state == currentState);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '}']
['pragma solidity 0.4.14;\n', '\n', '// -----------------------------------------------------------------------------\n', '// PembiCoin crowdsale contract.\n', '// Copyright (c) 2017 Pembient, Inc.\n', '// The MIT License.\n', '// -----------------------------------------------------------------------------\n', '\n', 'contract PembiCoinICO {\n', '\n', '    enum State {Active, Idle, Successful, Failed}\n', '\n', '    State public currentState = State.Idle;\n', '    uint256 public contributorCount = 0;\n', '\n', '    address public owner;\n', '\n', '    mapping(uint256 => address) private contributors;\n', '    mapping(address => uint256) private amounts;\n', '\n', '    event Transferred(\n', '        address indexed _from,\n', '        address indexed _to,\n', '        uint256 _amount\n', '    );\n', '\n', '    event Transitioned(\n', '        address indexed _subject,\n', '        address indexed _object,\n', '        State _oldState,\n', '        State _newState\n', '    );\n', '\n', '    function PembiCoinICO() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function() external payable inState(State.Active) {\n', '        require(msg.value > 0);\n', '        if (amounts[msg.sender] == 0) {\n', '            contributors[contributorCount] = msg.sender;\n', '            contributorCount = safeAdd(contributorCount, 1);\n', '        }\n', '        amounts[msg.sender] = safeAdd(amounts[msg.sender], msg.value);\n', '        Transferred(msg.sender, address(this), msg.value);\n', '    }\n', '\n', '    function refund() external inState(State.Failed) {\n', '        uint256 amount = amounts[msg.sender];\n', '        assert(amount > 0 && amount <= this.balance);\n', '        amounts[msg.sender] = 0;\n', '        msg.sender.transfer(amount);\n', '        Transferred(address(this), msg.sender, amount);\n', '    }\n', '\n', '    function payout() external inState(State.Successful) onlyOwner {\n', '        uint256 amount = this.balance;\n', '        owner.transfer(amount);\n', '        Transferred(address(this), owner, amount);\n', '    }\n', '\n', '    function setActive() external inState(State.Idle) onlyOwner {\n', '        State oldState = currentState;\n', '        currentState = State.Active;\n', '        Transitioned(msg.sender, address(this), oldState, currentState);\n', '    }\n', '\n', '    function setIdle() external inState(State.Active) onlyOwner {\n', '        State oldState = currentState;\n', '        currentState = State.Idle;\n', '        Transitioned(msg.sender, address(this), oldState, currentState);\n', '    }\n', '\n', '    function setSuccessful() external inState(State.Idle) onlyOwner {\n', '        State oldState = currentState;\n', '        currentState = State.Successful;\n', '        Transitioned(msg.sender, address(this), oldState, currentState);\n', '    }\n', '\n', '    function setFailed() external inState(State.Idle) onlyOwner {\n', '        State oldState = currentState;\n', '        currentState = State.Failed;\n', '        Transitioned(msg.sender, address(this), oldState, currentState);\n', '    }\n', '\n', '    function getContribution(uint256 _i)\n', '        external\n', '        constant\n', '        returns (address o_contributor, uint256 o_amount)\n', '    {\n', '        require(_i >= 0 && _i < contributorCount);\n', '        o_contributor = contributors[_i];\n', '        o_amount = amounts[o_contributor];\n', '    }\n', '\n', '    function safeAdd(uint256 a, uint256 b)\n', '        private\n', '        constant\n', '        returns (uint256 o_sum)\n', '    {\n', '        o_sum = a + b;\n', '        assert(o_sum >= a && o_sum >= b);\n', '    }\n', '\n', '    modifier inState(State _state) {\n', '        require(_state == currentState);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '}']
