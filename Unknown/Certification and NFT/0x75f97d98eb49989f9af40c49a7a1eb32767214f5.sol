['pragma solidity ^0.4.0;\n', '\n', '/// @title PonzICO\n', '/// @author acityinohio\n', 'contract PonzICO {\n', '    address public owner;\n', '    uint public total;\n', '    mapping (address => uint) public invested;\n', '    mapping (address => uint) public balances;\n', '\n', '    //function signatures\n', '    function PonzICO() { }\n', '    function withdraw() { }\n', '    function reinvest() { }\n', '    function invest() payable { }\n', '    \n', '}\n', '\n', '/// @title VoteOnMyTeslaColor EXCLUSIVELY FOR SUPER-ACCREDITED PONZICO INVESTORS\n', '/// @author acityinohio\n', 'contract VoteOnMyTeslaColor {\n', '    address public owner;\n', '    enum Color { SolidBlack, MidnightSilverMetallic, DeepBlueMetallic, SilverMetallic, RedMultiCoat }\n', '    mapping (uint8 => uint32) public votes;\n', '    mapping (address => bool) public voted;\n', '\n', '    //log vote\n', '    event LogVotes(Color color, uint num);\n', '    //log winner\n', '    event LogWinner(Color color);\n', '\n', '    //hardcode production PonzICO address\n', '    PonzICO ponzico = PonzICO(0x1ce7986760ADe2BF0F322f5EF39Ce0DE3bd0C82B);\n', '\n', '    //just for me\n', '    modifier ownerOnly() {require(msg.sender == owner); _; }\n', '    //only valid colors, as specified by the Model3 production details\n', '    modifier isValidColor(uint8 color) {require(color < uint8(5)); _; }\n', '    //Only super-accredited ponzICO investors (0.1 ETH per vote) can vote\n', '    //Can only vote once! Unless you want to pay to play...\n', '    modifier superAccreditedInvestor() { require(ponzico.invested(msg.sender) >= 0.1 ether && !voted[msg.sender]); _;}\n', '\n', '    //constructor for initializing VoteOnMyTeslaColor\n', '    //the owner is the genius who made the revolutionary smart contract PonzICO\n', '    //obviously blue starts with 10 votes because it is objectively the BEST color\n', '    function VoteOnMyTeslaColor() {\n', '        owner = msg.sender;\n', '        //YOURE MY BOY BLUE\n', '        votes[uint8(2)] = 10;\n', '    }\n', '\n', '    //SUPER ACCREDITED INVESTORS ONLY, YOU CAN ONLY VOTE ONCE\n', '    function vote(uint8 color)\n', '    superAccreditedInvestor()\n', '    isValidColor(color)\n', '    {\n', '        //0.1 ETH invested in PonzICO per vote, truncated\n', '        uint32 num = uint32(ponzico.invested(msg.sender) / (0.1 ether));\n', '        votes[color] += num;\n', '        voted[msg.sender] = true;\n', '        LogVotes(Color(color), num);\n', '    }\n', '    \n', '    //pay to vote again! I don&#39;t care!\n', '    //...but it&#39;ll cost you 1 ether for me to look the other way, wink wink\n', '    function itsLikeChicago() payable {\n', '        require(voted[msg.sender] && msg.value >= 1 ether);\n', '        voted[msg.sender] = false;\n', '    }\n', '\n', '    function winnovate()\n', '    ownerOnly()\n', '    {\n', '        Color winner = Color.SolidBlack;\n', '        for (uint8 choice = 1; choice < 5; choice++) {\n', '            if (votes[choice] > votes[choice-1]) {\n', '                winner = Color(choice);\n', '            }\n', '        }\n', '        LogWinner(winner);\n', '        //keeping dat blockchain bloat on check\n', '        selfdestruct(owner);\n', '    }\n', '}']
['pragma solidity ^0.4.0;\n', '\n', '/// @title PonzICO\n', '/// @author acityinohio\n', 'contract PonzICO {\n', '    address public owner;\n', '    uint public total;\n', '    mapping (address => uint) public invested;\n', '    mapping (address => uint) public balances;\n', '\n', '    //function signatures\n', '    function PonzICO() { }\n', '    function withdraw() { }\n', '    function reinvest() { }\n', '    function invest() payable { }\n', '    \n', '}\n', '\n', '/// @title VoteOnMyTeslaColor EXCLUSIVELY FOR SUPER-ACCREDITED PONZICO INVESTORS\n', '/// @author acityinohio\n', 'contract VoteOnMyTeslaColor {\n', '    address public owner;\n', '    enum Color { SolidBlack, MidnightSilverMetallic, DeepBlueMetallic, SilverMetallic, RedMultiCoat }\n', '    mapping (uint8 => uint32) public votes;\n', '    mapping (address => bool) public voted;\n', '\n', '    //log vote\n', '    event LogVotes(Color color, uint num);\n', '    //log winner\n', '    event LogWinner(Color color);\n', '\n', '    //hardcode production PonzICO address\n', '    PonzICO ponzico = PonzICO(0x1ce7986760ADe2BF0F322f5EF39Ce0DE3bd0C82B);\n', '\n', '    //just for me\n', '    modifier ownerOnly() {require(msg.sender == owner); _; }\n', '    //only valid colors, as specified by the Model3 production details\n', '    modifier isValidColor(uint8 color) {require(color < uint8(5)); _; }\n', '    //Only super-accredited ponzICO investors (0.1 ETH per vote) can vote\n', '    //Can only vote once! Unless you want to pay to play...\n', '    modifier superAccreditedInvestor() { require(ponzico.invested(msg.sender) >= 0.1 ether && !voted[msg.sender]); _;}\n', '\n', '    //constructor for initializing VoteOnMyTeslaColor\n', '    //the owner is the genius who made the revolutionary smart contract PonzICO\n', '    //obviously blue starts with 10 votes because it is objectively the BEST color\n', '    function VoteOnMyTeslaColor() {\n', '        owner = msg.sender;\n', '        //YOURE MY BOY BLUE\n', '        votes[uint8(2)] = 10;\n', '    }\n', '\n', '    //SUPER ACCREDITED INVESTORS ONLY, YOU CAN ONLY VOTE ONCE\n', '    function vote(uint8 color)\n', '    superAccreditedInvestor()\n', '    isValidColor(color)\n', '    {\n', '        //0.1 ETH invested in PonzICO per vote, truncated\n', '        uint32 num = uint32(ponzico.invested(msg.sender) / (0.1 ether));\n', '        votes[color] += num;\n', '        voted[msg.sender] = true;\n', '        LogVotes(Color(color), num);\n', '    }\n', '    \n', "    //pay to vote again! I don't care!\n", "    //...but it'll cost you 1 ether for me to look the other way, wink wink\n", '    function itsLikeChicago() payable {\n', '        require(voted[msg.sender] && msg.value >= 1 ether);\n', '        voted[msg.sender] = false;\n', '    }\n', '\n', '    function winnovate()\n', '    ownerOnly()\n', '    {\n', '        Color winner = Color.SolidBlack;\n', '        for (uint8 choice = 1; choice < 5; choice++) {\n', '            if (votes[choice] > votes[choice-1]) {\n', '                winner = Color(choice);\n', '            }\n', '        }\n', '        LogWinner(winner);\n', '        //keeping dat blockchain bloat on check\n', '        selfdestruct(owner);\n', '    }\n', '}']
