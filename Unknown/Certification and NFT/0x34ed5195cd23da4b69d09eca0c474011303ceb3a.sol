['pragma solidity ^0.4.13;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will recieve the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', 'contract DisbursableToken is MintableToken {\n', '  using SafeMath for uint256;\n', '\n', '  struct Account {\n', '    uint claimedPoints;\n', '    uint allowedPoints;\n', '    uint lastPointsPerToken;\n', '  }\n', '\n', '  event Disburse(address _source, uint _amount);\n', '  event ClaimDisbursement(address _account, uint _amount);\n', '  // The disbursement multiplier exists to correct rounding errors\n', '  // One disbursed wei = 1e18 disbursement points\n', '  uint pointMultiplier = 1e18;\n', '  uint totalPointsPerToken;\n', '  uint unclaimedDisbursement;\n', '  uint totalDisbursement;\n', '\n', '  mapping(address => Account) accounts;\n', '\n', '  /**\n', '   * @dev Function to send eth to owners of this token.\n', '   */\n', '  function disburse() public payable {\n', '    totalPointsPerToken = totalPointsPerToken.add(msg.value.mul(pointMultiplier).div(totalSupply));\n', '    unclaimedDisbursement = unclaimedDisbursement.add(msg.value);\n', '    totalDisbursement = totalDisbursement.add(msg.value);\n', '    Disburse(msg.sender, msg.value);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to update the claimable disbursements whenever tokens change hands\n', '   * @param _account address The address whose claimable disbursements should be updated\n', '   * @return A uint256 specifing the amount of wei still available for the owner.\n', '   */\n', '  function updatePoints(address _account) internal {\n', '    uint newPointsPerToken = totalPointsPerToken.sub(accounts[_account].lastPointsPerToken);\n', '    accounts[_account].allowedPoints = accounts[_account].allowedPoints.add(balances[_account].mul(newPointsPerToken));\n', '    accounts[_account].lastPointsPerToken = totalPointsPerToken;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of wei that a token owner can claim.\n', '   * @param _owner address The address which owns the funds.\n', '   * @return A uint256 specifing the amount of wei still available for the owner.\n', '   */\n', '  function claimable(address _owner) constant returns (uint256 remaining) {\n', '    updatePoints(_owner);\n', '    return accounts[_owner].allowedPoints.sub(accounts[_owner].claimedPoints).div(pointMultiplier);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to claim the wei that a token owner is entitled to\n', '   * @param _amount uint256 How much of the wei the user will take\n', '   */\n', '  function claim(uint _amount) public {\n', '    require(_amount > 0);\n', '    updatePoints(msg.sender);\n', '    uint claimingPoints = _amount.mul(pointMultiplier);\n', '    require(accounts[msg.sender].claimedPoints.add(claimingPoints) <= accounts[msg.sender].allowedPoints);\n', '    accounts[msg.sender].claimedPoints = accounts[msg.sender].claimedPoints.add(claimingPoints);\n', '    ClaimDisbursement(msg.sender, _amount);\n', '    require(msg.sender.send(_amount));\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens. We need to modify this to update points.\n', '   * @param _to The address that will recieve the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n', '    updatePoints(_to);\n', '    super.mint(_to, _amount);\n', '  }\n', '\n', '  function transfer(address _to, uint _value) returns(bool) {\n', '    updatePoints(msg.sender);\n', '    updatePoints(_to);\n', '    super.transfer(_to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another while ensuring that claims remain where they are\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint _value) returns(bool) {\n', '    updatePoints(_from);\n', '    updatePoints(_to);\n', '    super.transferFrom(_from, _to, _value);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Hero token\n', ' * @dev This is the token being sold\n', ' *\n', ' * ABI\n', ' * [{"constant":true,"inputs":[],"name":"mintingFinished","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"startTrading","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_amount","type":"uint256"}],"name":"claim","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"claimable","outputs":[{"name":"remaining","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_amount","type":"uint256"}],"name":"mint","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"tradingStarted","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"finishMinting","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"disburse","outputs":[],"payable":true,"type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"remaining","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"type":"function"},{"payable":true,"type":"fallback"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_source","type":"address"},{"indexed":false,"name":"_amount","type":"uint256"}],"name":"Disburse","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"_account","type":"address"},{"indexed":false,"name":"_amount","type":"uint256"}],"name":"ClaimDisbursement","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"amount","type":"uint256"}],"name":"Mint","type":"event"},{"anonymous":false,"inputs":[],"name":"MintFinished","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"}]\n', ' */\n', '\n', 'contract HeroToken is DisbursableToken {\n', '  string public name = "Hero Token";\n', '  string public symbol = "HERO";\n', '  uint public decimals = 18;\n', '\n', '  bool public tradingStarted = false;\n', '  /**\n', '   * @dev modifier that throws if trading has not started yet\n', '   */\n', '  modifier hasStartedTrading() {\n', '    require(tradingStarted);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the owner to enable the trading. This can not be undone\n', '   */\n', '  function startTrading() onlyOwner {\n', '    tradingStarted = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows anyone to transfer the DEVE tokens once trading has started\n', '   * @param _to the recipient address of the tokens.\n', '   * @param _value number of tokens to be transfered.\n', '   */\n', '  function transfer(address _to, uint _value) hasStartedTrading returns(bool) {\n', '    super.transfer(_to, _value);\n', '  }\n', '\n', '   /**\n', '   * @dev Allows anyone to transfer the DEVE tokens once trading has started\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint _value) hasStartedTrading returns(bool) {\n', '    super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function() external payable {\n', '    disburse();\n', '  }\n', '}\n', '\n', '/**\n', ' * @title MainSale\n', ' * @dev The main HERO token sale contract\n', ' *\n', ' * ABI\n', ' * [{"constant":false,"inputs":[{"name":"_multisigVault","type":"address"}],"name":"setMultisigVault","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_minimum","type":"uint256"}],"name":"setMinimum","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"saleOngoing","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"exchangeRate","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"base","type":"uint256"}],"name":"bonusTokens","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"altDeposits","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"recipient","type":"address"},{"name":"tokens","type":"uint256"}],"name":"authorizedCreateTokens","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"minimum","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_saleOngoing","type":"bool"}],"name":"setSaleOngoing","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"finishMinting","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"totalAltDeposits","type":"uint256"}],"name":"setAltDeposits","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_token","type":"address"}],"name":"retrieveTokens","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"hardcap","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"start","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"recipient","type":"address"}],"name":"createTokens","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[],"name":"multisigVault","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_exchangeRate","type":"uint256"}],"name":"setExchangeRate","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_hardcap","type":"uint256"}],"name":"setHardcap","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_start","type":"uint256"}],"name":"setStart","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"token","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":false,"name":"recipient","type":"address"},{"indexed":false,"name":"ether_amount","type":"uint256"},{"indexed":false,"name":"token_amount","type":"uint256"},{"indexed":false,"name":"exchangerate","type":"uint256"}],"name":"TokenSold","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"recipient","type":"address"},{"indexed":false,"name":"token_amount","type":"uint256"}],"name":"AuthorizedCreate","type":"event"},{"anonymous":false,"inputs":[],"name":"MainSaleClosed","type":"event"}]\n', ' */\n', 'contract MainSale is Ownable {\n', '  using SafeMath for uint;\n', '  event TokenSold(address recipient, uint ether_amount, uint token_amount, uint exchangerate);\n', '  event AuthorizedCreate(address recipient, uint token_amount);\n', '  event MainSaleClosed();\n', '\n', '  HeroToken public token = new HeroToken();\n', '\n', '  address public multisigVault = 0x877f1DAa6e6E9dc2764611D48c56172CE3547656;\n', '\n', '  uint public hardcap = 250000 ether;\n', '  uint public exchangeRate = 200;\n', '  uint public minimum = 10 ether;\n', '\n', '  uint public altDeposits = 0;\n', '  uint public start = 1504266900; //new Date("September 1, 2017 19:55:00 GMT+8").getTime() / 1000\n', '  bool public saleOngoing = true;\n', '\n', '  /**\n', '   * @dev modifier to allow token creation only when the sale IS ON\n', '   */\n', '  modifier isSaleOn() {\n', '    require(start < now && saleOngoing && !token.mintingFinished());\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to prevent buying tokens below the minimum required\n', '   */\n', '  modifier isOverMinimum() {\n', '    require(msg.value >= minimum);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to allow token creation only when the hardcap has not been reached\n', '   */\n', '  modifier isUnderHardcap() {\n', '    require(multisigVault.balance + altDeposits <= hardcap);\n', '    _;\n', '  }\n', '\n', '  /*\n', '   * @dev Allows anyone to create tokens by depositing ether.\n', '   * @param recipient the recipient to receive tokens.\n', '   */\n', '  function createTokens(address recipient) public isOverMinimum isUnderHardcap isSaleOn payable {\n', '    uint base = exchangeRate.mul(msg.value).mul(10**token.decimals()).div(1 ether);\n', '    uint bonus = bonusTokens(base);\n', '    uint tokens = base.add(bonus);\n', '    token.mint(recipient, tokens);\n', '    require(multisigVault.send(msg.value));\n', '    TokenSold(recipient, msg.value, tokens, exchangeRate);\n', '  }\n', '\n', '  /**\n', '   * @dev Computes the number of bonus tokens awarded based on the current time.\n', '   * @param base the original number of tokens made without counting the bonus\n', '   */\n', '  function bonusTokens(uint base) constant returns(uint) {\n', '    uint bonus = 0;\n', '    if (now <= start + 3 hours) {\n', '      bonus = base.mul(3).div(10);\n', '    } else if (now <= start + 24 hours) {\n', '      bonus = base.mul(2).div(10);\n', '    } else if (now <= start + 3 days) {\n', '      bonus = base.div(10);\n', '    } else if (now <= start + 7 days) {\n', '      bonus = base.div(20);\n', '    } else if (now <= start + 14 days) {\n', '      bonus = base.div(40);\n', '    }\n', '    return bonus;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows authorized acces to create tokens. This is used for Bitcoin and ERC20 deposits\n', '   * @param recipient the recipient to receive tokens.\n', '   * @param tokens number of tokens to be created.\n', '   */\n', '  function authorizedCreateTokens(address recipient, uint tokens) public onlyOwner {\n', '    token.mint(recipient, tokens);\n', '    AuthorizedCreate(recipient, tokens);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the owner to set the starting time.\n', '   * @param _start the new _start\n', '   */\n', '  function setStart(uint _start) public onlyOwner {\n', '    start = _start;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the owner to set the minimum purchase.\n', '   * @param _minimum the new _minimum\n', '   */\n', '  function setMinimum(uint _minimum) public onlyOwner {\n', '    minimum = _minimum;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the owner to set the hardcap.\n', '   * @param _hardcap the new hardcap\n', '   */\n', '  function setHardcap(uint _hardcap) public onlyOwner {\n', '    hardcap = _hardcap;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows to set the toal alt deposit measured in ETH to make sure the hardcap includes other deposits\n', '   * @param totalAltDeposits total amount ETH equivalent\n', '   */\n', '  function setAltDeposits(uint totalAltDeposits) public onlyOwner {\n', '    altDeposits = totalAltDeposits;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the owner to set the multisig contract.\n', '   * @param _multisigVault the multisig contract address\n', '   */\n', '  function setMultisigVault(address _multisigVault) public onlyOwner {\n', '    if (_multisigVault != address(0)) {\n', '      multisigVault = _multisigVault;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the owner to set the exchange rate\n', '   * @param _exchangeRate the exchangerate address\n', '   */\n', '  function setExchangeRate(uint _exchangeRate) public onlyOwner {\n', '    exchangeRate = _exchangeRate;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the owner to stop the sale\n', '   * @param _saleOngoing whether the sale is ongoing or not\n', '   */\n', '  function setSaleOngoing(bool _saleOngoing) public onlyOwner {\n', '    saleOngoing = _saleOngoing;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the owner to finish the minting.\n', '   * The ownership of the token contract is transfered\n', '   * to this owner.\n', '   */\n', '  function finishMinting() public onlyOwner {\n', '    token.finishMinting();\n', '    token.transferOwnership(owner);\n', '    MainSaleClosed();\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the owner to transfer ERC20 tokens to the multi sig vault\n', '   * @param _token the contract address of the ERC20 contract\n', '   */\n', '  function retrieveTokens(address _token) public onlyOwner {\n', '    ERC20 foreignToken = ERC20(_token);\n', '    foreignToken.transfer(multisigVault, foreignToken.balanceOf(this));\n', '  }\n', '\n', '  /**\n', '   * @dev Fallback function which receives ether and created the appropriate number of tokens for the\n', '   * msg.sender.\n', '   */\n', '  function() external payable {\n', '    createTokens(msg.sender);\n', '  }\n', '}']