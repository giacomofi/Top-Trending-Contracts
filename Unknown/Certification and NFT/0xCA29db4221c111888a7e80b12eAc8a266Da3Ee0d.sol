['pragma solidity ^0.4.11;\n', '\n', 'contract boleno {\n', '    string public constant name = "Boleno";                 // Token name\n', '    string public constant symbol = "BLN";                  // Boleno token symbol\n', '    uint8 public constant decimals = 18;                    // Number of decimals\n', '    uint256 public totalSupply = 10**25;                    // The initial supply (10 million) in base unit\n', '    address public supplier;                                // Boleno supplier address\n', '    uint public blnpereth = 50;                             // Price of 1 Ether in Bolenos by the supplier\n', '    uint public bounty = 15;                                // Percentage of bounty program. Initiates with 15%\n', '    bool public sale = false;                               // Is there an ongoing sale?\n', '    bool public referral = false;                           // Is the referral program enabled?\n', '\n', '    // Events\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '\n', '    mapping (address => uint256) public balances;           // Balances\n', '    mapping(address => mapping (address => uint256)) allowed;// Record of allowances\n', '\n', '    // Initialization\n', '    function boleno() {\n', '      supplier = msg.sender;                                // Supplier is contract creator\n', '      balances[supplier] = totalSupply;                     // The initial supply goes to supplier\n', '    }\n', '\n', '    // For functions that require only supplier usage\n', '    modifier onlySupplier {\n', '      if (msg.sender != supplier) throw;\n', '      _;\n', '    }\n', '\n', '    // Token transfer\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '      if (now < 1502755200 && msg.sender != supplier) throw;// Cannot trade until Tuesday, August 15, 2017 12:00:00 AM (End of ICO)\n', '      if (balances[msg.sender] < _value) throw;            // Does the spender have enough Bolenos to send?\n', '      if (balances[_to] + _value < balances[_to]) throw;   // Overflow?\n', '      balances[msg.sender] -= _value;                      // Subtract the Bolenos from the sender&#39;s balance\n', '      balances[_to] += _value;                             // Add the Bolenos to the recipient&#39;s balance\n', '      Transfer(msg.sender, _to, _value);                   // Send Bolenos transfer event\n', '      return true;                                         // Return true to client\n', '    }\n', '\n', '    // Token transfer on your behalf (i.e. by contracts)\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '      if (now < 1502755200 && _from != supplier) throw;     // Cannot trade until Tuesday, August 15, 2017 12:00:00 AM (End of ICO)\n', '      if (balances[_from] < _value) throw;                  // Does the spender have enough Bolenos to send?\n', '      if(allowed[_from][msg.sender] < _value) throw;        // Is the sender allowed to spend as much money on behalf of the spender?\n', '      if (balances[_to] + _value < balances[_to]) throw;    // Overflow?\n', '      balances[_from] -= _value;                            // Subtract the Bolenos from the sender&#39;s balance\n', '      allowed[_from][msg.sender] -= _value;                 // Update allowances record\n', '      balances[_to] += _value;                              // Add the Bolenos to the recipient&#39;s balance\n', '      Transfer(_from, _to, _value);                         // Send Bolenos transfer event\n', '      return true;                                          // Return true to client\n', '     }\n', '\n', '     // Allows someone (i.e a contract) to spend on your behalf multiple times up to a certain value.\n', '     // If this function is called again, it overwrites the current allowance with _value.\n', '     // Approve 0 to cancel previous approval\n', '     function approve(address _spender, uint256 _value) returns (bool success) {\n', '       allowed[msg.sender][_spender] = _value;             // Update allowances record\n', '       Approval(msg.sender, _spender, _value);             // Send approval event\n', '       return true;                                        // Return true to client\n', '     }\n', '\n', '     // Check how much someone approved you to spend on their behalf\n', '     function allowance(address _owner, address _spender) returns (uint256 bolenos) {\n', '       return allowed[_owner][_spender];                   // Check the allowances record\n', '     }\n', '\n', '    // What is the Boleno balance of a particular person?\n', '    function balanceOf(address _owner) returns (uint256 bolenos){\n', '      return balances[_owner];\n', '    }\n', '\n', '    /*\n', '     Crowdsale related functions\n', '    */\n', '\n', '    // Referral bounty system\n', '    function referral(address referrer) payable {\n', '      if(sale != true) throw;                               // Is there an ongoing sale?\n', '      if(referral != true) throw;                           // Is referral bounty allowed by supplier?\n', '      if(balances[referrer] < 100**18) throw;               // Make sure referrer already has at least 100 Bolenos\n', '      uint256 bolenos = msg.value * blnpereth;              // Determine amount of equivalent Bolenos to the Ethers received\n', '      /*\n', '        First give Bolenos to the purchaser\n', '      */\n', '      uint256 purchaserBounty = (bolenos / 100) * (100 + bounty);// Add bounty to the purchased amount\n', '      if(balances[supplier] < purchaserBounty) throw;       // Does the supplier have enough BLN tokens to sell?\n', '      if (balances[msg.sender] + purchaserBounty < balances[msg.sender]) throw; // Overflow?\n', '      balances[supplier] -= purchaserBounty;                // Subtract the Bolenos from the supplier&#39;s balance\n', '      balances[msg.sender] += purchaserBounty;              // Add the Bolenos to the buyer&#39;s balance\n', '      Transfer(supplier, msg.sender, purchaserBounty);      // Send Bolenos transfer event\n', '      /*\n', '        Then give Bolenos to the referrer\n', '      */\n', '      uint256 referrerBounty = (bolenos / 100) * bounty;    // Only the bounty percentage is added to the referrer\n', '      if(balances[supplier] < referrerBounty) throw;        // Does the supplier have enough BLN tokens to sell?\n', '      if (balances[referrer] + referrerBounty < balances[referrer]) throw; // Overflow?\n', '      balances[supplier] -= referrerBounty;                 // Subtract the Bolenos from the supplier&#39;s balance\n', '      balances[referrer] += referrerBounty;                 // Add the Bolenos to the buyer&#39;s balance\n', '      Transfer(supplier, referrer, referrerBounty);         // Send Bolenos transfer event\n', '    }\n', '\n', '    // Set the number of BLNs sold per ETH (only by the supplier).\n', '    function setbounty(uint256 newBounty) onlySupplier {\n', '      bounty = newBounty;\n', '    }\n', '\n', '    // Set the number of BLNs sold per ETH (only by the supplier).\n', '    function setblnpereth(uint256 newRate) onlySupplier {\n', '      blnpereth = newRate;\n', '    }\n', '\n', '    // Trigger Sale (only by the supplier)\n', '    function triggerSale(bool newSale) onlySupplier {\n', '      sale = newSale;\n', '    }\n', '\n', '    // Transfer both supplier status and all held Boleno tokens supply to a different address (only supplier)\n', '    function transferSupply(address newSupplier) onlySupplier {\n', '      if (balances[newSupplier] + balances[supplier] < balances[newSupplier]) throw;// Overflow?\n', '      uint256 supplyValue = balances[supplier];             // Determine current value of the supply\n', '      balances[newSupplier] += supplyValue;                 // Add supply to new supplier\n', '      balances[supplier] -= supplyValue;                    // Substract supply from old supplier\n', '      Transfer(supplier, newSupplier, supplyValue);         // Send Bolenos transfer event\n', '      supplier = newSupplier;                               // Transfer supplier status\n', '    }\n', '\n', '    // Claim sale Ethers. Can be executed by anyone.\n', '    function claimSale(){\n', '      address dao = 0xE6237a036366b8003AeD725E8001BD91890be03F;// Hardcoded address of the Bolenum private DAO\n', '      dao.transfer(this.balance);                           // Send all collected Ethers to the address\n', '    }\n', '\n', '    // Fallback function. Used for buying Bolenos from supplier by simply sending Ethers to contract\n', '    function () payable {\n', '      if(sale != true) throw;                               // Is there an ongoing sale?\n', '      uint256 bolenos = msg.value * blnpereth;              // Determine amount of equivalent Bolenos to the Ethers received\n', '      if(balances[supplier] < bolenos) throw;               // Does the supplier have enough BLN tokens to sell?\n', '      if (balances[msg.sender] + bolenos < balances[msg.sender]) throw; // Overflow?\n', '      balances[supplier] -= bolenos;                        // Subtract the Bolenos the supplier&#39;s balance\n', '      balances[msg.sender] += bolenos;                      // Add the Bolenos to the buyer&#39;s balance\n', '      Transfer(supplier, msg.sender, bolenos);              // Send Bolenos transfer event\n', '    }\n', '}']