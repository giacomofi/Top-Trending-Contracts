['pragma solidity ^0.4.4;\n', '\n', '\n', 'contract TestNetworkToken {\n', '\n', '    // Token metadata\n', '    string public constant name = "Test Network Token";\n', '    string public constant symbol = "TNT";\n', '    uint8 public constant decimals = 18;  // 18 decimal places, the same as ETH.\n', '\n', '    uint256 public constant tokenCreationRate = 1000;\n', '\n', '    // The current total token supply\n', '    uint256 totalTokens;\n', '    \n', '    mapping (address => uint256) balances;\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Refund(address indexed _from, uint256 _value);\n', '\n', '    // ERC20 interface implementation\n', '\n', '    // Empty implementation, so that no tokens can be moved\n', '    function transfer(address _to, uint256 _value) returns (bool) {\n', '        return false;\n', '    }\n', '\n', '    function totalSupply() external constant returns (uint256) {\n', '        return totalTokens;\n', '    }\n', '\n', '    function balanceOf(address _owner) external constant returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    // External interface similar to the crowdfunding one\n', '\n', '    function create() payable external {\n', '        // Do not allow creating 0 tokens.\n', '        if (msg.value == 0) throw;\n', '\n', '        var numTokens = msg.value * tokenCreationRate;\n', '\n', '        totalTokens += numTokens;\n', '\n', '        // Assign new tokens to the sender\n', '        balances[msg.sender] += numTokens;\n', '\n', '        // Log token creation event\n', '        Transfer(0x0, msg.sender, numTokens);\n', '    }\n', '\n', '    function refund() external {\n', '        var tokenValue = balances[msg.sender];\n', '        if (tokenValue == 0) throw;\n', '        balances[msg.sender] = 0;\n', '        totalTokens -= tokenValue;\n', '\n', '        var ethValue = tokenValue / tokenCreationRate;\n', '        Refund(msg.sender, ethValue);\n', '\n', '        if (!msg.sender.send(ethValue)) throw;\n', '    }\n', '\n', '    // This is a test contract, so kill can be used once it is not needed\n', '    \n', '    function kill() {\n', '        if(totalTokens > 0) throw;\n', '\n', '        selfdestruct(msg.sender);\n', '    }\n', '}']