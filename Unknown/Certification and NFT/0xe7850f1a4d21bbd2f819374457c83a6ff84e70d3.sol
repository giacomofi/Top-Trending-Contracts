['pragma solidity ^0.4.16;\n', '\n', '/* A small utility contract that sends ether to other addresses by means of \n', ' * SUICIDE/SELFDESTRUCT. Unlike for a normal send/call, if the receiving address\n', ' * belongs to a contract, the contract&#39;s code is never called; one can\n', ' * forcibly increase a contract&#39;s balance!\n', ' *\n', ' * To send $x to y using this technique, simply call `suicideSend(y)` with a \n', ' * value of $x.\n', ' *\n', ' *\n', ' * If you&#39;re interested in the implications of this trick, I recommend\n', ' * looking at Jo&#227;o Carvalho&#39;s and Richard Moore&#39;s entries to the first\n', ' * Underhanded Solidity Contest [1]. Anybody writing smart ontracts should be \n', ' * aware of forced balance increases lest their contracts be vulnerable.\n', ' * \n', ' * [1] https://medium.com/@weka/announcing-the-winners-of-the-first-underhanded-solidity-coding-contest-282563a87079\n', ' */\n', 'contract SuicideSender {\n', '    function suicideSend(address to) payable {\n', '        address temp_addr;\n', '        assembly {\n', '            let free_ptr := mload(0x40)\n', '            /* Prepare initcode that immediately forwards any funds to address\n', '             * `to` by running [PUSH20 to, SUICIDE].\n', '             */\n', '            mstore(free_ptr, or(0x730000000000000000000000000000000000000000ff, mul(to, 0x100)))\n', '            // Run initcode we just prepared.\n', '            temp_addr := create(callvalue, add(free_ptr, 10), 22)\n', '        }\n', '        require(temp_addr != 0);\n', '    }\n', '}']
['pragma solidity ^0.4.16;\n', '\n', '/* A small utility contract that sends ether to other addresses by means of \n', ' * SUICIDE/SELFDESTRUCT. Unlike for a normal send/call, if the receiving address\n', " * belongs to a contract, the contract's code is never called; one can\n", " * forcibly increase a contract's balance!\n", ' *\n', ' * To send $x to y using this technique, simply call `suicideSend(y)` with a \n', ' * value of $x.\n', ' *\n', ' *\n', " * If you're interested in the implications of this trick, I recommend\n", " * looking at Jo√£o Carvalho's and Richard Moore's entries to the first\n", ' * Underhanded Solidity Contest [1]. Anybody writing smart ontracts should be \n', ' * aware of forced balance increases lest their contracts be vulnerable.\n', ' * \n', ' * [1] https://medium.com/@weka/announcing-the-winners-of-the-first-underhanded-solidity-coding-contest-282563a87079\n', ' */\n', 'contract SuicideSender {\n', '    function suicideSend(address to) payable {\n', '        address temp_addr;\n', '        assembly {\n', '            let free_ptr := mload(0x40)\n', '            /* Prepare initcode that immediately forwards any funds to address\n', '             * `to` by running [PUSH20 to, SUICIDE].\n', '             */\n', '            mstore(free_ptr, or(0x730000000000000000000000000000000000000000ff, mul(to, 0x100)))\n', '            // Run initcode we just prepared.\n', '            temp_addr := create(callvalue, add(free_ptr, 10), 22)\n', '        }\n', '        require(temp_addr != 0);\n', '    }\n', '}']
