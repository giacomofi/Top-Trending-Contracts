['pragma solidity ^0.4.15;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '\n', '    address public contractOwner;\n', '    \n', '    event OwnershipTransfer(address _from, address _to);\n', '\n', '    modifier onlyOwner(){\n', '        require(msg.sender == contractOwner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        address oldOwner = contractOwner;\n', '        contractOwner = newOwner;\n', '        OwnershipTransfer(oldOwner,newOwner);\n', '    }\n', '}\n', '\n', 'contract Claimable is Ownable {\n', '\n', '    address public pendingOwner;\n', '\n', '    event PendingOwnershipTransfer(address _from, address _to);\n', '\n', '    modifier onlyPendingOwner(){\n', '        require(msg.sender == pendingOwner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        pendingOwner = newOwner;\n', '        PendingOwnershipTransfer(contractOwner,pendingOwner);\n', '    }\n', '\n', '    function claimOwnership() onlyPendingOwner {\n', '        address oldOwner = contractOwner;\n', '        contractOwner = pendingOwner;\n', '        pendingOwner = 0x0;\n', '        OwnershipTransfer(oldOwner,contractOwner);\n', '    }\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 amount) returns (bool result);\n', '\n', '    event Transfer(address _from, address _to, uint256 amount);\n', '}\n', '\n', 'contract TrueVeganCoin is ERC20Basic {\n', '\n', '    string public tokenName = "True Vegan Coin";  \n', '    string public tokenSymbol = "TVC"; \n', '\n', '    uint256 public constant decimals = 18;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    function TrueVeganCoin() {\n', '        totalSupply = 55 * (10**6) * 10**decimals; // 55 millions\n', '        balances[msg.sender] += totalSupply;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transfer(address _to, uint256 amount) returns (bool result) {\n', '        require(amount > 0);\n', '        require(balances[msg.sender] >= amount);\n', '        balances[msg.sender] -= amount;\n', '        balances[_to] += amount;\n', '        Transfer(msg.sender, _to, amount);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract TrueVeganCoinPresale is Claimable {\n', '    using SafeMath for uint256;\n', '\n', '    address public tvcEthFund = 0xeD89922D1Fe9e5ad9B997Ef315a4A14ba7b090CD;\n', '\n', '    TrueVeganCoin public tvc = TrueVeganCoin(0xC645AEAAa073D73254a49156E69B3E16bb3A25e4);\n', '\n', '    uint256 public totalTokenSupply = 55 * 10**6 * 10**tvc.decimals(); \n', '    uint256 public currentTokenSupply = totalTokenSupply;\n', '\n', '    uint256 public tokenExchangeRate = 1300; // token per eth\n', '\n', '    uint256 public saleStartUnixTime = 1503100799; // Friday, 18-Aug-17 23:59:59 UTC\n', '    uint256 public saleEndUnixTime = 1506816001; // Sunday, 01-Oct-17 00:00:01 UTC\n', '\n', '    bool public saleIsClosed = false;\n', '\n', '    event PresaleEntry(address buyer, uint256 tokens);\n', '    event PresaleClosed(uint256 soldTokens, uint256 amountRaised);\n', '\n', '    function TrueVeganCoinPresale() {\n', '        contractOwner = msg.sender;\n', '    }\n', '\n', '    function () payable {\n', '        assert(block.timestamp >= saleStartUnixTime);\n', '        assert(block.timestamp < saleEndUnixTime);\n', '        require(msg.value > 0);\n', '        require(!saleIsClosed);\n', '\n', '        uint256 tokens = msg.value.mul(tokenExchangeRate);\n', '\n', '        assert(currentTokenSupply - tokens >= 0);\n', '        currentTokenSupply -= tokens;\n', '\n', '        if (!tvc.transfer(msg.sender,tokens)) {\n', '            revert();\n', '        }\n', '\n', '        PresaleEntry(msg.sender,tokens);\n', '    }\n', '\n', '    function endSale() onlyOwner {\n', '        assert(block.timestamp > saleEndUnixTime || currentTokenSupply == 0);\n', '        assert(!saleIsClosed);\n', '\n', '        saleIsClosed = true;\n', '        uint256 amountRaised = this.balance;\n', '        uint256 tokenSold = totalTokenSupply - currentTokenSupply;\n', '\n', '        if (!tvcEthFund.send(amountRaised)) {\n', '            revert();\n', '        }\n', '        PresaleClosed(tokenSold, amountRaised);\n', '    }\n', '\n', '\n', '    function claimUnsoldCoins() onlyOwner {\n', '        assert(block.timestamp > saleEndUnixTime);\n', '        assert(saleIsClosed);\n', '        uint256 amount = currentTokenSupply;\n', '        currentTokenSupply = 0;\n', '        // send eventually unsold tokens to contract owner\n', '        if (!tvc.transfer(contractOwner,amount)) {\n', '            revert();\n', '        }\n', '    }\n', '    \n', '}']