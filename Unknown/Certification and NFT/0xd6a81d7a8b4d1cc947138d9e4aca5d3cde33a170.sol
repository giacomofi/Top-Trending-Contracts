['pragma solidity ^0.4.8;\n', '\n', '// The implementation for the Credo ICO smart contract was inspired by\n', '// the Ethereum token creation tutorial, the FirstBlood token, and the BAT token.\n', '\n', '///////////////\n', '// SAFE MATH //\n', '///////////////\n', '\n', 'contract SafeMath {\n', '\n', '    function assert(bool assertion) internal {\n', '        if (!assertion) {\n', '            throw;\n', '        }\n', '    }      // assert no longer needed once solidity is on 0.4.10\n', '\n', '    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x + y;\n', '      assert((z >= x) && (z >= y));\n', '      return z;\n', '    }\n', '\n', '    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\n', '      assert(x >= y);\n', '      uint256 z = x - y;\n', '      return z;\n', '    }\n', '\n', '    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x * y;\n', '      assert((x == 0)||(z/x == y));\n', '      return z;\n', '    }\n', '\n', '}\n', '\n', '////////////////////\n', '// STANDARD TOKEN //\n', '////////////////////\n', '\n', 'contract Token {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '/*  ERC 20 token */\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '      if (balances[msg.sender] >= _value && _value > 0) {\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', '/////////////////////\n', '// CREDO ICO TOKEN //\n', '/////////////////////\n', '\n', 'contract CredoIco is StandardToken, SafeMath {\n', '    // Descriptive properties\n', '    string public constant name = "Credo ICO Token";\n', '    string public constant symbol = "CREDOICO";\n', '    uint256 public constant decimals = 18;\n', '    string public version = "1.0";\n', '\n', '    // Account for ether proceed.\n', '    address public etherProceedsAccount;\n', '\n', '    // These params specify the start, end, min, and max of the sale.\n', '    bool public isFinalized;\n', '    uint256 public fundingStartBlock;\n', '    uint256 public fundingEndBlock;\n', '\n', '    uint256 public constant tokenCreationCap =  375200000 * 10**decimals;\n', '    uint256 public constant tokenCreationMin =  938000 * 10**decimals;\n', '\n', '    // Setting the exchange rate for the first part of the ICO.\n', '    uint256 public constant credoEthExchangeRate = 3752;\n', '\n', '    // Events for logging refunds and token creation.\n', '    event LogRefund(address indexed _to, uint256 _value);\n', '    event CreateCredoIco(address indexed _to, uint256 _value);\n', '\n', '    // constructor\n', '    function CredoIco(address _etherProceedsAccount, uint256 _fundingStartBlock, uint256 _fundingEndBlock)\n', '    {\n', '      isFinalized                    = false;\n', '      etherProceedsAccount           = _etherProceedsAccount;\n', '      fundingStartBlock              = _fundingStartBlock;\n', '      fundingEndBlock                = _fundingEndBlock;\n', '      totalSupply                    = 0;\n', '    }\n', '\n', '    function createTokens() payable external {\n', '      if (isFinalized) throw;\n', '      if (block.number < fundingStartBlock) throw;\n', '      if (block.number > fundingEndBlock) throw;\n', '      if (msg.value == 0) throw;\n', '\n', '      uint256 tokens = safeMult(msg.value, credoEthExchangeRate);\n', '      uint256 checkedSupply = safeAdd(totalSupply, tokens);\n', '\n', '      if (tokenCreationCap < checkedSupply) throw;\n', '\n', '      totalSupply = checkedSupply;\n', '      balances[msg.sender] += tokens;\n', '      CreateCredoIco(msg.sender, tokens);\n', '    }\n', '\n', '    function finalize() external {\n', '      if (isFinalized) throw;\n', '      if (msg.sender != etherProceedsAccount) throw;\n', '      if (totalSupply < tokenCreationMin) throw;\n', '      if (block.number <= fundingEndBlock && totalSupply != tokenCreationCap) throw;\n', '\n', '      isFinalized = true;\n', '\n', '      if (!etherProceedsAccount.send(this.balance)) throw;\n', '    }\n', '\n', '    function refund() external {\n', '      if (isFinalized) throw;\n', '      if (block.number <= fundingEndBlock) throw;\n', '      if (totalSupply >= tokenCreationMin) throw;\n', '      uint256 credoVal = balances[msg.sender];\n', '      if (credoVal == 0) throw;\n', '      balances[msg.sender] = 0;\n', '      totalSupply = safeSubtract(totalSupply, credoVal);\n', '      uint256 ethVal = credoVal / credoEthExchangeRate;\n', '      LogRefund(msg.sender, ethVal);\n', '      if (!msg.sender.send(ethVal)) throw;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.8;\n', '\n', '// The implementation for the Credo ICO smart contract was inspired by\n', '// the Ethereum token creation tutorial, the FirstBlood token, and the BAT token.\n', '\n', '///////////////\n', '// SAFE MATH //\n', '///////////////\n', '\n', 'contract SafeMath {\n', '\n', '    function assert(bool assertion) internal {\n', '        if (!assertion) {\n', '            throw;\n', '        }\n', '    }      // assert no longer needed once solidity is on 0.4.10\n', '\n', '    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x + y;\n', '      assert((z >= x) && (z >= y));\n', '      return z;\n', '    }\n', '\n', '    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\n', '      assert(x >= y);\n', '      uint256 z = x - y;\n', '      return z;\n', '    }\n', '\n', '    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x * y;\n', '      assert((x == 0)||(z/x == y));\n', '      return z;\n', '    }\n', '\n', '}\n', '\n', '////////////////////\n', '// STANDARD TOKEN //\n', '////////////////////\n', '\n', 'contract Token {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '/*  ERC 20 token */\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '      if (balances[msg.sender] >= _value && _value > 0) {\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', '/////////////////////\n', '// CREDO ICO TOKEN //\n', '/////////////////////\n', '\n', 'contract CredoIco is StandardToken, SafeMath {\n', '    // Descriptive properties\n', '    string public constant name = "Credo ICO Token";\n', '    string public constant symbol = "CREDOICO";\n', '    uint256 public constant decimals = 18;\n', '    string public version = "1.0";\n', '\n', '    // Account for ether proceed.\n', '    address public etherProceedsAccount;\n', '\n', '    // These params specify the start, end, min, and max of the sale.\n', '    bool public isFinalized;\n', '    uint256 public fundingStartBlock;\n', '    uint256 public fundingEndBlock;\n', '\n', '    uint256 public constant tokenCreationCap =  375200000 * 10**decimals;\n', '    uint256 public constant tokenCreationMin =  938000 * 10**decimals;\n', '\n', '    // Setting the exchange rate for the first part of the ICO.\n', '    uint256 public constant credoEthExchangeRate = 3752;\n', '\n', '    // Events for logging refunds and token creation.\n', '    event LogRefund(address indexed _to, uint256 _value);\n', '    event CreateCredoIco(address indexed _to, uint256 _value);\n', '\n', '    // constructor\n', '    function CredoIco(address _etherProceedsAccount, uint256 _fundingStartBlock, uint256 _fundingEndBlock)\n', '    {\n', '      isFinalized                    = false;\n', '      etherProceedsAccount           = _etherProceedsAccount;\n', '      fundingStartBlock              = _fundingStartBlock;\n', '      fundingEndBlock                = _fundingEndBlock;\n', '      totalSupply                    = 0;\n', '    }\n', '\n', '    function createTokens() payable external {\n', '      if (isFinalized) throw;\n', '      if (block.number < fundingStartBlock) throw;\n', '      if (block.number > fundingEndBlock) throw;\n', '      if (msg.value == 0) throw;\n', '\n', '      uint256 tokens = safeMult(msg.value, credoEthExchangeRate);\n', '      uint256 checkedSupply = safeAdd(totalSupply, tokens);\n', '\n', '      if (tokenCreationCap < checkedSupply) throw;\n', '\n', '      totalSupply = checkedSupply;\n', '      balances[msg.sender] += tokens;\n', '      CreateCredoIco(msg.sender, tokens);\n', '    }\n', '\n', '    function finalize() external {\n', '      if (isFinalized) throw;\n', '      if (msg.sender != etherProceedsAccount) throw;\n', '      if (totalSupply < tokenCreationMin) throw;\n', '      if (block.number <= fundingEndBlock && totalSupply != tokenCreationCap) throw;\n', '\n', '      isFinalized = true;\n', '\n', '      if (!etherProceedsAccount.send(this.balance)) throw;\n', '    }\n', '\n', '    function refund() external {\n', '      if (isFinalized) throw;\n', '      if (block.number <= fundingEndBlock) throw;\n', '      if (totalSupply >= tokenCreationMin) throw;\n', '      uint256 credoVal = balances[msg.sender];\n', '      if (credoVal == 0) throw;\n', '      balances[msg.sender] = 0;\n', '      totalSupply = safeSubtract(totalSupply, credoVal);\n', '      uint256 ethVal = credoVal / credoEthExchangeRate;\n', '      LogRefund(msg.sender, ethVal);\n', '      if (!msg.sender.send(ethVal)) throw;\n', '    }\n', '\n', '}']
