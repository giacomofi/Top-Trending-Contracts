['pragma solidity ^0.4.13;\n', '\n', 'contract Calculator {\n', '    function getAmount(uint value) constant returns (uint);\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract Sale is Ownable {\n', '\n', '    //responsible for getting token amount\n', '    Calculator calculator;\n', '\n', '    //which token should we sell\n', '    ERC20 token;\n', '\n', '    // who sells his tokens\n', '    address tokenSeller;\n', '\n', '    uint256 public minimalTokens = 100000000000;\n', '\n', '    /**\n', '     * event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param value weis paid for purchase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount);\n', '\n', '    function Sale(address tokenAddress, address calculatorAddress) {\n', '        tokenSeller = msg.sender;\n', '        token = ERC20(tokenAddress);\n', '        setCalculatorAddress(calculatorAddress);\n', '    }\n', '\n', '    function () payable {\n', '        buyTokens();\n', '    }\n', '\n', '    function buyTokens() payable {\n', '        uint256 weiAmount = msg.value;\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = calculator.getAmount(weiAmount);\n', '        assert(tokens >= minimalTokens);\n', '\n', '        token.transferFrom(tokenSeller, msg.sender, tokens);\n', '        TokenPurchase(msg.sender, weiAmount, tokens);\n', '    }\n', '\n', '    function setTokenSeller(address newTokenSeller) onlyOwner {\n', '        tokenSeller = newTokenSeller;\n', '    }\n', '\n', '    function setCalculatorAddress(address calculatorAddress) onlyOwner {\n', '        calculator = Calculator(calculatorAddress);\n', '    }\n', '\n', '    function setMinimalTokens(uint256 _minimalTokens) onlyOwner {\n', '        minimalTokens = _minimalTokens;\n', '    }\n', '\n', '    function withdraw(address beneficiary, uint amount) onlyOwner {\n', '        require(beneficiary != 0x0);\n', '\n', '        beneficiary.transfer(amount);\n', '    }\n', '}']
['pragma solidity ^0.4.13;\n', '\n', 'contract Calculator {\n', '    function getAmount(uint value) constant returns (uint);\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract Sale is Ownable {\n', '\n', '    //responsible for getting token amount\n', '    Calculator calculator;\n', '\n', '    //which token should we sell\n', '    ERC20 token;\n', '\n', '    // who sells his tokens\n', '    address tokenSeller;\n', '\n', '    uint256 public minimalTokens = 100000000000;\n', '\n', '    /**\n', '     * event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param value weis paid for purchase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount);\n', '\n', '    function Sale(address tokenAddress, address calculatorAddress) {\n', '        tokenSeller = msg.sender;\n', '        token = ERC20(tokenAddress);\n', '        setCalculatorAddress(calculatorAddress);\n', '    }\n', '\n', '    function () payable {\n', '        buyTokens();\n', '    }\n', '\n', '    function buyTokens() payable {\n', '        uint256 weiAmount = msg.value;\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = calculator.getAmount(weiAmount);\n', '        assert(tokens >= minimalTokens);\n', '\n', '        token.transferFrom(tokenSeller, msg.sender, tokens);\n', '        TokenPurchase(msg.sender, weiAmount, tokens);\n', '    }\n', '\n', '    function setTokenSeller(address newTokenSeller) onlyOwner {\n', '        tokenSeller = newTokenSeller;\n', '    }\n', '\n', '    function setCalculatorAddress(address calculatorAddress) onlyOwner {\n', '        calculator = Calculator(calculatorAddress);\n', '    }\n', '\n', '    function setMinimalTokens(uint256 _minimalTokens) onlyOwner {\n', '        minimalTokens = _minimalTokens;\n', '    }\n', '\n', '    function withdraw(address beneficiary, uint amount) onlyOwner {\n', '        require(beneficiary != 0x0);\n', '\n', '        beneficiary.transfer(amount);\n', '    }\n', '}']
