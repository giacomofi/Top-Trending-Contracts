['pragma solidity ^0.4.11;\n', '\n', 'library SafeMath {\n', '    function mul(uint a, uint b) internal returns (uint) {\n', '        uint c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint a, uint b) internal returns (uint) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint a, uint b) internal returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint a, uint b) internal returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '}\n', '\n', '/// @dev `Owned` is a base level contract that assigns an `owner` that can be\n', '///  later changed\n', 'contract Owned {\n', '\n', '    /// @dev `owner` is the only address that can call a function with this\n', '    /// modifier\n', '    modifier onlyOwner() {\n', '        if(msg.sender != owner) throw;\n', '        _;\n', '    }\n', '\n', '    address public owner;\n', '\n', '    /// @notice The Constructor assigns the message sender to be `owner`\n', '    function Owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    address public newOwner;\n', '\n', '    /// @notice `owner` can step down and assign some other address to this role\n', '    /// @param _newOwner The address of the new owner. 0x0 can be used to create\n', '    ///  an unowned neutral vault, however that cannot be undone\n', '    function changeOwner(address _newOwner) onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '\n', '    function acceptOwnership() {\n', '        if (msg.sender == newOwner) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', 'contract ERC20Token {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', 'contract Controlled {\n', '    /// @notice The address of the controller is the only address that can call\n', '    ///  a function with this modifier\n', '    modifier onlyController { if (msg.sender != controller) throw; _; }\n', '\n', '    address public controller;\n', '\n', '    function Controlled() { controller = msg.sender;}\n', '\n', '    /// @notice Changes the controller of the contract\n', '    /// @param _newController The new controller of the contract\n', '    function changeController(address _newController) onlyController {\n', '        controller = _newController;\n', '    }\n', '}\n', '\n', 'contract StandardToken is ERC20Token ,Controlled{\n', '\n', '    bool public showValue=true;\n', '\n', '    // Flag that determines if the token is transferable or not.\n', '    bool public transfersEnabled;\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '\n', '        if(!transfersEnabled) throw;\n', '\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '\n', '        if(!transfersEnabled) throw;\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        if(!showValue)\n', '        return 0;\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        if(!transfersEnabled) throw;\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        if(!transfersEnabled) throw;\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /// @notice Enables token holders to transfer their tokens freely if true\n', '    /// @param _transfersEnabled True if transfers are allowed in the clone\n', '    function enableTransfers(bool _transfersEnabled) onlyController {\n', '        transfersEnabled = _transfersEnabled;\n', '    }\n', '    function enableShowValue(bool _showValue) onlyController {\n', '        showValue = _showValue;\n', '    }\n', '\n', '    function generateTokens(address _owner, uint _amount\n', '    ) onlyController returns (bool) {\n', '        uint curTotalSupply = totalSupply;\n', '        if (curTotalSupply + _amount < curTotalSupply) throw; // Check for overflow\n', '        totalSupply=curTotalSupply + _amount;\n', '\n', '        balances[_owner]+=_amount;\n', '\n', '        Transfer(0, _owner, _amount);\n', '        return true;\n', '    }\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract MiniMeTokenSimple is StandardToken {\n', '\n', '    string public name;                //The Token&#39;s name: e.g. DigixDAO Tokens\n', '    uint8 public decimals;             //Number of decimals of the smallest unit\n', '    string public symbol;              //An identifier: e.g. REP\n', '    string public version = &#39;MMT_0.1&#39;; //An arbitrary versioning scheme\n', '\n', '\n', '    // `parentToken` is the Token address that was cloned to produce this token;\n', '    //  it will be 0x0 for a token that was not cloned\n', '    address public parentToken;\n', '\n', '    // `parentSnapShotBlock` is the block number from the Parent Token that was\n', '    //  used to determine the initial distribution of the Clone Token\n', '    uint public parentSnapShotBlock;\n', '\n', '    // `creationBlock` is the block number that the Clone Token was created\n', '    uint public creationBlock;\n', '\n', '    // The factory used to create new clone tokens\n', '    address public tokenFactory;\n', '\n', '    ////////////////\n', '    // Constructor\n', '    ////////////////\n', '\n', '    /// @notice Constructor to create a MiniMeTokenSimple\n', '    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\n', '    ///  will create the Clone token contracts, the token factory needs to be\n', '    ///  deployed first\n', '    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\n', '    ///  new token\n', '    /// @param _parentSnapShotBlock Block of the parent token that will\n', '    ///  determine the initial distribution of the clone token, set to 0 if it\n', '    ///  is a new token\n', '    /// @param _tokenName Name of the new token\n', '    /// @param _decimalUnits Number of decimals of the new token\n', '    /// @param _tokenSymbol Token Symbol for the new token\n', '    /// @param _transfersEnabled If true, tokens will be able to be transferred\n', '    function MiniMeTokenSimple(\n', '    address _tokenFactory,\n', '    address _parentToken,\n', '    uint _parentSnapShotBlock,\n', '    string _tokenName,\n', '    uint8 _decimalUnits,\n', '    string _tokenSymbol,\n', '    bool _transfersEnabled\n', '    ) {\n', '        tokenFactory = _tokenFactory;\n', '        name = _tokenName;                                 // Set the name\n', '        decimals = _decimalUnits;                          // Set the decimals\n', '        symbol = _tokenSymbol;                             // Set the symbol\n', '        parentToken = _parentToken;\n', '        parentSnapShotBlock = _parentSnapShotBlock;\n', '        transfersEnabled = _transfersEnabled;\n', '        creationBlock = block.number;\n', '    }\n', '    //////////\n', '    // Safety Methods\n', '    //////////\n', '\n', '    /// @notice This method can be used by the controller to extract mistakenly\n', '    ///  sent tokens to this contract.\n', '    /// @param _token The address of the token contract that you want to recover\n', '    ///  set to 0 in case you want to extract ether.\n', '    function claimTokens(address _token) onlyController {\n', '        if (_token == 0x0) {\n', '            controller.transfer(this.balance);\n', '            return;\n', '        }\n', '\n', '        ERC20Token token = ERC20Token(_token);\n', '        uint balance = token.balanceOf(this);\n', '        token.transfer(controller, balance);\n', '        ClaimedTokens(_token, controller, balance);\n', '    }\n', '\n', '    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n', '\n', '}\n', '\n', '\n', 'contract PFCContribution is Owned {\n', '\n', '    using SafeMath for uint256;\n', '    MiniMeTokenSimple public PFC;\n', '    uint256 public ratio=25000;\n', '\n', '    uint256 public constant MIN_FUND = (0.001 ether);\n', '\n', '    uint256 public startTime=0 ;\n', '    uint256 public endTime =0;\n', '    uint256 public finalizedBlock=0;\n', '    uint256 public finalizedTime=0;\n', '\n', '    bool public isFinalize = false;\n', '\n', '    uint256 public totalContributedETH = 0;\n', '    uint256 public totalTokenSaled=0;\n', '\n', '    uint256 public MaxEth=15000 ether;\n', '\n', '\n', '    address public pfcController;\n', '    address public destEthFoundation;\n', '\n', '    bool public paused;\n', '\n', '    modifier initialized() {\n', '        require(address(PFC) != 0x0);\n', '        _;\n', '    }\n', '\n', '    modifier contributionOpen() {\n', '        require(time() >= startTime &&\n', '        time() <= endTime &&\n', '        finalizedBlock == 0 &&\n', '        address(PFC) != 0x0);\n', '        _;\n', '    }\n', '\n', '    modifier notPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    function PFCCContribution() {\n', '        paused = false;\n', '    }\n', '\n', '\n', '    /// @notice This method should be called by the owner before the contribution\n', '    ///  period starts This initializes most of the parameters\n', '    /// @param _pfc Address of the PFC token contract\n', '    /// @param _pfcController Token controller for the PFC that will be transferred after\n', '    ///  the contribution finalizes.\n', '    /// @param _startTime Time when the contribution period starts\n', '    /// @param _endTime The time that the contribution period ends\n', '    /// @param _destEthFoundation Destination address where the contribution ether is sent\n', '    function initialize(\n', '    address _pfc,\n', '    address _pfcController,\n', '    uint256 _startTime,\n', '    uint256 _endTime,\n', '    address _destEthFoundation,\n', '    uint256 _maxEth\n', '    ) public onlyOwner {\n', '        // Initialize only once\n', '        require(address(PFC) == 0x0);\n', '\n', '        PFC = MiniMeTokenSimple(_pfc);\n', '        require(PFC.totalSupply() == 0);\n', '        require(PFC.controller() == address(this));\n', '        require(PFC.decimals() == 18);  // Same amount of decimals as ETH\n', '\n', '        startTime = _startTime;\n', '        endTime = _endTime;\n', '\n', '        assert(startTime < endTime);\n', '\n', '        require(_pfcController != 0x0);\n', '        pfcController = _pfcController;\n', '\n', '        require(_destEthFoundation != 0x0);\n', '        destEthFoundation = _destEthFoundation;\n', '\n', '        require(_maxEth >1 ether);\n', '        MaxEth=_maxEth;\n', '    }\n', '\n', '    /// @notice If anybody sends Ether directly to this contract, consider he is\n', '    ///  getting PFCs.\n', '    function () public payable notPaused {\n', '\n', '        if(totalContributedETH>=MaxEth) throw;\n', '        proxyPayment(msg.sender);\n', '    }\n', '\n', '\n', '    //////////\n', '    // MiniMe Controller functions\n', '    //////////\n', '\n', '    /// @notice This method will generally be called by the PFC token contract to\n', '    ///  acquire PFCs. Or directly from third parties that want to acquire PFCs in\n', '    ///  behalf of a token holder.\n', '    /// @param _account PFC holder where the PFC will be minted.\n', '    function proxyPayment(address _account) public payable initialized contributionOpen returns (bool) {\n', '        require(_account != 0x0);\n', '\n', '        require( msg.value >= MIN_FUND );\n', '\n', '        uint256 tokenSaling;\n', '        uint256 rValue;\n', '        uint256 t_totalContributedEth=totalContributedETH+msg.value;\n', '        uint256 reFund=0;\n', '        if(t_totalContributedEth>MaxEth) {\n', '            reFund=t_totalContributedEth-MaxEth;\n', '        }\n', '        rValue=msg.value-reFund;\n', '        tokenSaling=rValue.mul(ratio);\n', '        if(reFund>0)\n', '        msg.sender.transfer(reFund);\n', '        assert(PFC.generateTokens(_account,tokenSaling));\n', '        destEthFoundation.transfer(rValue);\n', '\n', '        totalContributedETH +=rValue;\n', '        totalTokenSaled+=tokenSaling;\n', '\n', '        NewSale(msg.sender, rValue,tokenSaling);\n', '    }\n', '\n', '    function setMaxEth(uint256 _maxEth) onlyOwner initialized{\n', '        MaxEth=_maxEth;\n', '    }\n', '\n', '    function setRatio(uint256 _ratio) onlyOwner initialized{\n', '        ratio=_ratio;\n', '    }\n', '\n', '    function issueTokenToAddress(address _account, uint256 _amount) onlyOwner initialized {\n', '\n', '\n', '        assert(PFC.generateTokens(_account, _amount));\n', '\n', '        totalTokenSaled +=_amount;\n', '\n', '        NewIssue(_account, _amount);\n', '\n', '    }\n', '\n', '    function finalize() public onlyOwner initialized {\n', '        require(time() >= startTime);\n', '\n', '        require(finalizedBlock == 0);\n', '\n', '        finalizedBlock = getBlockNumber();\n', '        finalizedTime = now;\n', '\n', '        PFC.changeController(pfcController);\n', '        isFinalize=true;\n', '        Finalized();\n', '    }\n', '\n', '    function time() constant returns (uint) {\n', '        return block.timestamp;\n', '    }\n', '\n', '    //////////\n', '    // Constant functions\n', '    //////////\n', '\n', '    /// @return Total tokens issued in weis.\n', '    function tokensIssued() public constant returns (uint256) {\n', '        return PFC.totalSupply();\n', '    }\n', '\n', '    //////////\n', '    // Testing specific methods\n', '    //////////\n', '\n', '    /// @notice This function is overridden by the test Mocks.\n', '    function getBlockNumber() internal constant returns (uint256) {\n', '        return block.number;\n', '    }\n', '\n', '    //////////\n', '    // Safety Methods\n', '    //////////\n', '\n', '    /// @notice This method can be used by the controller to extract mistakenly\n', '    ///  sent tokens to this contract.\n', '    /// @param _token The address of the token contract that you want to recover\n', '    ///  set to 0 in case you want to extract ether.\n', '    function claimTokens(address _token) public onlyOwner {\n', '        if (PFC.controller() == address(this)) {\n', '            PFC.claimTokens(_token);\n', '        }\n', '        if (_token == 0x0) {\n', '            owner.transfer(this.balance);\n', '            return;\n', '        }\n', '\n', '        ERC20Token token = ERC20Token(_token);\n', '        uint256 balance = token.balanceOf(this);\n', '        token.transfer(owner, balance);\n', '        ClaimedTokens(_token, owner, balance);\n', '    }\n', '\n', '    /// @notice Pauses the contribution if there is any issue\n', '    function pauseContribution() onlyOwner {\n', '        paused = true;\n', '    }\n', '\n', '    /// @notice Resumes the contribution\n', '    function resumeContribution() onlyOwner {\n', '        paused = false;\n', '    }\n', '\n', '    event ClaimedTokens(address indexed _token, address indexed _controller, uint256 _amount);\n', '    event NewSale(address _account, uint256 _amount,uint256 _tokenAmount);\n', '    event NewIssue(address indexed _th, uint256 _amount);\n', '    event Finalized();\n', '}']
['pragma solidity ^0.4.11;\n', '\n', 'library SafeMath {\n', '    function mul(uint a, uint b) internal returns (uint) {\n', '        uint c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint a, uint b) internal returns (uint) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint a, uint b) internal returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint a, uint b) internal returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '}\n', '\n', '/// @dev `Owned` is a base level contract that assigns an `owner` that can be\n', '///  later changed\n', 'contract Owned {\n', '\n', '    /// @dev `owner` is the only address that can call a function with this\n', '    /// modifier\n', '    modifier onlyOwner() {\n', '        if(msg.sender != owner) throw;\n', '        _;\n', '    }\n', '\n', '    address public owner;\n', '\n', '    /// @notice The Constructor assigns the message sender to be `owner`\n', '    function Owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    address public newOwner;\n', '\n', '    /// @notice `owner` can step down and assign some other address to this role\n', '    /// @param _newOwner The address of the new owner. 0x0 can be used to create\n', '    ///  an unowned neutral vault, however that cannot be undone\n', '    function changeOwner(address _newOwner) onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '\n', '    function acceptOwnership() {\n', '        if (msg.sender == newOwner) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', 'contract ERC20Token {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', 'contract Controlled {\n', '    /// @notice The address of the controller is the only address that can call\n', '    ///  a function with this modifier\n', '    modifier onlyController { if (msg.sender != controller) throw; _; }\n', '\n', '    address public controller;\n', '\n', '    function Controlled() { controller = msg.sender;}\n', '\n', '    /// @notice Changes the controller of the contract\n', '    /// @param _newController The new controller of the contract\n', '    function changeController(address _newController) onlyController {\n', '        controller = _newController;\n', '    }\n', '}\n', '\n', 'contract StandardToken is ERC20Token ,Controlled{\n', '\n', '    bool public showValue=true;\n', '\n', '    // Flag that determines if the token is transferable or not.\n', '    bool public transfersEnabled;\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '\n', '        if(!transfersEnabled) throw;\n', '\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '\n', '        if(!transfersEnabled) throw;\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        if(!showValue)\n', '        return 0;\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        if(!transfersEnabled) throw;\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        if(!transfersEnabled) throw;\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /// @notice Enables token holders to transfer their tokens freely if true\n', '    /// @param _transfersEnabled True if transfers are allowed in the clone\n', '    function enableTransfers(bool _transfersEnabled) onlyController {\n', '        transfersEnabled = _transfersEnabled;\n', '    }\n', '    function enableShowValue(bool _showValue) onlyController {\n', '        showValue = _showValue;\n', '    }\n', '\n', '    function generateTokens(address _owner, uint _amount\n', '    ) onlyController returns (bool) {\n', '        uint curTotalSupply = totalSupply;\n', '        if (curTotalSupply + _amount < curTotalSupply) throw; // Check for overflow\n', '        totalSupply=curTotalSupply + _amount;\n', '\n', '        balances[_owner]+=_amount;\n', '\n', '        Transfer(0, _owner, _amount);\n', '        return true;\n', '    }\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract MiniMeTokenSimple is StandardToken {\n', '\n', "    string public name;                //The Token's name: e.g. DigixDAO Tokens\n", '    uint8 public decimals;             //Number of decimals of the smallest unit\n', '    string public symbol;              //An identifier: e.g. REP\n', "    string public version = 'MMT_0.1'; //An arbitrary versioning scheme\n", '\n', '\n', '    // `parentToken` is the Token address that was cloned to produce this token;\n', '    //  it will be 0x0 for a token that was not cloned\n', '    address public parentToken;\n', '\n', '    // `parentSnapShotBlock` is the block number from the Parent Token that was\n', '    //  used to determine the initial distribution of the Clone Token\n', '    uint public parentSnapShotBlock;\n', '\n', '    // `creationBlock` is the block number that the Clone Token was created\n', '    uint public creationBlock;\n', '\n', '    // The factory used to create new clone tokens\n', '    address public tokenFactory;\n', '\n', '    ////////////////\n', '    // Constructor\n', '    ////////////////\n', '\n', '    /// @notice Constructor to create a MiniMeTokenSimple\n', '    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\n', '    ///  will create the Clone token contracts, the token factory needs to be\n', '    ///  deployed first\n', '    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\n', '    ///  new token\n', '    /// @param _parentSnapShotBlock Block of the parent token that will\n', '    ///  determine the initial distribution of the clone token, set to 0 if it\n', '    ///  is a new token\n', '    /// @param _tokenName Name of the new token\n', '    /// @param _decimalUnits Number of decimals of the new token\n', '    /// @param _tokenSymbol Token Symbol for the new token\n', '    /// @param _transfersEnabled If true, tokens will be able to be transferred\n', '    function MiniMeTokenSimple(\n', '    address _tokenFactory,\n', '    address _parentToken,\n', '    uint _parentSnapShotBlock,\n', '    string _tokenName,\n', '    uint8 _decimalUnits,\n', '    string _tokenSymbol,\n', '    bool _transfersEnabled\n', '    ) {\n', '        tokenFactory = _tokenFactory;\n', '        name = _tokenName;                                 // Set the name\n', '        decimals = _decimalUnits;                          // Set the decimals\n', '        symbol = _tokenSymbol;                             // Set the symbol\n', '        parentToken = _parentToken;\n', '        parentSnapShotBlock = _parentSnapShotBlock;\n', '        transfersEnabled = _transfersEnabled;\n', '        creationBlock = block.number;\n', '    }\n', '    //////////\n', '    // Safety Methods\n', '    //////////\n', '\n', '    /// @notice This method can be used by the controller to extract mistakenly\n', '    ///  sent tokens to this contract.\n', '    /// @param _token The address of the token contract that you want to recover\n', '    ///  set to 0 in case you want to extract ether.\n', '    function claimTokens(address _token) onlyController {\n', '        if (_token == 0x0) {\n', '            controller.transfer(this.balance);\n', '            return;\n', '        }\n', '\n', '        ERC20Token token = ERC20Token(_token);\n', '        uint balance = token.balanceOf(this);\n', '        token.transfer(controller, balance);\n', '        ClaimedTokens(_token, controller, balance);\n', '    }\n', '\n', '    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n', '\n', '}\n', '\n', '\n', 'contract PFCContribution is Owned {\n', '\n', '    using SafeMath for uint256;\n', '    MiniMeTokenSimple public PFC;\n', '    uint256 public ratio=25000;\n', '\n', '    uint256 public constant MIN_FUND = (0.001 ether);\n', '\n', '    uint256 public startTime=0 ;\n', '    uint256 public endTime =0;\n', '    uint256 public finalizedBlock=0;\n', '    uint256 public finalizedTime=0;\n', '\n', '    bool public isFinalize = false;\n', '\n', '    uint256 public totalContributedETH = 0;\n', '    uint256 public totalTokenSaled=0;\n', '\n', '    uint256 public MaxEth=15000 ether;\n', '\n', '\n', '    address public pfcController;\n', '    address public destEthFoundation;\n', '\n', '    bool public paused;\n', '\n', '    modifier initialized() {\n', '        require(address(PFC) != 0x0);\n', '        _;\n', '    }\n', '\n', '    modifier contributionOpen() {\n', '        require(time() >= startTime &&\n', '        time() <= endTime &&\n', '        finalizedBlock == 0 &&\n', '        address(PFC) != 0x0);\n', '        _;\n', '    }\n', '\n', '    modifier notPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    function PFCCContribution() {\n', '        paused = false;\n', '    }\n', '\n', '\n', '    /// @notice This method should be called by the owner before the contribution\n', '    ///  period starts This initializes most of the parameters\n', '    /// @param _pfc Address of the PFC token contract\n', '    /// @param _pfcController Token controller for the PFC that will be transferred after\n', '    ///  the contribution finalizes.\n', '    /// @param _startTime Time when the contribution period starts\n', '    /// @param _endTime The time that the contribution period ends\n', '    /// @param _destEthFoundation Destination address where the contribution ether is sent\n', '    function initialize(\n', '    address _pfc,\n', '    address _pfcController,\n', '    uint256 _startTime,\n', '    uint256 _endTime,\n', '    address _destEthFoundation,\n', '    uint256 _maxEth\n', '    ) public onlyOwner {\n', '        // Initialize only once\n', '        require(address(PFC) == 0x0);\n', '\n', '        PFC = MiniMeTokenSimple(_pfc);\n', '        require(PFC.totalSupply() == 0);\n', '        require(PFC.controller() == address(this));\n', '        require(PFC.decimals() == 18);  // Same amount of decimals as ETH\n', '\n', '        startTime = _startTime;\n', '        endTime = _endTime;\n', '\n', '        assert(startTime < endTime);\n', '\n', '        require(_pfcController != 0x0);\n', '        pfcController = _pfcController;\n', '\n', '        require(_destEthFoundation != 0x0);\n', '        destEthFoundation = _destEthFoundation;\n', '\n', '        require(_maxEth >1 ether);\n', '        MaxEth=_maxEth;\n', '    }\n', '\n', '    /// @notice If anybody sends Ether directly to this contract, consider he is\n', '    ///  getting PFCs.\n', '    function () public payable notPaused {\n', '\n', '        if(totalContributedETH>=MaxEth) throw;\n', '        proxyPayment(msg.sender);\n', '    }\n', '\n', '\n', '    //////////\n', '    // MiniMe Controller functions\n', '    //////////\n', '\n', '    /// @notice This method will generally be called by the PFC token contract to\n', '    ///  acquire PFCs. Or directly from third parties that want to acquire PFCs in\n', '    ///  behalf of a token holder.\n', '    /// @param _account PFC holder where the PFC will be minted.\n', '    function proxyPayment(address _account) public payable initialized contributionOpen returns (bool) {\n', '        require(_account != 0x0);\n', '\n', '        require( msg.value >= MIN_FUND );\n', '\n', '        uint256 tokenSaling;\n', '        uint256 rValue;\n', '        uint256 t_totalContributedEth=totalContributedETH+msg.value;\n', '        uint256 reFund=0;\n', '        if(t_totalContributedEth>MaxEth) {\n', '            reFund=t_totalContributedEth-MaxEth;\n', '        }\n', '        rValue=msg.value-reFund;\n', '        tokenSaling=rValue.mul(ratio);\n', '        if(reFund>0)\n', '        msg.sender.transfer(reFund);\n', '        assert(PFC.generateTokens(_account,tokenSaling));\n', '        destEthFoundation.transfer(rValue);\n', '\n', '        totalContributedETH +=rValue;\n', '        totalTokenSaled+=tokenSaling;\n', '\n', '        NewSale(msg.sender, rValue,tokenSaling);\n', '    }\n', '\n', '    function setMaxEth(uint256 _maxEth) onlyOwner initialized{\n', '        MaxEth=_maxEth;\n', '    }\n', '\n', '    function setRatio(uint256 _ratio) onlyOwner initialized{\n', '        ratio=_ratio;\n', '    }\n', '\n', '    function issueTokenToAddress(address _account, uint256 _amount) onlyOwner initialized {\n', '\n', '\n', '        assert(PFC.generateTokens(_account, _amount));\n', '\n', '        totalTokenSaled +=_amount;\n', '\n', '        NewIssue(_account, _amount);\n', '\n', '    }\n', '\n', '    function finalize() public onlyOwner initialized {\n', '        require(time() >= startTime);\n', '\n', '        require(finalizedBlock == 0);\n', '\n', '        finalizedBlock = getBlockNumber();\n', '        finalizedTime = now;\n', '\n', '        PFC.changeController(pfcController);\n', '        isFinalize=true;\n', '        Finalized();\n', '    }\n', '\n', '    function time() constant returns (uint) {\n', '        return block.timestamp;\n', '    }\n', '\n', '    //////////\n', '    // Constant functions\n', '    //////////\n', '\n', '    /// @return Total tokens issued in weis.\n', '    function tokensIssued() public constant returns (uint256) {\n', '        return PFC.totalSupply();\n', '    }\n', '\n', '    //////////\n', '    // Testing specific methods\n', '    //////////\n', '\n', '    /// @notice This function is overridden by the test Mocks.\n', '    function getBlockNumber() internal constant returns (uint256) {\n', '        return block.number;\n', '    }\n', '\n', '    //////////\n', '    // Safety Methods\n', '    //////////\n', '\n', '    /// @notice This method can be used by the controller to extract mistakenly\n', '    ///  sent tokens to this contract.\n', '    /// @param _token The address of the token contract that you want to recover\n', '    ///  set to 0 in case you want to extract ether.\n', '    function claimTokens(address _token) public onlyOwner {\n', '        if (PFC.controller() == address(this)) {\n', '            PFC.claimTokens(_token);\n', '        }\n', '        if (_token == 0x0) {\n', '            owner.transfer(this.balance);\n', '            return;\n', '        }\n', '\n', '        ERC20Token token = ERC20Token(_token);\n', '        uint256 balance = token.balanceOf(this);\n', '        token.transfer(owner, balance);\n', '        ClaimedTokens(_token, owner, balance);\n', '    }\n', '\n', '    /// @notice Pauses the contribution if there is any issue\n', '    function pauseContribution() onlyOwner {\n', '        paused = true;\n', '    }\n', '\n', '    /// @notice Resumes the contribution\n', '    function resumeContribution() onlyOwner {\n', '        paused = false;\n', '    }\n', '\n', '    event ClaimedTokens(address indexed _token, address indexed _controller, uint256 _amount);\n', '    event NewSale(address _account, uint256 _amount,uint256 _tokenAmount);\n', '    event NewIssue(address indexed _th, uint256 _amount);\n', '    event Finalized();\n', '}']
