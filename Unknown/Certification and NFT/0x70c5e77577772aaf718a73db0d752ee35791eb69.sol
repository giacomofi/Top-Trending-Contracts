['pragma solidity ^0.4.13;        \n', '   \n', '  contract CentraAsiaWhiteList { \n', ' \n', '      using SafeMath for uint;  \n', ' \n', '      address public owner;\n', '      uint public operation;\n', '      mapping(uint => address) public operation_address;\n', '      mapping(uint => uint) public operation_amount; \n', '      \n', '   \n', '      // Functions with this modifier can only be executed by the owner\n', '      modifier onlyOwner() {\n', '          if (msg.sender != owner) {\n', '              throw;\n', '          }\n', '          _;\n', '      }\n', '   \n', '      // Constructor\n', '      function CentraAsiaWhiteList() {\n', '          owner = msg.sender; \n', '          operation = 0;         \n', '      }\n', '      \n', '      //default function for crowdfunding\n', '      function() payable {    \n', ' \n', '        if(msg.value < 0) throw;\n', '        if(this.balance > 47000000000000000000000) throw; // 0.1 eth\n', '        if(now > 1505865600)throw; // timestamp 2017.09.20 00:00:00\n', '        \n', '        operation_address[operation] = msg.sender;\n', '        operation_amount[operation] = msg.value;        \n', '        operation = operation.add(1);\n', '      }\n', ' \n', '      //Withdraw money from contract balance to owner\n', '      function withdraw() onlyOwner returns (bool result) {\n', '          owner.send(this.balance);\n', '          return true;\n', '      }\n', '      \n', ' }\n', ' \n', ' /**\n', '   * Math operations with safety checks\n', '   */\n', '  library SafeMath {\n', '    function mul(uint a, uint b) internal returns (uint) {\n', '      uint c = a * b;\n', '      assert(a == 0 || c / a == b);\n', '      return c;\n', '    }\n', ' \n', '    function div(uint a, uint b) internal returns (uint) {\n', '      // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '      uint c = a / b;\n', '      // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '      return c;\n', '    }\n', ' \n', '    function sub(uint a, uint b) internal returns (uint) {\n', '      assert(b <= a);\n', '      return a - b;\n', '    }\n', ' \n', '    function add(uint a, uint b) internal returns (uint) {\n', '      uint c = a + b;\n', '      assert(c >= a);\n', '      return c;\n', '    }\n', ' \n', '    function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '      return a >= b ? a : b;\n', '    }\n', ' \n', '    function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '      return a < b ? a : b;\n', '    }\n', ' \n', '    function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '      return a >= b ? a : b;\n', '    }\n', ' \n', '    function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '      return a < b ? a : b;\n', '    }\n', ' \n', '    function assert(bool assertion) internal {\n', '      if (!assertion) {\n', '        throw;\n', '      }\n', '    }\n', '  }']