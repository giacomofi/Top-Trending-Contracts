['pragma solidity ^0.4.16;\n', '\n', '/// @author Jordi Baylina\n', '/// Auditors: Griff Green & psdev\n', '/// @notice Based on http://hudsonjameson.com/ethereummarriage/\n', '/// License: GNU-3\n', '\n', '/// @dev `Owned` is a base level contract that assigns an `owner` that can be\n', '///  later changed\n', 'contract Owned {\n', '\n', '    /// @dev `owner` is the only address that can call a function with this\n', '    /// modifier\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    address public owner;\n', '\n', '    /// @notice The Constructor assigns the message sender to be `owner`\n', '    function Owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    address public newOwner;\n', '\n', '    /// @notice `owner` can step down and assign some other address to this role\n', '    /// @param _newOwner The address of the new owner\n', '    ///  an unowned neutral vault, however that cannot be undone\n', '    function changeOwner(address _newOwner) onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    /// @notice `newOwner` has to accept the ownership before it is transferred\n', '    ///  Any account or any contract with the ability to call `acceptOwnership`\n', '    ///  can be used to accept ownership of this contract, including a contract\n', '    ///  with no other functions\n', '    function acceptOwnership() {\n', '        if (msg.sender == newOwner) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '\n', '    // This is a general safty function that allows the owner to do a lot\n', '    //  of things in the unlikely event that something goes wrong\n', '    // _dst is the contract being called making this like a 1/1 multisig\n', '    function execute(address _dst, uint _value, bytes _data) onlyOwner {\n', '        _dst.call.value(_value)(_data);\n', '    }\n', '}\n', '\n', '\n', 'contract Marriage is Owned\n', '{\n', '    // Marriage data variables\n', '    string public partner1;\n', '    string public partner2;\n', '    uint public marriageDate;\n', '    string public marriageStatus;\n', '    string public vows;\n', '\n', '    Event[] public majorEvents;\n', '    Message[] public messages;\n', '\n', '    struct Event {\n', '        uint date;\n', '        string name;\n', '        string description;\n', '        string url;\n', '    }\n', '\n', '    struct Message {\n', '        uint date;\n', '        string nameFrom;\n', '        string text;\n', '        string url;\n', '        uint value;\n', '    }\n', '\n', '    modifier areMarried {\n', '        require(sha3(marriageStatus) == sha3("Married"));\n', '        _;\n', '    }\n', '\n', '    //Set Owner\n', '    function Marriage(address _owner) {\n', '        owner = _owner;\n', '    }\n', '\n', '    function numberOfMajorEvents() constant public returns (uint) {\n', '        return majorEvents.length;\n', '    }\n', '\n', '    function numberOfMessages() constant public returns (uint) {\n', '        return messages.length;\n', '    }\n', '\n', '    // Create initial marriage contract\n', '    function createMarriage(\n', '        string _partner1,\n', '        string _partner2,\n', '        string _vows,\n', '        string url) onlyOwner\n', '    {\n', '        require(majorEvents.length == 0);\n', '        partner1 = _partner1;\n', '        partner2 = _partner2;\n', '        marriageDate = now;\n', '        vows = _vows;\n', '        marriageStatus = "Married";\n', '        majorEvents.push(Event(now, "Marriage", vows, url));\n', '        MajorEvent("Marrigage", vows, url);\n', '    }\n', '\n', '    // Set the marriage status if it changes\n', '    function setStatus(string status, string url) onlyOwner\n', '    {\n', '        marriageStatus = status;\n', '        setMajorEvent("Changed Status", status, url);\n', '    }\n', '\n', '    // Set the IPFS hash of the image of the couple\n', '    function setMajorEvent(string name, string description, string url) onlyOwner areMarried\n', '    {\n', '        majorEvents.push(Event(now, name, description, url));\n', '        MajorEvent(name, description, url);\n', '    }\n', '\n', '    function sendMessage(string nameFrom, string text, string url) payable areMarried {\n', '        if (msg.value > 0) {\n', '            owner.transfer(this.balance);\n', '        }\n', '        messages.push(Message(now, nameFrom, text, url, msg.value));\n', '        MessageSent(nameFrom, text, url, msg.value);\n', '    }\n', '\n', '\n', '    // Declare event structure\n', '    event MajorEvent(string name, string description, string url);\n', '    event MessageSent(string name, string description, string url, uint value);\n', '}']