['pragma solidity ^0.4.16;\n', '\n', 'contract BMToken\n', '{\n', '    function totalSupply() constant external returns (uint256);\n', '    function mintTokens(address holder, uint256 amount) external;\n', '}\n', '\n', 'contract BMmkPreICO\n', '{\n', '    function getDataHolders(address holder) external constant returns(uint256);\n', '}\n', '\n', 'contract BMPreICO\n', '{\n', '    function getDataHolders(address holder) external constant returns(uint256);\n', '}\n', '\n', 'contract BMPreICOAffiliateProgramm\n', '{\n', '    function refferalPreICOBonus(address referral) constant external returns (uint256 bonus);\n', '    function partnerPreICOBonus(address partner) constant external returns (uint256 bonus);\n', '}\n', '\n', 'contract BMICOAffiliateProgramm\n', '{\n', '    function add_referral(address referral, string promo, uint256 amount) external returns(address, uint256, uint256);\n', '}\n', '\n', 'contract BM_ICO\n', '{\n', '    BMToken    contractTokens;\n', '    BMmkPreICO contractMKPreICO;\n', '    BMPreICO   contractPreICO;\n', '    BMPreICOAffiliateProgramm contractAffiliatePreICO;\n', '    BMICOAffiliateProgramm contractAffiliateICO;\n', '\n', '    address public owner;\n', '    address public exchangesOwner;\n', '\n', '    mapping (uint8 => uint256)                       public holdersBonus;\n', '    mapping (address => bool)                        public claimedMK;\n', '    mapping (address => bool)                        public claimedPreICO;\n', '\n', '    mapping (uint8 => uint256)                       public partnerBonus;\n', '    mapping (address => bool)                        public claimedPartnerPreICO;\n', '\n', '    uint256 public startDate      = 1505001600; //10.09.2017 00:00 GMT\n', '    uint256 public endDate        = 1507593600; //10.10.2017 00:00 GMT\n', '\n', '    bool isOwnerEmit = false;\n', '\n', '    uint256 public icoTokenSupply = 7*(10**26);\n', '\n', '    mapping (uint8 => uint256) public priceRound;\n', '\n', '    mapping(address => bool) exchanges;\n', '\n', '    function BM_ICO()\n', '    {\n', '        owner          = msg.sender;\n', '        exchangesOwner = address(0xCa92b75B7Ada1B460Eb5C012F1ebAd72c27B19D9);\n', '\n', '        contractTokens          = BMToken(0xf028adee51533b1b47beaa890feb54a457f51e89);\n', '        contractAffiliatePreICO = BMPreICOAffiliateProgramm(0x6203188c0dd1a4607614dbc8af409e91ed46def0);\n', '        contractAffiliateICO    = BMICOAffiliateProgramm(0xbe44459058383729be8247802d4314ea76ca9e5a);\n', '        contractMKPreICO        = BMmkPreICO(0xe9958afac6a3e16d32d3cb62a82f84d3c43c8012);\n', '        contractPreICO          = BMPreICO(0x7600431745bd5bb27315f8376971c81cc8026a78);\n', '\n', '        priceRound[0] = 0.000064 ether; //MK\n', '        priceRound[1] = 0.000071 ether; //PreICO\n', '        priceRound[2] = 0.000107 ether; //1 round 10.09.2017-20.09.2017\n', '        priceRound[3] = 0.000114 ether; //2 round 20.09.2017-25.09.2017\n', '        priceRound[4] = 0.000121 ether; //3 round 25.09.2017-30.09.2017\n', '        priceRound[5] = 0.000143 ether; //4 round 30.09.2017-10.10.2017\n', '    }\n', '\n', '    modifier isOwner()\n', '    {\n', '        assert(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function changeOwner(address new_owner) isOwner {\n', '        assert(new_owner!=address(0x0));\n', '        assert(new_owner!=address(this));\n', '        owner = new_owner;\n', '    }\n', '\n', '    function addExchange(address new_exchange) isOwner\n', '    {\n', '        assert(new_exchange!=address(0x0));\n', '        assert(new_exchange!=address(this));\n', '        assert(exchanges[new_exchange]==false);\n', '        exchanges[new_exchange] = true;\n', '    }\n', '\n', '    function cast(uint256 x) constant internal returns (uint128 z)\n', '    {\n', '        assert((z = uint128(x)) == x);\n', '    }\n', '\n', '    function etherToTokens(uint256 etherAmount, uint256 tokenPrice) constant returns(uint256)\n', '    {\n', '        return uint256(cast((etherAmount * (10**18) + cast(tokenPrice) / 2) / cast(tokenPrice)));\n', '    }\n', '\n', '    function tokensToEther(uint256 tokenAmount, uint256 tokenPrice) constant returns(uint256)\n', '    {\n', '        return uint256(cast((tokenPrice * cast(tokenAmount) + (10**18) / 2) / (10**18)));\n', '    }\n', '\n', '    function periodNow() constant returns (uint8 period) {\n', '        if(now >= 1505001600 && now < 1505865600){\n', '            period = 2;\n', '        }\n', '        else if(now >= 1505865600 && now < 1506297600){\n', '            period = 3;\n', '        }\n', '        else if(now >= 1506297600 && now < 1506729600){\n', '            period = 4;\n', '        }\n', '        else if(now >= 1506729600 && now < 1507593600){\n', '            period = 5;\n', '        }\n', '        else {\n', '            period = 6;\n', '        }\n', '    }\n', '\n', '    function claim_PreICOTokens(address holder)\n', '    {\n', '        uint256 reward = 0;\n', '\n', '        if(claimedMK[holder]==false){\n', '            reward = etherToTokens(contractMKPreICO.getDataHolders(holder), priceRound[0]);\n', '            icoTokenSupply -= reward;\n', '            claimedMK[holder] = true;\n', '        }\n', '\n', '        if(claimedPreICO[holder]==false){\n', '            uint256 preico_reward = etherToTokens(contractPreICO.getDataHolders(holder), priceRound[1]);\n', '            reward += preico_reward;\n', '            icoTokenSupply -= preico_reward;\n', '            reward += etherToTokens(contractAffiliatePreICO.refferalPreICOBonus(holder), priceRound[1]);\n', '            claimedPreICO[holder] = true;\n', '        }\n', '\n', '        assert(reward>0);\n', '\n', '        if(exchanges[holder] == true)\n', '        {\n', '            contractTokens.mintTokens(exchangesOwner, reward);\n', '        }\n', '        else\n', '        {\n', '            contractTokens.mintTokens(holder, reward);\n', '        }\n', '    }\n', '\n', '    function claim_partnerPreICOTokens(address partner)\n', '    {\n', '        assert(claimedPartnerPreICO[partner]==false);\n', '        uint256 reward = etherToTokens(contractAffiliatePreICO.partnerPreICOBonus(partner), priceRound[1]);\n', '\n', '        assert(reward>0);\n', '\n', '        contractTokens.mintTokens(partner, reward);\n', '        claimedPartnerPreICO[partner] = true;\n', '    }\n', '\n', '    function buy(string promo) payable\n', '    {\n', '        uint8 period_number = periodNow();\n', '        assert(exchanges[msg.sender]==false);\n', '        assert(period_number >= 2 && period_number <= 5);\n', '        assert(icoTokenSupply > 0);\n', '        assert(msg.value >= 0.1 ether);\n', '\n', '        uint256 amount_invest = msg.value;\n', '        uint256 reward = etherToTokens(amount_invest, priceRound[period_number]);\n', '\n', '        if(reward > icoTokenSupply)\n', '        {\n', '            reward = icoTokenSupply;\n', '            amount_invest = tokensToEther(reward, priceRound[period_number]);\n', '            assert(msg.value > amount_invest);\n', '            msg.sender.transfer(msg.value - amount_invest);\n', '        }\n', '\n', '        icoTokenSupply -= reward;\n', '\n', '        if (bytes(promo).length > 0)\n', '\t\t{\n', '            var (partner_address, partner_bonus, referral_bonus) = contractAffiliateICO.add_referral(msg.sender, promo, amount_invest);\n', '\n', '            if(partner_bonus > 0 && partner_address != address(0x0))\n', '            {\n', '                uint256 p_bonus = etherToTokens(partner_bonus, priceRound[period_number]);\n', '                partnerBonus[period_number] += p_bonus;\n', '                contractTokens.mintTokens(partner_address, p_bonus);\n', '            }\n', '\n', '            if(referral_bonus > 0)\n', '            {\n', '                uint256 bonus = etherToTokens(referral_bonus, priceRound[period_number]);\n', '                holdersBonus[period_number] += bonus;\n', '                reward += bonus;\n', '            }\n', '        }\n', '        contractTokens.mintTokens(msg.sender, reward);\n', '    }\n', '\n', '    function () payable\n', '    {\n', '        buy(&#39;&#39;);\n', '    }\n', '\n', '    function collect() isOwner\n', '    {\n', '        assert(this.balance > 0);\n', '        msg.sender.transfer(this.balance);\n', '    }\n', '\n', '    function ownerEmit() isOwner\n', '    {\n', '        assert(now > endDate);\n', '        assert(isOwnerEmit==false);\n', '\n', '        uint256 users_emit = ((7*(10**26))-icoTokenSupply); // 700 000 000\n', '        // ico amount   - 70% supply\n', '        // funds amount - 30% supply\n', '        // funds amount = ico amount * 3 / 7\n', '        uint256 dev_emit = users_emit * 30 / 70;\n', '\n', '        // contractTokens.totalSupply() = users_emit + partner_rewards + users_bouns\n', '        // uint256 partner_and_bouns_rewards = contractTokens.totalSupply() - users_emit;\n', '        // dev_emit = dev_emit - partner_and_bouns_rewards;\n', '        dev_emit = dev_emit + users_emit - contractTokens.totalSupply();\n', '\n', '        isOwnerEmit = true;\n', '        contractTokens.mintTokens(msg.sender, dev_emit);\n', '    }\n', '}']
['pragma solidity ^0.4.16;\n', '\n', 'contract BMToken\n', '{\n', '    function totalSupply() constant external returns (uint256);\n', '    function mintTokens(address holder, uint256 amount) external;\n', '}\n', '\n', 'contract BMmkPreICO\n', '{\n', '    function getDataHolders(address holder) external constant returns(uint256);\n', '}\n', '\n', 'contract BMPreICO\n', '{\n', '    function getDataHolders(address holder) external constant returns(uint256);\n', '}\n', '\n', 'contract BMPreICOAffiliateProgramm\n', '{\n', '    function refferalPreICOBonus(address referral) constant external returns (uint256 bonus);\n', '    function partnerPreICOBonus(address partner) constant external returns (uint256 bonus);\n', '}\n', '\n', 'contract BMICOAffiliateProgramm\n', '{\n', '    function add_referral(address referral, string promo, uint256 amount) external returns(address, uint256, uint256);\n', '}\n', '\n', 'contract BM_ICO\n', '{\n', '    BMToken    contractTokens;\n', '    BMmkPreICO contractMKPreICO;\n', '    BMPreICO   contractPreICO;\n', '    BMPreICOAffiliateProgramm contractAffiliatePreICO;\n', '    BMICOAffiliateProgramm contractAffiliateICO;\n', '\n', '    address public owner;\n', '    address public exchangesOwner;\n', '\n', '    mapping (uint8 => uint256)                       public holdersBonus;\n', '    mapping (address => bool)                        public claimedMK;\n', '    mapping (address => bool)                        public claimedPreICO;\n', '\n', '    mapping (uint8 => uint256)                       public partnerBonus;\n', '    mapping (address => bool)                        public claimedPartnerPreICO;\n', '\n', '    uint256 public startDate      = 1505001600; //10.09.2017 00:00 GMT\n', '    uint256 public endDate        = 1507593600; //10.10.2017 00:00 GMT\n', '\n', '    bool isOwnerEmit = false;\n', '\n', '    uint256 public icoTokenSupply = 7*(10**26);\n', '\n', '    mapping (uint8 => uint256) public priceRound;\n', '\n', '    mapping(address => bool) exchanges;\n', '\n', '    function BM_ICO()\n', '    {\n', '        owner          = msg.sender;\n', '        exchangesOwner = address(0xCa92b75B7Ada1B460Eb5C012F1ebAd72c27B19D9);\n', '\n', '        contractTokens          = BMToken(0xf028adee51533b1b47beaa890feb54a457f51e89);\n', '        contractAffiliatePreICO = BMPreICOAffiliateProgramm(0x6203188c0dd1a4607614dbc8af409e91ed46def0);\n', '        contractAffiliateICO    = BMICOAffiliateProgramm(0xbe44459058383729be8247802d4314ea76ca9e5a);\n', '        contractMKPreICO        = BMmkPreICO(0xe9958afac6a3e16d32d3cb62a82f84d3c43c8012);\n', '        contractPreICO          = BMPreICO(0x7600431745bd5bb27315f8376971c81cc8026a78);\n', '\n', '        priceRound[0] = 0.000064 ether; //MK\n', '        priceRound[1] = 0.000071 ether; //PreICO\n', '        priceRound[2] = 0.000107 ether; //1 round 10.09.2017-20.09.2017\n', '        priceRound[3] = 0.000114 ether; //2 round 20.09.2017-25.09.2017\n', '        priceRound[4] = 0.000121 ether; //3 round 25.09.2017-30.09.2017\n', '        priceRound[5] = 0.000143 ether; //4 round 30.09.2017-10.10.2017\n', '    }\n', '\n', '    modifier isOwner()\n', '    {\n', '        assert(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function changeOwner(address new_owner) isOwner {\n', '        assert(new_owner!=address(0x0));\n', '        assert(new_owner!=address(this));\n', '        owner = new_owner;\n', '    }\n', '\n', '    function addExchange(address new_exchange) isOwner\n', '    {\n', '        assert(new_exchange!=address(0x0));\n', '        assert(new_exchange!=address(this));\n', '        assert(exchanges[new_exchange]==false);\n', '        exchanges[new_exchange] = true;\n', '    }\n', '\n', '    function cast(uint256 x) constant internal returns (uint128 z)\n', '    {\n', '        assert((z = uint128(x)) == x);\n', '    }\n', '\n', '    function etherToTokens(uint256 etherAmount, uint256 tokenPrice) constant returns(uint256)\n', '    {\n', '        return uint256(cast((etherAmount * (10**18) + cast(tokenPrice) / 2) / cast(tokenPrice)));\n', '    }\n', '\n', '    function tokensToEther(uint256 tokenAmount, uint256 tokenPrice) constant returns(uint256)\n', '    {\n', '        return uint256(cast((tokenPrice * cast(tokenAmount) + (10**18) / 2) / (10**18)));\n', '    }\n', '\n', '    function periodNow() constant returns (uint8 period) {\n', '        if(now >= 1505001600 && now < 1505865600){\n', '            period = 2;\n', '        }\n', '        else if(now >= 1505865600 && now < 1506297600){\n', '            period = 3;\n', '        }\n', '        else if(now >= 1506297600 && now < 1506729600){\n', '            period = 4;\n', '        }\n', '        else if(now >= 1506729600 && now < 1507593600){\n', '            period = 5;\n', '        }\n', '        else {\n', '            period = 6;\n', '        }\n', '    }\n', '\n', '    function claim_PreICOTokens(address holder)\n', '    {\n', '        uint256 reward = 0;\n', '\n', '        if(claimedMK[holder]==false){\n', '            reward = etherToTokens(contractMKPreICO.getDataHolders(holder), priceRound[0]);\n', '            icoTokenSupply -= reward;\n', '            claimedMK[holder] = true;\n', '        }\n', '\n', '        if(claimedPreICO[holder]==false){\n', '            uint256 preico_reward = etherToTokens(contractPreICO.getDataHolders(holder), priceRound[1]);\n', '            reward += preico_reward;\n', '            icoTokenSupply -= preico_reward;\n', '            reward += etherToTokens(contractAffiliatePreICO.refferalPreICOBonus(holder), priceRound[1]);\n', '            claimedPreICO[holder] = true;\n', '        }\n', '\n', '        assert(reward>0);\n', '\n', '        if(exchanges[holder] == true)\n', '        {\n', '            contractTokens.mintTokens(exchangesOwner, reward);\n', '        }\n', '        else\n', '        {\n', '            contractTokens.mintTokens(holder, reward);\n', '        }\n', '    }\n', '\n', '    function claim_partnerPreICOTokens(address partner)\n', '    {\n', '        assert(claimedPartnerPreICO[partner]==false);\n', '        uint256 reward = etherToTokens(contractAffiliatePreICO.partnerPreICOBonus(partner), priceRound[1]);\n', '\n', '        assert(reward>0);\n', '\n', '        contractTokens.mintTokens(partner, reward);\n', '        claimedPartnerPreICO[partner] = true;\n', '    }\n', '\n', '    function buy(string promo) payable\n', '    {\n', '        uint8 period_number = periodNow();\n', '        assert(exchanges[msg.sender]==false);\n', '        assert(period_number >= 2 && period_number <= 5);\n', '        assert(icoTokenSupply > 0);\n', '        assert(msg.value >= 0.1 ether);\n', '\n', '        uint256 amount_invest = msg.value;\n', '        uint256 reward = etherToTokens(amount_invest, priceRound[period_number]);\n', '\n', '        if(reward > icoTokenSupply)\n', '        {\n', '            reward = icoTokenSupply;\n', '            amount_invest = tokensToEther(reward, priceRound[period_number]);\n', '            assert(msg.value > amount_invest);\n', '            msg.sender.transfer(msg.value - amount_invest);\n', '        }\n', '\n', '        icoTokenSupply -= reward;\n', '\n', '        if (bytes(promo).length > 0)\n', '\t\t{\n', '            var (partner_address, partner_bonus, referral_bonus) = contractAffiliateICO.add_referral(msg.sender, promo, amount_invest);\n', '\n', '            if(partner_bonus > 0 && partner_address != address(0x0))\n', '            {\n', '                uint256 p_bonus = etherToTokens(partner_bonus, priceRound[period_number]);\n', '                partnerBonus[period_number] += p_bonus;\n', '                contractTokens.mintTokens(partner_address, p_bonus);\n', '            }\n', '\n', '            if(referral_bonus > 0)\n', '            {\n', '                uint256 bonus = etherToTokens(referral_bonus, priceRound[period_number]);\n', '                holdersBonus[period_number] += bonus;\n', '                reward += bonus;\n', '            }\n', '        }\n', '        contractTokens.mintTokens(msg.sender, reward);\n', '    }\n', '\n', '    function () payable\n', '    {\n', "        buy('');\n", '    }\n', '\n', '    function collect() isOwner\n', '    {\n', '        assert(this.balance > 0);\n', '        msg.sender.transfer(this.balance);\n', '    }\n', '\n', '    function ownerEmit() isOwner\n', '    {\n', '        assert(now > endDate);\n', '        assert(isOwnerEmit==false);\n', '\n', '        uint256 users_emit = ((7*(10**26))-icoTokenSupply); // 700 000 000\n', '        // ico amount   - 70% supply\n', '        // funds amount - 30% supply\n', '        // funds amount = ico amount * 3 / 7\n', '        uint256 dev_emit = users_emit * 30 / 70;\n', '\n', '        // contractTokens.totalSupply() = users_emit + partner_rewards + users_bouns\n', '        // uint256 partner_and_bouns_rewards = contractTokens.totalSupply() - users_emit;\n', '        // dev_emit = dev_emit - partner_and_bouns_rewards;\n', '        dev_emit = dev_emit + users_emit - contractTokens.totalSupply();\n', '\n', '        isOwnerEmit = true;\n', '        contractTokens.mintTokens(msg.sender, dev_emit);\n', '    }\n', '}']
