['pragma solidity ^0.4.11;\n', '\n', '/*\n', '    Copyright 2017, Anton Egorov (Mothership Foundation)\n', '    Copyright 2017, Klaus Hott (BlockchainLabs.nz)\n', '    Copyright 2017, Jordi Baylina (Giveth)\n', '\n', '    This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '    This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '\n', '    You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '  */\n', '\n', 'contract Finalizable {\n', '  uint256 public finalizedBlock;\n', '  bool public goalMet;\n', '\n', '  function finalize();\n', '}\n', '\n', 'contract Refundable {\n', '  function refund(address th, uint amount) returns (bool);\n', '}\n', '\n', '/// @title ContributionWallet Contract\n', '/// @author Jordi Baylina\n', '/// @dev This contract will be hold the Ether during the contribution period.\n', '///  The idea of this contract is to avoid recycling Ether during the contribution\n', '///  period. So all the ETH collected will be locked here until the contribution\n', '///  period ends\n', '\n', '// @dev Contract to hold sale raised funds during the sale period.\n', '// Prevents attack in which the Aragon Multisig sends raised ether\n', '// to the sale contract to mint tokens to itself, and getting the\n', '// funds back immediately.\n', '\n', 'contract ContributionWallet is Refundable {\n', '\n', '    // Public variables\n', '    address public multisig;\n', '    Finalizable public contribution;\n', '\n', '    // @dev Constructor initializes public variables\n', '    // @param _multisig The address of the multisig that will receive the funds\n', '    // @param _endBlock Block after which the multisig can request the funds\n', '    // @param _contribution Address of the Contribution contract\n', '    function ContributionWallet(address _multisig, address _contribution) {\n', '        require(_multisig != 0x0);\n', '        require(_contribution != 0x0);\n', '        multisig = _multisig;\n', '        contribution = Finalizable(_contribution);\n', '    }\n', '\n', '    // @dev Receive all sent funds without any further logic\n', '    function () public payable {}\n', '\n', '    // @dev Withdraw function sends all the funds to the wallet if conditions are correct\n', '    function withdraw() public {\n', '        require(msg.sender == multisig); // Only the multisig can request it\n', '        assert(contribution.goalMet() || contribution.finalizedBlock() != 0); // Allow when sale is finalized\n', '        multisig.transfer(this.balance);\n', '    }\n', '\n', '    function refund(address th, uint amount) returns (bool) {\n', '      assert(msg.sender == address(contribution));\n', '      th.transfer(amount);\n', '      return true;\n', '    }\n', '}']