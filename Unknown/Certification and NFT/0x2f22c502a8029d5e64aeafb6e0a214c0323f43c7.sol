['pragma solidity 0.4.15;\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '/*\n', ' * @title This is proxy for analytics. Target contract can be found at field m_analytics (see "read contract").\n', ' * @author Eenae\n', '\n', ' * FIXME after fix of truffle issue #560: refactor to a separate contract file which uses InvestmentAnalytics interface\n', ' */\n', 'contract AnalyticProxy {\n', '\n', '    function AnalyticProxy() {\n', '        m_analytics = InvestmentAnalytics(msg.sender);\n', '    }\n', '\n', '    /// @notice forward payment to analytics-capable contract\n', '    function() payable {\n', '        m_analytics.iaInvestedBy.value(msg.value)(msg.sender);\n', '    }\n', '\n', '    InvestmentAnalytics public m_analytics;\n', '}\n', '\n', '\n', '/*\n', ' * @title Mixin contract which supports different payment channels and provides analytical per-channel data.\n', ' * @author Eenae\n', ' */\n', 'contract InvestmentAnalytics {\n', '    using SafeMath for uint256;\n', '\n', '    function InvestmentAnalytics(){\n', '    }\n', '\n', '    /// @dev creates more payment channels, up to the limit but not exceeding gas stipend\n', '    function createMorePaymentChannelsInternal(uint limit) internal returns (uint) {\n', '        uint paymentChannelsCreated;\n', '        for (uint i = 0; i < limit; i++) {\n', '            uint startingGas = msg.gas;\n', '            /*\n', '             * ~170k of gas per paymentChannel,\n', '             * using gas price = 4Gwei 2k paymentChannels will cost ~1.4 ETH.\n', '             */\n', '\n', '            address paymentChannel = new AnalyticProxy();\n', '            m_validPaymentChannels[paymentChannel] = true;\n', '            m_paymentChannels.push(paymentChannel);\n', '            paymentChannelsCreated++;\n', '\n', '            // cost of creating one channel\n', '            uint gasPerChannel = startingGas.sub(msg.gas);\n', '            if (gasPerChannel.add(50000) > msg.gas)\n', '                break;  // enough proxies for this call\n', '        }\n', '        return paymentChannelsCreated;\n', '    }\n', '\n', '\n', '    /// @dev process payments - record analytics and pass control to iaOnInvested callback\n', '    function iaInvestedBy(address investor) external payable {\n', '        address paymentChannel = msg.sender;\n', '        if (m_validPaymentChannels[paymentChannel]) {\n', '            // payment received by one of our channels\n', '            uint value = msg.value;\n', '            m_investmentsByPaymentChannel[paymentChannel] = m_investmentsByPaymentChannel[paymentChannel].add(value);\n', '            // We know for sure that investment came from specified investor (see AnalyticProxy).\n', '            iaOnInvested(investor, value, true);\n', '        } else {\n', '            // Looks like some user has paid to this method, this payment is not included in the analytics,\n', '            // but, of course, processed.\n', '            iaOnInvested(msg.sender, msg.value, false);\n', '        }\n', '    }\n', '\n', '    /// @dev callback\n', '    function iaOnInvested(address investor, uint payment, bool usingPaymentChannel) internal {\n', '    }\n', '\n', '\n', '    function paymentChannelsCount() external constant returns (uint) {\n', '        return m_paymentChannels.length;\n', '    }\n', '\n', '    function readAnalyticsMap() external constant returns (address[], uint[]) {\n', '        address[] memory keys = new address[](m_paymentChannels.length);\n', '        uint[] memory values = new uint[](m_paymentChannels.length);\n', '\n', '        for (uint i = 0; i < m_paymentChannels.length; i++) {\n', '            address key = m_paymentChannels[i];\n', '            keys[i] = key;\n', '            values[i] = m_investmentsByPaymentChannel[key];\n', '        }\n', '\n', '        return (keys, values);\n', '    }\n', '\n', '    function readPaymentChannels() external constant returns (address[]) {\n', '        return m_paymentChannels;\n', '    }\n', '\n', '\n', '    mapping(address => uint256) public m_investmentsByPaymentChannel;\n', '    mapping(address => bool) m_validPaymentChannels;\n', '\n', '    address[] public m_paymentChannels;\n', '}\n', '\n', '/**\n', ' * @title Helps contracts guard agains rentrancy attacks.\n', ' * @author Remco Bloemen <remco@2Ï€.com>\n', ' * @notice If you mark a function `nonReentrant`, you should also\n', ' * mark it `external`.\n', ' */\n', 'contract ReentrancyGuard {\n', '\n', '  /**\n', '   * @dev We use a single lock for the whole contract.\n', '   */\n', '  bool private rentrancy_lock = false;\n', '\n', '  /**\n', '   * @dev Prevents a contract from calling itself, directly or indirectly.\n', '   * @notice If you mark a function `nonReentrant`, you should also\n', '   * mark it `external`. Calling one nonReentrant function from\n', '   * another is not supported. Instead, you can implement a\n', '   * `private` function doing the actual work, and a `external`\n', '   * wrapper marked as `nonReentrant`.\n', '   */\n', '  modifier nonReentrant() {\n', '    require(!rentrancy_lock);\n', '    rentrancy_lock = true;\n', '    _;\n', '    rentrancy_lock = false;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract STQToken {\n', '    function mint(address _to, uint256 _amount) external;\n', '}\n', '\n', '/// @title Storiqa pre-ICO contract\n', 'contract STQPreICO is Ownable, ReentrancyGuard, InvestmentAnalytics {\n', '    using SafeMath for uint256;\n', '\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '\n', '    function STQPreICO(address token, address funds) {\n', '        require(address(0) != address(token) && address(0) != address(funds));\n', '\n', '        m_token = STQToken(token);\n', '        m_funds = funds;\n', '    }\n', '\n', '\n', '    // PUBLIC interface: payments\n', '\n', '    // fallback function as a shortcut\n', '    function() payable {\n', '        require(0 == msg.data.length);\n', '        buy();  // only internal call here!\n', '    }\n', '\n', '    /// @notice ICO participation\n', '    function buy() public payable {     // dont mark as external!\n', '        iaOnInvested(msg.sender, msg.value, false);\n', '    }\n', '\n', '\n', '    // PUBLIC interface: maintenance\n', '\n', '    function createMorePaymentChannels(uint limit) external onlyOwner returns (uint) {\n', '        return createMorePaymentChannelsInternal(limit);\n', '    }\n', '\n', '    /// @notice Tests ownership of the current caller.\n', "    /// @return true if it's an owner\n", "    // It's advisable to call it by new owner to make sure that the same erroneous address is not copy-pasted to\n", '    // addOwner/changeOwner and to isOwner.\n', '    function amIOwner() external constant onlyOwner returns (bool) {\n', '        return true;\n', '    }\n', '\n', '\n', '    // INTERNAL\n', '\n', '    /// @dev payment callback\n', '    function iaOnInvested(address investor, uint payment, bool usingPaymentChannel)\n', '        internal\n', '        nonReentrant\n', '    {\n', '        require(payment >= c_MinInvestment);\n', '        require(getCurrentTime() >= c_startTime && getCurrentTime() < c_endTime || msg.sender == owner);\n', '\n', '        uint startingInvariant = this.balance.add(m_funds.balance);\n', '\n', '        // return or update payment if needed\n', '        uint paymentAllowed = getMaximumFunds().sub(m_totalInvested);\n', '        if (0 == paymentAllowed) {\n', '            investor.transfer(payment);\n', '            return;\n', '        }\n', '        uint change;\n', '        if (paymentAllowed < payment) {\n', '            change = payment.sub(paymentAllowed);\n', '            payment = paymentAllowed;\n', '        }\n', '\n', '        // calculate rate\n', '        uint bonusPercent = c_preICOBonusPercent;\n', '        bonusPercent += getLargePaymentBonus(payment);\n', '        if (usingPaymentChannel)\n', '            bonusPercent += c_paymentChannelBonusPercent;\n', '\n', '        uint rate = c_STQperETH.mul(100 + bonusPercent).div(100);\n', '\n', '        // issue tokens\n', '        uint stq = payment.mul(rate);\n', '        m_token.mint(investor, stq);\n', '\n', '        // record payment\n', '        m_funds.transfer(payment);\n', '        m_totalInvested = m_totalInvested.add(payment);\n', '        assert(m_totalInvested <= getMaximumFunds());\n', '        FundTransfer(investor, payment, true);\n', '\n', '        if (change > 0)\n', '            investor.transfer(change);\n', '\n', '        assert(startingInvariant == this.balance.add(m_funds.balance).add(change));\n', '    }\n', '\n', '    function getLargePaymentBonus(uint payment) private constant returns (uint) {\n', '        if (payment > 1000 ether) return 10;\n', '        if (payment > 800 ether) return 8;\n', '        if (payment > 500 ether) return 5;\n', '        if (payment > 200 ether) return 2;\n', '        return 0;\n', '    }\n', '\n', '    /// @dev to be overridden in tests\n', '    function getCurrentTime() internal constant returns (uint) {\n', '        return now;\n', '    }\n', '\n', '    /// @dev to be overridden in tests\n', '    function getMaximumFunds() internal constant returns (uint) {\n', '        return c_MaximumFunds;\n', '    }\n', '\n', '\n', '    // FIELDS\n', '\n', '    /// @notice start time of the pre-ICO\n', '    uint public constant c_startTime = 1507766400;\n', '\n', '    /// @notice end time of the pre-ICO\n', '    uint public constant c_endTime = c_startTime + (1 days);\n', '\n', '    /// @notice minimum investment\n', '    uint public constant c_MinInvestment = 10 finney;\n', '\n', '    /// @notice maximum investments to be accepted during pre-ICO\n', '    uint public constant c_MaximumFunds = 8000 ether;\n', '\n', '\n', '    /// @notice starting exchange rate of STQ\n', '    uint public constant c_STQperETH = 100000;\n', '\n', '    /// @notice pre-ICO bonus\n', '    uint public constant c_preICOBonusPercent = 40;\n', '\n', '    /// @notice authorised payment bonus\n', '    uint public constant c_paymentChannelBonusPercent = 2;\n', '\n', '\n', '    /// @dev total investments amount\n', '    uint public m_totalInvested;\n', '\n', '    /// @dev contract responsible for token accounting\n', '    STQToken public m_token;\n', '\n', '    /// @dev address responsible for investments accounting\n', '    address public m_funds;\n', '}']