['pragma solidity ^0.4.11;\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));      \n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '/*\n', ' * Haltable\n', ' * emergency stop mechanism. Differs from Pausable by causing a throw when in halt mode.\n', ' * Originally envisioned in FirstBlood ICO contract.\n', ' */\n', 'contract Haltable is Ownable {\n', '  bool public halted;\n', '  modifier stopInEmergency {\n', '    require(!halted);\n', '    _;\n', '  }\n', '  modifier stopNonOwnersInEmergency {\n', '    require(!halted && msg.sender == owner);\n', '    _;\n', '  }\n', '  modifier onlyInEmergency {\n', '    require(halted);\n', '    _;\n', '  }\n', '  // called by the owner on emergency, triggers stopped state\n', '  function halt() external onlyOwner {\n', '    halted = true;\n', '  }\n', '  // called by the owner on end of emergency, returns to normal state\n', '  function unhalt() external onlyOwner onlyInEmergency {\n', '    halted = false;\n', '  }\n', '}\n', '/**\n', ' * @title RefundVault\n', ' * @dev This contract is used for storing funds while a crowdsale\n', ' * is in progress. Supports refunding the money if crowdsale fails,\n', ' * and forwarding it if crowdsale is successful.\n', ' */\n', 'contract RefundVault is Ownable {\n', '  using SafeMath for uint256;\n', '  enum State { Active, Refunding, Closed }\n', '  mapping (address => uint256) public deposited;\n', '  \n', '  address public wallet;\n', '  State public state;\n', '  event Closed();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '  function RefundVault(address _wallet) {\n', '    require(_wallet != 0x0);\n', '    wallet = _wallet;\n', '    state = State.Active;\n', '  }\n', '  function deposit(address investor) onlyOwner payable {\n', '    require(state == State.Active);\n', '    deposited[investor] = deposited[investor].add(msg.value);\n', '  }\n', '  function close() onlyOwner payable {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    Closed();\n', '    wallet.transfer(this.balance);\n', '  }\n', '  function enableRefunds() onlyOwner {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    RefundsEnabled();\n', '  }\n', '  function refund(address investor) payable {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    investor.transfer(depositedValue);\n', '    Refunded(investor, depositedValue);\n', '  }\n', '}\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '  mapping(address => uint256) balances;\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    require(_to != address(0));\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    require(_to != address(0));\n', '    var _allowance = allowed[_from][msg.sender];\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '  \n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until \n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) \n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '  function decreaseApproval (address _spender, uint _subtractedValue) \n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '/**\n', ' * @title Harbor token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract HarborToken is StandardToken, Ownable {\n', '  //define HarborToken\n', '  string public constant name = "HarborToken";\n', '  string public constant symbol = "HBR";\n', '  uint8 public constant decimals = 18;\n', '   /** List of agents that are allowed to create new tokens */\n', '  mapping (address => bool) public mintAgents;\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintOpened();\n', '  event MintFinished();\n', '  event MintingAgentChanged(address addr, bool state  );\n', '  event BurnToken(address addr,uint256 amount);\n', '  bool public mintingFinished = false;\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '  modifier onlyMintAgent() {\n', '    // Only crowdsale contracts are allowed to mint new tokens\n', '    require(mintAgents[msg.sender]);\n', '    _;\n', '  }\n', '  /**\n', '   * Owner can allow a crowdsale contract to mint new tokens.\n', '   */\n', '  function setMintAgent(address addr, bool state) onlyOwner canMint public {\n', '    mintAgents[addr] = state;\n', '    MintingAgentChanged(addr, state);\n', '  }\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyMintAgent canMint returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(0x0, _to, _amount);\n', '    return true;\n', '  }\n', '  /**\n', '   * @dev Function to burn down tokens\n', '   * @param _addr The address that will burn the tokens.\n', '   * @param  _amount The amount of tokens to burn.\n', '   * @return A boolean that indicates if the burn up was successful.\n', '   */\n', '  function burn(address _addr,uint256 _amount) onlyMintAgent canMint  returns (bool) {\n', '    require(_amount > 0);\n', '    totalSupply = totalSupply.sub(_amount);\n', '    balances[_addr] = balances[_addr].sub(_amount);\n', '    BurnToken(_addr,_amount);\n', '    return true;\n', '  }\n', '  /**\n', '   * @dev Function to resume minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function openMinting() onlyOwner returns (bool) {\n', '    mintingFinished = false;\n', '    MintOpened();\n', '     return true;\n', '  }\n', ' /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '/**\n', ' * @title HarborPresale \n', ' */\n', 'contract HarborPresale is Haltable {\n', '  using SafeMath for uint256;\n', '  // The token being sold\n', '  HarborToken public token;\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '  // address where funds are excutionFunds\n', '  address public wallet;\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '  \n', '  //max amount of funds raised\n', '  uint256 public cap;\n', '  //is crowdsale end\n', '  bool public isFinalized = false;\n', '   // minimum amount of funds to be raised in weis\n', '  uint256 public minimumFundingGoal;\n', '  // minimum amount of funds for once \n', '  uint256 public minSend;\n', '  // refund vault used to hold funds while crowdsale is running\n', '  RefundVault public vault;\n', '  //How many tokens were Minted\n', '  uint public tokensMinted;\n', '  //presale buyers\n', '  mapping (address => uint256) public tokenDeposited;\n', '  //event for crowdsale end\n', '  event Finalized();\n', ' //event for presale mint\n', '  event TokenMinted(uint count);\n', '  // We distributed tokens to an investor\n', '  event Distributed(address investor, uint tokenAmount);\n', '  //presale period is Changed\n', '  event PeriodChanged(uint256 starttm,uint256 endtm);\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param investor who participate presale\n', '   * @param value weis paid for purchase\n', '   */ \n', '  event TokenPurchase(address indexed purchaser, address indexed investor, uint256 value);\n', '  function HarborPresale(address _token, uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, uint256 _cap, uint256 _minimumFundingGoal, uint256 _minSend) {\n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != 0x0);\n', '    require(_cap > 0);\n', '    require(_minimumFundingGoal > 0);\n', '    \n', '    token = HarborToken(_token);\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    cap = _cap;\n', '    vault = new RefundVault(_wallet);\n', '    minimumFundingGoal = _minimumFundingGoal;\n', '    minSend = _minSend;\n', '  }\n', '  // fallback function can be used to buy tokens\n', '  function () payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '  // low level token purchase function\n', '  function buyTokens(address investor) payable stopInEmergency {\n', '    require(investor != 0x0);\n', '    require(validPurchase());\n', '    require(minSend <= msg.value);\n', '    uint256 weiAmount = msg.value;\n', '    \n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '    //save for distribution HBR\n', '    tokenDeposited[investor] = tokenDeposited[investor].add(weiAmount);\n', '    //valut save for refund\n', '    vault.deposit.value(msg.value)(msg.sender);\n', '    TokenPurchase(msg.sender, investor, weiAmount);\n', '  }\n', '  /**\n', '   * Load funds to the crowdsale for all investors.\n', '   */\n', '  function mintForEverybody() onlyOwner public {\n', '    uint256 allTokenAmount = weiRaised.mul(rate);\n', '    //for project amount (investor token *2/3)\n', '    uint256 projectAmount = allTokenAmount.mul(2);\n', '    projectAmount = projectAmount.div(3);\n', '    //mint for investor;\n', '    token.mint(address(this),allTokenAmount);\n', '    //mint for project share\n', '    token.mint(wallet,projectAmount);\n', '    // Record how many tokens we got\n', '    tokensMinted = allTokenAmount.add(projectAmount);\n', '    TokenMinted(tokensMinted);\n', '  }\n', '  //get claim of token byself\n', '  function claimToken() payable stopInEmergency{\n', '    claimTokenAddress(msg.sender);\n', '  }\n', '  //get claim of token by address\n', '  function claimTokenAddress(address investor) payable stopInEmergency returns(uint256){\n', '     require(isFinalized);\n', '     require(tokenDeposited[investor] != 0);\n', '    \n', '    uint256 depositedValue = tokenDeposited[investor];\n', '    tokenDeposited[investor] = 0;\n', '    uint256 tokenAmount = depositedValue * rate;\n', '    //send token to investor\n', '    token.transfer(investor,tokenAmount);\n', '    Distributed(investor, tokenAmount);\n', '    return tokenAmount;\n', '  }\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    bool withinCap = weiRaised <= cap;\n', '    return withinPeriod && nonZeroPurchase && withinCap;\n', '  }\n', '  // @return true if HarborPresale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    bool capReached = weiRaised >= cap;\n', '    return (now > endTime) || capReached ;\n', '  }\n', '   /**\n', '   *  called after Presale ends\n', '   */\n', '  function finalize() onlyOwner stopInEmergency{\n', '    require(!isFinalized);\n', '    require(hasEnded());\n', '    finalization();\n', '    Finalized();\n', '    \n', '    isFinalized = true;\n', '  }\n', '  /**\n', '   *  finalization  refund or excute funds.\n', '   */\n', '  function finalization() internal {\n', '    if (minFundingGoalReached()) {\n', '      vault.close();\n', '    } else {\n', '      vault.enableRefunds();\n', '    }\n', '  }\n', '   // if presale is unsuccessful, investors can claim refunds here\n', '  function claimRefund() stopInEmergency payable {\n', '    require(isFinalized);\n', '    require(!minFundingGoalReached());\n', '    vault.refund(msg.sender);\n', '  }\n', '  function minFundingGoalReached() public constant returns (bool) {\n', '    return weiRaised >= minimumFundingGoal;\n', '  }\n', '  //change presale preiod \n', '  function setPeriod(uint256 _startTime,uint256 _endTime) onlyOwner {\n', '    require(now <= _endTime);\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    PeriodChanged(startTime,endTime);\n', '  }\n', '  \n', '  //withdrow for manual distribution\n', '  function withdrawFund() onlyOwner payable{\n', '    require(isFinalized);\n', '    require(minFundingGoalReached());\n', '    uint256 tokenAmount = token.balanceOf(address(this));\n', '    token.transfer(wallet, tokenAmount);\n', '  }\n', '}']
['pragma solidity ^0.4.11;\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));      \n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '/*\n', ' * Haltable\n', ' * emergency stop mechanism. Differs from Pausable by causing a throw when in halt mode.\n', ' * Originally envisioned in FirstBlood ICO contract.\n', ' */\n', 'contract Haltable is Ownable {\n', '  bool public halted;\n', '  modifier stopInEmergency {\n', '    require(!halted);\n', '    _;\n', '  }\n', '  modifier stopNonOwnersInEmergency {\n', '    require(!halted && msg.sender == owner);\n', '    _;\n', '  }\n', '  modifier onlyInEmergency {\n', '    require(halted);\n', '    _;\n', '  }\n', '  // called by the owner on emergency, triggers stopped state\n', '  function halt() external onlyOwner {\n', '    halted = true;\n', '  }\n', '  // called by the owner on end of emergency, returns to normal state\n', '  function unhalt() external onlyOwner onlyInEmergency {\n', '    halted = false;\n', '  }\n', '}\n', '/**\n', ' * @title RefundVault\n', ' * @dev This contract is used for storing funds while a crowdsale\n', ' * is in progress. Supports refunding the money if crowdsale fails,\n', ' * and forwarding it if crowdsale is successful.\n', ' */\n', 'contract RefundVault is Ownable {\n', '  using SafeMath for uint256;\n', '  enum State { Active, Refunding, Closed }\n', '  mapping (address => uint256) public deposited;\n', '  \n', '  address public wallet;\n', '  State public state;\n', '  event Closed();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '  function RefundVault(address _wallet) {\n', '    require(_wallet != 0x0);\n', '    wallet = _wallet;\n', '    state = State.Active;\n', '  }\n', '  function deposit(address investor) onlyOwner payable {\n', '    require(state == State.Active);\n', '    deposited[investor] = deposited[investor].add(msg.value);\n', '  }\n', '  function close() onlyOwner payable {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    Closed();\n', '    wallet.transfer(this.balance);\n', '  }\n', '  function enableRefunds() onlyOwner {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    RefundsEnabled();\n', '  }\n', '  function refund(address investor) payable {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    investor.transfer(depositedValue);\n', '    Refunded(investor, depositedValue);\n', '  }\n', '}\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '  mapping(address => uint256) balances;\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    require(_to != address(0));\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    require(_to != address(0));\n', '    var _allowance = allowed[_from][msg.sender];\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '  \n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until \n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) \n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '  function decreaseApproval (address _spender, uint _subtractedValue) \n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '/**\n', ' * @title Harbor token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract HarborToken is StandardToken, Ownable {\n', '  //define HarborToken\n', '  string public constant name = "HarborToken";\n', '  string public constant symbol = "HBR";\n', '  uint8 public constant decimals = 18;\n', '   /** List of agents that are allowed to create new tokens */\n', '  mapping (address => bool) public mintAgents;\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintOpened();\n', '  event MintFinished();\n', '  event MintingAgentChanged(address addr, bool state  );\n', '  event BurnToken(address addr,uint256 amount);\n', '  bool public mintingFinished = false;\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '  modifier onlyMintAgent() {\n', '    // Only crowdsale contracts are allowed to mint new tokens\n', '    require(mintAgents[msg.sender]);\n', '    _;\n', '  }\n', '  /**\n', '   * Owner can allow a crowdsale contract to mint new tokens.\n', '   */\n', '  function setMintAgent(address addr, bool state) onlyOwner canMint public {\n', '    mintAgents[addr] = state;\n', '    MintingAgentChanged(addr, state);\n', '  }\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyMintAgent canMint returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(0x0, _to, _amount);\n', '    return true;\n', '  }\n', '  /**\n', '   * @dev Function to burn down tokens\n', '   * @param _addr The address that will burn the tokens.\n', '   * @param  _amount The amount of tokens to burn.\n', '   * @return A boolean that indicates if the burn up was successful.\n', '   */\n', '  function burn(address _addr,uint256 _amount) onlyMintAgent canMint  returns (bool) {\n', '    require(_amount > 0);\n', '    totalSupply = totalSupply.sub(_amount);\n', '    balances[_addr] = balances[_addr].sub(_amount);\n', '    BurnToken(_addr,_amount);\n', '    return true;\n', '  }\n', '  /**\n', '   * @dev Function to resume minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function openMinting() onlyOwner returns (bool) {\n', '    mintingFinished = false;\n', '    MintOpened();\n', '     return true;\n', '  }\n', ' /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '/**\n', ' * @title HarborPresale \n', ' */\n', 'contract HarborPresale is Haltable {\n', '  using SafeMath for uint256;\n', '  // The token being sold\n', '  HarborToken public token;\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '  // address where funds are excutionFunds\n', '  address public wallet;\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '  \n', '  //max amount of funds raised\n', '  uint256 public cap;\n', '  //is crowdsale end\n', '  bool public isFinalized = false;\n', '   // minimum amount of funds to be raised in weis\n', '  uint256 public minimumFundingGoal;\n', '  // minimum amount of funds for once \n', '  uint256 public minSend;\n', '  // refund vault used to hold funds while crowdsale is running\n', '  RefundVault public vault;\n', '  //How many tokens were Minted\n', '  uint public tokensMinted;\n', '  //presale buyers\n', '  mapping (address => uint256) public tokenDeposited;\n', '  //event for crowdsale end\n', '  event Finalized();\n', ' //event for presale mint\n', '  event TokenMinted(uint count);\n', '  // We distributed tokens to an investor\n', '  event Distributed(address investor, uint tokenAmount);\n', '  //presale period is Changed\n', '  event PeriodChanged(uint256 starttm,uint256 endtm);\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param investor who participate presale\n', '   * @param value weis paid for purchase\n', '   */ \n', '  event TokenPurchase(address indexed purchaser, address indexed investor, uint256 value);\n', '  function HarborPresale(address _token, uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, uint256 _cap, uint256 _minimumFundingGoal, uint256 _minSend) {\n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != 0x0);\n', '    require(_cap > 0);\n', '    require(_minimumFundingGoal > 0);\n', '    \n', '    token = HarborToken(_token);\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    cap = _cap;\n', '    vault = new RefundVault(_wallet);\n', '    minimumFundingGoal = _minimumFundingGoal;\n', '    minSend = _minSend;\n', '  }\n', '  // fallback function can be used to buy tokens\n', '  function () payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '  // low level token purchase function\n', '  function buyTokens(address investor) payable stopInEmergency {\n', '    require(investor != 0x0);\n', '    require(validPurchase());\n', '    require(minSend <= msg.value);\n', '    uint256 weiAmount = msg.value;\n', '    \n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '    //save for distribution HBR\n', '    tokenDeposited[investor] = tokenDeposited[investor].add(weiAmount);\n', '    //valut save for refund\n', '    vault.deposit.value(msg.value)(msg.sender);\n', '    TokenPurchase(msg.sender, investor, weiAmount);\n', '  }\n', '  /**\n', '   * Load funds to the crowdsale for all investors.\n', '   */\n', '  function mintForEverybody() onlyOwner public {\n', '    uint256 allTokenAmount = weiRaised.mul(rate);\n', '    //for project amount (investor token *2/3)\n', '    uint256 projectAmount = allTokenAmount.mul(2);\n', '    projectAmount = projectAmount.div(3);\n', '    //mint for investor;\n', '    token.mint(address(this),allTokenAmount);\n', '    //mint for project share\n', '    token.mint(wallet,projectAmount);\n', '    // Record how many tokens we got\n', '    tokensMinted = allTokenAmount.add(projectAmount);\n', '    TokenMinted(tokensMinted);\n', '  }\n', '  //get claim of token byself\n', '  function claimToken() payable stopInEmergency{\n', '    claimTokenAddress(msg.sender);\n', '  }\n', '  //get claim of token by address\n', '  function claimTokenAddress(address investor) payable stopInEmergency returns(uint256){\n', '     require(isFinalized);\n', '     require(tokenDeposited[investor] != 0);\n', '    \n', '    uint256 depositedValue = tokenDeposited[investor];\n', '    tokenDeposited[investor] = 0;\n', '    uint256 tokenAmount = depositedValue * rate;\n', '    //send token to investor\n', '    token.transfer(investor,tokenAmount);\n', '    Distributed(investor, tokenAmount);\n', '    return tokenAmount;\n', '  }\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    bool withinCap = weiRaised <= cap;\n', '    return withinPeriod && nonZeroPurchase && withinCap;\n', '  }\n', '  // @return true if HarborPresale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    bool capReached = weiRaised >= cap;\n', '    return (now > endTime) || capReached ;\n', '  }\n', '   /**\n', '   *  called after Presale ends\n', '   */\n', '  function finalize() onlyOwner stopInEmergency{\n', '    require(!isFinalized);\n', '    require(hasEnded());\n', '    finalization();\n', '    Finalized();\n', '    \n', '    isFinalized = true;\n', '  }\n', '  /**\n', '   *  finalization  refund or excute funds.\n', '   */\n', '  function finalization() internal {\n', '    if (minFundingGoalReached()) {\n', '      vault.close();\n', '    } else {\n', '      vault.enableRefunds();\n', '    }\n', '  }\n', '   // if presale is unsuccessful, investors can claim refunds here\n', '  function claimRefund() stopInEmergency payable {\n', '    require(isFinalized);\n', '    require(!minFundingGoalReached());\n', '    vault.refund(msg.sender);\n', '  }\n', '  function minFundingGoalReached() public constant returns (bool) {\n', '    return weiRaised >= minimumFundingGoal;\n', '  }\n', '  //change presale preiod \n', '  function setPeriod(uint256 _startTime,uint256 _endTime) onlyOwner {\n', '    require(now <= _endTime);\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    PeriodChanged(startTime,endTime);\n', '  }\n', '  \n', '  //withdrow for manual distribution\n', '  function withdrawFund() onlyOwner payable{\n', '    require(isFinalized);\n', '    require(minFundingGoalReached());\n', '    uint256 tokenAmount = token.balanceOf(address(this));\n', '    token.transfer(wallet, tokenAmount);\n', '  }\n', '}']
