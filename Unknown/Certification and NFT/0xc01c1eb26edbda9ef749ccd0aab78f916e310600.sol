['pragma solidity ^0.4.11;\n', '\n', '/*\n', '\n', 'ENS Trade Factory\n', '========================\n', '\n', 'Listed names and additional information available at ensnames.com\n', 'Author: /u/Cintix\n', '*/\n', '\n', '// Interfaces for the various ENS contracts\n', 'contract AbstractENS {\n', '  function setResolver(bytes32 node, address resolver);\n', '}\n', 'contract Resolver {\n', '  function setAddr(bytes32 node, address addr);\n', '}\n', 'contract Deed {\n', '  address public previousOwner;\n', '}\n', 'contract Registrar {\n', '  function transfer(bytes32 _hash, address newOwner);\n', '  function entries(bytes32 _hash) constant returns (uint, Deed, uint, uint, uint);\n', '}\n', '\n', '// The child contract, used to make buying as simple as sending ETH.\n', 'contract SellENS {\n', '  SellENSFactory factory;\n', '  \n', '  function SellENS(){\n', '    // Store the address of the factory (0x34abcc1fdedb49c953445c11a71e428d719ba8d9)\n', '    factory = SellENSFactory(msg.sender);\n', '  }\n', '  \n', '  function () payable {\n', '    // Delegate the work back to the factory to save space on the blockchain.\n', '    // This saves on gas when creating sell contracts.\n', '    // Could be replaced with a delegatecall to a library, but that\n', '    // would require a second contract deployment and added complexity.\n', '    factory.transfer(msg.value);\n', '    factory.sell_label(msg.sender, msg.value);\n', '  }\n', '}\n', '\n', '// The factory which produces the seller child contracts.\n', 'contract SellENSFactory {\n', '  // Store the relevant information for each child contract.\n', '  struct SellENSInfo {\n', '    string label;\n', '    uint price;\n', '    address owner;\n', '  }\n', '  mapping (address => SellENSInfo) public get_info;\n', '  \n', '  // The developer address, used for seller fees.\n', '  address developer = 0x4e6A1c57CdBfd97e8efe831f8f4418b1F2A09e6e;\n', '  // The Ethereum Name Service primary contract.\n', '  AbstractENS ens = AbstractENS(0x314159265dD8dbb310642f98f50C066173C1259b);\n', '  // The Ethereum Name Service Registrar contract.\n', '  Registrar registrar = Registrar(0x6090A6e47849629b7245Dfa1Ca21D94cd15878Ef);\n', '  // The Ethereum Name Service Public Resolver contract.\n', '  Resolver resolver = Resolver(0x1da022710dF5002339274AaDEe8D58218e9D6AB5);\n', '  // The hash of ".eth" under which all top level names are registered.\n', '  bytes32 root_node = 0x93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae;\n', '  \n', '  // Events used to help track sales.\n', '  event SellENSCreated(SellENS sell_ens);\n', '  event LabelSold(SellENS sell_ens);\n', '  \n', '  // Called by name sellers to make a new seller child contract.\n', '  function createSellENS(string label, uint price) {\n', '    SellENS sell_ens = new SellENS();\n', '    // Store the seller&#39;s address so they can get paid when the name sells.\n', '    get_info[sell_ens] = SellENSInfo(label, price, msg.sender);\n', '    SellENSCreated(sell_ens);\n', '  }\n', '  \n', '  // Called only by seller child contracts when a name is purchased.\n', '  function sell_label(address buyer, uint amount_paid){\n', '    SellENS sell_ens = SellENS(msg.sender);\n', '    // Verify the sender is a child contract.\n', '    if (get_info[sell_ens].owner == 0x0) throw;\n', '    \n', '    string label = get_info[sell_ens].label;\n', '    uint price = get_info[sell_ens].price;\n', '    address owner = get_info[sell_ens].owner;\n', '    \n', '    // Calculate the hash of the name being bought.\n', '    bytes32 label_hash = sha3(label);\n', '    // Retrieve the name&#39;s deed.\n', '    Deed deed;\n', '    (,deed,,,) = registrar.entries(label_hash);\n', '    // Verify the deed&#39;s previous owner matches the seller.\n', '    if (deed.previousOwner() != owner) throw;\n', '    // Calculate the hash of the full name (i.e. rumours.eth).\n', '    bytes32 node = sha3(root_node, label_hash);\n', '    // Set the name&#39;s resolver to the public resolver.\n', '    ens.setResolver(node, resolver);\n', '    // Configure the resolver to direct payments sent to the name to the buyer.\n', '    resolver.setAddr(node, buyer);\n', '    // Transfer the name&#39;s deed to the buyer.\n', '    registrar.transfer(label_hash, buyer);\n', '\n', '    // Dev fee of 5%\n', '    uint fee = price / 20;\n', '    // The seller pays nothing to unlist and get their name back.\n', '    if (buyer == owner) {\n', '      price = 0;\n', '      fee = 0;\n', '    }\n', '    // 5% to the dev\n', '    developer.transfer(fee);\n', '    // 95% to the seller\n', '    owner.transfer(price - fee);\n', '    // Any extra past the sale price is returned to the buyer.\n', '    if (amount_paid > price) {\n', '      buyer.transfer(amount_paid - price);\n', '    }\n', '    LabelSold(sell_ens);\n', '  }\n', '  \n', '  // The factory must be payable to receive funds from its child contracts.\n', '  function () payable {}\n', '}']