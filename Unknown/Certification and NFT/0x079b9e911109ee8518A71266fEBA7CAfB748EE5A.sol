['pragma solidity ^0.4.15;\n', '\n', '/*\n', '  Copyright 2017 Mothership Foundation https://mothership.cx\n', '\n', '  Permission is hereby granted, free of charge, to any person obtaining a copy\n', '  of this software and associated documentation files (the "Software"), to\n', '  deal in the Software without restriction, including without limitation the\n', '  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n', '  sell copies of the Software, and to permit persons to whom the Software is\n', '  furnished to do so, subject to the following conditions:\n', '\n', '  The above copyright notice and this permission notice shall be included in\n', '  all copies or substantial portions of the Software.\n', '\n', '  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', '  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', '  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', '  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', '  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n', '  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n', '  IN THE SOFTWARE.\n', '*/\n', '\n', '/// @title ERC20Basic\n', '/// @dev Simpler version of ERC20 interface\n', '/// @dev see https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/ERC20Basic.sol\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract Token is ERC20Basic{\n', '  /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\n', '  /// @param _owner The address from which the balance will be retrieved\n', '  /// @param _blockNumber The block number when the balance is queried\n', '  /// @return The balance at `_blockNumber`\n', '  function balanceOfAt(address _owner, uint _blockNumber) constant returns (uint);\n', '}\n', '\n', '/// @title Ownable\n', '/// @dev The Ownable contract has an owner address, and provides basic authorization control\n', '/// functions, this simplifies the implementation of "user permissions".\n', '///\n', '/// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/ownership/Ownable.sol\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  /// @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '  /// account.\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /// @dev Throws if called by any account other than the owner.\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /// @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '  /// @param newOwner The address to transfer ownership to.\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'contract Voting is Ownable {\n', '  // Number of candidates. NOTE Candidates IDs sequience starts at 1.\n', '  uint8 public candidates;\n', '  // An interface to a token contract to check the balance\n', '  Token public msp;\n', '  // The last block that the voting period is active\n', '  uint public endBlock;\n', '\n', '  // A map to store voting candidate for each user address\n', '  mapping(address => uint8) public votes;\n', '  // A list of all voters\n', '  address[] public voters;\n', '\n', '  /// @dev Constructor to create a Voting\n', '  /// @param _candidatesCount Number of cadidates for the voting\n', '  /// @param _msp Address of the MSP token contract\n', '  /// @param _endBlock The last block that the voting period is active\n', '  function Voting(uint8 _candidatesCount, address _msp, uint _endBlock) {\n', '    candidates = _candidatesCount;\n', '    msp = Token(_msp);\n', '    endBlock = _endBlock;\n', '  }\n', '\n', '  /// @dev A method to signal a vote for a given `_candidate`\n', '  /// @param _candidate Voting candidate ID\n', '  function vote(uint8 _candidate) {\n', '    require(_candidate > 0 && _candidate <= candidates);\n', '    assert(endBlock == 0 || getBlockNumber() <= endBlock);\n', '    if (votes[msg.sender] == 0) {\n', '      voters.push(msg.sender);\n', '    }\n', '    votes[msg.sender] = _candidate;\n', '    Vote(msg.sender, _candidate);\n', '  }\n', '\n', '  /// @return Number of voters\n', '  function votersCount()\n', '    constant\n', '    returns(uint) {\n', '    return voters.length;\n', '  }\n', '\n', '  /// @dev Queries the list with `_offset` and `_limit` of `voters`, candidates\n', '  ///  choosen and MSP amount at the current block\n', '  /// @param _offset The offset at the `voters` list\n', '  /// @param _limit The number of voters to return\n', '  /// @return The voters, candidates and MSP amount at current block\n', '  function getVoters(uint _offset, uint _limit)\n', '    constant\n', '    returns(address[] _voters, uint8[] _candidates, uint[] _amounts) {\n', '    return getVotersAt(_offset, _limit, getBlockNumber());\n', '  }\n', '\n', '  /// @dev Queries the list with `_offset` and `_limit` of `voters`, candidates\n', '  ///  choosen and MSP amount at a specific `_blockNumber`\n', '  /// @param _offset The offset at the `voters` list\n', '  /// @param _limit The number of voters to return\n', '  /// @param _blockNumber The block number when the voters&#39;s MSP balances is queried\n', '  /// @return The voters, candidates and MSP amount at `_blockNumber`\n', '  function getVotersAt(uint _offset, uint _limit, uint _blockNumber)\n', '    constant\n', '    returns(address[] _voters, uint8[] _candidates, uint[] _amounts) {\n', '\n', '    if (_offset < voters.length) {\n', '      uint count = 0;\n', '      uint resultLength = voters.length - _offset > _limit ? _limit : voters.length - _offset;\n', '      uint _block = _blockNumber > endBlock ? endBlock : _blockNumber;\n', '      _voters = new address[](resultLength);\n', '      _candidates = new uint8[](resultLength);\n', '      _amounts = new uint[](resultLength);\n', '      for(uint i = _offset; (i < voters.length) && (count < _limit); i++) {\n', '        _voters[count] = voters[i];\n', '        _candidates[count] = votes[voters[i]];\n', '        _amounts[count] = msp.balanceOfAt(voters[i], _block);\n', '        count++;\n', '      }\n', '\n', '      return(_voters, _candidates, _amounts);\n', '    }\n', '  }\n', '\n', '  function getSummary() constant returns (uint8[] _candidates, uint[] _summary) {\n', '    uint _block = getBlockNumber() > endBlock ? endBlock : getBlockNumber();\n', '\n', '    // Fill the candidates IDs list\n', '    _candidates = new uint8[](candidates);\n', '    for(uint8 c = 1; c <= candidates; c++) {\n', '      _candidates[c - 1] = c;\n', '    }\n', '\n', '    // Get MSP impact map for each candidate\n', '    _summary = new uint[](candidates);\n', '    uint8 _candidateIndex;\n', '    for(uint i = 0; i < voters.length; i++) {\n', '      _candidateIndex = votes[voters[i]] - 1;\n', '      _summary[_candidateIndex] = _summary[_candidateIndex] + msp.balanceOfAt(voters[i], _block);\n', '    }\n', '\n', '    return (_candidates, _summary);\n', '  }\n', '\n', '  /// @dev This method can be used by the owner to extract mistakenly\n', '  ///  sent tokens to this contract.\n', '  /// @param _token The address of the token contract that you want to recover\n', '  ///  set to 0 in case you want to extract ether.\n', '  function claimTokens(address _token) onlyOwner {\n', '    if (_token == 0x0) {\n', '      owner.transfer(this.balance);\n', '      return;\n', '    }\n', '\n', '    ERC20Basic token = ERC20Basic(_token);\n', '    uint balance = token.balanceOf(this);\n', '    token.transfer(owner, balance);\n', '    ClaimedTokens(_token, owner, balance);\n', '  }\n', '\n', '  /// @dev This function is overridden by the test Mocks.\n', '  function getBlockNumber() internal constant returns (uint) {\n', '    return block.number;\n', '  }\n', '\n', '  event Vote(address indexed _voter, uint indexed _candidate);\n', '  event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n', '}']