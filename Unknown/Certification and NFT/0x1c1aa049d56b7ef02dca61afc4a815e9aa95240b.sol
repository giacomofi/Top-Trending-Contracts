['pragma solidity ^0.4.13;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract AbstractStarbaseToken is ERC20 {\n', '    function isFundraiser(address fundraiserAddress) public returns (bool);\n', '    function company() public returns (address);\n', '    function allocateToCrowdsalePurchaser(address to, uint256 value) public returns (bool);\n', '    function allocateToMarketingSupporter(address to, uint256 value) public returns (bool);\n', '}\n', '\n', '/**\n', ' * @title Crowdsale contract - Starbase marketing campaign contract to reward supportors\n', ' * @author Starbase PTE. LTD. - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="5c35323a331c2f283d2e3e3d2f39723f33">[email&#160;protected]</a>>\n', ' */\n', 'contract StarbaseMarketingCampaign is Ownable {\n', '    /*\n', '     *  Events\n', '     */\n', '    event NewContributor (address indexed contributorAddress, uint256 tokenCount);\n', '    event UpdateContributorsTokens(address indexed contributorAddress, uint256 tokenCount);\n', '    event WithdrawContributorsToken(address indexed contributorAddress, uint256 tokenWithdrawn, uint remainingTokens);\n', '\n', '    /**\n', '     *  External contracts\n', '     */\n', '    AbstractStarbaseToken public starbaseToken;\n', '\n', '    /**\n', '     * Types\n', '     */\n', '    struct Contributor {\n', '        uint256 rewardTokens;\n', '        uint256 transferredRewardTokens;\n', '        mapping (bytes32 => bool) contributions;  // example: keccak256(bcm-xda98sdf) => true\n', '    }\n', '\n', '    /**\n', '     *  Storage\n', '     */\n', '    address public workshop;  // holds undelivered STARs\n', '    address[] public contributors;\n', '    mapping (address => Contributor) public contributor;\n', '\n', '    /**\n', '     *  Modifiers\n', '     */\n', '    modifier onlyOwnerOr(address _allowed) {\n', '        // Only owner or specified address are allowed to do this action.\n', '        assert(msg.sender == owner || msg.sender == _allowed);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     *  Functions\n', '     */\n', '\n', '    /**\n', '     * @dev Contract constructor sets owner and workshop address.\n', '     * @param workshopAddr The address that will hold undelivered Star tokens\n', '     */\n', '    function StarbaseMarketingCampaign(address workshopAddr) {\n', '        require(workshopAddr != address(0));\n', '        owner = msg.sender;\n', '        workshop = workshopAddr;\n', '    }\n', '\n', '    /*\n', '     *  External Functions\n', '     */\n', '\n', '    /**\n', '     * @dev Allows for marketing contributor&#39;s reward withdrawl\n', '     * @param contributorAddress The address of the contributor\n', '     * @param tokensToTransfer Token number to withdraw\n', '     */\n', '    function withdrawRewardedTokens (address contributorAddress, uint256 tokensToTransfer)\n', '        external\n', '        onlyOwnerOr(contributorAddress)\n', '    {\n', '        require(contributor[contributorAddress].rewardTokens > 0 && tokensToTransfer <= contributor[contributorAddress].rewardTokens && address(starbaseToken) != 0);\n', '\n', '        contributor[contributorAddress].rewardTokens = SafeMath.sub(contributor[contributorAddress].rewardTokens, tokensToTransfer);\n', '\n', '        contributor[contributorAddress].transferredRewardTokens = SafeMath.add(contributor[contributorAddress].transferredRewardTokens, tokensToTransfer);\n', '\n', '        starbaseToken.allocateToMarketingSupporter(contributorAddress, tokensToTransfer);\n', '        WithdrawContributorsToken(contributorAddress, tokensToTransfer, contributor[contributorAddress].rewardTokens);\n', '    }\n', '\n', '    /**\n', '     * @dev Setup function sets external contracts&#39; addresses.\n', '     * @param starbaseTokenAddress Token address.\n', '     */\n', '    function setup(address starbaseTokenAddress)\n', '        external\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        assert(address(starbaseToken) == 0);\n', '        starbaseToken = AbstractStarbaseToken(starbaseTokenAddress);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Include new contributor\n', '     * @param contributorAddress A contributor&#39;s address\n', '     * @param tokenCount number of tokens assigned to contributor on their inclusion\n', '     * @param contributionId Id of contribution from bounty app db\n', '     */\n', '    function addRewardforNewContributor\n', '        (\n', '            address contributorAddress,\n', '            uint256 tokenCount,\n', '            string contributionId\n', '        )\n', '            external\n', '            onlyOwner\n', '    {\n', '        bytes32 id = keccak256(contributionId);\n', '\n', '        require(!contributor[contributorAddress].contributions[id]);\n', '        assert(contributor[contributorAddress].rewardTokens == 0 && contributor[contributorAddress].transferredRewardTokens == 0);\n', '\n', '        contributor[contributorAddress].rewardTokens = tokenCount;\n', '        contributor[contributorAddress].contributions[id] = true;\n', '        contributors.push(contributorAddress);\n', '        NewContributor(contributorAddress, tokenCount);\n', '    }\n', '\n', '    /**\n', '     * @dev Updates contributors rewardTokens\n', '     * @param contributorAddress A contributor&#39;s address\n', '     * @param tokenCount number of tokens to update for the contributor\n', '     * @param contributionId Id of contribution from bounty app db\n', '     */\n', '    function updateRewardForContributor (address contributorAddress, uint256 tokenCount, string contributionId)\n', '        external\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        bytes32 id = keccak256(contributionId);\n', '\n', '        require(contributor[contributorAddress].contributions[id]);\n', '\n', '        contributor[contributorAddress].rewardTokens = SafeMath.add(contributor[contributorAddress].rewardTokens, tokenCount);\n', '        UpdateContributorsTokens(contributorAddress, tokenCount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     *  Public Functions\n', '     */\n', '\n', '    /**\n', '     * @dev Informs about contributors rewardTokens and transferredRewardTokens status\n', '     * @param contributorAddress A contributor&#39;s address\n', '     * @param contributionId Id of contribution from bounty app db\n', '     */\n', '    function getContributorInfo(address contributorAddress, string contributionId)\n', '      constant\n', '      public\n', '      returns (uint256, uint256, bool)\n', '    {\n', '        bytes32 id = keccak256(contributionId);\n', '\n', '        return(\n', '          contributor[contributorAddress].rewardTokens,\n', '          contributor[contributorAddress].transferredRewardTokens,\n', '          contributor[contributorAddress].contributions[id]\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Returns number of contributors.\n', '     */\n', '    function numberOfContributors()\n', '      constant\n', '      public\n', '      returns (uint256)\n', '    {\n', '      return contributors.length;\n', '    }\n', '}']