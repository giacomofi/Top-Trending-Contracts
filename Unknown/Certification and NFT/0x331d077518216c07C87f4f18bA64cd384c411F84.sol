['// This software is a subject to Ambisafe License Agreement.\n', '// No use or distribution is allowed without written permission from Ambisafe.\n', '// https://ambisafe.com/terms.pdf\n', '\n', 'pragma solidity 0.4.8;\n', '\n', 'contract Ambi2 {\n', '    function claimFor(address _address, address _owner) returns(bool);\n', '    function hasRole(address _from, bytes32 _role, address _to) constant returns(bool);\n', '    function isOwner(address _node, address _owner) constant returns(bool);\n', '}\n', '\n', 'contract Ambi2Enabled {\n', '    Ambi2 ambi2;\n', '\n', '    modifier onlyRole(bytes32 _role) {\n', '        if (address(ambi2) != 0x0 && ambi2.hasRole(this, _role, msg.sender)) {\n', '            _;\n', '        }\n', '    }\n', '\n', '    // Perform only after claiming the node, or claim in the same tx.\n', '    function setupAmbi2(Ambi2 _ambi2) returns(bool) {\n', '        if (address(ambi2) != 0x0) {\n', '            return false;\n', '        }\n', '\n', '        ambi2 = _ambi2;\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Ambi2EnabledFull is Ambi2Enabled {\n', '    // Setup and claim atomically.\n', '    function setupAmbi2(Ambi2 _ambi2) returns(bool) {\n', '        if (address(ambi2) != 0x0) {\n', '            return false;\n', '        }\n', '        if (!_ambi2.claimFor(this, msg.sender) && !_ambi2.isOwner(this, msg.sender)) {\n', '            return false;\n', '        }\n', '\n', '        ambi2 = _ambi2;\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract RegistryICAPInterface {\n', '    function parse(bytes32 _icap) constant returns(address, bytes32, bool);\n', '    function institutions(bytes32 _institution) constant returns(address);\n', '}\n', '\n', 'contract Cosigner {\n', '    function consumeOperation(bytes32 _opHash, uint _required) returns(bool);\n', '}\n', '\n', 'contract Emitter {\n', '    function emitTransfer(address _from, address _to, bytes32 _symbol, uint _value, string _reference);\n', '    function emitTransferToICAP(address _from, address _to, bytes32 _icap, uint _value, string _reference);\n', '    function emitIssue(bytes32 _symbol, uint _value, address _by);\n', '    function emitRevoke(bytes32 _symbol, uint _value, address _by);\n', '    function emitOwnershipChange(address _from, address _to, bytes32 _symbol);\n', '    function emitApprove(address _from, address _spender, bytes32 _symbol, uint _value);\n', '    function emitRecovery(address _from, address _to, address _by);\n', '    function emitError(bytes32 _message);\n', '    function emitChange(bytes32 _symbol);\n', '}\n', '\n', 'contract Proxy {\n', '    function emitTransfer(address _from, address _to, uint _value);\n', '    function emitApprove(address _from, address _spender, uint _value);\n', '}\n', '\n', '/**\n', ' * @title EToken2.\n', ' *\n', ' * The official Ambisafe assets platform powering all kinds of tokens.\n', ' * EToken2 uses EventsHistory contract to keep events, so that in case it needs to be redeployed\n', ' * at some point, all the events keep appearing at the same place.\n', ' *\n', ' * Every asset is meant to be used through a proxy contract. Only one proxy contract have access\n', ' * rights for a particular asset.\n', ' *\n', ' * Features: assets issuance, transfers, allowances, supply adjustments, lost wallet access recovery.\n', ' *           cosignature check, ICAP.\n', ' *\n', ' * Note: all the non constant functions return false instead of throwing in case if state change\n', ' * didn&#39;t happen yet.\n', ' */\n', 'contract EToken2 is Ambi2EnabledFull {\n', '    mapping(bytes32 => bool) switches;\n', '\n', '    function isEnabled(bytes32 _switch) constant returns(bool) {\n', '        return switches[_switch];\n', '    }\n', '\n', '    function enableSwitch(bytes32 _switch) onlyRole(&#39;issuance&#39;) returns(bool) {\n', '        switches[_switch] = true;\n', '        return true;\n', '    }\n', '\n', '    modifier checkEnabledSwitch(bytes32 _switch) {\n', '        if (!isEnabled(_switch)) {\n', '            _error(&#39;Feature is disabled&#39;);\n', '        } else {\n', '            _;\n', '        }\n', '    }\n', '\n', '    enum Features { Issue, TransferWithReference, Revoke, ChangeOwnership, Allowances, ICAP }\n', '\n', '    // Structure of a particular asset.\n', '    struct Asset {\n', '        uint owner;                       // Asset&#39;s owner id.\n', '        uint totalSupply;                 // Asset&#39;s total supply.\n', '        string name;                      // Asset&#39;s name, for information purposes.\n', '        string description;               // Asset&#39;s description, for information purposes.\n', '        bool isReissuable;                // Indicates if asset have dynamic of fixed supply.\n', '        uint8 baseUnit;                   // Proposed number of decimals.\n', '        bool isLocked;                    // Are changes still allowed.\n', '        mapping(uint => Wallet) wallets;  // Holders wallets.\n', '    }\n', '\n', '    // Structure of an asset holder wallet for particular asset.\n', '    struct Wallet {\n', '        uint balance;\n', '        mapping(uint => uint) allowance;\n', '    }\n', '\n', '    // Structure of an asset holder.\n', '    struct Holder {\n', '        address addr;                    // Current address of the holder.\n', '        Cosigner cosigner;               // Cosigner contract for 2FA and recovery.\n', '        mapping(address => bool) trust;  // Addresses that are trusted with recovery proocedure.\n', '    }\n', '\n', '    // Iterable mapping pattern is used for holders.\n', '    uint public holdersCount;\n', '    mapping(uint => Holder) public holders;\n', '\n', '    // This is an access address mapping. Many addresses may have access to a single holder.\n', '    mapping(address => uint) holderIndex;\n', '\n', '    // Asset symbol to asset mapping.\n', '    mapping(bytes32 => Asset) public assets;\n', '\n', '    // Asset symbol to asset proxy mapping.\n', '    mapping(bytes32 => address) public proxies;\n', '\n', '    // ICAP registry contract.\n', '    RegistryICAPInterface public registryICAP;\n', '\n', '    // Should use interface of the emitter, but address of events history.\n', '    Emitter public eventsHistory;\n', '\n', '    /**\n', '     * Emits Error event with specified error message.\n', '     *\n', '     * Should only be used if no state changes happened.\n', '     *\n', '     * @param _message error message.\n', '     */\n', '    function _error(bytes32 _message) internal {\n', '        eventsHistory.emitError(_message);\n', '    }\n', '\n', '    /**\n', '     * Sets EventsHstory contract address.\n', '     *\n', '     * Can be set only once, and only by contract owner.\n', '     *\n', '     * @param _eventsHistory EventsHistory contract address.\n', '     *\n', '     * @return success.\n', '     */\n', '    function setupEventsHistory(Emitter _eventsHistory) onlyRole(&#39;setup&#39;) returns(bool) {\n', '        if (address(eventsHistory) != 0) {\n', '            return false;\n', '        }\n', '        eventsHistory = _eventsHistory;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Sets RegistryICAP contract address.\n', '     *\n', '     * Can be set only once, and only by contract owner.\n', '     *\n', '     * @param _registryICAP RegistryICAP contract address.\n', '     *\n', '     * @return success.\n', '     */\n', '    function setupRegistryICAP(RegistryICAPInterface _registryICAP) onlyRole(&#39;setup&#39;) returns(bool) {\n', '        if (address(registryICAP) != 0) {\n', '            return false;\n', '        }\n', '        registryICAP = _registryICAP;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Emits Error if called not by asset owner.\n', '     */\n', '    modifier onlyOwner(bytes32 _symbol) {\n', '        if (_isSignedOwner(_symbol)) {\n', '            _;\n', '        } else {\n', '            _error(&#39;Only owner: access denied&#39;);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Emits Error if called not by asset proxy.\n', '     */\n', '    modifier onlyProxy(bytes32 _symbol) {\n', '        if (_isProxy(_symbol)) {\n', '            _;\n', '        } else {\n', '            _error(&#39;Only proxy: access denied&#39;);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Emits Error if _from doesn&#39;t trust _to.\n', '     */\n', '    modifier checkTrust(address _from, address _to) {\n', '        if (isTrusted(_from, _to)) {\n', '            _;\n', '        } else {\n', '            _error(&#39;Only trusted: access denied&#39;);\n', '        }\n', '    }\n', '\n', '    function _isSignedOwner(bytes32 _symbol) internal checkSigned(getHolderId(msg.sender), 1) returns(bool) {\n', '        return isOwner(msg.sender, _symbol);\n', '    }\n', '\n', '    /**\n', '     * Check asset existance.\n', '     *\n', '     * @param _symbol asset symbol.\n', '     *\n', '     * @return asset existance.\n', '     */\n', '    function isCreated(bytes32 _symbol) constant returns(bool) {\n', '        return assets[_symbol].owner != 0;\n', '    }\n', '\n', '    function isLocked(bytes32 _symbol) constant returns(bool) {\n', '        return assets[_symbol].isLocked;\n', '    }\n', '\n', '    /**\n', '     * Returns asset decimals.\n', '     *\n', '     * @param _symbol asset symbol.\n', '     *\n', '     * @return asset decimals.\n', '     */\n', '    function baseUnit(bytes32 _symbol) constant returns(uint8) {\n', '        return assets[_symbol].baseUnit;\n', '    }\n', '\n', '    /**\n', '     * Returns asset name.\n', '     *\n', '     * @param _symbol asset symbol.\n', '     *\n', '     * @return asset name.\n', '     */\n', '    function name(bytes32 _symbol) constant returns(string) {\n', '        return assets[_symbol].name;\n', '    }\n', '\n', '    /**\n', '     * Returns asset description.\n', '     *\n', '     * @param _symbol asset symbol.\n', '     *\n', '     * @return asset description.\n', '     */\n', '    function description(bytes32 _symbol) constant returns(string) {\n', '        return assets[_symbol].description;\n', '    }\n', '\n', '    /**\n', '     * Returns asset reissuability.\n', '     *\n', '     * @param _symbol asset symbol.\n', '     *\n', '     * @return asset reissuability.\n', '     */\n', '    function isReissuable(bytes32 _symbol) constant returns(bool) {\n', '        return assets[_symbol].isReissuable;\n', '    }\n', '\n', '    /**\n', '     * Returns asset owner address.\n', '     *\n', '     * @param _symbol asset symbol.\n', '     *\n', '     * @return asset owner address.\n', '     */\n', '    function owner(bytes32 _symbol) constant returns(address) {\n', '        return holders[assets[_symbol].owner].addr;\n', '    }\n', '\n', '    /**\n', '     * Check if specified address has asset owner rights.\n', '     *\n', '     * @param _owner address to check.\n', '     * @param _symbol asset symbol.\n', '     *\n', '     * @return owner rights availability.\n', '     */\n', '    function isOwner(address _owner, bytes32 _symbol) constant returns(bool) {\n', '        return isCreated(_symbol) && (assets[_symbol].owner == getHolderId(_owner));\n', '    }\n', '\n', '    /**\n', '     * Returns asset total supply.\n', '     *\n', '     * @param _symbol asset symbol.\n', '     *\n', '     * @return asset total supply.\n', '     */\n', '    function totalSupply(bytes32 _symbol) constant returns(uint) {\n', '        return assets[_symbol].totalSupply;\n', '    }\n', '\n', '    /**\n', '     * Returns asset balance for current address of a particular holder.\n', '     *\n', '     * @param _holder holder address.\n', '     * @param _symbol asset symbol.\n', '     *\n', '     * @return holder balance.\n', '     */\n', '    function balanceOf(address _holder, bytes32 _symbol) constant returns(uint) {\n', '        uint holderId = getHolderId(_holder);\n', '        return holders[holderId].addr == _holder ? _balanceOf(holderId, _symbol) : 0;\n', '    }\n', '\n', '    /**\n', '     * Returns asset balance for a particular holder id.\n', '     *\n', '     * @param _holderId holder id.\n', '     * @param _symbol asset symbol.\n', '     *\n', '     * @return holder balance.\n', '     */\n', '    function _balanceOf(uint _holderId, bytes32 _symbol) constant internal returns(uint) {\n', '        return assets[_symbol].wallets[_holderId].balance;\n', '    }\n', '\n', '    /**\n', '     * Returns current address for a particular holder id.\n', '     *\n', '     * @param _holderId holder id.\n', '     *\n', '     * @return holder address.\n', '     */\n', '    function _address(uint _holderId) constant internal returns(address) {\n', '        return holders[_holderId].addr;\n', '    }\n', '\n', '    function _isProxy(bytes32 _symbol) constant internal returns(bool) {\n', '        return proxies[_symbol] == msg.sender;\n', '    }\n', '\n', '    /**\n', '     * Sets Proxy contract address for a particular asset.\n', '     *\n', '     * Can be set only once for each asset, and only by contract owner.\n', '     *\n', '     * @param _address Proxy contract address.\n', '     * @param _symbol asset symbol.\n', '     *\n', '     * @return success.\n', '     */\n', '    function setProxy(address _address, bytes32 _symbol) onlyOwner(_symbol) returns(bool) {\n', '        if (proxies[_symbol] != 0x0 && assets[_symbol].isLocked) {\n', '            return false;\n', '        }\n', '        proxies[_symbol] = _address;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Transfers asset balance between holders wallets.\n', '     *\n', '     * @param _fromId holder id to take from.\n', '     * @param _toId holder id to give to.\n', '     * @param _value amount to transfer.\n', '     * @param _symbol asset symbol.\n', '     */\n', '    function _transferDirect(uint _fromId, uint _toId, uint _value, bytes32 _symbol) internal {\n', '        assets[_symbol].wallets[_fromId].balance -= _value;\n', '        assets[_symbol].wallets[_toId].balance += _value;\n', '    }\n', '\n', '    /**\n', '     * Transfers asset balance between holders wallets.\n', '     *\n', '     * Performs sanity checks and takes care of allowances adjustment.\n', '     *\n', '     * @param _fromId holder id to take from.\n', '     * @param _toId holder id to give to.\n', '     * @param _value amount to transfer.\n', '     * @param _symbol asset symbol.\n', '     * @param _reference transfer comment to be included in a Transfer event.\n', '     * @param _senderId transfer initiator holder id.\n', '     *\n', '     * @return success.\n', '     */\n', '    function _transfer(uint _fromId, uint _toId, uint _value, bytes32 _symbol, string _reference, uint _senderId) internal checkSigned(_senderId, 1) returns(bool) {\n', '        // Should not allow to send to oneself.\n', '        if (_fromId == _toId) {\n', '            _error(&#39;Cannot send to oneself&#39;);\n', '            return false;\n', '        }\n', '        // Should have positive value.\n', '        if (_value == 0) {\n', '            _error(&#39;Cannot send 0 value&#39;);\n', '            return false;\n', '        }\n', '        // Should have enough balance.\n', '        if (_balanceOf(_fromId, _symbol) < _value) {\n', '            _error(&#39;Insufficient balance&#39;);\n', '            return false;\n', '        }\n', '        // Should allow references.\n', '        if (bytes(_reference).length > 0 && !isEnabled(sha3(_symbol, Features.TransferWithReference))) {\n', '            _error(&#39;References feature is disabled&#39;);\n', '            return false;\n', '        }\n', '        // Should have enough allowance.\n', '        if (_fromId != _senderId && _allowance(_fromId, _senderId, _symbol) < _value) {\n', '            _error(&#39;Not enough allowance&#39;);\n', '            return false;\n', '        }\n', '        // Adjust allowance.\n', '        if (_fromId != _senderId) {\n', '            assets[_symbol].wallets[_fromId].allowance[_senderId] -= _value;\n', '        }\n', '        _transferDirect(_fromId, _toId, _value, _symbol);\n', '        // Internal Out Of Gas/Throw: revert this transaction too;\n', '        // Recursive Call: safe, all changes already made.\n', '        eventsHistory.emitTransfer(_address(_fromId), _address(_toId), _symbol, _value, _reference);\n', '        _proxyTransferEvent(_fromId, _toId, _value, _symbol);\n', '        return true;\n', '    }\n', '\n', '    // Feature and proxy checks done internally due to unknown symbol when the function is called.\n', '    function _transferToICAP(uint _fromId, bytes32 _icap, uint _value, string _reference, uint _senderId) internal returns(bool) {\n', '        var (to, symbol, success) = registryICAP.parse(_icap);\n', '        if (!success) {\n', '            _error(&#39;ICAP is not registered&#39;);\n', '            return false;\n', '        }\n', '        if (!isEnabled(sha3(symbol, Features.ICAP))) {\n', '            _error(&#39;ICAP feature is disabled&#39;);\n', '            return false;\n', '        }\n', '        if (!_isProxy(symbol)) {\n', '            _error(&#39;Only proxy: access denied&#39;);\n', '            return false;\n', '        }\n', '        uint toId = _createHolderId(to);\n', '        if (!_transfer(_fromId, toId, _value, symbol, _reference, _senderId)) {\n', '            return false;\n', '        }\n', '        // Internal Out Of Gas/Throw: revert this transaction too;\n', '        // Recursive Call: safe, all changes already made.\n', '        eventsHistory.emitTransferToICAP(_address(_fromId), _address(toId), _icap, _value, _reference);\n', '        return true;\n', '    }\n', '\n', '    function proxyTransferFromToICAPWithReference(address _from, bytes32 _icap, uint _value, string _reference, address _sender) returns(bool) {\n', '        return _transferToICAP(getHolderId(_from), _icap, _value, _reference, getHolderId(_sender));\n', '    }\n', '\n', '    /**\n', '     * Ask asset Proxy contract to emit ERC20 compliant Transfer event.\n', '     *\n', '     * @param _fromId holder id to take from.\n', '     * @param _toId holder id to give to.\n', '     * @param _value amount to transfer.\n', '     * @param _symbol asset symbol.\n', '     */\n', '    function _proxyTransferEvent(uint _fromId, uint _toId, uint _value, bytes32 _symbol) internal {\n', '        if (proxies[_symbol] != 0x0) {\n', '            // Internal Out Of Gas/Throw: revert this transaction too;\n', '            // Recursive Call: safe, all changes already made.\n', '            Proxy(proxies[_symbol]).emitTransfer(_address(_fromId), _address(_toId), _value);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Returns holder id for the specified address.\n', '     *\n', '     * @param _holder holder address.\n', '     *\n', '     * @return holder id.\n', '     */\n', '    function getHolderId(address _holder) constant returns(uint) {\n', '        return holderIndex[_holder];\n', '    }\n', '\n', '    /**\n', '     * Returns holder id for the specified address, creates it if needed.\n', '     *\n', '     * @param _holder holder address.\n', '     *\n', '     * @return holder id.\n', '     */\n', '    function _createHolderId(address _holder) internal returns(uint) {\n', '        uint holderId = holderIndex[_holder];\n', '        if (holderId == 0) {\n', '            holderId = ++holdersCount;\n', '            holders[holderId].addr = _holder;\n', '            holderIndex[_holder] = holderId;\n', '        }\n', '        return holderId;\n', '    }\n', '\n', '    /**\n', '     * Issues new asset token on the platform.\n', '     *\n', '     * Tokens issued with this call go straight to contract owner.\n', '     * Each symbol can be issued only once, and only by contract owner.\n', '     *\n', '     * _isReissuable is included in checkEnabledSwitch because it should be\n', '     * explicitly allowed before issuing new asset.\n', '     *\n', '     * @param _symbol asset symbol.\n', '     * @param _value amount of tokens to issue immediately.\n', '     * @param _name name of the asset.\n', '     * @param _description description for the asset.\n', '     * @param _baseUnit number of decimals.\n', '     * @param _isReissuable dynamic or fixed supply.\n', '     *\n', '     * @return success.\n', '     */\n', '    function issueAsset(bytes32 _symbol, uint _value, string _name, string _description, uint8 _baseUnit, bool _isReissuable) checkEnabledSwitch(sha3(_symbol, _isReissuable, Features.Issue)) returns(bool) {\n', '        // Should have positive value if supply is going to be fixed.\n', '        if (_value == 0 && !_isReissuable) {\n', '            _error(&#39;Cannot issue 0 value fixed asset&#39;);\n', '            return false;\n', '        }\n', '        // Should not be issued yet.\n', '        if (isCreated(_symbol)) {\n', '            _error(&#39;Asset already issued&#39;);\n', '            return false;\n', '        }\n', '        uint holderId = _createHolderId(msg.sender);\n', '\n', '        assets[_symbol] = Asset(holderId, _value, _name, _description, _isReissuable, _baseUnit, false);\n', '        assets[_symbol].wallets[holderId].balance = _value;\n', '        // Internal Out Of Gas/Throw: revert this transaction too;\n', '        // Recursive Call: safe, all changes already made.\n', '        eventsHistory.emitIssue(_symbol, _value, _address(holderId));\n', '        return true;\n', '    }\n', '\n', '    function changeAsset(bytes32 _symbol, string _name, string _description, uint8 _baseUnit) onlyOwner(_symbol) returns(bool) {\n', '        if (isLocked(_symbol)) {\n', '            _error(&#39;Asset is locked&#39;);\n', '            return false;\n', '        }\n', '        assets[_symbol].name = _name;\n', '        assets[_symbol].description = _description;\n', '        assets[_symbol].baseUnit = _baseUnit;\n', '        eventsHistory.emitChange(_symbol);\n', '        return true;\n', '    }\n', '\n', '    function lockAsset(bytes32 _symbol) onlyOwner(_symbol) returns(bool) {\n', '        if (isLocked(_symbol)) {\n', '            _error(&#39;Asset is locked&#39;);\n', '            return false;\n', '        }\n', '        assets[_symbol].isLocked = true;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Issues additional asset tokens if the asset have dynamic supply.\n', '     *\n', '     * Tokens issued with this call go straight to asset owner.\n', '     * Can only be called by asset owner.\n', '     *\n', '     * @param _symbol asset symbol.\n', '     * @param _value amount of additional tokens to issue.\n', '     *\n', '     * @return success.\n', '     */\n', '    function reissueAsset(bytes32 _symbol, uint _value) onlyOwner(_symbol) returns(bool) {\n', '        // Should have positive value.\n', '        if (_value == 0) {\n', '            _error(&#39;Cannot reissue 0 value&#39;);\n', '            return false;\n', '        }\n', '        Asset asset = assets[_symbol];\n', '        // Should have dynamic supply.\n', '        if (!asset.isReissuable) {\n', '            _error(&#39;Cannot reissue fixed asset&#39;);\n', '            return false;\n', '        }\n', '        // Resulting total supply should not overflow.\n', '        if (asset.totalSupply + _value < asset.totalSupply) {\n', '            _error(&#39;Total supply overflow&#39;);\n', '            return false;\n', '        }\n', '        uint holderId = getHolderId(msg.sender);\n', '        asset.wallets[holderId].balance += _value;\n', '        asset.totalSupply += _value;\n', '        // Internal Out Of Gas/Throw: revert this transaction too;\n', '        // Recursive Call: safe, all changes already made.\n', '        eventsHistory.emitIssue(_symbol, _value, _address(holderId));\n', '        _proxyTransferEvent(0, holderId, _value, _symbol);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroys specified amount of senders asset tokens.\n', '     *\n', '     * @param _symbol asset symbol.\n', '     * @param _value amount of tokens to destroy.\n', '     *\n', '     * @return success.\n', '     */\n', '    function revokeAsset(bytes32 _symbol, uint _value) checkEnabledSwitch(sha3(_symbol, Features.Revoke)) checkSigned(getHolderId(msg.sender), 1) returns(bool) {\n', '        // Should have positive value.\n', '        if (_value == 0) {\n', '            _error(&#39;Cannot revoke 0 value&#39;);\n', '            return false;\n', '        }\n', '        Asset asset = assets[_symbol];\n', '        uint holderId = getHolderId(msg.sender);\n', '        // Should have enough tokens.\n', '        if (asset.wallets[holderId].balance < _value) {\n', '            _error(&#39;Not enough tokens to revoke&#39;);\n', '            return false;\n', '        }\n', '        asset.wallets[holderId].balance -= _value;\n', '        asset.totalSupply -= _value;\n', '        // Internal Out Of Gas/Throw: revert this transaction too;\n', '        // Recursive Call: safe, all changes already made.\n', '        eventsHistory.emitRevoke(_symbol, _value, _address(holderId));\n', '        _proxyTransferEvent(holderId, 0, _value, _symbol);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Passes asset ownership to specified address.\n', '     *\n', '     * Only ownership is changed, balances are not touched.\n', '     * Can only be called by asset owner.\n', '     *\n', '     * @param _symbol asset symbol.\n', '     * @param _newOwner address to become a new owner.\n', '     *\n', '     * @return success.\n', '     */\n', '    function changeOwnership(bytes32 _symbol, address _newOwner) checkEnabledSwitch(sha3(_symbol, Features.ChangeOwnership)) onlyOwner(_symbol) returns(bool) {\n', '        Asset asset = assets[_symbol];\n', '        uint newOwnerId = _createHolderId(_newOwner);\n', '        // Should pass ownership to another holder.\n', '        if (asset.owner == newOwnerId) {\n', '            _error(&#39;Cannot pass ownership to oneself&#39;);\n', '            return false;\n', '        }\n', '        address oldOwner = _address(asset.owner);\n', '        asset.owner = newOwnerId;\n', '        // Internal Out Of Gas/Throw: revert this transaction too;\n', '        // Recursive Call: safe, all changes already made.\n', '        eventsHistory.emitOwnershipChange(oldOwner, _address(newOwnerId), _symbol);\n', '        return true;\n', '    }\n', '\n', '    function setCosignerAddress(Cosigner _cosigner) checkSigned(_createHolderId(msg.sender), 1) returns(bool) {\n', '        if (!_checkSigned(_cosigner, getHolderId(msg.sender), 1)) {\n', '            _error(&#39;Invalid cosigner&#39;);\n', '            return false;\n', '        }\n', '        holders[_createHolderId(msg.sender)].cosigner = _cosigner;\n', '        return true;\n', '    }\n', '\n', '    function isCosignerSet(uint _holderId) constant returns(bool) {\n', '        return address(holders[_holderId].cosigner) != 0x0;\n', '    }\n', '\n', '    function _checkSigned(Cosigner _cosigner, uint _holderId, uint _required) internal returns(bool) {\n', '        return _cosigner.consumeOperation(sha3(msg.data, _holderId), _required);\n', '    }\n', '\n', '    modifier checkSigned(uint _holderId, uint _required) {\n', '        if (!isCosignerSet(_holderId) || _checkSigned(holders[_holderId].cosigner, _holderId, _required)) {\n', '            _;\n', '        } else {\n', '            _error(&#39;Cosigner: access denied&#39;);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Check if specified holder trusts an address with recovery procedure.\n', '     *\n', '     * @param _from truster.\n', '     * @param _to trustee.\n', '     *\n', '     * @return trust existance.\n', '     */\n', '    function isTrusted(address _from, address _to) constant returns(bool) {\n', '        return holders[getHolderId(_from)].trust[_to];\n', '    }\n', '\n', '    /**\n', '     * Trust an address to perform recovery procedure for the caller.\n', '     *\n', '     * @param _to trustee.\n', '     *\n', '     * @return success.\n', '     */\n', '    function trust(address _to) returns(bool) {\n', '        uint fromId = _createHolderId(msg.sender);\n', '        // Should trust to another address.\n', '        if (fromId == getHolderId(_to)) {\n', '            _error(&#39;Cannot trust to oneself&#39;);\n', '            return false;\n', '        }\n', '        // Should trust to yet untrusted.\n', '        if (isTrusted(msg.sender, _to)) {\n', '            _error(&#39;Already trusted&#39;);\n', '            return false;\n', '        }\n', '        holders[fromId].trust[_to] = true;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Revoke trust to perform recovery procedure from an address.\n', '     *\n', '     * @param _to trustee.\n', '     *\n', '     * @return success.\n', '     */\n', '    function distrust(address _to) checkTrust(msg.sender, _to) returns(bool) {\n', '        holders[getHolderId(msg.sender)].trust[_to] = false;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Perform recovery procedure.\n', '     *\n', '     * This function logic is actually more of an grantAccess(uint _holderId, address _to).\n', '     * It grants another address access to recovery subject wallets.\n', '     * Can only be called by trustee of recovery subject.\n', '     * If cosigning is enabled, should have atleast 2 confirmations.\n', '     *\n', '     * @dev Deprecated. Backward compatibility.\n', '     *\n', '     * @param _from holder address to recover from.\n', '     * @param _to address to grant access to.\n', '     *\n', '     * @return success.\n', '     */\n', '    function recover(address _from, address _to) checkTrust(_from, msg.sender) returns(bool) {\n', '        return _grantAccess(getHolderId(_from), _to);\n', '    }\n', '\n', '    /**\n', '     * Perform recovery procedure.\n', '     *\n', '     * This function logic is actually more of an grantAccess(uint _holderId, address _to).\n', '     * It grants another address access to subject holder wallets.\n', '     * Can only be called if pre-confirmed by atleast 2 cosign oracles.\n', '     *\n', '     * @param _from holder address to recover from.\n', '     * @param _to address to grant access to.\n', '     *\n', '     * @return success.\n', '     */\n', '    function grantAccess(address _from, address _to) returns(bool) {\n', '        if (!isCosignerSet(getHolderId(_from))) {\n', '            _error(&#39;Cosigner not set&#39;);\n', '            return false;\n', '        }\n', '        return _grantAccess(getHolderId(_from), _to);\n', '    }\n', '\n', '    function _grantAccess(uint _fromId, address _to) internal checkSigned(_fromId, 2) returns(bool) {\n', '        // Should recover to previously unused address.\n', '        if (getHolderId(_to) != 0) {\n', '            _error(&#39;Should recover to new address&#39;);\n', '            return false;\n', '        }\n', '        // We take current holder address because it might not equal _from.\n', '        // It is possible to recover from any old holder address, but event should have the current one.\n', '        address from = holders[_fromId].addr;\n', '        holders[_fromId].addr = _to;\n', '        holderIndex[_to] = _fromId;\n', '        // Internal Out Of Gas/Throw: revert this transaction too;\n', '        // Recursive Call: safe, all changes already made.\n', '        eventsHistory.emitRecovery(from, _to, msg.sender);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Sets asset spending allowance for a specified spender.\n', '     *\n', '     * Note: to revoke allowance, one needs to set allowance to 0.\n', '     *\n', '     * @param _spenderId holder id to set allowance for.\n', '     * @param _value amount to allow.\n', '     * @param _symbol asset symbol.\n', '     * @param _senderId approve initiator holder id.\n', '     *\n', '     * @return success.\n', '     */\n', '    function _approve(uint _spenderId, uint _value, bytes32 _symbol, uint _senderId) internal checkEnabledSwitch(sha3(_symbol, Features.Allowances)) checkSigned(_senderId, 1) returns(bool) {\n', '        // Asset should exist.\n', '        if (!isCreated(_symbol)) {\n', '            _error(&#39;Asset is not issued&#39;);\n', '            return false;\n', '        }\n', '        // Should allow to another holder.\n', '        if (_senderId == _spenderId) {\n', '            _error(&#39;Cannot approve to oneself&#39;);\n', '            return false;\n', '        }\n', '        assets[_symbol].wallets[_senderId].allowance[_spenderId] = _value;\n', '        // Internal Out Of Gas/Throw: revert this transaction too;\n', '        // Recursive Call: safe, all changes already made.\n', '        eventsHistory.emitApprove(_address(_senderId), _address(_spenderId), _symbol, _value);\n', '        if (proxies[_symbol] != 0x0) {\n', '            // Internal Out Of Gas/Throw: revert this transaction too;\n', '            // Recursive Call: safe, all changes already made.\n', '            Proxy(proxies[_symbol]).emitApprove(_address(_senderId), _address(_spenderId), _value);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Sets asset spending allowance for a specified spender.\n', '     *\n', '     * Can only be called by asset proxy.\n', '     *\n', '     * @param _spender holder address to set allowance to.\n', '     * @param _value amount to allow.\n', '     * @param _symbol asset symbol.\n', '     * @param _sender approve initiator address.\n', '     *\n', '     * @return success.\n', '     */\n', '    function proxyApprove(address _spender, uint _value, bytes32 _symbol, address _sender) onlyProxy(_symbol) returns(bool) {\n', '        return _approve(_createHolderId(_spender), _value, _symbol, _createHolderId(_sender));\n', '    }\n', '\n', '    /**\n', '     * Returns asset allowance from one holder to another.\n', '     *\n', '     * @param _from holder that allowed spending.\n', '     * @param _spender holder that is allowed to spend.\n', '     * @param _symbol asset symbol.\n', '     *\n', '     * @return holder to spender allowance.\n', '     */\n', '    function allowance(address _from, address _spender, bytes32 _symbol) constant returns(uint) {\n', '        return _allowance(getHolderId(_from), getHolderId(_spender), _symbol);\n', '    }\n', '\n', '    /**\n', '     * Returns asset allowance from one holder to another.\n', '     *\n', '     * @param _fromId holder id that allowed spending.\n', '     * @param _toId holder id that is allowed to spend.\n', '     * @param _symbol asset symbol.\n', '     *\n', '     * @return holder to spender allowance.\n', '     */\n', '    function _allowance(uint _fromId, uint _toId, bytes32 _symbol) constant internal returns(uint) {\n', '        return assets[_symbol].wallets[_fromId].allowance[_toId];\n', '    }\n', '\n', '    /**\n', '     * Prforms allowance transfer of asset balance between holders wallets.\n', '     *\n', '     * Can only be called by asset proxy.\n', '     *\n', '     * @param _from holder address to take from.\n', '     * @param _to holder address to give to.\n', '     * @param _value amount to transfer.\n', '     * @param _symbol asset symbol.\n', '     * @param _reference transfer comment to be included in a Transfer event.\n', '     * @param _sender allowance transfer initiator address.\n', '     *\n', '     * @return success.\n', '     */\n', '    function proxyTransferFromWithReference(address _from, address _to, uint _value, bytes32 _symbol, string _reference, address _sender) onlyProxy(_symbol) returns(bool) {\n', '        return _transfer(getHolderId(_from), _createHolderId(_to), _value, _symbol, _reference, getHolderId(_sender));\n', '    }\n', '}']