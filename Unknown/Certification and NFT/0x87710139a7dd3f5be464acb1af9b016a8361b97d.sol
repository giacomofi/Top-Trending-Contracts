['pragma solidity ^0.4.11;\n', '\n', '// import "browser/ERC223BasicToken.sol";\n', '\n', '// import "browser/SafeMath.sol";\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      throw;\n', '    }\n', '  }\n', '}\n', '\n', '// end import\n', '\n', '\n', 'contract ERC223Basic {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) constant returns (uint);\n', '  function transfer(address to, uint value);\n', '  function transfer(address to, uint value, bytes data);\n', '  event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n', '}\n', '\n', ' /*\n', ' * Contract that is working with ERC223 tokens\n', ' */\n', 'contract ERC223ReceivingContract {\n', '  function tokenFallback(address _from, uint _value, bytes _data);\n', '}\n', '\n', '\n', 'contract ERC223BasicToken is ERC223Basic {\n', '  using SafeMath for uint;\n', '\n', '  mapping(address => uint) balances;\n', '\n', '  // Function that is called when a user or another contract wants to transfer funds .\n', '  function transfer(address to, uint value, bytes data) {\n', '    // Standard function transfer similar to ERC20 transfer with no _data .\n', '    // Added due to backwards compatibility reasons .\n', '    uint codeLength;\n', '\n', '    assembly {\n', '      // Retrieve the size of the code on target address, this needs assembly .\n', '      codeLength := extcodesize(to)\n', '    }\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(value);\n', '    balances[to] = balances[to].add(value);\n', '    if (codeLength > 0) {\n', '      ERC223ReceivingContract receiver = ERC223ReceivingContract(to);\n', '      receiver.tokenFallback(msg.sender, value, data);\n', '    }\n', '    Transfer(msg.sender, to, value, data);\n', '  }\n', '\n', '  // Standard function transfer similar to ERC20 transfer with no _data .\n', '  // Added due to backwards compatibility reasons .\n', '  function transfer(address to, uint value) {\n', '    uint codeLength;\n', '\n', '    assembly {\n', '      // Retrieve the size of the code on target address, this needs assembly .\n', '      codeLength := extcodesize(to)\n', '    }\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(value);\n', '    balances[to] = balances[to].add(value);\n', '    if (codeLength > 0) {\n', '      ERC223ReceivingContract receiver = ERC223ReceivingContract(to);\n', '      bytes memory empty;\n', '      receiver.tokenFallback(msg.sender, value, empty);\n', '    }\n', '    Transfer(msg.sender, to, value, empty);\n', '  }\n', '\n', '  function balanceOf(address _owner) constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '// end import\n', '\n', 'contract PreTgeExperty is ERC223BasicToken {\n', '\n', '  // token constants\n', '  string public constant name = "Pre-TGE Experty Token";\n', '  string public constant symbol = "PEXY";\n', '  uint8 public constant decimals = 18;\n', '\n', '  // pre-tge variables\n', '  uint8 public basicRate = 100;\n', '  uint8 public preTgeBonus = 45;\n', '  address public preTgeManager;\n', '  address public multisigWallet;\n', '  bool public isClosed = false;\n', '\n', '  // keep track of burned tokens here\n', '  mapping(address => uint) public burnedTokens;\n', '  \n', '  // preICO constructor\n', '  function PreTgeExperty() {\n', '    multisigWallet = 0x60f4025c67477edf3a8eda7d1bf6b3b035a664eb;\n', '    preTgeManager = 0x009A55A3c16953A359484afD299ebdC444200EdB;\n', '  }\n', '\n', '  // contribute function\n', '  function() payable {\n', '    // throw if pre-tge is closed\n', '    if (isClosed) throw;\n', '\n', '    uint ethers = msg.value;\n', '\n', '    // calculate tokens amount and pre-tge bonus\n', '    uint tokens = ethers * basicRate;\n', '    uint bonus = ethers * preTgeBonus;\n', '\n', '    // generate new tokens\n', '    uint sum = tokens + bonus;\n', '    balances[msg.sender] += sum;\n', '    totalSupply += sum;\n', '\n', '    // send ethers to secure wallet\n', '    multisigWallet.transfer(ethers);\n', '  }\n', '\n', '  // allow to burn pre-tge tokens in order to teleport them to new contract\n', '  function burnTokens(uint amount) {\n', '    if (amount > balances[msg.sender]) throw;\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(amount);\n', '    burnedTokens[msg.sender] = burnedTokens[msg.sender].add(amount);\n', '  }\n', '\n', '  // allow contract manager to decrease bonus over time\n', '  function changeBonus(uint8 _preTgeBonus) {\n', '    if (msg.sender != preTgeManager) throw;\n', '\n', '    // we can only decrease bonus\n', '    if (_preTgeBonus > preTgeBonus) throw;\n', '\n', '    preTgeBonus = _preTgeBonus;\n', '  }\n', '\n', '  // allow contract manager to close pre-tge\n', '  function close() {\n', '    if (msg.sender != preTgeManager) throw;\n', '\n', '    isClosed = true;\n', '  }\n', '\n', '}']
['pragma solidity ^0.4.11;\n', '\n', '// import "browser/ERC223BasicToken.sol";\n', '\n', '// import "browser/SafeMath.sol";\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      throw;\n', '    }\n', '  }\n', '}\n', '\n', '// end import\n', '\n', '\n', 'contract ERC223Basic {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) constant returns (uint);\n', '  function transfer(address to, uint value);\n', '  function transfer(address to, uint value, bytes data);\n', '  event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n', '}\n', '\n', ' /*\n', ' * Contract that is working with ERC223 tokens\n', ' */\n', 'contract ERC223ReceivingContract {\n', '  function tokenFallback(address _from, uint _value, bytes _data);\n', '}\n', '\n', '\n', 'contract ERC223BasicToken is ERC223Basic {\n', '  using SafeMath for uint;\n', '\n', '  mapping(address => uint) balances;\n', '\n', '  // Function that is called when a user or another contract wants to transfer funds .\n', '  function transfer(address to, uint value, bytes data) {\n', '    // Standard function transfer similar to ERC20 transfer with no _data .\n', '    // Added due to backwards compatibility reasons .\n', '    uint codeLength;\n', '\n', '    assembly {\n', '      // Retrieve the size of the code on target address, this needs assembly .\n', '      codeLength := extcodesize(to)\n', '    }\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(value);\n', '    balances[to] = balances[to].add(value);\n', '    if (codeLength > 0) {\n', '      ERC223ReceivingContract receiver = ERC223ReceivingContract(to);\n', '      receiver.tokenFallback(msg.sender, value, data);\n', '    }\n', '    Transfer(msg.sender, to, value, data);\n', '  }\n', '\n', '  // Standard function transfer similar to ERC20 transfer with no _data .\n', '  // Added due to backwards compatibility reasons .\n', '  function transfer(address to, uint value) {\n', '    uint codeLength;\n', '\n', '    assembly {\n', '      // Retrieve the size of the code on target address, this needs assembly .\n', '      codeLength := extcodesize(to)\n', '    }\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(value);\n', '    balances[to] = balances[to].add(value);\n', '    if (codeLength > 0) {\n', '      ERC223ReceivingContract receiver = ERC223ReceivingContract(to);\n', '      bytes memory empty;\n', '      receiver.tokenFallback(msg.sender, value, empty);\n', '    }\n', '    Transfer(msg.sender, to, value, empty);\n', '  }\n', '\n', '  function balanceOf(address _owner) constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '// end import\n', '\n', 'contract PreTgeExperty is ERC223BasicToken {\n', '\n', '  // token constants\n', '  string public constant name = "Pre-TGE Experty Token";\n', '  string public constant symbol = "PEXY";\n', '  uint8 public constant decimals = 18;\n', '\n', '  // pre-tge variables\n', '  uint8 public basicRate = 100;\n', '  uint8 public preTgeBonus = 45;\n', '  address public preTgeManager;\n', '  address public multisigWallet;\n', '  bool public isClosed = false;\n', '\n', '  // keep track of burned tokens here\n', '  mapping(address => uint) public burnedTokens;\n', '  \n', '  // preICO constructor\n', '  function PreTgeExperty() {\n', '    multisigWallet = 0x60f4025c67477edf3a8eda7d1bf6b3b035a664eb;\n', '    preTgeManager = 0x009A55A3c16953A359484afD299ebdC444200EdB;\n', '  }\n', '\n', '  // contribute function\n', '  function() payable {\n', '    // throw if pre-tge is closed\n', '    if (isClosed) throw;\n', '\n', '    uint ethers = msg.value;\n', '\n', '    // calculate tokens amount and pre-tge bonus\n', '    uint tokens = ethers * basicRate;\n', '    uint bonus = ethers * preTgeBonus;\n', '\n', '    // generate new tokens\n', '    uint sum = tokens + bonus;\n', '    balances[msg.sender] += sum;\n', '    totalSupply += sum;\n', '\n', '    // send ethers to secure wallet\n', '    multisigWallet.transfer(ethers);\n', '  }\n', '\n', '  // allow to burn pre-tge tokens in order to teleport them to new contract\n', '  function burnTokens(uint amount) {\n', '    if (amount > balances[msg.sender]) throw;\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(amount);\n', '    burnedTokens[msg.sender] = burnedTokens[msg.sender].add(amount);\n', '  }\n', '\n', '  // allow contract manager to decrease bonus over time\n', '  function changeBonus(uint8 _preTgeBonus) {\n', '    if (msg.sender != preTgeManager) throw;\n', '\n', '    // we can only decrease bonus\n', '    if (_preTgeBonus > preTgeBonus) throw;\n', '\n', '    preTgeBonus = _preTgeBonus;\n', '  }\n', '\n', '  // allow contract manager to close pre-tge\n', '  function close() {\n', '    if (msg.sender != preTgeManager) throw;\n', '\n', '    isClosed = true;\n', '  }\n', '\n', '}']
