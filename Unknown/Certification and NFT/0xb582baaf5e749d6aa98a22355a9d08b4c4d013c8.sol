['contract TokenInterface {\n', '    uint totalSupply;\n', '    function balanceOf(address owner) constant returns (uint256 balance);\n', '    \n', '    function transfer(address to, uint256 value) returns (bool success);\n', '\n', '    function transferFrom(address from, address to, uint256 value) returns (bool success);\n', '    function approve(address spender, uint256 value) returns (bool success);\n', '    function allowance(address owner, address spender) constant returns (uint256 remaining);\n', '\n', '    // events notifications\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', 'contract StandardToken is TokenInterface {\n', '\n', '    mapping (address => uint256) balances;\n', '\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    \n', '    function StandardToken(){\n', '    }\n', '    function transfer(address to, uint256 value) returns (bool success) {\n', '        \n', '        \n', '        if (balances[msg.sender] >= value && value > 0) {\n', '\n', '            // do actual tokens transfer       \n', '            balances[msg.sender] -= value;\n', '            balances[to]         += value;\n', '            \n', '            // rise the Transfer event\n', '            Transfer(msg.sender, to, value);\n', '            return true;\n', '        } else {\n', '            \n', '            return false; \n', '        }\n', '    }\n', '    \n', '    function transferFrom(address from, address to, uint256 value) returns (bool success) {\n', '    \n', '        if ( balances[from] >= value && \n', '             allowed[from][msg.sender] >= value && \n', '             value > 0) {\n', '                                          \n', '    \n', '            // do the actual transfer\n', '            balances[from] -= value;    \n', '            balances[to] =+ value;            \n', '            \n', '\n', '            // addjust the permision, after part of \n', '            // permited to spend value was used\n', '            allowed[from][msg.sender] -= value;\n', '            \n', '            // rise the Transfer event\n', '            Transfer(from, to, value);\n', '            return true;\n', '        } else { \n', '            \n', '            return false; \n', '        }\n', '    }\n', '    function balanceOf(address owner) constant returns (uint256 balance) {\n', '        return balances[owner];\n', '    }\n', '\n', '    function approve(address spender, uint256 value) returns (bool success) {\n', '        \n', '        allowed[msg.sender][spender] = value;\n', '        Approval(msg.sender, spender, value);\n', '        \n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) constant returns (uint256 remaining) {\n', '      return allowed[owner][spender];\n', '    }\n', '\n', '}\n', 'contract HackerGold is StandardToken {\n', '\n', '    string public name = "HackerGold";\n', '\n', '    uint8  public decimals = 3;\n', '    string public symbol = "HKG";\n', '    \n', '    uint BASE_PRICE = 200;\n', '    uint MID_PRICE = 150;\n', '    uint FIN_PRICE = 100;\n', '    uint SAFETY_LIMIT = 4000000 ether;\n', '    uint DECIMAL_ZEROS = 1000;\n', '    \n', '    uint totalValue;\n', '    \n', '    address wallet;\n', '\n', '    struct milestones_struct {\n', '      uint p1;\n', '      uint p2; \n', '      uint p3;\n', '      uint p4;\n', '      uint p5;\n', '      uint p6;\n', '    }\n', '    // Milestones instance\n', '    milestones_struct milestones;\n', '    \n', '    function HackerGold(address multisig) {\n', '        \n', '        wallet = multisig;\n', '\n', '        // set time periods for sale\n', '        milestones = milestones_struct(\n', '        \n', '          1476799200,  // P1: GMT: 18-Oct-2016 14:00  => The Sale Starts\n', '          1478181600,  // P2: GMT: 03-Nov-2016 14:00  => 1st Price Ladder \n', '          1479391200,  // P3: GMT: 17-Nov-2016 14:00  => Price Stable, \n', '                       //                                Hackathon Starts\n', '          1480600800,  // P4: GMT: 01-Dec-2016 14:00  => 2nd Price Ladder\n', '          1481810400,  // P5: GMT: 15-Dec-2016 14:00  => Price Stable\n', '          1482415200   // P6: GMT: 22-Dec-2016 14:00  => Sale Ends, Hackathon Ends\n', '        );\n', '                \n', '    }\n', '    \n', '    \n', '    /**\n', '     * Fallback function: called on ether sent.\n', '     * \n', '     * It calls to createHKG function with msg.sender \n', '     * as a value for holder argument\n', '     */\n', '    function () payable {\n', '        createHKG(msg.sender);\n', '    }\n', '    \n', '    /**\n', '     * Creates HKG tokens.\n', '     * \n', '     * Runs sanity checks including safety cap\n', '     * Then calculates current price by getPrice() function, creates HKG tokens\n', '     * Finally sends a value of transaction to the wallet\n', '     * \n', '     * Note: due to lack of floating point types in Solidity,\n', '     * contract assumes that last 3 digits in tokens amount are stood after the point.\n', '     * It means that if stored HKG balance is 100000, then its real value is 100 HKG\n', '     * \n', '     * @param holder token holder\n', '     */\n', '    function createHKG(address holder) payable {\n', '        \n', '        if (now < milestones.p1) throw;\n', '        if (now >= milestones.p6) throw;\n', '        if (msg.value == 0) throw;\n', '    \n', '        // safety cap\n', '        if (getTotalValue() + msg.value > SAFETY_LIMIT) throw; \n', '    \n', '        uint tokens = msg.value * getPrice() * DECIMAL_ZEROS / 1 ether;\n', '\n', '        totalSupply += tokens;\n', '        balances[holder] += tokens;\n', '        totalValue += msg.value;\n', '        \n', '        if (!wallet.send(msg.value)) throw;\n', '    }\n', '    \n', '    /**\n', '     * Denotes complete price structure during the sale.\n', '     *\n', '     * @return HKG amount per 1 ETH for the current moment in time\n', '     */\n', '    function getPrice() constant returns (uint result) {\n', '        \n', '        if (now < milestones.p1) return 0;\n', '        \n', '        if (now >= milestones.p1 && now < milestones.p2) {\n', '        \n', '            return BASE_PRICE;\n', '        }\n', '        \n', '        if (now >= milestones.p2 && now < milestones.p3) {\n', '            \n', '            uint days_in = 1 + (now - milestones.p2) / 1 days; \n', '            return BASE_PRICE - days_in * 25 / 7;  // daily decrease 3.5\n', '        }\n', '\n', '        if (now >= milestones.p3 && now < milestones.p4) {\n', '        \n', '            return MID_PRICE;\n', '        }\n', '        \n', '        if (now >= milestones.p4 && now < milestones.p5) {\n', '            \n', '            days_in = 1 + (now - milestones.p4) / 1 days; \n', '            return MID_PRICE - days_in * 25 / 7;  // daily decrease 3.5\n', '        }\n', '\n', '        if (now >= milestones.p5 && now < milestones.p6) {\n', '        \n', '            return FIN_PRICE;\n', '        }\n', '        \n', '        if (now >= milestones.p6){\n', '\n', '            return 0;\n', '        }\n', '\n', '     }\n', '    \n', '    /**\n', '     * Returns total stored HKG amount.\n', '     * \n', '     * Contract assumes that last 3 digits of this value are behind the decimal place. i.e. 10001 is 10.001\n', '     * Thus, result of this function should be divided by 1000 to get HKG value\n', '     * \n', '     * @return result stored HKG amount\n', '     */\n', '    function getTotalSupply() constant returns (uint result) {\n', '        return totalSupply;\n', '    } \n', '\n', '    /**\n', '     * It is used for test purposes.\n', '     * \n', "     * Returns the result of 'now' statement of Solidity language\n", '     * \n', '     * @return unix timestamp for current moment in time\n', '     */\n', '    function getNow() constant returns (uint result) {\n', '        return now;\n', '    }\n', '\n', '    /**\n', '     * Returns total value passed through the contract\n', '     * \n', '     * @return result total value in wei\n', '     */\n', '    function getTotalValue() constant returns (uint result) {\n', '        return totalValue;  \n', '    }\n', '}']