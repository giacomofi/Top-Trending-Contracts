['pragma solidity ^0.4.11;\n', '\n', 'contract IERC20 {\n', '    function totalSupply() constant returns (uint256 totalSupply);\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Panel is IERC20 {\n', '    \n', '    using SafeMath for uint256;\n', '  \n', '    string public symbol = &#39;PAN&#39;;\n', '\n', '    string public name = &#39;Panel&#39;;\n', '    \n', '    uint8 public constant decimals = 18;\n', '    \n', '    uint256 public constant tokensPerEther = 1000;\n', '    \n', '    uint256 public _totalSupply = 9999999000000000000000000;\n', '    \n', '    \n', '    uint256 public totalContribution = 0;\n', '    \n', '    uint256 public bonusSupply = 0;\n', '    \n', '    bool public purchasingAllowed = false;\n', '    \n', '    uint8 public currentSaleDay = 1; \n', '    uint8 public currentBonus = 100;\n', '    \n', '    string public startDate = &#39;2017-09-16 18:00&#39;;\n', '    \n', '    address public owner;\n', '    \n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    mapping(address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '    \n', '    function Panel() {\n', '        owner = msg.sender;\n', '        balances[msg.sender] = _totalSupply;\n', '    }\n', '    \n', '    function changeStartDate(string _startDate){\n', '        require(\n', '            msg.sender==owner\n', '        );\n', '        startDate = _startDate;\n', '    }\n', '    \n', '    function totalSupply() constant returns (uint256 totalSupply) {\n', '        return _totalSupply;\n', '    }\n', '   \n', '    function getStats() constant returns (uint256, uint256, uint256,  bool, uint256, uint256, string) {\n', '        return (totalContribution, _totalSupply, bonusSupply, purchasingAllowed, currentSaleDay, currentBonus, startDate);\n', '    }\n', '    \n', '    function transferOwnership(address _newOwner) onlyOwner {\n', '        owner = _newOwner;\n', '    }\n', '    \n', '     function rebrand(string _symbol, string _name) onlyOwner {\n', '        symbol = _symbol;\n', '        name   = _name;\n', '     }\n', '\n', '    \n', '    function withdraw() onlyOwner {\n', '        owner.transfer(this.balance);\n', '    }\n', '    /* \n', '     * create payable token. Now you can purchase it\n', '     *\n', '     */\n', '    function () payable {\n', '        require(\n', '            msg.value > 0\n', '            && purchasingAllowed\n', '        );\n', '        /*  everything is in wei */\n', '        uint256 baseTokens  = msg.value.mul(tokensPerEther);\n', '        uint256 bonusTokens = msg.value.mul(currentBonus);\n', '        /* send tokens to buyer. Buyer gets baseTokens + bonusTokens */\n', '        balances[msg.sender] = balances[msg.sender].add(baseTokens).add(bonusTokens);\n', '        /* send eth to owner */\n', '        owner.transfer(msg.value);\n', '        \n', '        bonusSupply       = bonusSupply.add(bonusTokens);\n', '        totalContribution = totalContribution.add(msg.value);\n', '        _totalSupply      = _totalSupply.add(baseTokens).add(bonusTokens);\n', '\n', '        Transfer(address(this), msg.sender, baseTokens.add(bonusTokens));\n', '    }\n', '    \n', '    function enablePurchasing() onlyOwner {\n', '        purchasingAllowed = true;\n', '    }\n', '    \n', '    function disablePurchasing() onlyOwner {\n', '        purchasingAllowed = false;\n', '    }\n', '    \n', '    function setCurrentSaleDayAndBonus(uint8 _day) onlyOwner {\n', '        require(\n', '            (_day > 0 && _day < 11) \n', '        );\n', '\n', '        currentBonus = 10; \n', '        currentSaleDay = _day;\n', '\n', '        if(_day==1) {\n', '            currentBonus = 100;\n', '        } \n', '        if(_day==2) {\n', '            currentBonus = 75;\n', '        }\n', '        if(_day>=3 && _day<5) {\n', '            currentBonus = 50;\n', '        }\n', '        if(_day>=5 && _day<8) {\n', '            currentBonus = 25;\n', '        }\n', '\n', '        \n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        require(\n', '            (balances[msg.sender] >= _value)\n', '            && (_value > 0)\n', '            && (_to != address(0))\n', '            && (balances[_to].add(_value) >= balances[_to])\n', '            && (msg.data.length >= (2 * 32) + 4)\n', '        );\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        require(\n', '            (allowed[_from][msg.sender] >= _value) // Check allowance\n', '            && (balances[_from] >= _value) // Check if the sender has enough\n', '            && (_value > 0) // Don&#39;t allow 0value transfer\n', '            && (_to != address(0)) // Prevent transfer to 0x0 address\n', '            && (balances[_to].add(_value) >= balances[_to]) // Check for overflows\n', '            && (msg.data.length >= (2 * 32) + 4) //mitigates the ERC20 short address attack\n', '            //most of these things are not necesary\n', '        );\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        \n', '        require(\n', '            (_value == 0) \n', '            || (allowed[msg.sender][_spender] == 0)\n', '        );\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '}']
['pragma solidity ^0.4.11;\n', '\n', 'contract IERC20 {\n', '    function totalSupply() constant returns (uint256 totalSupply);\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Panel is IERC20 {\n', '    \n', '    using SafeMath for uint256;\n', '  \n', "    string public symbol = 'PAN';\n", '\n', "    string public name = 'Panel';\n", '    \n', '    uint8 public constant decimals = 18;\n', '    \n', '    uint256 public constant tokensPerEther = 1000;\n', '    \n', '    uint256 public _totalSupply = 9999999000000000000000000;\n', '    \n', '    \n', '    uint256 public totalContribution = 0;\n', '    \n', '    uint256 public bonusSupply = 0;\n', '    \n', '    bool public purchasingAllowed = false;\n', '    \n', '    uint8 public currentSaleDay = 1; \n', '    uint8 public currentBonus = 100;\n', '    \n', "    string public startDate = '2017-09-16 18:00';\n", '    \n', '    address public owner;\n', '    \n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    mapping(address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '    \n', '    function Panel() {\n', '        owner = msg.sender;\n', '        balances[msg.sender] = _totalSupply;\n', '    }\n', '    \n', '    function changeStartDate(string _startDate){\n', '        require(\n', '            msg.sender==owner\n', '        );\n', '        startDate = _startDate;\n', '    }\n', '    \n', '    function totalSupply() constant returns (uint256 totalSupply) {\n', '        return _totalSupply;\n', '    }\n', '   \n', '    function getStats() constant returns (uint256, uint256, uint256,  bool, uint256, uint256, string) {\n', '        return (totalContribution, _totalSupply, bonusSupply, purchasingAllowed, currentSaleDay, currentBonus, startDate);\n', '    }\n', '    \n', '    function transferOwnership(address _newOwner) onlyOwner {\n', '        owner = _newOwner;\n', '    }\n', '    \n', '     function rebrand(string _symbol, string _name) onlyOwner {\n', '        symbol = _symbol;\n', '        name   = _name;\n', '     }\n', '\n', '    \n', '    function withdraw() onlyOwner {\n', '        owner.transfer(this.balance);\n', '    }\n', '    /* \n', '     * create payable token. Now you can purchase it\n', '     *\n', '     */\n', '    function () payable {\n', '        require(\n', '            msg.value > 0\n', '            && purchasingAllowed\n', '        );\n', '        /*  everything is in wei */\n', '        uint256 baseTokens  = msg.value.mul(tokensPerEther);\n', '        uint256 bonusTokens = msg.value.mul(currentBonus);\n', '        /* send tokens to buyer. Buyer gets baseTokens + bonusTokens */\n', '        balances[msg.sender] = balances[msg.sender].add(baseTokens).add(bonusTokens);\n', '        /* send eth to owner */\n', '        owner.transfer(msg.value);\n', '        \n', '        bonusSupply       = bonusSupply.add(bonusTokens);\n', '        totalContribution = totalContribution.add(msg.value);\n', '        _totalSupply      = _totalSupply.add(baseTokens).add(bonusTokens);\n', '\n', '        Transfer(address(this), msg.sender, baseTokens.add(bonusTokens));\n', '    }\n', '    \n', '    function enablePurchasing() onlyOwner {\n', '        purchasingAllowed = true;\n', '    }\n', '    \n', '    function disablePurchasing() onlyOwner {\n', '        purchasingAllowed = false;\n', '    }\n', '    \n', '    function setCurrentSaleDayAndBonus(uint8 _day) onlyOwner {\n', '        require(\n', '            (_day > 0 && _day < 11) \n', '        );\n', '\n', '        currentBonus = 10; \n', '        currentSaleDay = _day;\n', '\n', '        if(_day==1) {\n', '            currentBonus = 100;\n', '        } \n', '        if(_day==2) {\n', '            currentBonus = 75;\n', '        }\n', '        if(_day>=3 && _day<5) {\n', '            currentBonus = 50;\n', '        }\n', '        if(_day>=5 && _day<8) {\n', '            currentBonus = 25;\n', '        }\n', '\n', '        \n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        require(\n', '            (balances[msg.sender] >= _value)\n', '            && (_value > 0)\n', '            && (_to != address(0))\n', '            && (balances[_to].add(_value) >= balances[_to])\n', '            && (msg.data.length >= (2 * 32) + 4)\n', '        );\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        require(\n', '            (allowed[_from][msg.sender] >= _value) // Check allowance\n', '            && (balances[_from] >= _value) // Check if the sender has enough\n', "            && (_value > 0) // Don't allow 0value transfer\n", '            && (_to != address(0)) // Prevent transfer to 0x0 address\n', '            && (balances[_to].add(_value) >= balances[_to]) // Check for overflows\n', '            && (msg.data.length >= (2 * 32) + 4) //mitigates the ERC20 short address attack\n', '            //most of these things are not necesary\n', '        );\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        \n', '        require(\n', '            (_value == 0) \n', '            || (allowed[msg.sender][_spender] == 0)\n', '        );\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '}']
