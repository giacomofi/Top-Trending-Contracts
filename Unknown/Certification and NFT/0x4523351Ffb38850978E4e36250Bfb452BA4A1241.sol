['// दिल तो पागल है\n', '\n', 'pragma solidity ^0.4.11;\n', '\n', 'contract Token {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract SafeMath {\n', '\n', '    /* function assert(bool assertion) internal { */\n', '    /*   if (!assertion) { */\n', '    /*     throw; */\n', '    /*   } */\n', '    /* }      // assert no longer needed once solidity is on 0.4.10 */\n', '\n', '    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x + y;\n', '      assert((z >= x) && (z >= y));\n', '      return z;\n', '    }\n', '\n', '    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\n', '      assert(x >= y);\n', '      uint256 z = x - y;\n', '      return z;\n', '    }\n', '\n', '    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x * y;\n', '      assert((x == 0)||(z/x == y));\n', '      return z;\n', '    }\n', '\n', '}\n', '\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        //Default assumes totalSupply can&#39;t be over max (2^256 - 1).\n', '        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn&#39;t wrap.\n', '        //Replace the if with this one instead.\n', '        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract Dil is StandardToken, SafeMath {\n', '\n', '    // metadata\n', '    string public constant name = "दिल"; // Heart in Devnagari Script Hindi Language\n', '    string public constant symbol = "❤️"; // Red heart emoji\n', '    uint256 public constant decimals = 0; // Whole tokens only\n', '    string public version = "1.0";\n', '\n', '    // important addresses\n', '    address public depositAddress;      // deposit address for ETH for ICO owner\n', '\n', '    // crowdsale params\n', '    bool public isFinalized;            // true when ICO finalized and successful\n', '    uint256 public targetEth;           // target ETH to raise\n', '    uint256 public fundingStartBlock;   // when to start allowing funding\n', '    uint256 public fundingEndBlock;     // when to stop allowing funding\n', '    \n', '    // events\n', '    event CreateDil(string _name);\n', '    event Contribute(address _sender, uint256 _value);\n', '    event FinalizeSale(address _sender);\n', '    event RefundContribution(address _sender, uint256 _value);\n', '    event ClaimTokens(address _sender, uint256 _value);\n', '\n', '    // calculated values\n', '    mapping (address => uint256) contributions;    // ETH contributed per address\n', '    uint256 contributed;      // total ETH contributed\n', '\n', '    // constructor\n', '    function Dil(){\n', '        isFinalized = false;\n', '        totalSupply = 1000000000; // 100 Crore total supply\n', '        targetEth = 1000 * 1000000000000000000; // Raising 1000 ETHER\n', '        depositAddress = 0xA94B12c128e7BA4ae59309763368FaCDD8Fb4E23; // Multiple Computer Co.\n', '        fundingStartBlock = 3999999;\n', '        fundingEndBlock = 4200000;\n', '        // log\n', '        CreateDil(name);}\n', '\n', '    /// Accepts ETH from a contributor\n', '    function contribute() payable external {\n', '        if (block.number < fundingStartBlock) throw;    // not yet begun?\n', '        if (block.number > fundingEndBlock) throw;      // already ended?\n', '        if (msg.value == 0) throw;                  // no ETH sent in?\n', '\n', '        // Add to contributions\n', '        contributions[msg.sender] += msg.value;\n', '        contributed += msg.value;\n', '        \n', '        // log\n', '        Contribute(msg.sender, msg.value);  // logs contribution\n', '    }\n', '\n', '    /// Finalizes the funding and sends the ETH to deposit address\n', '    function finalizeFunding() external {\n', '        if (isFinalized) throw;                       // already succeeded?\n', '        if (msg.sender != depositAddress) throw;      // wrong sender?\n', '        if (block.number <= fundingEndBlock) throw;   // not yet finished?\n', '        if (contributed < targetEth) throw;             // not enough raised?\n', '        \n', '        isFinalized = true;\n', '\n', '        // send to deposit address\n', '        if (!depositAddress.send(targetEth)) throw;\n', '        \n', '        // log\n', '        FinalizeSale(msg.sender);\n', '    }\n', '    \n', '    /// Allows contributors to claim their tokens and/or a refund. If funding failed then they get back all their Ether, otherwise they get back any excess Ether\n', '    function claimTokensAndRefund() external {\n', '        if (0 == contributions[msg.sender]) throw;    // must have previously contributed\n', '        if (block.number < fundingEndBlock) throw;    // not yet done?\n', '      \n', '        // if not enough funding\n', '        if (contributed < targetEth) {\n', '            // refund my full contribution\n', '            if (!msg.sender.send(contributions[msg.sender])) throw;\n', '            RefundContribution(msg.sender, contributions[msg.sender]);\n', '        } else {\n', '            // calculate how many tokens I get\n', '            balances[msg.sender] = safeMult(totalSupply, contributions[msg.sender]) / contributed;\n', '            // refund excess ETH\n', '            if (!msg.sender.send(contributions[msg.sender] - (safeMult(targetEth, contributions[msg.sender]) / contributed))) throw;\n', '            ClaimTokens(msg.sender, balances[msg.sender]);\n', '      }\n', '      \n', '      contributions[msg.sender] = 0;\n', '    }\n', '}']