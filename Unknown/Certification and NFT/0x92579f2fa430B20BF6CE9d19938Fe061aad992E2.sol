['pragma solidity ^0.4.11;\n', '\n', 'interface token \n', '{\n', '    function transfer(address _to, uint256 _value);\n', '    function transferFrom(address _from, address _to, uint256 _value);\n', '    function approve(address _spender, uint256 _value);\n', '    function allowance(address _owner, address _spender) constant returns(uint256 remaining);\n', '    function getBalanceOf(address _who) returns(uint256 amount);\n', '}\n', '\n', 'contract DCY_preICO \n', '{\n', '    string public name = &#39;CONTRACT DICEYBIT.COM preICO&#39;;\n', '    address public beneficiary;\n', '\n', '    uint public fundingGoal;\n', '    uint public amountRaised;\n', '    uint public deadline;\n', '    uint public price;\n', '\n', '    token public tokenReward;\n', '    uint256 public tokensLeft;\n', '\n', '    mapping(address => uint256) public balanceOf;\n', '\n', '    bool public fundingGoalReached = false;\n', '    bool public crowdsaleClosed = false;\n', '\n', '    event GoalReached(address benef, uint amount);\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '\n', '    /*  at initialization, setup the owner */\n', '    function DCY_preICO(\n', '        address beneficiaryAddress,\n', '        token addressOfTokenUsedAsReward,\n', '        uint fundingGoalInEthers,\n', '        uint durationInMinutes,\n', '        uint weiPrice\n', '    ) {\n', '\n', '        beneficiary = beneficiaryAddress;\n', '        fundingGoal = fundingGoalInEthers * 1 ether;\n', '        deadline = now + durationInMinutes * 1 minutes;\n', '        price = weiPrice;\n', '\n', '        tokenReward = token(addressOfTokenUsedAsReward);\n', '    }\n', '\n', '    function () payable \n', '    {\n', '        require(!crowdsaleClosed);\n', '        require(tokensLeft >= amount / price);\n', '\n', '        uint amount = msg.value;\n', '        balanceOf[msg.sender] += amount;\n', '        amountRaised += amount;\n', '\n', '        tokenReward.transfer(msg.sender, amount / price);\n', '        FundTransfer(msg.sender, amount, true);\n', '\n', '        tokensLeft = tokenReward.getBalanceOf(address(this));\n', '        if (tokensLeft == 0) \n', '        {\n', '            crowdsaleClosed = true;\n', '        }\n', '    }\n', '\n', '    function updateTokensAvailable() \n', '    {\n', '        tokensLeft = tokenReward.getBalanceOf(address(this));\n', '    }\n', '\n', '    modifier afterDeadline() \n', '    {\n', '        if (now >= deadline) _;\n', '    }\n', '\n', '    /* checks if the goal or time limit has been reached and ends the campaign */\n', '    function checkGoalReached() afterDeadline \n', '    {        \n', '        if (amountRaised >= fundingGoal) \n', '        {\n', '            fundingGoalReached = true;\n', '            crowdsaleClosed = true;\n', '            GoalReached(beneficiary, amountRaised);\n', '        }\n', '    }\n', '\n', '    function safeWithdrawal() afterDeadline \n', '    {\n', '        \n', '        if (!fundingGoalReached) \n', '        {\n', '            uint amount = balanceOf[msg.sender];\n', '            balanceOf[msg.sender] = 0;\n', '            if (amount > 0) \n', '            {\n', '                if (msg.sender.send(amount)) \n', '                {\n', '                    FundTransfer(msg.sender, amount, false);\n', '                } \n', '                else \n', '                {\n', '                    balanceOf[msg.sender] = amount;\n', '                }\n', '            }\n', '        }\n', '\n', '        if (fundingGoalReached && beneficiary == msg.sender) \n', '        {\n', '            if (beneficiary.send(amountRaised)) \n', '            {\n', '                FundTransfer(beneficiary, amountRaised, false);\n', '            } \n', '            else \n', '            {\n', '                fundingGoalReached = false;\n', '            }\n', '        }\n', '    }\n', '\n', '    function bringBackTokens() afterDeadline \n', '    {\n', '        require(tokensLeft > 0);\n', '\n', '        if (msg.sender == beneficiary) \n', '        {\n', '            tokenReward.transfer(beneficiary, tokensLeft);\n', '            tokensLeft = tokenReward.getBalanceOf(address(this));\n', '        }\n', '    }\n', '}']