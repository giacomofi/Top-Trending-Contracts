['contract owned {\n', '        address public owner;\n', '\n', '        function owned() {\n', '                owner = msg.sender;\n', '        }\n', '\n', '        modifier onlyOwner {\n', '                if (msg.sender != owner) throw;\n', '                _\n', '        }\n', '\n', '        function transferOwnership(address newOwner) onlyOwner {\n', '                owner = newOwner;\n', '        }\n', '}\n', '\n', '/* The token is used as a voting shares */\n', 'contract token {\n', '        function mintToken(address target, uint256 mintedAmount);\n', '}\n', '\n', 'contract Congress is owned {\n', '\n', '        /* Contract Variables and events */\n', '        uint public minimumQuorum;\n', '        uint public debatingPeriodInMinutes;\n', '        int public majorityMargin;\n', '        Proposal[] public proposals;\n', '        uint public numProposals;\n', '        mapping(address => uint) public memberId;\n', '        Member[] public members;\n', '\n', '        address public unicornAddress;\n', '        uint public priceOfAUnicornInFinney;\n', '\n', '        event ProposalAdded(uint proposalID, address recipient, uint amount, string description);\n', '        event Voted(uint proposalID, bool position, address voter, string justification);\n', '        event ProposalTallied(uint proposalID, int result, uint quorum, bool active);\n', '        event MembershipChanged(address member);\n', '        event ChangeOfRules(uint minimumQuorum, uint debatingPeriodInMinutes, int majorityMargin);\n', '\n', '        struct Proposal {\n', '                address recipient;\n', '                uint amount;\n', '                string description;\n', '                uint votingDeadline;\n', '                bool executed;\n', '                bool proposalPassed;\n', '                uint numberOfVotes;\n', '                int currentResult;\n', '                bytes32 proposalHash;\n', '                Vote[] votes;\n', '                mapping(address => bool) voted;\n', '        }\n', '\n', '        struct Member {\n', '                address member;\n', '                uint voteWeight;\n', '                bool canAddProposals;\n', '                string name;\n', '                uint memberSince;\n', '        }\n', '\n', '        struct Vote {\n', '                bool inSupport;\n', '                address voter;\n', '                string justification;\n', '        }\n', '\n', '\n', '        /* First time setup */\n', '        function Congress(uint minimumQuorumForProposals, uint minutesForDebate, int marginOfVotesForMajority, address congressLeader) {\n', '                minimumQuorum = minimumQuorumForProposals;\n', '                debatingPeriodInMinutes = minutesForDebate;\n', '                majorityMargin = marginOfVotesForMajority;\n', '                members.length++;\n', '                members[0] = Member({\n', '                        member: 0,\n', '                        voteWeight: 0,\n', '                        canAddProposals: false,\n', '                        memberSince: now,\n', '                        name: &#39;&#39;\n', '                });\n', '                if (congressLeader != 0) owner = congressLeader;\n', '\n', '        }\n', '\n', '        /*make member*/\n', '        function changeMembership(address targetMember, uint voteWeight, bool canAddProposals, string memberName) onlyOwner {\n', '                uint id;\n', '                if (memberId[targetMember] == 0) {\n', '                        memberId[targetMember] = members.length;\n', '                        id = members.length++;\n', '                        members[id] = Member({\n', '                                member: targetMember,\n', '                                voteWeight: voteWeight,\n', '                                canAddProposals: canAddProposals,\n', '                                memberSince: now,\n', '                                name: memberName\n', '                        });\n', '                } else {\n', '                        id = memberId[targetMember];\n', '                        Member m = members[id];\n', '                        m.voteWeight = voteWeight;\n', '                        m.canAddProposals = canAddProposals;\n', '                        m.name = memberName;\n', '                }\n', '\n', '                MembershipChanged(targetMember);\n', '\n', '        }\n', '\n', '        /*change rules*/\n', '        function changeVotingRules(uint minimumQuorumForProposals, uint minutesForDebate, int marginOfVotesForMajority) onlyOwner {\n', '                minimumQuorum = minimumQuorumForProposals;\n', '                debatingPeriodInMinutes = minutesForDebate;\n', '                majorityMargin = marginOfVotesForMajority;\n', '\n', '                ChangeOfRules(minimumQuorum, debatingPeriodInMinutes, majorityMargin);\n', '        }\n', '\n', '        // ribbonPriceInEther\n', '        function changeUnicorn(uint newUnicornPriceInFinney, address newUnicornAddress) onlyOwner {\n', '                unicornAddress = newUnicornAddress;\n', '                priceOfAUnicornInFinney = newUnicornPriceInFinney;\n', '        }\n', '\n', '        /* Function to create a new proposal */\n', '        function newProposalInWei(address beneficiary, uint weiAmount, string JobDescription, bytes transactionBytecode) returns(uint proposalID) {\n', '                if (memberId[msg.sender] == 0 || !members[memberId[msg.sender]].canAddProposals) throw;\n', '\n', '                proposalID = proposals.length++;\n', '                Proposal p = proposals[proposalID];\n', '                p.recipient = beneficiary;\n', '                p.amount = weiAmount;\n', '                p.description = JobDescription;\n', '                p.proposalHash = sha3(beneficiary, weiAmount, transactionBytecode);\n', '                p.votingDeadline = now + debatingPeriodInMinutes * 1 minutes;\n', '                p.executed = false;\n', '                p.proposalPassed = false;\n', '                p.numberOfVotes = 0;\n', '                ProposalAdded(proposalID, beneficiary, weiAmount, JobDescription);\n', '                numProposals = proposalID + 1;\n', '        }\n', '\n', '        /* Function to create a new proposal */\n', '        function newProposalInEther(address beneficiary, uint etherAmount, string JobDescription, bytes transactionBytecode) returns(uint proposalID) {\n', '                if (memberId[msg.sender] == 0 || !members[memberId[msg.sender]].canAddProposals) throw;\n', '\n', '                proposalID = proposals.length++;\n', '                Proposal p = proposals[proposalID];\n', '                p.recipient = beneficiary;\n', '                p.amount = etherAmount * 1 ether;\n', '                p.description = JobDescription;\n', '                p.proposalHash = sha3(beneficiary, etherAmount * 1 ether, transactionBytecode);\n', '                p.votingDeadline = now + debatingPeriodInMinutes * 1 minutes;\n', '                p.executed = false;\n', '                p.proposalPassed = false;\n', '                p.numberOfVotes = 0;\n', '                ProposalAdded(proposalID, beneficiary, etherAmount, JobDescription);\n', '                numProposals = proposalID + 1;\n', '        }\n', '\n', '        /* function to check if a proposal code matches */\n', '        function checkProposalCode(uint proposalNumber, address beneficiary, uint amount, bytes transactionBytecode) constant returns(bool codeChecksOut) {\n', '                Proposal p = proposals[proposalNumber];\n', '                return p.proposalHash == sha3(beneficiary, amount, transactionBytecode);\n', '        }\n', '\n', '        function vote(uint proposalNumber, bool supportsProposal, string justificationText) returns(uint voteID) {\n', '                if (memberId[msg.sender] == 0) throw;\n', '\n', '                uint voteWeight = members[memberId[msg.sender]].voteWeight;\n', '\n', '                Proposal p = proposals[proposalNumber]; // Get the proposal\n', '                if (p.voted[msg.sender] == true) throw; // If has already voted, cancel\n', '                p.voted[msg.sender] = true; // Set this voter as having voted\n', '                p.numberOfVotes += voteWeight; // Increase the number of votes\n', '                if (supportsProposal) { // If they support the proposal\n', '                        p.currentResult += int(voteWeight); // Increase score\n', '                } else { // If they don&#39;t\n', '                        p.currentResult -= int(voteWeight); // Decrease the score\n', '                }\n', '                // Create a log of this event\n', '                Voted(proposalNumber, supportsProposal, msg.sender, justificationText);\n', '        }\n', '\n', '        function executeProposal(uint proposalNumber, bytes transactionBytecode) returns(int result) {\n', '                Proposal p = proposals[proposalNumber];\n', '                /* Check if the proposal can be executed */\n', '                if (now < p.votingDeadline // has the voting deadline arrived?  \n', '                        || p.executed // has it been already executed? \n', '                        || p.proposalHash != sha3(p.recipient, p.amount, transactionBytecode) // Does the transaction code match the proposal? \n', '                        || p.numberOfVotes < minimumQuorum) // has minimum quorum?\n', '                        throw;\n', '\n', '                /* execute result */\n', '                if (p.currentResult > majorityMargin) {\n', '                        /* If difference between support and opposition is larger than margin */\n', '                        p.recipient.call.value(p.amount)(transactionBytecode);\n', '                        p.executed = true;\n', '                        p.proposalPassed = true;\n', '                } else {\n', '                        p.executed = true;\n', '                        p.proposalPassed = false;\n', '                }\n', '                // Fire Events\n', '                ProposalTallied(proposalNumber, p.currentResult, p.numberOfVotes, p.proposalPassed);\n', '        }\n', '\n', '        function() {\n', '                if (msg.value > priceOfAUnicornInFinney) {\n', '                        token unicorn = token(unicornAddress);\n', '                        unicorn.mintToken(msg.sender, msg.value / (priceOfAUnicornInFinney * 1 finney));\n', '                }\n', '\n', '        }\n', '}\n', '\n', '\n', 'contract MyToken is owned {\n', '        /* Public variables of the token */\n', '        string public name;\n', '        string public symbol;\n', '        uint8 public decimals;\n', '        uint256 public totalSupply;\n', '\n', '        /* This creates an array with all balances */\n', '        mapping(address => uint256) public balanceOf;\n', '        mapping(address => bool) public frozenAccount;\n', '        mapping(address => mapping(address => uint)) public allowance;\n', '        mapping(address => mapping(address => uint)) public spentAllowance;\n', '\n', '\n', '        /* This generates a public event on the blockchain that will notify clients */\n', '        event Transfer(address indexed from, address indexed to, uint256 value);\n', '        event FrozenFunds(address target, bool frozen);\n', '\n', '        /* Initializes contract with initial supply tokens to the creator of the contract */\n', '        function MyToken(uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol, address centralMinter) {\n', '                if (centralMinter != 0) owner = centralMinter; // Sets the minter\n', '                balanceOf[msg.sender] = initialSupply; // Give the creator all initial tokens                    \n', '                name = tokenName; // Set the name for display purposes     \n', '                symbol = tokenSymbol; // Set the symbol for display purposes    \n', '                decimals = decimalUnits; // Amount of decimals for display purposes        \n', '                totalSupply = initialSupply;\n', '        }\n', '\n', '        /* Send coins */\n', '        function transfer(address _to, uint256 _value) {\n', '                if (balanceOf[msg.sender] < _value) throw; // Check if the sender has enough   \n', '                if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\n', '                if (frozenAccount[msg.sender]) throw; // Check if frozen\n', '                balanceOf[msg.sender] -= _value; // Subtract from the sender\n', '                balanceOf[_to] += _value; // Add the same to the recipient            \n', '                Transfer(msg.sender, _to, _value); // Notify anyone listening that this transfer took place\n', '        }\n', '\n', '        function mintToken(address target, uint256 mintedAmount) onlyOwner {\n', '                balanceOf[target] += mintedAmount;\n', '                totalSupply += mintedAmount;\n', '                Transfer(owner, target, mintedAmount);\n', '        }\n', '\n', '        function freezeAccount(address target, bool freeze) onlyOwner {\n', '                frozenAccount[target] = freeze;\n', '                FrozenFunds(target, freeze);\n', '        }\n', '\n', '        function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {\n', '                if (balanceOf[_from] < _value) throw; // Check if the sender has enough   \n', '                if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\n', '                if (frozenAccount[_from]) throw; // Check if frozen\n', '                if (spentAllowance[_from][msg.sender] + _value > allowance[_from][msg.sender]) throw; // Check allowance\n', '                balanceOf[_from] -= _value; // Subtract from the sender\n', '                balanceOf[_to] += _value; // Add the same to the recipient            \n', '                spentAllowance[_from][msg.sender] += _value;\n', '                Transfer(msg.sender, _to, _value);\n', '        }\n', '\n', '        function approve(address _spender, uint256 _value) returns(bool success) {\n', '                allowance[msg.sender][_spender] = _value;\n', '        }\n', '\n', '        function() {\n', '                //owner.send(msg.value);\n', '                throw;\n', '        }\n', '}']