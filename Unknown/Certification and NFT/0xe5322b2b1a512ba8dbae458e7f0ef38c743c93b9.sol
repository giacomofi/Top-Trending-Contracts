['pragma solidity ^0.4.2;\n', '/**\n', ' * @title Contract for object that have an owner\n', ' */\n', 'contract Owned {\n', '    /**\n', '     * Contract owner address\n', '     */\n', '    address public owner;\n', '\n', '    /**\n', '     * @dev Store owner on creation\n', '     */\n', '    function Owned() { owner = msg.sender; }\n', '\n', '    /**\n', '     * @dev Delegate contract to another person\n', '     * @param _owner is another person address\n', '     */\n', '    function delegate(address _owner) onlyOwner\n', '    { owner = _owner; }\n', '\n', '    /**\n', '     * @dev Owner check modifier\n', '     */\n', '    modifier onlyOwner { if (msg.sender != owner) throw; _; }\n', '}\n', '/**\n', ' * @title Contract for objects that can be morder\n', ' */\n', 'contract Mortal is Owned {\n', '    /**\n', '     * @dev Destroy contract and scrub a data\n', '     * @notice Only owner can kill me\n', '     */\n', '    function kill() onlyOwner\n', '    { suicide(owner); }\n', '}\n', '//sol Registrar\n', '// Simple global registrar.\n', '// @authors:\n', '//   Gav Wood <g@ethdev.com>\n', 'contract Registrar {\n', '\tevent Changed(string indexed name);\n', '\n', '\tfunction owner(string _name) constant returns (address o_owner);\n', '\tfunction addr(string _name) constant returns (address o_address);\n', '\tfunction subRegistrar(string _name) constant returns (address o_subRegistrar);\n', '\tfunction content(string _name) constant returns (bytes32 o_content);\n', '}\n', '//sol OwnedRegistrar\n', '// Global registrar with single authoritative owner.\n', '// @authors:\n', '//   Gav Wood <g@ethdev.com>\n', 'contract AiraRegistrarService is Registrar, Mortal {\n', '\tstruct Record {\n', '\t\taddress addr;\n', '\t\taddress subRegistrar;\n', '\t\tbytes32 content;\n', '\t}\n', '\t\n', '    function owner(string _name) constant returns (address o_owner)\n', '    { return 0; }\n', '\n', '\tfunction disown(string _name) onlyOwner {\n', '\t\tdelete m_toRecord[_name];\n', '\t\tChanged(_name);\n', '\t}\n', '\n', '\tfunction setAddr(string _name, address _a) onlyOwner {\n', '\t\tm_toRecord[_name].addr = _a;\n', '\t\tChanged(_name);\n', '\t}\n', '\tfunction setSubRegistrar(string _name, address _registrar) onlyOwner {\n', '\t\tm_toRecord[_name].subRegistrar = _registrar;\n', '\t\tChanged(_name);\n', '\t}\n', '\tfunction setContent(string _name, bytes32 _content) onlyOwner {\n', '\t\tm_toRecord[_name].content = _content;\n', '\t\tChanged(_name);\n', '\t}\n', '\tfunction record(string _name) constant returns (address o_addr, address o_subRegistrar, bytes32 o_content) {\n', '\t\to_addr = m_toRecord[_name].addr;\n', '\t\to_subRegistrar = m_toRecord[_name].subRegistrar;\n', '\t\to_content = m_toRecord[_name].content;\n', '\t}\n', '\tfunction addr(string _name) constant returns (address) { return m_toRecord[_name].addr; }\n', '\tfunction subRegistrar(string _name) constant returns (address) { return m_toRecord[_name].subRegistrar; }\n', '\tfunction content(string _name) constant returns (bytes32) { return m_toRecord[_name].content; }\n', '\n', '\tmapping (string => Record) m_toRecord;\n', '}']