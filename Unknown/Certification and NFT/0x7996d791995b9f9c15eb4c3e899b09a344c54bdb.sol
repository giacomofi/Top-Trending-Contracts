['contract GameOfThrones {\n', '    address public trueGods;\n', "    // King's Jester\n", '    address public jester;\n', '    // Record the last collection time\n', '    uint public lastCollection;\n', '    // Record king life\n', '    uint public onThrone;\n', '    uint public kingCost;\n', '    // Piggy Bank Amount\n', '    uint public piggyBank;\n', '    // Collected Fee Amount\n', '    uint public godBank;\n', '    uint public jesterBank;\n', '    uint public kingBank;\n', '\n', '    // Track the citizens who helped to arm race\n', '    address[] public citizensAddresses;\n', '    uint[] public citizensAmounts;\n', '    uint32 public totalCitizens;\n', '    uint32 public lastCitizenPaid;\n', '    // The mad king establishes the government\n', '    address public madKing;\n', '    // Record how many times the castle had fell\n', '    uint32 public round;\n', '    // Amount already paid back in this round\n', '    uint public amountAlreadyPaidBack;\n', '    // Amount invested in this round\n', '    uint public amountInvested;\n', '\n', '    uint constant TWENTY_FOUR_HOURS = 60 * 60 * 24;\n', '    uint constant PEACE_PERIOD = 60 * 60 * 240;\n', '\n', '    function GameOfThrones() {\n', '        // Define the first castle\n', '        trueGods = msg.sender;\n', '        madKing = msg.sender;\n', '        jester = msg.sender;\n', '        lastCollection = block.timestamp;\n', '        onThrone = block.timestamp;\n', '        kingCost = 1 ether;\n', '        amountAlreadyPaidBack = 0;\n', '        amountInvested = 0;\n', '        totalCitizens = 0;\n', '    }\n', '\n', '    function repairTheCastle() returns(bool) {\n', '        uint amount = msg.value;\n', '        // Check if the minimum amount if reached\n', '        if (amount < 10 finney) {\n', '            msg.sender.send(msg.value);\n', '            return false;\n', '        }\n', '        // If the amount received is more than 100 ETH return the difference\n', '        if (amount > 100 ether) {\n', '            msg.sender.send(msg.value - 100 ether);\n', '            amount = 100 ether;\n', '        }\n', '\n', '        // Check if the Castle has fell\n', '        if (lastCollection + TWENTY_FOUR_HOURS < block.timestamp) {\n', '            // Send the Piggy Bank to the last 3 citizens\n', '            // If there is no one who contributed this last 24 hours, no action needed\n', '            if (totalCitizens == 1) {\n', '                // If there is only one Citizen who contributed, he gets the full Pigg Bank\n', '                citizensAddresses[citizensAddresses.length - 1].send(piggyBank * 95 / 100);\n', '            } else if (totalCitizens == 2) {\n', '                // If only 2 citizens contributed\n', '                citizensAddresses[citizensAddresses.length - 1].send(piggyBank * 60 / 100);\n', '                citizensAddresses[citizensAddresses.length - 2].send(piggyBank * 35 / 100);\n', '            } else if (totalCitizens >= 3) {\n', '                // If there is 3 or more citizens who contributed\n', '                citizensAddresses[citizensAddresses.length - 1].send(piggyBank * 50 / 100);\n', '                citizensAddresses[citizensAddresses.length - 2].send(piggyBank * 30 / 100);\n', '                citizensAddresses[citizensAddresses.length - 3].send(piggyBank * 15 / 100);\n', '            }\n', '\n', '            godBank += piggyBank * 5 / 100;\n', '            // Define the new Piggy Bank\n', '            piggyBank = 0;\n', '\n', '            // Define the new Castle\n', '            jester = msg.sender;\n', '\n', '            citizensAddresses.push(msg.sender);\n', '            citizensAmounts.push(amount * 110 / 100);\n', '            totalCitizens += 1;\n', '            investInTheSystem(amount);\n', '            godAutomaticCollectFee();\n', '            // All goes to the Piggy Bank\n', '            piggyBank += amount;\n', '\n', '            round += 1;\n', '        } else {\n', '            citizensAddresses.push(msg.sender);\n', '            citizensAmounts.push(amount * 110 / 100);\n', '            totalCitizens += 1;\n', '            investInTheSystem(amount);\n', '\n', '            // 5% goes to the Piggy Bank\n', '            piggyBank += (amount * 5 / 100);\n', '\n', '            while (citizensAmounts[lastCitizenPaid] < (address(this).balance - piggyBank - godBank - kingBank - jesterBank) && lastCitizenPaid <= totalCitizens) {\n', '                citizensAddresses[lastCitizenPaid].send(citizensAmounts[lastCitizenPaid]);\n', '                amountAlreadyPaidBack += citizensAmounts[lastCitizenPaid];\n', '                lastCitizenPaid += 1;\n', '            }\n', '        }\n', '    }\n', '\n', '    // fallback function\n', '    function() {\n', '        repairTheCastle();\n', '    }\n', '\n', '    function investInTheSystem(uint amount) internal {\n', '        // The Castle is still up\n', '        lastCollection = block.timestamp;\n', '        amountInvested += amount;\n', '        // The Jetster takes 5%\n', '        jesterBank += amount * 5 / 100;\n', '        // The mad king takes 5%\n', '        kingBank += amount * 5 / 100;\n', '        // 5% goes to the Piggy Bank\n', '        piggyBank += (amount * 5 / 100);\n', '\n', '        kingAutomaticCollectFee();\n', '        jesterAutomaticCollectFee();\n', '    }\n', '\n', '    // When the mad king decides to give his seat to someone else\n', '    // the king cost will be reset to 2 ether\n', '    function newKing(address newKing) {\n', '        if (msg.sender == madKing) {\n', '            madKing = newKing;\n', '            kingCost = 1 ether;\n', '        }\n', '    }\n', '\n', '    function bribery() {\n', '        uint amount = 100 finney;\n', '        if (msg.value >= amount) {\n', '            // return jester\n', '            jester.send(jesterBank);\n', '            jesterBank = 0;\n', '\n', '            jester = msg.sender;\n', '            msg.sender.send(msg.value - amount);\n', '            investInTheSystem(amount);\n', '        } else {\n', '            throw;\n', '        }\n', '    }\n', '\n', '    // Anyone can usurpation the kingship\n', '    function usurpation() {\n', '        // Add more money for king usurpation cost\n', '        if (msg.sender == madKing) {\n', '            investInTheSystem(msg.value);\n', '            kingCost += msg.value;\n', '        } else {\n', '            if (onThrone + PEACE_PERIOD <= block.timestamp && msg.value >= kingCost * 110 / 100) {\n', '                // return the fees to before king\n', '                madKing.send(kingBank);\n', '                // offer sacrifices to the Gods\n', '                godBank += msg.value * 5 / 100;\n', '                investInTheSystem(msg.value);\n', '                // new king\n', '                kingCost = msg.value;\n', '                madKing = msg.sender;\n', '                onThrone = block.timestamp;\n', '            } else {\n', '                throw;\n', '            }\n', '        }\n', '    }\n', '\n', '    // When the king decides to collect his fees\n', '    function collectFee() {\n', '        if (msg.sender == trueGods) {\n', '            trueGods.send(godBank);\n', '        }\n', '    }\n', '\n', '    function godAutomaticCollectFee() internal {\n', '        if (godBank >= 1 ether) {\n', '          trueGods.send(godBank);\n', '          godBank = 0;\n', '        }\n', '    }\n', '\n', '    function kingAutomaticCollectFee() internal {\n', '        if (kingBank >= 100 finney) {\n', '          madKing.send(kingBank);\n', '          kingBank = 0;\n', '        }\n', '    }\n', '\n', '    function jesterAutomaticCollectFee() internal {\n', '        if (jesterBank >= 100 finney) {\n', '          jester.send(jesterBank);\n', '          jesterBank = 0;\n', '        }\n', '    }\n', '}']