['pragma solidity ^0.4.16;\n', '\n', '// ----------------------------------------------------------------------------\n', '// GazeCoin Crowdsale Whitelist\n', '//\n', '// Deployed to : 0x73855EE8C390C5c6741e14c18F6017A5b877F428\n', '//\n', '// Enjoy.\n', '//\n', '// (c) GazeCoin 2017. The MIT Licence.\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Current owner, and proposed new owner\n', '    // ------------------------------------------------------------------------\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor - assign creator as the owner\n', '    // ------------------------------------------------------------------------\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Modifier to mark that a function can only be executed by the owner\n', '    // ------------------------------------------------------------------------\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can initiate transfer of contract to a new owner\n', '    // ------------------------------------------------------------------------\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // New owner has to accept transfer of contract\n', '    // ------------------------------------------------------------------------\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = 0x0;\n', '    }\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Administrators, borrowed from Gimli\n', '// ----------------------------------------------------------------------------\n', 'contract Administered is Owned {\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Mapping of administrators\n', '    // ------------------------------------------------------------------------\n', '    mapping (address => bool) public administrators;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Add and delete adminstrator events\n', '    // ------------------------------------------------------------------------\n', '    event AdminstratorAdded(address adminAddress);\n', '    event AdminstratorRemoved(address adminAddress);\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Modifier for functions that can only be executed by adminstrator\n', '    // ------------------------------------------------------------------------\n', '    modifier onlyAdministrator() {\n', '        require(administrators[msg.sender] || owner == msg.sender);\n', '        _;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can add a new administrator\n', '    // ------------------------------------------------------------------------\n', '    function addAdministrators(address _adminAddress) public onlyOwner {\n', '        administrators[_adminAddress] = true;\n', '        AdminstratorAdded(_adminAddress);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can remove an administrator\n', '    // ------------------------------------------------------------------------\n', '    function removeAdministrators(address _adminAddress) public onlyOwner {\n', '        delete administrators[_adminAddress];\n', '        AdminstratorRemoved(_adminAddress);\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals\n', '// ----------------------------------------------------------------------------\n', 'contract GazeCoinCrowdsaleWhitelist is Administered {\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Administrators can add until sealed\n', '    // ------------------------------------------------------------------------\n', '    bool public sealed;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // The whitelist, true for enabled, false for disabled\n', '    // ------------------------------------------------------------------------\n', '    mapping(address => bool) public whitelist;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Events\n', '    // ------------------------------------------------------------------------\n', '    event Whitelisted(address indexed whitelistedAddress, bool enabled);\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    function GazeCoinCrowdsaleWhitelist() public {\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Whitelist\n', '    // ------------------------------------------------------------------------\n', '    function enable(address[] _addresses) public onlyAdministrator {\n', '        require(!sealed);\n', '        require(_addresses.length != 0);\n', '        for (uint i = 0; i < _addresses.length; i++) {\n', '            require(_addresses[i] != 0x0);\n', '            if (!whitelist[_addresses[i]]) {\n', '                whitelist[_addresses[i]] = true;\n', '                Whitelisted(_addresses[i], true);\n', '            }\n', '        }\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Disable whitelisting\n', '    // ------------------------------------------------------------------------\n', '    function disable(address[] _addresses) public onlyAdministrator {\n', '        require(!sealed);\n', '        require(_addresses.length != 0);\n', '        for (uint i = 0; i < _addresses.length; i++) {\n', '            require(_addresses[i] != 0x0);\n', '            if (whitelist[_addresses[i]]) {\n', '                whitelist[_addresses[i]] = false;\n', '                Whitelisted(_addresses[i], false);\n', '            }\n', '        }\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // After sealing, no more whitelisting is possible\n', '    // ------------------------------------------------------------------------\n', '    function seal() public onlyOwner {\n', '        require(!sealed);\n', '        sealed = true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Don&#39;t accept ethers - no payable modifier\n', '    // ------------------------------------------------------------------------\n', '    function () public {\n', '    }\n', '}']