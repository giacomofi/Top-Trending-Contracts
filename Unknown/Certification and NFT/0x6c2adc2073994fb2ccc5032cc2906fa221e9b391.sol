['/*\n', '  Copyright 2017 Delphy Foundation.\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '  http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '\n', '*/\n', '\n', '//   /$$$$$$$            /$$           /$$\n', '//  | $$__  $$          | $$          | $$\n', '//  | $$  \\ $$  /$$$$$$ | $$  /$$$$$$ | $$$$$$$  /$$   /$$\n', '//  | $$  | $$ /$$__  $$| $$ /$$__  $$| $$__  $$| $$  | $$\n', '//  | $$  | $$| $$$$$$$$| $$| $$  \\ $$| $$  \\ $$| $$  | $$\n', '//  | $$  | $$| $$_____/| $$| $$  | $$| $$  | $$| $$  | $$\n', '//  | $$$$$$$/|  $$$$$$$| $$| $$$$$$$/| $$  | $$|  $$$$$$$\n', '//  |_______/  \\_______/|__/| $$____/ |__/  |__/ \\____  $$\n', '//                          | $$                 /$$  | $$\n', '//                          | $$                |  $$$$$$/\n', '//                          |__/                 \\______/\n', '\n', 'pragma solidity ^0.4.11;\n', '\n', '\n', '/// @title Abstract token contract - Functions to be implemented by token contracts\n', 'contract Token {\n', '\n', '    /*\n', '     *  Events\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '\n', '    /*\n', '     *  Public functions\n', '     */\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint _value) public returns (bool);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint _value) public returns (bool);\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) public constant returns (uint);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) public constant returns (uint);\n', '\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '}\n', '\n', 'library Math {\n', '    /// @dev Returns whether an add operation causes an overflow\n', '    /// @param a First addend\n', '    /// @param b Second addend\n', '    /// @return Did no overflow occur?\n', '    function safeToAdd(uint a, uint b)\n', '        public\n', '        constant\n', '        returns (bool)\n', '    {\n', '        return a + b >= a;\n', '    }\n', '\n', '    /// @dev Returns whether a subtraction operation causes an underflow\n', '    /// @param a Minuend\n', '    /// @param b Subtrahend\n', '    /// @return Did no underflow occur?\n', '    function safeToSub(uint a, uint b)\n', '        public\n', '        constant\n', '        returns (bool)\n', '    {\n', '        return a >= b;\n', '    }\n', '\n', '    /// @dev Returns whether a multiply operation causes an overflow\n', '    /// @param a First factor\n', '    /// @param b Second factor\n', '    /// @return Did no overflow occur?\n', '    function safeToMul(uint a, uint b)\n', '        public\n', '        constant\n', '        returns (bool)\n', '    {\n', '        return b == 0 || a * b / b == a;\n', '    }\n', '\n', '    /// @dev Returns sum if no overflow occurred\n', '    /// @param a First addend\n', '    /// @param b Second addend\n', '    /// @return Sum\n', '    function add(uint a, uint b)\n', '        public\n', '        constant\n', '        returns (uint)\n', '    {\n', '        require(safeToAdd(a, b));\n', '        return a + b;\n', '    }\n', '\n', '    /// @dev Returns difference if no overflow occurred\n', '    /// @param a Minuend\n', '    /// @param b Subtrahend\n', '    /// @return Difference\n', '    function sub(uint a, uint b)\n', '        public\n', '        constant\n', '        returns (uint)\n', '    {\n', '        require(safeToSub(a, b));\n', '        return a - b;\n', '    }\n', '\n', '    /// @dev Returns product if no overflow occurred\n', '    /// @param a First factor\n', '    /// @param b Second factor\n', '    /// @return Product\n', '    function mul(uint a, uint b)\n', '        public\n', '        constant\n', '        returns (uint)\n', '    {\n', '        require(safeToMul(a, b));\n', '        return a * b;\n', '    }\n', '}\n', '\n', '\n', '/// @title Standard token contract with overflow protection\n', 'contract StandardToken is Token {\n', '    using Math for *;\n', '\n', '    /*\n', '     *  Storage\n', '     */\n', '    mapping (address => uint) balances;\n', '    mapping (address => mapping (address => uint)) allowances;\n', '\n', '    /*\n', '     *  Public functions\n', '     */\n', '    /// @dev Transfers sender&#39;s tokens to a given address. Returns success\n', '    /// @param to Address of token receiver\n', '    /// @param value Number of tokens to transfer\n', '    /// @return Was transfer successful?\n', '    function transfer(address to, uint value)\n', '        public\n', '        returns (bool)\n', '    {\n', '        if (!balances[msg.sender].safeToSub(value)\n', '            || !balances[to].safeToAdd(value))\n', '            return false;\n', '        balances[msg.sender] -= value;\n', '        balances[to] += value;\n', '        Transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success\n', '    /// @param from Address from where tokens are withdrawn\n', '    /// @param to Address to where tokens are sent\n', '    /// @param value Number of tokens to transfer\n', '    /// @return Was transfer successful?\n', '    function transferFrom(address from, address to, uint value)\n', '        public\n', '        returns (bool)\n', '    {\n', '        if (   !balances[from].safeToSub(value)\n', '            || !allowances[from][msg.sender].safeToSub(value)\n', '            || !balances[to].safeToAdd(value))\n', '            return false;\n', '        balances[from] -= value;\n', '        allowances[from][msg.sender] -= value;\n', '        balances[to] += value;\n', '        Transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    /// @dev Sets approved amount of tokens for spender. Returns success\n', '    /// @param spender Address of allowed account\n', '    /// @param value Number of approved tokens\n', '    /// @return Was approval successful?\n', '    function approve(address spender, uint value)\n', '        public\n', '        returns (bool)\n', '    {\n', '        allowances[msg.sender][spender] = value;\n', '        Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    /// @dev Returns number of allowed tokens for given address\n', '    /// @param owner Address of token owner\n', '    /// @param spender Address of token spender\n', '    /// @return Remaining allowance for spender\n', '    function allowance(address owner, address spender)\n', '        public\n', '        constant\n', '        returns (uint)\n', '    {\n', '        return allowances[owner][spender];\n', '    }\n', '\n', '    /// @dev Returns number of tokens owned by given address\n', '    /// @param owner Address of token owner\n', '    /// @return Balance of owner\n', '    function balanceOf(address owner)\n', '        public\n', '        constant\n', '        returns (uint)\n', '    {\n', '        return balances[owner];\n', '    }\n', '}\n', '\n', '/// @title Delphy Token contract\n', '/// For Delphy ICO details: https://delphy.org/index.html#ICO\n', '/// For Delphy Project: https://delphy.org\n', '/// @author <span class="__cf_email__" data-cfemail="e58f9692a5818089958d9ccb8a9782">[email&#160;protected]</span>\n', 'contract DelphyToken is StandardToken {\n', '    /*\n', '     *  Constants\n', '     */\n', '\n', '    string constant public name = "Delphy Token";\n', '    string constant public symbol = "DPY";\n', '    uint8 constant public decimals = 18;\n', '\n', '    /// Delphy token total supply\n', '    uint public constant TOTAL_TOKENS = 100000000 * 10**18; // 1e\n', '\n', '    /*\n', '     *  Public functions\n', '     */\n', '\n', '    /// @dev Initialization of the Delphy Token contract\n', '    /// @param owners is the addresses of Delphy token distribution\n', '    /// @param tokens is the token number of Delphy token distribution\n', '    function DelphyToken(address[] owners, uint[] tokens)\n', '        public\n', '    {\n', '        totalSupply = 0;\n', '\n', '        for (uint i=0; i<owners.length; i++) {\n', '            require (owners[i] != 0);\n', '\n', '            balances[owners[i]] += tokens[i];\n', '            Transfer(0, owners[i], tokens[i]);\n', '            totalSupply += tokens[i];\n', '        }\n', '\n', '        require (totalSupply == TOTAL_TOKENS);\n', '    }\n', '}']
['/*\n', '  Copyright 2017 Delphy Foundation.\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '  http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '\n', '*/\n', '\n', '//   /$$$$$$$            /$$           /$$\n', '//  | $$__  $$          | $$          | $$\n', '//  | $$  \\ $$  /$$$$$$ | $$  /$$$$$$ | $$$$$$$  /$$   /$$\n', '//  | $$  | $$ /$$__  $$| $$ /$$__  $$| $$__  $$| $$  | $$\n', '//  | $$  | $$| $$$$$$$$| $$| $$  \\ $$| $$  \\ $$| $$  | $$\n', '//  | $$  | $$| $$_____/| $$| $$  | $$| $$  | $$| $$  | $$\n', '//  | $$$$$$$/|  $$$$$$$| $$| $$$$$$$/| $$  | $$|  $$$$$$$\n', '//  |_______/  \\_______/|__/| $$____/ |__/  |__/ \\____  $$\n', '//                          | $$                 /$$  | $$\n', '//                          | $$                |  $$$$$$/\n', '//                          |__/                 \\______/\n', '\n', 'pragma solidity ^0.4.11;\n', '\n', '\n', '/// @title Abstract token contract - Functions to be implemented by token contracts\n', 'contract Token {\n', '\n', '    /*\n', '     *  Events\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '\n', '    /*\n', '     *  Public functions\n', '     */\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint _value) public returns (bool);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint _value) public returns (bool);\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) public constant returns (uint);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) public constant returns (uint);\n', '\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '}\n', '\n', 'library Math {\n', '    /// @dev Returns whether an add operation causes an overflow\n', '    /// @param a First addend\n', '    /// @param b Second addend\n', '    /// @return Did no overflow occur?\n', '    function safeToAdd(uint a, uint b)\n', '        public\n', '        constant\n', '        returns (bool)\n', '    {\n', '        return a + b >= a;\n', '    }\n', '\n', '    /// @dev Returns whether a subtraction operation causes an underflow\n', '    /// @param a Minuend\n', '    /// @param b Subtrahend\n', '    /// @return Did no underflow occur?\n', '    function safeToSub(uint a, uint b)\n', '        public\n', '        constant\n', '        returns (bool)\n', '    {\n', '        return a >= b;\n', '    }\n', '\n', '    /// @dev Returns whether a multiply operation causes an overflow\n', '    /// @param a First factor\n', '    /// @param b Second factor\n', '    /// @return Did no overflow occur?\n', '    function safeToMul(uint a, uint b)\n', '        public\n', '        constant\n', '        returns (bool)\n', '    {\n', '        return b == 0 || a * b / b == a;\n', '    }\n', '\n', '    /// @dev Returns sum if no overflow occurred\n', '    /// @param a First addend\n', '    /// @param b Second addend\n', '    /// @return Sum\n', '    function add(uint a, uint b)\n', '        public\n', '        constant\n', '        returns (uint)\n', '    {\n', '        require(safeToAdd(a, b));\n', '        return a + b;\n', '    }\n', '\n', '    /// @dev Returns difference if no overflow occurred\n', '    /// @param a Minuend\n', '    /// @param b Subtrahend\n', '    /// @return Difference\n', '    function sub(uint a, uint b)\n', '        public\n', '        constant\n', '        returns (uint)\n', '    {\n', '        require(safeToSub(a, b));\n', '        return a - b;\n', '    }\n', '\n', '    /// @dev Returns product if no overflow occurred\n', '    /// @param a First factor\n', '    /// @param b Second factor\n', '    /// @return Product\n', '    function mul(uint a, uint b)\n', '        public\n', '        constant\n', '        returns (uint)\n', '    {\n', '        require(safeToMul(a, b));\n', '        return a * b;\n', '    }\n', '}\n', '\n', '\n', '/// @title Standard token contract with overflow protection\n', 'contract StandardToken is Token {\n', '    using Math for *;\n', '\n', '    /*\n', '     *  Storage\n', '     */\n', '    mapping (address => uint) balances;\n', '    mapping (address => mapping (address => uint)) allowances;\n', '\n', '    /*\n', '     *  Public functions\n', '     */\n', "    /// @dev Transfers sender's tokens to a given address. Returns success\n", '    /// @param to Address of token receiver\n', '    /// @param value Number of tokens to transfer\n', '    /// @return Was transfer successful?\n', '    function transfer(address to, uint value)\n', '        public\n', '        returns (bool)\n', '    {\n', '        if (!balances[msg.sender].safeToSub(value)\n', '            || !balances[to].safeToAdd(value))\n', '            return false;\n', '        balances[msg.sender] -= value;\n', '        balances[to] += value;\n', '        Transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success\n', '    /// @param from Address from where tokens are withdrawn\n', '    /// @param to Address to where tokens are sent\n', '    /// @param value Number of tokens to transfer\n', '    /// @return Was transfer successful?\n', '    function transferFrom(address from, address to, uint value)\n', '        public\n', '        returns (bool)\n', '    {\n', '        if (   !balances[from].safeToSub(value)\n', '            || !allowances[from][msg.sender].safeToSub(value)\n', '            || !balances[to].safeToAdd(value))\n', '            return false;\n', '        balances[from] -= value;\n', '        allowances[from][msg.sender] -= value;\n', '        balances[to] += value;\n', '        Transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    /// @dev Sets approved amount of tokens for spender. Returns success\n', '    /// @param spender Address of allowed account\n', '    /// @param value Number of approved tokens\n', '    /// @return Was approval successful?\n', '    function approve(address spender, uint value)\n', '        public\n', '        returns (bool)\n', '    {\n', '        allowances[msg.sender][spender] = value;\n', '        Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    /// @dev Returns number of allowed tokens for given address\n', '    /// @param owner Address of token owner\n', '    /// @param spender Address of token spender\n', '    /// @return Remaining allowance for spender\n', '    function allowance(address owner, address spender)\n', '        public\n', '        constant\n', '        returns (uint)\n', '    {\n', '        return allowances[owner][spender];\n', '    }\n', '\n', '    /// @dev Returns number of tokens owned by given address\n', '    /// @param owner Address of token owner\n', '    /// @return Balance of owner\n', '    function balanceOf(address owner)\n', '        public\n', '        constant\n', '        returns (uint)\n', '    {\n', '        return balances[owner];\n', '    }\n', '}\n', '\n', '/// @title Delphy Token contract\n', '/// For Delphy ICO details: https://delphy.org/index.html#ICO\n', '/// For Delphy Project: https://delphy.org\n', '/// @author jsw@delphy.org\n', 'contract DelphyToken is StandardToken {\n', '    /*\n', '     *  Constants\n', '     */\n', '\n', '    string constant public name = "Delphy Token";\n', '    string constant public symbol = "DPY";\n', '    uint8 constant public decimals = 18;\n', '\n', '    /// Delphy token total supply\n', '    uint public constant TOTAL_TOKENS = 100000000 * 10**18; // 1e\n', '\n', '    /*\n', '     *  Public functions\n', '     */\n', '\n', '    /// @dev Initialization of the Delphy Token contract\n', '    /// @param owners is the addresses of Delphy token distribution\n', '    /// @param tokens is the token number of Delphy token distribution\n', '    function DelphyToken(address[] owners, uint[] tokens)\n', '        public\n', '    {\n', '        totalSupply = 0;\n', '\n', '        for (uint i=0; i<owners.length; i++) {\n', '            require (owners[i] != 0);\n', '\n', '            balances[owners[i]] += tokens[i];\n', '            Transfer(0, owners[i], tokens[i]);\n', '            totalSupply += tokens[i];\n', '        }\n', '\n', '        require (totalSupply == TOTAL_TOKENS);\n', '    }\n', '}']
