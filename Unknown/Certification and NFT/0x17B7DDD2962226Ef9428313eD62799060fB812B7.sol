['pragma solidity ^0.4.15;\n', '\n', '/** Github repository: https://github.com/CoinFabrik/ico/tree/hagglin-preico */\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control \n', ' * functions, this simplifies the implementation of "user permissions". \n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /** \n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner. \n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to. \n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * Abstract contract that allows children to implement an\n', ' * emergency stop mechanism. Differs from Pausable by causing a throw when in halt mode.\n', ' *\n', ' */\n', 'contract Haltable is Ownable {\n', '  bool public halted;\n', '\n', '  event Halted(bool halted);\n', '\n', '  modifier stopInEmergency {\n', '    require(!halted);\n', '    _;\n', '  }\n', '\n', '  modifier onlyInEmergency {\n', '    require(halted);\n', '    _;\n', '  }\n', '\n', '  // called by the owner on emergency, triggers stopped state\n', '  function halt() external onlyOwner {\n', '    halted = true;\n', '    Halted(true);\n', '  }\n', '\n', '  // called by the owner on end of emergency, returns to normal state\n', '  function unhalt() external onlyOwner onlyInEmergency {\n', '    halted = false;\n', '    Halted(false);\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint a, uint b) internal constant returns (uint) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint a, uint b) internal constant returns (uint) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', '/**\n', ' * Finalize agent defines what happens at the end of a succesful crowdsale.\n', ' *\n', ' * - Allocate tokens for founders, bounties and community\n', ' * - Make tokens transferable\n', ' * - etc.\n', ' */\n', 'contract FinalizeAgent {\n', '\n', '  function isFinalizeAgent() public constant returns(bool) {\n', '    return true;\n', '  }\n', '\n', '  /** Return true if we can run finalizeCrowdsale() properly.\n', '   *\n', '   * This is a safety check function that doesn&#39;t allow crowdsale to begin\n', '   * unless the finalizer has been set up properly.\n', '   */\n', '  function isSane(CrowdsaleToken token) public constant returns (bool);\n', '\n', '  /** Called once by crowdsale finalize() if the sale was a success. */\n', '  function finalizeCrowdsale(CrowdsaleToken token) public;\n', '\n', '}\n', '\n', '/**\n', ' * Abstract base contract for token sales.\n', ' *\n', ' * Handles\n', ' * - start and end dates\n', ' * - accepting investments\n', ' * - minimum funding goal and refund\n', ' * - various statistics during the crowdfund\n', ' * - different investment policies (require server side customer id, allow only whitelisted addresses)\n', ' *\n', ' */\n', 'contract GenericCrowdsale is Haltable {\n', '\n', '  using SafeMath for uint;\n', '\n', '  /* The token we are selling */\n', '  CrowdsaleToken public token;\n', '\n', '  /* Post-success callback */\n', '  FinalizeAgent public finalizeAgent;\n', '\n', '  /* ether will be transferred to this address */\n', '  address public multisigWallet;\n', '\n', '  /* if the funding goal is not reached, investors may withdraw their funds */\n', '  uint public minimumFundingGoal;\n', '\n', '  /* the starting block number of the crowdsale */\n', '  uint public startsAt;\n', '\n', '  /* the ending block number of the crowdsale */\n', '  uint public endsAt;\n', '\n', '  /* the number of tokens already sold through this contract*/\n', '  uint public tokensSold = 0;\n', '\n', '  /* How many wei of funding we have raised */\n', '  uint public weiRaised = 0;\n', '\n', '  /* How many distinct addresses have invested */\n', '  uint public investorCount = 0;\n', '\n', '  /* How many wei we have returned back to the contract after a failed crowdfund. */\n', '  uint public loadedRefund = 0;\n', '\n', '  /* How many wei we have given back to investors.*/\n', '  uint public weiRefunded = 0;\n', '\n', '  /* Has this crowdsale been finalized */\n', '  bool public finalized = false;\n', '\n', '  /* Do we need to have a unique contributor id for each customer */\n', '  bool public requireCustomerId = false;\n', '\n', '  /** How many ETH each address has invested in this crowdsale */\n', '  mapping (address => uint) public investedAmountOf;\n', '\n', '  /** How many tokens this crowdsale has credited for each investor address */\n', '  mapping (address => uint) public tokenAmountOf;\n', '\n', '  /** Addresses that are allowed to invest even before ICO offical opens. For testing, for ICO partners, etc. */\n', '  mapping (address => bool) public earlyParticipantWhitelist;\n', '\n', '  /** This is for manual testing of the interaction with the owner&#39;s wallet. You can set it to any value and inspect this in a blockchain explorer to see that crowdsale interaction works. */\n', '  uint8 public ownerTestValue;\n', '\n', '  /** State machine\n', '   *\n', '   * - Prefunding: We have not reached the starting block yet\n', '   * - Funding: Active crowdsale\n', '   * - Success: Minimum funding goal reached\n', '   * - Failure: Minimum funding goal not reached before the ending block\n', '   * - Finalized: The finalize function has been called and succesfully executed\n', '   * - Refunding: Refunds are loaded on the contract to be reclaimed by investors.\n', '   */\n', '  enum State{Unknown, PreFunding, Funding, Success, Failure, Finalized, Refunding}\n', '\n', '\n', '  // A new investment was made\n', '  event Invested(address investor, uint weiAmount, uint tokenAmount, uint128 customerId);\n', '\n', '  // Refund was processed for a contributor\n', '  event Refund(address investor, uint weiAmount);\n', '\n', '  // The rules about what kind of investments we accept were changed\n', '  event InvestmentPolicyChanged(bool requireCId);\n', '\n', '  // Address early participation whitelist status changed\n', '  event Whitelisted(address addr, bool status);\n', '\n', '  // Crowdsale&#39;s finalize function has been called\n', '  event Finalized();\n', '\n', '\n', '  function GenericCrowdsale(address team_multisig, uint start, uint end, uint min_goal) internal {\n', '    setMultisig(team_multisig);\n', '\n', '    // Don&#39;t mess the dates\n', '    require(start != 0 && end != 0);\n', '    require(block.number < start && start < end);\n', '    startsAt = start;\n', '    endsAt = end;\n', '\n', '    // Minimum funding goal can be zero\n', '    minimumFundingGoal = min_goal;\n', '  }\n', '\n', '  /**\n', '   * Don&#39;t expect to just send in money and get tokens.\n', '   */\n', '  function() payable {\n', '    require(false);\n', '  }\n', '\n', '  /**\n', '   * Make an investment.\n', '   *\n', '   * Crowdsale must be running for one to invest.\n', '   * We must have not pressed the emergency brake.\n', '   *\n', '   * @param receiver The Ethereum address who receives the tokens\n', '   * @param customerId (optional) UUID v4 to track the successful payments on the server side\n', '   *\n', '   */\n', '  function investInternal(address receiver, uint128 customerId) stopInEmergency notFinished private {\n', '    // Determine if it&#39;s a good time to accept investment from this participant\n', '    if (getState() == State.PreFunding) {\n', '      // Are we whitelisted for early deposit\n', '      require(earlyParticipantWhitelist[receiver]);\n', '    }\n', '\n', '    uint weiAllowedAmount = weiAllowedToReceive(msg.value, receiver);\n', '    uint tokenAmount = calculatePrice(weiAllowedAmount, msg.sender);\n', '    \n', '    // Dust transaction if no tokens can be given\n', '    require(tokenAmount != 0);\n', '\n', '    if (investedAmountOf[receiver] == 0) {\n', '      // A new investor\n', '      investorCount++;\n', '    }\n', '    updateInvestorFunds(tokenAmount, weiAllowedAmount, receiver, customerId);\n', '\n', '    // Pocket the money\n', '    multisigWallet.transfer(weiAllowedAmount);\n', '\n', '    // Return excess of money\n', '    uint weiToReturn = msg.value.sub(weiAllowedAmount);\n', '    if (weiToReturn > 0) {\n', '      msg.sender.transfer(weiToReturn);\n', '    }\n', '  }\n', '\n', '  /** \n', '   *  Calculate the size of the investment that we can accept from this address.\n', '   */\n', '  function weiAllowedToReceive(uint weiAmount, address customer) internal constant returns (uint weiAllowed);\n', '\n', '  /** \n', '   *  Calculate the amount of tokens that correspond to the received amount.\n', '   *  When there&#39;s an excedent due to rounding error, it should be returned to allow refunding.\n', '   */\n', '  function calculatePrice(uint weiAmount, address customer) internal constant returns (uint tokenAmount);\n', '\n', '  /**\n', '   * Preallocate tokens for the early investors.\n', '   *\n', '   * Preallocated tokens have been sold before the actual crowdsale opens.\n', '   * This function mints the tokens and moves the crowdsale needle.\n', '   *\n', '   * No money is exchanged, as the crowdsale team already have received the payment.\n', '   *\n', '   * @param fullTokens tokens as full tokens - decimal places added internally\n', '   * @param weiPrice Price of a single full token in wei\n', '   *\n', '   */\n', '  function preallocate(address receiver, uint fullTokens, uint weiPrice) public onlyOwner notFinished {\n', '    require(receiver != address(0));\n', '    uint tokenAmount = fullTokens.mul(10**uint(token.decimals()));\n', '    require(tokenAmount != 0);\n', '    uint weiAmount = weiPrice.mul(tokenAmount); // This can also be 0, in which case we give out tokens for free\n', '    updateInvestorFunds(tokenAmount, weiAmount, receiver , 0);\n', '  }\n', '\n', '  /**\n', '   * Private function to update accounting in the crowdsale.\n', '   */\n', '  function updateInvestorFunds(uint tokenAmount, uint weiAmount, address receiver, uint128 customerId) private {\n', '    // Update investor\n', '    investedAmountOf[receiver] = investedAmountOf[receiver].add(weiAmount);\n', '    tokenAmountOf[receiver] = tokenAmountOf[receiver].add(tokenAmount);\n', '\n', '    // Update totals\n', '    weiRaised = weiRaised.add(weiAmount);\n', '    tokensSold = tokensSold.add(tokenAmount);\n', '\n', '    assignTokens(receiver, tokenAmount);\n', '    // Tell us that the investment was completed successfully\n', '    Invested(receiver, weiAmount, tokenAmount, customerId);\n', '  }\n', '\n', '\n', '\n', '  /**\n', '   * Investing function that recognizes the payer.\n', '   * \n', '   * @param customerId UUIDv4 that identifies this contributor\n', '   */\n', '  function buyWithCustomerId(uint128 customerId) public payable {\n', '    require(customerId != 0);  // UUIDv4 sanity check\n', '    investInternal(msg.sender, customerId);\n', '  }\n', '\n', '  /**\n', '   * The basic entry point to participate in the crowdsale process.\n', '   *\n', '   * Pay for funding, get invested tokens back in the sender address.\n', '   */\n', '  function buy() public payable {\n', '    require(!requireCustomerId); // Crowdsale needs to track participants for thank you email\n', '    investInternal(msg.sender, 0);\n', '  }\n', '\n', '  /**\n', '   * Finalize a succcesful crowdsale.\n', '   *\n', '   * The owner can trigger a call the contract that provides post-crowdsale actions, like releasing the tokens.\n', '   * Note that by default tokens are not in a released state.\n', '   */\n', '  function finalize() public inState(State.Success) onlyOwner stopInEmergency {\n', '    if (address(finalizeAgent) != 0)\n', '      finalizeAgent.finalizeCrowdsale(token);\n', '    finalized = true;\n', '    Finalized();\n', '  }\n', '\n', '  /**\n', '   * Set policy do we need to have server-side customer ids for the investments.\n', '   *\n', '   */\n', '  function setRequireCustomerId(bool value) public onlyOwner stopInEmergency {\n', '    requireCustomerId = value;\n', '    InvestmentPolicyChanged(requireCustomerId);\n', '  }\n', '\n', '  /**\n', '   * Allow addresses to do early participation.\n', '   */\n', '  function setEarlyParticipantWhitelist(address addr, bool status) public onlyOwner notFinished stopInEmergency {\n', '    earlyParticipantWhitelist[addr] = status;\n', '    Whitelisted(addr, status);\n', '  }\n', '\n', '  /**\n', '   * Allow to (re)set finalize agent.\n', '   */\n', '  function setFinalizeAgent(FinalizeAgent addr) internal {\n', '    // Disallow setting a bad agent\n', '    require(address(addr) == 0 || addr.isFinalizeAgent());\n', '    finalizeAgent = addr;\n', '    require(isFinalizerSane());\n', '  }\n', '\n', '  /**\n', '   * Internal setter for the multisig wallet\n', '   */\n', '  function setMultisig(address addr) internal {\n', '    require(addr != 0);\n', '    multisigWallet = addr;\n', '  }\n', '\n', '  /**\n', '   * Allow load refunds back on the contract for the refunding.\n', '   *\n', '   * The team can transfer the funds back on the smart contract in the case that the minimum goal was not reached.\n', '   */\n', '  function loadRefund() public payable inState(State.Failure) stopInEmergency {\n', '    require(msg.value >= weiRaised);\n', '    require(weiRefunded == 0);\n', '    uint excedent = msg.value.sub(weiRaised);\n', '    loadedRefund = loadedRefund.add(msg.value.sub(excedent));\n', '    investedAmountOf[msg.sender].add(excedent);\n', '  }\n', '\n', '  /**\n', '   * Investors can claim refund.\n', '   */\n', '  function refund() public inState(State.Refunding) stopInEmergency {\n', '    uint weiValue = investedAmountOf[msg.sender];\n', '    require(weiValue != 0);\n', '    investedAmountOf[msg.sender] = 0;\n', '    weiRefunded = weiRefunded.add(weiValue);\n', '    Refund(msg.sender, weiValue);\n', '    msg.sender.transfer(weiValue);\n', '  }\n', '\n', '  /**\n', '   * @return true if the crowdsale has raised enough money to be a success\n', '   */\n', '  function isMinimumGoalReached() public constant returns (bool reached) {\n', '    return weiRaised >= minimumFundingGoal;\n', '  }\n', '\n', '  function isCrowdsaleFull() internal constant returns (bool full);\n', '\n', '  /**\n', '   * Check if the contract relationship looks good.\n', '   */\n', '  function isFinalizerSane() public constant returns (bool sane) {\n', '    return address(finalizeAgent) == 0 || finalizeAgent.isSane(token);\n', '  }\n', '\n', '  /**\n', '   * Crowdfund state machine management.\n', '   *\n', '   * This function has the timed transition builtin.\n', '   * So there is no chance of the variable being stale.\n', '   */\n', '  function getState() public constant returns (State) {\n', '    if (finalized) return State.Finalized;\n', '    else if (block.number < startsAt) return State.PreFunding;\n', '    else if (block.number <= endsAt && !isCrowdsaleFull()) return State.Funding;\n', '    else if (isMinimumGoalReached()) return State.Success;\n', '    else if (!isMinimumGoalReached() && weiRaised > 0 && loadedRefund >= weiRaised) return State.Refunding;\n', '    else return State.Failure;\n', '  }\n', '\n', '  /** This is for manual testing of multisig wallet interaction */\n', '  function setOwnerTestValue(uint8 val) public onlyOwner stopInEmergency {\n', '    ownerTestValue = val;\n', '  }\n', '\n', '  /** Interface for the concrete instance to interact with the token contract in a customizable way */\n', '  function assignTokens(address receiver, uint tokenAmount) internal;\n', '\n', '  /** Interface marker. */\n', '  function isCrowdsale() public constant returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  //\n', '  // Modifiers\n', '  //\n', '\n', '  /** Modifier allowing execution only if the crowdsale is currently running.  */\n', '  modifier inState(State state) {\n', '    require(getState() == state);\n', '    _;\n', '  }\n', '\n', '  modifier notFinished() {\n', '    State current_state = getState();\n', '    require(current_state == State.PreFunding || current_state == State.Funding);\n', '    _;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract CappedCrowdsale is GenericCrowdsale {\n', '\n', '  // The funding cannot exceed this cap; it may be set later on during the crowdsale\n', '  uint public weiFundingCap = 0;\n', '\n', '  // A new funding cap has been set\n', '  event FundingCapSet(uint newFundingCap);\n', '\n', '\n', '  /**\n', '   * Allow the owner to set a funding cap on the crowdsale.\n', '   * The new cap should be higher than the minimum funding goal.\n', '   * \n', '   * @param newCap minimum target cap that may be relaxed if it was already broken.\n', '   */\n', '\n', '\n', '  function setFundingCap(uint newCap) internal onlyOwner notFinished {\n', '    weiFundingCap = newCap;\n', '    require(weiFundingCap >= minimumFundingGoal);\n', '    FundingCapSet(weiFundingCap);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20Basic {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint);\n', '  function transfer(address to, uint value) public returns (bool ok);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint);\n', '  function transferFrom(address from, address to, uint value) public returns (bool ok);\n', '  function approve(address spender, uint value) public returns (bool ok);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '/**\n', ' * A token that defines fractional units as decimals.\n', ' */\n', 'contract FractionalERC20 is ERC20 {\n', '\n', '  uint8 public decimals;\n', '\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint;\n', '\n', '  mapping(address => uint) balances;\n', '\n', '  /**\n', '   * Obsolete. Removed this check based on:\n', '   * https://blog.coinfabrik.com/smart-contract-short-address-attack-mitigation-failure/\n', '   * @dev Fix for the ERC20 short address attack.\n', '   *\n', '   * modifier onlyPayloadSize(uint size) {\n', '   *    require(msg.data.length >= size + 4);\n', '   *    _;\n', '   * }\n', '   */\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint _value) public returns (bool success) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '  \n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract StandardToken is BasicToken, ERC20 {\n', '\n', '  /* Token supply got increased and a new owner received these tokens */\n', '  event Minted(address receiver, uint amount);\n', '\n', '  mapping (address => mapping (address => uint)) allowed;\n', '\n', '  /* Interface declaration */\n', '  function isToken() public constant returns (bool weAre) {\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\n', '    uint _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require(_value <= _allowance);\n', '    // SafeMath uses assert instead of require though, beware when using an analysis tool\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint _value) public returns (bool success) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses&#39;\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require (_value == 0 || allowed[msg.sender][_spender] == 0);\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens than an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * Atomic increment of approved spending\n', '   *\n', '   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   *\n', '   */\n', '  function addApproval(address _spender, uint _addedValue) public\n', '  returns (bool success) {\n', '      uint oldValue = allowed[msg.sender][_spender];\n', '      allowed[msg.sender][_spender] = oldValue.add(_addedValue);\n', '      Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '      return true;\n', '  }\n', '\n', '  /**\n', '   * Atomic decrement of approved spending.\n', '   *\n', '   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   */\n', '  function subApproval(address _spender, uint _subtractedValue) public\n', '  returns (bool success) {\n', '\n', '      uint oldVal = allowed[msg.sender][_spender];\n', '\n', '      if (_subtractedValue > oldVal) {\n', '          allowed[msg.sender][_spender] = 0;\n', '      } else {\n', '          allowed[msg.sender][_spender] = oldVal.sub(_subtractedValue);\n', '      }\n', '      Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '      return true;\n', '  }\n', '  \n', '}\n', '\n', '/**\n', ' * Define interface for releasing the token transfer after a successful crowdsale.\n', ' */\n', 'contract ReleasableToken is StandardToken, Ownable {\n', '\n', '  /* The finalizer contract that allows lifting the transfer limits on this token */\n', '  address public releaseAgent;\n', '\n', '  /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\n', '  bool public released = false;\n', '\n', '  /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\n', '  mapping (address => bool) public transferAgents;\n', '\n', '  /**\n', '   * Set the contract that can call release and make the token transferable.\n', '   *\n', '   * Since the owner of this contract is (or should be) the crowdsale,\n', '   * it can only be called by a corresponding exposed API in the crowdsale contract in case of input error.\n', '   */\n', '  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\n', '    // We don&#39;t do interface check here as we might want to have a normal wallet address to act as a release agent.\n', '    releaseAgent = addr;\n', '  }\n', '\n', '  /**\n', '   * Owner can allow a particular address (e.g. a crowdsale contract) to transfer tokens despite the lock up period.\n', '   */\n', '  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\n', '    transferAgents[addr] = state;\n', '  }\n', '\n', '  /**\n', '   * One way function to release the tokens into the wild.\n', '   *\n', '   * Can be called only from the release agent that should typically be the finalize agent ICO contract.\n', '   * In the scope of the crowdsale, it is only called if the crowdsale has been a success (first milestone reached).\n', '   */\n', '  function releaseTokenTransfer() public onlyReleaseAgent {\n', '    released = true;\n', '  }\n', '\n', '  /**\n', '   * Limit token transfer until the crowdsale is over.\n', '   */\n', '  modifier canTransfer(address _sender) {\n', '    require(released || transferAgents[_sender]);\n', '    _;\n', '  }\n', '\n', '  /** The function can be called only before or after the tokens have been released */\n', '  modifier inReleaseState(bool releaseState) {\n', '    require(releaseState == released);\n', '    _;\n', '  }\n', '\n', '  /** The function can be called only by a whitelisted release agent. */\n', '  modifier onlyReleaseAgent() {\n', '    require(msg.sender == releaseAgent);\n', '    _;\n', '  }\n', '\n', '  /** We restrict transfer by overriding it */\n', '  function transfer(address _to, uint _value) public canTransfer(msg.sender) returns (bool success) {\n', '    // Call StandardToken.transfer()\n', '   return super.transfer(_to, _value);\n', '  }\n', '\n', '  /** We restrict transferFrom by overriding it */\n', '  function transferFrom(address _from, address _to, uint _value) public canTransfer(_from) returns (bool success) {\n', '    // Call StandardToken.transferForm()\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * A token that can increase its supply by another contract.\n', ' *\n', ' * This allows uncapped crowdsale by dynamically increasing the supply when money pours in.\n', ' * Only mint agents, contracts whitelisted by owner, can mint new tokens.\n', ' *\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '\n', '  using SafeMath for uint;\n', '\n', '  bool public mintingFinished = false;\n', '\n', '  /** List of agents that are allowed to create new tokens */\n', '  mapping (address => bool) public mintAgents;\n', '\n', '  event MintingAgentChanged(address addr, bool state);\n', '\n', '\n', '  function MintableToken(uint _initialSupply, address _multisig, bool _mintable) internal {\n', '    require(_multisig != address(0));\n', '    // Cannot create a token without supply and no minting\n', '    require(_mintable || _initialSupply != 0);\n', '    // Create initially all balance on the team multisig\n', '    if (_initialSupply > 0)\n', '        mintInternal(_multisig, _initialSupply);\n', '    // No more new supply allowed after the token creation\n', '    mintingFinished = !_mintable;\n', '  }\n', '\n', '  /**\n', '   * Create new tokens and allocate them to an address.\n', '   *\n', '   * Only callable by a crowdsale contract (mint agent).\n', '   */\n', '  function mint(address receiver, uint amount) onlyMintAgent public {\n', '    mintInternal(receiver, amount);\n', '  }\n', '\n', '  function mintInternal(address receiver, uint amount) canMint private {\n', '    totalSupply = totalSupply.add(amount);\n', '    balances[receiver] = balances[receiver].add(amount);\n', '\n', '    // This will make the mint transaction appear in EtherScan.io\n', '    // We can remove this after there is a standardized minting event\n', '    Transfer(0, receiver, amount);\n', '\n', '    Minted(receiver, amount);\n', '  }\n', '\n', '  /**\n', '   * Owner can allow a crowdsale contract to mint new tokens.\n', '   */\n', '  function setMintAgent(address addr, bool state) onlyOwner canMint public {\n', '    mintAgents[addr] = state;\n', '    MintingAgentChanged(addr, state);\n', '  }\n', '\n', '  modifier onlyMintAgent() {\n', '    // Only mint agents are allowed to mint new tokens\n', '    require(mintAgents[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  /** Make sure we are not done yet. */\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '}\n', '\n', '/**\n', ' * Upgrade agent transfers tokens to a new contract.\n', ' * Upgrade agent itself can be the token contract, or just a middle man contract doing the heavy lifting.\n', ' *\n', ' * The Upgrade agent is the interface used to implement a token\n', ' * migration in the case of an emergency.\n', ' * The function upgradeFrom has to implement the part of the creation\n', ' * of new tokens on behalf of the user doing the upgrade.\n', ' *\n', ' * The new token can implement this interface directly, or use.\n', ' */\n', 'contract UpgradeAgent {\n', '\n', '  /** This value should be the same as the original token&#39;s total supply */\n', '  uint public originalSupply;\n', '\n', '  /** Interface to ensure the contract is correctly configured */\n', '  function isUpgradeAgent() public constant returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  Upgrade an account\n', '\n', '  When the token contract is in the upgrade status the each user will\n', '  have to call `upgrade(value)` function from UpgradeableToken.\n', '\n', '  The upgrade function adjust the balance of the user and the supply\n', '  of the previous token and then call `upgradeFrom(value)`.\n', '\n', '  The UpgradeAgent is the responsible to create the tokens for the user\n', '  in the new contract.\n', '\n', '  * @param _from Account to upgrade.\n', '  * @param _value Tokens to upgrade.\n', '\n', '  */\n', '  function upgradeFrom(address _from, uint _value) public;\n', '\n', '}\n', '\n', '/**\n', ' * A token upgrade mechanism where users can opt-in amount of tokens to the next smart contract revision.\n', ' *\n', ' */\n', 'contract UpgradeableToken is StandardToken {\n', '\n', '  /** Contract / person who can set the upgrade path. This can be the same as team multisig wallet, as what it is with its default value. */\n', '  address public upgradeMaster;\n', '\n', '  /** The next contract where the tokens will be migrated. */\n', '  UpgradeAgent public upgradeAgent;\n', '\n', '  /** How many tokens we have upgraded by now. */\n', '  uint public totalUpgraded;\n', '\n', '  /**\n', '   * Upgrade states.\n', '   *\n', '   * - NotAllowed: The child contract has not reached a condition where the upgrade can bgun\n', '   * - WaitingForAgent: Token allows upgrade, but we don&#39;t have a new agent yet\n', '   * - ReadyToUpgrade: The agent is set, but not a single token has been upgraded yet\n', '   * - Upgrading: Upgrade agent is set and the balance holders can upgrade their tokens\n', '   *\n', '   */\n', '  enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\n', '\n', '  /**\n', '   * Somebody has upgraded some of his tokens.\n', '   */\n', '  event Upgrade(address indexed _from, address indexed _to, uint _value);\n', '\n', '  /**\n', '   * New upgrade agent available.\n', '   */\n', '  event UpgradeAgentSet(address agent);\n', '\n', '  /**\n', '   * Do not allow construction without upgrade master set.\n', '   */\n', '  function UpgradeableToken(address _upgradeMaster) {\n', '    setUpgradeMaster(_upgradeMaster);\n', '  }\n', '\n', '  /**\n', '   * Allow the token holder to upgrade some of their tokens to a new contract.\n', '   */\n', '  function upgrade(uint value) public {\n', '    UpgradeState state = getUpgradeState();\n', '    // Ensure it&#39;s not called in a bad state\n', '    require(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading);\n', '\n', '    // Validate input value.\n', '    require(value != 0);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(value);\n', '\n', '    // Take tokens out from circulation\n', '    totalSupply = totalSupply.sub(value);\n', '    totalUpgraded = totalUpgraded.add(value);\n', '\n', '    // Upgrade agent reissues the tokens\n', '    upgradeAgent.upgradeFrom(msg.sender, value);\n', '    Upgrade(msg.sender, upgradeAgent, value);\n', '  }\n', '\n', '  /**\n', '   * Set an upgrade agent that handles the upgrade process\n', '   */\n', '  function setUpgradeAgent(address agent) external {\n', '    // Check whether the token is in a state that we could think of upgrading\n', '    require(canUpgrade());\n', '\n', '    require(agent != 0x0);\n', '    // Only a master can designate the next agent\n', '    require(msg.sender == upgradeMaster);\n', '    // Upgrade has already begun for an agent\n', '    require(getUpgradeState() != UpgradeState.Upgrading);\n', '\n', '    upgradeAgent = UpgradeAgent(agent);\n', '\n', '    // Bad interface\n', '    require(upgradeAgent.isUpgradeAgent());\n', '    // Make sure that token supplies match in source and target\n', '    require(upgradeAgent.originalSupply() == totalSupply);\n', '\n', '    UpgradeAgentSet(upgradeAgent);\n', '  }\n', '\n', '  /**\n', '   * Get the state of the token upgrade.\n', '   */\n', '  function getUpgradeState() public constant returns(UpgradeState) {\n', '    if (!canUpgrade()) return UpgradeState.NotAllowed;\n', '    else if (address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\n', '    else if (totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\n', '    else return UpgradeState.Upgrading;\n', '  }\n', '\n', '  /**\n', '   * Change the upgrade master.\n', '   *\n', '   * This allows us to set a new owner for the upgrade mechanism.\n', '   */\n', '  function changeUpgradeMaster(address new_master) public {\n', '    require(msg.sender == upgradeMaster);\n', '    setUpgradeMaster(new_master);\n', '  }\n', '\n', '  /**\n', '   * Internal upgrade master setter.\n', '   */\n', '  function setUpgradeMaster(address new_master) private {\n', '    require(new_master != 0x0);\n', '    upgradeMaster = new_master;\n', '  }\n', '\n', '  /**\n', '   * Child contract can enable to provide the condition when the upgrade can begin.\n', '   */\n', '  function canUpgrade() public constant returns(bool) {\n', '     return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * A crowdsale token.\n', ' *\n', ' * An ERC-20 token designed specifically for crowdsales with investor protection and further development path.\n', ' *\n', ' * - The token transfer() is disabled until the crowdsale is over\n', ' * - The token contract gives an opt-in upgrade path to a new contract\n', ' * - The same token can be part of several crowdsales through the approve() mechanism\n', ' * - The token can be capped (supply set in the constructor) or uncapped (crowdsale contract can mint new tokens)\n', ' *\n', ' */\n', 'contract CrowdsaleToken is ReleasableToken, MintableToken, UpgradeableToken, FractionalERC20 {\n', '\n', '  event UpdatedTokenInformation(string newName, string newSymbol);\n', '\n', '  string public name;\n', '\n', '  string public symbol;\n', '\n', '  /**\n', '   * Construct the token.\n', '   *\n', '   * This token must be created through a team multisig wallet, so that it is owned by that wallet.\n', '   *\n', '   * @param _name Token name\n', '   * @param _symbol Token symbol - typically it&#39;s all caps\n', '   * @param _initialSupply How many tokens we start with\n', '   * @param _decimals Number of decimal places\n', '   * @param _mintable Are new tokens created over the crowdsale or do we distribute only the initial supply? Note that when the token becomes transferable the minting always ends.\n', '   */\n', '  function CrowdsaleToken(string _name, string _symbol, uint _initialSupply, uint8 _decimals, address _multisig, bool _mintable)\n', '    UpgradeableToken(_multisig) MintableToken(_initialSupply, _multisig, _mintable) {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '  }\n', '\n', '  /**\n', '   * When token is released to be transferable, prohibit new token creation.\n', '   */\n', '  function releaseTokenTransfer() public onlyReleaseAgent {\n', '    mintingFinished = true;\n', '    super.releaseTokenTransfer();\n', '  }\n', '\n', '  /**\n', '   * Allow upgrade agent functionality to kick in only if the crowdsale was a success.\n', '   */\n', '  function canUpgrade() public constant returns(bool) {\n', '    return released && super.canUpgrade();\n', '  }\n', '\n', '  /**\n', '   * Owner can update token information here\n', '   */\n', '  function setTokenInformation(string _name, string _symbol) onlyOwner {\n', '    name = _name;\n', '    symbol = _symbol;\n', '\n', '    UpdatedTokenInformation(name, symbol);\n', '  }\n', '\n', '}\n', '\n', '// This contract has the sole objective of providing a sane concrete instance of the Crowdsale contract.\n', 'contract Crowdsale is CappedCrowdsale {\n', '  uint private constant minimum_funding = 0 * (10 ** 18); // in wei\n', '\n', '  uint private constant token_initial_supply = 0;\n', '  uint8 private constant token_decimals = 16;\n', '  bool private constant token_mintable = true;\n', '  string private constant token_name = "Ribbits";\n', '  string private constant token_symbol = "RNT";\n', '\n', '  uint private constant fundingCap = uint(100000000 * (10 ** 18)) / 2700;\n', '\n', '\n', '  uint private constant decimalTokensPerWei2Eth = 25;\n', '  uint private constant decimalTokensPerWei20Eth = 26;\n', '  uint private constant decimalTokensPerWei50Eth = 27;\n', '\n', '  mapping (address => bool) public discountedInvestors;\n', '\n', '\n', '  function Crowdsale(address team_multisig, uint start, uint end) GenericCrowdsale(team_multisig, start, end, minimum_funding) public {\n', '    // Testing values\n', '    token = new CrowdsaleToken(token_name, token_symbol, token_initial_supply, token_decimals, team_multisig, token_mintable);\n', '    token.setMintAgent(address(this), true);\n', '    setFundingCap(fundingCap);\n', '  }\n', '\n', '  // We assign tokens through the minting mechanism.\n', '  function assignTokens(address receiver, uint tokenAmount) internal {\n', '    token.mint(receiver, tokenAmount);\n', '  }\n', '\n', '  // These two setters are present only to correct block numbers if they are off from their target date by more than, say, a day\n', '  function setStartingBlock(uint startingBlock) public onlyOwner inState(State.PreFunding) {\n', '    require(startingBlock > block.number && startingBlock < endsAt);\n', '    startsAt = startingBlock;\n', '  }\n', '\n', '  function setEndingBlock(uint endingBlock) public onlyOwner notFinished {\n', '    require(endingBlock > block.number && endingBlock > startsAt);\n', '    endsAt = endingBlock;\n', '  }\n', '\n', '  modifier notLessThan2Eth() {\n', '    require(investedAmountOf[msg.sender].add(msg.value) >= 2 * (10**18));\n', '    _;\n', '  }\n', '\n', '  // Here we calculate the amount of tokens that corresponds to each price point.\n', '  function calculatePrice(uint weiAmount, address customer) internal constant returns (uint) {\n', '    uint investedAmount = investedAmountOf[customer].add(weiAmount);\n', '    uint decimalTokensPerWei;\n', '    if (investedAmount <= 20 * (10**18) && !discountedInvestors[customer]) {\n', '      decimalTokensPerWei = decimalTokensPerWei2Eth;\n', '    } else if (investedAmount <= 50 * (10**18)) {\n', '      decimalTokensPerWei = decimalTokensPerWei20Eth;\n', '    } else {\n', '      decimalTokensPerWei = decimalTokensPerWei50Eth;\n', '    }\n', '    uint decimalTokens = weiAmount.mul(decimalTokensPerWei);\n', '    return decimalTokens;\n', '  }\n', '\n', '  // We restrict investments to those with a minimum of 2 ETH\n', '  function buy() public payable notLessThan2Eth {\n', '    super.buy();\n', '  }\n', '\n', '  // Override the fallback function to allow simple transfers\n', '  function() payable {\n', '    buy();\n', '  }\n', '\n', '  // The owner is supposed to whitelist investors for the discounted price at lower price points\n', '  function setDiscountedInvestor(address addr, bool status) public onlyOwner notFinished stopInEmergency {\n', '    discountedInvestors[addr] = status;\n', '  }\n', '\n', '  // We set an upper bound for the sold tokens by limiting ether raised\n', '  function weiAllowedToReceive(uint tentativeAmount, address) internal constant returns (uint) {\n', '    // Then, we check the funding cap\n', '    if (weiFundingCap == 0) return tentativeAmount;\n', '    uint total = tentativeAmount.add(weiRaised);\n', '    if (total < weiFundingCap) return tentativeAmount;\n', '    else return weiFundingCap.sub(weiRaised);\n', '  }\n', '\n', '  function isCrowdsaleFull() internal constant returns (bool) {\n', '    return weiFundingCap > 0 && weiRaised >= weiFundingCap;\n', '  }\n', '}']