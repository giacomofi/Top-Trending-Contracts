['pragma solidity ^0.4.11;\n', '// Cancelot dapp on-chain component.\n', "// Forwards ENS .eth Registrar cancelBid(...) call if bid's Deed not yet cancelled.\n", '// Author:  Noel Maersk (veox)\n', '// License: GPLv3.\n', '// Sources: https://gitlab.com/veox/cancelot (Not yet available during deployment time - stay tuned!..)\n', '// Compile: solc 0.4.11+commit.68ef5810.Linux.g++ /w optimisations\n', '\n', '// Minimal implementation of the .eth Registrar interface.\n', 'contract RegistrarFakeInterface {\n', '    // Short-circuit address->bytes32->Deed mapping. Signature 0x5e431709.\n', '    mapping (address => mapping(bytes32 => address)) public sealedBids;\n', '    //mapping (address => mapping(bytes32 => Deed)) public sealedBids;\n', '    //function sealedBids(address bidder, bytes32 seal) constant returns(address);\n', '\n', '    // Actual. Signature 0x2525f5c1.\n', '    function cancelBid(address bidder, bytes32 seal);\n', '}\n', '\n', '// Sir Cancelot, the cancellation bot - banger of coconuts, protector of nothing.\n', "// Game-theoretic looney. Sees the world burn, even if it doesn't. To be avoided.\n", 'contract Cancelot {\n', '    address public owner;\n', '    RegistrarFakeInterface registrar;\n', '\n', '    modifier only_owner {\n', '        if (msg.sender == owner) _;\n', '    }\n', '\n', '    function Cancelot(address _owner, address _registrar) {\n', '        owner = _owner;\n', '        registrar = RegistrarFakeInterface(_registrar);\n', '    }\n', '\n', '    function cancel(address bidder, bytes32 seal) {\n', '        if (registrar.sealedBids(bidder, seal) != 0)\n', '            registrar.cancelBid.gas(msg.gas)(bidder, seal);\n', '    }\n', '\n', '    function withdraw() {\n', '        owner.transfer(this.balance);\n', '    }\n', '\n', '    function sweep(address bidder, bytes32 seal) {\n', '        cancel(bidder, seal);\n', '        withdraw();\n', '    }\n', '\n', '    function () payable {}\n', '\n', '    function terminate() only_owner {\n', '        selfdestruct(owner);\n', '    }\n', '}']