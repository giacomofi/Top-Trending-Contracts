['contract Math {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    assert(b > 0);\n', '    uint c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      throw;\n', '    }\n', '  }\n', '}\n', '// Abstract contract for the full ERC 20 Token standard\n', '// https://github.com/ethereum/EIPs/issues/20\n', '\n', '\n', 'contract Token {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '    uint256 public totalDividends;\n', '    uint public voteEnds = 1;\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '    function voteBalance(address _owner) constant returns (uint256 balance);\n', '\n', '    function voteCount(address _proposal) constant returns (uint256 count);\n', '\n', '    // /// @notice send `_value` token to `_to` from `msg.sender`\n', '    // /// @param _to The address of the recipient\n', '    // /// @param _value The amount of token to be transferred\n', '    // /// @return Whether the transfer was successful or not\n', '    // function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '    // /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    // /// @param _from The address of the sender\n', '    // /// @param _to The address of the recipient\n', '    // /// @param _value The amount of token to be transferred\n', '    // /// @return Whether the transfer was successful or not\n', '    // function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return remaining of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '}\n', '/*\n', 'You should inherit from StandardToken or, for a token like you would want to\n', 'deploy in something like Mist, see HumanStandardToken.sol.\n', '(This implements ONLY the standard functions and NOTHING else.\n', "If you deploy this, you won't have anything useful.)\n", '\n', 'Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\n', '.*/\n', '\n', 'contract StandardToken is Token {\n', '\n', '    struct Account {\n', '        uint votes;\n', '        uint lastVote;\n', '        uint lastDividends;\n', '    }\n', '\n', '    modifier voteUpdater(address _to, address _from) {\n', '        if (accounts[_from].lastVote == voteEnds) {\n', '            if (accounts[_to].lastVote < voteEnds) {\n', '                accounts[_to].votes = balances[_to];\n', '                accounts[_to].lastVote = voteEnds;\n', '            }\n', '        } else if (accounts[_from].lastVote < voteEnds) {\n', '            accounts[_from].votes = balances[_from];\n', '            accounts[_from].lastVote = voteEnds;\n', '            if (accounts[_to].lastVote < voteEnds) {\n', '                accounts[_to].votes = balances[_to];\n', '                accounts[_to].lastVote = voteEnds;\n', '            }\n', '        }\n', '        _;\n', '\n', '    }\n', '    modifier updateAccount(address account) {\n', '      var owing = dividendsOwing(account);\n', '      if(owing > 0) {\n', '        account.send(owing);\n', '        accounts[account].lastDividends = totalDividends;\n', '      }\n', '      _;\n', '    }\n', '    function dividendsOwing(address account) internal returns(uint) {\n', '      var newDividends = totalDividends - accounts[account].lastDividends;\n', '      return (balances[account] * newDividends) / totalSupply;\n', '    }\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '    function voteCount(address _proposal) constant returns (uint256 count) {\n', '        return votes[_proposal];\n', '    }\n', '    function voteBalance(address _owner) constant returns (uint256 balance)\n', '    {\n', '        return accounts[_owner].votes;\n', '\n', '    }\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) \n', '    updateAccount(msg.sender)\n', '    voteUpdater(_to, msg.sender)\n', '    returns (bool success) \n', '    {\n', "        //Default assumes totalSupply can't be over max (2^256 - 1).\n", "        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n", '        //Replace the if with this one instead.\n', '        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '    updateAccount(msg.sender) \n', '    voteUpdater(_to, _from)\n', '    returns (bool success) \n', '    {\n', '        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    mapping (address => Account) accounts;\n', '    mapping (address => uint ) votes;\n', '}\n', '\n', '// Created By: Strategic Investments in Strategic Areas Group\n', '\n', 'contract SISA is StandardToken, Math {\n', '\n', '\n', '\tstring constant public name = "SISA Token";\n', '\tstring constant public symbol = "SISA";\n', '\tuint constant public decimals = 18;\n', '\n', '\taddress public ico_tokens = 0x1111111111111111111111111111111111111111;\n', '\taddress public preICO_tokens = 0x2222222222222222222222222222222222222222;\n', '\taddress public bounty_funds;\n', '\taddress public founder;\n', '\taddress public admin;\n', '\taddress public team_funds;\n', '\taddress public issuer;\n', '\taddress public preseller;\n', '\n', '\n', '\n', '\n', '\n', '\tfunction () payable {\n', '\t  totalDividends += msg.value;\n', '\t  //deduct(msg.sender, amount);\n', '\t}\n', '\n', '\n', '\tmodifier onlyFounder() {\n', '\t    // Only founder is allowed to do this action.\n', '\t    if (msg.sender != founder) {\n', '\t        throw;\n', '\t    }\n', '\t    _;\n', '\t}\n', '\tmodifier onlyAdmin() {\n', '\t    // Only admin is allowed to do this action.\n', '\t    if (msg.sender != admin) {\n', '\t        throw;\n', '\t    }\n', '\t    _;\n', '\t}\n', '    modifier onlyIssuer() {\n', '        // Only Issuer is allowed to proceed.\n', '        if (msg.sender != issuer) {\n', '            throw;\n', '        }\n', '        _;\n', '    }\n', '\n', '\n', '    // modifier hasNotVoted() {\n', '    // \tif (voted[msg.sender]){\n', '    // \t\tthrow;\n', '    // \t}\n', '    // \t_;\n', '    // }\n', '    // function voteCount(address _proposal) \n', '    //     public\n', '    //     returns (uint256) \n', '    // {\n', '    //     return votes[_proposal];\n', '    // }\n', '    // function voteBalance(address _owner) \n', '    //     public\n', '    //     constant returns (uint256)\n', '    // {\n', '    //     return accounts[_owner].votes;\n', '\n', '    // }\n', '    function castVote(address proposal) \n', '    \tpublic\n', '    {\n', '    \tif (accounts[msg.sender].lastVote < voteEnds) {\n', '    \t\taccounts[msg.sender].votes = balances[msg.sender];\n', '    \t\taccounts[msg.sender].lastVote = voteEnds;\n', '\n', '    \t} else if (accounts[msg.sender].votes == 0 ) {\n', '    \t\tthrow;\n', '    \t}\n', '    \tvotes[proposal] = accounts[msg.sender].votes;\n', '    \taccounts[msg.sender].votes = 0;\n', '    \t\n', '    }\n', '    function callVote() \n', '    \tpublic\n', '    \tonlyAdmin\n', '    \treturns (bool)\n', '    {\n', '    \tvoteEnds = now + 7 days;\n', '\n', '    }\n', '    function issueTokens(address _for, uint256 amount)\n', '        public\n', '        onlyIssuer\n', '        returns (bool)\n', '    {\n', '        if(allowed[ico_tokens][issuer] >= amount) { \n', '            transferFrom(ico_tokens, _for, amount);\n', '\n', '            // Issue(_for, msg.sender, amount);\n', '            return true;\n', '        } else {\n', '            throw;\n', '        }\n', '    }\n', '    function changePreseller(address newAddress)\n', '        external\n', '        onlyAdmin\n', '        returns (bool)\n', '    {    \n', '        delete allowed[preICO_tokens][preseller];\n', '        preseller = newAddress;\n', '\n', '        allowed[preICO_tokens][preseller] = balanceOf(preICO_tokens);\n', '\n', '        return true;\n', '    }\n', '    function changeIssuer(address newAddress)\n', '        external\n', '        onlyAdmin\n', '        returns (bool)\n', '    {    \n', '        delete allowed[ico_tokens][issuer];\n', '        issuer = newAddress;\n', '\n', '        allowed[ico_tokens][issuer] = balanceOf(ico_tokens);\n', '\n', '        return true;\n', '    }\n', '\tfunction SISA(address _founder, address _admin, address _bounty, address _team) {\n', '\t\tfounder = _founder;\n', '\t\tadmin = _admin;\n', '\t\tbounty_funds = _bounty;\n', '\t\tteam_funds = _team;\n', '\t\ttotalSupply = 50000000 * 1 ether;\n', '\t\tbalances[preICO_tokens] = 5000000 * 1 ether;\n', '\t\tbalances[bounty_funds] = 3000000 * 1 ether;\n', '\t\tbalances[team_funds] = 7000000 * 1 ether;\n', '\t\tbalances[ico_tokens] = 32500000 * 1 ether;\n', '\n', '\n', '\n', '\t}\n', '\n', '}']