['/*************************************************************************\n', ' * This contract has been merged with solidify\n', ' * https://github.com/tiesnetwork/solidify\n', ' *************************************************************************/\n', ' \n', '/** \n', '\tTies.Network TokenSale contract\n', '\t@author Dmitry Kochin <<span class="__cf_email__" data-cfemail="046f44706d61772a6a6170736b766f">[email&#160;protected]</span>>\n', '*/\n', '\n', '\n', 'pragma solidity ^0.4.14;\n', '\n', '\n', '/*************************************************************************\n', ' * import "./include/MintableToken.sol" : start\n', ' *************************************************************************/\n', '\n', '/*************************************************************************\n', ' * import "zeppelin/contracts/token/StandardToken.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/*************************************************************************\n', ' * import "./BasicToken.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/*************************************************************************\n', ' * import "./ERC20Basic.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '/*************************************************************************\n', ' * import "./ERC20Basic.sol" : end\n', ' *************************************************************************/\n', '/*************************************************************************\n', ' * import "../math/SafeMath.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '/*************************************************************************\n', ' * import "../math/SafeMath.sol" : end\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '/*************************************************************************\n', ' * import "./BasicToken.sol" : end\n', ' *************************************************************************/\n', '/*************************************************************************\n', ' * import "./ERC20.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '/*************************************************************************\n', ' * import "./ERC20.sol" : end\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '/*************************************************************************\n', ' * import "zeppelin/contracts/token/StandardToken.sol" : end\n', ' *************************************************************************/\n', '/*************************************************************************\n', ' * import "zeppelin/contracts/ownership/Ownable.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '/*************************************************************************\n', ' * import "zeppelin/contracts/ownership/Ownable.sol" : end\n', ' *************************************************************************/\n', '\n', '/**\n', ' * Mintable token\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '    uint public totalSupply = 0;\n', '    address private minter;\n', '\n', '    modifier onlyMinter(){\n', '        require(minter == msg.sender);\n', '        _;\n', '    }\n', '\n', '    function setMinter(address _minter) onlyOwner {\n', '        minter = _minter;\n', '    }\n', '\n', '    function mint(address _to, uint _amount) onlyMinter {\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Transfer(address(0x0), _to, _amount);\n', '    }\n', '}\n', '/*************************************************************************\n', ' * import "./include/MintableToken.sol" : end\n', ' *************************************************************************/\n', '\n', '\n', '\n', 'contract TokenSale is Ownable {\n', '    using SafeMath for uint;\n', '\n', '    // Constants\n', '    // =========\n', '\n', '    uint private constant fractions = 1e18;\n', '    uint private constant millions = 1e6*fractions;\n', '\n', '    uint private constant CAP = 200*millions;\n', '    uint private constant SALE_CAP = 140*millions;\n', '    uint private constant BONUS_STEP = 14*millions;\n', '\n', '    uint public price = 0.0008 ether;\n', '\n', '    // Events\n', '    // ======\n', '\n', '    event AltBuy(address holder, uint tokens, string txHash);\n', '    event Buy(address holder, uint tokens);\n', '    event RunSale();\n', '    event PauseSale();\n', '    event FinishSale();\n', '    event PriceSet(uint weiPerTIE);\n', '\n', '    // State variables\n', '    // ===============\n', '\n', '    MintableToken public token;\n', '    address authority; //An account to control the contract on behalf of the owner\n', '    address robot; //An account to purchase tokens for altcoins\n', '    bool public isOpen = false;\n', '\n', '    // Constructor\n', '    // ===========\n', '\n', '    function TokenSale(address _token, address _multisig, address _authority, address _robot){\n', '        token = MintableToken(_token);\n', '        authority = _authority;\n', '        robot = _robot;\n', '        transferOwnership(_multisig);\n', '    }\n', '\n', '    // Public functions\n', '    // ================\n', '\n', '    function getCurrentBonus() constant returns (uint){\n', '        return getBonus(token.totalSupply());\n', '    }\n', '\n', '    /**\n', '    * Gets the bonus for the specified total supply\n', '    */\n', '    function getBonus(uint totalSupply) constant returns (uint){\n', '        bytes10 bonuses = "\\x14\\x11\\x0F\\x0C\\x0A\\x08\\x06\\x04\\x02\\x00";\n', '        uint level = totalSupply/BONUS_STEP;\n', '        if(level < bonuses.length)\n', '            return uint(bonuses[level]);\n', '        return 0;\n', '    }\n', '\n', '    /**\n', '    * Computes number of tokens with bonus for the specified ether. Correctly\n', '    * adds bonuses if the sum is large enough to belong to several bonus intervals\n', '    */\n', '    function getTokensAmount(uint etherVal) constant returns (uint) {\n', '        uint tokens = 0;\n', '        uint totalSupply = token.totalSupply();\n', '        while(true){\n', '            //How much we have before next bonus interval\n', '            uint gap = BONUS_STEP - totalSupply%BONUS_STEP;\n', '            //Bonus at the current interval\n', '            uint bonus = 100 + getBonus(totalSupply);\n', '            //The cost of the entire remainder of this interval\n', '            uint gapCost = gap*(price*100)/fractions/bonus;\n', '            if(gapCost >= etherVal){\n', '                //If the gap is large enough just sell the necessary amount of tokens\n', '                tokens += etherVal.mul(bonus).mul(fractions)/(price*100);\n', '                break;\n', '            }else{\n', '                //If the gap is too small sell it and diminish the price by its cost for the next iteration\n', '                tokens += gap;\n', '                etherVal -= gapCost;\n', '                totalSupply += gap;\n', '            }\n', '        }\n', '        return tokens;\n', '    }\n', '\n', '    function buy(address to) onlyOpen payable{\n', '        uint amount = msg.value;\n', '        uint tokens = getTokensAmountUnderCap(amount);\n', '\n', '        owner.transfer(amount);\n', '        token.mint(to, tokens);\n', '\n', '        Buy(to, tokens);\n', '    }\n', '\n', '    function () payable{\n', '        buy(msg.sender);\n', '    }\n', '\n', '    // Modifiers\n', '    // =================\n', '\n', '    modifier onlyAuthority() {\n', '        require(msg.sender == authority || msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyRobot() {\n', '        require(msg.sender == robot);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOpen() {\n', '        require(isOpen);\n', '        _;\n', '    }\n', '\n', '    // Priveleged functions\n', '    // ====================\n', '\n', '    /**\n', '    * Used to buy tokens for altcoins.\n', '    * Robot may call it before TokenSale officially starts to migrate early investors\n', '    */\n', '    function buyAlt(address to, uint etherAmount, string _txHash) onlyRobot {\n', '        uint tokens = getTokensAmountUnderCap(etherAmount);\n', '        token.mint(to, tokens);\n', '        AltBuy(to, tokens, _txHash);\n', '    }\n', '\n', '    function setAuthority(address _authority) onlyOwner {\n', '        authority = _authority;\n', '    }\n', '\n', '    function setRobot(address _robot) onlyAuthority {\n', '        robot = _robot;\n', '    }\n', '\n', '    function setPrice(uint etherPerTie) onlyAuthority {\n', '        //Ether is not expected to rate less than $96 and more than $480 during token sale\n', '        require(0.0005 ether <= etherPerTie && etherPerTie <= 0.0025 ether);\n', '        price = etherPerTie;\n', '        PriceSet(price);\n', '    }\n', '\n', '    // SALE state management: start / pause / finalize\n', '    // --------------------------------------------\n', '    function open(bool open) onlyAuthority {\n', '        isOpen = open;\n', '        open ? RunSale() : PauseSale();\n', '    }\n', '\n', '    function finalize() onlyAuthority {\n', '        uint diff = CAP.sub(token.totalSupply());\n', '        if(diff > 0) //The unsold capacity moves to team\n', '            token.mint(owner, diff);\n', '        selfdestruct(owner);\n', '        FinishSale();\n', '    }\n', '\n', '    // Private functions\n', '    // =========================\n', '\n', '    /**\n', '    * Gets tokens for specified ether provided that they are still under the cap\n', '    */\n', '    function getTokensAmountUnderCap(uint etherAmount) private constant returns (uint){\n', '        uint tokens = getTokensAmount(etherAmount);\n', '        require(tokens > 0);\n', '        require(tokens.add(token.totalSupply()) <= SALE_CAP);\n', '        return tokens;\n', '    }\n', '\n', '}']
['/*************************************************************************\n', ' * This contract has been merged with solidify\n', ' * https://github.com/tiesnetwork/solidify\n', ' *************************************************************************/\n', ' \n', '/** \n', '\tTies.Network TokenSale contract\n', '\t@author Dmitry Kochin <k@ties.network>\n', '*/\n', '\n', '\n', 'pragma solidity ^0.4.14;\n', '\n', '\n', '/*************************************************************************\n', ' * import "./include/MintableToken.sol" : start\n', ' *************************************************************************/\n', '\n', '/*************************************************************************\n', ' * import "zeppelin/contracts/token/StandardToken.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/*************************************************************************\n', ' * import "./BasicToken.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/*************************************************************************\n', ' * import "./ERC20Basic.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '/*************************************************************************\n', ' * import "./ERC20Basic.sol" : end\n', ' *************************************************************************/\n', '/*************************************************************************\n', ' * import "../math/SafeMath.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '/*************************************************************************\n', ' * import "../math/SafeMath.sol" : end\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '/*************************************************************************\n', ' * import "./BasicToken.sol" : end\n', ' *************************************************************************/\n', '/*************************************************************************\n', ' * import "./ERC20.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '/*************************************************************************\n', ' * import "./ERC20.sol" : end\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '/*************************************************************************\n', ' * import "zeppelin/contracts/token/StandardToken.sol" : end\n', ' *************************************************************************/\n', '/*************************************************************************\n', ' * import "zeppelin/contracts/ownership/Ownable.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '/*************************************************************************\n', ' * import "zeppelin/contracts/ownership/Ownable.sol" : end\n', ' *************************************************************************/\n', '\n', '/**\n', ' * Mintable token\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '    uint public totalSupply = 0;\n', '    address private minter;\n', '\n', '    modifier onlyMinter(){\n', '        require(minter == msg.sender);\n', '        _;\n', '    }\n', '\n', '    function setMinter(address _minter) onlyOwner {\n', '        minter = _minter;\n', '    }\n', '\n', '    function mint(address _to, uint _amount) onlyMinter {\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Transfer(address(0x0), _to, _amount);\n', '    }\n', '}\n', '/*************************************************************************\n', ' * import "./include/MintableToken.sol" : end\n', ' *************************************************************************/\n', '\n', '\n', '\n', 'contract TokenSale is Ownable {\n', '    using SafeMath for uint;\n', '\n', '    // Constants\n', '    // =========\n', '\n', '    uint private constant fractions = 1e18;\n', '    uint private constant millions = 1e6*fractions;\n', '\n', '    uint private constant CAP = 200*millions;\n', '    uint private constant SALE_CAP = 140*millions;\n', '    uint private constant BONUS_STEP = 14*millions;\n', '\n', '    uint public price = 0.0008 ether;\n', '\n', '    // Events\n', '    // ======\n', '\n', '    event AltBuy(address holder, uint tokens, string txHash);\n', '    event Buy(address holder, uint tokens);\n', '    event RunSale();\n', '    event PauseSale();\n', '    event FinishSale();\n', '    event PriceSet(uint weiPerTIE);\n', '\n', '    // State variables\n', '    // ===============\n', '\n', '    MintableToken public token;\n', '    address authority; //An account to control the contract on behalf of the owner\n', '    address robot; //An account to purchase tokens for altcoins\n', '    bool public isOpen = false;\n', '\n', '    // Constructor\n', '    // ===========\n', '\n', '    function TokenSale(address _token, address _multisig, address _authority, address _robot){\n', '        token = MintableToken(_token);\n', '        authority = _authority;\n', '        robot = _robot;\n', '        transferOwnership(_multisig);\n', '    }\n', '\n', '    // Public functions\n', '    // ================\n', '\n', '    function getCurrentBonus() constant returns (uint){\n', '        return getBonus(token.totalSupply());\n', '    }\n', '\n', '    /**\n', '    * Gets the bonus for the specified total supply\n', '    */\n', '    function getBonus(uint totalSupply) constant returns (uint){\n', '        bytes10 bonuses = "\\x14\\x11\\x0F\\x0C\\x0A\\x08\\x06\\x04\\x02\\x00";\n', '        uint level = totalSupply/BONUS_STEP;\n', '        if(level < bonuses.length)\n', '            return uint(bonuses[level]);\n', '        return 0;\n', '    }\n', '\n', '    /**\n', '    * Computes number of tokens with bonus for the specified ether. Correctly\n', '    * adds bonuses if the sum is large enough to belong to several bonus intervals\n', '    */\n', '    function getTokensAmount(uint etherVal) constant returns (uint) {\n', '        uint tokens = 0;\n', '        uint totalSupply = token.totalSupply();\n', '        while(true){\n', '            //How much we have before next bonus interval\n', '            uint gap = BONUS_STEP - totalSupply%BONUS_STEP;\n', '            //Bonus at the current interval\n', '            uint bonus = 100 + getBonus(totalSupply);\n', '            //The cost of the entire remainder of this interval\n', '            uint gapCost = gap*(price*100)/fractions/bonus;\n', '            if(gapCost >= etherVal){\n', '                //If the gap is large enough just sell the necessary amount of tokens\n', '                tokens += etherVal.mul(bonus).mul(fractions)/(price*100);\n', '                break;\n', '            }else{\n', '                //If the gap is too small sell it and diminish the price by its cost for the next iteration\n', '                tokens += gap;\n', '                etherVal -= gapCost;\n', '                totalSupply += gap;\n', '            }\n', '        }\n', '        return tokens;\n', '    }\n', '\n', '    function buy(address to) onlyOpen payable{\n', '        uint amount = msg.value;\n', '        uint tokens = getTokensAmountUnderCap(amount);\n', '\n', '        owner.transfer(amount);\n', '        token.mint(to, tokens);\n', '\n', '        Buy(to, tokens);\n', '    }\n', '\n', '    function () payable{\n', '        buy(msg.sender);\n', '    }\n', '\n', '    // Modifiers\n', '    // =================\n', '\n', '    modifier onlyAuthority() {\n', '        require(msg.sender == authority || msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyRobot() {\n', '        require(msg.sender == robot);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOpen() {\n', '        require(isOpen);\n', '        _;\n', '    }\n', '\n', '    // Priveleged functions\n', '    // ====================\n', '\n', '    /**\n', '    * Used to buy tokens for altcoins.\n', '    * Robot may call it before TokenSale officially starts to migrate early investors\n', '    */\n', '    function buyAlt(address to, uint etherAmount, string _txHash) onlyRobot {\n', '        uint tokens = getTokensAmountUnderCap(etherAmount);\n', '        token.mint(to, tokens);\n', '        AltBuy(to, tokens, _txHash);\n', '    }\n', '\n', '    function setAuthority(address _authority) onlyOwner {\n', '        authority = _authority;\n', '    }\n', '\n', '    function setRobot(address _robot) onlyAuthority {\n', '        robot = _robot;\n', '    }\n', '\n', '    function setPrice(uint etherPerTie) onlyAuthority {\n', '        //Ether is not expected to rate less than $96 and more than $480 during token sale\n', '        require(0.0005 ether <= etherPerTie && etherPerTie <= 0.0025 ether);\n', '        price = etherPerTie;\n', '        PriceSet(price);\n', '    }\n', '\n', '    // SALE state management: start / pause / finalize\n', '    // --------------------------------------------\n', '    function open(bool open) onlyAuthority {\n', '        isOpen = open;\n', '        open ? RunSale() : PauseSale();\n', '    }\n', '\n', '    function finalize() onlyAuthority {\n', '        uint diff = CAP.sub(token.totalSupply());\n', '        if(diff > 0) //The unsold capacity moves to team\n', '            token.mint(owner, diff);\n', '        selfdestruct(owner);\n', '        FinishSale();\n', '    }\n', '\n', '    // Private functions\n', '    // =========================\n', '\n', '    /**\n', '    * Gets tokens for specified ether provided that they are still under the cap\n', '    */\n', '    function getTokensAmountUnderCap(uint etherAmount) private constant returns (uint){\n', '        uint tokens = getTokensAmount(etherAmount);\n', '        require(tokens > 0);\n', '        require(tokens.add(token.totalSupply()) <= SALE_CAP);\n', '        return tokens;\n', '    }\n', '\n', '}']
