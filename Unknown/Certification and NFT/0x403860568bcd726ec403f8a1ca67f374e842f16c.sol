['pragma solidity ^0.4.14;\n', '\n', 'contract ERC20 {\n', '    function totalSupply() constant returns (uint supply);\n', '    function balanceOf( address who ) constant returns (uint value);\n', '    function allowance( address owner, address spender ) constant returns (uint _allowance);\n', '\n', '    function transfer( address to, uint value) returns (bool ok);\n', '    function transferFrom( address from, address to, uint value) returns (bool ok);\n', '    function approve( address spender, uint value ) returns (bool ok);\n', '\n', '    event Transfer( address indexed from, address indexed to, uint value);\n', '    event Approval( address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'contract DSMath {\n', '    \n', '    /*\n', '    standard uint256 functions\n', '     */\n', '\n', '    function add(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        assert((z = x + y) >= x);\n', '    }\n', '\n', '    function sub(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        assert((z = x - y) <= x);\n', '    }\n', '\n', '    function mul(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        assert((z = x * y) >= x);\n', '    }\n', '\n', '    function div(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        z = x / y;\n', '    }\n', '\n', '    function min(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function max(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    /*\n', '    uint128 functions (h is for half)\n', '     */\n', '\n', '\n', '    function hadd(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        assert((z = x + y) >= x);\n', '    }\n', '\n', '    function hsub(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        assert((z = x - y) <= x);\n', '    }\n', '\n', '    function hmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        assert((z = x * y) >= x);\n', '    }\n', '\n', '    function hdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = x / y;\n', '    }\n', '\n', '    function hmin(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function hmax(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '\n', '    /*\n', '    int256 functions\n', '     */\n', '\n', '    function imin(int256 x, int256 y) constant internal returns (int256 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function imax(int256 x, int256 y) constant internal returns (int256 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    /*\n', '    WAD math\n', '     */\n', '\n', '    uint128 constant WAD = 10 ** 18;\n', '\n', '    function wadd(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hadd(x, y);\n', '    }\n', '\n', '    function wsub(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hsub(x, y);\n', '    }\n', '\n', '    function wmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = cast((uint256(x) * y + WAD / 2) / WAD);\n', '    }\n', '\n', '    function wdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = cast((uint256(x) * WAD + y / 2) / y);\n', '    }\n', '\n', '    function wmin(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hmin(x, y);\n', '    }\n', '    function wmax(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hmax(x, y);\n', '    }\n', '\n', '    /*\n', '    RAY math\n', '     */\n', '\n', '    uint128 constant RAY = 10 ** 27;\n', '\n', '    function radd(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hadd(x, y);\n', '    }\n', '\n', '    function rsub(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hsub(x, y);\n', '    }\n', '\n', '    function rmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = cast((uint256(x) * y + RAY / 2) / RAY);\n', '    }\n', '\n', '    function rdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = cast((uint256(x) * RAY + y / 2) / y);\n', '    }\n', '\n', '    function rpow(uint128 x, uint64 n) constant internal returns (uint128 z) {\n', '        // This famous algorithm is called "exponentiation by squaring"\n', '        // and calculates x^n with x as fixed-point and n as regular unsigned.\n', '        //\n', '        // It&#39;s O(log n), instead of O(n) for naive repeated multiplication.\n', '        //\n', '        // These facts are why it works:\n', '        //\n', '        //  If n is even, then x^n = (x^2)^(n/2).\n', '        //  If n is odd,  then x^n = x * x^(n-1),\n', '        //   and applying the equation for even x gives\n', '        //    x^n = x * (x^2)^((n-1) / 2).\n', '        //\n', '        //  Also, EVM division is flooring and\n', '        //    floor[(n-1) / 2] = floor[n / 2].\n', '\n', '        z = n % 2 != 0 ? x : RAY;\n', '\n', '        for (n /= 2; n != 0; n /= 2) {\n', '            x = rmul(x, x);\n', '\n', '            if (n % 2 != 0) {\n', '                z = rmul(z, x);\n', '            }\n', '        }\n', '    }\n', '\n', '    function rmin(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hmin(x, y);\n', '    }\n', '    function rmax(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hmax(x, y);\n', '    }\n', '\n', '    function cast(uint256 x) constant internal returns (uint128 z) {\n', '        assert((z = uint128(x)) == x);\n', '    }\n', '\n', '}\n', '\n', 'contract TokenBase is ERC20, DSMath {\n', '    uint256                                            _supply;\n', '    mapping (address => uint256)                       _balances;\n', '    mapping (address => mapping (address => uint256))  _approvals;\n', '\n', '    function totalSupply() constant returns (uint256) {\n', '        return _supply;\n', '    }\n', '    function balanceOf(address addr) constant returns (uint256) {\n', '        return _balances[addr];\n', '    }\n', '    function allowance(address from, address to) constant returns (uint256) {\n', '        return _approvals[from][to];\n', '    }\n', '    \n', '    function transfer(address to, uint value) returns (bool) {\n', '        assert(_balances[msg.sender] >= value);\n', '        \n', '        _balances[msg.sender] = sub(_balances[msg.sender], value);\n', '        _balances[to] = add(_balances[to], value);\n', '        \n', '        Transfer(msg.sender, to, value);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address from, address to, uint value) returns (bool) {\n', '        assert(_balances[from] >= value);\n', '        assert(_approvals[from][msg.sender] >= value);\n', '        \n', '        _approvals[from][msg.sender] = sub(_approvals[from][msg.sender], value);\n', '        _balances[from] = sub(_balances[from], value);\n', '        _balances[to] = add(_balances[to], value);\n', '        \n', '        Transfer(from, to, value);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function approve(address to, uint256 value) returns (bool) {\n', '        _approvals[msg.sender][to] = value;\n', '        \n', '        Approval(msg.sender, to, value);\n', '        \n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract Owned\n', '{\n', '    address public owner;\n', '    \n', '    function Owned()\n', '    {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    modifier onlyOwner()\n', '    {\n', '        if (msg.sender != owner) revert();\n', '        _;\n', '    }\n', '}\n', '\n', 'contract Migrable is TokenBase, Owned\n', '{\n', '    event Migrate(address indexed _from, address indexed _to, uint256 _value);\n', '    address public migrationAgent;\n', '    uint256 public totalMigrated;\n', '\n', '\n', '    function migrate() external {\n', '        if (migrationAgent == 0)  revert();\n', '        if (_balances[msg.sender] == 0)  revert();\n', '        \n', '        uint256 _value = _balances[msg.sender];\n', '        _balances[msg.sender] = 0;\n', '        _supply = sub(_supply, _value);\n', '        totalMigrated = add(totalMigrated, _value);\n', '        MigrationAgent(migrationAgent).migrateFrom(msg.sender, _value);\n', '        Migrate(msg.sender, migrationAgent, _value);\n', '    }\n', '\n', '    function setMigrationAgent(address _agent) onlyOwner external {\n', '        if (migrationAgent != 0)  revert();\n', '        migrationAgent = _agent;\n', '    }\n', '}\n', '\n', 'contract CrowdCoin is TokenBase, Owned, Migrable {\n', '    string public constant name = "Crowd Coin";\n', '    string public constant symbol = "CRC";\n', '    uint8 public constant decimals = 18; \n', '\n', '    uint public constant pre_ico_allocation = 10000000 * WAD;\n', '    uint public constant bounty_allocation = 1000000 * WAD;\n', '    \n', '    uint public ico_allocation = 5000000 * WAD;\n', '\n', '    bool public locked = true;\n', '\n', '    address public bounty;\n', '    CrowdCoinPreICO public pre_ico;\n', '    CrowdCoinICO public ico;\n', '\n', '    function transfer(address to, uint value) returns (bool)\n', '    {\n', '        if (locked == true && msg.sender != address(ico) && msg.sender != address(pre_ico)) revert();\n', '        return super.transfer(to, value);\n', '    }\n', '    \n', '    function transferFrom(address from, address to, uint value)  returns (bool)\n', '    {\n', '        if (locked == true) revert();\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '\n', '    function init_pre_ico(address _pre_ico) onlyOwner\n', '    {\n', '        if (address(0) != address(pre_ico)) revert();\n', '        pre_ico = CrowdCoinPreICO(_pre_ico);\n', '        mint_tokens(pre_ico, pre_ico_allocation);\n', '    }\n', '    \n', '    function close_pre_ico() onlyOwner\n', '    {\n', '        ico_allocation = add(ico_allocation, _balances[pre_ico]);   \n', '        burn_balance(pre_ico);\n', '    }\n', '\n', '    function init_ico(address _ico) onlyOwner\n', '    {\n', '        if (address(0) != address(ico) || address(0) == address(pre_ico) || _balances[pre_ico] > 0) revert();\n', '        ico = CrowdCoinICO(_ico);\n', '        mint_tokens(ico, ico_allocation);\n', '    }\n', '    \n', '    function init_bounty_program(address _bounty) onlyOwner\n', '    {\n', '        if (address(0) != address(bounty)) revert();\n', '        bounty = _bounty;\n', '        mint_tokens(bounty, bounty_allocation);\n', '    }\n', '    \n', '    function finalize(address team_allocation) onlyOwner {\n', '        if (ico.successfully_closed() == false || locked == false || address(0) == address(bounty)) revert();\n', '        burn_balance(ico);\n', '\n', '        uint256 percentOfTotal = 20;\n', '        uint256 additionalTokens =\n', '            _supply * percentOfTotal / (100 - percentOfTotal);\n', '        \n', '        mint_tokens(team_allocation, additionalTokens);\n', '        \n', '        locked = false;\n', '    }\n', '\n', '    function mint_tokens(address addr, uint amount) private\n', '    {\n', '        _balances[addr] = add(_balances[addr], amount);\n', '        _supply = add(_supply, amount);\n', '        Transfer(0, addr, amount);\n', '    }\n', '    \n', '    function burn_balance(address addr) private\n', '    {\n', '        uint amount = _balances[addr];\n', '        if (amount > 0)\n', '        {\n', '            _balances[addr] = 0;\n', '            _supply = sub(_supply, amount);\n', '            Transfer(addr, 0, amount);\n', '        }\n', '    }\n', '}\n', '\n', 'contract CrowdCoinManualSell\n', '{\n', '    CrowdCoin public token;\n', '    address public dev_multisig;\n', '    address private constant owner_1 = 0x792030B6811043f79ae49d2C4bA33cC6a6326049;\n', '    address private constant owner_2 = 0x886531ed00cF51B6219Bf9EF9201ff4DEc622E6f;\n', '\n', '    event Purchased(address participant, uint eth_amount, uint token_amount);\n', '    event ManualPurchase(address sender, address participant, uint token_amount);\n', '\n', '    function transfer_coins(address _to, uint _value) public\n', '    {\n', '        if (msg.sender != owner_1 && msg.sender != owner_2) revert();\n', '        token.transfer(_to, _value);\n', '        ManualPurchase(msg.sender, _to, _value);\n', '    }\n', '\n', '    function my_token_balance() public constant returns (uint)\n', '    {\n', '        return token.balanceOf(this);\n', '    }\n', '\n', '    modifier has_value\n', '    {\n', '        if (msg.value < 0.01 ether) revert();\n', '        _;\n', '    }\n', '}\n', '\n', 'contract CrowdCoinSaleBonus\n', '{\n', '    function get_bonus(uint buy_amount) internal returns(uint)\n', '    {\n', '        uint bonus = 0;\n', '        if (buy_amount >= 100000 ether)\n', '        {\n', '            bonus = 30;            \n', '        }\n', '        else if (buy_amount >= 50000 ether)\n', '        {\n', '            bonus = 25;            \n', '        }\n', '        else if (buy_amount >= 30000 ether)\n', '        {\n', '            bonus = 23;            \n', '        }\n', '        else if (buy_amount >= 20000 ether)\n', '        {\n', '            bonus = 20;            \n', '        }\n', '        else if (buy_amount >= 13000 ether)\n', '        {\n', '            bonus = 18;            \n', '        }\n', '        else if (buy_amount >= 8000 ether)\n', '        {\n', '            bonus = 15;            \n', '        }\n', '        else if (buy_amount >= 5000 ether)\n', '        {\n', '            bonus = 13;            \n', '        }\n', '        else if (buy_amount >= 3000 ether)\n', '        {\n', '            bonus = 10;            \n', '        }\n', '        return buy_amount * bonus / 100;\n', '    }\n', '}\n', '\n', 'contract CrowdCoinPreICO is Owned, DSMath, CrowdCoinSaleBonus, CrowdCoinManualSell\n', '{\n', '    \n', '    uint public total_raised;\n', '\n', '    uint public constant price =  0.00125 * 10**18; //have to set price here\n', '\n', '    function CrowdCoinPreICO(address _token_address, address _dev_multisig)\n', '    {\n', '        token = CrowdCoin(_token_address);\n', '        dev_multisig = _dev_multisig;\n', '    }\n', '    \n', '    function () has_value payable external \n', '    {\n', '        if (my_token_balance() == 0) revert();\n', '\n', '        var can_buy = wdiv(cast(msg.value), cast(price));\n', '        can_buy = wadd(can_buy, cast(get_bonus(can_buy)));\n', '        var buy_amount = cast(min(can_buy, my_token_balance()));\n', '\n', '        if (can_buy > buy_amount) revert();\n', '\n', '        total_raised = add(total_raised, msg.value);\n', '\n', '        dev_multisig.transfer(this.balance); //transfer eth to dev\n', '        token.transfer(msg.sender, buy_amount); //transfer tokens to participant\n', '        Purchased(msg.sender, msg.value, buy_amount);\n', '    }\n', '}\n', '\n', 'contract CrowdCoinICO is Owned, DSMath, CrowdCoinSaleBonus, CrowdCoinManualSell\n', '{\n', '    uint public total_raised; //crowdsale total funds raised\n', '\n', '    uint public start_time = 0;\n', '    uint public end_time = 0;\n', '    uint public constant goal = 350 ether;\n', '    uint256 public constant default_price = 0.005 * 10**18;\n', '    \n', '    mapping (uint => uint256) public price;\n', '\n', '    mapping(address => uint) funded; //needed to save amounts of ETH for refund\n', '    \n', '    modifier in_time //allows send eth only when crowdsale is active\n', '    {\n', '        if (time() < start_time || time() > end_time)  revert();\n', '        _;\n', '    }\n', '\n', '    function successfully_closed() public constant returns (bool)\n', '    {\n', '        return time() > start_time && (time() > end_time || my_token_balance() == 0) && total_raised >= goal;\n', '    }\n', '    \n', '    function time() public constant returns (uint)\n', '    {\n', '        return block.timestamp;\n', '    }\n', '\n', '    function CrowdCoinICO(address _token_address, address _dev_multisig)\n', '    {\n', '        token = CrowdCoin(_token_address);\n', '        dev_multisig = _dev_multisig;\n', '        \n', '        price[0] = 0.0025 * 10**18;\n', '        price[1] = 0.0033 * 10**18;\n', '        price[2] = 0.0044 * 10**18;\n', '    }\n', '    \n', '    function init(uint _start_time, uint _end_time) onlyOwner\n', '    {\n', '        if (start_time != 0) revert();\n', '        start_time = _start_time;\n', '        end_time = _end_time;\n', '    }\n', '    \n', '    function () has_value in_time payable external \n', '    {\n', '        if (my_token_balance() == 0) revert();\n', '\n', '        var can_buy = wdiv(cast(msg.value), cast(get_current_price()));\n', '        can_buy = wadd(can_buy, cast(get_bonus(can_buy)));\n', '        var buy_amount = cast(min(can_buy, my_token_balance()));\n', '\n', '        if (can_buy > buy_amount) revert();\n', '\n', '        total_raised = add(total_raised, msg.value);\n', '        funded[msg.sender] = add(funded[msg.sender], msg.value);\n', '        token.transfer(msg.sender, buy_amount); //transfer tokens to participant\n', '        Purchased(msg.sender, msg.value, buy_amount);\n', '    }\n', '    \n', '    function refund()\n', '    {\n', '        if (total_raised >= goal || time() < end_time) revert();\n', '        var amount = funded[msg.sender];\n', '        if (amount > 0)\n', '        {\n', '            funded[msg.sender] = 0;\n', '            msg.sender.transfer(amount);\n', '        }\n', '    }\n', '    \n', '    function collect() //collect eth by devs if min goal reached\n', '    {\n', '        if (total_raised < goal) revert();\n', '        dev_multisig.transfer(this.balance);\n', '    }\n', '    \n', '    function get_current_price() constant returns (uint256) {\n', '        return price[current_week()] == 0 ? default_price : price[current_week()];\n', '    }\n', '    \n', '    function current_week() constant returns (uint) {\n', '        return sub(block.timestamp, start_time) / 7 days;\n', '    }\n', '}\n', '\n', '\n', 'contract CrowdDevAllocation is Owned\n', '{\n', '    CrowdCoin public token;\n', '    uint public initial_time;\n', '    address tokens_multisig;\n', '\n', '    mapping(uint => bool) public unlocked;\n', '    mapping(uint => uint) public unlock_times;\n', '    mapping(uint => uint) unlock_values;\n', '    \n', '    function CrowdDevAllocation(address _token)\n', '    {\n', '        token = CrowdCoin(_token);\n', '    }\n', '    \n', '    function init() onlyOwner\n', '    {\n', '        if (token.balanceOf(this) == 0 || initial_time != 0) revert();\n', '        initial_time = block.timestamp;\n', '        uint256 balance = token.balanceOf(this);\n', '\n', '        unlock_values[0] = balance / 100 * 33;\n', '        unlock_values[1] = balance / 100 * 33;\n', '        unlock_values[2] = balance / 100 * 34;\n', '\n', '        unlock_times[0] = 180 days; //33% of tokens will be available after 180 days\n', '        unlock_times[1] = 1080 days; //33% of tokens will be available after 1080 days\n', '        unlock_times[2] = 1800 days; //34% of tokens will be available after 1800 days\n', '    }\n', '\n', '    function unlock(uint part)\n', '    {\n', '        if (unlocked[part] == true || block.timestamp < initial_time + unlock_times[part] || unlock_values[part] == 0) revert();\n', '        token.transfer(tokens_multisig, unlock_values[part]);\n', '        unlocked[part] = true;\n', '    }\n', '}\n', '\n', 'contract MigrationAgent {\n', '    function migrateFrom(address _from, uint256 _value);\n', '}']
['pragma solidity ^0.4.14;\n', '\n', 'contract ERC20 {\n', '    function totalSupply() constant returns (uint supply);\n', '    function balanceOf( address who ) constant returns (uint value);\n', '    function allowance( address owner, address spender ) constant returns (uint _allowance);\n', '\n', '    function transfer( address to, uint value) returns (bool ok);\n', '    function transferFrom( address from, address to, uint value) returns (bool ok);\n', '    function approve( address spender, uint value ) returns (bool ok);\n', '\n', '    event Transfer( address indexed from, address indexed to, uint value);\n', '    event Approval( address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'contract DSMath {\n', '    \n', '    /*\n', '    standard uint256 functions\n', '     */\n', '\n', '    function add(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        assert((z = x + y) >= x);\n', '    }\n', '\n', '    function sub(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        assert((z = x - y) <= x);\n', '    }\n', '\n', '    function mul(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        assert((z = x * y) >= x);\n', '    }\n', '\n', '    function div(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        z = x / y;\n', '    }\n', '\n', '    function min(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function max(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    /*\n', '    uint128 functions (h is for half)\n', '     */\n', '\n', '\n', '    function hadd(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        assert((z = x + y) >= x);\n', '    }\n', '\n', '    function hsub(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        assert((z = x - y) <= x);\n', '    }\n', '\n', '    function hmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        assert((z = x * y) >= x);\n', '    }\n', '\n', '    function hdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = x / y;\n', '    }\n', '\n', '    function hmin(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function hmax(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '\n', '    /*\n', '    int256 functions\n', '     */\n', '\n', '    function imin(int256 x, int256 y) constant internal returns (int256 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function imax(int256 x, int256 y) constant internal returns (int256 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    /*\n', '    WAD math\n', '     */\n', '\n', '    uint128 constant WAD = 10 ** 18;\n', '\n', '    function wadd(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hadd(x, y);\n', '    }\n', '\n', '    function wsub(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hsub(x, y);\n', '    }\n', '\n', '    function wmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = cast((uint256(x) * y + WAD / 2) / WAD);\n', '    }\n', '\n', '    function wdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = cast((uint256(x) * WAD + y / 2) / y);\n', '    }\n', '\n', '    function wmin(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hmin(x, y);\n', '    }\n', '    function wmax(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hmax(x, y);\n', '    }\n', '\n', '    /*\n', '    RAY math\n', '     */\n', '\n', '    uint128 constant RAY = 10 ** 27;\n', '\n', '    function radd(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hadd(x, y);\n', '    }\n', '\n', '    function rsub(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hsub(x, y);\n', '    }\n', '\n', '    function rmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = cast((uint256(x) * y + RAY / 2) / RAY);\n', '    }\n', '\n', '    function rdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = cast((uint256(x) * RAY + y / 2) / y);\n', '    }\n', '\n', '    function rpow(uint128 x, uint64 n) constant internal returns (uint128 z) {\n', '        // This famous algorithm is called "exponentiation by squaring"\n', '        // and calculates x^n with x as fixed-point and n as regular unsigned.\n', '        //\n', "        // It's O(log n), instead of O(n) for naive repeated multiplication.\n", '        //\n', '        // These facts are why it works:\n', '        //\n', '        //  If n is even, then x^n = (x^2)^(n/2).\n', '        //  If n is odd,  then x^n = x * x^(n-1),\n', '        //   and applying the equation for even x gives\n', '        //    x^n = x * (x^2)^((n-1) / 2).\n', '        //\n', '        //  Also, EVM division is flooring and\n', '        //    floor[(n-1) / 2] = floor[n / 2].\n', '\n', '        z = n % 2 != 0 ? x : RAY;\n', '\n', '        for (n /= 2; n != 0; n /= 2) {\n', '            x = rmul(x, x);\n', '\n', '            if (n % 2 != 0) {\n', '                z = rmul(z, x);\n', '            }\n', '        }\n', '    }\n', '\n', '    function rmin(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hmin(x, y);\n', '    }\n', '    function rmax(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hmax(x, y);\n', '    }\n', '\n', '    function cast(uint256 x) constant internal returns (uint128 z) {\n', '        assert((z = uint128(x)) == x);\n', '    }\n', '\n', '}\n', '\n', 'contract TokenBase is ERC20, DSMath {\n', '    uint256                                            _supply;\n', '    mapping (address => uint256)                       _balances;\n', '    mapping (address => mapping (address => uint256))  _approvals;\n', '\n', '    function totalSupply() constant returns (uint256) {\n', '        return _supply;\n', '    }\n', '    function balanceOf(address addr) constant returns (uint256) {\n', '        return _balances[addr];\n', '    }\n', '    function allowance(address from, address to) constant returns (uint256) {\n', '        return _approvals[from][to];\n', '    }\n', '    \n', '    function transfer(address to, uint value) returns (bool) {\n', '        assert(_balances[msg.sender] >= value);\n', '        \n', '        _balances[msg.sender] = sub(_balances[msg.sender], value);\n', '        _balances[to] = add(_balances[to], value);\n', '        \n', '        Transfer(msg.sender, to, value);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address from, address to, uint value) returns (bool) {\n', '        assert(_balances[from] >= value);\n', '        assert(_approvals[from][msg.sender] >= value);\n', '        \n', '        _approvals[from][msg.sender] = sub(_approvals[from][msg.sender], value);\n', '        _balances[from] = sub(_balances[from], value);\n', '        _balances[to] = add(_balances[to], value);\n', '        \n', '        Transfer(from, to, value);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function approve(address to, uint256 value) returns (bool) {\n', '        _approvals[msg.sender][to] = value;\n', '        \n', '        Approval(msg.sender, to, value);\n', '        \n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract Owned\n', '{\n', '    address public owner;\n', '    \n', '    function Owned()\n', '    {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    modifier onlyOwner()\n', '    {\n', '        if (msg.sender != owner) revert();\n', '        _;\n', '    }\n', '}\n', '\n', 'contract Migrable is TokenBase, Owned\n', '{\n', '    event Migrate(address indexed _from, address indexed _to, uint256 _value);\n', '    address public migrationAgent;\n', '    uint256 public totalMigrated;\n', '\n', '\n', '    function migrate() external {\n', '        if (migrationAgent == 0)  revert();\n', '        if (_balances[msg.sender] == 0)  revert();\n', '        \n', '        uint256 _value = _balances[msg.sender];\n', '        _balances[msg.sender] = 0;\n', '        _supply = sub(_supply, _value);\n', '        totalMigrated = add(totalMigrated, _value);\n', '        MigrationAgent(migrationAgent).migrateFrom(msg.sender, _value);\n', '        Migrate(msg.sender, migrationAgent, _value);\n', '    }\n', '\n', '    function setMigrationAgent(address _agent) onlyOwner external {\n', '        if (migrationAgent != 0)  revert();\n', '        migrationAgent = _agent;\n', '    }\n', '}\n', '\n', 'contract CrowdCoin is TokenBase, Owned, Migrable {\n', '    string public constant name = "Crowd Coin";\n', '    string public constant symbol = "CRC";\n', '    uint8 public constant decimals = 18; \n', '\n', '    uint public constant pre_ico_allocation = 10000000 * WAD;\n', '    uint public constant bounty_allocation = 1000000 * WAD;\n', '    \n', '    uint public ico_allocation = 5000000 * WAD;\n', '\n', '    bool public locked = true;\n', '\n', '    address public bounty;\n', '    CrowdCoinPreICO public pre_ico;\n', '    CrowdCoinICO public ico;\n', '\n', '    function transfer(address to, uint value) returns (bool)\n', '    {\n', '        if (locked == true && msg.sender != address(ico) && msg.sender != address(pre_ico)) revert();\n', '        return super.transfer(to, value);\n', '    }\n', '    \n', '    function transferFrom(address from, address to, uint value)  returns (bool)\n', '    {\n', '        if (locked == true) revert();\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '\n', '    function init_pre_ico(address _pre_ico) onlyOwner\n', '    {\n', '        if (address(0) != address(pre_ico)) revert();\n', '        pre_ico = CrowdCoinPreICO(_pre_ico);\n', '        mint_tokens(pre_ico, pre_ico_allocation);\n', '    }\n', '    \n', '    function close_pre_ico() onlyOwner\n', '    {\n', '        ico_allocation = add(ico_allocation, _balances[pre_ico]);   \n', '        burn_balance(pre_ico);\n', '    }\n', '\n', '    function init_ico(address _ico) onlyOwner\n', '    {\n', '        if (address(0) != address(ico) || address(0) == address(pre_ico) || _balances[pre_ico] > 0) revert();\n', '        ico = CrowdCoinICO(_ico);\n', '        mint_tokens(ico, ico_allocation);\n', '    }\n', '    \n', '    function init_bounty_program(address _bounty) onlyOwner\n', '    {\n', '        if (address(0) != address(bounty)) revert();\n', '        bounty = _bounty;\n', '        mint_tokens(bounty, bounty_allocation);\n', '    }\n', '    \n', '    function finalize(address team_allocation) onlyOwner {\n', '        if (ico.successfully_closed() == false || locked == false || address(0) == address(bounty)) revert();\n', '        burn_balance(ico);\n', '\n', '        uint256 percentOfTotal = 20;\n', '        uint256 additionalTokens =\n', '            _supply * percentOfTotal / (100 - percentOfTotal);\n', '        \n', '        mint_tokens(team_allocation, additionalTokens);\n', '        \n', '        locked = false;\n', '    }\n', '\n', '    function mint_tokens(address addr, uint amount) private\n', '    {\n', '        _balances[addr] = add(_balances[addr], amount);\n', '        _supply = add(_supply, amount);\n', '        Transfer(0, addr, amount);\n', '    }\n', '    \n', '    function burn_balance(address addr) private\n', '    {\n', '        uint amount = _balances[addr];\n', '        if (amount > 0)\n', '        {\n', '            _balances[addr] = 0;\n', '            _supply = sub(_supply, amount);\n', '            Transfer(addr, 0, amount);\n', '        }\n', '    }\n', '}\n', '\n', 'contract CrowdCoinManualSell\n', '{\n', '    CrowdCoin public token;\n', '    address public dev_multisig;\n', '    address private constant owner_1 = 0x792030B6811043f79ae49d2C4bA33cC6a6326049;\n', '    address private constant owner_2 = 0x886531ed00cF51B6219Bf9EF9201ff4DEc622E6f;\n', '\n', '    event Purchased(address participant, uint eth_amount, uint token_amount);\n', '    event ManualPurchase(address sender, address participant, uint token_amount);\n', '\n', '    function transfer_coins(address _to, uint _value) public\n', '    {\n', '        if (msg.sender != owner_1 && msg.sender != owner_2) revert();\n', '        token.transfer(_to, _value);\n', '        ManualPurchase(msg.sender, _to, _value);\n', '    }\n', '\n', '    function my_token_balance() public constant returns (uint)\n', '    {\n', '        return token.balanceOf(this);\n', '    }\n', '\n', '    modifier has_value\n', '    {\n', '        if (msg.value < 0.01 ether) revert();\n', '        _;\n', '    }\n', '}\n', '\n', 'contract CrowdCoinSaleBonus\n', '{\n', '    function get_bonus(uint buy_amount) internal returns(uint)\n', '    {\n', '        uint bonus = 0;\n', '        if (buy_amount >= 100000 ether)\n', '        {\n', '            bonus = 30;            \n', '        }\n', '        else if (buy_amount >= 50000 ether)\n', '        {\n', '            bonus = 25;            \n', '        }\n', '        else if (buy_amount >= 30000 ether)\n', '        {\n', '            bonus = 23;            \n', '        }\n', '        else if (buy_amount >= 20000 ether)\n', '        {\n', '            bonus = 20;            \n', '        }\n', '        else if (buy_amount >= 13000 ether)\n', '        {\n', '            bonus = 18;            \n', '        }\n', '        else if (buy_amount >= 8000 ether)\n', '        {\n', '            bonus = 15;            \n', '        }\n', '        else if (buy_amount >= 5000 ether)\n', '        {\n', '            bonus = 13;            \n', '        }\n', '        else if (buy_amount >= 3000 ether)\n', '        {\n', '            bonus = 10;            \n', '        }\n', '        return buy_amount * bonus / 100;\n', '    }\n', '}\n', '\n', 'contract CrowdCoinPreICO is Owned, DSMath, CrowdCoinSaleBonus, CrowdCoinManualSell\n', '{\n', '    \n', '    uint public total_raised;\n', '\n', '    uint public constant price =  0.00125 * 10**18; //have to set price here\n', '\n', '    function CrowdCoinPreICO(address _token_address, address _dev_multisig)\n', '    {\n', '        token = CrowdCoin(_token_address);\n', '        dev_multisig = _dev_multisig;\n', '    }\n', '    \n', '    function () has_value payable external \n', '    {\n', '        if (my_token_balance() == 0) revert();\n', '\n', '        var can_buy = wdiv(cast(msg.value), cast(price));\n', '        can_buy = wadd(can_buy, cast(get_bonus(can_buy)));\n', '        var buy_amount = cast(min(can_buy, my_token_balance()));\n', '\n', '        if (can_buy > buy_amount) revert();\n', '\n', '        total_raised = add(total_raised, msg.value);\n', '\n', '        dev_multisig.transfer(this.balance); //transfer eth to dev\n', '        token.transfer(msg.sender, buy_amount); //transfer tokens to participant\n', '        Purchased(msg.sender, msg.value, buy_amount);\n', '    }\n', '}\n', '\n', 'contract CrowdCoinICO is Owned, DSMath, CrowdCoinSaleBonus, CrowdCoinManualSell\n', '{\n', '    uint public total_raised; //crowdsale total funds raised\n', '\n', '    uint public start_time = 0;\n', '    uint public end_time = 0;\n', '    uint public constant goal = 350 ether;\n', '    uint256 public constant default_price = 0.005 * 10**18;\n', '    \n', '    mapping (uint => uint256) public price;\n', '\n', '    mapping(address => uint) funded; //needed to save amounts of ETH for refund\n', '    \n', '    modifier in_time //allows send eth only when crowdsale is active\n', '    {\n', '        if (time() < start_time || time() > end_time)  revert();\n', '        _;\n', '    }\n', '\n', '    function successfully_closed() public constant returns (bool)\n', '    {\n', '        return time() > start_time && (time() > end_time || my_token_balance() == 0) && total_raised >= goal;\n', '    }\n', '    \n', '    function time() public constant returns (uint)\n', '    {\n', '        return block.timestamp;\n', '    }\n', '\n', '    function CrowdCoinICO(address _token_address, address _dev_multisig)\n', '    {\n', '        token = CrowdCoin(_token_address);\n', '        dev_multisig = _dev_multisig;\n', '        \n', '        price[0] = 0.0025 * 10**18;\n', '        price[1] = 0.0033 * 10**18;\n', '        price[2] = 0.0044 * 10**18;\n', '    }\n', '    \n', '    function init(uint _start_time, uint _end_time) onlyOwner\n', '    {\n', '        if (start_time != 0) revert();\n', '        start_time = _start_time;\n', '        end_time = _end_time;\n', '    }\n', '    \n', '    function () has_value in_time payable external \n', '    {\n', '        if (my_token_balance() == 0) revert();\n', '\n', '        var can_buy = wdiv(cast(msg.value), cast(get_current_price()));\n', '        can_buy = wadd(can_buy, cast(get_bonus(can_buy)));\n', '        var buy_amount = cast(min(can_buy, my_token_balance()));\n', '\n', '        if (can_buy > buy_amount) revert();\n', '\n', '        total_raised = add(total_raised, msg.value);\n', '        funded[msg.sender] = add(funded[msg.sender], msg.value);\n', '        token.transfer(msg.sender, buy_amount); //transfer tokens to participant\n', '        Purchased(msg.sender, msg.value, buy_amount);\n', '    }\n', '    \n', '    function refund()\n', '    {\n', '        if (total_raised >= goal || time() < end_time) revert();\n', '        var amount = funded[msg.sender];\n', '        if (amount > 0)\n', '        {\n', '            funded[msg.sender] = 0;\n', '            msg.sender.transfer(amount);\n', '        }\n', '    }\n', '    \n', '    function collect() //collect eth by devs if min goal reached\n', '    {\n', '        if (total_raised < goal) revert();\n', '        dev_multisig.transfer(this.balance);\n', '    }\n', '    \n', '    function get_current_price() constant returns (uint256) {\n', '        return price[current_week()] == 0 ? default_price : price[current_week()];\n', '    }\n', '    \n', '    function current_week() constant returns (uint) {\n', '        return sub(block.timestamp, start_time) / 7 days;\n', '    }\n', '}\n', '\n', '\n', 'contract CrowdDevAllocation is Owned\n', '{\n', '    CrowdCoin public token;\n', '    uint public initial_time;\n', '    address tokens_multisig;\n', '\n', '    mapping(uint => bool) public unlocked;\n', '    mapping(uint => uint) public unlock_times;\n', '    mapping(uint => uint) unlock_values;\n', '    \n', '    function CrowdDevAllocation(address _token)\n', '    {\n', '        token = CrowdCoin(_token);\n', '    }\n', '    \n', '    function init() onlyOwner\n', '    {\n', '        if (token.balanceOf(this) == 0 || initial_time != 0) revert();\n', '        initial_time = block.timestamp;\n', '        uint256 balance = token.balanceOf(this);\n', '\n', '        unlock_values[0] = balance / 100 * 33;\n', '        unlock_values[1] = balance / 100 * 33;\n', '        unlock_values[2] = balance / 100 * 34;\n', '\n', '        unlock_times[0] = 180 days; //33% of tokens will be available after 180 days\n', '        unlock_times[1] = 1080 days; //33% of tokens will be available after 1080 days\n', '        unlock_times[2] = 1800 days; //34% of tokens will be available after 1800 days\n', '    }\n', '\n', '    function unlock(uint part)\n', '    {\n', '        if (unlocked[part] == true || block.timestamp < initial_time + unlock_times[part] || unlock_values[part] == 0) revert();\n', '        token.transfer(tokens_multisig, unlock_values[part]);\n', '        unlocked[part] = true;\n', '    }\n', '}\n', '\n', 'contract MigrationAgent {\n', '    function migrateFrom(address _from, uint256 _value);\n', '}']
