['pragma solidity ^0.4.13;\n', '\n', '/**\n', '* @title PlusCoin Contract\n', '* @dev The main token contract\n', '*/\n', '\n', '\n', '\n', 'contract PlusCoin {\n', '    address public owner; // Token owner address\n', '    mapping (address => uint256) public balances; // balanceOf\n', '    // mapping (address => mapping (address => uint256)) public allowance;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    string public standard = &#39;PlusCoin 1.0&#39;;\n', '    string public constant name = "PlusCoin";\n', '    string public constant symbol = "PLC";\n', '    uint   public constant decimals = 18;\n', '    uint public totalSupply;\n', '    \n', '    uint public constant fpct_packet_size = 3300;\n', '    uint public ownerPrice = 40 * fpct_packet_size; //PRESALE_PRICE * 3 * fpct_packet_size;\n', '\n', '    State public current_state; // current token state\n', '    uint public soldAmount; // current sold amount (for current state)\n', '\n', '    uint public constant owner_MIN_LIMIT = 15000000 * fpct_packet_size * 1000000000000000000;\n', '\n', '    uint public constant TOKEN_PRESALE_LIMIT = 100000 * fpct_packet_size * 1000000000000000000;\n', '    uint public constant TOKEN_ICO1_LIMIT = 3000000 * fpct_packet_size * 1000000000000000000;\n', '    uint public constant TOKEN_ICO2_LIMIT = 3000000 * fpct_packet_size * 1000000000000000000;\n', '    uint public constant TOKEN_ICO3_LIMIT = 3000000 * fpct_packet_size * 1000000000000000000;\n', '\n', '    address public allowed_contract;\n', '\n', '\n', '    // States\n', '    enum State {\n', '        Created,\n', '        Presale,\n', '        ICO1,\n', '        ICO2,\n', '        ICO3,\n', '        Freedom,\n', '        Paused // only for first stages\n', '    }\n', '\n', '    //\n', '    // Events\n', '    // This generates a publics event on the blockchain that will notify clients\n', '    \n', '    event Sent(address from, address to, uint amount);\n', '    event Buy(address indexed sender, uint eth, uint fbt);\n', '    event Withdraw(address indexed sender, address to, uint eth);\n', '    event StateSwitch(State newState);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    //\n', '    // Modifiers\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    modifier onlyAllowedContract() {\n', '        require(msg.sender == allowed_contract);\n', '        _;\n', '    }\n', '\n', '\n', '    modifier onlyOwnerBeforeFree() {\n', '        if(current_state != State.Freedom) {\n', '            require(msg.sender == owner);   \n', '        }\n', '        _;\n', '    }\n', '\n', '\n', '    modifier inState(State _state) {\n', '        require(current_state == _state);\n', '        _;\n', '    }\n', '\n', '\n', '    //\n', '    // Functions\n', '    // \n', '\n', '    // Constructor\n', '    function PlusCoin() {\n', '        owner = msg.sender;\n', '        totalSupply = 25000000 * fpct_packet_size * 1000000000000000000;\n', '        balances[owner] = totalSupply;\n', '        current_state = State.Created;\n', '        soldAmount = 0;\n', '    }\n', '\n', '    // fallback function\n', '    function() payable {\n', '        require(current_state != State.Paused && current_state != State.Created && current_state != State.Freedom);\n', '        require(msg.value >= 1);\n', '        require(msg.sender != owner);\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '      if (newOwner != address(0)) {\n', '        owner = newOwner;\n', '      }\n', '    }\n', '\n', '    function safeMul(uint a, uint b) internal returns (uint) {\n', '        uint c = a * b;\n', '        require(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function safeSub(uint a, uint b) internal returns (uint) {\n', '        require(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function safeAdd(uint a, uint b) internal returns (uint) {\n', '        uint c = a + b;\n', '        require(c>=a && c>=b);\n', '        return c;\n', '    }\n', '\n', '    // Buy entry point\n', '    function buy() public payable {\n', '        require(current_state != State.Paused && current_state != State.Created && current_state != State.Freedom);\n', '        require(msg.value >= 1);\n', '        require(msg.sender != owner);\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    // Payable function for buy coins from token owner\n', '    function buyTokens(address _buyer) public payable\n', '    {\n', '        require(current_state != State.Paused && current_state != State.Created && current_state != State.Freedom);\n', '        require(msg.value >= 1);\n', '        require(_buyer != owner);\n', '        \n', '        uint256 wei_value = msg.value;\n', '\n', '        uint256 tokens = safeMul(wei_value, ownerPrice);\n', '        tokens = tokens;\n', '        \n', '        uint256 currentSoldAmount = safeAdd(tokens, soldAmount);\n', '\n', '        if(current_state == State.Presale) {\n', '            require(currentSoldAmount <= TOKEN_PRESALE_LIMIT);\n', '        }\n', '        if(current_state == State.ICO1) {\n', '            require(currentSoldAmount <= TOKEN_ICO1_LIMIT);\n', '        }\n', '        if(current_state == State.ICO2) {\n', '            require(currentSoldAmount <= TOKEN_ICO2_LIMIT);\n', '        }\n', '        if(current_state == State.ICO3) {\n', '            require(currentSoldAmount <= TOKEN_ICO3_LIMIT);\n', '        }\n', '\n', '        require( (balances[owner] - tokens) >= owner_MIN_LIMIT );\n', '        \n', '        balances[owner] = safeSub(balances[owner], tokens);\n', '        balances[_buyer] = safeAdd(balances[_buyer], tokens);\n', '        soldAmount = safeAdd(soldAmount, tokens);\n', '        \n', '        owner.transfer(this.balance);\n', '        \n', '        Buy(_buyer, msg.value, tokens);\n', '        \n', '    }\n', '\n', '\n', '    function setOwnerPrice(uint128 _newPrice) public\n', '        onlyOwner\n', '        returns (bool success)\n', '    {\n', '        ownerPrice = _newPrice;\n', '        return true;\n', '    }\n', '\n', '\n', '\tfunction setAllowedContract(address _contract_address) public\n', '        onlyOwner\n', '        returns (bool success)\n', '    {\n', '        allowed_contract = _contract_address;\n', '        return true;\n', '    }\n', '\n', '\n', '    // change state of token\n', '    function setTokenState(State _nextState) public\n', '        onlyOwner\n', '        returns (bool success)\n', '    {\n', '        bool canSwitchState\n', '            =  (current_state == State.Created && _nextState == State.Presale)\n', '            || (current_state == State.Presale && _nextState == State.ICO1)\n', '            || (current_state == State.ICO1 && _nextState == State.ICO2)\n', '            || (current_state == State.ICO2 && _nextState == State.ICO3)\n', '            || (current_state == State.ICO3 && _nextState == State.Freedom)\n', '            //pause (allowed only &#39;any state->pause&#39; & &#39;pause->presale&#39; transition)\n', '            // || (current_state == State.Presale && _nextState == State.Paused)\n', '            // || (current_state == State.Paused && _nextState == State.Presale)\n', '            || (current_state != State.Freedom && _nextState == State.Paused)\n', '            || (current_state == State.Paused);\n', '\n', '        require(canSwitchState);\n', '        \n', '        current_state = _nextState;\n', '\n', '        soldAmount = 0;\n', '        \n', '        StateSwitch(_nextState);\n', '\n', '        return true;\n', '    }\n', '\n', '\n', '    function remaining_for_sale() public constant returns (uint256 remaining_coins) {\n', '        uint256 coins = 0;\n', '\n', '        if (current_state == State.Presale) {\n', '            coins = TOKEN_PRESALE_LIMIT - soldAmount;\n', '        }\n', '        if (current_state == State.ICO1) {\n', '            coins = TOKEN_PRESALE_LIMIT - soldAmount;\n', '        }\n', '        if (current_state == State.ICO2) {\n', '            coins = TOKEN_PRESALE_LIMIT - soldAmount;\n', '        }\n', '        if (current_state == State.ICO3) {\n', '            coins = TOKEN_PRESALE_LIMIT - soldAmount;\n', '        }\n', '        if (current_state == State.Freedom) {\n', '            coins = balances[owner] - owner_MIN_LIMIT;\n', '        }\n', '\n', '        return coins;\n', '    }\n', '\n', '    function get_token_state() public constant returns (State) {\n', '        return current_state;\n', '    }\n', '\n', '\n', '    function withdrawEther(address _to) public \n', '        onlyOwner\n', '    {\n', '        _to.transfer(this.balance);\n', '    }\n', '\n', '\n', '\n', '    /**\n', '     * ERC 20 token functions\n', '     *\n', '     * https://github.com/ethereum/EIPs/issues/20\n', '     */\n', '    \n', '    function transfer(address _to, uint256 _value) \n', '        onlyOwnerBeforeFree\n', '        returns (bool success) \n', '    {\n', '        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) \n', '        onlyOwnerBeforeFree\n', '        returns (bool success)\n', '    {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) \n', '        onlyOwnerBeforeFree\n', '        returns (bool success)\n', '    {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) \n', '        onlyOwnerBeforeFree\n', '        constant returns (uint256 remaining)\n', '    {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    \n', '\n', '\n', '    ///suicide & send funds to owner\n', '    function destroy() { \n', '        if (msg.sender == owner) {\n', '          suicide(owner);\n', '        }\n', '    }\n', '\n', '    \n', '}']