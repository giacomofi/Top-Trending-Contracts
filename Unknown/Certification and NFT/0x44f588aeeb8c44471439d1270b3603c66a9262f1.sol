['pragma solidity ^0.4.15;\n', '\n', 'contract Token {\n', '\n', '    /// @return total amount of tokens\n', '    // function totalSupply() public constant returns (uint supply);\n', '    // `totalSupply` is defined below because the automatically generated\n', '    // getter function does not match the abstract function above\n', '    uint public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) public constant returns (uint);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint _value) public returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint _value) public returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) public constant returns (uint remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '\n', '}\n', '\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint _value) public returns (bool success) {\n', '        if (balances[msg.sender] >= _value &&          // Account has sufficient balance\n', '            balances[_to] + _value >= balances[_to]) { // Overflow check\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { throw; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\n', '        if (balances[_from] >= _value &&                // Account has sufficient balance\n', '            allowed[_from][msg.sender] >= _value &&     // Amount has been approved\n', '            balances[_to] + _value >= balances[_to]) {  // Overflow check\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { throw; }\n', '    }\n', '\n', '    function balanceOf(address _owner) public constant returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint _value) public returns (bool success) {\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint) balances;\n', '    mapping (address => mapping (address => uint)) allowed;\n', '}\n', '\n', '// Based on TokenFactory(https://github.com/ConsenSys/Token-Factory)\n', '\n', 'contract SnipCoin is StandardToken {\n', '\n', '    string public constant name = "SnipCoin";         // Token name\n', '    string public symbol = "SNIP";                    // Token identifier\n', '    uint8 public constant decimals = 18;              // Decimal points for token\n', '    uint public totalEthReceivedInWei;                // The total amount of Ether received during the sale in WEI\n', '    uint public totalUsdReceived;                     // The total amount of Ether received during the sale in USD terms\n', '    uint public totalUsdValueOfAllTokens;             // The total USD value of 100% of tokens\n', '    string public version = "1.0";                    // Code version\n', '    address public saleWalletAddress;                 // The wallet address where the Ether from the sale will be stored\n', '\n', '    mapping (address => bool) public uncappedBuyerList;      // The list of buyers allowed to participate in the sale without a cap\n', '    mapping (address => uint) public cappedBuyerList;        // The list of buyers allowed to participate in the sale, with their updated payment sum\n', '\n', '    uint public snipCoinToEtherExchangeRate = 76250; // This is the ratio of SnipCoin to Ether, could be updated by the owner, change before the sale\n', '    bool public isSaleOpen = false;                   // This opens and closes upon external command\n', '    bool public transferable = false;                 // Tokens are transferable\n', '\n', '    uint public ethToUsdExchangeRate = 282;           // Number of USD in one Eth\n', '\n', '    address public contractOwner;                     // Address of the contract owner\n', '    // Address of an additional account to manage the sale without risk to the tokens or eth. Change before the sale\n', '    address public accountWithUpdatePermissions = 0x6933784a82F5daDEbB600Bed8670667837aD196f;\n', '\n', '    uint public constant PERCENTAGE_OF_TOKENS_SOLD_IN_SALE = 28;     // Percentage of all the tokens being sold in the current sale\n', '    uint public constant DECIMALS_MULTIPLIER = 10**uint(decimals);   // Multiplier for the decimals\n', '    uint public constant SALE_CAP_IN_USD = 8000000;                  // The total sale cap in USD\n', '    uint public constant MINIMUM_PURCHASE_IN_USD = 50;               // It is impossible to purchase tokens for more than $50 in the sale.\n', '    uint public constant USD_PURCHASE_AMOUNT_REQUIRING_ID = 4500;    // Above this purchase amount an ID is required.\n', '\n', '    modifier onlyPermissioned() {\n', '        require((msg.sender == contractOwner) || (msg.sender == accountWithUpdatePermissions));\n', '        _;\n', '    }\n', '\n', '    modifier verifySaleNotOver() {\n', '        require(isSaleOpen);\n', "        require(totalUsdReceived < SALE_CAP_IN_USD); // Make sure that sale isn't over\n", '        _;\n', '    }\n', '\n', '    modifier verifyBuyerCanMakePurchase() {\n', '        uint currentPurchaseValueInUSD = uint(msg.value / getWeiToUsdExchangeRate()); // The USD worth of tokens sold\n', '        uint totalPurchaseIncludingCurrentPayment = currentPurchaseValueInUSD +  cappedBuyerList[msg.sender]; // The USD worth of all tokens this buyer bought\n', '\n', '        require(currentPurchaseValueInUSD > MINIMUM_PURCHASE_IN_USD); // Minimum transfer is of $50\n', '\n', '        uint EFFECTIVE_MAX_CAP = SALE_CAP_IN_USD + 1000;  // This allows for the end of the sale by passing $8M and reaching the cap\n', '        require(EFFECTIVE_MAX_CAP - totalUsdReceived > currentPurchaseValueInUSD); // Make sure that there is enough usd left to buy.\n', '\n', "        if (!uncappedBuyerList[msg.sender]) // If buyer is on uncapped white list then no worries, else need to make sure that they're okay\n", '        {\n', '            require(cappedBuyerList[msg.sender] > 0); // Check that the sender has been initialized.\n', "            require(totalPurchaseIncludingCurrentPayment < USD_PURCHASE_AMOUNT_REQUIRING_ID); // Check that they're not buying too much\n", '        }\n', '        _;\n', '    }\n', '\n', '    function SnipCoin() public {\n', '        initializeSaleWalletAddress();\n', '        initializeEthReceived();\n', '        initializeUsdReceived();\n', '\n', '        contractOwner = msg.sender;                      // The creator of the contract is its owner\n', '        totalSupply = 10000000000 * DECIMALS_MULTIPLIER; // In total, 10 billion tokens\n', '        balances[contractOwner] = totalSupply;           // Initially give owner all of the tokens \n', '        Transfer(0x0, contractOwner, totalSupply);\n', '    }\n', '\n', '    function initializeSaleWalletAddress() internal {\n', '        saleWalletAddress = 0xb4Ad56E564aAb5409fe8e34637c33A6d3F2a0038; // Change before the sale\n', '    }\n', '\n', '    function initializeEthReceived() internal {\n', '        totalEthReceivedInWei = 14018 * 1 ether; // Ether received before public sale. Verify this figure before the sale starts.\n', '    }\n', '\n', '    function initializeUsdReceived() internal {\n', '        totalUsdReceived = 3953076; // USD received before public sale. Verify this figure before the sale starts.\n', '        totalUsdValueOfAllTokens = totalUsdReceived * 100 / PERCENTAGE_OF_TOKENS_SOLD_IN_SALE; // sold tokens are 28% of all tokens\n', '    }\n', '\n', '    function getWeiToUsdExchangeRate() public constant returns(uint) {\n', '        return 1 ether / ethToUsdExchangeRate; // Returns how much Wei one USD is worth\n', '    }\n', '\n', '    function updateEthToUsdExchangeRate(uint newEthToUsdExchangeRate) public onlyPermissioned {\n', '        ethToUsdExchangeRate = newEthToUsdExchangeRate; // Change exchange rate to new value, influences the counter of when the sale is over.\n', '    }\n', '\n', '    function updateSnipCoinToEtherExchangeRate(uint newSnipCoinToEtherExchangeRate) public onlyPermissioned {\n', '        snipCoinToEtherExchangeRate = newSnipCoinToEtherExchangeRate; // Change the exchange rate to new value, influences tokens received per purchase\n', '    }\n', '\n', '    function openOrCloseSale(bool saleCondition) public onlyPermissioned {\n', '        require(!transferable);\n', '        isSaleOpen = saleCondition; // Decide if the sale should be open or closed (default: closed)\n', '    }\n', '\n', '    function allowTransfers() public onlyPermissioned {\n', '        require(!isSaleOpen);\n', '        transferable = true;\n', '    }\n', '\n', '    function addAddressToCappedAddresses(address addr) public onlyPermissioned {\n', '        cappedBuyerList[addr] = 1; // Allow a certain address to purchase SnipCoin up to the cap (<4500)\n', '    }\n', '\n', '    function addMultipleAddressesToCappedAddresses(address[] addrList) public onlyPermissioned {\n', '        for (uint i = 0; i < addrList.length; i++) {\n', '            addAddressToCappedAddresses(addrList[i]); // Allow a certain address to purchase SnipCoin up to the cap (<4500)\n', '        }\n', '    }\n', '\n', '    function addAddressToUncappedAddresses(address addr) public onlyPermissioned {\n', '        uncappedBuyerList[addr] = true; // Allow a certain address to purchase SnipCoin above the cap (>=$4500)\n', '    }\n', '\n', '    function addMultipleAddressesToUncappedAddresses(address[] addrList) public onlyPermissioned {\n', '        for (uint i = 0; i < addrList.length; i++) {\n', '            addAddressToUncappedAddresses(addrList[i]); // Allow a certain address to purchase SnipCoin up to the cap (<4500)\n', '        }\n', '    }\n', '\n', '    function transfer(address _to, uint _value) public returns (bool success) {\n', '        require(transferable);\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\n', '        require(transferable);\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function () public payable verifySaleNotOver verifyBuyerCanMakePurchase {\n', '        uint tokens = snipCoinToEtherExchangeRate * msg.value;\n', '        balances[contractOwner] -= tokens;\n', '        balances[msg.sender] += tokens;\n', '        Transfer(contractOwner, msg.sender, tokens);\n', '\n', '        totalEthReceivedInWei = totalEthReceivedInWei + msg.value; // total eth received counter\n', '        uint usdReceivedInCurrentTransaction = uint(msg.value / getWeiToUsdExchangeRate());\n', '        totalUsdReceived = totalUsdReceived + usdReceivedInCurrentTransaction; // total usd received counter\n', '        totalUsdValueOfAllTokens = totalUsdReceived * 100 / PERCENTAGE_OF_TOKENS_SOLD_IN_SALE; // sold tokens are 28% of all tokens\n', '\n', '        if (cappedBuyerList[msg.sender] > 0)\n', '        {\n', '            cappedBuyerList[msg.sender] = cappedBuyerList[msg.sender] + usdReceivedInCurrentTransaction;\n', '        }\n', '\n', '        saleWalletAddress.transfer(msg.value); // Transfer ether to safe sale address\n', '    }\n', '}']