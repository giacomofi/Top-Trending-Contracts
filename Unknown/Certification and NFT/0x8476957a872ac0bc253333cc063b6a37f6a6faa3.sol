['pragma solidity ^0.4.15;\n', '\n', '/*\n', '\n', 'Cindicator funds pool\n', '========================\n', '\n', 'Original by: moonlambos\n', 'Modified by: dungeon\n', '\n', '*/\n', '\n', '// ERC20 Interface: https://github.com/ethereum/EIPs/issues/20\n', 'contract ERC20 {\n', '  function transfer(address _to, uint256 _value) returns (bool success);\n', '  function balanceOf(address _owner) constant returns (uint256 balance);\n', '}\n', '\n', 'contract CINDICATORFund {\n', '  // Store the amount of ETH deposited by each account.\n', '  mapping (address => uint256) public balances;\n', '  // Store the number of times the voters individually voted.\n', '  mapping (address => bool) public voters;\n', '\n', '  // Keep track of the votes\n', '  uint256 public votes = 0;\n', '  // hash of the password required for voting or changing the sale address\n', '  bytes32 hash_pwd = 0x9f280e9af8b2203790b80a28449e312091a38cd80f67c9a7ad5a5ce1a8317f49;\n', '  \n', '  // Track whether the contract has bought the tokens yet.\n', '  bool public bought_tokens;\n', '  \n', '  // Record ETH value of tokens currently held by contract.\n', '  uint256 public contract_eth_value;\n', '  \n', '  // The minimum amount of ETH that must be deposited before the buy-in can be performed.\n', '  uint256 constant public min_required_amount = 35 ether;\n', '  \n', '  // The crowdsale address.\n', '  address public sale = 0x0;\n', '  //address public proposed_sale = 0x0;\n', '  \n', '  // Allows any user to withdraw his tokens.\n', '  // Takes the token&#39;s ERC20 address as argument as it is unknown at the time of contract deployment.\n', '  //When the devs will send the tokens, you will have to call this function and pass the ERC20 token address of AMBROSUS\n', '  function perform_withdraw(address tokenAddress) {\n', '    // Disallow withdraw if tokens haven&#39;t been bought yet.\n', '    require(bought_tokens);\n', '    \n', '    // Retrieve current token balance of contract.\n', '    ERC20 token = ERC20(tokenAddress);\n', '    uint256 contract_token_balance = token.balanceOf(address(this));\n', '      \n', '    // Disallow token withdrawals if there are no tokens to withdraw.\n', '    require(contract_token_balance != 0);\n', '      \n', '    // Store the user&#39;s token balance in a temporary variable.\n', '    uint256 tokens_to_withdraw = (balances[msg.sender] * contract_token_balance) / contract_eth_value;\n', '      \n', '    // Update the value of tokens currently held by the contract.\n', '    contract_eth_value -= balances[msg.sender];\n', '      \n', '    // Update the user&#39;s balance prior to sending to prevent recursive call.\n', '    balances[msg.sender] = 0;\n', '\n', '    // Send the funds.  Throws on failure to prevent loss of funds.\n', '    require(token.transfer(msg.sender, tokens_to_withdraw));\n', '  }\n', '  \n', '  // Allows any user to get his eth refunded before the purchase is made or after approx. 20 days in case the devs refund the eth.\n', '  function refund_me() {\n', '    require(!bought_tokens);\n', '\n', '    // Store the user&#39;s balance prior to withdrawal in a temporary variable.\n', '    uint256 eth_to_withdraw = balances[msg.sender];\n', '      \n', '    // Update the user&#39;s balance prior to sending ETH to prevent recursive call.\n', '    balances[msg.sender] = 0;\n', '      \n', '    // Return the user&#39;s funds.  Throws on failure to prevent loss of funds.\n', '    msg.sender.transfer(eth_to_withdraw);\n', '  }\n', '  \n', '  // Buy the tokens. Sends ETH to the presale wallet and records the ETH amount held in the contract.\n', '  function buy_the_tokens(string password) {\n', '    // Short circuit to save gas if the contract has already bought tokens.\n', '    if (bought_tokens) return;\n', '\n', '    require(hash_pwd == sha3(password));\n', '    // need 3/5th of the votes if we want to buy the tokens\n', '    require (votes >= 3);\n', '    // Throw if the contract balance is less than the minimum required amount\n', '    require(this.balance >= min_required_amount);\n', '    // Disallow buying in if the developer hasn&#39;t set the sale address yet.\n', '    require(sale != 0x0);\n', '    \n', '    // Record that the contract has bought the tokens.\n', '    bought_tokens = true;\n', '    \n', '    // Record the amount of ETH sent as the contract&#39;s current value.\n', '    contract_eth_value = this.balance;\n', '\n', '    // Transfer all the funds to the crowdsale address.\n', '    sale.transfer(contract_eth_value);\n', '  }\n', '\n', '  function change_sale_address(address _sale, string password) {\n', '    require(!bought_tokens);\n', '    require(hash_pwd == sha3(password));\n', '    votes = 0;\n', '    sale = _sale;\n', '  }\n', '\n', '  function vote_proposed_address(string password) {\n', '    require(!bought_tokens);\n', '    require(hash_pwd == sha3(password));\n', '    // The voter musn&#39;t have voted before\n', '    require(!voters[msg.sender]);\n', '    voters[msg.sender] = true;\n', '    votes += 1;\n', '  }\n', '\n', '  // A helper function for the default function, allowing contracts to interact.\n', '  function default_helper() payable {\n', '    require(!bought_tokens);\n', '    balances[msg.sender] += msg.value;\n', '  }\n', '  \n', '  // Default function.  Called when a user sends ETH to the contract.\n', '  function () payable {\n', '    // Delegate to the helper function.\n', '    default_helper();\n', '  }\n', '}']
['pragma solidity ^0.4.15;\n', '\n', '/*\n', '\n', 'Cindicator funds pool\n', '========================\n', '\n', 'Original by: moonlambos\n', 'Modified by: dungeon\n', '\n', '*/\n', '\n', '// ERC20 Interface: https://github.com/ethereum/EIPs/issues/20\n', 'contract ERC20 {\n', '  function transfer(address _to, uint256 _value) returns (bool success);\n', '  function balanceOf(address _owner) constant returns (uint256 balance);\n', '}\n', '\n', 'contract CINDICATORFund {\n', '  // Store the amount of ETH deposited by each account.\n', '  mapping (address => uint256) public balances;\n', '  // Store the number of times the voters individually voted.\n', '  mapping (address => bool) public voters;\n', '\n', '  // Keep track of the votes\n', '  uint256 public votes = 0;\n', '  // hash of the password required for voting or changing the sale address\n', '  bytes32 hash_pwd = 0x9f280e9af8b2203790b80a28449e312091a38cd80f67c9a7ad5a5ce1a8317f49;\n', '  \n', '  // Track whether the contract has bought the tokens yet.\n', '  bool public bought_tokens;\n', '  \n', '  // Record ETH value of tokens currently held by contract.\n', '  uint256 public contract_eth_value;\n', '  \n', '  // The minimum amount of ETH that must be deposited before the buy-in can be performed.\n', '  uint256 constant public min_required_amount = 35 ether;\n', '  \n', '  // The crowdsale address.\n', '  address public sale = 0x0;\n', '  //address public proposed_sale = 0x0;\n', '  \n', '  // Allows any user to withdraw his tokens.\n', "  // Takes the token's ERC20 address as argument as it is unknown at the time of contract deployment.\n", '  //When the devs will send the tokens, you will have to call this function and pass the ERC20 token address of AMBROSUS\n', '  function perform_withdraw(address tokenAddress) {\n', "    // Disallow withdraw if tokens haven't been bought yet.\n", '    require(bought_tokens);\n', '    \n', '    // Retrieve current token balance of contract.\n', '    ERC20 token = ERC20(tokenAddress);\n', '    uint256 contract_token_balance = token.balanceOf(address(this));\n', '      \n', '    // Disallow token withdrawals if there are no tokens to withdraw.\n', '    require(contract_token_balance != 0);\n', '      \n', "    // Store the user's token balance in a temporary variable.\n", '    uint256 tokens_to_withdraw = (balances[msg.sender] * contract_token_balance) / contract_eth_value;\n', '      \n', '    // Update the value of tokens currently held by the contract.\n', '    contract_eth_value -= balances[msg.sender];\n', '      \n', "    // Update the user's balance prior to sending to prevent recursive call.\n", '    balances[msg.sender] = 0;\n', '\n', '    // Send the funds.  Throws on failure to prevent loss of funds.\n', '    require(token.transfer(msg.sender, tokens_to_withdraw));\n', '  }\n', '  \n', '  // Allows any user to get his eth refunded before the purchase is made or after approx. 20 days in case the devs refund the eth.\n', '  function refund_me() {\n', '    require(!bought_tokens);\n', '\n', "    // Store the user's balance prior to withdrawal in a temporary variable.\n", '    uint256 eth_to_withdraw = balances[msg.sender];\n', '      \n', "    // Update the user's balance prior to sending ETH to prevent recursive call.\n", '    balances[msg.sender] = 0;\n', '      \n', "    // Return the user's funds.  Throws on failure to prevent loss of funds.\n", '    msg.sender.transfer(eth_to_withdraw);\n', '  }\n', '  \n', '  // Buy the tokens. Sends ETH to the presale wallet and records the ETH amount held in the contract.\n', '  function buy_the_tokens(string password) {\n', '    // Short circuit to save gas if the contract has already bought tokens.\n', '    if (bought_tokens) return;\n', '\n', '    require(hash_pwd == sha3(password));\n', '    // need 3/5th of the votes if we want to buy the tokens\n', '    require (votes >= 3);\n', '    // Throw if the contract balance is less than the minimum required amount\n', '    require(this.balance >= min_required_amount);\n', "    // Disallow buying in if the developer hasn't set the sale address yet.\n", '    require(sale != 0x0);\n', '    \n', '    // Record that the contract has bought the tokens.\n', '    bought_tokens = true;\n', '    \n', "    // Record the amount of ETH sent as the contract's current value.\n", '    contract_eth_value = this.balance;\n', '\n', '    // Transfer all the funds to the crowdsale address.\n', '    sale.transfer(contract_eth_value);\n', '  }\n', '\n', '  function change_sale_address(address _sale, string password) {\n', '    require(!bought_tokens);\n', '    require(hash_pwd == sha3(password));\n', '    votes = 0;\n', '    sale = _sale;\n', '  }\n', '\n', '  function vote_proposed_address(string password) {\n', '    require(!bought_tokens);\n', '    require(hash_pwd == sha3(password));\n', "    // The voter musn't have voted before\n", '    require(!voters[msg.sender]);\n', '    voters[msg.sender] = true;\n', '    votes += 1;\n', '  }\n', '\n', '  // A helper function for the default function, allowing contracts to interact.\n', '  function default_helper() payable {\n', '    require(!bought_tokens);\n', '    balances[msg.sender] += msg.value;\n', '  }\n', '  \n', '  // Default function.  Called when a user sends ETH to the contract.\n', '  function () payable {\n', '    // Delegate to the helper function.\n', '    default_helper();\n', '  }\n', '}']
