['contract IERC20Token {\n', '\n', '    function totalSupply() constant returns (uint256 supply);\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract IToken {\n', '    function totalSupply() constant returns (uint256 supply) {}\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '    function transferViaProxy(address _from, address _to, uint _value) returns (uint error) {}\n', '    function transferFromViaProxy(address _source, address _from, address _to, uint256 _amount) returns (uint error) {}\n', '    function approveViaProxy(address _source, address _spender, uint256 _value) returns (uint error) {}\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {} \n', '    function mint(address _destination, uint _amount) returns (uint error){}\n', '    function destroy(address _destination, uint _amount) returns (uint error) {}\n', '}\n', '\n', 'contract MacroProxyContract is IERC20Token {\n', '\n', '    address public dev;\n', '    address public curator;\n', '    address public proxyManagementAddress;\n', '    bool public proxyWorking;\n', '\n', "    string public standard = 'MacroERC20Proxy';\n", "    string public name = 'Macro';\n", "    string public symbol = 'MCR';\n", '    uint8 public decimals = 8;\n', '\n', '    IToken tokenContract;\n', '\n', '    function MacroProxyContract(){ \n', '        dev = msg.sender;\n', '    }\n', '\n', '    function totalSupply() constant returns (uint256 supply) {\n', '        return tokenContract.totalSupply();\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return tokenContract.balanceOf(_owner);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        if (!proxyWorking) throw;\n', '        \n', '        tokenContract.transferViaProxy(msg.sender, _to, _value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (!proxyWorking) throw;\n', '\n', '        tokenContract.transferFromViaProxy(msg.sender, _from, _to, _value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        if (!proxyWorking) throw;\n', '        \n', '        tokenContract.approveViaProxy(msg.sender, _spender, _value);\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '     \n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return tokenContract.allowance(_owner, _spender);\n', '    } \n', '\n', '    function setTokenContract(address _tokenAddress) {\n', '        if (msg.sender != curator) throw;\n', '        tokenContract = IToken(_tokenAddress);\n', '    }\n', '    \n', '    function setProxyManagementAddress(address _proxyManagementAddress){ \n', '        if (msg.sender != curator) throw;\n', '        proxyManagementAddress = _proxyManagementAddress;\n', '    }\n', '\n', '    function enableDisableTokenProxy(){\n', '        if (msg.sender != curator) throw;\n', '        proxyWorking = !proxyWorking;\n', '\n', '    }\n', '    \n', '    function setProxyCurator(address _curatorAddress){\n', '        if( msg.sender != dev) throw;\n', '        curator = _curatorAddress;\n', '    }\n', '\n', '    function killContract(){\n', '        if (msg.sender != dev) throw;\n', '        selfdestruct(dev);\n', '    }\n', '\n', '    function tokenAddress() constant returns (address contractAddress){\n', '        return address(tokenContract);\n', '    }\n', '\n', '    function raiseTransferEvent(address _from, address _to, uint256 _value){\n', '        if(msg.sender != proxyManagementAddress) throw;\n', '        Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function raiseApprovalEvent(address _owner, address _spender, uint256 _value){\n', '        if(msg.sender != proxyManagementAddress) throw;\n', '        Approval(_owner, _spender, _value);\n', '    }\n', '\n', '    function () {\n', '        throw;     \n', '    }\n', '}']