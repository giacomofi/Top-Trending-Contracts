['pragma solidity ^0.4.16;        \n', '   \n', '  contract CentraSale { \n', '\n', '    using SafeMath for uint; \n', '\n', '    address public contract_address = 0x96a65609a7b84e8842732deb08f56c3e21ac6f8a; \n', '\n', '    address public owner;    \n', '    uint public constant min_value = 10**18*1/10;     \n', '\n', '    uint256 public constant token_price = 1481481481481481;  \n', '    uint256 public tokens_total;  \n', '   \n', '    // Functions with this modifier can only be executed by the owner\n', '    modifier onlyOwner() {\n', '        if (msg.sender != owner) {\n', '            throw;\n', '        }\n', '        _;\n', '    }      \n', ' \n', '    // Constructor\n', '    function CentraSale() {\n', '        owner = msg.sender;                         \n', '    }\n', '      \n', '    //default function for crowdfunding\n', '    function() payable {    \n', '\n', '      if(!(msg.value >= min_value)) throw;                                 \n', '\n', '      tokens_total = msg.value*10**18/token_price;\n', '      if(!(tokens_total > 0)) throw;           \n', '\n', '      if(!contract_transfer(tokens_total)) throw;\n', '      owner.send(this.balance);\n', '    }\n', '\n', '    //Contract execute\n', '    function contract_transfer(uint _amount) private returns (bool) {      \n', '\n', '      if(!contract_address.call(bytes4(sha3("transfer(address,uint256)")),msg.sender,_amount)) {    \n', '        return false;\n', '      }\n', '      return true;\n', '    }     \n', '\n', '    //Withdraw money from contract balance to owner\n', '    function withdraw() onlyOwner returns (bool result) {\n', '        owner.send(this.balance);\n', '        return true;\n', '    }    \n', '      \n', ' }\n', '\n', ' /**\n', '   * Math operations with safety checks\n', '   */\n', '  library SafeMath {\n', '    function mul(uint a, uint b) internal returns (uint) {\n', '      uint c = a * b;\n', '      assert(a == 0 || c / a == b);\n', '      return c;\n', '    }\n', '\n', '    function div(uint a, uint b) internal returns (uint) {\n', '      // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '      uint c = a / b;\n', '      // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '      return c;\n', '    }\n', '\n', '    function sub(uint a, uint b) internal returns (uint) {\n', '      assert(b <= a);\n', '      return a - b;\n', '    }\n', '\n', '    function add(uint a, uint b) internal returns (uint) {\n', '      uint c = a + b;\n', '      assert(c >= a);\n', '      return c;\n', '    }\n', '\n', '    function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '      return a >= b ? a : b;\n', '    }\n', '\n', '    function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '      return a < b ? a : b;\n', '    }\n', '\n', '    function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '      return a >= b ? a : b;\n', '    }\n', '\n', '    function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '      return a < b ? a : b;\n', '    }\n', '\n', '    function assert(bool assertion) internal {\n', '      if (!assertion) {\n', '        throw;\n', '      }\n', '    }\n', '  }']
['pragma solidity ^0.4.16;        \n', '   \n', '  contract CentraSale { \n', '\n', '    using SafeMath for uint; \n', '\n', '    address public contract_address = 0x96a65609a7b84e8842732deb08f56c3e21ac6f8a; \n', '\n', '    address public owner;    \n', '    uint public constant min_value = 10**18*1/10;     \n', '\n', '    uint256 public constant token_price = 1481481481481481;  \n', '    uint256 public tokens_total;  \n', '   \n', '    // Functions with this modifier can only be executed by the owner\n', '    modifier onlyOwner() {\n', '        if (msg.sender != owner) {\n', '            throw;\n', '        }\n', '        _;\n', '    }      \n', ' \n', '    // Constructor\n', '    function CentraSale() {\n', '        owner = msg.sender;                         \n', '    }\n', '      \n', '    //default function for crowdfunding\n', '    function() payable {    \n', '\n', '      if(!(msg.value >= min_value)) throw;                                 \n', '\n', '      tokens_total = msg.value*10**18/token_price;\n', '      if(!(tokens_total > 0)) throw;           \n', '\n', '      if(!contract_transfer(tokens_total)) throw;\n', '      owner.send(this.balance);\n', '    }\n', '\n', '    //Contract execute\n', '    function contract_transfer(uint _amount) private returns (bool) {      \n', '\n', '      if(!contract_address.call(bytes4(sha3("transfer(address,uint256)")),msg.sender,_amount)) {    \n', '        return false;\n', '      }\n', '      return true;\n', '    }     \n', '\n', '    //Withdraw money from contract balance to owner\n', '    function withdraw() onlyOwner returns (bool result) {\n', '        owner.send(this.balance);\n', '        return true;\n', '    }    \n', '      \n', ' }\n', '\n', ' /**\n', '   * Math operations with safety checks\n', '   */\n', '  library SafeMath {\n', '    function mul(uint a, uint b) internal returns (uint) {\n', '      uint c = a * b;\n', '      assert(a == 0 || c / a == b);\n', '      return c;\n', '    }\n', '\n', '    function div(uint a, uint b) internal returns (uint) {\n', '      // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '      uint c = a / b;\n', "      // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '      return c;\n', '    }\n', '\n', '    function sub(uint a, uint b) internal returns (uint) {\n', '      assert(b <= a);\n', '      return a - b;\n', '    }\n', '\n', '    function add(uint a, uint b) internal returns (uint) {\n', '      uint c = a + b;\n', '      assert(c >= a);\n', '      return c;\n', '    }\n', '\n', '    function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '      return a >= b ? a : b;\n', '    }\n', '\n', '    function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '      return a < b ? a : b;\n', '    }\n', '\n', '    function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '      return a >= b ? a : b;\n', '    }\n', '\n', '    function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '      return a < b ? a : b;\n', '    }\n', '\n', '    function assert(bool assertion) internal {\n', '      if (!assertion) {\n', '        throw;\n', '      }\n', '    }\n', '  }']
