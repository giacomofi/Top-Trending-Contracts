['pragma solidity ^0.4.11;\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract SynToken {\n', '    string public name = "TEST TOKEN";\n', '    string public symbol = "TEST";\n', '    uint256 public decimals = 18;\n', '    \n', '    uint256 public totalSupply;\n', '    address public owner;\n', '    using SafeMath for uint256;\n', '    mapping(address => uint256) balances;\n', '\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    bool public mintingFinished = false;\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) ;\n', '    \n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) ;\n', '    \n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '\n', '        /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '     * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) ;\n', '    \n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '     /**\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     */\n', '    function increaseApproval (address _spender, uint _addedValue) returns (bool success);\n', '\n', '    function decreaseApproval (address _spender, uint _subtractedValue) returns (bool success);\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address _to, uint256 _amount)  public returns (bool);\n', '\n', '    /**\n', '     * @dev Function to stop minting new tokens.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function finishMinting() public returns (bool);\n', '\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public;\n', '}\n', '\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract SynTokenCrowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    // The token being sold\n', '    SynToken public token;\n', '\n', '    // start and end timestamps where investments are allowed (both inclusive)\n', '    uint256 public startTime;\n', '    uint256 public endTime;\n', '\n', '    // address where funds are collected\n', '    address public wallet;\n', '\n', '    // how many token units a buyer gets per wei\n', '    uint256 public rate;\n', '\n', '    // amount of raised money in wei\n', '    uint256 public weiRaised;\n', '\n', '    /*\n', '    Custom vars\n', '   */\n', '\n', '    uint256 public cap = 500*10**24;//500milllion SYN\n', '    uint256 public foundationAmount = (2*cap)/3;// 2/3s of cap\n', '    address public tokenWallet = 0x2411350f3bCAFd33a9C162a6672a93575ec151DC;\n', '    uint256 public tokensSold = 0;//for ether raised, call weiRaised and convert to ether\n', '    address public admin = 0x2411350f3bCAFd33a9C162a6672a93575ec151DC;\n', '    uint[] public salesRates = [2000,2250,2500]; \n', '    address public constant SynTokenAddress = 0x2411350f3bCAFd33a9C162a6672a93575ec151DC;  \n', '\n', '    bool public crowdsaleLive = false;\n', '    bool public crowdsaleInit = false;\n', '    bool public appliedPresale = false;\n', '\n', '    event NextRate(uint256 _rate);\n', '\n', '    /**\n', '     * event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param value weis paid for purchase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '    function SynTokenCrowdsale() {\n', '    }\n', '\n', '    // fallback function can be used to buy tokens\n', '    function () payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    // @return true if crowdsale event has ended\n', '    function hasEnded() public constant returns (bool) {\n', '        return now > endTime;\n', '    }\n', '\n', '    // send ether to the fund collection wallet\n', '    // override to create custom fund forwarding mechanisms\n', '    function forwardFunds() internal {\n', '        wallet.transfer(msg.value);\n', '    }\n', '\n', '//OVERLOADED/CUSTOM METHODS\n', '  modifier adminOnly{\n', '    if(msg.sender == admin) //    SHOULD THIS BE MSG.SENDER NOT MSG.SEND\n', '    _;\n', '    \n', '  } \n', '\n', '\n', '    // low level token purchase function\n', 'function buyTokens(address beneficiary) public payable {\n', 'require(beneficiary != 0x0);\n', 'require(validPurchase());\n', '\n', 'uint256 weiAmount = msg.value;\n', '\n', '// calculate token amount to be created\n', 'uint256 tokens = weiAmount.mul(rate);\n', '\n', '//revert purchase attempts beyond token supply\n', 'require(tokens <= cap - tokensSold); \n', '\n', '// update state\n', 'weiRaised = weiRaised.add(weiAmount);\n', 'tokensSold = tokensSold.add(tokens);\n', '\n', 'token.mint(beneficiary, tokens);\n', 'TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', 'forwardFunds();\n', '}\n', '// @return true if the transaction can buy tokens\n', 'function validPurchase() internal constant returns (bool) {\n', '\n', 'bool capNotReached = tokensSold <= cap;   \n', 'bool withinPeriod = now >= startTime && now <= endTime;\n', 'bool nonZeroPurchase = msg.value != 0;\n', '    if(now >= startTime){\n', '        forwardRemaining();\n', '    }\n', 'return (nonZeroPurchase && withinPeriod && capNotReached) ;\n', '}\n', '\n', '//forward all remaining tokens to the foundation address\n', 'function forwardRemaining() internal {\n', '    require(crowdsaleLive);\n', 'require(now > endTime);\n', 'uint256 remaining = cap - tokensSold;\n', 'require(remaining < cap);\n', 'tokensSold += remaining;\n', 'token.mint(tokenWallet, remaining);\n', '    token.finishMinting();\n', '    crowdsaleLive = false;\n', '}\n', '\n', 'function nextRate(uint _rate) adminOnly {\n', 'require(now > endTime);\n', 'require(salesRates[_rate] < rate );\n', 'rate = salesRates[_rate];\n', '}\n', '\n', 'function setToken(address _tokenAddress){\n', '    token = SynToken(_tokenAddress);\n', '}\n', '\n', '\n', 'function initCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, address _tokenAddress) adminOnly {\n', '    require(!crowdsaleInit);    \n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != 0x0);\n', '\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    crowdsaleInit=true;\n', '}\n', '\n', '\n', 'function applyPresale() adminOnly{\n', '\n', '    require(crowdsaleInit);\n', '    require(!appliedPresale);\n', '\n', '    token.mint(0x3de1483fda9f3383c422d8713008e5d272aa73ee, 35448897500000000000000);\n', '\ttoken.mint(0xe695e2d9243303dccff5a26731cc0083f3b10c8b, 100000000000000000000000);\n', '\ttoken.mint(0x1bf45eb62434a0dac0de59753e431210d2b33f24, 32500000000000000000000);\n', '\ttoken.mint(0x92009d954ff9efd69708e2dd2166f7e60124ce09, 22500000000000000000000);\n', '\ttoken.mint(0xe579c7b478d40c85871ac5553d488b65be9a9264, 1250000000000000000000);\n', '\ttoken.mint(0xa576e704a1c1d8d7e2fdfdd251b15a3265397121, 2500000000000000000000);\n', '\ttoken.mint(0x9e40c7ee30cefb4327ea2c83869cd161ff5fa71f, 250000000000000000000);\n', '\ttoken.mint(0xcc6b7ed85bf68ee9def96b95f3356a8072a01030, 50008790160000000000000);\n', '\ttoken.mint(0xf406317925ad6a9ea40cdf40cc1c9b0dd65ca10c, 250000000000000000000000);\n', '\ttoken.mint(0x69965bb6487178234ddcc835cb2ceccadd4e1431, 1250000000000000000000);\n', '\ttoken.mint(0xe7558aa60d1135410f03479df94ea439e782d541, 1950000000000000000000);\n', '\ttoken.mint(0x75360cbe8c7cb8174b1b623a6d9aacf952c117e3, 50000000000000000000000);\n', '\ttoken.mint(0x001a1a6ccf3b97b983d709c0d34a0de574b90a19, 2500000000000000000000);\n', '\ttoken.mint(0x56488a1d3dc8bb20b75e8317448f1a1fbadcb999, 2725000000000000000000);\n', '\ttoken.mint(0xf16e0aa06d745026bc80686e492b0f9b0578b5bd, 3200000000000000000000);\n', '\ttoken.mint(0xc046b59484843b2af6ca105afd88a3ab60e9b7cd, 1250000000000000000000);\n', '\ttoken.mint(0x479a8f11ee100a1cc99cd06e67dba639aaec56f7, 12489500000000000000000);\n', '\ttoken.mint(0x9369263b70dec0b65064bd6967e6b01c3a9377ec, 750000000000000000000);\n', '\ttoken.mint(0x89560c2b6b343ad4f6e47b19b9577bfce938ce98, 10000000000000000000000);\n', '\ttoken.mint(0xdcc719cf97c9cbc06e4e8f05ed8d9b2132fe7f31, 12500000000000000000000);\n', '\ttoken.mint(0x5ac855600754de7fc9796add50b82554324424bb, 20362000000000000000000);\n', '\ttoken.mint(0xa1b710593ed03670c9424c941130b3a073a694cc, 3016378887500000000000);\n', '\ttoken.mint(0x8186bda406b950da9690e58199479aa008160709, 150000000000000000000);\n', '\ttoken.mint(0xb87b8dc38f027b1ce89a6519dbeb705bdd251ea5, 2500000000000000000000);\n', '\ttoken.mint(0x294751d928994780f6db76af14e343d4eb9c3a46, 1354326960000000000000000);\n', '\ttoken.mint(0x339d2fbaf46acb13ffc43636c5ae5b81d442e1e2, 124999876147500000000000);\n', '\ttoken.mint(0xdfcf69c8fed25f5150db719bad4efab64f628d31, 10000000000000000000000);\n', '\ttoken.mint(0x0460529cea44e59fb7e45a6cd6ff0b8b17b680c3, 125000000000000000000000);\n', '\n', '\ttokensSold+=2233427402695000000000000;\n', '\n', '\ttoken.mint(tokenWallet, foundationAmount);\n', '\n', '\ttokensSold = tokensSold + foundationAmount;\n', '\tappliedPresale=true;\n', '    }\n', '}']
['pragma solidity ^0.4.11;\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract SynToken {\n', '    string public name = "TEST TOKEN";\n', '    string public symbol = "TEST";\n', '    uint256 public decimals = 18;\n', '    \n', '    uint256 public totalSupply;\n', '    address public owner;\n', '    using SafeMath for uint256;\n', '    mapping(address => uint256) balances;\n', '\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    bool public mintingFinished = false;\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) ;\n', '    \n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) ;\n', '    \n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '\n', '        /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) ;\n', '    \n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '     /**\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     */\n', '    function increaseApproval (address _spender, uint _addedValue) returns (bool success);\n', '\n', '    function decreaseApproval (address _spender, uint _subtractedValue) returns (bool success);\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address _to, uint256 _amount)  public returns (bool);\n', '\n', '    /**\n', '     * @dev Function to stop minting new tokens.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function finishMinting() public returns (bool);\n', '\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public;\n', '}\n', '\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract SynTokenCrowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    // The token being sold\n', '    SynToken public token;\n', '\n', '    // start and end timestamps where investments are allowed (both inclusive)\n', '    uint256 public startTime;\n', '    uint256 public endTime;\n', '\n', '    // address where funds are collected\n', '    address public wallet;\n', '\n', '    // how many token units a buyer gets per wei\n', '    uint256 public rate;\n', '\n', '    // amount of raised money in wei\n', '    uint256 public weiRaised;\n', '\n', '    /*\n', '    Custom vars\n', '   */\n', '\n', '    uint256 public cap = 500*10**24;//500milllion SYN\n', '    uint256 public foundationAmount = (2*cap)/3;// 2/3s of cap\n', '    address public tokenWallet = 0x2411350f3bCAFd33a9C162a6672a93575ec151DC;\n', '    uint256 public tokensSold = 0;//for ether raised, call weiRaised and convert to ether\n', '    address public admin = 0x2411350f3bCAFd33a9C162a6672a93575ec151DC;\n', '    uint[] public salesRates = [2000,2250,2500]; \n', '    address public constant SynTokenAddress = 0x2411350f3bCAFd33a9C162a6672a93575ec151DC;  \n', '\n', '    bool public crowdsaleLive = false;\n', '    bool public crowdsaleInit = false;\n', '    bool public appliedPresale = false;\n', '\n', '    event NextRate(uint256 _rate);\n', '\n', '    /**\n', '     * event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param value weis paid for purchase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '    function SynTokenCrowdsale() {\n', '    }\n', '\n', '    // fallback function can be used to buy tokens\n', '    function () payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    // @return true if crowdsale event has ended\n', '    function hasEnded() public constant returns (bool) {\n', '        return now > endTime;\n', '    }\n', '\n', '    // send ether to the fund collection wallet\n', '    // override to create custom fund forwarding mechanisms\n', '    function forwardFunds() internal {\n', '        wallet.transfer(msg.value);\n', '    }\n', '\n', '//OVERLOADED/CUSTOM METHODS\n', '  modifier adminOnly{\n', '    if(msg.sender == admin) //    SHOULD THIS BE MSG.SENDER NOT MSG.SEND\n', '    _;\n', '    \n', '  } \n', '\n', '\n', '    // low level token purchase function\n', 'function buyTokens(address beneficiary) public payable {\n', 'require(beneficiary != 0x0);\n', 'require(validPurchase());\n', '\n', 'uint256 weiAmount = msg.value;\n', '\n', '// calculate token amount to be created\n', 'uint256 tokens = weiAmount.mul(rate);\n', '\n', '//revert purchase attempts beyond token supply\n', 'require(tokens <= cap - tokensSold); \n', '\n', '// update state\n', 'weiRaised = weiRaised.add(weiAmount);\n', 'tokensSold = tokensSold.add(tokens);\n', '\n', 'token.mint(beneficiary, tokens);\n', 'TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', 'forwardFunds();\n', '}\n', '// @return true if the transaction can buy tokens\n', 'function validPurchase() internal constant returns (bool) {\n', '\n', 'bool capNotReached = tokensSold <= cap;   \n', 'bool withinPeriod = now >= startTime && now <= endTime;\n', 'bool nonZeroPurchase = msg.value != 0;\n', '    if(now >= startTime){\n', '        forwardRemaining();\n', '    }\n', 'return (nonZeroPurchase && withinPeriod && capNotReached) ;\n', '}\n', '\n', '//forward all remaining tokens to the foundation address\n', 'function forwardRemaining() internal {\n', '    require(crowdsaleLive);\n', 'require(now > endTime);\n', 'uint256 remaining = cap - tokensSold;\n', 'require(remaining < cap);\n', 'tokensSold += remaining;\n', 'token.mint(tokenWallet, remaining);\n', '    token.finishMinting();\n', '    crowdsaleLive = false;\n', '}\n', '\n', 'function nextRate(uint _rate) adminOnly {\n', 'require(now > endTime);\n', 'require(salesRates[_rate] < rate );\n', 'rate = salesRates[_rate];\n', '}\n', '\n', 'function setToken(address _tokenAddress){\n', '    token = SynToken(_tokenAddress);\n', '}\n', '\n', '\n', 'function initCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, address _tokenAddress) adminOnly {\n', '    require(!crowdsaleInit);    \n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != 0x0);\n', '\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    crowdsaleInit=true;\n', '}\n', '\n', '\n', 'function applyPresale() adminOnly{\n', '\n', '    require(crowdsaleInit);\n', '    require(!appliedPresale);\n', '\n', '    token.mint(0x3de1483fda9f3383c422d8713008e5d272aa73ee, 35448897500000000000000);\n', '\ttoken.mint(0xe695e2d9243303dccff5a26731cc0083f3b10c8b, 100000000000000000000000);\n', '\ttoken.mint(0x1bf45eb62434a0dac0de59753e431210d2b33f24, 32500000000000000000000);\n', '\ttoken.mint(0x92009d954ff9efd69708e2dd2166f7e60124ce09, 22500000000000000000000);\n', '\ttoken.mint(0xe579c7b478d40c85871ac5553d488b65be9a9264, 1250000000000000000000);\n', '\ttoken.mint(0xa576e704a1c1d8d7e2fdfdd251b15a3265397121, 2500000000000000000000);\n', '\ttoken.mint(0x9e40c7ee30cefb4327ea2c83869cd161ff5fa71f, 250000000000000000000);\n', '\ttoken.mint(0xcc6b7ed85bf68ee9def96b95f3356a8072a01030, 50008790160000000000000);\n', '\ttoken.mint(0xf406317925ad6a9ea40cdf40cc1c9b0dd65ca10c, 250000000000000000000000);\n', '\ttoken.mint(0x69965bb6487178234ddcc835cb2ceccadd4e1431, 1250000000000000000000);\n', '\ttoken.mint(0xe7558aa60d1135410f03479df94ea439e782d541, 1950000000000000000000);\n', '\ttoken.mint(0x75360cbe8c7cb8174b1b623a6d9aacf952c117e3, 50000000000000000000000);\n', '\ttoken.mint(0x001a1a6ccf3b97b983d709c0d34a0de574b90a19, 2500000000000000000000);\n', '\ttoken.mint(0x56488a1d3dc8bb20b75e8317448f1a1fbadcb999, 2725000000000000000000);\n', '\ttoken.mint(0xf16e0aa06d745026bc80686e492b0f9b0578b5bd, 3200000000000000000000);\n', '\ttoken.mint(0xc046b59484843b2af6ca105afd88a3ab60e9b7cd, 1250000000000000000000);\n', '\ttoken.mint(0x479a8f11ee100a1cc99cd06e67dba639aaec56f7, 12489500000000000000000);\n', '\ttoken.mint(0x9369263b70dec0b65064bd6967e6b01c3a9377ec, 750000000000000000000);\n', '\ttoken.mint(0x89560c2b6b343ad4f6e47b19b9577bfce938ce98, 10000000000000000000000);\n', '\ttoken.mint(0xdcc719cf97c9cbc06e4e8f05ed8d9b2132fe7f31, 12500000000000000000000);\n', '\ttoken.mint(0x5ac855600754de7fc9796add50b82554324424bb, 20362000000000000000000);\n', '\ttoken.mint(0xa1b710593ed03670c9424c941130b3a073a694cc, 3016378887500000000000);\n', '\ttoken.mint(0x8186bda406b950da9690e58199479aa008160709, 150000000000000000000);\n', '\ttoken.mint(0xb87b8dc38f027b1ce89a6519dbeb705bdd251ea5, 2500000000000000000000);\n', '\ttoken.mint(0x294751d928994780f6db76af14e343d4eb9c3a46, 1354326960000000000000000);\n', '\ttoken.mint(0x339d2fbaf46acb13ffc43636c5ae5b81d442e1e2, 124999876147500000000000);\n', '\ttoken.mint(0xdfcf69c8fed25f5150db719bad4efab64f628d31, 10000000000000000000000);\n', '\ttoken.mint(0x0460529cea44e59fb7e45a6cd6ff0b8b17b680c3, 125000000000000000000000);\n', '\n', '\ttokensSold+=2233427402695000000000000;\n', '\n', '\ttoken.mint(tokenWallet, foundationAmount);\n', '\n', '\ttokensSold = tokensSold + foundationAmount;\n', '\tappliedPresale=true;\n', '    }\n', '}']
