['pragma solidity ^0.4.11;\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  MintableToken public token;\n', '\n', '  // start and end block where investments are allowed (both inclusive)\n', '  uint256 public startBlock;\n', '  uint256 public endBlock;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */ \n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  function Crowdsale(uint256 _startBlock, uint256 _endBlock, uint256 _rate, address _wallet) {\n', '    require(_startBlock >= block.number);\n', '    require(_endBlock >= _startBlock);\n', '    require(_rate > 0);\n', '    require(_wallet != 0x0);\n', '\n', '    token = createTokenContract();\n', '    startBlock = _startBlock;\n', '    endBlock = _endBlock;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '  }\n', '\n', '  // creates the token to be sold. \n', '  // override this method to have crowdsale of a specific mintable token.\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new MintableToken();\n', '  }\n', '\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) payable {\n', '    require(beneficiary != 0x0);\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal constant returns (bool) {\n', '    uint256 current = block.number;\n', '    bool withinPeriod = current >= startBlock && current <= endBlock;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    return block.number > endBlock;\n', '  }\n', '\n', '\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract WhitelistedCrowdsale is Crowdsale, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    // list of addresses that can purchase before crowdsale opens\n', '    mapping (address => bool) public whitelist;\n', '\n', '    function addToWhitelist(address buyer) public onlyOwner {\n', '        require(buyer != 0x0);\n', '        whitelist[buyer] = true; \n', '    }\n', '\n', '    // @return true if buyer is whitelisted\n', '    function isWhitelisted(address buyer) public constant returns (bool) {\n', '        return whitelist[buyer];\n', '    }\n', '\n', '    // overriding Crowdsale#validPurchase to add whitelist logic\n', '    // @return true if buyers can buy at the moment\n', '    function validPurchase() internal constant returns (bool) {\n', '        // [TODO] issue with overriding and associativity of logical operators\n', '        return super.validPurchase() || (!hasEnded() && isWhitelisted(msg.sender)); \n', '    }\n', '\n', '}\n', '\n', 'contract ContinuousSale {\n', '    using SafeMath for uint256;\n', '\n', '    // time bucket size\n', '    uint256 public constant BUCKET_SIZE = 12 hours;\n', '\n', '    // the token being sold\n', '    MintableToken public token;\n', '\n', '    // address where funds are collected\n', '    address public wallet;\n', '\n', '    // amount of tokens emitted per wei\n', '    uint256 public rate;\n', '\n', '    // amount of raised money in wei\n', '    uint256 public weiRaised;\n', '\n', '    // max amount of tokens to mint per time bucket\n', '    uint256 public issuance;\n', '\n', '    // last time bucket from which tokens have been purchased\n', '    uint256 public lastBucket = 0;\n', '\n', '    // amount issued in the last bucket\n', '    uint256 public bucketAmount = 0;\n', '\n', '    event TokenPurchase(address indexed investor, address indexed beneficiary, uint256 weiAmount, uint256 tokens);\n', '\n', '    function ContinuousSale(\n', '        uint256 _rate,\n', '        address _wallet,\n', '        MintableToken _token\n', '    ) {\n', '        require(_rate != 0);\n', '        require(_wallet != 0);\n', '        // require(address(token) != 0x0);\n', '\n', '        rate = _rate;\n', '        wallet = _wallet;\n', '        token = _token;\n', '    }\n', '\n', '    function() payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    function buyTokens(address beneficiary) public payable {\n', '        require(beneficiary != 0x0);\n', '        require(msg.value != 0);\n', '\n', '        prepareContinuousPurchase();\n', '        uint256 tokens = processPurchase(beneficiary);\n', '        checkContinuousPurchase(tokens);\n', '    }\n', '\n', '    function prepareContinuousPurchase() internal {\n', '        uint256 timestamp = block.timestamp;\n', '        uint256 bucket = timestamp - (timestamp % BUCKET_SIZE);\n', '\n', '        if (bucket > lastBucket) {\n', '            lastBucket = bucket;\n', '            bucketAmount = 0;\n', '        }\n', '    }\n', '\n', '    function checkContinuousPurchase(uint256 tokens) internal {\n', '        uint256 updatedBucketAmount = bucketAmount.add(tokens);\n', '        require(updatedBucketAmount <= issuance);\n', '\n', '        bucketAmount = updatedBucketAmount;\n', '    }\n', '\n', '    function processPurchase(address beneficiary) internal returns(uint256) {\n', '        uint256 weiAmount = msg.value;\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = weiAmount.mul(rate);\n', '\n', '        // update state\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        token.mint(beneficiary, tokens);\n', '        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '        forwardFunds();\n', '\n', '        return tokens;\n', '    }\n', '\n', '    function forwardFunds() internal {\n', '        wallet.transfer(msg.value);\n', '    }\n', '}\n', '\n', 'contract CappedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public cap;\n', '\n', '  function CappedCrowdsale(uint256 _cap) {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  // overriding Crowdsale#validPurchase to add extra cap logic\n', '  // @return true if investors can buy at the moment\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinCap = weiRaised.add(msg.value) <= cap;\n', '    return super.validPurchase() && withinCap;\n', '  }\n', '\n', '  // overriding Crowdsale#hasEnded to add cap logic\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    bool capReached = weiRaised >= cap;\n', '    return super.hasEnded() || capReached;\n', '  }\n', '\n', '}\n', '\n', 'contract MANAContinuousSale is ContinuousSale, Ownable {\n', '\n', '    uint256 public constant INFLATION = 8;\n', '\n', '    bool public started = false;\n', '\n', '    event RateChange(uint256 amount);\n', '\n', '    event WalletChange(address wallet);\n', '\n', '    function MANAContinuousSale(\n', '        uint256 _rate,\n', '        address _wallet,\n', '        MintableToken _token\n', '    ) ContinuousSale(_rate, _wallet, _token) {\n', '    }\n', '\n', '    modifier whenStarted() {\n', '        require(started);\n', '        _;\n', '    }\n', '\n', '    function start() onlyOwner {\n', '        require(!started);\n', '\n', '        // initialize issuance\n', '        uint256 finalSupply = token.totalSupply();\n', '        uint256 annualIssuance = finalSupply.mul(INFLATION).div(100);\n', '        issuance = annualIssuance.mul(BUCKET_SIZE).div(1 years);\n', '\n', '        started = true;\n', '    }\n', '\n', '    function buyTokens(address beneficiary) whenStarted public payable {\n', '        super.buyTokens(beneficiary);\n', '    }\n', '\n', '    function setWallet(address _wallet) onlyOwner {\n', '        require(_wallet != 0x0);\n', '        wallet = _wallet;\n', '        WalletChange(_wallet);\n', '    }\n', '\n', '    function setRate(uint256 _rate) onlyOwner {\n', '        rate = _rate;\n', '        RateChange(_rate);\n', '    }\n', '\n', '    function unpauseToken() onlyOwner {\n', '        MANAToken(token).unpause();\n', '    }\n', '\n', '    function pauseToken() onlyOwner {\n', '        MANAToken(token).pause();\n', '    }\n', '}\n', '\n', 'contract FinalizableCrowdsale is Crowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  // should be called after crowdsale ends, to do\n', '  // some extra finalization work\n', '  function finalize() onlyOwner {\n', '    require(!isFinalized);\n', '    require(hasEnded());\n', '\n', '    finalization();\n', '    Finalized();\n', '    \n', '    isFinalized = true;\n', '  }\n', '\n', '  // end token minting on finalization\n', '  // override this with custom logic if needed\n', '  function finalization() internal {\n', '    token.finishMinting();\n', '  }\n', '\n', '\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', 'contract BurnableToken is StandardToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specified amount of tokens.\n', '     * @param _value The amount of tokens to burn. \n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(_value > 0);\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(msg.sender, _value);\n', '    }\n', '\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS paused\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS NOT paused\n', '   */\n', '  modifier whenPaused {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused returns (bool) {\n', '    paused = true;\n', '    Pause();\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused returns (bool) {\n', '    paused = false;\n', '    Unpause();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint _value) whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _value) whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will recieve the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract MANAToken is BurnableToken, PausableToken, MintableToken {\n', '\n', '    string public constant symbol = "MANA";\n', '\n', '    string public constant name = "Decentraland MANA";\n', '\n', '    uint8 public constant decimals = 18;\n', '\n', '    function burn(uint256 _value) whenNotPaused public {\n', '        super.burn(_value);\n', '    }\n', '}\n', '\n', 'contract MANACrowdsale is WhitelistedCrowdsale, CappedCrowdsale, FinalizableCrowdsale {\n', '\n', '    uint256 public constant TOTAL_SHARE = 100;\n', '    uint256 public constant CROWDSALE_SHARE = 40;\n', '    uint256 public constant FOUNDATION_SHARE = 60;\n', '\n', '    // price at which whitelisted buyers will be able to buy tokens\n', '    uint256 public preferentialRate;\n', '\n', '    // customize the rate for each whitelisted buyer\n', '    mapping (address => uint256) public buyerRate;\n', '\n', '    // initial rate at which tokens are offered\n', '    uint256 public initialRate;\n', '\n', '    // end rate at which tokens are offered\n', '    uint256 public endRate;\n', '\n', '    // continuous crowdsale contract\n', '    MANAContinuousSale public continuousSale;\n', '\n', '    event WalletChange(address wallet);\n', '\n', '    event PreferentialRateChange(address indexed buyer, uint256 rate);\n', '\n', '    event InitialRateChange(uint256 rate);\n', '\n', '    event EndRateChange(uint256 rate);\n', '\n', '    function MANACrowdsale(\n', '        uint256 _startBlock,\n', '        uint256 _endBlock,\n', '        uint256 _initialRate,\n', '        uint256 _endRate,\n', '        uint256 _preferentialRate,\n', '        address _wallet\n', '    )\n', '        CappedCrowdsale(82888 ether)\n', '        WhitelistedCrowdsale()\n', '        FinalizableCrowdsale()\n', '        Crowdsale(_startBlock, _endBlock, _initialRate, _wallet)\n', '    {\n', '        require(_initialRate > 0);\n', '        require(_endRate > 0);\n', '        require(_preferentialRate > 0);\n', '\n', '        initialRate = _initialRate;\n', '        endRate = _endRate;\n', '        preferentialRate = _preferentialRate;\n', '\n', '        continuousSale = createContinuousSaleContract();\n', '\n', '        MANAToken(token).pause();\n', '    }\n', '\n', '    function createTokenContract() internal returns(MintableToken) {\n', '        return new MANAToken();\n', '    }\n', '\n', '    function createContinuousSaleContract() internal returns(MANAContinuousSale) {\n', '        return new MANAContinuousSale(rate, wallet, token);\n', '    }\n', '\n', '    function setBuyerRate(address buyer, uint256 rate) onlyOwner public {\n', '        require(rate != 0);\n', '        require(isWhitelisted(buyer));\n', '        require(block.number < startBlock);\n', '\n', '        buyerRate[buyer] = rate;\n', '\n', '        PreferentialRateChange(buyer, rate);\n', '    }\n', '\n', '    function setInitialRate(uint256 rate) onlyOwner public {\n', '        require(rate != 0);\n', '        require(block.number < startBlock);\n', '\n', '        initialRate = rate;\n', '\n', '        InitialRateChange(rate);\n', '    }\n', '\n', '    function setEndRate(uint256 rate) onlyOwner public {\n', '        require(rate != 0);\n', '        require(block.number < startBlock);\n', '\n', '        endRate = rate;\n', '\n', '        EndRateChange(rate);\n', '    }\n', '\n', '    function getRate() internal returns(uint256) {\n', '        // some early buyers are offered a discount on the crowdsale price\n', '        if (buyerRate[msg.sender] != 0) {\n', '            return buyerRate[msg.sender];\n', '        }\n', '\n', '        // whitelisted buyers can purchase at preferential price before crowdsale ends\n', '        if (isWhitelisted(msg.sender)) {\n', '            return preferentialRate;\n', '        }\n', '\n', '        // otherwise compute the price for the auction\n', '        uint256 elapsed = block.number - startBlock;\n', '        uint256 rateRange = initialRate - endRate;\n', '        uint256 blockRange = endBlock - startBlock;\n', '\n', '        return initialRate.sub(rateRange.mul(elapsed).div(blockRange));\n', '    }\n', '\n', '    // low level token purchase function\n', '    function buyTokens(address beneficiary) payable {\n', '        require(beneficiary != 0x0);\n', '        require(validPurchase());\n', '\n', '        uint256 weiAmount = msg.value;\n', '        uint256 updatedWeiRaised = weiRaised.add(weiAmount);\n', '\n', '        uint256 rate = getRate();\n', '        // calculate token amount to be created\n', '        uint256 tokens = weiAmount.mul(rate);\n', '\n', '        // update state\n', '        weiRaised = updatedWeiRaised;\n', '\n', '        token.mint(beneficiary, tokens);\n', '        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '        forwardFunds();\n', '    }\n', '\n', '    function setWallet(address _wallet) onlyOwner public {\n', '        require(_wallet != 0x0);\n', '        wallet = _wallet;\n', '        continuousSale.setWallet(_wallet);\n', '        WalletChange(_wallet);\n', '    }\n', '\n', '    function unpauseToken() onlyOwner {\n', '        require(isFinalized);\n', '        MANAToken(token).unpause();\n', '    }\n', '\n', '    function pauseToken() onlyOwner {\n', '        require(isFinalized);\n', '        MANAToken(token).pause();\n', '    }\n', '\n', '\n', '    function beginContinuousSale() onlyOwner public {\n', '        require(isFinalized);\n', '\n', '        token.transferOwnership(continuousSale);\n', '\n', '        continuousSale.start();\n', '        continuousSale.transferOwnership(owner);\n', '    }\n', '\n', '    function finalization() internal {\n', '        uint256 totalSupply = token.totalSupply();\n', '        uint256 finalSupply = TOTAL_SHARE.mul(totalSupply).div(CROWDSALE_SHARE);\n', '\n', '        // emit tokens for the foundation\n', '        token.mint(wallet, FOUNDATION_SHARE.mul(finalSupply).div(TOTAL_SHARE));\n', '\n', '        // NOTE: cannot call super here because it would finish minting and\n', '        // the continuous sale would not be able to proceed\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.11;\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  MintableToken public token;\n', '\n', '  // start and end block where investments are allowed (both inclusive)\n', '  uint256 public startBlock;\n', '  uint256 public endBlock;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */ \n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  function Crowdsale(uint256 _startBlock, uint256 _endBlock, uint256 _rate, address _wallet) {\n', '    require(_startBlock >= block.number);\n', '    require(_endBlock >= _startBlock);\n', '    require(_rate > 0);\n', '    require(_wallet != 0x0);\n', '\n', '    token = createTokenContract();\n', '    startBlock = _startBlock;\n', '    endBlock = _endBlock;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '  }\n', '\n', '  // creates the token to be sold. \n', '  // override this method to have crowdsale of a specific mintable token.\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new MintableToken();\n', '  }\n', '\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) payable {\n', '    require(beneficiary != 0x0);\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal constant returns (bool) {\n', '    uint256 current = block.number;\n', '    bool withinPeriod = current >= startBlock && current <= endBlock;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    return block.number > endBlock;\n', '  }\n', '\n', '\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract WhitelistedCrowdsale is Crowdsale, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    // list of addresses that can purchase before crowdsale opens\n', '    mapping (address => bool) public whitelist;\n', '\n', '    function addToWhitelist(address buyer) public onlyOwner {\n', '        require(buyer != 0x0);\n', '        whitelist[buyer] = true; \n', '    }\n', '\n', '    // @return true if buyer is whitelisted\n', '    function isWhitelisted(address buyer) public constant returns (bool) {\n', '        return whitelist[buyer];\n', '    }\n', '\n', '    // overriding Crowdsale#validPurchase to add whitelist logic\n', '    // @return true if buyers can buy at the moment\n', '    function validPurchase() internal constant returns (bool) {\n', '        // [TODO] issue with overriding and associativity of logical operators\n', '        return super.validPurchase() || (!hasEnded() && isWhitelisted(msg.sender)); \n', '    }\n', '\n', '}\n', '\n', 'contract ContinuousSale {\n', '    using SafeMath for uint256;\n', '\n', '    // time bucket size\n', '    uint256 public constant BUCKET_SIZE = 12 hours;\n', '\n', '    // the token being sold\n', '    MintableToken public token;\n', '\n', '    // address where funds are collected\n', '    address public wallet;\n', '\n', '    // amount of tokens emitted per wei\n', '    uint256 public rate;\n', '\n', '    // amount of raised money in wei\n', '    uint256 public weiRaised;\n', '\n', '    // max amount of tokens to mint per time bucket\n', '    uint256 public issuance;\n', '\n', '    // last time bucket from which tokens have been purchased\n', '    uint256 public lastBucket = 0;\n', '\n', '    // amount issued in the last bucket\n', '    uint256 public bucketAmount = 0;\n', '\n', '    event TokenPurchase(address indexed investor, address indexed beneficiary, uint256 weiAmount, uint256 tokens);\n', '\n', '    function ContinuousSale(\n', '        uint256 _rate,\n', '        address _wallet,\n', '        MintableToken _token\n', '    ) {\n', '        require(_rate != 0);\n', '        require(_wallet != 0);\n', '        // require(address(token) != 0x0);\n', '\n', '        rate = _rate;\n', '        wallet = _wallet;\n', '        token = _token;\n', '    }\n', '\n', '    function() payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    function buyTokens(address beneficiary) public payable {\n', '        require(beneficiary != 0x0);\n', '        require(msg.value != 0);\n', '\n', '        prepareContinuousPurchase();\n', '        uint256 tokens = processPurchase(beneficiary);\n', '        checkContinuousPurchase(tokens);\n', '    }\n', '\n', '    function prepareContinuousPurchase() internal {\n', '        uint256 timestamp = block.timestamp;\n', '        uint256 bucket = timestamp - (timestamp % BUCKET_SIZE);\n', '\n', '        if (bucket > lastBucket) {\n', '            lastBucket = bucket;\n', '            bucketAmount = 0;\n', '        }\n', '    }\n', '\n', '    function checkContinuousPurchase(uint256 tokens) internal {\n', '        uint256 updatedBucketAmount = bucketAmount.add(tokens);\n', '        require(updatedBucketAmount <= issuance);\n', '\n', '        bucketAmount = updatedBucketAmount;\n', '    }\n', '\n', '    function processPurchase(address beneficiary) internal returns(uint256) {\n', '        uint256 weiAmount = msg.value;\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = weiAmount.mul(rate);\n', '\n', '        // update state\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        token.mint(beneficiary, tokens);\n', '        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '        forwardFunds();\n', '\n', '        return tokens;\n', '    }\n', '\n', '    function forwardFunds() internal {\n', '        wallet.transfer(msg.value);\n', '    }\n', '}\n', '\n', 'contract CappedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public cap;\n', '\n', '  function CappedCrowdsale(uint256 _cap) {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  // overriding Crowdsale#validPurchase to add extra cap logic\n', '  // @return true if investors can buy at the moment\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinCap = weiRaised.add(msg.value) <= cap;\n', '    return super.validPurchase() && withinCap;\n', '  }\n', '\n', '  // overriding Crowdsale#hasEnded to add cap logic\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    bool capReached = weiRaised >= cap;\n', '    return super.hasEnded() || capReached;\n', '  }\n', '\n', '}\n', '\n', 'contract MANAContinuousSale is ContinuousSale, Ownable {\n', '\n', '    uint256 public constant INFLATION = 8;\n', '\n', '    bool public started = false;\n', '\n', '    event RateChange(uint256 amount);\n', '\n', '    event WalletChange(address wallet);\n', '\n', '    function MANAContinuousSale(\n', '        uint256 _rate,\n', '        address _wallet,\n', '        MintableToken _token\n', '    ) ContinuousSale(_rate, _wallet, _token) {\n', '    }\n', '\n', '    modifier whenStarted() {\n', '        require(started);\n', '        _;\n', '    }\n', '\n', '    function start() onlyOwner {\n', '        require(!started);\n', '\n', '        // initialize issuance\n', '        uint256 finalSupply = token.totalSupply();\n', '        uint256 annualIssuance = finalSupply.mul(INFLATION).div(100);\n', '        issuance = annualIssuance.mul(BUCKET_SIZE).div(1 years);\n', '\n', '        started = true;\n', '    }\n', '\n', '    function buyTokens(address beneficiary) whenStarted public payable {\n', '        super.buyTokens(beneficiary);\n', '    }\n', '\n', '    function setWallet(address _wallet) onlyOwner {\n', '        require(_wallet != 0x0);\n', '        wallet = _wallet;\n', '        WalletChange(_wallet);\n', '    }\n', '\n', '    function setRate(uint256 _rate) onlyOwner {\n', '        rate = _rate;\n', '        RateChange(_rate);\n', '    }\n', '\n', '    function unpauseToken() onlyOwner {\n', '        MANAToken(token).unpause();\n', '    }\n', '\n', '    function pauseToken() onlyOwner {\n', '        MANAToken(token).pause();\n', '    }\n', '}\n', '\n', 'contract FinalizableCrowdsale is Crowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  // should be called after crowdsale ends, to do\n', '  // some extra finalization work\n', '  function finalize() onlyOwner {\n', '    require(!isFinalized);\n', '    require(hasEnded());\n', '\n', '    finalization();\n', '    Finalized();\n', '    \n', '    isFinalized = true;\n', '  }\n', '\n', '  // end token minting on finalization\n', '  // override this with custom logic if needed\n', '  function finalization() internal {\n', '    token.finishMinting();\n', '  }\n', '\n', '\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', 'contract BurnableToken is StandardToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specified amount of tokens.\n', '     * @param _value The amount of tokens to burn. \n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(_value > 0);\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(msg.sender, _value);\n', '    }\n', '\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS paused\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS NOT paused\n', '   */\n', '  modifier whenPaused {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused returns (bool) {\n', '    paused = true;\n', '    Pause();\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused returns (bool) {\n', '    paused = false;\n', '    Unpause();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint _value) whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _value) whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will recieve the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract MANAToken is BurnableToken, PausableToken, MintableToken {\n', '\n', '    string public constant symbol = "MANA";\n', '\n', '    string public constant name = "Decentraland MANA";\n', '\n', '    uint8 public constant decimals = 18;\n', '\n', '    function burn(uint256 _value) whenNotPaused public {\n', '        super.burn(_value);\n', '    }\n', '}\n', '\n', 'contract MANACrowdsale is WhitelistedCrowdsale, CappedCrowdsale, FinalizableCrowdsale {\n', '\n', '    uint256 public constant TOTAL_SHARE = 100;\n', '    uint256 public constant CROWDSALE_SHARE = 40;\n', '    uint256 public constant FOUNDATION_SHARE = 60;\n', '\n', '    // price at which whitelisted buyers will be able to buy tokens\n', '    uint256 public preferentialRate;\n', '\n', '    // customize the rate for each whitelisted buyer\n', '    mapping (address => uint256) public buyerRate;\n', '\n', '    // initial rate at which tokens are offered\n', '    uint256 public initialRate;\n', '\n', '    // end rate at which tokens are offered\n', '    uint256 public endRate;\n', '\n', '    // continuous crowdsale contract\n', '    MANAContinuousSale public continuousSale;\n', '\n', '    event WalletChange(address wallet);\n', '\n', '    event PreferentialRateChange(address indexed buyer, uint256 rate);\n', '\n', '    event InitialRateChange(uint256 rate);\n', '\n', '    event EndRateChange(uint256 rate);\n', '\n', '    function MANACrowdsale(\n', '        uint256 _startBlock,\n', '        uint256 _endBlock,\n', '        uint256 _initialRate,\n', '        uint256 _endRate,\n', '        uint256 _preferentialRate,\n', '        address _wallet\n', '    )\n', '        CappedCrowdsale(82888 ether)\n', '        WhitelistedCrowdsale()\n', '        FinalizableCrowdsale()\n', '        Crowdsale(_startBlock, _endBlock, _initialRate, _wallet)\n', '    {\n', '        require(_initialRate > 0);\n', '        require(_endRate > 0);\n', '        require(_preferentialRate > 0);\n', '\n', '        initialRate = _initialRate;\n', '        endRate = _endRate;\n', '        preferentialRate = _preferentialRate;\n', '\n', '        continuousSale = createContinuousSaleContract();\n', '\n', '        MANAToken(token).pause();\n', '    }\n', '\n', '    function createTokenContract() internal returns(MintableToken) {\n', '        return new MANAToken();\n', '    }\n', '\n', '    function createContinuousSaleContract() internal returns(MANAContinuousSale) {\n', '        return new MANAContinuousSale(rate, wallet, token);\n', '    }\n', '\n', '    function setBuyerRate(address buyer, uint256 rate) onlyOwner public {\n', '        require(rate != 0);\n', '        require(isWhitelisted(buyer));\n', '        require(block.number < startBlock);\n', '\n', '        buyerRate[buyer] = rate;\n', '\n', '        PreferentialRateChange(buyer, rate);\n', '    }\n', '\n', '    function setInitialRate(uint256 rate) onlyOwner public {\n', '        require(rate != 0);\n', '        require(block.number < startBlock);\n', '\n', '        initialRate = rate;\n', '\n', '        InitialRateChange(rate);\n', '    }\n', '\n', '    function setEndRate(uint256 rate) onlyOwner public {\n', '        require(rate != 0);\n', '        require(block.number < startBlock);\n', '\n', '        endRate = rate;\n', '\n', '        EndRateChange(rate);\n', '    }\n', '\n', '    function getRate() internal returns(uint256) {\n', '        // some early buyers are offered a discount on the crowdsale price\n', '        if (buyerRate[msg.sender] != 0) {\n', '            return buyerRate[msg.sender];\n', '        }\n', '\n', '        // whitelisted buyers can purchase at preferential price before crowdsale ends\n', '        if (isWhitelisted(msg.sender)) {\n', '            return preferentialRate;\n', '        }\n', '\n', '        // otherwise compute the price for the auction\n', '        uint256 elapsed = block.number - startBlock;\n', '        uint256 rateRange = initialRate - endRate;\n', '        uint256 blockRange = endBlock - startBlock;\n', '\n', '        return initialRate.sub(rateRange.mul(elapsed).div(blockRange));\n', '    }\n', '\n', '    // low level token purchase function\n', '    function buyTokens(address beneficiary) payable {\n', '        require(beneficiary != 0x0);\n', '        require(validPurchase());\n', '\n', '        uint256 weiAmount = msg.value;\n', '        uint256 updatedWeiRaised = weiRaised.add(weiAmount);\n', '\n', '        uint256 rate = getRate();\n', '        // calculate token amount to be created\n', '        uint256 tokens = weiAmount.mul(rate);\n', '\n', '        // update state\n', '        weiRaised = updatedWeiRaised;\n', '\n', '        token.mint(beneficiary, tokens);\n', '        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '        forwardFunds();\n', '    }\n', '\n', '    function setWallet(address _wallet) onlyOwner public {\n', '        require(_wallet != 0x0);\n', '        wallet = _wallet;\n', '        continuousSale.setWallet(_wallet);\n', '        WalletChange(_wallet);\n', '    }\n', '\n', '    function unpauseToken() onlyOwner {\n', '        require(isFinalized);\n', '        MANAToken(token).unpause();\n', '    }\n', '\n', '    function pauseToken() onlyOwner {\n', '        require(isFinalized);\n', '        MANAToken(token).pause();\n', '    }\n', '\n', '\n', '    function beginContinuousSale() onlyOwner public {\n', '        require(isFinalized);\n', '\n', '        token.transferOwnership(continuousSale);\n', '\n', '        continuousSale.start();\n', '        continuousSale.transferOwnership(owner);\n', '    }\n', '\n', '    function finalization() internal {\n', '        uint256 totalSupply = token.totalSupply();\n', '        uint256 finalSupply = TOTAL_SHARE.mul(totalSupply).div(CROWDSALE_SHARE);\n', '\n', '        // emit tokens for the foundation\n', '        token.mint(wallet, FOUNDATION_SHARE.mul(finalSupply).div(TOTAL_SHARE));\n', '\n', '        // NOTE: cannot call super here because it would finish minting and\n', '        // the continuous sale would not be able to proceed\n', '    }\n', '\n', '}']
