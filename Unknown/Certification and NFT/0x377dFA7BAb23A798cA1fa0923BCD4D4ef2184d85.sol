['pragma solidity ^0.4.13;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract AbstractStarbaseToken is ERC20 {\n', '    function isFundraiser(address fundraiserAddress) public returns (bool);\n', '    function company() public returns (address);\n', '    function allocateToCrowdsalePurchaser(address to, uint256 value) public returns (bool);\n', '    function allocateToMarketingSupporter(address to, uint256 value) public returns (bool);\n', '}\n', '\n', 'contract AbstractStarbaseCrowdsale {\n', '    function workshop() constant returns (address) {}\n', '    function startDate() constant returns (uint256) {}\n', '    function endedAt() constant returns (uint256) {}\n', '    function isEnded() constant returns (bool);\n', '    function totalRaisedAmountInCny() constant returns (uint256);\n', '    function numOfPurchasedTokensOnCsBy(address purchaser) constant returns (uint256);\n', '    function numOfPurchasedTokensOnEpBy(address purchaser) constant returns (uint256);\n', '}\n', '\n', '// @title EarlyPurchase contract - Keep track of purchased amount by Early Purchasers\n', '/// @author Starbase PTE. LTD. - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="056c6b636a4576716477676476602b666a">[email&#160;protected]</a>>\n', 'contract StarbaseEarlyPurchase {\n', '    /*\n', '     *  Constants\n', '     */\n', '    string public constant PURCHASE_AMOUNT_UNIT = &#39;CNY&#39;;    // Chinese Yuan\n', '    string public constant PURCHASE_AMOUNT_RATE_REFERENCE = &#39;http://www.xe.com/currencytables/&#39;;\n', '    uint256 public constant PURCHASE_AMOUNT_CAP = 9000000;\n', '\n', '    /*\n', '     *  Types\n', '     */\n', '    struct EarlyPurchase {\n', '        address purchaser;\n', '        uint256 amount;        // CNY based amount\n', '        uint256 purchasedAt;   // timestamp\n', '    }\n', '\n', '    /*\n', '     *  External contracts\n', '     */\n', '    AbstractStarbaseCrowdsale public starbaseCrowdsale;\n', '\n', '    /*\n', '     *  Storage\n', '     */\n', '    address public owner;\n', '    EarlyPurchase[] public earlyPurchases;\n', '    uint256 public earlyPurchaseClosedAt;\n', '\n', '    /*\n', '     *  Modifiers\n', '     */\n', '    modifier noEther() {\n', '        require(msg.value == 0);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyBeforeCrowdsale() {\n', '        assert(address(starbaseCrowdsale) == address(0) || starbaseCrowdsale.startDate() == 0);\n', '        _;\n', '    }\n', '\n', '    modifier onlyEarlyPurchaseTerm() {\n', '        assert(earlyPurchaseClosedAt <= 0);\n', '        _;\n', '    }\n', '\n', '    /*\n', '     *  Contract functions\n', '     */\n', '\n', '    /**\n', '     * @dev Returns early purchased amount by purchaser&#39;s address\n', '     * @param purchaser Purchaser address\n', '     */\n', '    function purchasedAmountBy(address purchaser)\n', '        external\n', '        constant\n', '        noEther\n', '        returns (uint256 amount)\n', '    {\n', '        for (uint256 i; i < earlyPurchases.length; i++) {\n', '            if (earlyPurchases[i].purchaser == purchaser) {\n', '                amount += earlyPurchases[i].amount;\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns total amount of raised funds by Early Purchasers\n', '     */\n', '    function totalAmountOfEarlyPurchases()\n', '        constant\n', '        noEther\n', '        public\n', '        returns (uint256 totalAmount)\n', '    {\n', '        for (uint256 i; i < earlyPurchases.length; i++) {\n', '            totalAmount += earlyPurchases[i].amount;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns number of early purchases\n', '     */\n', '    function numberOfEarlyPurchases()\n', '        external\n', '        constant\n', '        noEther\n', '        returns (uint256)\n', '    {\n', '        return earlyPurchases.length;\n', '    }\n', '\n', '    /**\n', '     * @dev Append an early purchase log\n', '     * @param purchaser Purchaser address\n', '     * @param amount Purchase amount\n', '     * @param purchasedAt Timestamp of purchased date\n', '     */\n', '    function appendEarlyPurchase(address purchaser, uint256 amount, uint256 purchasedAt)\n', '        external\n', '        noEther\n', '        onlyOwner\n', '        onlyBeforeCrowdsale\n', '        onlyEarlyPurchaseTerm\n', '        returns (bool)\n', '    {\n', '        if (amount == 0 ||\n', '            totalAmountOfEarlyPurchases() + amount > PURCHASE_AMOUNT_CAP)\n', '        {\n', '            return false;\n', '        }\n', '\n', '        assert(purchasedAt != 0 || purchasedAt <= now);\n', '\n', '        earlyPurchases.push(EarlyPurchase(purchaser, amount, purchasedAt));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Close early purchase term\n', '     */\n', '    function closeEarlyPurchase()\n', '        external\n', '        noEther\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        earlyPurchaseClosedAt = now;\n', '    }\n', '\n', '    /**\n', '     * @dev Setup function sets external contract&#39;s address\n', '     * @param starbaseCrowdsaleAddress Token address\n', '     */\n', '    function setup(address starbaseCrowdsaleAddress)\n', '        external\n', '        noEther\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        if (address(starbaseCrowdsale) == 0) {\n', '            starbaseCrowdsale = AbstractStarbaseCrowdsale(starbaseCrowdsaleAddress);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @dev Contract constructor function\n', '     */\n', '    function StarbaseEarlyPurchase() noEther {\n', '        owner = msg.sender;\n', '    }\n', '}\n', '\n', '\n', '/// @title EarlyPurchaseAmendment contract - Amend early purchase records of the original contract\n', '/// @author Starbase PTE. LTD. - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="cfbcbabfbfa0bdbb8fbcbbaebdadaebcaae1aca0">[email&#160;protected]</a>>\n', 'contract StarbaseEarlyPurchaseAmendment {\n', '    /*\n', '     *  Events\n', '     */\n', '    event EarlyPurchaseInvalidated(uint256 epIdx);\n', '    event EarlyPurchaseAmended(uint256 epIdx);\n', '\n', '    /*\n', '     *  External contracts\n', '     */\n', '    AbstractStarbaseCrowdsale public starbaseCrowdsale;\n', '    StarbaseEarlyPurchase public starbaseEarlyPurchase;\n', '\n', '    /*\n', '     *  Storage\n', '     */\n', '    address public owner;\n', '    uint256[] public invalidEarlyPurchaseIndexes;\n', '    uint256[] public amendedEarlyPurchaseIndexes;\n', '    mapping (uint256 => StarbaseEarlyPurchase.EarlyPurchase) public amendedEarlyPurchases;\n', '\n', '    /*\n', '     *  Modifiers\n', '     */\n', '    modifier noEther() {\n', '        require(msg.value == 0);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyBeforeCrowdsale() {\n', '        assert(address(starbaseCrowdsale) == address(0) || starbaseCrowdsale.startDate() == 0);\n', '        _;\n', '    }\n', '\n', '    modifier onlyEarlyPurchasesLoaded() {\n', '        assert(address(starbaseEarlyPurchase) != address(0));\n', '        _;\n', '    }\n', '\n', '    /*\n', '     *  Functions below are compatible with starbaseEarlyPurchase contract\n', '     */\n', '\n', '    /**\n', '     * @dev Returns an early purchase record\n', '     * @param earlyPurchaseIndex Index number of an early purchase\n', '     */\n', '    function earlyPurchases(uint256 earlyPurchaseIndex)\n', '        external\n', '        constant\n', '        onlyEarlyPurchasesLoaded\n', '        returns (address purchaser, uint256 amount, uint256 purchasedAt)\n', '    {\n', '        return starbaseEarlyPurchase.earlyPurchases(earlyPurchaseIndex);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns early purchased amount by purchaser&#39;s address\n', '     * @param purchaser Purchaser address\n', '     */\n', '    function purchasedAmountBy(address purchaser)\n', '        external\n', '        constant\n', '        noEther\n', '        returns (uint256 amount)\n', '    {\n', '        StarbaseEarlyPurchase.EarlyPurchase[] memory normalizedEP =\n', '            normalizedEarlyPurchases();\n', '        for (uint256 i; i < normalizedEP.length; i++) {\n', '            if (normalizedEP[i].purchaser == purchaser) {\n', '                amount += normalizedEP[i].amount;\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns total amount of raised funds by Early Purchasers\n', '     */\n', '    function totalAmountOfEarlyPurchases()\n', '        constant\n', '        noEther\n', '        public\n', '        returns (uint256 totalAmount)\n', '    {\n', '        StarbaseEarlyPurchase.EarlyPurchase[] memory normalizedEP =\n', '            normalizedEarlyPurchases();\n', '        for (uint256 i; i < normalizedEP.length; i++) {\n', '            totalAmount += normalizedEP[i].amount;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns number of early purchases\n', '     */\n', '    function numberOfEarlyPurchases()\n', '        external\n', '        constant\n', '        noEther\n', '        returns (uint256)\n', '    {\n', '        return normalizedEarlyPurchases().length;\n', '    }\n', '\n', '    /**\n', '     * @dev Sets up function sets external contract&#39;s address\n', '     * @param starbaseCrowdsaleAddress Token address\n', '     */\n', '    function setup(address starbaseCrowdsaleAddress)\n', '        external\n', '        noEther\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        if (address(starbaseCrowdsale) == 0) {\n', '            starbaseCrowdsale = AbstractStarbaseCrowdsale(starbaseCrowdsaleAddress);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /*\n', '     *  Contract functions unique to StarbaseEarlyPurchaseAmendment\n', '     */\n', '\n', '     /**\n', '      * @dev Invalidate early purchase\n', '      * @param earlyPurchaseIndex Index number of the purchase\n', '      */\n', '    function invalidateEarlyPurchase(uint256 earlyPurchaseIndex)\n', '        external\n', '        noEther\n', '        onlyOwner\n', '        onlyEarlyPurchasesLoaded\n', '        onlyBeforeCrowdsale\n', '        returns (bool)\n', '    {\n', '        assert(numberOfRawEarlyPurchases() > earlyPurchaseIndex); // Array Index Out of Bounds Exception\n', '\n', '        for (uint256 i; i < invalidEarlyPurchaseIndexes.length; i++) {\n', '            assert(invalidEarlyPurchaseIndexes[i] != earlyPurchaseIndex);\n', '        }\n', '\n', '        invalidEarlyPurchaseIndexes.push(earlyPurchaseIndex);\n', '        EarlyPurchaseInvalidated(earlyPurchaseIndex);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks whether early purchase is invalid\n', '     * @param earlyPurchaseIndex Index number of the purchase\n', '     */\n', '    function isInvalidEarlyPurchase(uint256 earlyPurchaseIndex)\n', '        constant\n', '        noEther\n', '        public\n', '        returns (bool)\n', '    {\n', '        assert(numberOfRawEarlyPurchases() > earlyPurchaseIndex); // Array Index Out of Bounds Exception\n', '\n', '\n', '        for (uint256 i; i < invalidEarlyPurchaseIndexes.length; i++) {\n', '            if (invalidEarlyPurchaseIndexes[i] == earlyPurchaseIndex) {\n', '                return true;\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @dev Amends a given early purchase with data\n', '     * @param earlyPurchaseIndex Index number of the purchase\n', '     * @param purchaser Purchaser&#39;s address\n', '     * @param amount Value of purchase\n', '     * @param purchasedAt Purchase timestamp\n', '     */\n', '    function amendEarlyPurchase(uint256 earlyPurchaseIndex, address purchaser, uint256 amount, uint256 purchasedAt)\n', '        external\n', '        noEther\n', '        onlyOwner\n', '        onlyEarlyPurchasesLoaded\n', '        onlyBeforeCrowdsale\n', '        returns (bool)\n', '    {\n', '        assert(purchasedAt != 0 || purchasedAt <= now);\n', '\n', '        assert(numberOfRawEarlyPurchases() > earlyPurchaseIndex);\n', '\n', '        assert(!isInvalidEarlyPurchase(earlyPurchaseIndex)); // Invalid early purchase cannot be amended\n', '\n', '        if (!isAmendedEarlyPurchase(earlyPurchaseIndex)) {\n', '            amendedEarlyPurchaseIndexes.push(earlyPurchaseIndex);\n', '        }\n', '\n', '        amendedEarlyPurchases[earlyPurchaseIndex] =\n', '            StarbaseEarlyPurchase.EarlyPurchase(purchaser, amount, purchasedAt);\n', '        EarlyPurchaseAmended(earlyPurchaseIndex);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks whether early purchase is amended\n', '     * @param earlyPurchaseIndex Index number of the purchase\n', '     */\n', '    function isAmendedEarlyPurchase(uint256 earlyPurchaseIndex)\n', '        constant\n', '        noEther\n', '        returns (bool)\n', '    {\n', '        assert(numberOfRawEarlyPurchases() > earlyPurchaseIndex); // Array Index Out of Bounds Exception\n', '\n', '        for (uint256 i; i < amendedEarlyPurchaseIndexes.length; i++) {\n', '            if (amendedEarlyPurchaseIndexes[i] == earlyPurchaseIndex) {\n', '                return true;\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @dev Loads early purchases data to StarbaseEarlyPurchaseAmendment contract\n', '     * @param starbaseEarlyPurchaseAddress Address from starbase early purchase\n', '     */\n', '    function loadStarbaseEarlyPurchases(address starbaseEarlyPurchaseAddress)\n', '        external\n', '        noEther\n', '        onlyOwner\n', '        onlyBeforeCrowdsale\n', '        returns (bool)\n', '    {\n', '        assert(starbaseEarlyPurchaseAddress != 0 ||\n', '            address(starbaseEarlyPurchase) == 0);\n', '\n', '        starbaseEarlyPurchase = StarbaseEarlyPurchase(starbaseEarlyPurchaseAddress);\n', '        assert(starbaseEarlyPurchase.earlyPurchaseClosedAt() != 0); // the early purchase must be closed\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Contract constructor function. It sets owner\n', '     */\n', '    function StarbaseEarlyPurchaseAmendment() noEther {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * Internal functions\n', '     */\n', '\n', '    /**\n', '     * @dev Normalizes early purchases data\n', '     */\n', '    function normalizedEarlyPurchases()\n', '        constant\n', '        internal\n', '        returns (StarbaseEarlyPurchase.EarlyPurchase[] normalizedEP)\n', '    {\n', '        uint256 rawEPCount = numberOfRawEarlyPurchases();\n', '        normalizedEP = new StarbaseEarlyPurchase.EarlyPurchase[](\n', '            rawEPCount - invalidEarlyPurchaseIndexes.length);\n', '\n', '        uint256 normalizedIdx;\n', '        for (uint256 i; i < rawEPCount; i++) {\n', '            if (isInvalidEarlyPurchase(i)) {\n', '                continue;   // invalid early purchase should be ignored\n', '            }\n', '\n', '            StarbaseEarlyPurchase.EarlyPurchase memory ep;\n', '            if (isAmendedEarlyPurchase(i)) {\n', '                ep = amendedEarlyPurchases[i];  // amended early purchase should take a priority\n', '            } else {\n', '                ep = getEarlyPurchase(i);\n', '            }\n', '\n', '            normalizedEP[normalizedIdx] = ep;\n', '            normalizedIdx++;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Fetches early purchases data\n', '     */\n', '    function getEarlyPurchase(uint256 earlyPurchaseIndex)\n', '        internal\n', '        constant\n', '        onlyEarlyPurchasesLoaded\n', '        returns (StarbaseEarlyPurchase.EarlyPurchase)\n', '    {\n', '        var (purchaser, amount, purchasedAt) =\n', '            starbaseEarlyPurchase.earlyPurchases(earlyPurchaseIndex);\n', '        return StarbaseEarlyPurchase.EarlyPurchase(purchaser, amount, purchasedAt);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns raw number of early purchases\n', '     */\n', '    function numberOfRawEarlyPurchases()\n', '        internal\n', '        constant\n', '        onlyEarlyPurchasesLoaded\n', '        returns (uint256)\n', '    {\n', '        return starbaseEarlyPurchase.numberOfEarlyPurchases();\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Crowdsale contract - Starbase crowdsale to create STAR.\n', ' * @author Starbase PTE. LTD. - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="1871767e77586b6c796a7a796b7d367b77">[email&#160;protected]</a>>\n', ' */\n', 'contract StarbaseCrowdsale is Ownable {\n', '    /*\n', '     *  Events\n', '     */\n', '    event CrowdsaleEnded(uint256 endedAt);\n', '    event StarBasePurchasedWithEth(address purchaser, uint256 amount, uint256 rawAmount, uint256 cnyEthRate, uint256 bonusTokensPercentage);\n', '    event StarBasePurchasedOffChain(address purchaser, uint256 amount, uint256 rawAmount, uint256 cnyBtcRate, uint256 bonusTokensPercentage, string data);\n', '    event CnyEthRateUpdated(uint256 cnyEthRate);\n', '    event CnyBtcRateUpdated(uint256 cnyBtcRate);\n', '    event QualifiedPartnerAddress(address qualifiedPartner);\n', '    event PurchaseInvalidated(uint256 purchaseIdx);\n', '    event PurchaseAmended(uint256 purchaseIdx);\n', '\n', '    /**\n', '     *  External contracts\n', '     */\n', '    AbstractStarbaseToken public starbaseToken;\n', '    StarbaseEarlyPurchaseAmendment public starbaseEpAmendment;\n', '\n', '    /**\n', '     *  Constants\n', '     */\n', '    uint256 constant public crowdsaleTokenAmount = 125000000e18;\n', '    uint256 constant public earlyPurchaseTokenAmount = 50000000e18;\n', '    uint256 constant public MIN_INVESTMENT = 1; // min is 1 Wei\n', '    uint256 constant public MAX_CROWDSALE_CAP = 60000000; // approximately 9M USD for the crowdsale(CS). 1M (by EP) + 9M (by CS) = 10M (Total)\n', '    string public constant PURCHASE_AMOUNT_UNIT = &#39;CNY&#39;;  // Chinese Yuan\n', '\n', '    /**\n', '     * Types\n', '     */\n', '    struct CrowdsalePurchase {\n', '        address purchaser;\n', '        uint256 amount;        // CNY based amount with bonus\n', '        uint256 rawAmount;     // CNY based amount no bonus\n', '        uint256 purchasedAt;   // timestamp\n', '        string data;           // additional data (e.g. Tx ID of Bitcoin)\n', '        uint256 bonus;\n', '    }\n', '\n', '    struct QualifiedPartners {\n', '        uint256 amountCap;\n', '        uint256 amountRaised;\n', '        bool    bonaFide;\n', '        uint256 commissionFeePercentage; // example 5 will calculate the percentage as 5%\n', '    }\n', '\n', '    /**\n', '     *  Storage\n', '     */\n', '    address public workshop; // holds undelivered STARs\n', '\n', '    uint public numOfDeliveredCrowdsalePurchases = 0;  // index to keep the number of crowdsale purchases have already been processed by `deliverPurchasedTokens`\n', '    uint public numOfDeliveredEarlyPurchases = 0;  // index to keep the number of early purchases have already been processed by `deliverPurchasedTokens`\n', '    uint256 public numOfLoadedEarlyPurchases = 0; // index to keep the number of early purchases that have already been loaded by `loadEarlyPurchases`\n', '\n', '    address[] public earlyPurchasers;\n', '    mapping (address => QualifiedPartners) public qualifiedPartners;\n', '    mapping (address => uint256) public earlyPurchasedAmountBy; // early purchased amount in CNY per purchasers&#39; address\n', '    bool public earlyPurchasesLoaded = false;  // returns whether all early purchases are loaded into this contract\n', '\n', '    // crowdsale\n', '    uint256 public purchaseStartBlock;  // crowdsale purchases can be accepted from this block number\n', '    uint256 public startDate;\n', '    uint256 public endedAt;\n', '    CrowdsalePurchase[] public crowdsalePurchases;\n', '    uint256 public cnyBtcRate; // this rate won&#39;t be used from a smart contract function but external system\n', '    uint256 public cnyEthRate;\n', '\n', '    // bonus milestones\n', '    uint256 public firstBonusSalesEnds;\n', '    uint256 public secondBonusSalesEnds;\n', '    uint256 public thirdBonusSalesEnds;\n', '    uint256 public fourthBonusSalesEnds;\n', '    uint256 public fifthBonusSalesEnds;\n', '    uint256 public firstExtendedBonusSalesEnds;\n', '    uint256 public secondExtendedBonusSalesEnds;\n', '    uint256 public thirdExtendedBonusSalesEnds;\n', '    uint256 public fourthExtendedBonusSalesEnds;\n', '    uint256 public fifthExtendedBonusSalesEnds;\n', '    uint256 public sixthExtendedBonusSalesEnds;\n', '\n', '    // after the crowdsale\n', '    mapping(uint256 => CrowdsalePurchase) public invalidatedOrigPurchases;  // Original purchase which was invalidated by owner\n', '    mapping(uint256 => CrowdsalePurchase) public amendedOrigPurchases;      // Original purchase which was amended by owner\n', '\n', '    mapping (address => uint256) public numOfPurchasedTokensOnCsBy;    // the number of tokens purchased on the crowdsale by a purchaser\n', '    mapping (address => uint256) public numOfPurchasedTokensOnEpBy;    // the number of tokens early purchased by a purchaser\n', '\n', '    /**\n', '     *  Modifiers\n', '     */\n', '    modifier minInvestment() {\n', '        // User has to send at least the ether value of one token.\n', '        assert(msg.value >= MIN_INVESTMENT);\n', '        _;\n', '    }\n', '\n', '    modifier whenEnded() {\n', '        assert(isEnded());\n', '        _;\n', '    }\n', '\n', '    modifier hasBalance() {\n', '        assert(this.balance > 0);\n', '        _;\n', '    }\n', '    modifier rateIsSet(uint256 _rate) {\n', '        assert(_rate != 0);\n', '        _;\n', '    }\n', '\n', '    modifier whenNotEnded() {\n', '        assert(!isEnded());\n', '        _;\n', '    }\n', '\n', '    modifier tokensNotDelivered() {\n', '        assert(numOfDeliveredCrowdsalePurchases == 0);\n', '        assert(numOfDeliveredEarlyPurchases == 0);\n', '        _;\n', '    }\n', '\n', '    modifier onlyFundraiser() {\n', '      assert(address(starbaseToken) != 0);\n', '      assert(starbaseToken.isFundraiser(msg.sender));\n', '      _;\n', '    }\n', '\n', '    /**\n', '     * Contract functions\n', '     */\n', '\n', '    /**\n', '     * @dev Contract constructor function sets owner and start date.\n', '     * @param workshopAddr The address that will hold undelivered Star tokens\n', '     * @param starbaseEpAddr The address that holds the early purchasers Star tokens\n', '     */\n', '    function StarbaseCrowdsale(address workshopAddr, address starbaseEpAddr) {\n', '        require(workshopAddr != 0 && starbaseEpAddr != 0);\n', '\n', '        owner = msg.sender;\n', '        workshop = workshopAddr;\n', '        starbaseEpAmendment = StarbaseEarlyPurchaseAmendment(starbaseEpAddr);\n', '    }\n', '\n', '    /**\n', '     * @dev Fallback accepts payment for Star tokens with Eth\n', '     */\n', '    function() payable {\n', '        redirectToPurchase();\n', '    }\n', '\n', '    /**\n', '     * External functions\n', '     */\n', '\n', '    /**\n', '     * @dev Setup function sets external contracts&#39; addresses.\n', '     * @param starbaseTokenAddress Token address.\n', '     * @param _purchaseStartBlock Block number to start crowdsale\n', '     */\n', '    function setup(address starbaseTokenAddress, uint256 _purchaseStartBlock)\n', '        external\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        assert(address(starbaseToken) == 0);\n', '        starbaseToken = AbstractStarbaseToken(starbaseTokenAddress);\n', '        purchaseStartBlock = _purchaseStartBlock;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows owner to record a purchase made outside of Ethereum blockchain\n', '     * @param purchaser Address of a purchaser\n', '     * @param rawAmount Purchased amount in CNY\n', '     * @param purchasedAt Timestamp at the purchase made\n', '     * @param data Identifier as an evidence of the purchase (e.g. btc:1xyzxyz)\n', '     */\n', '    function recordOffchainPurchase(\n', '        address purchaser,\n', '        uint256 rawAmount,\n', '        uint256 purchasedAt,\n', '        string data\n', '    )\n', '        external\n', '        onlyFundraiser\n', '        whenNotEnded\n', '        rateIsSet(cnyBtcRate)\n', '        returns (bool)\n', '    {\n', '        require(purchaseStartBlock > 0 && block.number >= purchaseStartBlock);\n', '        if (startDate == 0) {\n', '            startCrowdsale(block.timestamp);\n', '        }\n', '\n', '        uint256 bonusTier = getBonusTier();\n', '        uint amount = recordPurchase(purchaser, rawAmount, purchasedAt, data, bonusTier);\n', '\n', '        StarBasePurchasedOffChain(purchaser, amount, rawAmount, cnyBtcRate, bonusTier, data);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers raised funds to company&#39;s wallet address at any given time.\n', '     */\n', '    function withdrawForCompany()\n', '        external\n', '        onlyFundraiser\n', '        hasBalance\n', '    {\n', '        address company = starbaseToken.company();\n', '        require(company != address(0));\n', '        company.transfer(this.balance);\n', '    }\n', '\n', '    /**\n', '     * @dev Update the CNY/ETH rate to record purchases in CNY\n', '     */\n', '    function updateCnyEthRate(uint256 rate)\n', '        external\n', '        onlyFundraiser\n', '        returns (bool)\n', '    {\n', '        cnyEthRate = rate;\n', '        CnyEthRateUpdated(cnyEthRate);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Update the CNY/BTC rate to record purchases in CNY\n', '     */\n', '    function updateCnyBtcRate(uint256 rate)\n', '        external\n', '        onlyFundraiser\n', '        returns (bool)\n', '    {\n', '        cnyBtcRate = rate;\n', '        CnyBtcRateUpdated(cnyBtcRate);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Allow for the possibilyt for contract owner to start crowdsale\n', '     */\n', '    function ownerStartsCrowdsale(uint256 timestamp)\n', '        external\n', '        onlyOwner\n', '    {\n', '        assert(startDate == 0 && block.number >= purchaseStartBlock);   // overwriting startDate is not permitted and it should be after the crowdsale start block\n', '        startCrowdsale(timestamp);\n', '\n', '    }\n', '\n', '    /**\n', '     * @dev Ends crowdsale\n', '     * @param timestamp Timestamp at the crowdsale ended\n', '     */\n', '    function endCrowdsale(uint256 timestamp)\n', '        external\n', '        onlyOwner\n', '    {\n', '        assert(timestamp > 0 && timestamp <= now);\n', '        assert(endedAt == 0);   // overwriting time is not permitted\n', '        endedAt = timestamp;\n', '        CrowdsaleEnded(endedAt);\n', '    }\n', '\n', '    /**\n', '     * @dev Invalidate a crowdsale purchase if something is wrong with it\n', '     * @param purchaseIdx Index number of the crowdsalePurchases to invalidate\n', '     */\n', '    function invalidatePurchase(uint256 purchaseIdx)\n', '        external\n', '        onlyOwner\n', '        whenEnded\n', '        tokensNotDelivered\n', '        returns (bool)\n', '    {\n', '        CrowdsalePurchase memory purchase = crowdsalePurchases[purchaseIdx];\n', '        assert(purchase.purchaser != 0 && purchase.amount != 0);\n', '\n', '        crowdsalePurchases[purchaseIdx].amount = 0;\n', '        crowdsalePurchases[purchaseIdx].rawAmount = 0;\n', '        invalidatedOrigPurchases[purchaseIdx] = purchase;\n', '        PurchaseInvalidated(purchaseIdx);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Amend a crowdsale purchase if something is wrong with it\n', '     * @param purchaseIdx Index number of the crowdsalePurchases to invalidate\n', '     * @param purchaser Address of the buyer\n', '     * @param amount Purchased tokens as per the CNY rate used\n', '     * @param rawAmount Purchased tokens as per the CNY rate used without the bonus\n', '     * @param purchasedAt Timestamp at the purchase made\n', '     * @param data Identifier as an evidence of the purchase (e.g. btc:1xyzxyz)\n', '     * @param bonus bonus milestones of the purchase\n', '     */\n', '    function amendPurchase(\n', '        uint256 purchaseIdx,\n', '        address purchaser,\n', '        uint256 amount,\n', '        uint256 rawAmount,\n', '        uint256 purchasedAt,\n', '        string data,\n', '        uint256 bonus\n', '    )\n', '        external\n', '        onlyOwner\n', '        whenEnded\n', '        tokensNotDelivered\n', '        returns (bool)\n', '    {\n', '        CrowdsalePurchase memory purchase = crowdsalePurchases[purchaseIdx];\n', '        assert(purchase.purchaser != 0 && purchase.amount != 0);\n', '\n', '        amendedOrigPurchases[purchaseIdx] = purchase;\n', '        crowdsalePurchases[purchaseIdx] =\n', '            CrowdsalePurchase(purchaser, amount, rawAmount, purchasedAt, data, bonus);\n', '        PurchaseAmended(purchaseIdx);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Deliver tokens to purchasers according to their purchase amount in CNY\n', '     */\n', '    function deliverPurchasedTokens()\n', '        external\n', '        onlyOwner\n', '        whenEnded\n', '        returns (bool)\n', '    {\n', '        assert(earlyPurchasesLoaded);\n', '        assert(address(starbaseToken) != 0);\n', '\n', '        uint256 totalAmountOfPurchasesInCny = totalRaisedAmountInCny(); // totalPreSale + totalCrowdsale\n', '\n', '        for (uint256 i = numOfDeliveredCrowdsalePurchases; i < crowdsalePurchases.length && msg.gas > 200000; i++) {\n', '            CrowdsalePurchase memory purchase = crowdsalePurchases[i];\n', '            if (purchase.amount == 0) {\n', '                continue;   // skip invalidated purchase\n', '            }\n', '\n', '            /*\n', '             * “Value” refers to the contribution of the User:\n', '             *  {crowdsale_purchaser_token_amount} =\n', '             *  {crowdsale_token_amount} * {crowdsalePurchase_value} / {earlypurchase_value} + {crowdsale_value}.\n', '             *\n', '             * Example: If a User contributes during the Contribution Period 100 CNY (including applicable\n', '             * Bonus, if any) and the total amount early purchases amounts to 6’000’000 CNY\n', '             * and total amount raised during the Contribution Period is 30’000’000, then he will get\n', '             * 347.22 STAR = 125’000’000 STAR * 100 CNY / 30’000’000 CNY + 6’000’000 CNY.\n', '            */\n', '\n', '            uint256 crowdsalePurchaseValue = purchase.amount;\n', '            uint256 tokenCount = SafeMath.mul(crowdsaleTokenAmount, crowdsalePurchaseValue) / totalAmountOfPurchasesInCny;\n', '\n', '            numOfPurchasedTokensOnCsBy[purchase.purchaser] = SafeMath.add(numOfPurchasedTokensOnCsBy[purchase.purchaser], tokenCount);\n', '            starbaseToken.allocateToCrowdsalePurchaser(purchase.purchaser, tokenCount);\n', '            numOfDeliveredCrowdsalePurchases = SafeMath.add(i, 1);\n', '        }\n', '\n', '        for (uint256 j = numOfDeliveredEarlyPurchases; j < earlyPurchasers.length && msg.gas > 200000; j++) {\n', '            address earlyPurchaser = earlyPurchasers[j];\n', '\n', '            /*\n', '             * “Value” refers to the contribution of the User:\n', '             * {earlypurchaser_token_amount} =\n', '             * {earlypurchaser_token_amount} * ({earlypurchase_value} / {total_earlypurchase_value})\n', '             *  + {crowdsale_token_amount} * ({earlypurchase_value} / {earlypurchase_value} + {crowdsale_value}).\n', '             *\n', '             * Example: If an Early Purchaser contributes 100 CNY (including Bonus of 20%) and the\n', '             * total amount of early purchases amounts to 6’000’000 CNY and the total amount raised\n', '             * during the Contribution Period is 30’000’000 CNY, then he will get 1180.55 STAR =\n', '             * 50’000’000 STAR * 100 CNY / 6’000’000 CNY + 125’000’000 STAR * 100 CNY /\n', '             * 30’000’000 CNY + 6’000’000 CNY\n', '             */\n', '\n', '            uint256 earlyPurchaserPurchaseValue = earlyPurchasedAmountBy[earlyPurchaser];\n', '\n', '            uint256 epTokenCalculationFromEPTokenAmount = SafeMath.mul(earlyPurchaseTokenAmount, earlyPurchaserPurchaseValue) / totalAmountOfEarlyPurchases();\n', '\n', '            uint256 epTokenCalculationFromCrowdsaleTokenAmount = SafeMath.mul(crowdsaleTokenAmount, earlyPurchaserPurchaseValue) / totalAmountOfPurchasesInCny;\n', '\n', '            uint256 epTokenCount = SafeMath.add(epTokenCalculationFromEPTokenAmount, epTokenCalculationFromCrowdsaleTokenAmount);\n', '\n', '            numOfPurchasedTokensOnEpBy[earlyPurchaser] = SafeMath.add(numOfPurchasedTokensOnEpBy[earlyPurchaser], epTokenCount);\n', '            starbaseToken.allocateToCrowdsalePurchaser(earlyPurchaser, epTokenCount);\n', '            numOfDeliveredEarlyPurchases = SafeMath.add(j, 1);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Load early purchases from the contract keeps track of them\n', '     */\n', '    function loadEarlyPurchases() external onlyOwner returns (bool) {\n', '        if (earlyPurchasesLoaded) {\n', '            return false;    // all EPs have already been loaded\n', '        }\n', '\n', '        uint256 numOfOrigEp = starbaseEpAmendment\n', '            .starbaseEarlyPurchase()\n', '            .numberOfEarlyPurchases();\n', '\n', '        for (uint256 i = numOfLoadedEarlyPurchases; i < numOfOrigEp && msg.gas > 200000; i++) {\n', '            if (starbaseEpAmendment.isInvalidEarlyPurchase(i)) {\n', '                continue;\n', '            }\n', '            var (purchaser, amount,) =\n', '                starbaseEpAmendment.isAmendedEarlyPurchase(i)\n', '                ? starbaseEpAmendment.amendedEarlyPurchases(i)\n', '                : starbaseEpAmendment.earlyPurchases(i);\n', '            if (amount > 0) {\n', '                if (earlyPurchasedAmountBy[purchaser] == 0) {\n', '                    earlyPurchasers.push(purchaser);\n', '                }\n', '                // each early purchaser receives 20% bonus\n', '                uint256 bonus = SafeMath.mul(amount, 20) / 100;\n', '                uint256 amountWithBonus = SafeMath.add(amount, bonus);\n', '\n', '                earlyPurchasedAmountBy[purchaser] += amountWithBonus;\n', '            }\n', '        }\n', '\n', '        numOfLoadedEarlyPurchases += i;\n', '        assert(numOfLoadedEarlyPurchases <= numOfOrigEp);\n', '        if (numOfLoadedEarlyPurchases == numOfOrigEp) {\n', '            earlyPurchasesLoaded = true;    // enable the flag\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '      * @dev Set qualified crowdsale partner i.e. Bitcoin Suisse address\n', '      * @param _qualifiedPartner Address of the qualified partner that can purchase during crowdsale\n', '      * @param _amountCap Ether value which partner is able to contribute\n', '      * @param _commissionFeePercentage Integer that represents the fee to pay qualified partner 5 is 5%\n', '      */\n', '    function setQualifiedPartner(address _qualifiedPartner, uint256 _amountCap, uint256 _commissionFeePercentage)\n', '        external\n', '        onlyOwner\n', '    {\n', '        assert(!qualifiedPartners[_qualifiedPartner].bonaFide);\n', '        qualifiedPartners[_qualifiedPartner].bonaFide = true;\n', '        qualifiedPartners[_qualifiedPartner].amountCap = _amountCap;\n', '        qualifiedPartners[_qualifiedPartner].commissionFeePercentage = _commissionFeePercentage;\n', '        QualifiedPartnerAddress(_qualifiedPartner);\n', '    }\n', '\n', '    /**\n', '     * @dev Remove address from qualified partners list.\n', '     * @param _qualifiedPartner Address to be removed from the list.\n', '     */\n', '    function unlistQualifiedPartner(address _qualifiedPartner) external onlyOwner {\n', '        assert(qualifiedPartners[_qualifiedPartner].bonaFide);\n', '        qualifiedPartners[_qualifiedPartner].bonaFide = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Update whitelisted address amount allowed to raise during the presale.\n', '     * @param _qualifiedPartner Qualified Partner address to be updated.\n', '     * @param _amountCap Amount that the address is able to raise during the presale.\n', '     */\n', '    function updateQualifiedPartnerCapAmount(address _qualifiedPartner, uint256 _amountCap) external onlyOwner {\n', '        assert(qualifiedPartners[_qualifiedPartner].bonaFide);\n', '        qualifiedPartners[_qualifiedPartner].amountCap = _amountCap;\n', '    }\n', '\n', '    /**\n', '     * Public functions\n', '     */\n', '\n', '    /**\n', '     * @dev Returns boolean for whether crowdsale has ended\n', '     */\n', '    function isEnded() constant public returns (bool) {\n', '        return (endedAt > 0 && endedAt <= now);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns number of purchases to date.\n', '     */\n', '    function numOfPurchases() constant public returns (uint256) {\n', '        return crowdsalePurchases.length;\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates total amount of tokens purchased includes bonus tokens.\n', '     */\n', '    function totalAmountOfCrowdsalePurchases() constant public returns (uint256 amount) {\n', '        for (uint256 i; i < crowdsalePurchases.length; i++) {\n', '            amount = SafeMath.add(amount, crowdsalePurchases[i].amount);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates total amount of tokens purchased without bonus conversion.\n', '     */\n', '    function totalAmountOfCrowdsalePurchasesWithoutBonus() constant public returns (uint256 amount) {\n', '        for (uint256 i; i < crowdsalePurchases.length; i++) {\n', '            amount = SafeMath.add(amount, crowdsalePurchases[i].rawAmount);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns total raised amount in CNY (includes EP) and bonuses\n', '     */\n', '    function totalRaisedAmountInCny() constant public returns (uint256) {\n', '        return SafeMath.add(totalAmountOfEarlyPurchases(), totalAmountOfCrowdsalePurchases());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns total amount of early purchases in CNY\n', '     */\n', '    function totalAmountOfEarlyPurchases() constant public returns(uint256) {\n', '       return starbaseEpAmendment.totalAmountOfEarlyPurchases();\n', '    }\n', '\n', '    /**\n', '     * @dev Allows qualified crowdsale partner to purchase Star Tokens\n', '     */\n', '    function purchaseAsQualifiedPartner()\n', '        payable\n', '        public\n', '        rateIsSet(cnyEthRate)\n', '        returns (bool)\n', '    {\n', '        require(qualifiedPartners[msg.sender].bonaFide);\n', '        qualifiedPartners[msg.sender].amountRaised = SafeMath.add(msg.value, qualifiedPartners[msg.sender].amountRaised);\n', '\n', '        assert(qualifiedPartners[msg.sender].amountRaised <= qualifiedPartners[msg.sender].amountCap);\n', '\n', '        uint256 bonusTier = 30; // Pre sale purchasers get 30 percent bonus\n', '        uint256 rawAmount = SafeMath.mul(msg.value, cnyEthRate) / 1e18;\n', '        uint amount = recordPurchase(msg.sender, rawAmount, now, &#39;&#39;, bonusTier);\n', '\n', '        if (qualifiedPartners[msg.sender].commissionFeePercentage > 0) {\n', '            sendQualifiedPartnerCommissionFee(msg.sender, msg.value);\n', '        }\n', '\n', '        StarBasePurchasedWithEth(msg.sender, amount, rawAmount, cnyEthRate, bonusTier);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows user to purchase STAR tokens with Ether\n', '     */\n', '    function purchaseWithEth()\n', '        payable\n', '        public\n', '        minInvestment\n', '        whenNotEnded\n', '        rateIsSet(cnyEthRate)\n', '        returns (bool)\n', '    {\n', '        require(purchaseStartBlock > 0 && block.number >= purchaseStartBlock);\n', '        if (startDate == 0) {\n', '            startCrowdsale(block.timestamp);\n', '        }\n', '\n', '        uint256 bonusTier = getBonusTier();\n', '\n', '        uint256 rawAmount = SafeMath.mul(msg.value, cnyEthRate) / 1e18;\n', '        uint amount = recordPurchase(msg.sender, rawAmount, now, &#39;&#39;, bonusTier);\n', '\n', '        StarBasePurchasedWithEth(msg.sender, amount, rawAmount, cnyEthRate, bonusTier);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Internal functions\n', '     */\n', '\n', '    /**\n', '     * @dev Initializes Starbase crowdsale\n', '     */\n', '    function startCrowdsale(uint256 timestamp) internal {\n', '        startDate = timestamp;\n', '\n', '        // set token bonus milestones\n', '        firstBonusSalesEnds = startDate + 7 days;             // 1. 1st ~ 7th day\n', '        secondBonusSalesEnds = firstBonusSalesEnds + 14 days; // 2. 8th ~ 21st day\n', '        thirdBonusSalesEnds = secondBonusSalesEnds + 14 days; // 3. 22nd ~ 35th day\n', '        fourthBonusSalesEnds = thirdBonusSalesEnds + 7 days;  // 4. 36th ~ 42nd day\n', '        fifthBonusSalesEnds = fourthBonusSalesEnds + 3 days;  // 5. 43rd ~ 45th day\n', '\n', '        // extended sales bonus milestones\n', '        firstExtendedBonusSalesEnds = fifthBonusSalesEnds + 3 days;         // 1. 46th ~ 48th day\n', '        secondExtendedBonusSalesEnds = firstExtendedBonusSalesEnds + 3 days; // 2. 49th ~ 51st day\n', '        thirdExtendedBonusSalesEnds = secondExtendedBonusSalesEnds + 3 days; // 3. 52nd ~ 54th day\n', '        fourthExtendedBonusSalesEnds = thirdExtendedBonusSalesEnds + 3 days; // 4. 55th ~ 57th day\n', '        fifthExtendedBonusSalesEnds = fourthExtendedBonusSalesEnds + 3 days;  // 5. 58th ~ 60th day\n', '        sixthExtendedBonusSalesEnds = fifthExtendedBonusSalesEnds + 60 days; // 6. 61st ~ 120th day\n', '    }\n', '\n', '    /**\n', '     * @dev Abstract record of a purchase to Tokens\n', '     * @param purchaser Address of the buyer\n', '     * @param rawAmount Amount in CNY as per the CNY/ETH rate used\n', '     * @param timestamp Timestamp at the purchase made\n', '     * @param data Identifier as an evidence of the purchase (e.g. btc:1xyzxyz)\n', '     * @param bonusTier bonus milestones of the purchase\n', '     */\n', '    function recordPurchase(\n', '        address purchaser,\n', '        uint256 rawAmount,\n', '        uint256 timestamp,\n', '        string data,\n', '        uint256 bonusTier\n', '    )\n', '        internal\n', '        returns(uint256 amount)\n', '    {\n', '        amount = rawAmount; // amount to check reach of max cap. it does not care for bonus tokens here\n', '\n', '        // presale transfers which occurs before the crowdsale ignores the crowdsale hard cap\n', '        if (block.number >= purchaseStartBlock) {\n', '\n', '            assert(totalAmountOfCrowdsalePurchasesWithoutBonus() <= MAX_CROWDSALE_CAP);\n', '\n', '            uint256 crowdsaleTotalAmountAfterPurchase = SafeMath.add(totalAmountOfCrowdsalePurchasesWithoutBonus(), amount);\n', '\n', '            // check whether purchase goes over the cap and send the difference back to the purchaser.\n', '            if (crowdsaleTotalAmountAfterPurchase > MAX_CROWDSALE_CAP) {\n', '              uint256 difference = SafeMath.sub(crowdsaleTotalAmountAfterPurchase, MAX_CROWDSALE_CAP);\n', '              uint256 ethValueToReturn = SafeMath.mul(difference, 1e18) / cnyEthRate;\n', '              purchaser.transfer(ethValueToReturn);\n', '              amount = SafeMath.sub(amount, difference);\n', '              rawAmount = amount;\n', '            }\n', '\n', '        }\n', '\n', '        uint256 covertedAmountwWithBonus = SafeMath.mul(amount, bonusTier) / 100;\n', '        amount = SafeMath.add(amount, covertedAmountwWithBonus); // at this point amount bonus is calculated\n', '\n', '        CrowdsalePurchase memory purchase = CrowdsalePurchase(purchaser, amount, rawAmount, timestamp, data, bonusTier);\n', '        crowdsalePurchases.push(purchase);\n', '        return amount;\n', '    }\n', '\n', '    /**\n', '     * @dev Fetchs Bonus tier percentage per bonus milestones\n', '     */\n', '    function getBonusTier() internal returns (uint256) {\n', '        bool firstBonusSalesPeriod = now >= startDate && now <= firstBonusSalesEnds; // 1st ~ 7th day get 20% bonus\n', '        bool secondBonusSalesPeriod = now > firstBonusSalesEnds && now <= secondBonusSalesEnds; // 8th ~ 21st day get 15% bonus\n', '        bool thirdBonusSalesPeriod = now > secondBonusSalesEnds && now <= thirdBonusSalesEnds; // 22nd ~ 35th day get 10% bonus\n', '        bool fourthBonusSalesPeriod = now > thirdBonusSalesEnds && now <= fourthBonusSalesEnds; // 36th ~ 42nd day get 5% bonus\n', '        bool fifthBonusSalesPeriod = now > fourthBonusSalesEnds && now <= fifthBonusSalesEnds; // 43rd and 45th day get 0% bonus\n', '\n', '        // extended bonus sales\n', '        bool firstExtendedBonusSalesPeriod = now > fifthBonusSalesEnds && now <= firstExtendedBonusSalesEnds; // extended sales 46th ~ 48th day get 20% bonus\n', '        bool secondExtendedBonusSalesPeriod = now > firstExtendedBonusSalesEnds && now <= secondExtendedBonusSalesEnds; // 49th ~ 51st 15% bonus\n', '        bool thirdExtendedBonusSalesPeriod = now > secondExtendedBonusSalesEnds && now <= thirdExtendedBonusSalesEnds; // 52nd ~ 54th day get 10% bonus\n', '        bool fourthExtendedBonusSalesPeriod = now > thirdExtendedBonusSalesEnds && now <= fourthExtendedBonusSalesEnds; // 55th ~ 57th day day get 5% bonus\n', '        bool fifthExtendedBonusSalesPeriod = now > fourthExtendedBonusSalesEnds && now <= fifthExtendedBonusSalesEnds; // 58th ~ 60th day get 0% bonus\n', '        bool sixthExtendedBonusSalesPeriod = now > fifthExtendedBonusSalesEnds && now <= sixthExtendedBonusSalesEnds; // 61st ~ 120th day get {number_of_days} - 60 * 1% bonus\n', '\n', '        if (firstBonusSalesPeriod || firstExtendedBonusSalesPeriod) return 20;\n', '        if (secondBonusSalesPeriod || secondExtendedBonusSalesPeriod) return 15;\n', '        if (thirdBonusSalesPeriod || thirdExtendedBonusSalesPeriod) return 10;\n', '        if (fourthBonusSalesPeriod || fourthExtendedBonusSalesPeriod) return 5;\n', '        if (fifthBonusSalesPeriod || fifthExtendedBonusSalesPeriod) return 0;\n', '\n', '        if (sixthExtendedBonusSalesPeriod) {\n', '          uint256 DAY_IN_SECONDS = 86400;\n', '          uint256 secondsSinceStartDate = SafeMath.sub(now, startDate);\n', '          uint256 numberOfDays = secondsSinceStartDate / DAY_IN_SECONDS;\n', '\n', '          return SafeMath.sub(numberOfDays, 60);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Fetchs Bonus tier percentage per bonus milestones\n', '     * @dev qualifiedPartner Address of partners that participated in pre sale\n', '     * @dev amountSent Value sent by qualified partner\n', '     */\n', '    function sendQualifiedPartnerCommissionFee(address qualifiedPartner, uint256 amountSent) internal {\n', '        //calculate the commission fee to send to qualified partner\n', '        uint256 commissionFeePercentageCalculationAmount = SafeMath.mul(amountSent, qualifiedPartners[qualifiedPartner].commissionFeePercentage) / 100;\n', '\n', '        // send commission fee amount\n', '        qualifiedPartner.transfer(commissionFeePercentageCalculationAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev redirectToPurchase Redirect to adequate purchase function within the smart contract\n', '     */\n', '    function redirectToPurchase() internal {\n', '        if (block.number < purchaseStartBlock) {\n', '            purchaseAsQualifiedPartner();\n', '        } else {\n', '            purchaseWithEth();\n', '        }\n', '    }\n', '}']