['// This software is a subject to Ambisafe License Agreement.\n', '// No use or distribution is allowed without written permission from Ambisafe.\n', '// https://www.ambisafe.co/terms-of-use/\n', '\n', '// 0.4.8+commit.60cc1668, enabled optimization, 200 runs.\n', 'pragma solidity 0.4.8;\n', '\n', 'contract EventsHistory {\n', '    function versions(address) constant returns(uint);\n', '}\n', '\n', '/**\n', ' * @title EToken2 Emitter.\n', ' *\n', ' * Contains all the original event emitting function definitions and events.\n', ' * In case of new events needed later, additional emitters can be developed.\n', ' * All the functions is meant to be called using delegatecall.\n', ' */\n', 'library EToken2Emitter {\n', '    event Transfer(address indexed from, address indexed to, bytes32 indexed symbol, uint value, string reference, uint version);\n', '    event TransferToICAP(address indexed from, address indexed to, bytes32 indexed icap, uint value, string reference, uint version);\n', '    event Issue(bytes32 indexed symbol, uint value, address by, uint version);\n', '    event Revoke(bytes32 indexed symbol, uint value, address by, uint version);\n', '    event OwnershipChange(address indexed from, address indexed to, bytes32 indexed symbol, uint version);\n', '    event Approve(address indexed from, address indexed spender, bytes32 indexed symbol, uint value, uint version);\n', '    event Recovery(address indexed from, address indexed to, address by, uint version);\n', '    event Error(bytes32 message, uint version);\n', '    event Change(bytes32 indexed symbol, uint version);\n', '    \n', '    function emitTransfer(address _from, address _to, bytes32 _symbol, uint _value, string _reference) {\n', '        Transfer(_from, _to, _symbol, _value, _reference, _getVersion());\n', '    }\n', '\n', '    function emitTransferToICAP(address _from, address _to, bytes32 _icap, uint _value, string _reference) {\n', '        TransferToICAP(_from, _to, _icap, _value, _reference, _getVersion());\n', '    }\n', '\n', '    function emitIssue(bytes32 _symbol, uint _value, address _by) {\n', '        Issue(_symbol, _value, _by, _getVersion());\n', '    }\n', '\n', '    function emitRevoke(bytes32 _symbol, uint _value, address _by) {\n', '        Revoke(_symbol, _value, _by, _getVersion());\n', '    }\n', '\n', '    function emitOwnershipChange(address _from, address _to, bytes32 _symbol) {\n', '        OwnershipChange(_from, _to, _symbol, _getVersion());\n', '    }\n', '\n', '    function emitApprove(address _from, address _spender, bytes32 _symbol, uint _value) {\n', '        Approve(_from, _spender, _symbol, _value, _getVersion());\n', '    }\n', '\n', '    function emitRecovery(address _from, address _to, address _by) {\n', '        Recovery(_from, _to, _by, _getVersion());\n', '    }\n', '\n', '    function emitError(bytes32 _message) {\n', '        Error(_message, _getVersion());\n', '    }\n', '\n', '    function emitChange(bytes32 _symbol) {\n', '        Change(_symbol, _getVersion());\n', '    }\n', '\n', '    /**\n', '     * Get version number of the caller.\n', '     *\n', '     * Assuming that the call is made by EventsHistory using delegate call,\n', '     * context was not changed, so the caller is the address that called\n', '     * EventsHistory.\n', '     *\n', '     * @return current context caller version number.\n', '     */\n', '    function _getVersion() constant internal returns(uint) {\n', '        return EventsHistory(address(this)).versions(msg.sender);\n', '    }\n', '}']