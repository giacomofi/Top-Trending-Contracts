['/**\n', '* The contract defining the contest, allowing participation and voting.\n', '* Participation is only possible before the participation deadline.\n', '* Voting is only allowed after the participation deadline was met and before the voting deadline expires.\n', '* As soon as voting is over, the contest may be closed, resultig in the distribution od the prizes.\n', '* The referee may disable certain participants, if their content is inappropiate.\n', '*\n', '* Copyright (c) 2016 Jam Data, Julia Altenried\n', '* */\n', 'pragma solidity ^0.4.7;\n', 'contract Contest {\n', '/** An ID derived from the contest meta data, so users can verify which contract belongs to which contest **/\n', 'uint public id;\n', '/** The contest creator**/\n', 'address owner;\n', '/** The referee deciding if content is appropiate **/\n', 'address public referee;\n', '/** The providers address **/\n', 'address public c4c;\n', '/** List of all participants **/\n', 'address[] public participants;\n', '/** List of all voters **/\n', 'address[] public voters;\n', '/** List of the winning participants */\n', 'address[] public winners;\n', '/** List of the voters that won a prize */\n', 'address[] public luckyVoters;\n', '/** The sum of the prizes paid out */\n', 'uint public totalPrize;\n', '/** to efficiently check if somebody already participated **/\n', 'mapping(address=>bool) public participated;\n', '/** to efficiently check if somebody already voted **/\n', 'mapping(address=>bool) public voted;\n', '/** number of votes per candidate (think about it, maybe itâ€™s better to count afterwards) **/\n', 'mapping(address=>uint) public numVotes;\n', '/** disqualified participants**/\n', 'mapping(address => bool) public disqualified;\n', '/** timestamp of the participation deadline**/\n', 'uint public deadlineParticipation;\n', '/** timestamp of the voting deadline**/\n', 'uint public deadlineVoting;\n', '/** participation fee **/\n', 'uint128 public participationFee;\n', '/** voting fee**/\n', 'uint128 public votingFee;\n', '/** provider fee **/\n', 'uint16 public c4cfee;\n', '/** prize distribution **/\n', 'uint16 public prizeOwner;\n', 'uint16 public prizeReferee;\n', 'uint16[] public prizeWinners;\n', '//rest for voters, how many?\n', 'uint8 public nLuckyVoters;\n', '\n', '/** fired when contest is closed **/\n', 'event ContestClosed(uint prize, address[] winners, address[] votingWinners);\n', '\n', '/** sets owner, referee, c4c, prizes (in percent with two decimals), deadlines **/\n', 'function Contest() payable{\n', 'c4c = 0x87b0de512502f3e86fd22654b72a640c8e0f59cc;\n', 'c4cfee = 1000;\n', 'owner = msg.sender;\n', '\n', 'deadlineParticipation=1497910740;\n', 'deadlineVoting=1498947540;\n', 'participationFee=11000000000000000;\n', 'votingFee=4000000000000000;\n', 'prizeOwner=955;\n', 'prizeReferee=0;\n', 'prizeWinners.push(6045);\n', 'nLuckyVoters=1;\n', '\n', '\n', 'uint16 sumPrizes = prizeOwner;\n', 'for(uint i = 0; i < prizeWinners.length; i++) {\n', 'sumPrizes += prizeWinners[i];\n', '}\n', 'if(sumPrizes>10000)\n', 'throw;\n', 'else if(sumPrizes < 10000 && nLuckyVoters == 0)//make sure everything is paid out\n', 'throw;\n', '}\n', '\n', '/**\n', '* adds msg.sender to the list of participants if the deadline was not yet met and the participation fee is paid\n', '* */\n', 'function participate() payable {\n', 'if(msg.value < participationFee)\n', 'throw;\n', 'else if (now >= deadlineParticipation)\n', 'throw;\n', 'else if (participated[msg.sender])\n', 'throw;\n', 'else if (msg.sender!=tx.origin) //contract could decline money sending or have an expensive fallback function, only wallets should be able to participate\n', 'throw;\n', 'else {\n', 'participants.push(msg.sender);\n', 'participated[msg.sender]=true;\n', '//if the winners list is smaller than the prize list, push the candidate\n', 'if(winners.length < prizeWinners.length) winners.push(msg.sender);\n', '}\n', '}\n', '\n', '/**\n', "* adds msg.sender to the voter list and updates vote related mappings if msg.value is enough, the vote is done between the deadlines and the voter didn't vote already\n", '*/\n', 'function vote(address candidate) payable{\n', 'if(msg.value < votingFee)\n', 'throw;\n', 'else if(now < deadlineParticipation || now >=deadlineVoting)\n', 'throw;\n', 'else if(voted[msg.sender])//voter did already vote\n', 'throw;\n', 'else if (msg.sender!=tx.origin) //contract could decline money sending or have an expensive fallback function, only wallets should be able to vote\n', 'throw;\n', 'else if(!participated[candidate]) //only voting for actual participants\n', 'throw;\n', 'else{\n', 'voters.push(msg.sender);\n', 'voted[msg.sender] = true;\n', 'numVotes[candidate]++;\n', '\n', 'for(var i = 0; i < winners.length; i++){//from the first to the last\n', 'if(winners[i]==candidate) break;//the candidate remains on the same position\n', 'if(numVotes[candidate]>numVotes[winners[i]]){//candidate is better\n', '//else, usually winners[i+1]==candidate, because usually a candidate just improves by one ranking\n', '//however, if there are multiple candidates with the same amount of votes, it might be otherwise\n', 'for(var j = getCandidatePosition(candidate, i+1); j>i; j--){\n', 'winners[j]=winners[j-1];\n', '}\n', 'winners[i]=candidate;\n', 'break;\n', '}\n', '}\n', '}\n', '}\n', '\n', 'function getCandidatePosition(address candidate, uint startindex) internal returns (uint){\n', 'for(uint i = startindex; i < winners.length; i++){\n', 'if(winners[i]==candidate) return i;\n', '}\n', 'return winners.length-1;\n', '}\n', '\n', '/**\n', '* only called by referee, does not delete the participant from the list, but keeps him from winning (because of inappropiate content), only in contract if a referee exists\n', '* */\n', 'function disqualify(address candidate){\n', 'if(msg.sender==referee)\n', 'disqualified[candidate]=true;\n', '}\n', '\n', '/**\n', '* only callable by referee. in case he disqualified the wrong participant\n', '* */\n', 'function requalify(address candidate){\n', 'if(msg.sender==referee)\n', 'disqualified[candidate]=false;\n', '}\n', '\n', '/**\n', '* only callable after voting deadline, distributes the prizes, fires event?\n', '* */\n', 'function close(){\n', '// if voting already ended and the contract has not been closed yet\n', 'if(now>=deadlineVoting&&totalPrize==0){\n', 'determineLuckyVoters();\n', 'if(this.balance>10000) distributePrizes(); //more than 10000 wei so every party gets at least 1 wei (if s.b. gets 0.01%)\n', 'ContestClosed(totalPrize, winners, luckyVoters);\n', '}\n', '}\n', '\n', '/**\n', '* Determines the winning voters\n', '* */\n', 'function determineLuckyVoters() constant {\n', 'if(nLuckyVoters>=voters.length)\n', 'luckyVoters = voters;\n', 'else{\n', 'mapping (uint => bool) chosen;\n', 'uint nonce=1;\n', '\n', 'uint rand;\n', 'for(uint i = 0; i < nLuckyVoters; i++){\n', 'do{\n', 'rand = randomNumberGen(nonce, voters.length);\n', 'nonce++;\n', '}while (chosen[rand]);\n', '\n', 'chosen[rand] = true;\n', 'luckyVoters.push(voters[rand]);\n', '}\n', '}\n', '}\n', '\n', '/**\n', '* creates a random number in [0,range)\n', '* */\n', 'function randomNumberGen(uint nonce, uint range) internal constant returns(uint){\n', 'return uint(block.blockhash(block.number-nonce))%range;\n', '}\n', '\n', '/**\n', '* distribites the contract balance amongst the creator, wthe winners, the lucky voters, the referee and the provider\n', '* */\n', 'function distributePrizes() internal{\n', '\n', 'if(!c4c.send(this.balance/10000*c4cfee)) throw;\n', 'totalPrize = this.balance;\n', 'if(prizeOwner!=0 && !owner.send(totalPrize/10000*prizeOwner)) throw;\n', 'if(prizeReferee!=0 && !referee.send(totalPrize/10000*prizeReferee)) throw;\n', 'for (uint8 i = 0; i < winners.length; i++)\n', 'if(prizeWinners[i]!=0 && !winners[i].send(totalPrize/10000*prizeWinners[i])) throw;\n', 'if (luckyVoters.length>0){//if anybody voted\n', 'if(this.balance>luckyVoters.length){//if there is ether left to be distributed amongst the lucky voters\n', 'uint amount = this.balance/luckyVoters.length;\n', 'for(uint8 j = 0; j < luckyVoters.length; j++)\n', 'if(!luckyVoters[j].send(amount)) throw;\n', '}\n', '}\n', 'else if(!owner.send(this.balance)) throw;//if there is no lucky voter, give remainder to the owner\n', '}\n', '\n', '/**\n', '* returns the total vote count\n', '* */\n', 'function getTotalVotes() constant returns(uint){\n', 'return voters.length;\n', '}\n', '}']