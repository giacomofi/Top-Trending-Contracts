['pragma solidity ^0.4.13;\n', '\n', 'interface TokenERC20 {\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '}\n', '\n', '\n', 'interface TokenNotifier {\n', '\n', '    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n', '}\n', '\n', '/**\n', ' * @title SafeMath (from https://github.com/OpenZeppelin/zeppelin-solidity/blob/4d91118dd964618863395dcca25a50ff137bf5b6/contracts/math/SafeMath.sol)\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'contract SafeMath {\n', '    \n', '    function safeMul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function safeSub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function safeAdd(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract Owned {\n', '\n', '    address owner;\n', '    \n', '    function Owned() { owner = msg.sender; }\n', '\n', '    modifier onlyOwner { require(msg.sender == owner); _; }\n', '}\n', '\n', '\n', 'contract PersianToken is TokenERC20, Owned, SafeMath {\n', '\n', '    // The actual total supply is not constant and it will be updated with the real redeemed tokens once the ICO is over\n', '    uint256 public totalSupply = 0;\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    uint8 public constant decimals = 18;\n', '    string public constant name = &#39;Persian&#39;;\n', '    string public constant symbol = &#39;PRS&#39;;\n', '    string public constant version = &#39;1.0.0&#39;;\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        if (balances[msg.sender] < _value) return false;\n', '        balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if(balances[msg.sender] < _value || allowed[_from][msg.sender] < _value) return false;\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        balances[_from] = safeSub(balances[_from], _value);\n', '        allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        if(!approve(_spender, _value)) return false;\n', '        TokenNotifier(_spender).receiveApproval(msg.sender, _value, this, _extraData);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', '\n', 'contract TokenICO is PersianToken {\n', '\n', '    uint256 public icoStartBlock;\n', '    uint256 public icoEndBlock;\n', '    uint256 public totalContributions;\n', '    mapping (address => uint256) public contributions;\n', '\n', '    // At max 300.000 Persian (with 18 decimals) will be ever generated from this ICO\n', '    uint256 public constant maxTotalSupply = 300000 * 10**18;\n', '\n', '    event Contributed(address indexed _contributor, uint256 _value, uint256 _estimatedTotalTokenBalance);\n', '    event Claimed(address indexed _contributor, uint256 _value);\n', '\n', '    function contribute() onlyDuringICO payable external returns (bool success) {\n', '        totalContributions = safeAdd(totalContributions, msg.value);\n', '        contributions[msg.sender] = safeAdd(contributions[msg.sender], msg.value);\n', '        Contributed(msg.sender, msg.value, estimateBalanceOf(msg.sender));\n', '        return true;\n', '    }\n', '\n', '    function claimToken() onlyAfterICO external returns (bool success) {\n', '        uint256 balance = estimateBalanceOf(msg.sender);\n', '        contributions[msg.sender] = 0;\n', '        balances[msg.sender] = safeAdd(balances[msg.sender], balance);\n', '        totalSupply = safeAdd(totalSupply, balance);\n', '        require(totalSupply <= maxTotalSupply);\n', '        Claimed(msg.sender, balance);\n', '        return true;\n', '    }\n', '\n', '    function redeemEther() onlyAfterICO onlyOwner external  {\n', '        owner.transfer(this.balance);\n', '    }\n', '\n', '    function estimateBalanceOf(address _owner) constant returns (uint256 estimatedTokens) {\n', '        return contributions[_owner] > 0 ? safeMul( maxTotalSupply / totalContributions, contributions[_owner]) : 0;\n', '    }\n', '\n', '    // This check is an helper function for &#208;App to check the effect of the NEXT tx, NOT simply the current state of the contract\n', '    function isICOOpen() constant returns (bool _open) {\n', '        return block.number >= (icoStartBlock - 1) && !isICOEnded();\n', '    }\n', '\n', '    // This check is an helper function for &#208;App to check the effect of the NEXT tx, NOT simply the current state of the contract\n', '    function isICOEnded() constant returns (bool _ended) {\n', '        return block.number >= icoEndBlock;\n', '    }\n', '\n', '    modifier onlyDuringICO {\n', '        require(block.number >= icoStartBlock && block.number <= icoEndBlock); _;\n', '    }\n', '\n', '    modifier onlyAfterICO {\n', '        require(block.number > icoEndBlock); _;\n', '    }\n', '}\n', '\n', '\n', 'contract PersianTokenICO is TokenICO {\n', '\n', '    function PersianTokenICO(uint256 _icoStartBlock, uint256 _icoEndBlock) {\n', '        icoStartBlock = _icoStartBlock;\n', '        icoEndBlock = _icoEndBlock;\n', '    }\n', '  \n', '    function () onlyDuringICO payable {\n', '        totalContributions = safeAdd(totalContributions, msg.value);\n', '        contributions[msg.sender] = safeAdd(contributions[msg.sender], msg.value);\n', '        Contributed(msg.sender, msg.value, estimateBalanceOf(msg.sender));\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.13;\n', '\n', 'interface TokenERC20 {\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '}\n', '\n', '\n', 'interface TokenNotifier {\n', '\n', '    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n', '}\n', '\n', '/**\n', ' * @title SafeMath (from https://github.com/OpenZeppelin/zeppelin-solidity/blob/4d91118dd964618863395dcca25a50ff137bf5b6/contracts/math/SafeMath.sol)\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'contract SafeMath {\n', '    \n', '    function safeMul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function safeSub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function safeAdd(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract Owned {\n', '\n', '    address owner;\n', '    \n', '    function Owned() { owner = msg.sender; }\n', '\n', '    modifier onlyOwner { require(msg.sender == owner); _; }\n', '}\n', '\n', '\n', 'contract PersianToken is TokenERC20, Owned, SafeMath {\n', '\n', '    // The actual total supply is not constant and it will be updated with the real redeemed tokens once the ICO is over\n', '    uint256 public totalSupply = 0;\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    uint8 public constant decimals = 18;\n', "    string public constant name = 'Persian';\n", "    string public constant symbol = 'PRS';\n", "    string public constant version = '1.0.0';\n", '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        if (balances[msg.sender] < _value) return false;\n', '        balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if(balances[msg.sender] < _value || allowed[_from][msg.sender] < _value) return false;\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        balances[_from] = safeSub(balances[_from], _value);\n', '        allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        if(!approve(_spender, _value)) return false;\n', '        TokenNotifier(_spender).receiveApproval(msg.sender, _value, this, _extraData);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', '\n', 'contract TokenICO is PersianToken {\n', '\n', '    uint256 public icoStartBlock;\n', '    uint256 public icoEndBlock;\n', '    uint256 public totalContributions;\n', '    mapping (address => uint256) public contributions;\n', '\n', '    // At max 300.000 Persian (with 18 decimals) will be ever generated from this ICO\n', '    uint256 public constant maxTotalSupply = 300000 * 10**18;\n', '\n', '    event Contributed(address indexed _contributor, uint256 _value, uint256 _estimatedTotalTokenBalance);\n', '    event Claimed(address indexed _contributor, uint256 _value);\n', '\n', '    function contribute() onlyDuringICO payable external returns (bool success) {\n', '        totalContributions = safeAdd(totalContributions, msg.value);\n', '        contributions[msg.sender] = safeAdd(contributions[msg.sender], msg.value);\n', '        Contributed(msg.sender, msg.value, estimateBalanceOf(msg.sender));\n', '        return true;\n', '    }\n', '\n', '    function claimToken() onlyAfterICO external returns (bool success) {\n', '        uint256 balance = estimateBalanceOf(msg.sender);\n', '        contributions[msg.sender] = 0;\n', '        balances[msg.sender] = safeAdd(balances[msg.sender], balance);\n', '        totalSupply = safeAdd(totalSupply, balance);\n', '        require(totalSupply <= maxTotalSupply);\n', '        Claimed(msg.sender, balance);\n', '        return true;\n', '    }\n', '\n', '    function redeemEther() onlyAfterICO onlyOwner external  {\n', '        owner.transfer(this.balance);\n', '    }\n', '\n', '    function estimateBalanceOf(address _owner) constant returns (uint256 estimatedTokens) {\n', '        return contributions[_owner] > 0 ? safeMul( maxTotalSupply / totalContributions, contributions[_owner]) : 0;\n', '    }\n', '\n', '    // This check is an helper function for ÐApp to check the effect of the NEXT tx, NOT simply the current state of the contract\n', '    function isICOOpen() constant returns (bool _open) {\n', '        return block.number >= (icoStartBlock - 1) && !isICOEnded();\n', '    }\n', '\n', '    // This check is an helper function for ÐApp to check the effect of the NEXT tx, NOT simply the current state of the contract\n', '    function isICOEnded() constant returns (bool _ended) {\n', '        return block.number >= icoEndBlock;\n', '    }\n', '\n', '    modifier onlyDuringICO {\n', '        require(block.number >= icoStartBlock && block.number <= icoEndBlock); _;\n', '    }\n', '\n', '    modifier onlyAfterICO {\n', '        require(block.number > icoEndBlock); _;\n', '    }\n', '}\n', '\n', '\n', 'contract PersianTokenICO is TokenICO {\n', '\n', '    function PersianTokenICO(uint256 _icoStartBlock, uint256 _icoEndBlock) {\n', '        icoStartBlock = _icoStartBlock;\n', '        icoEndBlock = _icoEndBlock;\n', '    }\n', '  \n', '    function () onlyDuringICO payable {\n', '        totalContributions = safeAdd(totalContributions, msg.value);\n', '        contributions[msg.sender] = safeAdd(contributions[msg.sender], msg.value);\n', '        Contributed(msg.sender, msg.value, estimateBalanceOf(msg.sender));\n', '    }\n', '\n', '}']
