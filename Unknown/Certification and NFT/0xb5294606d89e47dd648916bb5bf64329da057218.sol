['pragma solidity ^0.4.13;\n', '\n', '\n', '/**\n', ' * Base contract for work orders on the Provide platform.\n', ' */\n', 'contract ProvideWorkOrder {\n', '  using SafeMath for uint;\n', '\n', '  /** Status of the work order contract. **/\n', '  enum Status { Pending, InProgress, Completed, Paid }\n', '\n', '  /** Provide platform robot. */\n', '  address public prvd;\n', '\n', '  /** Provide platform wallet where payment amounts owed to providers are escrowed. */\n', '  address public paymentEscrow;\n', '\n', '  /** Peer requesting and purchasing service. */\n', '  address public peer;\n', '\n', '  /** Peer providing service; compensated in PRVD tokens. */\n', '  address public provider;\n', '\n', '  /** Provide platform work order identifier (UUIDv4). */\n', '  uint128 public identifier;\n', '\n', '  /** Current status of the work order contract. **/\n', '  Status public status;\n', '\n', '  /** Total amount of Provide (PRVD) tokens payable to provider, expressed in wei. */\n', '  uint256 public amount;\n', '\n', '  /** Encoded transaction details. */\n', '  string public details;\n', '\n', '  /** Emitted when the work order has been started. */\n', '  event WorkOrderStarted(uint128 _identifier);\n', '\n', '  /** Emitted when the work order has been completed. */\n', '  event WorkOrderCompleted(uint128 _identifier, uint256 _amount, string _details);\n', '\n', '  /** Emitted when the transaction has been completed. */\n', '  event TransactionCompleted(uint128 _identifier, uint256 _paymentAmount, uint256 feeAmount, string _details);\n', '\n', '  /**\n', '   * @param _prvd Provide platform robot contract address\n', '   * @param _paymentEscrow Provide platform wallet where payment amounts owed to providers are escrowed\n', '   * @param _peer Address of party purchasing services\n', '   * @param _identifier Provide platform work order identifier (UUIDv4)\n', '   */\n', '  function ProvideWorkOrder(\n', '    address _prvd,\n', '    address _paymentEscrow,\n', '    address _peer,\n', '    uint128 _identifier\n', '  ) {\n', '    if (_prvd == 0x0) revert();\n', '    if (_paymentEscrow == 0x0) revert();\n', '    if (_peer == 0x0) revert();\n', '\n', '    prvd = _prvd;\n', '    paymentEscrow = _paymentEscrow;\n', '    peer = _peer;\n', '    identifier = _identifier;\n', '\n', '    status = Status.Pending;\n', '  }\n', '\n', '  /**\n', '   * Set the address of the party providing service and start the work order.\n', '   * @param _provider Address of the party providing service\n', '   */\n', '  function start(address _provider) public onlyPrvd onlyPending {\n', '    if (provider != 0x0) revert();\n', '    provider = _provider;\n', '    status = Status.InProgress;\n', '    WorkOrderStarted(identifier);\n', '  }\n', '\n', '  /**\n', '   * Complete the work order.\n', '   * @param _amount Total amount of Provide (PRVD) tokens payable to provider, expressed in wei\n', '   * @param _details Encoded transaction details\n', '   */\n', '  function complete(uint256 _amount, string _details) public onlyProvider onlyInProgress {\n', '    amount = _amount;\n', '    details = _details;\n', '    status = Status.Completed;\n', '    WorkOrderCompleted(identifier, amount, details);\n', '  }\n', '\n', '  /**\n', '   * Complete the transaction by remitting the exact amount of PRVD tokens due.\n', '   * The service provider&#39;s payment is escrowed in the payment escrow wallet\n', '   * and the platform fee is remitted to Provide.\n', '   *\n', '   * Partial payments will be rejected.\n', '   */\n', '  function completeTransaction() public onlyPurchaser onlyCompleted payable {\n', '    if (msg.value != amount) revert();\n', '\n', '    uint paymentAmount = msg.value.mul(uint(95).div(100));\n', '    paymentEscrow.transfer(paymentAmount);\n', '\n', '    uint feeAmount = msg.value.sub(paymentAmount);\n', '    prvd.transfer(feeAmount);\n', '\n', '    status = Status.Paid;\n', '    TransactionCompleted(identifier, paymentAmount, feeAmount, details);\n', '  }\n', '\n', '  /**\n', '   * Only allow the Provide platform robot to execute a contract function.\n', '   */\n', '  modifier onlyPrvd() {\n', '    if (msg.sender != prvd) revert();\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * Only allow the peer purchasing services to execute a contract function.\n', '   */\n', '  modifier onlyPurchaser() {\n', '    if (msg.sender != peer) revert();\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * Only allow the service provider to execute a contract function.\n', '   */\n', '  modifier onlyProvider() {\n', '    if (msg.sender != provider) revert();\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * Only allow execution of a contract function if the work order is pending.\n', '   */\n', '  modifier onlyPending() {\n', '    if (uint(status) != uint(Status.Pending)) revert();\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * Only allow execution of a contract function if the work order is started.\n', '   */\n', '  modifier onlyInProgress() {\n', '    if (uint(status) != uint(Status.InProgress)) revert();\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * Only allow execution of a contract function if the work order is complete.\n', '   */\n', '  modifier onlyCompleted() {\n', '    if (uint(status) != uint(Status.Completed)) revert();\n', '    _;\n', '  }\n', '}\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    return a / b;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function assertTrue(bool val) internal {\n', '    assert(val);\n', '  }\n', '\n', '  function assertFalse(bool val) internal {\n', '    assert(!val);\n', '  }\n', '}']