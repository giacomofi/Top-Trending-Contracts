['pragma solidity ^0.4.13;\n', '\n', '//inspired by multiple tokensale contracts\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'contract SafeMath {\n', '  function safeMul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint a, uint b) internal returns (uint) {\n', '    assert(b > 0);\n', '    uint c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    require(assertion);\n', '  }\n', '}\n', '\n', '/// @dev The token controller contract must implement these functions\n', 'contract Controller {\n', '    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n', '    /// @param _owner The address that sent the ether to create tokens\n', '    /// @return True if the ether is accepted, false if it throws\n', '    function proxyPayment(address _owner) payable returns(bool);\n', '\n', '    /// @notice Notifies the controller about a token transfer allowing the\n', '    ///  controller to react if desired\n', '    /// @param _from The origin of the transfer\n', '    /// @param _to The destination of the transfer\n', '    /// @param _amount The amount of the transfer\n', '    /// @return False if the controller does not authorize the transfer\n', '    function onTransfer(address _from, address _to, uint _amount) returns(bool);\n', '\n', '    /// @notice Notifies the controller about an approval allowing the\n', '    ///  controller to react if desired\n', '    /// @param _owner The address that calls `approve()`\n', '    /// @param _spender The spender in the `approve()` call\n', '    /// @param _amount The amount in the `approve()` call\n', '    /// @return False if the controller does not authorize the approval\n', '    function onApprove(address _owner, address _spender, uint _amount)\n', '        returns(bool);\n', '}\n', '\n', "// inspired by Zeppelin's Vested Token deriving MiniMeToken\n", '\n', '// @dev MiniMeIrrevocableVestedToken is a derived version of MiniMeToken adding the\n', '// ability to createTokenGrants which are basically a transfer that limits the\n', '// receiver of the tokens.\n', '\n', 'contract Controlled {\n', '    /// @notice The address of the controller is the only address that can call\n', '    ///  a function with this modifier\n', '    modifier onlyController{ require(msg.sender==controller); _; }\n', '\n', '\n', '    address public controller;\n', '\n', '    function Controlled() { controller = msg.sender;}\n', '\n', '    /// @notice Changes the controller of the contract\n', '    /// @param _newController The new controller of the contract\n', '    function changeController(address _newController) onlyController {\n', '        controller = _newController;\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract ApproveAndCallReceiver {\n', '    function receiveApproval(address _from, uint256 _amount, address _token, bytes _data);\n', '}\n', '\n', '/*\n', ' * ERC20 interface\n', ' * see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '  function totalSupply() constant returns (uint);\n', '  function balanceOf(address who) constant returns (uint);\n', '  function allowance(address owner, address spender) constant returns (uint);\n', '\n', '  function transfer(address to, uint value) returns (bool ok);\n', '  function transferFrom(address from, address to, uint value) returns (bool ok);\n', '  function approve(address spender, uint value) returns (bool ok);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '\n', 'contract MiniMeToken is ERC20, Controlled {\n', "    string public name;                //The Token's name: e.g. DigixDAO Tokens\n", '    uint8 public decimals;             //Number of decimals of the smallest unit\n', '    string public symbol;              //An identifier: e.g. REP\n', "    string public version = 'MMT_0.1'; //An arbitrary versioning scheme\n", '\n', '\n', '    /// @dev `Checkpoint` is the structure that attaches a block number to a\n', '    ///  given value, the block number attached is the one that last changed the\n', '    ///  value\n', '    struct  Checkpoint {\n', '\n', '        // `fromBlock` is the block number that the value was generated from\n', '        uint128 fromBlock;\n', '\n', '        // `value` is the amount of tokens at a specific block number\n', '        uint128 value;\n', '    }\n', '\n', '    // `parentToken` is the Token address that was cloned to produce this token;\n', '    //  it will be 0x0 for a token that was not cloned\n', '    MiniMeToken public parentToken;\n', '\n', '    // `parentSnapShotBlock` is the block number from the Parent Token that was\n', '    //  used to determine the initial distribution of the Clone Token\n', '    uint public parentSnapShotBlock;\n', '\n', '    // `creationBlock` is the block number that the Clone Token was created\n', '    uint public creationBlock;\n', '\n', '    // `balances` is the map that tracks the balance of each address, in this\n', '    //  contract when the balance changes the block number that the change\n', '    //  occurred is also included in the map\n', '    mapping (address => Checkpoint[]) balances;\n', '\n', '    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    // Tracks the history of the `totalSupply` of the token\n', '    Checkpoint[] totalSupplyHistory;\n', '\n', '    // Flag that determines if the token is transferable or not.\n', '    bool public transfersEnabled;\n', '\n', '    // The factory used to create new clone tokens\n', '    MiniMeTokenFactory public tokenFactory;\n', '\n', '////////////////\n', '// Constructor\n', '////////////////\n', '\n', '    /// @notice Constructor to create a MiniMeToken\n', '    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\n', '    ///  will create the Clone token contracts, the token factory needs to be\n', '    ///  deployed first\n', '    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\n', '    ///  new token\n', '    /// @param _parentSnapShotBlock Block of the parent token that will\n', '    ///  determine the initial distribution of the clone token, set to 0 if it\n', '    ///  is a new token\n', '    /// @param _tokenName Name of the new token\n', '    /// @param _decimalUnits Number of decimals of the new token\n', '    /// @param _tokenSymbol Token Symbol for the new token\n', '    /// @param _transfersEnabled If true, tokens will be able to be transferred\n', '    function MiniMeToken(\n', '        address _tokenFactory,\n', '        address _parentToken,\n', '        uint _parentSnapShotBlock,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol,\n', '        bool _transfersEnabled\n', '    ) {\n', '        tokenFactory = MiniMeTokenFactory(_tokenFactory);\n', '        name = _tokenName;                                 // Set the name\n', '        decimals = _decimalUnits;                          // Set the decimals\n', '        symbol = _tokenSymbol;                             // Set the symbol\n', '        parentToken = MiniMeToken(_parentToken);\n', '        parentSnapShotBlock = _parentSnapShotBlock;\n', '        transfersEnabled = _transfersEnabled;\n', '        creationBlock = block.number;\n', '    }\n', '\n', '\n', '///////////////////\n', '// ERC20 Methods\n', '///////////////////\n', '\n', '    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _amount) returns (bool success) {\n', '        require (transfersEnabled);\n', '    ////if (!transfersEnabled) throw;\n', '        return doTransfer(msg.sender, _to, _amount);\n', '    }\n', '\n', '    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n', '    ///  is approved by `_from`\n', '    /// @param _from The address holding the tokens being transferred\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return True if the transfer was successful\n', '    function transferFrom(address _from, address _to, uint256 _amount\n', '    ) returns (bool success) {\n', '\n', '        // The controller of this contract can move tokens around at will,\n', '        //  this is important to recognize! Confirm that you trust the\n', '        //  controller of this contract, which in most situations should be\n', '        //  another open source smart contract or 0x0\n', '        if (msg.sender != controller) {\n', '            require (transfersEnabled);\n', '\n', '            ////if (!transfersEnabled) throw;\n', '\n', '            // The standard ERC 20 transferFrom functionality\n', '            assert (allowed[_from][msg.sender]>=_amount);\n', '\n', '            ////if (allowed[_from][msg.sender] < _amount) throw;\n', '            allowed[_from][msg.sender] -= _amount;\n', '        }\n', '        return doTransfer(_from, _to, _amount);\n', '    }\n', '\n', '    /// @dev This is the actual transfer function in the token contract, it can\n', '    ///  only be called by other functions in this contract.\n', '    /// @param _from The address holding the tokens being transferred\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return True if the transfer was successful\n', '    function doTransfer(address _from, address _to, uint _amount\n', '    ) internal returns(bool) {\n', '           if (_amount == 0) {\n', '               return true;\n', '           }\n', '\n', '           // Do not allow transfer to 0x0 or the token contract itself\n', '           require((_to!=0)&&(_to!=address(this)));\n', '\n', '           //// if ((_to == 0) || (_to == address(this))) throw;\n', '\n', '           // If the amount being transfered is more than the balance of the\n', '           //  account the transfer returns false\n', '\n', '           var previousBalanceFrom = balanceOfAt(_from, block.number);\n', '           assert(previousBalanceFrom >= _amount);\n', '\n', '           // Alerts the token controller of the transfer\n', '           if (isContract(controller)) {\n', '               assert(Controller(controller).onTransfer(_from,_to,_amount));\n', '\n', '           }\n', '\n', '           // First update the balance array with the new value for the address\n', '           //  sending the tokens\n', '           updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\n', '\n', '           // Then update the balance array with the new value for the address\n', '           //  receiving the tokens\n', '           \n', '           var previousBalanceTo = balanceOfAt(_to, block.number);\n', '           assert(previousBalanceTo+_amount>=previousBalanceTo); \n', '           \n', '           //// if (previousBalanceTo + _amount < previousBalanceTo) throw; // Check for overflow\n', '           updateValueAtNow(balances[_to], previousBalanceTo + _amount);\n', '\n', '           // An event to make the transfer easy to find on the blockchain\n', '           Transfer(_from, _to, _amount);\n', '\n', '           return true;\n', '    }\n', '\n', "    /// @param _owner The address that's balance is being requested\n", '    /// @return The balance of `_owner` at the current block\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balanceOfAt(_owner, block.number);\n', '    }\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n', '    ///  its behalf. This is a modified version of the ERC20 approve function\n', '    ///  to be a little bit safer\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _amount The amount of tokens to be approved for transfer\n', '    /// @return True if the approval was successful\n', '    function approve(address _spender, uint256 _amount) returns (bool success) {\n', '        require(transfersEnabled);\n', '\n', '        // To change the approve amount you first have to reduce the addresses´\n', '        //  allowance to zero by calling `approve(_spender,0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '\n', '        require((_amount==0)||(allowed[msg.sender][_spender]==0));\n', '\n', '        // Alerts the token controller of the approve function call\n', '        if (isContract(controller)) {\n', '            assert(Controller(controller).onApprove(msg.sender,_spender,_amount));\n', '\n', '            //  if (!Controller(controller).onApprove(msg.sender, _spender, _amount))\n', '            //        throw;\n', '        }\n', '\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    /// @dev This function makes it easy to read the `allowed[]` map\n', '    /// @param _owner The address of the account that owns the token\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens of _owner that _spender is allowed\n', '    ///  to spend\n', '    function allowance(address _owner, address _spender\n', '    ) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n', '    ///  its behalf, and then a function is triggered in the contract that is\n', '    ///  being approved, `_spender`. This allows users to use their tokens to\n', '    ///  interact with contracts in one function call instead of two\n', '    /// @param _spender The address of the contract able to transfer the tokens\n', '    /// @param _amount The amount of tokens to be approved for transfer\n', '    /// @return True if the function call was successful\n', '    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n', '    ) returns (bool success) {\n', '        approve(_spender, _amount);\n', '\n', "        // This portion is copied from ConsenSys's Standard Token Contract. It\n", '        //  calls the receiveApproval function that is part of the contract that\n', '        //  is being approved (`_spender`). The function should look like:\n', '        //  `receiveApproval(address _from, uint256 _amount, address\n', '        //  _tokenContract, bytes _extraData)` It is assumed that the call\n', '        //  *should* succeed, otherwise the plain vanilla approve would be used\n', '        ApproveAndCallReceiver(_spender).receiveApproval(\n', '           msg.sender,\n', '           _amount,\n', '           this,\n', '           _extraData\n', '        );\n', '        return true;\n', '    }\n', '\n', '    /// @dev This function makes it easy to get the total number of tokens\n', '    /// @return The total number of tokens\n', '    function totalSupply() constant returns (uint) {\n', '        return totalSupplyAt(block.number);\n', '    }\n', '\n', '\n', '////////////////\n', '// Query balance and totalSupply in History\n', '////////////////\n', '\n', '    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @param _blockNumber The block number when the balance is queried\n', '    /// @return The balance at `_blockNumber`\n', '    function balanceOfAt(address _owner, uint _blockNumber) constant\n', '        returns (uint) {\n', '\n', '        // These next few lines are used when the balance of the token is\n', '        //  requested before a check point was ever created for this token, it\n', '        //  requires that the `parentToken.balanceOfAt` be queried at the\n', '        //  genesis block for that token as this contains initial balance of\n', '        //  this token\n', '        if ((balances[_owner].length == 0)\n', '            || (balances[_owner][0].fromBlock > _blockNumber)) {\n', '            if (address(parentToken) != 0) {\n', '                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\n', '            } else {\n', '                // Has no parent\n', '                return 0;\n', '            }\n', '\n', '        // This will return the expected balance during normal situations\n', '        } else {\n', '            return getValueAt(balances[_owner], _blockNumber);\n', '        }\n', '    }\n', '\n', '    /// @notice Total amount of tokens at a specific `_blockNumber`.\n', '    /// @param _blockNumber The block number when the totalSupply is queried\n', '    /// @return The total amount of tokens at `_blockNumber`\n', '    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n', '\n', '        // These next few lines are used when the totalSupply of the token is\n', '        //  requested before a check point was ever created for this token, it\n', '        //  requires that the `parentToken.totalSupplyAt` be queried at the\n', '        //  genesis block for this token as that contains totalSupply of this\n', '        //  token at this block number.\n', '        if ((totalSupplyHistory.length == 0)\n', '            || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n', '            if (address(parentToken) != 0) {\n', '                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\n', '            } else {\n', '                return 0;\n', '            }\n', '\n', '        // This will return the expected totalSupply during normal situations\n', '        } else {\n', '            return getValueAt(totalSupplyHistory, _blockNumber);\n', '        }\n', '    }\n', '\n', '    function min(uint a, uint b) internal returns (uint) {\n', '      return a < b ? a : b;\n', '    }\n', '\n', '////////////////\n', '// Clone Token Method\n', '////////////////\n', '\n', '    /// @notice Creates a new clone token with the initial distribution being\n', '    ///  this token at `_snapshotBlock`\n', '    /// @param _cloneTokenName Name of the clone token\n', '    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\n', '    /// @param _cloneTokenSymbol Symbol of the clone token\n', '    /// @param _snapshotBlock Block when the distribution of the parent token is\n', '    ///  copied to set the initial distribution of the new clone token;\n', '    ///  if the block is higher than the actual block, the current block is used\n', '    /// @param _transfersEnabled True if transfers are allowed in the clone\n', '    /// @return The address of the new MiniMeToken Contract\n', '    function createCloneToken(\n', '        string _cloneTokenName,\n', '        uint8 _cloneDecimalUnits,\n', '        string _cloneTokenSymbol,\n', '        uint _snapshotBlock,\n', '        bool _transfersEnabled\n', '        ) returns(address) {\n', '        if (_snapshotBlock > block.number) _snapshotBlock = block.number;\n', '        MiniMeToken cloneToken = tokenFactory.createCloneToken(\n', '            this,\n', '            _snapshotBlock,\n', '            _cloneTokenName,\n', '            _cloneDecimalUnits,\n', '            _cloneTokenSymbol,\n', '            _transfersEnabled\n', '            );\n', '\n', '        cloneToken.changeController(msg.sender);\n', '\n', '        // An event to make the token easy to find on the blockchain\n', '        NewCloneToken(address(cloneToken), _snapshotBlock);\n', '        return address(cloneToken);\n', '    }\n', '\n', '////////////////\n', '// Generate and destroy tokens\n', '////////////////\n', '\n', '    /// @notice Generates `_amount` tokens that are assigned to `_owner`\n', '    /// @param _owner The address that will be assigned the new tokens\n', '    /// @param _amount The quantity of tokens generated\n', '    /// @return True if the tokens are generated correctly\n', '    function generateTokens(address _owner, uint _amount\n', '    ) onlyController returns (bool) {\n', '        uint curTotalSupply = getValueAt(totalSupplyHistory, block.number);\n', '        assert(curTotalSupply+_amount>=curTotalSupply);\n', '        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n', '        var previousBalanceTo = balanceOf(_owner);\n', '        assert(previousBalanceTo+_amount>=previousBalanceTo);\n', '        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n', '        Transfer(0, _owner, _amount);\n', '        return true;\n', '    }\n', '\n', '\n', '    /// @notice Burns `_amount` tokens from `_owner`\n', '    /// @param _owner The address that will lose the tokens\n', '    /// @param _amount The quantity of tokens to burn\n', '    /// @return True if the tokens are burned correctly\n', '    function destroyTokens(address _owner, uint _amount\n', '    ) onlyController returns (bool) {\n', '        uint curTotalSupply = getValueAt(totalSupplyHistory, block.number);\n', '        assert(curTotalSupply >= _amount);\n', '        \n', '        //// if (curTotalSupply < _amount) throw;\n', '\n', '        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n', '        var previousBalanceFrom = balanceOf(_owner);\n', '        assert(previousBalanceFrom >=_amount);\n', '\n', '        //// if (previousBalanceFrom < _amount) throw;\n', '        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n', '        Transfer(_owner, 0, _amount);\n', '        return true;\n', '    }\n', '\n', '////////////////\n', '// Enable tokens transfers\n', '////////////////\n', '\n', '\n', '    /// @notice Enables token holders to transfer their tokens freely if true\n', '    /// @param _transfersEnabled True if transfers are allowed in the clone\n', '    function enableTransfers(bool _transfersEnabled) onlyController {\n', '        transfersEnabled = _transfersEnabled;\n', '    }\n', '\n', '////////////////\n', '// Internal helper functions to query and set a value in a snapshot array\n', '////////////////\n', '\n', '    /// @dev `getValueAt` retrieves the number of tokens at a given block number\n', '    /// @param checkpoints The history of values being queried\n', '    /// @param _block The block number to retrieve the value at\n', '    /// @return The number of tokens being queried\n', '    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n', '    ) constant internal returns (uint) {\n', '        if (checkpoints.length == 0) return 0;\n', '\n', '        // Shortcut for the actual value\n', '        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\n', '            return checkpoints[checkpoints.length-1].value;\n', '        if (_block < checkpoints[0].fromBlock) return 0;\n', '\n', '        // Binary search of the value in the array\n', '        uint min = 0;\n', '        uint max = checkpoints.length-1;\n', '        while (max > min) {\n', '            uint mid = (max + min + 1)/ 2;\n', '            if (checkpoints[mid].fromBlock<=_block) {\n', '                min = mid;\n', '            } else {\n', '                max = mid-1;\n', '            }\n', '        }\n', '        return checkpoints[min].value;\n', '    }\n', '\n', '    /// @dev `updateValueAtNow` used to update the `balances` map and the\n', '    ///  `totalSupplyHistory`\n', '    /// @param checkpoints The history of data being updated\n', '    /// @param _value The new number of tokens\n', '    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\n', '    ) internal  {\n', '        if ((checkpoints.length == 0)\n', '        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\n', '               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\n', '               newCheckPoint.fromBlock =  uint128(block.number);\n', '               newCheckPoint.value = uint128(_value);\n', '           } else {\n', '               Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\n', '               oldCheckPoint.value = uint128(_value);\n', '           }\n', '    }\n', '\n', '    /// @dev Internal function to determine if an address is a contract\n', '    /// @param _addr The address being queried\n', '    /// @return True if `_addr` is a contract\n', '    function isContract(address _addr) constant internal returns(bool) {\n', '        uint size;\n', '        if (_addr == 0) return false;\n', '        assembly {\n', '            size := extcodesize(_addr)\n', '        }\n', '        return size>0;\n', '    }\n', '\n', "    /// @notice The fallback function: If the contract's controller has not been\n", '    ///  set to 0, then the `proxyPayment` method is called which relays the\n', '    ///  ether and creates tokens as described in the token controller contract\n', '    function ()  payable {\n', '        require(isContract(controller));\n', '        assert(Controller(controller).proxyPayment.value(msg.value)(msg.sender));\n', '    }\n', '\n', '\n', '////////////////\n', '// Events\n', '////////////////\n', '    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\n', '}\n', '\n', '\n', '////////////////\n', '// MiniMeTokenFactory\n', '////////////////\n', '\n', '/// @dev This contract is used to generate clone contracts from a contract.\n', '///  In solidity this is the way to create a contract from a contract of the\n', '///  same class\n', 'contract MiniMeTokenFactory {\n', '\n', '    /// @notice Update the DApp by creating a new token with new functionalities\n', '    ///  the msg.sender becomes the controller of this clone token\n', '    /// @param _parentToken Address of the token being cloned\n', '    /// @param _snapshotBlock Block of the parent token that will\n', '    ///  determine the initial distribution of the clone token\n', '    /// @param _tokenName Name of the new token\n', '    /// @param _decimalUnits Number of decimals of the new token\n', '    /// @param _tokenSymbol Token Symbol for the new token\n', '    /// @param _transfersEnabled If true, tokens will be able to be transferred\n', '    /// @return The address of the new token contract\n', '    function createCloneToken(\n', '        address _parentToken,\n', '        uint _snapshotBlock,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol,\n', '        bool _transfersEnabled\n', '    ) returns (MiniMeToken) {\n', '        MiniMeToken newToken = new MiniMeToken(\n', '            this,\n', '            _parentToken,\n', '            _snapshotBlock,\n', '            _tokenName,\n', '            _decimalUnits,\n', '            _tokenSymbol,\n', '            _transfersEnabled\n', '            );\n', '\n', '        newToken.changeController(msg.sender);\n', '        return newToken;\n', '    }\n', '}\n', '\n', 'contract MiniMeIrrevocableVestedToken is MiniMeToken, SafeMath {\n', '\n', '  uint256 MAX_GRANTS_PER_ADDRESS = 20;\n', '\n', '  // Keep the struct at 3 sstores ( total value  20+32+24 =76 bytes)\n', '  struct TokenGrant {\n', '    address granter;  // 20 bytes\n', '    uint256 value;    // 32 bytes\n', '    uint64 cliff;\n', '    uint64 vesting;\n', '    uint64 start;     // 3*8 =24 bytes\n', '  }\n', '\n', '  event NewTokenGrant(address indexed from, address indexed to, uint256 value, uint64 start, uint64 cliff, uint64 vesting);\n', '\n', '  mapping (address => TokenGrant[]) public grants;\n', '\n', '  mapping (address => bool) canCreateGrants;\n', '  address vestingWhitelister;\n', '\n', '  modifier canTransfer(address _sender, uint _value) {\n', '    require(_value<=spendableBalanceOf(_sender));\n', '    _;\n', '  }\n', '\n', '  modifier onlyVestingWhitelister {\n', '    require(msg.sender==vestingWhitelister);\n', '    _;\n', '  }\n', '\n', '  function MiniMeIrrevocableVestedToken (\n', '      address _tokenFactory,\n', '      address _parentToken,\n', '      uint _parentSnapShotBlock,\n', '      string _tokenName,\n', '      uint8 _decimalUnits,\n', '      string _tokenSymbol,\n', '      bool _transfersEnabled\n', '  ) MiniMeToken(_tokenFactory, _parentToken, _parentSnapShotBlock, _tokenName, _decimalUnits, _tokenSymbol, _transfersEnabled) {\n', '    vestingWhitelister = msg.sender;\n', '    doSetCanCreateGrants(vestingWhitelister, true);\n', '  }\n', '\n', '  // @dev Checks modifier and allows transfer if tokens are not locked.\n', '  function transfer(address _to, uint _value)\n', '           canTransfer(msg.sender, _value)\n', '           public\n', '           returns (bool success) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _value)\n', '           canTransfer(_from, _value)\n', '           public\n', '           returns (bool success) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function spendableBalanceOf(address _holder) constant public returns (uint) {\n', '    return transferableTokens(_holder, uint64(now));\n', '  }\n', '\n', '  // main func for token grant\n', '\n', '  function grantVestedTokens(\n', '    address _to,\n', '    uint256 _value,\n', '    uint64 _start,\n', '    uint64 _cliff,\n', '    uint64 _vesting) public {\n', '\n', '    // Check start, cliff and vesting are properly order to ensure correct functionality of the formula.\n', '\n', '    require(_cliff >= _start && _vesting >= _cliff);\n', '    \n', '    require(tokenGrantsCount(_to)<=MAX_GRANTS_PER_ADDRESS); //// To prevent a user being spammed and have his balance locked (out of gas attack when calculating vesting).\n', '\n', '    assert(canCreateGrants[msg.sender]);\n', '\n', '\n', '    TokenGrant memory grant = TokenGrant(msg.sender, _value, _cliff, _vesting, _start);\n', '    grants[_to].push(grant);\n', '\n', '    assert(transfer(_to,_value));\n', '\n', '    NewTokenGrant(msg.sender, _to, _value, _cliff, _vesting, _start);\n', '  }\n', '\n', '  function setCanCreateGrants(address _addr, bool _allowed)\n', '           onlyVestingWhitelister public {\n', '    doSetCanCreateGrants(_addr, _allowed);\n', '  }\n', '\n', '  function doSetCanCreateGrants(address _addr, bool _allowed)\n', '           internal {\n', '    canCreateGrants[_addr] = _allowed;\n', '  }\n', '\n', '  function changeVestingWhitelister(address _newWhitelister) onlyVestingWhitelister public {\n', '    doSetCanCreateGrants(vestingWhitelister, false);\n', '    vestingWhitelister = _newWhitelister;\n', '    doSetCanCreateGrants(vestingWhitelister, true);\n', '  }\n', '\n', '  function tokenGrantsCount(address _holder) constant public returns (uint index) {\n', '    return grants[_holder].length;\n', '  }\n', '\n', '  function tokenGrant(address _holder, uint _grantId) constant public returns (address granter, uint256 value, uint256 vested, uint64 start, uint64 cliff, uint64 vesting) {\n', '    TokenGrant storage grant = grants[_holder][_grantId];\n', '\n', '    granter = grant.granter;\n', '    value = grant.value;\n', '    start = grant.start;\n', '    cliff = grant.cliff;\n', '    vesting = grant.vesting;\n', '\n', '    vested = vestedTokens(grant, uint64(now));\n', '  }\n', '\n', '  function vestedTokens(TokenGrant grant, uint64 time) internal constant returns (uint256) {\n', '    return calculateVestedTokens(\n', '      grant.value,\n', '      uint256(time),\n', '      uint256(grant.start),\n', '      uint256(grant.cliff),\n', '      uint256(grant.vesting)\n', '    );\n', '  }\n', '\n', '  //  transferableTokens\n', '  //   |                         _/--------   NonVestedTokens\n', '  //   |                       _/\n', '  //   |                     _/\n', '  //   |                   _/\n', '  //   |                 _/\n', '  //   |                /\n', '  //   |              .|\n', '  //   |            .  |\n', '  //   |          .    |\n', '  //   |        .      |\n', '  //   |      .        |\n', '  //   |    .          |\n', '  //   +===+===========+---------+----------> time\n', '  //      Start       Cliff    Vesting\n', '\n', '  function calculateVestedTokens(\n', '    uint256 tokens,\n', '    uint256 time,\n', '    uint256 start,\n', '    uint256 cliff,\n', '    uint256 vesting) internal constant returns (uint256)\n', '    {\n', '\n', '    // Shortcuts for before cliff and after vesting cases.\n', '    if (time < cliff) return 0;\n', '    if (time >= vesting) return tokens;\n', '\n', '    // Interpolate all vested tokens.\n', '    // As before cliff the shortcut returns 0, we can use just this function to\n', '    // calculate it.\n', '\n', '    // vestedTokens = tokens * (time - start) / (vesting - start)\n', '    uint256 vestedTokens = safeDiv(\n', '                                  safeMul(\n', '                                    tokens,\n', '                                    safeSub(time, start)\n', '                                    ),\n', '                                  safeSub(vesting, start)\n', '                                  );\n', '\n', '    return vestedTokens;\n', '  }\n', '\n', '  function nonVestedTokens(TokenGrant grant, uint64 time) internal constant returns (uint256) {\n', '    return safeSub(grant.value, vestedTokens(grant, time));\n', '  }\n', '\n', '  // @dev The date in which all tokens are transferable for the holder\n', '  // Useful for displaying purposes (not used in any logic calculations)\n', '  function lastTokenIsTransferableDate(address holder) constant public returns (uint64 date) {\n', '    date = uint64(now);\n', '    uint256 grantIndex = tokenGrantsCount(holder);\n', '    for (uint256 i = 0; i < grantIndex; i++) {\n', '      date = max64(grants[holder][i].vesting, date);\n', '    }\n', '    return date;\n', '  }\n', '\n', '  // @dev How many tokens can a holder transfer at a point in time\n', '  function transferableTokens(address holder, uint64 time) constant public returns (uint256) {\n', '    uint256 grantIndex = tokenGrantsCount(holder);\n', '\n', '    if (grantIndex == 0) return balanceOf(holder); // shortcut for holder without grants\n', '\n', '    // Iterate through all the grants the holder has, and add all non-vested tokens\n', '    uint256 nonVested = 0;\n', '    for (uint256 i = 0; i < grantIndex; i++) {\n', '      nonVested = safeAdd(nonVested, nonVestedTokens(grants[holder][i], time));\n', '    }\n', '\n', '    // Balance - totalNonVested is the amount of tokens a holder can transfer at any given time\n', '    return safeSub(balanceOf(holder), nonVested);\n', '  }\n', '}\n', '\n', '\n', 'contract GNR is MiniMeIrrevocableVestedToken {\n', '  // @dev GNR constructor just parametrizes the MiniMeIrrevocableVestedToken constructor\n', '  function GNR(\n', '    address _tokenFactory\n', '  ) MiniMeIrrevocableVestedToken(\n', '    _tokenFactory,\n', '    0x0,                    // no parent token\n', '    0,                      // no snapshot block number from parent\n', '    "Genaro Network Token", // Token name\n', '    9,                     // Decimals\n', '    "GNR",                  // Symbol\n', '    true                    // Enable transfers\n', '    ) {}\n', '}\n', '\n', '/*\n', '\n', '@notice The GRPlaceholder contract will take control over the GNR after the sale\n', '        is finalized and before the Genaro Network is deployed.\n', '\n', '        The contract allows for GNR transfers and transferFrom and implements the\n', '        logic for transfering control of the token to the network when the sale\n', '        asks it to do so.\n', '*/\n', '\n', 'contract GRPlaceholder is Controller {\n', '  address public sale;\n', '  GNR public token;\n', '\n', '  function GRPlaceholder(address _sale, address _gnr) {\n', '    sale = _sale;\n', '    token = GNR(_gnr);\n', '  }\n', '\n', '  function changeController(address network) public {\n', '    require(msg.sender == sale);\n', '    token.changeController(network);\n', '    suicide(network);\n', '  }\n', '\n', '  // In between the sale and the network. Default settings for allowing token transfers.\n', '  function proxyPayment(address) payable public returns (bool) {\n', '    return false;\n', '  }\n', '\n', '  function onTransfer(address, address, uint) public returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  function onApprove(address, address, uint) public returns (bool) {\n', '    return true;\n', '  }\n', '}\n', '\n', '// @dev Contract to hold sale raised funds during the sale period.\n', '// Prevents attack in which the Genaro Multisig sends raised ether\n', '// to the sale contract to mint tokens to itself, and getting the\n', '// funds back immediately.\n', '\n', 'contract AbstractSale {\n', '  function saleFinalized() constant returns (bool);\n', '}\n', '\n', 'contract SaleWallet {\n', '  // Public variables\n', '  address public multisig;\n', '  uint public finalBlock;\n', '  AbstractSale public tokenSale;\n', '\n', '  // @dev Constructor initializes public variables\n', '  // @param _multisig The address of the multisig that will receive the funds\n', '  // @param _finalBlock Block after which the multisig can request the funds\n', '  function SaleWallet(address _multisig, uint _finalBlock, address _tokenSale) {\n', '    multisig = _multisig;\n', '    finalBlock = _finalBlock;\n', '    tokenSale = AbstractSale(_tokenSale);\n', '  }\n', '\n', '  // @dev Receive all sent funds without any further logic\n', '  function () public payable {}\n', '\n', '  // @dev Withdraw function sends all the funds to the wallet if conditions are correct\n', '  function withdraw() public {\n', '    require(msg.sender == multisig);  // Only the multisig can request it\n', '    if (block.number > finalBlock) return doWithdraw();      // Allow after the final block\n', '    if (tokenSale.saleFinalized()) return doWithdraw();      // Allow when sale is finalized\n', '  }\n', '\n', '  function doWithdraw() internal {\n', '    require(multisig.send(this.balance));\n', '  }\n', '}\n', '\n', '\n', 'contract GenaroTokenSale is Controlled, Controller, SafeMath {\n', '    uint public initialBlock;             // Block number in which the sale starts. Inclusive. sale will be opened at initial block.\n', '    uint public finalBlock;               // Block number in which the sale end. Exclusive, sale will be closed at ends block.\n', '    uint public price;                    // Number of wei-GNR tokens for 1 wei, at the start of the sale (9 decimals) \n', '\n', '    address public genaroDevMultisig;     // The address to hold the funds donated\n', '    bytes32 public capCommitment;\n', '\n', '    uint public totalCollected = 0;               // In wei\n', '    bool public saleStopped = false;              // Has Genaro Dev stopped the sale?\n', '    bool public saleFinalized = false;            // Has Genaro Dev finalized the sale?\n', '\n', '    mapping (address => bool) public activated;   // Address confirmates that wants to activate the sale\n', '\n', '    mapping (address => bool) public whitelist;   // Address consists of whitelist payer\n', '\n', '    GNR public token;                             // The token\n', '    GRPlaceholder public networkPlaceholder;      // The network placeholder\n', '    SaleWallet public saleWallet;                 // Wallet that receives all sale funds\n', '\n', '    uint constant public dust = 1 ether;         // Minimum investment\n', '    uint constant public maxPerPersion = 100 ether;   // Maximum investment per person\n', '\n', '    uint public hardCap = 2888 ether;          // Hard cap for Genaro \n', '\n', '    event NewPresaleAllocation(address indexed holder, uint256 gnrAmount);\n', '    event NewBuyer(address indexed holder, uint256 gnrAmount, uint256 etherAmount);\n', '    event CapRevealed(uint value, uint secret, address revealer);\n', '\n', '/// @dev There are several checks to make sure the parameters are acceptable\n', '/// @param _initialBlock The Block number in which the sale starts\n', '/// @param _finalBlock The Block number in which the sale ends\n', '/// @param _genaroDevMultisig The address that will store the donated funds and manager\n', '/// for the sale\n', '/// @param _price The price for the genaro sale. Price in wei-GNR per wei.\n', '\n', '  function GenaroTokenSale (\n', '      uint _initialBlock,\n', '      uint _finalBlock,\n', '      address _genaroDevMultisig,\n', '      uint256 _price,\n', '      bytes32 _capCommitment\n', '  )\n', '  {\n', '      require(_genaroDevMultisig !=0);\n', '      require(_initialBlock >= getBlockNumber());\n', '      require(_initialBlock < _finalBlock);\n', '\n', '      require(uint(_capCommitment)!=0);\n', '      \n', '\n', '      // Save constructor arguments as global variables\n', '      initialBlock = _initialBlock;\n', '      finalBlock = _finalBlock;\n', '      genaroDevMultisig = _genaroDevMultisig;\n', '      price = _price;\n', '      capCommitment = _capCommitment;\n', '  }\n', '\n', '  // @notice Deploy GNR is called only once to setup all the needed contracts.\n', '  // @param _token: Address of an instance of the GNR token\n', '  // @param _networkPlaceholder: Address of an instance of GNRPlaceholder\n', '  // @param _saleWallet: Address of the wallet receiving the funds of the sale\n', '\n', '  function setGNR(address _token, address _networkPlaceholder, address _saleWallet)\n', '           only(genaroDevMultisig)\n', '           public {\n', '\n', '    require(_token != 0);\n', '    require(_networkPlaceholder != 0);\n', '    require(_saleWallet != 0);\n', '\n', "    // Assert that the function hasn't been called before, as activate will happen at the end\n", '    assert(!activated[this]);\n', '\n', '    token = GNR(_token);\n', '    networkPlaceholder = GRPlaceholder(_networkPlaceholder);\n', '    saleWallet = SaleWallet(_saleWallet);\n', '    \n', '    assert(token.controller() == address(this)); // sale is controller\n', '    assert(networkPlaceholder.sale() ==address(this)); // placeholder has reference to Sale\n', '    assert(networkPlaceholder.token() == address(token)); // placeholder has reference to GNR\n', '    assert(saleWallet.finalBlock() == finalBlock); // final blocks must match\n', '    assert(saleWallet.multisig() == genaroDevMultisig);  // receiving wallet must match\n', '    assert(saleWallet.tokenSale() == address(this));  // watched token sale must be self\n', '\n', '    // Contract activates sale as all requirements are ready\n', '    doActivateSale(this);\n', '  }\n', '\n', '  // @notice Certain addresses need to call the activate function prior to the sale opening block.\n', '  // This proves that they have checked the sale contract is legit, as well as proving\n', '  // the capability for those addresses to interact with the contract.\n', '  function activateSale()\n', '           public {\n', '    doActivateSale(msg.sender);\n', '  }\n', '\n', '  function doActivateSale(address _entity)\n', '    non_zero_address(token)               // cannot activate before setting token\n', '    only_before_sale\n', '    private {\n', '    activated[_entity] = true;\n', '  }\n', '\n', '  // @notice Whether the needed accounts have activated the sale.\n', '  // @return Is sale activated\n', '  function isActivated() constant public returns (bool) {\n', '    return activated[this] && activated[genaroDevMultisig];\n', '  }\n', '\n', '  // @notice Get the price for a GNR token at any given block number\n', '  // @param _blockNumber the block for which the price is requested\n', '  // @return Number of wei-GNR for 1 wei\n', "  // If sale isn't ongoing for that block, returns 0.\n", '\n', '  function getPrice(address _owner, uint _blockNumber) constant public returns (uint256) {\n', '    if (_blockNumber < initialBlock || _blockNumber >= finalBlock) return 0;\n', '\n', '    return (price);\n', '  }\n', '\n', '  // @notice Genaro Dev needs to make initial token allocations for presale partners\n', '  // This allocation has to be made before the sale is activated. Activating the sale means no more\n', '  // arbitrary allocations are possible and expresses conformity.\n', '  // @param _receiver: The receiver of the tokens\n', '  // @param _amount: Amount of tokens allocated for receiver.\n', '\n', '  function allocatePresaleTokens(address _receiver, uint _amount, uint64 cliffDate, uint64 vestingDate)\n', '           only_before_sale_activation\n', '           only_before_sale\n', '           non_zero_address(_receiver)\n', '           only(genaroDevMultisig)\n', '           public {\n', '\n', '    require(_amount<=6.3*(10 ** 15)); // presale 63 million GNR. No presale partner will have more than this allocated. Prevent overflows.\n', '\n', '    assert(token.generateTokens(address(this),_amount));\n', '    \n', '    // vested token be sent in appropiate vesting date\n', '    token.grantVestedTokens(_receiver, _amount, uint64(now), cliffDate, vestingDate);\n', '\n', '    NewPresaleAllocation(_receiver, _amount);\n', '  }\n', '\n', '/// @dev The fallback function is called when ether is sent to the contract, it\n', '/// simply calls `doPayment()` with the address that sent the ether as the\n', '/// `_owner`. Payable is a required solidity modifier for functions to receive\n', '/// ether, without this modifier functions will throw if ether is sent to them\n', '\n', '  function () public payable {\n', '    return doPayment(msg.sender);\n', '  }\n', '\n', '/////////////////\n', '// Whitelist  controll\n', '/////////////////\n', '\n', '  function addToWhiteList(address _owner) \n', '           only(controller)\n', '           public{\n', '              whitelist[_owner]=true;\n', '           }\n', '\n', '  function removeFromWhiteList(address _owner)\n', '           only(controller)\n', '           public{\n', '              whitelist[_owner]=false;\n', '           }\n', '\n', '  // @return true if investor is whitelisted\n', '  function isWhitelisted(address _owner) public constant returns (bool) {\n', '    return whitelist[_owner];\n', '  }           \n', '\n', '/////////////////\n', '// Controller interface\n', '/////////////////\n', '\n', '/// @notice `proxyPayment()` allows the caller to send ether to the Token directly and\n', '/// have the tokens created in an address of their choosing\n', '/// @param _owner The address that will hold the newly created tokens\n', '\n', '  function proxyPayment(address _owner) payable public returns (bool) {\n', '    doPayment(_owner);\n', '    return true;\n', '  }\n', '\n', '/// @notice Notifies the controller about a transfer, for this sale all\n', '///  transfers are allowed by default and no extra notifications are needed\n', '/// @param _from The origin of the transfer\n', '/// @param _to The destination of the transfer\n', '/// @param _amount The amount of the transfer\n', '/// @return False if the controller does not authorize the transfer\n', '  function onTransfer(address _from, address _to, uint _amount) public returns (bool) {\n', '    // Until the sale is finalized, only allows transfers originated by the sale contract.\n', '    // When finalizeSale is called, this function will stop being called and will always be true.\n', '    return _from == address(this);\n', '  }\n', '\n', '/// @notice Notifies the controller about an approval, for this sale all\n', '///  approvals are allowed by default and no extra notifications are needed\n', '/// @param _owner The address that calls `approve()`\n', '/// @param _spender The spender in the `approve()` call\n', '/// @param _amount The amount in the `approve()` call\n', '/// @return False if the controller does not authorize the approval\n', '  function onApprove(address _owner, address _spender, uint _amount) public returns (bool) {\n', '    // No approve/transferFrom during the sale\n', '    return false;\n', '  }\n', '\n', '/// @dev `doPayment()` is an internal function that sends the ether that this\n', '///  contract receives to the genaroDevMultisig and creates tokens in the address of the\n', '/// @param _owner The address that will hold the newly created tokens\n', '\n', '  function doPayment(address _owner)\n', '           only_during_sale_period\n', '           only_sale_not_stopped\n', '           only_sale_activated\n', '           non_zero_address(_owner)\n', '           minimum_value(dust)\n', '           maximum_value(maxPerPersion)\n', '           internal {\n', '\n', '    assert(totalCollected+msg.value <= hardCap); //if past hard cap, throw\n', '\n', '    uint256 boughtTokens = safeDiv(safeMul(msg.value, getPrice(_owner,getBlockNumber())),10**9); // Calculate how many tokens bought\n', '\n', '    assert(saleWallet.send(msg.value));  //Send fund to multisig\n', '    assert(token.generateTokens(_owner,boughtTokens));// Allocate tokens. This will fail after sale is finalized in case it is hidden cap finalized.\n', '    \n', '    totalCollected = safeAdd(totalCollected, msg.value); // Save total collected amount\n', '\n', '    NewBuyer(_owner, boughtTokens, msg.value);\n', '  }\n', '\n', '  // @notice Function to stop sale for an emergency.\n', '  // @dev Only Genaro Dev can do it after it has been activated.\n', '  function emergencyStopSale()\n', '           only_sale_activated\n', '           only_sale_not_stopped\n', '           only(genaroDevMultisig)\n', '           public {\n', '\n', '    saleStopped = true;\n', '  }\n', '\n', '  // @notice Function to restart stopped sale.\n', '  // @dev Only Genaro Dev can do it after it has been disabled and sale is ongoing.\n', '  function restartSale()\n', '           only_during_sale_period\n', '           only_sale_stopped\n', '           only(genaroDevMultisig)\n', '           public {\n', '\n', '    saleStopped = false;\n', '  }\n', '\n', '  function revealCap(uint256 _cap, uint256 _cap_secure)\n', '           only_during_sale_period\n', '           only_sale_activated\n', '           verify_cap(_cap, _cap_secure)\n', '           public {\n', '\n', '    require(_cap <= hardCap);\n', '\n', '    hardCap = _cap;\n', '    CapRevealed(_cap, _cap_secure, msg.sender);\n', '\n', '    if (totalCollected + dust >= hardCap) {\n', '      doFinalizeSale();\n', '    }\n', '  }\n', '\n', '  // @notice Finalizes sale generating the tokens for Genaro Dev.\n', '  // @dev Transfers the token controller power to the GRPlaceholder.\n', '  function finalizeSale()\n', '           only(genaroDevMultisig)\n', '           public {\n', '\n', '    require(getBlockNumber() >= finalBlock  ||  totalCollected >= hardCap);\n', '    doFinalizeSale();\n', '  }\n', '\n', '  function doFinalizeSale()\n', '           internal {\n', "    // Doesn't check if saleStopped is false, because sale could end in a emergency stop.\n", '    // This function cannot be successfully called twice, because it will top being the controller,\n', '    // and the generateTokens call will fail if called again.\n', '\n', '    //token.changeController(networkPlaceholder); // Sale loses token controller power in favor of network placeholder\n', '\n', '    token.changeController(genaroDevMultisig);\n', '    saleFinalized = true;  // Set stop is true which will enable network deployment\n', '    saleStopped = true;\n', '  }\n', '\n', '  // @notice Deploy Genaro Network contract.\n', '  // @param networkAddress: The address the network was deployed at.\n', '  function deployNetwork(address networkAddress)\n', '           only_finalized_sale\n', '           non_zero_address(networkAddress)\n', '           only(genaroDevMultisig)\n', '           public {\n', '\n', '    networkPlaceholder.changeController(networkAddress);\n', '  }\n', '\n', '  function setGenaroDevMultisig(address _newMultisig)\n', '           non_zero_address(_newMultisig)\n', '           only(genaroDevMultisig)\n', '           public {\n', '\n', '    genaroDevMultisig = _newMultisig;\n', '  }\n', '\n', '  function getBlockNumber() constant internal returns (uint) {\n', '    return block.number;\n', '  }\n', '\n', '  function computeCap(uint256 _cap, uint256 _cap_secure) constant public returns (bytes32) {\n', '    return sha3(_cap, _cap_secure);\n', '  }\n', '\n', '  function isValidCap(uint256 _cap, uint256 _cap_secure) constant public returns (bool) {\n', '    return computeCap(_cap, _cap_secure) == capCommitment;\n', '  }\n', '\n', '  modifier only(address x) {\n', '    require(msg.sender == x);\n', '    _;\n', '  }\n', '\n', '  modifier verify_cap(uint256 _cap, uint256 _cap_secure) {\n', '    require(isValidCap(_cap,_cap_secure));\n', '    _;\n', '  }\n', '\n', '  modifier only_before_sale {\n', '    require(getBlockNumber() < initialBlock);\n', '    _;\n', '  }\n', '\n', '  modifier only_during_sale_period {\n', '    require(getBlockNumber() >= initialBlock);\n', '    require(getBlockNumber() < finalBlock);\n', '    _;\n', '  }\n', '\n', '  modifier only_after_sale {\n', '    require(getBlockNumber() >= finalBlock);\n', '    _;\n', '  }\n', '\n', '  modifier only_sale_stopped {\n', '    require(saleStopped);\n', '    _;\n', '  }\n', '\n', '  modifier only_sale_not_stopped {\n', '    require(!saleStopped);\n', '    _;\n', '  }\n', '\n', '  modifier only_before_sale_activation {\n', '    require(!isActivated());\n', '    _;\n', '  }\n', '\n', '  modifier only_sale_activated {\n', '    require(isActivated());\n', '    _;\n', '  }\n', '\n', '  modifier only_finalized_sale {\n', '    require(getBlockNumber() >= finalBlock);\n', '    require(saleFinalized);\n', '    _;\n', '  }\n', '\n', '  modifier non_zero_address(address x) {\n', '    require(x != 0);\n', '    _;\n', '  }\n', '\n', '  modifier maximum_value(uint256 x) {\n', '    require(msg.value <= x);\n', '    _;\n', '  }\n', '\n', '  modifier minimum_value(uint256 x) {\n', '    require(msg.value >= x);\n', '    _;\n', '  }\n', '}']