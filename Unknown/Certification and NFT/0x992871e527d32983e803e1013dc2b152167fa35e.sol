['// Abstract contract for the full ERC 20 Token standard\n', '// https://github.com/ethereum/EIPs/issues/20\n', 'pragma solidity ^0.4.8;\n', '\n', 'contract SafeMath {\n', '    function safeDiv(uint a, uint b) internal returns (uint) {\n', '        assert(b > 0);\n', '        uint c = a / b;\n', '        assert(a == b * c + a % b);\n', '        return c;\n', '    }\n', '\n', '    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\n', '        uint256 z = x + y;\n', '        assert((z >= x) && (z >= y));\n', '        return z;\n', '    }\n', '\n', '    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\n', '        assert(x >= y);\n', '        uint256 z = x - y;\n', '        return z;\n', '    }\n', '\n', '    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\n', '        uint256 z = x * y;\n', '        assert((x == 0)||(z/x == y));\n', '        return z;\n', '    }\n', '}\n', '\n', 'contract Token {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StandardToken is Token {\n', '\n', '    uint256 constant MAX_UINT256 = 2**256 - 1;\n', '\n', '    bool public isFrozen;              // switched to true in frozen state\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        if (isFrozen) revert();\n', "        //Default assumes totalSupply can't be over max (2^256 - 1).\n", "        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n", '        //Replace the if with this one instead.\n', '        //require(balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (isFrozen) revert();\n', '        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        //require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '        require(balances[_from] >= _value && allowance >= _value);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        if (allowance < MAX_UINT256) {\n', '            allowed[_from][msg.sender] -= _value;\n', '        }\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract PreAdsMobileToken is StandardToken, SafeMath {\n', '\n', '    /* Public variables of the token */\n', '\n', '    /*\n', '        NOTE:\n', '        The following variables are OPTIONAL vanities. One does not have to include them.\n', '        They allow one to customise the token contract & in no way influences the core functionality.\n', '        Some wallets/interfaces might not even bother to look at this information.\n', '    */\n', '    string public name;                   //fancy name: eg Simon Bucks\n', "    uint8 public decimals = 18;                //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.\n", '    string public symbol;                 //An identifier: eg SBX\n', "    string public version = 'H0.1';       //human 0.1 standard. Just an arbitrary versioning scheme.\n", '\n', '    // contracts\n', '    address public ethFundDeposit;      // deposit address for ETH for AdsMobile\n', '\n', '    // crowdsale parameters\n', '    bool public isFinalized;              // switched to true in operational state\n', '    uint256 public fundingStartBlock;\n', '    uint256 public fundingEndBlock;\n', '    uint256 public checkNumber;\n', '    uint256 public totalSupplyWithOutBonus;\n', '    uint256 public constant tokenExchangeRate               = 400; // 400 AdsMobile tokens per 1 ETH\n', '    uint256 public constant tokenCreationCapWithOutBonus    = 3 * (10**6) * 10**18;\n', '    uint256 public constant tokenNeedForBonusLevel0         = 100 * (10**3) * 10**18;\n', '    uint256 public constant bonusLevel0PercentModifier      = 300;\n', '    uint256 public constant tokenNeedForBonusLevel1         = 50 * (10**3) * 10**18;\n', '    uint256 public constant bonusLevel1PercentModifier      = 200;\n', '    uint256 public constant tokenCreationMinPayment         = 50 * (10**3) * 10**18;\n', '\n', '    // events\n', '    event CreateAds(address indexed _to, uint256 _value);\n', '\n', '    // constructor\n', '    function PreAdsMobileToken(\n', '    string _tokenName,\n', '    string _tokenSymbol,\n', '    address _ethFundDeposit,\n', '    uint256 _fundingStartBlock,\n', '    uint256 _fundingEndBlock\n', '    )\n', '    {\n', '        balances[msg.sender] = 0;               // Give the creator all initial tokens\n', '        totalSupply = 0;                        // Update total supply\n', '        name = _tokenName;           // Set the name for display purposes\n', '        decimals = 18;                          // Amount of decimals for display purposes\n', '        symbol = _tokenSymbol;                        // Set the symbol for display purposes\n', '        isFinalized = false;                    // controls pre through crowdsale state\n', '        isFrozen = false;\n', '        ethFundDeposit = _ethFundDeposit;\n', '        fundingStartBlock = _fundingStartBlock;\n', '        fundingEndBlock = _fundingEndBlock;\n', '        checkNumber = 42;                       //Answer to the Ultimate Question of Life, the Universe, and Everything\n', '    }\n', '\n', '    /// @dev Accepts ether and creates new ADS tokens.\n', '    function createTokens() public payable {\n', '        if (isFinalized) revert();\n', '        if (block.number < fundingStartBlock) revert();\n', '        if (block.number > fundingEndBlock) revert();\n', '        if (msg.value == 0) revert();\n', "        uint256 tokensWithOutBonus = safeMult(msg.value, tokenExchangeRate); // check that we're not over totals\n", '        if (tokensWithOutBonus < tokenCreationMinPayment) revert();\n', '        uint256 checkedSupplyWithOutBonus = safeAdd(totalSupplyWithOutBonus, tokensWithOutBonus);\n', '        // return money if something goes wrong\n', "        if (tokenCreationCapWithOutBonus < checkedSupplyWithOutBonus) revert();  // odd fractions won't be found\n", '        totalSupplyWithOutBonus = checkedSupplyWithOutBonus;\n', '\n', '        uint256 tokens = tokensWithOutBonus;\n', '        if(tokens >= tokenNeedForBonusLevel0) {\n', '            tokens = safeDiv(tokens, 100);\n', '            tokens = safeMult(tokens, bonusLevel0PercentModifier);\n', '        } else {\n', '            if(tokens >= tokenNeedForBonusLevel1) {\n', '                tokens = safeDiv(tokens, 100);\n', '                tokens = safeMult(tokens, bonusLevel1PercentModifier);\n', '            }\n', '        }\n', '        uint256 checkedSupply = safeAdd(totalSupply, tokens);\n', '        totalSupply = checkedSupply;\n', '        balances[msg.sender] += tokens;  // safeAdd not needed; bad semantics to use here\n', '        CreateAds(msg.sender, tokens);  // logs token creation\n', '    }\n', '\n', '    //just for test cashin and cashout on small amount before let it go\n', '    function cashin() external payable {\n', '        if (isFinalized) revert();\n', '    }\n', '\n', '    function cashout(uint256 amount) external {\n', '        if (isFinalized) revert();\n', '        if (msg.sender != ethFundDeposit) revert(); // locks finalize to the ultimate ETH owner\n', '        if (!ethFundDeposit.send(amount)) revert();  // send the eth to AdsMobile\n', '    }\n', '\n', '    //in case we want to transfer token to other contract we need freeze all future transfers\n', '    function freeze() external {\n', '        if (msg.sender != ethFundDeposit) revert(); // locks finalize to the ultimate ETH owner\n', '        isFrozen = true;\n', '    }\n', '\n', '    function unFreeze() external {\n', '        if (msg.sender != ethFundDeposit) revert(); // locks finalize to the ultimate ETH owner\n', '        isFrozen = false;\n', '    }\n', '\n', '    /// @dev Ends the funding period and sends the ETH home\n', '    function finalize() external {\n', '        if (isFinalized) revert();\n', '        if (msg.sender != ethFundDeposit) revert(); // locks finalize to the ultimate ETH owner\n', '        if (block.number <= fundingEndBlock && totalSupplyWithOutBonus < tokenCreationCapWithOutBonus - tokenCreationMinPayment) revert();\n', '        // move to operational\n', '        if (!ethFundDeposit.send(this.balance)) revert();  // send the eth to AdsMobile\n', '        isFinalized = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Fallback function which receives ether and created the appropriate number of tokens for the\n', '     * msg.sender.\n', '     */\n', '    function() external payable {\n', '        createTokens();\n', '    }\n', '\n', '}']