['/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '\n', '  address public owner;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    if (msg.sender != owner) {\n', '      throw;\n', '    }\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20Basic {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) constant returns (uint);\n', '  function transfer(address to, uint value);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', '/**\n', ' * @title Contracts that should not own Tokens\n', ' * @dev This blocks incoming ERC23 tokens to prevent accidental loss of tokens.\n', ' * Should tokens (any ERC20Basic compatible) end up in the contract, it allows the\n', ' * owner to reclaim the tokens.\n', ' */\n', 'contract HasNoTokens is Ownable {\n', '\n', ' /**\n', '  * @dev Reject all ERC23 compatible tokens\n', '  * @param from_ address The address that is transferring the tokens\n', '  * @param value_ Uint the amount of the specified token\n', '  * @param data_ Bytes The data passed from the caller.\n', '  */\n', '  function tokenFallback(address from_, uint value_, bytes data_) external {\n', '    throw;\n', '  }\n', '\n', '  /**\n', '   * @dev Reclaim all ERC20Basic compatible tokens\n', '   * @param tokenAddr address The address of the token contract\n', '   */\n', '  function reclaimToken(address tokenAddr) external onlyOwner {\n', '    ERC20Basic tokenInst = ERC20Basic(tokenAddr);\n', '    uint256 balance = tokenInst.balanceOf(this);\n', '    tokenInst.transfer(owner, balance);\n', '  }\n', '}\n', '\n', '// @dev Contract to hold ETH raised during a token sale.\n', '// Prevents attack in which the Multisig sends raised ether to the\n', '// sale contract to mint tokens to itself, and getting the\n', '// funds back immediately.\n', 'contract AbstractSale {\n', '  function saleFinalized() constant returns (bool);\n', '}\n', '\n', 'contract Escrow is HasNoTokens {\n', '\n', '  address public beneficiary;\n', '  uint public finalBlock;\n', '  AbstractSale public tokenSale;\n', '\n', '  // @dev Constructor initializes public variables\n', '  // @param _beneficiary The address of the multisig that will receive the funds\n', '  // @param _finalBlock Block after which the beneficiary can request the funds\n', '  function Escrow(address _beneficiary, uint _finalBlock, address _tokenSale) {\n', '    beneficiary = _beneficiary;\n', '    finalBlock = _finalBlock;\n', '    tokenSale = AbstractSale(_tokenSale);\n', '  }\n', '\n', '  // @dev Receive all sent funds without any further logic\n', '  function() public payable {}\n', '\n', '  // @dev Withdraw function sends all the funds to the wallet if conditions are correct\n', '  function withdraw() public {\n', '    if (msg.sender != beneficiary) throw;\n', '    if (block.number > finalBlock) return doWithdraw();\n', '    if (tokenSale.saleFinalized()) return doWithdraw();\n', '  }\n', '\n', '  function doWithdraw() internal {\n', '    if (!beneficiary.send(this.balance)) throw;\n', '  }\n', '}']