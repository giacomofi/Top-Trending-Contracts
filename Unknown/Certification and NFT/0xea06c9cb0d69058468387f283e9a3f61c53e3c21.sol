['pragma solidity ^ 0.4.10;\n', '\n', 'contract EthMultiplier {\n', '\n', '//*****************************           **************************************\n', '//***************************** VARIABLES **************************************\n', '//*****************************           **************************************\n', '\n', '//******************************************************************************\n', '//***** PRIVATE VARS ***********************************************************\n', '//******************************************************************************\n', '\n', ' uint16 private id;\n', ' uint16 private payoutIdx;\n', ' address private owner;\n', '\n', '\n', '//******************************************************************************\n', '//***** PUBLIC VARS ************************************************************\n', '//******************************************************************************\n', '\n', ' struct Investor {\n', '  address addr;\n', '  uint payout;\n', '  bool paidOut;\n', ' }\n', ' mapping (uint16 => Investor) public investors;\n', '\n', ' uint8 public feePercentage = 10;\n', ' uint8 public payOutPercentage = 25;\n', ' bool public smartContactForSale = true;\n', ' uint public priceOfSmartContract = 25 ether;\n', ' \n', '\n', '//*****************************           **************************************\n', '//***************************** FUNCTIONS **************************************\n', '//*****************************           **************************************\n', '\n', '//******************************************************************************\n', '//***** INIT FUNCTION **********************************************************\n', '//******************************************************************************\n', '\n', ' function EthMultiplier() { owner = msg.sender; }\n', '\n', '\n', '//******************************************************************************\n', '//***** FALLBACK FUNCTION ******************************************************\n', '//******************************************************************************\n', '\n', ' function()\n', ' payable {\n', '  // Please be aware: \n', '  // depositing MORE then the price of the smart contract in one transaction \n', "  // will call the 'buySmartContract' function, and will make you the owner.\n", '  msg.value >= priceOfSmartContract? \n', '   buySmartContract(): \n', '   invest();\n', ' }\n', '\n', '\n', '//******************************************************************************\n', '//***** ADD INVESTOR FUNCTION **************************************************\n', '//******************************************************************************\n', '\n', ' event newInvestor(\n', '  uint16 idx,\n', '  address investor,\n', '  uint amount,\n', '  uint InvestmentNeededForPayOut\n', ' );\n', ' \n', ' event lastInvestorPaidOut(uint payoutIdx);\n', '\n', ' modifier entryCosts(uint min, uint max) {\n', '  if (msg.value < min || msg.value > max) throw;\n', '  _;\n', ' }\n', '\n', ' function invest()\n', ' payable\n', ' entryCosts(1 finney, 10 ether) {\n', '  // Warning! the creator of this smart contract is in no way\n', "  // responsible for any losses or gains in both the 'invest' function nor \n", "  // the 'buySmartContract' function.\n", '  \n', '  investors[id].addr = msg.sender;\n', '  investors[id].payout = msg.value * (100 + payOutPercentage) / 100;\n', '\n', '  owner.transfer(msg.value * feePercentage / 100);\n', '\n', '  while (this.balance >= investors[payoutIdx].payout) {\n', '   investors[payoutIdx].addr.transfer(investors[payoutIdx].payout);\n', '   investors[payoutIdx++].paidOut = true;\n', '  }\n', '  \n', '  lastInvestorPaidOut(payoutIdx - 1);\n', '\n', '  newInvestor(\n', '   id++,\n', '   msg.sender,\n', '   msg.value,\n', '   checkInvestmentRequired(id, false)\n', '  );\n', ' }\n', '\n', '\n', '//******************************************************************************\n', '//***** CHECK REQUIRED INVESTMENT FOR PAY OUT FUNCTION *************************\n', '//******************************************************************************\n', '\n', ' event manualCheckInvestmentRequired(uint id, uint investmentRequired);\n', '\n', ' modifier awaitingPayOut(uint16 _investorId, bool _manual) {\n', '  if (_manual && (_investorId > id || _investorId < payoutIdx)) throw;\n', '  _;\n', ' }\n', '\n', ' function checkInvestmentRequired(uint16 _investorId, bool _clickYes)\n', ' awaitingPayOut(_investorId, _clickYes)\n', ' returns(uint amount) {\n', '  for (uint16 iPayoutIdx = payoutIdx; iPayoutIdx <= _investorId; iPayoutIdx++) {\n', '   amount += investors[iPayoutIdx].payout;\n', '  }\n', '\n', '  amount = (amount - this.balance) * 100 / (100 - feePercentage);\n', '\n', '  if (_clickYes) manualCheckInvestmentRequired(_investorId, amount);\n', ' }\n', '\n', '\n', '//******************************************************************************\n', '//***** BUY SMART CONTRACT FUNCTION ********************************************\n', '//******************************************************************************\n', '\n', ' event newOwner(uint pricePayed);\n', '\n', ' modifier isForSale() {\n', '  if (!smartContactForSale \n', '  || msg.value < priceOfSmartContract \n', '  || msg.sender == owner) throw;\n', '  _;\n', '  if (msg.value > priceOfSmartContract)\n', '   msg.sender.transfer(msg.value - priceOfSmartContract);\n', ' }\n', '\n', ' function buySmartContract()\n', ' payable\n', ' isForSale {\n', '  // Warning! the creator of this smart contract is in no way\n', "  // responsible for any losses or gains in both the 'invest' function nor \n", "  // the 'buySmartContract' function.\n", '\n', '  // Always correctly identify the risk related before using this function.\n', '  owner.transfer(priceOfSmartContract);\n', '  owner = msg.sender;\n', '  smartContactForSale = false;\n', '  newOwner(priceOfSmartContract);\n', ' }\n', '\n', '\n', '//*****************************            *************************************\n', '//***************************** OWNER ONLY *************************************\n', '//*****************************            *************************************\n', '\n', ' modifier onlyOwner() {\n', '  if (msg.sender != owner) throw;\n', '  _;\n', ' }\n', '\n', '\n', '//******************************************************************************\n', '//***** SET FEE PERCENTAGE FUNCTION ********************************************\n', '//******************************************************************************\n', '\n', ' event newFeePercentageIsSet(uint percentage);\n', '\n', ' modifier FPLimits(uint8 _percentage) {\n', '  // fee percentage cannot be higher than 25\n', '  if (_percentage > 25) throw;\n', '  _;\n', ' }\n', '\n', ' function setFeePercentage(uint8 _percentage)\n', ' onlyOwner\n', ' FPLimits(_percentage) {\n', '  feePercentage = _percentage;\n', '  newFeePercentageIsSet(_percentage);\n', ' }\n', '\n', '\n', '//******************************************************************************\n', '//***** SET PAY OUT PERCENTAGE FUNCTION ****************************************\n', '//******************************************************************************\n', '\n', ' event newPayOutPercentageIsSet(uint percentageOnTopOfDeposit);\n', '\n', ' modifier POTODLimits(uint8 _percentage) {\n', '  // pay out percentage cannot be higher than 100 (so double the investment)\n', '  // it also cannot be lower than the fee percentage\n', '  if (_percentage > 100 || _percentage < feePercentage) throw;\n', '  _;\n', ' }\n', '\n', ' function setPayOutPercentage(uint8 _percentageOnTopOfDeposit)\n', ' onlyOwner\n', ' POTODLimits(_percentageOnTopOfDeposit) {\n', '  payOutPercentage = _percentageOnTopOfDeposit;\n', '  newPayOutPercentageIsSet(_percentageOnTopOfDeposit);\n', ' }\n', '\n', '\n', '//******************************************************************************\n', '//***** TOGGLE SMART CONTRACT SALE FUNCTIONS ***********************************\n', '//******************************************************************************\n', '\n', ' event smartContractIsForSale(uint price);\n', ' event smartContractSaleEnded();\n', '\n', ' function putSmartContractOnSale(bool _sell)\n', ' onlyOwner {\n', '  smartContactForSale = _sell;\n', '  _sell? \n', '   smartContractIsForSale(priceOfSmartContract): \n', '   smartContractSaleEnded();\n', ' }\n', '\n', '\n', '//******************************************************************************\n', '//***** SET SMART CONTRACT PRICE FUNCTIONS *************************************\n', '//******************************************************************************\n', '\n', ' event smartContractPriceIsSet(uint price);\n', '\n', ' modifier SCPLimits(uint _price) {\n', '  // smart contract price cannot be lower or equal than 10 ether\n', '  if (_price <= 10 ether) throw;\n', '  _;\n', ' }\n', '\n', ' function setSmartContractPrice(uint _price)\n', ' onlyOwner \n', ' SCPLimits(_price) {\n', '  priceOfSmartContract = _price;\n', '  smartContractPriceIsSet(_price);\n', ' }\n', '\n', '\n', '}']