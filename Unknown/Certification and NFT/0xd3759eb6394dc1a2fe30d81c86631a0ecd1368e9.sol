['pragma solidity ^0.4.13;\n', '\n', 'contract ELTCoinToken {\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  function balanceOf(address who) public constant returns (uint256);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a end timestamp, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  ELTCoinToken public token;\n', '\n', '  // end timestamp where investments are allowed (both inclusive)\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many wei for a token unit\n', '  uint256 public rate;\n', '\n', '  // the minimum transaction threshold in wei\n', '  uint256 public minThreshold;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  function Crowdsale(\n', '    address _contractAddress, uint256 _endTime, uint256 _rate, uint256 _minThreshold, address _wallet) {\n', '    require(_endTime >= now);\n', '    require(_wallet != 0x0);\n', '\n', '    token = ELTCoinToken(_contractAddress);\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    minThreshold = _minThreshold;\n', '  }\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != 0x0);\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    require(weiAmount >= minThreshold);\n', '\n', '    uint256 weiAmountBack = weiAmount % rate;\n', '\n', '    weiAmount -= weiAmountBack;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.div(rate);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    require(token.transfer(beneficiary, tokens));\n', '\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds(weiAmount);\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds(uint256 amount) internal {\n', '    wallet.transfer(amount);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal returns (bool) {\n', '    bool withinPeriod = now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    return now > endTime;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title IndividualCappedCrowdsale\n', ' * @dev Extension of Crowdsale with an individual cap\n', ' */\n', 'contract IndividualCappedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint public constant GAS_LIMIT_IN_WEI = 50000000000 wei;\n', '\n', '  // The maximum wei amount a user can spend during this sale\n', '  uint256 public capPerAddress;\n', '\n', '  mapping(address=>uint) public participated;\n', '\n', '  function IndividualCappedCrowdsale(uint256 _capPerAddress) {\n', '    // require(capPerAddress > 0);\n', '    capPerAddress = _capPerAddress;\n', '  }\n', '\n', '  /**\n', '    * @dev overriding CappedCrowdsale#validPurchase to add an individual cap\n', '    * @return true if investors can buy at the moment\n', '    */\n', '  function validPurchase() internal returns (bool) {\n', '    require(tx.gasprice <= GAS_LIMIT_IN_WEI);\n', '    participated[msg.sender] = participated[msg.sender].add(msg.value);\n', '    return super.validPurchase() && participated[msg.sender] <= capPerAddress;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title CappedCrowdsale\n', ' * @dev Extension of Crowdsale with a max amount of funds raised\n', ' */\n', 'contract CappedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public cap;\n', '\n', '  function CappedCrowdsale(uint256 _cap) {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  // overriding Crowdsale#validPurchase to add extra cap logic\n', '  // @return true if investors can buy at the moment\n', '  function validPurchase() internal returns (bool) {\n', '    bool withinCap = weiRaised.add(msg.value) <= cap;\n', '    return super.validPurchase() && withinCap;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title WhitelistedCrowdsale\n', ' * @dev This is an extension to add whitelist to a crowdsale\n', ' */\n', 'contract WhitelistedCrowdsale is Crowdsale, Ownable {\n', '\n', '    mapping(address=>bool) public registered;\n', '\n', '    event RegistrationStatusChanged(address indexed target, bool isRegistered);\n', '\n', '    /**\n', '     * @dev Changes registration status of an address for participation.\n', '     * @param target Address that will be registered/deregistered.\n', '     * @param isRegistered New registration status of address.\n', '     */\n', '    function changeRegistrationStatus(address target, bool isRegistered)\n', '        public\n', '        onlyOwner\n', '    {\n', '        registered[target] = isRegistered;\n', '        RegistrationStatusChanged(target, isRegistered);\n', '    }\n', '\n', '    /**\n', '     * @dev Changes registration statuses of addresses for participation.\n', '     * @param targets Addresses that will be registered/deregistered.\n', '     * @param isRegistered New registration status of addresses.\n', '     */\n', '    function changeRegistrationStatuses(address[] targets, bool isRegistered)\n', '        public\n', '        onlyOwner\n', '    {\n', '        for (uint i = 0; i < targets.length; i++) {\n', '            changeRegistrationStatus(targets[i], isRegistered);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev overriding Crowdsale#validPurchase to add whilelist\n', '     * @return true if investors can buy at the moment, false otherwise\n', '     */\n', '    function validPurchase() internal returns (bool) {\n', '        return super.validPurchase() && registered[msg.sender];\n', '    }\n', '}\n', '\n', 'contract ELTCoinCrowdsale is Ownable, CappedCrowdsale, WhitelistedCrowdsale, IndividualCappedCrowdsale {\n', '  function ELTCoinCrowdsale(address _coinAddress, uint256 _endTime, uint256 _rate, uint256 _cap, uint256 _minThreshold, uint256 _capPerAddress, address _wallet)\n', '    IndividualCappedCrowdsale(_capPerAddress)\n', '    WhitelistedCrowdsale()\n', '    CappedCrowdsale(_cap)\n', '    Crowdsale(_coinAddress, _endTime, _rate, _minThreshold, _wallet)\n', '  {\n', '\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer the unsold tokens to the owner main wallet\n', '  * @dev Only for owner\n', '  */\n', '  function drainRemainingToken ()\n', '    public\n', '    onlyOwner\n', '  {\n', '      require(hasEnded());\n', '      token.transfer(owner, token.balanceOf(this));\n', '  }\n', '}']