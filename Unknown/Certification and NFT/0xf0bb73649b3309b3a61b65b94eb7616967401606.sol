['pragma solidity ^0.4.2;\n', '\n', 'contract SOCToken {\n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function SOCToken(\n', '        uint256 initialSupply\n', '        ) {\n', '        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens\n', '    }\n', '\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) {\n', '        if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\n', '        balanceOf[msg.sender] -= _value;                     // Subtract from the sender\n', '        balanceOf[_to] += _value;                            // Add the same to the recipient\n', '    }\n', '}\n', '\n', '\n', 'contract SOCTokenSale {\n', '    address public beneficiary;\n', '    uint public fundingGoal; \n', '\tuint public amountRaised; \n', '\tuint public deadline; \n', '\tuint public price;\n', '    SOCToken public tokenReward;\n', '    mapping(address => uint256) public balanceOf;\n', '    bool fundingGoalReached = false;\n', '    uint softMarketingLimit = 25 * 1 ether;\t\n', '    event GoalReached(address beneficiary, uint amountRaised);\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '    bool crowdsaleClosed = false;\n', '\n', '    /* data structure to hold information about campaign contributors */\n', '\n', '    /*  at initialization, setup the owner */\n', '    function SOCTokenSale(\n', '        address ifSuccessfulSendTo,\n', '        uint fundingGoalInEthers,\n', '        uint durationInMinutes,\n', '        uint pricePerEther,\n', '        SOCToken addressOfTokenUsedAsReward\n', '    ) {\n', '        beneficiary = ifSuccessfulSendTo;\n', '        fundingGoal = fundingGoalInEthers * 1 ether;\n', '        deadline = now + durationInMinutes * 1 minutes;\n', '        price = 1 ether / pricePerEther;\n', '        tokenReward = SOCToken(addressOfTokenUsedAsReward);\n', '    }\n', '\n', '    /* The function without name is the default function that is called whenever anyone sends funds to a contract */\n', '    function () payable {\n', '        if (crowdsaleClosed) throw;\n', '        uint amount = msg.value;\n', '        balanceOf[msg.sender] = amount;\n', '        amountRaised += amount;\n', '        tokenReward.transfer(msg.sender, amount / price);\n', '        FundTransfer(msg.sender, amount, true);\n', '    }\n', '\n', '    modifier afterDeadline() { if (now >= deadline) _; }\n', '\n', '    /* checks if the goal or time limit has been reached and ends the campaign */\n', '    function checkGoalReached() afterDeadline {\n', '        if (amountRaised >= fundingGoal){\n', '            fundingGoalReached = true;\n', '            GoalReached(beneficiary, amountRaised);\n', '        }\n', '        crowdsaleClosed = true;\n', '    }\n', '\n', '\n', '    function withdrawal(uint amount) {\n', '        if (msg.sender == beneficiary) {\n', '            if (beneficiary.send(amount * 1 finney)) {\n', '    \t\t\tFundTransfer(beneficiary, amount * 1 finney, false);\n', '            }\n', '        }\n', '    }\t\n', '\t\n', '    function safeWithdrawal() afterDeadline {\n', '        if (amountRaised < softMarketingLimit) {\n', '            uint amount = balanceOf[msg.sender];\n', '            balanceOf[msg.sender] = 0;\n', '            if (amount > 0) {\n', '                if (msg.sender.send(amount)) {\n', '                    FundTransfer(msg.sender, amount, false);\n', '                } else {\n', '                    balanceOf[msg.sender] = amount;\n', '                }\n', '            }\n', '        }\n', '\n', '        if (fundingGoalReached && beneficiary == msg.sender) {\n', '            if (beneficiary.send(this.balance)) {\n', '                FundTransfer(beneficiary, this.balance, false);\n', '            } else {\n', '                fundingGoalReached = false;\n', '            }\n', '        }\n', '    }\n', '}']