['pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    if ((a == 0) || (c / a == b)) {\n', '      return c;\n', '    }\n', '    revert();\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a / b;\n', '    if (a == b * c + a % b) {\n', '      return c;\n', '    }\n', '    revert();\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    if (b <= a) {\n', '      return a - b;\n', '    }\n', '    revert();\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    if (c >= a) {\n', '      return c;\n', '    }\n', '    revert();\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '}\n', '\n', '/*\n', ' * Ownable\n', ' *\n', ' * Base contract with an owner.\n', ' * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    if (msg.sender != owner) {\n', '      revert();\n', '    }\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '/*\n', ' * Haltable\n', ' *\n', ' * Abstract contract that allows children to implement an\n', ' * emergency stop mechanism. Differs from Pausable by causing a revert() when in halt mode.\n', ' *\n', ' *\n', ' * Originally envisioned in FirstBlood ICO contract.\n', ' */\n', 'contract Haltable is Ownable {\n', '  bool public halted;\n', '\n', '  event Halted(uint256 _time);\n', '  event Unhalted(uint256 _time);\n', '  \n', '  modifier stopInEmergency {\n', '    if (halted) revert();\n', '    _;\n', '  }\n', '\n', '  modifier onlyInEmergency {\n', '    if (!halted) revert();\n', '    _;\n', '  }\n', '\n', '  // called by the owner on emergency, triggers stopped state\n', '  function halt() external onlyOwner {\n', '    halted = true;\n', '    Halted( now );\n', '  }\n', '\n', '  // called by the owner on end of emergency, returns to normal state\n', '  function unhalt() external onlyOwner onlyInEmergency {\n', '    halted = false;\n', '    Unhalted( now );\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface - no allowances\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev ERC20Basic with allowances\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value);\n', '  function approve(address spender, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev realisation of ERC20Basic interface\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '   * @dev Fix for the ERC20 short address attack.\n', '   */\n', '  modifier onlyPayloadSize(uint256 size) {\n', '     if(msg.data.length < size + 4) {\n', '       revert();\n', '     }\n', '     _;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implemantation of the basic standart token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is BasicToken, ERC20 {\n', '  using SafeMath for uint256;\n', '  \n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    \n', '    Transfer(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) onlyPayloadSize(2 * 32) {  //not letting anybody hit himself with short address attack\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) revert();\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title EtalonToken\n', ' * @dev Base Etalon ERC20 Token, where all tokens are pre-assigned to the creator. \n', ' * Note they can later distribute these tokens as they wish using `transfer` and other\n', ' * `StandardToken` functions.\n', ' */\n', 'contract EtalonToken is StandardToken, Haltable {\n', '  using SafeMath for uint256;\n', '  \n', '  string  public name        = "Etalon Token";\n', '  string  public symbol      = "ETL";\n', '  uint256 public decimals    = 0;\n', '  uint256 public INITIAL     = 4000000;\n', '  \n', '  event MoreTokensMinted(uint256 _minted, string reason);\n', '\n', '  /**\n', '   * @dev Contructor that gives msg.sender all of existing tokens. \n', '   */\n', '  function EtalonToken() {\n', '    totalSupply = INITIAL;\n', '    balances[msg.sender] = INITIAL;\n', '  }\n', '  \n', '  /**\n', '   * @dev Function that creates new tokens by owner\n', '   * @param _amount - how many tokens mint\n', '   * @param reason  - for which reason minted\n', '   */\n', '  function mint( uint256 _amount, string reason ) onlyOwner {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[msg.sender] = balances[msg.sender].add(_amount);\n', '    MoreTokensMinted(_amount, reason);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Etalon Token Presale\n', ' * @dev Presale contract\n', ' */\n', 'contract EtalonTokenPresale is Haltable {\n', '  using SafeMath for uint256;\n', '\n', '  string public name = "Etalon Token Presale";\n', '\n', '  EtalonToken public token;\n', '  address public beneficiary;\n', '\n', '  uint256 public hardCap;\n', '  uint256 public softCap;\n', '  uint256 public collected;\n', '  uint256 public price;\n', '\n', '  uint256 public tokensSold = 0;\n', '  uint256 public weiRaised = 0;\n', '  uint256 public investorCount = 0;\n', '  uint256 public weiRefunded = 0;\n', '\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '  uint256 public duration;\n', '\n', '  bool public softCapReached = false;\n', '  bool public crowdsaleFinished = false;\n', '\n', '  mapping (address => bool) refunded;\n', '\n', '  event CrowdsaleStarted(uint256 _time, uint256 _softCap, uint256 _hardCap, uint256 _price );\n', '  event CrowdsaleFinished(uint256 _time);\n', '  event CrowdsaleExtended(uint256 _endTime);\n', '  event GoalReached(uint256 _amountRaised);\n', '  event SoftCapReached(uint256 _softCap);\n', '  event NewContribution(address indexed _holder, uint256 _tokenAmount, uint256 _etherAmount);\n', '  event Refunded(address indexed _holder, uint256 _amount);\n', '\n', '  modifier onlyAfter(uint256 time) {\n', '    if (now < time) revert();\n', '    _;\n', '  }\n', '\n', '  modifier onlyBefore(uint256 time) {\n', '    if (now > time) revert();\n', '    _;\n', '  }\n', '  \n', '  /**\n', '   * @dev Constructor\n', '   * @param _token       - address of ETL contract\n', '   * @param _beneficiary - address, which gets all profits\n', '   */\n', '  function EtalonTokenPresale(\n', '    address _token,\n', '    address _beneficiary\n', '  ) {\n', '    hardCap = 0;\n', '    softCap = 0;\n', '    price   = 0;\n', '  \n', '    token = EtalonToken(_token);\n', '    beneficiary = _beneficiary;\n', '\n', '    startTime = 0;\n', '    endTime   = 0;\n', '  }\n', '  \n', '  /**\n', '   * @dev Function that starts sales\n', '   * @param _hardCap     - in ethers (not wei/gwei/finney)\n', '   * @param _softCap     - in ethers (not wei/gwei/finney)\n', '   * @param _duration - length of presale in hours\n', '   * @param _price       - tokens per 1 ether\n', '   * TRANSFER ENOUGH TOKENS TO THIS CONTRACT FIRST OR IT WONT BE ABLE TO SELL THEM\n', '   */  \n', '  function start(\n', '    uint256 _hardCap,\n', '    uint256 _softCap,\n', '    uint256 _duration,\n', '    uint256 _price ) onlyOwner\n', '  {\n', '    if (startTime > 0) revert();\n', '    hardCap = _hardCap * 1 ether;\n', '    softCap = _softCap * 1 ether;\n', '    price   = _price;\n', '    startTime = now;\n', '    endTime   = startTime + _duration * 1 hours;\n', '    duration  = _duration;\n', '    CrowdsaleStarted(now, softCap, hardCap, price );\n', '  }\n', '\n', '  /**\n', '   * @dev Function that ends sales\n', '   * Made to insure finishing of sales - starts refunding\n', '   */ \n', '  function finish() onlyOwner onlyAfter(endTime) {\n', '    crowdsaleFinished = true;\n', '    CrowdsaleFinished( now );\n', '  }\n', '\n', '  /**\n', '   * @dev Function to extend period of presale\n', '   * @param _duration - length of prolongation period\n', '   * limited by 1/2 of year\n', '   */\n', '  function extend( uint256 _duration ) onlyOwner {\n', '    endTime  = endTime + _duration * 1 hours;\n', '    duration = duration + _duration;\n', '    if ((startTime + 4500 hours) < endTime) revert();\n', '    CrowdsaleExtended( endTime );\n', '  }\n', '\n', '  /**\n', '   * fallback function - to recieve ethers and send tokens\n', '   */\n', '  function () payable stopInEmergency {\n', '    if ( msg.value < uint256( 1 ether ).div( price ) ) revert();\n', '    doPurchase(msg.sender, msg.value);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to get your ether back if presale failed \n', '   */\n', '  function refund() external onlyAfter(endTime) stopInEmergency {  //public???\n', '    if (!crowdsaleFinished) revert();\n', '    if (softCapReached) revert();\n', '    if (refunded[msg.sender]) revert();\n', '\n', '    uint256 balance = token.balanceOf(msg.sender);\n', '    if (balance == 0) revert();\n', '\n', '    uint256 to_refund = balance.mul(1 ether).div(price);\n', '    if (to_refund > this.balance) {\n', '      to_refund = this.balance;  // if refunding is more than all, that contract hold - return all holded ether\n', '    }\n', '\n', '    msg.sender.transfer( to_refund ); // transfer throws on failure\n', '    refunded[msg.sender] = true;\n', '    weiRefunded = weiRefunded.add( to_refund );\n', '    Refunded( msg.sender, to_refund );\n', '  }\n', '\n', '  /**\n', '   * @dev Function to send profits and unsold tokens to beneficiary\n', '   */\n', '  function withdraw() onlyOwner {\n', '    if (!softCapReached) revert();\n', '    beneficiary.transfer( collected );\n', '    token.transfer(beneficiary, token.balanceOf(this));\n', '    crowdsaleFinished = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Get ether and transfer tokens\n', '   * @param _buyer  - address of ethers sender\n', '   * @param _amount - ethers sended\n', '   */\n', '  function doPurchase(address _buyer, uint256 _amount) private onlyAfter(startTime) onlyBefore(endTime) stopInEmergency {\n', '    \n', '    if (crowdsaleFinished) revert();\n', '\n', '    if (collected.add(_amount) > hardCap) revert();\n', '\n', '    if ((!softCapReached) && (collected < softCap) && (collected.add(_amount) >= softCap)) {\n', '      softCapReached = true;\n', '      SoftCapReached(softCap);\n', '    }\n', '\n', '    uint256 tokens = _amount.mul( price ).div( 1 ether ); //div(1 ether) - because _amount measured in weis\n', '    if (tokens == 0) revert();\n', '\n', '    if (token.balanceOf(_buyer) == 0) investorCount++;\n', '    \n', '    collected = collected.add(_amount);\n', '\n', '    token.transfer(_buyer, tokens);\n', '\n', '    weiRaised = weiRaised.add(_amount);\n', '    tokensSold = tokensSold.add(tokens);\n', '\n', '    NewContribution(_buyer, tokens, _amount);\n', '\n', '    if (collected == hardCap) {\n', '      GoalReached(hardCap);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Making contract burnable\n', '   * Added for testing reasons\n', '   * onlyInEmergency - fools protection\n', '   */\n', '  function burn() onlyOwner onlyInEmergency { selfdestruct(owner); }\n', '}']