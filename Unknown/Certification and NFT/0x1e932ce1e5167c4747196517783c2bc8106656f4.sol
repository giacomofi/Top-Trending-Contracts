['// **-----------------------------------------------\n', '// EthBet.io Token sale contract\n', '// Final revision 16a\n', '// Refunds integrated, full test suite passed\n', '// **-----------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/issues/20\n', '// -------------------------------------------------\n', '// Price configuration:\n', '// First Day Bonus    +50% = 1,500 EBET  = 1 ETH       [blocks: start   -> s+3600]\n', '// First Week Bonus   +40% = 1,400 EBET  = 1 ETH       [blocks: s+3601  -> s+25200]\n', '// Second Week Bonus  +30% = 1,300 EBET  = 1 ETH       [blocks: s+25201 -> s+50400]\n', '// Third Week Bonus   +25% = 1,250 EBET  = 1 ETH       [blocks: s+50401 -> s+75600]\n', '// Final Week Bonus   +15% = 1,150 EBET  = 1 ETH       [blocks: s+75601 -> end]\n', '// -------------------------------------------------\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() {\n', '        owner = msg.sender;\n', '    }\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract safeMath {\n', '  function safeMul(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a * b;\n', '    safeAssert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint256 a, uint256 b) internal returns (uint256) {\n', '    safeAssert(b > 0);\n', '    uint256 c = a / b;\n', '    safeAssert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal returns (uint256) {\n', '    safeAssert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a + b;\n', '    safeAssert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '  function safeAssert(bool assertion) internal {\n', '    if (!assertion) revert();\n', '  }\n', '}\n', '\n', 'contract StandardToken is owned, safeMath {\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract EBETCrowdsale is owned, safeMath {\n', '  // owner/admin & token reward\n', '  address        public admin                     = owner;   // admin address\n', '  StandardToken  public tokenReward;                          // address of the token used as reward\n', '\n', '  // deployment variables for static supply sale\n', '  uint256 public initialSupply;\n', '  uint256 public tokensRemaining;\n', '\n', '  // multi-sig addresses and price variable\n', '  address public beneficiaryWallet;                           // beneficiaryMultiSig (founder group) or wallet account, live is 0x00F959866E977698D14a36eB332686304a4d6AbA\n', '  uint256 public tokensPerEthPrice;                           // set initial value floating priceVar 1,500 tokens per Eth\n', '\n', '  // uint256 values for min,max,caps,tracking\n', '  uint256 public amountRaisedInWei;                           //\n', '  uint256 public fundingMinCapInWei;                          //\n', '\n', '  // loop control, ICO startup and limiters\n', '  string  public CurrentStatus                   = "";        // current crowdsale status\n', '  uint256 public fundingStartBlock;                           // crowdsale start block#\n', '  uint256 public fundingEndBlock;                             // crowdsale end block#\n', '  bool    public isCrowdSaleClosed               = false;     // crowdsale completion boolean\n', '  bool    public areFundsReleasedToBeneficiary   = false;     // boolean for founder to receive Eth or not\n', '  bool    public isCrowdSaleSetup                = false;     // boolean for crowdsale setup\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '  event Buy(address indexed _sender, uint256 _eth, uint256 _EBET);\n', '  event Refund(address indexed _refunder, uint256 _value);\n', '  event Burn(address _from, uint256 _value);\n', '  mapping(address => uint256) balancesArray;\n', '  mapping(address => uint256) fundValue;\n', '\n', '  // default function, map admin\n', '  function EBETCrowdsale() onlyOwner {\n', '    admin = msg.sender;\n', '    CurrentStatus = "Crowdsale deployed to chain";\n', '  }\n', '\n', '  // total number of tokens initially\n', '  function initialEBETSupply() constant returns (uint256 tokenTotalSupply) {\n', '      tokenTotalSupply = safeDiv(initialSupply,100);\n', '  }\n', '\n', '  // remaining number of tokens\n', '  function remainingSupply() constant returns (uint256 tokensLeft) {\n', '      tokensLeft = tokensRemaining;\n', '  }\n', '\n', '  // setup the CrowdSale parameters\n', '  function SetupCrowdsale(uint256 _fundingStartBlock, uint256 _fundingEndBlock) onlyOwner returns (bytes32 response) {\n', '      if ((msg.sender == admin)\n', '      && (!(isCrowdSaleSetup))\n', '      && (!(beneficiaryWallet > 0))){\n', '          // init addresses\n', '          tokenReward                             = StandardToken(0x7D5Edcd23dAa3fB94317D32aE253eE1Af08Ba14d);  //mainnet is 0x7D5Edcd23dAa3fB94317D32aE253eE1Af08Ba14d //testnet = 0x75508c2B1e46ea29B7cCf0308d4Cb6f6af6211e0\n', '          beneficiaryWallet                       = 0x00F959866E977698D14a36eB332686304a4d6AbA;   // mainnet is 0x00F959866E977698D14a36eB332686304a4d6AbA //testnet = 0xDe6BE2434E8eD8F74C8392A9eB6B6F7D63DDd3D7\n', '          tokensPerEthPrice                       = 1500;                                         // set day1 initial value floating priceVar 1,500 tokens per Eth\n', '\n', '          // funding targets\n', '          fundingMinCapInWei                      = 300000000000000000000;                          //300000000000000000000 =  300 Eth (min cap) - crowdsale is considered success after this value  //testnet 6000000000000000000 = 6Eth\n', '\n', '          // update values\n', '          amountRaisedInWei                       = 0;\n', '          initialSupply                           = 750000000;                                      //   7,500,000 + 2 decimals = 750000000 //testnet 1100000 =11,000\n', '          tokensRemaining                         = safeDiv(initialSupply,100);\n', '\n', '          fundingStartBlock                       = _fundingStartBlock;\n', '          fundingEndBlock                         = _fundingEndBlock;\n', '\n', '          // configure crowdsale\n', '          isCrowdSaleSetup                        = true;\n', '          isCrowdSaleClosed                       = false;\n', '          CurrentStatus                           = "Crowdsale is setup";\n', '\n', '          //gas reduction experiment\n', '          setPrice();\n', '          return "Crowdsale is setup";\n', '      } else if (msg.sender != admin) {\n', '          return "not authorized";\n', '      } else  {\n', '          return "campaign cannot be changed";\n', '      }\n', '    }\n', '\n', '    function setPrice() {\n', '      // Price configuration:\n', '      // First Day Bonus    +50% = 1,500 EBET  = 1 ETH       [blocks: start -> s+3600]\n', '      // First Week Bonus   +40% = 1,400 EBET  = 1 ETH       [blocks: s+3601  -> s+25200]\n', '      // Second Week Bonus  +30% = 1,300 EBET  = 1 ETH       [blocks: s+25201 -> s+50400]\n', '      // Third Week Bonus   +25% = 1,250 EBET  = 1 ETH       [blocks: s+50401 -> s+75600]\n', '      // Final Week Bonus   +15% = 1,150 EBET  = 1 ETH       [blocks: s+75601 -> endblock]\n', '      if (block.number >= fundingStartBlock && block.number <= fundingStartBlock+3600) { // First Day Bonus    +50% = 1,500 EBET  = 1 ETH  [blocks: start -> s+24]\n', '        tokensPerEthPrice=1500;\n', '      } else if (block.number >= fundingStartBlock+3601 && block.number <= fundingStartBlock+25200) { // First Week Bonus   +40% = 1,400 EBET  = 1 ETH  [blocks: s+25 -> s+45]\n', '        tokensPerEthPrice=1400;\n', '      } else if (block.number >= fundingStartBlock+25201 && block.number <= fundingStartBlock+50400) { // Second Week Bonus  +30% = 1,300 EBET  = 1 ETH  [blocks: s+46 -> s+65]\n', '        tokensPerEthPrice=1300;\n', '      } else if (block.number >= fundingStartBlock+50401 && block.number <= fundingStartBlock+75600) { // Third Week Bonus   +25% = 1,250 EBET  = 1 ETH  [blocks: s+66 -> s+85]\n', '        tokensPerEthPrice=1250;\n', '      } else if (block.number >= fundingStartBlock+75601 && block.number <= fundingEndBlock) { // Final Week Bonus   +15% = 1,150 EBET  = 1 ETH  [blocks: s+86 -> endBlock]\n', '        tokensPerEthPrice=1150;\n', '      }\n', '    }\n', '\n', '    // default payable function when sending ether to this contract\n', '    function () payable {\n', '      require(msg.data.length == 0);\n', '      BuyEBETtokens();\n', '    }\n', '\n', '    function BuyEBETtokens() payable {\n', '      // 0. conditions (length, crowdsale setup, zero check, exceed funding contrib check, contract valid check, within funding block range check, balance overflow check etc)\n', '      require(!(msg.value == 0)\n', '      && (isCrowdSaleSetup)\n', '      && (block.number >= fundingStartBlock)\n', '      && (block.number <= fundingEndBlock)\n', '      && (tokensRemaining > 0));\n', '\n', '      // 1. vars\n', '      uint256 rewardTransferAmount    = 0;\n', '\n', '      // 2. effects\n', '      setPrice();\n', '      amountRaisedInWei               = safeAdd(amountRaisedInWei,msg.value);\n', '      rewardTransferAmount            = safeDiv(safeMul(msg.value,tokensPerEthPrice),10000000000000000);\n', '\n', '      // 3. interaction\n', '      tokensRemaining                 = safeSub(tokensRemaining, safeDiv(rewardTransferAmount,100));  // will cause throw if attempt to purchase over the token limit in one tx or at all once limit reached\n', '      tokenReward.transfer(msg.sender, rewardTransferAmount);\n', '\n', '      // 4. events\n', '      fundValue[msg.sender]           = safeAdd(fundValue[msg.sender], msg.value);\n', '      Transfer(this, msg.sender, msg.value);\n', '      Buy(msg.sender, msg.value, rewardTransferAmount);\n', '    }\n', '\n', '    function beneficiaryMultiSigWithdraw(uint256 _amount) onlyOwner {\n', '      require(areFundsReleasedToBeneficiary && (amountRaisedInWei >= fundingMinCapInWei));\n', '      beneficiaryWallet.transfer(_amount);\n', '    }\n', '\n', '    function checkGoalReached() onlyOwner returns (bytes32 response) { // return crowdfund status to owner for each result case, update public constant\n', '      // update state & status variables\n', '      require (isCrowdSaleSetup);\n', '      if ((amountRaisedInWei < fundingMinCapInWei) && (block.number <= fundingEndBlock && block.number >= fundingStartBlock)) { // ICO in progress, under softcap\n', '        areFundsReleasedToBeneficiary = false;\n', '        isCrowdSaleClosed = false;\n', '        CurrentStatus = "In progress (Eth < Softcap)";\n', '        return "In progress (Eth < Softcap)";\n', '      } else if ((amountRaisedInWei < fundingMinCapInWei) && (block.number < fundingStartBlock)) { // ICO has not started\n', '        areFundsReleasedToBeneficiary = false;\n', '        isCrowdSaleClosed = false;\n', '        CurrentStatus = "Crowdsale is setup";\n', '        return "Crowdsale is setup";\n', '      } else if ((amountRaisedInWei < fundingMinCapInWei) && (block.number > fundingEndBlock)) { // ICO ended, under softcap\n', '        areFundsReleasedToBeneficiary = false;\n', '        isCrowdSaleClosed = true;\n', '        CurrentStatus = "Unsuccessful (Eth < Softcap)";\n', '        return "Unsuccessful (Eth < Softcap)";\n', '      } else if ((amountRaisedInWei >= fundingMinCapInWei) && (tokensRemaining == 0)) { // ICO ended, all tokens gone\n', '          areFundsReleasedToBeneficiary = true;\n', '          isCrowdSaleClosed = true;\n', '          CurrentStatus = "Successful (EBET >= Hardcap)!";\n', '          return "Successful (EBET >= Hardcap)!";\n', '      } else if ((amountRaisedInWei >= fundingMinCapInWei) && (block.number > fundingEndBlock) && (tokensRemaining > 0)) { // ICO ended, over softcap!\n', '          areFundsReleasedToBeneficiary = true;\n', '          isCrowdSaleClosed = true;\n', '          CurrentStatus = "Successful (Eth >= Softcap)!";\n', '          return "Successful (Eth >= Softcap)!";\n', '      } else if ((amountRaisedInWei >= fundingMinCapInWei) && (tokensRemaining > 0) && (block.number <= fundingEndBlock)) { // ICO in progress, over softcap!\n', '        areFundsReleasedToBeneficiary = true;\n', '        isCrowdSaleClosed = false;\n', '        CurrentStatus = "In progress (Eth >= Softcap)!";\n', '        return "In progress (Eth >= Softcap)!";\n', '      }\n', '      setPrice();\n', '    }\n', '\n', '    function refund() { // any contributor can call this to have their Eth returned. user&#39;s purchased EBET tokens are burned prior refund of Eth.\n', '      //require minCap not reached\n', '      require ((amountRaisedInWei < fundingMinCapInWei)\n', '      && (isCrowdSaleClosed)\n', '      && (block.number > fundingEndBlock)\n', '      && (fundValue[msg.sender] > 0));\n', '\n', '      //burn user&#39;s token EBET token balance, refund Eth sent\n', '      uint256 ethRefund = fundValue[msg.sender];\n', '      balancesArray[msg.sender] = 0;\n', '      fundValue[msg.sender] = 0;\n', '      Burn(msg.sender, ethRefund);\n', '\n', '      //send Eth back, burn tokens\n', '      msg.sender.transfer(ethRefund);\n', '      Refund(msg.sender, ethRefund);\n', '    }\n', '}']
['// **-----------------------------------------------\n', '// EthBet.io Token sale contract\n', '// Final revision 16a\n', '// Refunds integrated, full test suite passed\n', '// **-----------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/issues/20\n', '// -------------------------------------------------\n', '// Price configuration:\n', '// First Day Bonus    +50% = 1,500 EBET  = 1 ETH       [blocks: start   -> s+3600]\n', '// First Week Bonus   +40% = 1,400 EBET  = 1 ETH       [blocks: s+3601  -> s+25200]\n', '// Second Week Bonus  +30% = 1,300 EBET  = 1 ETH       [blocks: s+25201 -> s+50400]\n', '// Third Week Bonus   +25% = 1,250 EBET  = 1 ETH       [blocks: s+50401 -> s+75600]\n', '// Final Week Bonus   +15% = 1,150 EBET  = 1 ETH       [blocks: s+75601 -> end]\n', '// -------------------------------------------------\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() {\n', '        owner = msg.sender;\n', '    }\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract safeMath {\n', '  function safeMul(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a * b;\n', '    safeAssert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint256 a, uint256 b) internal returns (uint256) {\n', '    safeAssert(b > 0);\n', '    uint256 c = a / b;\n', '    safeAssert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal returns (uint256) {\n', '    safeAssert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a + b;\n', '    safeAssert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '  function safeAssert(bool assertion) internal {\n', '    if (!assertion) revert();\n', '  }\n', '}\n', '\n', 'contract StandardToken is owned, safeMath {\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract EBETCrowdsale is owned, safeMath {\n', '  // owner/admin & token reward\n', '  address        public admin                     = owner;   // admin address\n', '  StandardToken  public tokenReward;                          // address of the token used as reward\n', '\n', '  // deployment variables for static supply sale\n', '  uint256 public initialSupply;\n', '  uint256 public tokensRemaining;\n', '\n', '  // multi-sig addresses and price variable\n', '  address public beneficiaryWallet;                           // beneficiaryMultiSig (founder group) or wallet account, live is 0x00F959866E977698D14a36eB332686304a4d6AbA\n', '  uint256 public tokensPerEthPrice;                           // set initial value floating priceVar 1,500 tokens per Eth\n', '\n', '  // uint256 values for min,max,caps,tracking\n', '  uint256 public amountRaisedInWei;                           //\n', '  uint256 public fundingMinCapInWei;                          //\n', '\n', '  // loop control, ICO startup and limiters\n', '  string  public CurrentStatus                   = "";        // current crowdsale status\n', '  uint256 public fundingStartBlock;                           // crowdsale start block#\n', '  uint256 public fundingEndBlock;                             // crowdsale end block#\n', '  bool    public isCrowdSaleClosed               = false;     // crowdsale completion boolean\n', '  bool    public areFundsReleasedToBeneficiary   = false;     // boolean for founder to receive Eth or not\n', '  bool    public isCrowdSaleSetup                = false;     // boolean for crowdsale setup\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '  event Buy(address indexed _sender, uint256 _eth, uint256 _EBET);\n', '  event Refund(address indexed _refunder, uint256 _value);\n', '  event Burn(address _from, uint256 _value);\n', '  mapping(address => uint256) balancesArray;\n', '  mapping(address => uint256) fundValue;\n', '\n', '  // default function, map admin\n', '  function EBETCrowdsale() onlyOwner {\n', '    admin = msg.sender;\n', '    CurrentStatus = "Crowdsale deployed to chain";\n', '  }\n', '\n', '  // total number of tokens initially\n', '  function initialEBETSupply() constant returns (uint256 tokenTotalSupply) {\n', '      tokenTotalSupply = safeDiv(initialSupply,100);\n', '  }\n', '\n', '  // remaining number of tokens\n', '  function remainingSupply() constant returns (uint256 tokensLeft) {\n', '      tokensLeft = tokensRemaining;\n', '  }\n', '\n', '  // setup the CrowdSale parameters\n', '  function SetupCrowdsale(uint256 _fundingStartBlock, uint256 _fundingEndBlock) onlyOwner returns (bytes32 response) {\n', '      if ((msg.sender == admin)\n', '      && (!(isCrowdSaleSetup))\n', '      && (!(beneficiaryWallet > 0))){\n', '          // init addresses\n', '          tokenReward                             = StandardToken(0x7D5Edcd23dAa3fB94317D32aE253eE1Af08Ba14d);  //mainnet is 0x7D5Edcd23dAa3fB94317D32aE253eE1Af08Ba14d //testnet = 0x75508c2B1e46ea29B7cCf0308d4Cb6f6af6211e0\n', '          beneficiaryWallet                       = 0x00F959866E977698D14a36eB332686304a4d6AbA;   // mainnet is 0x00F959866E977698D14a36eB332686304a4d6AbA //testnet = 0xDe6BE2434E8eD8F74C8392A9eB6B6F7D63DDd3D7\n', '          tokensPerEthPrice                       = 1500;                                         // set day1 initial value floating priceVar 1,500 tokens per Eth\n', '\n', '          // funding targets\n', '          fundingMinCapInWei                      = 300000000000000000000;                          //300000000000000000000 =  300 Eth (min cap) - crowdsale is considered success after this value  //testnet 6000000000000000000 = 6Eth\n', '\n', '          // update values\n', '          amountRaisedInWei                       = 0;\n', '          initialSupply                           = 750000000;                                      //   7,500,000 + 2 decimals = 750000000 //testnet 1100000 =11,000\n', '          tokensRemaining                         = safeDiv(initialSupply,100);\n', '\n', '          fundingStartBlock                       = _fundingStartBlock;\n', '          fundingEndBlock                         = _fundingEndBlock;\n', '\n', '          // configure crowdsale\n', '          isCrowdSaleSetup                        = true;\n', '          isCrowdSaleClosed                       = false;\n', '          CurrentStatus                           = "Crowdsale is setup";\n', '\n', '          //gas reduction experiment\n', '          setPrice();\n', '          return "Crowdsale is setup";\n', '      } else if (msg.sender != admin) {\n', '          return "not authorized";\n', '      } else  {\n', '          return "campaign cannot be changed";\n', '      }\n', '    }\n', '\n', '    function setPrice() {\n', '      // Price configuration:\n', '      // First Day Bonus    +50% = 1,500 EBET  = 1 ETH       [blocks: start -> s+3600]\n', '      // First Week Bonus   +40% = 1,400 EBET  = 1 ETH       [blocks: s+3601  -> s+25200]\n', '      // Second Week Bonus  +30% = 1,300 EBET  = 1 ETH       [blocks: s+25201 -> s+50400]\n', '      // Third Week Bonus   +25% = 1,250 EBET  = 1 ETH       [blocks: s+50401 -> s+75600]\n', '      // Final Week Bonus   +15% = 1,150 EBET  = 1 ETH       [blocks: s+75601 -> endblock]\n', '      if (block.number >= fundingStartBlock && block.number <= fundingStartBlock+3600) { // First Day Bonus    +50% = 1,500 EBET  = 1 ETH  [blocks: start -> s+24]\n', '        tokensPerEthPrice=1500;\n', '      } else if (block.number >= fundingStartBlock+3601 && block.number <= fundingStartBlock+25200) { // First Week Bonus   +40% = 1,400 EBET  = 1 ETH  [blocks: s+25 -> s+45]\n', '        tokensPerEthPrice=1400;\n', '      } else if (block.number >= fundingStartBlock+25201 && block.number <= fundingStartBlock+50400) { // Second Week Bonus  +30% = 1,300 EBET  = 1 ETH  [blocks: s+46 -> s+65]\n', '        tokensPerEthPrice=1300;\n', '      } else if (block.number >= fundingStartBlock+50401 && block.number <= fundingStartBlock+75600) { // Third Week Bonus   +25% = 1,250 EBET  = 1 ETH  [blocks: s+66 -> s+85]\n', '        tokensPerEthPrice=1250;\n', '      } else if (block.number >= fundingStartBlock+75601 && block.number <= fundingEndBlock) { // Final Week Bonus   +15% = 1,150 EBET  = 1 ETH  [blocks: s+86 -> endBlock]\n', '        tokensPerEthPrice=1150;\n', '      }\n', '    }\n', '\n', '    // default payable function when sending ether to this contract\n', '    function () payable {\n', '      require(msg.data.length == 0);\n', '      BuyEBETtokens();\n', '    }\n', '\n', '    function BuyEBETtokens() payable {\n', '      // 0. conditions (length, crowdsale setup, zero check, exceed funding contrib check, contract valid check, within funding block range check, balance overflow check etc)\n', '      require(!(msg.value == 0)\n', '      && (isCrowdSaleSetup)\n', '      && (block.number >= fundingStartBlock)\n', '      && (block.number <= fundingEndBlock)\n', '      && (tokensRemaining > 0));\n', '\n', '      // 1. vars\n', '      uint256 rewardTransferAmount    = 0;\n', '\n', '      // 2. effects\n', '      setPrice();\n', '      amountRaisedInWei               = safeAdd(amountRaisedInWei,msg.value);\n', '      rewardTransferAmount            = safeDiv(safeMul(msg.value,tokensPerEthPrice),10000000000000000);\n', '\n', '      // 3. interaction\n', '      tokensRemaining                 = safeSub(tokensRemaining, safeDiv(rewardTransferAmount,100));  // will cause throw if attempt to purchase over the token limit in one tx or at all once limit reached\n', '      tokenReward.transfer(msg.sender, rewardTransferAmount);\n', '\n', '      // 4. events\n', '      fundValue[msg.sender]           = safeAdd(fundValue[msg.sender], msg.value);\n', '      Transfer(this, msg.sender, msg.value);\n', '      Buy(msg.sender, msg.value, rewardTransferAmount);\n', '    }\n', '\n', '    function beneficiaryMultiSigWithdraw(uint256 _amount) onlyOwner {\n', '      require(areFundsReleasedToBeneficiary && (amountRaisedInWei >= fundingMinCapInWei));\n', '      beneficiaryWallet.transfer(_amount);\n', '    }\n', '\n', '    function checkGoalReached() onlyOwner returns (bytes32 response) { // return crowdfund status to owner for each result case, update public constant\n', '      // update state & status variables\n', '      require (isCrowdSaleSetup);\n', '      if ((amountRaisedInWei < fundingMinCapInWei) && (block.number <= fundingEndBlock && block.number >= fundingStartBlock)) { // ICO in progress, under softcap\n', '        areFundsReleasedToBeneficiary = false;\n', '        isCrowdSaleClosed = false;\n', '        CurrentStatus = "In progress (Eth < Softcap)";\n', '        return "In progress (Eth < Softcap)";\n', '      } else if ((amountRaisedInWei < fundingMinCapInWei) && (block.number < fundingStartBlock)) { // ICO has not started\n', '        areFundsReleasedToBeneficiary = false;\n', '        isCrowdSaleClosed = false;\n', '        CurrentStatus = "Crowdsale is setup";\n', '        return "Crowdsale is setup";\n', '      } else if ((amountRaisedInWei < fundingMinCapInWei) && (block.number > fundingEndBlock)) { // ICO ended, under softcap\n', '        areFundsReleasedToBeneficiary = false;\n', '        isCrowdSaleClosed = true;\n', '        CurrentStatus = "Unsuccessful (Eth < Softcap)";\n', '        return "Unsuccessful (Eth < Softcap)";\n', '      } else if ((amountRaisedInWei >= fundingMinCapInWei) && (tokensRemaining == 0)) { // ICO ended, all tokens gone\n', '          areFundsReleasedToBeneficiary = true;\n', '          isCrowdSaleClosed = true;\n', '          CurrentStatus = "Successful (EBET >= Hardcap)!";\n', '          return "Successful (EBET >= Hardcap)!";\n', '      } else if ((amountRaisedInWei >= fundingMinCapInWei) && (block.number > fundingEndBlock) && (tokensRemaining > 0)) { // ICO ended, over softcap!\n', '          areFundsReleasedToBeneficiary = true;\n', '          isCrowdSaleClosed = true;\n', '          CurrentStatus = "Successful (Eth >= Softcap)!";\n', '          return "Successful (Eth >= Softcap)!";\n', '      } else if ((amountRaisedInWei >= fundingMinCapInWei) && (tokensRemaining > 0) && (block.number <= fundingEndBlock)) { // ICO in progress, over softcap!\n', '        areFundsReleasedToBeneficiary = true;\n', '        isCrowdSaleClosed = false;\n', '        CurrentStatus = "In progress (Eth >= Softcap)!";\n', '        return "In progress (Eth >= Softcap)!";\n', '      }\n', '      setPrice();\n', '    }\n', '\n', "    function refund() { // any contributor can call this to have their Eth returned. user's purchased EBET tokens are burned prior refund of Eth.\n", '      //require minCap not reached\n', '      require ((amountRaisedInWei < fundingMinCapInWei)\n', '      && (isCrowdSaleClosed)\n', '      && (block.number > fundingEndBlock)\n', '      && (fundValue[msg.sender] > 0));\n', '\n', "      //burn user's token EBET token balance, refund Eth sent\n", '      uint256 ethRefund = fundValue[msg.sender];\n', '      balancesArray[msg.sender] = 0;\n', '      fundValue[msg.sender] = 0;\n', '      Burn(msg.sender, ethRefund);\n', '\n', '      //send Eth back, burn tokens\n', '      msg.sender.transfer(ethRefund);\n', '      Refund(msg.sender, ethRefund);\n', '    }\n', '}']
