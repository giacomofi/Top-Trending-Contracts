['contract SafeMath {\n', '\n', '    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\n', '        uint256 z = x + y;\n', '        assert((z >= x) && (z >= y));\n', '        return z;\n', '    }\n', '\n', '    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\n', '        assert(x >= y);\n', '        uint256 z = x - y;\n', '        return z;\n', '    }\n', '\n', '    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\n', '        uint256 z = x * y;\n', '        assert((x == 0)||(z/x == y));\n', '        return z;\n', '    }\n', '}\n', '\n', 'contract Token {\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '/*  ERC 20 token */\n', 'contract StandardToken is Token, SafeMath {\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    modifier onlyPayloadSize(uint numwords) {\n', '        assert(msg.data.length == numwords * 32 + 4);\n', '        _;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value)\n', '    returns (bool success)\n', '    {\n', '        if (balances[msg.sender] >= _value && _value > 0 && balances[_to] + _value > balances[_to]) {\n', '            balances[msg.sender] = safeSubtract(balances[msg.sender], _value);\n', '            balances[_to] = safeAdd(balances[_to], _value);\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '    returns (bool success)\n', '    {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0 && balances[_to] + _value > balances[_to]) {\n', '            balances[_to] = safeAdd(balances[_to], _value);\n', '            balances[_from] = safeSubtract(balances[_from], _value);\n', '            allowed[_from][msg.sender] = safeSubtract(allowed[_from][msg.sender], _value);\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value)\n', '    onlyPayloadSize(2)\n', '    returns (bool success)\n', '    {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender)\n', '    constant\n', '    onlyPayloadSize(2)\n', '    returns (uint256 remaining)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', 'contract VibeCoin {\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '    returns (bool success)\n', '    {}\n', '}\n', '\n', '\n', 'contract VIBEXToken is StandardToken {\n', '\n', '    // Token metadata\n', '    string public constant name = "VIBEX Exchange Token";\n', '    string public constant symbol = "VIBEX";\n', '    uint256 public constant decimals = 18;\n', '\n', '    // Deposit address of account controlled by the creators\n', '    address public ethFundDeposit = 0xFC1CCdcA6b4670516504409341A31e444FF6f43F;\n', '    address public tokenExchangeAddress = 0xe8ff5c9c75deb346acac493c463c8950be03dfba;\n', '    address public tokenAccountAddress = 0xFC1CCdcA6b4670516504409341A31e444FF6f43F;\n', '    //Access to token contract for vibe exchange\n', '    VibeCoin public tokenExchange;\n', '\n', '    // Fundraising parameters\n', '    enum ContractState { Fundraising, Finalized, Redeeming, Paused }\n', '    ContractState public state;           // Current state of the contract\n', '    ContractState private savedState;     // State of the contract before pause\n', '\n', '    //start date: 08/07/2017 @ 12:00am (UTC)\n', '    uint public startDate = 1502064000;\n', '    //start date: 09/21/2017 @ 11:59pm (UTC)\n', '    uint public endDate = 1506038399;\n', '    //deadlines 1: 08/21/2017 @ 11:59pm (UTC) +30%\n', '    //deadlines 2: 08/28/2017 @ 11:59pm (UTC) +20%\n', '    //deadlines 3: 09/05/2017 @ 11:59pm (UTC) +10%\n', '    //deadlines 4: 09/12/2017 @ 11:59pm (UTC) +5%\n', '    //deadlines 5: 09/21/2017 @ 11:59pm (UTC) +0%\n', '    uint[5] public deadlines = [1503359999, 1503964799, 1504655999, 1505260799, 1506038399];\n', '\tuint[5] public prices = [130, 120, 110, 105, 100];\n', '    \n', '    uint256 public constant ETH_RECEIVED_CAP = 115 * (10**3) * 10**decimals; // 115 000 ETH\n', '    uint256 public constant ETH_RECEIVED_MIN = 0;//1 * 10**decimals; // 0 ETH\n', '    uint256 public constant TOKEN_MIN = 1 * 10**decimals; // 1 VIBEX\n', '    uint256 public constant MIN_ETH_TRANS = 25 * 10**decimals; // 25 ETH\n', '\n', '    // We need to keep track of how much ether have been contributed, since we have a cap for ETH too\n', '    uint256 public totalReceivedEth = 0;\n', '\n', '    // Since we have different exchange rates at different stages, we need to keep track\n', '    // of how much ether each contributed in case that we need to issue a refund\n', '    mapping (address => uint256) private ethBalances;\n', '\n', '    // Events used for logging\n', '    event LogCreateVIBEX(address indexed _to, uint256 _value);\n', '    event LogRedeemVIBE(address indexed _to, uint256 _value, uint256 _value2, uint256 _value3);\n', '\n', '    modifier isFinalized() {\n', '        require(state == ContractState.Finalized);\n', '        _;\n', '    }\n', '\n', '    modifier isFundraising() {\n', '        require(state == ContractState.Fundraising);\n', '        _;\n', '    }\n', '\n', '    modifier isRedeeming() {\n', '        require(state == ContractState.Redeeming);\n', '        _;\n', '    }\n', '\n', '    modifier isPaused() {\n', '        require(state == ContractState.Paused);\n', '        _;\n', '    }\n', '\n', '    modifier notPaused() {\n', '        require(state != ContractState.Paused);\n', '        _;\n', '    }\n', '\n', '    modifier isFundraisingIgnorePaused() {\n', '        require(state == ContractState.Fundraising || (state == ContractState.Paused && savedState == ContractState.Fundraising));\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == ethFundDeposit);\n', '        _;\n', '    }\n', '\n', '    modifier minimumReached() {\n', '        require(totalReceivedEth >= ETH_RECEIVED_MIN);\n', '        _;\n', '    }\n', '\n', '    // Constructor\n', '    function VIBEXToken()\n', '    {\n', '        // Contract state\n', '        state = ContractState.Fundraising;\n', '        savedState = ContractState.Fundraising;\n', '        tokenExchange = VibeCoin(tokenExchangeAddress);\n', '        totalSupply = 0;\n', '    }\n', '\n', '    // Overridden method to check for end of fundraising before allowing transfer of tokens\n', '    function transfer(address _to, uint256 _value)\n', '    isFinalized // Only allow token transfer after the fundraising has ended\n', '    onlyPayloadSize(2)\n', '    returns (bool success)\n', '    {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '\n', '    // Overridden method to check for end of fundraising before allowing transfer of tokens\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '    isFinalized // Only allow token transfer after the fundraising has ended\n', '    onlyPayloadSize(3)\n', '    returns (bool success)\n', '    {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '    \n', '    /// @dev Accepts ether and creates new VIBEX tokens\n', '    function ()\n', '    payable\n', '    external\n', '    isFundraising\n', '    {\n', '        require(now >= startDate);\n', '        require(now <= endDate);\n', '        require(msg.value > 0);\n', '        \n', '        if(msg.value < MIN_ETH_TRANS && now < deadlines[0]) throw;\n', '\n', '        // First we check the ETH cap, as it&#39;s easier to calculate, return\n', '        // the contribution if the cap has been reached already\n', '        uint256 checkedReceivedEth = safeAdd(totalReceivedEth, msg.value);\n', '        require(checkedReceivedEth <= ETH_RECEIVED_CAP);\n', '\n', '        // If all is fine with the ETH cap, we continue to check the\n', '        // minimum amount of tokens\n', '        uint256 tokens = safeMult(msg.value, getCurrentTokenPrice());\n', '        require(tokens >= TOKEN_MIN);\n', '\n', '        // Only when all the checks have passed, then we update the state (ethBalances,\n', '        // totalReceivedEth, totalSupply, and balances) of the contract\n', '        ethBalances[msg.sender] = safeAdd(ethBalances[msg.sender], msg.value);\n', '        totalReceivedEth = checkedReceivedEth;\n', '        totalSupply = safeAdd(totalSupply, tokens);\n', '        balances[msg.sender] += tokens;  // safeAdd not needed; bad semantics to use here\n', '        \n', '        // Send the ETH to Vibehub Creators\n', '        ethFundDeposit.transfer(msg.value);\n', '\n', '        // Log the creation of this tokens\n', '        LogCreateVIBEX(msg.sender, tokens);\n', '    }\n', '\n', '\n', '    /// @dev Returns the current token price\n', '    function getCurrentTokenPrice()\n', '    private\n', '    constant\n', '    returns (uint256 currentPrice)\n', '    {\n', '        for(var i = 0; i < deadlines.length; i++)\n', '            if(now<=deadlines[i])\n', '                return prices[i];\n', '        return prices[prices.length-1];//should never be returned, but to be sure to not divide by 0\n', '    }\n', '\n', '\n', '    /// @dev Redeems VIBEs and records the Vibehub address of the sender\n', '    function redeemTokens()\n', '    external\n', '    isRedeeming\n', '    {\n', '        uint256 vibeVal = balances[msg.sender];\n', '        require(vibeVal >= TOKEN_MIN); // At least TOKEN_MIN tokens have to be redeemed\n', '\n', '        // Move the tokens of the caller to Vibehub&#39;s address\n', '        //if (!super.transfer(ethFundDeposit, vibeVal)) throw;\n', '        balances[msg.sender]=0;\n', '        \n', '        uint256 exchangeRate = ((160200000* 10**decimals)/totalSupply);\n', '        uint256 numTokens = safeMult(exchangeRate, vibeVal); // Extra safe\n', '        if(!tokenExchange.transferFrom(tokenAccountAddress, msg.sender, numTokens)) throw;\n', '\n', '        // Log the redeeming of this tokens\n', '        LogRedeemVIBE(msg.sender, numTokens, vibeVal, exchangeRate);\n', '    }\n', '\n', '\n', '\n', '\n', '    /// @dev Ends the fundraising period and sends the ETH to the ethFundDeposit wallet\n', '    function finalize()\n', '    external\n', '    isFundraising\n', '    minimumReached\n', '    onlyOwner // Only the owner of the ethFundDeposit address can finalize the contract\n', '    {\n', '        require(now > endDate || totalReceivedEth >= ETH_RECEIVED_CAP); // Only allow to finalize the contract before the ending block if we already reached any of the caps\n', '\n', '        // Move the contract to Finalized state\n', '        state = ContractState.Finalized;\n', '        savedState = ContractState.Finalized;\n', '    }\n', '\n', '\n', '    /// @dev Starts the redeeming period\n', '    function startRedeeming()\n', '    external\n', '    isFinalized // The redeeming period can only be started after the contract is finalized\n', '    onlyOwner   // Only the owner of the ethFundDeposit address can start the redeeming period\n', '    {\n', '        // Move the contract to Redeeming state\n', '        state = ContractState.Redeeming;\n', '        savedState = ContractState.Redeeming;\n', '    }\n', '\n', '\n', '    /// @dev Pauses the contract\n', '    function pause()\n', '    external\n', '    notPaused   // Prevent the contract getting stuck in the Paused state\n', '    onlyOwner   // Only the owner of the ethFundDeposit address can pause the contract\n', '    {\n', '        // Move the contract to Paused state\n', '        savedState = state;\n', '        state = ContractState.Paused;\n', '    }\n', '\n', '\n', '    /// @dev Proceeds with the contract\n', '    function proceed()\n', '    external\n', '    isPaused\n', '    onlyOwner   // Only the owner of the ethFundDeposit address can proceed with the contract\n', '    {\n', '        // Move the contract to the previous state\n', '        state = savedState;\n', '    }\n', '\n', '}']
['contract SafeMath {\n', '\n', '    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\n', '        uint256 z = x + y;\n', '        assert((z >= x) && (z >= y));\n', '        return z;\n', '    }\n', '\n', '    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\n', '        assert(x >= y);\n', '        uint256 z = x - y;\n', '        return z;\n', '    }\n', '\n', '    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\n', '        uint256 z = x * y;\n', '        assert((x == 0)||(z/x == y));\n', '        return z;\n', '    }\n', '}\n', '\n', 'contract Token {\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '/*  ERC 20 token */\n', 'contract StandardToken is Token, SafeMath {\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    modifier onlyPayloadSize(uint numwords) {\n', '        assert(msg.data.length == numwords * 32 + 4);\n', '        _;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value)\n', '    returns (bool success)\n', '    {\n', '        if (balances[msg.sender] >= _value && _value > 0 && balances[_to] + _value > balances[_to]) {\n', '            balances[msg.sender] = safeSubtract(balances[msg.sender], _value);\n', '            balances[_to] = safeAdd(balances[_to], _value);\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '    returns (bool success)\n', '    {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0 && balances[_to] + _value > balances[_to]) {\n', '            balances[_to] = safeAdd(balances[_to], _value);\n', '            balances[_from] = safeSubtract(balances[_from], _value);\n', '            allowed[_from][msg.sender] = safeSubtract(allowed[_from][msg.sender], _value);\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value)\n', '    onlyPayloadSize(2)\n', '    returns (bool success)\n', '    {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender)\n', '    constant\n', '    onlyPayloadSize(2)\n', '    returns (uint256 remaining)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', 'contract VibeCoin {\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '    returns (bool success)\n', '    {}\n', '}\n', '\n', '\n', 'contract VIBEXToken is StandardToken {\n', '\n', '    // Token metadata\n', '    string public constant name = "VIBEX Exchange Token";\n', '    string public constant symbol = "VIBEX";\n', '    uint256 public constant decimals = 18;\n', '\n', '    // Deposit address of account controlled by the creators\n', '    address public ethFundDeposit = 0xFC1CCdcA6b4670516504409341A31e444FF6f43F;\n', '    address public tokenExchangeAddress = 0xe8ff5c9c75deb346acac493c463c8950be03dfba;\n', '    address public tokenAccountAddress = 0xFC1CCdcA6b4670516504409341A31e444FF6f43F;\n', '    //Access to token contract for vibe exchange\n', '    VibeCoin public tokenExchange;\n', '\n', '    // Fundraising parameters\n', '    enum ContractState { Fundraising, Finalized, Redeeming, Paused }\n', '    ContractState public state;           // Current state of the contract\n', '    ContractState private savedState;     // State of the contract before pause\n', '\n', '    //start date: 08/07/2017 @ 12:00am (UTC)\n', '    uint public startDate = 1502064000;\n', '    //start date: 09/21/2017 @ 11:59pm (UTC)\n', '    uint public endDate = 1506038399;\n', '    //deadlines 1: 08/21/2017 @ 11:59pm (UTC) +30%\n', '    //deadlines 2: 08/28/2017 @ 11:59pm (UTC) +20%\n', '    //deadlines 3: 09/05/2017 @ 11:59pm (UTC) +10%\n', '    //deadlines 4: 09/12/2017 @ 11:59pm (UTC) +5%\n', '    //deadlines 5: 09/21/2017 @ 11:59pm (UTC) +0%\n', '    uint[5] public deadlines = [1503359999, 1503964799, 1504655999, 1505260799, 1506038399];\n', '\tuint[5] public prices = [130, 120, 110, 105, 100];\n', '    \n', '    uint256 public constant ETH_RECEIVED_CAP = 115 * (10**3) * 10**decimals; // 115 000 ETH\n', '    uint256 public constant ETH_RECEIVED_MIN = 0;//1 * 10**decimals; // 0 ETH\n', '    uint256 public constant TOKEN_MIN = 1 * 10**decimals; // 1 VIBEX\n', '    uint256 public constant MIN_ETH_TRANS = 25 * 10**decimals; // 25 ETH\n', '\n', '    // We need to keep track of how much ether have been contributed, since we have a cap for ETH too\n', '    uint256 public totalReceivedEth = 0;\n', '\n', '    // Since we have different exchange rates at different stages, we need to keep track\n', '    // of how much ether each contributed in case that we need to issue a refund\n', '    mapping (address => uint256) private ethBalances;\n', '\n', '    // Events used for logging\n', '    event LogCreateVIBEX(address indexed _to, uint256 _value);\n', '    event LogRedeemVIBE(address indexed _to, uint256 _value, uint256 _value2, uint256 _value3);\n', '\n', '    modifier isFinalized() {\n', '        require(state == ContractState.Finalized);\n', '        _;\n', '    }\n', '\n', '    modifier isFundraising() {\n', '        require(state == ContractState.Fundraising);\n', '        _;\n', '    }\n', '\n', '    modifier isRedeeming() {\n', '        require(state == ContractState.Redeeming);\n', '        _;\n', '    }\n', '\n', '    modifier isPaused() {\n', '        require(state == ContractState.Paused);\n', '        _;\n', '    }\n', '\n', '    modifier notPaused() {\n', '        require(state != ContractState.Paused);\n', '        _;\n', '    }\n', '\n', '    modifier isFundraisingIgnorePaused() {\n', '        require(state == ContractState.Fundraising || (state == ContractState.Paused && savedState == ContractState.Fundraising));\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == ethFundDeposit);\n', '        _;\n', '    }\n', '\n', '    modifier minimumReached() {\n', '        require(totalReceivedEth >= ETH_RECEIVED_MIN);\n', '        _;\n', '    }\n', '\n', '    // Constructor\n', '    function VIBEXToken()\n', '    {\n', '        // Contract state\n', '        state = ContractState.Fundraising;\n', '        savedState = ContractState.Fundraising;\n', '        tokenExchange = VibeCoin(tokenExchangeAddress);\n', '        totalSupply = 0;\n', '    }\n', '\n', '    // Overridden method to check for end of fundraising before allowing transfer of tokens\n', '    function transfer(address _to, uint256 _value)\n', '    isFinalized // Only allow token transfer after the fundraising has ended\n', '    onlyPayloadSize(2)\n', '    returns (bool success)\n', '    {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '\n', '    // Overridden method to check for end of fundraising before allowing transfer of tokens\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '    isFinalized // Only allow token transfer after the fundraising has ended\n', '    onlyPayloadSize(3)\n', '    returns (bool success)\n', '    {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '    \n', '    /// @dev Accepts ether and creates new VIBEX tokens\n', '    function ()\n', '    payable\n', '    external\n', '    isFundraising\n', '    {\n', '        require(now >= startDate);\n', '        require(now <= endDate);\n', '        require(msg.value > 0);\n', '        \n', '        if(msg.value < MIN_ETH_TRANS && now < deadlines[0]) throw;\n', '\n', "        // First we check the ETH cap, as it's easier to calculate, return\n", '        // the contribution if the cap has been reached already\n', '        uint256 checkedReceivedEth = safeAdd(totalReceivedEth, msg.value);\n', '        require(checkedReceivedEth <= ETH_RECEIVED_CAP);\n', '\n', '        // If all is fine with the ETH cap, we continue to check the\n', '        // minimum amount of tokens\n', '        uint256 tokens = safeMult(msg.value, getCurrentTokenPrice());\n', '        require(tokens >= TOKEN_MIN);\n', '\n', '        // Only when all the checks have passed, then we update the state (ethBalances,\n', '        // totalReceivedEth, totalSupply, and balances) of the contract\n', '        ethBalances[msg.sender] = safeAdd(ethBalances[msg.sender], msg.value);\n', '        totalReceivedEth = checkedReceivedEth;\n', '        totalSupply = safeAdd(totalSupply, tokens);\n', '        balances[msg.sender] += tokens;  // safeAdd not needed; bad semantics to use here\n', '        \n', '        // Send the ETH to Vibehub Creators\n', '        ethFundDeposit.transfer(msg.value);\n', '\n', '        // Log the creation of this tokens\n', '        LogCreateVIBEX(msg.sender, tokens);\n', '    }\n', '\n', '\n', '    /// @dev Returns the current token price\n', '    function getCurrentTokenPrice()\n', '    private\n', '    constant\n', '    returns (uint256 currentPrice)\n', '    {\n', '        for(var i = 0; i < deadlines.length; i++)\n', '            if(now<=deadlines[i])\n', '                return prices[i];\n', '        return prices[prices.length-1];//should never be returned, but to be sure to not divide by 0\n', '    }\n', '\n', '\n', '    /// @dev Redeems VIBEs and records the Vibehub address of the sender\n', '    function redeemTokens()\n', '    external\n', '    isRedeeming\n', '    {\n', '        uint256 vibeVal = balances[msg.sender];\n', '        require(vibeVal >= TOKEN_MIN); // At least TOKEN_MIN tokens have to be redeemed\n', '\n', "        // Move the tokens of the caller to Vibehub's address\n", '        //if (!super.transfer(ethFundDeposit, vibeVal)) throw;\n', '        balances[msg.sender]=0;\n', '        \n', '        uint256 exchangeRate = ((160200000* 10**decimals)/totalSupply);\n', '        uint256 numTokens = safeMult(exchangeRate, vibeVal); // Extra safe\n', '        if(!tokenExchange.transferFrom(tokenAccountAddress, msg.sender, numTokens)) throw;\n', '\n', '        // Log the redeeming of this tokens\n', '        LogRedeemVIBE(msg.sender, numTokens, vibeVal, exchangeRate);\n', '    }\n', '\n', '\n', '\n', '\n', '    /// @dev Ends the fundraising period and sends the ETH to the ethFundDeposit wallet\n', '    function finalize()\n', '    external\n', '    isFundraising\n', '    minimumReached\n', '    onlyOwner // Only the owner of the ethFundDeposit address can finalize the contract\n', '    {\n', '        require(now > endDate || totalReceivedEth >= ETH_RECEIVED_CAP); // Only allow to finalize the contract before the ending block if we already reached any of the caps\n', '\n', '        // Move the contract to Finalized state\n', '        state = ContractState.Finalized;\n', '        savedState = ContractState.Finalized;\n', '    }\n', '\n', '\n', '    /// @dev Starts the redeeming period\n', '    function startRedeeming()\n', '    external\n', '    isFinalized // The redeeming period can only be started after the contract is finalized\n', '    onlyOwner   // Only the owner of the ethFundDeposit address can start the redeeming period\n', '    {\n', '        // Move the contract to Redeeming state\n', '        state = ContractState.Redeeming;\n', '        savedState = ContractState.Redeeming;\n', '    }\n', '\n', '\n', '    /// @dev Pauses the contract\n', '    function pause()\n', '    external\n', '    notPaused   // Prevent the contract getting stuck in the Paused state\n', '    onlyOwner   // Only the owner of the ethFundDeposit address can pause the contract\n', '    {\n', '        // Move the contract to Paused state\n', '        savedState = state;\n', '        state = ContractState.Paused;\n', '    }\n', '\n', '\n', '    /// @dev Proceeds with the contract\n', '    function proceed()\n', '    external\n', '    isPaused\n', '    onlyOwner   // Only the owner of the ethFundDeposit address can proceed with the contract\n', '    {\n', '        // Move the contract to the previous state\n', '        state = savedState;\n', '    }\n', '\n', '}']
