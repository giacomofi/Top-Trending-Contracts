['contract ZeroDollarHomePage {\n', '    event InvalidPullRequest(uint indexed pullRequestId);\n', '    event PullRequestAlreadyClaimed(uint indexed pullRequestId, uint timeBeforeDisplay, bool past);\n', '    event PullRequestClaimed(uint indexed pullRequestId, uint timeBeforeDisplay);\n', '    event QueueIsEmpty();\n', '\n', '    bool _handledFirst;\n', '    uint[] _queue;\n', '    uint _current;\n', '    address owner;\n', '\n', '    function ZeroDollarHomePage() {\n', '        owner = msg.sender;\n', '        _handledFirst = false;\n', '        _current = 0;\n', '    }\n', '\n', '    function remove() {\n', '        if (msg.sender == owner){\n', '            suicide(owner);\n', '        }\n', '    }\n', '\n', '    /*\n', '     * Register a new pull request.\n', '     */\n', '    function newRequest(uint pullRequestId) {\n', '        if (pullRequestId <= 0) {\n', '            InvalidPullRequest(pullRequestId);\n', '            return;\n', '        }\n', '\n', "        // Check that the pr hasn't already been claimed\n", '        bool found = false;\n', '        uint index = 0;\n', '\n', '        while (!found && index < _queue.length) {\n', '            if (_queue[index] == pullRequestId) {\n', '                found = true;\n', '                break;\n', '            } else {\n', '                index++;\n', '            }\n', '        }\n', '\n', '        if (found) {\n', '            PullRequestAlreadyClaimed(pullRequestId, (index - _current) * 1 days, _current > index);\n', '            return;\n', '        }\n', '\n', '        _queue.push(pullRequestId);\n', '        PullRequestClaimed(pullRequestId, (_queue.length - _current) * 1 days);\n', '    }\n', '\n', '    /*\n', '     * Close the current request in queue and move the queue to its next element.\n', '     */\n', '    function closeRequest() {\n', '        if (_handledFirst && _current < _queue.length - 1) {\n', '            _current += 1;\n', '        }\n', '\n', '        _handledFirst = true;\n', '    }\n', '\n', '    /*\n', '     * Get the last non published pull-request from the queue\n', '     */\n', '    function getLastNonPublished() constant returns (uint pullRequestId) {\n', '        if (_current >= _queue.length) {\n', '            return 0;\n', '        }\n', '\n', '        return _queue[_current];\n', '    }\n', '}']