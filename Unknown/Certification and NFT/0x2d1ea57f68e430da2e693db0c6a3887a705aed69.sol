['pragma solidity ^0.4.4;\n', '\n', 'contract EtherTreasuryInterface {\n', '    function withdraw(address _to, uint _value) returns(bool);\n', '    function withdrawWithReference(address _to, uint _value, string _reference) returns(bool);\n', '}\n', '\n', 'contract SafeMin {\n', '    modifier onlyHuman {\n', '        if (_isHuman()) {\n', '            _;\n', '        }\n', '    }\n', '\n', '    modifier immutable(address _address) {\n', '        if (_address == 0) {\n', '            _;\n', '        }\n', '    }\n', '\n', '    function _safeFalse() internal returns(bool) {\n', '        _safeSend(msg.sender, msg.value);\n', '        return false;\n', '    }\n', '\n', '    function _safeSend(address _to, uint _value) internal {\n', '        if (!_unsafeSend(_to, _value)) {\n', '            throw;\n', '        }\n', '    }\n', '\n', '    function _unsafeSend(address _to, uint _value) internal returns(bool) {\n', '        return _to.call.value(_value)();\n', '    }\n', '\n', '    function _isContract() constant internal returns(bool) {\n', '        return msg.sender != tx.origin;\n', '    }\n', '\n', '    function _isHuman() constant internal returns(bool) {\n', '        return !_isContract();\n', '    }\n', '}\n', '\n', 'contract MultiAsset {\n', '    function isCreated(bytes32 _symbol) constant returns(bool);\n', '    function baseUnit(bytes32 _symbol) constant returns(uint8);\n', '    function name(bytes32 _symbol) constant returns(string);\n', '    function description(bytes32 _symbol) constant returns(string);\n', '    function isReissuable(bytes32 _symbol) constant returns(bool);\n', '    function owner(bytes32 _symbol) constant returns(address);\n', '    function isOwner(address _owner, bytes32 _symbol) constant returns(bool);\n', '    function totalSupply(bytes32 _symbol) constant returns(uint);\n', '    function balanceOf(address _holder, bytes32 _symbol) constant returns(uint);\n', '    function transfer(address _to, uint _value, bytes32 _symbol) returns(bool);\n', '    function transferToICAP(bytes32 _icap, uint _value) returns(bool);\n', '    function transferToICAPWithReference(bytes32 _icap, uint _value, string _reference) returns(bool);\n', '    function transferWithReference(address _to, uint _value, bytes32 _symbol, string _reference) returns(bool);\n', '    function proxyTransferWithReference(address _to, uint _value, bytes32 _symbol, string _reference) returns(bool);\n', '    function proxyTransferToICAPWithReference(bytes32 _icap, uint _value, string _reference) returns(bool);\n', '    function approve(address _spender, uint _value, bytes32 _symbol) returns(bool);\n', '    function proxyApprove(address _spender, uint _value, bytes32 _symbol) returns(bool);\n', '    function allowance(address _from, address _spender, bytes32 _symbol) constant returns(uint);\n', '    function transferFrom(address _from, address _to, uint _value, bytes32 _symbol) returns(bool);\n', '    function transferFromWithReference(address _from, address _to, uint _value, bytes32 _symbol, string _reference) returns(bool);\n', '    function transferFromToICAP(address _from, bytes32 _icap, uint _value) returns(bool);\n', '    function transferFromToICAPWithReference(address _from, bytes32 _icap, uint _value, string _reference) returns(bool);\n', '    function proxyTransferFromWithReference(address _from, address _to, uint _value, bytes32 _symbol, string _reference) returns(bool);\n', '    function proxyTransferFromToICAPWithReference(address _from, bytes32 _icap, uint _value, string _reference) returns(bool);\n', '    function setCosignerAddress(address _address, bytes32 _symbol) returns(bool);\n', '    function setCosignerAddressForUser(address _address) returns(bool);\n', '    function proxySetCosignerAddress(address _address, bytes32 _symbol) returns(bool);\n', '}\n', '\n', 'contract AssetMin is SafeMin {\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Approve(address indexed from, address indexed spender, uint value);\n', '\n', '    MultiAsset public multiAsset;\n', '    bytes32 public symbol;\n', '    string public name;\n', '\n', '    function init(address _multiAsset, bytes32 _symbol) immutable(address(multiAsset)) returns(bool) {\n', '        MultiAsset ma = MultiAsset(_multiAsset);\n', '        if (!ma.isCreated(_symbol)) {\n', '            return false;\n', '        }\n', '        multiAsset = ma;\n', '        symbol = _symbol;\n', '        return true;\n', '    }\n', '\n', '    function setName(string _name) returns(bool) {\n', '        if (bytes(name).length != 0) {\n', '            return false;\n', '        }\n', '        name = _name;\n', '        return true;\n', '    }\n', '\n', '    modifier onlyMultiAsset() {\n', '        if (msg.sender == address(multiAsset)) {\n', '            _;\n', '        }\n', '    }\n', '\n', '    function totalSupply() constant returns(uint) {\n', '        return multiAsset.totalSupply(symbol);\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns(uint) {\n', '        return multiAsset.balanceOf(_owner, symbol);\n', '    }\n', '\n', '    function allowance(address _from, address _spender) constant returns(uint) {\n', '        return multiAsset.allowance(_from, _spender, symbol);\n', '    }\n', '\n', '    function transfer(address _to, uint _value) returns(bool) {\n', '        return __transferWithReference(_to, _value, "");\n', '    }\n', '\n', '    function transferWithReference(address _to, uint _value, string _reference) returns(bool) {\n', '        return __transferWithReference(_to, _value, _reference);\n', '    }\n', '\n', '    function __transferWithReference(address _to, uint _value, string _reference) private returns(bool) {\n', '        return _isHuman() ?\n', '            multiAsset.proxyTransferWithReference(_to, _value, symbol, _reference) :\n', '            multiAsset.transferFromWithReference(msg.sender, _to, _value, symbol, _reference);\n', '    }\n', '\n', '    function transferToICAP(bytes32 _icap, uint _value) returns(bool) {\n', '        return __transferToICAPWithReference(_icap, _value, "");\n', '    }\n', '\n', '    function transferToICAPWithReference(bytes32 _icap, uint _value, string _reference) returns(bool) {\n', '        return __transferToICAPWithReference(_icap, _value, _reference);\n', '    }\n', '\n', '    function __transferToICAPWithReference(bytes32 _icap, uint _value, string _reference) private returns(bool) {\n', '        return _isHuman() ?\n', '            multiAsset.proxyTransferToICAPWithReference(_icap, _value, _reference) :\n', '            multiAsset.transferFromToICAPWithReference(msg.sender, _icap, _value, _reference);\n', '    }\n', '    \n', '    function approve(address _spender, uint _value) onlyHuman() returns(bool) {\n', '        return multiAsset.proxyApprove(_spender, _value, symbol);\n', '    }\n', '\n', '    function setCosignerAddress(address _cosigner) onlyHuman() returns(bool) {\n', '        return multiAsset.proxySetCosignerAddress(_cosigner, symbol);\n', '    }\n', '\n', '    function emitTransfer(address _from, address _to, uint _value) onlyMultiAsset() {\n', '        Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function emitApprove(address _from, address _spender, uint _value) onlyMultiAsset() {\n', '        Approve(_from, _spender, _value);\n', '    }\n', '\n', '    function sendToOwner() returns(bool) {\n', '        address owner = multiAsset.owner(symbol);\n', '        return multiAsset.transfer(owner, balanceOf(owner), symbol);\n', '    }\n', '\n', '    function decimals() constant returns(uint8) {\n', '        return multiAsset.baseUnit(symbol);\n', '    }\n', '}\n', '\n', 'contract Owned {\n', '    address public contractOwner;\n', '\n', '    function Owned() {\n', '        contractOwner = msg.sender;\n', '    }\n', '\n', '    modifier onlyContractOwner() {\n', '        if (contractOwner == msg.sender) {\n', '            _;\n', '        }\n', '    }\n', '}\n', '\n', 'contract GMT is AssetMin, Owned {\n', '    uint public txGasPriceLimit = 21000000000;\n', '    uint public refundGas = 40000;\n', '    uint public transferCallGas = 21000;\n', '    uint public transferWithReferenceCallGas = 21000;\n', '    uint public transferToICAPCallGas = 21000;\n', '    uint public transferToICAPWithReferenceCallGas = 21000;\n', '    uint public approveCallGas = 21000;\n', '    uint public forwardCallGas = 21000;\n', '    uint public setCosignerCallGas = 21000;\n', '    EtherTreasuryInterface public treasury;\n', '    mapping(bytes32 => address) public allowedForwards;\n', '\n', '    function updateRefundGas() onlyContractOwner() returns(uint) {\n', '        uint startGas = msg.gas;\n', '        // just to simulate calculations, dunno if optimizer will remove this.\n', '        uint refund = (startGas - msg.gas + refundGas) * tx.gasprice;\n', '        if (tx.gasprice > txGasPriceLimit) {\n', '            return 0;\n', '        }\n', '        // end.\n', '        if (!_refund(1)) {\n', '            return 0;\n', '        }\n', '        refundGas = startGas - msg.gas;\n', '        return refundGas;\n', '    }\n', '\n', '    function setOperationsCallGas(\n', '        uint _transfer,\n', '        uint _transferToICAP,\n', '        uint _transferWithReference,\n', '        uint _transferToICAPWithReference,\n', '        uint _approve,\n', '        uint _forward,\n', '        uint _setCosigner\n', '    )\n', '        onlyContractOwner()\n', '        returns(bool)\n', '    {\n', '        transferCallGas = _transfer;\n', '        transferToICAPCallGas = _transferToICAP;\n', '        transferWithReferenceCallGas = _transferWithReference;\n', '        transferToICAPWithReferenceCallGas = _transferToICAPWithReference;\n', '        approveCallGas = _approve;\n', '        forwardCallGas = _forward;\n', '        setCosignerCallGas = _setCosigner;\n', '        return true;\n', '    }\n', '\n', '    function setupTreasury(address _treasury, uint _txGasPriceLimit) payable onlyContractOwner() returns(bool) {\n', '        if (_txGasPriceLimit == 0) {\n', '            return _safeFalse();\n', '        }\n', '        treasury = EtherTreasuryInterface(_treasury);\n', '        txGasPriceLimit = _txGasPriceLimit;\n', '        if (msg.value > 0) {\n', '            _safeSend(_treasury, msg.value);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function setForward(bytes4 _msgSig, address _forward) onlyContractOwner() returns(bool) {\n', '        allowedForwards[sha3(_msgSig)] = _forward;\n', '        return true;\n', '    }\n', '\n', '    function _stringGas(string _string) constant internal returns(uint) {\n', '        return bytes(_string).length * 75; // ~75 gas per byte, empirical shown 68-72.\n', '    }\n', '\n', '    function _applyRefund(uint _startGas) internal returns(bool) {\n', '        if (tx.gasprice > txGasPriceLimit) {\n', '            return false;\n', '        }\n', '        uint refund = (_startGas - msg.gas + refundGas) * tx.gasprice;\n', '        return _refund(refund);\n', '    }\n', '\n', '    function _refund(uint _value) internal returns(bool) {\n', '        return address(treasury) != 0 && treasury.withdraw(tx.origin, _value);\n', '    }\n', '\n', '    function _transfer(address _to, uint _value) internal returns(bool, bool) {\n', '        uint startGas = msg.gas + transferCallGas;\n', '        if (!super.transfer(_to, _value)) {\n', '            return (false, false);\n', '        }\n', '        return (true, _applyRefund(startGas));\n', '    }\n', '\n', '    function _transferToICAP(bytes32 _icap, uint _value) internal returns(bool, bool) {\n', '        uint startGas = msg.gas + transferToICAPCallGas;\n', '        if (!super.transferToICAP(_icap, _value)) {\n', '            return (false, false);\n', '        }\n', '        return (true, _applyRefund(startGas));\n', '    }\n', '\n', '    function _transferWithReference(address _to, uint _value, string _reference) internal returns(bool, bool) {\n', '        uint startGas = msg.gas + transferWithReferenceCallGas + _stringGas(_reference);\n', '        if (!super.transferWithReference(_to, _value, _reference)) {\n', '            return (false, false);\n', '        }\n', '        return (true, _applyRefund(startGas));\n', '    }\n', '\n', '    function _transferToICAPWithReference(bytes32 _icap, uint _value, string _reference) internal returns(bool, bool) {\n', '        uint startGas = msg.gas + transferToICAPWithReferenceCallGas + _stringGas(_reference);\n', '        if (!super.transferToICAPWithReference(_icap, _value, _reference)) {\n', '            return (false, false);\n', '        }\n', '        return (true, _applyRefund(startGas));\n', '    }\n', '\n', '    function _approve(address _spender, uint _value) internal returns(bool, bool) {\n', '        uint startGas = msg.gas + approveCallGas;\n', '        if (!super.approve(_spender, _value)) {\n', '            return (false, false);\n', '        }\n', '        return (true, _applyRefund(startGas));\n', '    }\n', '\n', '    function _setCosignerAddress(address _cosigner) internal returns(bool, bool) {\n', '        uint startGas = msg.gas + setCosignerCallGas;\n', '        if (!super.setCosignerAddress(_cosigner)) {\n', '            return (false, false);\n', '        }\n', '        return (true, _applyRefund(startGas));\n', '    }\n', '\n', '    function transfer(address _to, uint _value) returns(bool) {\n', '        bool success;\n', '        (success,) = _transfer(_to, _value);\n', '        return success;\n', '    }\n', '\n', '    function transferToICAP(bytes32 _icap, uint _value) returns(bool) {\n', '        bool success;\n', '        (success,) = _transferToICAP(_icap, _value);\n', '        return success;\n', '    }\n', '\n', '    function transferWithReference(address _to, uint _value, string _reference) returns(bool) {\n', '        bool success;\n', '        (success,) = _transferWithReference(_to, _value, _reference);\n', '        return success;\n', '    }\n', '\n', '    function transferToICAPWithReference(bytes32 _icap, uint _value, string _reference) returns(bool) {\n', '        bool success;\n', '        (success,) = _transferToICAPWithReference(_icap, _value, _reference);\n', '        return success;\n', '    }\n', '\n', '    function approve(address _spender, uint _value) returns(bool) {\n', '        bool success;\n', '        (success,) = _approve(_spender, _value);\n', '        return success;\n', '    }\n', '\n', '    function setCosignerAddress(address _cosigner) returns(bool) {\n', '        bool success;\n', '        (success,) = _setCosignerAddress(_cosigner);\n', '        return success;\n', '    }\n', '\n', '    function checkTransfer(address _to, uint _value) constant returns(bool, bool) {\n', '        return _transfer(_to, _value);\n', '    }\n', '\n', '    function checkTransferToICAP(bytes32 _icap, uint _value) constant returns(bool, bool) {\n', '        return _transferToICAP(_icap, _value);\n', '    }\n', '\n', '    function checkTransferWithReference(address _to, uint _value, string _reference) constant returns(bool, bool) {\n', '        return _transferWithReference(_to, _value, _reference);\n', '    }\n', '\n', '    function checkTransferToICAPWithReference(bytes32 _icap, uint _value, string _reference) constant returns(bool, bool) {\n', '        return _transferToICAPWithReference(_icap, _value, _reference);\n', '    }\n', '\n', '    function checkApprove(address _spender, uint _value) constant returns(bool, bool) {\n', '        return _approve(_spender, _value);\n', '    }\n', '\n', '    function checkSetCosignerAddress(address _cosigner) constant returns(bool, bool) {\n', '        return _setCosignerAddress(_cosigner);\n', '    }\n', '\n', '    function checkForward(bytes _data) constant returns(bool, bool) {\n', '        return _forward(allowedForwards[sha3(_data[0], _data[1], _data[2], _data[3])], _data);\n', '    }\n', '\n', '    function _forward(address _to, bytes _data) internal returns(bool, bool) {\n', '        uint startGas = msg.gas + forwardCallGas + (_data.length * 50); // 50 gas per byte;\n', '        if (_to == 0x0) {\n', '            return (false, _safeFalse());\n', '        }\n', '        if (!_to.call.value(msg.value)(_data)) {\n', '            return (false, _safeFalse());\n', '        }\n', '        return (true, _applyRefund(startGas));\n', '    }\n', '\n', '    function () payable {\n', '        _forward(allowedForwards[sha3(msg.sig)], msg.data);\n', '    }\n', '}']