['pragma solidity ^0.4.11;\n', '\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      revert();\n', '    }\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20Basic {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) constant returns (uint);\n', '  function transfer(address to, uint value);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint);\n', '  function transferFrom(address from, address to, uint value);\n', '  function approve(address spender, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint;\n', '\n', '  mapping(address => uint) balances;\n', '\n', '  /**\n', '   * @dev Fix for the ERC20 short address attack.\n', '   */\n', '  modifier onlyPayloadSize(uint size) {\n', '     if(msg.data.length < size + 4) {\n', '       revert();\n', '     }\n', '     _;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implemantation of the basic standart token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is BasicToken, ERC20 {\n', '\n', '  mapping (address => mapping (address => uint)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // if (_value > _allowance) throw;\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint _value) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) revert();\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens than an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '/*\n', '\n', '  Copyright 2017 Bitnan.\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '  http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '\n', '*/\n', '\n', '\n', 'contract BitnanRewardToken is StandardToken {\n', '    /* constants */\n', '    string public constant NAME = "BitnanRewardToken";\n', '    string public constant SYMBOL = "BRT";\n', '    uint public constant DECIMALS = 18;\n', '    uint256 public constant ETH_MIN_GOAL = 3000 ether;\n', '    uint256 public constant ETH_MAX_GOAL = 6000 ether;\n', '    uint256 public constant ORIGIN_ETH_BRT_RATIO = 3000;\n', '    uint public constant UNSOLD_SOLD_RATIO = 50;\n', '    uint public constant PHASE_NUMBER = 5;\n', '    uint public constant BLOCKS_PER_PHASE = 30500;\n', '    uint8[5] public bonusPercents = [\n', '      20,\n', '      15,\n', '      10,\n', '      5,\n', '      0\n', '    ];\n', '\n', '    /* vars */\n', '    address public owner;\n', '    uint public totalEthAmount = 0;\n', '    uint public tokenIssueIndex = 0;\n', '    uint public deadline;\n', '    uint public durationInDays;\n', '    uint public startBlock = 0;\n', '    bool public isLeftTokenIssued = false;\n', '\n', '\n', '    /* events */\n', '    event TokenSaleStart();\n', '    event TokenSaleEnd();\n', '    event FakeOwner(address fakeOwner);\n', '    event CommonError(bytes error);\n', '    event IssueToken(uint index, address addr, uint ethAmount, uint tokenAmount);\n', '    event TokenSaleSucceed();\n', '    event TokenSaleFail();\n', '    event TokenSendFail(uint ethAmount);\n', '\n', '    /* modifier */\n', '    modifier onlyOwner {\n', '      if(msg.sender != owner) {\n', '        FakeOwner(msg.sender);\n', '        revert();\n', '      }\n', '      _;        \n', '    }\n', '    modifier beforeSale {\n', '      if(!saleInProgress()) {\n', '        _;\n', '      }\n', '      else {\n', '        CommonError(&#39;Sale has not started!&#39;);\n', '        revert();\n', '      }\n', '    }\n', '    modifier inSale {\n', '      if(saleInProgress() && !saleOver()) {\n', '        _;\n', '      }\n', '      else {\n', '        CommonError(&#39;Token is not in sale!&#39;);\n', '        revert();\n', '      }\n', '    }\n', '    modifier afterSale {\n', '      if(saleOver()) {\n', '        _;\n', '      }\n', '      else {\n', '        CommonError(&#39;Sale is not over!&#39;);\n', '        revert();\n', '      }\n', '    }\n', '    /* functions */\n', '    function () payable {\n', '      issueToken(msg.sender);\n', '    }\n', '    function issueToken(address recipient) payable inSale {\n', '      assert(msg.value >= 0.01 ether);\n', '      uint tokenAmount = generateTokenAmount(msg.value);\n', '      totalEthAmount = totalEthAmount.add(msg.value);\n', '      totalSupply = totalSupply.add(tokenAmount);\n', '      balances[recipient] = balances[recipient].add(tokenAmount);\n', '      IssueToken(tokenIssueIndex, recipient, msg.value, tokenAmount);\n', '      if(!owner.send(msg.value)) {\n', '        TokenSendFail(msg.value);\n', '        revert();\n', '      }\n', '    }\n', '    function issueLeftToken() internal {\n', '      if(isLeftTokenIssued) {\n', '        CommonError("Left tokens has been issued!");\n', '      }\n', '      else {\n', '        require(totalEthAmount >= ETH_MIN_GOAL);\n', '        uint leftTokenAmount = totalSupply.mul(UNSOLD_SOLD_RATIO).div(100);\n', '        totalSupply = totalSupply.add(leftTokenAmount);\n', '        balances[owner] = balances[owner].add(leftTokenAmount);\n', '        IssueToken(tokenIssueIndex++, owner, 0, leftTokenAmount);\n', '        isLeftTokenIssued = true;\n', '      }\n', '    }\n', '    function BitnanRewardToken(address _owner) {\n', '      owner = _owner;\n', '    }\n', '    function start(uint _startBlock) public onlyOwner beforeSale {\n', '      startBlock = _startBlock;\n', '      TokenSaleStart();\n', '    }\n', '    function close() public onlyOwner afterSale {\n', '      if(totalEthAmount < ETH_MIN_GOAL) {\n', '        TokenSaleFail();\n', '      }\n', '      else {\n', '        issueLeftToken();\n', '        TokenSaleSucceed();\n', '      }\n', '    }\n', '    function generateTokenAmount(uint ethAmount) internal constant returns (uint tokenAmount) {\n', '      uint phase = (block.number - startBlock).div(BLOCKS_PER_PHASE);\n', '      if(phase >= bonusPercents.length) {\n', '        phase = bonusPercents.length - 1;\n', '      }\n', '      uint originTokenAmount = ethAmount.mul(ORIGIN_ETH_BRT_RATIO);\n', '      uint bonusTokenAmount = originTokenAmount.mul(bonusPercents[phase]).div(100);\n', '      tokenAmount = originTokenAmount.add(bonusTokenAmount);\n', '    }\n', '    /* constant functions */\n', '    function saleInProgress() constant returns (bool) {\n', '      return (startBlock > 0 && block.number >= startBlock);\n', '    }\n', '    function saleOver() constant returns (bool) {\n', '      return startBlock > 0 && (saleOverInTime() || saleOverReachMaxETH());\n', '    }\n', '    function saleOverInTime() constant returns (bool) {\n', '      return block.number >= startBlock + BLOCKS_PER_PHASE * PHASE_NUMBER;\n', '    }\n', '    function saleOverReachMaxETH() constant returns (bool) {\n', '      return totalEthAmount >= ETH_MAX_GOAL;\n', '    }\n', '}']
['pragma solidity ^0.4.11;\n', '\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      revert();\n', '    }\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20Basic {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) constant returns (uint);\n', '  function transfer(address to, uint value);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint);\n', '  function transferFrom(address from, address to, uint value);\n', '  function approve(address spender, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint;\n', '\n', '  mapping(address => uint) balances;\n', '\n', '  /**\n', '   * @dev Fix for the ERC20 short address attack.\n', '   */\n', '  modifier onlyPayloadSize(uint size) {\n', '     if(msg.data.length < size + 4) {\n', '       revert();\n', '     }\n', '     _;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implemantation of the basic standart token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is BasicToken, ERC20 {\n', '\n', '  mapping (address => mapping (address => uint)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // if (_value > _allowance) throw;\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint _value) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) revert();\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens than an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '/*\n', '\n', '  Copyright 2017 Bitnan.\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '  http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '\n', '*/\n', '\n', '\n', 'contract BitnanRewardToken is StandardToken {\n', '    /* constants */\n', '    string public constant NAME = "BitnanRewardToken";\n', '    string public constant SYMBOL = "BRT";\n', '    uint public constant DECIMALS = 18;\n', '    uint256 public constant ETH_MIN_GOAL = 3000 ether;\n', '    uint256 public constant ETH_MAX_GOAL = 6000 ether;\n', '    uint256 public constant ORIGIN_ETH_BRT_RATIO = 3000;\n', '    uint public constant UNSOLD_SOLD_RATIO = 50;\n', '    uint public constant PHASE_NUMBER = 5;\n', '    uint public constant BLOCKS_PER_PHASE = 30500;\n', '    uint8[5] public bonusPercents = [\n', '      20,\n', '      15,\n', '      10,\n', '      5,\n', '      0\n', '    ];\n', '\n', '    /* vars */\n', '    address public owner;\n', '    uint public totalEthAmount = 0;\n', '    uint public tokenIssueIndex = 0;\n', '    uint public deadline;\n', '    uint public durationInDays;\n', '    uint public startBlock = 0;\n', '    bool public isLeftTokenIssued = false;\n', '\n', '\n', '    /* events */\n', '    event TokenSaleStart();\n', '    event TokenSaleEnd();\n', '    event FakeOwner(address fakeOwner);\n', '    event CommonError(bytes error);\n', '    event IssueToken(uint index, address addr, uint ethAmount, uint tokenAmount);\n', '    event TokenSaleSucceed();\n', '    event TokenSaleFail();\n', '    event TokenSendFail(uint ethAmount);\n', '\n', '    /* modifier */\n', '    modifier onlyOwner {\n', '      if(msg.sender != owner) {\n', '        FakeOwner(msg.sender);\n', '        revert();\n', '      }\n', '      _;        \n', '    }\n', '    modifier beforeSale {\n', '      if(!saleInProgress()) {\n', '        _;\n', '      }\n', '      else {\n', "        CommonError('Sale has not started!');\n", '        revert();\n', '      }\n', '    }\n', '    modifier inSale {\n', '      if(saleInProgress() && !saleOver()) {\n', '        _;\n', '      }\n', '      else {\n', "        CommonError('Token is not in sale!');\n", '        revert();\n', '      }\n', '    }\n', '    modifier afterSale {\n', '      if(saleOver()) {\n', '        _;\n', '      }\n', '      else {\n', "        CommonError('Sale is not over!');\n", '        revert();\n', '      }\n', '    }\n', '    /* functions */\n', '    function () payable {\n', '      issueToken(msg.sender);\n', '    }\n', '    function issueToken(address recipient) payable inSale {\n', '      assert(msg.value >= 0.01 ether);\n', '      uint tokenAmount = generateTokenAmount(msg.value);\n', '      totalEthAmount = totalEthAmount.add(msg.value);\n', '      totalSupply = totalSupply.add(tokenAmount);\n', '      balances[recipient] = balances[recipient].add(tokenAmount);\n', '      IssueToken(tokenIssueIndex, recipient, msg.value, tokenAmount);\n', '      if(!owner.send(msg.value)) {\n', '        TokenSendFail(msg.value);\n', '        revert();\n', '      }\n', '    }\n', '    function issueLeftToken() internal {\n', '      if(isLeftTokenIssued) {\n', '        CommonError("Left tokens has been issued!");\n', '      }\n', '      else {\n', '        require(totalEthAmount >= ETH_MIN_GOAL);\n', '        uint leftTokenAmount = totalSupply.mul(UNSOLD_SOLD_RATIO).div(100);\n', '        totalSupply = totalSupply.add(leftTokenAmount);\n', '        balances[owner] = balances[owner].add(leftTokenAmount);\n', '        IssueToken(tokenIssueIndex++, owner, 0, leftTokenAmount);\n', '        isLeftTokenIssued = true;\n', '      }\n', '    }\n', '    function BitnanRewardToken(address _owner) {\n', '      owner = _owner;\n', '    }\n', '    function start(uint _startBlock) public onlyOwner beforeSale {\n', '      startBlock = _startBlock;\n', '      TokenSaleStart();\n', '    }\n', '    function close() public onlyOwner afterSale {\n', '      if(totalEthAmount < ETH_MIN_GOAL) {\n', '        TokenSaleFail();\n', '      }\n', '      else {\n', '        issueLeftToken();\n', '        TokenSaleSucceed();\n', '      }\n', '    }\n', '    function generateTokenAmount(uint ethAmount) internal constant returns (uint tokenAmount) {\n', '      uint phase = (block.number - startBlock).div(BLOCKS_PER_PHASE);\n', '      if(phase >= bonusPercents.length) {\n', '        phase = bonusPercents.length - 1;\n', '      }\n', '      uint originTokenAmount = ethAmount.mul(ORIGIN_ETH_BRT_RATIO);\n', '      uint bonusTokenAmount = originTokenAmount.mul(bonusPercents[phase]).div(100);\n', '      tokenAmount = originTokenAmount.add(bonusTokenAmount);\n', '    }\n', '    /* constant functions */\n', '    function saleInProgress() constant returns (bool) {\n', '      return (startBlock > 0 && block.number >= startBlock);\n', '    }\n', '    function saleOver() constant returns (bool) {\n', '      return startBlock > 0 && (saleOverInTime() || saleOverReachMaxETH());\n', '    }\n', '    function saleOverInTime() constant returns (bool) {\n', '      return block.number >= startBlock + BLOCKS_PER_PHASE * PHASE_NUMBER;\n', '    }\n', '    function saleOverReachMaxETH() constant returns (bool) {\n', '      return totalEthAmount >= ETH_MAX_GOAL;\n', '    }\n', '}']
