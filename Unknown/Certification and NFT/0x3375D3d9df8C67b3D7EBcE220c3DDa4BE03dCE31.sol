['pragma solidity ^0.4.11;\n', '\n', '//\n', '// ==== DISCLAIMER ====\n', '//\n', '// ETHEREUM IS STILL AN EXPEREMENTAL TECHNOLOGY.\n', '// ALTHOUGH THIS SMART CONTRACT WAS CREATED WITH GREAT CARE AND IN THE HOPE OF BEING USEFUL, NO GUARANTEES OF FLAWLESS OPERATION CAN BE GIVEN.\n', '// IN PARTICULAR - SUBTILE BUGS, HACKER ATTACKS OR MALFUNCTION OF UNDERLYING TECHNOLOGY CAN CAUSE UNINTENTIONAL BEHAVIOUR.\n', '// YOU ARE STRONGLY ENCOURAGED TO STUDY THIS SMART CONTRACT CAREFULLY IN ORDER TO UNDERSTAND POSSIBLE EDGE CASES AND RISKS.\n', '// DON&#39;T USE THIS SMART CONTRACT IF YOU HAVE SUBSTANTIAL DOUBTS OR IF YOU DON&#39;T KNOW WHAT YOU ARE DOING.\n', '//\n', '// THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY\n', '// AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n', '// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,\n', '// OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n', '// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n', '// ====\n', '//\n', '//\n', '// ==== PARANOIA NOTICE ====\n', '// A careful reader will find some additional checks and excessive code, consuming some extra gas. This is intentional.\n', '// Even though the contract should work without these parts, they make the code more secure in production and for future refactoring.\n', '// Also, they show more clearly what we have considered and addressed during development.\n', '// Discussion is welcome!\n', '// ====\n', '//\n', '\n', '/// @author written by ethernian for Santiment Sagl\n', '/// @notice report bugs to: <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="c8aabdafbb88adbca0adbaa6a1a9a6e6aba7a5">[email&#160;protected]</a>\n', '/// @title Santiment WhiteList contract\n', 'contract SantimentWhiteList {\n', '\n', '    string constant public VERSION = "0.3.1";\n', '\n', '    function () { throw; }   //explicitly unpayable\n', '\n', '    struct Limit {\n', '        uint24 min;  //finney\n', '        uint24 max;  //finney\n', '    }\n', '\n', '    struct LimitWithAddr {\n', '        address addr;\n', '        uint24 min; //finney\n', '        uint24 max; //finney\n', '    }\n', '\n', '    mapping(address=>Limit) public allowed;\n', '    uint16  public chunkNr = 0;\n', '    uint    public recordNum = 0;\n', '    uint256 public controlSum = 0;\n', '    bool public isSetupMode = true;\n', '    address public admin;\n', '\n', '    function SantimentWhiteList() { admin = msg.sender; }\n', '\n', '    ///@dev add next address package to the internal white list.\n', '    ///@dev call is allowed in setup mode only.\n', '    function addPack(address[] addrs, uint24[] mins, uint24[] maxs, uint16 _chunkNr)\n', '    setupOnly\n', '    adminOnly\n', '    external {\n', '        var len = addrs.length;\n', '        require ( chunkNr++ == _chunkNr);\n', '        require ( mins.length == len &&  mins.length == len );\n', '        for(uint16 i=0; i<len; ++i) {\n', '            var addr = addrs[i];\n', '            var max  = maxs[i];\n', '            var min  = mins[i];\n', '            Limit lim = allowed[addr];\n', '            //remove old record if exists\n', '            if (lim.max > 0) {\n', '                controlSum -= uint160(addr) + lim.min + lim.max;\n', '                delete allowed[addr];\n', '            }\n', '            //insert record if max > 0\n', '            if (max > 0) {\n', '                // max > 0 means add a new record into the list.\n', '                allowed[addr] = Limit({min:min, max:max});\n', '                controlSum += uint160(addr) + min + max;\n', '            }\n', '        }//for\n', '        recordNum+=len;\n', '    }\n', '\n', '    ///@notice switch off setup mode\n', '    function start()\n', '    adminOnly\n', '    public {\n', '        isSetupMode = false;\n', '    }\n', '\n', '    modifier setupOnly {\n', '        if ( !isSetupMode ) throw;\n', '        _;\n', '    }\n', '\n', '    modifier adminOnly {\n', '        if (msg.sender != admin) throw;\n', '        _;\n', '    }\n', '\n', '}']