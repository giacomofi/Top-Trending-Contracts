['pragma solidity 0.4.15;\n', '\n', 'interface STQToken {\n', '    function mint(address _to, uint256 _amount) external;\n', '}\n', '\n', '/**\n', ' * @title Helps contracts guard agains rentrancy attacks.\n', ' * @author Remco Bloemen <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="3d4f58505e527d0f">[email&#160;protected]</a>π.com>\n', ' * @notice If you mark a function `nonReentrant`, you should also\n', ' * mark it `external`.\n', ' */\n', 'contract ReentrancyGuard {\n', '\n', '  /**\n', '   * @dev We use a single lock for the whole contract.\n', '   */\n', '  bool private rentrancy_lock = false;\n', '\n', '  /**\n', '   * @dev Prevents a contract from calling itself, directly or indirectly.\n', '   * @notice If you mark a function `nonReentrant`, you should also\n', '   * mark it `external`. Calling one nonReentrant function from\n', '   * another is not supported. Instead, you can implement a\n', '   * `private` function doing the actual work, and a `external`\n', '   * wrapper marked as `nonReentrant`.\n', '   */\n', '  modifier nonReentrant() {\n', '    require(!rentrancy_lock);\n', '    rentrancy_lock = true;\n', '    _;\n', '    rentrancy_lock = false;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '\n', '/// @title Storiqa pre-sale contract\n', 'contract STQPreSale is Ownable, ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '\n', '    function STQPreSale(address token, address funds) {\n', '        require(address(0) != address(token) && address(0) != address(funds));\n', '\n', '        m_token = STQToken(token);\n', '        m_funds = funds;\n', '    }\n', '\n', '\n', '    // PUBLIC interface: payments\n', '\n', '    // fallback function as a shortcut\n', '    function() payable {\n', '        require(0 == msg.data.length);\n', '        buy();  // only internal call here!\n', '    }\n', '\n', '    /// @notice ICO participation\n', '    /// @return number of STQ tokens bought (with all decimal symbols)\n', '    function buy()\n', '        public\n', '        payable\n', '        nonReentrant\n', '        returns (uint)\n', '    {\n', '        address investor = msg.sender;\n', '        uint256 payment = msg.value;\n', '        require(payment >= c_MinInvestment);\n', '        require(now < 1507766400);\n', '\n', '        // issue tokens\n', '        uint stq = payment.mul(c_STQperETH);\n', '        m_token.mint(investor, stq);\n', '\n', '        // record payment\n', '        m_funds.transfer(payment);\n', '        FundTransfer(investor, payment, true);\n', '\n', '        return stq;\n', '    }\n', '\n', '    /// @notice Tests ownership of the current caller.\n', '    /// @return true if it&#39;s an owner\n', '    // It&#39;s advisable to call it by new owner to make sure that the same erroneous address is not copy-pasted to\n', '    // addOwner/changeOwner and to isOwner.\n', '    function amIOwner() external constant onlyOwner returns (bool) {\n', '        return true;\n', '    }\n', '\n', '\n', '    // FIELDS\n', '\n', '    /// @notice starting exchange rate of STQ\n', '    uint public constant c_STQperETH = 150000;\n', '\n', '    /// @notice minimum investment\n', '    uint public constant c_MinInvestment = 10 finney;\n', '\n', '    /// @dev contract responsible for token accounting\n', '    STQToken public m_token;\n', '\n', '    /// @dev address responsible for investments accounting\n', '    address public m_funds;\n', '}']
['pragma solidity 0.4.15;\n', '\n', 'interface STQToken {\n', '    function mint(address _to, uint256 _amount) external;\n', '}\n', '\n', '/**\n', ' * @title Helps contracts guard agains rentrancy attacks.\n', ' * @author Remco Bloemen <remco@2π.com>\n', ' * @notice If you mark a function `nonReentrant`, you should also\n', ' * mark it `external`.\n', ' */\n', 'contract ReentrancyGuard {\n', '\n', '  /**\n', '   * @dev We use a single lock for the whole contract.\n', '   */\n', '  bool private rentrancy_lock = false;\n', '\n', '  /**\n', '   * @dev Prevents a contract from calling itself, directly or indirectly.\n', '   * @notice If you mark a function `nonReentrant`, you should also\n', '   * mark it `external`. Calling one nonReentrant function from\n', '   * another is not supported. Instead, you can implement a\n', '   * `private` function doing the actual work, and a `external`\n', '   * wrapper marked as `nonReentrant`.\n', '   */\n', '  modifier nonReentrant() {\n', '    require(!rentrancy_lock);\n', '    rentrancy_lock = true;\n', '    _;\n', '    rentrancy_lock = false;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '\n', '/// @title Storiqa pre-sale contract\n', 'contract STQPreSale is Ownable, ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '\n', '    function STQPreSale(address token, address funds) {\n', '        require(address(0) != address(token) && address(0) != address(funds));\n', '\n', '        m_token = STQToken(token);\n', '        m_funds = funds;\n', '    }\n', '\n', '\n', '    // PUBLIC interface: payments\n', '\n', '    // fallback function as a shortcut\n', '    function() payable {\n', '        require(0 == msg.data.length);\n', '        buy();  // only internal call here!\n', '    }\n', '\n', '    /// @notice ICO participation\n', '    /// @return number of STQ tokens bought (with all decimal symbols)\n', '    function buy()\n', '        public\n', '        payable\n', '        nonReentrant\n', '        returns (uint)\n', '    {\n', '        address investor = msg.sender;\n', '        uint256 payment = msg.value;\n', '        require(payment >= c_MinInvestment);\n', '        require(now < 1507766400);\n', '\n', '        // issue tokens\n', '        uint stq = payment.mul(c_STQperETH);\n', '        m_token.mint(investor, stq);\n', '\n', '        // record payment\n', '        m_funds.transfer(payment);\n', '        FundTransfer(investor, payment, true);\n', '\n', '        return stq;\n', '    }\n', '\n', '    /// @notice Tests ownership of the current caller.\n', "    /// @return true if it's an owner\n", "    // It's advisable to call it by new owner to make sure that the same erroneous address is not copy-pasted to\n", '    // addOwner/changeOwner and to isOwner.\n', '    function amIOwner() external constant onlyOwner returns (bool) {\n', '        return true;\n', '    }\n', '\n', '\n', '    // FIELDS\n', '\n', '    /// @notice starting exchange rate of STQ\n', '    uint public constant c_STQperETH = 150000;\n', '\n', '    /// @notice minimum investment\n', '    uint public constant c_MinInvestment = 10 finney;\n', '\n', '    /// @dev contract responsible for token accounting\n', '    STQToken public m_token;\n', '\n', '    /// @dev address responsible for investments accounting\n', '    address public m_funds;\n', '}']
