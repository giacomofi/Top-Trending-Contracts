['contract etherlist_top {\n', '\n', '  // www.etherlist.top\n', '  \n', '  struct Participant {\n', '      address etherAddress;\n', '      uint amount;\n', '\t  uint paid;\n', '\t  uint lastPayment;\n', '  }\n', '\n', '  Participant[] public participants;\n', '\n', '  uint public payoutIdx = 0;\n', '  uint public collectedFees;\n', '  uint public balance;\n', '  uint public lastTimestamp = block.timestamp;\n', '  uint public rand_num = block.timestamp % participants.length;\n', '\n', '  address public owner;\n', '\n', '  modifier onlyowner { if (msg.sender == owner) _ }\n', '\n', '  function etherlist_top() {\n', '    owner = msg.sender;\n', '\tbalance = 0;\n', '\tcollectedFees = 0;\n', '  }\n', '\n', '  function() {\n', '    enter();\n', '  }\n', '  \n', '  function enter() {\n', '\n', '  if(msg.value > 5000000000000000000){\n', '    msg.sender.send(msg.value);\n', '    return;\n', '  }\n', '\t   collectedFees += msg.value / 20;\n', '\t   balance += (msg.value - (msg.value / 20));\n', '\t   lastTimestamp = block.timestamp;\n', '\t   rand_num = (((lastTimestamp+balance) % participants.length) * block.difficulty + msg.value) % participants.length;\n', '\t   \n', '\t   uint i = 0;\n', '\t   uint i2 = rand_num;\n', '\t   while(i < participants.length){\n', '\t     if(balance > 0){\n', '\t\tif(participants.length - participants[i2].lastPayment > 3 || participants[i2].lastPayment == 0)\n', '\t\t if(participants[i2].amount >= balance){\n', '\t\t   participants[i2].etherAddress.send(balance);\n', '\t\t   participants[i2].paid += balance;\n', '\t\t   participants[i2].lastPayment = participants.length +1;\n', '\t\t   balance = 0;\n', '\t\t   }\n', '\t\t   else{\n', '\t\t   participants[i2].etherAddress.send(participants[i2].amount);\n', '\t\t   balance -= participants[i2].amount;  \n', '\t\t   participants[i2].paid += participants[i2].amount;\n', '\t\t   participants[i2].lastPayment = participants.length +1;\n', '\t\t   }\n', '\t\t }\n', '\t\t else\n', '\t\t   break;\n', '\t\t\n', '\t\t i2 += rand_num + 1;\n', '\t\t if(i2 > participants.length)\n', '\t\t    i2 = i2 % participants.length;\t   \n', '\t     i += 1;\n', '\t   }\n', '\n', '\t   uint idx = participants.length;\n', '       participants.length += 1;\n', '       participants[idx].amount = msg.value;\n', '\t   participants[idx].etherAddress = msg.sender;\n', '\t   participants[idx].paid = 0;\n', '\t   participants[idx].lastPayment = 0;\n', '\t   \n', '       return;\n', '  }\n', '\n', '  function collectFees() onlyowner {\n', '      if (collectedFees == 0) return;\n', '\n', '      owner.send(collectedFees);\n', '      collectedFees = 0;\n', '  }\n', '  \n', '\n', '  function setOwner(address _owner) onlyowner {\n', '      owner = _owner;\n', '  }\n', '}']