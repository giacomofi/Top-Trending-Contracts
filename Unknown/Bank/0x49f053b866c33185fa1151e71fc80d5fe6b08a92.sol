['contract FivePercent \n', '{\n', '  \tstruct Participant \n', '\t{\n', '      \t\taddress etherAddress;\n', '      \t\tuint amount;\n', '\t}\n', ' \tParticipant[] private participants;\n', '  \t\n', '\tuint private payoutIdx = 0;\n', '  \tuint private balance = 0;\n', '\tuint private factor =105; //105% payout\n', '    \t//Fallback function\n', '        function() \n', '\t{\n', '\t        init();\n', '    \t}\n', '  \n', '        //init function run on fallback\n', '   \tfunction init() private\n', '\t{\n', '\t        //Ensures only tx with value between min. 10 finney (0.01 ether) and max. 10 ether are processed \n', '    \t\tif (msg.value < 10 finney) \n', '\t\t{\n', '        \t\tmsg.sender.send(msg.value);\n', '        \t\treturn;\n', '    \t\t}\n', '\t\tuint amount;\n', '\t\tif (msg.value > 10 ether) \n', '\t\t{\n', '\t\t\tmsg.sender.send(msg.value - 10 ether);\t\n', '\t\t\tamount = 10 ether;\n', '                }\n', '\t\telse \n', '\t\t{\n', '\t\t\tamount = msg.value;\n', '\t\t}\n', '\t  \t// add a new participant to array\n', '    \t\tuint idx = participants.length;\n', '    \t\tparticipants.length += 1;\n', '    \t\tparticipants[idx].etherAddress = msg.sender;\n', '    \t\tparticipants[idx].amount = amount ;\n', '\t\t// update contract balance\n', '       \t\tbalance += amount ;\n', ' \t\t// while there are enough ether on the balance we can pay out to an earlier participant\n', '    \t\twhile (balance > factor*participants[payoutIdx].amount / 100 ) \n', '\t\t{\n', '\t\t\tuint transactionAmount = factor* participants[payoutIdx].amount / 100;\n', '      \t\t\tparticipants[payoutIdx].etherAddress.send(transactionAmount);\n', '\t\t\tbalance -= transactionAmount;\n', '      \t\t\tpayoutIdx += 1;\n', '    \t\t}\n', '  \t}\n', ' \n', '\tfunction Infos() constant returns (uint BalanceInFinney, uint Participants, uint PayOutIndex,uint NextPayout, string info) \n', '\t{\n', '        \tBalanceInFinney = balance / 1 finney;\n', '        \tPayOutIndex=payoutIdx;\n', '\t\tParticipants=participants.length;\n', '\t\tNextPayout =factor*participants[payoutIdx].amount / 1 finney;\n', '\t\tNextPayout=NextPayout /100;\n', "\t\tinfo = 'All amounts in Finney (1 Ether = 1000 Finney)';\n", '    \t}\n', '\n', '\tfunction participantDetails(uint nr) constant returns (address Address, uint PayinInFinney, uint PayoutInFinney, string PaidOut)\n', '    \t{\n', "\t\tPaidOut='N.A.';\n", '\t\tAddress=0;\n', '\t\tPayinInFinney=0;\n', '\t\tPayoutInFinney=0;\n', '        \tif (nr < participants.length) {\n', '            \tAddress = participants[nr].etherAddress;\n', '\n', '            \tPayinInFinney = participants[nr].amount / 1 finney;\n', '\t\tPayoutInFinney= factor*PayinInFinney/100;\n', "\t\tPaidOut='no';\n", "\t\tif (nr<payoutIdx){PaidOut='yes';}\t\t\n", '\n', '        }\n', '    }\n', '\n', '}']