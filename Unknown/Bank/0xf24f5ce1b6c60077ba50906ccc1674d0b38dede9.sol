['pragma solidity ^0.4.13;\n', '\n', 'contract Postman {\n', '    struct data{address home; uint256 value; uint256 reward;bool delivered;}\n', '    address private owner;\n', '    uint public fee;\n', '    uint public fee2;\n', '    uint256 private balance;\n', '    data[] private que;\n', '    uint[] private undelivered;\n', '    event Report(string message,uint index);\n', '    function Postman(){owner = msg.sender;fee = 2;fee2=50;balance=0;}\n', '    function()payable{revert();}\n', '    function draw(){if(balance > 0){owner.transfer(balance);balance-=balance;}}\n', '    function mails_to_deliver()constant returns(uint[]){return undelivered;}\n', '    function get_mail(uint index)constant returns(uint256){return que[index].reward;}\n', '    function update_fee(uint new_fee,uint new_fee2){if(msg.sender != owner){revert();}fee = new_fee;fee2 =new_fee2;}\n', '    function post (address x,uint percent) payable \n', '        {\n', '            if(msg.value <= 0 || percent < 1 || percent > 1000 )revert();\n', '            balance += (msg.value * fee)/100;\n', '            que.push(data({delivered:false,home:x,reward:((msg.value - (msg.value * fee)/100) * percent)/1000,value: msg.value - (msg.value * fee)/100 - (((msg.value - (msg.value * fee)/100) * percent)/1000)}));\n', '            undelivered.push(1);\n', '        } \n', '    function deliver(uint index,uint direct)\n', '        {\n', '            if(undelivered[index] == 0)revert();\n', '            W w = new W();\n', '            w.boom.value(que[index].value)(que[index].home);\n', '            if((que[index].reward * 2) > msg.gas && direct == 1){this.post.value(que[index].reward)(msg.sender,fee2);}\n', '            else{msg.sender.transfer(que[index].reward);}\n', '            Report("Message Delivered:",index);\n', '            delete undelivered[index];\n', '            delete que[index];\n', '        }\n', '}\n', '\n', 'contract W{function W(){}function boom(address x)payable{selfdestruct(x);}}']