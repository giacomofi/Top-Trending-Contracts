['pragma solidity ^0.4.16;\n', '\n', 'contract Neulaut {\n', '\n', '    uint256 public totalSupply = 10**26;\n', '    uint256 public fee = 10**16; // 0.01 NUA\n', '    address owner = 0x1E79E69BFC1aB996c6111952B388412aA248c926;\n', '    string public name = "Neulaut";\n', '    uint8 public decimals = 18;\n', '    string public symbol = "NUA";\n', '    mapping (address => uint256) balances;\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    function Neulaut() {\n', '        balances[owner] = totalSupply;\n', '    }\n', '    \n', '    function() payable {\n', '        revert();\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        require(_value > fee);\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += (_value - fee);\n', '        balances[owner] += fee;\n', '        Transfer(msg.sender, _to, (_value - fee));\n', '        Transfer(msg.sender, owner, fee);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.16;\n', '\n', 'contract Neulaut {\n', '\n', '    uint256 public totalSupply = 10**26;\n', '    uint256 public fee = 10**16; // 0.01 NUA\n', '    address owner = 0x1E79E69BFC1aB996c6111952B388412aA248c926;\n', '    string public name = "Neulaut";\n', '    uint8 public decimals = 18;\n', '    string public symbol = "NUA";\n', '    mapping (address => uint256) balances;\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    function Neulaut() {\n', '        balances[owner] = totalSupply;\n', '    }\n', '    \n', '    function() payable {\n', '        revert();\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        require(_value > fee);\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += (_value - fee);\n', '        balances[owner] += fee;\n', '        Transfer(msg.sender, _to, (_value - fee));\n', '        Transfer(msg.sender, owner, fee);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}']
