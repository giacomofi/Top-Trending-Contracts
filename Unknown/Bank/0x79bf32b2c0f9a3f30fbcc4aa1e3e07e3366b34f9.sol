['pragma solidity ^0.4.11;\n', '\n', '/** @title Decentralized Identification Number (DIN) registry. */\n', 'contract DINRegistry {\n', '\n', '    struct Record {\n', '        address owner;\n', '        address resolver;  // Address where product information is stored. \n', '        uint256 updated;   // Unix timestamp.\n', '    }\n', '\n', '    // DIN => Record\n', '    mapping (uint256 => Record) records;\n', '\n', '    // The address of DINRegistrar.\n', '    address public registrar;\n', '\n', '    // The first DIN registered.\n', '    uint256 public genesis;\n', '\n', '    modifier only_registrar {\n', '        require(registrar == msg.sender);\n', '        _;\n', '    }\n', '\n', '    modifier only_owner(uint256 DIN) {\n', '        require(records[DIN].owner == msg.sender);\n', '        _;\n', '    }\n', '\n', '    // Logged when the owner of a DIN transfers ownership to a new account.\n', '    event NewOwner(uint256 indexed DIN, address indexed owner);\n', '\n', '    // Logged when the resolver associated with a DIN changes.\n', '    event NewResolver(uint256 indexed DIN, address indexed resolver);\n', '\n', '    // Logged when a new DIN is registered.\n', '    event NewRegistration(uint256 indexed DIN, address indexed owner);\n', '\n', '    // Logged when the DINRegistrar contract changes.\n', '    event NewRegistrar(address indexed registrar);\n', '\n', '    /** @dev Constructor.\n', '      * @param _genesis The first DIN registered.\n', '      */\n', '    function DINRegistry(uint256 _genesis) {\n', '        genesis = _genesis;\n', '\n', '        // Register the genesis DIN to the account that deploys this contract.\n', '        records[genesis].owner = msg.sender;\n', '        records[genesis].updated = block.timestamp;\n', '        NewRegistration(genesis, msg.sender);\n', '    }\n', '\n', '    // Get the owner of a specified DIN.\n', '    function owner(uint256 DIN) constant returns (address) {\n', '        return records[DIN].owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer ownership of a DIN.\n', '     * @param DIN The DIN to transfer.\n', '     * @param owner The address of the new owner.\n', '     */\n', '    function setOwner(uint256 DIN, address owner) only_owner(DIN) {\n', '        records[DIN].owner = owner;\n', '        records[DIN].updated = block.timestamp;\n', '        NewOwner(DIN, owner);\n', '    }\n', '\n', '    // Get the resolver of a specified DIN.\n', '    function resolver(uint256 DIN) constant returns (address) {\n', '        return records[DIN].resolver;\n', '    }\n', '\n', '    /**\n', '     * @dev Set the resolver of a DIN.\n', '     * @param DIN The DIN to update.\n', '     * @param resolver The address of the resolver.\n', '     */\n', '    function setResolver(uint256 DIN, address resolver) only_owner(DIN) {\n', '        records[DIN].resolver = resolver;\n', '        records[DIN].updated = block.timestamp;\n', '        NewResolver(DIN, resolver);\n', '    }\n', '\n', '    // Get the time a specified DIN record was last updated.\n', '    function updated(uint256 DIN) constant returns (uint256) {\n', '        return records[DIN].updated;\n', '    } \n', '\n', '    /**\n', '     * @dev Register a new DIN.\n', '     * @param owner The account that will own the DIN.\n', '     */\n', '    function register(uint256 DIN, address owner) only_registrar {\n', '        records[DIN].owner = owner;\n', '        records[DIN].updated = block.timestamp;\n', '        NewRegistration(DIN, owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Change the DINRegistrar contract.\n', '     * @param _registrar The address of the new registrar.\n', '     */\n', '    function setRegistrar(address _registrar) only_owner(genesis) {\n', '        registrar = _registrar;\n', '        NewRegistrar(_registrar);\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.11;\n', '\n', '/** @title Decentralized Identification Number (DIN) registry. */\n', 'contract DINRegistry {\n', '\n', '    struct Record {\n', '        address owner;\n', '        address resolver;  // Address where product information is stored. \n', '        uint256 updated;   // Unix timestamp.\n', '    }\n', '\n', '    // DIN => Record\n', '    mapping (uint256 => Record) records;\n', '\n', '    // The address of DINRegistrar.\n', '    address public registrar;\n', '\n', '    // The first DIN registered.\n', '    uint256 public genesis;\n', '\n', '    modifier only_registrar {\n', '        require(registrar == msg.sender);\n', '        _;\n', '    }\n', '\n', '    modifier only_owner(uint256 DIN) {\n', '        require(records[DIN].owner == msg.sender);\n', '        _;\n', '    }\n', '\n', '    // Logged when the owner of a DIN transfers ownership to a new account.\n', '    event NewOwner(uint256 indexed DIN, address indexed owner);\n', '\n', '    // Logged when the resolver associated with a DIN changes.\n', '    event NewResolver(uint256 indexed DIN, address indexed resolver);\n', '\n', '    // Logged when a new DIN is registered.\n', '    event NewRegistration(uint256 indexed DIN, address indexed owner);\n', '\n', '    // Logged when the DINRegistrar contract changes.\n', '    event NewRegistrar(address indexed registrar);\n', '\n', '    /** @dev Constructor.\n', '      * @param _genesis The first DIN registered.\n', '      */\n', '    function DINRegistry(uint256 _genesis) {\n', '        genesis = _genesis;\n', '\n', '        // Register the genesis DIN to the account that deploys this contract.\n', '        records[genesis].owner = msg.sender;\n', '        records[genesis].updated = block.timestamp;\n', '        NewRegistration(genesis, msg.sender);\n', '    }\n', '\n', '    // Get the owner of a specified DIN.\n', '    function owner(uint256 DIN) constant returns (address) {\n', '        return records[DIN].owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer ownership of a DIN.\n', '     * @param DIN The DIN to transfer.\n', '     * @param owner The address of the new owner.\n', '     */\n', '    function setOwner(uint256 DIN, address owner) only_owner(DIN) {\n', '        records[DIN].owner = owner;\n', '        records[DIN].updated = block.timestamp;\n', '        NewOwner(DIN, owner);\n', '    }\n', '\n', '    // Get the resolver of a specified DIN.\n', '    function resolver(uint256 DIN) constant returns (address) {\n', '        return records[DIN].resolver;\n', '    }\n', '\n', '    /**\n', '     * @dev Set the resolver of a DIN.\n', '     * @param DIN The DIN to update.\n', '     * @param resolver The address of the resolver.\n', '     */\n', '    function setResolver(uint256 DIN, address resolver) only_owner(DIN) {\n', '        records[DIN].resolver = resolver;\n', '        records[DIN].updated = block.timestamp;\n', '        NewResolver(DIN, resolver);\n', '    }\n', '\n', '    // Get the time a specified DIN record was last updated.\n', '    function updated(uint256 DIN) constant returns (uint256) {\n', '        return records[DIN].updated;\n', '    } \n', '\n', '    /**\n', '     * @dev Register a new DIN.\n', '     * @param owner The account that will own the DIN.\n', '     */\n', '    function register(uint256 DIN, address owner) only_registrar {\n', '        records[DIN].owner = owner;\n', '        records[DIN].updated = block.timestamp;\n', '        NewRegistration(DIN, owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Change the DINRegistrar contract.\n', '     * @param _registrar The address of the new registrar.\n', '     */\n', '    function setRegistrar(address _registrar) only_owner(genesis) {\n', '        registrar = _registrar;\n', '        NewRegistrar(_registrar);\n', '    }\n', '\n', '}']
