['pragma solidity ^0.4.11;\n', '\n', 'contract ForeignToken {\n', '    function balanceOf(address _owner) constant returns (uint256);\n', '    function transfer(address _to, uint256 _value) returns (bool);\n', '}\n', '\n', 'contract EliteToken { \n', '    /* Public variables of the token */\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    address owner;\n', '    \n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '    \n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    \n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function EliteToken() {\n', '        /* Unless you add other functions these variables will never change */\n', '        balanceOf[this] = 100;\n', '        name = "EliteToken";     \n', '        symbol = "ELT";\n', '        owner = msg.sender;\n', '        \n', '        /* If you want a divisible token then add the amount of decimals the base unit has  */\n', '        decimals = 0;\n', '    }\n', '\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) {\n', '        /* if the sender doenst have enough balance then stop */\n', '        if (balanceOf[msg.sender] < _value) throw;\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) throw;\n', '        \n', '        /* Add and subtract new balances */\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[_to] += _value;\n', '        \n', '        /* Notifiy anyone listening that this transfer took place */\n', '        Transfer(msg.sender, _to, _value);\n', '    }\n', '    \n', '    /* Buy coins */\n', '    function() payable {\n', '        if (msg.value == 0) { return; }\n', '        owner.transfer(msg.value);\n', '        uint256 amount = msg.value / 1000000000000000000;  // calculates the amount\n', '        if (balanceOf[this] < amount) throw;               // checks if it has enough to sell\n', '        balanceOf[msg.sender] += amount;                   // adds the amount to buyer&#39;s balance\n', '        balanceOf[this] -= amount;                         // subtracts amount from seller&#39;s balance\n', '        Transfer(this, msg.sender, amount);                // execute an event reflecting the change\n', '    }\n', '    \n', '    /* Withdraw foreign*/\n', '    function WithdrawForeign(address _tokenContract) returns (bool) {\n', '        if (msg.sender != owner) { throw; }\n', '\n', '        ForeignToken token = ForeignToken(_tokenContract);\n', '\n', '        uint256 amount = token.balanceOf(address(this));\n', '        return token.transfer(owner, amount);\n', '    }\n', '}']