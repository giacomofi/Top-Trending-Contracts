['pragma solidity ^0.4.11;\n', '\n', '    // ----------------------------------------------------------------------------\n', '    // Integrative Wallet Token & Crowdsale\n', '    // Iwtoken.com\n', '    // Developer from @Adatum\n', '    // Taking ideas from @BokkyPooBah \n', '    // ----------------------------------------------------------------------------\n', '    \n', '\n', '     // ----------------------------------------------------------------------------\n', '     // Safe maths, borrowed from OpenZeppelin\n', '    // ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Add a number to another number, checking for overflows\n', '    // ------------------------------------------------------------------------\n', '    function add(uint a, uint b) internal returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a && c >= b);\n', '        return c;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Subtract a number from another number, checking for underflows\n', '    // ------------------------------------------------------------------------\n', '    function sub(uint a, uint b) internal returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        if (msg.sender != owner) throw;\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', ' \n', '    function acceptOwnership() {\n', '        if (msg.sender == newOwner) {\n', '            OwnershipTransferred(owner, newOwner);\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals\n', '// https://github.com/ethereum/EIPs/issues/20\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Token is Owned {\n', '    using SafeMath for uint;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total Supply\n', '    // ------------------------------------------------------------------------\n', '    uint256 _totalSupply = 100000000.000000000000000000;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Balances for each account\n', '    // ------------------------------------------------------------------------\n', '    mapping(address => uint256) balances;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner of account approves the transfer of an amount to another account\n', '    // ------------------------------------------------------------------------\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the total token supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() constant returns (uint256 totalSupply) {\n', '        totalSupply = _totalSupply;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the account balance of another account with address _owner\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer the balance from owner&#39;s account to another account\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address _to, uint256 _amount) returns (bool success) {\n', '        if (balances[msg.sender] >= _amount                // User has balance\n', '            && _amount > 0                                 // Non-zero transfer\n', '            && balances[_to] + _amount > balances[_to]     // Overflow check\n', '        ) {\n', '            balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '            balances[_to] = balances[_to].add(_amount);\n', '            Transfer(msg.sender, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Allow _spender to withdraw from your account, multiple times, up to the\n', '    // _value amount. If this function is called again it overwrites the\n', '    // current allowance with _value.\n', '    // ------------------------------------------------------------------------\n', '    function approve(\n', '        address _spender,\n', '        uint256 _amount\n', '    ) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Spender of tokens transfer an amount of tokens from the token owner&#39;s\n', '    // balance to the spender&#39;s account. The owner of the tokens must already\n', '    // have approve(...)-d this transfer\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', '    ) returns (bool success) {\n', '        if (balances[_from] >= _amount                  // From a/c has balance\n', '            && allowed[_from][msg.sender] >= _amount    // Transfer approved\n', '            && _amount > 0                              // Non-zero transfer\n', '            && balances[_to] + _amount > balances[_to]  // Overflow check\n', '        ) {\n', '            balances[_from] = balances[_from].sub(_amount);\n', '            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '            balances[_to] = balances[_to].add(_amount);\n', '            Transfer(_from, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', '    // transferred to the spender&#39;s account\n', '    // ------------------------------------------------------------------------\n', '    function allowance(\n', '        address _owner, \n', '        address _spender\n', '    ) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender,\n', '        uint256 _value);\n', '}\n', '\n', '\n', 'contract IntegrativeWalletToken is ERC20Token {\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token information\n', '    // ------------------------------------------------------------------------\n', '    string public constant symbol = "IWT";\n', '    string public constant name = "Integrative Wallet Token";\n', '    uint256 public constant decimals = 18;\n', '    uint256 public constant IWTfund = 55 * (10**6) * 10**decimals;   // 55m reserved for foundation and expenses.\n', '\n', '    // Initial date 2017-08-31 : 13 00 hs UTC\n', '    uint256 public constant STARTDATE = 1504184400;\n', '    uint256 public constant ENDDATE = STARTDATE + 28 days;\n', '\n', '    // Cap USD 12.5 mil @ 196.88 ETH/USD -> 12.5m / 196.88 -> 63490 -> 63500\n', '    uint256 public constant CAP = 63500 ether;\n', '\n', '    // Cannot have a constant address here - Solidity bug\n', '    address public multisig = 0xf82D89f274e2C5FE9FD3202C5426ABE47D2099Cd;\n', '    address public iwtfundtokens = 0x1E408cE343F4a392B430dFC5E3e2fE3B6a9Cc580;\n', '\n', '\n', '    uint256 public totalEthers;\n', '\n', '    function IntegrativeWalletToken() {\n', '\t\t\n', '\t  balances[iwtfundtokens] = IWTfund;   // 55m IWT reserved for use Fundation\n', '\n', '    }\n', '\n', '  \n', '    // ------------------------------------------------------------------------\n', '    // Tokens per ETH\n', '    // Day  1-7  : 1,200 IWT = 1 Ether\n', '    // Days 8–14 : 1,000 IWT = 1 Ether\n', '    // Days 15–21: 800   IWT = 1 Ether\n', '    // Days 22–27: 600   IWT = 1 Ether\n', '    // ------------------------------------------------------------------------\n', '\t\n', '    function buyPrice() constant returns (uint256) {\n', '        return buyPriceAt(now);\n', '    }\n', '\n', '    function buyPriceAt(uint256 at) constant returns (uint256) {\n', '        if (at < STARTDATE) {\n', '            return 0;\n', '        } else if (at < (STARTDATE + 1 days)) {\n', '            return 1200;\n', '        } else if (at < (STARTDATE + 8 days)) {\n', '            return 1000;\n', '        } else if (at < (STARTDATE + 15 days)) {\n', '            return 800;\n', '        } else if (at < (STARTDATE + 22 days)) {\n', '            return 600;\n', '        } else if (at <= ENDDATE) {\n', '            return 600;\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Buy tokens from the contract\n', '    // ------------------------------------------------------------------------\n', '    function () payable {\n', '        proxyPayment(msg.sender);\n', '    }\n', '\n', '    function proxyPayment(address participant) payable {\n', '        // No contributions before the start of the crowdsale\n', '        require(now >= STARTDATE);\n', '        // No contributions after the end of the crowdsale\n', '        require(now <= ENDDATE);\n', '        // No 0 contributions\n', '        require(msg.value > 0);\n', '\n', '        // Add ETH raised to total\n', '        totalEthers = totalEthers.add(msg.value);\n', '        // Cannot exceed cap\n', '        require(totalEthers <= CAP);\n', '\n', '        // What is the IWT to ETH rate\n', '        uint256 _buyPrice = buyPrice();\n', '\n', '        // Calculate #IWT - this is safe as _buyPrice is known\n', '        // and msg.value is restricted to valid values\n', '        uint tokens = msg.value * _buyPrice;\n', '\n', '        // Check tokens > 0\n', '        require(tokens > 0);\n', '   \n', '\n', '        // Add to balances\n', '        balances[participant] = balances[participant].add(tokens);\n', '\n', '        // Log events\n', '        TokensBought(participant, msg.value, totalEthers, tokens, _totalSupply, _buyPrice);\n', '        Transfer(0x0, participant, tokens);\n', '\n', '        // Move the funds to a safe wallet\n', '        multisig.transfer(msg.value);\n', '    }\n', '    event TokensBought(address indexed buyer, uint256 ethers, \n', '        uint256 newEtherBalance, uint256 tokens, \n', '        uint256 newTotalSupply, uint256 buyPrice);\n', '\n', '\n', '    function addPrecommitment(address participant, uint balance) onlyOwner {\n', '        require(now < STARTDATE);\n', '        require(balance > 0);\n', '        balances[participant] = balances[participant].add(balance);\n', '        _totalSupply = _totalSupply.add(balance);\n', '        Transfer(0x0, participant, balance);\n', '    }\n', '\n', '\n', '    function transfer(address _to, uint _amount) returns (bool success) {\n', '        // Cannot transfer before crowdsale ends or cap reached\n', '        require(now > ENDDATE || totalEthers == CAP);\n', '        // Standard transfer\n', '        return super.transfer(_to, _amount);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _amount) \n', '        returns (bool success)\n', '    {\n', '        // Cannot transfer before crowdsale ends or cap reached\n', '        require(now > ENDDATE || totalEthers == CAP);\n', '        // Standard transferFrom\n', '        return super.transferFrom(_from, _to, _amount);\n', '    }\n', '\n', '\n', '    function transferAnyERC20Token(address tokenAddress, uint amount)\n', '      onlyOwner returns (bool success) \n', '    {\n', '        return ERC20Token(tokenAddress).transfer(owner, amount);\n', '    }\n', '    \n', '    // ----------------------------------------------------------------------------\n', '    // Integrative Wallet Token & Crowdsale\n', '    // Iwtoken.com\n', '    // Developer from @Adatum\n', '    // Taking ideas from @BokkyPooBah \n', '    // ----------------------------------------------------------------------------\n', '    \n', '    \n', '}']
['pragma solidity ^0.4.11;\n', '\n', '    // ----------------------------------------------------------------------------\n', '    // Integrative Wallet Token & Crowdsale\n', '    // Iwtoken.com\n', '    // Developer from @Adatum\n', '    // Taking ideas from @BokkyPooBah \n', '    // ----------------------------------------------------------------------------\n', '    \n', '\n', '     // ----------------------------------------------------------------------------\n', '     // Safe maths, borrowed from OpenZeppelin\n', '    // ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Add a number to another number, checking for overflows\n', '    // ------------------------------------------------------------------------\n', '    function add(uint a, uint b) internal returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a && c >= b);\n', '        return c;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Subtract a number from another number, checking for underflows\n', '    // ------------------------------------------------------------------------\n', '    function sub(uint a, uint b) internal returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        if (msg.sender != owner) throw;\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', ' \n', '    function acceptOwnership() {\n', '        if (msg.sender == newOwner) {\n', '            OwnershipTransferred(owner, newOwner);\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals\n', '// https://github.com/ethereum/EIPs/issues/20\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Token is Owned {\n', '    using SafeMath for uint;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total Supply\n', '    // ------------------------------------------------------------------------\n', '    uint256 _totalSupply = 100000000.000000000000000000;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Balances for each account\n', '    // ------------------------------------------------------------------------\n', '    mapping(address => uint256) balances;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner of account approves the transfer of an amount to another account\n', '    // ------------------------------------------------------------------------\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the total token supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() constant returns (uint256 totalSupply) {\n', '        totalSupply = _totalSupply;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the account balance of another account with address _owner\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from owner's account to another account\n", '    // ------------------------------------------------------------------------\n', '    function transfer(address _to, uint256 _amount) returns (bool success) {\n', '        if (balances[msg.sender] >= _amount                // User has balance\n', '            && _amount > 0                                 // Non-zero transfer\n', '            && balances[_to] + _amount > balances[_to]     // Overflow check\n', '        ) {\n', '            balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '            balances[_to] = balances[_to].add(_amount);\n', '            Transfer(msg.sender, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Allow _spender to withdraw from your account, multiple times, up to the\n', '    // _value amount. If this function is called again it overwrites the\n', '    // current allowance with _value.\n', '    // ------------------------------------------------------------------------\n', '    function approve(\n', '        address _spender,\n', '        uint256 _amount\n', '    ) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Spender of tokens transfer an amount of tokens from the token owner's\n", "    // balance to the spender's account. The owner of the tokens must already\n", '    // have approve(...)-d this transfer\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', '    ) returns (bool success) {\n', '        if (balances[_from] >= _amount                  // From a/c has balance\n', '            && allowed[_from][msg.sender] >= _amount    // Transfer approved\n', '            && _amount > 0                              // Non-zero transfer\n', '            && balances[_to] + _amount > balances[_to]  // Overflow check\n', '        ) {\n', '            balances[_from] = balances[_from].sub(_amount);\n', '            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '            balances[_to] = balances[_to].add(_amount);\n', '            Transfer(_from, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    // ------------------------------------------------------------------------\n', '    function allowance(\n', '        address _owner, \n', '        address _spender\n', '    ) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender,\n', '        uint256 _value);\n', '}\n', '\n', '\n', 'contract IntegrativeWalletToken is ERC20Token {\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token information\n', '    // ------------------------------------------------------------------------\n', '    string public constant symbol = "IWT";\n', '    string public constant name = "Integrative Wallet Token";\n', '    uint256 public constant decimals = 18;\n', '    uint256 public constant IWTfund = 55 * (10**6) * 10**decimals;   // 55m reserved for foundation and expenses.\n', '\n', '    // Initial date 2017-08-31 : 13 00 hs UTC\n', '    uint256 public constant STARTDATE = 1504184400;\n', '    uint256 public constant ENDDATE = STARTDATE + 28 days;\n', '\n', '    // Cap USD 12.5 mil @ 196.88 ETH/USD -> 12.5m / 196.88 -> 63490 -> 63500\n', '    uint256 public constant CAP = 63500 ether;\n', '\n', '    // Cannot have a constant address here - Solidity bug\n', '    address public multisig = 0xf82D89f274e2C5FE9FD3202C5426ABE47D2099Cd;\n', '    address public iwtfundtokens = 0x1E408cE343F4a392B430dFC5E3e2fE3B6a9Cc580;\n', '\n', '\n', '    uint256 public totalEthers;\n', '\n', '    function IntegrativeWalletToken() {\n', '\t\t\n', '\t  balances[iwtfundtokens] = IWTfund;   // 55m IWT reserved for use Fundation\n', '\n', '    }\n', '\n', '  \n', '    // ------------------------------------------------------------------------\n', '    // Tokens per ETH\n', '    // Day  1-7  : 1,200 IWT = 1 Ether\n', '    // Days 8–14 : 1,000 IWT = 1 Ether\n', '    // Days 15–21: 800   IWT = 1 Ether\n', '    // Days 22–27: 600   IWT = 1 Ether\n', '    // ------------------------------------------------------------------------\n', '\t\n', '    function buyPrice() constant returns (uint256) {\n', '        return buyPriceAt(now);\n', '    }\n', '\n', '    function buyPriceAt(uint256 at) constant returns (uint256) {\n', '        if (at < STARTDATE) {\n', '            return 0;\n', '        } else if (at < (STARTDATE + 1 days)) {\n', '            return 1200;\n', '        } else if (at < (STARTDATE + 8 days)) {\n', '            return 1000;\n', '        } else if (at < (STARTDATE + 15 days)) {\n', '            return 800;\n', '        } else if (at < (STARTDATE + 22 days)) {\n', '            return 600;\n', '        } else if (at <= ENDDATE) {\n', '            return 600;\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Buy tokens from the contract\n', '    // ------------------------------------------------------------------------\n', '    function () payable {\n', '        proxyPayment(msg.sender);\n', '    }\n', '\n', '    function proxyPayment(address participant) payable {\n', '        // No contributions before the start of the crowdsale\n', '        require(now >= STARTDATE);\n', '        // No contributions after the end of the crowdsale\n', '        require(now <= ENDDATE);\n', '        // No 0 contributions\n', '        require(msg.value > 0);\n', '\n', '        // Add ETH raised to total\n', '        totalEthers = totalEthers.add(msg.value);\n', '        // Cannot exceed cap\n', '        require(totalEthers <= CAP);\n', '\n', '        // What is the IWT to ETH rate\n', '        uint256 _buyPrice = buyPrice();\n', '\n', '        // Calculate #IWT - this is safe as _buyPrice is known\n', '        // and msg.value is restricted to valid values\n', '        uint tokens = msg.value * _buyPrice;\n', '\n', '        // Check tokens > 0\n', '        require(tokens > 0);\n', '   \n', '\n', '        // Add to balances\n', '        balances[participant] = balances[participant].add(tokens);\n', '\n', '        // Log events\n', '        TokensBought(participant, msg.value, totalEthers, tokens, _totalSupply, _buyPrice);\n', '        Transfer(0x0, participant, tokens);\n', '\n', '        // Move the funds to a safe wallet\n', '        multisig.transfer(msg.value);\n', '    }\n', '    event TokensBought(address indexed buyer, uint256 ethers, \n', '        uint256 newEtherBalance, uint256 tokens, \n', '        uint256 newTotalSupply, uint256 buyPrice);\n', '\n', '\n', '    function addPrecommitment(address participant, uint balance) onlyOwner {\n', '        require(now < STARTDATE);\n', '        require(balance > 0);\n', '        balances[participant] = balances[participant].add(balance);\n', '        _totalSupply = _totalSupply.add(balance);\n', '        Transfer(0x0, participant, balance);\n', '    }\n', '\n', '\n', '    function transfer(address _to, uint _amount) returns (bool success) {\n', '        // Cannot transfer before crowdsale ends or cap reached\n', '        require(now > ENDDATE || totalEthers == CAP);\n', '        // Standard transfer\n', '        return super.transfer(_to, _amount);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _amount) \n', '        returns (bool success)\n', '    {\n', '        // Cannot transfer before crowdsale ends or cap reached\n', '        require(now > ENDDATE || totalEthers == CAP);\n', '        // Standard transferFrom\n', '        return super.transferFrom(_from, _to, _amount);\n', '    }\n', '\n', '\n', '    function transferAnyERC20Token(address tokenAddress, uint amount)\n', '      onlyOwner returns (bool success) \n', '    {\n', '        return ERC20Token(tokenAddress).transfer(owner, amount);\n', '    }\n', '    \n', '    // ----------------------------------------------------------------------------\n', '    // Integrative Wallet Token & Crowdsale\n', '    // Iwtoken.com\n', '    // Developer from @Adatum\n', '    // Taking ideas from @BokkyPooBah \n', '    // ----------------------------------------------------------------------------\n', '    \n', '    \n', '}']
