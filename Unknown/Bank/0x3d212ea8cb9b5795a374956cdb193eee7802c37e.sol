['pragma solidity ^0.4.15;\n', '\n', '/// @title Ethereum Lottery Game.\n', '\n', 'contract EtherLotto {\n', '\n', '    // Amount of ether needed for participating in the lottery.\n', '    uint constant TICKET_AMOUNT = 10;\n', '\n', '    // Fixed amount fee for each lottery game.\n', '    uint constant FEE_AMOUNT = 1;\n', '\n', '    // Address where fee is sent.\n', '    address public bank;\n', '\n', '    // Public jackpot that each participant can win (minus fee).\n', '    uint public pot;\n', '\n', '    // Lottery constructor sets bank account from the smart-contract owner.\n', '    function EtherLotto() {\n', '        bank = msg.sender;\n', '    }\n', '\n', '    // Public function for playing lottery. Each time this function\n', '    // is invoked, the sender has an oportunity for winning pot.\n', '    function play() payable {\n', '\n', '        // Participants must spend some fixed ether before playing lottery.\n', '        assert(msg.value == TICKET_AMOUNT);\n', '\n', '        // Increase pot for each participant.\n', '        pot += msg.value;\n', '\n', '        // Compute some *almost random* value for selecting winner from current transaction.\n', '        var random = uint(block.blockhash(block.number)) + block.timestamp + block.difficulty + block.number;\n', '\n', '        // Distribution: 50% of participants will be winners.\n', '        if (mulmod(random, 1, 2) == 0) {\n', '\n', '            // Send fee to bank account.\n', '            bank.transfer(FEE_AMOUNT);\n', '\n', '            // Send jackpot to winner.\n', '            msg.sender.transfer(pot - FEE_AMOUNT);\n', '\n', '            // Restart jackpot.\n', '            pot = 0;\n', '        }\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.15;\n', '\n', '/// @title Ethereum Lottery Game.\n', '\n', 'contract EtherLotto {\n', '\n', '    // Amount of ether needed for participating in the lottery.\n', '    uint constant TICKET_AMOUNT = 10;\n', '\n', '    // Fixed amount fee for each lottery game.\n', '    uint constant FEE_AMOUNT = 1;\n', '\n', '    // Address where fee is sent.\n', '    address public bank;\n', '\n', '    // Public jackpot that each participant can win (minus fee).\n', '    uint public pot;\n', '\n', '    // Lottery constructor sets bank account from the smart-contract owner.\n', '    function EtherLotto() {\n', '        bank = msg.sender;\n', '    }\n', '\n', '    // Public function for playing lottery. Each time this function\n', '    // is invoked, the sender has an oportunity for winning pot.\n', '    function play() payable {\n', '\n', '        // Participants must spend some fixed ether before playing lottery.\n', '        assert(msg.value == TICKET_AMOUNT);\n', '\n', '        // Increase pot for each participant.\n', '        pot += msg.value;\n', '\n', '        // Compute some *almost random* value for selecting winner from current transaction.\n', '        var random = uint(block.blockhash(block.number)) + block.timestamp + block.difficulty + block.number;\n', '\n', '        // Distribution: 50% of participants will be winners.\n', '        if (mulmod(random, 1, 2) == 0) {\n', '\n', '            // Send fee to bank account.\n', '            bank.transfer(FEE_AMOUNT);\n', '\n', '            // Send jackpot to winner.\n', '            msg.sender.transfer(pot - FEE_AMOUNT);\n', '\n', '            // Restart jackpot.\n', '            pot = 0;\n', '        }\n', '    }\n', '\n', '}']
