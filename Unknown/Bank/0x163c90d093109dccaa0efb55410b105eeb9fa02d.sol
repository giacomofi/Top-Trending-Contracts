['pragma solidity ^0.4.13;\n', '\n', 'contract AbstractENS{\n', '    function owner(bytes32 node) constant returns(address);\n', '    function setOwner(bytes32 node, address owner);\n', '    function setSubnodeOwner(bytes32 node, bytes32 label, address owner);\n', '}\n', '\n', 'contract Registrar {\n', '  function transfer(bytes32 _hash, address newOwner);\n', '  function entries(bytes32 _hash) constant returns (uint, Deed, uint, uint, uint);\n', '}\n', '\n', 'contract Deed {\n', '  address public owner;\n', '  address public previousOwner;\n', '}\n', '\n', 'contract subdomainSale{\n', '  AbstractENS ens = AbstractENS(0x314159265dD8dbb310642f98f50C066173C1259b);\n', '  Registrar registrar = Registrar(0x6090A6e47849629b7245Dfa1Ca21D94cd15878Ef);  \n', '  address admin = 0x8301Fb8945760Fa2B3C669e8F420B8795Dc03766;\n', '\n', '  struct Domain{\n', '    address originalOwner;\n', '    uint commitPeriod;\n', '    uint regPeriod;\n', '    bool subSale;\n', '    uint subPrice;\n', '    uint subExpiry;\n', '  }\n', '\n', '  mapping(bytes32=>Domain) records;\n', '\n', '  modifier deed_check(bytes32 label){\n', '     Deed deed;\n', '     (,deed,,,) = registrar.entries(label); \n', '     if(deed.owner() != address(this)) throw;\n', '     _;\n', '  }\n', ' \n', '  modifier prevOwn_check(bytes32 label){\n', '    Deed deed;\n', '     (,deed,,,) = registrar.entries(label); \n', '     if(deed.previousOwner() != msg.sender) throw;\n', '     _;\n', '  }\n', '\n', '  modifier ens_check(bytes32 node){\n', '    if(ens.owner(node) != address(this)) throw;\n', '    _;\n', '  }\n', '\n', '\n', '  modifier recorded_owner(bytes32 node){\n', '    if (records[node].originalOwner != msg.sender) throw;\n', '    _;\n', '  }\n', '\n', '  function subdomainSale() {}\n', '\n', '  function listSubName(bytes32 label,bytes32 node,uint commit, uint price,uint expiry) prevOwn_check(label) deed_check(label) ens_check(node){\n', '    require(records[node].subSale == false); \n', '\n', '    records[node].originalOwner=msg.sender;\n', '    records[node].subSale=true;\n', '    records[node].subPrice=price;\n', '    records[node].subExpiry=expiry;\n', '    records[node].commitPeriod=now + commit + 86400;\n', '  }\n', '\n', '  function unlistSubName(bytes32 label,bytes32 node) recorded_owner(node) ens_check(node) deed_check(label){\n', '    require(records[node].subSale == true); \n', '    require(records[node].commitPeriod <= now);    \n', '\n', '    ens.setOwner(node,records[node].originalOwner);\n', '    registrar.transfer(label,records[node].originalOwner);\n', '\n', '    records[node].originalOwner=address(0x0);\n', '    records[node].subSale=false;\n', '    records[node].subPrice = 0;\n', '    records[node].subExpiry = 0;\n', '    records[node].commitPeriod=0;\n', '  }\n', '\n', '  function nodeCheck(bytes32 node) returns(address){\n', '    return ens.owner(node);\n', '  }\n', '\n', '  function subRegistrationPeriod(bytes32 node) returns(uint){\n', '    return records[node].subExpiry;\n', '  }\n', '\n', '  function checkSubAvailability(bytes32 node) returns(bool){\n', '    return records[node].subSale;\n', '  }\n', '\n', '  function checkSubPrice(bytes32 node) returns(uint){\n', '    return records[node].subPrice;\n', '  }\n', '\n', '  function checkCommitPeriod(bytes32 node) returns(uint){\n', '    return records[node].commitPeriod;\n', '  }\n', '\n', '  function checkRegPeriod(bytes32 node) returns(uint){\n', '    return records[node].regPeriod;\n', '  }\n', '\n', '  function subBuy(bytes32 ensName,bytes32 subNode,address newOwner) payable ens_check(ensName) {\n', '    require( (records[ensName].subExpiry + now + 5) < records[ensName].commitPeriod );\n', '    require(records[ensName].subSale == true);\n', '    require(msg.value >= records[ensName].subPrice);\n', '    \n', '    var newNode = sha3(ensName,subNode);\n', '    require(records[newNode].regPeriod < now);\n', '\n', '    uint fee = msg.value/20;\n', '    uint netPrice = msg.value - fee;\n', '\n', '    admin.transfer(fee);\n', '    records[ensName].originalOwner.transfer(netPrice);\n', '\n', '    records[newNode].regPeriod = now + records[ensName].subExpiry;\n', '    records[newNode].subSale = false;\n', '    records[newNode].subPrice = 0;\n', '    records[newNode].subExpiry = 0;\n', '    records[newNode].commitPeriod=0;\n', '\n', '    ens.setSubnodeOwner(ensName,subNode,newOwner);\n', '  }\n', '\n', ' function() payable{\n', '    admin.transfer(msg.value);\n', '  }\n', '\n', '}']