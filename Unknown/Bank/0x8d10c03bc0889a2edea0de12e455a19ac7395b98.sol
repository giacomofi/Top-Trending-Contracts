['pragma solidity ^0.4.11;\n', '\n', '/*\n', '    Overflow protected math functions\n', '*/\n', 'contract SafeMath {\n', '    /**\n', '        constructor\n', '    */\n', '    function SafeMath() {\n', '    }\n', '\n', '    /**\n', '        @dev returns the sum of _x and _y, asserts if the calculation overflows\n', '\n', '        @param _x   value 1\n', '        @param _y   value 2\n', '\n', '        @return sum\n', '    */\n', '    function safeAdd(uint256 _x, uint256 _y) internal returns (uint256) {\n', '        uint256 z = _x + _y;\n', '        assert(z >= _x);\n', '        return z;\n', '    }\n', '\n', '    /**\n', '        @dev returns the difference of _x minus _y, asserts if the subtraction results in a negative number\n', '\n', '        @param _x   minuend\n', '        @param _y   subtrahend\n', '\n', '        @return difference\n', '    */\n', '    function safeSub(uint256 _x, uint256 _y) internal returns (uint256) {\n', '        assert(_x >= _y);\n', '        return _x - _y;\n', '    }\n', '\n', '    /**\n', '        @dev returns the product of multiplying _x by _y, asserts if the calculation overflows\n', '\n', '        @param _x   factor 1\n', '        @param _y   factor 2\n', '\n', '        @return product\n', '    */\n', '    function safeMul(uint256 _x, uint256 _y) internal returns (uint256) {\n', '        uint256 z = _x * _y;\n', '        assert(_x == 0 || z / _x == _y);\n', '        return z;\n', '    }\n', '}\n', '\n', '/*\n', '    Bancor Formula interface\n', '*/\n', 'contract IBancorFormula {\n', '    function calculatePurchaseReturn(uint256 _supply, uint256 _reserveBalance, uint16 _reserveRatio, uint256 _depositAmount) public constant returns (uint256);\n', '    function calculateSaleReturn(uint256 _supply, uint256 _reserveBalance, uint16 _reserveRatio, uint256 _sellAmount) public constant returns (uint256);\n', '}\n', '\n', '/*\n', '    Open issues:\n', '    - The formula is not yet super accurate, especially for very small/very high ratios\n', '    - Possibly support dynamic precision in the future\n', '*/\n', '\n', 'contract BancorFormula is IBancorFormula, SafeMath {\n', '\n', '    uint8 constant PRECISION   = 32;  // fractional bits\n', '    uint256 constant FIXED_ONE = uint256(1) << PRECISION; // 0x100000000\n', '    uint256 constant FIXED_TWO = uint256(2) << PRECISION; // 0x200000000\n', '    uint256 constant MAX_VAL   = uint256(1) << (256 - PRECISION); // 0x0000000100000000000000000000000000000000000000000000000000000000\n', '    string public version = &#39;0.1&#39;;\n', '\n', '    function BancorFormula() {\n', '    }\n', '\n', '    /**\n', '        @dev given a token supply, reserve, CRR and a deposit amount (in the reserve token), calculates the return for a given change (in the main token)\n', '\n', '        Formula:\n', '        Return = _supply * ((1 + _depositAmount / _reserveBalance) ^ (_reserveRatio / 100) - 1)\n', '\n', '        @param _supply             token total supply\n', '        @param _reserveBalance     total reserve\n', '        @param _reserveRatio       constant reserve ratio, 1-100\n', '        @param _depositAmount      deposit amount, in reserve token\n', '\n', '        @return purchase return amount\n', '    */\n', '    function calculatePurchaseReturn(uint256 _supply, uint256 _reserveBalance, uint16 _reserveRatio, uint256 _depositAmount) public constant returns (uint256) {\n', '        // validate input\n', '        require(_supply != 0 && _reserveBalance != 0 && _reserveRatio > 0 && _reserveRatio <= 100);\n', '\n', '        // special case for 0 deposit amount\n', '        if (_depositAmount == 0)\n', '            return 0;\n', '\n', '        uint256 baseN = safeAdd(_depositAmount, _reserveBalance);\n', '        uint256 temp;\n', '\n', '        // special case if the CRR = 100\n', '        if (_reserveRatio == 100) {\n', '            temp = safeMul(_supply, baseN) / _reserveBalance;\n', '            return safeSub(temp, _supply); \n', '        }\n', '\n', '        uint256 resN = power(baseN, _reserveBalance, _reserveRatio, 100);\n', '\n', '        temp = safeMul(_supply, resN) / FIXED_ONE;\n', '\n', '        uint256 result =  safeSub(temp, _supply);\n', '        // from the result, we deduct the minimal increment, which is a         \n', '        // function of S and precision.       \n', '        return safeSub(result, _supply / 0x100000000);\n', '     }\n', '\n', '    /**\n', '        @dev given a token supply, reserve, CRR and a sell amount (in the main token), calculates the return for a given change (in the reserve token)\n', '\n', '        Formula:\n', '        Return = _reserveBalance * (1 - (1 - _sellAmount / _supply) ^ (1 / (_reserveRatio / 100)))\n', '\n', '        @param _supply             token total supply\n', '        @param _reserveBalance     total reserve\n', '        @param _reserveRatio       constant reserve ratio, 1-100\n', '        @param _sellAmount         sell amount, in the token itself\n', '\n', '        @return sale return amount\n', '    */\n', '    function calculateSaleReturn(uint256 _supply, uint256 _reserveBalance, uint16 _reserveRatio, uint256 _sellAmount) public constant returns (uint256) {\n', '        // validate input\n', '        require(_supply != 0 && _reserveBalance != 0 && _reserveRatio > 0 && _reserveRatio <= 100 && _sellAmount <= _supply);\n', '\n', '        // special case for 0 sell amount\n', '        if (_sellAmount == 0)\n', '            return 0;\n', '\n', '        uint256 baseN = safeSub(_supply, _sellAmount);\n', '        uint256 temp1;\n', '        uint256 temp2;\n', '\n', '        // special case if the CRR = 100\n', '        if (_reserveRatio == 100) {\n', '            temp1 = safeMul(_reserveBalance, _supply);\n', '            temp2 = safeMul(_reserveBalance, baseN);\n', '            return safeSub(temp1, temp2) / _supply;\n', '        }\n', '\n', '        // special case for selling the entire supply\n', '        if (_sellAmount == _supply)\n', '            return _reserveBalance;\n', '\n', '        uint256 resN = power(_supply, baseN, 100, _reserveRatio);\n', '\n', '        temp1 = safeMul(_reserveBalance, resN);\n', '        temp2 = safeMul(_reserveBalance, FIXED_ONE);\n', '\n', '        uint256 result = safeSub(temp1, temp2) / resN;\n', '\n', '        // from the result, we deduct the minimal increment, which is a         \n', '        // function of R and precision.       \n', '        return safeSub(result, _reserveBalance / 0x100000000);\n', '    }\n', '\n', '    /**\n', '        @dev Calculate (_baseN / _baseD) ^ (_expN / _expD)\n', '        Returns result upshifted by PRECISION\n', '\n', '        This method is overflow-safe\n', '    */ \n', '    function power(uint256 _baseN, uint256 _baseD, uint32 _expN, uint32 _expD) constant returns (uint256 resN) {\n', '        uint256 logbase = ln(_baseN, _baseD);\n', '        // Not using safeDiv here, since safeDiv protects against\n', '        // precision loss. It&#39;s unavoidable, however\n', '        // Both `ln` and `fixedExp` are overflow-safe. \n', '        resN = fixedExp(safeMul(logbase, _expN) / _expD);\n', '        return resN;\n', '\t}\n', '    \n', '    /**\n', '        input range: \n', '            - numerator: [1, uint256_max >> PRECISION]    \n', '            - denominator: [1, uint256_max >> PRECISION]\n', '        output range:\n', '            [0, 0x9b43d4f8d6]\n', '\n', '        This method asserts outside of bounds\n', '\n', '    */\n', '    function ln(uint256 _numerator, uint256 _denominator) public constant returns (uint256) {\n', '        // denominator > numerator: less than one yields negative values. Unsupported\n', '        assert(_denominator <= _numerator);\n', '\n', '        // log(1) is the lowest we can go\n', '        assert(_denominator != 0 && _numerator != 0);\n', '\n', '        // Upper 32 bits are scaled off by PRECISION\n', '        assert(_numerator < MAX_VAL);\n', '        assert(_denominator < MAX_VAL);\n', '\n', '        return fixedLoge( (_numerator * FIXED_ONE) / _denominator);\n', '    }\n', '\n', '    /**\n', '        input range: \n', '            [0x100000000,uint256_max]\n', '        output range:\n', '            [0, 0x9b43d4f8d6]\n', '\n', '        This method asserts outside of bounds\n', '\n', '    */\n', '    function fixedLoge(uint256 _x) constant returns (uint256 logE) {\n', '        /*\n', '        Since `fixedLog2_min` output range is max `0xdfffffffff` \n', '        (40 bits, or 5 bytes), we can use a very large approximation\n', '        for `ln(2)`. This one is used since it&#39;s the max accuracy \n', '        of Python `ln(2)`\n', '\n', '        0xb17217f7d1cf78 = ln(2) * (1 << 56)\n', '        \n', '        */\n', '        //Cannot represent negative numbers (below 1)\n', '        assert(_x >= FIXED_ONE);\n', '\n', '        uint256 log2 = fixedLog2(_x);\n', '        logE = (log2 * 0xb17217f7d1cf78) >> 56;\n', '    }\n', '\n', '    /**\n', '        Returns log2(x >> 32) << 32 [1]\n', '        So x is assumed to be already upshifted 32 bits, and \n', '        the result is also upshifted 32 bits. \n', '        \n', '        [1] The function returns a number which is lower than the \n', '        actual value\n', '\n', '        input-range : \n', '            [0x100000000,uint256_max]\n', '        output-range: \n', '            [0,0xdfffffffff]\n', '\n', '        This method asserts outside of bounds\n', '\n', '    */\n', '    function fixedLog2(uint256 _x) constant returns (uint256) {\n', '        // Numbers below 1 are negative. \n', '        assert( _x >= FIXED_ONE);\n', '\n', '        uint256 hi = 0;\n', '        while (_x >= FIXED_TWO) {\n', '            _x >>= 1;\n', '            hi += FIXED_ONE;\n', '        }\n', '\n', '        for (uint8 i = 0; i < PRECISION; ++i) {\n', '            _x = (_x * _x) / FIXED_ONE;\n', '            if (_x >= FIXED_TWO) {\n', '                _x >>= 1;\n', '                hi += uint256(1) << (PRECISION - 1 - i);\n', '            }\n', '        }\n', '\n', '        return hi;\n', '    }\n', '\n', '    /**\n', '        fixedExp is a &#39;protected&#39; version of `fixedExpUnsafe`, which \n', '        asserts instead of overflows\n', '    */\n', '    function fixedExp(uint256 _x) constant returns (uint256) {\n', '        assert(_x <= 0x386bfdba29);\n', '        return fixedExpUnsafe(_x);\n', '    }\n', '\n', '    /**\n', '        fixedExp \n', '        Calculates e^x according to maclauren summation:\n', '\n', '        e^x = 1+x+x^2/2!...+x^n/n!\n', '\n', '        and returns e^(x>>32) << 32, that is, upshifted for accuracy\n', '\n', '        Input range:\n', '            - Function ok at    <= 242329958953 \n', '            - Function fails at >= 242329958954\n', '\n', '        This method is is visible for testcases, but not meant for direct use. \n', ' \n', '        The values in this method been generated via the following python snippet: \n', '\n', '        def calculateFactorials():\n', '            """Method to print out the factorials for fixedExp"""\n', '\n', '            ni = []\n', '            ni.append( 295232799039604140847618609643520000000) # 34!\n', '            ITERATIONS = 34\n', '            for n in range( 1,  ITERATIONS,1 ) :\n', '                ni.append(math.floor(ni[n - 1] / n))\n', '            print( "\\n        ".join(["xi = (xi * _x) >> PRECISION;\\n        res += xi * %s;" % hex(int(x)) for x in ni]))\n', '\n', '    */\n', '    function fixedExpUnsafe(uint256 _x) constant returns (uint256) {\n', '    \n', '        uint256 xi = FIXED_ONE;\n', '        uint256 res = 0xde1bc4d19efcac82445da75b00000000 * xi;\n', '\n', '        xi = (xi * _x) >> PRECISION;\n', '        res += xi * 0xde1bc4d19efcb0000000000000000000;\n', '        xi = (xi * _x) >> PRECISION;\n', '        res += xi * 0x6f0de268cf7e58000000000000000000;\n', '        xi = (xi * _x) >> PRECISION;\n', '        res += xi * 0x2504a0cd9a7f72000000000000000000;\n', '        xi = (xi * _x) >> PRECISION;\n', '        res += xi * 0x9412833669fdc800000000000000000;\n', '        xi = (xi * _x) >> PRECISION;\n', '        res += xi * 0x1d9d4d714865f500000000000000000;\n', '        xi = (xi * _x) >> PRECISION;\n', '        res += xi * 0x4ef8ce836bba8c0000000000000000;\n', '        xi = (xi * _x) >> PRECISION;\n', '        res += xi * 0xb481d807d1aa68000000000000000;\n', '        xi = (xi * _x) >> PRECISION;\n', '        res += xi * 0x16903b00fa354d000000000000000;\n', '        xi = (xi * _x) >> PRECISION;\n', '        res += xi * 0x281cdaac677b3400000000000000;\n', '        xi = (xi * _x) >> PRECISION;\n', '        res += xi * 0x402e2aad725eb80000000000000;\n', '        xi = (xi * _x) >> PRECISION;\n', '        res += xi * 0x5d5a6c9f31fe24000000000000;\n', '        xi = (xi * _x) >> PRECISION;\n', '        res += xi * 0x7c7890d442a83000000000000;\n', '        xi = (xi * _x) >> PRECISION;\n', '        res += xi * 0x9931ed540345280000000000;\n', '        xi = (xi * _x) >> PRECISION;\n', '        res += xi * 0xaf147cf24ce150000000000;\n', '        xi = (xi * _x) >> PRECISION;\n', '        res += xi * 0xbac08546b867d000000000;\n', '        xi = (xi * _x) >> PRECISION;\n', '        res += xi * 0xbac08546b867d00000000;\n', '        xi = (xi * _x) >> PRECISION;\n', '        res += xi * 0xafc441338061b8000000;\n', '        xi = (xi * _x) >> PRECISION;\n', '        res += xi * 0x9c3cabbc0056e000000;\n', '        xi = (xi * _x) >> PRECISION;\n', '        res += xi * 0x839168328705c80000;\n', '        xi = (xi * _x) >> PRECISION;\n', '        res += xi * 0x694120286c04a0000;\n', '        xi = (xi * _x) >> PRECISION;\n', '        res += xi * 0x50319e98b3d2c400;\n', '        xi = (xi * _x) >> PRECISION;\n', '        res += xi * 0x3a52a1e36b82020;\n', '        xi = (xi * _x) >> PRECISION;\n', '        res += xi * 0x289286e0fce002;\n', '        xi = (xi * _x) >> PRECISION;\n', '        res += xi * 0x1b0c59eb53400;\n', '        xi = (xi * _x) >> PRECISION;\n', '        res += xi * 0x114f95b55400;\n', '        xi = (xi * _x) >> PRECISION;\n', '        res += xi * 0xaa7210d200;\n', '        xi = (xi * _x) >> PRECISION;\n', '        res += xi * 0x650139600;\n', '        xi = (xi * _x) >> PRECISION;\n', '        res += xi * 0x39b78e80;\n', '        xi = (xi * _x) >> PRECISION;\n', '        res += xi * 0x1fd8080;\n', '        xi = (xi * _x) >> PRECISION;\n', '        res += xi * 0x10fbc0;\n', '        xi = (xi * _x) >> PRECISION;\n', '        res += xi * 0x8c40;\n', '        xi = (xi * _x) >> PRECISION;\n', '        res += xi * 0x462;\n', '        xi = (xi * _x) >> PRECISION;\n', '        res += xi * 0x22;\n', '\n', '        return res / 0xde1bc4d19efcac82445da75b00000000;\n', '    }\n', '}']