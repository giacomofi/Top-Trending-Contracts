['pragma solidity ^0.4.4;\n', '\n', 'contract BountyHunt {\n', '  mapping(address => uint) public bountyAmount;\n', '  uint public totalBountyAmount;\n', '\n', '  modifier preventTheft {\n', '    _;  \n', '    if (this.balance < totalBountyAmount) throw;\n', '  }\n', '\n', '  function grantBounty(address beneficiary, uint amount) payable preventTheft {\n', '    bountyAmount[beneficiary] += amount;\n', '    totalBountyAmount += amount;\n', '  }\n', '\n', '  function claimBounty() preventTheft {\n', '    uint balance = bountyAmount[msg.sender];\n', '    if (msg.sender.call.value(balance)()) {\n', '      totalBountyAmount -= balance;\n', '      bountyAmount[msg.sender] = 0;\n', '    }   \n', '  }\n', '\n', '  function transferBounty(address to, uint value) preventTheft {\n', '    if (bountyAmount[msg.sender] >= value) {\n', '      bountyAmount[to] += value;\n', '      bountyAmount[msg.sender] -= value;\n', '    }   \n', '  }\n', '}']
['pragma solidity ^0.4.4;\n', '\n', 'contract BountyHunt {\n', '  mapping(address => uint) public bountyAmount;\n', '  uint public totalBountyAmount;\n', '\n', '  modifier preventTheft {\n', '    _;  \n', '    if (this.balance < totalBountyAmount) throw;\n', '  }\n', '\n', '  function grantBounty(address beneficiary, uint amount) payable preventTheft {\n', '    bountyAmount[beneficiary] += amount;\n', '    totalBountyAmount += amount;\n', '  }\n', '\n', '  function claimBounty() preventTheft {\n', '    uint balance = bountyAmount[msg.sender];\n', '    if (msg.sender.call.value(balance)()) {\n', '      totalBountyAmount -= balance;\n', '      bountyAmount[msg.sender] = 0;\n', '    }   \n', '  }\n', '\n', '  function transferBounty(address to, uint value) preventTheft {\n', '    if (bountyAmount[msg.sender] >= value) {\n', '      bountyAmount[to] += value;\n', '      bountyAmount[msg.sender] -= value;\n', '    }   \n', '  }\n', '}']
