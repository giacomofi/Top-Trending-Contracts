['pragma solidity ^0.4.11;\n', '\n', '/* The Schmeckle */\n', '\n', 'contract TheSchmeckle {\n', '\n', '    string public standard = &#39;CoRToken&#39;;\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '    uint256 public sellPrice;\n', '    uint256 public buyPrice;\n', '\n', '    function TheSchmeckle() {\n', '        totalSupply = 1000000000;\n', '        balanceOf[this] = totalSupply;\n', '        name = &#39;Schmeckle&#39;;\n', '        symbol = &#39;SHM&#39;;\n', '        decimals = 0;\n', '        sellPrice = 100000000000000;\n', '        buyPrice = 100000000000000;\n', '    }\n', '\n', '    mapping (address => uint256) public balanceOf;  \n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    function transfer(address _to, uint256 _value) {\n', '        if (balanceOf[msg.sender] < _value) revert();\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) revert();\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    function buy() payable {\n', '        uint amount = msg.value / buyPrice;\n', '        if (balanceOf[this] < amount) revert();\n', '        balanceOf[msg.sender] += amount;\n', '        balanceOf[this] -= amount;\n', '        Transfer(this, msg.sender, amount);\n', '    }\n', '\n', '    function sell(uint256 amount) {\n', '        if (balanceOf[msg.sender] < amount ) revert();\n', '        balanceOf[this] += amount;\n', '        balanceOf[msg.sender] -= amount;\n', '        if (!msg.sender.send(amount * sellPrice)) {\n', '            revert();\n', '        } else {\n', '            Transfer(msg.sender, this, amount);\n', '        }\n', '    }\n', '    \n', '    function () {\n', '        revert();\n', '    }\n', '}']