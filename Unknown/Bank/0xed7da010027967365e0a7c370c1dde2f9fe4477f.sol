['pragma solidity ^0.4.8;\n', '\n', '// ----------------------------------------------------------------------------\n', "// BokkyPooBah's Ether Refundable Prize\n", '//\n', '// A gift token backed by ethers. Designed to incentivise The DAO refund\n', '// withdrawals, but can be used for any other purposes\n', '//\n', '// These tokens can be bought from this contract at the Buy Price.\n', '//\n', '// These tokens can be sold back to this contract at the Sell Price.\n', '// \n', '// Period                                ETH per BERP\n', '// ------------------------- ------------------------\n', '// From         To               Buy Price Sell Price\n', '// ------------ ------------ ------------- ----------\n', '// start        +7 days             0.0010     0.0010\n', '// +7 days      +30 days            0.0011     0.0010\n', '// +30 days     +60 days            0.0012     0.0010\n', '// +60 days     +90 days            0.0013     0.0010\n', '// +90 days     +365 days           0.0015     0.0010\n', '// +365 days    forever          1000.0000     0.0010\n', '//\n', "// Based on Vlad's Safe Token Sale Mechanism Contract\n", '// - https://medium.com/@Vlad_Zamfir/a-safe-token-sale-mechanism-8d73c430ddd1\n', '//\n', '// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2017. The MIT Licence.\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        if (msg.sender != owner) throw;\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '// ERC Token Standard #20 - https://github.com/ethereum/EIPs/issues/20\n', 'contract ERC20Token is Owned {\n', '    uint256 _totalSupply = 0;\n', '\n', '    // Balances for each account\n', '    mapping(address => uint256) balances;\n', '\n', '    // Owner of account approves the transfer of an amount to another account\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '\n', '    // Get the total token supply\n', '    function totalSupply() constant returns (uint256 totalSupply) {\n', '        totalSupply = _totalSupply;\n', '    }\n', '\n', '    // Get the account balance of another account with address _owner\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    // Send _value amount of tokens to address _to\n', '    function transfer(address _to, uint256 _amount) returns (bool success) {\n', '        if (balances[msg.sender] >= _amount\n', '            && _amount > 0\n', '            && balances[_to] + _amount > balances[_to]) {\n', '            balances[msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(msg.sender, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // Allow _spender to withdraw from your account, multiple times, up to the\n', '    // _value amount. If this function is called again it overwrites the\n', '    // current allowance with _value.\n', '    function approve(\n', '        address _spender,\n', '        uint256 _amount\n', '    ) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', "    // Spender of tokens transfer an amount of tokens from the token owner's\n", "    // balance to the spender's account. The owner of the tokens must already\n", '    // have approve(...)-d this transfer\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', '    ) returns (bool success) {\n', '        if (balances[_from] >= _amount\n', '            && allowed[_from][msg.sender] >= _amount\n', '            && _amount > 0\n', '            && balances[_to] + _amount > balances[_to]) {\n', '            balances[_from] -= _amount;\n', '            allowed[_from][msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(_from, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    function allowance(\n', '        address _owner, \n', '        address _spender\n', '    ) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender,\n', '        uint256 _value);\n', '}\n', '\n', '\n', 'contract BokkyPooBahsEtherRefundablePrize is ERC20Token {\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token information\n', '    // ------------------------------------------------------------------------\n', '    string public constant symbol = "BERP";\n', '    string public constant name = "BokkyPooBahÂ´s Ether Refundable Prize";\n', '    uint8 public constant decimals = 18;\n', '\n', '    uint256 public deployedAt;\n', '\n', '    function BokkyPooBahsEtherRefundablePrize() {\n', '        deployedAt = now;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Members buy tokens from this contract at this price\n', '    //\n', '    // This is a maximum price that the tokens should be bought at, as buyers\n', '    // can always buy tokens from this contract for this price\n', '    //\n', '    // Check out the BERP prices on https://cryptoderivatives.market/ to see\n', '    // if you can buy these tokens for less than this maximum price\n', '    // ------------------------------------------------------------------------\n', '    function buyPrice() constant returns (uint256) {\n', '        return buyPriceAt(now);\n', '    }\n', '\n', '    function buyPriceAt(uint256 at) constant returns (uint256) {\n', '        if (at < (deployedAt + 7 days)) {\n', '            return 10 * 10**14;\n', '        } else if (at < (deployedAt + 30 days)) {\n', '            return 11 * 10**14;\n', '        } else if (at < (deployedAt + 60 days)) {\n', '            return 12 * 10**15;\n', '        } else if (at < (deployedAt + 90 days)) {\n', '            return 13 * 10**15;\n', '        } else if (at < (deployedAt + 365 days)) {\n', '            return 15 * 10**16;\n', '        } else {\n', '            return 10**21;\n', '        }\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Members can always sell to the contract at 1 BERP = 0.001 ETH\n', '    //\n', '    // This is a minimum price that the tokens should sell for, as the owner of\n', '    // the token can always sell tokens to this contract at this price\n', '    //\n', '    // Check out the BERP prices on https://cryptoderivatives.market/ to see\n', '    // if you can sell these tokens for more than this minimum price\n', '    // ------------------------------------------------------------------------\n', '    function sellPrice() constant returns (uint256) {\n', '        return 10**15;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Buy tokens from the contract\n', '    // ------------------------------------------------------------------------\n', '    function () payable {\n', '        buyTokens();\n', '    }\n', '\n', '    function buyTokens() payable {\n', '        if (msg.value > 0) {\n', '            uint tokens = msg.value * 1 ether / buyPrice();\n', '            _totalSupply += tokens;\n', '            balances[msg.sender] += tokens;\n', '            TokensBought(msg.sender, msg.value, this.balance, tokens,\n', '                 _totalSupply, buyPrice());\n', '        }\n', '    }\n', '    event TokensBought(address indexed buyer, uint256 ethers, \n', '        uint256 newEtherBalance, uint256 tokens, uint256 newTotalSupply, \n', '        uint256 buyPrice);\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Sell tokens to the contract\n', '    // ------------------------------------------------------------------------\n', '    function sellTokens(uint256 amountOfTokens) {\n', '        if (amountOfTokens > balances[msg.sender]) throw;\n', '        balances[msg.sender] -= amountOfTokens;\n', '        _totalSupply -= amountOfTokens;\n', '        uint256 ethersToSend = amountOfTokens * sellPrice() / 1 ether;\n', '        if (!msg.sender.send(ethersToSend)) throw;\n', '        TokensSold(msg.sender, ethersToSend, this.balance, amountOfTokens,\n', '            _totalSupply, sellPrice());\n', '    }\n', '    event TokensSold(address indexed seller, uint256 ethers, \n', '        uint256 newEtherBalance, uint256 tokens, uint256 newTotalSupply, \n', '        uint256 sellPrice);\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Receive deposits. This could be a free donation, or fees earned by\n', '    // a system of payments backing this contract\n', '    // ------------------------------------------------------------------------\n', '    function deposit() payable {\n', '        Deposited(msg.value, this.balance);\n', '    }\n', '    event Deposited(uint256 amount, uint256 balance);\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner Withdrawal\n', '    // ------------------------------------------------------------------------\n', '    function ownerWithdraw(uint256 amount) onlyOwner {\n', '        uint256 maxWithdrawalAmount = amountOfEthersOwnerCanWithdraw();\n', '        if (amount > maxWithdrawalAmount) {\n', '            amount = maxWithdrawalAmount;\n', '        }\n', '        if (!owner.send(amount)) throw;\n', '        Withdrawn(amount, maxWithdrawalAmount - amount);\n', '    }\n', '    event Withdrawn(uint256 amount, uint256 remainingWithdrawal);\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Information function\n', '    // ------------------------------------------------------------------------\n', '    function amountOfEthersOwnerCanWithdraw() constant returns (uint256) {\n', '        uint256 etherBalance = this.balance;\n', '        uint256 ethersSupportingTokens = _totalSupply * sellPrice() / 1 ether;\n', '        if (etherBalance > ethersSupportingTokens) {\n', '            return etherBalance - ethersSupportingTokens;\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '\n', '    function currentEtherBalance() constant returns (uint256) {\n', '        return this.balance;\n', '    }\n', '\n', '    function currentTokenBalance() constant returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '}']