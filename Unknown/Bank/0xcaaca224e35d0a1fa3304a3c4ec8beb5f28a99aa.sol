['contract test {\n', '\n', '  struct Person {\n', '      address etherAddress;\n', '      uint amount;\n', '  }\n', '\n', '  Person[] public persons;\n', '\n', '  uint public payoutIdx = 0;\n', '  uint public collectedFees;\n', '  uint public balance = 0;\n', '\n', '  address public owner;\n', '\n', '\n', '  modifier onlyowner { if (msg.sender == owner) _ }\n', '\n', '\n', '  function test() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  function() {\n', '    enter();\n', '  }\n', '  \n', '  function enter() {\n', '  //only pair amount\n', '    if (msg.value % 2 != 0 ) {\n', '        msg.sender.send(msg.value);\n', '        return;\n', '    }\n', '\t\n', '\tuint amount;\n', '\n', '\tamount = msg.value;\n', '\n', '\n', '    uint idx = persons.length;\n', '    persons.length += 1;\n', '    persons[idx].etherAddress = msg.sender;\n', '    persons[idx].amount = amount;\n', ' \n', '    \n', '\n', '      balance += amount;\n', '  \n', '\n', '\n', '    while (balance > persons[payoutIdx].amount * 2) {\n', '      uint transactionAmount = persons[payoutIdx].amount * 2;\n', '      persons[payoutIdx].etherAddress.send(transactionAmount);\n', '\n', '      balance -= transactionAmount;\n', '      payoutIdx += 1;\n', '    }\n', '  }\n', '\n', 'function kill(){\n', '  if(msg.sender == owner) {\n', '  suicide(owner);\n', '  }\n', '  }\n', '\n', '  function setOwner(address _owner) onlyowner {\n', '      owner = _owner;\n', '  }\n', '}']