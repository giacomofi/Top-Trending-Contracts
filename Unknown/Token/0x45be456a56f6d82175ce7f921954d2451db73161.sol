['pragma solidity ^0.4.16;\n', '\n', '// ----------------------------------------------------------------------------\n', '// GBC &#39;Gaze Bounty Coin&#39; token contract\n', '//\n', '// Deployed to : 0x45bE456a56f6D82175Ce7f921954d2451Db73161\n', '// Symbol      : GBC\n', '// Name        : Gaze Bounty Coin\n', '// Total supply: Allocate as required\n', '// Decimals    : 18\n', '//\n', '// Enjoy.\n', '//\n', '// (c) BokkyPooBah / Bok Consulting Pty Ltd for Gaze 2017. The MIT Licence.\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/issues/20\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    uint public totalSupply;\n', '    function balanceOf(address _account) constant returns (uint balance);\n', '    function transfer(address _to, uint _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint _value)\n', '        returns (bool success);\n', '    function approve(address _spender, uint _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant\n', '        returns (uint remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender,\n', '        uint _value);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Current owner, and proposed new owner\n', '    // ------------------------------------------------------------------------\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor - assign creator as the owner\n', '    // ------------------------------------------------------------------------\n', '    function Owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Modifier to mark that a function can only be executed by the owner\n', '    // ------------------------------------------------------------------------\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can initiate transfer of contract to a new owner\n', '    // ------------------------------------------------------------------------\n', '    function transferOwnership(address _newOwner) onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // New owner has to accept transfer of contract\n', '    // ------------------------------------------------------------------------\n', '    function acceptOwnership() {\n', '        require(msg.sender == newOwner);\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = 0x0;\n', '    }\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths, borrowed from OpenZeppelin\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Add a number to another number, checking for overflows\n', '    // ------------------------------------------------------------------------\n', '    function add(uint a, uint b) internal returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a && c >= b);\n', '        return c;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Subtract a number from another number, checking for underflows\n', '    // ------------------------------------------------------------------------\n', '    function sub(uint a, uint b) internal returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Administrators, borrowed from Gimli\n', '// ----------------------------------------------------------------------------\n', 'contract Administered is Owned {\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Mapping of administrators\n', '    // ------------------------------------------------------------------------\n', '    mapping (address => bool) public administrators;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Add and delete adminstrator events\n', '    // ------------------------------------------------------------------------\n', '    event AdminstratorAdded(address adminAddress);\n', '    event AdminstratorRemoved(address adminAddress);\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Modifier for functions that can only be executed by adminstrator\n', '    // ------------------------------------------------------------------------\n', '    modifier onlyAdministrator() {\n', '        require(administrators[msg.sender] || owner == msg.sender);\n', '        _;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can add a new administrator\n', '    // ------------------------------------------------------------------------\n', '    function addAdministrators(address _adminAddress) onlyOwner {\n', '        administrators[_adminAddress] = true;\n', '        AdminstratorAdded(_adminAddress);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can remove an administrator\n', '    // ------------------------------------------------------------------------\n', '    function removeAdministrators(address _adminAddress) onlyOwner {\n', '        delete administrators[_adminAddress];\n', '        AdminstratorRemoved(_adminAddress);\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals\n', '// ----------------------------------------------------------------------------\n', 'contract GazeBountyCoin is ERC20Interface, Administered {\n', '    using SafeMath for uint;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token parameters\n', '    // ------------------------------------------------------------------------\n', '    string public constant symbol = "GBC";\n', '    string public constant name = "Gaze Bounty Coin";\n', '    uint8 public constant decimals = 18;\n', '    uint public totalSupply = 0;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Administrators can mint until sealed\n', '    // ------------------------------------------------------------------------\n', '    bool public sealed;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Balances for each account\n', '    // ------------------------------------------------------------------------\n', '    mapping(address => uint) balances;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner of account approves the transfer of an amount to another account\n', '    // ------------------------------------------------------------------------\n', '    mapping(address => mapping (address => uint)) allowed;\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    function GazeBountyCoin() Owned() {\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the account balance of another account with address _account\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address _account) constant returns (uint balance) {\n', '        return balances[_account];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer the balance from owner&#39;s account to another account\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address _to, uint _amount) returns (bool success) {\n', '        if (balances[msg.sender] >= _amount             // User has balance\n', '            && _amount > 0                              // Non-zero transfer\n', '            && balances[_to] + _amount > balances[_to]  // Overflow check\n', '        ) {\n', '            balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '            balances[_to] = balances[_to].add(_amount);\n', '            Transfer(msg.sender, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Allow _spender to withdraw from your account, multiple times, up to the\n', '    // _value amount. If this function is called again it overwrites the\n', '    // current allowance with _value.\n', '    // ------------------------------------------------------------------------\n', '    function approve(\n', '        address _spender,\n', '        uint _amount\n', '    ) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Spender of tokens transfer an amount of tokens from the token owner&#39;s\n', '    // balance to another account. The owner of the tokens must already\n', '    // have approve(...)-d this transfer\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint _amount\n', '    ) returns (bool success) {\n', '        if (balances[_from] >= _amount                  // From a/c has balance\n', '            && allowed[_from][msg.sender] >= _amount    // Transfer approved\n', '            && _amount > 0                              // Non-zero transfer\n', '            && balances[_to] + _amount > balances[_to]  // Overflow check\n', '        ) {\n', '            balances[_from] = balances[_from].sub(_amount);\n', '            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '            balances[_to] = balances[_to].add(_amount);\n', '            Transfer(_from, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', '    // transferred to the spender&#39;s account\n', '    // ------------------------------------------------------------------------\n', '    function allowance(\n', '        address _owner,\n', '        address _spender\n', '    ) constant returns (uint remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // After sealing, no more minting is possible\n', '    // ------------------------------------------------------------------------\n', '    function seal() onlyOwner {\n', '        require(!sealed);\n', '        sealed = true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Mint coins for a single account\n', '    // ------------------------------------------------------------------------\n', '    function mint(address _to, uint _amount) onlyAdministrator {\n', '        require(!sealed);\n', '        require(_to != 0x0);\n', '        require(_amount != 0);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        totalSupply = totalSupply.add(_amount);\n', '        Transfer(0x0, _to, _amount);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Mint coins for a multiple accounts\n', '    // ------------------------------------------------------------------------\n', '    function multiMint(address[] _to, uint[] _amount) onlyAdministrator {\n', '        require(!sealed);\n', '        require(_to.length != 0);\n', '        require(_to.length == _amount.length);\n', '        for (uint i = 0; i < _to.length; i++) {\n', '            require(_to[i] != 0x0);\n', '            require(_amount[i] != 0);\n', '            balances[_to[i]] = balances[_to[i]].add(_amount[i]);\n', '            totalSupply = totalSupply.add(_amount[i]);\n', '            Transfer(0x0, _to[i], _amount[i]);\n', '        }\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Don&#39;t accept ethers - no payable modifier\n', '    // ------------------------------------------------------------------------\n', '    function () {\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint amount)\n', '      onlyOwner returns (bool success)\n', '    {\n', '        return ERC20Interface(tokenAddress).transfer(owner, amount);\n', '    }\n', '}']
['pragma solidity ^0.4.16;\n', '\n', '// ----------------------------------------------------------------------------\n', "// GBC 'Gaze Bounty Coin' token contract\n", '//\n', '// Deployed to : 0x45bE456a56f6D82175Ce7f921954d2451Db73161\n', '// Symbol      : GBC\n', '// Name        : Gaze Bounty Coin\n', '// Total supply: Allocate as required\n', '// Decimals    : 18\n', '//\n', '// Enjoy.\n', '//\n', '// (c) BokkyPooBah / Bok Consulting Pty Ltd for Gaze 2017. The MIT Licence.\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/issues/20\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    uint public totalSupply;\n', '    function balanceOf(address _account) constant returns (uint balance);\n', '    function transfer(address _to, uint _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint _value)\n', '        returns (bool success);\n', '    function approve(address _spender, uint _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant\n', '        returns (uint remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender,\n', '        uint _value);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Current owner, and proposed new owner\n', '    // ------------------------------------------------------------------------\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor - assign creator as the owner\n', '    // ------------------------------------------------------------------------\n', '    function Owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Modifier to mark that a function can only be executed by the owner\n', '    // ------------------------------------------------------------------------\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can initiate transfer of contract to a new owner\n', '    // ------------------------------------------------------------------------\n', '    function transferOwnership(address _newOwner) onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // New owner has to accept transfer of contract\n', '    // ------------------------------------------------------------------------\n', '    function acceptOwnership() {\n', '        require(msg.sender == newOwner);\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = 0x0;\n', '    }\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths, borrowed from OpenZeppelin\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Add a number to another number, checking for overflows\n', '    // ------------------------------------------------------------------------\n', '    function add(uint a, uint b) internal returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a && c >= b);\n', '        return c;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Subtract a number from another number, checking for underflows\n', '    // ------------------------------------------------------------------------\n', '    function sub(uint a, uint b) internal returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Administrators, borrowed from Gimli\n', '// ----------------------------------------------------------------------------\n', 'contract Administered is Owned {\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Mapping of administrators\n', '    // ------------------------------------------------------------------------\n', '    mapping (address => bool) public administrators;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Add and delete adminstrator events\n', '    // ------------------------------------------------------------------------\n', '    event AdminstratorAdded(address adminAddress);\n', '    event AdminstratorRemoved(address adminAddress);\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Modifier for functions that can only be executed by adminstrator\n', '    // ------------------------------------------------------------------------\n', '    modifier onlyAdministrator() {\n', '        require(administrators[msg.sender] || owner == msg.sender);\n', '        _;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can add a new administrator\n', '    // ------------------------------------------------------------------------\n', '    function addAdministrators(address _adminAddress) onlyOwner {\n', '        administrators[_adminAddress] = true;\n', '        AdminstratorAdded(_adminAddress);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can remove an administrator\n', '    // ------------------------------------------------------------------------\n', '    function removeAdministrators(address _adminAddress) onlyOwner {\n', '        delete administrators[_adminAddress];\n', '        AdminstratorRemoved(_adminAddress);\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals\n', '// ----------------------------------------------------------------------------\n', 'contract GazeBountyCoin is ERC20Interface, Administered {\n', '    using SafeMath for uint;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token parameters\n', '    // ------------------------------------------------------------------------\n', '    string public constant symbol = "GBC";\n', '    string public constant name = "Gaze Bounty Coin";\n', '    uint8 public constant decimals = 18;\n', '    uint public totalSupply = 0;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Administrators can mint until sealed\n', '    // ------------------------------------------------------------------------\n', '    bool public sealed;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Balances for each account\n', '    // ------------------------------------------------------------------------\n', '    mapping(address => uint) balances;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner of account approves the transfer of an amount to another account\n', '    // ------------------------------------------------------------------------\n', '    mapping(address => mapping (address => uint)) allowed;\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    function GazeBountyCoin() Owned() {\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the account balance of another account with address _account\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address _account) constant returns (uint balance) {\n', '        return balances[_account];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from owner's account to another account\n", '    // ------------------------------------------------------------------------\n', '    function transfer(address _to, uint _amount) returns (bool success) {\n', '        if (balances[msg.sender] >= _amount             // User has balance\n', '            && _amount > 0                              // Non-zero transfer\n', '            && balances[_to] + _amount > balances[_to]  // Overflow check\n', '        ) {\n', '            balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '            balances[_to] = balances[_to].add(_amount);\n', '            Transfer(msg.sender, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Allow _spender to withdraw from your account, multiple times, up to the\n', '    // _value amount. If this function is called again it overwrites the\n', '    // current allowance with _value.\n', '    // ------------------------------------------------------------------------\n', '    function approve(\n', '        address _spender,\n', '        uint _amount\n', '    ) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Spender of tokens transfer an amount of tokens from the token owner's\n", '    // balance to another account. The owner of the tokens must already\n', '    // have approve(...)-d this transfer\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint _amount\n', '    ) returns (bool success) {\n', '        if (balances[_from] >= _amount                  // From a/c has balance\n', '            && allowed[_from][msg.sender] >= _amount    // Transfer approved\n', '            && _amount > 0                              // Non-zero transfer\n', '            && balances[_to] + _amount > balances[_to]  // Overflow check\n', '        ) {\n', '            balances[_from] = balances[_from].sub(_amount);\n', '            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '            balances[_to] = balances[_to].add(_amount);\n', '            Transfer(_from, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    // ------------------------------------------------------------------------\n', '    function allowance(\n', '        address _owner,\n', '        address _spender\n', '    ) constant returns (uint remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // After sealing, no more minting is possible\n', '    // ------------------------------------------------------------------------\n', '    function seal() onlyOwner {\n', '        require(!sealed);\n', '        sealed = true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Mint coins for a single account\n', '    // ------------------------------------------------------------------------\n', '    function mint(address _to, uint _amount) onlyAdministrator {\n', '        require(!sealed);\n', '        require(_to != 0x0);\n', '        require(_amount != 0);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        totalSupply = totalSupply.add(_amount);\n', '        Transfer(0x0, _to, _amount);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Mint coins for a multiple accounts\n', '    // ------------------------------------------------------------------------\n', '    function multiMint(address[] _to, uint[] _amount) onlyAdministrator {\n', '        require(!sealed);\n', '        require(_to.length != 0);\n', '        require(_to.length == _amount.length);\n', '        for (uint i = 0; i < _to.length; i++) {\n', '            require(_to[i] != 0x0);\n', '            require(_amount[i] != 0);\n', '            balances[_to[i]] = balances[_to[i]].add(_amount[i]);\n', '            totalSupply = totalSupply.add(_amount[i]);\n', '            Transfer(0x0, _to[i], _amount[i]);\n', '        }\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Don't accept ethers - no payable modifier\n", '    // ------------------------------------------------------------------------\n', '    function () {\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint amount)\n', '      onlyOwner returns (bool success)\n', '    {\n', '        return ERC20Interface(tokenAddress).transfer(owner, amount);\n', '    }\n', '}']
