['pragma solidity ^0.4.14;\n', '\n', 'contract ValueToken {\n', '    string public symbol;\n', '    string public name;\n', '    uint8 public decimals;\n', '    uint256 _totalSupply;\n', '    uint256 _value;\n', '\n', '    // Owner of this contract\n', '    address public owner;\n', '    address public centralBank;\n', '\n', '    // Balances for each account\n', '    mapping(address => uint256) balances;\n', '\n', '    // Owner of account approves the transfer of an amount to another account\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '\n', '    // Constructor\n', '    function ValueToken() {\n', '        name = "Cyber Turtle Token";\n', '        symbol = "CTT";\n', '        decimals = 2;\n', '        _totalSupply = 164500;\n', '        _value = 1118;\n', '        centralBank = 0x77E370640B43a8A8Bf68C21fD068E312c89321eE;\n', '        owner = msg.sender;\n', '        balances[owner] = _totalSupply;\n', '    }\n', '\n', '    function totalSupply() constant returns (uint256 supply) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function value() constant returns (uint256 returnValue) {\n', '        return _value;\n', '    }\n', '\n', '    // What is the balance of a particular account?\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    // Transfer the balance from owner&#39;s account to another account\n', '    function transfer(address _to, uint256 _amount) returns (bool success) {\n', '        if (balances[msg.sender] >= _amount\n', '            && _amount > 0\n', '            && balances[_to] + _amount > balances[_to]) {\n', '            balances[msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(msg.sender, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // Send _value amount of tokens from address _from to address _to\n', '    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n', '    // tokens on your behalf, for example to "deposit" to a contract address and/or to charge\n', '    // fees in sub-currencies; the command should fail unless the _from account has\n', '    // deliberately authorized the sender of the message via some mechanism; we propose\n', '    // these standardized APIs for approval:\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', '    ) returns (bool success) {\n', '        if (balances[_from] >= _amount\n', '            && allowed[_from][msg.sender] >= _amount\n', '            && _amount > 0\n', '            && balances[_to] + _amount > balances[_to]) {\n', '            balances[_from] -= _amount;\n', '            allowed[_from][msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(_from, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '    // If this function is called again it overwrites the current allowance with _value.\n', '    function approve(address _spender, uint256 _amount) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    // Ownership\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) onlyOwner {\n', '        owner = _newOwner;\n', '    }\n', '\n', '    function transferCentralBanking(address _newCentralBank) onlyOwner {\n', '        centralBank = _newCentralBank;\n', '    }\n', '\n', '    // Central bank functions\n', '    modifier onlyCentralBank {\n', '        require(msg.sender == centralBank);\n', '        _;\n', '    }\n', '\n', '    function mint(uint256 _amount) onlyCentralBank {\n', '        balances[owner] += _amount;\n', '        _totalSupply += _amount;\n', '        Transfer(0, this, _amount);\n', '        Transfer(this, owner, _amount);\n', '    }\n', '\n', '    function burn(uint256 _amount) onlyCentralBank {\n', '        require (balances[owner] >= _amount);\n', '        balances[owner] -= _amount;\n', '        _totalSupply -= _amount;\n', '        Transfer(owner, this, _amount);\n', '        Transfer(this, 0, _amount);\n', '    }\n', '\n', '    function updateValue(uint256 _newValue) onlyCentralBank {\n', '        require(_newValue >= 0);\n', '        _value = _newValue;\n', '    }\n', '\n', '    function updateValueAndMint(uint256 _newValue, uint256 _toMint) onlyCentralBank {\n', '        require(_newValue >= 0);\n', '        _value = _newValue;\n', '        mint(_toMint);\n', '    }\n', '\n', '    function updateValueAndBurn(uint256 _newValue, uint256 _toBurn) onlyCentralBank {\n', '        require(_newValue >= 0);\n', '        _value = _newValue;\n', '        burn(_toBurn);\n', '    }\n', '\n', '    // Events\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _amount);\n', '}']
['pragma solidity ^0.4.14;\n', '\n', 'contract ValueToken {\n', '    string public symbol;\n', '    string public name;\n', '    uint8 public decimals;\n', '    uint256 _totalSupply;\n', '    uint256 _value;\n', '\n', '    // Owner of this contract\n', '    address public owner;\n', '    address public centralBank;\n', '\n', '    // Balances for each account\n', '    mapping(address => uint256) balances;\n', '\n', '    // Owner of account approves the transfer of an amount to another account\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '\n', '    // Constructor\n', '    function ValueToken() {\n', '        name = "Cyber Turtle Token";\n', '        symbol = "CTT";\n', '        decimals = 2;\n', '        _totalSupply = 164500;\n', '        _value = 1118;\n', '        centralBank = 0x77E370640B43a8A8Bf68C21fD068E312c89321eE;\n', '        owner = msg.sender;\n', '        balances[owner] = _totalSupply;\n', '    }\n', '\n', '    function totalSupply() constant returns (uint256 supply) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function value() constant returns (uint256 returnValue) {\n', '        return _value;\n', '    }\n', '\n', '    // What is the balance of a particular account?\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', "    // Transfer the balance from owner's account to another account\n", '    function transfer(address _to, uint256 _amount) returns (bool success) {\n', '        if (balances[msg.sender] >= _amount\n', '            && _amount > 0\n', '            && balances[_to] + _amount > balances[_to]) {\n', '            balances[msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(msg.sender, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // Send _value amount of tokens from address _from to address _to\n', '    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n', '    // tokens on your behalf, for example to "deposit" to a contract address and/or to charge\n', '    // fees in sub-currencies; the command should fail unless the _from account has\n', '    // deliberately authorized the sender of the message via some mechanism; we propose\n', '    // these standardized APIs for approval:\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', '    ) returns (bool success) {\n', '        if (balances[_from] >= _amount\n', '            && allowed[_from][msg.sender] >= _amount\n', '            && _amount > 0\n', '            && balances[_to] + _amount > balances[_to]) {\n', '            balances[_from] -= _amount;\n', '            allowed[_from][msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(_from, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '    // If this function is called again it overwrites the current allowance with _value.\n', '    function approve(address _spender, uint256 _amount) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    // Ownership\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) onlyOwner {\n', '        owner = _newOwner;\n', '    }\n', '\n', '    function transferCentralBanking(address _newCentralBank) onlyOwner {\n', '        centralBank = _newCentralBank;\n', '    }\n', '\n', '    // Central bank functions\n', '    modifier onlyCentralBank {\n', '        require(msg.sender == centralBank);\n', '        _;\n', '    }\n', '\n', '    function mint(uint256 _amount) onlyCentralBank {\n', '        balances[owner] += _amount;\n', '        _totalSupply += _amount;\n', '        Transfer(0, this, _amount);\n', '        Transfer(this, owner, _amount);\n', '    }\n', '\n', '    function burn(uint256 _amount) onlyCentralBank {\n', '        require (balances[owner] >= _amount);\n', '        balances[owner] -= _amount;\n', '        _totalSupply -= _amount;\n', '        Transfer(owner, this, _amount);\n', '        Transfer(this, 0, _amount);\n', '    }\n', '\n', '    function updateValue(uint256 _newValue) onlyCentralBank {\n', '        require(_newValue >= 0);\n', '        _value = _newValue;\n', '    }\n', '\n', '    function updateValueAndMint(uint256 _newValue, uint256 _toMint) onlyCentralBank {\n', '        require(_newValue >= 0);\n', '        _value = _newValue;\n', '        mint(_toMint);\n', '    }\n', '\n', '    function updateValueAndBurn(uint256 _newValue, uint256 _toBurn) onlyCentralBank {\n', '        require(_newValue >= 0);\n', '        _value = _newValue;\n', '        burn(_toBurn);\n', '    }\n', '\n', '    // Events\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _amount);\n', '}']
