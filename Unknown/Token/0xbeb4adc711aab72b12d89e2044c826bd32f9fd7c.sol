['pragma solidity 0.4.15;\n', '\n', '/// @title ERC20 interface\n', '/// @dev Full ERC20 interface described at https://github.com/ethereum/EIPs/issues/20.\n', 'contract ERC20 {\n', '\n', '  // EVENTS\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '  // PUBLIC FUNCTIONS\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  function balanceOf(address _owner) public constant returns (uint256);\n', '  function allowance(address _owner, address _spender) public constant returns (uint256);\n', '\n', '  // FIELDS\n', '\n', '  uint256 public totalSupply;\n', '}\n', '\n', '/// @title Ownable\n', '/// @dev The Ownable contract has an owner address, and provides basic authorization control\n', '/// functions, this simplifies the implementation of "user permissions".\n', 'contract Ownable {\n', '\n', '  // EVENTS\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  // PUBLIC FUNCTIONS\n', '\n', '  /// @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /// @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '  /// @param newOwner The address to transfer ownership to.\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  // MODIFIERS\n', '\n', '  /// @dev Throws if called by any account other than the owner.\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  // FIELDS\n', '\n', '  address public owner;\n', '}\n', '\n', '/// @title SafeMath\n', '/// @dev Math operations with safety checks that throw on error.\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/// @title Standard ERC20 token\n', '/// @dev Implementation of the basic standard token.\n', 'contract StandardToken is ERC20 {\n', '  using SafeMath for uint256;\n', '\n', '  // PUBLIC FUNCTIONS\n', '\n', '  /// @dev Transfers tokens to a specified address.\n', '  /// @param _to The address which you want to transfer to.\n', '  /// @param _value The amount of tokens to be transferred.\n', '  /// @return A boolean that indicates if the operation was successful.\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /// @dev Transfers tokens from one address to another.\n', '  /// @param _from The address which you want to send tokens from.\n', '  /// @param _to The address which you want to transfer to.\n', '  /// @param _value The amount of tokens to be transferred.\n', '  /// @return A boolean that indicates if the operation was successful.\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowances[_from][msg.sender]);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowances[_from][msg.sender] = allowances[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /// @dev Approves the specified address to spend the specified amount of tokens on behalf of msg.sender.\n', '  /// Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '  /// and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "  /// race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '  /// https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '  /// @param _spender The address which will spend tokens.\n', '  /// @param _value The amount of tokens to be spent.\n', '  /// @return A boolean that indicates if the operation was successful.\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowances[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /// @dev Gets the balance of the specified address.\n', '  /// @param _owner The address to query the balance of.\n', '  /// @return An uint256 representing the amount owned by the specified address.\n', '  function balanceOf(address _owner) public constant returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  /// @dev Function to check the amount of tokens that an owner allowances to a spender.\n', '  /// @param _owner The address which owns tokens.\n', '  /// @param _spender The address which will spend tokens.\n', '  /// @return A uint256 specifying the amount of tokens still available for the spender.\n', '  function allowance(address _owner, address _spender) public constant returns (uint256) {\n', '    return allowances[_owner][_spender];\n', '  }\n', '\n', '  // FIELDS\n', '\n', '  mapping (address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) allowances;\n', '}\n', '\n', '/// @title Papyrus Prototype Token (PRP) smart contract.\n', 'contract PapyrusPrototypeToken is StandardToken, Ownable {\n', '\n', '  // EVENTS\n', '\n', '  event Mint(address indexed to, uint256 amount, uint256 priceUsd);\n', '  event MintFinished();\n', '  event TransferableChanged(bool transferable);\n', '\n', '  // PUBLIC FUNCTIONS\n', '\n', '  // If ether is sent to this address, send it back\n', '  function() { revert(); }\n', '\n', '  // Check transfer ability and sender address before transfer\n', '  function transfer(address _to, uint _value) canTransfer public returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  // Check transfer ability and sender address before transfer\n', '  function transferFrom(address _from, address _to, uint _value) canTransfer public returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  /// @dev Function to mint tokens.\n', '  /// @param _to The address that will receive the minted tokens.\n', '  /// @param _amount The amount of tokens to mint.\n', '  /// @param _priceUsd The price of minted token at moment of purchase in USD with 18 decimals.\n', '  /// @return A boolean that indicates if the operation was successful.\n', '  function mint(address _to, uint256 _amount, uint256 _priceUsd) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    if (_priceUsd != 0) {\n', '      uint256 amountUsd = _amount.mul(_priceUsd).div(10**18);\n', '      totalCollected = totalCollected.add(amountUsd);\n', '    }\n', '    Mint(_to, _amount, _priceUsd);\n', '    Transfer(0x0, _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /// @dev Function to stop minting new tokens.\n', '  /// @return A boolean that indicates if the operation was successful.\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '\n', '  /// @dev Change ability to transfer tokens by users.\n', '  /// @return A boolean that indicates if the operation was successful.\n', '  function setTransferable(bool _transferable) onlyOwner public returns (bool) {\n', '    require(transferable != _transferable);\n', '    transferable = _transferable;\n', '    TransferableChanged(transferable);\n', '    return true;\n', '  }\n', '\n', '  // MODIFIERS\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier canTransfer() {\n', '    require(transferable || msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  // FIELDS\n', '\n', '  // Standard fields used to describe the token\n', '  string public name = "Papyrus Prototype Token";\n', '  string public symbol = "PRP";\n', '  string public version = "H0.1";\n', '  uint8 public decimals = 18;\n', '\n', '  // At the start of the token existence token is not transferable\n', '  bool public transferable = false;\n', '\n', '  // Will be set to true when minting tokens will be finished\n', '  bool public mintingFinished = false;\n', '\n', '  // Amount of USD (with 18 decimals) collected during sale phase\n', '  uint public totalCollected;\n', '}']