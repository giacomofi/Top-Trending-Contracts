['pragma solidity 0.4.15;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', 'function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', ' }\n', '\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  modifier whenPaused {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  function pause() onlyOwner whenNotPaused returns (bool) {\n', '    paused = true;\n', '    Pause();\n', '    return true;\n', '  }\n', '\n', '  function unpause() onlyOwner whenPaused returns (bool) {\n', '    paused = false;\n', '    Unpause();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract ERC20 {\n', '\n', '  uint256 public totalSupply;\n', '\n', '  function balanceOf(address _owner) constant returns (uint256);\n', '  function transfer(address _to, uint256 _value) returns (bool);\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool);\n', '  function approve(address _spender, uint256 _value) returns (bool);\n', '  function allowance(address _owner, address _spender) constant returns (uint256);\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '}\n', '\n', 'contract MercuryToken is ERC20, Ownable {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint) balances;\n', '  mapping (address => mapping (address => uint)) allowed;\n', '\n', '  string public constant name = "MERCURY TOKEN";\n', '  string public constant symbol = "MRC";\n', '  uint8 public constant decimals = 18;\n', '  bool public mintingFinished = false;\n', '\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  function MercuryToken() {}\n', '\n', '\n', '  function() payable {\n', '    revert();\n', '  }\n', '\n', '  function balanceOf(address _owner) constant returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function transfer(address _to, uint _value) returns (bool) {\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint _value) returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) constant returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  function mint(address _to, uint256 _amount) onlyOwner  returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    return true;\n', '  }\n', '\n', '  function finishMinting() onlyOwner returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '\n', '  function allowMinting() onlyOwner returns (bool) {\n', '    mintingFinished = false;\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract MercuryPresale is Pausable {\n', '  using SafeMath for uint256;\n', '\n', '  MercuryToken public token;\n', '\n', '\n', '  address public wallet; //wallet towards which the funds are forwarded\n', '  uint256 public weiRaised; //total amount of ether raised\n', '  uint256 public cap; // cap above which the presale ends\n', '  uint256 public minInvestment; // minimum investment\n', '  uint256 public rate; // number of tokens for one ether\n', '  bool public isFinalized;\n', '  string public contactInformation;\n', '\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  event Finalized();\n', '\n', '\n', '  function MercuryCrowdsale() {\n', '\n', '    token = createTokenContract();\n', '    wallet = 0x1dE159F3bb50992b78E06697B6273e326ADCcf75;\n', '    rate = 6000;\n', '    minInvestment = 1 * (10**16);\n', '    cap = 180000000 * (10**18); \n', '\n', '  }\n', '\n', '  // creates presale token\n', '  function createTokenContract() internal returns (MercuryToken) {\n', '    return new MercuryToken();\n', '  }\n', '\n', '  // fallback function to buy tokens\n', '  function () payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  function buyTokens(address beneficiary) payable whenNotPaused {\n', '    require(beneficiary != 0x0);\n', '    require(validPurchase());\n', '    require(!isFinalized);\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '    forwardFunds();\n', '  }\n', '\n', '\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // return true if the transaction can buy tokens\n', '  function validPurchase() internal constant returns (bool) {\n', '\n', '    uint256 weiAmount = weiRaised.add(msg.value);\n', '    bool notSmallAmount = msg.value >= minInvestment;\n', '    bool withinCap = weiAmount.mul(rate) <= cap;\n', '\n', '    return (notSmallAmount && withinCap);\n', '  }\n', '\n', '  function finalize() onlyOwner {\n', '    require(!isFinalized);\n', '    require(hasEnded());\n', '\n', '    token.finishMinting();\n', '    Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '\n', '  function setContactInformation(string info) onlyOwner {\n', '      contactInformation = info;\n', '  }\n', '\n', '\n', '  //return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    bool capReached = (weiRaised.mul(rate) >= cap);\n', '    return capReached;\n', '  }\n', '\n', '}']