['pragma solidity ^0.4.15;\n', '\n', 'contract Token {\n', '\n', '    /// @return total amount of tokens\n', '    function totalSupply() constant returns (uint256 supply) {}\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    \n', '}\n', '\n', 'contract StandardToken is Token {\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        //Default assumes totalSupply can&#39;t be over max (2^256 - 1).\n', '        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn&#39;t wrap.\n', '        //Replace the if with this one instead.\n', '        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalSupply;\n', '}\n', '\n', '// Based on TokenFactory(https://github.com/ConsenSys/Token-Factory)\n', '\n', 'contract SnipCoin is StandardToken {\n', '    /* Public variables of the token */\n', '\n', '    string public tokenName;       // Token name\n', '    uint public decimals;          // Decimal points for token\n', '    string public tokenSymbol;          // Token identifier\n', '    uint public totalEthReceivedInWei; // The total amount of Ether received during the sale in WEI\n', '    uint public totalUsdReceived; // The total amount of Ether received during the sale in USD terms\n', '    string public version = "1.0"; // Code version\n', '    address public saleWalletAddress;  // The wallet address where the Ether from the sale will be stored\n', '    address public ownerAddress; // Address of the contract owner.\n', '\n', '    // Multiplier for the decimals\n', '    uint private constant DECIMALS_MULTIPLIER = 1000000000000000000;    \n', '    uint private constant WEI_IN_ETHER = 1000 * 1000 * 1000 * 1000 * 1000 * 1000; // Number of wei in 1 eth\n', '    uint private constant WEI_TO_USD_EXCHANGE_RATE = WEI_IN_ETHER / 255; // Eth to USD exchange rate. Verify this figure before the sale starts. \n', '\n', '    function initializeSaleWalletAddress()\n', '    {\n', '        saleWalletAddress = 0x686f152dad6490df93b267e319f875a684bd26e2;\n', '    }\n', '\n', '    function initializeEthReceived()\n', '    {\n', '        totalEthReceivedInWei = 14500 * WEI_IN_ETHER; // Ether received before public sale. Verify this figure before the sale starts.\n', '    }\n', '\n', '    function initializeUsdReceived()\n', '    {\n', '        totalUsdReceived = 4000000; // USD received before public sale. Verify this figure before the sale starts.\n', '    }\n', '\n', '    function getBalance(address addr) returns(uint)\n', '    {\n', '        return balances[addr];\n', '    }\n', '\n', '    function SnipCoin()\n', '    {\n', '        initializeSaleWalletAddress();\n', '        initializeEthReceived();\n', '        initializeUsdReceived();\n', '        totalSupply = 10000000000;                                      // In total, 10 billion tokens\n', '        balances[msg.sender] = totalSupply * DECIMALS_MULTIPLIER;        // Initially give owner all of the tokens \n', '        \n', '        tokenName = "SnipCoin";                              // Name of token\n', '        decimals = 18;                                       // Amount of decimals for display purposes\n', '        tokenSymbol = "SNP";                                      // Set the symbol for display purposes\n', '    }\n', '\n', '    function sendCoin(address receiver, uint amount) returns(bool sufficient)\n', '    {\n', '        if (balances[msg.sender] < amount) return false;\n', '        balances[msg.sender] -= amount;\n', '        balances[receiver] += amount;\n', '        Transfer(msg.sender, receiver, amount);\n', '        return true;\n', '    }\n', '\n', '    function () payable\n', '    {\n', '        if (!saleWalletAddress.send(msg.value)) revert();\n', '        totalEthReceivedInWei = totalEthReceivedInWei + msg.value;\n', '        totalUsdReceived = totalUsdReceived + msg.value / WEI_TO_USD_EXCHANGE_RATE;\n', '    }\n', '}']