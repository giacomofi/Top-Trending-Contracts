['pragma solidity ^0.4.13;\n', '\n', 'contract ERC20Interface {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', ' \n', 'contract Multibot is ERC20Interface {\n', '    address public owner;\n', '\n', '    string public constant symbol = "MBT";\n', '    string public constant name = "Multibot";\n', '    uint8 public constant decimals = 8;\n', '    uint256 initialSupply = 2500000000000000;\n', '    \n', '    uint256 public shareholdersBalance;\n', '    uint256 public totalShareholders;\n', '    mapping (address => bool) registeredShareholders;\n', '    mapping (uint => address) public shareholders;\n', '    \n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    function isToken() public constant returns (bool weAre) {\n', '        return true;\n', '    }\n', '    \n', '    modifier onlyPayloadSize(uint size) {\n', '        require(msg.data.length >= size + 4);\n', '        _;\n', '    }\n', ' \n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Burn(address indexed from, uint256 value);\n', '    \n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    function Multibot() {\n', '        owner = msg.sender;\n', '        balances[owner] = initialSupply;\n', '        totalSupply=initialSupply;\n', '        totalShareholders = 0;\n', '\t\tshareholdersBalance = 0;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '    \n', '    /// @notice Send `_value` tokens to `_to` from your account\n', '    /// @param _to The address of the recipient\n', '    /// @param _value the amount to send\n', '    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) returns (bool success) {\n', '        if(_to != 0x0 && _value > 0 && balances[msg.sender] >= _value && balances[_to] + _value > balances[_to])\n', '        {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            \n', '            if (msg.sender == owner && _to != owner) {\n', '                shareholdersBalance += _value;\n', '            }\n', '            if (msg.sender != owner && _to == owner) {\n', '                shareholdersBalance -= _value;\n', '            }\n', '            if (owner != _to) {\n', '                insertShareholder(_to);\n', '            }\n', '            \n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '        else \n', '        {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /// @notice Send `_value` tokens to `_to` in behalf of `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value the amount to send\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0 && balances[_to] + _value > balances[_to]) {\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            \n', '            if (_from == owner && _to != owner) {\n', '                shareholdersBalance += _value;\n', '            }\n', '            if (_from != owner && _to == owner) {\n', '                shareholdersBalance -= _value;\n', '            }\n', '            if (owner != _to) {\n', '                insertShareholder(_to); \n', '            }\n', '            \n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /// @notice Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '    /// @param _spender The address authorized to spend\n', '    /// @param _value the max amount they can spend\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) \n', '        {\n', '            return false;\n', '        }\n', '        \n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /// @notice Remove `_value` tokens from the system irreversibly\n', '    /// @param _value the amount of money to burn\n', '    function burn(uint256 _value) onlyOwner returns (bool success) {\n', '        require (balances[msg.sender] > _value);            // Check if the sender has enough\n', '        balances[msg.sender] -= _value;                      // Subtract from the sender\n', '        totalSupply -= _value;                                // Updates totalSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function insertShareholder(address _shareholder) internal returns (bool) {\n', '        if (registeredShareholders[_shareholder] == true) {\n', '            return false;\n', '        } else {\n', '            totalShareholders += 1;\n', '            shareholders[totalShareholders] = _shareholder;\n', '            registeredShareholders[_shareholder] = true;\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '    \n', '    function shareholdersBalance() public returns (uint256) {\n', '        return shareholdersBalance;\n', '    }\n', '    \n', '    function totalShareholders() public returns (uint256) {\n', '        return totalShareholders;\n', '    }\n', '    \n', '    function getShareholder(uint256 _index) public returns (address) {\n', '        return shareholders[_index];\n', '    }\n', '}']
['pragma solidity ^0.4.13;\n', '\n', 'contract ERC20Interface {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', ' \n', 'contract Multibot is ERC20Interface {\n', '    address public owner;\n', '\n', '    string public constant symbol = "MBT";\n', '    string public constant name = "Multibot";\n', '    uint8 public constant decimals = 8;\n', '    uint256 initialSupply = 2500000000000000;\n', '    \n', '    uint256 public shareholdersBalance;\n', '    uint256 public totalShareholders;\n', '    mapping (address => bool) registeredShareholders;\n', '    mapping (uint => address) public shareholders;\n', '    \n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    function isToken() public constant returns (bool weAre) {\n', '        return true;\n', '    }\n', '    \n', '    modifier onlyPayloadSize(uint size) {\n', '        require(msg.data.length >= size + 4);\n', '        _;\n', '    }\n', ' \n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Burn(address indexed from, uint256 value);\n', '    \n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    function Multibot() {\n', '        owner = msg.sender;\n', '        balances[owner] = initialSupply;\n', '        totalSupply=initialSupply;\n', '        totalShareholders = 0;\n', '\t\tshareholdersBalance = 0;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '    \n', '    /// @notice Send `_value` tokens to `_to` from your account\n', '    /// @param _to The address of the recipient\n', '    /// @param _value the amount to send\n', '    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) returns (bool success) {\n', '        if(_to != 0x0 && _value > 0 && balances[msg.sender] >= _value && balances[_to] + _value > balances[_to])\n', '        {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            \n', '            if (msg.sender == owner && _to != owner) {\n', '                shareholdersBalance += _value;\n', '            }\n', '            if (msg.sender != owner && _to == owner) {\n', '                shareholdersBalance -= _value;\n', '            }\n', '            if (owner != _to) {\n', '                insertShareholder(_to);\n', '            }\n', '            \n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '        else \n', '        {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /// @notice Send `_value` tokens to `_to` in behalf of `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value the amount to send\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0 && balances[_to] + _value > balances[_to]) {\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            \n', '            if (_from == owner && _to != owner) {\n', '                shareholdersBalance += _value;\n', '            }\n', '            if (_from != owner && _to == owner) {\n', '                shareholdersBalance -= _value;\n', '            }\n', '            if (owner != _to) {\n', '                insertShareholder(_to); \n', '            }\n', '            \n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /// @notice Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '    /// @param _spender The address authorized to spend\n', '    /// @param _value the max amount they can spend\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) \n', '        {\n', '            return false;\n', '        }\n', '        \n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /// @notice Remove `_value` tokens from the system irreversibly\n', '    /// @param _value the amount of money to burn\n', '    function burn(uint256 _value) onlyOwner returns (bool success) {\n', '        require (balances[msg.sender] > _value);            // Check if the sender has enough\n', '        balances[msg.sender] -= _value;                      // Subtract from the sender\n', '        totalSupply -= _value;                                // Updates totalSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function insertShareholder(address _shareholder) internal returns (bool) {\n', '        if (registeredShareholders[_shareholder] == true) {\n', '            return false;\n', '        } else {\n', '            totalShareholders += 1;\n', '            shareholders[totalShareholders] = _shareholder;\n', '            registeredShareholders[_shareholder] = true;\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '    \n', '    function shareholdersBalance() public returns (uint256) {\n', '        return shareholdersBalance;\n', '    }\n', '    \n', '    function totalShareholders() public returns (uint256) {\n', '        return totalShareholders;\n', '    }\n', '    \n', '    function getShareholder(uint256 _index) public returns (address) {\n', '        return shareholders[_index];\n', '    }\n', '}']
