['//\n', '// compiler: solcjs -o ../build/contracts --optimize --abi --bin OX_TOKEN.sol\n', '//  version: 0.4.11+commit.68ef5810.Emscripten.clang\n', '//\n', 'pragma solidity ^0.4.11;\n', '\n', 'contract owned {\n', '  address public owner;\n', '\n', '  function owned() { owner = msg.sender; }\n', '\n', '  modifier onlyOwner {\n', '    if (msg.sender != owner) { throw; }\n', '    _;\n', '  }\n', '  function changeOwner( address newowner ) onlyOwner {\n', '    owner = newowner;\n', '  }\n', '}\n', '\n', 'contract OX_TOKEN is owned {\n', '\n', '  string public constant name = "OX";\n', '  string public constant symbol = "FIXED";\n', '\n', '  event Transfer( address indexed _from,\n', '                  address indexed _to,\n', '                   uint256 _value );\n', '\n', '  event Approval( address indexed _owner,\n', '                  address indexed _spender,\n', '                  uint256 _value);\n', '\n', '  event Receipt( address indexed _to,\n', '                 uint _oxen,\n', '                 uint _paymentwei );\n', '\n', '  uint public starttime;\n', '  uint public inCirculation;\n', '  mapping( address => uint ) public oxen;\n', '  mapping( address => mapping (address => uint256) ) allowed;\n', '\n', '  function OX_TOKEN() {\n', '    starttime = 0;\n', '    inCirculation = 0;\n', '  }\n', '\n', '  function closedown() onlyOwner {\n', '    selfdestruct( owner );\n', '  }\n', '\n', '  function() payable {\n', '    buyOx(); // forwards value, gas\n', '  }\n', '\n', '  function withdraw( uint amount ) onlyOwner returns (bool success) {\n', '    if (amount <= this.balance)\n', '      success = owner.send( amount );\n', '    else\n', '      success = false;\n', '  }\n', '\n', '  function startSale() onlyOwner {\n', '    if (starttime != 0) return;\n', '\n', '    starttime = now; // now is block timestamp in unix-seconds\n', '    inCirculation = 500000000; // reserve for org\n', '    oxen[owner] = inCirculation;\n', '    Transfer( address(this), owner, inCirculation );\n', '  }\n', '\n', '  function buyOx() payable {\n', '\n', '    // min purchase .1 E = 10**17 wei\n', '    if (!saleOn() || msg.value < 100 finney) {\n', '      throw; // returns caller&#39;s Ether and unused gas\n', '    }\n', '\n', '    // rate: 1 eth <==> 3000 ox\n', '    // to buy: msg.value * 3000 * (100 + bonus)\n', '    //         ---------          -------------\n', '    //          10**18                 100\n', '    uint ox = div( mul(mul(msg.value,3), 100 + bonus()), 10**17 );\n', '\n', '    if (inCirculation + ox > 1000000000) {\n', '      throw;\n', '    }\n', '\n', '    inCirculation += ox;\n', '    oxen[msg.sender] += ox;\n', '    Receipt( msg.sender, ox, msg.value );\n', '  }\n', '\n', '  function totalSupply() constant returns (uint256 totalSupply) {\n', '    return inCirculation;\n', '  }\n', '\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    balance = oxen[_owner];\n', '  }\n', '\n', '  function approve(address _spender, uint256 _amount) returns (bool success) {\n', '    if (saleOn()) return false;\n', '\n', '    allowed[msg.sender][_spender] = _amount;\n', '    Approval(msg.sender, _spender, _amount);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) constant returns\n', '  (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function transfer( address to, uint ox ) returns (bool success) {\n', '    if ( ox > oxen[msg.sender] || saleOn() ) {\n', '      return false;\n', '    }\n', '\n', '    oxen[msg.sender] -= ox;\n', '    oxen[to] += ox;\n', '    Transfer( msg.sender, to, ox );\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _amount)\n', '  returns (bool success) {\n', '    if (    oxen[_from] >= _amount\n', '         && allowed[_from][msg.sender] >= _amount\n', '         && _amount > 0\n', '         && oxen[_to] + _amount > oxen[_to]\n', '       )\n', '    {\n', '      oxen[_from] -= _amount;\n', '      allowed[_from][msg.sender] -= _amount;\n', '      oxen[_to] += _amount;\n', '      Transfer(_from, _to, _amount);\n', '      success = true;\n', '    }\n', '    else\n', '    {\n', '      success = false;\n', '    }\n', '  }\n', '\n', '  function saleOn() constant returns(bool) {\n', '    return now - starttime < 31 days;\n', '  }\n', '\n', '  function bonus() constant returns(uint) {\n', '    uint elapsed = now - starttime;\n', '\n', '    if (elapsed < 1 days) return 25;\n', '    if (elapsed < 1 weeks) return 20;\n', '    if (elapsed < 2 weeks) return 15;\n', '    if (elapsed < 3 weeks) return 10;\n', '    if (elapsed < 4 weeks) return 5;\n', '    return 0;\n', '  }\n', '\n', '  // ref:\n', '  // github.com/OpenZeppelin/zeppelin-solidity/\n', '  // blob/master/contracts/SafeMath.sol\n', '  function mul(uint256 a, uint256 b) constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    if (a == 0 || c / a == b)\n', '    return c;\n', '    else throw;\n', '  }\n', '  function div(uint256 a, uint256 b) constant returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  address public constant AUTHOR = 0x008e9342eb769c4039aaf33da739fb2fc8af9afdc1;\n', '}']
['//\n', '// compiler: solcjs -o ../build/contracts --optimize --abi --bin OX_TOKEN.sol\n', '//  version: 0.4.11+commit.68ef5810.Emscripten.clang\n', '//\n', 'pragma solidity ^0.4.11;\n', '\n', 'contract owned {\n', '  address public owner;\n', '\n', '  function owned() { owner = msg.sender; }\n', '\n', '  modifier onlyOwner {\n', '    if (msg.sender != owner) { throw; }\n', '    _;\n', '  }\n', '  function changeOwner( address newowner ) onlyOwner {\n', '    owner = newowner;\n', '  }\n', '}\n', '\n', 'contract OX_TOKEN is owned {\n', '\n', '  string public constant name = "OX";\n', '  string public constant symbol = "FIXED";\n', '\n', '  event Transfer( address indexed _from,\n', '                  address indexed _to,\n', '                   uint256 _value );\n', '\n', '  event Approval( address indexed _owner,\n', '                  address indexed _spender,\n', '                  uint256 _value);\n', '\n', '  event Receipt( address indexed _to,\n', '                 uint _oxen,\n', '                 uint _paymentwei );\n', '\n', '  uint public starttime;\n', '  uint public inCirculation;\n', '  mapping( address => uint ) public oxen;\n', '  mapping( address => mapping (address => uint256) ) allowed;\n', '\n', '  function OX_TOKEN() {\n', '    starttime = 0;\n', '    inCirculation = 0;\n', '  }\n', '\n', '  function closedown() onlyOwner {\n', '    selfdestruct( owner );\n', '  }\n', '\n', '  function() payable {\n', '    buyOx(); // forwards value, gas\n', '  }\n', '\n', '  function withdraw( uint amount ) onlyOwner returns (bool success) {\n', '    if (amount <= this.balance)\n', '      success = owner.send( amount );\n', '    else\n', '      success = false;\n', '  }\n', '\n', '  function startSale() onlyOwner {\n', '    if (starttime != 0) return;\n', '\n', '    starttime = now; // now is block timestamp in unix-seconds\n', '    inCirculation = 500000000; // reserve for org\n', '    oxen[owner] = inCirculation;\n', '    Transfer( address(this), owner, inCirculation );\n', '  }\n', '\n', '  function buyOx() payable {\n', '\n', '    // min purchase .1 E = 10**17 wei\n', '    if (!saleOn() || msg.value < 100 finney) {\n', "      throw; // returns caller's Ether and unused gas\n", '    }\n', '\n', '    // rate: 1 eth <==> 3000 ox\n', '    // to buy: msg.value * 3000 * (100 + bonus)\n', '    //         ---------          -------------\n', '    //          10**18                 100\n', '    uint ox = div( mul(mul(msg.value,3), 100 + bonus()), 10**17 );\n', '\n', '    if (inCirculation + ox > 1000000000) {\n', '      throw;\n', '    }\n', '\n', '    inCirculation += ox;\n', '    oxen[msg.sender] += ox;\n', '    Receipt( msg.sender, ox, msg.value );\n', '  }\n', '\n', '  function totalSupply() constant returns (uint256 totalSupply) {\n', '    return inCirculation;\n', '  }\n', '\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    balance = oxen[_owner];\n', '  }\n', '\n', '  function approve(address _spender, uint256 _amount) returns (bool success) {\n', '    if (saleOn()) return false;\n', '\n', '    allowed[msg.sender][_spender] = _amount;\n', '    Approval(msg.sender, _spender, _amount);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) constant returns\n', '  (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function transfer( address to, uint ox ) returns (bool success) {\n', '    if ( ox > oxen[msg.sender] || saleOn() ) {\n', '      return false;\n', '    }\n', '\n', '    oxen[msg.sender] -= ox;\n', '    oxen[to] += ox;\n', '    Transfer( msg.sender, to, ox );\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _amount)\n', '  returns (bool success) {\n', '    if (    oxen[_from] >= _amount\n', '         && allowed[_from][msg.sender] >= _amount\n', '         && _amount > 0\n', '         && oxen[_to] + _amount > oxen[_to]\n', '       )\n', '    {\n', '      oxen[_from] -= _amount;\n', '      allowed[_from][msg.sender] -= _amount;\n', '      oxen[_to] += _amount;\n', '      Transfer(_from, _to, _amount);\n', '      success = true;\n', '    }\n', '    else\n', '    {\n', '      success = false;\n', '    }\n', '  }\n', '\n', '  function saleOn() constant returns(bool) {\n', '    return now - starttime < 31 days;\n', '  }\n', '\n', '  function bonus() constant returns(uint) {\n', '    uint elapsed = now - starttime;\n', '\n', '    if (elapsed < 1 days) return 25;\n', '    if (elapsed < 1 weeks) return 20;\n', '    if (elapsed < 2 weeks) return 15;\n', '    if (elapsed < 3 weeks) return 10;\n', '    if (elapsed < 4 weeks) return 5;\n', '    return 0;\n', '  }\n', '\n', '  // ref:\n', '  // github.com/OpenZeppelin/zeppelin-solidity/\n', '  // blob/master/contracts/SafeMath.sol\n', '  function mul(uint256 a, uint256 b) constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    if (a == 0 || c / a == b)\n', '    return c;\n', '    else throw;\n', '  }\n', '  function div(uint256 a, uint256 b) constant returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  address public constant AUTHOR = 0x008e9342eb769c4039aaf33da739fb2fc8af9afdc1;\n', '}']
