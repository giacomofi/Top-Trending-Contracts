['/**\n', ' * Created by DiceyBit.com Team on 8/25/17.\n', ' * \n', ' * @title DiceyBit preICO solidity contract\n', ' * @author DiceyBit Team\n', ' * @description ERC20 Standard Token\n', ' * \n', ' * Copyright &#169; 2017 DiceyBit.com\n', ' */\n', '\n', 'pragma solidity ^0.4.11;\n', '\n', 'contract Token {\n', '    string public standard = &#39;Token 0.1.8 diceybit.com&#39;;\n', '    string public name = &#39;DICEYBIT.COM&#39;;\n', '    string public symbol = &#39;dСBT&#39;;\n', '    uint8 public decimals = 0;\n', '    uint256 public totalSupply = 100000000;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    mapping(address => uint256) public balanceOf;\n', '    mapping(address => mapping(address => uint256)) public allowed;\n', '\n', '    function Token() {\n', '        balanceOf[msg.sender] = totalSupply;\n', '    }\n', '\n', '    // @brief Send coins\n', '    // @param _to recipient of coins\n', '    // @param _value amount of coins for send\n', '    function transfer(address _to, uint256 _value) {\n', '        require(_value > 0 && balanceOf[msg.sender] >= _value);\n', '\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[_to] += _value;\n', '\n', '        Transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    // @brief Send coins\n', '    // @param _from source of coins\n', '    // @param _to recipient of coins\n', '    // @param _value amount of coins for send\n', '    function transferFrom(address _from, address _to, uint256 _value) {\n', '        require(_value > 0 && balanceOf[_from] >= _value && allowed[_from][msg.sender] >= _value);\n', '\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '\n', '        Transfer(_from, _to, _value);\n', '    }\n', '\n', '    // @brief Allow another contract to spend some tokens in your behalf\n', '    // @param _spender another contract address\n', '    // @param _value amount of approved tokens\n', '    function approve(address _spender, uint256 _value) {\n', '        allowed[msg.sender][_spender] = _value;\n', '    }\n', '\n', '    // @brief Get allowed amount of tokens\n', '    // @param _owner owner of allowance\n', '    // @param _spender spender contract\n', '    // @return the rest of allowed tokens\n', '    function allowance(address _owner, address _spender) constant returns(uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    // @brief Shows balance of specified address\n', '    // @param _who tokens owner\n', '    // @return the rest of tokens\n', '    function getBalanceOf(address _who) returns(uint256 amount) {\n', '        return balanceOf[_who];\n', '    }\n', '}']
['/**\n', ' * Created by DiceyBit.com Team on 8/25/17.\n', ' * \n', ' * @title DiceyBit preICO solidity contract\n', ' * @author DiceyBit Team\n', ' * @description ERC20 Standard Token\n', ' * \n', ' * Copyright © 2017 DiceyBit.com\n', ' */\n', '\n', 'pragma solidity ^0.4.11;\n', '\n', 'contract Token {\n', "    string public standard = 'Token 0.1.8 diceybit.com';\n", "    string public name = 'DICEYBIT.COM';\n", "    string public symbol = 'dСBT';\n", '    uint8 public decimals = 0;\n', '    uint256 public totalSupply = 100000000;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    mapping(address => uint256) public balanceOf;\n', '    mapping(address => mapping(address => uint256)) public allowed;\n', '\n', '    function Token() {\n', '        balanceOf[msg.sender] = totalSupply;\n', '    }\n', '\n', '    // @brief Send coins\n', '    // @param _to recipient of coins\n', '    // @param _value amount of coins for send\n', '    function transfer(address _to, uint256 _value) {\n', '        require(_value > 0 && balanceOf[msg.sender] >= _value);\n', '\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[_to] += _value;\n', '\n', '        Transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    // @brief Send coins\n', '    // @param _from source of coins\n', '    // @param _to recipient of coins\n', '    // @param _value amount of coins for send\n', '    function transferFrom(address _from, address _to, uint256 _value) {\n', '        require(_value > 0 && balanceOf[_from] >= _value && allowed[_from][msg.sender] >= _value);\n', '\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '\n', '        Transfer(_from, _to, _value);\n', '    }\n', '\n', '    // @brief Allow another contract to spend some tokens in your behalf\n', '    // @param _spender another contract address\n', '    // @param _value amount of approved tokens\n', '    function approve(address _spender, uint256 _value) {\n', '        allowed[msg.sender][_spender] = _value;\n', '    }\n', '\n', '    // @brief Get allowed amount of tokens\n', '    // @param _owner owner of allowance\n', '    // @param _spender spender contract\n', '    // @return the rest of allowed tokens\n', '    function allowance(address _owner, address _spender) constant returns(uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    // @brief Shows balance of specified address\n', '    // @param _who tokens owner\n', '    // @return the rest of tokens\n', '    function getBalanceOf(address _who) returns(uint256 amount) {\n', '        return balanceOf[_who];\n', '    }\n', '}']
