['pragma solidity ^0.4.10;\n', '\n', 'contract SafeMath {\n', '\n', '    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x + y;\n', '      assert((z >= x) && (z >= y));\n', '      return z;\n', '    }\n', '\n', '    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\n', '      assert(x >= y);\n', '      uint256 z = x - y;\n', '      return z;\n', '    }\n', '\n', '    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x * y;\n', '      assert((x == 0)||(z/x == y));\n', '      return z;\n', '    }\n', '\n', '}\n', '\n', 'contract ERC20Interface is SafeMath {\n', '\n', '    uint256 public decimals = 0;\n', '    uint256 public _totalSupply = 5;\n', '    bool public constant isToken = true;\n', '\n', '    address public owner;\n', '    \n', '    // Store the token balance for each user\n', '    mapping(address => uint256) balances;\n', '\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '\n', '    function ERC20Interface()\n', '    {\n', '        owner = msg.sender;\n', '        balances[owner] = _totalSupply;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value)\n', '        returns (bool success)\n', '    {\n', '        assert(balances[msg.sender] >= _value);\n', '        balances[msg.sender] = safeSubtract(balances[msg.sender], _value);\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '        returns (bool success)\n', '    {\n', '        assert(allowance(msg.sender, _from) >= _value);\n', '        balances[_from] = safeSubtract(balances[_from], _value);\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        allowed[msg.sender][_from] = safeSubtract(allowed[msg.sender][_from], _value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) \n', '        constant returns (uint256 balance)\n', '    {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) \n', '        returns (bool success)\n', '    {\n', '        assert(balances[msg.sender] >= _value);\n', '        allowed[_spender][msg.sender] = safeAdd(allowed[_spender][msg.sender], _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender)\n', '        constant returns (uint256 allowance)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '  \n', '    // Triggered when tokens are transferred.\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  \n', '    // Triggered whenever approve(address _spender, uint256 _value) is called.\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract Iou is ERC20Interface {\n', '    string public constant symbol = "IOU";\n', '    string public constant name = "I owe you";\n', '    string public constant longDescription = "Buy or trade IOUs from Connor";\n', '\n', '    // Basically a decorator _; is were the main function will go\n', '    modifier onlyOwner() \n', '    {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function Iou() ERC20Interface() {}\n', '\n', '    function changeOwner(address _newOwner) \n', '        onlyOwner()\n', '    {\n', '        owner = _newOwner;\n', '    }\n', '}']
['pragma solidity ^0.4.10;\n', '\n', 'contract SafeMath {\n', '\n', '    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x + y;\n', '      assert((z >= x) && (z >= y));\n', '      return z;\n', '    }\n', '\n', '    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\n', '      assert(x >= y);\n', '      uint256 z = x - y;\n', '      return z;\n', '    }\n', '\n', '    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x * y;\n', '      assert((x == 0)||(z/x == y));\n', '      return z;\n', '    }\n', '\n', '}\n', '\n', 'contract ERC20Interface is SafeMath {\n', '\n', '    uint256 public decimals = 0;\n', '    uint256 public _totalSupply = 5;\n', '    bool public constant isToken = true;\n', '\n', '    address public owner;\n', '    \n', '    // Store the token balance for each user\n', '    mapping(address => uint256) balances;\n', '\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '\n', '    function ERC20Interface()\n', '    {\n', '        owner = msg.sender;\n', '        balances[owner] = _totalSupply;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value)\n', '        returns (bool success)\n', '    {\n', '        assert(balances[msg.sender] >= _value);\n', '        balances[msg.sender] = safeSubtract(balances[msg.sender], _value);\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '        returns (bool success)\n', '    {\n', '        assert(allowance(msg.sender, _from) >= _value);\n', '        balances[_from] = safeSubtract(balances[_from], _value);\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        allowed[msg.sender][_from] = safeSubtract(allowed[msg.sender][_from], _value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) \n', '        constant returns (uint256 balance)\n', '    {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) \n', '        returns (bool success)\n', '    {\n', '        assert(balances[msg.sender] >= _value);\n', '        allowed[_spender][msg.sender] = safeAdd(allowed[_spender][msg.sender], _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender)\n', '        constant returns (uint256 allowance)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '  \n', '    // Triggered when tokens are transferred.\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  \n', '    // Triggered whenever approve(address _spender, uint256 _value) is called.\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract Iou is ERC20Interface {\n', '    string public constant symbol = "IOU";\n', '    string public constant name = "I owe you";\n', '    string public constant longDescription = "Buy or trade IOUs from Connor";\n', '\n', '    // Basically a decorator _; is were the main function will go\n', '    modifier onlyOwner() \n', '    {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function Iou() ERC20Interface() {}\n', '\n', '    function changeOwner(address _newOwner) \n', '        onlyOwner()\n', '    {\n', '        owner = _newOwner;\n', '    }\n', '}']
