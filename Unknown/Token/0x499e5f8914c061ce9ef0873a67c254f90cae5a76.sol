['pragma solidity ^0.4.14;\n', '\n', 'contract  ETHealth {\n', '    \n', '    /* Public variables of the token */\n', '    string public name = " ETHealth";\n', '    uint256 public decimals = 2;\n', '    uint256 public totalSupply;\n', '    string public symbol = "ETT";\n', '    event Mint(address indexed owner,uint amount);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    function ETHealth() {\n', '        owner = 0x35a887e7327cb08e7a510D71a873b09d5055709D;\n', '        /* Total supply is 300 million (300,000,000)*/\n', '        balances[0x35a887e7327cb08e7a510D71a873b09d5055709D] = 300000000 * 10**decimals;\n', '        totalSupply =300000000 * 10**decimals;\n', '    }\n', '\n', ' function transfer(address _to, uint256 _value) returns (bool success) {\n', '        require(_to != 0x00);\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    address owner;\n', '\n', '\n', '    function mint(uint amount) onlyOwner returns(bool minted ){\n', '        if (amount > 0){\n', '            totalSupply += amount;\n', '            balances[owner] += amount;\n', '            Mint(msg.sender,amount);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    modifier onlyOwner() { \n', '        if (msg.sender != owner) revert(); \n', '        _; \n', '    }\n', '    \n', '    function setOwner(address _owner) onlyOwner{\n', '        balances[_owner] = balances[owner];\n', '        balances[owner] = 0;\n', '        owner = _owner;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.14;\n', '\n', 'contract  ETHealth {\n', '    \n', '    /* Public variables of the token */\n', '    string public name = " ETHealth";\n', '    uint256 public decimals = 2;\n', '    uint256 public totalSupply;\n', '    string public symbol = "ETT";\n', '    event Mint(address indexed owner,uint amount);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    function ETHealth() {\n', '        owner = 0x35a887e7327cb08e7a510D71a873b09d5055709D;\n', '        /* Total supply is 300 million (300,000,000)*/\n', '        balances[0x35a887e7327cb08e7a510D71a873b09d5055709D] = 300000000 * 10**decimals;\n', '        totalSupply =300000000 * 10**decimals;\n', '    }\n', '\n', ' function transfer(address _to, uint256 _value) returns (bool success) {\n', '        require(_to != 0x00);\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    address owner;\n', '\n', '\n', '    function mint(uint amount) onlyOwner returns(bool minted ){\n', '        if (amount > 0){\n', '            totalSupply += amount;\n', '            balances[owner] += amount;\n', '            Mint(msg.sender,amount);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    modifier onlyOwner() { \n', '        if (msg.sender != owner) revert(); \n', '        _; \n', '    }\n', '    \n', '    function setOwner(address _owner) onlyOwner{\n', '        balances[_owner] = balances[owner];\n', '        balances[owner] = 0;\n', '        owner = _owner;\n', '    }\n', '\n', '}']
