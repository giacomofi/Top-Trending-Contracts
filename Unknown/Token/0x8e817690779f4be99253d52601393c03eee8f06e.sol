['/**\n', ' * Overflow aware uint math functions.\n', ' *\n', ' * Inspired by https://github.com/MakerDAO/maker-otc/blob/master/contracts/simple_market.sol\n', ' */\n', 'contract SafeMath {\n', '  //internals\n', '\n', '  function safeMul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) throw;\n', '  }\n', '}\n', '\n', '/**\n', ' * ERC 20 token\n', ' *\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract Token {\n', '\n', '    /// @return total amount of tokens\n', '    function totalSupply() constant returns (uint256 supply) {}\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '}\n', '\n', '/**\n', ' * ERC 20 token\n', ' *\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract StandardToken is Token {\n', '\n', '    /**\n', '     * Reviewed:\n', '     * - Interger overflow = OK, checked\n', '     */\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    uint256 public totalSupply;\n', '\n', '}\n', '\n', '\n', '/**\n', ' * CTest1 crowdsale contract.\n', ' *\n', ' * Security criteria evaluated against http://ethereum.stackexchange.com/questions/8551/methodological-security-review-of-a-smart-contract\n', ' *\n', ' *\n', ' */\n', 'contract CTest1 is StandardToken, SafeMath {\n', '\n', '    string public name = "CTest1 Token";\n', '    string public symbol = "CTest1";\n', '    uint public decimals = 18;\n', '    \n', '    uint256 public totalSupply = 1000000;\n', '\n', '\n', '    // Set the contract controller address\n', '    // Set the 3 Founder addresses\n', '    address public owner = msg.sender;\n', '    address public Founder1 = 0xB5D39A8Ea30005f9114Bf936025De2D6f353813E;\n', '    address public Founder2 = 0x00A591199F53907480E1f5A00958b93B43200Fe4;\n', '    address public Founder3 = 0x0d19C131400e73c71bBB2bC1666dBa8Fe22d242D;\n', '\n', '\n', '    event Buy(address indexed sender, uint eth, uint fbt);\n', '\n', '\n', '    /**\n', '     * ERC 20 Standard Token interface transfer function\n', '     */\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '    /**\n', '     * ERC 20 Standard Token interface transfer function\n', '     *\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '    \n', '    \n', '   \n', '// CTest1 TOKEN FOUNDER ETH ADDRESSES \n', '// 0xB5D39A8Ea30005f9114Bf936025De2D6f353813E\n', '// 0x00A591199F53907480E1f5A00958b93B43200Fe4\n', '// 0x0d19C131400e73c71bBB2bC1666dBa8Fe22d242D\n', '    \n', '    \n', '    function () payable {\n', '        \n', '        \n', '        //If all the tokens are gone, stop!\n', '        if (totalSupply < 1)\n', '        {\n', '            throw;\n', '        }\n', '        \n', '        \n', '        uint256 rate = 0;\n', '        address recipient = msg.sender;\n', '        \n', '        \n', '        //Set the price to 0.0003 ETH/CTest1\n', '        //$0.10 per\n', '        if (totalSupply > 975000)\n', '        {\n', '            rate = 3340;\n', '        }\n', '        \n', '        //Set the price to 0.0015 ETH/CTest1\n', '        //$0.50 per\n', '        if (totalSupply < 975001)\n', '        {\n', '            rate = 668;\n', '        }\n', '        \n', '        //Set the price to 0.0030 ETH/CTest1\n', '        //$1.00 per\n', '        if (totalSupply < 875001)\n', '        {\n', '            rate = 334;\n', '        }\n', '        \n', '        //Set the price to 0.0075 ETH/CTest1\n', '        //$2.50 per\n', '        if (totalSupply < 475001)\n', '        {\n', '            rate = 134;\n', '        }\n', '        \n', '        \n', '       \n', '\n', '        \n', '        uint256 tokens = safeMul(msg.value, rate);\n', '        tokens = tokens/1 ether;\n', '        \n', '        \n', '        //Make sure they send enough to buy atleast 1 token.\n', '        if (tokens < 1)\n', '        {\n', '            throw;\n', '        }\n', '        \n', '        \n', '        //Make sure someone isn&#39;t buying more than the remaining supply\n', '        uint256 check = safeSub(totalSupply, tokens);\n', '        if (check < 0)\n', '        {\n', '            throw;\n', '        }\n', '        \n', '        \n', '        //Make sure someone isn&#39;t buying more than the current tier\n', '        if (totalSupply > 975000 && check < 975000)\n', '        {\n', '            throw;\n', '        }\n', '        \n', '        //Make sure someone isn&#39;t buying more than the current tier\n', '        if (totalSupply > 875000 && check < 875000)\n', '        {\n', '            throw;\n', '        }\n', '        \n', '        //Make sure someone isn&#39;t buying more than the current tier\n', '        if (totalSupply > 475000 && check < 475000)\n', '        {\n', '            throw;\n', '        }\n', '        \n', '        \n', '        //Prevent any ETH address from buying more than 50 CTest1 during the pre-sale\n', '        if ((balances[recipient] + tokens) > 50 && totalSupply > 975000)\n', '        {\n', '            throw;\n', '        }\n', '        \n', '        \n', '        balances[recipient] = safeAdd(balances[recipient], tokens);\n', '        \n', '        totalSupply = safeSub(totalSupply, tokens);\n', '\n', '    \n', '\t    Founder1.transfer((msg.value/3));\t\t\t\t\t//Send the ETH\n', '\t    Founder2.transfer((msg.value/3));\t\t\t\t\t//Send the ETH\n', '\t    Founder3.transfer((msg.value/3));\t\t\t\t\t//Send the ETH\n', '\n', '        Buy(recipient, msg.value, tokens);\n', '        \n', '    }\n', '    \n', '    \n', '    \n', '    //Burn all remaining tokens.\n', '    //Only contract creator can do this.\n', '    function Burn () {\n', '        \n', '        if (msg.sender == owner && totalSupply > 0)\n', '        {\n', '            totalSupply = 0;\n', '        } else {throw;}\n', '\n', '    }\n', '    \n', '    \n', '\n', '}']
['/**\n', ' * Overflow aware uint math functions.\n', ' *\n', ' * Inspired by https://github.com/MakerDAO/maker-otc/blob/master/contracts/simple_market.sol\n', ' */\n', 'contract SafeMath {\n', '  //internals\n', '\n', '  function safeMul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) throw;\n', '  }\n', '}\n', '\n', '/**\n', ' * ERC 20 token\n', ' *\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract Token {\n', '\n', '    /// @return total amount of tokens\n', '    function totalSupply() constant returns (uint256 supply) {}\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '}\n', '\n', '/**\n', ' * ERC 20 token\n', ' *\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract StandardToken is Token {\n', '\n', '    /**\n', '     * Reviewed:\n', '     * - Interger overflow = OK, checked\n', '     */\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    uint256 public totalSupply;\n', '\n', '}\n', '\n', '\n', '/**\n', ' * CTest1 crowdsale contract.\n', ' *\n', ' * Security criteria evaluated against http://ethereum.stackexchange.com/questions/8551/methodological-security-review-of-a-smart-contract\n', ' *\n', ' *\n', ' */\n', 'contract CTest1 is StandardToken, SafeMath {\n', '\n', '    string public name = "CTest1 Token";\n', '    string public symbol = "CTest1";\n', '    uint public decimals = 18;\n', '    \n', '    uint256 public totalSupply = 1000000;\n', '\n', '\n', '    // Set the contract controller address\n', '    // Set the 3 Founder addresses\n', '    address public owner = msg.sender;\n', '    address public Founder1 = 0xB5D39A8Ea30005f9114Bf936025De2D6f353813E;\n', '    address public Founder2 = 0x00A591199F53907480E1f5A00958b93B43200Fe4;\n', '    address public Founder3 = 0x0d19C131400e73c71bBB2bC1666dBa8Fe22d242D;\n', '\n', '\n', '    event Buy(address indexed sender, uint eth, uint fbt);\n', '\n', '\n', '    /**\n', '     * ERC 20 Standard Token interface transfer function\n', '     */\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '    /**\n', '     * ERC 20 Standard Token interface transfer function\n', '     *\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '    \n', '    \n', '   \n', '// CTest1 TOKEN FOUNDER ETH ADDRESSES \n', '// 0xB5D39A8Ea30005f9114Bf936025De2D6f353813E\n', '// 0x00A591199F53907480E1f5A00958b93B43200Fe4\n', '// 0x0d19C131400e73c71bBB2bC1666dBa8Fe22d242D\n', '    \n', '    \n', '    function () payable {\n', '        \n', '        \n', '        //If all the tokens are gone, stop!\n', '        if (totalSupply < 1)\n', '        {\n', '            throw;\n', '        }\n', '        \n', '        \n', '        uint256 rate = 0;\n', '        address recipient = msg.sender;\n', '        \n', '        \n', '        //Set the price to 0.0003 ETH/CTest1\n', '        //$0.10 per\n', '        if (totalSupply > 975000)\n', '        {\n', '            rate = 3340;\n', '        }\n', '        \n', '        //Set the price to 0.0015 ETH/CTest1\n', '        //$0.50 per\n', '        if (totalSupply < 975001)\n', '        {\n', '            rate = 668;\n', '        }\n', '        \n', '        //Set the price to 0.0030 ETH/CTest1\n', '        //$1.00 per\n', '        if (totalSupply < 875001)\n', '        {\n', '            rate = 334;\n', '        }\n', '        \n', '        //Set the price to 0.0075 ETH/CTest1\n', '        //$2.50 per\n', '        if (totalSupply < 475001)\n', '        {\n', '            rate = 134;\n', '        }\n', '        \n', '        \n', '       \n', '\n', '        \n', '        uint256 tokens = safeMul(msg.value, rate);\n', '        tokens = tokens/1 ether;\n', '        \n', '        \n', '        //Make sure they send enough to buy atleast 1 token.\n', '        if (tokens < 1)\n', '        {\n', '            throw;\n', '        }\n', '        \n', '        \n', "        //Make sure someone isn't buying more than the remaining supply\n", '        uint256 check = safeSub(totalSupply, tokens);\n', '        if (check < 0)\n', '        {\n', '            throw;\n', '        }\n', '        \n', '        \n', "        //Make sure someone isn't buying more than the current tier\n", '        if (totalSupply > 975000 && check < 975000)\n', '        {\n', '            throw;\n', '        }\n', '        \n', "        //Make sure someone isn't buying more than the current tier\n", '        if (totalSupply > 875000 && check < 875000)\n', '        {\n', '            throw;\n', '        }\n', '        \n', "        //Make sure someone isn't buying more than the current tier\n", '        if (totalSupply > 475000 && check < 475000)\n', '        {\n', '            throw;\n', '        }\n', '        \n', '        \n', '        //Prevent any ETH address from buying more than 50 CTest1 during the pre-sale\n', '        if ((balances[recipient] + tokens) > 50 && totalSupply > 975000)\n', '        {\n', '            throw;\n', '        }\n', '        \n', '        \n', '        balances[recipient] = safeAdd(balances[recipient], tokens);\n', '        \n', '        totalSupply = safeSub(totalSupply, tokens);\n', '\n', '    \n', '\t    Founder1.transfer((msg.value/3));\t\t\t\t\t//Send the ETH\n', '\t    Founder2.transfer((msg.value/3));\t\t\t\t\t//Send the ETH\n', '\t    Founder3.transfer((msg.value/3));\t\t\t\t\t//Send the ETH\n', '\n', '        Buy(recipient, msg.value, tokens);\n', '        \n', '    }\n', '    \n', '    \n', '    \n', '    //Burn all remaining tokens.\n', '    //Only contract creator can do this.\n', '    function Burn () {\n', '        \n', '        if (msg.sender == owner && totalSupply > 0)\n', '        {\n', '            totalSupply = 0;\n', '        } else {throw;}\n', '\n', '    }\n', '    \n', '    \n', '\n', '}']
