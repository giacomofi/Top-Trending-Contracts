['pragma solidity ^0.4.13;\n', '/*I will fastelly  create your own cryptocurrency\n', ' (token on the most safe Ethereum blockchain) \n', 'fully supported by Ethereum ecosystem and cryptocurrency exchanges,\n', 'write and deploy smartcontracts inside the ETH blockchain ,\n', 'then I verify your&#39;s coin open-source code with the etherscan Explorer.\n', 'After  I create the  GitHub brunch for you and\n', 'also add your coin to EtherDelta exchange . \n', 'The full price is 0.33 ETH or ~60$\n', '\n', 'After you  send 0.33 ETH to this smartcontract you are receiving 3.3 RomanLanskoj coins (JOB)\n', 'This means you already paid me for the job and I will create the coin for you\n', '\n', 'if you use myetherwallet.com\n', 'open <<add custom token>>\n', 'Address is this smarcontract&#39;s address\n', 'Token Symbol is "RomanLanskoj"\n', 'the number of decimals is "2"\n', '\n', '*/\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        if (msg.sender != owner) throw;\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\n', '\n', 'contract token {\n', '    /* Public variables of the token */\n', '    string public standard = &#39;Token 1.0&#39;;\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;                         // Set the symbol for display purposes\n', '       \n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    function token(\n', '        uint256 initialSupply,\n', '        string name,\n', '        uint8 decimals,\n', '        string symbol\n', '        )\n', '        {\n', '        balanceOf[msg.sender] = 33000;              \n', '        totalSupply = initialSupply;\n', '        name = "RomanLanskoj";                                 \n', '        symbol = "JOB";                               \n', '        decimals = 2;                \n', '        }\n', '        \n', '\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) {\n', '        if (balanceOf[msg.sender] < _value) throw;           \n', '        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\n', '        balanceOf[msg.sender] -= _value;                     \n', '        balanceOf[_to] += _value;                            \n', '        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n', '    }\n', '\n', '\n', '    function approve(address _spender, uint256 _value)\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        returns (bool success) {    \n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (balanceOf[_from] < _value) throw;                 \n', '        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows\n', '        if (_value > allowance[_from][msg.sender]) throw;   // Check allowance\n', '        balanceOf[_from] -= _value;                          // Subtract from the sender\n', '        balanceOf[_to] += _value;                            // Add the same to the recipient\n', '        allowance[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function () {\n', '        throw;     // Prevents accidental sending of ether\n', '    }\n', '}\n', '\n', 'contract MyOffer is owned, token {\n', '\n', 'uint256 public sellPrice;\n', 'uint256 public buyPrice;\n', '  function MyOffer (\n', '         uint256 initialSupply,\n', '        string name,\n', '        uint8 decimals,\n', '        string symbol\n', '    ) token (initialSupply, name, decimals, symbol) {\n', '        initialSupply = 75000;\n', '    }\n', '\n', '\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    event FrozenFunds(address target, bool frozen);\n', '\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) {\n', '        if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) throw; \n', '        if (frozenAccount[msg.sender]) throw;                \n', '        balanceOf[msg.sender] -= _value;                     \n', '        balanceOf[_to] += _value;                            \n', '        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n', '    }\n', '\n', '\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (frozenAccount[_from]) throw;                                    \n', '        if (balanceOf[_from] < _value) throw;                 \n', '        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  \n', '        if (_value > allowance[_from][msg.sender]) throw;   \n', '        balanceOf[_from] -= _value;                          \n', '        balanceOf[_to] += _value;                            \n', '        allowance[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function mintToken(address target, uint256 mintedAmount) onlyOwner {\n', '        balanceOf[target] += mintedAmount;\n', '        totalSupply += mintedAmount;\n', '        Transfer(0, this, mintedAmount);\n', '        Transfer(this, target, mintedAmount);\n', '    }\n', '\n', '    function freezeAccount(address target, bool freeze) onlyOwner {\n', '        frozenAccount[target] = freeze;\n', '        FrozenFunds(target, freeze);\n', '    }\n', '\n', '  \n', '\n', '    function buy(uint256 amount, uint256 buyPrice) payable {\n', '        amount = msg.value / buyPrice;                \n', '        if (balanceOf[this] < amount) throw;               \n', '        balanceOf[msg.sender] += amount;                   \n', '        balanceOf[this] -= amount;      \n', '        buyPrice = 10000;                       \n', '        Transfer(this, msg.sender, amount);                // execute an event reflecting the change\n', '    }\n', '\n', '    function sell(uint256 amount, uint sellPrice) {\n', '        if (balanceOf[msg.sender] < amount ) throw;        \n', '        balanceOf[this] += amount;                         \n', '        balanceOf[msg.sender] -= amount;     \n', '       sellPrice = 10;          \n', '        if (!msg.sender.send(amount * sellPrice)) {        \n', '            throw;                                         \n', '        } else {\n', '            Transfer(msg.sender, this, amount);            // executes an event reflecting on the change\n', '        }         \n', '  \n', '    }\n', '}']
['pragma solidity ^0.4.13;\n', '/*I will fastelly  create your own cryptocurrency\n', ' (token on the most safe Ethereum blockchain) \n', 'fully supported by Ethereum ecosystem and cryptocurrency exchanges,\n', 'write and deploy smartcontracts inside the ETH blockchain ,\n', "then I verify your's coin open-source code with the etherscan Explorer.\n", 'After  I create the  GitHub brunch for you and\n', 'also add your coin to EtherDelta exchange . \n', 'The full price is 0.33 ETH or ~60$\n', '\n', 'After you  send 0.33 ETH to this smartcontract you are receiving 3.3 RomanLanskoj coins (JOB)\n', 'This means you already paid me for the job and I will create the coin for you\n', '\n', 'if you use myetherwallet.com\n', 'open <<add custom token>>\n', "Address is this smarcontract's address\n", 'Token Symbol is "RomanLanskoj"\n', 'the number of decimals is "2"\n', '\n', '*/\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        if (msg.sender != owner) throw;\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\n', '\n', 'contract token {\n', '    /* Public variables of the token */\n', "    string public standard = 'Token 1.0';\n", '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;                         // Set the symbol for display purposes\n', '       \n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    function token(\n', '        uint256 initialSupply,\n', '        string name,\n', '        uint8 decimals,\n', '        string symbol\n', '        )\n', '        {\n', '        balanceOf[msg.sender] = 33000;              \n', '        totalSupply = initialSupply;\n', '        name = "RomanLanskoj";                                 \n', '        symbol = "JOB";                               \n', '        decimals = 2;                \n', '        }\n', '        \n', '\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) {\n', '        if (balanceOf[msg.sender] < _value) throw;           \n', '        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\n', '        balanceOf[msg.sender] -= _value;                     \n', '        balanceOf[_to] += _value;                            \n', '        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n', '    }\n', '\n', '\n', '    function approve(address _spender, uint256 _value)\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        returns (bool success) {    \n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (balanceOf[_from] < _value) throw;                 \n', '        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows\n', '        if (_value > allowance[_from][msg.sender]) throw;   // Check allowance\n', '        balanceOf[_from] -= _value;                          // Subtract from the sender\n', '        balanceOf[_to] += _value;                            // Add the same to the recipient\n', '        allowance[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function () {\n', '        throw;     // Prevents accidental sending of ether\n', '    }\n', '}\n', '\n', 'contract MyOffer is owned, token {\n', '\n', 'uint256 public sellPrice;\n', 'uint256 public buyPrice;\n', '  function MyOffer (\n', '         uint256 initialSupply,\n', '        string name,\n', '        uint8 decimals,\n', '        string symbol\n', '    ) token (initialSupply, name, decimals, symbol) {\n', '        initialSupply = 75000;\n', '    }\n', '\n', '\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    event FrozenFunds(address target, bool frozen);\n', '\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) {\n', '        if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) throw; \n', '        if (frozenAccount[msg.sender]) throw;                \n', '        balanceOf[msg.sender] -= _value;                     \n', '        balanceOf[_to] += _value;                            \n', '        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n', '    }\n', '\n', '\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (frozenAccount[_from]) throw;                                    \n', '        if (balanceOf[_from] < _value) throw;                 \n', '        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  \n', '        if (_value > allowance[_from][msg.sender]) throw;   \n', '        balanceOf[_from] -= _value;                          \n', '        balanceOf[_to] += _value;                            \n', '        allowance[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function mintToken(address target, uint256 mintedAmount) onlyOwner {\n', '        balanceOf[target] += mintedAmount;\n', '        totalSupply += mintedAmount;\n', '        Transfer(0, this, mintedAmount);\n', '        Transfer(this, target, mintedAmount);\n', '    }\n', '\n', '    function freezeAccount(address target, bool freeze) onlyOwner {\n', '        frozenAccount[target] = freeze;\n', '        FrozenFunds(target, freeze);\n', '    }\n', '\n', '  \n', '\n', '    function buy(uint256 amount, uint256 buyPrice) payable {\n', '        amount = msg.value / buyPrice;                \n', '        if (balanceOf[this] < amount) throw;               \n', '        balanceOf[msg.sender] += amount;                   \n', '        balanceOf[this] -= amount;      \n', '        buyPrice = 10000;                       \n', '        Transfer(this, msg.sender, amount);                // execute an event reflecting the change\n', '    }\n', '\n', '    function sell(uint256 amount, uint sellPrice) {\n', '        if (balanceOf[msg.sender] < amount ) throw;        \n', '        balanceOf[this] += amount;                         \n', '        balanceOf[msg.sender] -= amount;     \n', '       sellPrice = 10;          \n', '        if (!msg.sender.send(amount * sellPrice)) {        \n', '            throw;                                         \n', '        } else {\n', '            Transfer(msg.sender, this, amount);            // executes an event reflecting on the change\n', '        }         \n', '  \n', '    }\n', '}']
