['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', 'contract HasNoEther is Ownable {\n', '\n', '  /**\n', '  * @dev Constructor that rejects incoming Ether\n', '  * @dev The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n', '  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n', '  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n', '  * we could use assembly to access msg.value.\n', '  */\n', '  function HasNoEther() payable {\n', '    require(msg.value == 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Disallows direct send by settings a default function without the `payable` flag.\n', '   */\n', '  function() external {\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer all Ether held by the contract to the owner.\n', '   */\n', '  function reclaimEther() external onlyOwner {\n', '    assert(owner.send(this.balance));\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract LimitedTransferToken is ERC20 {\n', '\n', '  /**\n', '   * @dev Checks whether it can transfer or otherwise throws.\n', '   */\n', '  modifier canTransfer(address _sender, uint256 _value) {\n', '   require(_value <= transferableTokens(_sender, uint64(now)));\n', '   _;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks modifier and allows transfer if tokens are not locked.\n', '   * @param _to The address that will recieve the tokens.\n', '   * @param _value The amount of tokens to be transferred.\n', '   */\n', '  function transfer(address _to, uint256 _value) canTransfer(msg.sender, _value) returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  /**\n', '  * @dev Checks modifier and allows transfer if tokens are not locked.\n', '  * @param _from The address that will send the tokens.\n', '  * @param _to The address that will recieve the tokens.\n', '  * @param _value The amount of tokens to be transferred.\n', '  */\n', '  function transferFrom(address _from, address _to, uint256 _value) canTransfer(_from, _value) returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Default transferable tokens function returns all tokens for a holder (no limit).\n', '   * @dev Overwriting transferableTokens(address holder, uint64 time) is the way to provide the\n', '   * specific logic for limiting token transferability for a holder over time.\n', '   */\n', '  function transferableTokens(address holder, uint64 time) constant public returns (uint256) {\n', '    return balanceOf(holder);\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', 'contract BurnableToken is StandardToken {\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint _value)\n', '        public\n', '    {\n', '        require(_value > 0);\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(burner, _value);\n', '    }\n', '\n', '    event Burn(address indexed burner, uint indexed value);\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will recieve the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(0x0, _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract BearCoin is BurnableToken, MintableToken, LimitedTransferToken, Pausable, HasNoEther {\n', '\tstruct Tether {\n', '\t\tbytes5 currency;\n', '\t\tuint32 amount;\n', '\t\tuint32 price;\n', '\t\tuint32 startBlock;\n', '\t\tuint32 endBlock;\n', '\t}\n', '\n', '\taddress[] public addressById;\n', '\tmapping (string => uint256) idByName;\n', '\tmapping (address => string) nameByAddress;\n', '\n', '\t// Ether/Wei have the same conversion as Bear/Cub\n', '\tuint256 public constant INITIAL_SUPPLY = 2000000 ether;\n', '\n', '\tstring public constant symbol = "BEAR";\n', '\tuint256 public constant decimals = 18;\n', '\tstring public constant name = "BearCoin";\n', '\n', '\tstring constant genesis = "CR30001";\n', '\tuint256 public genesisBlock = 0;\n', '\n', '\tmapping (address => Tether[]) public currentTethers;\n', '\taddress public controller;\n', '\n', '\tevent Tethered(address indexed holder, string holderName, string currency, uint256 amount, uint32 price, uint256 indexed tetherID, uint timestamp, string message);\n', '\tevent Untethered(address indexed holder,string holderName, string currency, uint256 amount, uint32 price, uint32 finalPrice, uint256 outcome, uint256 indexed tetherID, uint timestamp);\n', '\tevent NameRegistered(address indexed a, uint256 id, string userName, uint timestamp);\n', '\tevent NameChanged(address indexed a, uint256 id, string newUserName, string oldUserName, uint timestamp);\n', '\n', '\tfunction BearCoin() {\n', '\t\tbalances[msg.sender] = INITIAL_SUPPLY;\n', '\t\ttotalSupply = INITIAL_SUPPLY;\n', '\t\taddressById.push(0x0);\n', '\t\tidByName[genesis] = 0;\n', '\t\tnameByAddress[0x0] = genesis;\n', '\t\tgenesisBlock = block.number;\n', '\t}\n', '\n', '\t// Non-upgradable function required for LimitedTransferToken\n', '\tfunction transferableTokens(address holder, uint64 time) constant public returns (uint256) {\n', '\t\tuint256 count = tetherCount(holder);\n', '\n', '\t\tif (count == 0) return super.transferableTokens(holder, time);\n', '\n', '\t\tuint256 tetheredTokens = 0;\n', '\t\tfor (uint256 i = 0; i < count; i++) {\n', '\t\t\t// All tethers are initialized with an endBlock of 0\n', '\t\t\tif (currentTethers[holder][i].endBlock == 0) {\n', '\t\t\t\ttetheredTokens = tetheredTokens.add(_finneyToWei(currentTethers[holder][i].amount));\n', '\t\t\t}\n', '\t\t}\n', '\n', '\t\treturn balances[holder].sub(tetheredTokens);\n', '\t}\n', '\n', '\t// only x modifiers\n', '\tmodifier onlyController() {\n', '\t\trequire(msg.sender == controller);\n', '\t\t_;\n', '\t}\n', '\n', '\t// Set roles\n', '\tfunction setController(address a) onlyOwner {\n', '\t\tcontroller = a;\n', '\t}\n', '\n', '\t// Controller-only functions\n', '\tfunction addTether(address a, string _currency, uint256 amount, uint32 price, string m) external onlyController whenNotPaused {\n', '\t\t// Make sure there are enough BearCoins to tether\n', '\t\trequire(transferableTokens(a, 0) >= amount);\n', '\t\tbytes5 currency = _stringToBytes5(_currency);\n', '\t\tuint256 count = currentTethers[a].push(Tether(currency, _weiToFinney(amount), price, uint32(block.number.sub(genesisBlock)), 0));\n', '\t\tTethered(a, nameByAddress[a], _currency, amount, price, count - 1, now, m);\n', '\t}\n', '\tfunction setTether(address a, uint256 tetherID, uint32 finalPrice, uint256 outcome) external onlyController whenNotPaused {\n', '\t\tcurrentTethers[a][tetherID].endBlock = uint32(block.number.sub(genesisBlock));\n', '\t\tTether memory tether = currentTethers[a][tetherID];\n', '\t\tUntethered(a, nameByAddress[a], _bytes5ToString(tether.currency), tether.amount, tether.price, finalPrice, outcome, tetherID, now);\n', '\t}\n', '\tfunction controlledMint(address _to, uint256 _amount) external onlyController whenNotPaused returns (bool) {\n', '\t\ttotalSupply = totalSupply.add(_amount);\n', '\t\tbalances[_to] = balances[_to].add(_amount);\n', '\t\tMint(_to, _amount);\n', '\t\tTransfer(0x0, _to, _amount);\n', '\t\treturn true;\n', '\t}\n', '\tfunction controlledBurn(address _from, uint256 _value) external onlyController whenNotPaused returns (bool) {\n', '\t\trequire(_value > 0);\n', '\n', '\t\tbalances[_from] = balances[_from].sub(_value);\n', '\t\ttotalSupply = totalSupply.sub(_value);\n', '\t\tBurn(_from, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction registerName(address a, string n) external onlyController whenNotPaused {\n', '\t\trequire(!isRegistered(a));\n', '\t\trequire(getIdByName(n) == 0);\n', '\t\trequire(a != 0x0);\n', '\t\trequire(_nameValid(n));\n', '\t\tuint256 length = addressById.push(a);\n', '\t\tuint256 id = length - 1;\n', '\t\tidByName[_toLower(n)] = id;\n', '\t\tnameByAddress[a] = n;\n', '\t\tNameRegistered(a, id, n, now);\n', '\t}\n', '\tfunction changeName(address a, string n) external onlyController whenNotPaused {\n', '\t\trequire(isRegistered(a));\n', '\t\trequire(getIdByName(n) == 0);\n', '\t\trequire(a != 0x0);\n', '\t\trequire(_nameValid(n));\n', '\t\tstring memory old = nameByAddress[a];\n', '\t\tuint256 id = getIdByName(old);\n', '\t\tidByName[_toLower(old)] = 0;\n', '\t\tidByName[_toLower(n)] = id;\n', '\t\tnameByAddress[a] = n;\n', '\t\tNameChanged(a, id, n, old, now);\n', '\t}\n', '\n', '\t// Getters\n', '\tfunction getTether(address a, uint256 tetherID) public constant returns (string, uint256, uint32, uint256, uint256) {\n', '\t\tTether storage tether = currentTethers[a][tetherID];\n', '\t\treturn (_bytes5ToString(tether.currency), _finneyToWei(tether.amount), tether.price, uint256(tether.startBlock).add(genesisBlock), uint256(tether.endBlock).add(genesisBlock));\n', '\t}\n', '\tfunction getTetherInts(address a, uint256 tetherID) public constant returns (uint256, uint32, uint32, uint32) {\n', '\t\tTether memory tether = currentTethers[a][tetherID];\n', '\t\treturn (_finneyToWei(tether.amount), tether.price, tether.startBlock, tether.endBlock);\n', '\t}\n', '\tfunction tetherCount(address a) public constant returns (uint256) {\n', '\t\treturn currentTethers[a].length;\n', '\t}\n', '\tfunction getAddressById(uint256 id) returns (address) {\n', '\t\treturn addressById[id];\n', '\t}\n', '\tfunction getIdByName(string n) returns (uint256) {\n', '\t\treturn idByName[_toLower(n)];\n', '\t}\n', '\tfunction getNameByAddress(address a) returns (string) {\n', '\t\treturn nameByAddress[a];\n', '\t}\n', '\tfunction getAddressCount() returns (uint256) {\n', '\t\treturn addressById.length;\n', '\t}\n', '\n', '\t// Utility functions\n', '\tfunction verifyTetherCurrency(address a, uint256 tetherID, string currency) public constant returns (bool) {\n', '\t\treturn currentTethers[a][tetherID].currency == _stringToBytes5(currency);\n', '\t}\n', '\tfunction verifyTetherLoss(address a, uint256 tetherID, uint256 price) public constant returns (bool) {\n', '\t\treturn currentTethers[a][tetherID].price < uint32(price);\n', '\t}\n', '\tfunction isRegistered(address a) returns (bool) {\n', "\t\treturn keccak256(nameByAddress[a]) != keccak256('');\n", '\t}\n', '\n', '\t// Internal helper functions\n', '\tfunction _nameValid(string s) internal returns (bool) {\n', '\t\treturn bytes(s).length != 0 && keccak256(s) != keccak256(genesis) && bytes(s).length <= 32;\n', '\t}\n', '\tfunction _bytes5ToString(bytes5 b) internal returns (string memory s) {\n', '\t\tbytes memory bs = new bytes(5);\n', '\t\tfor (uint8 i = 0; i < 5; i++) {\n', '\t\t\tbs[i] = b[i];\n', '\t\t}\n', '\t\ts = string(bs);\n', '\t}\n', '\tfunction _stringToBytes5(string memory s) internal returns (bytes5 b) {\n', '\t\tassembly {\n', '\t\t\tb := mload(add(s, 32))\n', '\t\t}\n', '\t}\n', '\tfunction _toLower(string str) internal returns (string) {\n', '\t\tbytes memory bStr = bytes(str);\n', '\t\tbytes memory bLower = new bytes(bStr.length);\n', '\t\tfor (uint i = 0; i < bStr.length; i++) {\n', '\t\t\t// Uppercase character...\n', '\t\t\tif ((bStr[i] >= 65) && (bStr[i] <= 90)) {\n', '\t\t\t\t// So we add 32 to make it lowercase\n', '\t\t\t\tbLower[i] = bytes1(int(bStr[i]) + 32);\n', '\t\t\t} else {\n', '\t\t\t\tbLower[i] = bStr[i];\n', '\t\t\t}\n', '\t\t}\n', '\t\treturn string(bLower);\n', '\t}\n', '\tfunction _finneyToWei(uint32 _n) returns (uint256) {\n', '\t\tuint256 n = uint256(_n);\n', '\t\tuint256 f = 1 finney;\n', '\t\treturn n.mul(f);\n', '\t}\n', '\tfunction _weiToFinney(uint256 n) returns (uint32) {\n', '\t\tuint256 f = 1 finney;\n', '\t\tuint256 p = n.div(f);\n', '\t\treturn uint32(p);\n', '\t}\n', '\n', '}']