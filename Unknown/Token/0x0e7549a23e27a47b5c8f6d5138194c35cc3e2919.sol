['pragma solidity ^ 0.4 .16;\n', '\n', '\n', '\n', '// -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n', '\n', '// Sample fixed supply token contract\n', '\n', '// Enjoy. (c) BokkyPooBah 2017. The MIT Licence.\n', '\n', '// -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal constant returns(uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal constant returns(uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal constant returns(uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal constant returns(uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '// ERC Token Standard #20 Interface\n', '\n', '//https://github.com/ethereum/EIPs/issues/20\n', '\n', 'contract ERC20Interface {\n', '\n', '     // Get the total token supply\n', '\n', '    \n', '    function totalSupply() constant returns(uint256 _totalSupply);\n', '\n', '    \n', '\n', '    // Get the account balance of another account with address _owner\n', '\n', '    \n', '    function balanceOf(address _owner) constant returns(uint256 balance);\n', '\n', '    \n', '\n', '     // Send _value amount of tokens to address _to\n', '\n', '    \n', '    function transfer(address _to, uint256 _value) returns(bool success);\n', '\n', '     // Send _value amount of tokens from address _from to address _to\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns(bool success);\n', '\n', ' // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', ' // If this function is called again it overwrites the current allowance with _value.\n', '\n', '// this function is required for some DEX functionality\n', '\n', ' \n', '    function approve(address _spender, uint256 _value) returns(bool success);\n', '\n', '   // Returns the amount which _spender is still allowed to withdraw from _owner\n', '\n', '\n', '    function allowance(address _owner, address _spender) constant returns(uint256 remaining);\n', '\n', '   // Triggered when tokens are transferred.\n', '\n', '   \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    // Triggered whenever approve(address _spender, uint256 _value) is called.\n', '\n', '    \n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '}\n', '\n', '\n', '\n', 'contract FreeCatalugnaCoin is ERC20Interface {\n', '    using SafeMath\n', '    for uint256;\n', '\n', '    \n', '    string public constant name = "Free Catalugna Coin";  // Name of Token\n', '    \n', '    string public constant symbol = "FCC";     // Symbol of Token\n', '\n', '  uint8 public constant decimals = 18;    // Amount of decimals for display purposes  \n', '\n', ' uint256 _totalSupply = 10000000 * 10 **18;  // 10 Million token total supply......muliplied with 10 power 18 because of decimals of 4 precision\n', '\n', '    \n', '    uint256 public constant RATE = 1000;        // 1 Ether = 1000 tokens\n', '\n', '    // Owner of this contract\n', '    address public owner;\n', '\n', '   // Balances for each account\n', '   mapping(address => uint256) balances;\n', '   \n', '   // Owner of account approves the transfer of an amount to another account\n', '\n', '   mapping(address => mapping(address => uint256)) allowed;\n', '\n', '// Functions with this modifier can only be executed by the owner\n', '\n', '    modifier onlyOwner() {\n', '     if (msg.sender != owner) {\n', '         revert();\n', '            }\n', '            _;\n', '         }\n', '    uint256 tokens;\n', '   \n', '    // This is the Constructor\n', '    \n', '    function FreeCatalugnaCoin() {\n', '       \n', '        owner = msg.sender;\n', '        balances[owner] = _totalSupply;\n', '    }\n', '    \n', '     function() payable {\n', '        buyTokens();\n', '    }\n', '    \n', '    function buyTokens() payable {\n', '\n', '        require(msg.value > 0 );\n', '         tokens = msg.value.mul(RATE);\n', '        balances[msg.sender] = balances[msg.sender].add(tokens);\n', '        balances[owner] = balances[owner].sub(tokens);\n', '        \n', '        owner.transfer(msg.value);\n', '    }\n', '\n', '/* \n', '\n', '  function FixedSupplyToken() {\n', '\n', '      owner = msg.sender;\n', '\n', '     balances[owner] = _totalSupply;\n', '        \n', '    } */\n', '\n', '    function totalSupply() constant returns(uint256) {\n', '       return _totalSupply;\n', '    }\n', '\n', '// What is the balance of a particular account?\n', '\n', '    function balanceOf(address _owner) constant returns(uint256 balance) {\n', '\n', '        return balances[_owner];\n', '\n', '    }\n', '// Transfer the balance from owner&#39;s account to another account\n', '  /* Send coins during transactions*/\n', '\n', '    function transfer(address _to, uint256 _amount) returns(bool success) {\n', '\n', '        if (balances[msg.sender] >= _amount &&  balances[_to] + _amount > balances[_to]) {\n', '\n', '            balances[msg.sender] -= _amount;\n', '\n', '            balances[_to] += _amount;\n', '\n', '            Transfer(msg.sender, _to, _amount);\n', '\n', '            return true;\n', '\n', '        } else {\n', '\n', '            return false;\n', '\n', '        }\n', '\n', '    }\n', '// Send _value amount of tokens from address _from to address _to\n', ' // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n', ' // tokens on your behalf, for example to &quot;deposit&quot; to a contract address and/or to charge\n', '\n', '// fees in sub-currencies; the command should fail unless the _from account has\n', '// deliberately authorized the sender of the message via some mechanism; we propose\n', ' // these standardized APIs for approval:\n', '\n', '    function transferFrom(\n', '\n', '       address _from,\n', '\n', '      address _to,\n', '\n', '       uint256 _amount\n', '\n', '       ) returns(bool success) {\n', '\n', '        if (balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount &&  _amount > 0 && balances[_to] + _amount > balances[_to]) {\n', '\n', '            balances[_from] -= _amount;\n', '\n', '            allowed[_from][msg.sender] -= _amount;\n', '\n', '            balances[_to] += _amount;\n', '\n', '            Transfer(_from, _to, _amount);\n', '\n', '            return true;\n', '} else \n', '{\n', ' return false;\n', '        }\n', '\n', '         }\n', '\n', '    \n', '\n', '    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '\n', '   // If this function is called again it overwrites the current allowance with _value.\n', '\n', '    function approve(address _spender, uint256 _amount) returns(bool success) {\n', '\n', '     \n', '        allowed[msg.sender][_spender] = _amount;\n', '\n', '        Approval(msg.sender, _spender, _amount);\n', '\n', '      \n', '        return true;\n', '\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns(uint256 remaining) {\n', '\n', '          \n', '            return allowed[_owner][_spender];\n', '    }\n', '    \n', '    // Failsafe drain only owner can call this function\n', '    function drain() onlyOwner {\n', '          owner.transfer(this.balance);\n', '    }\n', '}']