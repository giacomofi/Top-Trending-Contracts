['pragma solidity ^0.4.11;\n', '\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      throw;\n', '    }\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) constant returns (uint);\n', '  function transfer(address to, uint value);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint;\n', '\n', '  mapping(address => uint) balances;\n', '\n', '  /**\n', '   * @dev Fix for the ERC20 short address attack.\n', '   */\n', '  modifier onlyPayloadSize(uint size) {\n', '     if(msg.data.length < size + 4) {\n', '       throw;\n', '     }\n', '     _;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint);\n', '  function transferFrom(address from, address to, uint value);\n', '  function approve(address spender, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'contract StandardToken is BasicToken, ERC20 {\n', '\n', '  mapping (address => mapping (address => uint)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // if (_value > _allowance) throw;\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint _value) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens than an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', 'contract CATFreezer {\n', '\tusing SafeMath for uint256;\n', '\n', '\t// Addresses and contracts\n', '\taddress public CATContract;\n', '\taddress public postFreezeDevCATDestination;\n', '\n', '\t// Freezer Data\n', '\tuint256 public firstAllocation;\n', '\tuint256 public secondAllocation;\n', '\tuint256 public firstThawDate;\n', '\tuint256 public secondThawDate;\n', '\tbool public firstUnlocked;\n', '\n', '\tfunction CATFreezer(\n', '\t\taddress _CATContract,\n', '\t\taddress _postFreezeDevCATDestination\n', '\t) {\n', '\t\tCATContract = _CATContract;\n', '\t\tpostFreezeDevCATDestination = _postFreezeDevCATDestination;\n', '\n', '\t\tfirstThawDate = now + 365 days;  // One year from now\n', '\t\tsecondThawDate = now + 2 * 365 days;  // Two years from now\n', '\t\t\n', '\t\tfirstUnlocked = false;\n', '\t}\n', '\n', '\tfunction unlockFirst() external {\n', '\t\tif (firstUnlocked) throw;\n', '\t\tif (msg.sender != postFreezeDevCATDestination) throw;\n', '\t\tif (now < firstThawDate) throw;\n', '\t\t\n', '\t\tfirstUnlocked = true;\n', '\t\t\n', '\t\tuint256 totalBalance = StandardToken(CATContract).balanceOf(this);\n', '\n', '\t\t// Allocations are each 50% of developer tokens\n', '\t\tfirstAllocation = totalBalance.div(2);\n', '\t\tsecondAllocation = totalBalance.sub(firstAllocation);\n', '\t\t\n', '\t\tuint256 tokens = firstAllocation;\n', '\t\tfirstAllocation = 0;\n', '\n', '\t\tStandardToken(CATContract).transfer(msg.sender, tokens);\n', '\t}\n', '\n', '\tfunction unlockSecond() external {\n', '\t\tif (!firstUnlocked) throw;\n', '\t\tif (msg.sender != postFreezeDevCATDestination) throw;\n', '\t\tif (now < secondThawDate) throw;\n', '\t\t\n', '\t\tuint256 tokens = secondAllocation;\n', '\t\tsecondAllocation = 0;\n', '\n', '\t\tStandardToken(CATContract).transfer(msg.sender, tokens);\n', '\t}\n', '\n', '\tfunction changeCATDestinationAddress(address _newAddress) external {\n', '\t\tif (msg.sender != postFreezeDevCATDestination) throw;\n', '\t\tpostFreezeDevCATDestination = _newAddress;\n', '\t}\n', '}']
['pragma solidity ^0.4.11;\n', '\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      throw;\n', '    }\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) constant returns (uint);\n', '  function transfer(address to, uint value);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint;\n', '\n', '  mapping(address => uint) balances;\n', '\n', '  /**\n', '   * @dev Fix for the ERC20 short address attack.\n', '   */\n', '  modifier onlyPayloadSize(uint size) {\n', '     if(msg.data.length < size + 4) {\n', '       throw;\n', '     }\n', '     _;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint);\n', '  function transferFrom(address from, address to, uint value);\n', '  function approve(address spender, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'contract StandardToken is BasicToken, ERC20 {\n', '\n', '  mapping (address => mapping (address => uint)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // if (_value > _allowance) throw;\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint _value) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens than an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', 'contract CATFreezer {\n', '\tusing SafeMath for uint256;\n', '\n', '\t// Addresses and contracts\n', '\taddress public CATContract;\n', '\taddress public postFreezeDevCATDestination;\n', '\n', '\t// Freezer Data\n', '\tuint256 public firstAllocation;\n', '\tuint256 public secondAllocation;\n', '\tuint256 public firstThawDate;\n', '\tuint256 public secondThawDate;\n', '\tbool public firstUnlocked;\n', '\n', '\tfunction CATFreezer(\n', '\t\taddress _CATContract,\n', '\t\taddress _postFreezeDevCATDestination\n', '\t) {\n', '\t\tCATContract = _CATContract;\n', '\t\tpostFreezeDevCATDestination = _postFreezeDevCATDestination;\n', '\n', '\t\tfirstThawDate = now + 365 days;  // One year from now\n', '\t\tsecondThawDate = now + 2 * 365 days;  // Two years from now\n', '\t\t\n', '\t\tfirstUnlocked = false;\n', '\t}\n', '\n', '\tfunction unlockFirst() external {\n', '\t\tif (firstUnlocked) throw;\n', '\t\tif (msg.sender != postFreezeDevCATDestination) throw;\n', '\t\tif (now < firstThawDate) throw;\n', '\t\t\n', '\t\tfirstUnlocked = true;\n', '\t\t\n', '\t\tuint256 totalBalance = StandardToken(CATContract).balanceOf(this);\n', '\n', '\t\t// Allocations are each 50% of developer tokens\n', '\t\tfirstAllocation = totalBalance.div(2);\n', '\t\tsecondAllocation = totalBalance.sub(firstAllocation);\n', '\t\t\n', '\t\tuint256 tokens = firstAllocation;\n', '\t\tfirstAllocation = 0;\n', '\n', '\t\tStandardToken(CATContract).transfer(msg.sender, tokens);\n', '\t}\n', '\n', '\tfunction unlockSecond() external {\n', '\t\tif (!firstUnlocked) throw;\n', '\t\tif (msg.sender != postFreezeDevCATDestination) throw;\n', '\t\tif (now < secondThawDate) throw;\n', '\t\t\n', '\t\tuint256 tokens = secondAllocation;\n', '\t\tsecondAllocation = 0;\n', '\n', '\t\tStandardToken(CATContract).transfer(msg.sender, tokens);\n', '\t}\n', '\n', '\tfunction changeCATDestinationAddress(address _newAddress) external {\n', '\t\tif (msg.sender != postFreezeDevCATDestination) throw;\n', '\t\tpostFreezeDevCATDestination = _newAddress;\n', '\t}\n', '}']
