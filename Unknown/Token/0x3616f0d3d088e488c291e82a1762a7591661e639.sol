['pragma solidity ^0.4.9;\n', '\n', 'contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\n', '\n', 'contract XToken {\n', '\n', '  string public constant name = "XTOKEN";\n', '  string public constant symbol = "XTOKEN";\n', '  uint8 public constant decimals = 18;\n', "  string public constant version = '0.15';\n", '  uint256 public constant totalSupply = 1000000000 * 1000000000000000000;\n', '\n', '  address public owner;\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '  event NewOwner(address _newOwner);\n', '\n', '  modifier checkIfToContract(address _to) {\n', '    if(_to != address(this))  {\n', '      _;\n', '    }\n', '  }\n', '\n', '  mapping (address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  function RoundToken() {\n', '    owner = msg.sender;\n', '    balances[owner] = totalSupply;\n', '  }\n', '\n', '  function replaceOwner(address _newOwner) returns (bool success) {\n', '    if (msg.sender != owner) throw;\n', '    owner = _newOwner;\n', '    NewOwner(_newOwner);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) checkIfToContract(_to) returns (bool success) {\n', '    if (balances[msg.sender] >= _value && _value > 0) {\n', '      balances[msg.sender] -= _value;\n', '      balances[_to] += _value;\n', '      Transfer(msg.sender, _to, _value);\n', '      return true;\n', '    } else {\n', '      return false;\n', '    }\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) checkIfToContract(_to) returns (bool success) {\n', '    if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '      balances[_to] += _value;\n', '      balances[_from] -= _value;\n', '      allowed[_from][msg.sender] -= _value;\n', '      Transfer(_from, _to, _value);\n', '      return true;\n', '    } else {\n', '      return false;\n', '    }\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) returns (bool success) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '    tokenRecipient spender = tokenRecipient(_spender);\n', '    if (approve(_spender, _value)) {\n', '      spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '      return true;\n', '    }\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '}']