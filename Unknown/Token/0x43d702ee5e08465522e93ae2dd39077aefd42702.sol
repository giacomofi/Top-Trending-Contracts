['pragma solidity ^0.4.13;\n', '  \n', ' // ----------------------------------------------------------------------------------------------\n', ' // Special coin of Midnighters Club Facebook community\n', ' // https://facebook.com/theMidnightersClub/\n', ' // ----------------------------------------------------------------------------------------------\n', '  \n', ' // ERC Token Standard #20 Interface\n', ' // https://github.com/ethereum/EIPs/issues/20\n', ' contract ERC20 {\n', '     // Get the total token supply\n', '     function totalSupply() constant returns (uint256 totalSupply);\n', '  \n', '     // Get the account balance of another account with address _owner\n', '     function balanceOf(address _owner) constant returns (uint256 balance);\n', '  \n', '     // Send _value amount of tokens to address _to\n', '     function transfer(address _to, uint256 _value) returns (bool success);\n', '  \n', '     // Send _value amount of tokens from address _from to address _to\n', '     function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '  \n', '     // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '     // If this function is called again it overwrites the current allowance with _value.\n', '     // this function is required for some DEX functionality\n', '     function approve(address _spender, uint256 _value) returns (bool success);\n', '  \n', '     // Returns the amount which _spender is still allowed to withdraw from _owner\n', '     function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '  \n', '     // Triggered when tokens are transferred.\n', '     event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  \n', '     // Triggered whenever approve(address _spender, uint256 _value) is called.\n', '     event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', ' }\n', '  \n', ' contract Owned {\n', '    address public owner;\n', '\n', '    function Owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '}\n', '  \n', ' contract MidnightCoin is ERC20, Owned {\n', '     string public constant symbol = "MNC";\n', '     string public constant name = "Midnight Coin";\n', '     uint8 public constant decimals = 18;\n', '     uint256 _totalSupply = 100000000000000000000;\n', '     uint public constant FREEZE_PERIOD = 1 years;\n', '     uint public crowdSaleStartTimestamp;\n', '     string public lastLoveLetter = "";\n', '     \n', '     // Balances for each account\n', '     mapping(address => uint256) balances;\n', '  \n', '     // Owner of account approves the transfer of an amount to another account\n', '     mapping(address => mapping (address => uint256)) allowed;\n', '     \n', '\n', '     // Constructor\n', '     function MidnightCoin() {\n', '         owner = msg.sender;\n', '         balances[owner] = 1000000000000000000;\n', '         crowdSaleStartTimestamp = now + 7 days;\n', '     }\n', '  \n', '     function totalSupply() constant returns (uint256 totalSupply) {\n', '         totalSupply = _totalSupply;\n', '     }\n', '  \n', '     // What is the balance of a particular account?\n', '     function balanceOf(address _owner) constant returns (uint256 balance) {\n', '         return balances[_owner];\n', '     }\n', '  \n', '     // Transfer the balance from owner&#39;s account to another account\n', '     function transfer(address _to, uint256 _amount) returns (bool success) {\n', '         if (balances[msg.sender] >= _amount \n', '             && _amount > 0\n', '             && balances[_to] + _amount > balances[_to]) {\n', '             balances[msg.sender] -= _amount;\n', '             balances[_to] += _amount;\n', '             Transfer(msg.sender, _to, _amount);\n', '             return true;\n', '         } else {\n', '             return false;\n', '         }\n', '     }\n', '  \n', '     // Send _value amount of tokens from address _from to address _to\n', '     // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n', '     // tokens on your behalf, for example to "deposit" to a contract address and/or to charge\n', '     // fees in sub-currencies; the command should fail unless the _from account has\n', '     // deliberately authorized the sender of the message via some mechanism; we propose\n', '     // these standardized APIs for approval:\n', '     function transferFrom(\n', '     address _from,\n', '         address _to,\n', '         uint256 _amount\n', '     ) returns (bool success) {\n', '         if (balances[_from] >= _amount\n', '             && allowed[_from][msg.sender] >= _amount\n', '             && _amount > 0\n', '             && balances[_to] + _amount > balances[_to]) {\n', '             balances[_from] -= _amount;\n', '             allowed[_from][msg.sender] -= _amount;\n', '             balances[_to] += _amount;\n', '             Transfer(_from, _to, _amount);\n', '             return true;\n', '         } else {\n', '             return false;\n', '         }\n', '     }\n', '  \n', '     // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '     // If this function is called again it overwrites the current allowance with _value.\n', '     function approve(address _spender, uint256 _amount) returns (bool success) {\n', '         allowed[msg.sender][_spender] = _amount;\n', '         Approval(msg.sender, _spender, _amount);\n', '         return true;\n', '     }\n', '  \n', '     function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '         return allowed[_owner][_spender];\n', '     }\n', '     \n', '     // features\n', '     \n', '     function kill() onlyOwner {\n', '        selfdestruct(owner);\n', '     }\n', '\n', '     function withdraw() public onlyOwner {\n', '        require( _totalSupply == 0 );\n', '        owner.transfer(this.balance);\n', '     }\n', '  \n', '     function buyMNC(string _loveletter) payable{\n', '        require (now > crowdSaleStartTimestamp);\n', '        require( _totalSupply >= msg.value);\n', '        balances[msg.sender] += msg.value;\n', '        _totalSupply -= msg.value;\n', '        lastLoveLetter = _loveletter;\n', '     }\n', '     \n', '     function sellMNC(uint256 _amount) {\n', '        require (now > crowdSaleStartTimestamp + FREEZE_PERIOD);\n', '        require( balances[msg.sender] >= _amount);\n', '        balances[msg.sender] -= _amount;\n', '        _totalSupply += _amount;\n', '        msg.sender.transfer(_amount);\n', '     }\n', '     \n', '     function() payable{\n', '        buyMNC("Hi! I am anonymous holder");\n', '     }\n', '     \n', ' }']
['pragma solidity ^0.4.13;\n', '  \n', ' // ----------------------------------------------------------------------------------------------\n', ' // Special coin of Midnighters Club Facebook community\n', ' // https://facebook.com/theMidnightersClub/\n', ' // ----------------------------------------------------------------------------------------------\n', '  \n', ' // ERC Token Standard #20 Interface\n', ' // https://github.com/ethereum/EIPs/issues/20\n', ' contract ERC20 {\n', '     // Get the total token supply\n', '     function totalSupply() constant returns (uint256 totalSupply);\n', '  \n', '     // Get the account balance of another account with address _owner\n', '     function balanceOf(address _owner) constant returns (uint256 balance);\n', '  \n', '     // Send _value amount of tokens to address _to\n', '     function transfer(address _to, uint256 _value) returns (bool success);\n', '  \n', '     // Send _value amount of tokens from address _from to address _to\n', '     function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '  \n', '     // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '     // If this function is called again it overwrites the current allowance with _value.\n', '     // this function is required for some DEX functionality\n', '     function approve(address _spender, uint256 _value) returns (bool success);\n', '  \n', '     // Returns the amount which _spender is still allowed to withdraw from _owner\n', '     function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '  \n', '     // Triggered when tokens are transferred.\n', '     event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  \n', '     // Triggered whenever approve(address _spender, uint256 _value) is called.\n', '     event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', ' }\n', '  \n', ' contract Owned {\n', '    address public owner;\n', '\n', '    function Owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '}\n', '  \n', ' contract MidnightCoin is ERC20, Owned {\n', '     string public constant symbol = "MNC";\n', '     string public constant name = "Midnight Coin";\n', '     uint8 public constant decimals = 18;\n', '     uint256 _totalSupply = 100000000000000000000;\n', '     uint public constant FREEZE_PERIOD = 1 years;\n', '     uint public crowdSaleStartTimestamp;\n', '     string public lastLoveLetter = "";\n', '     \n', '     // Balances for each account\n', '     mapping(address => uint256) balances;\n', '  \n', '     // Owner of account approves the transfer of an amount to another account\n', '     mapping(address => mapping (address => uint256)) allowed;\n', '     \n', '\n', '     // Constructor\n', '     function MidnightCoin() {\n', '         owner = msg.sender;\n', '         balances[owner] = 1000000000000000000;\n', '         crowdSaleStartTimestamp = now + 7 days;\n', '     }\n', '  \n', '     function totalSupply() constant returns (uint256 totalSupply) {\n', '         totalSupply = _totalSupply;\n', '     }\n', '  \n', '     // What is the balance of a particular account?\n', '     function balanceOf(address _owner) constant returns (uint256 balance) {\n', '         return balances[_owner];\n', '     }\n', '  \n', "     // Transfer the balance from owner's account to another account\n", '     function transfer(address _to, uint256 _amount) returns (bool success) {\n', '         if (balances[msg.sender] >= _amount \n', '             && _amount > 0\n', '             && balances[_to] + _amount > balances[_to]) {\n', '             balances[msg.sender] -= _amount;\n', '             balances[_to] += _amount;\n', '             Transfer(msg.sender, _to, _amount);\n', '             return true;\n', '         } else {\n', '             return false;\n', '         }\n', '     }\n', '  \n', '     // Send _value amount of tokens from address _from to address _to\n', '     // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n', '     // tokens on your behalf, for example to "deposit" to a contract address and/or to charge\n', '     // fees in sub-currencies; the command should fail unless the _from account has\n', '     // deliberately authorized the sender of the message via some mechanism; we propose\n', '     // these standardized APIs for approval:\n', '     function transferFrom(\n', '     address _from,\n', '         address _to,\n', '         uint256 _amount\n', '     ) returns (bool success) {\n', '         if (balances[_from] >= _amount\n', '             && allowed[_from][msg.sender] >= _amount\n', '             && _amount > 0\n', '             && balances[_to] + _amount > balances[_to]) {\n', '             balances[_from] -= _amount;\n', '             allowed[_from][msg.sender] -= _amount;\n', '             balances[_to] += _amount;\n', '             Transfer(_from, _to, _amount);\n', '             return true;\n', '         } else {\n', '             return false;\n', '         }\n', '     }\n', '  \n', '     // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '     // If this function is called again it overwrites the current allowance with _value.\n', '     function approve(address _spender, uint256 _amount) returns (bool success) {\n', '         allowed[msg.sender][_spender] = _amount;\n', '         Approval(msg.sender, _spender, _amount);\n', '         return true;\n', '     }\n', '  \n', '     function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '         return allowed[_owner][_spender];\n', '     }\n', '     \n', '     // features\n', '     \n', '     function kill() onlyOwner {\n', '        selfdestruct(owner);\n', '     }\n', '\n', '     function withdraw() public onlyOwner {\n', '        require( _totalSupply == 0 );\n', '        owner.transfer(this.balance);\n', '     }\n', '  \n', '     function buyMNC(string _loveletter) payable{\n', '        require (now > crowdSaleStartTimestamp);\n', '        require( _totalSupply >= msg.value);\n', '        balances[msg.sender] += msg.value;\n', '        _totalSupply -= msg.value;\n', '        lastLoveLetter = _loveletter;\n', '     }\n', '     \n', '     function sellMNC(uint256 _amount) {\n', '        require (now > crowdSaleStartTimestamp + FREEZE_PERIOD);\n', '        require( balances[msg.sender] >= _amount);\n', '        balances[msg.sender] -= _amount;\n', '        _totalSupply += _amount;\n', '        msg.sender.transfer(_amount);\n', '     }\n', '     \n', '     function() payable{\n', '        buyMNC("Hi! I am anonymous holder");\n', '     }\n', '     \n', ' }']
