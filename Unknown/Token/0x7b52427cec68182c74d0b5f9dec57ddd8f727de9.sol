['pragma solidity ^0.4.4;\n', '\n', '/**\n', ' * @title Contract for object that have an owner\n', ' */\n', 'contract Owned {\n', '    /**\n', '     * Contract owner address\n', '     */\n', '    address public owner;\n', '\n', '    /**\n', '     * @dev Delegate contract to another person\n', '     * @param _owner New owner address \n', '     */\n', '    function setOwner(address _owner) onlyOwner\n', '    { owner = _owner; }\n', '\n', '    /**\n', '     * @dev Owner check modifier\n', '     */\n', '    modifier onlyOwner { if (msg.sender != owner) throw; _; }\n', '}\n', '\n', '/**\n', ' * @title Common pattern for destroyable contracts \n', ' */\n', 'contract Destroyable {\n', '    address public hammer;\n', '\n', '    /**\n', '     * @dev Hammer setter\n', '     * @param _hammer New hammer address\n', '     */\n', '    function setHammer(address _hammer) onlyHammer\n', '    { hammer = _hammer; }\n', '\n', '    /**\n', '     * @dev Destroy contract and scrub a data\n', '     * @notice Only hammer can call it \n', '     */\n', '    function destroy() onlyHammer\n', '    { suicide(msg.sender); }\n', '\n', '    /**\n', '     * @dev Hammer check modifier\n', '     */\n', '    modifier onlyHammer { if (msg.sender != hammer) throw; _; }\n', '}\n', '\n', '/**\n', ' * @title Generic owned destroyable contract\n', ' */\n', 'contract Object is Owned, Destroyable {\n', '    function Object() {\n', '        owner  = msg.sender;\n', '        hammer = msg.sender;\n', '    }\n', '}\n', '\n', '// Standard token interface (ERC 20)\n', '// https://github.com/ethereum/EIPs/issues/20\n', 'contract ERC20 \n', '{\n', '// Functions:\n', '    /// @return total amount of tokens\n', '    uint256 public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool);\n', '\n', '    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256);\n', '\n', '// Events:\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '/**\n', ' * @title Token contract represents any asset in digital economy\n', ' */\n', 'contract Token is Object, ERC20 {\n', '    /* Short description of token */\n', '    string public name;\n', '    string public symbol;\n', '\n', '    /* Total count of tokens exist */\n', '    uint public totalSupply;\n', '\n', '    /* Fixed point position */\n', '    uint8 public decimals;\n', '    \n', '    /* Token approvement system */\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowances;\n', ' \n', '    /**\n', '     * @dev Get balance of plain address\n', '     * @param _owner is a target address\n', '     * @return amount of tokens on balance\n', '     */\n', '    function balanceOf(address _owner) constant returns (uint256)\n', '    { return balances[_owner]; }\n', ' \n', '    /**\n', '     * @dev Take allowed tokens\n', '     * @param _owner The address of the account owning tokens\n', '     * @param _spender The address of the account able to transfer the tokens\n', '     * @return Amount of remaining tokens allowed to spent\n', '     */\n', '    function allowance(address _owner, address _spender) constant returns (uint256)\n', '    { return allowances[_owner][_spender]; }\n', '\n', '    /* Token constructor */\n', '    function Token(string _name, string _symbol, uint8 _decimals, uint _count) {\n', '        name        = _name;\n', '        symbol      = _symbol;\n', '        decimals    = _decimals;\n', '        totalSupply = _count;\n', '        balances[msg.sender] = _count;\n', '    }\n', ' \n', '    /**\n', '     * @dev Transfer self tokens to given address\n', '     * @param _to destination address\n', '     * @param _value amount of token values to send\n', '     * @notice `_value` tokens will be sended to `_to`\n', '     * @return `true` when transfer done\n', '     */\n', '    function transfer(address _to, uint _value) returns (bool) {\n', '        if (balances[msg.sender] >= _value) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to]        += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer with approvement mechainsm\n', '     * @param _from source address, `_value` tokens shold be approved for `sender`\n', '     * @param _to destination address\n', '     * @param _value amount of token values to send \n', '     * @notice from `_from` will be sended `_value` tokens to `_to`\n', '     * @return `true` when transfer is done\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '        var avail = allowances[_from][msg.sender]\n', '                  > balances[_from] ? balances[_from]\n', '                                    : allowances[_from][msg.sender];\n', '        if (avail >= _value) {\n', '            allowances[_from][msg.sender] -= _value;\n', '            balances[_from] -= _value;\n', '            balances[_to]   += _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @dev Give to target address ability for self token manipulation without sending\n', '     * @param _spender target address (future requester)\n', '     * @param _value amount of token values for approving\n', '     */\n', '    function approve(address _spender, uint256 _value) returns (bool) {\n', '        allowances[msg.sender][_spender] += _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Reset count of tokens approved for given address\n', '     * @param _spender target address (future requester)\n', '     */\n', '    function unapprove(address _spender)\n', '    { allowances[msg.sender][_spender] = 0; }\n', '}\n', '\n', 'contract TokenEmission is Token {\n', '    function TokenEmission(string _name, string _symbol, uint8 _decimals,\n', '                           uint _start_count)\n', '             Token(_name, _symbol, _decimals, _start_count)\n', '    {}\n', '\n', '    /**\n', '     * @dev Token emission\n', '     * @param _value amount of token values to emit\n', '     * @notice owner balance will be increased by `_value`\n', '     */\n', '    function emission(uint _value) onlyOwner {\n', '        // Overflow check\n', '        if (_value + totalSupply < totalSupply) throw;\n', '\n', '        totalSupply     += _value;\n', '        balances[owner] += _value;\n', '    }\n', ' \n', '    /**\n', '     * @dev Burn the token values from sender balance and from total\n', '     * @param _value amount of token values for burn \n', '     * @notice sender balance will be decreased by `_value`\n', '     */\n', '    function burn(uint _value) {\n', '        if (balances[msg.sender] >= _value) {\n', '            balances[msg.sender] -= _value;\n', '            totalSupply      -= _value;\n', '        }\n', '    }\n', '}\n', '\n', 'library CreatorTokenEmission {\n', '    function create(string _name, string _symbol, uint8 _decimals, uint256 _start_count) returns (TokenEmission)\n', '    { return new TokenEmission(_name, _symbol, _decimals, _start_count); }\n', '\n', '    function version() constant returns (string)\n', '    { return "v0.6.0 (1b4435b8)"; }\n', '\n', '    function abi() constant returns (string)\n', '    { return \'[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_owner","type":"address"}],"name":"setOwner","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_value","type":"uint256"}],"name":"burn","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"hammer","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_value","type":"uint256"}],"name":"emission","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"destroy","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_hammer","type":"address"}],"name":"setHammer","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"}],"name":"unapprove","outputs":[],"payable":false,"type":"function"},{"inputs":[{"name":"_name","type":"string"},{"name":"_symbol","type":"string"},{"name":"_decimals","type":"uint8"},{"name":"_start_count","type":"uint256"}],"type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_from","type":"address"},{"indexed":true,"name":"_to","type":"address"},{"indexed":false,"name":"_value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_owner","type":"address"},{"indexed":true,"name":"_spender","type":"address"},{"indexed":false,"name":"_value","type":"uint256"}],"name":"Approval","type":"event"}]\'; }\n', '}\n', '\n', '/**\n', ' * @title Builder based contract\n', ' */\n', 'contract Builder is Object {\n', '    /**\n', '     * @dev this event emitted for every builded contract\n', '     */\n', '    event Builded(address indexed client, address indexed instance);\n', ' \n', '    /* Addresses builded contracts at sender */\n', '    mapping(address => address[]) public getContractsOf;\n', ' \n', '    /**\n', '     * @dev Get last address\n', '     * @return last address contract\n', '     */\n', '    function getLastContract() constant returns (address) {\n', '        var sender_contracts = getContractsOf[msg.sender];\n', '        return sender_contracts[sender_contracts.length - 1];\n', '    }\n', '\n', '    /* Building beneficiary */\n', '    address public beneficiary;\n', '\n', '    /**\n', '     * @dev Set beneficiary\n', '     * @param _beneficiary is address of beneficiary\n', '     */\n', '    function setBeneficiary(address _beneficiary) onlyOwner\n', '    { beneficiary = _beneficiary; }\n', '\n', '    /* Building cost  */\n', '    uint public buildingCostWei;\n', '\n', '    /**\n', '     * @dev Set building cost\n', '     * @param _buildingCostWei is cost\n', '     */\n', '    function setCost(uint _buildingCostWei) onlyOwner\n', '    { buildingCostWei = _buildingCostWei; }\n', '\n', '    /* Security check report */\n', '    string public securityCheckURI;\n', '\n', '    /**\n', '     * @dev Set security check report URI\n', '     * @param _uri is an URI to report\n', '     */\n', '    function setSecurityCheck(string _uri) onlyOwner\n', '    { securityCheckURI = _uri; }\n', '}\n', '\n', '//\n', '// AIRA Builder for TokenEmission contract\n', '//\n', 'contract BuilderTokenEmission is Builder {\n', '    /**\n', '     * @dev Run script creation contract\n', '     * @param _name is name token\n', '     * @param _symbol is symbol token\n', '     * @param _decimals is fixed point position\n', '     * @param _start_count is count of tokens exist\n', '     * @param _client is a contract destination address (zero for sender)\n', '     * @return address new contract\n', '     */\n', '    function create(string _name, string _symbol, uint8 _decimals, uint256 _start_count, address _client) payable returns (address) {\n', '        if (buildingCostWei > 0 && beneficiary != 0) {\n', '            // Too low value\n', '            if (msg.value < buildingCostWei) throw;\n', '            // Beneficiary send\n', '            if (!beneficiary.send(buildingCostWei)) throw;\n', '            // Refund\n', '            if (msg.value > buildingCostWei) {\n', '                if (!msg.sender.send(msg.value - buildingCostWei)) throw;\n', '            }\n', '        } else {\n', '            // Refund all\n', '            if (msg.value > 0) {\n', '                if (!msg.sender.send(msg.value)) throw;\n', '            }\n', '        }\n', '\n', '        if (_client == 0)\n', '            _client = msg.sender;\n', ' \n', '        var inst = CreatorTokenEmission.create(_name, _symbol, _decimals, _start_count);\n', '        getContractsOf[_client].push(inst);\n', '        Builded(_client, inst);\n', '        inst.transfer(_client, _start_count);\n', '        inst.setOwner(_client);\n', '        inst.setHammer(_client);\n', '        return inst;\n', '    }\n', '}']