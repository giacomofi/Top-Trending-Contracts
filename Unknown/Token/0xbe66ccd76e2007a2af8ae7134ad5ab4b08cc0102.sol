['pragma solidity ^0.4.11;\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    /*Set owner of the contract*/\n', '    function Owned() {\n', '        owner = msg.sender;\n', '    }\n', '    /*Accept a new owner*/\n', '    function changeOwner(address _newOwner) onlyOwner {\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', 'contract safeMath {\n', '    function add(uint a, uint b) returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a || c >= b);\n', '        return c;\n', '    }\n', '    \n', '    function sub(uint a, uint b) returns (uint) {\n', '        assert( b <= a);\n', '        return a - b;\n', '    }\n', '}\n', '\n', 'contract tokenRecipient { \n', '  function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData);\n', '} \n', '\n', 'contract ERC20Token {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract MCTContractToken is ERC20Token, Owned{\n', '\n', '    /* Public variables of the token */\n', '    string  public standard = "Mammoth Casino Contract Token";\n', '    string  public name = "Mammoth Casino Token";\n', '    string  public symbol = "MCT";\n', '    uint8   public decimals = 0;\n', '    address public icoContractAddress;\n', '    uint256 public tokenFrozenUntilTime;\n', '    uint256 public blackListFreezeTime;\n', '    struct frozen {\n', '        bool accountFreeze;\n', '        uint256 freezeUntilTime;\n', '    }\n', '    \n', '    /* Variables of the token */\n', '    uint256 public totalSupply;\n', '    uint256 public totalRemainSupply;\n', '    uint256 public foundingTeamSupply;\n', '    uint256 public gameDeveloperSupply;\n', '    uint256 public communitySupply;\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowances;\n', '    mapping (address => frozen) blackListFreezeTokenAccounts;\n', '    /* Events */\n', '    event mintToken(address indexed _to, uint256 _value);\n', '    event burnToken(address indexed _from, uint256 _value);\n', '    event frozenToken(uint256 _frozenUntilBlock, string _reason);\n', '    \n', '    /* Initializes contract and  sets restricted addresses */\n', '    function MCTContractToken(uint256 _totalSupply, address _icoAddress) {\n', '        owner = msg.sender;\n', '        totalSupply = _totalSupply;\n', '        totalRemainSupply = totalSupply;\n', '        foundingTeamSupply = totalSupply * 2 / 10;\n', '        gameDeveloperSupply = totalSupply * 1 / 10;\n', '        communitySupply = totalSupply * 1 / 10;\n', '        icoContractAddress = _icoAddress;\n', '        blackListFreezeTime = 12 hours;\n', '    }\n', '\n', '    /* Returns total supply of issued tokens */\n', '    function mctTotalSupply() returns (uint256) {   \n', '        return totalSupply - totalRemainSupply;\n', '    }\n', '\n', '    /* Returns balance of address */\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /* Transfers tokens from your address to other */\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        require (now > tokenFrozenUntilTime);    // Throw if token is frozen\n', '        require (now > blackListFreezeTokenAccounts[msg.sender].freezeUntilTime);             // Throw if recipient is frozen address\n', '        require (now > blackListFreezeTokenAccounts[_to].freezeUntilTime);                    // Throw if recipient is frozen address\n', '        require (balances[msg.sender] > _value);           // Throw if sender has insufficient balance\n', '        require (balances[_to] + _value > balances[_to]);  // Throw if owerflow detected\n', '        balances[msg.sender] -= _value;                     // Deduct senders balance\n', '        balances[_to] += _value;                            // Add recivers blaance \n', '        Transfer(msg.sender, _to, _value);                  // Raise Transfer event\n', '        return true;\n', '    }\n', '\n', '    /* Approve other address to spend tokens on your account */\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        require (now > tokenFrozenUntilTime);               // Throw if token is frozen        \n', '        allowances[msg.sender][_spender] = _value;          // Set allowance         \n', '        Approval(msg.sender, _spender, _value);             // Raise Approval event         \n', '        return true;\n', '    }\n', '\n', '    /* Approve and then communicate the approved contract in a single tx */ \n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {            \n', '        tokenRecipient spender = tokenRecipient(_spender);              // Cast spender to tokenRecipient contract         \n', '        approve(_spender, _value);                                      // Set approval to contract for _value         \n', '        spender.receiveApproval(msg.sender, _value, this, _extraData);  // Raise method on _spender contract         \n', '        return true;     \n', '    }     \n', '\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {      \n', '        require (now > tokenFrozenUntilTime);    // Throw if token is frozen\n', '        require (now > blackListFreezeTokenAccounts[_to].freezeUntilTime);                    // Throw if recipient is restricted address  \n', '        require (balances[_from] > _value);                // Throw if sender does not have enough balance     \n', '        require (balances[_to] + _value > balances[_to]);  // Throw if overflow detected    \n', '        require (_value > allowances[_from][msg.sender]);  // Throw if you do not have allowance       \n', '        balances[_from] -= _value;                          // Deduct senders balance    \n', '        balances[_to] += _value;                            // Add recipient blaance         \n', '        allowances[_from][msg.sender] -= _value;            // Deduct allowance for this address         \n', '        Transfer(_from, _to, _value);                       // Raise Transfer event\n', '        return true;     \n', '    }         \n', '\n', '    /* Get the amount of allowed tokens to spend */     \n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {         \n', '        return allowances[_owner][_spender];\n', '    }         \n', '\n', '    /* Issue new tokens */     \n', '    function mintTokens(address _to, uint256 _amount) {         \n', '        require (msg.sender == icoContractAddress);             // Only ICO address can mint tokens        \n', '        require (now > blackListFreezeTokenAccounts[_to].freezeUntilTime);                        // Throw if user wants to send to restricted address       \n', '        require (balances[_to] + _amount > balances[_to]);      // Check for overflows\n', '        require (totalRemainSupply > _amount);\n', '        totalRemainSupply -= _amount;                           // Update total supply\n', '        balances[_to] += _amount;                               // Set minted coins to target\n', '        mintToken(_to, _amount);                                // Create Mint event       \n', '        Transfer(0x0, _to, _amount);                            // Create Transfer event from 0x\n', '    }     \n', '  \n', '    /* Destroy tokens from owners account */\n', '    function burnTokens(address _addr, uint256 _amount) onlyOwner {\n', '        require (balances[msg.sender] < _amount);               // Throw if you do not have enough balance\n', '        totalRemainSupply += _amount;                           // Deduct totalSupply\n', '        balances[_addr] -= _amount;                             // Destroy coins on senders wallet\n', '        burnToken(_addr, _amount);                              // Raise Burn event\n', '        Transfer(_addr, 0x0, _amount);                          // Raise transfer to 0x0\n', '    }\n', '    \n', '    /* Destroy tokens if MCT not sold out */\n', '    function burnLeftTokens() onlyOwner {\n', '        require (totalRemainSupply > 0);\n', '        totalRemainSupply = 0;\n', '    }\n', '    \n', '    /* Stops all token transfers in case of emergency */\n', '    function freezeTransfersUntil(uint256 _frozenUntilTime, string _freezeReason) onlyOwner {      \n', '        tokenFrozenUntilTime = _frozenUntilTime;\n', '        frozenToken(_frozenUntilTime, _freezeReason);\n', '    }\n', '    \n', '    /*Freeze player accounts for "blackListFreezeTime" */\n', '    function freezeAccounts(address _freezeAddress, bool _freeze) onlyOwner {\n', '        blackListFreezeTokenAccounts[_freezeAddress].accountFreeze = _freeze;\n', '        blackListFreezeTokenAccounts[_freezeAddress].freezeUntilTime = now + blackListFreezeTime;\n', '    }\n', '    \n', '    /*mint ICO Left Token*/\n', '    function mintUnICOLeftToken(address _foundingTeamAddr, address _gameDeveloperAddr, address _communityAddr) onlyOwner {\n', '        balances[_foundingTeamAddr] += foundingTeamSupply;           // Give balance to _foundingTeamAddr;\n', '        balances[_gameDeveloperAddr] += gameDeveloperSupply;         // Give balance to _gameDeveloperAddr;\n', '        balances[_communityAddr] += communitySupply;                 // Give balance to _communityAddr;\n', '        totalRemainSupply -= (foundingTeamSupply + gameDeveloperSupply + communitySupply);\n', '        mintToken(_foundingTeamAddr, foundingTeamSupply);            // Create Mint event       \n', '        mintToken(_gameDeveloperAddr, gameDeveloperSupply);          // Create Mint event \n', '        mintToken(_communityAddr, communitySupply);                  // Create Mint event \n', '    }\n', '    \n', '}\n', '\n', 'contract MCTContract {\n', '  function mintTokens(address _to, uint256 _amount);\n', '}\n', '\n', 'contract MCTCrowdsale is Owned, safeMath {\n', '    uint256 public tokenSupportLimit = 30000 ether;              \n', '    uint256 public tokenSupportSoftLimit = 20000 ether;          \n', '    uint256 constant etherChange = 10**18;                       \n', '    uint256 public crowdsaleTokenSupply;                         \n', '    uint256 public crowdsaleTokenMint;                                      \n', '    uint256 public crowdsaleStartDate;\n', '    uint256 public crowdsaleStopDate;\n', '    address public MCTTokenAddress;\n', '    address public multisigAddress;\n', '    uint256 private totalCrowdsaleEther;\n', '    uint256 public nextParticipantIndex;\n', '    bool    public crowdsaleContinue;\n', '    bool    public crowdsaleSuccess;\n', '    struct infoUsersBuy{\n', '        uint256 value;\n', '        uint256 token;\n', '    }\n', '    mapping (address => infoUsersBuy) public tokenUsersSave;\n', '    mapping (uint256 => address) public participantIndex;\n', '    MCTContract mctTokenContract;\n', '    \n', '    /*Get Ether while anyone send Ether to ico contract address*/\n', '    function () payable crowdsaleOpen {\n', '        // Throw if the value = 0 \n', '        require (msg.value != 0);\n', '        // Check if the sender is a new user \n', '        if (tokenUsersSave[msg.sender].token == 0){          \n', '            // Add a new user to the participant index   \n', '            participantIndex[nextParticipantIndex] = msg.sender;             \n', '            nextParticipantIndex += 1;\n', '        }\n', '        uint256 priceAtNow = 0;\n', '        uint256 priceAtNowLimit = 0;\n', '        (priceAtNow, priceAtNowLimit) = priceAt(now);\n', '        require(msg.value >= priceAtNowLimit);\n', '        buyMCTTokenProxy(msg.sender, msg.value, priceAtNow);\n', '\n', '    }\n', '    \n', '    /*Require crowdsale open*/\n', '    modifier crowdsaleOpen() {\n', '        require(crowdsaleContinue == true);\n', '        require(now >= crowdsaleStartDate);\n', '        require(now <= crowdsaleStopDate);\n', '        _;\n', '    }\n', '    \n', '    /*Initial MCT Crowdsale*/\n', '    function MCTCrowdsale(uint256 _crowdsaleStartDate,\n', '        uint256 _crowdsaleStopDate,\n', '        uint256 _totalTokenSupply\n', '        ) {\n', '            owner = msg.sender;\n', '            crowdsaleStartDate = _crowdsaleStartDate;\n', '            crowdsaleStopDate = _crowdsaleStopDate;\n', '            require(_totalTokenSupply != 0);\n', '            crowdsaleTokenSupply = _totalTokenSupply;\n', '            crowdsaleContinue=true;\n', '    }\n', '    \n', '    /*Get the  price according to the present time*/\n', '    function priceAt(uint256 _atTime) internal returns(uint256, uint256) {\n', '        if(_atTime < crowdsaleStartDate) {\n', '            return (0, 0);\n', '        }\n', '        else if(_atTime < (crowdsaleStartDate + 7 days)) {\n', '            return (30000, 20*10**18);\n', '        }\n', '        else if(_atTime < (crowdsaleStartDate + 16 days)) {\n', '            return (24000, 1*10**17);\n', '        }\n', '        else if(_atTime < (crowdsaleStartDate + 31 days)) {\n', '            return (20000, 1*10**17);\n', '        }\n', '        else {\n', '            return (0, 0);\n', '        }\n', '   }\n', '   \n', '    /*Buy MCT Token*/        \n', '    function buyMCTTokenProxy(address _msgSender, uint256 _msgValue, \n', '        uint256 _priceAtNow)  internal crowdsaleOpen returns (bool) {\n', '        require(_msgSender != 0x0);\n', '        require(crowdsaleTokenMint <= crowdsaleTokenSupply);                    // Require token not sold out\n', '        uint256 tokenBuy = _msgValue * _priceAtNow / etherChange;               // Calculate the token  \n', '        if(tokenBuy > (crowdsaleTokenSupply - crowdsaleTokenMint)){             // Require tokenBuy less than crowdsale token left \n', '            uint256 needRetreat = (tokenBuy - crowdsaleTokenSupply + crowdsaleTokenMint) * etherChange / _priceAtNow;\n', '            _msgSender.transfer(needRetreat);\n', '            _msgValue -= needRetreat;\n', '            tokenBuy = _msgValue * _priceAtNow / etherChange;\n', '        }\n', '        if(buyMCT(_msgSender, tokenBuy)) {                                      // Buy MCT Token\n', '            totalCrowdsaleEther += _msgValue;\n', '            tokenUsersSave[_msgSender].value += _msgValue;                      // Store each person&#39;s Ether\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '    \n', '    /*Buy MCT Token*/\n', '    function buyMCT(address _sender, uint256 _tokenBuy) internal returns (bool) {\n', '        tokenUsersSave[_sender].token += _tokenBuy;\n', '        mctTokenContract.mintTokens(_sender, _tokenBuy);\n', '        crowdsaleTokenMint += _tokenBuy;\n', '        return true;\n', '    }\n', '    \n', '    /*Set final period of MCT crowdsale*/\n', '    function setFinalICOPeriod() onlyOwner {\n', '        require(now > crowdsaleStopDate);\n', '        crowdsaleContinue = false;\n', '        if(this.balance >= tokenSupportSoftLimit * 4 / 10){                     // if crowdsale ether more than 8000Ether, MCT crowdsale will be Success\n', '            crowdsaleSuccess = true;\n', '        }\n', '    }\n', '    \n', '    /* Set token contract where mints will be done (tokens will be issued)*/  \n', '    function setTokenContract(address _MCTContractAddress) onlyOwner {     \n', '        mctTokenContract = MCTContract(_MCTContractAddress);\n', '        MCTTokenAddress  = _MCTContractAddress;\n', '    }\n', '    \n', '    /*withdraw Ether to a multisig address*/\n', '    function withdraw(address _multisigAddress, uint256 _balance) onlyOwner {    \n', '        require(_multisigAddress != 0x0);\n', '        multisigAddress = _multisigAddress;\n', '        multisigAddress.transfer(_balance);\n', '    }  \n', '    \n', '    function crowdsaleEther() returns(uint256) {\n', '        return totalCrowdsaleEther;\n', '    }\n', '}']
['pragma solidity ^0.4.11;\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    /*Set owner of the contract*/\n', '    function Owned() {\n', '        owner = msg.sender;\n', '    }\n', '    /*Accept a new owner*/\n', '    function changeOwner(address _newOwner) onlyOwner {\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', 'contract safeMath {\n', '    function add(uint a, uint b) returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a || c >= b);\n', '        return c;\n', '    }\n', '    \n', '    function sub(uint a, uint b) returns (uint) {\n', '        assert( b <= a);\n', '        return a - b;\n', '    }\n', '}\n', '\n', 'contract tokenRecipient { \n', '  function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData);\n', '} \n', '\n', 'contract ERC20Token {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract MCTContractToken is ERC20Token, Owned{\n', '\n', '    /* Public variables of the token */\n', '    string  public standard = "Mammoth Casino Contract Token";\n', '    string  public name = "Mammoth Casino Token";\n', '    string  public symbol = "MCT";\n', '    uint8   public decimals = 0;\n', '    address public icoContractAddress;\n', '    uint256 public tokenFrozenUntilTime;\n', '    uint256 public blackListFreezeTime;\n', '    struct frozen {\n', '        bool accountFreeze;\n', '        uint256 freezeUntilTime;\n', '    }\n', '    \n', '    /* Variables of the token */\n', '    uint256 public totalSupply;\n', '    uint256 public totalRemainSupply;\n', '    uint256 public foundingTeamSupply;\n', '    uint256 public gameDeveloperSupply;\n', '    uint256 public communitySupply;\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowances;\n', '    mapping (address => frozen) blackListFreezeTokenAccounts;\n', '    /* Events */\n', '    event mintToken(address indexed _to, uint256 _value);\n', '    event burnToken(address indexed _from, uint256 _value);\n', '    event frozenToken(uint256 _frozenUntilBlock, string _reason);\n', '    \n', '    /* Initializes contract and  sets restricted addresses */\n', '    function MCTContractToken(uint256 _totalSupply, address _icoAddress) {\n', '        owner = msg.sender;\n', '        totalSupply = _totalSupply;\n', '        totalRemainSupply = totalSupply;\n', '        foundingTeamSupply = totalSupply * 2 / 10;\n', '        gameDeveloperSupply = totalSupply * 1 / 10;\n', '        communitySupply = totalSupply * 1 / 10;\n', '        icoContractAddress = _icoAddress;\n', '        blackListFreezeTime = 12 hours;\n', '    }\n', '\n', '    /* Returns total supply of issued tokens */\n', '    function mctTotalSupply() returns (uint256) {   \n', '        return totalSupply - totalRemainSupply;\n', '    }\n', '\n', '    /* Returns balance of address */\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /* Transfers tokens from your address to other */\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        require (now > tokenFrozenUntilTime);    // Throw if token is frozen\n', '        require (now > blackListFreezeTokenAccounts[msg.sender].freezeUntilTime);             // Throw if recipient is frozen address\n', '        require (now > blackListFreezeTokenAccounts[_to].freezeUntilTime);                    // Throw if recipient is frozen address\n', '        require (balances[msg.sender] > _value);           // Throw if sender has insufficient balance\n', '        require (balances[_to] + _value > balances[_to]);  // Throw if owerflow detected\n', '        balances[msg.sender] -= _value;                     // Deduct senders balance\n', '        balances[_to] += _value;                            // Add recivers blaance \n', '        Transfer(msg.sender, _to, _value);                  // Raise Transfer event\n', '        return true;\n', '    }\n', '\n', '    /* Approve other address to spend tokens on your account */\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        require (now > tokenFrozenUntilTime);               // Throw if token is frozen        \n', '        allowances[msg.sender][_spender] = _value;          // Set allowance         \n', '        Approval(msg.sender, _spender, _value);             // Raise Approval event         \n', '        return true;\n', '    }\n', '\n', '    /* Approve and then communicate the approved contract in a single tx */ \n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {            \n', '        tokenRecipient spender = tokenRecipient(_spender);              // Cast spender to tokenRecipient contract         \n', '        approve(_spender, _value);                                      // Set approval to contract for _value         \n', '        spender.receiveApproval(msg.sender, _value, this, _extraData);  // Raise method on _spender contract         \n', '        return true;     \n', '    }     \n', '\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {      \n', '        require (now > tokenFrozenUntilTime);    // Throw if token is frozen\n', '        require (now > blackListFreezeTokenAccounts[_to].freezeUntilTime);                    // Throw if recipient is restricted address  \n', '        require (balances[_from] > _value);                // Throw if sender does not have enough balance     \n', '        require (balances[_to] + _value > balances[_to]);  // Throw if overflow detected    \n', '        require (_value > allowances[_from][msg.sender]);  // Throw if you do not have allowance       \n', '        balances[_from] -= _value;                          // Deduct senders balance    \n', '        balances[_to] += _value;                            // Add recipient blaance         \n', '        allowances[_from][msg.sender] -= _value;            // Deduct allowance for this address         \n', '        Transfer(_from, _to, _value);                       // Raise Transfer event\n', '        return true;     \n', '    }         \n', '\n', '    /* Get the amount of allowed tokens to spend */     \n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {         \n', '        return allowances[_owner][_spender];\n', '    }         \n', '\n', '    /* Issue new tokens */     \n', '    function mintTokens(address _to, uint256 _amount) {         \n', '        require (msg.sender == icoContractAddress);             // Only ICO address can mint tokens        \n', '        require (now > blackListFreezeTokenAccounts[_to].freezeUntilTime);                        // Throw if user wants to send to restricted address       \n', '        require (balances[_to] + _amount > balances[_to]);      // Check for overflows\n', '        require (totalRemainSupply > _amount);\n', '        totalRemainSupply -= _amount;                           // Update total supply\n', '        balances[_to] += _amount;                               // Set minted coins to target\n', '        mintToken(_to, _amount);                                // Create Mint event       \n', '        Transfer(0x0, _to, _amount);                            // Create Transfer event from 0x\n', '    }     \n', '  \n', '    /* Destroy tokens from owners account */\n', '    function burnTokens(address _addr, uint256 _amount) onlyOwner {\n', '        require (balances[msg.sender] < _amount);               // Throw if you do not have enough balance\n', '        totalRemainSupply += _amount;                           // Deduct totalSupply\n', '        balances[_addr] -= _amount;                             // Destroy coins on senders wallet\n', '        burnToken(_addr, _amount);                              // Raise Burn event\n', '        Transfer(_addr, 0x0, _amount);                          // Raise transfer to 0x0\n', '    }\n', '    \n', '    /* Destroy tokens if MCT not sold out */\n', '    function burnLeftTokens() onlyOwner {\n', '        require (totalRemainSupply > 0);\n', '        totalRemainSupply = 0;\n', '    }\n', '    \n', '    /* Stops all token transfers in case of emergency */\n', '    function freezeTransfersUntil(uint256 _frozenUntilTime, string _freezeReason) onlyOwner {      \n', '        tokenFrozenUntilTime = _frozenUntilTime;\n', '        frozenToken(_frozenUntilTime, _freezeReason);\n', '    }\n', '    \n', '    /*Freeze player accounts for "blackListFreezeTime" */\n', '    function freezeAccounts(address _freezeAddress, bool _freeze) onlyOwner {\n', '        blackListFreezeTokenAccounts[_freezeAddress].accountFreeze = _freeze;\n', '        blackListFreezeTokenAccounts[_freezeAddress].freezeUntilTime = now + blackListFreezeTime;\n', '    }\n', '    \n', '    /*mint ICO Left Token*/\n', '    function mintUnICOLeftToken(address _foundingTeamAddr, address _gameDeveloperAddr, address _communityAddr) onlyOwner {\n', '        balances[_foundingTeamAddr] += foundingTeamSupply;           // Give balance to _foundingTeamAddr;\n', '        balances[_gameDeveloperAddr] += gameDeveloperSupply;         // Give balance to _gameDeveloperAddr;\n', '        balances[_communityAddr] += communitySupply;                 // Give balance to _communityAddr;\n', '        totalRemainSupply -= (foundingTeamSupply + gameDeveloperSupply + communitySupply);\n', '        mintToken(_foundingTeamAddr, foundingTeamSupply);            // Create Mint event       \n', '        mintToken(_gameDeveloperAddr, gameDeveloperSupply);          // Create Mint event \n', '        mintToken(_communityAddr, communitySupply);                  // Create Mint event \n', '    }\n', '    \n', '}\n', '\n', 'contract MCTContract {\n', '  function mintTokens(address _to, uint256 _amount);\n', '}\n', '\n', 'contract MCTCrowdsale is Owned, safeMath {\n', '    uint256 public tokenSupportLimit = 30000 ether;              \n', '    uint256 public tokenSupportSoftLimit = 20000 ether;          \n', '    uint256 constant etherChange = 10**18;                       \n', '    uint256 public crowdsaleTokenSupply;                         \n', '    uint256 public crowdsaleTokenMint;                                      \n', '    uint256 public crowdsaleStartDate;\n', '    uint256 public crowdsaleStopDate;\n', '    address public MCTTokenAddress;\n', '    address public multisigAddress;\n', '    uint256 private totalCrowdsaleEther;\n', '    uint256 public nextParticipantIndex;\n', '    bool    public crowdsaleContinue;\n', '    bool    public crowdsaleSuccess;\n', '    struct infoUsersBuy{\n', '        uint256 value;\n', '        uint256 token;\n', '    }\n', '    mapping (address => infoUsersBuy) public tokenUsersSave;\n', '    mapping (uint256 => address) public participantIndex;\n', '    MCTContract mctTokenContract;\n', '    \n', '    /*Get Ether while anyone send Ether to ico contract address*/\n', '    function () payable crowdsaleOpen {\n', '        // Throw if the value = 0 \n', '        require (msg.value != 0);\n', '        // Check if the sender is a new user \n', '        if (tokenUsersSave[msg.sender].token == 0){          \n', '            // Add a new user to the participant index   \n', '            participantIndex[nextParticipantIndex] = msg.sender;             \n', '            nextParticipantIndex += 1;\n', '        }\n', '        uint256 priceAtNow = 0;\n', '        uint256 priceAtNowLimit = 0;\n', '        (priceAtNow, priceAtNowLimit) = priceAt(now);\n', '        require(msg.value >= priceAtNowLimit);\n', '        buyMCTTokenProxy(msg.sender, msg.value, priceAtNow);\n', '\n', '    }\n', '    \n', '    /*Require crowdsale open*/\n', '    modifier crowdsaleOpen() {\n', '        require(crowdsaleContinue == true);\n', '        require(now >= crowdsaleStartDate);\n', '        require(now <= crowdsaleStopDate);\n', '        _;\n', '    }\n', '    \n', '    /*Initial MCT Crowdsale*/\n', '    function MCTCrowdsale(uint256 _crowdsaleStartDate,\n', '        uint256 _crowdsaleStopDate,\n', '        uint256 _totalTokenSupply\n', '        ) {\n', '            owner = msg.sender;\n', '            crowdsaleStartDate = _crowdsaleStartDate;\n', '            crowdsaleStopDate = _crowdsaleStopDate;\n', '            require(_totalTokenSupply != 0);\n', '            crowdsaleTokenSupply = _totalTokenSupply;\n', '            crowdsaleContinue=true;\n', '    }\n', '    \n', '    /*Get the  price according to the present time*/\n', '    function priceAt(uint256 _atTime) internal returns(uint256, uint256) {\n', '        if(_atTime < crowdsaleStartDate) {\n', '            return (0, 0);\n', '        }\n', '        else if(_atTime < (crowdsaleStartDate + 7 days)) {\n', '            return (30000, 20*10**18);\n', '        }\n', '        else if(_atTime < (crowdsaleStartDate + 16 days)) {\n', '            return (24000, 1*10**17);\n', '        }\n', '        else if(_atTime < (crowdsaleStartDate + 31 days)) {\n', '            return (20000, 1*10**17);\n', '        }\n', '        else {\n', '            return (0, 0);\n', '        }\n', '   }\n', '   \n', '    /*Buy MCT Token*/        \n', '    function buyMCTTokenProxy(address _msgSender, uint256 _msgValue, \n', '        uint256 _priceAtNow)  internal crowdsaleOpen returns (bool) {\n', '        require(_msgSender != 0x0);\n', '        require(crowdsaleTokenMint <= crowdsaleTokenSupply);                    // Require token not sold out\n', '        uint256 tokenBuy = _msgValue * _priceAtNow / etherChange;               // Calculate the token  \n', '        if(tokenBuy > (crowdsaleTokenSupply - crowdsaleTokenMint)){             // Require tokenBuy less than crowdsale token left \n', '            uint256 needRetreat = (tokenBuy - crowdsaleTokenSupply + crowdsaleTokenMint) * etherChange / _priceAtNow;\n', '            _msgSender.transfer(needRetreat);\n', '            _msgValue -= needRetreat;\n', '            tokenBuy = _msgValue * _priceAtNow / etherChange;\n', '        }\n', '        if(buyMCT(_msgSender, tokenBuy)) {                                      // Buy MCT Token\n', '            totalCrowdsaleEther += _msgValue;\n', "            tokenUsersSave[_msgSender].value += _msgValue;                      // Store each person's Ether\n", '            return true;\n', '        }\n', '        return false;\n', '    }\n', '    \n', '    /*Buy MCT Token*/\n', '    function buyMCT(address _sender, uint256 _tokenBuy) internal returns (bool) {\n', '        tokenUsersSave[_sender].token += _tokenBuy;\n', '        mctTokenContract.mintTokens(_sender, _tokenBuy);\n', '        crowdsaleTokenMint += _tokenBuy;\n', '        return true;\n', '    }\n', '    \n', '    /*Set final period of MCT crowdsale*/\n', '    function setFinalICOPeriod() onlyOwner {\n', '        require(now > crowdsaleStopDate);\n', '        crowdsaleContinue = false;\n', '        if(this.balance >= tokenSupportSoftLimit * 4 / 10){                     // if crowdsale ether more than 8000Ether, MCT crowdsale will be Success\n', '            crowdsaleSuccess = true;\n', '        }\n', '    }\n', '    \n', '    /* Set token contract where mints will be done (tokens will be issued)*/  \n', '    function setTokenContract(address _MCTContractAddress) onlyOwner {     \n', '        mctTokenContract = MCTContract(_MCTContractAddress);\n', '        MCTTokenAddress  = _MCTContractAddress;\n', '    }\n', '    \n', '    /*withdraw Ether to a multisig address*/\n', '    function withdraw(address _multisigAddress, uint256 _balance) onlyOwner {    \n', '        require(_multisigAddress != 0x0);\n', '        multisigAddress = _multisigAddress;\n', '        multisigAddress.transfer(_balance);\n', '    }  \n', '    \n', '    function crowdsaleEther() returns(uint256) {\n', '        return totalCrowdsaleEther;\n', '    }\n', '}']
