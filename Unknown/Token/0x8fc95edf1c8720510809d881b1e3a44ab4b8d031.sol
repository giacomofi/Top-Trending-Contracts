['pragma solidity ^0.4.13;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'contract SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is SafeMath, ERC20Basic {\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '   * @dev Fix for the ERC20 short address attack.\n', '   */\n', '  modifier onlyPayloadSize(uint size) {\n', '    require(msg.data.length >= size + 4);\n', '     _;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) returns (bool){\n', '    balances[msg.sender] = sub(balances[msg.sender],_value);\n', '    balances[_to] = add(balances[_to],_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(2 * 32) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = add(balances[_to],_value);\n', '    balances[_from] = sub(balances[_from],_value);\n', '    allowed[_from][msg.sender] = sub(_allowance,_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS paused\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS NOT paused\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * Pausable token\n', ' *\n', ' * Simple ERC20 Token example, with pausable token creation\n', ' **/\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title KYC\n', ' * @dev KYC contract handles the white list for PLCCrowdsale contract\n', ' * Only accounts registered in KYC contract can buy PLC token.\n', ' * Admins can register account, and the reason why\n', ' */\n', 'contract KYC is Ownable, SafeMath, Pausable {\n', '  // check the address is registered for token sale\n', '  mapping (address => bool) public registeredAddress;\n', '\n', '  // check the address is admin of kyc contract\n', '  mapping (address => bool) public admin;\n', '\n', '  event Registered(address indexed _addr);\n', '  event Unregistered(address indexed _addr);\n', '  event NewAdmin(address indexed _addr);\n', '\n', '  /**\n', '   * @dev check whether the address is registered for token sale or not.\n', '   * @param _addr address\n', '   */\n', '  modifier onlyRegistered(address _addr) {\n', '    require(isRegistered(_addr));\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev check whether the msg.sender is admin or not\n', '   */\n', '  modifier onlyAdmin() {\n', '    require(admin[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  function KYC() {\n', '    admin[msg.sender] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev set new admin as admin of KYC contract\n', '   * @param _addr address The address to set as admin of KYC contract\n', '   */\n', '  function setAdmin(address _addr)\n', '    public\n', '    onlyOwner\n', '  {\n', '    require(_addr != address(0) && admin[_addr] == false);\n', '    admin[_addr] = true;\n', '\n', '    NewAdmin(_addr);\n', '  }\n', '\n', '  /**\n', '   * @dev check the address is register for token sale\n', '   * @param _addr address The address to check whether register or not\n', '   */\n', '  function isRegistered(address _addr)\n', '    public\n', '    constant\n', '    returns (bool)\n', '  {\n', '    return registeredAddress[_addr];\n', '  }\n', '\n', '  /**\n', '   * @dev register the address for token sale\n', '   * @param _addr address The address to register for token sale\n', '   */\n', '  function register(address _addr)\n', '    public\n', '    onlyAdmin\n', '    whenNotPaused\n', '  {\n', '    require(_addr != address(0) && registeredAddress[_addr] == false);\n', '\n', '    registeredAddress[_addr] = true;\n', '\n', '    Registered(_addr);\n', '  }\n', '\n', '  /**\n', '   * @dev register the addresses for token sale\n', '   * @param _addrs address[] The addresses to register for token sale\n', '   */\n', '  function registerByList(address[] _addrs)\n', '    public\n', '    onlyAdmin\n', '    whenNotPaused\n', '  {\n', '    for(uint256 i = 0; i < _addrs.length; i++) {\n', '      require(_addrs[i] != address(0) && registeredAddress[_addrs[i]] == false);\n', '\n', '      registeredAddress[_addrs[i]] = true;\n', '\n', '      Registered(_addrs[i]);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev unregister the registered address\n', '   * @param _addr address The address to unregister for token sale\n', '   */\n', '  function unregister(address _addr)\n', '    public\n', '    onlyAdmin\n', '    onlyRegistered(_addr)\n', '  {\n', '    registeredAddress[_addr] = false;\n', '\n', '    Unregistered(_addr);\n', '  }\n', '\n', '  /**\n', '   * @dev unregister the registered addresses\n', '   * @param _addrs address[] The addresses to unregister for token sale\n', '   */\n', '  function unregisterByList(address[] _addrs)\n', '    public\n', '    onlyAdmin\n', '  {\n', '    for(uint256 i = 0; i < _addrs.length; i++) {\n', '      require(isRegistered(_addrs[i]));\n', '\n', '      registeredAddress[_addrs[i]] = false;\n', '\n', '      Unregistered(_addrs[i]);\n', '    }\n', '\n', '  }\n', '}']
['pragma solidity ^0.4.13;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'contract SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is SafeMath, ERC20Basic {\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '   * @dev Fix for the ERC20 short address attack.\n', '   */\n', '  modifier onlyPayloadSize(uint size) {\n', '    require(msg.data.length >= size + 4);\n', '     _;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) returns (bool){\n', '    balances[msg.sender] = sub(balances[msg.sender],_value);\n', '    balances[_to] = add(balances[_to],_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(2 * 32) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = add(balances[_to],_value);\n', '    balances[_from] = sub(balances[_from],_value);\n', '    allowed[_from][msg.sender] = sub(_allowance,_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS paused\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS NOT paused\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * Pausable token\n', ' *\n', ' * Simple ERC20 Token example, with pausable token creation\n', ' **/\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title KYC\n', ' * @dev KYC contract handles the white list for PLCCrowdsale contract\n', ' * Only accounts registered in KYC contract can buy PLC token.\n', ' * Admins can register account, and the reason why\n', ' */\n', 'contract KYC is Ownable, SafeMath, Pausable {\n', '  // check the address is registered for token sale\n', '  mapping (address => bool) public registeredAddress;\n', '\n', '  // check the address is admin of kyc contract\n', '  mapping (address => bool) public admin;\n', '\n', '  event Registered(address indexed _addr);\n', '  event Unregistered(address indexed _addr);\n', '  event NewAdmin(address indexed _addr);\n', '\n', '  /**\n', '   * @dev check whether the address is registered for token sale or not.\n', '   * @param _addr address\n', '   */\n', '  modifier onlyRegistered(address _addr) {\n', '    require(isRegistered(_addr));\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev check whether the msg.sender is admin or not\n', '   */\n', '  modifier onlyAdmin() {\n', '    require(admin[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  function KYC() {\n', '    admin[msg.sender] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev set new admin as admin of KYC contract\n', '   * @param _addr address The address to set as admin of KYC contract\n', '   */\n', '  function setAdmin(address _addr)\n', '    public\n', '    onlyOwner\n', '  {\n', '    require(_addr != address(0) && admin[_addr] == false);\n', '    admin[_addr] = true;\n', '\n', '    NewAdmin(_addr);\n', '  }\n', '\n', '  /**\n', '   * @dev check the address is register for token sale\n', '   * @param _addr address The address to check whether register or not\n', '   */\n', '  function isRegistered(address _addr)\n', '    public\n', '    constant\n', '    returns (bool)\n', '  {\n', '    return registeredAddress[_addr];\n', '  }\n', '\n', '  /**\n', '   * @dev register the address for token sale\n', '   * @param _addr address The address to register for token sale\n', '   */\n', '  function register(address _addr)\n', '    public\n', '    onlyAdmin\n', '    whenNotPaused\n', '  {\n', '    require(_addr != address(0) && registeredAddress[_addr] == false);\n', '\n', '    registeredAddress[_addr] = true;\n', '\n', '    Registered(_addr);\n', '  }\n', '\n', '  /**\n', '   * @dev register the addresses for token sale\n', '   * @param _addrs address[] The addresses to register for token sale\n', '   */\n', '  function registerByList(address[] _addrs)\n', '    public\n', '    onlyAdmin\n', '    whenNotPaused\n', '  {\n', '    for(uint256 i = 0; i < _addrs.length; i++) {\n', '      require(_addrs[i] != address(0) && registeredAddress[_addrs[i]] == false);\n', '\n', '      registeredAddress[_addrs[i]] = true;\n', '\n', '      Registered(_addrs[i]);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev unregister the registered address\n', '   * @param _addr address The address to unregister for token sale\n', '   */\n', '  function unregister(address _addr)\n', '    public\n', '    onlyAdmin\n', '    onlyRegistered(_addr)\n', '  {\n', '    registeredAddress[_addr] = false;\n', '\n', '    Unregistered(_addr);\n', '  }\n', '\n', '  /**\n', '   * @dev unregister the registered addresses\n', '   * @param _addrs address[] The addresses to unregister for token sale\n', '   */\n', '  function unregisterByList(address[] _addrs)\n', '    public\n', '    onlyAdmin\n', '  {\n', '    for(uint256 i = 0; i < _addrs.length; i++) {\n', '      require(isRegistered(_addrs[i]));\n', '\n', '      registeredAddress[_addrs[i]] = false;\n', '\n', '      Unregistered(_addrs[i]);\n', '    }\n', '\n', '  }\n', '}']
