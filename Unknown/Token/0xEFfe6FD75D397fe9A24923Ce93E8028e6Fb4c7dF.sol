['pragma solidity ^0.4.11;\n', '\n', '/*\n', 'Token ini penyempurnaan untuk code pengiriman semua balance\n', '*/\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require (msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract token {\n', '    /* Public variables of the token */\n', '    string public standard = &#39;Token 0.1&#39;;\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '\n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function token(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        uint8 decimalUnits,\n', '        string tokenSymbol\n', '        ) {\n', '        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens\n', '        totalSupply = initialSupply;                        // Update total supply\n', '        name = tokenName;                                   // Set the name for display purposes\n', '        symbol = tokenSymbol;                               // Set the symbol for display purposes\n', '        decimals = decimalUnits;                            // Amount of decimals for display purposes\n', '    }\n', '\n', '\n', '\n', '\n', '}\n', '\n', 'contract MyAdvancedToken is owned, token {\n', '\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event FrozenFunds(address target, bool frozen);\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function MyAdvancedToken(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        uint8 decimalUnits,\n', '        string tokenSymbol\n', '    ) token (initialSupply, tokenName, decimalUnits, tokenSymbol) {}\n', '\n', '\n', '    function freezeAccount(address target, bool freeze) onlyOwner {\n', '        require (target != owner);           // owner tidak boleh membekukan dirinya sendiri\n', '        frozenAccount[target] = freeze;\n', '        FrozenFunds(target, freeze);\n', '    }\n', '\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) {\n', '        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n', '        require (frozenAccount[msg.sender] != true);                 // Mencegah frozen account untuk mengirim\n', '        require (balanceOf[msg.sender] >= _value);           // Check if the sender has enough\n', '        require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\n', '        balanceOf[msg.sender] -= _value;                     // Subtract from the sender\n', '        balanceOf[_to] += _value;                            // Add the same to the recipient\n', '        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n', '    }\n', '\n', '\n', '\n', '    /* transfer dari akun ke akun tapi yang berhak melakukannya adalah akun itu saja */\n', '    function transferDari(address _from, address _to, uint256 _value) returns (bool success) {\n', '        require (_to != 0x0);                                // Prevent transfer to 0x0 address. Use burn() instead\n', '        require (msg.sender == _from);                       // Mencegah user mengirim dari akun lain\n', '        require (balanceOf[_from] >= _value);                 // Check if the sender has enough\n', '        require (balanceOf[_to] + _value > balanceOf[_to]);  // Check for overflows\n', '        balanceOf[_from] -= _value;                           // Subtract from the sender\n', '        balanceOf[_to] += _value;                             // Add the same to the recipient\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '}']