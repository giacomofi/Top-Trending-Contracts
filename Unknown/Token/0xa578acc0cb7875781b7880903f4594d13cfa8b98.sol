['/**\n', ' *  Ether Carbon Token, ERC20 compliant (see https://github.com/ethereum/EIPs/issues/20)\n', ' *\n', ' *  Code is based on multiple sources:\n', ' *  https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/ERC20.sol\n', ' *  https://github.com/ConsenSys/Tokens/blob/master/Token_Contracts/contracts/HumanStandardToken.sol\n', ' */\n', '\n', 'pragma solidity ^0.4.13;\n', '\n', '\n', 'contract Token {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        require(_to != 0x00);\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    address owner;\n', '}\n', '\n', '\n', '\n', 'contract  EtherCarbon is StandardToken {\n', '\n', '    \n', '    /* Public variables of the token */\n', '    string public name = " EtherCarbon";\n', '    uint256 public decimals = 2;\n', '    string public symbol = "ECN";\n', '    \n', '    event Mint(address indexed owner,uint amount);\n', '    \n', '    function EtherCarbon() {\n', '        owner = 0x9362586f90abad2D25309033320C9Affc97AEb7D;\n', '        /* Total supply is Five million (5,000,000)*/\n', '        balances[0x9362586f90abad2D25309033320C9Affc97AEb7D] = 5000000 * 10**decimals;\n', '        totalSupply = 5000000 * 10**decimals;\n', '    }\n', '\n', '    function mint(uint amount) onlyOwner returns(bool minted ){\n', '        if (amount > 0){\n', '            totalSupply += amount;\n', '            balances[owner] += amount;\n', '            Mint(msg.sender,amount);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    modifier onlyOwner() { \n', '        if (msg.sender != owner) revert(); \n', '        _; \n', '    }\n', '    \n', '    function setOwner(address _owner) onlyOwner{\n', '        balances[_owner] = balances[owner];\n', '        balances[owner] = 0;\n', '        owner = _owner;\n', '    }\n', '\n', '}']
['/**\n', ' *  Ether Carbon Token, ERC20 compliant (see https://github.com/ethereum/EIPs/issues/20)\n', ' *\n', ' *  Code is based on multiple sources:\n', ' *  https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/ERC20.sol\n', ' *  https://github.com/ConsenSys/Tokens/blob/master/Token_Contracts/contracts/HumanStandardToken.sol\n', ' */\n', '\n', 'pragma solidity ^0.4.13;\n', '\n', '\n', 'contract Token {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        require(_to != 0x00);\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    address owner;\n', '}\n', '\n', '\n', '\n', 'contract  EtherCarbon is StandardToken {\n', '\n', '    \n', '    /* Public variables of the token */\n', '    string public name = " EtherCarbon";\n', '    uint256 public decimals = 2;\n', '    string public symbol = "ECN";\n', '    \n', '    event Mint(address indexed owner,uint amount);\n', '    \n', '    function EtherCarbon() {\n', '        owner = 0x9362586f90abad2D25309033320C9Affc97AEb7D;\n', '        /* Total supply is Five million (5,000,000)*/\n', '        balances[0x9362586f90abad2D25309033320C9Affc97AEb7D] = 5000000 * 10**decimals;\n', '        totalSupply = 5000000 * 10**decimals;\n', '    }\n', '\n', '    function mint(uint amount) onlyOwner returns(bool minted ){\n', '        if (amount > 0){\n', '            totalSupply += amount;\n', '            balances[owner] += amount;\n', '            Mint(msg.sender,amount);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    modifier onlyOwner() { \n', '        if (msg.sender != owner) revert(); \n', '        _; \n', '    }\n', '    \n', '    function setOwner(address _owner) onlyOwner{\n', '        balances[_owner] = balances[owner];\n', '        balances[owner] = 0;\n', '        owner = _owner;\n', '    }\n', '\n', '}']
