['pragma solidity ^0.4.15;\n', '\n', 'contract SolidusToken {\n', '\n', '    address owner = msg.sender;\n', '\n', '    bool public purchasingAllowed = true;\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    uint256 public totalContribution = 0;\n', '    uint256 public totalSupply = 0;\n', '    uint256 public totalBalancingTokens = 0;\n', '    uint256 public tokenMultiplier = 600;\n', '\n', '    function name() constant returns (string) { return "Solidus"; }\n', '    function symbol() constant returns (string) { return "SOL"; }\n', '    function decimals() constant returns (uint8) { return 18; }\n', '    \n', '    function balanceOf(address _owner) constant returns (uint256) { return balances[_owner]; }\n', '    \n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        require(_to != 0x0);                               \n', '        require(balances[msg.sender] >= _value);           \n', '        require(balances[_to] + _value > balances[_to]); \n', '        balances[msg.sender] -= _value;                     \n', '        balances[_to] += _value;                            \n', '        Transfer(msg.sender, _to, _value);                  \n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        require(_to != 0x0);                                \n', '        require(balances[_from] >= _value);                 \n', '        require(balances[_to] + _value > balances[_to]);  \n', '        require(_value <= allowed[_from][msg.sender]);    \n', '        balances[_from] -= _value;                        \n', '        balances[_to] += _value;                          \n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        if (_value != 0 && allowed[msg.sender][_spender] != 0) {return false;}\n', '        \n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) constant returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    function enablePurchasing() {\n', '        require(msg.sender == owner);\n', '        purchasingAllowed = true;\n', '    }\n', '\n', '    function disablePurchasing() {\n', '        require(msg.sender == owner);\n', '        purchasingAllowed = false;\n', '    }\n', '\n', '    function getStats() constant returns (uint256, uint256, uint256, uint256, bool) {\n', '        return (totalContribution, totalSupply, totalBalancingTokens, tokenMultiplier, purchasingAllowed);\n', '    }\n', '\n', '    function halfMultiplier() {\n', '        require(msg.sender == owner);\n', '        tokenMultiplier /= 2;\n', '    }\n', '\n', '    function burn(uint256 _value) returns (bool success) {\n', '        require(msg.sender == owner);\n', '        require(balances[msg.sender] > _value);\n', '        balances[msg.sender] -= _value;\n', '        totalBalancingTokens -= _value;\n', '        totalSupply -= _value;  \n', '        return true;\n', '    }\n', '\n', '    function() payable {\n', '        require(purchasingAllowed);\n', '        \n', '        if (msg.value == 0) {return;}\n', '\n', '        owner.transfer(msg.value);\n', '        totalContribution += msg.value;\n', '\n', '        uint256 tokensIssued = (msg.value * tokenMultiplier);\n', '        \n', '        totalSupply += tokensIssued*2;\n', '        totalBalancingTokens += tokensIssued;\n', '\n', '        balances[msg.sender] += tokensIssued;\n', '        balances[owner] += tokensIssued;\n', '        \n', '        Transfer(address(this), msg.sender, tokensIssued);\n', '    }\n', '}']
['pragma solidity ^0.4.15;\n', '\n', 'contract SolidusToken {\n', '\n', '    address owner = msg.sender;\n', '\n', '    bool public purchasingAllowed = true;\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    uint256 public totalContribution = 0;\n', '    uint256 public totalSupply = 0;\n', '    uint256 public totalBalancingTokens = 0;\n', '    uint256 public tokenMultiplier = 600;\n', '\n', '    function name() constant returns (string) { return "Solidus"; }\n', '    function symbol() constant returns (string) { return "SOL"; }\n', '    function decimals() constant returns (uint8) { return 18; }\n', '    \n', '    function balanceOf(address _owner) constant returns (uint256) { return balances[_owner]; }\n', '    \n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        require(_to != 0x0);                               \n', '        require(balances[msg.sender] >= _value);           \n', '        require(balances[_to] + _value > balances[_to]); \n', '        balances[msg.sender] -= _value;                     \n', '        balances[_to] += _value;                            \n', '        Transfer(msg.sender, _to, _value);                  \n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        require(_to != 0x0);                                \n', '        require(balances[_from] >= _value);                 \n', '        require(balances[_to] + _value > balances[_to]);  \n', '        require(_value <= allowed[_from][msg.sender]);    \n', '        balances[_from] -= _value;                        \n', '        balances[_to] += _value;                          \n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        if (_value != 0 && allowed[msg.sender][_spender] != 0) {return false;}\n', '        \n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) constant returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    function enablePurchasing() {\n', '        require(msg.sender == owner);\n', '        purchasingAllowed = true;\n', '    }\n', '\n', '    function disablePurchasing() {\n', '        require(msg.sender == owner);\n', '        purchasingAllowed = false;\n', '    }\n', '\n', '    function getStats() constant returns (uint256, uint256, uint256, uint256, bool) {\n', '        return (totalContribution, totalSupply, totalBalancingTokens, tokenMultiplier, purchasingAllowed);\n', '    }\n', '\n', '    function halfMultiplier() {\n', '        require(msg.sender == owner);\n', '        tokenMultiplier /= 2;\n', '    }\n', '\n', '    function burn(uint256 _value) returns (bool success) {\n', '        require(msg.sender == owner);\n', '        require(balances[msg.sender] > _value);\n', '        balances[msg.sender] -= _value;\n', '        totalBalancingTokens -= _value;\n', '        totalSupply -= _value;  \n', '        return true;\n', '    }\n', '\n', '    function() payable {\n', '        require(purchasingAllowed);\n', '        \n', '        if (msg.value == 0) {return;}\n', '\n', '        owner.transfer(msg.value);\n', '        totalContribution += msg.value;\n', '\n', '        uint256 tokensIssued = (msg.value * tokenMultiplier);\n', '        \n', '        totalSupply += tokensIssued*2;\n', '        totalBalancingTokens += tokensIssued;\n', '\n', '        balances[msg.sender] += tokensIssued;\n', '        balances[owner] += tokensIssued;\n', '        \n', '        Transfer(address(this), msg.sender, tokensIssued);\n', '    }\n', '}']
