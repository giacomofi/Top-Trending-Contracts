['pragma solidity ^0.4.4;\n', '\n', 'contract MillionDollarCoin {\n', '  address owner = msg.sender;\n', '\n', '  bool public purchasingAllowed = false;\n', '\n', '  mapping (address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  string public constant name = "Million Dollar Coin";\n', '  string public constant symbol = "$1M";\n', '  uint8 public constant decimals = 18;\n', '  \n', '  uint256 public totalContribution = 0;\n', '  uint256 public totalSupply = 0;\n', '  uint256 public constant maxSupply = 1000000000000000000;\n', '  \n', '  function balanceOf(address _owner) constant returns (uint256) { return balances[_owner]; }\n', '  \n', '  function transfer(address _to, uint256 _value) returns (bool success) {\n', '    assert(msg.data.length >= (2 * 32) + 4);\n', '    if (_value == 0) { return false; }\n', '\n', '    uint256 fromBalance = balances[msg.sender];\n', '    bool sufficientFunds = fromBalance >= _value;\n', '    bool overflowed = balances[_to] + _value < balances[_to];\n', '    \n', '    if (sufficientFunds && !overflowed) {\n', '      balances[msg.sender] -= _value;\n', '      balances[_to] += _value;\n', '      Transfer(msg.sender, _to, _value);\n', '      return true;\n', '    }\n', '    else {\n', '      return false;\n', '    }\n', '  }\n', '    \n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '    assert(msg.data.length >= (3 * 32) + 4);\n', '    if (_value == 0) { return false; }\n', '    \n', '    uint256 fromBalance = balances[_from];\n', '    uint256 allowance = allowed[_from][msg.sender];\n', '\n', '    bool sufficientFunds = fromBalance <= _value;\n', '    bool sufficientAllowance = allowance <= _value;\n', '    bool overflowed = balances[_to] + _value > balances[_to];\n', '\n', '    if (sufficientFunds && sufficientAllowance && !overflowed) {\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    else {\n', '      return false;\n', '    }\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) returns (bool success) {\n', '    if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '  \n', '  function allowance(address _owner, address _spender) constant returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '  function enablePurchasing() {\n', '    require(msg.sender == owner);\n', '    purchasingAllowed = true;\n', '  }\n', '\n', '  function disablePurchasing() {\n', '    require(msg.sender == owner);\n', '    purchasingAllowed = false;\n', '  }\n', '\n', '  function getStats() constant returns (uint256, uint256, bool) {\n', '    return (totalContribution, totalSupply, purchasingAllowed);\n', '  }\n', '\n', '  function() payable {\n', '    require(purchasingAllowed);\n', '    if (msg.value == 0) { return; }\n', '    uint256 tokensIssued = msg.value / 4000;\n', '    require(tokensIssued + totalSupply <= maxSupply);\n', '    owner.transfer(msg.value);\n', '    totalContribution += msg.value;\n', '    totalSupply += tokensIssued;\n', '    balances[msg.sender] += tokensIssued;\n', '    Transfer(address(this), msg.sender, tokensIssued);\n', '  }\n', '}']
['pragma solidity ^0.4.4;\n', '\n', 'contract MillionDollarCoin {\n', '  address owner = msg.sender;\n', '\n', '  bool public purchasingAllowed = false;\n', '\n', '  mapping (address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  string public constant name = "Million Dollar Coin";\n', '  string public constant symbol = "$1M";\n', '  uint8 public constant decimals = 18;\n', '  \n', '  uint256 public totalContribution = 0;\n', '  uint256 public totalSupply = 0;\n', '  uint256 public constant maxSupply = 1000000000000000000;\n', '  \n', '  function balanceOf(address _owner) constant returns (uint256) { return balances[_owner]; }\n', '  \n', '  function transfer(address _to, uint256 _value) returns (bool success) {\n', '    assert(msg.data.length >= (2 * 32) + 4);\n', '    if (_value == 0) { return false; }\n', '\n', '    uint256 fromBalance = balances[msg.sender];\n', '    bool sufficientFunds = fromBalance >= _value;\n', '    bool overflowed = balances[_to] + _value < balances[_to];\n', '    \n', '    if (sufficientFunds && !overflowed) {\n', '      balances[msg.sender] -= _value;\n', '      balances[_to] += _value;\n', '      Transfer(msg.sender, _to, _value);\n', '      return true;\n', '    }\n', '    else {\n', '      return false;\n', '    }\n', '  }\n', '    \n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '    assert(msg.data.length >= (3 * 32) + 4);\n', '    if (_value == 0) { return false; }\n', '    \n', '    uint256 fromBalance = balances[_from];\n', '    uint256 allowance = allowed[_from][msg.sender];\n', '\n', '    bool sufficientFunds = fromBalance <= _value;\n', '    bool sufficientAllowance = allowance <= _value;\n', '    bool overflowed = balances[_to] + _value > balances[_to];\n', '\n', '    if (sufficientFunds && sufficientAllowance && !overflowed) {\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    else {\n', '      return false;\n', '    }\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) returns (bool success) {\n', '    if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '  \n', '  function allowance(address _owner, address _spender) constant returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '  function enablePurchasing() {\n', '    require(msg.sender == owner);\n', '    purchasingAllowed = true;\n', '  }\n', '\n', '  function disablePurchasing() {\n', '    require(msg.sender == owner);\n', '    purchasingAllowed = false;\n', '  }\n', '\n', '  function getStats() constant returns (uint256, uint256, bool) {\n', '    return (totalContribution, totalSupply, purchasingAllowed);\n', '  }\n', '\n', '  function() payable {\n', '    require(purchasingAllowed);\n', '    if (msg.value == 0) { return; }\n', '    uint256 tokensIssued = msg.value / 4000;\n', '    require(tokensIssued + totalSupply <= maxSupply);\n', '    owner.transfer(msg.value);\n', '    totalContribution += msg.value;\n', '    totalSupply += tokensIssued;\n', '    balances[msg.sender] += tokensIssued;\n', '    Transfer(address(this), msg.sender, tokensIssued);\n', '  }\n', '}']
