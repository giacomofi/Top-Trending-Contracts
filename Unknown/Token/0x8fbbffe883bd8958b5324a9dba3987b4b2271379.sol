['pragma solidity ^0.4.10;\n', '\n', 'contract SafeMath {\n', '\n', '    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x + y;\n', '      assert((z >= x) && (z >= y));\n', '      return z;\n', '    }\n', '\n', '    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\n', '      assert(x >= y);\n', '      uint256 z = x - y;\n', '      return z;\n', '    }\n', '\n', '    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x * y;\n', '      assert((x == 0)||(z/x == y));\n', '      return z;\n', '    }\n', '    \n', '    function safeDiv(uint256 a, uint256 b) internal returns (uint256) {\n', '      assert(b > 0);\n', '      uint c = a / b;\n', '      assert(a == b * c + a % b);\n', '      return c;\n', '    }\n', '\n', '}\n', '\n', 'contract Token {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '      if (balances[msg.sender] >= _value && _value > 0) {\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract Karma is SafeMath, StandardToken {\n', '\n', '    string public constant name = "Karma PreSale Token";\n', '    string public constant symbol = "KRMP";\n', '    uint256 public constant decimals = 18;\n', '    uint256 public constant tokenCreationCap =  5000*10**decimals;\n', '\n', '    address public multiSigWallet;\n', '    address public owner;\n', '\n', '    // 1 ETH = 300 USD Date: 11.08.2017\n', '    uint public oneTokenInWei = 333333333333333000;\n', '\n', '    modifier onlyOwner {\n', '        if(owner!=msg.sender) revert();\n', '        _;\n', '    }\n', '\n', '    event CreateKRM(address indexed _to, uint256 _value);\n', '\n', '    function Karma(address _SigWallet, address _owner) {\n', '        multiSigWallet = _SigWallet;\n', '        owner = _owner;\n', '        \n', '        balances[0xDe9a1a8CC771C12D4D85b32742688D3EC955167c] = 1900 * 10**decimals;\n', '        balances[0x707Db60b19Cfc5d525DD2359D6181248aa0A518d] = 2900 * 10**decimals;\n', '        balances[0xbfe3d6da33616Ae044c17e203969d37ED5aDF651] = 100 * 10**decimals;\n', '        balances[0x45d6B3Ed3375B114F3ecD3ac5D7E9Bd2154a1E89] = 100 * 10**decimals;\n', '    }\n', '\n', '    function () payable {\n', '        createTokens();\n', '    }\n', '\n', '    function createTokens() internal {\n', '        if (msg.value <= 0) revert();\n', '\n', '        uint multiplier = 10 ** decimals;\n', '        uint256 tokens = safeMult(msg.value, multiplier) / oneTokenInWei;\n', '\n', '        uint256 checkedSupply = safeAdd(totalSupply, tokens);\n', '        if (tokenCreationCap < checkedSupply) revert();\n', '\n', '        balances[msg.sender] += tokens;\n', '        totalSupply = safeAdd(totalSupply, tokens);\n', '    }\n', '\n', '    function finalize() external onlyOwner {\n', '        multiSigWallet.transfer(this.balance);\n', '    }\n', '    \n', '    // add call to oracle \n', '    function setEthPrice(uint _etherPrice) onlyOwner {\n', '        oneTokenInWei = 1 ether / _etherPrice / 100;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.10;\n', '\n', 'contract SafeMath {\n', '\n', '    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x + y;\n', '      assert((z >= x) && (z >= y));\n', '      return z;\n', '    }\n', '\n', '    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\n', '      assert(x >= y);\n', '      uint256 z = x - y;\n', '      return z;\n', '    }\n', '\n', '    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x * y;\n', '      assert((x == 0)||(z/x == y));\n', '      return z;\n', '    }\n', '    \n', '    function safeDiv(uint256 a, uint256 b) internal returns (uint256) {\n', '      assert(b > 0);\n', '      uint c = a / b;\n', '      assert(a == b * c + a % b);\n', '      return c;\n', '    }\n', '\n', '}\n', '\n', 'contract Token {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '      if (balances[msg.sender] >= _value && _value > 0) {\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract Karma is SafeMath, StandardToken {\n', '\n', '    string public constant name = "Karma PreSale Token";\n', '    string public constant symbol = "KRMP";\n', '    uint256 public constant decimals = 18;\n', '    uint256 public constant tokenCreationCap =  5000*10**decimals;\n', '\n', '    address public multiSigWallet;\n', '    address public owner;\n', '\n', '    // 1 ETH = 300 USD Date: 11.08.2017\n', '    uint public oneTokenInWei = 333333333333333000;\n', '\n', '    modifier onlyOwner {\n', '        if(owner!=msg.sender) revert();\n', '        _;\n', '    }\n', '\n', '    event CreateKRM(address indexed _to, uint256 _value);\n', '\n', '    function Karma(address _SigWallet, address _owner) {\n', '        multiSigWallet = _SigWallet;\n', '        owner = _owner;\n', '        \n', '        balances[0xDe9a1a8CC771C12D4D85b32742688D3EC955167c] = 1900 * 10**decimals;\n', '        balances[0x707Db60b19Cfc5d525DD2359D6181248aa0A518d] = 2900 * 10**decimals;\n', '        balances[0xbfe3d6da33616Ae044c17e203969d37ED5aDF651] = 100 * 10**decimals;\n', '        balances[0x45d6B3Ed3375B114F3ecD3ac5D7E9Bd2154a1E89] = 100 * 10**decimals;\n', '    }\n', '\n', '    function () payable {\n', '        createTokens();\n', '    }\n', '\n', '    function createTokens() internal {\n', '        if (msg.value <= 0) revert();\n', '\n', '        uint multiplier = 10 ** decimals;\n', '        uint256 tokens = safeMult(msg.value, multiplier) / oneTokenInWei;\n', '\n', '        uint256 checkedSupply = safeAdd(totalSupply, tokens);\n', '        if (tokenCreationCap < checkedSupply) revert();\n', '\n', '        balances[msg.sender] += tokens;\n', '        totalSupply = safeAdd(totalSupply, tokens);\n', '    }\n', '\n', '    function finalize() external onlyOwner {\n', '        multiSigWallet.transfer(this.balance);\n', '    }\n', '    \n', '    // add call to oracle \n', '    function setEthPrice(uint _etherPrice) onlyOwner {\n', '        oneTokenInWei = 1 ether / _etherPrice / 100;\n', '    }\n', '\n', '}']
