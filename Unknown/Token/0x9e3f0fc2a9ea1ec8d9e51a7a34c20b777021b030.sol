['pragma solidity ^0.4.8;\n', '\n', 'contract OwnedByWinsome {\n', '\n', '  address public owner;\n', '  mapping (address => bool) allowedWorker;\n', '\n', '  function initOwnership(address _owner, address _worker) internal{\n', '    owner = _owner;\n', '    allowedWorker[_owner] = true;\n', '    allowedWorker[_worker] = true;\n', '  }\n', '\n', '  function allowWorker(address _new_worker) onlyOwner{\n', '    allowedWorker[_new_worker] = true;\n', '  }\n', '  function removeWorker(address _old_worker) onlyOwner{\n', '    allowedWorker[_old_worker] = false;\n', '  }\n', '  function changeOwner(address _new_owner) onlyOwner{\n', '    owner = _new_owner;\n', '  }\n', '\t\t\t\t\t\t    \n', '  modifier onlyAllowedWorker{\n', '    if (!allowedWorker[msg.sender]){\n', '      throw;\n', '    }\n', '    _;\n', '  }\n', '\n', '  modifier onlyOwner{\n', '    if (msg.sender != owner){\n', '      throw;\n', '    }\n', '    _;\n', '  }\n', '\n', '  \n', '}\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    assert(b > 0);\n', '    uint c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      throw;\n', '    }\n', '  }\n', '}\n', '\n', '\n', '/*\n', ' * Basic token\n', ' * Basic version of StandardToken, with no allowances\n', ' */\n', 'contract BasicToken {\n', '  using SafeMath for uint;\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '  mapping(address => uint) balances;\n', '  uint public     totalSupply =    0;    \t\t\t // Total supply of 500 million Tokens\n', '  \n', '  /*\n', '   * Fix for the ERC20 short address attack  \n', '   */\n', '  modifier onlyPayloadSize(uint size) {\n', '     if(msg.data.length < size + 4) {\n', '       throw;\n', '     }\n', '     _;\n', '  }\n', '\n', '  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '  }\n', '\n', '  function balanceOf(address _owner) constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '  \n', '}\n', '\n', '\n', 'contract StandardToken is BasicToken{\n', '  \n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '\n', '  \n', '  mapping (address => mapping (address => uint)) allowed;\n', '\n', '  function transferFrom(address _from, address _to, uint _value) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // if (_value > _allowance) throw;\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint _value) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract WinToken is StandardToken, OwnedByWinsome{\n', '\n', '  string public   name =           "Winsome.io Token";\n', '  string public   symbol =         "WIN";\n', '  uint public     decimals =       18;\n', '  \n', '  mapping (address => bool) allowedMinter;\n', '\n', '  function WinToken(address _owner){\n', '    allowedMinter[_owner] = true;\n', '    initOwnership(_owner, _owner);\n', '  }\n', '\n', '  function allowMinter(address _new_minter) onlyOwner{\n', '    allowedMinter[_new_minter] = true;\n', '  }\n', '  function removeMinter(address _old_minter) onlyOwner{\n', '    allowedMinter[_old_minter] = false;\n', '  }\n', '\n', '  modifier onlyAllowedMinter{\n', '    if (!allowedMinter[msg.sender]){\n', '      throw;\n', '    }\n', '    _;\n', '  }\n', '  function mintTokens(address _for, uint _value_wei) onlyAllowedMinter {\n', '    balances[_for] = balances[_for].add(_value_wei);\n', '    totalSupply = totalSupply.add(_value_wei) ;\n', '    Transfer(address(0), _for, _value_wei);\n', '  }\n', '  function destroyTokens(address _for, uint _value_wei) onlyAllowedMinter {\n', '    balances[_for] = balances[_for].sub(_value_wei);\n', '    totalSupply = totalSupply.sub(_value_wei);\n', '    Transfer(_for, address(0), _value_wei);    \n', '  }\n', '  \n', '}']