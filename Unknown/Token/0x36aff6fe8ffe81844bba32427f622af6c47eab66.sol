['pragma solidity ^0.4.13;\n', '\n', 'contract SafeMath {\n', '    //SafeAdd 是安全加法，这是ERC20标准function\n', '    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x + y;\n', '      assert((z >= x) && (z >= y));\n', '      return z;\n', '    }\n', '\n', '    //SafeSubtract 是安全减法，这是ERC20标准function\n', '    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\n', '      assert(x >= y);\n', '      uint256 z = x - y;\n', '      return z;\n', '    }\n', '\n', '    //SafeMult 是安全乘法，这是ERC20标准function\n', '    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x * y;\n', '      assert((x == 0)||(z/x == y));\n', '      return z;\n', '    }\n', '\n', '}\n', '\n', '// Token合约，这里定义了合约需要用到的方法\n', 'contract Token {\n', '    //totalSupply: 总供应量\n', '    uint256 public totalSupply;\n', '    //balanceOf: 获取每个地址的GDC余额\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    //transfer: GDC合约的转账功能\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    //transferFrom: 将GDC从一个地址转向另一个地址\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    //approve: 允许从A地址向B地址转账，需要先approve, 然后才能transferFrom\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    //allowance，保留Approve方法的结果\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '    //Transfer事件，在调用转账方法之后，会记录下转账事件\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    //Approval事件，在调用approve方法之后，会记录下Approval事件\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '/*  ERC 20 token */\n', 'contract StandardToken is Token {\n', '    //转账功能，实现向某个账户转账的功能\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '      if (balances[msg.sender] >= _value && _value > 0) {\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    // 实现从A账户向B账户转账功能，但必须要A账户先允许向B账户的转账金额才可\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '    //获取当前账户的代币数量\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '    //允许向某个账户转账多少金额\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    // 记录下向某个账户转账的代币数量\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '    // 代币余额表，记录下某个地址有多少代币数量\n', '    mapping (address => uint256) balances;\n', '    // 允许转账金额，记录下A地址允许向B地址，转账多少代币\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', '// GDC合约，继承自ERC20的标准合约\n', 'contract GDC is StandardToken, SafeMath {\n', '    string public constant name = "GDC"; //合约名字为GDC\n', '    string public constant symbol = "GDC"; //合约标示为GDC\n', '    uint256 public constant decimals = 18; //合约小数点后18位\n', '    string public version = "1.0"; //合约版本 1.0\n', '\n', '    address  public GDCAcc01;  //GDC合约的账号1\n', '    address  public GDCAcc02;  //GDC合约的账号2\n', '    address  public GDCAcc03;  //GDC合约的账号3\n', '    address  public GDCAcc04;  //GDC合约的账号4\n', '    address  public GDCAcc05;  //GDC合约的账号5\n', '\n', '    uint256 public constant factorial = 6; //用于定义每个账户多少GDC数量所用。\n', '    uint256 public constant GDCNumber1 = 200 * (10**factorial) * 10**decimals; //GDCAcc1代币数量为200M，即2亿代币\n', '    uint256 public constant GDCNumber2 = 200 * (10**factorial) * 10**decimals; //GDCAcc2代币数量为200M，即2亿代币\n', '    uint256 public constant GDCNumber3 = 200 * (10**factorial) * 10**decimals; //GDCAcc3代币数量为200M，即2亿代币\n', '    uint256 public constant GDCNumber4 = 200 * (10**factorial) * 10**decimals; //GDCAcc4代币数量为200M，即2亿代币\n', '    uint256 public constant GDCNumber5 = 200 * (10**factorial) * 10**decimals; //GDCAcc5代币数量为200M，即2亿代币\n', '\n', '\n', '    // 构造函数，需要输入五个地址，然后分别给五个地址分配2亿GDC代币\n', '    function GDC(\n', '      address _GDCAcc01,\n', '      address _GDCAcc02,\n', '      address _GDCAcc03,\n', '      address _GDCAcc04,\n', '      address _GDCAcc05\n', '    )\n', '    {\n', '      totalSupply = 1000 * (10**factorial) * 10**decimals; // 设置总供应量为10亿\n', '      GDCAcc01 = _GDCAcc01;\n', '      GDCAcc02 = _GDCAcc02;\n', '      GDCAcc03 = _GDCAcc03;\n', '      GDCAcc04 = _GDCAcc04;\n', '      GDCAcc05 = _GDCAcc05;\n', '\n', '      balances[GDCAcc01] = GDCNumber1;\n', '      balances[GDCAcc02] = GDCNumber2;\n', '      balances[GDCAcc03] = GDCNumber3;\n', '      balances[GDCAcc04] = GDCNumber4;\n', '      balances[GDCAcc05] = GDCNumber5;\n', '\n', '    }\n', '\n', '    // transferLock 代表必须要输入的flag为true的时候，转账才可能生效，否则都会失效\n', '    function transferLock(address _to, uint256 _value, bool flag) returns (bool success) {\n', '      if (balances[msg.sender] >= _value && _value > 0 && flag) {\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '}']
['pragma solidity ^0.4.13;\n', '\n', 'contract SafeMath {\n', '    //SafeAdd 是安全加法，这是ERC20标准function\n', '    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x + y;\n', '      assert((z >= x) && (z >= y));\n', '      return z;\n', '    }\n', '\n', '    //SafeSubtract 是安全减法，这是ERC20标准function\n', '    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\n', '      assert(x >= y);\n', '      uint256 z = x - y;\n', '      return z;\n', '    }\n', '\n', '    //SafeMult 是安全乘法，这是ERC20标准function\n', '    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x * y;\n', '      assert((x == 0)||(z/x == y));\n', '      return z;\n', '    }\n', '\n', '}\n', '\n', '// Token合约，这里定义了合约需要用到的方法\n', 'contract Token {\n', '    //totalSupply: 总供应量\n', '    uint256 public totalSupply;\n', '    //balanceOf: 获取每个地址的GDC余额\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    //transfer: GDC合约的转账功能\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    //transferFrom: 将GDC从一个地址转向另一个地址\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    //approve: 允许从A地址向B地址转账，需要先approve, 然后才能transferFrom\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    //allowance，保留Approve方法的结果\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '    //Transfer事件，在调用转账方法之后，会记录下转账事件\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    //Approval事件，在调用approve方法之后，会记录下Approval事件\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '/*  ERC 20 token */\n', 'contract StandardToken is Token {\n', '    //转账功能，实现向某个账户转账的功能\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '      if (balances[msg.sender] >= _value && _value > 0) {\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    // 实现从A账户向B账户转账功能，但必须要A账户先允许向B账户的转账金额才可\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '    //获取当前账户的代币数量\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '    //允许向某个账户转账多少金额\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    // 记录下向某个账户转账的代币数量\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '    // 代币余额表，记录下某个地址有多少代币数量\n', '    mapping (address => uint256) balances;\n', '    // 允许转账金额，记录下A地址允许向B地址，转账多少代币\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', '// GDC合约，继承自ERC20的标准合约\n', 'contract GDC is StandardToken, SafeMath {\n', '    string public constant name = "GDC"; //合约名字为GDC\n', '    string public constant symbol = "GDC"; //合约标示为GDC\n', '    uint256 public constant decimals = 18; //合约小数点后18位\n', '    string public version = "1.0"; //合约版本 1.0\n', '\n', '    address  public GDCAcc01;  //GDC合约的账号1\n', '    address  public GDCAcc02;  //GDC合约的账号2\n', '    address  public GDCAcc03;  //GDC合约的账号3\n', '    address  public GDCAcc04;  //GDC合约的账号4\n', '    address  public GDCAcc05;  //GDC合约的账号5\n', '\n', '    uint256 public constant factorial = 6; //用于定义每个账户多少GDC数量所用。\n', '    uint256 public constant GDCNumber1 = 200 * (10**factorial) * 10**decimals; //GDCAcc1代币数量为200M，即2亿代币\n', '    uint256 public constant GDCNumber2 = 200 * (10**factorial) * 10**decimals; //GDCAcc2代币数量为200M，即2亿代币\n', '    uint256 public constant GDCNumber3 = 200 * (10**factorial) * 10**decimals; //GDCAcc3代币数量为200M，即2亿代币\n', '    uint256 public constant GDCNumber4 = 200 * (10**factorial) * 10**decimals; //GDCAcc4代币数量为200M，即2亿代币\n', '    uint256 public constant GDCNumber5 = 200 * (10**factorial) * 10**decimals; //GDCAcc5代币数量为200M，即2亿代币\n', '\n', '\n', '    // 构造函数，需要输入五个地址，然后分别给五个地址分配2亿GDC代币\n', '    function GDC(\n', '      address _GDCAcc01,\n', '      address _GDCAcc02,\n', '      address _GDCAcc03,\n', '      address _GDCAcc04,\n', '      address _GDCAcc05\n', '    )\n', '    {\n', '      totalSupply = 1000 * (10**factorial) * 10**decimals; // 设置总供应量为10亿\n', '      GDCAcc01 = _GDCAcc01;\n', '      GDCAcc02 = _GDCAcc02;\n', '      GDCAcc03 = _GDCAcc03;\n', '      GDCAcc04 = _GDCAcc04;\n', '      GDCAcc05 = _GDCAcc05;\n', '\n', '      balances[GDCAcc01] = GDCNumber1;\n', '      balances[GDCAcc02] = GDCNumber2;\n', '      balances[GDCAcc03] = GDCNumber3;\n', '      balances[GDCAcc04] = GDCNumber4;\n', '      balances[GDCAcc05] = GDCNumber5;\n', '\n', '    }\n', '\n', '    // transferLock 代表必须要输入的flag为true的时候，转账才可能生效，否则都会失效\n', '    function transferLock(address _to, uint256 _value, bool flag) returns (bool success) {\n', '      if (balances[msg.sender] >= _value && _value > 0 && flag) {\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '}']
