['/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS paused\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS NOT paused\n', '   */\n', '  modifier whenPaused {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused returns (bool) {\n', '    paused = true;\n', '    Pause();\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused returns (bool) {\n', '    paused = false;\n', '    Unpause();\n', '    return true;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title NonZero\n', ' */\n', 'contract NonZero {\n', '\n', '// Functions with this modifier fail if he \n', '    modifier nonZeroAddress(address _to) {\n', '        require(_to != 0x0);\n', '        _;\n', '    }\n', '\n', '    modifier nonZeroAmount(uint _amount) {\n', '        require(_amount > 0);\n', '        _;\n', '    }\n', '\n', '    modifier nonZeroValue() {\n', '        require(msg.value > 0);\n', '        _;\n', '    }\n', '\n', '    // prevents short address attack\n', '    // standard size = 2 * 32\n', '    modifier onlyPayloadSize(uint size) {\n', '\t// we assert the msg data is greater than or equal to, because\n', '\t// a multisgi wallet will be greater than standard payload size of 64 bits\n', '    assert(msg.data.length >= size + 4);\n', '     _;\n', '   } \n', '}\n', '\n', 'contract FuelToken is ERC20, Ownable, NonZero {\n', '\n', '    using SafeMath for uint;\n', '\n', '/////////////////////// TOKEN INFORMATION ///////////////////////\n', '    string public constant name = "Fuel Token";\n', '    string public constant symbol = "FUEL";\n', '\n', '    uint8 public decimals = 18;\n', '    \n', '    // Mapping to keep user&#39;s balances\n', '    mapping (address => uint256) balances;\n', '    // Mapping to keep user&#39;s allowances\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '/////////////////////// VARIABLE INITIALIZATION ///////////////////////\n', '    \n', '    // Allocation for the Vanbex Team\n', '    uint256 public vanbexTeamSupply;\n', '    // Etherparty platform supply\n', '    uint256 public platformSupply;\n', '    // Amount of FUEL for the presale\n', '    uint256 public presaleSupply;\n', '    // Amount of presale tokens remaining at a given time\n', '    uint256 public presaleAmountRemaining;\n', '    // Total ICO supply\n', '    uint256 public icoSupply;\n', '    // Community incentivisation supply\n', '    uint256 public incentivisingEffortsSupply;\n', '    // Crowdsale End Timestamp\n', '    uint256 public crowdfundEndsAt;\n', '    // Vesting period for the Vanbex Team allocation\n', '    uint256 public vanbexTeamVestingPeriod;\n', '\n', '    // Crowdfund Address\n', '    address public crowdfundAddress;\n', '    // Vanbex team address\n', '    address public vanbexTeamAddress;\n', '    // Etherparty platform address\n', '    address public platformAddress;\n', '    // Community incentivisation address\n', '    address public incentivisingEffortsAddress;\n', '\n', '    // Flag keeping track of presale status. Ensures functions can only be called once\n', '    bool public presaleFinalized = false;\n', '    // Flag keeping track of crowdsale status. Ensures functions can only be called once\n', '    bool public crowdfundFinalized = false;\n', '\n', '/////////////////////// EVENTS ///////////////////////\n', '\n', '    // Event called when crowdfund is done\n', '    event CrowdfundFinalized(uint tokensRemaining);\n', '    // Event called when presale is done\n', '    event PresaleFinalized(uint tokensRemaining);\n', '\n', '/////////////////////// MODIFIERS ///////////////////////\n', '\n', '    // Ensure actions can only happen after crowdfund ends\n', '    modifier notBeforeCrowdfundEnds(){\n', '        require(now >= crowdfundEndsAt);\n', '        _;\n', '    }\n', '\n', '    // Ensure vesting period is over\n', '    modifier checkVanbexTeamVestingPeriod() {\n', '        assert(now >= vanbexTeamVestingPeriod);\n', '        _;\n', '    }\n', '\n', '    // Ensure only crowdfund can call the function\n', '    modifier onlyCrowdfund() {\n', '        require(msg.sender == crowdfundAddress);\n', '        _;\n', '    }\n', '\n', '/////////////////////// ERC20 FUNCTIONS ///////////////////////\n', '\n', '    // Transfer\n', '    function transfer(address _to, uint256 _amount) notBeforeCrowdfundEnds returns (bool success) {\n', '        require(balanceOf(msg.sender) >= _amount);\n', '        addToBalance(_to, _amount);\n', '        decrementBalance(msg.sender, _amount);\n', '        Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    // Transfer from one address to another (need allowance to be called first)\n', '    function transferFrom(address _from, address _to, uint256 _amount) notBeforeCrowdfundEnds returns (bool success) {\n', '        require(allowance(_from, msg.sender) >= _amount);\n', '        decrementBalance(_from, _amount);\n', '        addToBalance(_to, _amount);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '        Transfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    // Approve another address a certain amount of FUEL\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        require((_value == 0) || (allowance(msg.sender, _spender) == 0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    // Get an address&#39;s FUEL allowance\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    // Get the FUEL balance of any address\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '/////////////////////// TOKEN FUNCTIONS ///////////////////////\n', '\n', '    // Constructor\n', '    function FuelToken() {\n', '        crowdfundEndsAt = 1509292800;                                               // Oct 29, 9 AM PST\n', '        vanbexTeamVestingPeriod = crowdfundEndsAt.add(183 * 1 days);                // 6 months vesting period\n', '\n', '        totalSupply = 1 * 10**27;                                                   // 100% - 1 billion total FUEL tokens with 18 decimals\n', '        vanbexTeamSupply = 5 * 10**25;                                              // 5% - 50 million for etherparty team\n', '        platformSupply = 5 * 10**25;                                                // 5% - 50 million to be sold on the etherparty platform in-app\n', '        incentivisingEffortsSupply = 1 * 10**26;                                    // 10% - 100 million for incentivising efforts\n', '        presaleSupply = 54 * 10**25;                                                // 540,000,000 fuel tokens available for presale with overflow for bonus included\n', '        icoSupply = 26 * 10**25;                                                    // 260 million fuel tokens for ico with potential for extra after finalizing presale\n', '       \n', '        presaleAmountRemaining = presaleSupply;                                     // Decreased over the course of the pre-sale\n', '        vanbexTeamAddress = 0xCF701D8eA4C727466D42651dda127c0c033076B0;             // Vanbex Team Address\n', '        platformAddress = 0xF5b5f6c1E233671B220C2A19Af10Fd18785D0744;               // Platform Address\n', '        incentivisingEffortsAddress = 0x5584b17B40F6a2E412e65FcB1533f39Fc7D8Aa26;   // Community incentivisation address\n', '\n', '        addToBalance(incentivisingEffortsAddress, incentivisingEffortsSupply);     \n', '        addToBalance(platformAddress, platformSupply);                              \n', '    }\n', '\n', '    // Sets the crowdfund address, can only be done once\n', '    function setCrowdfundAddress(address _crowdfundAddress) external onlyOwner nonZeroAddress(_crowdfundAddress) {\n', '        require(crowdfundAddress == 0x0);\n', '        crowdfundAddress = _crowdfundAddress;\n', '        addToBalance(crowdfundAddress, icoSupply); \n', '    }\n', '\n', '    // Function for the Crowdfund to transfer tokens\n', '    function transferFromCrowdfund(address _to, uint256 _amount) onlyCrowdfund nonZeroAmount(_amount) nonZeroAddress(_to) returns (bool success) {\n', '        require(balanceOf(crowdfundAddress) >= _amount);\n', '        decrementBalance(crowdfundAddress, _amount);\n', '        addToBalance(_to, _amount);\n', '        Transfer(0x0, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    // Release Vanbex team supply after vesting period is finished.\n', '    function releaseVanbexTeamTokens() checkVanbexTeamVestingPeriod onlyOwner returns(bool success) {\n', '        require(vanbexTeamSupply > 0);\n', '        addToBalance(vanbexTeamAddress, vanbexTeamSupply);\n', '        Transfer(0x0, vanbexTeamAddress, vanbexTeamSupply);\n', '        vanbexTeamSupply = 0;\n', '        return true;\n', '    }\n', '\n', '    // Finalize presale. If there are leftover FUEL, let them overflow to the crowdfund\n', '    function finalizePresale() external onlyOwner returns (bool success) {\n', '        require(presaleFinalized == false);\n', '        uint256 amount = presaleAmountRemaining;\n', '        if (amount != 0) {\n', '            presaleAmountRemaining = 0;\n', '            addToBalance(crowdfundAddress, amount);\n', '        }\n', '        presaleFinalized = true;\n', '        PresaleFinalized(amount);\n', '        return true;\n', '    }\n', '\n', '    // Finalize crowdfund. If there are leftover FUEL, let them overflow to the be sold at 1$ on the platform\n', '    function finalizeCrowdfund() external onlyCrowdfund {\n', '        require(presaleFinalized == true && crowdfundFinalized == false);\n', '        uint256 amount = balanceOf(crowdfundAddress);\n', '        if (amount > 0) {\n', '            balances[crowdfundAddress] = 0;\n', '            addToBalance(platformAddress, amount);\n', '            Transfer(crowdfundAddress, platformAddress, amount);\n', '        }\n', '        crowdfundFinalized = true;\n', '        CrowdfundFinalized(amount);\n', '    }\n', '\n', '\n', '    // Function to send FUEL to presale investors\n', '    function deliverPresaleFuelBalances(address[] _batchOfAddresses, uint[] _amountOfFuel) external onlyOwner returns (bool success) {\n', '        for (uint256 i = 0; i < _batchOfAddresses.length; i++) {\n', '            deliverPresaleFuelBalance(_batchOfAddresses[i], _amountOfFuel[i]);            \n', '        }\n', '        return true;\n', '    }\n', '\n', '    // All presale purchases will be delivered. If one address has contributed more than once,\n', '    // his contribution will be aggregated\n', '    function deliverPresaleFuelBalance(address _accountHolder, uint _amountOfBoughtFuel) internal onlyOwner {\n', '        require(presaleAmountRemaining > 0);\n', '        addToBalance(_accountHolder, _amountOfBoughtFuel);\n', '        Transfer(0x0, _accountHolder, _amountOfBoughtFuel);\n', '        presaleAmountRemaining = presaleAmountRemaining.sub(_amountOfBoughtFuel);    \n', '    }\n', '\n', '    // Add to balance\n', '    function addToBalance(address _address, uint _amount) internal {\n', '    \tbalances[_address] = balances[_address].add(_amount);\n', '    }\n', '\n', '    // Remove from balance\n', '    function decrementBalance(address _address, uint _amount) internal {\n', '    \tbalances[_address] = balances[_address].sub(_amount);\n', '    }\n', '}']
['/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS paused\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS NOT paused\n', '   */\n', '  modifier whenPaused {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused returns (bool) {\n', '    paused = true;\n', '    Pause();\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused returns (bool) {\n', '    paused = false;\n', '    Unpause();\n', '    return true;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title NonZero\n', ' */\n', 'contract NonZero {\n', '\n', '// Functions with this modifier fail if he \n', '    modifier nonZeroAddress(address _to) {\n', '        require(_to != 0x0);\n', '        _;\n', '    }\n', '\n', '    modifier nonZeroAmount(uint _amount) {\n', '        require(_amount > 0);\n', '        _;\n', '    }\n', '\n', '    modifier nonZeroValue() {\n', '        require(msg.value > 0);\n', '        _;\n', '    }\n', '\n', '    // prevents short address attack\n', '    // standard size = 2 * 32\n', '    modifier onlyPayloadSize(uint size) {\n', '\t// we assert the msg data is greater than or equal to, because\n', '\t// a multisgi wallet will be greater than standard payload size of 64 bits\n', '    assert(msg.data.length >= size + 4);\n', '     _;\n', '   } \n', '}\n', '\n', 'contract FuelToken is ERC20, Ownable, NonZero {\n', '\n', '    using SafeMath for uint;\n', '\n', '/////////////////////// TOKEN INFORMATION ///////////////////////\n', '    string public constant name = "Fuel Token";\n', '    string public constant symbol = "FUEL";\n', '\n', '    uint8 public decimals = 18;\n', '    \n', "    // Mapping to keep user's balances\n", '    mapping (address => uint256) balances;\n', "    // Mapping to keep user's allowances\n", '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '/////////////////////// VARIABLE INITIALIZATION ///////////////////////\n', '    \n', '    // Allocation for the Vanbex Team\n', '    uint256 public vanbexTeamSupply;\n', '    // Etherparty platform supply\n', '    uint256 public platformSupply;\n', '    // Amount of FUEL for the presale\n', '    uint256 public presaleSupply;\n', '    // Amount of presale tokens remaining at a given time\n', '    uint256 public presaleAmountRemaining;\n', '    // Total ICO supply\n', '    uint256 public icoSupply;\n', '    // Community incentivisation supply\n', '    uint256 public incentivisingEffortsSupply;\n', '    // Crowdsale End Timestamp\n', '    uint256 public crowdfundEndsAt;\n', '    // Vesting period for the Vanbex Team allocation\n', '    uint256 public vanbexTeamVestingPeriod;\n', '\n', '    // Crowdfund Address\n', '    address public crowdfundAddress;\n', '    // Vanbex team address\n', '    address public vanbexTeamAddress;\n', '    // Etherparty platform address\n', '    address public platformAddress;\n', '    // Community incentivisation address\n', '    address public incentivisingEffortsAddress;\n', '\n', '    // Flag keeping track of presale status. Ensures functions can only be called once\n', '    bool public presaleFinalized = false;\n', '    // Flag keeping track of crowdsale status. Ensures functions can only be called once\n', '    bool public crowdfundFinalized = false;\n', '\n', '/////////////////////// EVENTS ///////////////////////\n', '\n', '    // Event called when crowdfund is done\n', '    event CrowdfundFinalized(uint tokensRemaining);\n', '    // Event called when presale is done\n', '    event PresaleFinalized(uint tokensRemaining);\n', '\n', '/////////////////////// MODIFIERS ///////////////////////\n', '\n', '    // Ensure actions can only happen after crowdfund ends\n', '    modifier notBeforeCrowdfundEnds(){\n', '        require(now >= crowdfundEndsAt);\n', '        _;\n', '    }\n', '\n', '    // Ensure vesting period is over\n', '    modifier checkVanbexTeamVestingPeriod() {\n', '        assert(now >= vanbexTeamVestingPeriod);\n', '        _;\n', '    }\n', '\n', '    // Ensure only crowdfund can call the function\n', '    modifier onlyCrowdfund() {\n', '        require(msg.sender == crowdfundAddress);\n', '        _;\n', '    }\n', '\n', '/////////////////////// ERC20 FUNCTIONS ///////////////////////\n', '\n', '    // Transfer\n', '    function transfer(address _to, uint256 _amount) notBeforeCrowdfundEnds returns (bool success) {\n', '        require(balanceOf(msg.sender) >= _amount);\n', '        addToBalance(_to, _amount);\n', '        decrementBalance(msg.sender, _amount);\n', '        Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    // Transfer from one address to another (need allowance to be called first)\n', '    function transferFrom(address _from, address _to, uint256 _amount) notBeforeCrowdfundEnds returns (bool success) {\n', '        require(allowance(_from, msg.sender) >= _amount);\n', '        decrementBalance(_from, _amount);\n', '        addToBalance(_to, _amount);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '        Transfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    // Approve another address a certain amount of FUEL\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        require((_value == 0) || (allowance(msg.sender, _spender) == 0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', "    // Get an address's FUEL allowance\n", '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    // Get the FUEL balance of any address\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '/////////////////////// TOKEN FUNCTIONS ///////////////////////\n', '\n', '    // Constructor\n', '    function FuelToken() {\n', '        crowdfundEndsAt = 1509292800;                                               // Oct 29, 9 AM PST\n', '        vanbexTeamVestingPeriod = crowdfundEndsAt.add(183 * 1 days);                // 6 months vesting period\n', '\n', '        totalSupply = 1 * 10**27;                                                   // 100% - 1 billion total FUEL tokens with 18 decimals\n', '        vanbexTeamSupply = 5 * 10**25;                                              // 5% - 50 million for etherparty team\n', '        platformSupply = 5 * 10**25;                                                // 5% - 50 million to be sold on the etherparty platform in-app\n', '        incentivisingEffortsSupply = 1 * 10**26;                                    // 10% - 100 million for incentivising efforts\n', '        presaleSupply = 54 * 10**25;                                                // 540,000,000 fuel tokens available for presale with overflow for bonus included\n', '        icoSupply = 26 * 10**25;                                                    // 260 million fuel tokens for ico with potential for extra after finalizing presale\n', '       \n', '        presaleAmountRemaining = presaleSupply;                                     // Decreased over the course of the pre-sale\n', '        vanbexTeamAddress = 0xCF701D8eA4C727466D42651dda127c0c033076B0;             // Vanbex Team Address\n', '        platformAddress = 0xF5b5f6c1E233671B220C2A19Af10Fd18785D0744;               // Platform Address\n', '        incentivisingEffortsAddress = 0x5584b17B40F6a2E412e65FcB1533f39Fc7D8Aa26;   // Community incentivisation address\n', '\n', '        addToBalance(incentivisingEffortsAddress, incentivisingEffortsSupply);     \n', '        addToBalance(platformAddress, platformSupply);                              \n', '    }\n', '\n', '    // Sets the crowdfund address, can only be done once\n', '    function setCrowdfundAddress(address _crowdfundAddress) external onlyOwner nonZeroAddress(_crowdfundAddress) {\n', '        require(crowdfundAddress == 0x0);\n', '        crowdfundAddress = _crowdfundAddress;\n', '        addToBalance(crowdfundAddress, icoSupply); \n', '    }\n', '\n', '    // Function for the Crowdfund to transfer tokens\n', '    function transferFromCrowdfund(address _to, uint256 _amount) onlyCrowdfund nonZeroAmount(_amount) nonZeroAddress(_to) returns (bool success) {\n', '        require(balanceOf(crowdfundAddress) >= _amount);\n', '        decrementBalance(crowdfundAddress, _amount);\n', '        addToBalance(_to, _amount);\n', '        Transfer(0x0, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    // Release Vanbex team supply after vesting period is finished.\n', '    function releaseVanbexTeamTokens() checkVanbexTeamVestingPeriod onlyOwner returns(bool success) {\n', '        require(vanbexTeamSupply > 0);\n', '        addToBalance(vanbexTeamAddress, vanbexTeamSupply);\n', '        Transfer(0x0, vanbexTeamAddress, vanbexTeamSupply);\n', '        vanbexTeamSupply = 0;\n', '        return true;\n', '    }\n', '\n', '    // Finalize presale. If there are leftover FUEL, let them overflow to the crowdfund\n', '    function finalizePresale() external onlyOwner returns (bool success) {\n', '        require(presaleFinalized == false);\n', '        uint256 amount = presaleAmountRemaining;\n', '        if (amount != 0) {\n', '            presaleAmountRemaining = 0;\n', '            addToBalance(crowdfundAddress, amount);\n', '        }\n', '        presaleFinalized = true;\n', '        PresaleFinalized(amount);\n', '        return true;\n', '    }\n', '\n', '    // Finalize crowdfund. If there are leftover FUEL, let them overflow to the be sold at 1$ on the platform\n', '    function finalizeCrowdfund() external onlyCrowdfund {\n', '        require(presaleFinalized == true && crowdfundFinalized == false);\n', '        uint256 amount = balanceOf(crowdfundAddress);\n', '        if (amount > 0) {\n', '            balances[crowdfundAddress] = 0;\n', '            addToBalance(platformAddress, amount);\n', '            Transfer(crowdfundAddress, platformAddress, amount);\n', '        }\n', '        crowdfundFinalized = true;\n', '        CrowdfundFinalized(amount);\n', '    }\n', '\n', '\n', '    // Function to send FUEL to presale investors\n', '    function deliverPresaleFuelBalances(address[] _batchOfAddresses, uint[] _amountOfFuel) external onlyOwner returns (bool success) {\n', '        for (uint256 i = 0; i < _batchOfAddresses.length; i++) {\n', '            deliverPresaleFuelBalance(_batchOfAddresses[i], _amountOfFuel[i]);            \n', '        }\n', '        return true;\n', '    }\n', '\n', '    // All presale purchases will be delivered. If one address has contributed more than once,\n', '    // his contribution will be aggregated\n', '    function deliverPresaleFuelBalance(address _accountHolder, uint _amountOfBoughtFuel) internal onlyOwner {\n', '        require(presaleAmountRemaining > 0);\n', '        addToBalance(_accountHolder, _amountOfBoughtFuel);\n', '        Transfer(0x0, _accountHolder, _amountOfBoughtFuel);\n', '        presaleAmountRemaining = presaleAmountRemaining.sub(_amountOfBoughtFuel);    \n', '    }\n', '\n', '    // Add to balance\n', '    function addToBalance(address _address, uint _amount) internal {\n', '    \tbalances[_address] = balances[_address].add(_amount);\n', '    }\n', '\n', '    // Remove from balance\n', '    function decrementBalance(address _address, uint _amount) internal {\n', '    \tbalances[_address] = balances[_address].sub(_amount);\n', '    }\n', '}']
