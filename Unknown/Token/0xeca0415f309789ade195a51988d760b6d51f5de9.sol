['pragma solidity ^0.4.11;\n', '\n', '//----------------------------------------------------------------------------------------------\n', '// GreenMed token contract\n', '// The MIT Licence.\n', '//----------------------------------------------------------------------------------------------\n', '   \n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/issues/20\n', ' contract ERC20Interface {\n', '     // Get the total token supply\n', '     function totalSupply() constant returns (uint256 totalSupply);\n', ' \n', '     // Get the account balance of another account with address _owner\n', '     function balanceOf(address _owner) constant returns (uint256 balance);\n', '  \n', '     // Send _value amount of tokens to address _to\n', '     function transfer(address _to, uint256 _value) returns (bool success);\n', '  \n', '     // Send _value amount of tokens from address _from to address _to\n', '     function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '  \n', '     // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '     // If this function is called again it overwrites the current allowance with _value.\n', '     // this function is required for some DEX functionality\n', '     function approve(address _spender, uint256 _value) returns (bool success);\n', '  \n', '     // Returns the amount which _spender is still allowed to withdraw from _owner\n', '     function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '  \n', '     // Triggered when tokens are transferred.\n', '     event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  \n', '     // Triggered whenever approve(address _spender, uint256 _value) is called.\n', '     event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', ' }\n', '\n', ' contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\n', '  \n', ' contract GreenMed is ERC20Interface {\n', '     string public constant symbol = "GRMD";\n', '     string public constant name = "GreenMed";\n', '     uint8 public constant decimals = 18;\n', '     uint256 _totalSupply = 100000000000000000000000000;\n', '     \n', '     // Owner of this contract\n', '     address public owner;\n', '\n', '    uint256 public sellPrice;\n', '    uint256 public buyPrice;\n', '\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event FrozenFunds(address target, bool frozen);\n', '  \n', '     // Balances for each account\n', '     mapping(address => uint256) balances;\n', '  \n', '     // Owner of account approves the transfer of an amount to another account\n', '     mapping(address => mapping (address => uint256)) allowed;\n', '  \n', '     // Functions with this modifier can only be executed by the owner\n', '     modifier onlyOwner() {\n', '         if (msg.sender != owner) {\n', '             throw;\n', '         }\n', '         _;\n', '     }\n', '  \n', '     // Constructor\n', '     function GreenMed() {\n', '         owner = msg.sender;\n', '         balances[owner] = _totalSupply;\n', '     }\n', '  \n', '     function totalSupply() constant returns (uint256 totalSupply) {\n', '         totalSupply = _totalSupply;\n', '     }\n', '  \n', '     // What is the balance of a particular account?\n', '     function balanceOf(address _owner) constant returns (uint256 balance) {\n', '         return balances[_owner];\n', '     }\n', '  \n', '     // Transfer the balance from owner&#39;s account to another account\n', '     function transfer(address _to, uint256 _amount) returns (bool success) {\n', '         if (balances[msg.sender] >= _amount \n', '             && _amount > 0\n', '             && balances[_to] + _amount > balances[_to]) {\n', '             balances[msg.sender] -= _amount;\n', '             balances[_to] += _amount;\n', '             Transfer(msg.sender, _to, _amount);\n', '             return true;\n', '         } else {\n', '             return false;\n', '         }\n', '     }\n', '  \n', '     // Send _value amount of tokens from address _from to address _to\n', '     // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n', '     // tokens on your behalf, for example to "deposit" to a contract address and/or to charge\n', '     // fees in sub-currencies; the command should fail unless the _from account has\n', '     // deliberately authorized the sender of the message via some mechanism; we propose\n', '     // these standardized APIs for approval:\n', '     function transferFrom(\n', '         address _from,\n', '         address _to,\n', '         uint256 _amount\n', '     ) returns (bool success) {\n', '         if (balances[_from] >= _amount\n', '             && allowed[_from][msg.sender] >= _amount\n', '             && _amount > 0\n', '             && balances[_to] + _amount > balances[_to]) {\n', '             balances[_from] -= _amount;\n', '             allowed[_from][msg.sender] -= _amount;\n', '             balances[_to] += _amount;\n', '             Transfer(_from, _to, _amount);\n', '             return true;\n', '         } else {\n', '             return false;\n', '         }\n', '     }\n', '  \n', '     // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '     // If this function is called again it overwrites the current allowance with _value.\n', '     function approve(address _spender, uint256 _amount) returns (bool success) {\n', '         allowed[msg.sender][_spender] = _amount;\n', '         Approval(msg.sender, _spender, _amount);\n', '         return true;\n', '     }\n', '\n', '     /* Approve and then communicate the approved contract in a single tx */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        returns (bool success) {    \n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '  \n', '     function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '         return allowed[_owner][_spender];\n', '     }\n', '     function freezeAccount(address target, bool freeze) onlyOwner {\n', '        frozenAccount[target] = freeze;\n', '        FrozenFunds(target, freeze);\n', '    }\n', '\n', '    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {\n', '        sellPrice = newSellPrice;\n', '        buyPrice = newBuyPrice;\n', '    }\n', '\n', '    function buy() payable {\n', '        uint amount = msg.value / buyPrice;                // calculates the amount\n', '        if (balances[this] < amount) throw;               // checks if it has enough to sell\n', '        balances[msg.sender] += amount;                   // adds the amount to buyer&#39;s balance\n', '        balances[this] -= amount;                         // subtracts amount from seller&#39;s balance\n', '        Transfer(this, msg.sender, amount);                // execute an event reflecting the change\n', '    }\n', '\n', '    function sell(uint256 amount) {\n', '        if (balances[msg.sender] < amount ) throw;        // checks if the sender has enough to sell\n', '        balances[this] += amount;                         // adds the amount to owner&#39;s balance\n', '        balances[msg.sender] -= amount;                   // subtracts the amount from seller&#39;s balance\n', '        if (!msg.sender.send(amount * sellPrice)) {        // sends ether to the seller. It&#39;s important\n', '            throw;                                         // to do this last to avoid recursion attacks\n', '        } else {\n', '            Transfer(msg.sender, this, amount);            // executes an event reflecting on the change\n', '        }               \n', '    }\n', ' }']
['pragma solidity ^0.4.11;\n', '\n', '//----------------------------------------------------------------------------------------------\n', '// GreenMed token contract\n', '// The MIT Licence.\n', '//----------------------------------------------------------------------------------------------\n', '   \n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/issues/20\n', ' contract ERC20Interface {\n', '     // Get the total token supply\n', '     function totalSupply() constant returns (uint256 totalSupply);\n', ' \n', '     // Get the account balance of another account with address _owner\n', '     function balanceOf(address _owner) constant returns (uint256 balance);\n', '  \n', '     // Send _value amount of tokens to address _to\n', '     function transfer(address _to, uint256 _value) returns (bool success);\n', '  \n', '     // Send _value amount of tokens from address _from to address _to\n', '     function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '  \n', '     // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '     // If this function is called again it overwrites the current allowance with _value.\n', '     // this function is required for some DEX functionality\n', '     function approve(address _spender, uint256 _value) returns (bool success);\n', '  \n', '     // Returns the amount which _spender is still allowed to withdraw from _owner\n', '     function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '  \n', '     // Triggered when tokens are transferred.\n', '     event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  \n', '     // Triggered whenever approve(address _spender, uint256 _value) is called.\n', '     event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', ' }\n', '\n', ' contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\n', '  \n', ' contract GreenMed is ERC20Interface {\n', '     string public constant symbol = "GRMD";\n', '     string public constant name = "GreenMed";\n', '     uint8 public constant decimals = 18;\n', '     uint256 _totalSupply = 100000000000000000000000000;\n', '     \n', '     // Owner of this contract\n', '     address public owner;\n', '\n', '    uint256 public sellPrice;\n', '    uint256 public buyPrice;\n', '\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event FrozenFunds(address target, bool frozen);\n', '  \n', '     // Balances for each account\n', '     mapping(address => uint256) balances;\n', '  \n', '     // Owner of account approves the transfer of an amount to another account\n', '     mapping(address => mapping (address => uint256)) allowed;\n', '  \n', '     // Functions with this modifier can only be executed by the owner\n', '     modifier onlyOwner() {\n', '         if (msg.sender != owner) {\n', '             throw;\n', '         }\n', '         _;\n', '     }\n', '  \n', '     // Constructor\n', '     function GreenMed() {\n', '         owner = msg.sender;\n', '         balances[owner] = _totalSupply;\n', '     }\n', '  \n', '     function totalSupply() constant returns (uint256 totalSupply) {\n', '         totalSupply = _totalSupply;\n', '     }\n', '  \n', '     // What is the balance of a particular account?\n', '     function balanceOf(address _owner) constant returns (uint256 balance) {\n', '         return balances[_owner];\n', '     }\n', '  \n', "     // Transfer the balance from owner's account to another account\n", '     function transfer(address _to, uint256 _amount) returns (bool success) {\n', '         if (balances[msg.sender] >= _amount \n', '             && _amount > 0\n', '             && balances[_to] + _amount > balances[_to]) {\n', '             balances[msg.sender] -= _amount;\n', '             balances[_to] += _amount;\n', '             Transfer(msg.sender, _to, _amount);\n', '             return true;\n', '         } else {\n', '             return false;\n', '         }\n', '     }\n', '  \n', '     // Send _value amount of tokens from address _from to address _to\n', '     // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n', '     // tokens on your behalf, for example to "deposit" to a contract address and/or to charge\n', '     // fees in sub-currencies; the command should fail unless the _from account has\n', '     // deliberately authorized the sender of the message via some mechanism; we propose\n', '     // these standardized APIs for approval:\n', '     function transferFrom(\n', '         address _from,\n', '         address _to,\n', '         uint256 _amount\n', '     ) returns (bool success) {\n', '         if (balances[_from] >= _amount\n', '             && allowed[_from][msg.sender] >= _amount\n', '             && _amount > 0\n', '             && balances[_to] + _amount > balances[_to]) {\n', '             balances[_from] -= _amount;\n', '             allowed[_from][msg.sender] -= _amount;\n', '             balances[_to] += _amount;\n', '             Transfer(_from, _to, _amount);\n', '             return true;\n', '         } else {\n', '             return false;\n', '         }\n', '     }\n', '  \n', '     // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '     // If this function is called again it overwrites the current allowance with _value.\n', '     function approve(address _spender, uint256 _amount) returns (bool success) {\n', '         allowed[msg.sender][_spender] = _amount;\n', '         Approval(msg.sender, _spender, _amount);\n', '         return true;\n', '     }\n', '\n', '     /* Approve and then communicate the approved contract in a single tx */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        returns (bool success) {    \n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '  \n', '     function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '         return allowed[_owner][_spender];\n', '     }\n', '     function freezeAccount(address target, bool freeze) onlyOwner {\n', '        frozenAccount[target] = freeze;\n', '        FrozenFunds(target, freeze);\n', '    }\n', '\n', '    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {\n', '        sellPrice = newSellPrice;\n', '        buyPrice = newBuyPrice;\n', '    }\n', '\n', '    function buy() payable {\n', '        uint amount = msg.value / buyPrice;                // calculates the amount\n', '        if (balances[this] < amount) throw;               // checks if it has enough to sell\n', "        balances[msg.sender] += amount;                   // adds the amount to buyer's balance\n", "        balances[this] -= amount;                         // subtracts amount from seller's balance\n", '        Transfer(this, msg.sender, amount);                // execute an event reflecting the change\n', '    }\n', '\n', '    function sell(uint256 amount) {\n', '        if (balances[msg.sender] < amount ) throw;        // checks if the sender has enough to sell\n', "        balances[this] += amount;                         // adds the amount to owner's balance\n", "        balances[msg.sender] -= amount;                   // subtracts the amount from seller's balance\n", "        if (!msg.sender.send(amount * sellPrice)) {        // sends ether to the seller. It's important\n", '            throw;                                         // to do this last to avoid recursion attacks\n', '        } else {\n', '            Transfer(msg.sender, this, amount);            // executes an event reflecting on the change\n', '        }               \n', '    }\n', ' }']
