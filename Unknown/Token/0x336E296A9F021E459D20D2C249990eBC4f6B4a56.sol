['pragma solidity ^0.4.11;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract OwOWorldToken {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    string public constant symbol = "OWO";\n', '    string public constant name = "OwO.World Token";\n', '    uint public constant decimals = 18;\n', '\n', '    uint public _owoAmount;\n', '    uint public _totalSupply = 0;\n', '\n', '    uint public _oneTokenInWei = 108931000000000; // starts at $0.02\n', '    bool public _CROWDSALE_PAUSED = false;\n', '\n', '    address public _ownerWallet;   // owner wallet\n', '    address public _multiSigWallet;  // The address to hold the funds donated\n', '    uint public _totalEthCollected = 0;            // In wei\n', '    bool public _saleFinalized = false;         // Has OwO Dev finalized the sale?\n', '\n', '    uint constant public dust = 1 finney;    // Minimum investment\n', '    uint public _cap = 50000 ether;       // Hard cap to protect the ETH network from a really high raise\n', '    uint public _capOwO = 100000000 * 10 ** decimals;   // total supply of owo for the crowdsale\n', '\n', '    uint public MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE = 25;\n', '\n', '    /* How many distinct addresses have invested */\n', '    uint public _investorCount = 0;\n', '\n', '    /* the UNIX timestamp end date of the crowdsale */\n', '    uint public _endsAt;\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    // Crowdsale end time has been changed\n', '    event EndsAtChanged(uint endsAt);\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '    mapping (address => uint256) public investedAmountOf;\n', '    mapping (address => uint256) public tokenAmountOf;\n', '\n', '\n', '    function () payable{\n', '        createTokens();\n', '    }\n', '\n', '    function OwOWorldToken()\n', '    {\n', '\n', '        _ownerWallet = msg.sender;\n', '\n', '        uint tokenAmount = 500000 * 10 ** decimals;\n', '        balances[_ownerWallet] = balances[_ownerWallet].add(tokenAmount);\n', '        _totalSupply = _totalSupply.add(tokenAmount);\n', '        _multiSigWallet = 0x6c5140f605a9Add003B3626Aae4f08F41E6c6FfF;\n', '        _endsAt = 1514332800;\n', '\n', '    }\n', '\n', '    modifier onlyOwner(){\n', '        require(msg.sender == _ownerWallet);\n', '        _;\n', '    }\n', '\n', '    function setOneTokenInWei(uint w) onlyOwner {\n', '        _oneTokenInWei = w;\n', '        changed(msg.sender);\n', '    }\n', '\n', '    function setMultiSigWallet(address w) onlyOwner {\n', '        require(w != 0\n', '          && _investorCount < MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE\n', '          );\n', '\n', '          _multiSigWallet = w;\n', '\n', '        changed(msg.sender);\n', '    }\n', '\n', '    function setEndsAt(uint time) onlyOwner {\n', '\n', '      require(now < time);\n', '\n', '      _endsAt = time;\n', '      EndsAtChanged(_endsAt);\n', '    }\n', '\n', '    function setPause(bool w) onlyOwner{\n', '        _CROWDSALE_PAUSED = w;\n', '        changed(msg.sender);\n', '    }\n', '\n', '   function setFinalized(bool w) onlyOwner{\n', '        _saleFinalized = w;\n', '        changed(msg.sender);\n', '        if(_saleFinalized == true){\n', '            withdraw();\n', '        }\n', '    }\n', '\n', '    function getMultiSigWallet() constant returns (address){\n', '\n', '        return _multiSigWallet;\n', '\n', '    }\n', '    function getMultiSigBalance() constant returns (uint){\n', '\n', '        return balances[_multiSigWallet];\n', '\n', '    }\n', '    function getTotalSupply() constant returns (uint){\n', '\n', '        return _totalSupply;\n', '\n', '    }\n', '\n', '\n', '    function getTotalEth() constant returns (uint){\n', '\n', '        return _totalEthCollected;\n', '\n', '    }\n', '\n', '    function getTotalPlayers() constant returns (uint){\n', '\n', '        return _investorCount;\n', '\n', '    }\n', '    function createTokens() payable{\n', '\n', '        require(\n', '            msg.value > 0\n', '            && _totalSupply < _capOwO\n', '            && _CROWDSALE_PAUSED ==false\n', '            && _saleFinalized == false\n', '            && now < _endsAt\n', '            );\n', '\n', '               //priced at $0.03\n', '            if(_totalSupply >500001 && _totalSupply<1000000 && _oneTokenInWei<135714800000000){\n', '                _oneTokenInWei = 135714800000000;\n', '            }\n', '            //priced at $0.04\n', '            if(_totalSupply >1000001 && _totalSupply<2000000 && _oneTokenInWei<180953100000000){\n', '                _oneTokenInWei = 180953100000000;\n', '            }\n', '            //priced at $0.05\n', '            if(_totalSupply>2000001 && _totalSupply<4000000 && _oneTokenInWei<226191400000000){\n', '                _oneTokenInWei = 226191400000000;\n', '            }\n', '            //priced at $0.06\n', '            if(_totalSupply>4000001 && _totalSupply<6000000 && _oneTokenInWei<271429700000000){\n', '              _oneTokenInWei = 271429700000000;\n', '            }\n', '            //priced at $0.07\n', '            if(_totalSupply>6000001 && _totalSupply<8000000 && _oneTokenInWei<316667900000000){\n', '              _oneTokenInWei = 316667900000000;\n', '            }\n', '            //priced at $0.08\n', '            if(_totalSupply>8000001 && _totalSupply<10000001 && _oneTokenInWei<361906200000000){\n', '              _oneTokenInWei = 361906200000000;\n', '            }\n', '\n', '\n', '            if(investedAmountOf[msg.sender] == 0) {\n', '                   // A new investor\n', '                   _investorCount = _investorCount.add(1);\n', '            }\n', '\n', '            _owoAmount = msg.value.div(_oneTokenInWei);\n', '\n', '            balances[msg.sender] = balances[msg.sender].add(_owoAmount);\n', '            _totalSupply = _totalSupply.add(_owoAmount);\n', '            _totalEthCollected = _totalEthCollected.add(msg.value);\n', '            investedAmountOf[msg.sender] = investedAmountOf[msg.sender].add(msg.value);\n', '\n', '            transfer(_ownerWallet,msg.value);\n', '\n', '\n', '\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns(uint256 balance){\n', '\n', '        return balances[_owner];\n', '\n', '    }\n', '\n', '    event changed(address a);\n', '\n', '    function transfer(address _to, uint256 _value) returns(bool success){\n', '        require(\n', '            balances[msg.sender] >= _value\n', '            && _value > 0\n', '            );\n', '            balances[msg.sender].sub(_value);\n', '            balances[_to].add(_value);\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) onlyOwner returns (bool success){\n', '        require(\n', '            allowed[_from][msg.sender] >= _value\n', '            && balances[_from] >= _value\n', '            && _value >0\n', '\n', '            );\n', '\n', '            balances[_from].sub(_value);\n', '            balances[_to].add(_value);\n', '            allowed[_from][msg.sender].sub(_value);\n', '            Transfer(_from,_to,_value);\n', '            return true;\n', '    }\n', '\n', '    function getBlockNumber() constant internal returns (uint) {\n', '        return block.number;\n', '    }\n', '\n', '    function withdraw() onlyOwner payable{\n', '\n', '         assert(_multiSigWallet.send(this.balance));\n', '\n', '     }\n', '\n', '\n', '}']