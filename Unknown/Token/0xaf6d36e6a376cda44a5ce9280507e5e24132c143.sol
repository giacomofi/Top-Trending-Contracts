['contract owned {\n', '    address public owner;\n', '\n', '    function owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        if (msg.sender != owner) throw;       \n', '    }\n', '\n', '    function transferOwnership(address newOwner)  {\n', '\t\tif(msg.sender!=owner) throw;\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\n', '\n', 'contract GSIToken is owned  {\n', '    \n', '\t/* Public variables of the token */\n', "    string public standard = 'Token 0.1';\n", '    string public name;\n', '    string public symbol;\n', '    uint8 public decimalUnits;\n', '    uint256 public totalSupply;\n', '\tGSIToken public exchangeToken;\n', '\t\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event FrozenFunds(address target, bool frozen);\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function GSIToken(\n', '        uint256 initialSupply,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol,\n', '        address centralMinter\n', '    )  {\n', '        if(centralMinter != 0 ) owner = centralMinter;      // Sets the owner as specified (if centralMinter is not specified the owner is msg.sender)\n', '        balanceOf[owner] = initialSupply;                   // Give the owner all initial tokens\n', '\t\ttotalSupply=initialSupply;\n', '\t\tname=_tokenName;\n', '\t\tdecimalUnits=_decimalUnits;\n', '\t\tsymbol=_tokenSymbol;\n', '    }\n', '\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) {\n', '        if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\n', '        if (frozenAccount[msg.sender]) throw;                // Check if frozen\n', '        balanceOf[msg.sender] -= _value;                     // Subtract from the sender\n', '        balanceOf[_to] += _value;                            // Add the same to the recipient\n', '        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n', '    }\n', '\n', '\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (frozenAccount[_from]) throw;                        // Check if frozen            \n', '        if (balanceOf[_from] < _value) throw;                 // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows\n', '        if (_value > allowance[_from][msg.sender]) throw;   // Check allowance\n', '        balanceOf[_from] -= _value;                          // Subtract from the sender\n', '        balanceOf[_to] += _value;                            // Add the same to the recipient\n', '        allowance[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function mintToken(address target, uint256 mintedAmount) {\n', '\t    if(msg.sender!=owner) throw;\n', '        balanceOf[target] += mintedAmount;\n', '        totalSupply += mintedAmount;\n', '        Transfer(0, owner, mintedAmount);\n', '        Transfer(owner, target, mintedAmount);\n', '    }\n', '\n', '    function freezeAccount(address target, bool freeze) {\n', '\t\tif(msg.sender!=owner) throw;\n', '        frozenAccount[target] = freeze;\n', '        FrozenFunds(target, freeze);\n', '    }\n', '\n', '\tfunction setExchangeToken(GSIToken _exchangeToken) {\n', '\t\tif(msg.sender!=owner) throw;\n', '\t\texchangeToken=_exchangeToken;\n', '\t}\n', '\t    \n', '\tfunction demintTokens(address target,uint8 amount)  {\n', '\t\tif(msg.sender!=owner) throw;\n', '\t\tif(balanceOf[target]<amount) throw;\n', '\t\tbalanceOf[msg.sender]+=amount;\n', '\t\tbalanceOf[target]-=amount;\n', '\t\tTransfer(target,owner,amount);\n', '\t}\n', '\t\n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '\n', '    /* Allow another contract to spend some tokens in your behalf */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '        return true;\n', '    }\n', '\t\n', '    /* This unnamed function is called whenever someone tries to send ether to it */\n', '    function () {\n', '        throw;     // Prevents accidental sending of ether\n', '    }\n', '}\n', '\n', 'contract GSI is owned {\n', '\t\tevent OracleRequest(address target);\n', '\t\tevent MintedGreen(address target,uint256 amount);\n', '\t\tevent MintedGrey(address target,uint256 amount);\n', '\t\t\n', '\t\tGSIToken public greenToken;\n', '\t\tGSIToken public greyToken;\n', '\t\tuint256 public requiredGas;\n', '\t\tuint256 public secondsBetweenReadings;\n', '\t\tuint8 public pricegreengrey;\n', '\t\t\n', '\t\tmapping(address=>Reading) public lastReading;\n', '\t\tmapping(address=>Reading) public requestReading;\n', '\t\tmapping(address=>uint8) public freeReadings;\n', '\t\tmapping(address=>string) public plz;\n', '\t\tmapping(address=>uint8) public oracles;\n', '\t\t\n', '\t\tstruct Reading {\n', '\t\t\tuint256 timestamp;\n', '\t\t\tuint256 value;\n', '\t\t\tstring zip;\n', '\t\t}\n', '\t\t\n', '\t\tfunction GSI() {\n', '\t\t\tgreenToken = new GSIToken(\n', '\t\t\t\t\t\t\t0,\n', "\t\t\t\t\t\t\t'GreenPower',\n", '\t\t\t\t\t\t\t0,\n', "\t\t\t\t\t\t\t'P+',\n", '\t\t\t\t\t\t\tthis\n', '\t\t\t);\t\t\t\n', '\t\t\tgreyToken = new GSIToken(\n', '\t\t\t\t\t\t\t0,\n', "\t\t\t\t\t\t\t'GreyPower',\n", '\t\t\t\t\t\t\t0,\n', "\t\t\t\t\t\t\t'P-',\n", '\t\t\t\t\t\t\tthis\n', '\t\t\t);\t\t\n', '\t\t\tgreenToken.setExchangeToken(greyToken);\n', '\t\t\tgreyToken.setExchangeToken(greenToken);\n', '\t\t\toracles[msg.sender]=1;\n', '\t\t}\n', '\t\t\n', '\t\tfunction oracalizeReading(uint256 _reading) {\n', '\t\t\tif(msg.value<requiredGas) {  \n', '\t\t\t\tif(freeReadings[msg.sender]==0) throw;\n', '\t\t\t\tfreeReadings[msg.sender]--;\n', '\t\t\t} \t\t\n', '\t\t\tif(_reading<lastReading[msg.sender].value) throw;\n', '\t\t\tif(_reading<requestReading[msg.sender].value) throw;\n', '\t\t\tif(now<lastReading[msg.sender].timestamp+secondsBetweenReadings) throw;\t\t\t\n', '\t\t\t//lastReading[msg.sender]=requestReading[msg.sender];\n', '\t\t\trequestReading[msg.sender]=Reading(now,_reading,plz[msg.sender]);\n', '\t\t\tOracleRequest(msg.sender);\n', '\t\t\towner.send(msg.value);\n', '\t\t}\t\n', '\t\t\n', '\t\tfunction addOracle(address oracle) {\n', '\t\t\tif(msg.sender!=owner) throw;\n', '\t\t\toracles[oracle]=1;\n', '\t\t\t\n', '\t\t}\n', '\t\tfunction setPlz(string _plz) {\n', '\t\t\tplz[msg.sender]=_plz;\n', '\t\t}\n', '\t\tfunction setReadingDelay(uint256 delay) {\n', '\t\t\tif(msg.sender!=owner) throw;\n', '\t\t\tsecondsBetweenReadings=delay;\n', '\t\t}\n', '\t\t\n', '\t\tfunction assignFreeReadings(address _receiver,uint8 _count)  {\n', '\t\t\tif(oracles[msg.sender]!=1) throw;\n', '\t\t\tfreeReadings[_receiver]+=_count;\n', '\t\t}\t\n', '\t\t\n', '\t\tfunction mintGreen(address recipient,uint256 tokens) {\n', '\t\t\tif(oracles[msg.sender]!=1) throw;\n', '\t\t\tgreenToken.mintToken(recipient, tokens);\t\n', '\t\t\tMintedGreen(recipient,tokens);\n', '\t\t}\n', '\t\t\n', '\t\tfunction mintGrey(address recipient,uint256 tokens) {\n', '\t\t\tif(oracles[msg.sender]!=1) throw;\t\n', '\t\t\tgreyToken.mintToken(recipient, tokens);\t\t\n', '\t\t\tMintedGrey(recipient,tokens);\n', '\t\t}\n', '\t\t\n', '\t\tfunction commitReading(address recipient) {\n', '\t\t  if(oracles[msg.sender]!=1) throw;\n', '\t\t  lastReading[recipient]=requestReading[recipient];\n', '\t\t  if(this.balance>10*requiredGas) {\n', '\t\t\towner.send(this.balance);\n', '\t\t  }\n', '\t\t  //owner.send(this.balance);\n', '\t\t}\n', '\t\t\n', '\t\tfunction setGreenToken(GSIToken _greenToken) {\n', '\t\t\tif(msg.sender!=owner) throw;\n', '\t\t\tgreenToken=_greenToken;\t\t\t\n', '\t\t} \n', '\t\t\n', '\t\tfunction setGreyToken(GSIToken _greyToken) {\n', '\t\t\tif(msg.sender!=owner) throw;\n', '\t\t\tgreyToken=_greyToken;\t\t\t\n', '\t\t} \n', '\t\t\n', '\t\tfunction setOracleGas(uint256 _requiredGas)  {\n', '\t\t\tif(msg.sender!=owner) throw;\n', '\t\t\trequiredGas=_requiredGas;\n', '\t\t}\n', '\n', '\t\tfunction setGreyGreenPrice(uint8 price) {\n', '\t\t\tif(msg.sender!=owner) throw;\n', '\t\t\tpricegreengrey=price;\n', '\t\t}\n', '\t\t\n', '\t\tfunction convertGreyGreen(uint8 price,uint8 amount) {\n', '\t\t\tif(price<pricegreengrey) throw;\n', '\t\t\tif(greenToken.balanceOf(msg.sender)<amount*price) throw;\n', '\t\t\tif(greyToken.balanceOf(msg.sender)<amount) throw;\n', '\t\t\tgreyToken.demintTokens(msg.sender,amount);\n', '\t\t}\n', '\t\tfunction() {\n', '\t\t\tif(msg.value>0) {\n', '\t\t\t\towner.send(this.balance);\n', '\t\t\t}\n', '\t\t}\n', '}']