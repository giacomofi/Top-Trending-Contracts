['pragma solidity ^0.4.11;\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        if (msg.sender != owner) throw;\n', '        _;\n', '    }\n', '\n', '}\n', '\n', 'contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\n', '\n', 'contract ERC20 {\n', '    /* Public variables of the token */\n', '    string public standard = &#39;RIALTO 1.0&#39;;\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public supply;\n', '\n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function ERC20(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        uint8 decimalUnits,\n', '        string tokenSymbol\n', '        ) {\n', '        balances[msg.sender] = initialSupply;              // Give the creator all initial tokens\n', '        supply = initialSupply;                        // Update total supply\n', '        name = tokenName;                                   // Set the name for display purposes\n', '        symbol = tokenSymbol;                               // Set the symbol for display purposes\n', '        decimals = decimalUnits;                            // Amount of decimals for display purposes\n', '    }\n', '\n', '\n', '    function totalSupply() constant returns (uint totalSupply);\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', ' /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '\n', '    /* Get the amount of remaining tokens to spend */\n', '        function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '                return allowance[_owner][_spender];\n', '        }\n', '\n', '    /* Allow another contract to spend some tokens in your behalf */\n', '    function approve(address _spender, uint256 _value)\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    /* Approve and then communicate the approved contract in a single tx */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }   \n', '    }   \n', '    \n', '       /* This unnamed function is called whenever someone tries to send ether to it */\n', '    function () {\n', '        throw;     // Prevents accidental sending of ether\n', '    }   \n', '}   \n', 'contract Rialto is owned, ERC20 {\n', '\n', '    uint256 public lockPercentage = 15;\n', '\n', '    uint256 public expiration = block.timestamp + 180 days;\n', '\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function Rialto(\n', '        uint256 initialSupply, // 100000000000000000\n', '        string tokenName, //RIALTO\n', '        uint8 decimalUnits, //9\n', '        string tokenSymbol // XRL\n', '    ) ERC20 (initialSupply, tokenName, decimalUnits, tokenSymbol) {}\n', '\n', '        /* Get balance of specific address */\n', '        function balanceOf(address _owner) constant returns (uint256 balance) {\n', '                return balances[_owner];\n', '        }\n', '\n', '        /* Get total supply of issued coins */\n', '        function totalSupply() constant returns (uint256 totalSupply) {\n', '                return supply;\n', '        }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        if(!transfer(newOwner, balances[msg.sender])) throw;\n', '        owner = newOwner;\n', '    }\n', '\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) returns (bool success){\n', '\n', '\n', '        if (balances[msg.sender] < _value) throw;           // Check if the sender has enough\n', '\n', '        if (balances[_to] + _value < balances[_to]) throw; // Check for overflows\n', '\n', '        if (msg.sender == owner && block.timestamp < expiration && (balances[msg.sender]-_value) < lockPercentage * supply / 100 ) throw;  // Locked funds\n', '\n', '        balances[msg.sender] -= _value;                     // Subtract from the sender\n', '        balances[_to] += _value;                            // Add the same to the recipient\n', '        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n', '        return true;\n', '    }\n', '\n', '\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '\n', '\n', '        if (balances[_from] < _value) throw;                 // Check if the sender has enough\n', '        if (balances[_to] + _value < balances[_to]) throw;  // Check for overflows\n', '        if (_value > allowance[_from][msg.sender]) throw;   // Check allowance\n', '        if (_from == owner && block.timestamp < expiration && (balances[_from]-_value) < lockPercentage * supply / 100) throw; //Locked funds\n', '\n', '        balances[_from] -= _value;                          // Subtract from the sender\n', '        balances[_to] += _value;                            // Add the same to the recipient\n', '        allowance[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '\n', '  }']
['pragma solidity ^0.4.11;\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        if (msg.sender != owner) throw;\n', '        _;\n', '    }\n', '\n', '}\n', '\n', 'contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\n', '\n', 'contract ERC20 {\n', '    /* Public variables of the token */\n', "    string public standard = 'RIALTO 1.0';\n", '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public supply;\n', '\n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function ERC20(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        uint8 decimalUnits,\n', '        string tokenSymbol\n', '        ) {\n', '        balances[msg.sender] = initialSupply;              // Give the creator all initial tokens\n', '        supply = initialSupply;                        // Update total supply\n', '        name = tokenName;                                   // Set the name for display purposes\n', '        symbol = tokenSymbol;                               // Set the symbol for display purposes\n', '        decimals = decimalUnits;                            // Amount of decimals for display purposes\n', '    }\n', '\n', '\n', '    function totalSupply() constant returns (uint totalSupply);\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', ' /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '\n', '    /* Get the amount of remaining tokens to spend */\n', '        function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '                return allowance[_owner][_spender];\n', '        }\n', '\n', '    /* Allow another contract to spend some tokens in your behalf */\n', '    function approve(address _spender, uint256 _value)\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    /* Approve and then communicate the approved contract in a single tx */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }   \n', '    }   \n', '    \n', '       /* This unnamed function is called whenever someone tries to send ether to it */\n', '    function () {\n', '        throw;     // Prevents accidental sending of ether\n', '    }   \n', '}   \n', 'contract Rialto is owned, ERC20 {\n', '\n', '    uint256 public lockPercentage = 15;\n', '\n', '    uint256 public expiration = block.timestamp + 180 days;\n', '\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function Rialto(\n', '        uint256 initialSupply, // 100000000000000000\n', '        string tokenName, //RIALTO\n', '        uint8 decimalUnits, //9\n', '        string tokenSymbol // XRL\n', '    ) ERC20 (initialSupply, tokenName, decimalUnits, tokenSymbol) {}\n', '\n', '        /* Get balance of specific address */\n', '        function balanceOf(address _owner) constant returns (uint256 balance) {\n', '                return balances[_owner];\n', '        }\n', '\n', '        /* Get total supply of issued coins */\n', '        function totalSupply() constant returns (uint256 totalSupply) {\n', '                return supply;\n', '        }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        if(!transfer(newOwner, balances[msg.sender])) throw;\n', '        owner = newOwner;\n', '    }\n', '\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) returns (bool success){\n', '\n', '\n', '        if (balances[msg.sender] < _value) throw;           // Check if the sender has enough\n', '\n', '        if (balances[_to] + _value < balances[_to]) throw; // Check for overflows\n', '\n', '        if (msg.sender == owner && block.timestamp < expiration && (balances[msg.sender]-_value) < lockPercentage * supply / 100 ) throw;  // Locked funds\n', '\n', '        balances[msg.sender] -= _value;                     // Subtract from the sender\n', '        balances[_to] += _value;                            // Add the same to the recipient\n', '        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n', '        return true;\n', '    }\n', '\n', '\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '\n', '\n', '        if (balances[_from] < _value) throw;                 // Check if the sender has enough\n', '        if (balances[_to] + _value < balances[_to]) throw;  // Check for overflows\n', '        if (_value > allowance[_from][msg.sender]) throw;   // Check allowance\n', '        if (_from == owner && block.timestamp < expiration && (balances[_from]-_value) < lockPercentage * supply / 100) throw; //Locked funds\n', '\n', '        balances[_from] -= _value;                          // Subtract from the sender\n', '        balances[_to] += _value;                            // Add the same to the recipient\n', '        allowance[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '\n', '  }']
