['pragma solidity ^0.4.11;\n', '\n', 'contract MeetupToken {\n', '    \n', '    uint256 public totalSupply;\n', '    mapping (address => uint256) balances;\n', '    \n', '    string public name;               \n', '    uint8 public decimals;                \n', '    string public symbol;\n', '   \n', '    function MeetupToken(\n', '        uint256 _initialAmount,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol\n', '        ) {\n', '        balances[msg.sender] = _initialAmount;      \n', '        totalSupply = _initialAmount;                        \n', '        name = _tokenName;                                   \n', '        decimals = _decimalUnits;                            \n', '        symbol = _tokenSymbol;                               \n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        if (balances[msg.sender] >= _value) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '    \n', '    function () {\n', '        throw;\n', '    }\n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '}']
['pragma solidity ^0.4.11;\n', '\n', 'contract MeetupToken {\n', '    \n', '    uint256 public totalSupply;\n', '    mapping (address => uint256) balances;\n', '    \n', '    string public name;               \n', '    uint8 public decimals;                \n', '    string public symbol;\n', '   \n', '    function MeetupToken(\n', '        uint256 _initialAmount,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol\n', '        ) {\n', '        balances[msg.sender] = _initialAmount;      \n', '        totalSupply = _initialAmount;                        \n', '        name = _tokenName;                                   \n', '        decimals = _decimalUnits;                            \n', '        symbol = _tokenSymbol;                               \n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        if (balances[msg.sender] >= _value) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '    \n', '    function () {\n', '        throw;\n', '    }\n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '}']
