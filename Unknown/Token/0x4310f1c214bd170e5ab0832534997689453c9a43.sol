['/**\n', ' *  DickheadCash contract\n', ' */\n', '\n', 'pragma solidity 0.4.15;\n', '\n', '\n', 'contract ERC20TokenInterface {\n', '\n', '    /// @return The total amount of tokens\n', '    function totalSupply() constant returns (uint256 supply);\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant public returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '}\n', '\n', '\n', 'contract DickheadCash is ERC20TokenInterface {\n', '\n', '    string public constant name = "DickheadCash";\n', '    string public constant symbol = "DICK";\n', '    uint256 public constant decimals = 0;\n', '    uint256 public totalTokens = 1 * (10 ** decimals);\n', '    uint8 public constant MAX_TRANSFERS = 7;\n', '\n', '    mapping (address => bool) public received;\n', '    mapping (address => uint8) public transfers;\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '\n', '    function DickheadCash() {\n', '        balances[msg.sender] = totalTokens;\n', '        received[msg.sender] = true;\n', '    }\n', '\n', '    function totalSupply() constant returns (uint256) {\n', '        return totalTokens;\n', '    }\n', '\n', '    function transfersRemaining() returns (uint8) {\n', '        return MAX_TRANSFERS - transfers[msg.sender];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        if (_value > 1) return false;\n', '        if (transfers[msg.sender] >= MAX_TRANSFERS) return false;\n', '        if (received[_to]) return false;\n', '        if (received[msg.sender]) {\n', '            balances[_to] = _value;\n', '            transfers[msg.sender]++;\n', '            if (!received[_to]) received[_to] = true;\n', '            totalTokens += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        return false;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant public returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        return false;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\n', '        return 0;\n', '    }\n', '\n', '}']
['/**\n', ' *  DickheadCash contract\n', ' */\n', '\n', 'pragma solidity 0.4.15;\n', '\n', '\n', 'contract ERC20TokenInterface {\n', '\n', '    /// @return The total amount of tokens\n', '    function totalSupply() constant returns (uint256 supply);\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant public returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '}\n', '\n', '\n', 'contract DickheadCash is ERC20TokenInterface {\n', '\n', '    string public constant name = "DickheadCash";\n', '    string public constant symbol = "DICK";\n', '    uint256 public constant decimals = 0;\n', '    uint256 public totalTokens = 1 * (10 ** decimals);\n', '    uint8 public constant MAX_TRANSFERS = 7;\n', '\n', '    mapping (address => bool) public received;\n', '    mapping (address => uint8) public transfers;\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '\n', '    function DickheadCash() {\n', '        balances[msg.sender] = totalTokens;\n', '        received[msg.sender] = true;\n', '    }\n', '\n', '    function totalSupply() constant returns (uint256) {\n', '        return totalTokens;\n', '    }\n', '\n', '    function transfersRemaining() returns (uint8) {\n', '        return MAX_TRANSFERS - transfers[msg.sender];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        if (_value > 1) return false;\n', '        if (transfers[msg.sender] >= MAX_TRANSFERS) return false;\n', '        if (received[_to]) return false;\n', '        if (received[msg.sender]) {\n', '            balances[_to] = _value;\n', '            transfers[msg.sender]++;\n', '            if (!received[_to]) received[_to] = true;\n', '            totalTokens += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        return false;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant public returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        return false;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\n', '        return 0;\n', '    }\n', '\n', '}']
