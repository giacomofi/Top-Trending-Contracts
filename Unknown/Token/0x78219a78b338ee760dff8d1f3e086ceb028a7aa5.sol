['pragma solidity ^0.4.11;\n', '\n', 'contract SafeMath {\n', '    function safeMul(uint a, uint b) internal returns (uint) {\n', '        uint c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '    \n', '    function safeSub(uint a, uint b) internal returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    \n', '    function safeAdd(uint a, uint b) internal returns (uint) {\n', '        uint c = a + b;\n', '        assert(c>=a && c>=b);\n', '        return c;\n', '    }\n', '    \n', '    function assert(bool assertion) internal {\n', '        if (!assertion) throw;\n', '    }\n', '}\n', '\n', 'contract ExploreCoin is SafeMath {\n', '    string public symbol;\n', '    string public name;\n', '    uint public decimals;\n', '    \n', '    uint256 _rate;\n', '    uint256 public tokenSold;\n', '    uint oneMillion = 1000000;\n', '    \n', '    uint256 _totalSupply;\n', '    address owner;\n', '    bool preIco = true;\n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    \n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '    \n', '    /**\n', '    * @dev Fix for the ERC20 short address attack.\n', '    */\n', '    modifier onlyPayloadSize(uint size) {\n', '        require(msg.data.length >= size + 4) ;\n', '        _;\n', '    }\n', '    \n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        require(newOwner != 0x0);\n', '        owner = newOwner;\n', '    }\n', '\n', '    function currentOwner() onlyOwner returns (address){\n', '        return owner;\n', '    }\n', '\n', '    function endpreIco(bool status) onlyOwner {\n', '        if(status){\n', '            preIco = false;\n', '        }\n', '    }\n', ' \n', '    function tokenAvailable() constant returns (uint256 tokenAvailable) {        \n', '        return safeSub(_totalSupply, tokenSold);\n', '    }\n', ' \n', '    function totalSupply() constant returns (uint256 totalSupply) {        \n', '        return _totalSupply;\n', '    }\n', ' \n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '    \n', '    function ExploreCoin(\n', '        string tokenName,\n', '        string tokenSymbol,\n', '        uint decimalUnits,\n', '        uint256 totalSupply,\n', '        uint256 rate\n', '    ) {\n', '        _totalSupply = safeMul(totalSupply, safeMul(oneMillion, (10 ** decimalUnits) ));\n', '        _rate = rate;\n', '        name = tokenName;\n', '        symbol = tokenSymbol;\n', '        decimals = decimalUnits;\n', '        owner = msg.sender;\n', '        tokenSold = 0;\n', '    }\n', '    \n', '    function () payable {\n', '        if (!preIco) throw;\n', '        uint256 token_amount = safeMul(msg.value, _rate);\n', '        if(safeAdd(tokenSold, token_amount) > _totalSupply) throw;\n', '        \n', '        tokenSold = safeAdd(tokenSold, token_amount);\n', '        balances[msg.sender] = safeAdd(balances[msg.sender], token_amount);\n', '        owner.transfer(msg.value);\n', '        Transfer(msg.sender, msg.sender, token_amount);\n', '    }\n', ' \n', '    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) returns (bool success) {\n', '        if (balances[msg.sender] >= _amount\n', '            && _amount > 0\n', '            && safeAdd(balances[_to], _amount) > balances[_to]) {\n', '            balances[msg.sender] = safeSub(balances[msg.sender], _amount);\n', '            balances[_to] = safeAdd(balances[_to], _amount);\n', '            Transfer(msg.sender, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', ' \n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', '    ) onlyPayloadSize(2 * 32) returns (bool success) {\n', '        if (balances[_from] >= _amount\n', '        && allowed[_from][msg.sender] >= _amount\n', '        && _amount > 0\n', '        && safeAdd(balances[_to], _amount) > balances[_to]) {\n', '            balances[_from] = safeSub(balances[_from], _amount);\n', '            allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _amount);\n', '            balances[_to] = safeAdd(balances[_to], _amount);\n', '            Transfer(_from, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', ' \n', '    function approve(address _spender, uint256 _amount) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', ' \n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}']