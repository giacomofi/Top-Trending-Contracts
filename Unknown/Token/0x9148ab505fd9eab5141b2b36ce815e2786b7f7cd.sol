['pragma solidity ^0.4.13;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', 'contract KyberAirDrop is Ownable {\n', '  uint public numDrops;\n', '  uint public dropAmount;\n', '\n', '  function KyberAirDrop( address dropper ) {\n', '    transferOwnership(dropper);\n', '  }\n', '\n', '  event TokenDrop( address receiver, uint amount );\n', '  function airDrop( ERC20Interface token,\n', '                    address   tokenRepo,\n', '                    address[] recipients,\n', '                    uint amount,\n', '                    bool kgt,\n', '                    KyberGenesisToken kgtToken ) onlyOwner {\n', '    require( amount == 0 || amount == (2*(10**18)) || amount == (5*(10**18)) );\n', '\n', '    if( amount > 0 ) {\n', '      for( uint i = 0 ; i < recipients.length ; i++ ) {\n', '          assert( token.transferFrom( tokenRepo, recipients[i], amount ) );\n', '          TokenDrop( recipients[i], amount );\n', '      }\n', '    }\n', '\n', '    if( kgt ) {\n', '      kgtToken.mint(recipients);\n', '    }\n', '\n', '    numDrops += recipients.length;\n', '    dropAmount += recipients.length * amount;\n', '  }\n', '\n', '  function tranferMinterOwnership( KyberGenesisToken kgtToken, address newOwner ) onlyOwner {\n', '    kgtToken.transferOwnership(newOwner);\n', '  }\n', '\n', '  function emergencyERC20Drain( ERC20Interface token, uint amount ) {\n', '      // callable by anyone\n', '      address kyberMultisig = 0x3EB01B3391EA15CE752d01Cf3D3F09deC596F650;\n', '      token.transfer( kyberMultisig, amount );\n', '  }\n', '}\n', '\n', 'contract KyberGenesisToken is Ownable {\n', '  string  public  constant name     = "Kyber Genesis Token";\n', '  string  public  constant symbol   = "KGT";\n', '  uint    public  constant decimals = 0;\n', '\n', '  uint                   public totalSupply = 0;\n', '  mapping(address=>uint) public balanceOf;\n', '\n', '  function KyberGenesisToken( address minter ) {\n', '    transferOwnership(minter);\n', '  }\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint _value);\n', '  event EndMinting( uint timestamp );\n', '\n', '  function mint( address[] recipients ) onlyOwner {\n', '    uint newRecipients = 0;\n', '    for( uint i = 0 ; i < recipients.length ; i++ ){\n', '      address recipient = recipients[i];\n', '      if( balanceOf[recipient] == 0 ){\n', '        Transfer( address(0x0), recipient, 1 );\n', '        balanceOf[recipient] = 1;\n', '        newRecipients++;\n', '      }\n', '    }\n', '\n', '    totalSupply += newRecipients;\n', '  }\n', '\n', '  function endMinting() onlyOwner {\n', '    transferOwnership(address(0xdead));\n', '    EndMinting(block.timestamp);\n', '  }\n', '\n', '  function burn() {\n', '    require(balanceOf[msg.sender] == 1 );\n', '    Transfer( msg.sender, address(0x0), 1 );\n', '    balanceOf[msg.sender] = 0;\n', '    totalSupply--;\n', '  }\n', '\n', '  function emergencyERC20Drain( ERC20Interface token, uint amount ){\n', '      // callable by anyone\n', '      address kyberMultisig = 0x3EB01B3391EA15CE752d01Cf3D3F09deC596F650;\n', '      token.transfer( kyberMultisig, amount );\n', '  }\n', '\n', '\n', '  // ERC20 stubs\n', '  function transfer(address _to, uint _value) returns (bool){ revert(); }\n', '  function transferFrom(address _from, address _to, uint _value) returns (bool){ revert(); }\n', '  function approve(address _spender, uint _value) returns (bool){ revert(); }\n', '  function allowance(address _owner, address _spender) constant returns (uint){ return 0; }\n', '  event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', 'contract ERC20Interface {\n', '  function transferFrom(address _from, address _to, uint _value) returns (bool){}\n', '  function transfer(address _to, uint _value) returns (bool){}\n', '  function ERC20Interface(){}\n', '}']
['pragma solidity ^0.4.13;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', 'contract KyberAirDrop is Ownable {\n', '  uint public numDrops;\n', '  uint public dropAmount;\n', '\n', '  function KyberAirDrop( address dropper ) {\n', '    transferOwnership(dropper);\n', '  }\n', '\n', '  event TokenDrop( address receiver, uint amount );\n', '  function airDrop( ERC20Interface token,\n', '                    address   tokenRepo,\n', '                    address[] recipients,\n', '                    uint amount,\n', '                    bool kgt,\n', '                    KyberGenesisToken kgtToken ) onlyOwner {\n', '    require( amount == 0 || amount == (2*(10**18)) || amount == (5*(10**18)) );\n', '\n', '    if( amount > 0 ) {\n', '      for( uint i = 0 ; i < recipients.length ; i++ ) {\n', '          assert( token.transferFrom( tokenRepo, recipients[i], amount ) );\n', '          TokenDrop( recipients[i], amount );\n', '      }\n', '    }\n', '\n', '    if( kgt ) {\n', '      kgtToken.mint(recipients);\n', '    }\n', '\n', '    numDrops += recipients.length;\n', '    dropAmount += recipients.length * amount;\n', '  }\n', '\n', '  function tranferMinterOwnership( KyberGenesisToken kgtToken, address newOwner ) onlyOwner {\n', '    kgtToken.transferOwnership(newOwner);\n', '  }\n', '\n', '  function emergencyERC20Drain( ERC20Interface token, uint amount ) {\n', '      // callable by anyone\n', '      address kyberMultisig = 0x3EB01B3391EA15CE752d01Cf3D3F09deC596F650;\n', '      token.transfer( kyberMultisig, amount );\n', '  }\n', '}\n', '\n', 'contract KyberGenesisToken is Ownable {\n', '  string  public  constant name     = "Kyber Genesis Token";\n', '  string  public  constant symbol   = "KGT";\n', '  uint    public  constant decimals = 0;\n', '\n', '  uint                   public totalSupply = 0;\n', '  mapping(address=>uint) public balanceOf;\n', '\n', '  function KyberGenesisToken( address minter ) {\n', '    transferOwnership(minter);\n', '  }\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint _value);\n', '  event EndMinting( uint timestamp );\n', '\n', '  function mint( address[] recipients ) onlyOwner {\n', '    uint newRecipients = 0;\n', '    for( uint i = 0 ; i < recipients.length ; i++ ){\n', '      address recipient = recipients[i];\n', '      if( balanceOf[recipient] == 0 ){\n', '        Transfer( address(0x0), recipient, 1 );\n', '        balanceOf[recipient] = 1;\n', '        newRecipients++;\n', '      }\n', '    }\n', '\n', '    totalSupply += newRecipients;\n', '  }\n', '\n', '  function endMinting() onlyOwner {\n', '    transferOwnership(address(0xdead));\n', '    EndMinting(block.timestamp);\n', '  }\n', '\n', '  function burn() {\n', '    require(balanceOf[msg.sender] == 1 );\n', '    Transfer( msg.sender, address(0x0), 1 );\n', '    balanceOf[msg.sender] = 0;\n', '    totalSupply--;\n', '  }\n', '\n', '  function emergencyERC20Drain( ERC20Interface token, uint amount ){\n', '      // callable by anyone\n', '      address kyberMultisig = 0x3EB01B3391EA15CE752d01Cf3D3F09deC596F650;\n', '      token.transfer( kyberMultisig, amount );\n', '  }\n', '\n', '\n', '  // ERC20 stubs\n', '  function transfer(address _to, uint _value) returns (bool){ revert(); }\n', '  function transferFrom(address _from, address _to, uint _value) returns (bool){ revert(); }\n', '  function approve(address _spender, uint _value) returns (bool){ revert(); }\n', '  function allowance(address _owner, address _spender) constant returns (uint){ return 0; }\n', '  event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', 'contract ERC20Interface {\n', '  function transferFrom(address _from, address _to, uint _value) returns (bool){}\n', '  function transfer(address _to, uint _value) returns (bool){}\n', '  function ERC20Interface(){}\n', '}']
