['pragma solidity 0.4.13;\n', '\n', '\n', 'contract ERC20Abstract {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', 'contract ERC20Contract is ERC20Abstract {\n', '\n', '    mapping (address => uint256) public balances;\n', '\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', '\n', 'contract ForeignToken {\n', '    function balanceOf(address _owner) constant returns (uint256);\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool);\n', '}\n', '\n', 'contract NeymarTokenEvents {\n', '    event NeymarHasMintedEvent(uint256 _value);\n', '    event UserClaimedTokens(address _address, uint256 _tokens);\n', '}\n', '\n', 'contract NeymarToken is ERC20Contract, NeymarTokenEvents {\n', '  \n', '    address public owner = msg.sender;\n', '\n', '    string public name = "Neymar Token";\n', '\n', '    string public symbol = "NT";\n', '\n', '    uint256 public decimals = 18;\n', '\n', '    uint256 private ethDecimals = 18;\n', '\n', '    // Neymar specific variables\n', '    uint256[] public tokenMinted;\n', '\n', '    uint256[] private totalSupplies;\n', '\n', '    mapping (address => uint256) private positions;\n', '    //===========================\n', '\n', '    // ICO Variables\n', '    bool public purchasingAllowed = true;\n', '\n', '    uint256 public totalContribution = 0;\n', '\n', '    uint256 public totalETHLimit = 400;\n', '\n', '    uint256 public totalTokenDistribution = 222000000;\n', '\n', '    uint256 public ethTokenRatio = totalTokenDistribution / totalETHLimit;\n', '\n', '    uint256 public icoETHContributionLimit = totalETHLimit * 10 ** 18;\n', '    // ==========================\n', '\n', '    function() payable { \n', '        uint256 ethValue = msg.value;\n', '        address _address = msg.sender;\n', '        if (!purchasingAllowed) {revert();}\n', '        if (ethValue == 0) {return;}\n', '        claimTokensFor(_address);\n', '        totalContribution += ethValue;\n', '\n', '        uint256 digitsRatio = decimals - ethDecimals;\n', '        uint256 tokensIssued = (ethValue * 10 ** digitsRatio * ethTokenRatio);\n', '\n', '        totalSupply += tokensIssued;\n', '        balances[_address] += tokensIssued;\n', '        Transfer(address(this), _address, tokensIssued);\n', '\n', '        if (totalContribution >= icoETHContributionLimit) {\n', '            purchasingAllowed = false;\n', '        }\n', '     }\n', '\n', '    function neymarHasMinted(uint256 tokensNumber) public returns (bool) {\n', '        if (msg.sender != owner) {revert();}\n', '        NeymarHasMintedEvent(tokensNumber);\n', '        tokensNumber = tokensNumber * 10 ** decimals;\n', '        tokenMinted.push(tokensNumber);\n', '        totalSupplies.push(totalSupply);\n', '        totalSupply += tokensNumber;\n', '        return true;\n', '    }\n', '\n', '    function getVirtualBalance(address _address) public constant returns (uint256 virtualBalance){\n', '        return howManyTokensAreReservedFor(_address) + balanceOf(_address);\n', '    }\n', '        \n', '    function howManyTokensAreReservedForMe() public constant returns (uint256 tokenCount) {\n', '        return howManyTokensAreReservedFor(msg.sender);\n', '    }\n', '\n', '    function howManyTokensAreReservedFor(address _address) public constant returns (uint256 tokenCount) {\n', '        uint256 currentTokenNumbers = balances[_address];\n', '        if (currentTokenNumbers == 0) {\n', '            return 0;\n', '        }\n', '        \n', '        uint256 neymarGoals = tokenMinted.length;\n', '        uint256 currentPosition = positions[_address];\n', '        uint256 tokenMintedAt = 0;\n', '        uint256 totalSupplyAt = 0;\n', '        uint256 tokensWon = 0;\n', '\n', '        while (currentPosition < neymarGoals) {\n', '            tokenMintedAt = tokenMinted[currentPosition];\n', '            totalSupplyAt = totalSupplies[currentPosition];\n', '            tokensWon = tokenMintedAt * currentTokenNumbers / totalSupplyAt;\n', '            currentTokenNumbers += tokensWon;\n', '            currentPosition += 1;\n', '        }\n', '        return currentTokenNumbers - balances[_address];\n', '    }\n', '\n', '    function claimMyTokens() public returns (bool success) {\n', '        return claimTokensFor(msg.sender);\n', '    }\n', '\n', '    function claimTokensFor(address _address) private returns (bool success) {\n', '        uint256 currentTokenNumbers = balances[_address];\n', '        uint256 neymarGoals = tokenMinted.length;\n', '        if (currentTokenNumbers == 0) {\n', '            balances[_address] = 0;\n', '            positions[_address] = neymarGoals;\n', '            return true;\n', '        }\n', '        uint256 tokens = howManyTokensAreReservedFor(_address);\n', '        balances[_address] += tokens;\n', '        positions[_address] = neymarGoals;\n', '        UserClaimedTokens(_address, tokens);       \n', '        return true;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        if (msg.data.length < (2 * 32) + 4) {revert();}\n', '        claimTokensFor(msg.sender);\n', '        claimTokensFor(_to);\n', '        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        if (msg.data.length < (3 * 32) + 4) {revert();}\n', '        claimTokensFor(_from);\n', '        claimTokensFor(_to);\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function withdrawForeignTokens(address _tokenContract) public returns (bool) {\n', '        if (msg.sender != owner) {revert();}\n', '\n', '        ForeignToken token = ForeignToken(_tokenContract);\n', '\n', '        uint256 amount = token.balanceOf(address(this));\n', '        return token.transfer(owner, amount);\n', '    }\n', '\n', '    function getReadableStats() public constant returns (uint256, uint256, bool) {\n', '        return (totalContribution / 10 ** decimals, totalSupply / 10 ** decimals, purchasingAllowed);\n', '    }\n', '\n', '    function getReadableSupply() public constant returns (uint256) {\n', '        return totalSupply / 10 ** decimals;\n', '    }\n', '\n', '    function getReadableContribution() public constant returns (uint256) {\n', '        return totalContribution / 10 ** decimals;\n', '    }\n', '\n', '    function getTotalGoals() public constant returns (uint256) {\n', '        return totalSupplies.length;\n', '    }\n', '\n', '    function getETH() public {\n', '        if (msg.sender != owner) {revert();}\n', '        owner.transfer(this.balance);\n', '    }\n', '}']