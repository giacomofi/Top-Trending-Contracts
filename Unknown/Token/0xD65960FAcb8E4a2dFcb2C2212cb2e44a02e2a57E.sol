['pragma solidity ^ 0.4.8;\n', '\n', 'contract ERC20 {\n', '\n', '    uint public totalSupply;\n', '    \n', '    function totalSupply() constant returns(uint totalSupply);\n', '\n', '    function balanceOf(address who) constant returns(uint256);\n', '\n', '    function allowance(address owner, address spender) constant returns(uint);\n', '\n', '    function transferFrom(address from, address to, uint value) returns(bool ok);\n', '\n', '    function approve(address spender, uint value) returns(bool ok);\n', '\n', '    function transfer(address to, uint value) returns(bool ok);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '\n', '   }\n', '   \n', '  contract SoarCoin is ERC20\n', '  {\n', '      \n', '    // Name of the token\n', '    string public constant name = "Soarcoin";\n', '\n', '    // Symbol of token\n', '    string public constant symbol = "Soar";\n', '\n', '    uint public decimals = 6;\n', '    uint public totalSupply = 5000000000000000 ; //5 billion includes 6 zero for decimal\n', '    address central_account;\n', '    address owner;\n', '    mapping(address => uint) balances;\n', '    \n', '    mapping(address => mapping(address => uint)) allowed;\n', '    \n', '    // Functions with this modifier can only be executed by the owner\n', '    modifier onlyOwner() {\n', '        if (msg.sender != owner) {\n', '            revert();\n', '        }\n', '        _;\n', '    }\n', '    \n', '    modifier onlycentralAccount {\n', '        require(msg.sender == central_account);\n', '        _;\n', '    }\n', '    \n', '    function SoarCoin()\n', '    {\n', '        owner = msg.sender;\n', '        balances[owner] = totalSupply;\n', '    }\n', '    \n', '    \n', '    // erc20 function to return total supply\n', '    function totalSupply() constant returns(uint) {\n', '       return totalSupply;\n', '    }\n', '    \n', '    // erc20 function to return balance of give address\n', '    function balanceOf(address sender) constant returns(uint256 balance) {\n', '        return balances[sender];\n', '    }\n', '\n', '    // Transfer the balance from one account to another account\n', '    function transfer(address _to, uint256 _amount) returns(bool success) {\n', '        \n', '        if (balances[msg.sender] >= _amount &&\n', '            _amount > 0 &&\n', '            balances[_to] + _amount > balances[_to]) {\n', '            balances[msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(msg.sender, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '    \n', '    function set_centralAccount(address central_Acccount) onlyOwner\n', '    {\n', '        central_account = central_Acccount;\n', '    }\n', '\n', '    // Send _value amount of tokens from address _from to address _to\n', '    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n', '    // tokens on your behalf, for example to "deposit" to a contract address and/or to charge\n', '    // fees in sub-currencies; the command should fail unless the _from account has\n', '    // deliberately authorized the sender of the message via some mechanism; we propose\n', '    // these standardized APIs for approval:\n', '\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', '    ) returns(bool success) {\n', '        if (balances[_from] >= _amount &&\n', '            allowed[_from][msg.sender] >= _amount &&\n', '            _amount > 0 &&\n', '            balances[_to] + _amount > balances[_to]) {\n', '            balances[_from] -= _amount;\n', '            allowed[_from][msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(_from, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '    \n', '    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '    // If this function is called again it overwrites the current allowance with _value.\n', '    function approve(address _spender, uint256 _amount) returns(bool success) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns(uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    // Failsafe drain only owner can call this function\n', '    function drain() onlyOwner {\n', '        if (!owner.send(this.balance)) revert();\n', '    }\n', '    // function called by owner only\n', '    function zero_fee_transaction(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', '    ) onlycentralAccount returns(bool success) {\n', '        if (balances[_from] >= _amount &&\n', '            _amount > 0 &&\n', '            balances[_to] + _amount > balances[_to]) {\n', '            balances[_from] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(_from, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '      \n', '  }']