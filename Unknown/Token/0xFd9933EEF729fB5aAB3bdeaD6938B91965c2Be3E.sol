['pragma solidity ^0.4.10;\n', '\n', '/*\n', ' * ERC20 interface\n', ' * see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) constant returns (uint);\n', '  function allowance(address owner, address spender) constant returns (uint);\n', '\n', '  function transfer(address to, uint value) returns (bool ok);\n', '  function transferFrom(address from, address to, uint value) returns (bool ok);\n', '  function approve(address spender, uint value) returns (bool ok);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '/* taking ideas from FirstBlood token */\n', 'contract SafeMath {\n', '\n', '    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x + y;\n', '      assert((z >= x) && (z >= y));\n', '      return z;\n', '    }\n', '\n', '    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\n', '      assert(x >= y);\n', '      uint256 z = x - y;\n', '      return z;\n', '    }\n', '\n', '    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x * y;\n', '      assert((x == 0)||(z/x == y));\n', '      return z;\n', '    }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, SafeMath {\n', '\n', '  /**\n', '   * @dev Fix for the ERC20 short address attack.\n', '   */\n', '  modifier onlyPayloadSize(uint size) {\n', '     require(msg.data.length >= size + 4) ;\n', '     _;\n', '  }\n', '\n', '\n', '  mapping(address => uint) balances;\n', '  mapping (address => mapping (address => uint)) allowed;\n', '\n', '  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32)  returns (bool success){\n', '    balances[msg.sender] = safeSubtract(balances[msg.sender], _value);\n', '    balances[_to] = safeAdd(balances[_to], _value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) returns (bool success) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because safeSub(_allowance, _value) will already throw if this condition is not met\n', '    // if (_value > _allowance) throw;\n', '\n', '    balances[_to] = safeAdd(balances[_to], _value);\n', '    balances[_from] = safeSubtract(balances[_from], _value);\n', '    allowed[_from][msg.sender] = safeSubtract(_allowance, _value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function approve(address _spender, uint _value) returns (bool success) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    \n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS paused\n', '   */\n', '  modifier whenNotPaused() {\n', '    require (!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS NOT paused\n', '   */\n', '  modifier whenPaused {\n', '    require (paused) ;\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused returns (bool) {\n', '    paused = true;\n', '    Pause();\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused returns (bool) {\n', '    paused = false;\n', '    Unpause();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract IndorseToken is SafeMath, StandardToken, Pausable {\n', '    // metadata\n', '    string public constant name = "Indorse Token";\n', '    string public constant symbol = "IND";\n', '    uint256 public constant decimals = 18;\n', '    string public version = "1.0";\n', '\n', '    // contracts\n', '    address public indSaleDeposit = 0x0053B91E38B207C97CBff06f48a0f7Ab2Dd81449;     \n', '    address public indSeedDeposit = 0x0083fdFB328fC8D07E2a7933e3013e181F9798Ad;    \n', '    address public indPresaleDeposit = 0x007AB99FBf023Cb41b50AE7D24621729295EdBFA; \n', '    address public indVestingDeposit = 0x0011349f715cf59F75F0A00185e7B1c36f55C3ab; \n', '    address public indCommunityDeposit = 0x0097ec8840E682d058b24E6e19E68358d97A6E5C;\n', '    address public indFutureDeposit = 0x00d1bCbCDE9Ca431f6dd92077dFaE98f94e446e4; \n', '    address public indInflationDeposit = 0x00D31206E625F1f30039d1Fa472303E71317870A;\n', '    \n', '    uint256 public constant indSale = 31603785 * 10**decimals;  \n', '    uint256 public constant indSeed = 3566341 * 10**decimals; \n', '    uint256 public constant indPreSale = 22995270 * 10**decimals;\n', '    uint256 public constant indVesting  = 28079514 * 10**decimals;\n', '    uint256 public constant indCommunity  = 10919811 * 10**decimals;\n', '    uint256 public constant indFuture  = 58832579 * 10**decimals;  \n', '    uint256 public constant indInflation  = 14624747 * 10**decimals;\n', '   \n', '    // constructor\n', '    function IndorseToken()\n', '    {\n', '      balances[indSaleDeposit]    = indSale; \n', '      balances[indSeedDeposit]  = indSeed;  \n', '      balances[indPresaleDeposit] = indPreSale;\n', '      balances[indVestingDeposit] = indVesting;\n', '      balances[indCommunityDeposit] = indCommunity;\n', '      balances[indFutureDeposit] = indFuture;    \n', '      balances[indInflationDeposit] = indInflation;\n', '\n', '      totalSupply = indSale + indSeed + indPreSale + indVesting + indCommunity + indFuture + indInflation;\n', '\n', '      Transfer(0x0,indSaleDeposit,indSale);\n', '      Transfer(0x0,indSeedDeposit,indSeed);\n', '      Transfer(0x0,indPresaleDeposit,indPreSale);\n', '      Transfer(0x0,indVestingDeposit,indVesting);\n', '      Transfer(0x0,indCommunityDeposit,indCommunity);\n', '      Transfer(0x0,indFutureDeposit,indFuture);\n', '      Transfer(0x0,indInflationDeposit,indInflation);\n', '   }\n', '\n', '  function transfer(address _to, uint _value) whenNotPaused returns (bool success)  {\n', '    return super.transfer(_to,_value);\n', '  }\n', '\n', '  function approve(address _spender, uint _value) whenNotPaused returns (bool success)  {\n', '    return super.approve(_spender,_value);\n', '  }\n', '}\n', '\n', 'contract INDInflationVesting {\n', '  mapping (address => uint256) public allocations;\n', '  uint256 public unlockDate;\n', '  uint256 public entitled;\n', '  address public IND = 0xf8e386EDa857484f5a12e4B5DAa9984E06E73705;\n', '  uint256 public constant exponent = 10**18;\n', '\n', '  function INDInflationVesting() {\n', '    unlockDate = now + 270 days;\n', '    \n', '    allocations[0x00D31206E625F1f30039d1Fa472303E71317870A] = 14624747;\n', '  }\n', '\n', '  function unlock() external {\n', '    require (now > unlockDate);\n', '    uint256 entitled = allocations[msg.sender];\n', '    allocations[msg.sender] = 0;\n', '    require(IndorseToken(IND).transfer(msg.sender, entitled * exponent));\n', '  }\n', '}']