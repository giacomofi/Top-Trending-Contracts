['pragma solidity ^0.4.8;\n', '\n', 'contract SafeMath {\n', '\n', '    function assert(bool assertion) internal {\n', '        if (!assertion) {\n', '            throw;\n', '        }\n', '    }\n', '\n', '    function safeAddCheck(uint256 x, uint256 y) internal returns(bool) {\n', '      uint256 z = x + y;\n', '      if ((z >= x) && (z >= y)) {\n', '          return true;\n', '      }\n', '    }\n', '\n', '    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\n', '        uint256 z = x * y;\n', '        assert((x == 0)||(z/x == y));\n', '        return z;\n', '    }\n', '\n', '}\n', '\n', 'contract Token {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '/*  ERC 20 token */\n', 'contract LeeroyPoints is Token, SafeMath {\n', '    address public owner;\n', '    mapping (address => bool) public controllers;\n', '\n', '    string public constant name = "Leeroy Points";\n', '    string public constant symbol = "LRP";\n', '    uint256 public constant decimals = 18;\n', '    string public version = "1.0";\n', '    uint256 public constant baseUnit = 1 * 10**decimals;\n', '\n', '    event CreateLRP(address indexed _to, uint256 _value);\n', '\n', '    function LeeroyPoints() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner { if (msg.sender != owner) throw; _; }\n', '\n', '    modifier onlyController { if (controllers[msg.sender] == false) throw; _; }\n', '\n', '    function enableController(address controller) onlyOwner {\n', '        controllers[controller] = true;\n', '    }\n', '\n', '    function disableController(address controller) onlyOwner {\n', '        controllers[controller] = false;\n', '    }\n', '\n', '    function create(uint num, address targetAddress) onlyController {\n', '        uint points = safeMult(num, baseUnit);\n', '        // use bool instead of assert, controller can run indefinitely\n', '        // regardless of totalSupply\n', '        bool checked = safeAddCheck(totalSupply, points);\n', '        if (checked) {\n', '            totalSupply = totalSupply + points;\n', '            balances[targetAddress] += points;\n', '            CreateLRP(targetAddress, points);\n', '        }\n', '   }\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '      if (balances[msg.sender] >= _value && _value > 0) {\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}']
['pragma solidity ^0.4.8;\n', '\n', 'contract SafeMath {\n', '\n', '    function assert(bool assertion) internal {\n', '        if (!assertion) {\n', '            throw;\n', '        }\n', '    }\n', '\n', '    function safeAddCheck(uint256 x, uint256 y) internal returns(bool) {\n', '      uint256 z = x + y;\n', '      if ((z >= x) && (z >= y)) {\n', '          return true;\n', '      }\n', '    }\n', '\n', '    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\n', '        uint256 z = x * y;\n', '        assert((x == 0)||(z/x == y));\n', '        return z;\n', '    }\n', '\n', '}\n', '\n', 'contract Token {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '/*  ERC 20 token */\n', 'contract LeeroyPoints is Token, SafeMath {\n', '    address public owner;\n', '    mapping (address => bool) public controllers;\n', '\n', '    string public constant name = "Leeroy Points";\n', '    string public constant symbol = "LRP";\n', '    uint256 public constant decimals = 18;\n', '    string public version = "1.0";\n', '    uint256 public constant baseUnit = 1 * 10**decimals;\n', '\n', '    event CreateLRP(address indexed _to, uint256 _value);\n', '\n', '    function LeeroyPoints() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner { if (msg.sender != owner) throw; _; }\n', '\n', '    modifier onlyController { if (controllers[msg.sender] == false) throw; _; }\n', '\n', '    function enableController(address controller) onlyOwner {\n', '        controllers[controller] = true;\n', '    }\n', '\n', '    function disableController(address controller) onlyOwner {\n', '        controllers[controller] = false;\n', '    }\n', '\n', '    function create(uint num, address targetAddress) onlyController {\n', '        uint points = safeMult(num, baseUnit);\n', '        // use bool instead of assert, controller can run indefinitely\n', '        // regardless of totalSupply\n', '        bool checked = safeAddCheck(totalSupply, points);\n', '        if (checked) {\n', '            totalSupply = totalSupply + points;\n', '            balances[targetAddress] += points;\n', '            CreateLRP(targetAddress, points);\n', '        }\n', '   }\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '      if (balances[msg.sender] >= _value && _value > 0) {\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}']
