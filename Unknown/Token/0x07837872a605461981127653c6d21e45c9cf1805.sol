['pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', 'contract Finalizable is Ownable {\n', '  bool public contractFinalized;\n', '\n', '  modifier notFinalized() {\n', '    require(!contractFinalized);\n', '    _;\n', '  }\n', '\n', '  function finalizeContract() onlyOwner {\n', '    contractFinalized = true;\n', '  }\n', '}\n', '\n', 'contract Shared is Ownable, Finalizable {\n', '  uint internal constant DECIMALS = 8;\n', '  \n', '  address internal constant REWARDS_WALLET = 0x30b002d3AfCb7F9382394f7c803faFBb500872D8;\n', '  address internal constant CROWDSALE_WALLET = 0x028e1Ce69E379b1678278640c7387ecc40DAa895;\n', '  address internal constant LIFE_CHANGE_WALLET = 0xEe4284f98D0568c7f65688f18A2F74354E17B31a;\n', '  address internal constant LIFE_CHANGE_VESTING_WALLET = 0x2D354bD67707223C9aC0232cd0E54f22b03483Cf;\n', '}\n', '\n', 'contract Ledger is Shared {\n', '  using SafeMath for uint;\n', '\n', '  address public controller;\n', '  mapping(address => uint) public balanceOf;\n', '  mapping (address => mapping (address => uint)) public allowed;\n', '  uint public totalSupply;\n', '\n', '  function setController(address _address) onlyOwner notFinalized {\n', '    controller = _address;\n', '  }\n', '\n', '  modifier onlyController() {\n', '    require(msg.sender == controller);\n', '    _;\n', '  }\n', '\n', '  function transfer(address _from, address _to, uint _value) onlyController returns (bool success) {\n', '    balanceOf[_from] = balanceOf[_from].sub(_value);\n', '    balanceOf[_to] = balanceOf[_to].add(_value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _spender, address _from, address _to, uint _value) onlyController returns (bool success) {\n', '    var _allowance = allowed[_from][_spender];\n', '    balanceOf[_to] = balanceOf[_to].add(_value);\n', '    balanceOf[_from] = balanceOf[_from].sub(_value);\n', '    allowed[_from][_spender] = _allowance.sub(_value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _owner, address _spender, uint _value) onlyController returns (bool success) {\n', '    require((_value == 0) || (allowed[_owner][_spender] == 0));\n', '    allowed[_owner][_spender] = _value;\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) onlyController constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function burn(address _from, uint _amount) onlyController returns (bool success) {\n', '    balanceOf[_from] = balanceOf[_from].sub(_amount);\n', '    totalSupply = totalSupply.sub(_amount);\n', '    return true;\n', '  }\n', '\n', '  function mint(address _to, uint _amount) onlyController returns (bool success) {\n', '    balanceOf[_to] += _amount;\n', '    totalSupply += _amount;\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract Controller is Shared, Pausable {\n', '  using SafeMath for uint;\n', '\n', '  bool public initialized;\n', '\n', '  ChristCoin public token;\n', '  Ledger public ledger;\n', '  address public crowdsale;\n', '\n', '  uint public vestingAmount;\n', '  uint public vestingPaid;\n', '  uint public vestingStart;\n', '  uint public vestingDuration;\n', '\n', '  function Controller(address _token, address _ledger, address _crowdsale) {\n', '    token = ChristCoin(_token);\n', '    ledger = Ledger(_ledger);\n', '    crowdsale = _crowdsale;\n', '  }\n', '\n', '  function setToken(address _address) onlyOwner notFinalized {\n', '    token = ChristCoin(_address);\n', '  }\n', '\n', '  function setLedger(address _address) onlyOwner notFinalized {\n', '    ledger = Ledger(_address);\n', '  }\n', '\n', '  function setCrowdsale(address _address) onlyOwner notFinalized {\n', '    crowdsale = _address;\n', '  }\n', '\n', '  modifier onlyToken() {\n', '    require(msg.sender == address(token));\n', '    _;\n', '  }\n', '\n', '  modifier onlyCrowdsale() {\n', '    require(msg.sender == crowdsale);\n', '    _;\n', '  }\n', '\n', '  modifier onlyTokenOrCrowdsale() {\n', '    require(msg.sender == address(token) || msg.sender == crowdsale);\n', '    _;\n', '  }\n', '\n', '  modifier notVesting() {\n', '    require(msg.sender != LIFE_CHANGE_VESTING_WALLET);\n', '    _;\n', '  }\n', '\n', '  function init() onlyOwner {\n', '    require(!initialized);\n', '    mintWithEvent(REWARDS_WALLET, 9 * (10 ** (9 + DECIMALS))); // 9 billion\n', '    mintWithEvent(CROWDSALE_WALLET, 900 * (10 ** (6 + DECIMALS))); // 900 million\n', '    mintWithEvent(LIFE_CHANGE_WALLET, 100 * (10 ** (6 + DECIMALS))); // 100 million\n', '    initialized = true;\n', '  }\n', '\n', '  function totalSupply() onlyToken constant returns (uint) {\n', '    return ledger.totalSupply();\n', '  }\n', '\n', '  function balanceOf(address _owner) onlyTokenOrCrowdsale constant returns (uint) {\n', '    return ledger.balanceOf(_owner);\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) onlyToken constant returns (uint) {\n', '    return ledger.allowance(_owner, _spender);\n', '  }\n', '\n', '  function transfer(address _from, address _to, uint _value) onlyToken notVesting whenNotPaused returns (bool success) {\n', '    return ledger.transfer(_from, _to, _value);\n', '  }\n', '\n', '  function transferWithEvent(address _from, address _to, uint _value) onlyCrowdsale returns (bool success) {\n', '    success = ledger.transfer(_from, _to, _value);\n', '    if (success) {\n', '      token.controllerTransfer(msg.sender, _to, _value);\n', '    }\n', '  }\n', '\n', '  function transferFrom(address _spender, address _from, address _to, uint _value) onlyToken notVesting whenNotPaused returns (bool success) {\n', '    return ledger.transferFrom(_spender, _from, _to, _value);\n', '  }\n', '\n', '  function approve(address _owner, address _spender, uint _value) onlyToken notVesting whenNotPaused returns (bool success) {\n', '    return ledger.approve(_owner, _spender, _value);\n', '  }\n', '\n', '  function burn(address _owner, uint _amount) onlyToken whenNotPaused returns (bool success) {\n', '    return ledger.burn(_owner, _amount);\n', '  }\n', '\n', '  function mintWithEvent(address _to, uint _amount) internal returns (bool success) {\n', '    success = ledger.mint(_to, _amount);\n', '    if (success) {\n', '      token.controllerTransfer(0x0, _to, _amount);\n', '    }\n', '  }\n', '\n', '  function startVesting(uint _amount, uint _duration) onlyCrowdsale {\n', '    require(vestingAmount == 0);\n', '    vestingAmount = _amount;\n', '    vestingPaid = 0;\n', '    vestingStart = now;\n', '    vestingDuration = _duration;\n', '  }\n', '\n', '  function withdrawVested(address _withdrawTo) returns (uint amountWithdrawn) {\n', '    require(msg.sender == LIFE_CHANGE_VESTING_WALLET);\n', '    require(vestingAmount > 0);\n', '    \n', '    uint _elapsed = now.sub(vestingStart);\n', '    uint _rate = vestingAmount.div(vestingDuration);\n', '    uint _unlocked = _rate.mul(_elapsed);\n', '\n', '    if (_unlocked > vestingAmount) {\n', '       _unlocked = vestingAmount;\n', '    }\n', '\n', '    if (_unlocked <= vestingPaid) {\n', '      amountWithdrawn = 0;\n', '      return;\n', '    }\n', '\n', '    amountWithdrawn = _unlocked.sub(vestingPaid);\n', '    vestingPaid = vestingPaid.add(amountWithdrawn);\n', '\n', '    ledger.transfer(LIFE_CHANGE_VESTING_WALLET, _withdrawTo, amountWithdrawn);\n', '    token.controllerTransfer(LIFE_CHANGE_VESTING_WALLET, _withdrawTo, amountWithdrawn);\n', '  }\n', '}\n', '\n', 'contract ChristCoin is Shared {\n', '  using SafeMath for uint;\n', '\n', '  string public name = "Christ Coin";\n', '  string public symbol = "CCLC";\n', '  uint8 public decimals = 8;\n', '\n', '  Controller public controller;\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '\n', '  function setController(address _address) onlyOwner notFinalized {\n', '    controller = Controller(_address);\n', '  }\n', '\n', '  modifier onlyController() {\n', '    require(msg.sender == address(controller));\n', '    _;\n', '  }\n', '\n', '  function balanceOf(address _owner) constant returns (uint) {\n', '    return controller.balanceOf(_owner);\n', '  }\n', '\n', '  function totalSupply() constant returns (uint) {\n', '    return controller.totalSupply();\n', '  }\n', '\n', '  function transfer(address _to, uint _value) returns (bool success) {\n', '    success = controller.transfer(msg.sender, _to, _value);\n', '    if (success) {\n', '      Transfer(msg.sender, _to, _value);\n', '    }\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _value) returns (bool success) {\n', '    success = controller.transferFrom(msg.sender, _from, _to, _value);\n', '    if (success) {\n', '      Transfer(_from, _to, _value);\n', '    }\n', '  }\n', '\n', '  function approve(address _spender, uint _value) returns (bool success) {\n', '    success = controller.approve(msg.sender, _spender, _value);\n', '    if (success) {\n', '      Approval(msg.sender, _spender, _value);\n', '    }\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) constant returns (uint) {\n', '    return controller.allowance(_owner, _spender);\n', '  }\n', '\n', '  function burn(uint _amount) onlyOwner returns (bool success) {\n', '    success = controller.burn(msg.sender, _amount);\n', '    if (success) {\n', '      Transfer(msg.sender, 0x0, _amount);\n', '    }\n', '  }\n', '\n', '  function controllerTransfer(address _from, address _to, uint _value) onlyController {\n', '    Transfer(_from, _to, _value);\n', '  }\n', '\n', '  function controllerApproval(address _from, address _spender, uint _value) onlyController {\n', '    Approval(_from, _spender, _value);\n', '  }\n', '}']