['pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS paused\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS NOT paused\n', '   */\n', '  modifier whenPaused {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused returns (bool) {\n', '    paused = true;\n', '    Pause();\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused returns (bool) {\n', '    paused = false;\n', '    Unpause();\n', '    return true;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title HoQuToken\n', ' * @dev HoQu.io token contract.\n', ' */\n', 'contract HoQuToken is StandardToken, Pausable {\n', '    \n', '    string public constant name = "HOQU Token";\n', '    string public constant symbol = "HQX";\n', '    uint32 public constant decimals = 18;\n', '    \n', '    /**\n', '     * @dev Give all tokens to msg.sender.\n', '     */\n', '    function HoQuToken(uint _totalSupply) {\n', '        require (_totalSupply > 0);\n', '        totalSupply = balances[msg.sender] = _totalSupply;\n', '    }\n', '\n', '    function transfer(address _to, uint _value) whenNotPaused returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) whenNotPaused returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title BaseCrowdSale\n', ' * @title HoQu.io base crowdsale contract for managing a token crowdsale.\n', ' */\n', 'contract BaseCrowdsale is Pausable {\n', '    using SafeMath for uint256;\n', '\n', '    // all accepted ethers go to this address\n', '    address beneficiaryAddress;\n', '\n', '    // all remain tokens after ICO should go to that address\n', '    address public bankAddress;\n', '\n', '    // token instance\n', '    HoQuToken public token;\n', '\n', '    uint256 public maxTokensAmount;\n', '    uint256 public issuedTokensAmount = 0;\n', '    uint256 public minBuyableAmount;\n', '    uint256 public tokenRate; // amount of HQX per 1 ETH\n', '    \n', '    uint256 endDate;\n', '\n', '    bool public isFinished = false;\n', '\n', '    /**\n', '    * Event for token purchase logging\n', '    * @param buyer who paid for the tokens\n', '    * @param tokens amount of tokens purchased\n', '    * @param amount ethers paid for purchase\n', '    */\n', '    event TokenBought(address indexed buyer, uint256 tokens, uint256 amount);\n', '\n', '    modifier inProgress() {\n', '        require (!isFinished);\n', '        require (issuedTokensAmount < maxTokensAmount);\n', '        require (now <= endDate);\n', '        _;\n', '    }\n', '    \n', '    /**\n', '    * @param _tokenAddress address of a HQX token contract\n', '    * @param _bankAddress address for remain HQX tokens accumulation\n', '    * @param _beneficiaryAddress accepted ETH go to this address\n', '    * @param _tokenRate rate HQX per 1 ETH\n', '    * @param _minBuyableAmount min ETH per each buy action (in ETH)\n', '    * @param _maxTokensAmount ICO HQX capacity (in HQX)\n', '    * @param _endDate the date when ICO will expire\n', '    */\n', '    function BaseCrowdsale(\n', '        address _tokenAddress,\n', '        address _bankAddress,\n', '        address _beneficiaryAddress,\n', '        uint256 _tokenRate,\n', '        uint256 _minBuyableAmount,\n', '        uint256 _maxTokensAmount,\n', '        uint256 _endDate\n', '    ) {\n', '        token = HoQuToken(_tokenAddress);\n', '\n', '        bankAddress = _bankAddress;\n', '        beneficiaryAddress = _beneficiaryAddress;\n', '\n', '        tokenRate = _tokenRate;\n', '        minBuyableAmount = _minBuyableAmount.mul(1 ether);\n', '        maxTokensAmount = _maxTokensAmount.mul(1 ether);\n', '    \n', '        endDate = _endDate;\n', '    }\n', '\n', '    /*\n', '     * @dev Set new HoQu token exchange rate.\n', '     */\n', '    function setTokenRate(uint256 _tokenRate) onlyOwner inProgress {\n', '        require (_tokenRate > 0);\n', '        tokenRate = _tokenRate;\n', '    }\n', '\n', '    /*\n', '     * @dev Set new minimum buyable amount in ethers.\n', '     */\n', '    function setMinBuyableAmount(uint256 _minBuyableAmount) onlyOwner inProgress {\n', '        require (_minBuyableAmount > 0);\n', '        minBuyableAmount = _minBuyableAmount.mul(1 ether);\n', '    }\n', '\n', '    /**\n', '     * Buy HQX. Check minBuyableAmount and tokenRate.\n', '     * @dev Performs actual token sale process. Sends all ethers to beneficiary.\n', '     */\n', '    function buyTokens() payable inProgress whenNotPaused {\n', '        require (msg.value >= minBuyableAmount);\n', '    \n', '        uint256 payAmount = msg.value;\n', '        uint256 returnAmount = 0;\n', '\n', '        // calculate token amount to be transfered to investor\n', '        uint256 tokens = tokenRate.mul(payAmount);\n', '    \n', '        if (issuedTokensAmount + tokens > maxTokensAmount) {\n', '            tokens = maxTokensAmount.sub(issuedTokensAmount);\n', '            payAmount = tokens.div(tokenRate);\n', '            returnAmount = msg.value.sub(payAmount);\n', '        }\n', '    \n', '        issuedTokensAmount = issuedTokensAmount.add(tokens);\n', '        require (issuedTokensAmount <= maxTokensAmount);\n', '\n', '        // send token to investor\n', '        token.transfer(msg.sender, tokens);\n', '        // notify listeners on token purchase\n', '        TokenBought(msg.sender, tokens, payAmount);\n', '\n', '        // send ethers to special address\n', '        beneficiaryAddress.transfer(payAmount);\n', '    \n', '        if (returnAmount > 0) {\n', '            msg.sender.transfer(returnAmount);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Trigger emergency token pause.\n', '     */\n', '    function pauseToken() onlyOwner returns (bool) {\n', '        require(!token.paused());\n', '        token.pause();\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Unpause token.\n', '     */\n', '    function unpauseToken() onlyOwner returns (bool) {\n', '        require(token.paused());\n', '        token.unpause();\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * Finish ICO.\n', '     */\n', '    function finish() onlyOwner {\n', '        require (issuedTokensAmount >= maxTokensAmount || now > endDate);\n', '        require (!isFinished);\n', '        isFinished = true;\n', '        token.transfer(bankAddress, token.balanceOf(this));\n', '    }\n', '    \n', '    /**\n', '     * Buy HQX. Check minBuyableAmount and tokenRate.\n', '     */\n', '    function() external payable {\n', '        buyTokens();\n', '    }\n', '}\n', '\n', '/**\n', ' * @title PrivatePlacement\n', ' * @dev HoQu.io Private Token Placement contract\n', ' */\n', 'contract PrivatePlacement is BaseCrowdsale {\n', '\n', '    // internal addresses for HoQu tokens allocation\n', '    address public foundersAddress;\n', '    address public supportAddress;\n', '    address public bountyAddress;\n', '\n', '    // initial amount distribution values\n', '    uint256 public constant totalSupply = 888888000 ether;\n', '    uint256 public constant initialFoundersAmount = 266666400 ether;\n', '    uint256 public constant initialSupportAmount = 8888880 ether;\n', '    uint256 public constant initialBountyAmount = 35555520 ether;\n', '\n', '    // whether initial token allocations was performed or not\n', '    bool allocatedInternalWallets = false;\n', '    \n', '    /**\n', '    * @param _bankAddress address for remain HQX tokens accumulation\n', '    * @param _foundersAddress founders address\n', '    * @param _supportAddress support address\n', '    * @param _bountyAddress bounty address\n', '    * @param _beneficiaryAddress accepted ETH go to this address\n', '    */\n', '    function PrivatePlacement(\n', '        address _bankAddress,\n', '        address _foundersAddress,\n', '        address _supportAddress,\n', '        address _bountyAddress,\n', '        address _beneficiaryAddress\n', '    ) BaseCrowdsale(\n', '        createToken(totalSupply),\n', '        _bankAddress,\n', '        _beneficiaryAddress,\n', '        10000, /* rate HQX per 1 ETH (includes 100% private placement bonus) */\n', '        100, /* min amount in ETH */\n', '        23111088, /* cap in HQX */\n', '        1507939200 /* end 10/14/2017 @ 12:00am (UTC) */\n', '    ) {\n', '        foundersAddress = _foundersAddress;\n', '        supportAddress = _supportAddress;\n', '        bountyAddress = _bountyAddress;\n', '    }\n', '\n', '    /*\n', '     * @dev Perform initial token allocation between founders&#39; addresses.\n', '     * Is only executed once after presale contract deployment and is invoked manually.\n', '     */\n', '    function allocateInternalWallets() onlyOwner {\n', '        require (!allocatedInternalWallets);\n', '\n', '        allocatedInternalWallets = true;\n', '\n', '        token.transfer(foundersAddress, initialFoundersAmount);\n', '        token.transfer(supportAddress, initialSupportAmount);\n', '        token.transfer(bountyAddress, initialBountyAmount);\n', '    }\n', '    \n', '    /*\n', '     * @dev HoQu Token factory.\n', '     */\n', '    function createToken(uint256 _totalSupply) internal returns (HoQuToken) {\n', '        return new HoQuToken(_totalSupply);\n', '    }\n', '}']