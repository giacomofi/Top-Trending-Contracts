['pragma solidity ^0.4.11;\n', '\n', '/*\n', '* LOK &#39;LookRev Token&#39; crowdfunding contract\n', '*\n', '* Refer to https://lookrev.com/ for further information.\n', '* \n', '* Developer: LookRev (TM) 2017.\n', '*\n', '* Audited by BokkyPooBah / Bok Consulting Pty Ltd 2017.\n', '* \n', '* The MIT License.\n', '*\n', '*/\n', '\n', '/*\n', ' * ERC20 Token Standard\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' *\n', ' */\n', 'contract ERC20 {\n', '  uint public totalSupply;\n', '  function balanceOf(address _who) constant returns (uint balance);\n', '  function allowance(address _owner, address _spender) constant returns (uint remaining);\n', '\n', '  function transfer(address _to, uint _value) returns (bool ok);\n', '  function transferFrom(address _from, address _to, uint _value) returns (bool ok);\n', '  function approve(address _spender, uint _value) returns (bool ok);\n', '  event Transfer(address indexed _from, address indexed _to, uint _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'contract SafeMath {\n', '  function safeAdd(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a && c >= b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    uint c = a - b;\n', '    assert(c <= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '  address public newOwner;\n', '\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address _newOwner) onlyOwner {\n', '    if (_newOwner != address(0)) {\n', '      newOwner = _newOwner;\n', '    }\n', '  }\n', '\n', '  function acceptOwnership() {\n', '    require(msg.sender == newOwner);\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '  event OwnershipTransferred(address indexed _from, address indexed _to);\n', '}\n', '\n', '/**\n', ' * Standard ERC20 token with Short Hand Attack and approve() race condition mitigation.\n', ' *\n', ' * Based on code by InvestSeed\n', ' */\n', 'contract StandardToken is ERC20, Ownable, SafeMath {\n', '\n', '    mapping (address => uint) balances;\n', '    mapping (address => mapping (address => uint)) allowed;\n', '\n', '    function balanceOf(address _owner) constant returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transfer(address _to, uint _amount) returns (bool success) {\n', '        // avoid wasting gas on 0 token transfers\n', '        if(_amount == 0) return true;\n', '\n', '        if (balances[msg.sender] >= _amount\n', '            && _amount > 0\n', '            && balances[_to] + _amount > balances[_to]) {\n', '            balances[msg.sender] = safeSub(balances[msg.sender],_amount);\n', '            balances[_to] = safeAdd(balances[_to],_amount);\n', '            Transfer(msg.sender, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _amount) returns (bool success) {\n', '        // avoid wasting gas on 0 token transfers\n', '        if(_amount == 0) return true;\n', '\n', '        if (balances[_from] >= _amount\n', '            && allowed[_from][msg.sender] >= _amount\n', '            && _amount > 0\n', '            && balances[_to] + _amount > balances[_to]) {\n', '            balances[_from] = safeSub(balances[_from],_amount);\n', '            allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender],_amount);\n', '            balances[_to] = safeAdd(balances[_to],_amount);\n', '            Transfer(_from, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function approve(address _spender, uint _value) returns (bool success) {\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) {\n', '           return false;\n', '        }\n', '        if (balances[msg.sender] < _value) {\n', '            return false;\n', '        }\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '     }\n', '\n', '     function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '       return allowed[_owner][_spender];\n', '     }\n', '}\n', '\n', '/**\n', ' * LookRev token initial offering.\n', ' *\n', ' * Token supply is created in the token contract creation and allocated to owner.\n', ' *\n', ' */\n', 'contract LookRevToken is StandardToken {\n', '\n', '    /*\n', '    *  Token meta data\n', '    */\n', '    string public constant name = "LookRev";\n', '    string public constant symbol = "LOK";\n', '    uint8 public constant decimals = 18;\n', '    string public VERSION = &#39;LOK1.2&#39;;\n', '    bool public finalised = false;\n', '    \n', '    address public wallet = 0x0;\n', '\n', '    mapping(address => bool) public kycRequired;\n', '\n', '    // Start - Friday, September 8, 2017 3:00:00 PM UTC (8:00:00 AM PDT GMT-07:00 DST)\n', '    uint public constant START_DATE = 1504882800;\n', '    // 3000 LOK Per ETH for the 1st 24 Hours - Till Saturday, September 9, 2017 3:00:00 PM UTC (8:00:00 AM PDT GMT-07:00 DST)\n', '    uint public constant BONUSONE_DATE = 1504969200;\n', '    // 2700 LOK Per ETH for the Next 48 Hours - Till Monday, September 11, 2017 3:00:00 PM UTC (8:00:00 AM PDT GMT-07:00 DST)\n', '    uint public constant BONUSTWO_DATE = 1505142000;\n', '    // Regular Rate - 2400 LOK Per ETH for the Remaining Part of the Crowdsale\n', '    // End - Sunday, October 8, 2017 3:00:00 PM UTC (8:00:00 AM PDT GMT-07:00 DST)\n', '    uint public constant END_DATE = 1507474800;\n', '\n', '    uint public constant DECIMALSFACTOR = 10**uint(decimals);\n', '    uint public constant TOKENS_SOFT_CAP =   10000000 * DECIMALSFACTOR;\n', '    uint public constant TOKENS_HARD_CAP = 2000000000 * DECIMALSFACTOR;\n', '    uint public constant TOKENS_TOTAL =    5000000000 * DECIMALSFACTOR;\n', '    uint public constant INITIAL_SUPPLY = 10000000 * DECIMALSFACTOR;\n', '\n', '    // 1 KETHER = 2,400,000 tokens\n', '    // 1 ETH = 2,400 tokens\n', '    uint public tokensPerKEther = 2400000;\n', '    uint public CONTRIBUTIONS_MIN = 0 ether;\n', '    uint public CONTRIBUTIONS_MAX = 0 ether;\n', '    uint public constant KYC_THRESHOLD = 100 * DECIMALSFACTOR;\n', '\n', '    function LookRevToken() {\n', '      owner = msg.sender;\n', '      wallet = owner;\n', '      totalSupply = INITIAL_SUPPLY;\n', '      balances[owner] = totalSupply;\n', '    }\n', '\n', '   // LookRev can change the crowdsale wallet address\n', '   function setWallet(address _wallet) onlyOwner {\n', '        wallet = _wallet;\n', '        WalletUpdated(wallet);\n', '    }\n', '    event WalletUpdated(address newWallet);\n', '\n', '    // Accept ethers to buy tokens during the crowdsale\n', '    function () payable {\n', '        proxyPayment(msg.sender);\n', '    }\n', '\n', '    // Accept ethers and exchanges to purchase tokens on behalf of user\n', '    // msg.value (in units of wei)\n', '    function proxyPayment(address participant) payable {\n', '\n', '        require(!finalised);\n', '\n', '        require(now <= END_DATE);\n', '\n', '        require(msg.value > CONTRIBUTIONS_MIN);\n', '        require(CONTRIBUTIONS_MAX == 0 || msg.value < CONTRIBUTIONS_MAX);\n', '\n', '         // Add in bonus during the first 24 and 48 hours of the token sale\n', '         if (now < START_DATE) {\n', '            tokensPerKEther = 2400000;\n', '         } else if (now < BONUSONE_DATE) {\n', '            tokensPerKEther = 3000000;\n', '         } else if (now < BONUSTWO_DATE) {\n', '            tokensPerKEther = 2700000;\n', '         } else {\n', '            tokensPerKEther = 2400000;\n', '         }\n', '\n', '         // Calculate number of tokens for contributed ETH\n', '         // `18` is the ETH decimals\n', '         // `- decimals` is the token decimals\n', '         uint tokens = msg.value * tokensPerKEther / 10**uint(18 - decimals + 3);\n', '\n', '         // Check if the hard cap will be exceeded\n', '         require(totalSupply + tokens <= TOKENS_HARD_CAP);\n', '\n', '         // Add tokens purchased to account&#39;s balance and total supply\n', '         balances[participant] = safeAdd(balances[participant],tokens);\n', '         totalSupply = safeAdd(totalSupply,tokens);\n', '\n', '         // Log the tokens purchased \n', '         Transfer(0x0, participant, tokens);\n', '         // - buyer = participant\n', '         // - ethers = msg.value\n', '         // - participantTokenBalance = balances[participant]\n', '         // - tokens = tokens\n', '         // - newTotalSupply = totalSupply\n', '         // - tokensPerKEther = tokensPerKEther\n', '         TokensBought(participant, msg.value, balances[participant], tokens,\n', '              totalSupply, tokensPerKEther);\n', '\n', '         if (msg.value > KYC_THRESHOLD) {\n', '             // KYC verification required before participant can transfer the tokens\n', '             kycRequired[participant] = true;\n', '         }\n', '\n', '         // Transfer the contributed ethers to the crowdsale wallet\n', '         // throw is deprecated starting from Ethereum v0.9.0\n', '         wallet.transfer(msg.value);\n', '    }\n', '\n', '    event TokensBought(address indexed buyer, uint ethers, \n', '        uint participantTokenBalance, uint tokens, uint newTotalSupply, \n', '        uint _tokensPerKEther);\n', '\n', '    function finalise() onlyOwner {\n', '        // Can only finalise if raised > soft cap or after the end date\n', '        require(totalSupply >= TOKENS_SOFT_CAP || now > END_DATE);\n', '\n', '        require(!finalised);\n', '\n', '        finalised = true;\n', '    }\n', '\n', '   function addPrecommitment(address participant, uint balance) onlyOwner {\n', '        require(now < START_DATE);\n', '        require(balance > 0);\n', '        balances[participant] = safeAdd(balances[participant],balance);\n', '        totalSupply = safeAdd(totalSupply,balance);\n', '        Transfer(0x0, participant, balance);\n', '        PrecommitmentAdded(participant, balance);\n', '    }\n', '    event PrecommitmentAdded(address indexed participant, uint balance);\n', '\n', '    function transfer(address _to, uint _amount) returns (bool success) {\n', '        // Cannot transfer before crowdsale ends\n', '        // Allow awarding team members before, during and after crowdsale\n', '        require(finalised || msg.sender == owner);\n', '        require(!kycRequired[msg.sender]);\n', '        return super.transfer(_to, _amount);\n', '    }\n', '\n', '   function transferFrom(address _from, address _to, uint _amount) returns (bool success)\n', '    {\n', '        // Cannot transfer before crowdsale ends\n', '        require(finalised);\n', '        require(!kycRequired[_from]);\n', '        return super.transferFrom(_from, _to, _amount);\n', '    }\n', '\n', '    function kycVerify(address participant, bool _required) onlyOwner {\n', '        kycRequired[participant] = _required;\n', '        KycVerified(participant, kycRequired[participant]);\n', '    }\n', '    event KycVerified(address indexed participant, bool required);\n', '\n', '    // Any account can burn _from&#39;s tokens as long as the _from account has\n', '    // approved the _amount to be burnt using approve(0x0, _amount)\n', '    function burnFrom(address _from, uint _amount) returns (bool success) {\n', '        require(totalSupply >= _amount);\n', '\n', '        if (balances[_from] >= _amount\n', '            && allowed[_from][0x0] >= _amount\n', '            && _amount > 0\n', '            && balances[0x0] + _amount > balances[0x0]\n', '        ) {\n', '            balances[_from] = safeSub(balances[_from],_amount);\n', '            balances[0x0] = safeAdd(balances[0x0],_amount);\n', '            allowed[_from][0x0] = safeSub(allowed[_from][0x0],_amount);\n', '            totalSupply = safeSub(totalSupply,_amount);\n', '            Transfer(_from, 0x0, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // LookRev can transfer out any accidentally sent ERC20 tokens\n', '    function transferAnyERC20Token(address tokenAddress, uint amount) onlyOwner returns (bool success) \n', '    {\n', '        return ERC20(tokenAddress).transfer(owner, amount);\n', '    }\n', '}']
['pragma solidity ^0.4.11;\n', '\n', '/*\n', "* LOK 'LookRev Token' crowdfunding contract\n", '*\n', '* Refer to https://lookrev.com/ for further information.\n', '* \n', '* Developer: LookRev (TM) 2017.\n', '*\n', '* Audited by BokkyPooBah / Bok Consulting Pty Ltd 2017.\n', '* \n', '* The MIT License.\n', '*\n', '*/\n', '\n', '/*\n', ' * ERC20 Token Standard\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' *\n', ' */\n', 'contract ERC20 {\n', '  uint public totalSupply;\n', '  function balanceOf(address _who) constant returns (uint balance);\n', '  function allowance(address _owner, address _spender) constant returns (uint remaining);\n', '\n', '  function transfer(address _to, uint _value) returns (bool ok);\n', '  function transferFrom(address _from, address _to, uint _value) returns (bool ok);\n', '  function approve(address _spender, uint _value) returns (bool ok);\n', '  event Transfer(address indexed _from, address indexed _to, uint _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'contract SafeMath {\n', '  function safeAdd(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a && c >= b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    uint c = a - b;\n', '    assert(c <= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '  address public newOwner;\n', '\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address _newOwner) onlyOwner {\n', '    if (_newOwner != address(0)) {\n', '      newOwner = _newOwner;\n', '    }\n', '  }\n', '\n', '  function acceptOwnership() {\n', '    require(msg.sender == newOwner);\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '  event OwnershipTransferred(address indexed _from, address indexed _to);\n', '}\n', '\n', '/**\n', ' * Standard ERC20 token with Short Hand Attack and approve() race condition mitigation.\n', ' *\n', ' * Based on code by InvestSeed\n', ' */\n', 'contract StandardToken is ERC20, Ownable, SafeMath {\n', '\n', '    mapping (address => uint) balances;\n', '    mapping (address => mapping (address => uint)) allowed;\n', '\n', '    function balanceOf(address _owner) constant returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transfer(address _to, uint _amount) returns (bool success) {\n', '        // avoid wasting gas on 0 token transfers\n', '        if(_amount == 0) return true;\n', '\n', '        if (balances[msg.sender] >= _amount\n', '            && _amount > 0\n', '            && balances[_to] + _amount > balances[_to]) {\n', '            balances[msg.sender] = safeSub(balances[msg.sender],_amount);\n', '            balances[_to] = safeAdd(balances[_to],_amount);\n', '            Transfer(msg.sender, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _amount) returns (bool success) {\n', '        // avoid wasting gas on 0 token transfers\n', '        if(_amount == 0) return true;\n', '\n', '        if (balances[_from] >= _amount\n', '            && allowed[_from][msg.sender] >= _amount\n', '            && _amount > 0\n', '            && balances[_to] + _amount > balances[_to]) {\n', '            balances[_from] = safeSub(balances[_from],_amount);\n', '            allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender],_amount);\n', '            balances[_to] = safeAdd(balances[_to],_amount);\n', '            Transfer(_from, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function approve(address _spender, uint _value) returns (bool success) {\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) {\n', '           return false;\n', '        }\n', '        if (balances[msg.sender] < _value) {\n', '            return false;\n', '        }\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '     }\n', '\n', '     function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '       return allowed[_owner][_spender];\n', '     }\n', '}\n', '\n', '/**\n', ' * LookRev token initial offering.\n', ' *\n', ' * Token supply is created in the token contract creation and allocated to owner.\n', ' *\n', ' */\n', 'contract LookRevToken is StandardToken {\n', '\n', '    /*\n', '    *  Token meta data\n', '    */\n', '    string public constant name = "LookRev";\n', '    string public constant symbol = "LOK";\n', '    uint8 public constant decimals = 18;\n', "    string public VERSION = 'LOK1.2';\n", '    bool public finalised = false;\n', '    \n', '    address public wallet = 0x0;\n', '\n', '    mapping(address => bool) public kycRequired;\n', '\n', '    // Start - Friday, September 8, 2017 3:00:00 PM UTC (8:00:00 AM PDT GMT-07:00 DST)\n', '    uint public constant START_DATE = 1504882800;\n', '    // 3000 LOK Per ETH for the 1st 24 Hours - Till Saturday, September 9, 2017 3:00:00 PM UTC (8:00:00 AM PDT GMT-07:00 DST)\n', '    uint public constant BONUSONE_DATE = 1504969200;\n', '    // 2700 LOK Per ETH for the Next 48 Hours - Till Monday, September 11, 2017 3:00:00 PM UTC (8:00:00 AM PDT GMT-07:00 DST)\n', '    uint public constant BONUSTWO_DATE = 1505142000;\n', '    // Regular Rate - 2400 LOK Per ETH for the Remaining Part of the Crowdsale\n', '    // End - Sunday, October 8, 2017 3:00:00 PM UTC (8:00:00 AM PDT GMT-07:00 DST)\n', '    uint public constant END_DATE = 1507474800;\n', '\n', '    uint public constant DECIMALSFACTOR = 10**uint(decimals);\n', '    uint public constant TOKENS_SOFT_CAP =   10000000 * DECIMALSFACTOR;\n', '    uint public constant TOKENS_HARD_CAP = 2000000000 * DECIMALSFACTOR;\n', '    uint public constant TOKENS_TOTAL =    5000000000 * DECIMALSFACTOR;\n', '    uint public constant INITIAL_SUPPLY = 10000000 * DECIMALSFACTOR;\n', '\n', '    // 1 KETHER = 2,400,000 tokens\n', '    // 1 ETH = 2,400 tokens\n', '    uint public tokensPerKEther = 2400000;\n', '    uint public CONTRIBUTIONS_MIN = 0 ether;\n', '    uint public CONTRIBUTIONS_MAX = 0 ether;\n', '    uint public constant KYC_THRESHOLD = 100 * DECIMALSFACTOR;\n', '\n', '    function LookRevToken() {\n', '      owner = msg.sender;\n', '      wallet = owner;\n', '      totalSupply = INITIAL_SUPPLY;\n', '      balances[owner] = totalSupply;\n', '    }\n', '\n', '   // LookRev can change the crowdsale wallet address\n', '   function setWallet(address _wallet) onlyOwner {\n', '        wallet = _wallet;\n', '        WalletUpdated(wallet);\n', '    }\n', '    event WalletUpdated(address newWallet);\n', '\n', '    // Accept ethers to buy tokens during the crowdsale\n', '    function () payable {\n', '        proxyPayment(msg.sender);\n', '    }\n', '\n', '    // Accept ethers and exchanges to purchase tokens on behalf of user\n', '    // msg.value (in units of wei)\n', '    function proxyPayment(address participant) payable {\n', '\n', '        require(!finalised);\n', '\n', '        require(now <= END_DATE);\n', '\n', '        require(msg.value > CONTRIBUTIONS_MIN);\n', '        require(CONTRIBUTIONS_MAX == 0 || msg.value < CONTRIBUTIONS_MAX);\n', '\n', '         // Add in bonus during the first 24 and 48 hours of the token sale\n', '         if (now < START_DATE) {\n', '            tokensPerKEther = 2400000;\n', '         } else if (now < BONUSONE_DATE) {\n', '            tokensPerKEther = 3000000;\n', '         } else if (now < BONUSTWO_DATE) {\n', '            tokensPerKEther = 2700000;\n', '         } else {\n', '            tokensPerKEther = 2400000;\n', '         }\n', '\n', '         // Calculate number of tokens for contributed ETH\n', '         // `18` is the ETH decimals\n', '         // `- decimals` is the token decimals\n', '         uint tokens = msg.value * tokensPerKEther / 10**uint(18 - decimals + 3);\n', '\n', '         // Check if the hard cap will be exceeded\n', '         require(totalSupply + tokens <= TOKENS_HARD_CAP);\n', '\n', "         // Add tokens purchased to account's balance and total supply\n", '         balances[participant] = safeAdd(balances[participant],tokens);\n', '         totalSupply = safeAdd(totalSupply,tokens);\n', '\n', '         // Log the tokens purchased \n', '         Transfer(0x0, participant, tokens);\n', '         // - buyer = participant\n', '         // - ethers = msg.value\n', '         // - participantTokenBalance = balances[participant]\n', '         // - tokens = tokens\n', '         // - newTotalSupply = totalSupply\n', '         // - tokensPerKEther = tokensPerKEther\n', '         TokensBought(participant, msg.value, balances[participant], tokens,\n', '              totalSupply, tokensPerKEther);\n', '\n', '         if (msg.value > KYC_THRESHOLD) {\n', '             // KYC verification required before participant can transfer the tokens\n', '             kycRequired[participant] = true;\n', '         }\n', '\n', '         // Transfer the contributed ethers to the crowdsale wallet\n', '         // throw is deprecated starting from Ethereum v0.9.0\n', '         wallet.transfer(msg.value);\n', '    }\n', '\n', '    event TokensBought(address indexed buyer, uint ethers, \n', '        uint participantTokenBalance, uint tokens, uint newTotalSupply, \n', '        uint _tokensPerKEther);\n', '\n', '    function finalise() onlyOwner {\n', '        // Can only finalise if raised > soft cap or after the end date\n', '        require(totalSupply >= TOKENS_SOFT_CAP || now > END_DATE);\n', '\n', '        require(!finalised);\n', '\n', '        finalised = true;\n', '    }\n', '\n', '   function addPrecommitment(address participant, uint balance) onlyOwner {\n', '        require(now < START_DATE);\n', '        require(balance > 0);\n', '        balances[participant] = safeAdd(balances[participant],balance);\n', '        totalSupply = safeAdd(totalSupply,balance);\n', '        Transfer(0x0, participant, balance);\n', '        PrecommitmentAdded(participant, balance);\n', '    }\n', '    event PrecommitmentAdded(address indexed participant, uint balance);\n', '\n', '    function transfer(address _to, uint _amount) returns (bool success) {\n', '        // Cannot transfer before crowdsale ends\n', '        // Allow awarding team members before, during and after crowdsale\n', '        require(finalised || msg.sender == owner);\n', '        require(!kycRequired[msg.sender]);\n', '        return super.transfer(_to, _amount);\n', '    }\n', '\n', '   function transferFrom(address _from, address _to, uint _amount) returns (bool success)\n', '    {\n', '        // Cannot transfer before crowdsale ends\n', '        require(finalised);\n', '        require(!kycRequired[_from]);\n', '        return super.transferFrom(_from, _to, _amount);\n', '    }\n', '\n', '    function kycVerify(address participant, bool _required) onlyOwner {\n', '        kycRequired[participant] = _required;\n', '        KycVerified(participant, kycRequired[participant]);\n', '    }\n', '    event KycVerified(address indexed participant, bool required);\n', '\n', "    // Any account can burn _from's tokens as long as the _from account has\n", '    // approved the _amount to be burnt using approve(0x0, _amount)\n', '    function burnFrom(address _from, uint _amount) returns (bool success) {\n', '        require(totalSupply >= _amount);\n', '\n', '        if (balances[_from] >= _amount\n', '            && allowed[_from][0x0] >= _amount\n', '            && _amount > 0\n', '            && balances[0x0] + _amount > balances[0x0]\n', '        ) {\n', '            balances[_from] = safeSub(balances[_from],_amount);\n', '            balances[0x0] = safeAdd(balances[0x0],_amount);\n', '            allowed[_from][0x0] = safeSub(allowed[_from][0x0],_amount);\n', '            totalSupply = safeSub(totalSupply,_amount);\n', '            Transfer(_from, 0x0, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // LookRev can transfer out any accidentally sent ERC20 tokens\n', '    function transferAnyERC20Token(address tokenAddress, uint amount) onlyOwner returns (bool success) \n', '    {\n', '        return ERC20(tokenAddress).transfer(owner, amount);\n', '    }\n', '}']
