['pragma solidity 0.4.16;\n', '\n', '\n', 'contract ControllerInterface {\n', '\n', '\n', '  // State Variables\n', '  bool public paused;\n', '  address public nutzAddr;\n', '\n', '  // Nutz functions\n', '  function babzBalanceOf(address _owner) constant returns (uint256);\n', '  function activeSupply() constant returns (uint256);\n', '  function burnPool() constant returns (uint256);\n', '  function powerPool() constant returns (uint256);\n', '  function totalSupply() constant returns (uint256);\n', '  function allowance(address _owner, address _spender) constant returns (uint256);\n', '\n', '  function approve(address _owner, address _spender, uint256 _amountBabz) public;\n', '  function transfer(address _from, address _to, uint256 _amountBabz, bytes _data) public;\n', '  function transferFrom(address _sender, address _from, address _to, uint256 _amountBabz, bytes _data) public;\n', '\n', '  // Market functions\n', '  function floor() constant returns (uint256);\n', '  function ceiling() constant returns (uint256);\n', '\n', '  function purchase(address _sender, uint256 _value, uint256 _price) public returns (uint256);\n', '  function sell(address _from, uint256 _price, uint256 _amountBabz);\n', '\n', '  // Power functions\n', '  function powerBalanceOf(address _owner) constant returns (uint256);\n', '  function outstandingPower() constant returns (uint256);\n', '  function authorizedPower() constant returns (uint256);\n', '  function powerTotalSupply() constant returns (uint256);\n', '\n', '  function powerUp(address _sender, address _from, uint256 _amountBabz) public;\n', '  function downTick(address _owner, uint256 _now) public;\n', '  function createDownRequest(address _owner, uint256 _amountPower) public;\n', '  function downs(address _owner) constant public returns(uint256, uint256, uint256);\n', '  function downtime() constant returns (uint256);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', ' \n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/*\n', ' * ERC20Basic\n', ' * Simpler version of ERC20 interface\n', ' * see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() constant returns (uint256);\n', '  function balanceOf(address _owner) constant returns (uint256);\n', '  function transfer(address _to, uint256 _value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', '\n', 'contract Power is Ownable, ERC20Basic {\n', '\n', '  event Slashing(address indexed holder, uint value, bytes32 data);\n', '\n', '  string public name = "Acebusters Power";\n', '  string public symbol = "ABP";\n', '  uint256 public decimals = 12;\n', '\n', '\n', '  function balanceOf(address _holder) constant returns (uint256) {\n', '    return ControllerInterface(owner).powerBalanceOf(_holder);\n', '  }\n', '\n', '  function totalSupply() constant returns (uint256) {\n', '    return ControllerInterface(owner).powerTotalSupply();\n', '  }\n', '\n', '  function activeSupply() constant returns (uint256) {\n', '    return ControllerInterface(owner).outstandingPower();\n', '  }\n', '\n', '\n', '  // ############################################\n', '  // ########### ADMIN FUNCTIONS ################\n', '  // ############################################\n', '\n', '  function slashPower(address _holder, uint256 _value, bytes32 _data) public onlyOwner {\n', '    Slashing(_holder, _value, _data);\n', '  }\n', '\n', '  function powerUp(address _holder, uint256 _value) public onlyOwner {\n', '    // NTZ transfered from user&#39;s balance to power pool\n', '    Transfer(address(0), _holder, _value);\n', '  }\n', '\n', '  // ############################################\n', '  // ########### PUBLIC FUNCTIONS ###############\n', '  // ############################################\n', '\n', '  // registers a powerdown request\n', '  function transfer(address _to, uint256 _amountPower) public returns (bool success) {\n', '    // make Power not transferable\n', '    require(_to == address(0));\n', '    ControllerInterface(owner).createDownRequest(msg.sender, _amountPower);\n', '    Transfer(msg.sender, address(0), _amountPower);\n', '    return true;\n', '  }\n', '\n', '  function downtime() public returns (uint256) {\n', '    ControllerInterface(owner).downtime;\n', '  }\n', '\n', '  function downTick(address _owner) public {\n', '    ControllerInterface(owner).downTick(_owner, now);\n', '  }\n', '\n', '  function downs(address _owner) constant public returns (uint256, uint256, uint256) {\n', '    return ControllerInterface(owner).downs(_owner);\n', '  }\n', '\n', '}']
['pragma solidity 0.4.16;\n', '\n', '\n', 'contract ControllerInterface {\n', '\n', '\n', '  // State Variables\n', '  bool public paused;\n', '  address public nutzAddr;\n', '\n', '  // Nutz functions\n', '  function babzBalanceOf(address _owner) constant returns (uint256);\n', '  function activeSupply() constant returns (uint256);\n', '  function burnPool() constant returns (uint256);\n', '  function powerPool() constant returns (uint256);\n', '  function totalSupply() constant returns (uint256);\n', '  function allowance(address _owner, address _spender) constant returns (uint256);\n', '\n', '  function approve(address _owner, address _spender, uint256 _amountBabz) public;\n', '  function transfer(address _from, address _to, uint256 _amountBabz, bytes _data) public;\n', '  function transferFrom(address _sender, address _from, address _to, uint256 _amountBabz, bytes _data) public;\n', '\n', '  // Market functions\n', '  function floor() constant returns (uint256);\n', '  function ceiling() constant returns (uint256);\n', '\n', '  function purchase(address _sender, uint256 _value, uint256 _price) public returns (uint256);\n', '  function sell(address _from, uint256 _price, uint256 _amountBabz);\n', '\n', '  // Power functions\n', '  function powerBalanceOf(address _owner) constant returns (uint256);\n', '  function outstandingPower() constant returns (uint256);\n', '  function authorizedPower() constant returns (uint256);\n', '  function powerTotalSupply() constant returns (uint256);\n', '\n', '  function powerUp(address _sender, address _from, uint256 _amountBabz) public;\n', '  function downTick(address _owner, uint256 _now) public;\n', '  function createDownRequest(address _owner, uint256 _amountPower) public;\n', '  function downs(address _owner) constant public returns(uint256, uint256, uint256);\n', '  function downtime() constant returns (uint256);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', ' \n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/*\n', ' * ERC20Basic\n', ' * Simpler version of ERC20 interface\n', ' * see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() constant returns (uint256);\n', '  function balanceOf(address _owner) constant returns (uint256);\n', '  function transfer(address _to, uint256 _value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', '\n', 'contract Power is Ownable, ERC20Basic {\n', '\n', '  event Slashing(address indexed holder, uint value, bytes32 data);\n', '\n', '  string public name = "Acebusters Power";\n', '  string public symbol = "ABP";\n', '  uint256 public decimals = 12;\n', '\n', '\n', '  function balanceOf(address _holder) constant returns (uint256) {\n', '    return ControllerInterface(owner).powerBalanceOf(_holder);\n', '  }\n', '\n', '  function totalSupply() constant returns (uint256) {\n', '    return ControllerInterface(owner).powerTotalSupply();\n', '  }\n', '\n', '  function activeSupply() constant returns (uint256) {\n', '    return ControllerInterface(owner).outstandingPower();\n', '  }\n', '\n', '\n', '  // ############################################\n', '  // ########### ADMIN FUNCTIONS ################\n', '  // ############################################\n', '\n', '  function slashPower(address _holder, uint256 _value, bytes32 _data) public onlyOwner {\n', '    Slashing(_holder, _value, _data);\n', '  }\n', '\n', '  function powerUp(address _holder, uint256 _value) public onlyOwner {\n', "    // NTZ transfered from user's balance to power pool\n", '    Transfer(address(0), _holder, _value);\n', '  }\n', '\n', '  // ############################################\n', '  // ########### PUBLIC FUNCTIONS ###############\n', '  // ############################################\n', '\n', '  // registers a powerdown request\n', '  function transfer(address _to, uint256 _amountPower) public returns (bool success) {\n', '    // make Power not transferable\n', '    require(_to == address(0));\n', '    ControllerInterface(owner).createDownRequest(msg.sender, _amountPower);\n', '    Transfer(msg.sender, address(0), _amountPower);\n', '    return true;\n', '  }\n', '\n', '  function downtime() public returns (uint256) {\n', '    ControllerInterface(owner).downtime;\n', '  }\n', '\n', '  function downTick(address _owner) public {\n', '    ControllerInterface(owner).downTick(_owner, now);\n', '  }\n', '\n', '  function downs(address _owner) constant public returns (uint256, uint256, uint256) {\n', '    return ControllerInterface(owner).downs(_owner);\n', '  }\n', '\n', '}']
