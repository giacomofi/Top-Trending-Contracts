['pragma solidity ^0.4.11;\n', ' \n', 'contract Token {\n', '    string public symbol = "711";\n', '    string public name = "711 token";\n', '    uint8 public constant decimals = 18;\n', '    uint256 _totalSupply = 711000000000000000000;\n', '    address owner = 0;\n', '    bool startDone = false;\n', '    uint public amountRaised;\n', '    uint public deadline;\n', '    uint public overRaisedUnsend = 0;\n', '    uint public backers = 0;\n', '    uint rate = 4;\n', '    uint successcoef = 2;\n', '    uint unreserved = 80;\n', '    uint _durationInMinutes = 0;\n', '    bool fundingGoalReached = false;\n', '    mapping(address => uint256) public balanceOf;\n', '\t\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    mapping(address => uint256) balances;\n', ' \n', '    mapping(address => mapping (address => uint256)) allowed;\n', ' \n', '    function Token(address adr) {\n', '\t\towner = adr;        \n', '    }\n', '\t\n', '\tfunction StartICO(uint256 durationInMinutes)\n', '\t{\n', '\t\tif (msg.sender == owner && startDone == false)\n', '\t\t{\n', '\t\t\tbalances[owner] = _totalSupply;\n', '\t\t\t_durationInMinutes = durationInMinutes;\n', '            deadline = now + durationInMinutes * 1 minutes;\n', '\t\t\tstartDone = true;\n', '\t\t}\n', '\t}\n', ' \n', '    function totalSupply() constant returns (uint256 totalSupply) {        \n', '\t\treturn _totalSupply;\n', '    }\n', ' \n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', ' \n', '    function transfer(address _to, uint256 _amount) returns (bool success) {\n', '        if (balances[msg.sender] >= _amount \n', '            && _amount > 0\n', '            && balances[_to] + _amount > balances[_to]) {\n', '            balances[msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(msg.sender, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', ' \n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', '    ) returns (bool success) {\n', '        if (balances[_from] >= _amount\n', '            && allowed[_from][msg.sender] >= _amount\n', '            && _amount > 0\n', '            && balances[_to] + _amount > balances[_to]) {\n', '            balances[_from] -= _amount;\n', '            allowed[_from][msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(_from, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '    \n', '    function () payable {\n', '        uint _amount = msg.value;\n', '        uint amount = msg.value;\n', '        _amount = _amount * rate;\n', '        if (amountRaised + _amount <= _totalSupply * unreserved / 100\n', '            && balances[owner] >= _amount\n', '            && _amount > 0\n', '            && balances[msg.sender] + _amount > balances[msg.sender]\n', '            && now <= deadline\n', '            && !fundingGoalReached \n', '            && startDone) {\n', '        backers += 1;\n', '        balances[msg.sender] += _amount;\n', '        balances[owner] -= _amount;\n', '        amountRaised += _amount;\n', '        Transfer(owner, msg.sender, _amount);\n', '        } else {\n', '            if (!msg.sender.send(amount)) {\n', '                overRaisedUnsend += amount; \n', '            }\n', '        }\n', '    }\n', ' \n', '    function approve(address _spender, uint256 _amount) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', ' \n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    modifier afterDeadline() { if (now > deadline || amountRaised >= _totalSupply / successcoef) _; }\n', '\n', '    function safeWithdrawal() afterDeadline {\n', '\n', '    if (amountRaised < _totalSupply / successcoef) {\n', '            uint _amount = balances[msg.sender];\n', '            balances[msg.sender] = 0;\n', '            if (_amount > 0) {\n', '                if (msg.sender.send(_amount / rate)) {\n', '                    balances[owner] += _amount;\n', '                    amountRaised -= _amount;\n', '                    Transfer(msg.sender, owner, _amount);\n', '                } else {\n', '                    balances[msg.sender] = _amount;\n', '                }\n', '            }\n', '        }\n', '\n', '    if (owner == msg.sender\n', '    \t&& amountRaised >= _totalSupply / successcoef) {\n', '           if (owner.send(this.balance)) {\n', '               fundingGoalReached = true;\n', '            } \n', '        }\n', '    }\n', '}']
['pragma solidity ^0.4.11;\n', ' \n', 'contract Token {\n', '    string public symbol = "711";\n', '    string public name = "711 token";\n', '    uint8 public constant decimals = 18;\n', '    uint256 _totalSupply = 711000000000000000000;\n', '    address owner = 0;\n', '    bool startDone = false;\n', '    uint public amountRaised;\n', '    uint public deadline;\n', '    uint public overRaisedUnsend = 0;\n', '    uint public backers = 0;\n', '    uint rate = 4;\n', '    uint successcoef = 2;\n', '    uint unreserved = 80;\n', '    uint _durationInMinutes = 0;\n', '    bool fundingGoalReached = false;\n', '    mapping(address => uint256) public balanceOf;\n', '\t\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    mapping(address => uint256) balances;\n', ' \n', '    mapping(address => mapping (address => uint256)) allowed;\n', ' \n', '    function Token(address adr) {\n', '\t\towner = adr;        \n', '    }\n', '\t\n', '\tfunction StartICO(uint256 durationInMinutes)\n', '\t{\n', '\t\tif (msg.sender == owner && startDone == false)\n', '\t\t{\n', '\t\t\tbalances[owner] = _totalSupply;\n', '\t\t\t_durationInMinutes = durationInMinutes;\n', '            deadline = now + durationInMinutes * 1 minutes;\n', '\t\t\tstartDone = true;\n', '\t\t}\n', '\t}\n', ' \n', '    function totalSupply() constant returns (uint256 totalSupply) {        \n', '\t\treturn _totalSupply;\n', '    }\n', ' \n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', ' \n', '    function transfer(address _to, uint256 _amount) returns (bool success) {\n', '        if (balances[msg.sender] >= _amount \n', '            && _amount > 0\n', '            && balances[_to] + _amount > balances[_to]) {\n', '            balances[msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(msg.sender, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', ' \n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', '    ) returns (bool success) {\n', '        if (balances[_from] >= _amount\n', '            && allowed[_from][msg.sender] >= _amount\n', '            && _amount > 0\n', '            && balances[_to] + _amount > balances[_to]) {\n', '            balances[_from] -= _amount;\n', '            allowed[_from][msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(_from, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '    \n', '    function () payable {\n', '        uint _amount = msg.value;\n', '        uint amount = msg.value;\n', '        _amount = _amount * rate;\n', '        if (amountRaised + _amount <= _totalSupply * unreserved / 100\n', '            && balances[owner] >= _amount\n', '            && _amount > 0\n', '            && balances[msg.sender] + _amount > balances[msg.sender]\n', '            && now <= deadline\n', '            && !fundingGoalReached \n', '            && startDone) {\n', '        backers += 1;\n', '        balances[msg.sender] += _amount;\n', '        balances[owner] -= _amount;\n', '        amountRaised += _amount;\n', '        Transfer(owner, msg.sender, _amount);\n', '        } else {\n', '            if (!msg.sender.send(amount)) {\n', '                overRaisedUnsend += amount; \n', '            }\n', '        }\n', '    }\n', ' \n', '    function approve(address _spender, uint256 _amount) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', ' \n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    modifier afterDeadline() { if (now > deadline || amountRaised >= _totalSupply / successcoef) _; }\n', '\n', '    function safeWithdrawal() afterDeadline {\n', '\n', '    if (amountRaised < _totalSupply / successcoef) {\n', '            uint _amount = balances[msg.sender];\n', '            balances[msg.sender] = 0;\n', '            if (_amount > 0) {\n', '                if (msg.sender.send(_amount / rate)) {\n', '                    balances[owner] += _amount;\n', '                    amountRaised -= _amount;\n', '                    Transfer(msg.sender, owner, _amount);\n', '                } else {\n', '                    balances[msg.sender] = _amount;\n', '                }\n', '            }\n', '        }\n', '\n', '    if (owner == msg.sender\n', '    \t&& amountRaised >= _totalSupply / successcoef) {\n', '           if (owner.send(this.balance)) {\n', '               fundingGoalReached = true;\n', '            } \n', '        }\n', '    }\n', '}']
