['pragma solidity ^0.4.11;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) onlyOwner \n', '  {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Contactable is Ownable {\n', '\n', '    string public contactInformation;\n', '\n', '    function setContactInformation(string info) onlyOwner \n', '    {\n', '      contactInformation = info;\n', '    }\n', '}\n', '\n', 'contract Destructible is Ownable {\n', '\n', '  function Destructible() payable \n', '  { \n', '\n', '  } \n', '\n', '  function destroy() onlyOwner \n', '  {\n', '    selfdestruct(owner);\n', '  }\n', '\n', '  function destroyAndSend(address _recipient) onlyOwner \n', '  {\n', '    selfdestruct(_recipient);\n', '  }\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  function pause() onlyOwner whenNotPaused \n', '  {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  function unpause() onlyOwner whenPaused \n', '  {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '\n', 'contract ERC20 {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) constant returns (uint256);\n', '    \n', '    function transfer(address to, uint256 value) returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    \n', '    function allowance(address owner, address spender) constant returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) returns (bool);\n', '    \n', '    function approve(address spender, uint256 value) returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20 {\n', '    using SafeMath for uint256;\n', '    mapping(address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', ' \n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(0x0, _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', 'contract BurnCoin is Ownable, Destructible, Contactable, MintableToken {\n', '    \n', '    using SafeMath for uint256;\n', '\n', '    uint256 public startBlock;\n', '    uint256 public endBlock;\n', '\n', '    address public wallet;\n', '\n', '    uint256 public rate;\n', '\n', '    uint256 public weiRaised;\n', '\n', '    uint256 constant maxavailable = 10000000000000000000000;\n', '\n', '    string public name = "BurnCoin";\n', '\n', '    string public symbol = "BRN";\n', '    uint public decimals = 18;\n', '    uint public ownerstake = 5001000000000000000000;\n', '    address public owner;\n', '    bool public locked;\n', '    \n', '    modifier onlyUnlocked() {\n', '\n', '      if (owner != msg.sender) {\n', '        require(false == locked);\n', '      }\n', '      _;\n', '    }\n', '\n', '  function BurnCoin() {\n', '      startBlock = block.number;\n', '      endBlock = startBlock + 10000000;\n', '        \n', '      require(endBlock >= startBlock);\n', '        \n', '      rate = 1;\n', '      wallet = msg.sender;\n', '      locked = true;\n', '      owner = msg.sender;\n', '      totalSupply = maxavailable;\n', '      balances[owner] = maxavailable;\n', '      contactInformation = "BurnCoin (BRN) : Burn Fiat. Make Coin.";\n', '  }\n', '\n', '  function unlock() onlyOwner \n', '    {\n', '      require(locked);\n', '      locked = false;\n', '  }\n', '  \n', '  \n', '  function transferFrom(address _from, address _to, uint256 _value) onlyUnlocked returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '  \n', '   function transfer(address _to, uint256 _value) onlyUnlocked returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    function () payable \n', '    {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    function buyTokens(address beneficiary) payable\n', '     {\n', '        require(beneficiary != 0x0);\n', '        require(validPurchase());\n', '        uint256 weiAmount = msg.value;\n', '        uint256 tokens = weiAmount.mul(rate);\n', '        weiRaised = weiRaised.add(weiAmount);\n', '        balances[owner] = balances[owner].sub(tokens);\n', '        balances[beneficiary] = balances[beneficiary].add(tokens);\n', '        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '        forwardFunds();\n', '        \n', '    }\n', '\n', '    function forwardFunds() internal \n', '    {\n', '        wallet.transfer(msg.value);\n', '    }\n', '\n', '    function validPurchase() internal constant returns (bool) {\n', '        uint256 current = block.number;\n', '        bool withinPeriod = current >= startBlock && current <= endBlock;\n', '        bool nonZeroPurchase = msg.value != 0;\n', '        bool nonMaxPurchase = msg.value <= 1000 ether;\n', '        bool maxavailableNotReached = balances[owner] > ownerstake;\n', '        return withinPeriod && nonZeroPurchase && nonMaxPurchase && maxavailableNotReached;\n', '    }\n', '\n', '    function hasEnded() public constant returns (bool) {\n', '        return block.number > endBlock;\n', '    }\n', '\n', '   function burn(uint _value) onlyOwner \n', '   {\n', '        require(_value > 0);\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(burner, _value);\n', '    }\n', '\n', '    event Burn(address indexed burner, uint indexed value);\n', '\n', '}']
['pragma solidity ^0.4.11;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) onlyOwner \n', '  {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Contactable is Ownable {\n', '\n', '    string public contactInformation;\n', '\n', '    function setContactInformation(string info) onlyOwner \n', '    {\n', '      contactInformation = info;\n', '    }\n', '}\n', '\n', 'contract Destructible is Ownable {\n', '\n', '  function Destructible() payable \n', '  { \n', '\n', '  } \n', '\n', '  function destroy() onlyOwner \n', '  {\n', '    selfdestruct(owner);\n', '  }\n', '\n', '  function destroyAndSend(address _recipient) onlyOwner \n', '  {\n', '    selfdestruct(_recipient);\n', '  }\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  function pause() onlyOwner whenNotPaused \n', '  {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  function unpause() onlyOwner whenPaused \n', '  {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '\n', 'contract ERC20 {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) constant returns (uint256);\n', '    \n', '    function transfer(address to, uint256 value) returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    \n', '    function allowance(address owner, address spender) constant returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) returns (bool);\n', '    \n', '    function approve(address spender, uint256 value) returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20 {\n', '    using SafeMath for uint256;\n', '    mapping(address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', ' \n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(0x0, _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', 'contract BurnCoin is Ownable, Destructible, Contactable, MintableToken {\n', '    \n', '    using SafeMath for uint256;\n', '\n', '    uint256 public startBlock;\n', '    uint256 public endBlock;\n', '\n', '    address public wallet;\n', '\n', '    uint256 public rate;\n', '\n', '    uint256 public weiRaised;\n', '\n', '    uint256 constant maxavailable = 10000000000000000000000;\n', '\n', '    string public name = "BurnCoin";\n', '\n', '    string public symbol = "BRN";\n', '    uint public decimals = 18;\n', '    uint public ownerstake = 5001000000000000000000;\n', '    address public owner;\n', '    bool public locked;\n', '    \n', '    modifier onlyUnlocked() {\n', '\n', '      if (owner != msg.sender) {\n', '        require(false == locked);\n', '      }\n', '      _;\n', '    }\n', '\n', '  function BurnCoin() {\n', '      startBlock = block.number;\n', '      endBlock = startBlock + 10000000;\n', '        \n', '      require(endBlock >= startBlock);\n', '        \n', '      rate = 1;\n', '      wallet = msg.sender;\n', '      locked = true;\n', '      owner = msg.sender;\n', '      totalSupply = maxavailable;\n', '      balances[owner] = maxavailable;\n', '      contactInformation = "BurnCoin (BRN) : Burn Fiat. Make Coin.";\n', '  }\n', '\n', '  function unlock() onlyOwner \n', '    {\n', '      require(locked);\n', '      locked = false;\n', '  }\n', '  \n', '  \n', '  function transferFrom(address _from, address _to, uint256 _value) onlyUnlocked returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '  \n', '   function transfer(address _to, uint256 _value) onlyUnlocked returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    function () payable \n', '    {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    function buyTokens(address beneficiary) payable\n', '     {\n', '        require(beneficiary != 0x0);\n', '        require(validPurchase());\n', '        uint256 weiAmount = msg.value;\n', '        uint256 tokens = weiAmount.mul(rate);\n', '        weiRaised = weiRaised.add(weiAmount);\n', '        balances[owner] = balances[owner].sub(tokens);\n', '        balances[beneficiary] = balances[beneficiary].add(tokens);\n', '        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '        forwardFunds();\n', '        \n', '    }\n', '\n', '    function forwardFunds() internal \n', '    {\n', '        wallet.transfer(msg.value);\n', '    }\n', '\n', '    function validPurchase() internal constant returns (bool) {\n', '        uint256 current = block.number;\n', '        bool withinPeriod = current >= startBlock && current <= endBlock;\n', '        bool nonZeroPurchase = msg.value != 0;\n', '        bool nonMaxPurchase = msg.value <= 1000 ether;\n', '        bool maxavailableNotReached = balances[owner] > ownerstake;\n', '        return withinPeriod && nonZeroPurchase && nonMaxPurchase && maxavailableNotReached;\n', '    }\n', '\n', '    function hasEnded() public constant returns (bool) {\n', '        return block.number > endBlock;\n', '    }\n', '\n', '   function burn(uint _value) onlyOwner \n', '   {\n', '        require(_value > 0);\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(burner, _value);\n', '    }\n', '\n', '    event Burn(address indexed burner, uint indexed value);\n', '\n', '}']
