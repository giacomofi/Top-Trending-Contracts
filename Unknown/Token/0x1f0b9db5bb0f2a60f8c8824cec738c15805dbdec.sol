['contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\n', '\n', '    contract Nexium { \n', '        /* Public variables of the token */\n', '        string public name;\n', '        string public symbol;\n', '        uint8 public decimals;\n', '\n', '        /* This creates an array with all balances */\n', '        mapping (address => uint256) public balanceOf;\n', '        mapping (address => mapping (address => uint)) public allowance;\n', '        mapping (address => mapping (address => uint)) public spentAllowance;\n', '\n', '        /* This generates a public event on the blockchain that will notify clients */\n', '        event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '        /* Initializes contract with initial supply tokens to the creator of the contract */\n', '        function Nexium() {\n', '            balanceOf[msg.sender] = 100000000000;              // Give the creator all initial tokens                    \n', "            name = 'Nexium';                                   // Set the name for display purposes     \n", "            symbol = 'NxC';                               // Set the symbol for display purposes    \n", '            decimals = 3;                            // Amount of decimals for display purposes        \n', '        }\n', '\n', '        /* Send coins */\n', '        function transfer(address _to, uint256 _value) {\n', '            if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough   \n', '            if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\n', '            balanceOf[msg.sender] -= _value;                     // Subtract from the sender\n', '            balanceOf[_to] += _value;                            // Add the same to the recipient            \n', '            Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n', '        }\n', '\n', '        /* Allow another contract to spend some tokens in your behalf */\n', '\n', '        function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '            allowance[msg.sender][_spender] = _value;     \n', '            tokenRecipient spender = tokenRecipient(_spender);\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '\t\t\t\n', '\t\t\treturn true;\n', '        }\n', '\n', '        /* A contract attempts to get the coins */\n', '\n', '        function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '            if (balanceOf[_from] < _value) throw;                 // Check if the sender has enough   \n', '            if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows\n', '            if (spentAllowance[_from][msg.sender] + _value > allowance[_from][msg.sender]) throw;   // Check allowance\n', '            balanceOf[_from] -= _value;                          // Subtract from the sender\n', '            balanceOf[_to] += _value;                            // Add the same to the recipient            \n', '            spentAllowance[_from][msg.sender] += _value;\n', '            Transfer(msg.sender, _to, _value); \n', '\t\t\t\n', '\t\t\treturn true;\n', '        } \n', '\n', '        /* This unnamed function is called whenever someone tries to send ether to it */\n', '        function () {\n', '            throw;     // Prevents accidental sending of ether\n', '        }        \n', '    }']