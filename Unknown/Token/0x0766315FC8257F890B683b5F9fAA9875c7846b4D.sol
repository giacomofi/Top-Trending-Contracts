['pragma solidity ^0.4.10;\n', ' \n', '\n', 'contract Burner {\n', '    function burnILF(address , uint ) {}\n', '}\n', '\n', 'contract StandardToken {\n', '\n', '    /* *  Data structures */\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalSupply;\n', '\n', '    /* *  Events */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    /* *  Read and write storage functions */\n', '    /// @dev Transfers sender&#39;s tokens to a given address. Returns success.\n', '    /// @param _to Address of token receiver.\n', '    /// @param _value Number of tokens to transfer.\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '        else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\n', '    /// @param _from Address from where tokens are withdrawn.\n', '    /// @param _to Address to where tokens are sent.\n', '    /// @param _value Number of tokens to transfer.\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        }\n', '        else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns number of tokens owned by given address.\n', '    /// @param _owner Address of token owner.\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /// @dev Sets approved amount of tokens for spender. Returns success.\n', '    /// @param _spender Address of allowed account.\n', '    /// @param _value Number of approved tokens.\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /* * Read storage functions */\n', '    /// @dev Returns number of allowed tokens for given address.\n', '    /// @param _owner Address of token owner.\n', '    /// @param _spender Address of token spender.\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '}\n', '\n', 'contract ILF is StandardToken {\n', '\n', '    mapping(address => bool) public previousMinters;\n', '    mapping(address => bool) public previousBurners;\n', '    bool public minterChangeable = true;\n', '    bool public burnerChangeable = true;\n', '    bool public manualEmissionEnabled = true;\n', '    string public constant symbol = "ILF";\n', '    string public constant name = "ICO Lab Fund Token";\n', '    uint8 public constant decimals = 8;\n', '    address public burnerAddress;\n', '    address public minterAddress;\n', '    address public ILFManager;\n', '    address public ILFManagerCandidate;   \n', '    bytes32 public ILFManagerCandidateKeyHash; \n', '    Burner burner;\n', '                                           \n', '    event Emission(address indexed emitTo, uint amount);\n', '    event Burn(address indexed burnFrom, uint amount);\n', '\n', '    // @dev Create token.\n', '    // @param _ILFManager ILF manager address.\n', '    function ILF(address _ILFManager){\n', '        ILFManager = _ILFManager;\n', '    }\n', '\n', '    /// @dev Emit new tokens for an address. Only usable by minter or manager.\n', '    /// @param emitTo Emission destination address.\n', '    /// @param amount Amount to emit.\n', '    function emitToken(address emitTo, uint amount) {\n', '        assert(amount>0);\n', '        assert(msg.sender == minterAddress || (msg.sender == ILFManager && manualEmissionEnabled));\n', '        balances[emitTo] += amount;\n', '        totalSupply += amount;\n', '        Emission(emitTo, amount);\n', '    }\n', '\n', '    /// @dev Burn tokens from an address. Only usable by burner.\n', '    /// @param burnFrom Address to burn tokens from.\n', '    /// @param amount Amount to burn.\n', '    function burnToken(address burnFrom, uint amount) external onlyBurner {\n', '        assert(amount <= balances[burnFrom] && amount <= totalSupply);\n', '        balances[burnFrom] -= amount;\n', '        totalSupply -= amount;\n', '        Burn(burnFrom, amount);\n', '    }\n', '\n', '    //Overloading the original ERC20 transfer function to handle token burn\n', '    /// @dev Transfers sender&#39;s tokens to a given address. Returns success.\n', '    /// @param _to Address of token receiver.\n', '    /// @param _value Number of tokens to transfer.\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        assert(!previousBurners[_to] && !previousMinters[_to] && _to != minterAddress);\n', '        \n', '        if (balances[msg.sender] >= _value && _value > 0 && _to != address(0) && _to != address(this)) {//The last two checks are done for preventing sending tokens to zero address or token address (this contract).\n', '            if (_to == burnerAddress) {\n', '                burner.burnILF(msg.sender, _value);\n', '            }\n', '            else {\n', '                balances[msg.sender] -= _value;\n', '                balances[_to] += _value;\n', '                Transfer(msg.sender, _to, _value);\n', '            }\n', '            return true;\n', '        }\n', '        else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        assert(!previousBurners[_to] && !previousMinters[_to] && _to != minterAddress);\n', '\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0 && _to != address(0) && _to != address(this)) {\n', '            if (_to == burnerAddress) {\n', '                burner.burnILF(_from, _value);\n', '            }\n', '            else {\n', '                balances[_to] += _value;\n', '                balances[_from] -= _value;\n', '                allowed[_from][msg.sender] -= _value;\n', '                Transfer(_from, _to, _value);\n', '            }\n', '            return true;\n', '        }\n', '        else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /// @dev Change minter manager. Only usable by manager.\n', '    /// @param candidate New manager address.\n', '    /// @param keyHash Hash of secret key possessed by candidate.\n', '    function changeILFManager(address candidate, bytes32 keyHash) external onlyILFManager {\n', '        ILFManagerCandidate = candidate;\n', '        ILFManagerCandidateKeyHash = keyHash;\n', '    }\n', '\n', '    /// @dev Accept taking manager role. Only usable by manager candidate.\n', '    /// @param key Hash of the secret key from the current manager.\n', '    function acceptManagement(string key) external onlyManagerCandidate(key) {\n', '        ILFManager = ILFManagerCandidate;\n', '    }\n', '\n', '    /// @dev Change minter address. Only usable by manager.\n', '    /// @param _minterAddress New minter address.\n', '    function changeMinter(address _minterAddress) external onlyILFManager {\n', '        assert(minterChangeable);\n', '        previousMinters[minterAddress]=true;\n', '        minterAddress = _minterAddress;\n', '    }\n', '\n', '    /// @dev Seals minter. After this procedure minter is no longer changeable.\n', '    /// @param _hash SHA3 hash of current minter address.\n', '    function sealMinter(bytes32 _hash) onlyILFManager {\n', '        assert(sha3(minterAddress)==_hash);\n', '        minterChangeable = false; \n', '    }\n', '    \n', '    /// @dev Change burner address. Only usable by manager.\n', '    /// @param _burnerAddress New burner address.\n', '    function changeBurner(address _burnerAddress) external onlyILFManager {\n', '        assert(burnerChangeable);\n', '        burner = Burner(_burnerAddress);\n', '        previousBurners[burnerAddress]=true;\n', '        burnerAddress = _burnerAddress;\n', '    }\n', '\n', '    /// @dev Seals burner. After this procedure burner is no longer changeable.\n', '    /// @param _hash SHA3 hash of current burner address.\n', '    function sealBurner(bytes32 _hash) onlyILFManager {\n', '        assert(sha3(burnerAddress)==_hash);\n', '        burnerChangeable = false; \n', '    }\n', '\n', '    /// @dev Disable calling emitToken by manager needed for initial token distribution. Only usable by manager.\n', '    /// @param _hash SHA3 Hash of current manager address.\n', '    function disableManualEmission(bytes32 _hash) onlyILFManager {\n', '        assert(sha3(ILFManager)==_hash);\n', '        manualEmissionEnabled = false; \n', '    }\n', '\n', '    modifier onlyILFManager() {\n', '        assert(msg.sender == ILFManager);\n', '        _;\n', '    }\n', '\n', '    modifier onlyMinter() {\n', '        assert(msg.sender == minterAddress);\n', '        _;\n', '    }\n', '\n', '    modifier onlyBurner() {\n', '        assert(msg.sender == burnerAddress);\n', '        _;\n', '    }\n', '\n', '    modifier onlyManagerCandidate(string key) {\n', '        assert(msg.sender == ILFManagerCandidate);\n', '        assert(sha3(key) == ILFManagerCandidateKeyHash);\n', '        _;\n', '    }\n', '\n', '}']