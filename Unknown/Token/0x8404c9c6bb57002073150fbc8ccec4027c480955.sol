['pragma solidity ^0.4.10;\n', '\n', 'contract DickButtCoin {\n', '    /* Public variables of the token */\n', '    string public standard = &#39;Token 0.69&#39;;\n', '    string public name = "Dick Butt Coin";\n', '    string public symbol = "DBC";\n', '    uint8 public decimals = 0;\n', '    uint256 public totalSupply = 0;\n', '\n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) _balance;\n', '    mapping (address => bool) _used;\n', '     \n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /* This notifies clients about the amount burnt */\n', '    event Burn(address indexed from, uint256 value);\n', '    \n', '    bool active;\n', '    uint public deactivateTime;\n', '    \n', '    function updateActivation() {\n', '        active = (now < deactivateTime);\n', '    }\n', '    \n', '    function balanceOf(address addr) constant returns(uint) {\n', '        if(active && _used[addr] == false) {\n', '            return _balance[addr] +1;\n', '        }\n', '        return _balance[addr];\n', '    }\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function MyToken() \n', '    {\n', '        deactivateTime = now + 90 days;\n', '\n', '    }\n', '    \n', '    modifier checkInit(address addr) {\n', '        if(active && _used[addr] == false) {\n', '           _used[addr] = true;\n', '           _balance[addr] ++; \n', '        }\n', '        _;\n', '    }\n', '\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) checkInit(msg.sender) {\n', '        if (_to == 0x0) throw;                               // Prevent transfer to 0x0 address. Use burn() instead\n', '        if (_balance[msg.sender] < _value) throw;           // Check if the sender has enough\n', '        if (_balance[_to] + _value < _balance[_to]) throw; // Check for overflows\n', '        _balance[msg.sender] -= _value;                     // Subtract from the sender\n', '        _balance[_to] += _value;                            // Add the same to the recipient\n', '        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n', '    }\n', '\n', '    /* Allow another contract to spend some tokens in your behalf */\n', '    function approve(address _spender, uint256 _value) checkInit(msg.sender)\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (_to == 0x0) throw;                                // Prevent transfer to 0x0 address. Use burn() instead\n', '        if (_balance[_from] < _value) throw;                 // Check if the sender has enough\n', '        if (_balance[_to] + _value < _balance[_to]) throw;  // Check for overflows\n', '        if (_value > allowance[_from][msg.sender]) throw;     // Check allowance\n', '        _balance[_from] -= _value;                           // Subtract from the sender\n', '        _balance[_to] += _value;                             // Add the same to the recipient\n', '        allowance[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.10;\n', '\n', 'contract DickButtCoin {\n', '    /* Public variables of the token */\n', "    string public standard = 'Token 0.69';\n", '    string public name = "Dick Butt Coin";\n', '    string public symbol = "DBC";\n', '    uint8 public decimals = 0;\n', '    uint256 public totalSupply = 0;\n', '\n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) _balance;\n', '    mapping (address => bool) _used;\n', '     \n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /* This notifies clients about the amount burnt */\n', '    event Burn(address indexed from, uint256 value);\n', '    \n', '    bool active;\n', '    uint public deactivateTime;\n', '    \n', '    function updateActivation() {\n', '        active = (now < deactivateTime);\n', '    }\n', '    \n', '    function balanceOf(address addr) constant returns(uint) {\n', '        if(active && _used[addr] == false) {\n', '            return _balance[addr] +1;\n', '        }\n', '        return _balance[addr];\n', '    }\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function MyToken() \n', '    {\n', '        deactivateTime = now + 90 days;\n', '\n', '    }\n', '    \n', '    modifier checkInit(address addr) {\n', '        if(active && _used[addr] == false) {\n', '           _used[addr] = true;\n', '           _balance[addr] ++; \n', '        }\n', '        _;\n', '    }\n', '\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) checkInit(msg.sender) {\n', '        if (_to == 0x0) throw;                               // Prevent transfer to 0x0 address. Use burn() instead\n', '        if (_balance[msg.sender] < _value) throw;           // Check if the sender has enough\n', '        if (_balance[_to] + _value < _balance[_to]) throw; // Check for overflows\n', '        _balance[msg.sender] -= _value;                     // Subtract from the sender\n', '        _balance[_to] += _value;                            // Add the same to the recipient\n', '        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n', '    }\n', '\n', '    /* Allow another contract to spend some tokens in your behalf */\n', '    function approve(address _spender, uint256 _value) checkInit(msg.sender)\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (_to == 0x0) throw;                                // Prevent transfer to 0x0 address. Use burn() instead\n', '        if (_balance[_from] < _value) throw;                 // Check if the sender has enough\n', '        if (_balance[_to] + _value < _balance[_to]) throw;  // Check for overflows\n', '        if (_value > allowance[_from][msg.sender]) throw;     // Check allowance\n', '        _balance[_from] -= _value;                           // Subtract from the sender\n', '        _balance[_to] += _value;                             // Add the same to the recipient\n', '        allowance[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '}']
