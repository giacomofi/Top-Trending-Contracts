['pragma solidity ^0.4.14;\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', ' \n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', ' \n', '\n', 'library SafeMath {\n', '    \n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', ' \n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', ' \n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', ' \n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  \n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    \n', '  using SafeMath for uint256;\n', ' \n', '  mapping(address => uint256) balances;\n', ' \n', ' function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', ' \n', '\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', ' \n', '}\n', ' \n', 'contract StandardToken is ERC20, BasicToken {\n', ' \n', '  mapping (address => mapping (address => uint256)) allowed;\n', ' \n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', ' \n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', ' \n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', ' \n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', ' \n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', ' \n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', ' \n', '}\n', ' \n', 'contract Ownable {\n', '    \n', '  address public owner;\n', ' \n', ' \n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', ' \n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', ' \n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', ' \n', '}\n', ' \n', 'contract TheLiquidToken is StandardToken, Ownable {\n', 'bytes32 public currentChallenge;                         // The coin starts with a challenge\n', 'uint public timeOfLastProof;                             // Variable to keep track of when rewards were given\n', 'uint public difficulty = 10**1;                         // Difficulty starts reasonably low\n', '\n', 'function proofOfWork(uint nonce){\n', '    bytes8 n = bytes8(sha3(nonce, currentChallenge));    // Generate a random hash based on input\n', '    if (n < bytes8(difficulty)) throw;                   // Check if it&#39;s under the difficulty\n', '\n', '    uint timeSinceLastProof = (now - timeOfLastProof);  // Calculate time since last reward was given\n', '    if (timeSinceLastProof <  30 seconds) throw;         // Rewards cannot be given too quickly\n', '    balances[msg.sender] += timeSinceLastProof / 60 seconds;  // The reward to the winner grows by the minute\n', '\n', '    difficulty = difficulty * 10 minutes / timeSinceLastProof + 1;  // Adjusts the difficulty\n', '\n', '    timeOfLastProof = now;                              // Reset the counter\n', '    currentChallenge = sha3(nonce, currentChallenge, block.blockhash(block.number-1));  // Save a hash that will be used as the next proof\n', '}\n', '\n', '  \n', '}\n', '    \n', 'contract MineablePOWCoin is TheLiquidToken {\n', '  string public constant name = "POWCoin";\n', '  string public constant symbol = "POW";\n', '  uint public constant decimals = 1;\n', '  uint256 public initialSupply;\n', '    \n', '  function MineablePOWCoin () { \n', '     totalSupply = 1 * 10 ** decimals;\n', '      balances[msg.sender] = totalSupply;\n', '      initialSupply = totalSupply; \n', '        Transfer(0, this, totalSupply);\n', '        Transfer(this, msg.sender, totalSupply);\n', '  }\n', '}']