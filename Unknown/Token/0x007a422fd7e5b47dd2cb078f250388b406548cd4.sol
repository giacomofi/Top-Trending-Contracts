['pragma solidity ^0.4.16;\n', '\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  \n', '   //@dev transfer token for a specified address\n', '  // @param _to The address to transfer to.\n', '   //@param _value The amount to be transferred.\n', '   \n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  \n', '   //@dev Gets the balance of the specified address.\n', '   //@param _owner The address to query the the balance of. \n', '  // @return An uint256 representing the amount owned by the passed address.\n', '  \n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '  \n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until \n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint256 _addedValue) \n', '    returns (bool success) \n', '    {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint256 _subtractedValue) \n', '    returns (bool success) \n', '    {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '    //@dev The Ownable constructor sets the original `owner` of the contract to the sender account.\n', '   function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '    //@dev Throws if called by any account other than the owner.\n', '   modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '    //@dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    //@param newOwner The address to transfer ownership to.\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '    //@title Pausable\n', '    //@dev Base contract which allows children to implement an emergency stop mechanism for trading.\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '    //@dev Modifier to make a function callable only when the contract is not paused.\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '    //@dev Modifier to make a function callable only when the contract is paused.\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '    //@dev called by the owner to pause, triggers stopped state\n', '  function pause() onlyOwner whenNotPaused {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '    //@dev called by the owner to unpause, returns to normal state\n', '  function unpause() onlyOwner whenPaused {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '    //@title Pausable\n', '    //@dev Base contract which allows children to implement an emergency stop mechanism for crowdsale.\n', 'contract SalePausable is Ownable {\n', '  event SalePause();\n', '  event SaleUnpause();\n', '\n', '  bool public salePaused = false;\n', '\n', '    //@dev Modifier to make a function callable only when the contract is not paused.\n', '  modifier saleWhenNotPaused() {\n', '    require(!salePaused);\n', '    _;\n', '  }\n', '\n', '    //@dev Modifier to make a function callable only when the contract is paused.\n', '  modifier saleWhenPaused() {\n', '    require(salePaused);\n', '    _;\n', '  }\n', '\n', '    //@dev called by the owner to pause, triggers stopped state\n', '  function salePause() onlyOwner saleWhenNotPaused {\n', '    salePaused = true;\n', '    SalePause();\n', '  }\n', '    //@dev called by the owner to unpause, returns to normal state\n', '  function saleUnpause() onlyOwner saleWhenPaused {\n', '    salePaused = false;\n', '    SaleUnpause();\n', '  }\n', '}\n', '\n', 'contract PriceUpdate is Ownable {\n', '  uint256 public price;\n', '\n', '    //@dev The Ownable constructor sets the original `price` of the BLT token to the sender account.\n', '   function PriceUpdate() {\n', '    price = 400;\n', '  }\n', '\n', '    //@dev Allows the current owner to change the price of the token per ether.\n', '  function newPrice(uint256 _newPrice) onlyOwner {\n', '    require(_newPrice > 0);\n', '    price = _newPrice;\n', '  }\n', '\n', '}\n', '\n', 'contract BLTToken is StandardToken, Ownable, PriceUpdate, Pausable, SalePausable {\n', '\tusing SafeMath for uint256;\n', '\tmapping(address => uint256) balances;\n', '\tuint256 public totalSupply;\n', '    uint256 public totalCap = 100000000000000000000000000;\n', '    string \tpublic constant name = "BitLifeAndTrust";\n', '\tstring \tpublic constant symbol = "BLT";\n', '\tuint256\tpublic constant decimals = 18;\n', '\t//uint256 public price = 400;  moved to price setting contract\n', '    \n', '    address public bltRetainedAcc = 0x48259a35030c8dA6aaA1710fD31068D30bfc716C;  //holds blt company retained\n', '    address public bltOwnedAcc =    0x1CA33C197952B8D9dd0eDC9EFa20018D6B3dcF5F;  //holds blt company owned\n', '    address public bltMasterAcc =   0xACc2be4D782d472cf4f928b116054904e5513346; //master account to hold BLT\n', '\n', '    uint256 public bltRetained = 15000000000000000000000000;\n', '    uint256 public bltOwned =    15000000000000000000000000;\n', '    uint256 public bltMaster =   70000000000000000000000000;\n', '\n', '\n', '\tfunction balanceOf(address _owner) constant returns (uint256 balance) {\n', '\t    return balances[_owner];\n', '\t}\n', '\n', '\n', '\tfunction transfer(address _to, uint256 _value) whenNotPaused returns (bool success) {\n', '\t    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '\t    balances[_to] = balances[_to].add(_value);\n', '\t    Transfer(msg.sender, _to, _value);\n', '\t    return true;\n', '\t}\n', '\n', '\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) whenNotPaused returns (bool success) {\n', '\t    \n', '\t    var allowance = allowed[_from][msg.sender];\n', '\t    \n', '\t    balances[_to] = balances[_to].add(_value);\n', '\t    balances[_from] = balances[_from].sub(_value);\n', '\t    allowed[_from][msg.sender] = allowance.sub(_value);\n', '\t    Transfer(_from, _to, _value);\n', '\t    return true;\n', '\t}\n', '\n', '\n', '\tfunction approve(address _spender, uint256 _value) returns (bool success) {\n', '\t    allowed[msg.sender][_spender] = _value;\n', '\t    Approval(msg.sender, _spender, _value);\n', '\t    return true;\n', '\t}\n', '\n', '\n', '\tfunction allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '\t    return allowed[_owner][_spender];\n', '\t}\n', '\n', '\n', '\tfunction BLTToken() {\n', '\t\tbalances[bltRetainedAcc] = bltRetained;             // fund BLT Retained account\n', '        balances[bltOwnedAcc] = bltOwned;                   // fund BLT Owned account\n', '        balances[bltMasterAcc] = bltMaster;                 // fund BLT master account\n', '        \n', '        allowed[bltMasterAcc][msg.sender] = bltMaster;\n', '\n', '        totalSupply = bltRetained + bltOwned + bltMaster;\n', '\n', '        Transfer(0x0,bltRetainedAcc,bltRetained);\n', '        Transfer(0x0,bltOwnedAcc,bltOwned);\n', '        Transfer(0x0,bltMasterAcc,bltMaster);\n', '\n', '\t}\n', '\n', '}\n', '\n', '\n', 'contract BLTTokenSale is BLTToken {\n', '    using SafeMath for uint256;    \n', '\n', '    BLTToken public token;\n', '    uint256 public etherRaised;\n', '    uint256 public saleStartTime = now;\n', '    //uint256 public saleEndTime = now + 1 weeks;\n', '    address public ethDeposits = 0x50c19a8D73134F8e649bB7110F2E8860e4f6cfB6;        //ether goes to this account\n', '    address public bltMasterToSale = 0xACc2be4D782d472cf4f928b116054904e5513346;    //BLT available for sale\n', '\n', '    event MintedToken(address from, address to, uint256 value1);                    //event that Tokens were sent\n', '    event RecievedEther(address from, uint256 value1);                               //event that ether received function ran     \n', '\n', '    function () payable {\n', '\t\tcreateTokens(msg.sender,msg.value);\n', '\t}\n', '\n', '        //initiates the sale of the token\n', '\tfunction createTokens(address _recipient, uint256 _value) saleWhenNotPaused {\n', '        \n', '        require (_value != 0);                                                      //value must be greater than zero\n', '        require (now >= saleStartTime);                                             //only works during token sale\n', '        require (_recipient != 0x0);                                                //not a contract validation\n', '\t\tuint256 tokens = _value.mul(PriceUpdate.price);                             //calculate the number of tokens from the ether sent\n', '        uint256 remainingTokenSuppy = balanceOf(bltMasterToSale);\n', '\n', '        if (remainingTokenSuppy >= tokens) {                                        //only works if there is still a supply in the master account\n', '            require(mint(_recipient, tokens));                                      //execute the movement of tokens\n', '            etherRaised = etherRaised.add(_value);\n', '            forwardFunds();\n', '            RecievedEther(msg.sender,_value);\n', '        }                                        \n', '\n', '\t}\n', '    \n', '     //transfers BLT from storage account into the purchasers account   \n', '    function mint(address _to, uint256 _tokens) internal saleWhenNotPaused returns (bool success) {\n', '        \n', '        address _from = bltMasterToSale;\n', '\t    var allowance = allowed[_from][owner];\n', '\t    \n', '\t    balances[_to] = balances[_to].add(_tokens);\n', '\t    balances[_from] = balances[_from].sub(_tokens);\n', '\t    allowed[_from][owner] = allowance.sub(_tokens);\n', '        Transfer(_from, _to, _tokens);                                               //capture event in logs\n', '\t    MintedToken(_from,_to, _tokens); \n', '      return true;\n', '\t}    \n', '      //forwards ether to storage wallet  \n', '      function forwardFunds() internal {\n', '        ethDeposits.transfer(msg.value);\n', '        \n', '        }\n', '}']
['pragma solidity ^0.4.16;\n', '\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  \n', '   //@dev transfer token for a specified address\n', '  // @param _to The address to transfer to.\n', '   //@param _value The amount to be transferred.\n', '   \n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  \n', '   //@dev Gets the balance of the specified address.\n', '   //@param _owner The address to query the the balance of. \n', '  // @return An uint256 representing the amount owned by the passed address.\n', '  \n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '  \n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until \n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint256 _addedValue) \n', '    returns (bool success) \n', '    {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint256 _subtractedValue) \n', '    returns (bool success) \n', '    {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '    //@dev The Ownable constructor sets the original `owner` of the contract to the sender account.\n', '   function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '    //@dev Throws if called by any account other than the owner.\n', '   modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '    //@dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    //@param newOwner The address to transfer ownership to.\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '    //@title Pausable\n', '    //@dev Base contract which allows children to implement an emergency stop mechanism for trading.\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '    //@dev Modifier to make a function callable only when the contract is not paused.\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '    //@dev Modifier to make a function callable only when the contract is paused.\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '    //@dev called by the owner to pause, triggers stopped state\n', '  function pause() onlyOwner whenNotPaused {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '    //@dev called by the owner to unpause, returns to normal state\n', '  function unpause() onlyOwner whenPaused {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '    //@title Pausable\n', '    //@dev Base contract which allows children to implement an emergency stop mechanism for crowdsale.\n', 'contract SalePausable is Ownable {\n', '  event SalePause();\n', '  event SaleUnpause();\n', '\n', '  bool public salePaused = false;\n', '\n', '    //@dev Modifier to make a function callable only when the contract is not paused.\n', '  modifier saleWhenNotPaused() {\n', '    require(!salePaused);\n', '    _;\n', '  }\n', '\n', '    //@dev Modifier to make a function callable only when the contract is paused.\n', '  modifier saleWhenPaused() {\n', '    require(salePaused);\n', '    _;\n', '  }\n', '\n', '    //@dev called by the owner to pause, triggers stopped state\n', '  function salePause() onlyOwner saleWhenNotPaused {\n', '    salePaused = true;\n', '    SalePause();\n', '  }\n', '    //@dev called by the owner to unpause, returns to normal state\n', '  function saleUnpause() onlyOwner saleWhenPaused {\n', '    salePaused = false;\n', '    SaleUnpause();\n', '  }\n', '}\n', '\n', 'contract PriceUpdate is Ownable {\n', '  uint256 public price;\n', '\n', '    //@dev The Ownable constructor sets the original `price` of the BLT token to the sender account.\n', '   function PriceUpdate() {\n', '    price = 400;\n', '  }\n', '\n', '    //@dev Allows the current owner to change the price of the token per ether.\n', '  function newPrice(uint256 _newPrice) onlyOwner {\n', '    require(_newPrice > 0);\n', '    price = _newPrice;\n', '  }\n', '\n', '}\n', '\n', 'contract BLTToken is StandardToken, Ownable, PriceUpdate, Pausable, SalePausable {\n', '\tusing SafeMath for uint256;\n', '\tmapping(address => uint256) balances;\n', '\tuint256 public totalSupply;\n', '    uint256 public totalCap = 100000000000000000000000000;\n', '    string \tpublic constant name = "BitLifeAndTrust";\n', '\tstring \tpublic constant symbol = "BLT";\n', '\tuint256\tpublic constant decimals = 18;\n', '\t//uint256 public price = 400;  moved to price setting contract\n', '    \n', '    address public bltRetainedAcc = 0x48259a35030c8dA6aaA1710fD31068D30bfc716C;  //holds blt company retained\n', '    address public bltOwnedAcc =    0x1CA33C197952B8D9dd0eDC9EFa20018D6B3dcF5F;  //holds blt company owned\n', '    address public bltMasterAcc =   0xACc2be4D782d472cf4f928b116054904e5513346; //master account to hold BLT\n', '\n', '    uint256 public bltRetained = 15000000000000000000000000;\n', '    uint256 public bltOwned =    15000000000000000000000000;\n', '    uint256 public bltMaster =   70000000000000000000000000;\n', '\n', '\n', '\tfunction balanceOf(address _owner) constant returns (uint256 balance) {\n', '\t    return balances[_owner];\n', '\t}\n', '\n', '\n', '\tfunction transfer(address _to, uint256 _value) whenNotPaused returns (bool success) {\n', '\t    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '\t    balances[_to] = balances[_to].add(_value);\n', '\t    Transfer(msg.sender, _to, _value);\n', '\t    return true;\n', '\t}\n', '\n', '\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) whenNotPaused returns (bool success) {\n', '\t    \n', '\t    var allowance = allowed[_from][msg.sender];\n', '\t    \n', '\t    balances[_to] = balances[_to].add(_value);\n', '\t    balances[_from] = balances[_from].sub(_value);\n', '\t    allowed[_from][msg.sender] = allowance.sub(_value);\n', '\t    Transfer(_from, _to, _value);\n', '\t    return true;\n', '\t}\n', '\n', '\n', '\tfunction approve(address _spender, uint256 _value) returns (bool success) {\n', '\t    allowed[msg.sender][_spender] = _value;\n', '\t    Approval(msg.sender, _spender, _value);\n', '\t    return true;\n', '\t}\n', '\n', '\n', '\tfunction allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '\t    return allowed[_owner][_spender];\n', '\t}\n', '\n', '\n', '\tfunction BLTToken() {\n', '\t\tbalances[bltRetainedAcc] = bltRetained;             // fund BLT Retained account\n', '        balances[bltOwnedAcc] = bltOwned;                   // fund BLT Owned account\n', '        balances[bltMasterAcc] = bltMaster;                 // fund BLT master account\n', '        \n', '        allowed[bltMasterAcc][msg.sender] = bltMaster;\n', '\n', '        totalSupply = bltRetained + bltOwned + bltMaster;\n', '\n', '        Transfer(0x0,bltRetainedAcc,bltRetained);\n', '        Transfer(0x0,bltOwnedAcc,bltOwned);\n', '        Transfer(0x0,bltMasterAcc,bltMaster);\n', '\n', '\t}\n', '\n', '}\n', '\n', '\n', 'contract BLTTokenSale is BLTToken {\n', '    using SafeMath for uint256;    \n', '\n', '    BLTToken public token;\n', '    uint256 public etherRaised;\n', '    uint256 public saleStartTime = now;\n', '    //uint256 public saleEndTime = now + 1 weeks;\n', '    address public ethDeposits = 0x50c19a8D73134F8e649bB7110F2E8860e4f6cfB6;        //ether goes to this account\n', '    address public bltMasterToSale = 0xACc2be4D782d472cf4f928b116054904e5513346;    //BLT available for sale\n', '\n', '    event MintedToken(address from, address to, uint256 value1);                    //event that Tokens were sent\n', '    event RecievedEther(address from, uint256 value1);                               //event that ether received function ran     \n', '\n', '    function () payable {\n', '\t\tcreateTokens(msg.sender,msg.value);\n', '\t}\n', '\n', '        //initiates the sale of the token\n', '\tfunction createTokens(address _recipient, uint256 _value) saleWhenNotPaused {\n', '        \n', '        require (_value != 0);                                                      //value must be greater than zero\n', '        require (now >= saleStartTime);                                             //only works during token sale\n', '        require (_recipient != 0x0);                                                //not a contract validation\n', '\t\tuint256 tokens = _value.mul(PriceUpdate.price);                             //calculate the number of tokens from the ether sent\n', '        uint256 remainingTokenSuppy = balanceOf(bltMasterToSale);\n', '\n', '        if (remainingTokenSuppy >= tokens) {                                        //only works if there is still a supply in the master account\n', '            require(mint(_recipient, tokens));                                      //execute the movement of tokens\n', '            etherRaised = etherRaised.add(_value);\n', '            forwardFunds();\n', '            RecievedEther(msg.sender,_value);\n', '        }                                        \n', '\n', '\t}\n', '    \n', '     //transfers BLT from storage account into the purchasers account   \n', '    function mint(address _to, uint256 _tokens) internal saleWhenNotPaused returns (bool success) {\n', '        \n', '        address _from = bltMasterToSale;\n', '\t    var allowance = allowed[_from][owner];\n', '\t    \n', '\t    balances[_to] = balances[_to].add(_tokens);\n', '\t    balances[_from] = balances[_from].sub(_tokens);\n', '\t    allowed[_from][owner] = allowance.sub(_tokens);\n', '        Transfer(_from, _to, _tokens);                                               //capture event in logs\n', '\t    MintedToken(_from,_to, _tokens); \n', '      return true;\n', '\t}    \n', '      //forwards ether to storage wallet  \n', '      function forwardFunds() internal {\n', '        ethDeposits.transfer(msg.value);\n', '        \n', '        }\n', '}']
