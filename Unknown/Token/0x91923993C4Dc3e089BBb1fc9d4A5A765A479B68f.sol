['pragma solidity ^0.4.11;\n', '\n', 'contract owned {\n', '    address public owner;\n', '    function owned() {\n', '        owner = msg.sender;\n', '    }\n', '    modifier onlyOwner {\n', '        if (msg.sender != owner) throw;\n', '        _;\n', '    }\n', '}\n', '\n', 'contract NECPToken is owned {\n', '    /* Public variables of the token */\n', "    string public constant standard = 'Token 0.1';\n", '    string public constant name = "Neureal Early Contributor Points";\n', '    string public constant symbol = "NECP";\n', '    uint256 public constant decimals = 8;\n', '    uint256 public constant MAXIMUM_SUPPLY = 3000000000000;\n', '    \n', '    uint256 public totalSupply;\n', '    bool public frozen = false;\n', '\n', '    /* This tracks all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function NECPToken() {\n', '        balanceOf[msg.sender] = MAXIMUM_SUPPLY;              // Give the creator all initial tokens\n', '        totalSupply = MAXIMUM_SUPPLY;                        // Update total supply\n', '    }\n', '\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) {\n', '        if (frozen) throw;                                   // Check if frozen\n', '        if (_to == 0x0) throw;                               // Prevent transfer to 0x0 address. Use burn() instead\n', '        if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\n', '        balanceOf[msg.sender] -= _value;                     // Subtract from the sender\n', '        balanceOf[_to] += _value;                            // Add the same to the recipient\n', '        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n', '    }\n', '\n', '    function freezeTransfers() onlyOwner  {\n', '        frozen = true;\n', '    }\n', '\n', '    /* This unnamed function is called whenever someone tries to send ether to it */\n', '    function () {\n', '        throw;   // Prevents accidental sending of ether\n', '    }\n', '}']