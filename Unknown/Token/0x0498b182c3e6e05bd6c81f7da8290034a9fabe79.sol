['pragma solidity ^0.4.15;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library Utils {\n', '\n', '    /**\n', '    @dev Helper function, determines if a given address is an account or a contract.\n', '    @return True if address is a contract, false otherwise\n', '     */\n', '    function isContract(address _addr) constant internal returns (bool) {\n', '        uint size;\n', '\n', '        assembly {\n', '            size := extcodesize(_addr)\n', '        }\n', '\n', '        return (_addr == 0) ? false : size > 0;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Claimable\n', ' * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n', ' * This allows the new owner to accept the transfer.\n', ' */\n', 'contract Claimable is Ownable {\n', '  address public pendingOwner;\n', '\n', '  /**\n', '   * @dev Modifier throws if called by any account other than the pendingOwner.\n', '   */\n', '  modifier onlyPendingOwner() {\n', '    require(msg.sender == pendingOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to set the pendingOwner address.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    pendingOwner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer.\n', '   */\n', '  function claimOwnership() onlyPendingOwner {\n', '    OwnershipTransferred(owner, pendingOwner);\n', '    owner = pendingOwner;\n', '    pendingOwner = 0x0;\n', '  }\n', '}\n', '\n', '/**\n', '@title Burnable\n', '@dev Burnable custom interface, should allow external contracts to burn tokens on certain conditions.\n', ' */\n', 'contract Burnable {\n', '\n', '    event Burn(address who, uint256 amount);\n', '\n', '    modifier onlyBurners {\n', '        require(isBurner(msg.sender));\n', '        _;\n', '    }\n', '    function burn(address target, uint256 amount) external onlyBurners returns (bool);\n', '    function setBurner(address who, bool auth) returns (bool);\n', '    function isBurner(address who) constant returns (bool);\n', '}\n', '\n', '/**\n', '@title Lockable\n', '@dev Lockable custom interface, should allow external contracts to lock accounts on certain conditions.\n', ' */\n', 'contract Lockable {\n', '\n', '    uint256 public lockExpiration;\n', '\n', '    /**\n', '    @dev Constructor\n', '    @param _lockExpiration lock expiration datetime in UNIX time\n', '     */\n', '    function Lockable(uint256 _lockExpiration) {\n', '        lockExpiration = _lockExpiration;\n', '    }\n', '\n', '    function isLocked(address who) constant returns (bool);\n', '}\n', '\n', '/**\n', '@title ERC20 interface\n', '@dev Standard ERC20 Interface.\n', '*/\n', 'contract ERC20 {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', '@title LWFToken\n', '@dev ERC20 standard.\n', '@dev Extra features: Burnable and Lockable under certain conditions.\n', '@dev contract owner is set to msg.sender, lockExpiration for devs set to: 1535760000 || Saturday, 01-Sep-18 00:00:00 UTC\n', ' */\n', 'contract LWFToken is ERC20, Burnable, Lockable(1535760000), Claimable {\n', 'using SafeMath for uint256;\n', '\n', '    // Snapshot of Account balance at specific block\n', '    struct Snapshot {\n', '        uint256 block;\n', '        uint256 balance;\n', '    }\n', '\n', '    struct Account {\n', '        uint256 balance;\n', '        Snapshot[] history; // history of snapshots\n', '        mapping(address => uint256) allowed;\n', '        bool isSet;\n', '    }\n', '\n', '    address[] accountsList;\n', '\n', '    mapping(address => Account) accounts;\n', '\n', '    bool public maintenance;\n', '\n', '    // BURN SETTINGS\n', '    mapping(address => bool) burners; // contracts authorized to block tokens\n', '    bool public burnAllowed;\n', '\n', '    // LOCK SETTINGS\n', '    mapping(address => bool) locked; //locked users addresses\n', '\n', '    // COSMETIC THINGS\n', '    string public name = "LWF";\n', '    string public symbol = "LWF";\n', '    string public version = "release-1.1";\n', '\n', '    uint256 public decimals = 2;\n', '\n', '    /**\n', '    @dev Throws if token is under maintenance.\n', '     */\n', '    modifier disabledInMaintenance() {\n', '        if (maintenance)\n', '            revert();\n', '        _;\n', '    }\n', '\n', '    /**\n', '    @dev Throws if token is not under maintenance.\n', '     */\n', '    modifier onlyUnderMaintenance() {\n', '        if (!maintenance)\n', '            revert();\n', '        _;\n', '    }\n', '\n', '    /**\n', '    @dev Registers the recipient account when tokens are sent to an unregistered account.\n', '    @param _recipient the recipient of the transfer\n', '     */\n', '    modifier trackNewUsers (address _recipient) {\n', '        if (!accounts[_recipient].isSet) {\n', '            accounts[_recipient].isSet = true;\n', '            accountsList.push(_recipient);\n', '        }\n', '        _;\n', '    }\n', '\n', '    /**\n', '    @dev The constructor sets the initial balance to 30 million tokens.\n', '    @dev 27 million assigned to the contract owner.\n', '    @dev 3 million reserved and locked. (except bounty)\n', '    @dev Holders history is updated for data integrity.\n', '    @dev Burn functionality are enabled by default.\n', '     */\n', '    function LWFToken() {\n', '        totalSupply = 30 * (10**6) * (10**decimals);\n', '\n', '        burnAllowed = true;\n', '        maintenance = false;\n', '\n', '        require(_setup(0x927Dc9F1520CA2237638D0D3c6910c14D9a285A8, 2700000000, false));\n', '\n', '        require(_setup(0x7AE7155fF280D5da523CDDe3855b212A8381F9E8, 30000000, false));\n', '        require(_setup(0x796d507A80B13c455c2C1D121eDE4bccca59224C, 263000000, true));\n', '\n', '        require(_setup(0xD77d620EC9774295ad8263cBc549789EE39C0BC0, 1000000, true));\n', '        require(_setup(0x574B35eC5650BE0aC217af9AFCfe1c7a3Ff0BecD, 1000000, true));\n', '        require(_setup(0x7c5a61f34513965AA8EC090011721a0b0A9d4D3a, 1000000, true));\n', '        require(_setup(0x0cDBb03DD2E8226A6c3a54081E93750B4f85DB92, 1000000, true));\n', '        require(_setup(0x03b6cF4A69fF306B3df9B9CeDB6Dc4ED8803cBA7, 1000000, true));\n', '        require(_setup(0xe2f7A1218E5d4a362D1bee8d2eda2cd285aAE87A, 1000000, true));\n', '        require(_setup(0xAcceDE2eFD2765520952B7Cb70406A43FC17e4fb, 1000000, true));\n', '    }\n', '\n', '    /**\n', '    @return accountsList length\n', '     */\n', '    function accountsListLength() external constant returns (uint256) {\n', '        return accountsList.length;\n', '    }\n', '\n', '    /**\n', '    @dev Gets the address of any account in &#39;accountList&#39;.\n', '    @param _index The index to query the address of\n', '    @return An address pointing to a registered account\n', '    */\n', '    function getAccountAddress(uint256 _index) external constant returns (address) {\n', '        return accountsList[_index];\n', '    }\n', '\n', '    /**\n', '    @dev Checks if an accounts is registered.\n', '    @param _address The address to check\n', '    @return A bool set true if the account is registered, false otherwise\n', '     */\n', '    function isSet(address _address) external constant returns (bool) {\n', '        return accounts[_address].isSet;\n', '    }\n', '\n', '    /**\n', '    @dev Gets the balance of the specified address at the first block minor or equal the specified block\n', '    @param _owner The address to query the the balance of\n', '    @param _block The block\n', '    @return An uint256 representing the amount owned by the passed address at the specified block.\n', '    */\n', '    function balanceAt(address _owner, uint256 _block) external constant returns (uint256 balance) {\n', '        uint256 i = accounts[_owner].history.length;\n', '        do {\n', '            i--;\n', '        } while (i > 0 && accounts[_owner].history[i].block > _block);\n', '        uint256 matchingBlock = accounts[_owner].history[i].block;\n', '        uint256 matchingBalance = accounts[_owner].history[i].balance;\n', '        return (i == 0 && matchingBlock > _block) ? 0 : matchingBalance;\n', '    }\n', '\n', '    /**\n', '    @dev Authorized contracts can burn tokens.\n', '    @param _amount Quantity of tokens to burn\n', '    @return A bool set true if successful, false otherwise\n', '     */\n', '    function burn(address _address, uint256 _amount) onlyBurners disabledInMaintenance external returns (bool) {\n', '        require(burnAllowed);\n', '\n', '        var _balance = accounts[_address].balance;\n', '        accounts[_address].balance = _balance.sub(_amount);\n', '\n', '        // update history with recent burn\n', '        require(_updateHistory(_address));\n', '\n', '        totalSupply = totalSupply.sub(_amount);\n', '        Burn(_address,_amount);\n', '        Transfer(_address, 0x0, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    @dev Send a specified amount of tokens from sender address to &#39;_recipient&#39;.\n', '    @param _recipient address receiving tokens\n', '    @param _amount the amount of tokens to be transferred\n', '    @return A bool set true if successful, false otherwise\n', '     */\n', '    function transfer(address _recipient, uint256 _amount) returns (bool) {\n', '        require(!isLocked(msg.sender));\n', '        return _transfer(msg.sender,_recipient,_amount);\n', '    }\n', '\n', '    /**\n', '    @dev Transfer tokens from one address to another\n', '    @param _from address The address which you want to send tokens from\n', '    @param _to address The address which you want to transfer to\n', '    @param _amount the amount of tokens to be transferred\n', '    @return A bool set true if successful, false otherwise\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _amount) returns (bool) {\n', '        require(!isLocked(_from));\n', '        require(_to != address(0));\n', '\n', '        var _allowance = accounts[_from].allowed[msg.sender];\n', '\n', '        // Check is not needed because sub(_allowance, _amount) will already throw if this condition is not met\n', '        // require (_amount <= _allowance);\n', '        accounts[_from].allowed[msg.sender] = _allowance.sub(_amount);\n', '        return _transfer(_from, _to, _amount);\n', '    }\n', '\n', '    /**\n', '    @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    @param _spender The address which will spend the funds.\n', '    @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint256 _value) returns (bool) {\n', '        //  To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '        //  already 0 to mitigate the race condition\n', '        require((_value == 0) || (accounts[msg.sender].allowed[_spender] == 0));\n', '\n', '        accounts[msg.sender].allowed[_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    @dev Approve should be called when allowed[_spender] == 0. To increment\n', '         allowed value is better to use this function to avoid 2 calls (and wait until\n', '         the first transaction is mined)\n', '    @param _spender The address which will spend the funds\n', '    @param _addedValue The value which will be added from the allowed balance\n', '    */\n', '    function increaseApproval(address _spender, uint _addedValue) returns (bool success) {\n', '        uint256 _allowance = accounts[msg.sender].allowed[_spender];\n', '        accounts[msg.sender].allowed[_spender] = _allowance.add(_addedValue);\n', '        Approval(msg.sender, _spender, accounts[msg.sender].allowed[_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    @dev Approve should be called when allowed[_spender] == 0. To decrement\n', '         allowed value is better to use this function to avoid 2 calls (and wait until\n', '         the first transaction is mined)\n', '    @param _spender The address which will spend the funds\n', '    @param _subtractedValue The value which will be subtracted from the allowed balance\n', '    @return A bool set true if successful, false otherwise\n', '    */\n', '    function decreaseApproval (address _spender, uint _subtractedValue) returns (bool success) {\n', '        uint oldValue = accounts[msg.sender].allowed[_spender];\n', '        accounts[msg.sender].allowed[_spender] = (_subtractedValue > oldValue) ? 0 : oldValue.sub(_subtractedValue);\n', '        Approval(msg.sender, _spender, accounts[msg.sender].allowed[_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    @dev Sets a contract authorization to burn tokens.\n', '    @param _address The address to authorize/deauthorize\n', '    @param _auth True for authorization, false otherwise\n', '    @return A bool set true if successful, false otherwise\n', '     */\n', '    function setBurner(address _address, bool _auth) onlyOwner returns (bool) {\n', '        require(burnAllowed);\n', '        assert(Utils.isContract(_address));\n', '        burners[_address] = _auth;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    @dev Checks if the provided contract can burn tokens.\n', '    @param _address The address to check\n', '    @return A bool set true if authorized, false otherwise\n', '     */\n', '    function isBurner(address _address) constant returns (bool) {\n', '        return burnAllowed ? burners[_address] : false;\n', '    }\n', '\n', '    /**\n', '    @dev Checks if the token owned by the provided address are locked.\n', '    @param _address The address to check\n', '    @return A bool set true if locked, false otherwise\n', '     */\n', '    function isLocked(address _address) constant returns (bool) {\n', '        return now >= lockExpiration ? false : locked[_address];\n', '    }\n', '\n', '    /**\n', '    @dev Function permanently disabling &#39;burn()&#39; and &#39;setBurner()&#39;.\n', '    @dev Already burned tokens are not recoverable.\n', '    @dev Effects of this transaction are irreversible.\n', '    @return A bool set true if successful, false otherwise\n', '     */\n', '    function burnFeatureDeactivation() onlyOwner returns (bool) {\n', '        require(burnAllowed);\n', '        burnAllowed = false;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    @dev Gets the balance of the specified address.\n', '    @param _owner The address to query the the balance of.\n', '    @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return accounts[_owner].balance;\n', '    }\n', '\n', '    /**\n', '    @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    @param _owner address The address which owns the funds.\n', '    @param _spender address The address which will spend the funds.\n', '    @return A uint256 specifying the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return accounts[_owner].allowed[_spender];\n', '    }\n', '\n', '    /**\n', '    @dev Sets the maintenance mode. During maintenance operations modifying balances are frozen.\n', '    @param _state true if maintenance is on, false otherwise\n', '    @return A bool set true if successful, false otherwise\n', '     */\n', '    function setMaintenance(bool _state) onlyOwner returns (bool) {\n', '        maintenance = _state;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    @dev Maintenance function, if accountsList grows too long back end can safely clean unused accounts\n', '        and push the renewed list into the contract.\n', '    @dev Accounts removed from the list must be deactivated with maintenanceDeactivateUser(_user)\n', '    @param _accountsList A list containing the accounts&#39; addresses\n', '    @return A bool set true if successful, false otherwise\n', '     */\n', '    function maintenanceSetAccountsList(address[] _accountsList) onlyOwner onlyUnderMaintenance returns (bool) {\n', '        accountsList = _accountsList;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    @dev Maintenance function reserved to back end, removes an account from the list.\n', '    @return A bool set true if successful, false otherwise\n', '     */\n', '    function maintenanceDeactivateUser(address _user) onlyOwner onlyUnderMaintenance returns (bool) {\n', '        accounts[_user].isSet = false;\n', '        delete accounts[_user].history;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    @dev Auxiliary method used in constructor to reserve some tokens and lock them in some cases.\n', '    @param _address The address to assign tokens\n', '    @param _amount The amount of tokens\n', '    @param _lock True to lock until &#39;lockExpiration&#39;, false to not\n', '    @return A bool set true if successful, false otherwise\n', '     */\n', '    function _setup(address _address, uint256 _amount, bool _lock) internal returns (bool) {\n', '        locked[_address] = _lock;\n', '        accounts[_address].balance = _amount;\n', '        accounts[_address].isSet = true;\n', '        require(_updateHistory(_address));\n', '        accountsList.push(_address);\n', '        Transfer(this, _address, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    @dev Function implementing the shared logic of &#39;transfer()&#39; and &#39;transferFrom()&#39;\n', '    @param _from address sending tokens\n', '    @param _recipient address receiving tokens\n', '    @param _amount tokens to send\n', '    @return A bool set true if successful, false otherwise\n', '     */\n', '    function _transfer(address _from, address _recipient, uint256 _amount) internal disabledInMaintenance trackNewUsers(_recipient) returns (bool) {\n', '\n', '        accounts[_from].balance = balanceOf(_from).sub(_amount);\n', '        accounts[_recipient].balance = balanceOf(_recipient).add(_amount);\n', '\n', '        // save this transaction in both accounts history\n', '        require(_updateHistory(_from));\n', '        require(_updateHistory(_recipient));\n', '\n', '        Transfer(_from, _recipient, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    @dev Updates the user history with the latest balance.\n', '    @param _address The Account&#39;s address to update\n', '    @return A bool set true if successful, false otherwise\n', '     */\n', '    function _updateHistory(address _address) internal returns (bool) {\n', '        accounts[_address].history.push(Snapshot(block.number, balanceOf(_address)));\n', '        return true;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.15;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library Utils {\n', '\n', '    /**\n', '    @dev Helper function, determines if a given address is an account or a contract.\n', '    @return True if address is a contract, false otherwise\n', '     */\n', '    function isContract(address _addr) constant internal returns (bool) {\n', '        uint size;\n', '\n', '        assembly {\n', '            size := extcodesize(_addr)\n', '        }\n', '\n', '        return (_addr == 0) ? false : size > 0;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Claimable\n', ' * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n', ' * This allows the new owner to accept the transfer.\n', ' */\n', 'contract Claimable is Ownable {\n', '  address public pendingOwner;\n', '\n', '  /**\n', '   * @dev Modifier throws if called by any account other than the pendingOwner.\n', '   */\n', '  modifier onlyPendingOwner() {\n', '    require(msg.sender == pendingOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to set the pendingOwner address.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    pendingOwner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer.\n', '   */\n', '  function claimOwnership() onlyPendingOwner {\n', '    OwnershipTransferred(owner, pendingOwner);\n', '    owner = pendingOwner;\n', '    pendingOwner = 0x0;\n', '  }\n', '}\n', '\n', '/**\n', '@title Burnable\n', '@dev Burnable custom interface, should allow external contracts to burn tokens on certain conditions.\n', ' */\n', 'contract Burnable {\n', '\n', '    event Burn(address who, uint256 amount);\n', '\n', '    modifier onlyBurners {\n', '        require(isBurner(msg.sender));\n', '        _;\n', '    }\n', '    function burn(address target, uint256 amount) external onlyBurners returns (bool);\n', '    function setBurner(address who, bool auth) returns (bool);\n', '    function isBurner(address who) constant returns (bool);\n', '}\n', '\n', '/**\n', '@title Lockable\n', '@dev Lockable custom interface, should allow external contracts to lock accounts on certain conditions.\n', ' */\n', 'contract Lockable {\n', '\n', '    uint256 public lockExpiration;\n', '\n', '    /**\n', '    @dev Constructor\n', '    @param _lockExpiration lock expiration datetime in UNIX time\n', '     */\n', '    function Lockable(uint256 _lockExpiration) {\n', '        lockExpiration = _lockExpiration;\n', '    }\n', '\n', '    function isLocked(address who) constant returns (bool);\n', '}\n', '\n', '/**\n', '@title ERC20 interface\n', '@dev Standard ERC20 Interface.\n', '*/\n', 'contract ERC20 {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', '@title LWFToken\n', '@dev ERC20 standard.\n', '@dev Extra features: Burnable and Lockable under certain conditions.\n', '@dev contract owner is set to msg.sender, lockExpiration for devs set to: 1535760000 || Saturday, 01-Sep-18 00:00:00 UTC\n', ' */\n', 'contract LWFToken is ERC20, Burnable, Lockable(1535760000), Claimable {\n', 'using SafeMath for uint256;\n', '\n', '    // Snapshot of Account balance at specific block\n', '    struct Snapshot {\n', '        uint256 block;\n', '        uint256 balance;\n', '    }\n', '\n', '    struct Account {\n', '        uint256 balance;\n', '        Snapshot[] history; // history of snapshots\n', '        mapping(address => uint256) allowed;\n', '        bool isSet;\n', '    }\n', '\n', '    address[] accountsList;\n', '\n', '    mapping(address => Account) accounts;\n', '\n', '    bool public maintenance;\n', '\n', '    // BURN SETTINGS\n', '    mapping(address => bool) burners; // contracts authorized to block tokens\n', '    bool public burnAllowed;\n', '\n', '    // LOCK SETTINGS\n', '    mapping(address => bool) locked; //locked users addresses\n', '\n', '    // COSMETIC THINGS\n', '    string public name = "LWF";\n', '    string public symbol = "LWF";\n', '    string public version = "release-1.1";\n', '\n', '    uint256 public decimals = 2;\n', '\n', '    /**\n', '    @dev Throws if token is under maintenance.\n', '     */\n', '    modifier disabledInMaintenance() {\n', '        if (maintenance)\n', '            revert();\n', '        _;\n', '    }\n', '\n', '    /**\n', '    @dev Throws if token is not under maintenance.\n', '     */\n', '    modifier onlyUnderMaintenance() {\n', '        if (!maintenance)\n', '            revert();\n', '        _;\n', '    }\n', '\n', '    /**\n', '    @dev Registers the recipient account when tokens are sent to an unregistered account.\n', '    @param _recipient the recipient of the transfer\n', '     */\n', '    modifier trackNewUsers (address _recipient) {\n', '        if (!accounts[_recipient].isSet) {\n', '            accounts[_recipient].isSet = true;\n', '            accountsList.push(_recipient);\n', '        }\n', '        _;\n', '    }\n', '\n', '    /**\n', '    @dev The constructor sets the initial balance to 30 million tokens.\n', '    @dev 27 million assigned to the contract owner.\n', '    @dev 3 million reserved and locked. (except bounty)\n', '    @dev Holders history is updated for data integrity.\n', '    @dev Burn functionality are enabled by default.\n', '     */\n', '    function LWFToken() {\n', '        totalSupply = 30 * (10**6) * (10**decimals);\n', '\n', '        burnAllowed = true;\n', '        maintenance = false;\n', '\n', '        require(_setup(0x927Dc9F1520CA2237638D0D3c6910c14D9a285A8, 2700000000, false));\n', '\n', '        require(_setup(0x7AE7155fF280D5da523CDDe3855b212A8381F9E8, 30000000, false));\n', '        require(_setup(0x796d507A80B13c455c2C1D121eDE4bccca59224C, 263000000, true));\n', '\n', '        require(_setup(0xD77d620EC9774295ad8263cBc549789EE39C0BC0, 1000000, true));\n', '        require(_setup(0x574B35eC5650BE0aC217af9AFCfe1c7a3Ff0BecD, 1000000, true));\n', '        require(_setup(0x7c5a61f34513965AA8EC090011721a0b0A9d4D3a, 1000000, true));\n', '        require(_setup(0x0cDBb03DD2E8226A6c3a54081E93750B4f85DB92, 1000000, true));\n', '        require(_setup(0x03b6cF4A69fF306B3df9B9CeDB6Dc4ED8803cBA7, 1000000, true));\n', '        require(_setup(0xe2f7A1218E5d4a362D1bee8d2eda2cd285aAE87A, 1000000, true));\n', '        require(_setup(0xAcceDE2eFD2765520952B7Cb70406A43FC17e4fb, 1000000, true));\n', '    }\n', '\n', '    /**\n', '    @return accountsList length\n', '     */\n', '    function accountsListLength() external constant returns (uint256) {\n', '        return accountsList.length;\n', '    }\n', '\n', '    /**\n', "    @dev Gets the address of any account in 'accountList'.\n", '    @param _index The index to query the address of\n', '    @return An address pointing to a registered account\n', '    */\n', '    function getAccountAddress(uint256 _index) external constant returns (address) {\n', '        return accountsList[_index];\n', '    }\n', '\n', '    /**\n', '    @dev Checks if an accounts is registered.\n', '    @param _address The address to check\n', '    @return A bool set true if the account is registered, false otherwise\n', '     */\n', '    function isSet(address _address) external constant returns (bool) {\n', '        return accounts[_address].isSet;\n', '    }\n', '\n', '    /**\n', '    @dev Gets the balance of the specified address at the first block minor or equal the specified block\n', '    @param _owner The address to query the the balance of\n', '    @param _block The block\n', '    @return An uint256 representing the amount owned by the passed address at the specified block.\n', '    */\n', '    function balanceAt(address _owner, uint256 _block) external constant returns (uint256 balance) {\n', '        uint256 i = accounts[_owner].history.length;\n', '        do {\n', '            i--;\n', '        } while (i > 0 && accounts[_owner].history[i].block > _block);\n', '        uint256 matchingBlock = accounts[_owner].history[i].block;\n', '        uint256 matchingBalance = accounts[_owner].history[i].balance;\n', '        return (i == 0 && matchingBlock > _block) ? 0 : matchingBalance;\n', '    }\n', '\n', '    /**\n', '    @dev Authorized contracts can burn tokens.\n', '    @param _amount Quantity of tokens to burn\n', '    @return A bool set true if successful, false otherwise\n', '     */\n', '    function burn(address _address, uint256 _amount) onlyBurners disabledInMaintenance external returns (bool) {\n', '        require(burnAllowed);\n', '\n', '        var _balance = accounts[_address].balance;\n', '        accounts[_address].balance = _balance.sub(_amount);\n', '\n', '        // update history with recent burn\n', '        require(_updateHistory(_address));\n', '\n', '        totalSupply = totalSupply.sub(_amount);\n', '        Burn(_address,_amount);\n', '        Transfer(_address, 0x0, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', "    @dev Send a specified amount of tokens from sender address to '_recipient'.\n", '    @param _recipient address receiving tokens\n', '    @param _amount the amount of tokens to be transferred\n', '    @return A bool set true if successful, false otherwise\n', '     */\n', '    function transfer(address _recipient, uint256 _amount) returns (bool) {\n', '        require(!isLocked(msg.sender));\n', '        return _transfer(msg.sender,_recipient,_amount);\n', '    }\n', '\n', '    /**\n', '    @dev Transfer tokens from one address to another\n', '    @param _from address The address which you want to send tokens from\n', '    @param _to address The address which you want to transfer to\n', '    @param _amount the amount of tokens to be transferred\n', '    @return A bool set true if successful, false otherwise\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _amount) returns (bool) {\n', '        require(!isLocked(_from));\n', '        require(_to != address(0));\n', '\n', '        var _allowance = accounts[_from].allowed[msg.sender];\n', '\n', '        // Check is not needed because sub(_allowance, _amount) will already throw if this condition is not met\n', '        // require (_amount <= _allowance);\n', '        accounts[_from].allowed[msg.sender] = _allowance.sub(_amount);\n', '        return _transfer(_from, _to, _amount);\n', '    }\n', '\n', '    /**\n', '    @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    @param _spender The address which will spend the funds.\n', '    @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint256 _value) returns (bool) {\n', '        //  To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '        //  already 0 to mitigate the race condition\n', '        require((_value == 0) || (accounts[msg.sender].allowed[_spender] == 0));\n', '\n', '        accounts[msg.sender].allowed[_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    @dev Approve should be called when allowed[_spender] == 0. To increment\n', '         allowed value is better to use this function to avoid 2 calls (and wait until\n', '         the first transaction is mined)\n', '    @param _spender The address which will spend the funds\n', '    @param _addedValue The value which will be added from the allowed balance\n', '    */\n', '    function increaseApproval(address _spender, uint _addedValue) returns (bool success) {\n', '        uint256 _allowance = accounts[msg.sender].allowed[_spender];\n', '        accounts[msg.sender].allowed[_spender] = _allowance.add(_addedValue);\n', '        Approval(msg.sender, _spender, accounts[msg.sender].allowed[_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    @dev Approve should be called when allowed[_spender] == 0. To decrement\n', '         allowed value is better to use this function to avoid 2 calls (and wait until\n', '         the first transaction is mined)\n', '    @param _spender The address which will spend the funds\n', '    @param _subtractedValue The value which will be subtracted from the allowed balance\n', '    @return A bool set true if successful, false otherwise\n', '    */\n', '    function decreaseApproval (address _spender, uint _subtractedValue) returns (bool success) {\n', '        uint oldValue = accounts[msg.sender].allowed[_spender];\n', '        accounts[msg.sender].allowed[_spender] = (_subtractedValue > oldValue) ? 0 : oldValue.sub(_subtractedValue);\n', '        Approval(msg.sender, _spender, accounts[msg.sender].allowed[_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    @dev Sets a contract authorization to burn tokens.\n', '    @param _address The address to authorize/deauthorize\n', '    @param _auth True for authorization, false otherwise\n', '    @return A bool set true if successful, false otherwise\n', '     */\n', '    function setBurner(address _address, bool _auth) onlyOwner returns (bool) {\n', '        require(burnAllowed);\n', '        assert(Utils.isContract(_address));\n', '        burners[_address] = _auth;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    @dev Checks if the provided contract can burn tokens.\n', '    @param _address The address to check\n', '    @return A bool set true if authorized, false otherwise\n', '     */\n', '    function isBurner(address _address) constant returns (bool) {\n', '        return burnAllowed ? burners[_address] : false;\n', '    }\n', '\n', '    /**\n', '    @dev Checks if the token owned by the provided address are locked.\n', '    @param _address The address to check\n', '    @return A bool set true if locked, false otherwise\n', '     */\n', '    function isLocked(address _address) constant returns (bool) {\n', '        return now >= lockExpiration ? false : locked[_address];\n', '    }\n', '\n', '    /**\n', "    @dev Function permanently disabling 'burn()' and 'setBurner()'.\n", '    @dev Already burned tokens are not recoverable.\n', '    @dev Effects of this transaction are irreversible.\n', '    @return A bool set true if successful, false otherwise\n', '     */\n', '    function burnFeatureDeactivation() onlyOwner returns (bool) {\n', '        require(burnAllowed);\n', '        burnAllowed = false;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    @dev Gets the balance of the specified address.\n', '    @param _owner The address to query the the balance of.\n', '    @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return accounts[_owner].balance;\n', '    }\n', '\n', '    /**\n', '    @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    @param _owner address The address which owns the funds.\n', '    @param _spender address The address which will spend the funds.\n', '    @return A uint256 specifying the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return accounts[_owner].allowed[_spender];\n', '    }\n', '\n', '    /**\n', '    @dev Sets the maintenance mode. During maintenance operations modifying balances are frozen.\n', '    @param _state true if maintenance is on, false otherwise\n', '    @return A bool set true if successful, false otherwise\n', '     */\n', '    function setMaintenance(bool _state) onlyOwner returns (bool) {\n', '        maintenance = _state;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    @dev Maintenance function, if accountsList grows too long back end can safely clean unused accounts\n', '        and push the renewed list into the contract.\n', '    @dev Accounts removed from the list must be deactivated with maintenanceDeactivateUser(_user)\n', "    @param _accountsList A list containing the accounts' addresses\n", '    @return A bool set true if successful, false otherwise\n', '     */\n', '    function maintenanceSetAccountsList(address[] _accountsList) onlyOwner onlyUnderMaintenance returns (bool) {\n', '        accountsList = _accountsList;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    @dev Maintenance function reserved to back end, removes an account from the list.\n', '    @return A bool set true if successful, false otherwise\n', '     */\n', '    function maintenanceDeactivateUser(address _user) onlyOwner onlyUnderMaintenance returns (bool) {\n', '        accounts[_user].isSet = false;\n', '        delete accounts[_user].history;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    @dev Auxiliary method used in constructor to reserve some tokens and lock them in some cases.\n', '    @param _address The address to assign tokens\n', '    @param _amount The amount of tokens\n', "    @param _lock True to lock until 'lockExpiration', false to not\n", '    @return A bool set true if successful, false otherwise\n', '     */\n', '    function _setup(address _address, uint256 _amount, bool _lock) internal returns (bool) {\n', '        locked[_address] = _lock;\n', '        accounts[_address].balance = _amount;\n', '        accounts[_address].isSet = true;\n', '        require(_updateHistory(_address));\n', '        accountsList.push(_address);\n', '        Transfer(this, _address, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', "    @dev Function implementing the shared logic of 'transfer()' and 'transferFrom()'\n", '    @param _from address sending tokens\n', '    @param _recipient address receiving tokens\n', '    @param _amount tokens to send\n', '    @return A bool set true if successful, false otherwise\n', '     */\n', '    function _transfer(address _from, address _recipient, uint256 _amount) internal disabledInMaintenance trackNewUsers(_recipient) returns (bool) {\n', '\n', '        accounts[_from].balance = balanceOf(_from).sub(_amount);\n', '        accounts[_recipient].balance = balanceOf(_recipient).add(_amount);\n', '\n', '        // save this transaction in both accounts history\n', '        require(_updateHistory(_from));\n', '        require(_updateHistory(_recipient));\n', '\n', '        Transfer(_from, _recipient, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    @dev Updates the user history with the latest balance.\n', "    @param _address The Account's address to update\n", '    @return A bool set true if successful, false otherwise\n', '     */\n', '    function _updateHistory(address _address) internal returns (bool) {\n', '        accounts[_address].history.push(Snapshot(block.number, balanceOf(_address)));\n', '        return true;\n', '    }\n', '\n', '}']
