['pragma solidity ^0.4.11;\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    assert(b > 0);\n', '    uint c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      throw;\n', '    }\n', '  }\n', '}\n', 'contract Ownable {\n', '    address public owner;\n', '    function Ownable() {\n', '        owner = msg.sender;\n', '    }\n', '    modifier onlyOwner {\n', '        if (msg.sender != owner) throw;\n', '        _;\n', '    }\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '/*\n', ' * Pausable\n', ' * Abstract contract that allows children to implement an\n', ' * emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  bool public stopped;\n', '  modifier stopInEmergency {\n', '    if (stopped) {\n', '      throw;\n', '    }\n', '    _;\n', '  }\n', '  \n', '  modifier onlyInEmergency {\n', '    if (!stopped) {\n', '      throw;\n', '    }\n', '    _;\n', '  }\n', '  // called by the owner on emergency, triggers stopped state\n', '  function emergencyStop() external onlyOwner {\n', '    stopped = true;\n', '  }\n', '  // called by the owner on end of emergency, returns to normal state\n', '  function release() external onlyOwner onlyInEmergency {\n', '    stopped = false;\n', '  }\n', '}\n', 'contract ERC20Basic {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) constant returns (uint);\n', '  function transfer(address to, uint value);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint);\n', '  function transferFrom(address from, address to, uint value);\n', '  function approve(address spender, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '/*\n', ' * PullPayment\n', ' * Base contract supporting async send for pull payments.\n', ' * Inherit from this contract and use asyncSend instead of send.\n', ' */\n', 'contract PullPayment {\n', '  using SafeMath for uint;\n', '  \n', '  mapping(address => uint) public payments;\n', '  event LogRefundETH(address to, uint value);\n', '  /**\n', '  *  Store sent amount as credit to be pulled, called by payer \n', '  **/\n', '  function asyncSend(address dest, uint amount) internal {\n', '    payments[dest] = payments[dest].add(amount);\n', '  }\n', '  // withdraw accumulated balance, called by payee\n', '  function withdrawPayments() {\n', '    address payee = msg.sender;\n', '    uint payment = payments[payee];\n', '    \n', '    if (payment == 0) {\n', '      throw;\n', '    }\n', '    if (this.balance < payment) {\n', '      throw;\n', '    }\n', '    payments[payee] = 0;\n', '    if (!payee.send(payment)) {\n', '      throw;\n', '    }\n', '    LogRefundETH(payee,payment);\n', '  }\n', '}\n', 'contract BasicToken is ERC20Basic {\n', '  \n', '  using SafeMath for uint;\n', '  \n', '  mapping(address => uint) balances;\n', '  \n', '  /*\n', '   * Fix for the ERC20 short address attack  \n', '  */\n', '  modifier onlyPayloadSize(uint size) {\n', '     if(msg.data.length < size + 4) {\n', '       throw;\n', '     }\n', '     _;\n', '  }\n', '  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '  }\n', '  function balanceOf(address _owner) constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', 'contract StandardToken is BasicToken, ERC20 {\n', '  mapping (address => mapping (address => uint)) allowed;\n', '  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // if (_value > _allowance) throw;\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '  }\n', '  function approve(address _spender, uint _value) {\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '  }\n', '  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '}\n', '/**\n', ' *  NewHope token contract. Implements\n', ' */\n', 'contract NewHope is StandardToken, Ownable {\n', '  string public constant name = "NewHope";\n', '  string public constant symbol = "NewH";\n', '  uint public constant decimals = 6;\n', '  // Constructor\n', '  function NewHope() {\n', '      totalSupply = 1000000000000;//1M\n', '      balances[msg.sender] = totalSupply; // Send all tokens to owner\n', '  }\n', '  /**\n', '   *  Burn away the specified amount of NewHope tokens\n', '   */\n', '  function burn(uint _value) onlyOwner returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    Transfer(msg.sender, 0x0, _value);\n', '    return true;\n', '  }\n', '}\n', '/*\n', '  Crowdsale Smart Contract for the NewHope.org project\n', '  This smart contract collects ETH, and in return emits NewHope tokens to the backers\n', '*/\n', 'contract Crowdsale is Pausable, PullPayment {\n', '    \n', '    using SafeMath for uint;\n', '    struct Backer {\n', '        uint weiReceived; // Amount of Ether given\n', '        uint coinSent;\n', '    }\n', '    /*\n', '    * Constants\n', '    */\n', '    /* Minimum number of NewHope to sell */\n', '    uint public constant MIN_CAP = 50000000000; // 50,000 NewHopes\n', '    /* Maximum number of NewHope to sell */\n', '    uint public constant MAX_CAP = 700000000000; // 700,000 NewHopes\n', '    /* Minimum amount to invest */\n', '    uint public constant MIN_INVEST_ETHER = 100 finney;\n', '    /* Crowdsale period */\n', '    uint private constant CROWDSALE_PERIOD = 5 days;\n', '    /* Number of NewHopes per Ether */\n', '    uint public constant COIN_PER_ETHER = 9000000000; // 9,000 NewHopes\n', '    /*\n', '    * Variables\n', '    */\n', '    /* NewHope contract reference */\n', '    NewHope public coin;\n', '    /* Multisig contract that will receive the Ether */\n', '    address public multisigEther;\n', '    /* Number of Ether received */\n', '    uint public etherReceived;\n', '    /* Number of NewHopes sent to Ether contributors */\n', '    uint public coinSentToEther;\n', '    /* Crowdsale start time */\n', '    uint public startTime;\n', '    /* Crowdsale end time */\n', '    uint public endTime;\n', '    /* Is crowdsale still on going */\n', '    bool public crowdsaleClosed;\n', '    /* Backers Ether indexed by their Ethereum address */\n', '    mapping(address => Backer) public backers;\n', '    /*\n', '    * Modifiers\n', '    */\n', '    modifier minCapNotReached() {\n', '        if ((now < endTime) || coinSentToEther >= MIN_CAP ) throw;\n', '        _;\n', '    }\n', '    modifier respectTimeFrame() {\n', '        if ((now < startTime) || (now > endTime )) throw;\n', '        _;\n', '    }\n', '    /*\n', '     * Event\n', '    */\n', '    event LogReceivedETH(address addr, uint value);\n', '    event LogCoinsEmited(address indexed from, uint amount);\n', '    /*\n', '     * Constructor\n', '    */\n', '    function Crowdsale(address _NewHopeAddress, address _to) {\n', '        coin = NewHope(_NewHopeAddress);\n', '        multisigEther = _to;\n', '    }\n', '    /* \n', '     * The fallback function corresponds to a donation in ETH\n', '     */\n', '    function() stopInEmergency respectTimeFrame payable {\n', '        receiveETH(msg.sender);\n', '    }\n', '    /* \n', '     * To call to start the crowdsale\n', '     */\n', '    function start() onlyOwner {\n', '        if (startTime != 0) throw; // Crowdsale was already started\n', '        startTime = now ;            \n', '        endTime =  now + CROWDSALE_PERIOD;    \n', '    }\n', '    /*\n', '     *  Receives a donation in Ether\n', '    */\n', '    function receiveETH(address beneficiary) internal {\n', '        if (msg.value < MIN_INVEST_ETHER) throw; // Don&#39;t accept funding under a predefined threshold\n', '        \n', '        uint coinToSend = bonus(msg.value.mul(COIN_PER_ETHER).div(1 ether)); // Compute the number of NewHope to send\n', '        if (coinToSend.add(coinSentToEther) > MAX_CAP) throw;    \n', '        Backer backer = backers[beneficiary];\n', '        coin.transfer(beneficiary, coinToSend); // Transfer NewHopes right now \n', '        backer.coinSent = backer.coinSent.add(coinToSend);\n', '        backer.weiReceived = backer.weiReceived.add(msg.value); // Update the total wei collected during the crowdfunding for this backer    \n', '        etherReceived = etherReceived.add(msg.value); // Update the total wei collected during the crowdfunding\n', '        coinSentToEther = coinSentToEther.add(coinToSend);\n', '        // Send events\n', '        LogCoinsEmited(msg.sender ,coinToSend);\n', '        LogReceivedETH(beneficiary, etherReceived); \n', '    }\n', '    \n', '    /*\n', '     *Compute the NewHope bonus according to the investment period\n', '     */\n', '    function bonus(uint amount) internal constant returns (uint) {\n', '        if (now < startTime.add(1 days)) return amount.add(amount.div(2));   // bonus 50%\n', '        return amount;\n', '    }\n', '    /*  \n', '     * Finalize the crowdsale, should be called after the refund period\n', '    */\n', '    function finalize() onlyOwner public {\n', '        if (now < endTime) { // Cannot finalise before CROWDSALE_PERIOD or before selling all coins\n', '            if (coinSentToEther == MAX_CAP) {\n', '            } else {\n', '                throw;\n', '            }\n', '        }\n', '        if (coinSentToEther < MIN_CAP && now < endTime + 3 days) throw; // If MIN_CAP is not reached donors have 15days to get refund before we can finalise\n', '        if (!multisigEther.send(this.balance)) throw; // Move the remaining Ether to the multisig address\n', '        \n', '        uint remains = coin.balanceOf(this);\n', '        if (remains > 0) { // Burn the rest of NewHopes\n', '            if (!coin.burn(remains)) throw ;\n', '        }\n', '        crowdsaleClosed = true;\n', '    }\n', '    /*  \n', '    * Failsafe drain\n', '    */\n', '    function drain() onlyOwner {\n', '        if (!owner.send(this.balance)) throw;\n', '    }\n', '    /**\n', '     * Allow to change the team multisig address in the case of emergency.\n', '     */\n', '    function setMultisig(address addr) onlyOwner public {\n', '        if (addr == address(0)) throw;\n', '        multisigEther = addr;\n', '    }\n', '    /**\n', '     * Manually back NewHope owner address.\n', '     */\n', '    function backNewHopeOwner() onlyOwner public {\n', '        coin.transferOwnership(owner);\n', '    }\n', '    /**\n', '     * Transfer remains to owner in case if impossible to do min invest\n', '     */\n', '    function getRemainCoins() onlyOwner public {\n', '        var remains = MAX_CAP - coinSentToEther;\n', '        uint minCoinsToSell = bonus(MIN_INVEST_ETHER.mul(COIN_PER_ETHER) / (1 ether));\n', '        if(remains > minCoinsToSell) throw;\n', '        Backer backer = backers[owner];\n', '        coin.transfer(owner, remains); // Transfer NewHopes right now \n', '        backer.coinSent = backer.coinSent.add(remains);\n', '        coinSentToEther = coinSentToEther.add(remains);\n', '        // Send events\n', '        LogCoinsEmited(this ,remains);\n', '        LogReceivedETH(owner, etherReceived); \n', '    }\n', '    /* \n', '     * When MIN_CAP is not reach:\n', '     * 1) backer call the "approve" function of the NewHope token contract with the amount of all NewHopes they got in order to be refund\n', '     * 2) backer call the "refund" function of the Crowdsale contract with the same amount of NewHopes\n', '     * 3) backer call the "withdrawPayments" function of the Crowdsale contract to get a refund in ETH\n', '     */\n', '    function refund(uint _value) minCapNotReached public {\n', '        \n', '        if (_value != backers[msg.sender].coinSent) throw; // compare value from backer balance\n', '        coin.transferFrom(msg.sender, address(this), _value); // get the token back to the crowdsale contract\n', '        if (!coin.burn(_value)) throw ; // token sent for refund are burnt\n', '        uint ETHToSend = backers[msg.sender].weiReceived;\n', '        backers[msg.sender].weiReceived=0;\n', '        if (ETHToSend > 0) {\n', '            asyncSend(msg.sender, ETHToSend); // pull payment to get refund in ETH\n', '        }\n', '    }\n', '}']