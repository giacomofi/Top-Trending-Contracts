['pragma solidity ^0.4.2;\n', '\n', 'contract VouchCoin  {\n', '\n', '  address public owner;\n', '  uint public constant totalSupply = 10000000000000000;\n', '  string public constant name = "VouchCoin";\n', '  string public constant symbol = "VHC";\n', '  uint public constant decimals = 8;\n', '  string public standard = "VouchCoin";\n', '\n', '  mapping (address => uint) public balanceOf;\n', '\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '  function VouchCoin() {\n', '    owner = msg.sender;\n', '    balanceOf[msg.sender] = totalSupply;\n', '  }\n', '\n', '  function transfer(address _to, uint _value) returns (bool success) {\n', '    if (_to == 0x0) throw;\n', '    if (balanceOf[owner] >= _value && _value > 0) {\n', '      balanceOf[owner] -= _value;\n', '      balanceOf[_to] += _value;\n', '      Transfer(owner, _to, _value);\n', '      return true;\n', '    }\n', '    return false;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _value) returns (bool success) {\n', '    if (_from == 0x0 && _to == 0x0) throw;\n', '    if (balanceOf[_from] >= _value && _value > 0) {\n', '      balanceOf[_from] -= _value;\n', '      balanceOf[_to] += _value;\n', '      Transfer(_from, _to, _value);\n', '      return true;\n', '    }\n', '    return false;\n', '  }\n', '\n', '  function () {\n', '    throw;\n', '  }\n', '}']
['pragma solidity ^0.4.2;\n', '\n', 'contract VouchCoin  {\n', '\n', '  address public owner;\n', '  uint public constant totalSupply = 10000000000000000;\n', '  string public constant name = "VouchCoin";\n', '  string public constant symbol = "VHC";\n', '  uint public constant decimals = 8;\n', '  string public standard = "VouchCoin";\n', '\n', '  mapping (address => uint) public balanceOf;\n', '\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '  function VouchCoin() {\n', '    owner = msg.sender;\n', '    balanceOf[msg.sender] = totalSupply;\n', '  }\n', '\n', '  function transfer(address _to, uint _value) returns (bool success) {\n', '    if (_to == 0x0) throw;\n', '    if (balanceOf[owner] >= _value && _value > 0) {\n', '      balanceOf[owner] -= _value;\n', '      balanceOf[_to] += _value;\n', '      Transfer(owner, _to, _value);\n', '      return true;\n', '    }\n', '    return false;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _value) returns (bool success) {\n', '    if (_from == 0x0 && _to == 0x0) throw;\n', '    if (balanceOf[_from] >= _value && _value > 0) {\n', '      balanceOf[_from] -= _value;\n', '      balanceOf[_to] += _value;\n', '      Transfer(_from, _to, _value);\n', '      return true;\n', '    }\n', '    return false;\n', '  }\n', '\n', '  function () {\n', '    throw;\n', '  }\n', '}']
