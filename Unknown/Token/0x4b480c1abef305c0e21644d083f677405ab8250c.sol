['pragma solidity ^0.4.17;\n', '\n', '// StandardToken code from LINK token contract.\n', '\n', '/**\n', ' * ERC20Basic\n', ' * Simpler version of ERC20 interface\n', ' * see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20Basic {\n', '    uint public totalSupply;\n', '\n', '    function balanceOf(address who) constant returns(uint);\n', '\n', '    function transfer(address to, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '    function mul(uint a, uint b) internal returns(uint) {\n', '        uint c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint a, uint b) internal returns(uint) {\n', '        assert(b > 0);\n', '        uint c = a / b;\n', '        assert(a == b * c + a % b);\n', '        return c;\n', '    }\n', '\n', '    function sub(uint a, uint b) internal returns(uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint a, uint b) internal returns(uint) {\n', '        uint c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function max64(uint64 a, uint64 b) internal constant returns(uint64) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min64(uint64 a, uint64 b) internal constant returns(uint64) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function max256(uint256 a, uint256 b) internal constant returns(uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min256(uint256 a, uint256 b) internal constant returns(uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function assert(bool assertion) internal {\n', '        if (!assertion) {\n', '            throw;\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * Basic token\n', ' * Basic version of StandardToken, with no allowances\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath\n', '    for uint;\n', '\n', '    mapping(address => uint) balances;\n', '\n', '    /**\n', '     * Fix for the ERC20 short address attack  \n', '     */\n', '    modifier onlyPayloadSize(uint size) {\n', '        if (msg.data.length < size + 4) {\n', '            throw;\n', '        }\n', '        _;\n', '    }\n', '\n', '    function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns(uint balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * ERC20 interface\n', ' * see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) constant returns(uint);\n', '\n', '    function transferFrom(address from, address to, uint value);\n', '\n', '    function approve(address spender, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '\n', '/**\n', ' * Standard ERC20 token\n', ' *\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood:\n', ' * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is BasicToken, ERC20 {\n', '\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '    function transferFrom(address _from, address _to, uint _value) {\n', '        var _allowance = allowed[_from][msg.sender];\n', '\n', '        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '        // if (_value > _allowance) throw;\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint _value) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns(uint remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', 'contract TIP is StandardToken {\n', '    string public constant symbol = "TIP";\n', '    string public constant name = "EthereumTipToken";\n', '    uint8 public constant decimals = 8;\n', '\n', '    uint256 public reservedSupply = 10000000 * 10 ** 8;\n', '    uint256 public transferAmount = 10000 * 10 ** 8;\n', '\n', '    address public owner;\n', '\n', '    mapping(address => uint256) address_claimed_tokens;\n', '\n', '    function TIP() {\n', '        owner = msg.sender;\n', '        totalSupply = 100000000 * 10 ** 8; //100M\n', '        balances[owner] = 100000000 * 10 ** 8;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    // Default function called when ETH is send to the contract.\n', '    function() payable {\n', '        // No ETH transfer allowed.\n', '        require(msg.value == 0);\n', '\n', '        require(balances[owner] >= reservedSupply);\n', '\n', '        require(address_claimed_tokens[msg.sender] == 0); // return if already claimed\n', '\n', '        balances[owner] -= transferAmount;\n', '        balances[msg.sender] += transferAmount;\n', '        address_claimed_tokens[msg.sender] += transferAmount;\n', '        Transfer(owner, msg.sender, transferAmount);\n', '    }\n', '\n', '    function distribute(address[] addresses) onlyOwner {\n', '        for (uint i = 0; i < addresses.length; i++) {\n', '            if (address_claimed_tokens[addresses[i]] == 0) {\n', '                balances[owner] -= transferAmount;\n', '                balances[addresses[i]] += transferAmount;\n', '                address_claimed_tokens[addresses[i]] += transferAmount;\n', '                Transfer(owner, addresses[i], transferAmount);\n', '            }\n', '        }\n', '    }\n', '\n', '}']