['pragma solidity ^0.4.11;\n', '\n', 'contract ForeignToken {\n', '  function balanceOf(address _owner) constant returns (uint256);\n', '  function transfer(address _to, uint256 _value) returns (bool);\n', '}\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      throw;\n', '    }\n', '  }\n', '}\n', '\n', 'contract CardboardUnicorns {\n', '  using SafeMath for uint;\n', '  \n', '  string public name = "HorseWithACheapCardboardHorn";\n', '  string public symbol = "HWACCH";\n', '  uint public decimals = 0;\n', '  uint public totalSupply = 0;\n', '  mapping(address => uint) balances;\n', '  mapping (address => mapping (address => uint)) allowed;\n', '  address public owner = msg.sender;\n', '\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '  event Minted(address indexed owner, uint value);\n', '\n', '  /**\n', '   * Fix for the ERC20 short address attack.\n', '   */\n', '  modifier onlyPayloadSize(uint size) {\n', '    if(msg.data.length < size + 4) {\n', '      throw;\n', '    }\n', '    _;\n', '  }\n', '  \n', '  modifier onlyOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  \n', '  /**\n', '   * Change ownership of the token\n', '   */\n', '  function changeOwner(address _newOwner) onlyOwner {\n', '    owner = _newOwner;\n', '  }\n', '\n', '  function withdraw() onlyOwner {\n', '    owner.transfer(this.balance);\n', '  }\n', '  function withdrawForeignTokens(address _tokenContract) onlyOwner {\n', '    ForeignToken token = ForeignToken(_tokenContract);\n', '    uint256 amount = token.balanceOf(address(this));\n', '    token.transfer(owner, amount);\n', '  }\n', '\n', '  /**\n', '   * Generate new tokens.\n', '   * Can only be done by the owner of the contract\n', '   */\n', '  function mint(address _who, uint _value) onlyOwner {\n', '    balances[_who] = balances[_who].add(_value);\n', '    totalSupply = totalSupply.add(_value);\n', '    Minted(_who, _value);\n', '  }\n', '\n', '  /**\n', '   * Get the token balance of the specified address\n', '   */\n', '  function balanceOf(address _who) constant returns (uint balance) {\n', '    return balances[_who];\n', '  }\n', '  \n', '  /**\n', '   * Transfer token to another address\n', '   */\n', '  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\n', '    require(_to != address(this)); // Don&#39;t send tokens back to the contract!\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '  }\n', '  \n', '  \n', '  /**\n', '   * Transfer tokens from an different address to another address.\n', '   * Need to have been granted an allowance to do this before triggering.\n', '   */\n', '  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // if (_value > _allowance) throw;\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '  }\n', '  \n', '  /**\n', '   * Approve the indicated address to spend the specified amount of tokens on the sender&#39;s behalf\n', '   */\n', '  function approve(address _spender, uint _value) {\n', '    // Ensure allowance is zero if attempting to set to a non-zero number\n', '    // This helps manage an edge-case race condition better: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 \n', '    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n', '    \n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '  }\n', '  \n', '  /**\n', '   * Check how many tokens the indicated address can spend on behalf of the owner\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}']
['pragma solidity ^0.4.11;\n', '\n', 'contract ForeignToken {\n', '  function balanceOf(address _owner) constant returns (uint256);\n', '  function transfer(address _to, uint256 _value) returns (bool);\n', '}\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      throw;\n', '    }\n', '  }\n', '}\n', '\n', 'contract CardboardUnicorns {\n', '  using SafeMath for uint;\n', '  \n', '  string public name = "HorseWithACheapCardboardHorn";\n', '  string public symbol = "HWACCH";\n', '  uint public decimals = 0;\n', '  uint public totalSupply = 0;\n', '  mapping(address => uint) balances;\n', '  mapping (address => mapping (address => uint)) allowed;\n', '  address public owner = msg.sender;\n', '\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '  event Minted(address indexed owner, uint value);\n', '\n', '  /**\n', '   * Fix for the ERC20 short address attack.\n', '   */\n', '  modifier onlyPayloadSize(uint size) {\n', '    if(msg.data.length < size + 4) {\n', '      throw;\n', '    }\n', '    _;\n', '  }\n', '  \n', '  modifier onlyOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  \n', '  /**\n', '   * Change ownership of the token\n', '   */\n', '  function changeOwner(address _newOwner) onlyOwner {\n', '    owner = _newOwner;\n', '  }\n', '\n', '  function withdraw() onlyOwner {\n', '    owner.transfer(this.balance);\n', '  }\n', '  function withdrawForeignTokens(address _tokenContract) onlyOwner {\n', '    ForeignToken token = ForeignToken(_tokenContract);\n', '    uint256 amount = token.balanceOf(address(this));\n', '    token.transfer(owner, amount);\n', '  }\n', '\n', '  /**\n', '   * Generate new tokens.\n', '   * Can only be done by the owner of the contract\n', '   */\n', '  function mint(address _who, uint _value) onlyOwner {\n', '    balances[_who] = balances[_who].add(_value);\n', '    totalSupply = totalSupply.add(_value);\n', '    Minted(_who, _value);\n', '  }\n', '\n', '  /**\n', '   * Get the token balance of the specified address\n', '   */\n', '  function balanceOf(address _who) constant returns (uint balance) {\n', '    return balances[_who];\n', '  }\n', '  \n', '  /**\n', '   * Transfer token to another address\n', '   */\n', '  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\n', "    require(_to != address(this)); // Don't send tokens back to the contract!\n", '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '  }\n', '  \n', '  \n', '  /**\n', '   * Transfer tokens from an different address to another address.\n', '   * Need to have been granted an allowance to do this before triggering.\n', '   */\n', '  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // if (_value > _allowance) throw;\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '  }\n', '  \n', '  /**\n', "   * Approve the indicated address to spend the specified amount of tokens on the sender's behalf\n", '   */\n', '  function approve(address _spender, uint _value) {\n', '    // Ensure allowance is zero if attempting to set to a non-zero number\n', '    // This helps manage an edge-case race condition better: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 \n', '    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n', '    \n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '  }\n', '  \n', '  /**\n', '   * Check how many tokens the indicated address can spend on behalf of the owner\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}']
