['pragma solidity ^0.4.11;\n', '\n', 'library safeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    assert(b > 0);\n', '    uint c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      throw;\n', '    }\n', '  }\n', '}\n', '\n', 'contract ERC20 {\n', '    function totalSupply() constant returns (uint supply);\n', '    function balanceOf(address who) constant returns (uint value);\n', '    function allowance(address owner, address spender) constant returns (uint _allowance);\n', '\n', '    function transfer(address to, uint value) returns (bool ok);\n', '    function transferFrom(address from, address to, uint value) returns (bool ok);\n', '    function approve(address spender, uint value) returns (bool ok);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'contract HealthCoin is ERC20{\n', '\tuint initialSupply = 500000;\n', '\tstring public constant name = "HealthCoin";\n', '\tstring public constant symbol = "HLC";\n', '\tuint USDExchangeRate = 300;\n', '\tuint price = 30;\n', '\taddress HealthCoinAddress;\n', '\n', '\tmapping (address => uint256) balances;\n', '\tmapping (address => mapping (address => uint256)) allowed;\n', '\t\n', '\tmodifier onlyOwner{\n', '    if (msg.sender == HealthCoinAddress) {\n', '\t\t  _;\n', '\t\t}\n', '\t}\n', '\n', '\tfunction totalSupply() constant returns (uint256) {\n', '\t\treturn initialSupply;\n', '    }\n', '\n', '\tfunction balanceOf(address _owner) constant returns (uint256 balance) {\n', '\t\treturn balances[_owner];\n', '    }\n', '\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) returns (bool success) {\n', '    if (balances[msg.sender] >= _value && _value > 0) {\n', '      balances[msg.sender] -= _value;\n', '      balances[_to] += _value;\n', '      Transfer(msg.sender, _to, _value);\n', '      return true;\n', '    } else {\n', '      return false;\n', '    }\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '    if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '      balances[_to] += _value;\n', '      balances[_from] -= _value;\n', '      allowed[_from][msg.sender] -= _value;\n', '      Transfer(_from, _to, _value);\n', '      return true;\n', '    } else {\n', '      return false;\n', '    }\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) returns (bool success) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '\tfunction HealthCoin() {\n', '        HealthCoinAddress = msg.sender;\n', '        balances[HealthCoinAddress] = initialSupply;\n', '    }\n', '\n', '\tfunction setUSDExchangeRate (uint rate) onlyOwner{\n', '\t\tUSDExchangeRate = rate;\n', '\t}\n', '\n', '\tfunction () payable{\n', '\t    uint amountInUSDollars = safeMath.div(safeMath.mul(msg.value, USDExchangeRate),10**18);\n', '\t    uint valueToPass = safeMath.div(amountInUSDollars, price);\n', '    \tif (balances[HealthCoinAddress] >= valueToPass && valueToPass > 0) {\n', '          balances[msg.sender] = safeMath.add(balances[msg.sender],valueToPass);\n', '          balances[HealthCoinAddress] = safeMath.sub(balances[HealthCoinAddress],valueToPass);\n', '          Transfer(HealthCoinAddress, msg.sender, valueToPass);\n', '        } \n', '\t}\n', '\n', '\tfunction withdraw(uint amount) onlyOwner{\n', '        HealthCoinAddress.transfer(amount);\n', '\t}\n', '}']
['pragma solidity ^0.4.11;\n', '\n', 'library safeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    assert(b > 0);\n', '    uint c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      throw;\n', '    }\n', '  }\n', '}\n', '\n', 'contract ERC20 {\n', '    function totalSupply() constant returns (uint supply);\n', '    function balanceOf(address who) constant returns (uint value);\n', '    function allowance(address owner, address spender) constant returns (uint _allowance);\n', '\n', '    function transfer(address to, uint value) returns (bool ok);\n', '    function transferFrom(address from, address to, uint value) returns (bool ok);\n', '    function approve(address spender, uint value) returns (bool ok);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'contract HealthCoin is ERC20{\n', '\tuint initialSupply = 500000;\n', '\tstring public constant name = "HealthCoin";\n', '\tstring public constant symbol = "HLC";\n', '\tuint USDExchangeRate = 300;\n', '\tuint price = 30;\n', '\taddress HealthCoinAddress;\n', '\n', '\tmapping (address => uint256) balances;\n', '\tmapping (address => mapping (address => uint256)) allowed;\n', '\t\n', '\tmodifier onlyOwner{\n', '    if (msg.sender == HealthCoinAddress) {\n', '\t\t  _;\n', '\t\t}\n', '\t}\n', '\n', '\tfunction totalSupply() constant returns (uint256) {\n', '\t\treturn initialSupply;\n', '    }\n', '\n', '\tfunction balanceOf(address _owner) constant returns (uint256 balance) {\n', '\t\treturn balances[_owner];\n', '    }\n', '\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) returns (bool success) {\n', '    if (balances[msg.sender] >= _value && _value > 0) {\n', '      balances[msg.sender] -= _value;\n', '      balances[_to] += _value;\n', '      Transfer(msg.sender, _to, _value);\n', '      return true;\n', '    } else {\n', '      return false;\n', '    }\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '    if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '      balances[_to] += _value;\n', '      balances[_from] -= _value;\n', '      allowed[_from][msg.sender] -= _value;\n', '      Transfer(_from, _to, _value);\n', '      return true;\n', '    } else {\n', '      return false;\n', '    }\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) returns (bool success) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '\tfunction HealthCoin() {\n', '        HealthCoinAddress = msg.sender;\n', '        balances[HealthCoinAddress] = initialSupply;\n', '    }\n', '\n', '\tfunction setUSDExchangeRate (uint rate) onlyOwner{\n', '\t\tUSDExchangeRate = rate;\n', '\t}\n', '\n', '\tfunction () payable{\n', '\t    uint amountInUSDollars = safeMath.div(safeMath.mul(msg.value, USDExchangeRate),10**18);\n', '\t    uint valueToPass = safeMath.div(amountInUSDollars, price);\n', '    \tif (balances[HealthCoinAddress] >= valueToPass && valueToPass > 0) {\n', '          balances[msg.sender] = safeMath.add(balances[msg.sender],valueToPass);\n', '          balances[HealthCoinAddress] = safeMath.sub(balances[HealthCoinAddress],valueToPass);\n', '          Transfer(HealthCoinAddress, msg.sender, valueToPass);\n', '        } \n', '\t}\n', '\n', '\tfunction withdraw(uint amount) onlyOwner{\n', '        HealthCoinAddress.transfer(amount);\n', '\t}\n', '}']
