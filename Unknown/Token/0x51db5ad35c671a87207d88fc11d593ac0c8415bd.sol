['pragma solidity ^0.4.15;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Contracts that should not own Tokens\n', ' * @author Remco Bloemen <<span class="__cf_email__" data-cfemail="6a180f0709052a58">[email&#160;protected]</span>Ï€.com>\n', ' * @dev This blocks incoming ERC23 tokens to prevent accidental loss of tokens.\n', ' * Should tokens (any ERC20Basic compatible) end up in the contract, it allows the\n', ' * owner to reclaim the tokens.\n', ' */\n', 'contract HasNoTokens is Ownable {\n', '\n', ' /**\n', '  * @dev Reject all ERC23 compatible tokens\n', '  * @param from_ address The address that is transferring the tokens\n', '  * @param value_ uint256 the amount of the specified token\n', '  * @param data_ Bytes The data passed from the caller.\n', '  */\n', '  function tokenFallback(address from_, uint256 value_, bytes data_) external {\n', '    revert();\n', '  }\n', '\n', '  /**\n', '   * @dev Reclaim all ERC20Basic compatible tokens\n', '   * @param tokenAddr address The address of the token contract\n', '   */\n', '  function reclaimToken(address tokenAddr) external onlyOwner {\n', '    ERC20Basic tokenInst = ERC20Basic(tokenAddr);\n', '    uint256 balance = tokenInst.balanceOf(this);\n', '    tokenInst.transfer(owner, balance);\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', 'contract MigrationAgent {\n', '  /*\n', '    MigrationAgent contracts need to have this exact constant!\n', '    it is intended to be identify the contract, since there is no way to tell\n', '    if a contract is indeed an instance of the right type of contract otherwise\n', '  */\n', '  uint256 public constant MIGRATE_MAGIC_ID = 0x6e538c0d750418aae4131a91e5a20363;\n', '\n', '  /*\n', '    A contract implementing this interface is assumed to implement the neccessary\n', '    access controls. E.g;\n', '    * token being migrated FROM is the only one allowed to call migrateTo\n', '    * token being migrated TO has a minting function that can only be called by\n', '      the migration agent\n', '  */\n', '  function migrateTo(address beneficiary, uint256 amount) external;\n', '}\n', '\n', '/// @title Moeda Loyalty Points token contract\n', '/// @author Erik Mossberg\n', 'contract MoedaToken is StandardToken, Ownable, HasNoTokens {\n', '  string public constant name = "Moeda Loyalty Points";\n', '  string public constant symbol = "MDA";\n', '  uint8 public constant decimals = 18;\n', '\n', '  // The migration agent is used to be to allow opt-in transfer of tokens to a\n', '  // new token contract. This could be set sometime in the future if additional\n', '  // functionality needs be added.\n', '  MigrationAgent public migrationAgent;\n', '\n', '  // used to ensure that a given address is an instance of a particular contract\n', '  uint256 constant AGENT_MAGIC_ID = 0x6e538c0d750418aae4131a91e5a20363;\n', '  uint256 public totalMigrated;\n', '\n', '  uint constant TOKEN_MULTIPLIER = 10**uint256(decimals);\n', '  // don&#39;t allow creation of more than this number of tokens\n', '  uint public constant MAX_TOKENS = 20000000 * TOKEN_MULTIPLIER;\n', '\n', '  // transfers are locked during minting\n', '  bool public mintingFinished;\n', '\n', '  // Log when tokens are migrated to a new contract\n', '  event LogMigration(address indexed spender, address grantee, uint256 amount);\n', '  event LogCreation(address indexed donor, uint256 tokensReceived);\n', '  event LogDestruction(address indexed sender, uint256 amount);\n', '  event LogMintingFinished();\n', '\n', '  modifier afterMinting() {\n', '    require(mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier canTransfer(address recipient) {\n', '    require(mintingFinished && recipient != address(0));\n', '    _;\n', '  }\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /// @dev Create moeda token and assign partner allocations\n', '  function MoedaToken() {\n', '    // manual distribution\n', '    issueTokens();\n', '  }\n', '\n', '  function issueTokens() internal {\n', '    mint(0x2f37be861699b6127881693010596B4bDD146f5e, MAX_TOKENS);\n', '  }\n', '\n', '  /// @dev start a migration to a new contract\n', '  /// @param agent address of contract handling migration\n', '  function setMigrationAgent(address agent) external onlyOwner afterMinting {\n', '    require(agent != address(0) && isContract(agent));\n', '    require(MigrationAgent(agent).MIGRATE_MAGIC_ID() == AGENT_MAGIC_ID);\n', '    require(migrationAgent == address(0));\n', '    migrationAgent = MigrationAgent(agent);\n', '  }\n', '\n', '  function isContract(address addr) internal constant returns (bool) {\n', '    uint256 size;\n', '    assembly { size := extcodesize(addr) }\n', '    return size > 0;\n', '  }\n', '\n', '  /// @dev move a given amount of tokens a new contract (destroying them here)\n', '  /// @param beneficiary address that will get tokens in new contract\n', '  /// @param amount the number of tokens to migrate\n', '  function migrate(address beneficiary, uint256 amount) external afterMinting {\n', '    require(beneficiary != address(0));\n', '    require(migrationAgent != address(0));\n', '    require(amount > 0);\n', '\n', '    // safemath subtraction will throw if balance < amount\n', '    balances[msg.sender] = balances[msg.sender].sub(amount);\n', '    totalSupply = totalSupply.sub(amount);\n', '    totalMigrated = totalMigrated.add(amount);\n', '    migrationAgent.migrateTo(beneficiary, amount);\n', '\n', '    LogMigration(msg.sender, beneficiary, amount);\n', '  }\n', '\n', '  /// @dev destroy a given amount of tokens owned by sender\n', '  // anyone that owns tokens can destroy them, reducing the total supply\n', '  function burn(uint256 amount) external {\n', '    require(amount > 0);\n', '    balances[msg.sender] = balances[msg.sender].sub(amount);\n', '    totalSupply = totalSupply.sub(amount);\n', '\n', '    LogDestruction(msg.sender, amount);\n', '  }\n', '\n', '  /// @dev unlock transfers\n', '  function unlock() external onlyOwner canMint {\n', '    mintingFinished = true;\n', '    LogMintingFinished();\n', '  }\n', '\n', '  /// @dev create tokens, only usable before minting has ended\n', '  /// @param recipient address that will receive the created tokens\n', '  /// @param amount the number of tokens to create\n', '  function mint(address recipient, uint256 amount) internal canMint {\n', '    require(amount > 0);\n', '    require(totalSupply.add(amount) <= MAX_TOKENS);\n', '\n', '    balances[recipient] = balances[recipient].add(amount);\n', '    totalSupply = totalSupply.add(amount);\n', '\n', '    LogCreation(recipient, amount);\n', '  }\n', '\n', '  // only allowed after minting has ended\n', '  // note: transfers to null address not allowed, use burn(value)\n', '  function transfer(address to, uint _value)\n', '  public canTransfer(to) returns (bool)\n', '  {\n', '    return super.transfer(to, _value);\n', '  }\n', '\n', '  // only allowed after minting has ended\n', '  // note: transfers to null address not allowed, use burn(value)\n', '  function transferFrom(address from, address to, uint value)\n', '  public canTransfer(to) returns (bool)\n', '  {\n', '    return super.transferFrom(from, to, value);\n', '  }\n', '}']
['pragma solidity ^0.4.15;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Contracts that should not own Tokens\n', ' * @author Remco Bloemen <remco@2Ï€.com>\n', ' * @dev This blocks incoming ERC23 tokens to prevent accidental loss of tokens.\n', ' * Should tokens (any ERC20Basic compatible) end up in the contract, it allows the\n', ' * owner to reclaim the tokens.\n', ' */\n', 'contract HasNoTokens is Ownable {\n', '\n', ' /**\n', '  * @dev Reject all ERC23 compatible tokens\n', '  * @param from_ address The address that is transferring the tokens\n', '  * @param value_ uint256 the amount of the specified token\n', '  * @param data_ Bytes The data passed from the caller.\n', '  */\n', '  function tokenFallback(address from_, uint256 value_, bytes data_) external {\n', '    revert();\n', '  }\n', '\n', '  /**\n', '   * @dev Reclaim all ERC20Basic compatible tokens\n', '   * @param tokenAddr address The address of the token contract\n', '   */\n', '  function reclaimToken(address tokenAddr) external onlyOwner {\n', '    ERC20Basic tokenInst = ERC20Basic(tokenAddr);\n', '    uint256 balance = tokenInst.balanceOf(this);\n', '    tokenInst.transfer(owner, balance);\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', 'contract MigrationAgent {\n', '  /*\n', '    MigrationAgent contracts need to have this exact constant!\n', '    it is intended to be identify the contract, since there is no way to tell\n', '    if a contract is indeed an instance of the right type of contract otherwise\n', '  */\n', '  uint256 public constant MIGRATE_MAGIC_ID = 0x6e538c0d750418aae4131a91e5a20363;\n', '\n', '  /*\n', '    A contract implementing this interface is assumed to implement the neccessary\n', '    access controls. E.g;\n', '    * token being migrated FROM is the only one allowed to call migrateTo\n', '    * token being migrated TO has a minting function that can only be called by\n', '      the migration agent\n', '  */\n', '  function migrateTo(address beneficiary, uint256 amount) external;\n', '}\n', '\n', '/// @title Moeda Loyalty Points token contract\n', '/// @author Erik Mossberg\n', 'contract MoedaToken is StandardToken, Ownable, HasNoTokens {\n', '  string public constant name = "Moeda Loyalty Points";\n', '  string public constant symbol = "MDA";\n', '  uint8 public constant decimals = 18;\n', '\n', '  // The migration agent is used to be to allow opt-in transfer of tokens to a\n', '  // new token contract. This could be set sometime in the future if additional\n', '  // functionality needs be added.\n', '  MigrationAgent public migrationAgent;\n', '\n', '  // used to ensure that a given address is an instance of a particular contract\n', '  uint256 constant AGENT_MAGIC_ID = 0x6e538c0d750418aae4131a91e5a20363;\n', '  uint256 public totalMigrated;\n', '\n', '  uint constant TOKEN_MULTIPLIER = 10**uint256(decimals);\n', "  // don't allow creation of more than this number of tokens\n", '  uint public constant MAX_TOKENS = 20000000 * TOKEN_MULTIPLIER;\n', '\n', '  // transfers are locked during minting\n', '  bool public mintingFinished;\n', '\n', '  // Log when tokens are migrated to a new contract\n', '  event LogMigration(address indexed spender, address grantee, uint256 amount);\n', '  event LogCreation(address indexed donor, uint256 tokensReceived);\n', '  event LogDestruction(address indexed sender, uint256 amount);\n', '  event LogMintingFinished();\n', '\n', '  modifier afterMinting() {\n', '    require(mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier canTransfer(address recipient) {\n', '    require(mintingFinished && recipient != address(0));\n', '    _;\n', '  }\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /// @dev Create moeda token and assign partner allocations\n', '  function MoedaToken() {\n', '    // manual distribution\n', '    issueTokens();\n', '  }\n', '\n', '  function issueTokens() internal {\n', '    mint(0x2f37be861699b6127881693010596B4bDD146f5e, MAX_TOKENS);\n', '  }\n', '\n', '  /// @dev start a migration to a new contract\n', '  /// @param agent address of contract handling migration\n', '  function setMigrationAgent(address agent) external onlyOwner afterMinting {\n', '    require(agent != address(0) && isContract(agent));\n', '    require(MigrationAgent(agent).MIGRATE_MAGIC_ID() == AGENT_MAGIC_ID);\n', '    require(migrationAgent == address(0));\n', '    migrationAgent = MigrationAgent(agent);\n', '  }\n', '\n', '  function isContract(address addr) internal constant returns (bool) {\n', '    uint256 size;\n', '    assembly { size := extcodesize(addr) }\n', '    return size > 0;\n', '  }\n', '\n', '  /// @dev move a given amount of tokens a new contract (destroying them here)\n', '  /// @param beneficiary address that will get tokens in new contract\n', '  /// @param amount the number of tokens to migrate\n', '  function migrate(address beneficiary, uint256 amount) external afterMinting {\n', '    require(beneficiary != address(0));\n', '    require(migrationAgent != address(0));\n', '    require(amount > 0);\n', '\n', '    // safemath subtraction will throw if balance < amount\n', '    balances[msg.sender] = balances[msg.sender].sub(amount);\n', '    totalSupply = totalSupply.sub(amount);\n', '    totalMigrated = totalMigrated.add(amount);\n', '    migrationAgent.migrateTo(beneficiary, amount);\n', '\n', '    LogMigration(msg.sender, beneficiary, amount);\n', '  }\n', '\n', '  /// @dev destroy a given amount of tokens owned by sender\n', '  // anyone that owns tokens can destroy them, reducing the total supply\n', '  function burn(uint256 amount) external {\n', '    require(amount > 0);\n', '    balances[msg.sender] = balances[msg.sender].sub(amount);\n', '    totalSupply = totalSupply.sub(amount);\n', '\n', '    LogDestruction(msg.sender, amount);\n', '  }\n', '\n', '  /// @dev unlock transfers\n', '  function unlock() external onlyOwner canMint {\n', '    mintingFinished = true;\n', '    LogMintingFinished();\n', '  }\n', '\n', '  /// @dev create tokens, only usable before minting has ended\n', '  /// @param recipient address that will receive the created tokens\n', '  /// @param amount the number of tokens to create\n', '  function mint(address recipient, uint256 amount) internal canMint {\n', '    require(amount > 0);\n', '    require(totalSupply.add(amount) <= MAX_TOKENS);\n', '\n', '    balances[recipient] = balances[recipient].add(amount);\n', '    totalSupply = totalSupply.add(amount);\n', '\n', '    LogCreation(recipient, amount);\n', '  }\n', '\n', '  // only allowed after minting has ended\n', '  // note: transfers to null address not allowed, use burn(value)\n', '  function transfer(address to, uint _value)\n', '  public canTransfer(to) returns (bool)\n', '  {\n', '    return super.transfer(to, _value);\n', '  }\n', '\n', '  // only allowed after minting has ended\n', '  // note: transfers to null address not allowed, use burn(value)\n', '  function transferFrom(address from, address to, uint value)\n', '  public canTransfer(to) returns (bool)\n', '  {\n', '    return super.transferFrom(from, to, value);\n', '  }\n', '}']
