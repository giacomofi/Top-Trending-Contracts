['pragma solidity ^0.4.6;\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        if (msg.sender != owner) throw;\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\n', '\n', 'contract SwapToken is owned {\n', '    /* Public variables of the token */\n', '    \n', "    string public standard = 'Token 0.1';\n", '\n', '    // buyer tokens\n', '    string public buyerTokenName;\n', '    string public buyerSymbol;\n', '    uint8 public buyerDecimals;\n', '    uint256 public totalBuyerSupply;\n', '    \n', '    // issuer tokens\n', '    string public issuerTokenName;\n', '    string public issuerSymbol;\n', '    uint8 public issuerDecimals;\n', '    uint256 public totalIssuerSupply;\n', '    \n', '    // more variables\n', '    uint256 public buyPrice;\n', '    uint256 public issuePrice;\n', '    uint256 public cPT;\n', '    uint256 public premium;\n', '    bool public creditStatus;\n', '    address public project_wallet;\n', '    address public collectionFunds;\n', '    //uint public startBlock;\n', '    //uint public endBlock;\n', '    \n', '    /* Sets the constructor variables */\n', '    function SwapToken(\n', '        string _buyerTokenName,\n', '        string _buyerSymbol,\n', '        uint8 _buyerDecimals,\n', '        string _issuerTokenName,\n', '        string _issuerSymbol,\n', '        uint8 _issuerDecimals,\n', '        address _collectionFunds,\n', '        uint _startBlock,\n', '        uint _endBlock\n', '        ) {\n', '        buyerTokenName = _buyerTokenName;\n', '        buyerSymbol = _buyerSymbol;\n', '        buyerDecimals = _buyerDecimals;\n', '        issuerTokenName = _issuerTokenName;\n', '        issuerSymbol = _issuerSymbol;\n', '        issuerDecimals = _issuerDecimals;\n', '        collectionFunds = _collectionFunds;\n', '        //startBlock = _startBlock;\n', '        //endBlock = _endBlock;\n', '    }\n', '\n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOfBuyer;\n', '    mapping (address => uint256) public balanceOfIssuer;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract \n', '    function token(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        uint8 decimalUnits,\n', '        string tokenSymbol\n', '        ) {\n', '        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens\n', '        totalSupply = initialSupply;                        // Update total supply\n', '        name = tokenName;                                   // Set the name for display purposes\n', '        symbol = tokenSymbol;                               // Set the symbol for display purposes\n', '        decimals = decimalUnits;                            // Amount of decimals for display purposes\n', '    }\n', '    */\n', '    \n', '    /* Check if contract has started */\n', '    /*function has_contract_started() private constant returns (bool) {\n', '\t    return block.number >= startBlock;\n', '    }\n', '    \n', '    /* Check if contract has ended */\n', '    /*function has_contract_ended() private constant returns (bool) {\n', '        return block.number > endBlock;\n', '    }*/\n', '    \n', '    /* Set a project Wallet */\n', '    function defineProjectWallet(address target) onlyOwner {\n', '        project_wallet = target;\n', '    }\n', '    \n', '    /* Mint coins */\n', '    \n', '    // buyer tokens\n', '    function mintBuyerToken(address target, uint256 mintedAmount) onlyOwner {\n', '        balanceOfBuyer[target] += mintedAmount;\n', '        totalBuyerSupply += mintedAmount;\n', '        Transfer(0, this, mintedAmount);\n', '        Transfer(this, target, mintedAmount);\n', '    }\n', '    \n', '    // issuer tokens\n', '    function mintIssuerToken(address target, uint256 mintedAmount) onlyOwner {\n', '        balanceOfIssuer[target] += mintedAmount;\n', '        totalIssuerSupply += mintedAmount;\n', '        Transfer(0, this, mintedAmount);\n', '        Transfer(this, target, mintedAmount);\n', '    }\n', '    \n', '    /* Distroy coins */\n', '    \n', '    // Distroy buyer coins for sale in contract \n', '    function distroyBuyerToken(uint256 burnAmount) onlyOwner {\n', '        balanceOfBuyer[this] -= burnAmount;\n', '        totalBuyerSupply -= burnAmount;\n', '    }\n', '    \n', '    // Distroy issuer coins for sale in contract\n', '    function distroyIssuerToken(uint256 burnAmount) onlyOwner {\n', '        balanceOfIssuer[this] -= burnAmount;\n', '        totalIssuerSupply -= burnAmount;\n', '    }\n', '\n', '    /* Send coins */\n', '    \n', '    // send buyer coins\n', '    function transferBuyer(address _to, uint256 _value) {\n', '        if (balanceOfBuyer[msg.sender] < _value) throw;           // Check if the sender has enough\n', '        if (balanceOfBuyer[_to] + _value < balanceOfBuyer[_to]) throw; // Check for overflows\n', '        balanceOfBuyer[msg.sender] -= _value;                     // Subtract from the sender\n', '        balanceOfBuyer[_to] += _value;                            // Add the same to the recipient\n', '        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n', '    }\n', '    \n', '    // send issuer coins\n', '    function transferIssue(address _to, uint256 _value) {\n', '        if (balanceOfIssuer[msg.sender] < _value) throw;\n', '        if (balanceOfIssuer[_to] + _value < balanceOfIssuer[_to]) throw;\n', '        balanceOfIssuer[msg.sender] -= _value;\n', '        balanceOfIssuer[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '    }\n', '    \n', '    /* Allow another contract to spend some tokens in your behalf */\n', '    function approve(address _spender, uint256 _value)\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        return true;\n', '    }\n', '\n', '    /* Approve and then comunicate the approved contract in a single tx */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        returns (bool success) {    \n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /* A contract attempts to get the coins \n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (balanceOfBuyer[_from] < _value) throw;                 // Check if the sender has enough\n', '        if (balanceOfBuyer[_to] + _value < balanceOfBuyer[_to]) throw;  // Check for overflows\n', '        if (_value > allowance[_from][msg.sender]) throw;   // Check allowance\n', '        balanceOfBuyer[_from] -= _value;                          // Subtract from the sender\n', '        balanceOfBuyer[_to] += _value;                            // Add the same to the recipient\n', '        allowance[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    */\n', '    \n', '    /* Set token price */\n', '    function setPrices(uint256 newBuyPrice, uint256 newIssuePrice, uint256 coveragePerToken) onlyOwner {\n', '        buyPrice = newBuyPrice;\n', '        issuePrice = newIssuePrice;\n', '        cPT = coveragePerToken;\n', '        premium = (issuePrice - cPT) * 98/100;\n', '    }\n', '\n', '    /* Buy tokens */\n', '    \n', '    // buy buyer tokens\n', '    function buyBuyerTokens() payable {\n', '        //if(!has_contract_started()) throw;                  // checks if the contract has started\n', '        //if(has_contract_ended()) throw;                     // checks if the contract has ended \n', '        uint amount = msg.value / buyPrice;                // calculates the amount\n', '        if (balanceOfBuyer[this] < amount) throw;               // checks if it has enough to sell\n', "        balanceOfBuyer[msg.sender] += amount;                   // adds the amount to buyer's balance\n", "        balanceOfBuyer[this] -= amount;                         // subtracts amount from seller's balance\n", '        Transfer(this, msg.sender, amount);                // execute an event reflecting the change\n', '    }\n', '    \n', '    // buy issuer tokens\n', '    function buyIssuerTokens() payable {\n', '        uint amount = msg.value / issuePrice;\n', '        if (balanceOfIssuer[this] < amount) throw;\n', '        balanceOfIssuer[msg.sender] += amount;\n', '        balanceOfIssuer[this] -= amount;\n', '        Transfer(this, msg.sender, amount);\n', '    }\n', '    \n', '    /* Credit Status Event */\n', '    function setCreditStatus(bool _status) onlyOwner {\n', '        creditStatus = _status;\n', '    }\n', '\n', '    /* Collection */\n', '    \n', '    // buyer collection sale\n', '    function sellBuyerTokens(uint amount) returns (uint revenue){\n', '        if (creditStatus == false) throw;                       // checks if buyer is eligible for a claim\n', '        if (balanceOfBuyer[msg.sender] < amount ) throw;        // checks if the sender has enough to sell\n', "        balanceOfBuyer[this] += amount;                         // adds the amount to owner's balance\n", "        balanceOfBuyer[msg.sender] -= amount;                   // subtracts the amount from seller's balance\n", '        revenue = amount * cPT;\n', "        if (!msg.sender.send(revenue)) {                   // sends ether to the seller: it's important\n", '            throw;                                         // to do this last to prevent recursion attacks\n', '        } else {\n', '            Transfer(msg.sender, this, amount);             // executes an event reflecting on the change\n', '            return revenue;                                 // ends function and returns\n', '        }\n', '    }\n', '    \n', '    \n', '    // issuer collection sale\n', '    function sellIssuerTokens(uint amount) returns (uint revenue){\n', '        if (balanceOfIssuer[msg.sender] < amount ) throw;\n', '        balanceOfIssuer[this] += amount;\n', '        balanceOfIssuer[msg.sender] -= amount;\n', '        revenue = amount * premium;\n', '        if (!msg.sender.send(revenue)) {\n', '            throw;\n', '        } else {\n', '            Transfer(msg.sender, this, amount);\n', '            return revenue;\n', '        }\n', '    }\n', '    \n', '    /* After contract ends move funds */\n', '    function moveFunds() onlyOwner {\n', '        //if (!has_contract_ended()) throw;\n', '        if (!project_wallet.send(this.balance)) throw;\n', '    }\n', '\n', '    /* This unnamed function is called whenever someone tries to send ether to it */\n', '    function () {\n', '        throw;     // Prevents accidental sending of ether\n', '    }\n', '}']