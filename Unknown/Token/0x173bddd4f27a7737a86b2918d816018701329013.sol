['pragma solidity ^0.4.11;\n', '\n', '\n', '\n', '\n', 'contract kkICOTest77 {\n', '    \n', '    string public name;\n', '    string public symbol;\n', '    \n', '    uint256 public decimals;\n', '    uint256 public INITIAL_SUPPLY;\n', '    uint256 public totalSupply;\n', '    \n', '    uint256 public rate;\n', '  \n', '    address public owner;\t\t\t\t\t\t    //init owner address?\n', '\tuint256 public tokens;\t\t\t\t\t\t\t//init the coin supply var\n', '\t\n', '\tuint256 public amount;\n', '\t\n', '\t\n', '\tfunction kkICOTest77() {\t\t\t//This function gives the total supply to the contract\n', '        name = "kkTEST77";\n', '        symbol = "kkTST77";\n', '        \n', '        decimals = 0;\n', '        INITIAL_SUPPLY = 30000000;\n', '        \n', '        rate = 5000;\n', '\t\t\n', '\t\towner = msg.sender;\t\t\t    //Make owner of contract the creator\n', '\t\ttokens = INITIAL_SUPPLY;\n', '\t\ttotalSupply = INITIAL_SUPPLY;\n', '\t}\n', '\t\n', '\t\n', '\t//This function is called when Ether is sent to the contract address\n', '\t//Even if 0 ether is sent.\n', '\tfunction () payable {\n', '\t    \n', '\t    uint256 tryAmount = div((mul(msg.value, rate)), 1 ether);           //Don&#39;t let people buy more tokens than there are.\n', '\t    \n', '\t\tif (msg.value == 0 || msg.value < 0 || tokens < tryAmount) {\t\t//If zero ether is sent, kill. Do nothing. \n', '\t\t\tthrow;\n', '\t\t}\n', '\t\t\n', '\t\tbuyTokens(msg.value);\t\t//call buyTokens with the ether sent amount as an arg\n', '\n', '\t}\n', '\t\n', '\t\n', '\t//This function takes the amount of ether sent and buys tokens\n', '\t//Then sends the tokens to buyer\n', '\tfunction buyTokens(uint256 etherSent) payable {\t                //Take the etherSent var and do stuff\n', '\t    amount = 0;\t\t\t\t\t\t\t\t\t                //set the &#39;amount&#39; var back to zero\n', '\t\tamount = div((mul(etherSent, rate)), 1 ether);\t\t//take sent ether, multiply it by the rate then divide by 1 ether.\n', '\t\tbalances[msg.sender] += amount;                             //Send tokens to buyer\n', '\t\ttokens -= amount;\t\t  \t\t\t\t\t                //Subtract bought tokens from supply\n', '\t\tamount = 0;\t\t\t\t\t\t\t\t\t                //set the &#39;amount&#39; var back to zero\n', '\t\t\n', '\t\t\n', '\t\towner.transfer(msg.value);\t\t\t\t\t//Send the ETH to contract owner.\n', '\n', '\t}\n', '\t\n', '\t\n', '\t\n', '\t\n', '\t\n', '\t\n', '\t\n', '  \n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  \n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '  \n', '  \n', '  mapping(address => uint256) balances;\n', '\n', '\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = sub(balances[msg.sender], _value);\n', '    balances[_to] = add(balances[_to], _value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '  \n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '\n', '    balances[_to] = add(balances[_to], _value);\n', '    balances[_from] = sub(balances[_from], _value);\n', '    allowed[_from][msg.sender] = sub(_allowance, _value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\t\n', '\t\n', '\t\n', '\t\n', '\t\n', '\t\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\t\n', '\t\n', '\t\n', '\t\n', '\t\n', '}']
['pragma solidity ^0.4.11;\n', '\n', '\n', '\n', '\n', 'contract kkICOTest77 {\n', '    \n', '    string public name;\n', '    string public symbol;\n', '    \n', '    uint256 public decimals;\n', '    uint256 public INITIAL_SUPPLY;\n', '    uint256 public totalSupply;\n', '    \n', '    uint256 public rate;\n', '  \n', '    address public owner;\t\t\t\t\t\t    //init owner address?\n', '\tuint256 public tokens;\t\t\t\t\t\t\t//init the coin supply var\n', '\t\n', '\tuint256 public amount;\n', '\t\n', '\t\n', '\tfunction kkICOTest77() {\t\t\t//This function gives the total supply to the contract\n', '        name = "kkTEST77";\n', '        symbol = "kkTST77";\n', '        \n', '        decimals = 0;\n', '        INITIAL_SUPPLY = 30000000;\n', '        \n', '        rate = 5000;\n', '\t\t\n', '\t\towner = msg.sender;\t\t\t    //Make owner of contract the creator\n', '\t\ttokens = INITIAL_SUPPLY;\n', '\t\ttotalSupply = INITIAL_SUPPLY;\n', '\t}\n', '\t\n', '\t\n', '\t//This function is called when Ether is sent to the contract address\n', '\t//Even if 0 ether is sent.\n', '\tfunction () payable {\n', '\t    \n', "\t    uint256 tryAmount = div((mul(msg.value, rate)), 1 ether);           //Don't let people buy more tokens than there are.\n", '\t    \n', '\t\tif (msg.value == 0 || msg.value < 0 || tokens < tryAmount) {\t\t//If zero ether is sent, kill. Do nothing. \n', '\t\t\tthrow;\n', '\t\t}\n', '\t\t\n', '\t\tbuyTokens(msg.value);\t\t//call buyTokens with the ether sent amount as an arg\n', '\n', '\t}\n', '\t\n', '\t\n', '\t//This function takes the amount of ether sent and buys tokens\n', '\t//Then sends the tokens to buyer\n', '\tfunction buyTokens(uint256 etherSent) payable {\t                //Take the etherSent var and do stuff\n', "\t    amount = 0;\t\t\t\t\t\t\t\t\t                //set the 'amount' var back to zero\n", '\t\tamount = div((mul(etherSent, rate)), 1 ether);\t\t//take sent ether, multiply it by the rate then divide by 1 ether.\n', '\t\tbalances[msg.sender] += amount;                             //Send tokens to buyer\n', '\t\ttokens -= amount;\t\t  \t\t\t\t\t                //Subtract bought tokens from supply\n', "\t\tamount = 0;\t\t\t\t\t\t\t\t\t                //set the 'amount' var back to zero\n", '\t\t\n', '\t\t\n', '\t\towner.transfer(msg.value);\t\t\t\t\t//Send the ETH to contract owner.\n', '\n', '\t}\n', '\t\n', '\t\n', '\t\n', '\t\n', '\t\n', '\t\n', '\t\n', '  \n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  \n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '  \n', '  \n', '  mapping(address => uint256) balances;\n', '\n', '\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = sub(balances[msg.sender], _value);\n', '    balances[_to] = add(balances[_to], _value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '  \n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '\n', '    balances[_to] = add(balances[_to], _value);\n', '    balances[_from] = sub(balances[_from], _value);\n', '    allowed[_from][msg.sender] = sub(_allowance, _value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\t\n', '\t\n', '\t\n', '\t\n', '\t\n', '\t\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\t\n', '\t\n', '\t\n', '\t\n', '\t\n', '}']
