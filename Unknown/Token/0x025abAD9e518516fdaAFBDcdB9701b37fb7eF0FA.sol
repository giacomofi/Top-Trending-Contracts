['pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * Authors: Justin Jones, Marshall Stokes\n', ' * Published: 2017 by Sprux LLC\n', ' */\n', '\n', '\n', '/* Contract provides functions so only contract owner can execute a function */\n', 'contract owned {\n', '    address public owner; //the contract owner\n', '\n', '    function owned() {\n', '        owner = msg.sender; //constructor initializes the creator as the owner on initialization\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        if (msg.sender != owner) throw; // functions with onlyOwner will throw and exception if not the contract owner\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner { // transfer contract owner to new owner\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', 'contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\n', '\n', '/**\n', ' * Centrally issued Ethereum token.\n', ' *\n', ' * Token supply is created in the token contract creation and allocated to one owner for distribution. This token is mintable, so more tokens\n', ' * can be added to the total supply and assigned to an address supplied at contract execution.\n', ' *\n', ' */\n', '\n', 'contract StandardMintableToken is owned{ \n', '    /* Public variables of the token */\n', '    string public standard = &#39;Token 0.1&#39;;\n', '    string public name;                     // the token name \n', '    string public symbol;                   // the ticker symbol\n', '    uint8 public decimals;                  // amount of decimal places in the token\n', '    uint256 public totalSupply;             // total tokens\n', '    \n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    \n', '    /* This creates an array with all frozen accounts */\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    \n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event FrozenFunds(address target, bool frozen);\n', '    \n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function StandardMintableToken(\n', '        string tokenName,               // the token name\n', '        uint8 decimalUnits,             // amount of decimal places in the token\n', '        string tokenSymbol,             // the token symbol\n', '        uint256 initialSupply            // the initial distro amount\n', '        ) {\n', '\n', '        balanceOf[msg.sender] = initialSupply;                   // Give the creator all initial tokens\n', '        totalSupply = initialSupply;                             // Update total supply\n', '        name = tokenName;                                        // Set the name for display purposes\n', '        symbol = tokenSymbol;                                    // Set the symbol for display purposes\n', '        decimals = decimalUnits;                                 // Amount of decimals for display purposes\n', '    }\n', '\n', '    /* Send tokens */\n', '    function transfer(address _to, uint256 _value) returns (bool success){\n', '        if (_value == 0) return false; \t\t\t\t             // Don&#39;t waste gas on zero-value transaction\n', '        if (balanceOf[msg.sender] < _value) return false;    // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\n', '        if (frozenAccount[msg.sender]) throw;                // Check if sender frozen\n', '        if (frozenAccount[_to]) throw;                       // Check if recipient frozen                 \n', '        balanceOf[msg.sender] -= _value;                     // Subtract from the sender\n', '        balanceOf[_to] += _value;                            // Add the same to the recipient\n', '        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n', '        return true;\n', '    }\n', '\n', '    /* Allow another contract to spend some tokens on your behalf */\n', '    function approve(address _spender, uint256 _value)\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;            // Update allowance first\n', '        Approval(msg.sender, _spender, _value);              // Notify of new Approval\n', '        return true;\n', '    }\n', '\n', '    /* Approve and then communicate the approved contract in a single tx */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }        \n', '\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (frozenAccount[_from]) throw;                        // Check if sender frozen       \n', '        if (frozenAccount[_to]) throw;                          // Check if recipient frozen                 \n', '        if (balanceOf[_from] < _value) return false;          \t// Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) throw;    // Check for overflows\n', '        if (_value > allowance[_from][msg.sender]) throw;       // Check allowance\n', '        balanceOf[_from] -= _value;                             // Subtract from the sender\n', '        balanceOf[_to] += _value;                               // Add the same to the recipient\n', '        allowance[_from][msg.sender] -= _value;                 // Update sender&#39;s allowance \n', '        Transfer(_from, _to, _value);                           // Perform the transfer\n', '        return true;\n', '    }\n', '    \n', '    /* A function to freeze or un-freeze accounts, to and from */\n', '    \n', '    function freezeAccount(address target, bool freeze ) onlyOwner {    \n', '        frozenAccount[target] = freeze;                       // set the array object to the value of bool freeze\n', '        FrozenFunds(target, freeze);                          // notify event\n', '    }\n', '    \n', '\n', '    /* A function to burn tokens and remove from supply */\n', '    \n', '    function burn(uint256 _value) returns (bool success) {\n', '        if (frozenAccount[msg.sender]) throw;                 // Check if sender frozen       \n', '        if (_value == 0) return false; \t\t\t\t          // Don&#39;t waste gas on zero-value transaction\n', '        if (balanceOf[msg.sender] < _value) return false;     // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;                      // Subtract from the sender\n', '        totalSupply -= _value;                                // Updates totalSupply\n', '        Transfer(msg.sender,0, _value);\t                      // Burn _value tokens\n', '        return true;\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _value) onlyOwner returns (bool success) {\n', '        if (frozenAccount[msg.sender]) throw;                // Check if sender frozen       \n', '        if (frozenAccount[_from]) throw;                     // Check if recipient frozen \n', '        if (_value == 0) return false; \t\t\t             // Don&#39;t waste gas on zero-value transaction\n', '        if (balanceOf[_from] < _value) return false;         // Check if the sender has enough\n', '        if (_value > allowance[_from][msg.sender]) throw;    // Check allowance\n', '        balanceOf[_from] -= _value;                          // Subtract from the sender\n', '        totalSupply -= _value;                               // Updates totalSupply\n', '        allowance[_from][msg.sender] -= _value;\t\t\t\t // Updates allowance\n', '        Transfer(_from, 0, _value);                          // Burn tokens by Transfer to incinerator\n', '        return true;\n', '    }\n', '    \n', '    /* A function to add more tokens to the total supply, accessible only to owner*/\n', '    \n', '    function mintToken(address target, uint256 mintedAmount) onlyOwner {\n', '        if (balanceOf[target] + mintedAmount < balanceOf[target]) throw; // Check for overflows\n', '        balanceOf[target] += mintedAmount;\n', '        totalSupply += mintedAmount;\n', '        Transfer(0, target, mintedAmount);\n', '\n', '    }\n', '    \n', '}']