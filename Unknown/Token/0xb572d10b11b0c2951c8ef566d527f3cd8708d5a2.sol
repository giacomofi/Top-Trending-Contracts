['pragma solidity ^0.4.15;\n', '\n', 'contract Owned {\n', '\n', '    // The address of the account that is the current owner \n', '    address public owner;\n', '\n', '    // The publiser is the inital owner\n', '    function Owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * Access is restricted to the current owner\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Transfer ownership to `_newOwner`\n', '     *\n', '     * @param _newOwner The address of the account that will become the new owner \n', '     */\n', '    function transferOwnership(address _newOwner) onlyOwner {\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '// Abstract contract for the full ERC 20 Token standard\n', '// https://github.com/ethereum/EIPs/issues/20\n', 'contract Token {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '/**\n', ' * Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\n', ' *\n', ' * Modified version of https://github.com/ConsenSys/Tokens that implements the \n', ' * original Token contract, an abstract contract for the full ERC 20 Token standard\n', ' */\n', 'contract StandardToken is Token {\n', '\n', '\n', '    /**\n', '     * ERC20 Short Address Attack fix\n', '     */\n', '    modifier onlyPayloadSize(uint numArgs) {\n', '        assert(msg.data.length == numArgs * 32 + 4);\n', '        _;\n', '    }\n', '\n', '\n', '    // ZTT token balances\n', '    mapping (address => uint256) balances;\n', '\n', '    // ZTT token allowances\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    \n', '\n', '    /** \n', '     * Get balance of `_owner` \n', '     * \n', '     * @param _owner The address from which the balance will be retrieved\n', '     * @return The balance\n', '     */\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '\n', '    /** \n', '     * Send `_value` token to `_to` from `msg.sender`\n', '     * \n', '     * @param _to The address of the recipient\n', '     * @param _value The amount of token to be transferred\n', '     * @return Whether the transfer was successful or not\n', '     */\n', '    function transfer(address _to, uint256 _value) onlyPayloadSize(2) returns (bool success) {\n', '\n', '        // Check if the sender has enough tokens\n', '        require(balances[msg.sender] >= _value);   \n', '\n', '        // Check for overflows\n', '        require(balances[_to] + _value > balances[_to]);\n', '\n', '        // Transfer tokens\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '\n', '        // Notify listners\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    /** \n', '     * Send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '     * \n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value The amount of token to be transferred\n', '     * @return Whether the transfer was successful or not\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3) returns (bool success) {\n', '\n', '        // Check if the sender has enough\n', '        require(balances[_from] >= _value);\n', '\n', '        // Check for overflows\n', '        require(balances[_to] + _value > balances[_to]);\n', '\n', '        // Check allowance\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        // Transfer tokens\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '\n', '        // Update allowance\n', '        allowed[_from][msg.sender] -= _value;\n', '\n', '        // Notify listners\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    /** \n', '     * `msg.sender` approves `_spender` to spend `_value` tokens\n', '     * \n', '     * @param _spender The address of the account able to transfer the tokens\n', '     * @param _value The amount of tokens to be approved for transfer\n', '     * @return Whether the approval was successful or not\n', '     */\n', '    function approve(address _spender, uint256 _value) onlyPayloadSize(2) returns (bool success) {\n', '\n', '        // Update allowance\n', '        allowed[msg.sender][_spender] = _value;\n', '\n', '        // Notify listners\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    /** \n', '     * Get the amount of remaining tokens that `_spender` is allowed to spend from `_owner`\n', '     * \n', '     * @param _owner The address of the account owning tokens\n', '     * @param _spender The address of the account able to transfer the tokens\n', '     * @return Amount of remaining tokens allowed to spent\n', '     */\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ZTT (ZeroTraffic) token\n', ' *\n', ' * Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20 with the addition \n', ' * of ownership, a lock and issuing.\n', ' *\n', ' * #created 29/08/2017\n', ' * #author Frank Bonnet\n', ' */\n', 'contract ZTToken is Owned, StandardToken {\n', '\n', '    // Ethereum token standard\n', '    string public standard = "Token 0.2";\n', '\n', '    // Full name\n', '    string public name = "ZeroTraffic";        \n', '    \n', '    // Symbol\n', '    string public symbol = "ZTT";\n', '\n', '    // No decimal points\n', '    uint8 public decimals = 8;\n', '\n', '    // Core team insentive distribution\n', '    bool public incentiveDistributed = false;\n', '    uint256 public incentiveDistributionDate = 0;\n', '    uint256 public incentiveDistributionInterval = 2 years;\n', '    \n', '    // Core team incentives\n', '    struct Incentive {\n', '        address recipient;\n', '        uint8 percentage;\n', '    }\n', '\n', '    Incentive[] public incentives;\n', '    \n', '\n', '    /**\n', '     * Starts with a total supply of zero and the creator starts with \n', '     * zero tokens (just like everyone else)\n', '     */\n', '    function ZTToken() {  \n', '        balances[msg.sender] = 0;\n', '        totalSupply = 0;\n', '        incentiveDistributionDate = now + incentiveDistributionInterval;\n', '        incentives.push(Incentive(0x3cAf983aCCccc2551195e0809B7824DA6FDe4EC8, 1)); // 0.01 * 10^2 Frank Bonnet\n', '    }\n', '\n', '\n', '    /**\n', '     * Distributes incentives over the core team members as \n', '     * described in the whitepaper\n', '     */\n', '    function withdrawIncentives() {\n', '        require(!incentiveDistributed);\n', '        require(now > incentiveDistributionDate);\n', '\n', '        incentiveDistributed = true;\n', '\n', '        uint256 totalSupplyToDate = totalSupply;\n', '        for (uint256 i = 0; i < incentives.length; i++) {\n', '\n', '            // totalSupplyToDate * (percentage * 10^2) / 10^2 / denominator\n', '            uint256 amount = totalSupplyToDate * incentives[i].percentage / 10**2; \n', '            address recipient = incentives[i].recipient;\n', '\n', '            // Create tokens\n', '            balances[recipient] += amount;\n', '            totalSupply += amount;\n', '\n', '            // Notify listners\n', '            Transfer(0, this, amount);\n', '            Transfer(this, recipient, amount);\n', '        }\n', '    }\n', '\n', '\n', '    /**\n', '     * Issues `_value` new tokens to `_recipient` (_value < 0 guarantees that tokens are never removed)\n', '     *\n', '     * @param _recipient The address to which the tokens will be issued\n', '     * @param _value The amount of new tokens to issue\n', '     * @return Whether the approval was successful or not\n', '     */\n', '    function issue(address _recipient, uint256 _value) onlyOwner onlyPayloadSize(2) returns (bool success) {\n', '\n', '        // Guarantee positive \n', '        require(_value > 0);\n', '\n', '        // Create tokens\n', '        balances[_recipient] += _value;\n', '        totalSupply += _value;\n', '\n', '        // Notify listners \n', '        Transfer(0, owner, _value);\n', '        Transfer(owner, _recipient, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * Prevents accidental sending of ether\n', '     */\n', '    function () {\n', '        revert();\n', '    }\n', '}']
['pragma solidity ^0.4.15;\n', '\n', 'contract Owned {\n', '\n', '    // The address of the account that is the current owner \n', '    address public owner;\n', '\n', '    // The publiser is the inital owner\n', '    function Owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * Access is restricted to the current owner\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Transfer ownership to `_newOwner`\n', '     *\n', '     * @param _newOwner The address of the account that will become the new owner \n', '     */\n', '    function transferOwnership(address _newOwner) onlyOwner {\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '// Abstract contract for the full ERC 20 Token standard\n', '// https://github.com/ethereum/EIPs/issues/20\n', 'contract Token {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '/**\n', ' * Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\n', ' *\n', ' * Modified version of https://github.com/ConsenSys/Tokens that implements the \n', ' * original Token contract, an abstract contract for the full ERC 20 Token standard\n', ' */\n', 'contract StandardToken is Token {\n', '\n', '\n', '    /**\n', '     * ERC20 Short Address Attack fix\n', '     */\n', '    modifier onlyPayloadSize(uint numArgs) {\n', '        assert(msg.data.length == numArgs * 32 + 4);\n', '        _;\n', '    }\n', '\n', '\n', '    // ZTT token balances\n', '    mapping (address => uint256) balances;\n', '\n', '    // ZTT token allowances\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    \n', '\n', '    /** \n', '     * Get balance of `_owner` \n', '     * \n', '     * @param _owner The address from which the balance will be retrieved\n', '     * @return The balance\n', '     */\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '\n', '    /** \n', '     * Send `_value` token to `_to` from `msg.sender`\n', '     * \n', '     * @param _to The address of the recipient\n', '     * @param _value The amount of token to be transferred\n', '     * @return Whether the transfer was successful or not\n', '     */\n', '    function transfer(address _to, uint256 _value) onlyPayloadSize(2) returns (bool success) {\n', '\n', '        // Check if the sender has enough tokens\n', '        require(balances[msg.sender] >= _value);   \n', '\n', '        // Check for overflows\n', '        require(balances[_to] + _value > balances[_to]);\n', '\n', '        // Transfer tokens\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '\n', '        // Notify listners\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    /** \n', '     * Send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '     * \n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value The amount of token to be transferred\n', '     * @return Whether the transfer was successful or not\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3) returns (bool success) {\n', '\n', '        // Check if the sender has enough\n', '        require(balances[_from] >= _value);\n', '\n', '        // Check for overflows\n', '        require(balances[_to] + _value > balances[_to]);\n', '\n', '        // Check allowance\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        // Transfer tokens\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '\n', '        // Update allowance\n', '        allowed[_from][msg.sender] -= _value;\n', '\n', '        // Notify listners\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    /** \n', '     * `msg.sender` approves `_spender` to spend `_value` tokens\n', '     * \n', '     * @param _spender The address of the account able to transfer the tokens\n', '     * @param _value The amount of tokens to be approved for transfer\n', '     * @return Whether the approval was successful or not\n', '     */\n', '    function approve(address _spender, uint256 _value) onlyPayloadSize(2) returns (bool success) {\n', '\n', '        // Update allowance\n', '        allowed[msg.sender][_spender] = _value;\n', '\n', '        // Notify listners\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    /** \n', '     * Get the amount of remaining tokens that `_spender` is allowed to spend from `_owner`\n', '     * \n', '     * @param _owner The address of the account owning tokens\n', '     * @param _spender The address of the account able to transfer the tokens\n', '     * @return Amount of remaining tokens allowed to spent\n', '     */\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ZTT (ZeroTraffic) token\n', ' *\n', ' * Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20 with the addition \n', ' * of ownership, a lock and issuing.\n', ' *\n', ' * #created 29/08/2017\n', ' * #author Frank Bonnet\n', ' */\n', 'contract ZTToken is Owned, StandardToken {\n', '\n', '    // Ethereum token standard\n', '    string public standard = "Token 0.2";\n', '\n', '    // Full name\n', '    string public name = "ZeroTraffic";        \n', '    \n', '    // Symbol\n', '    string public symbol = "ZTT";\n', '\n', '    // No decimal points\n', '    uint8 public decimals = 8;\n', '\n', '    // Core team insentive distribution\n', '    bool public incentiveDistributed = false;\n', '    uint256 public incentiveDistributionDate = 0;\n', '    uint256 public incentiveDistributionInterval = 2 years;\n', '    \n', '    // Core team incentives\n', '    struct Incentive {\n', '        address recipient;\n', '        uint8 percentage;\n', '    }\n', '\n', '    Incentive[] public incentives;\n', '    \n', '\n', '    /**\n', '     * Starts with a total supply of zero and the creator starts with \n', '     * zero tokens (just like everyone else)\n', '     */\n', '    function ZTToken() {  \n', '        balances[msg.sender] = 0;\n', '        totalSupply = 0;\n', '        incentiveDistributionDate = now + incentiveDistributionInterval;\n', '        incentives.push(Incentive(0x3cAf983aCCccc2551195e0809B7824DA6FDe4EC8, 1)); // 0.01 * 10^2 Frank Bonnet\n', '    }\n', '\n', '\n', '    /**\n', '     * Distributes incentives over the core team members as \n', '     * described in the whitepaper\n', '     */\n', '    function withdrawIncentives() {\n', '        require(!incentiveDistributed);\n', '        require(now > incentiveDistributionDate);\n', '\n', '        incentiveDistributed = true;\n', '\n', '        uint256 totalSupplyToDate = totalSupply;\n', '        for (uint256 i = 0; i < incentives.length; i++) {\n', '\n', '            // totalSupplyToDate * (percentage * 10^2) / 10^2 / denominator\n', '            uint256 amount = totalSupplyToDate * incentives[i].percentage / 10**2; \n', '            address recipient = incentives[i].recipient;\n', '\n', '            // Create tokens\n', '            balances[recipient] += amount;\n', '            totalSupply += amount;\n', '\n', '            // Notify listners\n', '            Transfer(0, this, amount);\n', '            Transfer(this, recipient, amount);\n', '        }\n', '    }\n', '\n', '\n', '    /**\n', '     * Issues `_value` new tokens to `_recipient` (_value < 0 guarantees that tokens are never removed)\n', '     *\n', '     * @param _recipient The address to which the tokens will be issued\n', '     * @param _value The amount of new tokens to issue\n', '     * @return Whether the approval was successful or not\n', '     */\n', '    function issue(address _recipient, uint256 _value) onlyOwner onlyPayloadSize(2) returns (bool success) {\n', '\n', '        // Guarantee positive \n', '        require(_value > 0);\n', '\n', '        // Create tokens\n', '        balances[_recipient] += _value;\n', '        totalSupply += _value;\n', '\n', '        // Notify listners \n', '        Transfer(0, owner, _value);\n', '        Transfer(owner, _recipient, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * Prevents accidental sending of ether\n', '     */\n', '    function () {\n', '        revert();\n', '    }\n', '}']
