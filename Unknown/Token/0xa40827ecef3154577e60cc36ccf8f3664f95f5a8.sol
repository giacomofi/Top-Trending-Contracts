['pragma solidity ^0.4.13;\n', '\n', 'contract SafeMath {\n', '    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x + y;\n', '      assert((z >= x) && (z >= y));\n', '      return z;\n', '    }\n', '\n', '    function safeSubtrCPCE(uint256 x, uint256 y) internal returns(uint256) {\n', '      assert(x >= y);\n', '      uint256 z = x - y;\n', '      return z;\n', '    }\n', '\n', '    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x * y;\n', '      assert((x == 0)||(z/x == y));\n', '      return z;\n', '    }\n', '\n', '}\n', '\n', 'contract Token {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '/*  ERC 20 token */\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '      if (balances[msg.sender] >= _value && _value > 0) {\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract CPCE is StandardToken, SafeMath {\n', '\n', '    string public constant name = "CPC123";\n', '    string public constant symbol = "CPC123";\n', '    uint256 public constant decimals = 18;\n', '    string public version = "1.0";\n', '\n', '    address public CPCEPrivateDeposit;\n', '    address public CPCEIcoDeposit;\n', '    address public CPCEFundDeposit;\n', '\n', '    uint256 public constant factorial = 6;\n', '    uint256 public constant CPCEPrivate = 150 * (10**factorial) * 10**decimals; //150m私募代币数量，共计1.5亿代币\n', '    uint256 public constant CPCEIco = 150 * (10**factorial) * 10**decimals; //150m的ico代币数量，共计1.5亿代币\n', '    uint256 public constant CPCEFund = 380 * (10**factorial) * 10**decimals; //380m的ico代币数量，共计3.8亿代币\n', '  \n', '\n', '    // constructor\n', '    function CPCE()\n', '    {\n', '      CPCEPrivateDeposit = 0x960F9fD51b887F537268b2E4d88Eba995E87E5E0;\n', '      CPCEIcoDeposit = 0x90d247AcdA80eBB6E950F0087171ea821B208541;\n', '      CPCEFundDeposit = 0xF249A8353572e98545b37Dc16b3A5724053D7337;\n', '\n', '      balances[CPCEPrivateDeposit] = CPCEPrivate;\n', '      balances[CPCEIcoDeposit] = CPCEIco;\n', '      balances[CPCEFundDeposit] = CPCEFund;\n', '    }\n', '}']
['pragma solidity ^0.4.13;\n', '\n', 'contract SafeMath {\n', '    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x + y;\n', '      assert((z >= x) && (z >= y));\n', '      return z;\n', '    }\n', '\n', '    function safeSubtrCPCE(uint256 x, uint256 y) internal returns(uint256) {\n', '      assert(x >= y);\n', '      uint256 z = x - y;\n', '      return z;\n', '    }\n', '\n', '    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x * y;\n', '      assert((x == 0)||(z/x == y));\n', '      return z;\n', '    }\n', '\n', '}\n', '\n', 'contract Token {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '/*  ERC 20 token */\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '      if (balances[msg.sender] >= _value && _value > 0) {\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract CPCE is StandardToken, SafeMath {\n', '\n', '    string public constant name = "CPC123";\n', '    string public constant symbol = "CPC123";\n', '    uint256 public constant decimals = 18;\n', '    string public version = "1.0";\n', '\n', '    address public CPCEPrivateDeposit;\n', '    address public CPCEIcoDeposit;\n', '    address public CPCEFundDeposit;\n', '\n', '    uint256 public constant factorial = 6;\n', '    uint256 public constant CPCEPrivate = 150 * (10**factorial) * 10**decimals; //150m私募代币数量，共计1.5亿代币\n', '    uint256 public constant CPCEIco = 150 * (10**factorial) * 10**decimals; //150m的ico代币数量，共计1.5亿代币\n', '    uint256 public constant CPCEFund = 380 * (10**factorial) * 10**decimals; //380m的ico代币数量，共计3.8亿代币\n', '  \n', '\n', '    // constructor\n', '    function CPCE()\n', '    {\n', '      CPCEPrivateDeposit = 0x960F9fD51b887F537268b2E4d88Eba995E87E5E0;\n', '      CPCEIcoDeposit = 0x90d247AcdA80eBB6E950F0087171ea821B208541;\n', '      CPCEFundDeposit = 0xF249A8353572e98545b37Dc16b3A5724053D7337;\n', '\n', '      balances[CPCEPrivateDeposit] = CPCEPrivate;\n', '      balances[CPCEIcoDeposit] = CPCEIco;\n', '      balances[CPCEFundDeposit] = CPCEFund;\n', '    }\n', '}']
