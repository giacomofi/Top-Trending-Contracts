['pragma solidity ^ 0.4.2;\n', '\n', 'contract tokenRecipient {\n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData);\n', '}\n', '\n', 'contract ERC20 {\n', '    /* Public variables of the token */\n', '    string public standard = &#39;CREDITS&#39;;\n', '    string public name = &#39;CREDITS&#39;;\n', '    string public symbol = &#39;CS&#39;;\n', '    uint8 public decimals = 6;\n', '    uint256 public totalSupply = 1000000000000000;\n', '\n', '    /* This creates an array with all balances */\n', '    mapping(address => uint256) public balanceOf;\n', '    mapping(address => mapping(address => uint256)) public allowance;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '\n', '    function ERC20() {\n', '        balanceOf[msg.sender] = totalSupply;\n', '    }\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) {\n', '        if (balanceOf[msg.sender] < _value) throw; // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\n', '        balanceOf[msg.sender] -= _value; // Subtract from the sender\n', '        balanceOf[_to] += _value; // Add the same to the recipient\n', '        Transfer(msg.sender, _to, _value); // Notify anyone listening that this transfer took place\n', '    }\n', '\n', '    /* Allow another contract to spend some tokens in your behalf */\n', '    function approve(address _spender, uint256 _value)\n', '    returns(bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        return true;\n', '    }\n', '\n', '    /* Approve and then comunicate the approved contract in a single tx */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '    returns(bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {\n', '        if (balanceOf[_from] < _value) throw; // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\n', '        if (_value > allowance[_from][msg.sender]) throw; // Check allowance\n', '        balanceOf[_from] -= _value; // Subtract from the sender\n', '        balanceOf[_to] += _value; // Add the same to the recipient\n', '        allowance[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /* This unnamed function is called whenever someone tries to send ether to it */\n', '    function () {\n', '        throw; // Prevents accidental sending of ether\n', '    }\n', '}']
['pragma solidity ^ 0.4.2;\n', '\n', 'contract tokenRecipient {\n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData);\n', '}\n', '\n', 'contract ERC20 {\n', '    /* Public variables of the token */\n', "    string public standard = 'CREDITS';\n", "    string public name = 'CREDITS';\n", "    string public symbol = 'CS';\n", '    uint8 public decimals = 6;\n', '    uint256 public totalSupply = 1000000000000000;\n', '\n', '    /* This creates an array with all balances */\n', '    mapping(address => uint256) public balanceOf;\n', '    mapping(address => mapping(address => uint256)) public allowance;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '\n', '    function ERC20() {\n', '        balanceOf[msg.sender] = totalSupply;\n', '    }\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) {\n', '        if (balanceOf[msg.sender] < _value) throw; // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\n', '        balanceOf[msg.sender] -= _value; // Subtract from the sender\n', '        balanceOf[_to] += _value; // Add the same to the recipient\n', '        Transfer(msg.sender, _to, _value); // Notify anyone listening that this transfer took place\n', '    }\n', '\n', '    /* Allow another contract to spend some tokens in your behalf */\n', '    function approve(address _spender, uint256 _value)\n', '    returns(bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        return true;\n', '    }\n', '\n', '    /* Approve and then comunicate the approved contract in a single tx */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '    returns(bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {\n', '        if (balanceOf[_from] < _value) throw; // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows\n', '        if (_value > allowance[_from][msg.sender]) throw; // Check allowance\n', '        balanceOf[_from] -= _value; // Subtract from the sender\n', '        balanceOf[_to] += _value; // Add the same to the recipient\n', '        allowance[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /* This unnamed function is called whenever someone tries to send ether to it */\n', '    function () {\n', '        throw; // Prevents accidental sending of ether\n', '    }\n', '}']
