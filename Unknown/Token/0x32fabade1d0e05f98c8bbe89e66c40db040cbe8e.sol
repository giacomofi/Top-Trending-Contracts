['pragma solidity ^0.4.4;\n', '\n', '/**\n', ' * @title Contract for object that have an owner\n', ' */\n', 'contract Owned {\n', '    /**\n', '     * Contract owner address\n', '     */\n', '    address public owner;\n', '\n', '    /**\n', '     * @dev Delegate contract to another person\n', '     * @param _owner New owner address \n', '     */\n', '    function setOwner(address _owner) onlyOwner\n', '    { owner = _owner; }\n', '\n', '    /**\n', '     * @dev Owner check modifier\n', '     */\n', '    modifier onlyOwner { if (msg.sender != owner) throw; _; }\n', '}\n', '\n', '/**\n', ' * @title Common pattern for destroyable contracts \n', ' */\n', 'contract Destroyable {\n', '    address public hammer;\n', '\n', '    /**\n', '     * @dev Hammer setter\n', '     * @param _hammer New hammer address\n', '     */\n', '    function setHammer(address _hammer) onlyHammer\n', '    { hammer = _hammer; }\n', '\n', '    /**\n', '     * @dev Destroy contract and scrub a data\n', '     * @notice Only hammer can call it \n', '     */\n', '    function destroy() onlyHammer\n', '    { suicide(msg.sender); }\n', '\n', '    /**\n', '     * @dev Hammer check modifier\n', '     */\n', '    modifier onlyHammer { if (msg.sender != hammer) throw; _; }\n', '}\n', '\n', '/**\n', ' * @title Generic owned destroyable contract\n', ' */\n', 'contract Object is Owned, Destroyable {\n', '    function Object() {\n', '        owner  = msg.sender;\n', '        hammer = msg.sender;\n', '    }\n', '}\n', '\n', '// Standard token interface (ERC 20)\n', '// https://github.com/ethereum/EIPs/issues/20\n', 'contract ERC20 \n', '{\n', '// Functions:\n', '    /// @return total amount of tokens\n', '    uint256 public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool);\n', '\n', '    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256);\n', '\n', '// Events:\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '/**\n', ' * @title Token contract represents any asset in digital economy\n', ' */\n', 'contract Token is Object, ERC20 {\n', '    /* Short description of token */\n', '    string public name;\n', '    string public symbol;\n', '\n', '    /* Total count of tokens exist */\n', '    uint public totalSupply;\n', '\n', '    /* Fixed point position */\n', '    uint8 public decimals;\n', '    \n', '    /* Token approvement system */\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowances;\n', ' \n', '    /**\n', '     * @dev Get balance of plain address\n', '     * @param _owner is a target address\n', '     * @return amount of tokens on balance\n', '     */\n', '    function balanceOf(address _owner) constant returns (uint256)\n', '    { return balances[_owner]; }\n', ' \n', '    /**\n', '     * @dev Take allowed tokens\n', '     * @param _owner The address of the account owning tokens\n', '     * @param _spender The address of the account able to transfer the tokens\n', '     * @return Amount of remaining tokens allowed to spent\n', '     */\n', '    function allowance(address _owner, address _spender) constant returns (uint256)\n', '    { return allowances[_owner][_spender]; }\n', '\n', '    /* Token constructor */\n', '    function Token(string _name, string _symbol, uint8 _decimals, uint _count) {\n', '        name        = _name;\n', '        symbol      = _symbol;\n', '        decimals    = _decimals;\n', '        totalSupply = _count;\n', '        balances[msg.sender] = _count;\n', '    }\n', ' \n', '    /**\n', '     * @dev Transfer self tokens to given address\n', '     * @param _to destination address\n', '     * @param _value amount of token values to send\n', '     * @notice `_value` tokens will be sended to `_to`\n', '     * @return `true` when transfer done\n', '     */\n', '    function transfer(address _to, uint _value) returns (bool) {\n', '        if (balances[msg.sender] >= _value) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to]        += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer with approvement mechainsm\n', '     * @param _from source address, `_value` tokens shold be approved for `sender`\n', '     * @param _to destination address\n', '     * @param _value amount of token values to send \n', '     * @notice from `_from` will be sended `_value` tokens to `_to`\n', '     * @return `true` when transfer is done\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '        var avail = allowances[_from][msg.sender]\n', '                  > balances[_from] ? balances[_from]\n', '                                    : allowances[_from][msg.sender];\n', '        if (avail >= _value) {\n', '            allowances[_from][msg.sender] -= _value;\n', '            balances[_from] -= _value;\n', '            balances[_to]   += _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @dev Give to target address ability for self token manipulation without sending\n', '     * @param _spender target address (future requester)\n', '     * @param _value amount of token values for approving\n', '     */\n', '    function approve(address _spender, uint256 _value) returns (bool) {\n', '        allowances[msg.sender][_spender] += _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Reset count of tokens approved for given address\n', '     * @param _spender target address (future requester)\n', '     */\n', '    function unapprove(address _spender)\n', '    { allowances[msg.sender][_spender] = 0; }\n', '}\n', '\n', 'contract TokenEmission is Token {\n', '    function TokenEmission(string _name, string _symbol, uint8 _decimals,\n', '                           uint _start_count)\n', '             Token(_name, _symbol, _decimals, _start_count)\n', '    {}\n', '\n', '    /**\n', '     * @dev Token emission\n', '     * @param _value amount of token values to emit\n', '     * @notice owner balance will be increased by `_value`\n', '     */\n', '    function emission(uint _value) onlyOwner {\n', '        // Overflow check\n', '        if (_value + totalSupply < totalSupply) throw;\n', '\n', '        totalSupply     += _value;\n', '        balances[owner] += _value;\n', '    }\n', ' \n', '    /**\n', '     * @dev Burn the token values from sender balance and from total\n', '     * @param _value amount of token values for burn \n', '     * @notice sender balance will be decreased by `_value`\n', '     */\n', '    function burn(uint _value) {\n', '        if (balances[msg.sender] >= _value) {\n', '            balances[msg.sender] -= _value;\n', '            totalSupply      -= _value;\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Asset recipient interface\n', ' */\n', 'contract Recipient {\n', '    /**\n', '     * @dev On received ethers\n', '     * @param sender Ether sender\n', '     * @param amount Ether value\n', '     */\n', '    event ReceivedEther(address indexed sender,\n', '                        uint256 indexed amount);\n', '\n', '    /**\n', '     * @dev On received custom ERC20 tokens\n', '     * @param from Token sender\n', '     * @param value Token value\n', '     * @param token Token contract address\n', '     * @param extraData Custom additional data\n', '     */\n', '    event ReceivedTokens(address indexed from,\n', '                         uint256 indexed value,\n', '                         address indexed token,\n', '                         bytes extraData);\n', '\n', '    /**\n', '     * @dev Receive approved ERC20 tokens\n', '     * @param _from Spender address\n', '     * @param _value Transaction value\n', '     * @param _token ERC20 token contract address\n', '     * @param _extraData Custom additional data\n', '     */\n', '    function receiveApproval(address _from, uint256 _value,\n', '                             ERC20 _token, bytes _extraData) {\n', '        if (!_token.transferFrom(_from, this, _value)) throw;\n', '        ReceivedTokens(_from, _value, _token, _extraData);\n', '    }\n', '\n', '    /**\n', '     * @dev Catch sended to contract ethers\n', '     */\n', '    function () payable\n', '    { ReceivedEther(msg.sender, msg.value); }\n', '}\n', '\n', '/**\n', ' * @title Crowdfunding contract\n', ' */\n', 'contract Crowdfunding is Object, Recipient {\n', '    /**\n', '     * @dev Target fund account address\n', '     */\n', '    address public fund;\n', '\n', '    /**\n', '     * @dev Bounty token address\n', '     */\n', '    TokenEmission public bounty;\n', '    \n', '    /**\n', '     * @dev Distribution of donations\n', '     */\n', '    mapping(address => uint256) public donations;\n', '\n', '    /**\n', '     * @dev Total funded value\n', '     */\n', '    uint256 public totalFunded;\n', '\n', '    /**\n', '     * @dev Documentation reference\n', '     */\n', '    string public reference;\n', '\n', '    /**\n', '     * @dev Crowdfunding configuration\n', '     */\n', '    Params public config;\n', '\n', '    struct Params {\n', '        /* start/stop block stamps */\n', '        uint256 startBlock;\n', '        uint256 stopBlock;\n', '\n', '        /* Minimal/maximal funded value */\n', '        uint256 minValue;\n', '        uint256 maxValue;\n', '        \n', '        /**\n', '         * Bounty ratio equation:\n', '         *   bountyValue = value * ratio / scale\n', '         * where\n', '         *   ratio = R - (block - B) / S * V\n', '         *  R - start bounty ratio\n', '         *  B - start block number\n', '         *  S - bounty reduction step in blocks \n', '         *  V - bounty reduction value\n', '         */\n', '        uint256 bountyScale;\n', '        uint256 startRatio;\n', '        uint256 reductionStep;\n', '        uint256 reductionValue;\n', '    }\n', '\n', '    /**\n', '     * @dev Calculate bounty value by reduction equation\n', '     * @param _value Input donation value\n', '     * @param _block Input block number\n', '     * @return Bounty value\n', '     */\n', '    function bountyValue(uint256 _value, uint256 _block) constant returns (uint256) {\n', '        if (_block < config.startBlock || _block > config.stopBlock)\n', '            return 0;\n', '\n', '        var R = config.startRatio;\n', '        var B = config.startBlock;\n', '        var S = config.reductionStep;\n', '        var V = config.reductionValue;\n', '        uint256 ratio = R - (_block - B) / S * V; \n', '        return _value * ratio / config.bountyScale; \n', '    }\n', '\n', '    /**\n', '     * @dev Crowdfunding running checks\n', '     */\n', '    modifier onlyRunning {\n', '        bool isRunning = totalFunded  < config.maxValue\n', '                      && block.number > config.startBlock\n', '                      && block.number < config.stopBlock;\n', '        if (!isRunning) throw;\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Crowdfundung failure checks\n', '     */\n', '    modifier onlyFailure {\n', '        bool isFailure = totalFunded  < config.minValue\n', '                      && block.number > config.stopBlock;\n', '        if (!isFailure) throw;\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Crowdfunding success checks\n', '     */\n', '    modifier onlySuccess {\n', '        bool isSuccess = totalFunded >= config.minValue\n', '                      && block.number > config.stopBlock;\n', '        if (!isSuccess) throw;\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Crowdfunding contract initial \n', '     * @param _fund Destination account address\n', '     * @param _bounty Bounty token address\n', '     * @param _reference Reference documentation link\n', '     * @param _startBlock Funding start block number\n', '     * @param _stopBlock Funding stop block nubmer\n', '     * @param _minValue Minimal funded value in wei \n', '     * @param _maxValue Maximal funded value in wei\n', '     * @param _scale Bounty scaling factor by funded value\n', '     * @param _startRatio Initial bounty ratio\n', '     * @param _reductionStep Bounty reduction step in blocks \n', '     * @param _reductionValue Bounty reduction value\n', '     * @notice this contract should be owner of bounty token\n', '     */\n', '    function Crowdfunding(\n', '        address _fund,\n', '        address _bounty,\n', '        string  _reference,\n', '        uint256 _startBlock,\n', '        uint256 _stopBlock,\n', '        uint256 _minValue,\n', '        uint256 _maxValue,\n', '        uint256 _scale,\n', '        uint256 _startRatio,\n', '        uint256 _reductionStep,\n', '        uint256 _reductionValue\n', '    ) {\n', '        fund      = _fund;\n', '        bounty    = TokenEmission(_bounty);\n', '        reference = _reference;\n', '\n', '        config.startBlock     = _startBlock;\n', '        config.stopBlock      = _stopBlock;\n', '        config.minValue       = _minValue;\n', '        config.maxValue       = _maxValue;\n', '        config.bountyScale    = _scale;\n', '        config.startRatio     = _startRatio;\n', '        config.reductionStep  = _reductionStep;\n', '        config.reductionValue = _reductionValue;\n', '    }\n', '\n', '    /**\n', '     * @dev Receive Ether token and send bounty\n', '     */\n', '    function () payable onlyRunning {\n', '        ReceivedEther(msg.sender, msg.value);\n', '\n', '        totalFunded           += msg.value;\n', '        donations[msg.sender] += msg.value;\n', '\n', '        var bountyVal = bountyValue(msg.value, block.number);\n', '        bounty.emission(bountyVal);\n', '        bounty.transfer(msg.sender, bountyVal);\n', '    }\n', '\n', '    /**\n', '     * @dev Withdrawal balance on successfull finish\n', '     */\n', '    function withdraw() onlySuccess\n', '    { if (!fund.send(this.balance)) throw; }\n', '\n', '    /**\n', '     * @dev Refund donations when no minimal value achieved\n', '     */\n', '    function refund() onlyFailure {\n', '        var donation = donations[msg.sender];\n', '        donations[msg.sender] = 0;\n', '        if (!msg.sender.send(donation)) throw;\n', '    }\n', '\n', '    /**\n', '     * @dev Disable receive another tokens\n', '     */\n', '    function receiveApproval(address _from, uint256 _value,\n', '                             ERC20 _token, bytes _extraData)\n', '    { throw; }\n', '}']