['pragma solidity ^0.4.6;\n', '\n', '\n', 'contract tokenRecipient {function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData);}\n', '\n', '\n', 'contract SIKKA {\n', '    /* Public variables of the token */\n', "    string public standard = 'SIKKA 1.0';\n", '\n', '    string public name;\n', '\n', '    string public symbol;\n', '\n', '    uint8 public decimals;\n', '\n', '    uint256 public totalSupply;\n', '\n', '    address public owner;\n', '\n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function SIKKA(\n', '    uint256 initialSupply,\n', '    string tokenName,\n', '    uint8 decimalUnits,\n', '    string tokenSymbol\n', '    ) {\n', '        balanceOf[msg.sender] = initialSupply;\n', '        // Give the creator all initial tokens\n', '        totalSupply = initialSupply;\n', '        // Update total supply\n', '        name = tokenName;\n', '        // Set the name for display purposes\n', '        symbol = tokenSymbol;\n', '        // Set the symbol for display purposes\n', '        decimals = decimalUnits;\n', '        // Amount of decimals for display purposes\n', '        \n', '        owner=msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        if (msg.sender != owner) throw;\n', '        _;\n', '    }\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) {\n', '        if (_to == 0x0) throw;\n', '        // Prevent transfer to 0x0 address\n', '        if (balanceOf[msg.sender] < _value) throw;\n', '        // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) throw;\n', '        // Check for overflows\n', '        balanceOf[msg.sender] -= _value;\n', '        // Subtract from the sender\n', '        balanceOf[_to] += _value;\n', '        // Add the same to the recipient\n', '        Transfer(msg.sender, _to, _value);\n', '        // Notify anyone listening that this transfer took place\n', '    }\n', '\n', '    /* Allow another contract to spend some tokens in your behalf */\n', '    function approve(address _spender, uint256 _value)\n', '    returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /* Approve and then comunicate the approved contract in a single tx */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '    returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (_to == 0x0) throw;\n', '        // Prevent transfer to 0x0 address\n', '        if (balanceOf[_from] < _value) throw;\n', '        // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) throw;\n', '        // Check for overflows\n', '        if (_value > allowance[_from][msg.sender]) throw;\n', '        // Check allowance\n', '        balanceOf[_from] -= _value;\n', '        // Subtract from the sender\n', '        balanceOf[_to] += _value;\n', '        // Add the same to the recipient\n', '        allowance[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '}']