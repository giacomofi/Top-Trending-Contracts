['pragma solidity ^0.4.11;\n', '\n', '// ----------------------------------------------------------------------------\n', '//\n', '// Owned contract\n', '//\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract Owned {\n', '\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferProposed(\n', '      address indexed _from,\n', '      address indexed _to\n', '    );\n', '\n', '    event OwnershipTransferred(\n', '      address indexed _from,\n', '      address indexed _to\n', '    );\n', '\n', '    function Owned()\n', '    {\n', '      owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner\n', '    {\n', '      require(msg.sender == owner);\n', '      _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) onlyOwner\n', '    {\n', '      require(_newOwner != address(0x0));\n', '      OwnershipTransferProposed(owner, _newOwner);\n', '      newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership()\n', '    {\n', '      require(msg.sender == newOwner);\n', '      OwnershipTransferred(owner, newOwner);\n', '      owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '//\n', '// SafeMath contract\n', '//\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract SafeMath {\n', '\n', '  function safeAdd(uint a, uint b) internal\n', '    returns (uint)\n', '  {\n', '    uint c = a + b;\n', '    assert(c >= a && c >= b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint a, uint b) internal\n', '    returns (uint)\n', '  {\n', '    assert(b <= a);\n', '    uint c = a - b;\n', '    assert(c <= a);\n', '    return c;\n', '  }\n', '\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '//\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/issues/20\n', '//\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract ERC20Interface {\n', '\n', '    event Transfer(\n', '      address indexed _from,\n', '      address indexed _to,\n', '      uint256 _value\n', '    );\n', '    \n', '    event Approval(\n', '      address indexed _owner,\n', '      address indexed _spender,\n', '      uint256 _value\n', '    );\n', '\n', '    function totalSupply() constant\n', '      returns (uint256 newTotalSupply);\n', '    \n', '    function balanceOf(address _owner) constant \n', '      returns (uint256 balance);\n', '    \n', '    function transfer(address _to, uint256 _value)\n', '      returns (bool success);\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) \n', '      returns (bool success);\n', '    \n', '    function approve(address _spender, uint256 _value) \n', '      returns (bool success);\n', '    \n', '    function allowance(address _owner, address _spender) constant \n', '      returns (uint256 remaining);\n', '\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '//\n', '// ERC Token Standard #20\n', '//\n', '// note that totalSupply() is not defined here\n', '//\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract ERC20Token is ERC20Interface, Owned, SafeMath {\n', '\n', '    // Account balances\n', '    //\n', '    mapping(address => uint256) balances;\n', '\n', '    // Account holder approves the transfer of an amount to another account\n', '    //\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '\n', '    // Get the account balance for an address\n', '    function balanceOf(address _owner) constant \n', '      returns (uint256 balance)\n', '    {\n', '      return balances[_owner];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer the balance from owner&#39;s account to another account\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address _to, uint256 _amount) \n', '      returns (bool success)\n', '    {\n', '      require( _amount > 0 );                              // Non-zero transfer\n', '      require( balances[msg.sender] >= _amount );          // User has balance\n', '      require( balances[_to] + _amount > balances[_to] );  // Overflow check\n', '\n', '      balances[msg.sender] -= _amount;\n', '      balances[_to] += _amount;\n', '      Transfer(msg.sender, _to, _amount);\n', '      return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Allow _spender to withdraw from your account, multiple times, up to\n', '    // _amount. If this function is called again it overwrites the\n', '    // current allowance with _amount.\n', '    // ------------------------------------------------------------------------\n', '    function approve(address _spender, uint256 _amount) \n', '      returns (bool success)\n', '    {\n', '      // before changing the approve amount for an address, its allowance\n', '      // must be reset to 0 to mitigate the race condition described here:\n', '      // cf https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '      require( _amount == 0 || allowed[msg.sender][_spender] == 0 );\n', '        \n', '      // the approval amount cannot exceed the balance\n', '      require (balances[msg.sender] >= _amount);\n', '        \n', '      allowed[msg.sender][_spender] = _amount;\n', '      Approval(msg.sender, _spender, _amount);\n', '      return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Spender of tokens transfer an amount of tokens from the token owner&#39;s\n', '    // balance to another account. The owner of the tokens must already\n', '    // have approve(...)-d this transfer\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address _from, address _to, uint256 _amount) \n', '    returns (bool success) \n', '    {\n', '      require( _amount > 0 );                              // Non-zero transfer\n', '      require( balances[_from] >= _amount );               // Sufficient balance\n', '      require( allowed[_from][msg.sender] >= _amount );    // Transfer approved\n', '      require( balances[_to] + _amount > balances[_to] );  // Overflow check\n', '\n', '      balances[_from] -= _amount;\n', '      allowed[_from][msg.sender] -= _amount;\n', '      balances[_to] += _amount;\n', '      Transfer(_from, _to, _amount);\n', '      return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', '    // transferred by _spender\n', '    // ------------------------------------------------------------------------\n', '\n', '    function allowance(address _owner, address _spender) constant \n', '    returns (uint256 remaining)\n', '    {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '//\n', '// GZR public token sale\n', '//\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract Zorro01Token is ERC20Token {\n', '\n', '\n', '    // VARIABLES ================================\n', '\n', '\n', '    // basic token data\n', '\n', '    string public constant name = "Zorro01";\n', '    string public constant symbol = "ZORRO01";\n', '    uint8 public constant decimals = 18;\n', '    string public constant GITHUB_LINK = &#39;htp://github.com/..&#39;;  // TODO\n', '\n', '    // wallet address (can be reset at any time during ICO)\n', '    \n', '    address public wallet;\n', '\n', '    // ICO variables that can be reset before ICO starts\n', '\n', '    uint public tokensPerEth = 100000;\n', '    uint public icoTokenSupply = 500;\n', '\n', '    // ICO constants #1\n', '\n', '    uint public constant TOTAL_TOKEN_SUPPLY = 1000;\n', '    uint public constant ICO_TRIGGER = 10;\n', '    uint public constant MIN_CONTRIBUTION = 10**15;\n', '    \n', '    // ICO constants #2 : ICO dates\n', '\n', '    // Start - Friday, 15-Sep-17 00:00:00 UTC\n', '    // End - Sunday, 15-Oct-17 00:00:00 UTC\n', '    // as per http://www.unixtimestamp.com\n', '    uint public constant START_DATE = 1502748000;\n', '    uint public constant END_DATE = 1502751600;\n', '\n', '    // ICO variables\n', '\n', '    uint public icoTokensIssued = 0;\n', '    bool public icoFinished = false;\n', '    bool public tradeable = false;\n', '\n', '    // Minting\n', '    \n', '    uint public ownerTokensMinted = 0;\n', '    \n', '    // other variables\n', '    \n', '    uint256 constant MULT_FACTOR = 10**18;\n', '    \n', '\n', '    // EVENTS ===================================\n', '\n', '    \n', '    event LogWalletUpdated(\n', '      address newWallet\n', '    );\n', '    \n', '    event LogTokensPerEthUpdated(\n', '      uint newTokensPerEth\n', '    );\n', '    \n', '    event LogIcoTokenSupplyUpdated(\n', '      uint newIcoTokenSupply\n', '    );\n', '    \n', '    event LogTokensBought(\n', '      address indexed buyer,\n', '      uint ethers,\n', '      uint tokens, \n', '      uint participantTokenBalance, \n', '      uint newIcoTokensIssued\n', '    );\n', '    \n', '    event LogMinting(\n', '      address indexed participant,\n', '      uint tokens,\n', '      uint newOwnerTokensMinted\n', '    );\n', '\n', '\n', '    // FUNCTIONS ================================\n', '    \n', '    // --------------------------------\n', '    // initialize\n', '    // --------------------------------\n', '\n', '    function Zorro01Token() {\n', '      owner = msg.sender;\n', '      wallet = msg.sender;\n', '    }\n', '\n', '\n', '    // --------------------------------\n', '    // implement totalSupply() ERC20 function\n', '    // --------------------------------\n', '    \n', '    function totalSupply() constant\n', '      returns (uint256)\n', '    {\n', '      return TOTAL_TOKEN_SUPPLY;\n', '    }\n', '\n', '\n', '    // --------------------------------\n', '    // changing ICO parameters\n', '    // --------------------------------\n', '    \n', '    // Owner can change the crowdsale wallet address at any time\n', '    //\n', '    function setWallet(address _wallet) onlyOwner\n', '    {\n', '      wallet = _wallet;\n', '      LogWalletUpdated(wallet);\n', '    }\n', '    \n', '    // Owner can change the number of tokens per ETH before the ICO start date\n', '    //\n', '    function setTokensPerEth(uint _tokensPerEth) onlyOwner\n', '    {\n', '      require(now < START_DATE);\n', '      require(_tokensPerEth > 0);\n', '      tokensPerEth = _tokensPerEth;\n', '      LogTokensPerEthUpdated(tokensPerEth);\n', '    }\n', '        \n', '\n', '    // Owner can change the number available tokens for the ICO\n', '    // (must be below 70 million) \n', '    //\n', '    function setIcoTokenSupply(uint _icoTokenSupply) onlyOwner\n', '    {\n', '        require(now < START_DATE);\n', '        require(_icoTokenSupply < 70000000);\n', '        icoTokenSupply = _icoTokenSupply;\n', '        LogIcoTokenSupplyUpdated(icoTokenSupply);\n', '    }\n', '\n', '\n', '    // --------------------------------\n', '    // Default function\n', '    // --------------------------------\n', '    \n', '    function () payable\n', '    {\n', '        proxyPayment(msg.sender);\n', '    }\n', '\n', '    // --------------------------------\n', '    // Accept ETH during crowdsale\n', '    // --------------------------------\n', '\n', '    function proxyPayment(address participant) payable\n', '    {\n', '        require(!icoFinished);\n', '        require(now >= START_DATE);\n', '        require(now <= END_DATE);\n', '        require(msg.value > MIN_CONTRIBUTION);\n', '        \n', '        // get number of tokens\n', '        uint tokens = msg.value * tokensPerEth / MULT_FACTOR;\n', '        \n', '        // first check if there is enough capacity\n', '        uint available = icoTokenSupply - icoTokensIssued;\n', '        require (tokens <= available); \n', '\n', '        // ok it&#39;s possible to issue tokens so let&#39;s do it\n', '        \n', '        // Add tokens purchased to account&#39;s balance and total supply\n', '        // TODO - verify SafeAdd is not necessary\n', '        balances[participant] += tokens;\n', '        icoTokensIssued += tokens;\n', '\n', '        // Transfer the tokens to the participant  \n', '        Transfer(0x0, participant, tokens);\n', '        \n', '        // Log the token purchase\n', '        LogTokensBought(participant, msg.value, tokens, balances[participant], icoTokensIssued);\n', '\n', '        // Transfer the contributed ethers to the crowdsale wallet\n', '        // throw is deprecated starting from Ethereum v0.9.0\n', '        wallet.transfer(msg.value);\n', '    }\n', '\n', '    \n', '    // --------------------------------\n', '    // Minting of tokens by owner\n', '    // --------------------------------\n', '\n', '    // Tokens remaining available to mint by owner\n', '    //\n', '    function availableToMint()\n', '      returns (uint)\n', '    {\n', '      if (icoFinished) {\n', '        return TOTAL_TOKEN_SUPPLY - icoTokensIssued - ownerTokensMinted;\n', '      } else {\n', '        return TOTAL_TOKEN_SUPPLY - icoTokenSupply - ownerTokensMinted;        \n', '      }\n', '    }\n', '\n', '    // Minting of tokens by owner\n', '    //    \n', '    function mint(address participant, uint256 tokens) onlyOwner \n', '    {\n', '        require( tokens <= availableToMint() );\n', '        balances[participant] += tokens;\n', '        ownerTokensMinted += tokens;\n', '        Transfer(0x0, participant, tokens);\n', '        LogMinting(participant, tokens, ownerTokensMinted);\n', '    }\n', '\n', '    // --------------------------------\n', '    // Declare ICO finished\n', '    // --------------------------------\n', '    \n', '    function declareIcoFinished() onlyOwner\n', '    {\n', '      // the token can only be made tradeable after ICO finishes\n', '      require( now > START_DATE || icoTokenSupply - icoTokensIssued < ICO_TRIGGER );\n', '      icoFinished = true;\n', '    }\n', '\n', '    // --------------------------------\n', '    // Make tokens tradeable\n', '    // --------------------------------\n', '    \n', '    function tradeable() onlyOwner\n', '    {\n', '      // the token can only be made tradeable after ICO finishes\n', '      require(icoFinished);\n', '      tradeable = true;\n', '    }\n', '\n', '    // --------------------------------\n', '    // Transfers\n', '    // --------------------------------\n', '\n', '    function transfer(address _to, uint _amount) \n', '      returns (bool success)\n', '    {\n', '      // Cannot transfer out until tradeable, except for owner\n', '      require(tradeable || msg.sender == owner);\n', '      return super.transfer(_to, _amount);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _amount) \n', '      returns (bool success)\n', '    {\n', '        // not possible until tradeable\n', '        require(tradeable);\n', '        return super.transferFrom(_from, _to, _amount);\n', '    }\n', '\n', '    // --------------------------------\n', '    // Varia\n', '    // --------------------------------\n', '\n', '    // Transfer out any accidentally sent ERC20 tokens\n', '    function transferAnyERC20Token(address tokenAddress, uint amount) onlyOwner \n', '      returns (bool success) \n', '    {\n', '        return ERC20Interface(tokenAddress).transfer(owner, amount);\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.11;\n', '\n', '// ----------------------------------------------------------------------------\n', '//\n', '// Owned contract\n', '//\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract Owned {\n', '\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferProposed(\n', '      address indexed _from,\n', '      address indexed _to\n', '    );\n', '\n', '    event OwnershipTransferred(\n', '      address indexed _from,\n', '      address indexed _to\n', '    );\n', '\n', '    function Owned()\n', '    {\n', '      owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner\n', '    {\n', '      require(msg.sender == owner);\n', '      _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) onlyOwner\n', '    {\n', '      require(_newOwner != address(0x0));\n', '      OwnershipTransferProposed(owner, _newOwner);\n', '      newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership()\n', '    {\n', '      require(msg.sender == newOwner);\n', '      OwnershipTransferred(owner, newOwner);\n', '      owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '//\n', '// SafeMath contract\n', '//\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract SafeMath {\n', '\n', '  function safeAdd(uint a, uint b) internal\n', '    returns (uint)\n', '  {\n', '    uint c = a + b;\n', '    assert(c >= a && c >= b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint a, uint b) internal\n', '    returns (uint)\n', '  {\n', '    assert(b <= a);\n', '    uint c = a - b;\n', '    assert(c <= a);\n', '    return c;\n', '  }\n', '\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '//\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/issues/20\n', '//\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract ERC20Interface {\n', '\n', '    event Transfer(\n', '      address indexed _from,\n', '      address indexed _to,\n', '      uint256 _value\n', '    );\n', '    \n', '    event Approval(\n', '      address indexed _owner,\n', '      address indexed _spender,\n', '      uint256 _value\n', '    );\n', '\n', '    function totalSupply() constant\n', '      returns (uint256 newTotalSupply);\n', '    \n', '    function balanceOf(address _owner) constant \n', '      returns (uint256 balance);\n', '    \n', '    function transfer(address _to, uint256 _value)\n', '      returns (bool success);\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) \n', '      returns (bool success);\n', '    \n', '    function approve(address _spender, uint256 _value) \n', '      returns (bool success);\n', '    \n', '    function allowance(address _owner, address _spender) constant \n', '      returns (uint256 remaining);\n', '\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '//\n', '// ERC Token Standard #20\n', '//\n', '// note that totalSupply() is not defined here\n', '//\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract ERC20Token is ERC20Interface, Owned, SafeMath {\n', '\n', '    // Account balances\n', '    //\n', '    mapping(address => uint256) balances;\n', '\n', '    // Account holder approves the transfer of an amount to another account\n', '    //\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '\n', '    // Get the account balance for an address\n', '    function balanceOf(address _owner) constant \n', '      returns (uint256 balance)\n', '    {\n', '      return balances[_owner];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from owner's account to another account\n", '    // ------------------------------------------------------------------------\n', '    function transfer(address _to, uint256 _amount) \n', '      returns (bool success)\n', '    {\n', '      require( _amount > 0 );                              // Non-zero transfer\n', '      require( balances[msg.sender] >= _amount );          // User has balance\n', '      require( balances[_to] + _amount > balances[_to] );  // Overflow check\n', '\n', '      balances[msg.sender] -= _amount;\n', '      balances[_to] += _amount;\n', '      Transfer(msg.sender, _to, _amount);\n', '      return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Allow _spender to withdraw from your account, multiple times, up to\n', '    // _amount. If this function is called again it overwrites the\n', '    // current allowance with _amount.\n', '    // ------------------------------------------------------------------------\n', '    function approve(address _spender, uint256 _amount) \n', '      returns (bool success)\n', '    {\n', '      // before changing the approve amount for an address, its allowance\n', '      // must be reset to 0 to mitigate the race condition described here:\n', '      // cf https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '      require( _amount == 0 || allowed[msg.sender][_spender] == 0 );\n', '        \n', '      // the approval amount cannot exceed the balance\n', '      require (balances[msg.sender] >= _amount);\n', '        \n', '      allowed[msg.sender][_spender] = _amount;\n', '      Approval(msg.sender, _spender, _amount);\n', '      return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Spender of tokens transfer an amount of tokens from the token owner's\n", '    // balance to another account. The owner of the tokens must already\n', '    // have approve(...)-d this transfer\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address _from, address _to, uint256 _amount) \n', '    returns (bool success) \n', '    {\n', '      require( _amount > 0 );                              // Non-zero transfer\n', '      require( balances[_from] >= _amount );               // Sufficient balance\n', '      require( allowed[_from][msg.sender] >= _amount );    // Transfer approved\n', '      require( balances[_to] + _amount > balances[_to] );  // Overflow check\n', '\n', '      balances[_from] -= _amount;\n', '      allowed[_from][msg.sender] -= _amount;\n', '      balances[_to] += _amount;\n', '      Transfer(_from, _to, _amount);\n', '      return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', '    // transferred by _spender\n', '    // ------------------------------------------------------------------------\n', '\n', '    function allowance(address _owner, address _spender) constant \n', '    returns (uint256 remaining)\n', '    {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '//\n', '// GZR public token sale\n', '//\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract Zorro01Token is ERC20Token {\n', '\n', '\n', '    // VARIABLES ================================\n', '\n', '\n', '    // basic token data\n', '\n', '    string public constant name = "Zorro01";\n', '    string public constant symbol = "ZORRO01";\n', '    uint8 public constant decimals = 18;\n', "    string public constant GITHUB_LINK = 'htp://github.com/..';  // TODO\n", '\n', '    // wallet address (can be reset at any time during ICO)\n', '    \n', '    address public wallet;\n', '\n', '    // ICO variables that can be reset before ICO starts\n', '\n', '    uint public tokensPerEth = 100000;\n', '    uint public icoTokenSupply = 500;\n', '\n', '    // ICO constants #1\n', '\n', '    uint public constant TOTAL_TOKEN_SUPPLY = 1000;\n', '    uint public constant ICO_TRIGGER = 10;\n', '    uint public constant MIN_CONTRIBUTION = 10**15;\n', '    \n', '    // ICO constants #2 : ICO dates\n', '\n', '    // Start - Friday, 15-Sep-17 00:00:00 UTC\n', '    // End - Sunday, 15-Oct-17 00:00:00 UTC\n', '    // as per http://www.unixtimestamp.com\n', '    uint public constant START_DATE = 1502748000;\n', '    uint public constant END_DATE = 1502751600;\n', '\n', '    // ICO variables\n', '\n', '    uint public icoTokensIssued = 0;\n', '    bool public icoFinished = false;\n', '    bool public tradeable = false;\n', '\n', '    // Minting\n', '    \n', '    uint public ownerTokensMinted = 0;\n', '    \n', '    // other variables\n', '    \n', '    uint256 constant MULT_FACTOR = 10**18;\n', '    \n', '\n', '    // EVENTS ===================================\n', '\n', '    \n', '    event LogWalletUpdated(\n', '      address newWallet\n', '    );\n', '    \n', '    event LogTokensPerEthUpdated(\n', '      uint newTokensPerEth\n', '    );\n', '    \n', '    event LogIcoTokenSupplyUpdated(\n', '      uint newIcoTokenSupply\n', '    );\n', '    \n', '    event LogTokensBought(\n', '      address indexed buyer,\n', '      uint ethers,\n', '      uint tokens, \n', '      uint participantTokenBalance, \n', '      uint newIcoTokensIssued\n', '    );\n', '    \n', '    event LogMinting(\n', '      address indexed participant,\n', '      uint tokens,\n', '      uint newOwnerTokensMinted\n', '    );\n', '\n', '\n', '    // FUNCTIONS ================================\n', '    \n', '    // --------------------------------\n', '    // initialize\n', '    // --------------------------------\n', '\n', '    function Zorro01Token() {\n', '      owner = msg.sender;\n', '      wallet = msg.sender;\n', '    }\n', '\n', '\n', '    // --------------------------------\n', '    // implement totalSupply() ERC20 function\n', '    // --------------------------------\n', '    \n', '    function totalSupply() constant\n', '      returns (uint256)\n', '    {\n', '      return TOTAL_TOKEN_SUPPLY;\n', '    }\n', '\n', '\n', '    // --------------------------------\n', '    // changing ICO parameters\n', '    // --------------------------------\n', '    \n', '    // Owner can change the crowdsale wallet address at any time\n', '    //\n', '    function setWallet(address _wallet) onlyOwner\n', '    {\n', '      wallet = _wallet;\n', '      LogWalletUpdated(wallet);\n', '    }\n', '    \n', '    // Owner can change the number of tokens per ETH before the ICO start date\n', '    //\n', '    function setTokensPerEth(uint _tokensPerEth) onlyOwner\n', '    {\n', '      require(now < START_DATE);\n', '      require(_tokensPerEth > 0);\n', '      tokensPerEth = _tokensPerEth;\n', '      LogTokensPerEthUpdated(tokensPerEth);\n', '    }\n', '        \n', '\n', '    // Owner can change the number available tokens for the ICO\n', '    // (must be below 70 million) \n', '    //\n', '    function setIcoTokenSupply(uint _icoTokenSupply) onlyOwner\n', '    {\n', '        require(now < START_DATE);\n', '        require(_icoTokenSupply < 70000000);\n', '        icoTokenSupply = _icoTokenSupply;\n', '        LogIcoTokenSupplyUpdated(icoTokenSupply);\n', '    }\n', '\n', '\n', '    // --------------------------------\n', '    // Default function\n', '    // --------------------------------\n', '    \n', '    function () payable\n', '    {\n', '        proxyPayment(msg.sender);\n', '    }\n', '\n', '    // --------------------------------\n', '    // Accept ETH during crowdsale\n', '    // --------------------------------\n', '\n', '    function proxyPayment(address participant) payable\n', '    {\n', '        require(!icoFinished);\n', '        require(now >= START_DATE);\n', '        require(now <= END_DATE);\n', '        require(msg.value > MIN_CONTRIBUTION);\n', '        \n', '        // get number of tokens\n', '        uint tokens = msg.value * tokensPerEth / MULT_FACTOR;\n', '        \n', '        // first check if there is enough capacity\n', '        uint available = icoTokenSupply - icoTokensIssued;\n', '        require (tokens <= available); \n', '\n', "        // ok it's possible to issue tokens so let's do it\n", '        \n', "        // Add tokens purchased to account's balance and total supply\n", '        // TODO - verify SafeAdd is not necessary\n', '        balances[participant] += tokens;\n', '        icoTokensIssued += tokens;\n', '\n', '        // Transfer the tokens to the participant  \n', '        Transfer(0x0, participant, tokens);\n', '        \n', '        // Log the token purchase\n', '        LogTokensBought(participant, msg.value, tokens, balances[participant], icoTokensIssued);\n', '\n', '        // Transfer the contributed ethers to the crowdsale wallet\n', '        // throw is deprecated starting from Ethereum v0.9.0\n', '        wallet.transfer(msg.value);\n', '    }\n', '\n', '    \n', '    // --------------------------------\n', '    // Minting of tokens by owner\n', '    // --------------------------------\n', '\n', '    // Tokens remaining available to mint by owner\n', '    //\n', '    function availableToMint()\n', '      returns (uint)\n', '    {\n', '      if (icoFinished) {\n', '        return TOTAL_TOKEN_SUPPLY - icoTokensIssued - ownerTokensMinted;\n', '      } else {\n', '        return TOTAL_TOKEN_SUPPLY - icoTokenSupply - ownerTokensMinted;        \n', '      }\n', '    }\n', '\n', '    // Minting of tokens by owner\n', '    //    \n', '    function mint(address participant, uint256 tokens) onlyOwner \n', '    {\n', '        require( tokens <= availableToMint() );\n', '        balances[participant] += tokens;\n', '        ownerTokensMinted += tokens;\n', '        Transfer(0x0, participant, tokens);\n', '        LogMinting(participant, tokens, ownerTokensMinted);\n', '    }\n', '\n', '    // --------------------------------\n', '    // Declare ICO finished\n', '    // --------------------------------\n', '    \n', '    function declareIcoFinished() onlyOwner\n', '    {\n', '      // the token can only be made tradeable after ICO finishes\n', '      require( now > START_DATE || icoTokenSupply - icoTokensIssued < ICO_TRIGGER );\n', '      icoFinished = true;\n', '    }\n', '\n', '    // --------------------------------\n', '    // Make tokens tradeable\n', '    // --------------------------------\n', '    \n', '    function tradeable() onlyOwner\n', '    {\n', '      // the token can only be made tradeable after ICO finishes\n', '      require(icoFinished);\n', '      tradeable = true;\n', '    }\n', '\n', '    // --------------------------------\n', '    // Transfers\n', '    // --------------------------------\n', '\n', '    function transfer(address _to, uint _amount) \n', '      returns (bool success)\n', '    {\n', '      // Cannot transfer out until tradeable, except for owner\n', '      require(tradeable || msg.sender == owner);\n', '      return super.transfer(_to, _amount);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _amount) \n', '      returns (bool success)\n', '    {\n', '        // not possible until tradeable\n', '        require(tradeable);\n', '        return super.transferFrom(_from, _to, _amount);\n', '    }\n', '\n', '    // --------------------------------\n', '    // Varia\n', '    // --------------------------------\n', '\n', '    // Transfer out any accidentally sent ERC20 tokens\n', '    function transferAnyERC20Token(address tokenAddress, uint amount) onlyOwner \n', '      returns (bool success) \n', '    {\n', '        return ERC20Interface(tokenAddress).transfer(owner, amount);\n', '    }\n', '\n', '}']
