['///@title Simple Organisation Management\n', '///@author bsm - moonmission\n', '///@version 0.4\n', '///@date 11 Sep 2017\n', '///@licence: MIT\n', '\n', 'pragma solidity ^0.4.15;\n', '\n', 'contract IncomeSplit {\n', '    \n', '    struct Member {\n', '        uint memberIndex;\n', '        uint memberShares;\n', '        uint memberBalance;\n', '    }\n', '    \n', '    /// Variables declarations\n', '    // Address of the contract owner. \n', '    // The owner is the only account which can add/update/remove a member to the organisation.\n', '    // The owner can also trigger fund withdrawals on behalf of another member.\n', '    // The owner is not a member by default.\n', '    // Can be changed using the changeOwner function.\n', '    address OWNER = 0x00cf7440B6E554EC5EeCfA8306761EBc5Bf412b8;\n', '    // We assign the Member structure to each address.\n', '    mapping (address => Member) private Members;\n', '    address[] private index;\n', '    uint totalShares;\n', '    \n', '\n', '    modifier onlyBy(address _user) {\n', '        require(msg.sender == _user);\n', '        _;\n', '    }\n', '\n', '    modifier isUser(address _user) {\n', '        require(index[Members[_user].memberIndex] == _user);\n', '        _;\n', '    }\n', '\n', '    event LogIncomeAllocation(address _address, uint _amount);\n', '    event LogWithdrawal(address _address, uint _amount);\n', '    event LogNewOwner(address _address);\n', '\n', '    function changeOwner(address _newOwner) onlyBy(OWNER) returns(bool success) {\n', '        OWNER = _newOwner;\n', '        LogNewOwner(_newOwner);\n', '        return true;\n', '    }\n', '    \n', '    function getTotalShares() public constant returns(uint) {\n', '        return totalShares;\n', '    }\n', '\n', '    function getMember(address _address) public constant returns(uint _index, uint _shares, uint _balance) {\n', '        _index = Members[_address].memberIndex;\n', '        _shares = Members[_address].memberShares;\n', '        _balance = Members[_address].memberBalance;\n', '\n', '        return(_index, _shares, _balance);\n', '    }\n', '\n', '    function getMemberCount() public constant returns(uint) {\n', '        return index.length;\n', '    }\n', '\n', '    function getMemberAtIndex(uint _index) public constant returns(address) {\n', '        return index[_index];\n', '    }\n', '    \n', '    function addMember(address _address, uint _shares) onlyBy(OWNER) returns(bool success) {\n', '        Members[_address].memberShares = _shares;\n', '        Members[_address].memberIndex = index.push(_address) - 1;\n', '        totalShares += _shares;\n', '        return true;\n', '    }\n', '\n', '    function updateMember(address _address, uint _shares) onlyBy(OWNER) isUser(_address) returns(bool success) {\n', '        uint oldShares = Members[_address].memberShares;\n', '        Members[_address].memberShares = _shares;\n', '        totalShares += (_shares - oldShares);\n', '        return true;\n', '    }\n', '\n', '    function deleteMember(address _address) onlyBy(OWNER) isUser(_address) returns(bool success) {\n', '        uint rowToDelete = Members[_address].memberIndex;\n', '        address keyToMove = index[index.length - 1];\n', '        index[rowToDelete] = keyToMove;\n', '        Members[keyToMove].memberIndex = rowToDelete;\n', '        index.length--;\n', '        return true;\n', '    }\n', '    \n', '    function incomeAllocation() payable {\n', '        uint toBeAllocated = msg.value;\n', '        for (uint i = 0; i < index.length; i++) {\n', '            uint allocationRatio = Members[index[i]].memberShares * 1000000000 / totalShares;\n', '            Members[index[i]].memberBalance += (toBeAllocated * allocationRatio / 1000000000);\n', '            LogIncomeAllocation(index[i], Members[index[i]].memberBalance);\n', '        }\n', '\n', '    }\n', '\n', '    function selfWithdrawBalance() isUser(msg.sender) returns(bool success) {\n', '        uint amount = Members[msg.sender].memberBalance;\n', '        Members[msg.sender].memberBalance = 0;\n', '        msg.sender.transfer(amount);\n', '        LogWithdrawal(msg.sender, amount);\n', '        return true;\n', '    }\n', '    \n', '    function withdrawBalance(address _address) onlyBy(OWNER) isUser(_address) returns(bool success) {\n', '        uint amount = Members[_address].memberBalance;\n', '        Members[msg.sender].memberBalance = 0;\n', '        _address.transfer(amount);\n', '        LogWithdrawal(_address, amount);\n', '        return true;\n', '    }\n', '    \n', '    function() payable {\n', '        if (msg.value == 0) {\n', '            selfWithdrawBalance();\n', '        } else {\n', '            incomeAllocation();\n', '        }\n', '        \n', '    }\n', '}']