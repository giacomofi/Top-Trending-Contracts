['pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Token {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        //Default assumes totalSupply can&#39;t be over max (2^256 - 1).\n', '        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn&#39;t wrap.\n', '        //Replace the if with this one instead.\n', '        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract HumanStandardToken is StandardToken {\n', '\n', '    function () {\n', '        //if ether is sent to this address, send it back.\n', '        throw;\n', '    }\n', '\n', '    /* Public variables of the token */\n', '\n', '    /*\n', '    NOTE:\n', '    The following variables are OPTIONAL vanities. One does not have to include them.\n', '    They allow one to customise the token contract & in no way influences the core functionality.\n', '    Some wallets/interfaces might not even bother to look at this information.\n', '    */\n', '    string public name;                   //fancy name: eg Simon Bucks\n', '    uint8 public decimals;                //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It&#39;s like comparing 1 wei to 1 ether.\n', '    string public symbol;                 //An identifier: eg SBX\n', '    string public version = &#39;H0.1&#39;;       //human 0.1 standard. Just an arbitrary versioning scheme.\n', '\n', '    function HumanStandardToken(\n', '        uint256 _initialAmount,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol\n', '        ) {\n', '        balances[msg.sender] = _initialAmount;               // Give the creator all initial tokens\n', '        totalSupply = _initialAmount;                        // Update total supply\n', '        name = _tokenName;                                   // Set the name for display purposes\n', '        decimals = _decimalUnits;                            // Amount of decimals for display purposes\n', '        symbol = _tokenSymbol;                               // Set the symbol for display purposes\n', '    }\n', '\n', '    /* Approves and then calls the receiving contract */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '\n', '        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn&#39;t have to include a contract in here just for this.\n', '        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '        if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { throw; }\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Locked {\n', '  uint public period;\n', '\n', '  function Locked(uint _period) public {\n', '    period = _period;\n', '  }\n', '}\n', '\n', 'contract Owned {\n', '    function Owned() { owner = msg.sender; }\n', '    address owner;\n', '\n', '    // This contract only defines a modifier but does not use\n', '    // it - it will be used in derived contracts.\n', '    // The function body is inserted where the special symbol\n', '    // "_;" in the definition of a modifier appears.\n', '    // This means that if the owner calls this function, the\n', '    // function is executed and otherwise, an exception is\n', '    // thrown.\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '}\n', '\n', 'contract Sales is Owned {\n', '  address public wallet;\n', '  HumanStandardToken public token;\n', '  Locked public locked;\n', '  uint public price;\n', '  uint public startBlock;\n', '  uint public freezeBlock;\n', '  bool public frozen = false;\n', '  uint256 public cap = 0;\n', '  uint256 public sold = 0;\n', '  uint created;\n', '\n', '  event PurchasedTokens(address indexed purchaser, uint amount);\n', '\n', '  modifier saleHappening {\n', '    require(block.number >= startBlock);\n', '    require(block.number <= freezeBlock);\n', '    require(!frozen);\n', '    require(sold < cap);\n', '    _;\n', '  }\n', '\n', '  function Sales(\n', '    address _wallet,\n', '    uint256 _tokenSupply,\n', '    string _tokenName,\n', '    uint8 _tokenDecimals,\n', '    string _tokenSymbol,\n', '    uint _price,\n', '    uint _startBlock,\n', '    uint _freezeBlock,\n', '    uint256 _cap,\n', '    uint _locked\n', '  ) {\n', '    wallet = _wallet;\n', '    token = new HumanStandardToken(_tokenSupply, _tokenName, _tokenDecimals, _tokenSymbol);\n', '    locked = new Locked(_locked);\n', '    price = _price;\n', '    startBlock = _startBlock;\n', '    freezeBlock = _freezeBlock;\n', '    cap = _cap;\n', '    created = now;\n', '\n', '    uint256 ownersValue = SafeMath.div(SafeMath.mul(token.totalSupply(), 20), 100);\n', '    assert(token.transfer(wallet, ownersValue));\n', '\n', '    uint256 saleValue = SafeMath.div(SafeMath.mul(token.totalSupply(), 60), 100);\n', '    assert(token.transfer(this, saleValue));\n', '\n', '    uint256 lockedValue = SafeMath.sub(token.totalSupply(), SafeMath.add(ownersValue, saleValue));\n', '    assert(token.transfer(locked, lockedValue));\n', '  }\n', '\n', '  function purchaseTokens()\n', '    payable\n', '    saleHappening {\n', '    uint excessAmount = msg.value % price;\n', '    uint purchaseAmount = SafeMath.sub(msg.value, excessAmount);\n', '    uint tokenPurchase = SafeMath.div(purchaseAmount, price);\n', '\n', '    require(tokenPurchase <= token.balanceOf(this));\n', '\n', '    if (excessAmount > 0) {\n', '      msg.sender.transfer(excessAmount);\n', '    }\n', '\n', '    sold = SafeMath.add(sold, tokenPurchase);\n', '    assert(sold <= cap);\n', '    wallet.transfer(purchaseAmount);\n', '    assert(token.transfer(msg.sender, tokenPurchase));\n', '    PurchasedTokens(msg.sender, tokenPurchase);\n', '  }\n', '\n', '  /* owner only functions */\n', '  function changeBlocks(uint _newStartBlock, uint _newFreezeBlock)\n', '    onlyOwner {\n', '    require(_newStartBlock != 0);\n', '    require(_newFreezeBlock >= _newStartBlock);\n', '    startBlock = _newStartBlock;\n', '    freezeBlock = _newFreezeBlock;\n', '  }\n', '\n', '  function changePrice(uint _newPrice) \n', '    onlyOwner {\n', '    require(_newPrice > 0);\n', '    price = _newPrice;\n', '  }\n', '\n', '  function changeCap(uint256 _newCap)\n', '    onlyOwner {\n', '    require(_newCap > 0);\n', '    cap = _newCap;\n', '  }\n', '\n', '  function unlockEscrow()\n', '    onlyOwner {\n', '    assert((now - created) > locked.period());\n', '    assert(token.transfer(wallet, token.balanceOf(locked)));\n', '  }\n', '\n', '  function toggleFreeze()\n', '    onlyOwner {\n', '      frozen = !frozen;\n', '  }\n', '}']
['pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Token {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', "        //Default assumes totalSupply can't be over max (2^256 - 1).\n", "        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n", '        //Replace the if with this one instead.\n', '        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract HumanStandardToken is StandardToken {\n', '\n', '    function () {\n', '        //if ether is sent to this address, send it back.\n', '        throw;\n', '    }\n', '\n', '    /* Public variables of the token */\n', '\n', '    /*\n', '    NOTE:\n', '    The following variables are OPTIONAL vanities. One does not have to include them.\n', '    They allow one to customise the token contract & in no way influences the core functionality.\n', '    Some wallets/interfaces might not even bother to look at this information.\n', '    */\n', '    string public name;                   //fancy name: eg Simon Bucks\n', "    uint8 public decimals;                //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.\n", '    string public symbol;                 //An identifier: eg SBX\n', "    string public version = 'H0.1';       //human 0.1 standard. Just an arbitrary versioning scheme.\n", '\n', '    function HumanStandardToken(\n', '        uint256 _initialAmount,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol\n', '        ) {\n', '        balances[msg.sender] = _initialAmount;               // Give the creator all initial tokens\n', '        totalSupply = _initialAmount;                        // Update total supply\n', '        name = _tokenName;                                   // Set the name for display purposes\n', '        decimals = _decimalUnits;                            // Amount of decimals for display purposes\n', '        symbol = _tokenSymbol;                               // Set the symbol for display purposes\n', '    }\n', '\n', '    /* Approves and then calls the receiving contract */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '\n', "        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\n", '        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '        if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { throw; }\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Locked {\n', '  uint public period;\n', '\n', '  function Locked(uint _period) public {\n', '    period = _period;\n', '  }\n', '}\n', '\n', 'contract Owned {\n', '    function Owned() { owner = msg.sender; }\n', '    address owner;\n', '\n', '    // This contract only defines a modifier but does not use\n', '    // it - it will be used in derived contracts.\n', '    // The function body is inserted where the special symbol\n', '    // "_;" in the definition of a modifier appears.\n', '    // This means that if the owner calls this function, the\n', '    // function is executed and otherwise, an exception is\n', '    // thrown.\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '}\n', '\n', 'contract Sales is Owned {\n', '  address public wallet;\n', '  HumanStandardToken public token;\n', '  Locked public locked;\n', '  uint public price;\n', '  uint public startBlock;\n', '  uint public freezeBlock;\n', '  bool public frozen = false;\n', '  uint256 public cap = 0;\n', '  uint256 public sold = 0;\n', '  uint created;\n', '\n', '  event PurchasedTokens(address indexed purchaser, uint amount);\n', '\n', '  modifier saleHappening {\n', '    require(block.number >= startBlock);\n', '    require(block.number <= freezeBlock);\n', '    require(!frozen);\n', '    require(sold < cap);\n', '    _;\n', '  }\n', '\n', '  function Sales(\n', '    address _wallet,\n', '    uint256 _tokenSupply,\n', '    string _tokenName,\n', '    uint8 _tokenDecimals,\n', '    string _tokenSymbol,\n', '    uint _price,\n', '    uint _startBlock,\n', '    uint _freezeBlock,\n', '    uint256 _cap,\n', '    uint _locked\n', '  ) {\n', '    wallet = _wallet;\n', '    token = new HumanStandardToken(_tokenSupply, _tokenName, _tokenDecimals, _tokenSymbol);\n', '    locked = new Locked(_locked);\n', '    price = _price;\n', '    startBlock = _startBlock;\n', '    freezeBlock = _freezeBlock;\n', '    cap = _cap;\n', '    created = now;\n', '\n', '    uint256 ownersValue = SafeMath.div(SafeMath.mul(token.totalSupply(), 20), 100);\n', '    assert(token.transfer(wallet, ownersValue));\n', '\n', '    uint256 saleValue = SafeMath.div(SafeMath.mul(token.totalSupply(), 60), 100);\n', '    assert(token.transfer(this, saleValue));\n', '\n', '    uint256 lockedValue = SafeMath.sub(token.totalSupply(), SafeMath.add(ownersValue, saleValue));\n', '    assert(token.transfer(locked, lockedValue));\n', '  }\n', '\n', '  function purchaseTokens()\n', '    payable\n', '    saleHappening {\n', '    uint excessAmount = msg.value % price;\n', '    uint purchaseAmount = SafeMath.sub(msg.value, excessAmount);\n', '    uint tokenPurchase = SafeMath.div(purchaseAmount, price);\n', '\n', '    require(tokenPurchase <= token.balanceOf(this));\n', '\n', '    if (excessAmount > 0) {\n', '      msg.sender.transfer(excessAmount);\n', '    }\n', '\n', '    sold = SafeMath.add(sold, tokenPurchase);\n', '    assert(sold <= cap);\n', '    wallet.transfer(purchaseAmount);\n', '    assert(token.transfer(msg.sender, tokenPurchase));\n', '    PurchasedTokens(msg.sender, tokenPurchase);\n', '  }\n', '\n', '  /* owner only functions */\n', '  function changeBlocks(uint _newStartBlock, uint _newFreezeBlock)\n', '    onlyOwner {\n', '    require(_newStartBlock != 0);\n', '    require(_newFreezeBlock >= _newStartBlock);\n', '    startBlock = _newStartBlock;\n', '    freezeBlock = _newFreezeBlock;\n', '  }\n', '\n', '  function changePrice(uint _newPrice) \n', '    onlyOwner {\n', '    require(_newPrice > 0);\n', '    price = _newPrice;\n', '  }\n', '\n', '  function changeCap(uint256 _newCap)\n', '    onlyOwner {\n', '    require(_newCap > 0);\n', '    cap = _newCap;\n', '  }\n', '\n', '  function unlockEscrow()\n', '    onlyOwner {\n', '    assert((now - created) > locked.period());\n', '    assert(token.transfer(wallet, token.balanceOf(locked)));\n', '  }\n', '\n', '  function toggleFreeze()\n', '    onlyOwner {\n', '      frozen = !frozen;\n', '  }\n', '}']
