['pragma solidity ^0.4.15;\n', '\n', '/**\n', ' * Standard ERC20 token\n', ' *\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood:\n', ' * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' *\n', ' * This is the token contract for Ethino, the first and only ERC20 Ethereum Casino.\n', ' * It utilizes Majoolr&#39;s TokenLib library to reduce custom source code surface\n', ' * area and increase overall security. Majoolr provides smart contract services\n', ' * and security reviews for contract deployments in addition to working on open\n', ' * source projects in the Ethereum community.\n', ' * For further information: ethino.com, majoolr.io\n', ' *\n', ' * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n', ' * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n', ' * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n', ' * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n', ' * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n', ' * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n', ' * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n', ' */\n', '\n', 'contract ENOToken {\n', '  using TokenLib for TokenLib.TokenStorage;\n', '\n', '  TokenLib.TokenStorage token;\n', '\n', '  //This instance is for the ropsten testnet\n', '  function ENOToken(address owner, //0x10b98123f84703A5CB884d27058D3415e03f2f71\n', '                    string name, //Ethino\n', '                    string symbol, //ENO\n', '                    uint8 decimals, //18\n', '                    uint256 initialSupply, //20000000000000000000000000\n', '                    bool allowMinting) //false\n', '  {\n', '    token.init(owner, name, symbol, decimals, initialSupply, allowMinting);\n', '  }\n', '\n', '  function owner() constant returns (address) {\n', '    return token.owner;\n', '  }\n', '\n', '  function name() constant returns (string) {\n', '    return token.name;\n', '  }\n', '\n', '  function symbol() constant returns (string) {\n', '    return token.symbol;\n', '  }\n', '\n', '  function decimals() constant returns (uint8) {\n', '    return token.decimals;\n', '  }\n', '\n', '  function initialSupply() constant returns (uint256) {\n', '    return token.INITIAL_SUPPLY;\n', '  }\n', '\n', '  function totalSupply() constant returns (uint256) {\n', '    return token.totalSupply;\n', '  }\n', '\n', '  function balanceOf(address who) constant returns (uint256) {\n', '    return token.balanceOf(who);\n', '  }\n', '\n', '  function allowance(address owner, address spender) constant returns (uint256) {\n', '    return token.allowance(owner, spender);\n', '  }\n', '\n', '  function transfer(address to, uint value) returns (bool ok) {\n', '    return token.transfer(to, value);\n', '  }\n', '\n', '  function transferFrom(address from, address to, uint value) returns (bool ok) {\n', '    return token.transferFrom(from, to, value);\n', '  }\n', '\n', '  function approve(address spender, uint value) returns (bool ok) {\n', '    return token.approve(spender, value);\n', '  }\n', '\n', '  function changeOwner(address newOwner) returns (bool ok) {\n', '    return token.changeOwner(newOwner);\n', '  }\n', '\n', '  function burnToken(uint256 amount) returns (bool ok) {\n', '    return token.burnToken(amount);\n', '  }\n', '}\n', '\n', 'pragma solidity ^0.4.15;\n', '\n', '/**\n', ' * @title TokenLib\n', ' * @author Majoolr.io\n', ' *\n', ' * version 1.1.0\n', ' * Copyright (c) 2017 Majoolr, LLC\n', ' * The MIT License (MIT)\n', ' * https://github.com/Majoolr/ethereum-libraries/blob/master/LICENSE\n', ' *\n', ' * The Token Library provides functionality to create a variety of ERC20 tokens.\n', ' * See https://github.com/Majoolr/ethereum-contracts for an example of how to\n', ' * create a basic ERC20 token.\n', ' *\n', ' * Majoolr works on open source projects in the Ethereum community with the\n', ' * purpose of testing, documenting, and deploying reusable code onto the\n', ' * blockchain to improve security and usability of smart contracts. Majoolr\n', ' * also strives to educate non-profits, schools, and other community members\n', ' * about the application of blockchain technology.\n', ' * For further information: majoolr.io\n', ' *\n', ' * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n', ' * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n', ' * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n', ' * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n', ' * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n', ' * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n', ' * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n', ' */\n', '\n', 'library TokenLib {\n', '  using BasicMathLib for uint256;\n', '\n', '  struct TokenStorage {\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    string name;\n', '    string symbol;\n', '    uint256 totalSupply;\n', '    uint256 INITIAL_SUPPLY;\n', '    address owner;\n', '    uint8 decimals;\n', '    bool stillMinting;\n', '  }\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '  event OwnerChange(address from, address to);\n', '  event Burn(address indexed burner, uint256 value);\n', '  event MintingClosed(bool mintingClosed);\n', '\n', '  /// @dev Called by the Standard Token upon creation.\n', '  /// @param self Stored token from token contract\n', '  /// @param _name Name of the new token\n', '  /// @param _symbol Symbol of the new token\n', '  /// @param _decimals Decimal places for the token represented\n', '  /// @param _initial_supply The initial token supply\n', '  /// @param _allowMinting True if additional tokens can be created, false otherwise\n', '  function init(TokenStorage storage self,\n', '                address _owner,\n', '                string _name,\n', '                string _symbol,\n', '                uint8 _decimals,\n', '                uint256 _initial_supply,\n', '                bool _allowMinting)\n', '  {\n', '    require(self.INITIAL_SUPPLY == 0);\n', '    self.name = _name;\n', '    self.symbol = _symbol;\n', '    self.totalSupply = _initial_supply;\n', '    self.INITIAL_SUPPLY = _initial_supply;\n', '    self.decimals = _decimals;\n', '    self.owner = _owner;\n', '    self.stillMinting = _allowMinting;\n', '    self.balances[_owner] = _initial_supply;\n', '  }\n', '\n', '  /// @dev Transfer tokens from caller&#39;s account to another account.\n', '  /// @param self Stored token from token contract\n', '  /// @param _to Address to send tokens\n', '  /// @param _value Number of tokens to send\n', '  /// @return True if completed\n', '  function transfer(TokenStorage storage self, address _to, uint256 _value) returns (bool) {\n', '    bool err;\n', '    uint256 balance;\n', '\n', '    (err,balance) = self.balances[msg.sender].minus(_value);\n', '    require(!err);\n', '    self.balances[msg.sender] = balance;\n', '    //It&#39;s not possible to overflow token supply\n', '    self.balances[_to] = self.balances[_to] + _value;\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /// @dev Authorized caller transfers tokens from one account to another\n', '  /// @param self Stored token from token contract\n', '  /// @param _from Address to send tokens from\n', '  /// @param _to Address to send tokens to\n', '  /// @param _value Number of tokens to send\n', '  /// @return True if completed\n', '  function transferFrom(TokenStorage storage self,\n', '                        address _from,\n', '                        address _to,\n', '                        uint256 _value)\n', '                        returns (bool)\n', '  {\n', '    var _allowance = self.allowed[_from][msg.sender];\n', '    bool err;\n', '    uint256 balanceOwner;\n', '    uint256 balanceSpender;\n', '\n', '    (err,balanceOwner) = self.balances[_from].minus(_value);\n', '    require(!err);\n', '\n', '    (err,balanceSpender) = _allowance.minus(_value);\n', '    require(!err);\n', '\n', '    self.balances[_from] = balanceOwner;\n', '    self.allowed[_from][msg.sender] = balanceSpender;\n', '    self.balances[_to] = self.balances[_to] + _value;\n', '\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /// @dev Retrieve token balance for an account\n', '  /// @param self Stored token from token contract\n', '  /// @param _owner Address to retrieve balance of\n', '  /// @return balance The number of tokens in the subject account\n', '  function balanceOf(TokenStorage storage self, address _owner) constant returns (uint256 balance) {\n', '    return self.balances[_owner];\n', '  }\n', '\n', '  /// @dev Authorize an account to send tokens on caller&#39;s behalf\n', '  /// @param self Stored token from token contract\n', '  /// @param _spender Address to authorize\n', '  /// @param _value Number of tokens authorized account may send\n', '  /// @return True if completed\n', '  function approve(TokenStorage storage self, address _spender, uint256 _value) returns (bool) {\n', '    self.allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /// @dev Remaining tokens third party spender has to send\n', '  /// @param self Stored token from token contract\n', '  /// @param _owner Address of token holder\n', '  /// @param _spender Address of authorized spender\n', '  /// @return remaining Number of tokens spender has left in owner&#39;s account\n', '  function allowance(TokenStorage storage self, address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return self.allowed[_owner][_spender];\n', '  }\n', '\n', '  /// @dev Authorize third party transfer by increasing/decreasing allowed rather than setting it\n', '  /// @param self Stored token from token contract\n', '  /// @param _spender Address to authorize\n', '  /// @param _valueChange Increase or decrease in number of tokens authorized account may send\n', '  /// @param _increase True if increasing allowance, false if decreasing allowance\n', '  /// @return True if completed\n', '  function approveChange (TokenStorage storage self, address _spender, uint256 _valueChange, bool _increase)\n', '                          returns (bool)\n', '  {\n', '    uint256 _newAllowed;\n', '    bool err;\n', '\n', '    if(_increase) {\n', '      (err, _newAllowed) = self.allowed[msg.sender][_spender].plus(_valueChange);\n', '      require(!err);\n', '\n', '      self.allowed[msg.sender][_spender] = _newAllowed;\n', '    } else {\n', '      if (_valueChange > self.allowed[msg.sender][_spender]) {\n', '        self.allowed[msg.sender][_spender] = 0;\n', '      } else {\n', '        _newAllowed = self.allowed[msg.sender][_spender] - _valueChange;\n', '        self.allowed[msg.sender][_spender] = _newAllowed;\n', '      }\n', '    }\n', '\n', '    Approval(msg.sender, _spender, _newAllowed);\n', '    return true;\n', '  }\n', '\n', '  /// @dev Change owning address of the token contract, specifically for minting\n', '  /// @param self Stored token from token contract\n', '  /// @param _newOwner Address for the new owner\n', '  /// @return True if completed\n', '  function changeOwner(TokenStorage storage self, address _newOwner) returns (bool) {\n', '    require((self.owner == msg.sender) && (_newOwner > 0));\n', '\n', '    self.owner = _newOwner;\n', '    OwnerChange(msg.sender, _newOwner);\n', '    return true;\n', '  }\n', '\n', '  /// @dev Mints additional tokens, new tokens go to owner\n', '  /// @param self Stored token from token contract\n', '  /// @param _amount Number of tokens to mint\n', '  /// @return True if completed\n', '  function mintToken(TokenStorage storage self, uint256 _amount) returns (bool) {\n', '    require((self.owner == msg.sender) && self.stillMinting);\n', '    uint256 _newAmount;\n', '    bool err;\n', '\n', '    (err, _newAmount) = self.totalSupply.plus(_amount);\n', '    require(!err);\n', '\n', '    self.totalSupply =  _newAmount;\n', '    self.balances[self.owner] = self.balances[self.owner] + _amount;\n', '    Transfer(0x0, self.owner, _amount);\n', '    return true;\n', '  }\n', '\n', '  /// @dev Permanent stops minting\n', '  /// @param self Stored token from token contract\n', '  /// @return True if completed\n', '  function closeMint(TokenStorage storage self) returns (bool) {\n', '    require(self.owner == msg.sender);\n', '\n', '    self.stillMinting = false;\n', '    MintingClosed(true);\n', '    return true;\n', '  }\n', '\n', '  /// @dev Permanently burn tokens\n', '  /// @param self Stored token from token contract\n', '  /// @param _amount Amount of tokens to burn\n', '  /// @return True if completed\n', '  function burnToken(TokenStorage storage self, uint256 _amount) returns (bool) {\n', '      uint256 _newBalance;\n', '      bool err;\n', '\n', '      (err, _newBalance) = self.balances[msg.sender].minus(_amount);\n', '      require(!err);\n', '\n', '      self.balances[msg.sender] = _newBalance;\n', '      self.totalSupply = self.totalSupply - _amount;\n', '      Burn(msg.sender, _amount);\n', '      Transfer(msg.sender, 0x0, _amount);\n', '      return true;\n', '  }\n', '}\n', 'pragma solidity ^0.4.13;\n', '\n', '/**\n', ' * @title Basic Math Library\n', ' * @author Majoolr.io\n', ' *\n', ' * version 1.1.0\n', ' * Copyright (c) 2017 Majoolr, LLC\n', ' * The MIT License (MIT)\n', ' * https://github.com/Majoolr/ethereum-libraries/blob/master/LICENSE\n', ' *\n', ' * The Basic Math Library is inspired by the Safe Math library written by\n', ' * OpenZeppelin at https://github.com/OpenZeppelin/zeppelin-solidity/ .\n', ' * Majoolr works on open source projects in the Ethereum community with the\n', ' * purpose of testing, documenting, and deploying reusable code onto the\n', ' * blockchain to improve security and usability of smart contracts. Majoolr\n', ' * also strives to educate non-profits, schools, and other community members\n', ' * about the application of blockchain technology.\n', ' * For further information: majoolr.io, openzeppelin.org\n', ' *\n', ' * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n', ' * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n', ' * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n', ' * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n', ' * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n', ' * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n', ' * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n', ' */\n', '\n', 'library BasicMathLib {\n', '  event Err(string typeErr);\n', '\n', '  /// @dev Multiplies two numbers and checks for overflow before returning.\n', '  /// Does not throw but rather logs an Err event if there is overflow.\n', '  /// @param a First number\n', '  /// @param b Second number\n', '  /// @return err False normally, or true if there is overflow\n', '  /// @return res The product of a and b, or 0 if there is overflow\n', '  function times(uint256 a, uint256 b) constant returns (bool err,uint256 res) {\n', '    assembly{\n', '      res := mul(a,b)\n', '      switch or(iszero(b), eq(div(res,b), a))\n', '      case 0 {\n', '        err := 1\n', '        res := 0\n', '      }\n', '    }\n', '    if (err)\n', '      Err("times func overflow");\n', '  }\n', '\n', '  /// @dev Divides two numbers but checks for 0 in the divisor first.\n', '  /// Does not throw but rather logs an Err event if 0 is in the divisor.\n', '  /// @param a First number\n', '  /// @param b Second number\n', '  /// @return err False normally, or true if `b` is 0\n', '  /// @return res The quotient of a and b, or 0 if `b` is 0\n', '  function dividedBy(uint256 a, uint256 b) constant returns (bool err,uint256 res) {\n', '    assembly{\n', '      switch iszero(b)\n', '      case 0 {\n', '        res := div(a,b)\n', '        mstore(add(mload(0x40),0x20),res)\n', '        return(mload(0x40),0x40)\n', '      }\n', '    }\n', '    Err("tried to divide by zero");\n', '    return (true, 0);\n', '  }\n', '\n', '  /// @dev Adds two numbers and checks for overflow before returning.\n', '  /// Does not throw but rather logs an Err event if there is overflow.\n', '  /// @param a First number\n', '  /// @param b Second number\n', '  /// @return err False normally, or true if there is overflow\n', '  /// @return res The sum of a and b, or 0 if there is overflow\n', '  function plus(uint256 a, uint256 b) constant returns (bool err, uint256 res) {\n', '    assembly{\n', '      res := add(a,b)\n', '      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n', '      case 0 {\n', '        err := 1\n', '        res := 0\n', '      }\n', '    }\n', '    if (err)\n', '      Err("plus func overflow");\n', '  }\n', '\n', '  /// @dev Subtracts two numbers and checks for underflow before returning.\n', '  /// Does not throw but rather logs an Err event if there is underflow.\n', '  /// @param a First number\n', '  /// @param b Second number\n', '  /// @return err False normally, or true if there is underflow\n', '  /// @return res The difference between a and b, or 0 if there is underflow\n', '  function minus(uint256 a, uint256 b) constant returns (bool err,uint256 res) {\n', '    assembly{\n', '      res := sub(a,b)\n', '      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n', '      case 0 {\n', '        err := 1\n', '        res := 0\n', '      }\n', '    }\n', '    if (err)\n', '      Err("minus func underflow");\n', '  }\n', '}']