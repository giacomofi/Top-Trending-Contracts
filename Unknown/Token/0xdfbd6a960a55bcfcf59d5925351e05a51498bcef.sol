['pragma solidity ^0.4.11;\n', '\n', 'library safeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    assert(b > 0);\n', '    uint c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      throw;\n', '    }\n', '  }\n', '}\n', '\n', 'contract ERC20 {\n', '    function totalSupply() constant returns (uint supply);\n', '    function balanceOf(address who) constant returns (uint value);\n', '    function allowance(address owner, address spender) constant returns (uint _allowance);\n', '\n', '    function transfer(address to, uint value) returns (bool ok);\n', '    function transferFrom(address from, address to, uint value) returns (bool ok);\n', '    function approve(address spender, uint value) returns (bool ok);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'contract RockCoin is ERC20{\n', '        uint initialSupply = 16500000;\n', '        string name = "RockCoin";\n', '        string symbol = "ROCK";\n', '        uint USDExchangeRate = 300;\n', '        bool preSale = true;\n', '        bool burned = false;\n', '        uint saleTimeStart;\n', '\n', '        address ownerAddress;\n', '\n', '        mapping (address => uint256) balances;\n', '        mapping (address => mapping (address => uint256)) allowed;\n', '\n', '        event Burn(address indexed from, uint amount);\n', '\n', '        modifier onlyOwner{\n', '            if (msg.sender == ownerAddress) {\n', '                  _;\n', '                }\n', '        }\n', '\n', '        function totalSupply() constant returns (uint256) {\n', '                return initialSupply;\n', '    }\n', '\n', '        function balanceOf(address _owner) constant returns (uint256 balance) {\n', '                return balances[_owner];\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '  function transfer(address _to, uint256 _value) returns (bool success) {\n', '    if (balances[msg.sender] >= _value && _value > 0) {\n', '      balances[msg.sender] -= _value;\n', '      balances[_to] += _value;\n', '      Transfer(msg.sender, _to, _value);\n', '      return true;\n', '    } else {\n', '      return false;\n', '    }\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '    if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '      balances[_to] += _value;\n', '      balances[_from] -= _value;\n', '      allowed[_from][msg.sender] -= _value;\n', '      Transfer(_from, _to, _value);\n', '      return true;\n', '    } else {\n', '      return false;\n', '    }\n', '  }\n', '\n', '  function getCurrentModifier() returns (uint _modifier) {\n', '        if (preSale) return 5;\n', '\n', '        if (balances[ownerAddress] > 11500000) return 8;\n', '        if (balances[ownerAddress] > 6500000) return 10;\n', '        if (balances[ownerAddress] > 1500000) return 12;\n', '\n', '        return 0;\n', '}\n', '\n', '  function setUSDExchangeRate(uint _value) onlyOwner {\n', '            USDExchangeRate = _value;\n', '        }\n', '\n', '  function stopPreSale() onlyOwner {\n', '            if (preSale) {\n', '               saleTimeStart = now;\n', '            }\t\n', '            preSale = false;\n', '        }\n', '\n', '  function approve(address _spender, uint256 _value) returns (bool success) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '    function burnUnsold() returns (bool success) {\n', '            if (!preSale && saleTimeStart + 5 weeks < now && !burned) {\n', '                uint sold = initialSupply - balances[ownerAddress];\n', '                uint toHold = safeMath.div(sold, 10);\n', '                uint burningAmount = balances[ownerAddress] - toHold;\n', '                balances[ownerAddress] = toHold;\n', '                initialSupply -= burningAmount;\n', '                    Burn(ownerAddress, burningAmount);\n', '                    burned = true;\n', '            return burned;\n', '            }\n', '    }\n', '\n', '        function RockCoin() {\n', '        ownerAddress = msg.sender;\n', '            uint devFee = 7000;\n', '        balances[ownerAddress] = initialSupply - devFee;\n', '            address devAddr = 0xB0416874d4253E12C95C5FAC8F069F9BFf18D1bf;\n', '            balances[devAddr] = devFee;\n', '            Transfer(ownerAddress, devAddr, devFee);\n', '    }\n', '\n', '        function () payable{\n', '            uint amountInUSDollars = safeMath.div(safeMath.mul(msg.value, USDExchangeRate),10**18);\n', '            uint currentPriceModifier = getCurrentModifier();\n', '\n', '            if (currentPriceModifier>0) {\n', '                uint valueToPass = safeMath.div(safeMath.mul(amountInUSDollars, 10),currentPriceModifier);\n', '                if (preSale && balances[ownerAddress] < 14500000) {stopPreSale();}\n', '                if (balances[ownerAddress] >= valueToPass) {\n', '                balances[msg.sender] = safeMath.add(balances[msg.sender],valueToPass);\n', '                balances[ownerAddress] = safeMath.sub(balances[ownerAddress],valueToPass);\n', '                Transfer(ownerAddress, msg.sender, valueToPass);\n', '            } \n', '            }\n', '        }\n', '\n', '    function withdraw(uint amount) onlyOwner{\n', '        ownerAddress.transfer(amount);\n', '        }\t\n', '}']
['pragma solidity ^0.4.11;\n', '\n', 'library safeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    assert(b > 0);\n', '    uint c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      throw;\n', '    }\n', '  }\n', '}\n', '\n', 'contract ERC20 {\n', '    function totalSupply() constant returns (uint supply);\n', '    function balanceOf(address who) constant returns (uint value);\n', '    function allowance(address owner, address spender) constant returns (uint _allowance);\n', '\n', '    function transfer(address to, uint value) returns (bool ok);\n', '    function transferFrom(address from, address to, uint value) returns (bool ok);\n', '    function approve(address spender, uint value) returns (bool ok);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'contract RockCoin is ERC20{\n', '        uint initialSupply = 16500000;\n', '        string name = "RockCoin";\n', '        string symbol = "ROCK";\n', '        uint USDExchangeRate = 300;\n', '        bool preSale = true;\n', '        bool burned = false;\n', '        uint saleTimeStart;\n', '\n', '        address ownerAddress;\n', '\n', '        mapping (address => uint256) balances;\n', '        mapping (address => mapping (address => uint256)) allowed;\n', '\n', '        event Burn(address indexed from, uint amount);\n', '\n', '        modifier onlyOwner{\n', '            if (msg.sender == ownerAddress) {\n', '                  _;\n', '                }\n', '        }\n', '\n', '        function totalSupply() constant returns (uint256) {\n', '                return initialSupply;\n', '    }\n', '\n', '        function balanceOf(address _owner) constant returns (uint256 balance) {\n', '                return balances[_owner];\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '  function transfer(address _to, uint256 _value) returns (bool success) {\n', '    if (balances[msg.sender] >= _value && _value > 0) {\n', '      balances[msg.sender] -= _value;\n', '      balances[_to] += _value;\n', '      Transfer(msg.sender, _to, _value);\n', '      return true;\n', '    } else {\n', '      return false;\n', '    }\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '    if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '      balances[_to] += _value;\n', '      balances[_from] -= _value;\n', '      allowed[_from][msg.sender] -= _value;\n', '      Transfer(_from, _to, _value);\n', '      return true;\n', '    } else {\n', '      return false;\n', '    }\n', '  }\n', '\n', '  function getCurrentModifier() returns (uint _modifier) {\n', '        if (preSale) return 5;\n', '\n', '        if (balances[ownerAddress] > 11500000) return 8;\n', '        if (balances[ownerAddress] > 6500000) return 10;\n', '        if (balances[ownerAddress] > 1500000) return 12;\n', '\n', '        return 0;\n', '}\n', '\n', '  function setUSDExchangeRate(uint _value) onlyOwner {\n', '            USDExchangeRate = _value;\n', '        }\n', '\n', '  function stopPreSale() onlyOwner {\n', '            if (preSale) {\n', '               saleTimeStart = now;\n', '            }\t\n', '            preSale = false;\n', '        }\n', '\n', '  function approve(address _spender, uint256 _value) returns (bool success) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '    function burnUnsold() returns (bool success) {\n', '            if (!preSale && saleTimeStart + 5 weeks < now && !burned) {\n', '                uint sold = initialSupply - balances[ownerAddress];\n', '                uint toHold = safeMath.div(sold, 10);\n', '                uint burningAmount = balances[ownerAddress] - toHold;\n', '                balances[ownerAddress] = toHold;\n', '                initialSupply -= burningAmount;\n', '                    Burn(ownerAddress, burningAmount);\n', '                    burned = true;\n', '            return burned;\n', '            }\n', '    }\n', '\n', '        function RockCoin() {\n', '        ownerAddress = msg.sender;\n', '            uint devFee = 7000;\n', '        balances[ownerAddress] = initialSupply - devFee;\n', '            address devAddr = 0xB0416874d4253E12C95C5FAC8F069F9BFf18D1bf;\n', '            balances[devAddr] = devFee;\n', '            Transfer(ownerAddress, devAddr, devFee);\n', '    }\n', '\n', '        function () payable{\n', '            uint amountInUSDollars = safeMath.div(safeMath.mul(msg.value, USDExchangeRate),10**18);\n', '            uint currentPriceModifier = getCurrentModifier();\n', '\n', '            if (currentPriceModifier>0) {\n', '                uint valueToPass = safeMath.div(safeMath.mul(amountInUSDollars, 10),currentPriceModifier);\n', '                if (preSale && balances[ownerAddress] < 14500000) {stopPreSale();}\n', '                if (balances[ownerAddress] >= valueToPass) {\n', '                balances[msg.sender] = safeMath.add(balances[msg.sender],valueToPass);\n', '                balances[ownerAddress] = safeMath.sub(balances[ownerAddress],valueToPass);\n', '                Transfer(ownerAddress, msg.sender, valueToPass);\n', '            } \n', '            }\n', '        }\n', '\n', '    function withdraw(uint amount) onlyOwner{\n', '        ownerAddress.transfer(amount);\n', '        }\t\n', '}']
