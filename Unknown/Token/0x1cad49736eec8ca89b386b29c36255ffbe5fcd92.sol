['//MOVIECREDITS_UPDATE V3.0\n', '\n', 'contract SafeMath{\n', '  function safeMul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint a, uint b) internal returns (uint) {\n', '    assert(b > 0);\n', '    uint c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', ' \n', ' function safeSub(uint a, uint b) internal returns (uint) {\n', '     assert(b <= a);\n', '     return a - b;\n', '  }\n', '\n', ' function safeAdd(uint a, uint b) internal returns (uint) {\n', '     uint c = a + b;\n', '     assert(c >= a);\n', '     return c;\n', '  }\n', ' function assert(bool assertion) internal {\n', '     if (!assertion) {\n', '       throw;\n', '     }\n', ' }\n', '}\n', 'contract ERC20{\n', '\n', '  function totalSupply() constant returns (uint256 totalSupply) {}\n', ' function balanceOf(address _owner) constant returns (uint256 balance) {}\n', ' function transfer(address _recipient, uint256 _value) returns (bool success) {}\n', ' function transferFrom(address _from, address _recipient, uint256 _value) returns (bool success) {}\n', ' function approve(address _spender, uint256 _value) returns (bool success) {}\n', ' function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', ' event Transfer(address indexed _from, address indexed _recipient, uint256 _value);\n', ' event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '\n', '}\n', '\n', 'contract MOVIECREDITS3 is ERC20, SafeMath{\n', '\n', ' \n', ' mapping(address => uint256) balances;\n', '\n', ' uint256 public totalSupply;\n', '\n', '\n', ' function balanceOf(address _owner) constant returns (uint256 balance) {\n', '     return balances[_owner];\n', ' }\n', '\n', ' function transfer(address _to, uint256 _value) returns (bool success){\n', '     balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '     balances[_to] = safeAdd(balances[_to], _value);\n', '     Transfer(msg.sender, _to, _value);\n', '     return true;\n', ' }\n', '\n', ' mapping (address => mapping (address => uint256)) allowed;\n', '\n', ' function transferFrom(address _from, address _to, uint256 _value) returns (bool success){\n', '     var _allowance = allowed[_from][msg.sender];\n', '    \n', '     balances[_to] = safeAdd(balances[_to], _value);\n', '     balances[_from] = safeSub(balances[_from], _value);\n', '     allowed[_from][msg.sender] = safeSub(_allowance, _value);\n', '     Transfer(_from, _to, _value);\n', '     return true;\n', ' }\n', '\n', ' function approve(address _spender, uint256 _value) returns (bool success) {\n', '     allowed[msg.sender][_spender] = _value;\n', '     Approval(msg.sender, _spender, _value);\n', '     return true;\n', ' }\n', '\n', ' function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '     return allowed[_owner][_spender];\n', ' }\n', '\n', '\n', '\n', '\n', ' uint256 public endTime;\n', '\n', ' modifier during_offering_time(){\n', '  if (now >= endTime){\n', '   throw;\n', '  }else{\n', '   _;\n', '  }\n', ' }\n', '\n', ' function () payable during_offering_time {\n', '  createTokens(msg.sender);\n', ' }\n', '\n', ' function createTokens(address recipient) payable {\n', '  if (msg.value == 0) {\n', '    throw;\n', '  }\n', '\n', '  uint tokens = safeDiv(safeMul(msg.value, price), 1 ether);\n', '  totalSupply = safeAdd(totalSupply, tokens);\n', '\n', '  balances[recipient] = safeAdd(balances[recipient], tokens);\n', '\n', '  if (!owner.send(msg.value)) {\n', '    throw;\n', '  }\n', ' }\n', ' string  public name = "MOVIECREDITS (EMVC)";\n', ' string  public symbol = "EMVC";\n', ' uint  public decimals = 8;\n', ' uint256 public INITIAL_SUPPLY = 6000000000000000;\n', 'string public version = &#39;EMVC3.0&#39;;\n', ' uint256 public price;\n', ' address public owner;\n', '\n', ' function MOVIECREDITS() {\n', '  totalSupply = INITIAL_SUPPLY;\n', '  balances[msg.sender] = INITIAL_SUPPLY;  // Give all of the initial tokens to the contract deployer.\n', '  endTime = now + 7 weeks;\n', '  owner  = msg.sender;\n', '  price  = 750;\n', ' }\n', '\n', '}']