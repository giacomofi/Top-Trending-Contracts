['pragma solidity ^0.4.16;\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS paused\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS NOT paused\n', '   */\n', '  modifier whenPaused {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused returns (bool) {\n', '    paused = true;\n', '    Pause();\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused returns (bool) {\n', '    paused = false;\n', '    Unpause();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', 'contract Hgt is StandardToken, Pausable {\n', '\n', '    string public name = "HelloGold Token";\n', '    string public symbol = "HGT";\n', '    uint256 public decimals = 18;\n', '\n', '}\n', '\n', 'contract Hgs {\n', '    struct CsAction {\n', '      bool        passedKYC;\n', '      bool        blocked;\n', '    }\n', '\n', '\n', '    /* This creates an array with all balances */\n', '    mapping (address => CsAction) public permissions;\n', '    mapping (address => uint256)  public deposits;\n', '}\n', '\n', 'contract HelloGoldRound1Point5 is Ownable {\n', '\n', '    using SafeMath for uint256;\n', '    bool    public  started;\n', '    uint256 public  startTime = 1505995200; // September 21, 2017 8:00:00 PM GMT+08:00\n', '    uint256 public  endTime = 1507204800;  // October 5, 2017 8:00:00 PM GMT+08:00\n', '    uint256 public  weiRaised;\n', '    uint256 public  lastSaleInHGT = 170000000 * 10 ** 8 ;\n', '    uint256 public  hgtSold;\n', '    uint256 public  r15Backers;\n', '\n', '    uint256 public  rate = 12489 * 10 ** 8;\n', '    Hgs     public  hgs = Hgs(0x574FB6d9d090042A04D0D12a4E87217f8303A5ca);\n', '    Hgt     public  hgt = Hgt(0xba2184520A1cC49a6159c57e61E1844E085615B6);\n', '    address public  multisig = 0xC03281aF336e2C25B41FF893A0e6cE1a932B23AF; // who gets the ether\n', '    address public  reserves = 0xC03281aF336e2C25B41FF893A0e6cE1a932B23AF; // who has the HGT pool\n', '\n', '//////   //    /////     BIG BLOODY REMINDER   The code below is for testing purposes\n', '//   //  //   //   //    BIG BLOODY REMINDER   If you are not the developer of this code\n', '/////    //   //         BIG BLOODY REMINDER   And you can see this, SHOUT coz it should \n', '//  ///  //   //  ///    BIG BLOODY REMINDER   Not be here in production and all hell will\n', '//  ///  //   //   //    BIG BLOODY REMINDER   Break loose, the gates of hell will open and\n', '//////   //    //////    BIG BLOODY REMINDER   Winged monstors and daemons will roam free  \n', '\n', '    // bool testing = true;\n', '\n', '    // function testingOnly() {\n', '    //     if (!testing)\n', '    //         return;\n', '    //     hgs = Hgs(0x5aB936795ECEeF9D34198d3AAEe1bA32b8f34B6b);\n', '    //     hgt = Hgt(0x38738A39d1EbdA813237C34122677a5925454ec8);\n', '    //     multisig = 0x3D1F6Cd19d58767E3680c4D60D0b3355331F7b46;\n', '    //     reserves = 0x1bdc4085d0222F459B92fa23FfA570f493e6E763;\n', '    // }\n', '\n', '\n', '//////   //    /////     BIG BLOODY REMINDER   The code above is for testing purposes\n', '//   //  //   //   //    BIG BLOODY REMINDER   If you are not the developer of this code\n', '/////    //   //         BIG BLOODY REMINDER   And you can see this, SHOUT coz it should \n', '//  ///  //   //  ///    BIG BLOODY REMINDER   Not be here in production and all hell will\n', '//  ///  //   //   //    BIG BLOODY REMINDER   Break loose, the gates of hell will open and\n', '//////   //    //////    BIG BLOODY REMINDER   Winged monstors and daemons will roam free  \n', '\n', '\n', '\n', '\n', '    mapping (address => uint256) public deposits;\n', '    mapping (address => bool) public upgraded;\n', '    mapping (address => uint256) public upgradeHGT;\n', '\n', '    modifier validPurchase() {\n', '        bool passedKYC;\n', '        bool blocked;\n', '        require (msg.value >= 1 finney);\n', '        require (started || (now > startTime));\n', '        require (now <= endTime);\n', '        require (hgtSold < lastSaleInHGT);\n', '        (passedKYC,blocked) = hgs.permissions(msg.sender); \n', '        require (passedKYC);\n', '        require (!blocked);\n', '\n', '\n', '        _;\n', '    }\n', '\n', ' \n', '    function HelloGoldRound1Point5() {\n', '        // handle the guy who had three proxy accounts\n', '        deposits[0xA3f59EbC3bf8Fa664Ce12e2f841Fe6556289F053] = 30 ether; // so sum balance = 40 ether\n', '        upgraded[0xA3f59EbC3bf8Fa664Ce12e2f841Fe6556289F053] = true;\n', '        upgraded[0x00f07DA332aa7751F9170430F6e4b354568c5B40] = true;\n', '        upgraded[0x938CdFb9B756A5b6c8f3fBA535EC17700edD4c15] = true;\n', '        upgraded[0xa6a777ed720746FBE7b6b908584CD3D533d307D3] = true;\n', '\n', '        // testingOnly(); // removing this allows me to keep the BIG COMMENTS to see if Robin ever hears about it :-p\n', '    }\n', '\n', '    function reCap(uint256 newCap) onlyOwner {\n', '        lastSaleInHGT = newCap;\n', '    }\n', '\n', '    function startAndSetStopTime(uint256 period) onlyOwner {\n', '        started = true;\n', '        if (period == 0)\n', '            endTime = now + 2 weeks;\n', '        else\n', '            endTime = now + period;\n', '    }\n', '\n', '    // Need to check cases\n', '    //  1   already upgraded\n', '    //  2   first deposit (no R1)\n', '    //  3   R1 < 10, first R1.5 takes over 10 ether\n', '    //  4   R1 <= 10, second R1.5 takes over 10 ether\n', '    function upgradeOnePointZeroBalances() internal {\n', '    // 1\n', '        if (upgraded[msg.sender]) {\n', '            log0("account already upgraded");\n', '            return;\n', '        }\n', '    // 2\n', '        uint256 deposited = hgs.deposits(msg.sender);\n', '        if (deposited == 0)\n', '            return;\n', '    // 3\n', '        deposited = deposited.add(deposits[msg.sender]);\n', '        if (deposited.add(msg.value) < 10 ether)\n', '            return;\n', '    // 4\n', '        uint256 hgtBalance = hgt.balanceOf(msg.sender);\n', '        uint256 upgradedAmount = deposited.mul(rate).div(1 ether);\n', '        if (hgtBalance < upgradedAmount) {\n', '            uint256 diff = upgradedAmount.sub(hgtBalance);\n', '            hgt.transferFrom(reserves,msg.sender,diff);\n', '            hgtSold = hgtSold.add(diff);\n', '            upgradeHGT[msg.sender] = upgradeHGT[msg.sender].add(diff);\n', '            log0("upgraded R1 to 20%");\n', '        }\n', '        upgraded[msg.sender] = true;\n', '    }\n', '\n', '    function () payable validPurchase {\n', '        if (deposits[msg.sender] == 0)\n', '            r15Backers++;\n', '        upgradeOnePointZeroBalances();\n', '        deposits[msg.sender] = deposits[msg.sender].add(msg.value);\n', '        \n', '        buyTokens(msg.sender,msg.value);\n', '    }\n', '\n', '    function buyTokens(address recipient, uint256 valueInWei) internal {\n', '        uint256 numberOfTokens = valueInWei.mul(rate).div(1 ether);\n', '        weiRaised = weiRaised.add(valueInWei);\n', '        require(hgt.transferFrom(reserves,recipient,numberOfTokens));\n', '        hgtSold = hgtSold.add(numberOfTokens);\n', '        multisig.transfer(msg.value);\n', '    }\n', '\n', '    function emergencyERC20Drain( ERC20 token, uint amount ) onlyOwner {\n', '        token.transfer(owner, amount);\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.16;\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS paused\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS NOT paused\n', '   */\n', '  modifier whenPaused {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused returns (bool) {\n', '    paused = true;\n', '    Pause();\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused returns (bool) {\n', '    paused = false;\n', '    Unpause();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', 'contract Hgt is StandardToken, Pausable {\n', '\n', '    string public name = "HelloGold Token";\n', '    string public symbol = "HGT";\n', '    uint256 public decimals = 18;\n', '\n', '}\n', '\n', 'contract Hgs {\n', '    struct CsAction {\n', '      bool        passedKYC;\n', '      bool        blocked;\n', '    }\n', '\n', '\n', '    /* This creates an array with all balances */\n', '    mapping (address => CsAction) public permissions;\n', '    mapping (address => uint256)  public deposits;\n', '}\n', '\n', 'contract HelloGoldRound1Point5 is Ownable {\n', '\n', '    using SafeMath for uint256;\n', '    bool    public  started;\n', '    uint256 public  startTime = 1505995200; // September 21, 2017 8:00:00 PM GMT+08:00\n', '    uint256 public  endTime = 1507204800;  // October 5, 2017 8:00:00 PM GMT+08:00\n', '    uint256 public  weiRaised;\n', '    uint256 public  lastSaleInHGT = 170000000 * 10 ** 8 ;\n', '    uint256 public  hgtSold;\n', '    uint256 public  r15Backers;\n', '\n', '    uint256 public  rate = 12489 * 10 ** 8;\n', '    Hgs     public  hgs = Hgs(0x574FB6d9d090042A04D0D12a4E87217f8303A5ca);\n', '    Hgt     public  hgt = Hgt(0xba2184520A1cC49a6159c57e61E1844E085615B6);\n', '    address public  multisig = 0xC03281aF336e2C25B41FF893A0e6cE1a932B23AF; // who gets the ether\n', '    address public  reserves = 0xC03281aF336e2C25B41FF893A0e6cE1a932B23AF; // who has the HGT pool\n', '\n', '//////   //    /////     BIG BLOODY REMINDER   The code below is for testing purposes\n', '//   //  //   //   //    BIG BLOODY REMINDER   If you are not the developer of this code\n', '/////    //   //         BIG BLOODY REMINDER   And you can see this, SHOUT coz it should \n', '//  ///  //   //  ///    BIG BLOODY REMINDER   Not be here in production and all hell will\n', '//  ///  //   //   //    BIG BLOODY REMINDER   Break loose, the gates of hell will open and\n', '//////   //    //////    BIG BLOODY REMINDER   Winged monstors and daemons will roam free  \n', '\n', '    // bool testing = true;\n', '\n', '    // function testingOnly() {\n', '    //     if (!testing)\n', '    //         return;\n', '    //     hgs = Hgs(0x5aB936795ECEeF9D34198d3AAEe1bA32b8f34B6b);\n', '    //     hgt = Hgt(0x38738A39d1EbdA813237C34122677a5925454ec8);\n', '    //     multisig = 0x3D1F6Cd19d58767E3680c4D60D0b3355331F7b46;\n', '    //     reserves = 0x1bdc4085d0222F459B92fa23FfA570f493e6E763;\n', '    // }\n', '\n', '\n', '//////   //    /////     BIG BLOODY REMINDER   The code above is for testing purposes\n', '//   //  //   //   //    BIG BLOODY REMINDER   If you are not the developer of this code\n', '/////    //   //         BIG BLOODY REMINDER   And you can see this, SHOUT coz it should \n', '//  ///  //   //  ///    BIG BLOODY REMINDER   Not be here in production and all hell will\n', '//  ///  //   //   //    BIG BLOODY REMINDER   Break loose, the gates of hell will open and\n', '//////   //    //////    BIG BLOODY REMINDER   Winged monstors and daemons will roam free  \n', '\n', '\n', '\n', '\n', '    mapping (address => uint256) public deposits;\n', '    mapping (address => bool) public upgraded;\n', '    mapping (address => uint256) public upgradeHGT;\n', '\n', '    modifier validPurchase() {\n', '        bool passedKYC;\n', '        bool blocked;\n', '        require (msg.value >= 1 finney);\n', '        require (started || (now > startTime));\n', '        require (now <= endTime);\n', '        require (hgtSold < lastSaleInHGT);\n', '        (passedKYC,blocked) = hgs.permissions(msg.sender); \n', '        require (passedKYC);\n', '        require (!blocked);\n', '\n', '\n', '        _;\n', '    }\n', '\n', ' \n', '    function HelloGoldRound1Point5() {\n', '        // handle the guy who had three proxy accounts\n', '        deposits[0xA3f59EbC3bf8Fa664Ce12e2f841Fe6556289F053] = 30 ether; // so sum balance = 40 ether\n', '        upgraded[0xA3f59EbC3bf8Fa664Ce12e2f841Fe6556289F053] = true;\n', '        upgraded[0x00f07DA332aa7751F9170430F6e4b354568c5B40] = true;\n', '        upgraded[0x938CdFb9B756A5b6c8f3fBA535EC17700edD4c15] = true;\n', '        upgraded[0xa6a777ed720746FBE7b6b908584CD3D533d307D3] = true;\n', '\n', '        // testingOnly(); // removing this allows me to keep the BIG COMMENTS to see if Robin ever hears about it :-p\n', '    }\n', '\n', '    function reCap(uint256 newCap) onlyOwner {\n', '        lastSaleInHGT = newCap;\n', '    }\n', '\n', '    function startAndSetStopTime(uint256 period) onlyOwner {\n', '        started = true;\n', '        if (period == 0)\n', '            endTime = now + 2 weeks;\n', '        else\n', '            endTime = now + period;\n', '    }\n', '\n', '    // Need to check cases\n', '    //  1   already upgraded\n', '    //  2   first deposit (no R1)\n', '    //  3   R1 < 10, first R1.5 takes over 10 ether\n', '    //  4   R1 <= 10, second R1.5 takes over 10 ether\n', '    function upgradeOnePointZeroBalances() internal {\n', '    // 1\n', '        if (upgraded[msg.sender]) {\n', '            log0("account already upgraded");\n', '            return;\n', '        }\n', '    // 2\n', '        uint256 deposited = hgs.deposits(msg.sender);\n', '        if (deposited == 0)\n', '            return;\n', '    // 3\n', '        deposited = deposited.add(deposits[msg.sender]);\n', '        if (deposited.add(msg.value) < 10 ether)\n', '            return;\n', '    // 4\n', '        uint256 hgtBalance = hgt.balanceOf(msg.sender);\n', '        uint256 upgradedAmount = deposited.mul(rate).div(1 ether);\n', '        if (hgtBalance < upgradedAmount) {\n', '            uint256 diff = upgradedAmount.sub(hgtBalance);\n', '            hgt.transferFrom(reserves,msg.sender,diff);\n', '            hgtSold = hgtSold.add(diff);\n', '            upgradeHGT[msg.sender] = upgradeHGT[msg.sender].add(diff);\n', '            log0("upgraded R1 to 20%");\n', '        }\n', '        upgraded[msg.sender] = true;\n', '    }\n', '\n', '    function () payable validPurchase {\n', '        if (deposits[msg.sender] == 0)\n', '            r15Backers++;\n', '        upgradeOnePointZeroBalances();\n', '        deposits[msg.sender] = deposits[msg.sender].add(msg.value);\n', '        \n', '        buyTokens(msg.sender,msg.value);\n', '    }\n', '\n', '    function buyTokens(address recipient, uint256 valueInWei) internal {\n', '        uint256 numberOfTokens = valueInWei.mul(rate).div(1 ether);\n', '        weiRaised = weiRaised.add(valueInWei);\n', '        require(hgt.transferFrom(reserves,recipient,numberOfTokens));\n', '        hgtSold = hgtSold.add(numberOfTokens);\n', '        multisig.transfer(msg.value);\n', '    }\n', '\n', '    function emergencyERC20Drain( ERC20 token, uint amount ) onlyOwner {\n', '        token.transfer(owner, amount);\n', '    }\n', '\n', '}']
