['pragma solidity 0.4.13;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', 'contract VeritasToken is StandardToken, Ownable\n', '{\n', '\n', '    string public name = "Veritas Group Limited Equity Token";\n', '    string public symbol = "VGLE";\n', '\n', '    uint public decimals = 8;\n', '    uint public buyRate = 251;\n', '    uint public sellRate = 251;\n', '\n', '    bool public allowBuying = true;\n', '    bool public allowSelling = true;\n', '\n', '    uint private INITIAL_SUPPLY = 120*10**6; // 120 Millions\n', '    \n', '    function () payable \n', '    {\n', '        BuyTokens(msg.sender);\n', '    }\n', '    \n', '    function VeritasToken()\n', '    {\n', '        owner = msg.sender;\n', '        totalSupply = INITIAL_SUPPLY;\n', '        balances[owner] = INITIAL_SUPPLY;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) \n', '    onlyOwner\n', '    {\n', '        address oldOwner = owner;\n', '        balances[newOwner] = balances[newOwner].add(balances[owner]);\n', '        balances[owner] = 0;\n', '\n', '        super.transferOwnership(newOwner);\n', '        OwnerTransfered(oldOwner, newOwner);\n', '    }\n', '\n', '    function ChangeBuyRate(uint newRate)\n', '    onlyOwner\n', '    {\n', '        require(newRate > 0);\n', '        uint oldRate = buyRate;\n', '        buyRate = newRate;\n', '        BuyRateChanged(oldRate, newRate);\n', '    }\n', '\n', '    function ChangeSellRate(uint newRate)\n', '    onlyOwner\n', '    {\n', '        require(newRate > 0);\n', '        uint oldRate = sellRate;\n', '        sellRate = newRate;\n', '        SellRateChanged(oldRate, newRate);\n', '    }\n', '\n', '    function BuyTokens(address beneficiary) \n', '    OnlyIfBuyingAllowed\n', '    payable \n', '    {\n', '        require(beneficiary != 0x0);\n', '        require(beneficiary != owner);\n', '        require(msg.value > 0);\n', '\n', '        uint weiAmount = msg.value;\n', '        uint etherAmount = WeiToEther(weiAmount);\n', '        \n', '        uint tokens = etherAmount.mul(buyRate);\n', '\n', '        balances[beneficiary] = balances[beneficiary].add(tokens);\n', '        balances[owner] = balances[owner].sub(tokens);\n', '\n', '        TokenPurchase(msg.sender, beneficiary, etherAmount, tokens, buyRate);\n', '    }\n', '\n', '    function SellTokens(uint amount)\n', '    OnlyIfSellingAllowed\n', '    {\n', '        require(msg.sender != owner);\n', '        require(msg.sender != 0x0);\n', '        require(amount > 0);\n', '        require(balances[msg.sender] >= amount);\n', '        \n', '        balances[owner] = balances[owner].add(amount);\n', '        balances[msg.sender] = balances[msg.sender].sub(amount);\n', '    \n', '        uint checkAmount = EtherToWei(amount.div(sellRate));\n', '        if (!msg.sender.send(checkAmount))\n', '            revert();\n', '        else\n', '            TokenSold(msg.sender, checkAmount, sellRate);\n', '    }\n', '\n', '    function RetrieveFunds()\n', '    onlyOwner\n', '    {\n', '        owner.transfer(this.balance);\n', '    }\n', '\n', '    function Destroy()\n', '    onlyOwner\n', '    {\n', '        selfdestruct(owner);\n', '    }\n', '    \n', '    function WeiToEther(uint v) internal \n', '    returns (uint)\n', '    {\n', '        require(v > 0);\n', '        return v.div(1000000000000000000);\n', '    }\n', '\n', '    function EtherToWei(uint v) internal\n', '    returns (uint)\n', '    {\n', '      require(v > 0);\n', '      return v.mul(1000000000000000000);\n', '    }\n', '    \n', '    function ToggleFreezeBuying()\n', '    onlyOwner\n', '    { allowBuying = !allowBuying; }\n', '\n', '    function ToggleFreezeSelling()\n', '    onlyOwner\n', '    { allowSelling = !allowSelling; }\n', '\n', '    modifier OnlyIfBuyingAllowed()\n', '    { require(allowBuying); _; }\n', '\n', '    modifier OnlyIfSellingAllowed()\n', '    { require(allowSelling); _; }\n', '\n', '    event OwnerTransfered(address oldOwner, address newOwner);\n', '\n', '    event BuyRateChanged(uint oldRate, uint newRate);\n', '    event SellRateChanged(uint oldRate, uint newRate);\n', '\n', '    event TokenSold(address indexed seller, uint amountInEther, uint sellRate);\n', '\n', '    event TokenPurchase(\n', '    address indexed purchaser, \n', '    address indexed beneficiary, \n', '    uint256 amountInEther, \n', '    uint256 tokens,\n', '    uint buyRate);\n', '}']