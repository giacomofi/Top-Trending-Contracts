['/*\n', ' * VISTA FINTECH  \n', ' * SMART CONTRACT FOR CROWNSALE http://www.vistafin.com\n', ' * Edit by Ray Indinor\n', ' * Approved by Jacky Hsieh\n', ' */\n', '\n', 'pragma solidity ^0.4.11;\n', 'library SafeMath {\n', '\tfunction mul(uint a, uint b) internal returns (uint) {\n', '\t\tuint c = a * b;\n', '\t\tassert(a == 0 || c / a == b);\n', '\t\treturn c;\n', '\t}\n', '\t\n', '\tfunction div(uint a, uint b) internal returns (uint) {\n', '\t\tassert(b > 0);\n', '\t\tuint c = a / b;\n', '\t\tassert(a == b * c + a % b);\n', '\t\treturn c;\n', '\t}\n', '\t\n', '\tfunction sub(uint a, uint b) internal returns (uint) {\n', '\t\tassert(b <= a);\n', '\t\treturn a - b;\n', '\t}\n', '\t\n', '\tfunction add(uint a, uint b) internal returns (uint) {\n', '\t\tuint c = a + b;\n', '\t\tassert(c >= a);\n', '\t\treturn c;\n', '\t}\n', '\t\n', '\tfunction max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '\t\treturn a >= b ? a : b;\n', '\t}\n', '\t\n', '\tfunction min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '\t\treturn a < b ? a : b;\n', '\t}\n', '\t\n', '\tfunction max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '\t\treturn a >= b ? a : b;\n', '\t}\n', '\t\n', '\tfunction min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '\t\treturn a < b ? a : b;\n', '\t}\n', '\t\n', '\tfunction assert(bool assertion) internal {\n', '\t\tif (!assertion) {\n', '\t\t\tthrow;\n', '    }\n', '  }\n', '}\n', '\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    function Ownable() {\n', '        owner = msg.sender;\n', '    }\n', '\t\n', '    modifier onlyOwner {\n', '        if (msg.sender != owner) throw;\n', '        _;\n', '    }\n', '\t\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', '\n', '\n', '/*\n', ' * Pausable Function\n', ' * Abstract contract that allows children to implement an emergency stop function. \n', ' */\n', 'contract Pausable is Ownable {\n', '\tbool public stopped = false;\n', '\tmodifier stopInEmergency {\n', '\t\tif (stopped) {\n', '\t\t\tthrow;\n', '\t\t}\n', '\t\t_;\n', '\t}\n', '  \n', '\tmodifier onlyInEmergency {\n', '\t\tif (!stopped) {\n', '\t\t\tthrow;\n', '\t\t}\n', '\t\t_;\n', '\t}\n', '\t\n', '/*\n', ' * EmergencyStop Function\n', ' * called by the owner on emergency, triggers stopped state \n', ' */\n', 'function emergencyStop() external onlyOwner {\n', '    stopped = true;\n', '\t}\n', '\n', '\t\n', '/*\n', ' * Release EmergencyState Function\n', ' * called by the owner on end of emergency, returns to normal state\n', ' */  \n', '\n', 'function release() external onlyOwner onlyInEmergency {\n', '    stopped = false;\n', '\t}\n', '}\n', '\n', '/*\n', ' * ERC20Basic class\n', ' * Abstract contract that allows children to implement ERC20basic persistent data in state variables.\n', ' */ \t\n', 'contract ERC20Basic {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) constant returns (uint);\n', '  function transfer(address to, uint value);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', '\n', '/*\n', ' * ERC20 class\n', ' * Abstract contract that allows children to implement ERC20 persistent data in state variables.\n', ' */ \n', 'contract ERC20 is ERC20Basic {\n', '\tfunction allowance(address owner, address spender) constant returns (uint);\n', '\tfunction transferFrom(address from, address to, uint value);\n', '\tfunction approve(address spender, uint value);\n', '\tevent Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '\n', '\n', '/*\n', ' * BasicToken class\n', ' * Abstract contract that allows children to implement BasicToken functions and  persistent data in state variables.\n', ' */\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  \n', '\tusing SafeMath for uint;\n', '  \n', '\tmapping(address => uint) balances;\n', '  \n', '\t/*\n', '\t* Fix for the ERC20 short address attack  \n', '\t*/\n', '\tmodifier onlyPayloadSize(uint size) {\n', '\t\tif(msg.data.length < size + 4) {\n', '\t\tthrow;\n', '\t\t}\n', '\t\t_;\n', '\t}\n', '\t\n', '\tfunction transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\n', '\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\tTransfer(msg.sender, _to, _value);\n', '\t}\n', '\t\n', '\tfunction balanceOf(address _owner) constant returns (uint balance) {\n', '\t\treturn balances[_owner];\n', '\t}\n', '}\n', '\n', '\n', '\n', '/*\n', ' * StandardToken class\n', ' * Abstract contract that allows children to implement StandToken functions and  persistent data in state variables.\n', ' */\n', 'contract StandardToken is BasicToken, ERC20 {\n', '\tmapping (address => mapping (address => uint)) allowed;\n', '\tfunction transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // if (_value > _allowance) throw;\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '  }\n', '\tfunction approve(address _spender, uint _value) {\n', '\t\t// To change the approve amount you first have to reduce the addresses`\n', '\t\t//  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '\t\t//  already 0 to mitigate the race condition described here:\n', '\t\t//  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '\t\tif ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n', '\t\tallowed[msg.sender][_spender] = _value;\n', '\t\tApproval(msg.sender, _spender, _value);\n', '\t}\n', '\tfunction allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '\t\treturn allowed[_owner][_spender];\n', '\t}\n', '}\n', '\n', '\n', '\n', '/**\n', ' * ================================================================================\n', ' * VISTA token smart contract. Implements\n', ' * VISTACOIN class\n', ' */\n', 'contract VISTAcoin is StandardToken, Ownable {\n', '\tstring public constant name = "VISTAcoin";\n', '\tstring public constant symbol = "VTA";\n', '\tuint public constant decimals = 0;\n', '\t// Constructor\n', '\tfunction VISTAcoin() {\n', '\t\ttotalSupply = 50000000;\n', '\t\tbalances[msg.sender] = totalSupply; // Send all tokens to owner\n', '\t}\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * Crowdsale Smart Contract for VISTA FINTECH\n', ' * This smart contract collects ETH, and in return emits VISTAcoin tokens to the backers\n', ' */\n', 'contract VISTACrowdSaleP1 is Pausable {\n', '    \n', '    using SafeMath for uint;\n', '    struct Backer {\n', '        uint weiReceived; // Amount of Ether given\n', '        uint coinSent;\n', '    }\n', '\t\n', '    /*\n', '    * Constants\n', '    */\n', '    /* Minimum number of VISTAcoin to sell */\n', '    uint public constant MIN_CAP = 1; // 1 VISTAcoins\n', '    /* Maximum number of VISTAcoin to sell */\n', '    uint public constant MAX_CAP = 5000000; // 5000 VISTAcoins\n', '    /* Minimum amount to invest */\n', '    uint public constant MIN_INVEST_ETHER = 500 finney;\n', '    /* Crowdsale period */\n', '    uint private constant CROWDSALE_PERIOD = 15 days;\n', '    /* Number of VISTAcoins per Ether */\n', '    uint public constant COIN_PER_ETHER = 350; // 1 VISTAcoins/eth\n', '\t\n', '\t\n', '\t\n', '\t\n', '    /*\n', '    * Variables\n', '    */\n', '    /* VISTAcoin contract reference */\n', '    VISTAcoin public coin;\n', '    /* Multisig contract that will receive the Ether */\n', '    address public multisigEther;\n', '    /* Number of Ether received */\n', '    uint public etherReceived;\n', '    /* Number of VISTAcoins sent to Ether contributors */\n', '    uint public coinSentToEther;\n', '    /* Crowdsale start time */\n', '    uint public startTime;\n', '    /* Crowdsale end time */\n', '    uint public endTime;\n', '    /* Is crowdsale still on going */\n', '    bool public crowdsaleClosed = false;\n', '    /* Backers Ether indexed by their Ethereum address */\n', '    mapping(address => Backer) public backers;\n', '\t\n', '\t\n', '\t\n', '\t\n', '    /*\n', '    * Modifiers\n', '    */\n', '    modifier minCapNotReached() {\n', '        if ((now < endTime) || coinSentToEther >= MIN_CAP ) throw;\n', '        _;\n', '    }\n', '    modifier respectTimeFrame() {\n', '        if ((now < startTime) || (now > endTime )) throw;\n', '        _;\n', '    }\n', '\t\n', '\t\n', '    /*\n', '     * Event\n', '    */\n', '    event LogReceivedETH(address addr, uint value);\n', '    event LogCoinsEmited(address indexed from, uint amount);\n', '\t\n', '\t\n', '    /*\n', '     * Constructor\n', '    */\n', '    function VISTACrowdSaleP1(address _VISTAcoinAddress, address _to) {\n', '        coin = VISTAcoin(_VISTAcoinAddress);\n', '        multisigEther = _to;\n', '    }\n', '\t\n', '\t\n', '    /* \n', '     * The fallback function corresponds to a donation in ETH\n', '     */\n', '    function() stopInEmergency respectTimeFrame payable {\n', '        if (crowdsaleClosed) throw; //Crowdsale was closed.\n', '\t\treceiveETH(msg.sender);\n', '    }\n', '\t\n', '\t\n', '    /* \n', '     * To call to start the crowdsale\n', '     */\n', '    function start() onlyOwner {\n', '        if (startTime != 0) throw; // Crowdsale was already started\n', '        startTime = now ;            \n', '        endTime =  now + CROWDSALE_PERIOD;    \n', '    }\n', '\t\n', '\t\n', '    /*\n', '     *  Receives a donation in Ether\n', '    */\n', '    function receiveETH(address beneficiary) internal {\n', "        if (msg.value < MIN_INVEST_ETHER) throw; // Don't accept funding under a predefined threshold        \n", '        uint coinToSend = bonus(msg.value.mul(COIN_PER_ETHER).div(1 ether)); // Compute the number of VISTAcoin to send\n', '        if (coinToSend.add(coinSentToEther) > MAX_CAP) throw;    \n', '        Backer backer = backers[beneficiary];\n', '        coin.transfer(beneficiary, coinToSend); // Transfer VISTAcoins right now\n', '\t\tif (!multisigEther.send(this.balance)) throw; //Transfer ETH to VISTA ECC\t\t\n', '        backer.coinSent = backer.coinSent.add(coinToSend);\n', '        backer.weiReceived = backer.weiReceived.add(msg.value); // Update the total wei collected during the crowdfunding for this backer    \n', '        etherReceived = etherReceived.add(msg.value); // Update the total wei collected during the crowdfunding\n', '        coinSentToEther = coinSentToEther.add(coinToSend);\n', '        // Send events\n', '        LogCoinsEmited(msg.sender ,coinToSend);\n', '        LogReceivedETH(beneficiary, etherReceived); \n', '    }\n', '    \n', '    /*\n', '     *Compute the VISTAcoin BONUS according to the investment period\n', '     */\n', '    function bonus(uint amount) internal constant returns (uint) {\n', '        return amount.add(amount.div(5));   // bonus 20%\n', '    }\n', '\t\n', '\t\n', '\t\n', '\t\n', '    /*  \n', '     * FINALIZE the crowdsale, should be called after ico period\n', '    */\n', '    function finalize() onlyOwner public {\n', '        if (now < endTime) { // Cannot finalise before CROWDSALE_PERIOD or before selling all coins\n', '            if (coinSentToEther == MAX_CAP) {\n', '            } else {\n', '                throw;\n', '            }\n', '        }\n', '        if (!multisigEther.send(this.balance)) throw; // Move the remaining Ether to the multisig address\n', '\t\tgetRemainCoins();\n', '        crowdsaleClosed = true;\n', '    }\n', '\t\n', '\t\n', '    /*  \n', '    * Failsafe drain\n', '    */\n', '    function drain() onlyOwner {\n', '        if (!owner.send(this.balance)) throw;\n', '    }\n', '\t\n', '\t\n', '    /**\n', '     * Allow to change the team multisig address in the case of emergency.\n', '     */\n', '    function setMultisig(address addr) onlyOwner public {\n', '        if (addr == address(0)) throw;\n', '        multisigEther = addr;\n', '    }\n', '\t\n', '\t\n', '    /**\n', '     * Manually back VISTAcoin owner address.\n', '     */\n', '    function backVISTAcoinOwner() onlyOwner public {\n', '        coin.transferOwnership(owner);\n', '    }\n', '\t\n', '\t\n', '    /**\n', '     * Get reamin coins back to owner\n', '     */\n', '    function getRemainCoins() onlyOwner public {\n', '        var remains = MAX_CAP - coinSentToEther;\n', '        Backer backer = backers[owner];\n', '        coin.transfer(owner, remains); // Transfer VISTAcoins right now \n', '        backer.coinSent = backer.coinSent.add(remains);\n', '        coinSentToEther = coinSentToEther.add(remains);\n', '        // Send events\n', '        LogCoinsEmited(this ,remains);\n', '        LogReceivedETH(owner, etherReceived); \n', '    }\n', '}']