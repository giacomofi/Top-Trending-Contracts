['pragma solidity ^0.4.15;\n', '\n', '// Abstract contract for the full ERC 20 Token standard\n', '// https://github.com/ethereum/EIPs/issues/20\n', 'contract ERC20 {\n', '  // Get the total token supply\n', '  /// @return Total amount of tokens\n', '  function totalSupply() constant returns (uint256);\n', '\n', '  // Get the account balance of another account with address _owner\n', '  /// @param _owner The address from which the balance will be retrieved\n', '  /// @return The balance\n', '  function balanceOf(address _owner) constant returns (uint256);\n', '\n', '  // Send _value amount of tokens to address _to\n', '  /// @notice send `_value` token to `_to` from `msg.sender`\n', '  /// @param _to The address of the recipient\n', '  /// @param _value The amount of token to be transferred\n', '  /// @return Whether the transfer was successful or not\n', '  function transfer(address _to, uint256 _value) returns (bool);\n', '\n', '  // Send _value amount of tokens from address _from to address\n', '  /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '  /// @param _from The address of the sender\n', '  /// @param _to The address of the recipient\n', '  /// @param _value The amount of token to be transferred\n', '  /// @return Whether the transfer was successful or not\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool);\n', '\n', '  // Allow _spender to withdraw from your account, multiple times, up to the\n', '  // _value amount. If this function is called again it overwrites the current\n', '  // allowance with _value.\n', '  /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '  /// @param _spender The address of the account able to transfer the tokens\n', '  /// @param _value The amount of tokens to be approved for transfer\n', '  /// @return Whether the approval was successful or not\n', '  function approve(address _spender, uint256 _value) returns (bool);\n', '\n', '  // Returns the amount which _spender is still allowed to withdraw from _owner\n', '  /// @param _owner The address of the account owning tokens\n', '  /// @param _spender The address of the account able to transfer the tokens\n', '  /// @return Amount of remaining tokens allowed to spent\n', '  function allowance(address _owner, address _spender) constant returns (uint256);\n', '\n', '  // Triggered when tokens are transferred.\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '  // Triggered whenever approve(address _spender, uint256 _value) is called.\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '/**\n', ' * Owned\n', ' *\n', ' * Base contract with an owner.\n', ' * Provides onlyOwner modifier, which prevents the function from running if\n', ' * it is called by anyone other than the owner.\n', ' **/\n', 'contract Owned {\n', '  address public owner;\n', '\n', '  function Owned() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function changeOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', 'contract Token is ERC20 {\n', '  function () {\n', '    // if ether is sent to this address, send it back.\n', '    require(false);\n', '  }\n', '\n', '  // Balances for each account\n', '  mapping(address => uint256) balances;\n', '\n', '  // Owner of account approves the transfer of an amount to another account\n', '  mapping(address => mapping (address => uint256)) allowed;\n', '\n', '  // The total token supply\n', '  uint256 internal _totalSupply;\n', '\n', '  // Get the total token supply\n', '  /// @return Total amount of tokens\n', '  function totalSupply() constant returns (uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  // Get the account balance of another account with address _owner\n', '  /// @param _owner The address from which the balance will be retrieved\n', '  /// @return The balance\n', '  function balanceOf(address _owner) constant returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  // Send _value amount of tokens to address _to\n', '  /// @notice send `_value` token to `_to` from `msg.sender`\n', '  /// @param _to The address of the recipient\n', '  /// @param _value The amount of token to be transferred\n', '  /// @return Whether the transfer was successful or not\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    require(balances[msg.sender] >= _value);\n', '    require(_value > 0);\n', '    require(balances[_to] + _value > balances[_to]);\n', '\n', '    balances[msg.sender] -= _value;\n', '    balances[_to]        += _value;\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  // Send _value amount of tokens from address _from to address\n', '  /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '  /// @param _from The address of the sender\n', '  /// @param _to The address of the recipient\n', '  /// @param _value The amount of token to be transferred\n', '  /// @return Whether the transfer was successful or not\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    require(balances[_from] >= _value);\n', '    require(_value > 0);\n', '    require(allowed[_from][msg.sender] >= _value);\n', '    require(balances[_to] + _value > balances[_to]);\n', '\n', '    balances[_from] -= _value;\n', '    balances[_to]   += _value;\n', '    allowed[_from][msg.sender] -= _value;\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  // Allow _spender to withdraw from your account, multiple times, up to the\n', '  // _value amount. If this function is called again it overwrites the current\n', '  // allowance with _value.\n', '  /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '  /// @param _spender The address of the account able to transfer the tokens\n', '  /// @param _value The amount of tokens to be approved for transfer\n', '  /// @return Whether the approval was successful or not\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  // Returns the amount which _spender is still allowed to withdraw from _owner\n', '  /// @param _owner The address of the account owning tokens\n', '  /// @param _spender The address of the account able to transfer the tokens\n', '  /// @return Amount of remaining tokens allowed to spent\n', '  function allowance(address _owner, address _spender) constant returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '}\n', '\n', 'contract Gambit is Token, Owned {\n', '  string public constant name     = &#39;Gambit&#39;;\n', '  uint8  public constant decimals = 8;\n', '  string public constant symbol   = &#39;GAM&#39;;\n', '  string public constant version  = &#39;1.0.0&#39;;\n', '  uint256 internal _totalBurnt    = 0;\n', '\n', '  // Constructor\n', '  function Gambit() {\n', '    _totalSupply = 260000000000000;\n', '    balances[owner] = _totalSupply;\n', '  }\n', '\n', '  // Get the total of token burnt\n', '  /// @return Total amount of burned tokens\n', '  function totalBurnt() constant returns (uint256) {\n', '    return _totalBurnt;\n', '  }\n', '\n', '  // Only the Owner of the contract can burn tokens.\n', '  /// @param _value The amount of token to be burned\n', '  /// @return Whether the burning was successful or not\n', '  function burn(uint256 _value) onlyOwner returns (bool) {\n', '    require(balances[msg.sender] >= _value);\n', '    require(_value > 0);\n', '\n', '    balances[msg.sender] -= _value;\n', '    _totalSupply         -= _value;\n', '    _totalBurnt          += _value;\n', '    Transfer(msg.sender, 0x0, _value);\n', '    return true;\n', '  }\n', '}']
['pragma solidity ^0.4.15;\n', '\n', '// Abstract contract for the full ERC 20 Token standard\n', '// https://github.com/ethereum/EIPs/issues/20\n', 'contract ERC20 {\n', '  // Get the total token supply\n', '  /// @return Total amount of tokens\n', '  function totalSupply() constant returns (uint256);\n', '\n', '  // Get the account balance of another account with address _owner\n', '  /// @param _owner The address from which the balance will be retrieved\n', '  /// @return The balance\n', '  function balanceOf(address _owner) constant returns (uint256);\n', '\n', '  // Send _value amount of tokens to address _to\n', '  /// @notice send `_value` token to `_to` from `msg.sender`\n', '  /// @param _to The address of the recipient\n', '  /// @param _value The amount of token to be transferred\n', '  /// @return Whether the transfer was successful or not\n', '  function transfer(address _to, uint256 _value) returns (bool);\n', '\n', '  // Send _value amount of tokens from address _from to address\n', '  /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '  /// @param _from The address of the sender\n', '  /// @param _to The address of the recipient\n', '  /// @param _value The amount of token to be transferred\n', '  /// @return Whether the transfer was successful or not\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool);\n', '\n', '  // Allow _spender to withdraw from your account, multiple times, up to the\n', '  // _value amount. If this function is called again it overwrites the current\n', '  // allowance with _value.\n', '  /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '  /// @param _spender The address of the account able to transfer the tokens\n', '  /// @param _value The amount of tokens to be approved for transfer\n', '  /// @return Whether the approval was successful or not\n', '  function approve(address _spender, uint256 _value) returns (bool);\n', '\n', '  // Returns the amount which _spender is still allowed to withdraw from _owner\n', '  /// @param _owner The address of the account owning tokens\n', '  /// @param _spender The address of the account able to transfer the tokens\n', '  /// @return Amount of remaining tokens allowed to spent\n', '  function allowance(address _owner, address _spender) constant returns (uint256);\n', '\n', '  // Triggered when tokens are transferred.\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '  // Triggered whenever approve(address _spender, uint256 _value) is called.\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '/**\n', ' * Owned\n', ' *\n', ' * Base contract with an owner.\n', ' * Provides onlyOwner modifier, which prevents the function from running if\n', ' * it is called by anyone other than the owner.\n', ' **/\n', 'contract Owned {\n', '  address public owner;\n', '\n', '  function Owned() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function changeOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', 'contract Token is ERC20 {\n', '  function () {\n', '    // if ether is sent to this address, send it back.\n', '    require(false);\n', '  }\n', '\n', '  // Balances for each account\n', '  mapping(address => uint256) balances;\n', '\n', '  // Owner of account approves the transfer of an amount to another account\n', '  mapping(address => mapping (address => uint256)) allowed;\n', '\n', '  // The total token supply\n', '  uint256 internal _totalSupply;\n', '\n', '  // Get the total token supply\n', '  /// @return Total amount of tokens\n', '  function totalSupply() constant returns (uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  // Get the account balance of another account with address _owner\n', '  /// @param _owner The address from which the balance will be retrieved\n', '  /// @return The balance\n', '  function balanceOf(address _owner) constant returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  // Send _value amount of tokens to address _to\n', '  /// @notice send `_value` token to `_to` from `msg.sender`\n', '  /// @param _to The address of the recipient\n', '  /// @param _value The amount of token to be transferred\n', '  /// @return Whether the transfer was successful or not\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    require(balances[msg.sender] >= _value);\n', '    require(_value > 0);\n', '    require(balances[_to] + _value > balances[_to]);\n', '\n', '    balances[msg.sender] -= _value;\n', '    balances[_to]        += _value;\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  // Send _value amount of tokens from address _from to address\n', '  /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '  /// @param _from The address of the sender\n', '  /// @param _to The address of the recipient\n', '  /// @param _value The amount of token to be transferred\n', '  /// @return Whether the transfer was successful or not\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    require(balances[_from] >= _value);\n', '    require(_value > 0);\n', '    require(allowed[_from][msg.sender] >= _value);\n', '    require(balances[_to] + _value > balances[_to]);\n', '\n', '    balances[_from] -= _value;\n', '    balances[_to]   += _value;\n', '    allowed[_from][msg.sender] -= _value;\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  // Allow _spender to withdraw from your account, multiple times, up to the\n', '  // _value amount. If this function is called again it overwrites the current\n', '  // allowance with _value.\n', '  /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '  /// @param _spender The address of the account able to transfer the tokens\n', '  /// @param _value The amount of tokens to be approved for transfer\n', '  /// @return Whether the approval was successful or not\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  // Returns the amount which _spender is still allowed to withdraw from _owner\n', '  /// @param _owner The address of the account owning tokens\n', '  /// @param _spender The address of the account able to transfer the tokens\n', '  /// @return Amount of remaining tokens allowed to spent\n', '  function allowance(address _owner, address _spender) constant returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '}\n', '\n', 'contract Gambit is Token, Owned {\n', "  string public constant name     = 'Gambit';\n", '  uint8  public constant decimals = 8;\n', "  string public constant symbol   = 'GAM';\n", "  string public constant version  = '1.0.0';\n", '  uint256 internal _totalBurnt    = 0;\n', '\n', '  // Constructor\n', '  function Gambit() {\n', '    _totalSupply = 260000000000000;\n', '    balances[owner] = _totalSupply;\n', '  }\n', '\n', '  // Get the total of token burnt\n', '  /// @return Total amount of burned tokens\n', '  function totalBurnt() constant returns (uint256) {\n', '    return _totalBurnt;\n', '  }\n', '\n', '  // Only the Owner of the contract can burn tokens.\n', '  /// @param _value The amount of token to be burned\n', '  /// @return Whether the burning was successful or not\n', '  function burn(uint256 _value) onlyOwner returns (bool) {\n', '    require(balances[msg.sender] >= _value);\n', '    require(_value > 0);\n', '\n', '    balances[msg.sender] -= _value;\n', '    _totalSupply         -= _value;\n', '    _totalBurnt          += _value;\n', '    Transfer(msg.sender, 0x0, _value);\n', '    return true;\n', '  }\n', '}']
