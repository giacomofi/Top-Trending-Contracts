['pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20Basic {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) constant returns (uint);\n', '  function transfer(address to, uint value);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '  \n', '  /**\n', '   * Based on http://www.codecodex.com/wiki/Calculate_an_integer_square_root\n', '   */\n', '  function sqrt(uint num) internal returns (uint) {\n', '    if (0 == num) { // Avoid zero divide \n', '      return 0; \n', '    }   \n', '    uint n = (num / 2) + 1;      // Initial estimate, never low  \n', '    uint n1 = (n + (num / n)) / 2;  \n', '    while (n1 < n) {  \n', '      n = n1;  \n', '      n1 = (n + (num / n)) / 2;  \n', '    }  \n', '    return n;  \n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      throw;\n', '    }\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint;\n', '\n', '  mapping(address => uint) balances;\n', '\n', '  /**\n', '   * @dev Fix for the ERC20 short address attack.\n', '   */\n', '  modifier onlyPayloadSize(uint size) {\n', '     if(msg.data.length < size + 4) {\n', '       throw;\n', '     }\n', '     _;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint);\n', '  function transferFrom(address from, address to, uint value);\n', '  function approve(address spender, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implemantation of the basic standart token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is BasicToken, ERC20 {\n', '\n', '  mapping (address => mapping (address => uint)) allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // if (_value > _allowance) throw;\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint _value) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens than an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Crypto Masters Token\n', ' * \n', ' */\n', 'contract CryptoMastersToken is StandardToken {\n', '    // metadata\n', '    string public constant name = "Crypto Masters Token";\n', '    string public constant symbol = "CMT";\n', '    uint public constant decimals = 0;\n', '    // crowdsale parameters\n', '    uint public constant tokenCreationMin = 1000000;\n', '    uint public constant tokenPriceMin = 0.0004 ether;\n', '    // contructor parameters\n', '    address public owner1;\n', '    address public owner2;\n', '    // contract state\n', '    uint public EthersRaised = 0;\n', '    bool public isHalted = false;\n', '    // events\n', '    event LogBuy(address indexed who, uint tokens, uint EthersValue, uint supplyAfter);  \n', '    /**\n', '     * @dev Throws if called by any account other than one of the owners. \n', '     */\n', '    modifier onlyOwner() {\n', '      if (msg.sender != owner1 && msg.sender != owner2) {\n', '        throw;\n', '      }\n', '      _;\n', '    }\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner1 The address to transfer ownership to.\n', '    */\n', '    function transferOwnership1(address newOwner1) onlyOwner {\n', '     require(newOwner1 != address(0));      \n', '     owner1 = newOwner1;\n', '    }\n', '    function transferOwnership2(address newOwner2) onlyOwner {\n', '      require(newOwner2 != address(0));      \n', '      owner2 = newOwner2;\n', '    } \n', '    // constructor\n', '    function CryptoMastersToken() {\n', '        owner1 = msg.sender;\n', '        owner2 = msg.sender;\n', '    }\n', '    /**\n', '     * @dev Calculates how many tokens one can buy for specified value\n', '     * @return Amount of tokens one will receive and purchase value without remainder. \n', '     */\n', '    function getBuyPrice(uint _bidValue) constant returns (uint tokenCount, uint purchaseValue) {\n', '\n', '        // Token price formula is twofold. We have flat pricing below tokenCreationMin, \n', '        // and above that price linarly increases with supply. \n', '\n', '        uint flatTokenCount;\n', '        uint startSupply;\n', '        uint linearBidValue;\n', '        \n', '        if(totalSupply < tokenCreationMin) {\n', '            uint maxFlatTokenCount = _bidValue.div(tokenPriceMin);\n', '            // entire purchase in flat pricing\n', '            if(totalSupply.add(maxFlatTokenCount) <= tokenCreationMin) {\n', '                return (maxFlatTokenCount, maxFlatTokenCount.mul(tokenPriceMin));\n', '            }\n', '            flatTokenCount = tokenCreationMin.sub(totalSupply);\n', '            linearBidValue = _bidValue.sub(flatTokenCount.mul(tokenPriceMin));\n', '            startSupply = tokenCreationMin;\n', '        } else {\n', '            flatTokenCount = 0;\n', '            linearBidValue = _bidValue;\n', '            startSupply = totalSupply;\n', '        }\n', '        \n', '        // Solves quadratic equation to calculate maximum token count that can be purchased\n', '        uint currentPrice = tokenPriceMin.mul(startSupply).div(tokenCreationMin);\n', '        uint delta = (2 * startSupply).mul(2 * startSupply).add(linearBidValue.mul(4 * 1 * 2 * startSupply).div(currentPrice));\n', '\n', '        uint linearTokenCount = delta.sqrt().sub(2 * startSupply).div(2);\n', '        uint linearAvgPrice = currentPrice.add((startSupply+linearTokenCount+1).mul(tokenPriceMin).div(tokenCreationMin)).div(2);\n', '        \n', '        // double check to eliminate rounding errors\n', '        linearTokenCount = linearBidValue / linearAvgPrice;\n', '        linearAvgPrice = currentPrice.add((startSupply+linearTokenCount+1).mul(tokenPriceMin).div(tokenCreationMin)).div(2);\n', '        \n', '        purchaseValue = linearTokenCount.mul(linearAvgPrice).add(flatTokenCount.mul(tokenPriceMin));\n', '        return (\n', '            flatTokenCount + linearTokenCount,\n', '            purchaseValue\n', '        );\n', '     }\n', '    \n', '    /**\n', '     * Default function called by sending Ether to this address with no arguments.\n', '     * \n', '     */\n', '    function() payable {\n', '        BuyLimit(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n', '    }\n', '    \n', '    /**\n', '     * @dev Buy tokens\n', '     */\n', '    function Buy() payable external {\n', '        BuyLimit(0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);    \n', '    }\n', '    \n', '    /**\n', '     * @dev Buy tokens with limit maximum average price\n', '     * @param _maxPrice Maximum price user want to pay for one token\n', '     */\n', '    function BuyLimit(uint _maxPrice) payable public {\n', '        require(msg.value >= tokenPriceMin);\n', '        assert(!isHalted);\n', '        \n', '        uint boughtTokens;\n', '        uint averagePrice;\n', '        uint purchaseValue;\n', '        \n', '        (boughtTokens, purchaseValue) = getBuyPrice(msg.value);\n', '        if(boughtTokens == 0) { \n', '            // bid to small, return ether and abort\n', '            msg.sender.transfer(msg.value);\n', '            return; \n', '        }\n', '        averagePrice = purchaseValue.div(boughtTokens);\n', '        if(averagePrice > _maxPrice) { \n', '            // price too high, return ether and abort\n', '            msg.sender.transfer(msg.value);\n', '            return; \n', '        }\n', '        assert(averagePrice >= tokenPriceMin);\n', '        assert(purchaseValue <= msg.value);\n', '        \n', '        totalSupply = totalSupply.add(boughtTokens);\n', '        balances[msg.sender] = balances[msg.sender].add(boughtTokens);\n', '      \n', '        LogBuy(msg.sender, boughtTokens, purchaseValue.div(1000000000000000000), totalSupply);\n', '        \n', '        if(msg.value > purchaseValue) {\n', '            msg.sender.transfer(msg.value.sub(purchaseValue));\n', '        }\n', '            \n', '        EthersRaised += purchaseValue.div(1000000000000000000);\n', '        \n', '    }\n', '    /**\n', '     * @dev Withdraw funds to owners.\n', '     */\n', '    function withdrawAllFunds() external onlyOwner { \n', '        msg.sender.transfer(this.balance);\n', '    }\n', '    function withdrawFunds(uint _amount) external onlyOwner { \n', '        require(_amount <= this.balance);\n', '        msg.sender.transfer(_amount);\n', '    }\n', '    \n', '   \n', '    /**\n', '     * \n', '     * @dev When contract is halted no one can buy new tokens.\n', '     * \n', '     */\n', '    function haltCrowdsale() external onlyOwner {\n', '        isHalted = !isHalted;\n', '    }\n', '}']