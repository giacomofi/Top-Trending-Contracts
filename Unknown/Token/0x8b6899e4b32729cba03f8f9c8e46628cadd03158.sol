['pragma solidity ^0.4.2;\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        owner = newOwner;\n', '        if (newOwner != address(0)) {\n', '          owner = newOwner;\n', '        }\n', '    }\n', '}\n', 'contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\n', '\n', '\n', 'contract RedTicket is owned {\n', '    string public standard = &#39;RedTicket 1.0&#39;;\n', '    string public constant name = "RedTicket";\n', '    string public constant symbol = "RED";\n', '    uint8 public constant decimals = 18; \n', '    uint256 public totalSupply;\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '    event Burn(address indexed from, uint256 value);\n', '    event FrozenFunds(address target, bool frozen);\n', '    event Issuance(address indexed to, uint256 value);\n', '\n', '    function RedTicket(\n', '        uint256 initialSupply,\n', '        address centralMinter\n', '        ) {\n', '        if(centralMinter != 0 ) owner = centralMinter;\n', '\n', '        balances[msg.sender] = initialSupply;\n', '        totalSupply = initialSupply;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        if (balances[msg.sender] >= _value \n', '            && _value > 0\n', '            && balances[_to] + _value > balances[_to]) {\n', '                \n', '                balances[msg.sender] -= _value;\n', '                balances[_to] += _value;\n', '                Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (!frozenAccount[msg.sender]\n', '            && balances[_from] >= _value\n', '            && allowed[_from][msg.sender] >= _value\n', '            && _value > 0\n', '            && balances[_to] + _value > balances[_to]) {\n', '\n', '                balances[_from] -= _value;\n', '                allowed[_from][msg.sender] -= _value;\n', '                balances[_to] += _value;\n', '                Transfer(_from, _to, _value);\n', '            return true;\n', '\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    function freezeAccount(address target, bool freeze) onlyOwner {\n', '        frozenAccount[target] = freeze;\n', '        FrozenFunds(target, freeze);\n', '    }\n', '\n', '    function () {\n', '        revert();\n', '    }\n', '\n', '    function burn(uint256 _value) returns (bool success) {\n', '        if (balances[msg.sender] < _value) return false; \n', '        balances[msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _value) returns (bool success) {\n', '        if (balances[_from] < _value) return false;\n', '        if (_value > allowed[_from][msg.sender]) return false;\n', '        balances[_from] -= _value;\n', '        totalSupply -= _value;\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '\n', '    function mintToken(address target, uint256 mintedAmount) onlyOwner {\n', '        balances[target] += mintedAmount;\n', '        totalSupply += mintedAmount;\n', '        Transfer(0, owner, mintedAmount);\n', '        Transfer(owner, target, mintedAmount);\n', '    }\n', '}']
['pragma solidity ^0.4.2;\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        owner = newOwner;\n', '        if (newOwner != address(0)) {\n', '          owner = newOwner;\n', '        }\n', '    }\n', '}\n', 'contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\n', '\n', '\n', 'contract RedTicket is owned {\n', "    string public standard = 'RedTicket 1.0';\n", '    string public constant name = "RedTicket";\n', '    string public constant symbol = "RED";\n', '    uint8 public constant decimals = 18; \n', '    uint256 public totalSupply;\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '    event Burn(address indexed from, uint256 value);\n', '    event FrozenFunds(address target, bool frozen);\n', '    event Issuance(address indexed to, uint256 value);\n', '\n', '    function RedTicket(\n', '        uint256 initialSupply,\n', '        address centralMinter\n', '        ) {\n', '        if(centralMinter != 0 ) owner = centralMinter;\n', '\n', '        balances[msg.sender] = initialSupply;\n', '        totalSupply = initialSupply;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        if (balances[msg.sender] >= _value \n', '            && _value > 0\n', '            && balances[_to] + _value > balances[_to]) {\n', '                \n', '                balances[msg.sender] -= _value;\n', '                balances[_to] += _value;\n', '                Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (!frozenAccount[msg.sender]\n', '            && balances[_from] >= _value\n', '            && allowed[_from][msg.sender] >= _value\n', '            && _value > 0\n', '            && balances[_to] + _value > balances[_to]) {\n', '\n', '                balances[_from] -= _value;\n', '                allowed[_from][msg.sender] -= _value;\n', '                balances[_to] += _value;\n', '                Transfer(_from, _to, _value);\n', '            return true;\n', '\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    function freezeAccount(address target, bool freeze) onlyOwner {\n', '        frozenAccount[target] = freeze;\n', '        FrozenFunds(target, freeze);\n', '    }\n', '\n', '    function () {\n', '        revert();\n', '    }\n', '\n', '    function burn(uint256 _value) returns (bool success) {\n', '        if (balances[msg.sender] < _value) return false; \n', '        balances[msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _value) returns (bool success) {\n', '        if (balances[_from] < _value) return false;\n', '        if (_value > allowed[_from][msg.sender]) return false;\n', '        balances[_from] -= _value;\n', '        totalSupply -= _value;\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '\n', '    function mintToken(address target, uint256 mintedAmount) onlyOwner {\n', '        balances[target] += mintedAmount;\n', '        totalSupply += mintedAmount;\n', '        Transfer(0, owner, mintedAmount);\n', '        Transfer(owner, target, mintedAmount);\n', '    }\n', '}']
