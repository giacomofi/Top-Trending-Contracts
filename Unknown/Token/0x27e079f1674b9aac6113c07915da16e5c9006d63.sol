['contract Westy_Coin {\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '    uint public nextMint;\n', '\n', '    address public treasurer;\n', '    address public entrepreneur;\n', '    uint public secondsBetweenMints;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event TotalSupply(uint oldAmount, uint newAmount, address mintAddress);\n', '    event NextMint(uint nextMint);\n', '\n', '    function WestCoin() {\n', '        address brotherhoodAddress = 0xd7c5009bc884e39748f2326fdc35bc4e0e7f7428;\n', '        address treasurerAddress =  0x0Bc0477dB950Eae9C8024EFbbf1D35C4C23Dd96B;\n', '        \n', '        uint256 brotherhoodSupply = 30000000;\n', '        uint256 treasurySupply = 30000000;\n', '        uint256 venerationSupply = 3000000;\n', '        \n', '        var tokenName = "Sample28";\n', '        var decimalUnits = 18;\n', '        var tokenSymbol = "SMP";\n', '        secondsBetweenMints = 1200;//63072000;\n', '        \n', '        name = tokenName;\n', '        symbol = tokenSymbol;\n', '        decimals = decimalUnits;\n', '        totalSupply = 0;\n', '        treasurer = treasurerAddress;\n', '        entrepreneur = msg.sender;\n', '        nextMint = block.timestamp + secondsBetweenMints;\n', '        \n', '        var newSupply = totalSupply + brotherhoodSupply;\n', '        TotalSupply(totalSupply, newSupply, brotherhoodAddress);\n', '        totalSupply = newSupply;\n', '        balanceOf[brotherhoodAddress] = brotherhoodSupply;\n', '        Transfer(0, brotherhoodAddress, brotherhoodSupply);\n', '        \n', '        newSupply = totalSupply + treasurySupply;\n', '        TotalSupply(totalSupply, newSupply, treasurerAddress);\n', '        totalSupply = newSupply;\n', '        balanceOf[treasurerAddress] = treasurySupply;\n', '        Transfer(0, treasurerAddress, treasurySupply);\n', '        \n', '        newSupply = totalSupply + venerationSupply;\n', '        TotalSupply(totalSupply, newSupply, msg.sender);\n', '        totalSupply = newSupply;\n', '        balanceOf[msg.sender] = venerationSupply;\n', '        Transfer(0, msg.sender, venerationSupply);\n', '        \n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) {\n', '        \n', '        if (balanceOf[msg.sender] < _value){\n', '          revert();  \n', '        } \n', '        \n', '        if (balanceOf[_to] + _value < balanceOf[_to]){\n', '          revert();  \n', '        } \n', '        \n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '    }\n', '    \n', '    function mintToken(uint256 mintedAmount) {\n', '        \n', '        if(msg.sender != treasurer){\n', '            revert();            \n', '        }\n', '        \n', '        if(block.timestamp < nextMint){\n', '            revert();\n', '        }\n', '        \n', '        nextMint = block.timestamp + secondsBetweenMints;\n', '        \n', '        var newSupply = totalSupply + mintedAmount;\n', '        TotalSupply(totalSupply, newSupply, treasurer);\n', '        totalSupply = newSupply;\n', '        balanceOf[treasurer] += mintedAmount;\n', '        Transfer(0, treasurer, mintedAmount);\n', '        \n', '        var venerationMint = mintedAmount / 20;\n', '        newSupply = totalSupply + venerationMint;\n', '        TotalSupply(totalSupply, newSupply, msg.sender);\n', '        totalSupply = newSupply;\n', '        balanceOf[entrepreneur] = venerationMint;\n', '        Transfer(0, entrepreneur, venerationMint);\n', '        \n', '    }\n', '    \n', '    function transferTreasury(address newTreasurer){\n', '\n', '        if(msg.sender != treasurer){\n', '            revert();\n', '        }\n', '        \n', '        var balance = balanceOf[treasurer];\n', '        balanceOf[newTreasurer] = balance;\n', '        balanceOf[treasurer] = 0;\n', '        Transfer(treasurer, newTreasurer, balance);\n', '        \n', '        treasurer = newTreasurer;\n', '    }\n', '   \n', '    function treasuryBalance() returns (uint256){\n', '        return balanceOf[treasurer];\n', '    }\n', '}']