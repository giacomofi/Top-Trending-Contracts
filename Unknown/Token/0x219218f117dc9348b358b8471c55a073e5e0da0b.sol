['pragma solidity ^0.4.13;\n', 'contract owned {\n', '    address public owner;\n', '    mapping (address =>  bool) public admins;\n', '\n', '    function owned() {\n', '        owner = msg.sender;\n', '        admins[msg.sender]=true;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAdmin   {\n', '        require(admins[msg.sender] == true);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '    function makeAdmin(address newAdmin, bool isAdmin) onlyOwner {\n', '        admins[newAdmin] = isAdmin;\n', '    }\n', '}\n', '\n', 'interface tokenRecipient {\n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData);\n', '}\n', '\n', 'contract GRX is owned {\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '    uint256 minBalanceForAccounts;\n', '    bool public usersCanTrade;\n', '    bool public usersCanUnfreeze;\n', '\n', '    bool public ico = true; //turn ico on and of\n', '    mapping (address => bool) public admin;\n', '\n', '\n', '    modifier notICO {\n', '        require(admin[msg.sender] || !ico);\n', '        _;\n', '    }\n', '\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    mapping (address =>  bool) public frozen;\n', '\n', '    mapping (address =>  bool) public canTrade; //user allowed to buy or sell\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    //This generates a public even on the blockhcain when an address is reward\n', '    event Reward(address from, address to, uint256 value, string data, uint256 time);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Frozen(address indexed addr, bool frozen);\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Unlock(address indexed addr, address from, uint256 val);\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    // event Unfreeze(address indexed addr);\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    function GRX() {\n', '        uint256 initialSupply = 20000000000000000000000000;\n', '        balanceOf[msg.sender] = initialSupply ;              // Give the creator all initial tokens\n', '        totalSupply = initialSupply;                        // Update total supply\n', '        name = "Gold Reward Token";                                   // Set the name for display purposes\n', '        symbol = "GRX";                               // Set the symbol for display purposes\n', '        decimals = 18;                            // Amount of decimals for display purposes\n', '        minBalanceForAccounts = 1000000000000000;\n', '        usersCanTrade=false;\n', '        usersCanUnfreeze=false;\n', '        admin[msg.sender]=true;\n', '        canTrade[msg.sender]=true;\n', '\n', '    }\n', '\n', '    /**\n', '     * Increace Total Supply\n', '     *\n', '     * Increases the total coin supply\n', '     */\n', '    function increaseTotalSupply (address target,  uint256 increaseBy )  onlyOwner {\n', '        balanceOf[target] += increaseBy;\n', '        totalSupply += increaseBy;\n', '        Transfer(0, owner, increaseBy);\n', '        Transfer(owner, target, increaseBy);\n', '    }\n', '\n', '    function  usersCanUnFreeze(bool can) {\n', '        usersCanUnfreeze=can;\n', '    }\n', '\n', '    function setMinBalance(uint minimumBalanceInWei) onlyOwner {\n', '        minBalanceForAccounts = minimumBalanceInWei;\n', '    }\n', '\n', '    /**\n', '     * transferAndFreeze\n', '     *\n', '     * Function to transfer to and freeze and account at the same time\n', '     */\n', '    function transferAndFreeze (address target,  uint256 amount )  onlyAdmin {\n', '        _transfer(msg.sender, target, amount);\n', '        freeze(target, true);\n', '    }\n', '\n', '    /**\n', '     * _freeze internal\n', '     *\n', '     * function to freeze an account\n', '     */\n', '    function _freeze (address target, bool froze )  internal  {\n', '\n', '        frozen[target]=froze;\n', '        Frozen(target, froze);\n', '    }\n', '\n', '\n', '\n', '    /**\n', '     * freeze\n', '     *\n', '     * function to freeze an account\n', '     */\n', '    function freeze (address target, bool froze )   {\n', '        if(froze || (!froze && !usersCanUnfreeze)) {\n', '            require(admin[msg.sender]);\n', '        }\n', '\n', '        _freeze(target, froze);\n', '    }\n', '\n', '\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != 0x0);                                   // Prevent transfer to 0x0 address. Use burn() instead\n', '\n', '        require(!frozen[_from]);                       //prevent transfer from frozen address\n', '        require(balanceOf[_from] >= _value);                // Check if the sender has enough\n', '        require(balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\n', '        balanceOf[_from] -= _value;                         // Subtract from the sender\n', '        balanceOf[_to] += _value;                           // Add the same to the recipient\n', '        Transfer(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) notICO {\n', '        require(!frozen[msg.sender]);                       //prevent transfer from frozen address\n', '        if (msg.sender.balance  < minBalanceForAccounts) {\n', '            sell((minBalanceForAccounts - msg.sender.balance) * sellPrice);\n', '        }\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '\n', '\n', '    mapping (address => uint256) public totalLockedRewardsOf;\n', '    mapping (address => mapping (address => uint256)) public lockedRewardsOf; //balance of a locked reward\n', '    mapping (address => mapping (uint32  => address)) public userRewarders; //indexed list of rewardees rewarder\n', '    mapping (address => mapping (address => uint32)) public userRewardCount; //a list of number of times a customer has received reward from a given merchant\n', '    mapping (address => uint32) public userRewarderCount; //number of rewarders per customer\n', '\n', '    //merchant\n', '    mapping (address =>  uint256  ) public totalRewardIssuedOut;\n', '\n', '    /**\n', '     * Reward tokens - tokens go to\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function reward(address _to, uint256 _value, bool locked, string data) {\n', '        require(_to != 0x0);\n', '        require(!frozen[msg.sender]);                       //prevent transfer from frozen address\n', '        if (msg.sender.balance  < minBalanceForAccounts) {\n', '            sell((minBalanceForAccounts - msg.sender.balance) * sellPrice);\n', '        }\n', '        if(!locked) {\n', '            _transfer(msg.sender, _to, _value);\n', '        }else{\n', '            //prevent transfer from frozen address\n', '            require(balanceOf[msg.sender] >= _value);                // Check if the sender has enough\n', '            require(totalLockedRewardsOf[_to] + _value > totalLockedRewardsOf[_to]); // Check for overflows\n', '            balanceOf[msg.sender] -= _value;                         // Subtract from the sender\n', '            totalLockedRewardsOf[_to] += _value;                           // Add the same to the recipient\n', '            lockedRewardsOf[_to][msg.sender] += _value;\n', '            if(userRewardCount[_to][msg.sender]==0) {\n', '                userRewarderCount[_to] += 1;\n', '                userRewarders[_to][userRewarderCount[_to]]=msg.sender;\n', '            }\n', '            userRewardCount[_to][msg.sender]+=1;\n', '            totalRewardIssuedOut[msg.sender]+= _value;\n', '            Transfer(msg.sender, _to, _value);\n', '        }\n', '\n', '        Reward(msg.sender, _to, _value, data, now);\n', '    }\n', '\n', '    /**\n', '     * Transfer locked rewards\n', '     *\n', '     * Send `_value` tokens to `_to` merchant\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferReward(address _to, uint256 _value) {\n', '        require(!frozen[msg.sender]);                       //prevent transfer from frozen address\n', '        require(lockedRewardsOf[msg.sender][_to] >= _value );\n', '        require(totalLockedRewardsOf[msg.sender] >= _value);\n', '\n', '        if (msg.sender.balance  < minBalanceForAccounts) {\n', '            sell((minBalanceForAccounts - msg.sender.balance) * sellPrice);\n', '        }\n', '        totalLockedRewardsOf[msg.sender] -= _value;                           // Add the same to the recipient\n', '        lockedRewardsOf[msg.sender][_to] -= _value;\n', '        balanceOf[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Unlocked locked rewards by merchant\n', '     *\n', '     * Unlock `_value` tokens of `add`\n', '     *\n', '     * @param addr The address of the recipient\n', '     * @param _value the amount to unlock\n', '     */\n', '    function unlockReward(address addr, uint256 _value) {\n', '        require(totalLockedRewardsOf[addr] > _value);                       //prevent transfer from frozen address\n', '        require(lockedRewardsOf[addr][msg.sender] >= _value );\n', '        if(_value==0) _value=lockedRewardsOf[addr][msg.sender];\n', '        if (msg.sender.balance  < minBalanceForAccounts) {\n', '            sell((minBalanceForAccounts - msg.sender.balance) * sellPrice);\n', '        }\n', '        totalLockedRewardsOf[addr] -= _value;                           // Add the same to the recipient\n', '        lockedRewardsOf[addr][msg.sender] -= _value;\n', '        balanceOf[addr] += _value;\n', '        Unlock(addr, msg.sender, _value);\n', '    }\n', '\n', '\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` in behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        require(!frozen[_from]);                       //prevent transfer from frozen address\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value)\n', '    returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) onlyOwner\n', '    returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) onlyOwner returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other ccount\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value)  returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', "        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n", '        totalSupply -= _value;                              // Update totalSupply\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '\n', '    /*\n', '     function increaseSupply(address _from, uint256 _value) onlyOwner  returns (bool success)  {\n', '     balanceOf[_from] += _value;                         // Subtract from the targeted balance\n', '     totalSupply += _value;                              // Update totalSupply\n', '     // Burn(_from, _value);\n', '     return true;\n', '     }\n', '     */\n', '\n', '\n', '\n', '\n', '    uint256 public sellPrice = 608;\n', '    uint256 public buyPrice = 760;\n', '\n', '    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {\n', '        sellPrice = newSellPrice;\n', '        buyPrice = newBuyPrice;\n', '    }\n', '    function setUsersCanTrade(bool trade) onlyOwner {\n', '        usersCanTrade=trade;\n', '    }\n', '    function setCanTrade(address addr, bool trade) onlyOwner {\n', '        canTrade[addr]=trade;\n', '    }\n', '\n', '    //user is buying grx\n', '    function buy() payable returns (uint256 amount){\n', '        if(!usersCanTrade && !canTrade[msg.sender]) revert();\n', '        amount = msg.value * buyPrice;                    // calculates the amount\n', '\n', '        require(balanceOf[this] >= amount);               // checks if it has enough to sell\n', "        balanceOf[msg.sender] += amount;                  // adds the amount to buyer's balance\n", "        balanceOf[this] -= amount;                        // subtracts amount from seller's balance\n", '        Transfer(this, msg.sender, amount);               // execute an event reflecting the change\n', '        return amount;                                    // ends function and returns\n', '    }\n', '\n', '    //user is selling us grx, we are selling eth to the user\n', '    function sell(uint256 amount) returns (uint revenue){\n', '        require(!frozen[msg.sender]);\n', '        if(!usersCanTrade && !canTrade[msg.sender]) {\n', '            require(minBalanceForAccounts > amount/sellPrice);\n', '        }\n', '        require(balanceOf[msg.sender] >= amount);         // checks if the sender has enough to sell\n', "        balanceOf[this] += amount;                        // adds the amount to owner's balance\n", "        balanceOf[msg.sender] -= amount;                  // subtracts the amount from seller's balance\n", '        revenue = amount / sellPrice;\n', "        require(msg.sender.send(revenue));                // sends ether to the seller: it's important to do this last to prevent recursion attacks\n", '        Transfer(msg.sender, this, amount);               // executes an event reflecting on the change\n', '        return revenue;                                   // ends function and returns\n', '    }\n', '\n', '    function() payable {\n', '    }\n', '    event Withdrawn(address indexed to, uint256 value);\n', '    function withdraw(address target, uint256 amount) onlyOwner {\n', '        target.transfer(amount);\n', '        Withdrawn(target, amount);\n', '    }\n', '\n', '    function setAdmin(address addr, bool enabled) onlyOwner {\n', '        admin[addr]=enabled;\n', '    }\n', '\n', '    function setICO(bool enabled) onlyOwner {\n', '        ico=enabled;\n', '    }\n', '}']