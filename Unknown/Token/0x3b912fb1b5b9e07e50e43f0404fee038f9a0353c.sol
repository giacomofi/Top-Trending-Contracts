['pragma solidity ^0.4.4;\n', '\n', 'contract CountryCoin {\n', '\n', '    string public constant name = "CountryCoin";\n', '    string public constant symbol = "CCN";\n', '    uint public constant decimals = 8;\n', '    uint public totalSupply;\n', '\n', '    mapping (address => uint) balances;\n', '    mapping (address => mapping (address => uint)) allowed;\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '\n', '    uint constant oneCent = 4642857142857;\n', '    mapping (uint16 => uint) rating;\n', '    mapping (uint16 => mapping( address => uint)) votes;\n', '    mapping (address => uint16[]) history;\n', '\n', '    address owner;\n', '\n', '    function CountryCoin() {\n', '        totalSupply = 750000000000000000;\n', '        balances[this] = totalSupply;\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transfer(address _to, uint _value) returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        require(balances[_to] + _value > balances[_to]);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        require(allowed[_from][_to] >= _value);\n', '        require(balances[_to] + _value > balances[_to]);\n', '\n', '        balances[_from] -= _value;\n', '        balances[_to] += _value;\n', '        allowed[_from][_to] -= _value;\n', '\n', '        Transfer(_from, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function () payable {\n', '        uint tokenAmount = msg.value*100000000 / oneCent;\n', '        require(tokenAmount <= balances[this]);\n', '\n', '        balances[this] -= tokenAmount;\n', '        balances[msg.sender] += tokenAmount;\n', '    }\n', '\n', '    function vote(uint16 _country, uint _amount) {\n', '        require(balances[msg.sender] >= _amount);\n', '        require(_country < 1000);\n', '\n', '        if (votes[_country][msg.sender] == 0) {\n', '            history[msg.sender].push(_country);\n', '        }\n', '        balances[msg.sender] -= _amount;\n', '        rating[_country] += _amount;\n', '        votes[_country][msg.sender] += _amount;\n', '    }\n', '\n', '    function reset() {\n', '        for(uint16 i=0; i<history[msg.sender].length; i++) {\n', '            uint16 country = history[msg.sender][i];\n', '            uint amount = votes[country][msg.sender];\n', '            balances[msg.sender] += amount;\n', '            rating[country] -= amount;\n', '            votes[country][msg.sender] = 0;\n', '        }\n', '        history[msg.sender].length = 0;\n', '    }\n', '\n', '    function ratingOf(uint16 _country) constant returns (uint) {\n', '        require(_country < 1000);\n', '        return rating[_country];\n', '    }\n', '\n', '    function ratingList() constant returns (uint[] memory r) {\n', '        r = new uint[](1000);\n', '        for(uint16 i=0; i<r.length; i++) {\n', '            r[i] = rating[i];\n', '        }\n', '    }\n', '\n', '    function withdraw() {\n', '        require(msg.sender == owner);\n', '        owner.transfer(this.balance);\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.4;\n', '\n', 'contract CountryCoin {\n', '\n', '    string public constant name = "CountryCoin";\n', '    string public constant symbol = "CCN";\n', '    uint public constant decimals = 8;\n', '    uint public totalSupply;\n', '\n', '    mapping (address => uint) balances;\n', '    mapping (address => mapping (address => uint)) allowed;\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '\n', '    uint constant oneCent = 4642857142857;\n', '    mapping (uint16 => uint) rating;\n', '    mapping (uint16 => mapping( address => uint)) votes;\n', '    mapping (address => uint16[]) history;\n', '\n', '    address owner;\n', '\n', '    function CountryCoin() {\n', '        totalSupply = 750000000000000000;\n', '        balances[this] = totalSupply;\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transfer(address _to, uint _value) returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        require(balances[_to] + _value > balances[_to]);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        require(allowed[_from][_to] >= _value);\n', '        require(balances[_to] + _value > balances[_to]);\n', '\n', '        balances[_from] -= _value;\n', '        balances[_to] += _value;\n', '        allowed[_from][_to] -= _value;\n', '\n', '        Transfer(_from, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function () payable {\n', '        uint tokenAmount = msg.value*100000000 / oneCent;\n', '        require(tokenAmount <= balances[this]);\n', '\n', '        balances[this] -= tokenAmount;\n', '        balances[msg.sender] += tokenAmount;\n', '    }\n', '\n', '    function vote(uint16 _country, uint _amount) {\n', '        require(balances[msg.sender] >= _amount);\n', '        require(_country < 1000);\n', '\n', '        if (votes[_country][msg.sender] == 0) {\n', '            history[msg.sender].push(_country);\n', '        }\n', '        balances[msg.sender] -= _amount;\n', '        rating[_country] += _amount;\n', '        votes[_country][msg.sender] += _amount;\n', '    }\n', '\n', '    function reset() {\n', '        for(uint16 i=0; i<history[msg.sender].length; i++) {\n', '            uint16 country = history[msg.sender][i];\n', '            uint amount = votes[country][msg.sender];\n', '            balances[msg.sender] += amount;\n', '            rating[country] -= amount;\n', '            votes[country][msg.sender] = 0;\n', '        }\n', '        history[msg.sender].length = 0;\n', '    }\n', '\n', '    function ratingOf(uint16 _country) constant returns (uint) {\n', '        require(_country < 1000);\n', '        return rating[_country];\n', '    }\n', '\n', '    function ratingList() constant returns (uint[] memory r) {\n', '        r = new uint[](1000);\n', '        for(uint16 i=0; i<r.length; i++) {\n', '            r[i] = rating[i];\n', '        }\n', '    }\n', '\n', '    function withdraw() {\n', '        require(msg.sender == owner);\n', '        owner.transfer(this.balance);\n', '    }\n', '\n', '}']
