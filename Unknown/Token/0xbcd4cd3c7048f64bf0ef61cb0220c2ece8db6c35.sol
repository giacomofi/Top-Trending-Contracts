['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will recieve the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract Presale {\n', '    using SafeMath for uint256;\n', '\n', '    // Miniml possible cap\n', '    uint256 public minimalCap;\n', '\n', '    // Maximum possible cap\n', '    uint256 public maximumCap;\n', '\n', '    // Presale token\n', '    Token public token;\n', '\n', '    // Early bird ether\n', '    uint256 public early_bird_minimal;\n', '\n', '    // Withdraw wallet\n', '    address public wallet;\n', '\n', '    // Minimal token buy\n', '    uint256 public minimal_token_sell;\n', '\n', '    // Token per ether\n', '    uint256 public wei_per_token;\n', '\n', '    // start and end timestamp where investments are allowed (both inclusive)\n', '    uint256 public startTime;\n', '    uint256 public endTime;\n', '\n', '\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    function Presale(uint256 _startTime, address _wallet) {\n', '        require(_startTime >=  now);\n', '        require(_wallet != 0x0);\n', '\n', '        token = new Token();\n', '        wallet = _wallet;\n', '        startTime = _startTime;\n', '        minimal_token_sell = 1e10;\n', '        endTime = _startTime + 86400 * 7;\n', '        wei_per_token = 62500000;  // 1e10 / 160\n', '        early_bird_minimal = 30e18;\n', '        maximumCap = 1875e18 / wei_per_token;\n', '        minimalCap = 350e18 / wei_per_token;\n', '    }\n', '\n', '    /*\n', '     * @dev fallback for processing ether\n', '     */\n', '    function() payable {\n', '        return buyTokens(msg.sender);\n', '    }\n', '\n', '    /*\n', '     * @dev calculate amount\n', '     * @return token amount that we should send to our dear investor\n', '     */\n', '    function calcAmount() internal returns (uint256) {\n', '        if (now < startTime && msg.value >= early_bird_minimal) {\n', '            return (msg.value / wei_per_token / 60) * 70;   \n', '        }\n', '        return msg.value / wei_per_token;\n', '    }\n', '\n', '    /*\n', '     * @dev sell token and send to contributor address\n', '     * @param contributor address\n', '     */\n', '    function buyTokens(address contributor) payable {\n', '        uint256 amount = calcAmount();\n', '\n', '        require(contributor != 0x0) ;\n', '        require(minimal_token_sell < amount);\n', '        require((token.totalSupply() + amount) <= maximumCap);\n', '        require(validPurchase());\n', '\n', '        token.mint(contributor, amount);\n', '        TokenPurchase(0x0, contributor, msg.value, amount);\n', '        Transfer(0x0, contributor, amount);\n', '        wallet.transfer(msg.value);\n', '    }\n', '\n', '    // @return user balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return token.balanceOf(_owner);\n', '    }\n', '\n', '    // @return true if the transaction can buy tokens\n', '    function validPurchase() internal constant returns (bool) {\n', '        bool withinPeriod = ((now >= startTime  || msg.value >= early_bird_minimal) && now <= endTime);\n', '        bool nonZeroPurchase = msg.value != 0;\n', '\n', '        return withinPeriod && nonZeroPurchase;\n', '    }\n', '\n', '    // @return true if crowdsale event has ended\n', '    function hasStarted() public constant returns (bool) {\n', '        return now >= startTime;\n', '    }\n', '\n', '    // @return true if crowdsale event has ended\n', '    function hasEnded() public constant returns (bool) {\n', '        return now > endTime || token.totalSupply() == maximumCap;\n', '    }\n', '\n', '}\n', '\n', 'contract Token is MintableToken {\n', '\n', '    string public constant name = &#39;Privatix Presale&#39;;\n', '    string public constant symbol = &#39;PRIXY&#39;;\n', '    uint256 public constant decimals = 8;\n', '\n', '    function transferFrom(address from, address to, uint256 value) returns (bool) {\n', '        revert();\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool) {\n', '        revert();\n', '    }\n', '\n', '}']