['pragma solidity ^0.4.11;\n', '\n', ' library SafeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      throw;\n', '    }\n', '  }\n', '}\n', '\n', '\n', ' contract ERC20Basic {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) constant returns (uint);\n', '  function transfer(address to, uint value);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint);\n', '  function transferFrom(address from, address to, uint value);\n', '  function approve(address spender, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint;\n', '\n', '  mapping(address => uint) balances;\n', '\n', '  modifier onlyPayloadSize(uint size) {\n', '     if(msg.data.length < size + 4) {\n', '       throw;\n', '     }\n', '     _;\n', '  }\n', '\n', '  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '  }\n', '\n', '  function balanceOf(address _owner) constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract StandardToken is BasicToken, ERC20 {\n', '\n', '  mapping (address => mapping (address => uint)) allowed;\n', '\n', '  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '  }\n', '\n', '\n', '  function approve(address _spender, uint _value) {\n', '    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '  }\n', '\n', '\n', '  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', 'contract BAC is StandardToken{\n', '    string public constant name = "BananaFundCoin";\n', '    string public constant symbol = "BAC";\n', '    uint public constant decimals = 18;\n', '    string public version = "1.0";\n', '    \n', '    //1以太可以兑换代币数量\n', '    uint public price ;\n', '    uint public issueIndex = 0;\n', '    //代币分配\n', '    uint public constant bacFund =500*(10**6)*10**decimals;\n', '    uint public constant MaxReleasedBac =1000*(10**6)*10**decimals;\n', '    //判定是否在BAC兑换中\n', '    bool public saleOrNot;\n', '    //事件\n', '    event InvalidCaller(address caller);\n', '    event Issue(uint issueIndex, address addr, uint ethAmount, uint tokenAmount);\n', '    event StartOK();\n', '    event InvalidState(bytes msg);\n', '    event ShowMsg(bytes msg);\n', '    \n', '    //定义为合约部署的部署钱包地址\n', '    address public target;\n', '    \n', '    //合约转账地址   代币兑换价格 \n', '    function BAC(uint _price){\n', '        target = msg.sender;\n', '        price =_price;\n', '        totalSupply=bacFund;\n', '        balances[target] = bacFund;\n', '        saleOrNot = false;\n', '    }\n', '    \n', '    modifier onlyOwner {\n', '        if (target == msg.sender) {\n', '          _;\n', '        } else {\n', '            InvalidCaller(msg.sender);\n', '            throw;\n', '        }\n', '    }\n', '\n', '    modifier inProgress {\n', '        if (saleStarted()) {\n', '            _;\n', '        } else {\n', '            InvalidState("Sale is not in progress");\n', '            throw;\n', '        }\n', '    }\n', '  \n', '    //根据转入的以太币数额返币\n', '    function () payable{\n', '        if(saleOrNot){\n', '            issueToken(msg.sender);\n', '        }else{\n', '            throw;\n', '        }\n', '    }\n', '    \n', '    function issueToken(address recipient) payable inProgress{\n', '        assert(msg.value >= 0.01 ether);\n', '        //计算可以获得代币的数量\n', '        uint  amount = computeAccount(msg.value);\n', '        if(totalSupply < bacFund+MaxReleasedBac){\n', '            balances[recipient] = balances[recipient].add(amount);\n', '            totalSupply = totalSupply.add(amount);\n', '            Issue(issueIndex++, recipient,msg.value, amount);\n', '        }else{\n', '            InvalidState("BAC is not enough");\n', '            throw;\n', '        }\n', '        //将以太转入发起者的钱包地址\n', '        if (!target.send(msg.value)) {\n', '            throw;\n', '        }\n', '    }\n', '    \n', '    //计算返回代币的数量\n', '    function computeAccount(uint ehtAccount) internal constant returns (uint tokens){\n', '        tokens=price.mul(ehtAccount);\n', '    }\n', '    \n', '    //定义代币的兑换比列\n', '    function setPrice(uint _price) onlyOwner{\n', '        if(_price>0){\n', '            price= _price;\n', '        }else{\n', '            ShowMsg("Invalid price");\n', '        }\n', '    }\n', '    \n', '    //开启代币的发售\n', '    function startSale() onlyOwner{\n', '        if(!saleOrNot){\n', '            saleOrNot = true;\n', '            StartOK();\n', '        }else{\n', '            ShowMsg("sale is ing ");\n', '        }\n', '    }   \n', '    \n', '    // 停止代币的发售\n', '    function stopSale() onlyOwner{\n', '        if(saleOrNot) {\n', '            saleOrNot=false;\n', '            //将剩余的不足的代币转入target\n', '            if(totalSupply< 1500*(10**6)*10**decimals){\n', '                balances[target] = balances[target].add(1500*(10**6)*10**decimals-totalSupply);\n', '            }\n', '        }else{\n', '            ShowMsg("sale has been over");\n', '        }\n', '    }\n', '    \n', '    function saleStarted() constant returns (bool) {\n', '        return saleOrNot;\n', '    }\n', '    \n', '    //自杀\n', '    function destroy() onlyOwner{\n', '        suicide(target);\n', '    }\n', '}']
['pragma solidity ^0.4.11;\n', '\n', ' library SafeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      throw;\n', '    }\n', '  }\n', '}\n', '\n', '\n', ' contract ERC20Basic {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) constant returns (uint);\n', '  function transfer(address to, uint value);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint);\n', '  function transferFrom(address from, address to, uint value);\n', '  function approve(address spender, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint;\n', '\n', '  mapping(address => uint) balances;\n', '\n', '  modifier onlyPayloadSize(uint size) {\n', '     if(msg.data.length < size + 4) {\n', '       throw;\n', '     }\n', '     _;\n', '  }\n', '\n', '  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '  }\n', '\n', '  function balanceOf(address _owner) constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract StandardToken is BasicToken, ERC20 {\n', '\n', '  mapping (address => mapping (address => uint)) allowed;\n', '\n', '  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '  }\n', '\n', '\n', '  function approve(address _spender, uint _value) {\n', '    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '  }\n', '\n', '\n', '  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', 'contract BAC is StandardToken{\n', '    string public constant name = "BananaFundCoin";\n', '    string public constant symbol = "BAC";\n', '    uint public constant decimals = 18;\n', '    string public version = "1.0";\n', '    \n', '    //1以太可以兑换代币数量\n', '    uint public price ;\n', '    uint public issueIndex = 0;\n', '    //代币分配\n', '    uint public constant bacFund =500*(10**6)*10**decimals;\n', '    uint public constant MaxReleasedBac =1000*(10**6)*10**decimals;\n', '    //判定是否在BAC兑换中\n', '    bool public saleOrNot;\n', '    //事件\n', '    event InvalidCaller(address caller);\n', '    event Issue(uint issueIndex, address addr, uint ethAmount, uint tokenAmount);\n', '    event StartOK();\n', '    event InvalidState(bytes msg);\n', '    event ShowMsg(bytes msg);\n', '    \n', '    //定义为合约部署的部署钱包地址\n', '    address public target;\n', '    \n', '    //合约转账地址   代币兑换价格 \n', '    function BAC(uint _price){\n', '        target = msg.sender;\n', '        price =_price;\n', '        totalSupply=bacFund;\n', '        balances[target] = bacFund;\n', '        saleOrNot = false;\n', '    }\n', '    \n', '    modifier onlyOwner {\n', '        if (target == msg.sender) {\n', '          _;\n', '        } else {\n', '            InvalidCaller(msg.sender);\n', '            throw;\n', '        }\n', '    }\n', '\n', '    modifier inProgress {\n', '        if (saleStarted()) {\n', '            _;\n', '        } else {\n', '            InvalidState("Sale is not in progress");\n', '            throw;\n', '        }\n', '    }\n', '  \n', '    //根据转入的以太币数额返币\n', '    function () payable{\n', '        if(saleOrNot){\n', '            issueToken(msg.sender);\n', '        }else{\n', '            throw;\n', '        }\n', '    }\n', '    \n', '    function issueToken(address recipient) payable inProgress{\n', '        assert(msg.value >= 0.01 ether);\n', '        //计算可以获得代币的数量\n', '        uint  amount = computeAccount(msg.value);\n', '        if(totalSupply < bacFund+MaxReleasedBac){\n', '            balances[recipient] = balances[recipient].add(amount);\n', '            totalSupply = totalSupply.add(amount);\n', '            Issue(issueIndex++, recipient,msg.value, amount);\n', '        }else{\n', '            InvalidState("BAC is not enough");\n', '            throw;\n', '        }\n', '        //将以太转入发起者的钱包地址\n', '        if (!target.send(msg.value)) {\n', '            throw;\n', '        }\n', '    }\n', '    \n', '    //计算返回代币的数量\n', '    function computeAccount(uint ehtAccount) internal constant returns (uint tokens){\n', '        tokens=price.mul(ehtAccount);\n', '    }\n', '    \n', '    //定义代币的兑换比列\n', '    function setPrice(uint _price) onlyOwner{\n', '        if(_price>0){\n', '            price= _price;\n', '        }else{\n', '            ShowMsg("Invalid price");\n', '        }\n', '    }\n', '    \n', '    //开启代币的发售\n', '    function startSale() onlyOwner{\n', '        if(!saleOrNot){\n', '            saleOrNot = true;\n', '            StartOK();\n', '        }else{\n', '            ShowMsg("sale is ing ");\n', '        }\n', '    }   \n', '    \n', '    // 停止代币的发售\n', '    function stopSale() onlyOwner{\n', '        if(saleOrNot) {\n', '            saleOrNot=false;\n', '            //将剩余的不足的代币转入target\n', '            if(totalSupply< 1500*(10**6)*10**decimals){\n', '                balances[target] = balances[target].add(1500*(10**6)*10**decimals-totalSupply);\n', '            }\n', '        }else{\n', '            ShowMsg("sale has been over");\n', '        }\n', '    }\n', '    \n', '    function saleStarted() constant returns (bool) {\n', '        return saleOrNot;\n', '    }\n', '    \n', '    //自杀\n', '    function destroy() onlyOwner{\n', '        suicide(target);\n', '    }\n', '}']
