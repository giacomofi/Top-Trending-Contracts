['pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' * https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        if (msg.sender != owner) {\n', '            revert();\n', '        }\n', '        _;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '    uint256 public tokenTotalSupply;\n', '\n', '    function balanceOf(address who) constant returns(uint256);\n', '\n', '    function allowance(address owner, address spender) constant returns(uint256);\n', '\n', '    function transfer(address to, uint256 value) returns (bool success);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    function transferFrom(address from, address to, uint256 value) returns (bool success);\n', '\n', '    function approve(address spender, uint256 value) returns (bool success);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    function totalSupply() constant returns (uint256 availableSupply);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implemantation of the basic standart token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract BioToken is ERC20, Ownable {\n', '    using SafeMath for uint;\n', '\n', '    string public name = "BIONT Token";\n', '    string public symbol = "BIONT";\n', '    uint public decimals = 18;\n', '\n', '    bool public tradingStarted = false;\n', '    bool public mintingFinished = false;\n', '    bool public salePaused = false;\n', '\n', '    uint256 public tokenTotalSupply = 0;\n', '    uint256 public trashedTokens = 0;\n', '    uint256 public hardcap = 140000000 * (10 ** decimals); // 140 million tokens\n', '    uint256 public ownerTokens = 14000000 * (10 ** decimals); // 14 million tokens\n', '\n', '    uint public ethToToken = 300; // 1 eth buys 300 tokens\n', '    uint public noContributors = 0;\n', '\n', '    uint public start = 1503346080; // 08/21/2017 @ 20:08pm (UTC)\n', '    uint public initialSaleEndDate = start + 9 weeks;\n', '    uint public ownerGrace = initialSaleEndDate + 182 days;\n', '    uint public fiveYearGrace = initialSaleEndDate + 5 * 365 days;\n', '\n', '    address public multisigVault;\n', '    address public lockedVault;\n', '    address public ownerVault;\n', '\n', '    address public authorizerOne;\n', '    address public authorizerTwo;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '    mapping(address => uint256) authorizedWithdrawal;\n', '\n', '    event Mint(address indexed to, uint256 value);\n', '    event MintFinished();\n', '    event TokenSold(address recipient, uint256 ether_amount, uint256 pay_amount, uint256 exchangerate);\n', '    event MainSaleClosed();\n', '\n', '    /**\n', '     * @dev Fix for the ERC20 short address attack.\n', '     */\n', '    modifier onlyPayloadSize(uint size) {\n', '        if (msg.data.length < size + 4) {\n', '            revert();\n', '        }\n', '        _;\n', '    }\n', '\n', '    modifier canMint() {\n', '        if (mintingFinished) {\n', '            revert();\n', '        }\n', '\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev modifier that throws if trading has not started yet\n', '     */\n', '    modifier hasStartedTrading() {\n', '        require(tradingStarted);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev modifier to allow token creation only when the sale IS ON\n', '     */\n', '    modifier saleIsOn() {\n', '        require(now > start && now < initialSaleEndDate && salePaused == false);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev modifier to allow token creation only when the hardcap has not been reached\n', '     */\n', '    modifier isUnderHardCap() {\n', '        require(tokenTotalSupply <= hardcap);\n', '        _;\n', '    }\n', '\n', '    function BioToken(address _ownerVault, address _authorizerOne, address _authorizerTwo, address _lockedVault, address _multisigVault) {\n', '        ownerVault = _ownerVault;\n', '        authorizerOne = _authorizerOne;\n', '        authorizerTwo = _authorizerTwo;\n', '        lockedVault = _lockedVault;\n', '        multisigVault = _multisigVault;\n', '\n', '        mint(ownerVault, ownerTokens);\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will recieve the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address _to, uint256 _amount) private canMint returns(bool) {\n', '        tokenTotalSupply = tokenTotalSupply.add(_amount);\n', '\n', '        require(tokenTotalSupply <= hardcap);\n', '\n', '        balances[_to] = balances[_to].add(_amount);\n', '        noContributors = noContributors.add(1);\n', '        Mint(_to, _amount);\n', '        Transfer(this, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will recieve the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function masterMint(address _to, uint256 _amount) public canMint onlyOwner returns(bool) {\n', '        tokenTotalSupply = tokenTotalSupply.add(_amount);\n', '\n', '        require(tokenTotalSupply <= hardcap);\n', '\n', '        balances[_to] = balances[_to].add(_amount);\n', '        noContributors = noContributors.add(1);\n', '        Mint(_to, _amount);\n', '        Transfer(this, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to stop minting new tokens.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function finishMinting() private onlyOwner returns(bool) {\n', '        mintingFinished = true;\n', '        MintFinished();\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev transfer token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) hasStartedTrading returns (bool success) {\n', "        // don't allow the vault to make transfers\n", '        if (msg.sender == lockedVault && now < fiveYearGrace) {\n', '            revert();\n', '        }\n', '\n', '        // owner needs to wait as well\n', '        if (msg.sender == ownerVault && now < ownerGrace) {\n', '            revert();\n', '        }\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amout of tokens to be transfered\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) hasStartedTrading returns (bool success) {\n', '        if (_from == lockedVault && now < fiveYearGrace) {\n', '            revert();\n', '        }\n', '\n', '        // owner needs to wait as well\n', '        if (_from == ownerVault && now < ownerGrace) {\n', '            revert();\n', '        }\n', '\n', '        var _allowance = allowed[_from][msg.sender];\n', '\n', '        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '        // if (_value > _allowance) throw;\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        Transfer(_from, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another according to off exchange agreements\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function masterTransferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) public hasStartedTrading onlyOwner returns (bool success) {\n', '        if (_from == lockedVault && now < fiveYearGrace) {\n', '            revert();\n', '        }\n', '\n', '        // owner needs to wait as well\n', '        if (_from == ownerVault && now < ownerGrace) {\n', '            revert();\n', '        }\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function totalSupply() constant returns (uint256 availableSupply) {\n', '        return tokenTotalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param _owner The address to query the the balance of.\n', '     * @return An uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOf(address _owner) constant returns(uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) {\n', '            revert();\n', '        }\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens than an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) constant returns(uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the owner to enable the trading. This can not be undone\n', '     */\n', '    function startTrading() onlyOwner {\n', '        tradingStarted = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the owner to enable the trading. This can not be undone\n', '     */\n', '    function pauseSale() onlyOwner {\n', '        salePaused = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the owner to enable the trading. This can not be undone\n', '     */\n', '    function resumeSale() onlyOwner {\n', '        salePaused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the owner to enable the trading. This can not be undone\n', '     */\n', '    function getNoContributors() constant returns(uint contributors) {\n', '        return noContributors;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the owner to set the multisig wallet address.\n', '     * @param _multisigVault the multisig wallet address\n', '     */\n', '    function setMultisigVault(address _multisigVault) public onlyOwner {\n', '        if (_multisigVault != address(0)) {\n', '            multisigVault = _multisigVault;\n', '        }\n', '    }\n', '\n', '    function setAuthorizedWithdrawalAmount(uint256 _amount) public {\n', '        if (_amount < 0) {\n', '            revert();\n', '        }\n', '\n', '        if (msg.sender != authorizerOne && msg.sender != authorizerTwo) {\n', '            revert();\n', '        }\n', '\n', '        authorizedWithdrawal[msg.sender] = _amount;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the owner to send the funds to the vault.\n', '     * @param _amount the amount in wei to send\n', '     */\n', '    function withdrawEthereum(uint256 _amount) public onlyOwner {\n', '        require(multisigVault != address(0));\n', '        require(_amount <= this.balance); // wei\n', '\n', '        if (authorizedWithdrawal[authorizerOne] != authorizedWithdrawal[authorizerTwo]) {\n', '            revert();\n', '        }\n', '\n', '        if (_amount > authorizedWithdrawal[authorizerOne]) {\n', '            revert();\n', '        }\n', '\n', '        if (!multisigVault.send(_amount)) {\n', '            revert();\n', '        }\n', '\n', '        authorizedWithdrawal[authorizerOne] = authorizedWithdrawal[authorizerOne].sub(_amount);\n', '        authorizedWithdrawal[authorizerTwo] = authorizedWithdrawal[authorizerTwo].sub(_amount);\n', '    }\n', '\n', '    function showAuthorizerOneAmount() constant public returns(uint256 remaining) {\n', '        return authorizedWithdrawal[authorizerOne];\n', '    }\n', '\n', '    function showAuthorizerTwoAmount() constant public returns(uint256 remaining) {\n', '        return authorizedWithdrawal[authorizerTwo];\n', '    }\n', '\n', '    function showEthBalance() constant public returns(uint256 remaining) {\n', '        return this.balance;\n', '    }\n', '\n', '    function retrieveTokens() public onlyOwner {\n', '        require(lockedVault != address(0));\n', '\n', '        uint256 capOut = hardcap.sub(tokenTotalSupply);\n', '        tokenTotalSupply = hardcap;\n', '\n', '        balances[lockedVault] = balances[lockedVault].add(capOut);\n', '        Transfer(this, lockedVault, capOut);\n', '    }\n', '\n', '    function trashTokens(address _from, uint256 _amount) onlyOwner returns(bool) {\n', '        balances[_from] = balances[_from].sub(_amount);\n', '        trashedTokens = trashedTokens.add(_amount);\n', '        tokenTotalSupply = tokenTotalSupply.sub(_amount);\n', '    }\n', '\n', '    function decreaseSupply(uint256 value, address from) onlyOwner returns (bool) {\n', '      balances[from] = balances[from].sub(value);\n', '      trashedTokens = trashedTokens.add(value);\n', '      tokenTotalSupply = tokenTotalSupply.sub(value);\n', '      Transfer(from, 0, value);\n', '      return true;\n', '    }\n', '\n', '    function finishSale() public onlyOwner {\n', '        finishMinting();\n', '        retrieveTokens();\n', '        startTrading();\n', '\n', '        MainSaleClosed();\n', '    }\n', '\n', '    function saleOn() constant returns(bool) {\n', '        return (now > start && now < initialSaleEndDate && salePaused == false);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows anyone to create tokens by depositing ether.\n', '     * @param recipient the recipient to receive tokens.\n', '     */\n', '    function createTokens(address recipient) public isUnderHardCap saleIsOn payable {\n', '        uint bonus = 0;\n', '        uint period = 1 weeks;\n', '        uint256 tokens;\n', '\n', '        if (now <= start + 2 * period) {\n', '            bonus = 20;\n', '        } else if (now > start + 2 * period && now <= start + 3 * period) {\n', '            bonus = 15;\n', '        } else if (now > start + 3 * period && now <= start + 4 * period) {\n', '            bonus = 10;\n', '        } else if (now > start + 4 * period && now <= start + 5 * period) {\n', '            bonus = 5;\n', '        }\n', '\n', "        // the bonus is in percentages, solidity is doing standard integer division, basically rounding 'down'\n", '        if (bonus > 0) {\n', '            tokens = ethToToken.mul(msg.value) + ethToToken.mul(msg.value).mul(bonus).div(100);\n', '        } else {\n', '            tokens = ethToToken.mul(msg.value);\n', '        }\n', '\n', '        if (tokens <= 0) {\n', '            revert();\n', '        }\n', '\n', '        mint(recipient, tokens);\n', '\n', '        TokenSold(recipient, msg.value, tokens, ethToToken);\n', '    }\n', '\n', '    function() external payable {\n', '        createTokens(msg.sender);\n', '    }\n', '}']