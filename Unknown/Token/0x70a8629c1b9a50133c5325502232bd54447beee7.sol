['pragma solidity ^0.4.8;\n', 'contract Soarcoin {\n', '\n', '    mapping (address => uint256) balances;               // each address in this contract may have tokens. \n', '    address internal owner = 0x4Bce8E9850254A86a1988E2dA79e41Bc6793640d;                // the owner is the creator of the smart contract\n', '    string public name = "Soarcoin";                     // name of this contract and investment fund\n', '    string public symbol = "SOAR";                       // token symbol\n', '    uint8 public decimals = 6;                           // decimals (for humans)\n', '    uint256 public totalSupply = 5000000000000000;  \n', '           \n', '    modifier onlyOwner()\n', '    {\n', '        if (msg.sender != owner) throw;\n', '        _;\n', '    }\n', '\n', '    function Soarcoin() { balances[owner] = totalSupply; }    \n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // query balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance)\n', '    {\n', '        return balances[_owner];\n', '    }\n', '\n', '    // transfer tokens from one address to another\n', '    function transfer(address _to, uint256 _value) returns (bool success)\n', '    {\n', '        if(_value <= 0) throw;                                      // Check send token value > 0;\n', '        if (balances[msg.sender] < _value) throw;                   // Check if the sender has enough\n', '        if (balances[_to] + _value < balances[_to]) throw;          // Check for overflows                          \n', '        balances[msg.sender] -= _value;                             // Subtract from the sender\n', "        balances[_to] += _value;                                    // Add the same to the recipient, if it's the contact itself then it signals a sell order of those tokens                       \n", '        Transfer(msg.sender, _to, _value);                          // Notify anyone listening that this transfer took place\n', '        return true;      \n', '    }\n', '\n', '    function mint(address _to, uint256 _value) onlyOwner\n', '    {\n', '        if(_value <= 0) throw;\n', '    \tbalances[_to] += _value;\n', '    \ttotalSupply += _value;\n', '    }\n', '}\n', '\n', '/**\n', ' * ERC 20 token\n', ' *\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract Token is Soarcoin {\n', '\n', '    /// @return total amount of tokens\n', '    \n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '    \n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '}\n', '\n', '/**\n', ' * ERC 20 token\n', ' *\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' */']