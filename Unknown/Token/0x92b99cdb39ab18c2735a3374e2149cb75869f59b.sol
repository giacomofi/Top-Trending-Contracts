['pragma solidity ^0.4.4;\n', '\n', 'contract SafeMath {\n', '     function safeMul(uint a, uint b) internal returns (uint) {\n', '          uint c = a * b;\n', '          assert(a == 0 || c / a == b);\n', '          return c;\n', '     }\n', '\n', '     function safeSub(uint a, uint b) internal returns (uint) {\n', '          assert(b <= a);\n', '          return a - b;\n', '     }\n', '\n', '     function safeAdd(uint a, uint b) internal returns (uint) {\n', '          uint c = a + b;\n', '          assert(c>=a && c>=b);\n', '          return c;\n', '     }\n', '\n', '     function assert(bool assertion) internal {\n', '          if (!assertion) throw;\n', '     }\n', '}\n', '\n', '// Standard token interface (ERC 20)\n', '// https://github.com/ethereum/EIPs/issues/20\n', 'contract Token is SafeMath {\n', '     // Functions:\n', '     /// @return total amount of tokens\n', '     function totalSupply() constant returns (uint256 supply) {}\n', '\n', '     /// @param _owner The address from which the balance will be retrieved\n', '     /// @return The balance\n', '     function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '\n', '     /// @notice send `_value` token to `_to` from `msg.sender`\n', '     /// @param _to The address of the recipient\n', '     /// @param _value The amount of token to be transferred\n', '     function transfer(address _to, uint256 _value) {}\n', '\n', '     /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '     /// @param _from The address of the sender\n', '     /// @param _to The address of the recipient\n', '     /// @param _value The amount of token to be transferred\n', '     /// @return Whether the transfer was successful or not\n', '     function transferFrom(address _from, address _to, uint256 _value){}\n', '\n', '     /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '     /// @param _spender The address of the account able to transfer the tokens\n', '     /// @param _value The amount of wei to be approved for transfer\n', '     /// @return Whether the approval was successful or not\n', '     function approve(address _spender, uint256 _value) returns (bool success) {}\n', '\n', '     /// @param _owner The address of the account owning tokens\n', '     /// @param _spender The address of the account able to transfer the tokens\n', '     /// @return Amount of remaining tokens allowed to spent\n', '     function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '     // Events:\n', '     event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '     event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StdToken is Token {\n', '     // Fields:\n', '     mapping(address => uint256) balances;\n', '     mapping (address => mapping (address => uint256)) allowed;\n', '     uint public totalSupply = 0;\n', '\n', '     // Functions:\n', '     function transfer(address _to, uint256 _value) {\n', '          if((balances[msg.sender] < _value) || (balances[_to] + _value <= balances[_to])) {\n', '               throw;\n', '          }\n', '\n', '          balances[msg.sender] -= _value;\n', '          balances[_to] += _value;\n', '          Transfer(msg.sender, _to, _value);\n', '     }\n', '\n', '     function transferFrom(address _from, address _to, uint256 _value) {\n', '          if((balances[_from] < _value) || \n', '               (allowed[_from][msg.sender] < _value) || \n', '               (balances[_to] + _value <= balances[_to])) \n', '          {\n', '               throw;\n', '          }\n', '\n', '          balances[_to] += _value;\n', '          balances[_from] -= _value;\n', '          allowed[_from][msg.sender] -= _value;\n', '\n', '          Transfer(_from, _to, _value);\n', '     }\n', '\n', '     function balanceOf(address _owner) constant returns (uint256 balance) {\n', '          return balances[_owner];\n', '     }\n', '\n', '     function approve(address _spender, uint256 _value) returns (bool success) {\n', '          allowed[msg.sender][_spender] = _value;\n', '          Approval(msg.sender, _spender, _value);\n', '\n', '          return true;\n', '     }\n', '\n', '     function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '          return allowed[_owner][_spender];\n', '     }\n', '\n', '     modifier onlyPayloadSize(uint _size) {\n', '          if(msg.data.length < _size + 4) {\n', '               throw;\n', '          }\n', '          _;\n', '     }\n', '}\n', '\n', 'contract GOLD is StdToken {\n', '/// Fields:\n', '     string public constant name = "Goldmint GOLD Token";\n', '     string public constant symbol = "GOLD";\n', '     uint public constant decimals = 18;\n', '\n', '     address public creator = 0x0;\n', '     address public tokenManager = 0x0;\n', '\n', '     // lock by default all methods\n', '     bool public lock = true;\n', '\n', '/// Modifiers:\n', '     modifier onlyCreator() { if(msg.sender != creator) throw; _; }\n', '     modifier onlyCreatorOrTokenManager() { if((msg.sender!=creator) && (msg.sender!=tokenManager)) throw; _; }\n', '\n', '     function setCreator(address _creator) onlyCreator {\n', '          creator = _creator;\n', '     }\n', '\n', '     function setTokenManager(address _manager) onlyCreator {\n', '          tokenManager = _manager;\n', '     }\n', '\n', '     function lockContract(bool _lock) onlyCreator {\n', '          lock = _lock;\n', '     }\n', '\n', '/// Functions:\n', '     /// @dev Constructor\n', '     function GOLD() {\n', '          creator = msg.sender;\n', '          tokenManager = msg.sender;\n', '     }\n', '\n', '     /// @dev Override\n', '     function transfer(address _to, uint256 _value) public {\n', '          if(lock && (msg.sender!=tokenManager)){\n', '               throw;\n', '          }\n', '\n', '          super.transfer(_to,_value);\n', '     }\n', '\n', '     /// @dev Override\n', '     function transferFrom(address _from, address _to, uint256 _value)public{\n', '          if(lock && (msg.sender!=tokenManager)){\n', '               throw;\n', '          }\n', '\n', '          super.transferFrom(_from,_to,_value);\n', '     }\n', '\n', '     /// @dev Override\n', '     function approve(address _spender, uint256 _value) public returns (bool) {\n', '          if(lock && (msg.sender!=tokenManager)){\n', '               throw;\n', '          }\n', '\n', '          return super.approve(_spender,_value);\n', '     }\n', '\n', '     function issueTokens(address _who, uint _tokens) onlyCreatorOrTokenManager {\n', '          if(lock && (msg.sender!=tokenManager)){\n', '               throw;\n', '          }\n', '\n', '          balances[_who] += _tokens;\n', '          totalSupply += _tokens;\n', '     }\n', '\n', '     function burnTokens(address _who, uint _tokens) onlyCreatorOrTokenManager {\n', '          if(lock && (msg.sender!=tokenManager)){\n', '               throw;\n', '          }\n', '\n', '          balances[_who] = safeSub(balances[_who], _tokens);\n', '          totalSupply = safeSub(totalSupply, _tokens);\n', '     }\n', '\n', '     // Do not allow to send money directly to this contract\n', '     function() {\n', '          throw;\n', '     }\n', '}']
['pragma solidity ^0.4.4;\n', '\n', 'contract SafeMath {\n', '     function safeMul(uint a, uint b) internal returns (uint) {\n', '          uint c = a * b;\n', '          assert(a == 0 || c / a == b);\n', '          return c;\n', '     }\n', '\n', '     function safeSub(uint a, uint b) internal returns (uint) {\n', '          assert(b <= a);\n', '          return a - b;\n', '     }\n', '\n', '     function safeAdd(uint a, uint b) internal returns (uint) {\n', '          uint c = a + b;\n', '          assert(c>=a && c>=b);\n', '          return c;\n', '     }\n', '\n', '     function assert(bool assertion) internal {\n', '          if (!assertion) throw;\n', '     }\n', '}\n', '\n', '// Standard token interface (ERC 20)\n', '// https://github.com/ethereum/EIPs/issues/20\n', 'contract Token is SafeMath {\n', '     // Functions:\n', '     /// @return total amount of tokens\n', '     function totalSupply() constant returns (uint256 supply) {}\n', '\n', '     /// @param _owner The address from which the balance will be retrieved\n', '     /// @return The balance\n', '     function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '\n', '     /// @notice send `_value` token to `_to` from `msg.sender`\n', '     /// @param _to The address of the recipient\n', '     /// @param _value The amount of token to be transferred\n', '     function transfer(address _to, uint256 _value) {}\n', '\n', '     /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '     /// @param _from The address of the sender\n', '     /// @param _to The address of the recipient\n', '     /// @param _value The amount of token to be transferred\n', '     /// @return Whether the transfer was successful or not\n', '     function transferFrom(address _from, address _to, uint256 _value){}\n', '\n', '     /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '     /// @param _spender The address of the account able to transfer the tokens\n', '     /// @param _value The amount of wei to be approved for transfer\n', '     /// @return Whether the approval was successful or not\n', '     function approve(address _spender, uint256 _value) returns (bool success) {}\n', '\n', '     /// @param _owner The address of the account owning tokens\n', '     /// @param _spender The address of the account able to transfer the tokens\n', '     /// @return Amount of remaining tokens allowed to spent\n', '     function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '     // Events:\n', '     event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '     event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StdToken is Token {\n', '     // Fields:\n', '     mapping(address => uint256) balances;\n', '     mapping (address => mapping (address => uint256)) allowed;\n', '     uint public totalSupply = 0;\n', '\n', '     // Functions:\n', '     function transfer(address _to, uint256 _value) {\n', '          if((balances[msg.sender] < _value) || (balances[_to] + _value <= balances[_to])) {\n', '               throw;\n', '          }\n', '\n', '          balances[msg.sender] -= _value;\n', '          balances[_to] += _value;\n', '          Transfer(msg.sender, _to, _value);\n', '     }\n', '\n', '     function transferFrom(address _from, address _to, uint256 _value) {\n', '          if((balances[_from] < _value) || \n', '               (allowed[_from][msg.sender] < _value) || \n', '               (balances[_to] + _value <= balances[_to])) \n', '          {\n', '               throw;\n', '          }\n', '\n', '          balances[_to] += _value;\n', '          balances[_from] -= _value;\n', '          allowed[_from][msg.sender] -= _value;\n', '\n', '          Transfer(_from, _to, _value);\n', '     }\n', '\n', '     function balanceOf(address _owner) constant returns (uint256 balance) {\n', '          return balances[_owner];\n', '     }\n', '\n', '     function approve(address _spender, uint256 _value) returns (bool success) {\n', '          allowed[msg.sender][_spender] = _value;\n', '          Approval(msg.sender, _spender, _value);\n', '\n', '          return true;\n', '     }\n', '\n', '     function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '          return allowed[_owner][_spender];\n', '     }\n', '\n', '     modifier onlyPayloadSize(uint _size) {\n', '          if(msg.data.length < _size + 4) {\n', '               throw;\n', '          }\n', '          _;\n', '     }\n', '}\n', '\n', 'contract GOLD is StdToken {\n', '/// Fields:\n', '     string public constant name = "Goldmint GOLD Token";\n', '     string public constant symbol = "GOLD";\n', '     uint public constant decimals = 18;\n', '\n', '     address public creator = 0x0;\n', '     address public tokenManager = 0x0;\n', '\n', '     // lock by default all methods\n', '     bool public lock = true;\n', '\n', '/// Modifiers:\n', '     modifier onlyCreator() { if(msg.sender != creator) throw; _; }\n', '     modifier onlyCreatorOrTokenManager() { if((msg.sender!=creator) && (msg.sender!=tokenManager)) throw; _; }\n', '\n', '     function setCreator(address _creator) onlyCreator {\n', '          creator = _creator;\n', '     }\n', '\n', '     function setTokenManager(address _manager) onlyCreator {\n', '          tokenManager = _manager;\n', '     }\n', '\n', '     function lockContract(bool _lock) onlyCreator {\n', '          lock = _lock;\n', '     }\n', '\n', '/// Functions:\n', '     /// @dev Constructor\n', '     function GOLD() {\n', '          creator = msg.sender;\n', '          tokenManager = msg.sender;\n', '     }\n', '\n', '     /// @dev Override\n', '     function transfer(address _to, uint256 _value) public {\n', '          if(lock && (msg.sender!=tokenManager)){\n', '               throw;\n', '          }\n', '\n', '          super.transfer(_to,_value);\n', '     }\n', '\n', '     /// @dev Override\n', '     function transferFrom(address _from, address _to, uint256 _value)public{\n', '          if(lock && (msg.sender!=tokenManager)){\n', '               throw;\n', '          }\n', '\n', '          super.transferFrom(_from,_to,_value);\n', '     }\n', '\n', '     /// @dev Override\n', '     function approve(address _spender, uint256 _value) public returns (bool) {\n', '          if(lock && (msg.sender!=tokenManager)){\n', '               throw;\n', '          }\n', '\n', '          return super.approve(_spender,_value);\n', '     }\n', '\n', '     function issueTokens(address _who, uint _tokens) onlyCreatorOrTokenManager {\n', '          if(lock && (msg.sender!=tokenManager)){\n', '               throw;\n', '          }\n', '\n', '          balances[_who] += _tokens;\n', '          totalSupply += _tokens;\n', '     }\n', '\n', '     function burnTokens(address _who, uint _tokens) onlyCreatorOrTokenManager {\n', '          if(lock && (msg.sender!=tokenManager)){\n', '               throw;\n', '          }\n', '\n', '          balances[_who] = safeSub(balances[_who], _tokens);\n', '          totalSupply = safeSub(totalSupply, _tokens);\n', '     }\n', '\n', '     // Do not allow to send money directly to this contract\n', '     function() {\n', '          throw;\n', '     }\n', '}']
