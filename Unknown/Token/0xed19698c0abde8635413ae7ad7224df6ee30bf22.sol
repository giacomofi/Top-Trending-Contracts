['pragma solidity ^0.4.11;\n', '\n', 'contract Owned {\n', '\n', '    address owner;\n', '    \n', '    function Owned() { owner = msg.sender; }\n', '\n', '    modifier onlyOwner { require(msg.sender == owner); _; }\n', '}\n', '\n', '/**\n', ' * @title SafeMath (from https://github.com/OpenZeppelin/zeppelin-solidity/blob/4d91118dd964618863395dcca25a50ff137bf5b6/contracts/math/SafeMath.sol)\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'contract SafeMath {\n', '    \n', '    function safeMul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function safeSub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function safeAdd(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract TokenERC20 {\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '}\n', '\n', 'contract TokenNotifier {\n', '\n', '    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n', '}\n', '\n', 'contract ImmortalToken is Owned, SafeMath, TokenERC20 {\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    \n', '    uint8 public constant decimals = 0;\n', '    uint8 public constant totalSupply = 100;\n', '    string public constant name = &#39;Immortal&#39;;\n', '    string public constant symbol = &#39;IMT&#39;;\n', '    string public constant version = &#39;1.0.0&#39;;\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        if (balances[msg.sender] < _value) return false;\n', '        balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '        assert(balances[msg.sender] >= 0);\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        assert(balances[_to] <= totalSupply);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if(balances[msg.sender] < _value || allowed[_from][msg.sender] < _value) return false;\n', '        balances[_from] = safeSub(balances[_from], _value);\n', '        assert(balances[_from] >= 0);\n', '        allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        assert(balances[_to] <= totalSupply);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        if(!approve(_spender, _value)) return false;\n', '        TokenNotifier(_spender).receiveApproval(msg.sender, _value, this, _extraData);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', 'contract Immortals is ImmortalToken {\n', '\n', '    uint256 public tokenAssigned = 0;\n', '\n', '    event Assigned(address _contributor, uint256 _immortals);\n', '\n', '    function () payable {\n', '\t\t//Assign immortals based on ethers sent\n', '        require(tokenAssigned < totalSupply && msg.value >= 0.5 ether);\n', '\t\tuint256 immortals = msg.value / 0.5 ether;\n', '\t\tuint256 remainder = 0;\n', '\t\t//Find the remainder\n', '\t\tif( safeAdd(tokenAssigned, immortals) > totalSupply ) {\n', '\t\t\timmortals = totalSupply - tokenAssigned;\n', '\t\t\tremainder = msg.value - (immortals * 0.5 ether);\n', '\t\t} else {\n', '\t\t\tremainder = (msg.value % 0.5 ether);\n', '\t\t}\t\n', '\t\trequire(safeAdd(tokenAssigned, immortals) <= totalSupply);\n', '\t\tbalances[msg.sender] = safeAdd(balances[msg.sender], immortals);\n', '\t\ttokenAssigned = safeAdd(tokenAssigned, immortals);\n', '\t\tassert(balances[msg.sender] <= totalSupply);\n', '\t\t//Send remainder to sender\n', '\t\tmsg.sender.transfer(remainder);\n', '\t\t//Send ethers to owner\n', '\t\towner.transfer(this.balance);\n', '\t\tassert(this.balance == 0);\n', '\t\tAssigned(msg.sender, immortals);\n', '    }\n', '}']
['pragma solidity ^0.4.11;\n', '\n', 'contract Owned {\n', '\n', '    address owner;\n', '    \n', '    function Owned() { owner = msg.sender; }\n', '\n', '    modifier onlyOwner { require(msg.sender == owner); _; }\n', '}\n', '\n', '/**\n', ' * @title SafeMath (from https://github.com/OpenZeppelin/zeppelin-solidity/blob/4d91118dd964618863395dcca25a50ff137bf5b6/contracts/math/SafeMath.sol)\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'contract SafeMath {\n', '    \n', '    function safeMul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function safeSub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function safeAdd(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract TokenERC20 {\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '}\n', '\n', 'contract TokenNotifier {\n', '\n', '    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n', '}\n', '\n', 'contract ImmortalToken is Owned, SafeMath, TokenERC20 {\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    \n', '    uint8 public constant decimals = 0;\n', '    uint8 public constant totalSupply = 100;\n', "    string public constant name = 'Immortal';\n", "    string public constant symbol = 'IMT';\n", "    string public constant version = '1.0.0';\n", '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        if (balances[msg.sender] < _value) return false;\n', '        balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '        assert(balances[msg.sender] >= 0);\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        assert(balances[_to] <= totalSupply);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if(balances[msg.sender] < _value || allowed[_from][msg.sender] < _value) return false;\n', '        balances[_from] = safeSub(balances[_from], _value);\n', '        assert(balances[_from] >= 0);\n', '        allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        assert(balances[_to] <= totalSupply);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        if(!approve(_spender, _value)) return false;\n', '        TokenNotifier(_spender).receiveApproval(msg.sender, _value, this, _extraData);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', 'contract Immortals is ImmortalToken {\n', '\n', '    uint256 public tokenAssigned = 0;\n', '\n', '    event Assigned(address _contributor, uint256 _immortals);\n', '\n', '    function () payable {\n', '\t\t//Assign immortals based on ethers sent\n', '        require(tokenAssigned < totalSupply && msg.value >= 0.5 ether);\n', '\t\tuint256 immortals = msg.value / 0.5 ether;\n', '\t\tuint256 remainder = 0;\n', '\t\t//Find the remainder\n', '\t\tif( safeAdd(tokenAssigned, immortals) > totalSupply ) {\n', '\t\t\timmortals = totalSupply - tokenAssigned;\n', '\t\t\tremainder = msg.value - (immortals * 0.5 ether);\n', '\t\t} else {\n', '\t\t\tremainder = (msg.value % 0.5 ether);\n', '\t\t}\t\n', '\t\trequire(safeAdd(tokenAssigned, immortals) <= totalSupply);\n', '\t\tbalances[msg.sender] = safeAdd(balances[msg.sender], immortals);\n', '\t\ttokenAssigned = safeAdd(tokenAssigned, immortals);\n', '\t\tassert(balances[msg.sender] <= totalSupply);\n', '\t\t//Send remainder to sender\n', '\t\tmsg.sender.transfer(remainder);\n', '\t\t//Send ethers to owner\n', '\t\towner.transfer(this.balance);\n', '\t\tassert(this.balance == 0);\n', '\t\tAssigned(msg.sender, immortals);\n', '    }\n', '}']
