['pragma solidity ^0.4.14;\n', 'contract Ownable {\n', '  address public owner;\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract TUDOR is Ownable {\n', '  string public constant name = "TUDOR";\n', '  string public constant symbol = "TDR";\n', '  uint8 public constant decimals = 18;\n', '  uint256 public totalSupply;\n', '  mapping(address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '  \n', '  function TUDOR() {\n', '    balances[msg.sender] = 100000000000000000000000000;\n', '    totalSupply = 100000000000000000000000000;\n', '  }\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '  \n', '  function transfer(address _to, uint256 _amount) returns (bool success) {\n', '    if (balances[msg.sender] >= _amount \n', '      && _amount > 0\n', '      && balances[_to] + _amount > balances[_to]) {\n', '        balances[msg.sender] -= _amount;\n', '        balances[_to] += _amount;\n', '        Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    } else {\n', '      return false;\n', '    }\n', '  }\n', '\n', '  function transferFrom(\n', '       address _from,\n', '       address _to,\n', '       uint256 _amount\n', '   ) returns (bool success) {\n', '       if (balances[_from] >= _amount\n', '           && allowed[_from][msg.sender] >= _amount\n', '           && _amount > 0\n', '           && balances[_to] + _amount > balances[_to]) {\n', '           balances[_from] -= _amount;\n', '           allowed[_from][msg.sender] -= _amount;\n', '           balances[_to] += _amount;\n', '           Transfer(_from, _to, _amount);\n', '           return true;\n', '      } else {\n', '           return false;\n', '       }\n', '  }\n', '  \n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '  \n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '  \n', '  function issueCoins(uint256 _value, address _to) onlyOwner returns (bool) {        \n', '        balances[_to] += _value;\n', '        totalSupply += _value;\n', '        Transfer(0, owner, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '  function chargebackCoins(uint256 _value, address _to) onlyOwner returns (bool) {\n', '    if ((balances[_to] - _value) < 0)\n', '            throw;\n', '\n', '    balances[_to] -= _value;\n', '    totalSupply -= _value;\n', '    Transfer(0, owner, 0);\n', '    return true;\n', '    }\n', '\n', '}']