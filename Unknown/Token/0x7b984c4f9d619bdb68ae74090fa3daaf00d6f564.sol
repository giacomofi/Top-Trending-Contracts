['pragma solidity ^0.4.11;\n', '\n', 'contract KolkhaToken {\n', '  /////////////////////////////////////////////////////////////////////////\n', '  mapping (address => uint) public balanceOf;           //All of the balances of the users (public)\n', '  string  public constant name = "Kolkha";         //Name of the coin\n', '  string public constant symbol = "KHC";                //Coin&#39;s symbol\n', '  uint8 public constant decimals = 6;\n', '  uint public totalSupply;                              //Total supply of coins\n', '\n', '  event Transfer(address indexed from, address indexed to, uint value); //Event indicating a transaction\n', '  //////////////////////////////////////////////////////////////////////////\n', '\n', '  function KolkhaToken(uint initSupply) {\n', '    balanceOf[msg.sender] = initSupply;\n', '    totalSupply = initSupply;\n', '  }\n', '\n', '\n', '  //Transfer transaction function\n', '  function transfer(address _to, uint _value) returns (bool)\n', '  {\n', '    assert(msg.data.length == 2*32 + 4);\n', '    require(balanceOf[msg.sender] >= _value); //Not enough balanceOf\n', '    require(balanceOf[_to] + _value >= balanceOf[_to]); //Balance overflow, integer too large (or negative)\n', '\n', '    //In case of no exceptions\n', '    balanceOf[msg.sender] -= _value;\n', '    balanceOf[_to] += _value;\n', '\n', '    Transfer(msg.sender, _to, _value); //Call the event\n', '    return true;\n', '  }\n', '}']
['pragma solidity ^0.4.11;\n', '\n', 'contract KolkhaToken {\n', '  /////////////////////////////////////////////////////////////////////////\n', '  mapping (address => uint) public balanceOf;           //All of the balances of the users (public)\n', '  string  public constant name = "Kolkha";         //Name of the coin\n', '  string public constant symbol = "KHC";                //Coin\'s symbol\n', '  uint8 public constant decimals = 6;\n', '  uint public totalSupply;                              //Total supply of coins\n', '\n', '  event Transfer(address indexed from, address indexed to, uint value); //Event indicating a transaction\n', '  //////////////////////////////////////////////////////////////////////////\n', '\n', '  function KolkhaToken(uint initSupply) {\n', '    balanceOf[msg.sender] = initSupply;\n', '    totalSupply = initSupply;\n', '  }\n', '\n', '\n', '  //Transfer transaction function\n', '  function transfer(address _to, uint _value) returns (bool)\n', '  {\n', '    assert(msg.data.length == 2*32 + 4);\n', '    require(balanceOf[msg.sender] >= _value); //Not enough balanceOf\n', '    require(balanceOf[_to] + _value >= balanceOf[_to]); //Balance overflow, integer too large (or negative)\n', '\n', '    //In case of no exceptions\n', '    balanceOf[msg.sender] -= _value;\n', '    balanceOf[_to] += _value;\n', '\n', '    Transfer(msg.sender, _to, _value); //Call the event\n', '    return true;\n', '  }\n', '}']
