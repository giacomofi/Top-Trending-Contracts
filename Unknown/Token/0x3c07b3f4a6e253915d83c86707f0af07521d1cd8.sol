['pragma solidity ^0.4.14;\n', '\n', ' contract ERC20Interface {\n', '     function totalSupply() constant returns (uint256 totalSupply);\n', '     function balanceOf(address _owner) constant returns (uint256 balance);\n', '     function transfer(address _to, uint256 _value) returns (bool success);\n', '     function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '     function approve(address _spender, uint256 _value) returns (bool success);\n', '     function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '     event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '     event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', ' }\n', '  \n', ' contract APIHeaven is ERC20Interface {\n', '     string public constant symbol = "☁";\n', '     string public constant name = "API Heaven clouds";\n', '     uint8 public constant decimals = 0;\n', '     uint256 _totalSupply = 1000000000000000; \n', '     \n', '     uint256 public cloudsPerEth = 300000;\n', '     \n', '     address public owner;\n', '\n', '     bool public selling = false;\n', '  \n', '     mapping(address => uint256) balances;\n', '  \n', '     mapping(address => mapping (address => uint256)) allowed;\n', '  \n', '     modifier onlyOwner() {\n', '         if (msg.sender != owner) {\n', '             revert();\n', '         }\n', '         _;\n', '     }\n', '\n', '    \n', '     function transferOwnership(address newOwner) onlyOwner {\n', '        balances[newOwner] = balances[owner];\n', '        balances[owner] = 0;\n', '        owner = newOwner;\n', '    }\n', '\n', '    \n', '     function changeCloudsPerEth(uint256 newcloudworth) onlyOwner {\n', '        cloudsPerEth = newcloudworth;\n', '    }\n', '\n', '    \n', '    function changeSale(bool _sale) onlyOwner {\n', '        selling = _sale;\n', '    }\n', '  \n', '     function APIHeaven() {\n', '         owner = msg.sender;\n', '         balances[owner] = _totalSupply;\n', '     }\n', '  \n', '     function totalSupply() constant returns (uint256 totalSupply) {\n', '         totalSupply = _totalSupply;\n', '     }\n', '  \n', '     function balanceOf(address _owner) constant returns (uint256 balance) {\n', '         return balances[_owner];\n', '     }\n', '    function transfer(address _to, uint256 _amount) returns (bool success) {\n', '        \n', '        if (balances[msg.sender] >= _amount \n', '            && _amount > 0\n', '            && balances[_to] + _amount > balances[_to]) {\n', '            balances[msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(msg.sender, _to, _amount);\n', '            \n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '    function sale() payable {\n', '        if(selling == false) revert();     \n', '        uint256 amount = (msg.value / 1000000000000000) * cloudsPerEth;              \n', '        if (balances[owner] < amount) revert();            \n', '        balances[msg.sender] += amount;                \n', '        balances[owner] -= amount;                      \n', '        Transfer(owner, msg.sender, amount);             \n', '    }\n', '  \n', '     function transferFrom(\n', '         address _from,\n', '         address _to,\n', '         uint256 _amount\n', '    ) returns (bool success) {\n', '        if (balances[_from] >= _amount\n', '            && allowed[_from][msg.sender] >= _amount\n', '            && _amount > 0\n', '            && balances[_to] + _amount > balances[_to]) {\n', '            balances[_from] -= _amount;\n', '            allowed[_from][msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(_from, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function approve(address _spender, uint256 _amount) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', ' \n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}']
['pragma solidity ^0.4.14;\n', '\n', ' contract ERC20Interface {\n', '     function totalSupply() constant returns (uint256 totalSupply);\n', '     function balanceOf(address _owner) constant returns (uint256 balance);\n', '     function transfer(address _to, uint256 _value) returns (bool success);\n', '     function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '     function approve(address _spender, uint256 _value) returns (bool success);\n', '     function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '     event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '     event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', ' }\n', '  \n', ' contract APIHeaven is ERC20Interface {\n', '     string public constant symbol = "☁";\n', '     string public constant name = "API Heaven clouds";\n', '     uint8 public constant decimals = 0;\n', '     uint256 _totalSupply = 1000000000000000; \n', '     \n', '     uint256 public cloudsPerEth = 300000;\n', '     \n', '     address public owner;\n', '\n', '     bool public selling = false;\n', '  \n', '     mapping(address => uint256) balances;\n', '  \n', '     mapping(address => mapping (address => uint256)) allowed;\n', '  \n', '     modifier onlyOwner() {\n', '         if (msg.sender != owner) {\n', '             revert();\n', '         }\n', '         _;\n', '     }\n', '\n', '    \n', '     function transferOwnership(address newOwner) onlyOwner {\n', '        balances[newOwner] = balances[owner];\n', '        balances[owner] = 0;\n', '        owner = newOwner;\n', '    }\n', '\n', '    \n', '     function changeCloudsPerEth(uint256 newcloudworth) onlyOwner {\n', '        cloudsPerEth = newcloudworth;\n', '    }\n', '\n', '    \n', '    function changeSale(bool _sale) onlyOwner {\n', '        selling = _sale;\n', '    }\n', '  \n', '     function APIHeaven() {\n', '         owner = msg.sender;\n', '         balances[owner] = _totalSupply;\n', '     }\n', '  \n', '     function totalSupply() constant returns (uint256 totalSupply) {\n', '         totalSupply = _totalSupply;\n', '     }\n', '  \n', '     function balanceOf(address _owner) constant returns (uint256 balance) {\n', '         return balances[_owner];\n', '     }\n', '    function transfer(address _to, uint256 _amount) returns (bool success) {\n', '        \n', '        if (balances[msg.sender] >= _amount \n', '            && _amount > 0\n', '            && balances[_to] + _amount > balances[_to]) {\n', '            balances[msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(msg.sender, _to, _amount);\n', '            \n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '    function sale() payable {\n', '        if(selling == false) revert();     \n', '        uint256 amount = (msg.value / 1000000000000000) * cloudsPerEth;              \n', '        if (balances[owner] < amount) revert();            \n', '        balances[msg.sender] += amount;                \n', '        balances[owner] -= amount;                      \n', '        Transfer(owner, msg.sender, amount);             \n', '    }\n', '  \n', '     function transferFrom(\n', '         address _from,\n', '         address _to,\n', '         uint256 _amount\n', '    ) returns (bool success) {\n', '        if (balances[_from] >= _amount\n', '            && allowed[_from][msg.sender] >= _amount\n', '            && _amount > 0\n', '            && balances[_to] + _amount > balances[_to]) {\n', '            balances[_from] -= _amount;\n', '            allowed[_from][msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(_from, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function approve(address _spender, uint256 _amount) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', ' \n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}']
