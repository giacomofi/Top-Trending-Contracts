['pragma solidity ^0.4.10;\n', '\n', '// ----------------------------------------------------------------------------\n', '// The EncryptoTel smart contract - provided by Incent - join us on slack; \n', '// http://incentinvites.herokuapp.com/\n', '//\n', '// A collaboration between Incent, Bok and EncryptoTel :)\n', '//\n', '// Enjoy. (c) Incent Loyalty Pty Ltd and Bok Consulting Pty Ltd 2017. \n', '// The MIT Licence.\n', '// ----------------------------------------------------------------------------\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract configuration\n', '// ----------------------------------------------------------------------------\n', 'contract TokenConfig {\n', '    string public constant symbol = "ETT";\n', '    string public constant name = "EncryptoTel Token";\n', '    uint8 public constant decimals = 8;  // 8 decimals, same as tokens on Waves\n', '    uint256 public constant TOTALSUPPLY = 7766398700000000;\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/issues/20\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) \n', '        returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant \n', '        returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, \n', '        uint256 _value);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        if (msg.sender != owner) throw;\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() {\n', '        if (msg.sender != newOwner) throw;\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// WavesEthereumSwap functionality\n', '// ----------------------------------------------------------------------------\n', 'contract WavesEthereumSwap is Owned, ERC20Interface {\n', '    event WavesTransfer(address indexed _from, string wavesAddress,\n', '        uint256 amount);\n', '\n', '    function moveToWaves(string wavesAddress, uint256 amount) {\n', '        if (!transfer(owner, amount)) throw;\n', '        WavesTransfer(msg.sender, wavesAddress, amount);\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/issues/20\n', '// ----------------------------------------------------------------------------\n', 'contract EncryptoTelToken is TokenConfig, WavesEthereumSwap {\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Balances for each account\n', '    // ------------------------------------------------------------------------\n', '    mapping(address => uint256) balances;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner of account approves the transfer of an amount to another account\n', '    // ------------------------------------------------------------------------\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    function EncryptoTelToken() Owned() TokenConfig() {\n', '        totalSupply = TOTALSUPPLY;\n', '        balances[owner] = TOTALSUPPLY;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the account balance of another account with address _owner\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from owner's account to another account\n", '    // ------------------------------------------------------------------------\n', '    function transfer(\n', '        address _to, \n', '        uint256 _amount\n', '    ) returns (bool success) {\n', '        if (balances[msg.sender] >= _amount             // User has balance\n', '            && _amount > 0                              // Non-zero transfer\n', '            && balances[_to] + _amount > balances[_to]  // Overflow check\n', '        ) {\n', '            balances[msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(msg.sender, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Allow _spender to withdraw from your account, multiple times, up to the\n', '    // _value amount. If this function is called again it overwrites the\n', '    // current allowance with _value.\n', '    // ------------------------------------------------------------------------\n', '    function approve(\n', '        address _spender,\n', '        uint256 _amount\n', '    ) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Spender of tokens transfer an amount of tokens from the token owner's\n", '    // balance to another account. The owner of the tokens must already\n', '    // have approve(...)-d this transfer\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', '    ) returns (bool success) {\n', '        if (balances[_from] >= _amount                  // From a/c has balance\n', '            && allowed[_from][msg.sender] >= _amount    // Transfer approved\n', '            && _amount > 0                              // Non-zero transfer\n', '            && balances[_to] + _amount > balances[_to]  // Overflow check\n', '        ) {\n', '            balances[_from] -= _amount;\n', '            allowed[_from][msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(_from, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    // ------------------------------------------------------------------------\n', '    function allowance(\n', '        address _owner, \n', '        address _spender\n', '    ) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(\n', '        address tokenAddress, \n', '        uint256 amount\n', '    ) onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, amount);\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', "    // Don't accept ethers\n", '    // ------------------------------------------------------------------------\n', '    function () {\n', '        throw;\n', '    }\n', '}']