['pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control \n', ' * functions, this simplifies the implementation of "user permissions". \n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /** \n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner. \n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to. \n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will recieve the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract XxxToken is MintableToken {\n', '    // Token Info.\n', '    string public constant name = "XXX Token";\n', '    string public constant symbol = "XXX";\n', '    uint8 public constant decimals = 18;\n', '}\n', '\n', 'contract XxxTokenSale is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    // Sale period.\n', '    uint256 public startDate;\n', '    uint256 public endDate;\n', '\n', '    // Cap USD 25mil @ 200 ETH/USD\n', '    uint256 public cap;\n', '\n', '    // Address where funds are collected.\n', '    address public wallet;\n', '\n', '    // Amount of raised money in wei.\n', '    uint256 public weiRaised;\n', '\n', '    // Actual Token contract\n', '    XxxToken public token;\n', '\n', '    // Event\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary,\n', '                        uint256 value, uint256 amount);\n', '    event TokenReserveMinted(uint256 amount);\n', '\n', '    // Modifiers\n', '    modifier initialized() {\n', '        require(address(token) != 0x0);\n', '        _;\n', '    }\n', '\n', '    function XxxTokenSale() {\n', '    }\n', '\n', '    function initialize(XxxToken _token, address _wallet,\n', '                        uint256 _start, uint256 _end,\n', '                        uint256 _cap) onlyOwner {\n', '        require(address(token) == address(0));\n', '        require(_token.owner() == address(this));\n', '        require(_start >= getCurrentTimestamp());\n', '        require(_start < _end);\n', '        require(_wallet != 0x0);\n', '\n', '        token = _token;\n', '        wallet = _wallet;\n', '        startDate = _start;\n', '        endDate = _end;\n', '        cap = _cap;\n', '    }\n', '\n', '    function getCurrentTimestamp() internal returns (uint256) {\n', '        return now;\n', '    }\n', '\n', '    // fallback function can be used to buy tokens\n', '    function () payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    function getRateAt(uint256 at) constant returns (uint256) {\n', '        if (at < startDate) {\n', '            return 0;\n', '        } else if (at < (startDate + 7 days)) {\n', '            return 2000;\n', '        } else if (at < (startDate + 14 days)) {\n', '            return 1800;\n', '        } else if (at < (startDate + 21 days)) {\n', '            return 1700;\n', '        } else if (at < (startDate + 28 days)) {\n', '            return 1600;\n', '        } else if (at < (startDate + 35 days)) {\n', '            return 1500;\n', '        } else if (at < (startDate + 49 days)) {\n', '            return 1400;\n', '        } else if (at < (startDate + 63 days)) {\n', '            return 1300;\n', '        } else if (at < (startDate + 77 days)) {\n', '            return 1200;\n', '        } else if (at <= endDate) {\n', '            return 1100;\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '\n', '    function buyTokens(address beneficiary) payable {\n', '        require(beneficiary != 0x0);\n', '        require(msg.value != 0);\n', '        require(saleActive());\n', '\n', '        uint256 weiAmount = msg.value;\n', '        uint256 updatedWeiRaised = weiRaised.add(weiAmount);\n', '\n', '        // Can not exceed cap.\n', '        require(updatedWeiRaised <= cap);\n', '\n', '        // calculate token amount to be created\n', '        uint256 actualRate = getRateAt(getCurrentTimestamp());\n', '        uint256 tokens = weiAmount.mul(actualRate);\n', '\n', '        // Update state.\n', '        weiRaised = updatedWeiRaised;\n', '\n', '        // Mint Token and give it to sender.\n', '        token.mint(beneficiary, tokens);\n', '        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '        // Forward the fund to fund collection wallet.\n', '        wallet.transfer(msg.value);\n', '    }\n', '\n', '    function finalize() onlyOwner {\n', '        require(!saleActive());\n', '\n', '        // Allocate 20% for AirPorn (for development, marketing, etc...)\n', '        uint256 xxxToReserve = SafeMath.div(token.totalSupply(), 5);\n', '        token.mint(wallet, xxxToReserve);\n', '        TokenReserveMinted(xxxToReserve);\n', '\n', '        // Finish minting as we no longer want to mint any new token after the\n', '        // sale.\n', '        token.finishMinting();\n', '    }\n', '\n', '    function saleActive() public constant returns (bool) {\n', '        return (getCurrentTimestamp() >= startDate &&\n', '                getCurrentTimestamp() <= endDate && weiRaised < cap);\n', '    }\n', '}']