['/**\n', ' *  NotaryPlatformToken.sol v1.0.1\n', ' * \n', ' *  Bilal Arif - https://twitter.com/furusiyya_\n', ' *  Notary Platform\n', ' */\n', '\n', 'pragma solidity ^0.4.16;\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '    \n', '    function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '    \n', '    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    \n', '    function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', 'contract Ownable {\n', '     /*\n', '      @title Ownable\n', '      @dev The Ownable contract has an owner address, and provides basic authorization control\n', '      functions, this simplifies the implementation of "user permissions".\n', '    */\n', '\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable(address _owner){\n', '    owner = _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '  \n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '}\n', 'contract ReentrancyGuard {\n', '\n', '  /**\n', '   * @dev We use a single lock for the whole contract.\n', '   */\n', '  bool private rentrancy_lock = false;\n', '\n', '  /**\n', '   * @dev Prevents a contract from calling itself, directly or indirectly.\n', '   * @notice If you mark a function `nonReentrant`, you should also\n', '   * mark it `external`. Calling one nonReentrant function from\n', '   * another is not supported. Instead, you can implement a\n', '   * `private` function doing the actual work, and a `external`\n', '   * wrapper marked as `nonReentrant`.\n', '   */\n', '  modifier nonReentrant() {\n', '    require(!rentrancy_lock);\n', '    rentrancy_lock = true;\n', '    _;\n', '    rentrancy_lock = false;\n', '  }\n', '\n', '}\n', 'contract Pausable is Ownable {\n', '  \n', '  event Pause(bool indexed state);\n', '\n', '  bool private paused = false;\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev return the current state of contract\n', '   */\n', '  function Paused() external constant returns(bool){ return paused; }\n', '\n', '  /**\n', '   * @dev called by the owner to pause or unpause, triggers stopped state\n', '   * on first call and returns to normal state on second call\n', '   */\n', '  function tweakState() external onlyOwner {\n', '    paused = !paused;\n', '    Pause(paused);\n', '  }\n', '\n', '}\n', 'contract Allocations{\n', '\n', '\t// timestamp when token release is enabled\n', '  \tuint256 private releaseTime;\n', '\n', '\tmapping (address => uint256) private allocations;\n', '\n', '\tfunction Allocations(){\n', '\t\treleaseTime = now + 198 days;\n', '\t\tallocate();\n', '\t}\n', '\n', '\t/**\n', '\t * @notice NTRY Token distribution between team members.\n', '\t */\n', '    function allocate() private {\n', '      allocations[0xab1cb1740344A9280dC502F3B8545248Dc3045eA] = 4000000 * 1 ether;\n', '      allocations[0x330709A59Ab2D1E1105683F92c1EE8143955a357] = 4000000 * 1 ether;\n', '      allocations[0xAa0887fc6e8896C4A80Ca3368CFd56D203dB39db] = 3000000 * 1 ether;\n', '      allocations[0x1fbA1d22435DD3E7Fa5ba4b449CC550a933E72b3] = 200000 * 1 ether;\n', '      allocations[0xC9d5E2c7e40373ae576a38cD7e62E223C95aBFD4] = 200000 * 1 ether;\n', '      allocations[0xabc0B64a38DE4b767313268F0db54F4cf8816D9C] = 220000 * 1 ether;\n', '      allocations[0x5d85bCDe5060C5Bd00DBeDF5E07F43CE3Ccade6f] = 50000 * 1 ether;\n', '      allocations[0xecb1b0231CBC0B04015F9e5132C62465C128B578] = 500000 * 1 ether;\n', '      allocations[0xFF22FA2B3e5E21817b02a45Ba693B7aC01485a9C] = 2955000 * 1 ether;\n', '    }\n', '\n', '\t/**\n', '\t * @notice Transfers tokens held by timelock to beneficiary.\n', '\t */\n', '\tfunction release() internal returns (uint256 amount){\n', '\t\tamount = allocations[msg.sender];\n', '\t\tallocations[msg.sender] = 0;\n', '\t\treturn amount;\n', '\t}\n', '\n', '\t/**\n', '  \t * @dev returns releaseTime\n', '  \t */\n', '\tfunction RealeaseTime() external constant returns(uint256){ return releaseTime; }\n', '\n', '    modifier timeLock() { \n', '\t\trequire(now >= releaseTime);\n', '\t\t_; \n', '\t}\n', '\n', '\tmodifier isTeamMember() { \n', '\t\trequire(allocations[msg.sender] >= 10000 * 1 ether); \n', '\t\t_; \n', '\t}\n', '\n', '}\n', '\n', 'contract NotaryPlatformToken is Pausable, Allocations, ReentrancyGuard{\n', '\n', '  using SafeMath for uint256;\n', '\n', '  string constant public name = "Notary Platform Token";\n', '  string constant public symbol = "NTRY";\n', '  uint8 constant public decimals = 18;\n', '  uint256 public totalSupply = 150000000 * 1 ether;\n', '  string constant version = "v1.0.1";\n', '\n', '  mapping(address => uint256) private balances;\n', '  mapping (address => mapping (address => uint256)) private allowed;\n', '\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '  function NotaryPlatformToken() Ownable(0x1538EF80213cde339A333Ee420a85c21905b1b2D){\n', '    // Allocate initial balance to the owner //\n', '    balances[0x244092a2FECFC48259cf810b63BA3B3c0B811DCe] = 134875000 * 1 ether;\n', '    require(ICOParticipants(0x244092a2FECFC48259cf810b63BA3B3c0B811DCe));\n', '  }\n', '\n', '\n', '  /** Externals **/\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) external whenNotPaused onlyPayloadSize(2 * 32) returns (bool) {\n', '    require(_to != address(0));\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) external constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) external whenNotPaused returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) external whenNotPaused returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) external constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) external whenNotPaused returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) external whenNotPaused returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @notice Transfers tokens held by timelock to beneficiary.\n', '  */\n', '  function claim() external whenNotPaused nonReentrant timeLock isTeamMember {\n', '    balances[msg.sender] = balances[msg.sender].add(release());\n', '  }\n', '\n', '  /**\n', '   *                  ========== Token migration support ========\n', '   */\n', '  uint256 public totalMigrated;\n', '  bool private upgrading = false;\n', '  MigrationAgent private agent;\n', '  event Migrate(address indexed _from, address indexed _to, uint256 _value);\n', '  event Upgrading(bool status);\n', '\n', '  function migrationAgent() external constant returns(address){ return agent; }\n', '  function upgradingEnabled()  external constant returns(bool){ return upgrading; }\n', '\n', '  /**\n', '   * @notice Migrate tokens to the new token contract.\n', '   * @dev Required state: Operational Migration\n', '   * @param _value The amount of token to be migrated\n', '   */\n', '  function migrate(uint256 _value) external nonReentrant isUpgrading {\n', '    require(_value > 0);\n', '    require(_value <= balances[msg.sender]);\n', '    require(agent.isMigrationAgent());\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    totalMigrated = totalMigrated.add(_value);\n', '    \n', '    if(!agent.migrateFrom(msg.sender, _value)){\n', '      revert();\n', '    }\n', '    Migrate(msg.sender, agent, _value);\n', '  }\n', '\n', '  /**\n', '   * @notice Set address of migration target contract and enable migration\n', '   * process.\n', '   * @param _agent The address of the MigrationAgent contract\n', '   */\n', '  function setMigrationAgent(address _agent) external isUpgrading onlyOwner {\n', '    require(_agent != 0x00);\n', '    agent = MigrationAgent(_agent);\n', '    if(!agent.isMigrationAgent()){\n', '      revert();\n', '    }\n', '    \n', '    if(agent.originalSupply() != totalSupply){\n', '      revert();\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @notice Enable upgrading to allow tokens migration to new contract\n', '   * process.\n', '   */\n', '  function tweakUpgrading() external onlyOwner{\n', '      upgrading = !upgrading;\n', '      Upgrading(upgrading);\n', '  }\n', '\n', '\n', '  /** Interface marker */\n', '  function isTokenContract() external constant returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  modifier isUpgrading() { \n', '    require(upgrading); \n', '    _; \n', '  }\n', '\n', '\n', '  /**\n', '   * Fix for the ERC20 short address attack\n', '   *\n', '   * http://vessenes.com/the-erc20-short-address-attack-explained/\n', '   */\n', '  modifier onlyPayloadSize(uint size) {\n', '     require(msg.data.length == size + 4);\n', '     _;\n', '  }\n', '\n', '  function () {\n', '    //if ether is sent to this address, send it back.\n', '    revert();\n', '  }\n', '  \n', '  \n', '\n', '   function ICOParticipants(address _supplyOwner) private returns(bool){\n', '        /**\n', '         * Adresses who participated in first day of ICO and got first version of\n', '         * token. They will automatically get this latest version of token.\n', '         * ICO Contract: https://etherscan.io/address/0x34a3deb32b4705018f1e543a5867cf01aff3f15b\n', '         * Latest transaction hash: https://etherscan.io/tx/0x1d179fb045a86eed7a78e2e247c0822fc43f1a163f893996f88fdccd455d515b\n', '        */\n', '        balances[0xd0780ab2aa7309e139a1513c49fb2127ddc30d3d] = 15765750000000000000000;\n', '        balances[0x196a484db36d2f2049559551c182209143db4606] = 2866500000000000000000;\n', '        balances[0x36cfb5a6be6b130cfceb934d3ca72c1d72c3a7d8] = 28665000000000000000000;\n', '        balances[0x21c4ff1738940b3a4216d686f2e63c8dbcb7dc44] = 2866500000000000000000;\n', '        balances[0xd1f3a1a16f4ab35e5e795ce3f49ee2dff2dd683b] = 1433250000000000000000;\n', '        balances[0xd45bf2debd1c4196158dcb177d1ae910949dc00a] = 5733000000000000000000;\n', '        balances[0xdc5984a2673c46b68036076026810ffdffb695b8] = 1433250000000000000000;\n', '        balances[0x6ee541808c463116a82d76649da0502935fa8d08] = 57330000000000000000000;\n', '        balances[0xde3270049c833ff2a52f18c7718227eb36a92323] = 4948241046840000000000;\n', '        balances[0x51a51933721e4ada68f8c0c36ca6e37914a8c609] = 17199000000000000000000;\n', '        balances[0x737069e6f9f02062f4d651c5c8c03d50f6fc99c6] = 2866500000000000000000;\n', '        balances[0xa6a14a81ec752e0ed5391a22818f44aa240ffbb1] = 2149875000000000000000;\n', '        balances[0xeac8483261078517528de64956dbd405f631265c] = 11466000000000000000000;\n', '        balances[0x7736154662ba56c57b2be628fe0e44a609d33dfb] = 2866500000000000000000;\n', '        balances[0xc1c113c60ebf7d92a3d78ff7122435a1e307ce05] = 5733000000000000000000;\n', '        balances[0xfffdfaef43029d6c749ceff04f65187bd50a5311] = 2293200000000000000000;\n', '        balances[0x8854f86f4fbd88c4f16c4f3d5a5500de6d082adc] = 2866500000000000000000;\n', '        balances[0x26c32811447c8d0878b2dae7f4538ae32de82d57] = 2436525000000000000000;\n', '        balances[0xe752737dd519715ab0fa9538949d7f9249c7c168] = 2149875000000000000000;\n', '        balances[0x01ed3975993c8bebff2fb6a7472679c6f7b408fb] = 11466000000000000000000;\n', '        balances[0x7924c67c07376cf7c4473d27bee92fe82dfd26c5] = 11466000000000000000000;\n', '        balances[0xf360b24a530d29c96a26c2e34c0dabcab12639f4] = 8599500000000000000000;\n', '        balances[0x6a7f63709422a986a953904c64f10d945c8afba1] = 2866500000000000000000;\n', '        balances[0xa68b4208e0b7aacef5e7cf8d6691d5b973bad119] = 2149875000000000000000;\n', '        balances[0xb9bd4f154bb5f2be5e7db0357c54720c7f35405d] = 2149875000000000000000;\n', '        balances[0x6723f81cdc9a5d5ef2fe1bfbedb4f83bd017d3dc] = 5446350000000000000000;\n', '        balances[0x8f066f3d9f75789d9f126fdd7cfbcc38a768985d] = 146737500000000000000000;\n', '        balances[0xf49c6e7e36a714bbc162e31ca23a04e44dcaf567] = 25769835000000000000000;\n', '        balances[0x1538ef80213cde339a333ee420a85c21905b1b2d] = 2730000000000000000000;\n', '        balances[0x81a837cc83b55a67351c1070920f061dda307348] = 25511850000000000000000;\n', '        balances[_supplyOwner] -= 417961751000000000000000;\n', '        return true;\n', ' \t}\n', '\n', '}\n', '\n', '/// @title Migration Agent interface\n', 'contract MigrationAgent {\n', '\n', '  uint256 public originalSupply;\n', '  \n', '  function migrateFrom(address _from, uint256 _value) external returns(bool);\n', '  \n', '  /** Interface marker */\n', '  function isMigrationAgent() external constant returns (bool) {\n', '    return true;\n', '  }\n', '}']