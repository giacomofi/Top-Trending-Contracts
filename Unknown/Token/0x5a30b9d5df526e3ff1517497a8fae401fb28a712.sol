['pragma solidity ^0.4.14;\n', '\n', '\n', '//PoW Farm SEED token buying contract\n', '//http://www.PoWFarm.io\n', '\n', '\n', 'contract SafeMath {\n', '  function safeMul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint a, uint b) internal returns (uint) {\n', '    assert(b > 0);\n', '    uint c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      throw;\n', '    }\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', 'contract ERC20 {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) constant returns (uint);\n', '  function allowance(address owner, address spender) constant returns (uint);\n', '\n', '  function transfer(address to, uint value) returns (bool ok);\n', '  function transferFrom(address from, address to, uint value) returns (bool ok);\n', '  function approve(address spender, uint value) returns (bool ok);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '\n', '\n', '\n', 'contract StandardToken is ERC20, SafeMath {\n', '\n', '  /* Token supply got increased and a new owner received these tokens */\n', '  event Minted(address receiver, uint amount);\n', '\n', '  /* Actual balances of token holders */\n', '  mapping(address => uint) balances;\n', '\n', '  /* approve() allowances */\n', '  mapping (address => mapping (address => uint)) allowed;\n', '\n', '  /* Interface declaration */\n', '  function isToken() public constant returns (bool weAre) {\n', '    return true;\n', '  }\n', '\n', '  function transfer(address _to, uint _value) returns (bool success) {\n', '      \n', '      if (_value < 1) {\n', '          revert();\n', '      }\n', '      \n', '    balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '    balances[_to] = safeAdd(balances[_to], _value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _value) returns (bool success) {\n', '      \n', '      if (_value < 1) {\n', '          revert();\n', '      }\n', '      \n', '    uint _allowance = allowed[_from][msg.sender];\n', '\n', '    balances[_to] = safeAdd(balances[_to], _value);\n', '    balances[_from] = safeSub(balances[_from], _value);\n', '    allowed[_from][msg.sender] = safeSub(_allowance, _value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function approve(address _spender, uint _value) returns (bool success) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '//PoW Farm SEED token buying contract\n', '//http://www.PoWFarm.io\n', '\n', 'contract MintableToken is StandardToken {\n', '  \n', '    \n', '    uint256 public rate = 5000;\t\t\t\t//Each ETH will get you 5000 SEED - Minimum: 0.0002 ETH for 1 SEED\n', '    address public owner = msg.sender;\t\t//Record the owner of the contract\n', '\tuint256 public tokenAmount;\n', '  \n', '    function name() constant returns (string) { return "SEED"; }\n', '    function symbol() constant returns (string) { return "SEED"; }\n', '    function decimals() constant returns (uint8) { return 0; }\n', '\t\n', '\n', '\n', '  function mint(address receiver, uint amount) public {\n', '\n', '      if (amount != ((msg.value*rate)/1 ether)) {       //prevent minting tokens by calling this function directly.\n', '          revert();\n', '      }\n', '      \n', '      if (msg.value <= 0) {                 //Extra precaution to contract attack\n', '          revert();\n', '      }\n', '      \n', '      if (amount < 1) {                     //Extra precaution to contract attack\n', '          revert();\n', '      }\n', '\n', '    totalSupply = safeAdd(totalSupply, amount);\n', '    balances[receiver] = safeAdd(balances[receiver], amount);\n', '\n', '    // This will make the mint transaction apper in EtherScan.io\n', '    // We can remove this after there is a standardized minting event\n', '    Transfer(0, receiver, amount);\n', '  }\n', '\n', '  \n', '  \n', '\t//This function is called when Ether is sent to the contract address\n', '\t//Even if 0 ether is sent.\n', 'function () payable {\n', '\t    \n', '\tif (msg.value <= 0) {\t\t//If zero or less ether is sent, refund user. \n', '\t\trevert();\n', '\t}\n', '\t\n', '\t\t\n', '\ttokenAmount = 0;\t\t\t\t\t\t\t\t//set the &#39;amount&#39; var back to zero\n', '\ttokenAmount = ((msg.value*rate)/(1 ether));\t\t//calculate the amount of tokens to give\n', '\t\n', '\tif (tokenAmount < 1) {\n', '        revert();\n', '    }\n', '      \n', '\tmint(msg.sender, tokenAmount);\n', '\ttokenAmount = 0;\t\t\t\t\t\t\t//set the &#39;amount&#39; var back to zero\n', '\t\t\n', '\t\t\n', '\towner.transfer(msg.value);\t\t\t\t\t//Send the ETH to PoW Farm.\n', '\n', '}  \n', '  \n', '  \n', '  \n', '}']
['pragma solidity ^0.4.14;\n', '\n', '\n', '//PoW Farm SEED token buying contract\n', '//http://www.PoWFarm.io\n', '\n', '\n', 'contract SafeMath {\n', '  function safeMul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint a, uint b) internal returns (uint) {\n', '    assert(b > 0);\n', '    uint c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      throw;\n', '    }\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', 'contract ERC20 {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) constant returns (uint);\n', '  function allowance(address owner, address spender) constant returns (uint);\n', '\n', '  function transfer(address to, uint value) returns (bool ok);\n', '  function transferFrom(address from, address to, uint value) returns (bool ok);\n', '  function approve(address spender, uint value) returns (bool ok);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '\n', '\n', '\n', 'contract StandardToken is ERC20, SafeMath {\n', '\n', '  /* Token supply got increased and a new owner received these tokens */\n', '  event Minted(address receiver, uint amount);\n', '\n', '  /* Actual balances of token holders */\n', '  mapping(address => uint) balances;\n', '\n', '  /* approve() allowances */\n', '  mapping (address => mapping (address => uint)) allowed;\n', '\n', '  /* Interface declaration */\n', '  function isToken() public constant returns (bool weAre) {\n', '    return true;\n', '  }\n', '\n', '  function transfer(address _to, uint _value) returns (bool success) {\n', '      \n', '      if (_value < 1) {\n', '          revert();\n', '      }\n', '      \n', '    balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '    balances[_to] = safeAdd(balances[_to], _value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _value) returns (bool success) {\n', '      \n', '      if (_value < 1) {\n', '          revert();\n', '      }\n', '      \n', '    uint _allowance = allowed[_from][msg.sender];\n', '\n', '    balances[_to] = safeAdd(balances[_to], _value);\n', '    balances[_from] = safeSub(balances[_from], _value);\n', '    allowed[_from][msg.sender] = safeSub(_allowance, _value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function approve(address _spender, uint _value) returns (bool success) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '//PoW Farm SEED token buying contract\n', '//http://www.PoWFarm.io\n', '\n', 'contract MintableToken is StandardToken {\n', '  \n', '    \n', '    uint256 public rate = 5000;\t\t\t\t//Each ETH will get you 5000 SEED - Minimum: 0.0002 ETH for 1 SEED\n', '    address public owner = msg.sender;\t\t//Record the owner of the contract\n', '\tuint256 public tokenAmount;\n', '  \n', '    function name() constant returns (string) { return "SEED"; }\n', '    function symbol() constant returns (string) { return "SEED"; }\n', '    function decimals() constant returns (uint8) { return 0; }\n', '\t\n', '\n', '\n', '  function mint(address receiver, uint amount) public {\n', '\n', '      if (amount != ((msg.value*rate)/1 ether)) {       //prevent minting tokens by calling this function directly.\n', '          revert();\n', '      }\n', '      \n', '      if (msg.value <= 0) {                 //Extra precaution to contract attack\n', '          revert();\n', '      }\n', '      \n', '      if (amount < 1) {                     //Extra precaution to contract attack\n', '          revert();\n', '      }\n', '\n', '    totalSupply = safeAdd(totalSupply, amount);\n', '    balances[receiver] = safeAdd(balances[receiver], amount);\n', '\n', '    // This will make the mint transaction apper in EtherScan.io\n', '    // We can remove this after there is a standardized minting event\n', '    Transfer(0, receiver, amount);\n', '  }\n', '\n', '  \n', '  \n', '\t//This function is called when Ether is sent to the contract address\n', '\t//Even if 0 ether is sent.\n', 'function () payable {\n', '\t    \n', '\tif (msg.value <= 0) {\t\t//If zero or less ether is sent, refund user. \n', '\t\trevert();\n', '\t}\n', '\t\n', '\t\t\n', "\ttokenAmount = 0;\t\t\t\t\t\t\t\t//set the 'amount' var back to zero\n", '\ttokenAmount = ((msg.value*rate)/(1 ether));\t\t//calculate the amount of tokens to give\n', '\t\n', '\tif (tokenAmount < 1) {\n', '        revert();\n', '    }\n', '      \n', '\tmint(msg.sender, tokenAmount);\n', "\ttokenAmount = 0;\t\t\t\t\t\t\t//set the 'amount' var back to zero\n", '\t\t\n', '\t\t\n', '\towner.transfer(msg.value);\t\t\t\t\t//Send the ETH to PoW Farm.\n', '\n', '}  \n', '  \n', '  \n', '  \n', '}']
