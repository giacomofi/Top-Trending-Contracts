['pragma solidity ^0.4.16;\n', '\n', 'contract LatiumX {\n', '    string public constant name = "LatiumX";\n', '    string public constant symbol = "LATX";\n', '    uint8 public constant decimals = 8;\n', '    uint256 public constant totalSupply =\n', '        300000000 * 10 ** uint256(decimals);\n', '\n', '    // owner of this contract\n', '    address public owner;\n', '\n', '    // balances for each account\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '    // triggered when tokens are transferred\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '\n', '    // constructor\n', '    function LatiumX() {\n', '        owner = msg.sender;\n', '        balanceOf[owner] = totalSupply;\n', '    }\n', '\n', '    // transfer the balance from sender&#39;s account to another one\n', '    function transfer(address _to, uint256 _value) {\n', '        // prevent transfer to 0x0 address\n', '        require(_to != 0x0);\n', '        // sender and recipient should be different\n', '        require(msg.sender != _to);\n', '        // check if the sender has enough coins\n', '        require(_value > 0 && balanceOf[msg.sender] >= _value);\n', '        // check for overflows\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // subtract coins from sender&#39;s account\n', '        balanceOf[msg.sender] -= _value;\n', '        // add coins to recipient&#39;s account\n', '        balanceOf[_to] += _value;\n', '        // notify listeners about this transfer\n', '        Transfer(msg.sender, _to, _value);\n', '    }\n', '}']