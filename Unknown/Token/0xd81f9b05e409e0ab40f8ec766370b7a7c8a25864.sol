['pragma solidity ^0.4.13;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS paused\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS NOT paused\n', '   */\n', '  modifier whenPaused {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused returns (bool) {\n', '    paused = true;\n', '    Pause();\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused returns (bool) {\n', '    paused = false;\n', '    Unpause();\n', '    return true;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will recieve the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Transfer(0X0, _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract HydroCoin is MintableToken, Pausable {\n', '  string public name = "H2O Token";\n', '  string public symbol = "H2O";\n', '  uint256 public decimals = 18;\n', '\n', '  //----- splitter functions\n', '\n', '\n', '    event Ev(string message, address whom, uint256 val);\n', '\n', '    struct XRec {\n', '        bool inList;\n', '        address next;\n', '        address prev;\n', '        uint256 val;\n', '    }\n', '\n', '    struct QueueRecord {\n', '        address whom;\n', '        uint256 val;\n', '    }\n', '\n', '    address public first = 0x0;\n', '    address public last = 0x0;\n', '    bool    public queueMode;\n', '    uint256 public pos;\n', '\n', '    mapping (address => XRec) public theList;\n', '\n', '    QueueRecord[]  theQueue;\n', '\n', '    function startQueueing() onlyOwner {\n', '        queueMode = true;\n', '        pos = 0;\n', '    }\n', '\n', '    function stopQueueing(uint256 num) onlyOwner {\n', '        queueMode = false;\n', '        for (uint256 i = 0; i < num; i++) {\n', '            if (pos >= theQueue.length) {\n', '                delete theQueue;\n', '                return;\n', '            }\n', '            update(theQueue[pos].whom,theQueue[pos].val);\n', '            pos++;\n', '        }\n', '        queueMode = true;\n', '    } \n', '\n', '   function queueLength() constant returns (uint256) {\n', '        return theQueue.length;\n', '    }\n', '\n', '    function addRecToQueue(address whom, uint256 val) internal {\n', '        theQueue.push(QueueRecord(whom,val));\n', '    }\n', '\n', '    // add a record to the END of the list\n', '    function add(address whom, uint256 value) internal {\n', '        theList[whom] = XRec(true,0x0,last,value);\n', '        if (last != 0x0) {\n', '            theList[last].next = whom;\n', '        } else {\n', '            first = whom;\n', '        }\n', '        last = whom;\n', '        Ev("add",whom,value);\n', '    }\n', '\n', '   function remove(address whom) internal {\n', '        if (first == whom) {\n', '            first = theList[whom].next;\n', '            theList[whom] = XRec(false,0x0,0x0,0);\n', '            Ev("remove",whom,0);\n', '            return;\n', '        }\n', '        address next = theList[whom].next;\n', '        address prev = theList[whom].prev;\n', '        if (prev != 0x0) {\n', '            theList[prev].next = next;\n', '        }\n', '        if (next != 0x0) {\n', '            theList[next].prev = prev;\n', '        }\n', '        if (last == whom) {\n', '            last = prev;\n', '        }\n', '\n', '        theList[whom] =XRec(false,0x0,0x0,0);\n', '        Ev("remove",whom,0);\n', '    }\n', '\n', '    function update(address whom, uint256 value) internal {\n', '        if (queueMode) {\n', '            addRecToQueue(whom,value);\n', '            return;\n', '        }\n', '        if (value != 0) {\n', '            if (!theList[whom].inList) {\n', '                add(whom,value);\n', '            } else {\n', '                theList[whom].val = value;\n', '                Ev("update",whom,value);\n', '            }\n', '            return;\n', '        }\n', '        if (theList[whom].inList) {\n', '                remove(whom);\n', '        }\n', '    }\n', '\n', '\n', '\n', '\n', '// ----- H20 stuff -----\n', '\n', '\n', '  /**\n', '   * @dev Allows anyone to transfer the H20 tokens once trading has started\n', '   * @param _to the recipient address of the tokens.\n', '   * @param _value number of tokens to be transfered.\n', '   */\n', '  function transfer(address _to, uint _value) whenNotPaused returns (bool) {\n', '      bool result = super.transfer(_to, _value);\n', '      update(msg.sender,balances[msg.sender]);\n', '      update(_to,balances[_to]);\n', '      return result;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows anyone to transfer the H20 tokens once trading has started\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint _value) whenNotPaused returns (bool) {\n', '      bool result = super.transferFrom(_from, _to, _value);\n', '      update(_from,balances[_from]);\n', '      update(_to,balances[_to]);\n', '      return result;\n', '  }\n', '\n', ' /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will recieve the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', ' \n', '  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n', '      bool result = super.mint(_to,_amount);\n', '      update(_to,balances[_to]);\n', '      return result;\n', '  }\n', '\n', '  function emergencyERC20Drain( ERC20 token, uint amount ) {\n', '      token.transfer(owner, amount);\n', '  }\n', ' \n', '}\n', '\n', '\n', 'contract HydroCoinPresale is Ownable,Pausable {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  HydroCoin public token;\n', '\n', '  // start and end block where investments are allowed (both inclusive)\n', '  uint256 public startTimestamp; \n', '  uint256 public endTimestamp;\n', '\n', '  // address where funds are collected\n', '  address public hardwareWallet = 0xa6128CA2eD94FB697d7058dC3Fd22740F82FF06A;\n', '\n', '  mapping (address => uint256) public deposits;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate = 125;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  // minimum contributio to participate in tokensale\n', '  uint256 public minContribution  = 50 ether;\n', '\n', '  // maximum amount of ether being raised\n', '  uint256 public hardcap  = 1500 ether; \n', '\n', '  // amount to allocate to vendors\n', '  uint256 public vendorAllocation  = 1000000 * 10 ** 18; // H20\n', '\n', '  // number of participants in presale\n', '  uint256 public numberOfPurchasers = 0;\n', '\n', '  address public companyTokens = 0xF1D5007d3884B8Ec6C2f89088b2bA28C5291C70f;\n', '\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '  event PreSaleClosed();\n', '\n', '  function setWallet(address _wallet) onlyOwner {\n', '    hardwareWallet = _wallet;\n', '  }\n', '\n', '  function HydroCoinPresale() {\n', '    startTimestamp = 1506333600;\n', '    endTimestamp = startTimestamp + 1 weeks;\n', '\n', '    token = new HydroCoin();\n', '\n', '    require(startTimestamp >= now);\n', '    require(endTimestamp >= startTimestamp);\n', '\n', '    token.mint(companyTokens, vendorAllocation);\n', '  }\n', '\n', '  // check if valid purchase\n', '  modifier validPurchase {\n', '    require(now >= startTimestamp);\n', '    require(now <= endTimestamp);\n', '    require(msg.value >= minContribution);\n', '    require(weiRaised.add(msg.value) <= hardcap);\n', '    _;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    if (now > endTimestamp)\n', '        return true;\n', '    if (weiRaised >= hardcap)\n', '        return true;\n', '    return false;\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) payable validPurchase {\n', '    require(beneficiary != 0x0);\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    if (deposits[msg.sender] == 0) {\n', '        numberOfPurchasers++;\n', '    }\n', '    deposits[msg.sender] = weiAmount.add(deposits[msg.sender]);\n', '    \n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '    hardwareWallet.transfer(msg.value);\n', '  }\n', '\n', '  // transfer ownership of the token to the owner of the presale contract\n', '  function finishPresale() public onlyOwner {\n', '    require(hasEnded());\n', '    token.transferOwnership(owner);\n', '    PreSaleClosed();\n', '  }\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '    function emergencyERC20Drain( ERC20 theToken, uint amount ) {\n', '        theToken.transfer(owner, amount);\n', '    }\n', '\n', '\n', '}']