['pragma solidity ^0.4.17;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) constant returns (uint256);\n', '    function transfer(address to, uint256 value) returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) returns (bool) {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of. \n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) constant returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) returns (bool);\n', '    function approve(address spender, uint256 value) returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    function Ownable() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardMintableToken is ERC20, BasicToken, Ownable {\n', '\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '  \n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amout of tokens to be transfered\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '        var _allowance = allowed[_from][msg.sender];\n', '\n', '        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '        // require (_value <= _allowance);\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param _owner address The address which owns the funds.\n', '    * @param _spender address The address which will spend the funds.\n', '    * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '    */\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '  \n', '   /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Mint(_to, _amount);\n', '        Transfer(0x0, _to, _amount); // so it is displayed properly on EtherScan\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '    * @dev Function to stop minting new tokens.\n', '    * @return True if the operation was successful.\n', '    */\n', '    function finishMinting() onlyOwner returns (bool) {\n', '        mintingFinished = true;\n', '        MintFinished();\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Slot Ticket\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', ' \n', 'contract SlotTicket is StandardMintableToken {\n', '\n', '    string public name = "Slot Ticket";\n', '    uint8 public decimals = 0;\n', '    string public symbol = "TICKET";\n', '    string public version = "0.6";\n', '\n', '    function destroy() onlyOwner {\n', '        // Transfer Eth to owner and terminate contract\n', '        selfdestruct(owner);\n', '    }\n', '}\n', '\n', '/**  \n', ' *  @title Slot\n', ' *  @dev every participant has an account index, the winners are picked from here\n', ' *  all winners are picked in order from the single random int \n', ' *  needs to be cleared after every game \n', ' */\n', '     \n', 'contract Slot is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    uint8   constant public SIZE =           100;        // size of the lottery\n', '    uint32  constant public JACKPOT_CHANCE = 1000000;    // one in a million\n', '    uint32  constant public INACTIVITY =     160000;     // blocks after which refunds can be claimed\n', '    uint256 constant public PRICE =          100 finney;\n', '    uint256 constant public JACK_DIST =      249 finney;\n', '    uint256 constant public DIV_DIST =       249 finney;\n', '    uint256 constant public GAS_REFUND =     2 finney;\n', '\n', '    /* \n', '    *  every participant has an account index, the winners are picked from here\n', '    *  all winners are picked in order from the single random int \n', '    *  needs to be cleared after every game\n', '    */\n', '    mapping (uint => mapping (uint => address)) public participants; // game number => counter => address\n', '    SlotTicket public ticket; // this is a receipt for the ticket, it wont affect the prize distribution\n', '    uint256 public jackpotAmount;\n', '    uint256 public gameNumber;\n', '    uint256 public gameStartedAt;\n', '    address public fund; // address to send dividends\n', '    uint256[8] public prizes = [4 ether, \n', '                                2 ether,\n', '                                1 ether, \n', '                                500 finney, \n', '                                500 finney, \n', '                                500 finney, \n', '                                500 finney, \n', '                                500 finney];\n', '    uint256 counter;\n', '\n', '    event ParticipantAdded(address indexed _participant, uint256 indexed _game, uint256 indexed _number);\n', '    event PrizeAwarded(uint256 indexed _game , address indexed _winner, uint256 indexed _amount);\n', '    event JackpotAwarded(uint256 indexed _game, address indexed _winner, uint256 indexed _amount);\n', '    event GameRefunded(uint256 _game);\n', '\n', '    function Slot(address _fundAddress) payable { // address _ticketAddress\n', '        // ticket = SlotTicket(_ticketAddress); // still need to change owner\n', '        ticket = new SlotTicket();\n', '        fund = _fundAddress;\n', '\n', '        jackpotAmount = msg.value;\n', '        gameNumber = 0;\n', '        counter = 0;\n', '        gameStartedAt = block.number;\n', '    }\n', '\n', '    function() payable {\n', '        // fallback function to buy tickets\n', '        buyTicketsFor(msg.sender);\n', '    }\n', '\n', '    function buyTicketsFor(address _beneficiary) public payable {\n', '        require(_beneficiary != 0x0);\n', '        require(msg.value >= PRICE);\n', '\n', '        // calculate number of tickets, issue tokens and add participant\n', '        // every (PRICE) buys a ticket, the rest is returned\n', '        uint256 change = msg.value%PRICE;\n', '        uint256 numberOfTickets = msg.value.sub(change).div(PRICE);\n', '        ticket.mint(_beneficiary, numberOfTickets);\n', '        addParticipant(_beneficiary, numberOfTickets);\n', '\n', '        // Return change to msg.sender\n', '        msg.sender.transfer(change);\n', '    }\n', '\n', '    /* private functions */\n', '\n', '    function addParticipant(address _participant, uint256 _numberOfTickets) private {\n', '        // if number of tickets exceeds the size of the game, tickets are added to next game\n', '\n', '        for (uint256 i = 0; i < _numberOfTickets; i++) {\n', '            // using gameNumber instead of counter/SIZE since games can be cancelled\n', '            participants[gameNumber][counter%SIZE] = _participant; \n', '            ParticipantAdded(_participant, gameNumber, counter%SIZE);\n', '\n', '            // msg.sender triggers the drawing of lots\n', '            if (++counter%SIZE == 0) {\n', '                awardPrizes();\n', '                // Split the rest, increase game number\n', '                distributeRemaining();\n', '                increaseGame();\n', '            }\n', '            // loop continues if there are more tickets\n', '        }\n', '    }\n', '    \n', '    function awardPrizes() private {\n', '        // get the winning number, no need to hash, since it is a deterministical function anyway\n', '        uint256 winnerIndex = uint256(block.blockhash(block.number-1))%SIZE;\n', '\n', '        // get jackpot winner, hash result of last two digit number (index) with 4 preceding zeroes will win\n', '        uint256 jackpotNumber = uint256(block.blockhash(block.number-1))%JACKPOT_CHANCE;\n', '        if (winnerIndex == jackpotNumber) {\n', '            distributeJackpot(winnerIndex);\n', '        }\n', '\n', '        // loop throught the prizes \n', '        for (uint8 i = 0; i < prizes.length; i++) {\n', '            // GAS: 21000 Paid for every transaction. (prizes.length)\n', '            participants[gameNumber][winnerIndex%SIZE].transfer(prizes[i]); // msg.sender pays the gas, he&#39;s refunded later, % to wrap around\n', '            PrizeAwarded(gameNumber, participants[gameNumber][winnerIndex%SIZE], prizes[i]);\n', '\n', '            // increment index to the next winner to receive the next prize\n', '            winnerIndex++;\n', '        }\n', '    }\n', '\n', '    function distributeJackpot(uint256 _winnerIndex) private {\n', '        uint256 amount = jackpotAmount;\n', '        jackpotAmount = 0; // later on in the code sequence funds will be added\n', '\n', '        participants[gameNumber][_winnerIndex].transfer(amount);\n', '        JackpotAwarded(gameNumber,  participants[gameNumber][_winnerIndex], amount);\n', '    }\n', '\n', '    function distributeRemaining() private {\n', '        // GAS: 21000 Paid for every transaction. (3)\n', '        jackpotAmount = jackpotAmount.add(JACK_DIST);   // add to jackpot\n', '        fund.transfer(DIV_DIST);                        // *cash register sound* dividends are paid to SLOT token owners\n', '        msg.sender.transfer(GAS_REFUND);                // repay gas to msg.sender\n', '    }\n', '\n', '    function increaseGame() private {\n', '        gameNumber++;\n', '        gameStartedAt = block.number;\n', '    }\n', '\n', '    // public functions\n', '\n', '    function spotsLeft() public constant returns (uint8 spots) {\n', '        return SIZE - uint8(counter%SIZE);\n', '    }\n', '\n', '    function refundGameAfterLongInactivity() public {\n', '        require(block.number.sub(gameStartedAt) >= INACTIVITY);\n', '        require(counter%SIZE != 0); // nothing to refund\n', '        // refunds for everybody can be requested after the game has gone (INACTIVITY) blocks without a conclusion\n', '        \n', '        // Checks-Effects-Interactions pattern to avoid re-entrancy\n', '        uint256 _size = counter%SIZE; // not counter.size, but modulus of SIZE\n', '        counter -= _size;\n', '\n', '        for (uint8 i = 0; i < _size; i++) {\n', '            // GAS: default 21000 paid for every transaction.\n', '            participants[gameNumber][i].transfer(PRICE);\n', '        }\n', '\n', '        GameRefunded(gameNumber);\n', '        increaseGame();\n', '    }\n', '\n', '    function destroy() public onlyOwner {\n', '        require(jackpotAmount < 25 ether);\n', '\n', '        // Transfer Ether funds to owner and terminate contract\n', '        // It would be unfair to allow ourselves to destroy a contract with more than 25 ether and claim the jackpot,\n', '        // lower than that we would consider it still a beta (any Ether would be transfered to the newer contract)\n', '\n', '        ticket.destroy();\n', '        selfdestruct(owner);\n', '    }\n', '    \n', '    function changeTicketOwner(address _newOwner) public onlyOwner {\n', '        // in case of new contract, old token can still be used\n', '        // the token contract owner is the slot contract itself\n', '        ticket.transferOwnership(_newOwner);\n', '    }\n', '    \n', '    function changeFund(address _newFund) public onlyOwner {\n', '        fund = _newFund;\n', '    }\n', '    \n', '    function changeTicket(address _newTicket) public onlyOwner {\n', '        ticket = SlotTicket(_newTicket); // still need to change owner to work\n', '    }\n', '}']