['pragma solidity ^0.4.6;\n', '\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'contract SafeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    assert(b > 0);\n', '    uint c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      throw;\n', '    }\n', '  }\n', '}\n', '\n', '\n', '/// Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\n', '/// @title Abstract token contract - Functions to be implemented by token contracts.\n', 'contract AbstractToken {\n', "    // This is not an abstract function, because solc won't recognize generated getter functions for public variables as functions\n", '    function totalSupply() constant returns (uint256 supply) {}\n', '    function balanceOf(address owner) constant returns (uint256 balance);\n', '    function transfer(address to, uint256 value) returns (bool success);\n', '    function transferFrom(address from, address to, uint256 value) returns (bool success);\n', '    function approve(address spender, uint256 value) returns (bool success);\n', '    function allowance(address owner, address spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Issuance(address indexed to, uint256 value);\n', '}\n', '\n', '\n', 'contract StandardToken is AbstractToken {\n', '\n', '    /*\n', '     *  Data structures\n', '     */\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalSupply;\n', '\n', '    /*\n', '     *  Read and write storage functions\n', '     */\n', "    /// @dev Transfers sender's tokens to a given address. Returns success.\n", '    /// @param _to Address of token receiver.\n', '    /// @param _value Number of tokens to transfer.\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '        else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\n', '    /// @param _from Address from where tokens are withdrawn.\n', '    /// @param _to Address to where tokens are sent.\n', '    /// @param _value Number of tokens to transfer.\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        }\n', '        else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns number of tokens owned by given address.\n', '    /// @param _owner Address of token owner.\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /// @dev Sets approved amount of tokens for spender. Returns success.\n', '    /// @param _spender Address of allowed account.\n', '    /// @param _value Number of approved tokens.\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /*\n', '     * Read storage functions\n', '     */\n', '    /// @dev Returns number of allowed tokens for given address.\n', '    /// @param _owner Address of token owner.\n', '    /// @param _spender Address of token spender.\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '}\n', '\n', '\n', '/// @title Token contract - Implements Standard Token Interface with HumaniQ features.\n', '/// @author Evgeny Yurtaev - <evgeny@etherionlab.com>\n', '/// @author Alexey Bashlykov - <alexey@etherionlab.com>\n', 'contract HumaniqToken is StandardToken, SafeMath {\n', '\n', '    /*\n', '     * External contracts\n', '     */\n', '    address public minter;\n', '\n', '    /*\n', '     * Token meta data\n', '     */\n', '    string constant public name = "Humaniq";\n', '    string constant public symbol = "HMQ";\n', '    uint8 constant public decimals = 8;\n', '\n', '    // Address of the founder of Humaniq.\n', '    address public founder = 0xc890b1f532e674977dfdb791cafaee898dfa9671;\n', '\n', '    // Multisig address of the founders\n', '    address public multisig = 0xa2c9a7578e2172f32a36c5c0e49d64776f9e7883;\n', '\n', '    // Address where all tokens created during ICO stage initially allocated\n', '    address constant public allocationAddressICO = 0x1111111111111111111111111111111111111111;\n', '\n', '    // Address where all tokens created during preICO stage initially allocated\n', '    address constant public allocationAddressPreICO = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n', '\n', '    // 31 820 314 tokens were minted during preICO\n', '    uint constant public preICOSupply = mul(31820314, 100000000);\n', '\n', '    // 131 038 286 tokens were minted during ICO\n', '    uint constant public ICOSupply = mul(131038286, 100000000);\n', '\n', '    // Max number of tokens that can be minted\n', '    uint public maxTotalSupply;\n', '\n', '    /*\n', '     * Modifiers\n', '     */\n', '    modifier onlyFounder() {\n', '        // Only founder is allowed to do this action.\n', '        if (msg.sender != founder) {\n', '            throw;\n', '        }\n', '        _;\n', '    }\n', '\n', '    modifier onlyMinter() {\n', '        // Only minter is allowed to proceed.\n', '        if (msg.sender != minter) {\n', '            throw;\n', '        }\n', '        _;\n', '    }\n', '\n', '    /*\n', '     * Contract functions\n', '     */\n', '\n', '    /// @dev Crowdfunding contract issues new tokens for address. Returns success.\n', '    /// @param _for Address of receiver.\n', '    /// @param tokenCount Number of tokens to issue.\n', '    function issueTokens(address _for, uint tokenCount)\n', '        external\n', '        payable\n', '        onlyMinter\n', '        returns (bool)\n', '    {\n', '        if (tokenCount == 0) {\n', '            return false;\n', '        }\n', '\n', '        if (add(totalSupply, tokenCount) > maxTotalSupply) {\n', '            throw;\n', '        }\n', '\n', '        totalSupply = add(totalSupply, tokenCount);\n', '        balances[_for] = add(balances[_for], tokenCount);\n', '        Issuance(_for, tokenCount);\n', '        return true;\n', '    }\n', '\n', '    /// @dev Function to change address that is allowed to do emission.\n', '    /// @param newAddress Address of new emission contract.\n', '    function changeMinter(address newAddress)\n', '        public\n', '        onlyFounder\n', '        returns (bool)\n', '    {   \n', '        // Forbid previous emission contract to distribute tokens minted during ICO stage\n', '        delete allowed[allocationAddressICO][minter];\n', '\n', '        minter = newAddress;\n', '\n', '        // Allow emission contract to distribute tokens minted during ICO stage\n', '        allowed[allocationAddressICO][minter] = balanceOf(allocationAddressICO);\n', '    }\n', '\n', '    /// @dev Function to change founder address.\n', '    /// @param newAddress Address of new founder.\n', '    function changeFounder(address newAddress)\n', '        public\n', '        onlyFounder\n', '        returns (bool)\n', '    {   \n', '        founder = newAddress;\n', '    }\n', '\n', '    /// @dev Function to change multisig address.\n', '    /// @param newAddress Address of new multisig.\n', '    function changeMultisig(address newAddress)\n', '        public\n', '        onlyFounder\n', '        returns (bool)\n', '    {\n', '        multisig = newAddress;\n', '    }\n', '\n', '    /// @dev Contract constructor function sets initial token balances.\n', '    function HumaniqToken(address founderAddress)\n', '    {   \n', '        // Set founder address\n', '        founder = founderAddress;\n', '\n', '        // Allocate all created tokens during ICO stage to allocationAddressICO.\n', '        balances[allocationAddressICO] = ICOSupply;\n', '\n', '        // Allocate all created tokens during preICO stage to allocationAddressPreICO.\n', '        balances[allocationAddressPreICO] = preICOSupply;\n', '\n', '        // Allow founder to distribute tokens minted during preICO stage\n', '        allowed[allocationAddressPreICO][founder] = preICOSupply;\n', '\n', '        // Give 14 percent of all tokens to founders.\n', '        balances[multisig] = div(mul(ICOSupply, 14), 86);\n', '\n', '        // Set correct totalSupply and limit maximum total supply.\n', '        totalSupply = add(ICOSupply, balances[multisig]);\n', '        totalSupply = add(totalSupply, preICOSupply);\n', '        maxTotalSupply = mul(totalSupply, 5);\n', '    }\n', '}']