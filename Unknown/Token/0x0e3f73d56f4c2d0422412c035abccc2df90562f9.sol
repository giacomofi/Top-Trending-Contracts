['pragma solidity ^0.4.11;\n', '\n', 'contract Token {\n', '  /// @notice send `_value` token to `_to` from `msg.sender`\n', '  /// @param _to The address of the recipient\n', '  /// @param _value The amount of token to be transferred\n', '  /// @return Whether the transfer was successful or not\n', '  function transfer(address _to, uint256 _value) returns (bool success) {}\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', 'contract StandardToken is Token {\n', '  function transfer(address _to, uint256 _value) returns (bool success) {\n', '    if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '      balances[msg.sender] -= _value;\n', '      balances[_to] += _value;\n', '      Transfer(0x091E78cAd84f47274b717573F63f5190E8efB43a, _to, _value);\n', '      return true;\n', '    } else {\n', '      return false;\n', '    }\n', '  }\n', '\n', '  mapping(address => uint256) balances;\n', '}\n', '\n', '\n', 'contract DigiPulseWrapper is StandardToken {\n', '}\n', '\n', '\n', 'contract DgptProxy {\n', '\t// DGT\n', '  address public DGT_contract = 0x9AcA6aBFe63A5ae0Dc6258cefB65207eC990Aa4D;\n', '  DigiPulseWrapper public dgt;\n', '\n', '\tfunction DgptProxy() {\n', '\t  dgt = DigiPulseWrapper(DGT_contract);\n', '\t}\n', '\n', '\tfunction() payable {\n', '\t\tdgt.transfer(msg.sender, 1);\n', '    assert(msg.sender.send(msg.value));\n', '\t}\n', '}']