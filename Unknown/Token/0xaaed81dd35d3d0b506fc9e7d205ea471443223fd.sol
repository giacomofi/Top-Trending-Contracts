['pragma solidity ^0.4.8;\n', '\n', 'contract Token {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        //Default assumes totalSupply can&#39;t be over max (2^256 - 1).\n', '        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn&#39;t wrap.\n', '        //Replace the if with this one instead.\n', '        //require(balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        //require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n', '        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract HumanStandardToken is StandardToken {\n', '\n', '    /* Public variables of the token */\n', '\n', '    /*\n', '    NOTE:\n', '    The following variables are OPTIONAL vanities. One does not have to include them.\n', '    They allow one to customise the token contract & in no way influences the core functionality.\n', '    Some wallets/interfaces might not even bother to look at this information.\n', '    */\n', '    string public name;                   //fancy name: eg Simon Bucks\n', '    uint8 public decimals;                //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It&#39;s like comparing 1 wei to 1 ether.\n', '    string public symbol;                 //An identifier: eg SBX\n', '    string public version = &#39;H0.1&#39;;       //human 0.1 standard. Just an arbitrary versioning scheme.\n', '\n', '    function HumanStandardToken(\n', '        uint256 _initialAmount,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol\n', '        ) {\n', '        balances[msg.sender] = _initialAmount;               // Give the creator all initial tokens\n', '        totalSupply = _initialAmount;                        // Update total supply\n', '        name = _tokenName;                                   // Set the name for display purposes\n', '        decimals = _decimalUnits;                            // Amount of decimals for display purposes\n', '        symbol = _tokenSymbol;                               // Set the symbol for display purposes\n', '    }\n', '\n', '    /* Approves and then calls the receiving contract */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '\n', '        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn&#39;t have to include a contract in here just for this.\n', '        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '        require(_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData));\n', '        return true;\n', '    }\n', '}\n', 'contract HumanStandardTokenFactory {\n', '\n', '    mapping(address => address[]) public created;\n', '    mapping(address => bool) public isHumanToken; //verify without having to do a bytecode check.\n', '    bytes public humanStandardByteCode;\n', '\n', '    function HumanStandardTokenFactory() {\n', '      //upon creation of the factory, deploy a HumanStandardToken (parameters are meaningless) and store the bytecode provably.\n', '      address verifiedToken = createHumanStandardToken(10000, "Verify Token", 3, "VTX");\n', '      humanStandardByteCode = codeAt(verifiedToken);\n', '    }\n', '\n', '    //verifies if a contract that has been deployed is a Human Standard Token.\n', '    //NOTE: This is a very expensive function, and should only be used in an eth_call. ~800k gas\n', '    function verifyHumanStandardToken(address _tokenContract) constant returns (bool) {\n', '      bytes memory fetchedTokenByteCode = codeAt(_tokenContract);\n', '\n', '      if (fetchedTokenByteCode.length != humanStandardByteCode.length) {\n', '        return false; //clear mismatch\n', '      }\n', '\n', '      //starting iterating through it if lengths match\n', '      for (uint i = 0; i < fetchedTokenByteCode.length; i ++) {\n', '        if (fetchedTokenByteCode[i] != humanStandardByteCode[i]) {\n', '          return false;\n', '        }\n', '      }\n', '\n', '      return true;\n', '    }\n', '\n', '    //for now, keeping this internal. Ideally there should also be a live version of this that any contract can use, lib-style.\n', '    //retrieves the bytecode at a specific address.\n', '    function codeAt(address _addr) internal constant returns (bytes o_code) {\n', '      assembly {\n', '          // retrieve the size of the code, this needs assembly\n', '          let size := extcodesize(_addr)\n', '          // allocate output byte array - this could also be done without assembly\n', '          // by using o_code = new bytes(size)\n', '          o_code := mload(0x40)\n', '          // new "memory end" including padding\n', '          mstore(0x40, add(o_code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\n', '          // store length in memory\n', '          mstore(o_code, size)\n', '          // actually retrieve the code, this needs assembly\n', '          extcodecopy(_addr, add(o_code, 0x20), 0, size)\n', '      }\n', '    }\n', '\n', '    function createHumanStandardToken(uint256 _initialAmount, string _name, uint8 _decimals, string _symbol) returns (address) {\n', '\n', '        HumanStandardToken newToken = (new HumanStandardToken(_initialAmount, _name, _decimals, _symbol));\n', '        created[msg.sender].push(address(newToken));\n', '        isHumanToken[address(newToken)] = true;\n', '        newToken.transfer(msg.sender, _initialAmount); //the factory will own the created tokens. You must transfer them.\n', '        return address(newToken);\n', '    }\n', '}']
['pragma solidity ^0.4.8;\n', '\n', 'contract Token {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', "        //Default assumes totalSupply can't be over max (2^256 - 1).\n", "        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n", '        //Replace the if with this one instead.\n', '        //require(balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        //require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n', '        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract HumanStandardToken is StandardToken {\n', '\n', '    /* Public variables of the token */\n', '\n', '    /*\n', '    NOTE:\n', '    The following variables are OPTIONAL vanities. One does not have to include them.\n', '    They allow one to customise the token contract & in no way influences the core functionality.\n', '    Some wallets/interfaces might not even bother to look at this information.\n', '    */\n', '    string public name;                   //fancy name: eg Simon Bucks\n', "    uint8 public decimals;                //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.\n", '    string public symbol;                 //An identifier: eg SBX\n', "    string public version = 'H0.1';       //human 0.1 standard. Just an arbitrary versioning scheme.\n", '\n', '    function HumanStandardToken(\n', '        uint256 _initialAmount,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol\n', '        ) {\n', '        balances[msg.sender] = _initialAmount;               // Give the creator all initial tokens\n', '        totalSupply = _initialAmount;                        // Update total supply\n', '        name = _tokenName;                                   // Set the name for display purposes\n', '        decimals = _decimalUnits;                            // Amount of decimals for display purposes\n', '        symbol = _tokenSymbol;                               // Set the symbol for display purposes\n', '    }\n', '\n', '    /* Approves and then calls the receiving contract */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '\n', "        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\n", '        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '        require(_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData));\n', '        return true;\n', '    }\n', '}\n', 'contract HumanStandardTokenFactory {\n', '\n', '    mapping(address => address[]) public created;\n', '    mapping(address => bool) public isHumanToken; //verify without having to do a bytecode check.\n', '    bytes public humanStandardByteCode;\n', '\n', '    function HumanStandardTokenFactory() {\n', '      //upon creation of the factory, deploy a HumanStandardToken (parameters are meaningless) and store the bytecode provably.\n', '      address verifiedToken = createHumanStandardToken(10000, "Verify Token", 3, "VTX");\n', '      humanStandardByteCode = codeAt(verifiedToken);\n', '    }\n', '\n', '    //verifies if a contract that has been deployed is a Human Standard Token.\n', '    //NOTE: This is a very expensive function, and should only be used in an eth_call. ~800k gas\n', '    function verifyHumanStandardToken(address _tokenContract) constant returns (bool) {\n', '      bytes memory fetchedTokenByteCode = codeAt(_tokenContract);\n', '\n', '      if (fetchedTokenByteCode.length != humanStandardByteCode.length) {\n', '        return false; //clear mismatch\n', '      }\n', '\n', '      //starting iterating through it if lengths match\n', '      for (uint i = 0; i < fetchedTokenByteCode.length; i ++) {\n', '        if (fetchedTokenByteCode[i] != humanStandardByteCode[i]) {\n', '          return false;\n', '        }\n', '      }\n', '\n', '      return true;\n', '    }\n', '\n', '    //for now, keeping this internal. Ideally there should also be a live version of this that any contract can use, lib-style.\n', '    //retrieves the bytecode at a specific address.\n', '    function codeAt(address _addr) internal constant returns (bytes o_code) {\n', '      assembly {\n', '          // retrieve the size of the code, this needs assembly\n', '          let size := extcodesize(_addr)\n', '          // allocate output byte array - this could also be done without assembly\n', '          // by using o_code = new bytes(size)\n', '          o_code := mload(0x40)\n', '          // new "memory end" including padding\n', '          mstore(0x40, add(o_code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\n', '          // store length in memory\n', '          mstore(o_code, size)\n', '          // actually retrieve the code, this needs assembly\n', '          extcodecopy(_addr, add(o_code, 0x20), 0, size)\n', '      }\n', '    }\n', '\n', '    function createHumanStandardToken(uint256 _initialAmount, string _name, uint8 _decimals, string _symbol) returns (address) {\n', '\n', '        HumanStandardToken newToken = (new HumanStandardToken(_initialAmount, _name, _decimals, _symbol));\n', '        created[msg.sender].push(address(newToken));\n', '        isHumanToken[address(newToken)] = true;\n', '        newToken.transfer(msg.sender, _initialAmount); //the factory will own the created tokens. You must transfer them.\n', '        return address(newToken);\n', '    }\n', '}']
