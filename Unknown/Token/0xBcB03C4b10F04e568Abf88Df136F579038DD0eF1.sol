['pragma solidity ^0.4.11;\n', '\n', 'contract Owned {\n', '\n', '    address public owner;\n', '\n', '    function Owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function setOwner(address _newOwner) onlyOwner {\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function toUINT112(uint256 a) internal constant returns(uint112) {\n', '    assert(uint112(a) == a);\n', '    return uint112(a);\n', '  }\n', '\n', '  function toUINT120(uint256 a) internal constant returns(uint120) {\n', '    assert(uint120(a) == a);\n', '    return uint120(a);\n', '  }\n', '\n', '  function toUINT128(uint256 a) internal constant returns(uint128) {\n', '    assert(uint128(a) == a);\n', '    return uint128(a);\n', '  }\n', '}\n', '\n', '\n', '// Abstract contract for the full ERC 20 Token standard\n', '// https://github.com/ethereum/EIPs/issues/20\n', '\n', 'contract Token {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    //uint256 public totalSupply;\n', '    function totalSupply() constant returns (uint256 supply);\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', 'contract Exchange is Owned {\n', '\n', '    event onExchangeTokenToEther(address who, uint256 tokenAmount, uint256 etherAmount);\n', '\n', '    using SafeMath for uint256;\n', '\n', '    Token public token = Token(0xD850942eF8811f2A866692A623011bDE52a462C1);\n', '\n', '    // 1 ether = ? tokens\n', '    uint256 public rate = 4025;\n', '\n', '    // quota of token for every account that can be exchanged to ether\n', '    uint256 public tokenQuota = 402500 ether;\n', '\n', '    // quota of ether for every account that can be exchanged to token\n', '    // uint256 public etherQuota = 100 ether;\n', '\n', '    bool public tokenToEtherAllowed = true;\n', '    // bool public etherToTokenAllowed = false;\n', '\n', '    // uint256 public totalReturnedCredit;             //returned ven  \n', '\n', '\n', '    // struct QuotaUsed {\n', '    //     uint128 tokens;\n', '    //     uint128 ethers;\n', '    // }\n', '    mapping(address => uint256) accountQuotaUsed;\n', '\n', '    function Exchange() {\n', '    }\n', '\n', '    function () payable {\n', '    }\n', '\n', '\n', '    function withdrawEther(address _address,uint256 _amount) onlyOwner {\n', '        require(_address != 0);\n', '        _address.transfer(_amount);\n', '    }\n', '\n', '    function withdrawToken(address _address, uint256 _amount) onlyOwner {\n', '        require(_address != 0);\n', '        token.transfer(_address, _amount);\n', '    }\n', '\n', '    function quotaUsed(address _account) constant returns(uint256 ) {\n', '        return accountQuotaUsed[_account];\n', '    }\n', '\n', '    //tested\n', '    function setRate(uint256 _rate) onlyOwner {\n', '        rate = _rate;\n', '    }\n', '\n', '    //tested\n', '    function setTokenQuota(uint256 _quota) onlyOwner {\n', '        tokenQuota = _quota;\n', '    }\n', '\n', '    // function setEtherQuota(uint256 _quota) onlyOwner {\n', '    //     etherQuota = _quota;\n', '    // }\n', '\n', '    //tested    \n', '    function setTokenToEtherAllowed(bool _allowed) onlyOwner {\n', '        tokenToEtherAllowed = _allowed;\n', '    }\n', '\n', '    // function setEtherToTokenAllowed(bool _allowed) onlyOwner {\n', '    //     etherToTokenAllowed = _allowed;\n', '    // }\n', '\n', '    function receiveApproval(address _from, uint256 _value, address /*_tokenContract*/, bytes /*_extraData*/) {\n', '        exchangeTokenToEther(_from, _value);\n', '    }\n', '\n', '    function exchangeTokenToEther(address _from, uint256 _tokenAmount) internal {\n', '        require(tokenToEtherAllowed);\n', '        require(msg.sender == address(token));\n', '        require(!isContract(_from));\n', '\n', '        uint256 quota = tokenQuota.sub(accountQuotaUsed[_from]);                \n', '\n', '        if (_tokenAmount > quota)\n', '            _tokenAmount = quota;\n', '        \n', '        uint256 balance = token.balanceOf(_from);\n', '        if (_tokenAmount > balance)\n', '            _tokenAmount = balance;\n', '\n', '        require(_tokenAmount>0);    //require the token should be above 0\n', '\n', '        //require(_tokenAmount > 0.01 ether);\n', '        require(token.transferFrom(_from, this, _tokenAmount));        \n', '\n', '        accountQuotaUsed[_from] = _tokenAmount.add(accountQuotaUsed[_from]);\n', '        \n', '        uint256 etherAmount = _tokenAmount / rate;\n', '        require(etherAmount > 0);\n', '        _from.transfer(etherAmount);\n', '\n', '        // totalReturnedCredit+=_tokenAmount;\n', '\n', '        onExchangeTokenToEther(_from, _tokenAmount, etherAmount);\n', '    }\n', '\n', '\n', '    //exchange EtherToToken放到fallback函数中\n', '    //TokenToEther\n', '    //    function exchangeEtherToToken() payable {\n', '    //       require(etherToTokenAllowed);\n', '    //        require(!isContract(msg.sender));\n', '    //\n', '    //        uint256 quota = etherQuota.sub(accountQuotaUsed[msg.sender].ethers);\n', '\n', '    //        uint256 etherAmount = msg.value;\n', '    //        require(etherAmount >= 0.01 ether && etherAmount <= quota);\n', '    //        \n', '    //        uint256 tokenAmount = etherAmount * rate;\n', '\n', '    //        accountQuotaUsed[msg.sender].ethers = etherAmount.add(accountQuotaUsed[msg.sender].ethers).toUINT128();\n', '\n', '    //        require(token.transfer(msg.sender, tokenAmount));\n', '\n', '    //        onExchangeEtherToToken(msg.sender, tokenAmount, etherAmount);                                                        \n', '    //    }\n', '\n', '    function isContract(address _addr) constant internal returns(bool) {\n', '        uint size;\n', '        if (_addr == 0)\n', '            return false;\n', '        assembly {\n', '            size := extcodesize(_addr)\n', '        }\n', '        return size > 0;\n', '    }\n', '}']