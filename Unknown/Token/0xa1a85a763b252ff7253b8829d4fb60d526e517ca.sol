['contract ERC20Basic {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) constant returns (uint);\n', '  function transfer(address to, uint value);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint);\n', '  function transferFrom(address from, address to, uint value);\n', '  function approve(address spender, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'contract Own {\n', '    address public owner;\n', '\n', '    function Own() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        if (msg.sender != owner) throw;\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', 'contract Pause is Own {\n', '  bool public stopped;\n', '\n', '  modifier stopInEmergency {\n', '    if (stopped) {\n', '      throw;\n', '    }\n', '    _;\n', '  }\n', '  \n', '  modifier onlyInEmergency {\n', '    if (!stopped) {\n', '      throw;\n', '    }\n', '    _;\n', '  }\n', '\n', '  // owner call to trigger a stop state\n', '  function emergencyStop() external onlyOwner {\n', '    stopped = true;\n', '  }\n', '\n', '  // owner call to restart from the stop state\n', '  function release() external onlyOwner onlyInEmergency {\n', '    stopped = false;\n', '  }\n', '\n', '}\n', '\n', 'contract Puller {\n', '\n', '  using SafeMath for uint;\n', '  \n', '  mapping(address => uint) public payments;\n', '\n', '  event LogRefundETH(address to, uint value);\n', '\n', '  function asyncSend(address dest, uint amount) internal {\n', '    payments[dest] = payments[dest].add(amount);\n', '  }\n', '\n', '  // withdrwaw call for refunding balance acumilated by payee\n', '  function withdrawPayments() {\n', '    address payee = msg.sender;\n', '    uint payment = payments[payee];\n', '    \n', '    if (payment == 0) {\n', '      throw;\n', '    }\n', '\n', '    if (this.balance < payment) {\n', '      throw;\n', '    }\n', '\n', '    payments[payee] = 0;\n', '\n', '    if (!payee.send(payment)) {\n', '      throw;\n', '    }\n', '    LogRefundETH(payee,payment);\n', '  }\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  \n', '  using SafeMath for uint;\n', '  \n', '  mapping(address => uint) balances;\n', '  \n', '  modifier onlyPayloadSize(uint size) {\n', '     if(msg.data.length < size + 4) {\n', '       throw;\n', '     }\n', '     _;\n', '  }\n', '\n', '  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '  }\n', '\n', '  function balanceOf(address _owner) constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', 'contract StandardToken is BasicToken, ERC20 {\n', '  mapping (address => mapping (address => uint)) allowed;\n', '\n', '  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint _value) {\n', '    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '}\n', '\n', 'contract Token is StandardToken, Own {\n', '  string public constant name = "TribeToken";\n', '  string public constant symbol = "TRIBE";\n', '  uint public constant decimals = 6;\n', '\n', '  // Token constructor\n', '  function Token() {\n', '      totalSupply = 200000000000000;\n', '      balances[msg.sender] = totalSupply; // send all created tokens to the owner/creator\n', '  }\n', '\n', '  // Burn function to burn a set amount of tokens\n', '  function burner(uint _value) onlyOwner returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    Transfer(msg.sender, 0x0, _value);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract Crowdsale is Pause, Puller {\n', '    \n', '    using SafeMath for uint;\n', '\n', '  \tstruct Backer {\n', '\t\tuint weiReceived; // Amount of Ether given\n', '\t\tuint coinSent;\n', '\t}\n', '    \n', '\t//CONSTANTS\n', '\t// Minimum number of TRIBE to sell\n', '\tuint public constant MIN_CAP = 7500000000000; // 7,500,000 TRIBE\n', '\t// Maximum number of TRIBE to sell\n', '\tuint public constant MAX_CAP = 150000000000000; // 150,000,000 TRIBE\n', '\t// Minimum amount to invest\n', '\tuint public constant MIN_INVEST_ETHER = 100 finney; // 0.1ETH\n', '\t// Crowdsale period\n', '\tuint private constant CROWDSALE_PERIOD = 22 days; // 22 days crowdsale run\n', '\t// Number of TRIBE per Ether\n', '\tuint public constant COIN_PER_ETHER = 3000000000; // 3,000 TRIBE\n', '\n', '\n', '\t//VARIABLES\n', '\t// TRIBE contract reference\n', '\tToken public coin;\n', '    // Multisig contract that will receive the Ether\n', '\taddress public multisigEther;\n', '\t// Number of Ether received\n', '\tuint public etherReceived;\n', '\t// Number of TRIBE sent to Ether contributors\n', '\tuint public coinSentToEther;\n', '  // Number of TRIBE to burn\n', '  uint public coinToBurn;\n', '\t// Crowdsale start time\n', '\tuint public startTime;\n', '\t// Crowdsale end time\n', '\tuint public endTime;\n', ' \t// Is crowdsale still on going\n', '\tbool public crowdsaleClosed;\n', '\n', '\t// Backers Ether indexed by their Ethereum address\n', '\tmapping(address => Backer) public backers;\n', '\n', '\n', '\t//MODIFIERS\n', '\tmodifier minCapNotReached() {\n', '\t\tif ((now < endTime) || coinSentToEther >= MIN_CAP ) throw;\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier respectTimeFrame() {\n', '\t\tif ((now < startTime) || (now > endTime )) throw;\n', '\t\t_;\n', '\t}\n', '\n', '\t//EVENTS\n', '\tevent LogReceivedETH(address addr, uint value);\n', '\tevent LogCoinsEmited(address indexed from, uint amount);\n', '\n', '\t//Crowdsale Constructor\n', '\tfunction Crowdsale(address _TRIBEAddress, address _to) {\n', '\t\tcoin = Token(_TRIBEAddress);\n', '\t\tmultisigEther = _to;\n', '\t}\n', '\t\n', '\t// Default function to receive ether\n', '\tfunction() stopInEmergency respectTimeFrame payable {\n', '\t\treceiveETH(msg.sender);\n', '\t}\n', '\n', '\t \n', '\t// To call to start the crowdsale\n', '\tfunction start() onlyOwner {\n', '\t\tif (startTime != 0) throw; // Crowdsale was already started\n', '\n', '\t\tstartTime = now ;            \n', '\t\tendTime =  now + CROWDSALE_PERIOD;    \n', '\t}\n', '\n', '\t// Main function on ETH receive\n', '\tfunction receiveETH(address beneficiary) internal {\n', '\t\tif (msg.value < MIN_INVEST_ETHER) throw; // Do not accept investment if the amount is lower than the minimum allowed investment\n', '\t\t\n', '\t\tuint coinToSend = bonus(msg.value.mul(COIN_PER_ETHER).div(1 ether)); // Calculate the amount of tokens to send\n', '\t\tif (coinToSend.add(coinSentToEther) > MAX_CAP) throw;\t\n', '\n', '\t\tBacker backer = backers[beneficiary];\n', '\t\tcoin.transfer(beneficiary, coinToSend); // Transfer TRIBE\n', '\n', '\t\tbacker.coinSent = backer.coinSent.add(coinToSend);\n', '\t\tbacker.weiReceived = backer.weiReceived.add(msg.value); // Update the total wei collected during the crowdfunding for this backer    \n', '\n', '\t\tetherReceived = etherReceived.add(msg.value); // Update the total wei collected during the crowdfunding\n', '\t\tcoinSentToEther = coinSentToEther.add(coinToSend);\n', '\n', '\t\t// Send events\n', '\t\tLogCoinsEmited(msg.sender ,coinToSend);\n', '\t\tLogReceivedETH(beneficiary, etherReceived); \n', '\t}\n', '\t\n', '\n', '\t// Bonus function for the first week\n', '\tfunction bonus(uint amount) internal constant returns (uint) {\n', '\t\tif (now < startTime.add(2 minutes)) return amount.add(amount.div(5));   // bonus 20%\n', '\t\treturn amount;\n', '\t}\n', '\n', '\t// Finalize function\n', '\tfunction finalize() onlyOwner public {\n', '\n', '        // Check if the crowdsale has ended or if the old tokens have been sold\n', '    if(coinSentToEther != MAX_CAP){\n', '        if (now < endTime)  throw; // If Crowdsale still running\n', '        if (coinSentToEther < MIN_CAP && now < endTime + 7 days) throw; // If MIN_CAP is not reached donors have 7days to get refund before we can finalise\n', '    }\n', '\t\t\n', '\t\tif (!multisigEther.send(this.balance)) throw; // Move the remaining Ether to the multisig address\n', '\t\t\n', '\t\tuint remains = coin.balanceOf(this);\n', '\t\tif (remains > 0) {\n', '      coinToBurn = coinToBurn.add(remains);\n', '      // Transfer remains to owner to burn\n', '      coin.transfer(owner, remains);\n', '\t\t}\n', '\t\tcrowdsaleClosed = true;\n', '\t}\n', '\n', '\t// Drain functions in case of unexpected issues with the smart contract.\n', '  // ETH drain\n', '\tfunction drain() onlyOwner {\n', '    if (!multisigEther.send(this.balance)) throw; //Transfer to team multisig wallet\n', '\t}\n', '  // TOKEN drain\n', '  function coinDrain() onlyOwner {\n', '    uint remains = coin.balanceOf(this);\n', '    coin.transfer(owner, remains); // Transfer to owner wallet\n', '\t}\n', '\n', '\t// Change multisig wallet in case its needed\n', '\tfunction changeMultisig(address addr) onlyOwner public {\n', '\t\tif (addr == address(0)) throw;\n', '\t\tmultisigEther = addr;\n', '\t}\n', '\n', '\t// Manually back TRIBE owner address.\n', '\tfunction changeTribeOwner() onlyOwner public {\n', '\t\tcoin.transferOwnership(owner);\n', '\t}\n', '\n', '\t// Transfer remains to owner in case if impossible to do min invest\n', '  //THIS CHANGED!!!\n', '\tfunction getCoinRemains() onlyOwner public {\n', '    uint remains = coin.balanceOf(this);\n', '\n', '\t\tif(MIN_CAP < coinSentToEther) throw;\n', '\n', '\t\tBacker backer = backers[owner];\n', '\t\tcoin.transfer(owner, remains); // Transfer TRIBE right now \n', '\n', '\t\tbacker.coinSent = backer.coinSent.add(remains);\n', '\n', '\t\tcoinSentToEther = coinSentToEther.add(remains);\n', '\n', '\t\t// Send events\n', '\t\tLogCoinsEmited(this ,remains);\n', '\t\tLogReceivedETH(owner, etherReceived);\n', '\t}\n', '\n', '\n', '\t//Refund function when minimum cap isnt reached, this is step is step 2, THIS FUNCTION ONLY AVAILABLE IF MIN CAP NOT REACHED.\n', '  //STEP1: From TRIBE token contract use "approve" function with the amount of TRIBE you got in total.\n', '  //STEP2: From TRIBE crowdsale contract use "refund" function with the amount of TRIBE you got in total.\n', '  //STEP3: From TRIBE crowdsale contract use "withdrawPayement" function to recieve the ETH.\n', '\tfunction refund(uint _value) minCapNotReached public {\n', '\t\t\n', '\t\tif (_value != backers[msg.sender].coinSent) throw; // compare value from backer balance\n', '\n', '\t\tcoin.transferFrom(msg.sender, address(this), _value); // get the token back to the crowdsale contract\n', '\n', '\t\tuint ETHToSend = backers[msg.sender].weiReceived;\n', '\t\tbackers[msg.sender].weiReceived=0;\n', '\n', '\t\tif (ETHToSend > 0) {\n', '\t\t\tasyncSend(msg.sender, ETHToSend); // pull payment to get refund in ETH\n', '\t\t}\n', '\t}\n', '\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    assert(b > 0);\n', '    uint c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      throw;\n', '    }\n', '  }\n', '}']
['contract ERC20Basic {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) constant returns (uint);\n', '  function transfer(address to, uint value);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint);\n', '  function transferFrom(address from, address to, uint value);\n', '  function approve(address spender, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'contract Own {\n', '    address public owner;\n', '\n', '    function Own() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        if (msg.sender != owner) throw;\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', 'contract Pause is Own {\n', '  bool public stopped;\n', '\n', '  modifier stopInEmergency {\n', '    if (stopped) {\n', '      throw;\n', '    }\n', '    _;\n', '  }\n', '  \n', '  modifier onlyInEmergency {\n', '    if (!stopped) {\n', '      throw;\n', '    }\n', '    _;\n', '  }\n', '\n', '  // owner call to trigger a stop state\n', '  function emergencyStop() external onlyOwner {\n', '    stopped = true;\n', '  }\n', '\n', '  // owner call to restart from the stop state\n', '  function release() external onlyOwner onlyInEmergency {\n', '    stopped = false;\n', '  }\n', '\n', '}\n', '\n', 'contract Puller {\n', '\n', '  using SafeMath for uint;\n', '  \n', '  mapping(address => uint) public payments;\n', '\n', '  event LogRefundETH(address to, uint value);\n', '\n', '  function asyncSend(address dest, uint amount) internal {\n', '    payments[dest] = payments[dest].add(amount);\n', '  }\n', '\n', '  // withdrwaw call for refunding balance acumilated by payee\n', '  function withdrawPayments() {\n', '    address payee = msg.sender;\n', '    uint payment = payments[payee];\n', '    \n', '    if (payment == 0) {\n', '      throw;\n', '    }\n', '\n', '    if (this.balance < payment) {\n', '      throw;\n', '    }\n', '\n', '    payments[payee] = 0;\n', '\n', '    if (!payee.send(payment)) {\n', '      throw;\n', '    }\n', '    LogRefundETH(payee,payment);\n', '  }\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  \n', '  using SafeMath for uint;\n', '  \n', '  mapping(address => uint) balances;\n', '  \n', '  modifier onlyPayloadSize(uint size) {\n', '     if(msg.data.length < size + 4) {\n', '       throw;\n', '     }\n', '     _;\n', '  }\n', '\n', '  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '  }\n', '\n', '  function balanceOf(address _owner) constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', 'contract StandardToken is BasicToken, ERC20 {\n', '  mapping (address => mapping (address => uint)) allowed;\n', '\n', '  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint _value) {\n', '    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '}\n', '\n', 'contract Token is StandardToken, Own {\n', '  string public constant name = "TribeToken";\n', '  string public constant symbol = "TRIBE";\n', '  uint public constant decimals = 6;\n', '\n', '  // Token constructor\n', '  function Token() {\n', '      totalSupply = 200000000000000;\n', '      balances[msg.sender] = totalSupply; // send all created tokens to the owner/creator\n', '  }\n', '\n', '  // Burn function to burn a set amount of tokens\n', '  function burner(uint _value) onlyOwner returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    Transfer(msg.sender, 0x0, _value);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract Crowdsale is Pause, Puller {\n', '    \n', '    using SafeMath for uint;\n', '\n', '  \tstruct Backer {\n', '\t\tuint weiReceived; // Amount of Ether given\n', '\t\tuint coinSent;\n', '\t}\n', '    \n', '\t//CONSTANTS\n', '\t// Minimum number of TRIBE to sell\n', '\tuint public constant MIN_CAP = 7500000000000; // 7,500,000 TRIBE\n', '\t// Maximum number of TRIBE to sell\n', '\tuint public constant MAX_CAP = 150000000000000; // 150,000,000 TRIBE\n', '\t// Minimum amount to invest\n', '\tuint public constant MIN_INVEST_ETHER = 100 finney; // 0.1ETH\n', '\t// Crowdsale period\n', '\tuint private constant CROWDSALE_PERIOD = 22 days; // 22 days crowdsale run\n', '\t// Number of TRIBE per Ether\n', '\tuint public constant COIN_PER_ETHER = 3000000000; // 3,000 TRIBE\n', '\n', '\n', '\t//VARIABLES\n', '\t// TRIBE contract reference\n', '\tToken public coin;\n', '    // Multisig contract that will receive the Ether\n', '\taddress public multisigEther;\n', '\t// Number of Ether received\n', '\tuint public etherReceived;\n', '\t// Number of TRIBE sent to Ether contributors\n', '\tuint public coinSentToEther;\n', '  // Number of TRIBE to burn\n', '  uint public coinToBurn;\n', '\t// Crowdsale start time\n', '\tuint public startTime;\n', '\t// Crowdsale end time\n', '\tuint public endTime;\n', ' \t// Is crowdsale still on going\n', '\tbool public crowdsaleClosed;\n', '\n', '\t// Backers Ether indexed by their Ethereum address\n', '\tmapping(address => Backer) public backers;\n', '\n', '\n', '\t//MODIFIERS\n', '\tmodifier minCapNotReached() {\n', '\t\tif ((now < endTime) || coinSentToEther >= MIN_CAP ) throw;\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier respectTimeFrame() {\n', '\t\tif ((now < startTime) || (now > endTime )) throw;\n', '\t\t_;\n', '\t}\n', '\n', '\t//EVENTS\n', '\tevent LogReceivedETH(address addr, uint value);\n', '\tevent LogCoinsEmited(address indexed from, uint amount);\n', '\n', '\t//Crowdsale Constructor\n', '\tfunction Crowdsale(address _TRIBEAddress, address _to) {\n', '\t\tcoin = Token(_TRIBEAddress);\n', '\t\tmultisigEther = _to;\n', '\t}\n', '\t\n', '\t// Default function to receive ether\n', '\tfunction() stopInEmergency respectTimeFrame payable {\n', '\t\treceiveETH(msg.sender);\n', '\t}\n', '\n', '\t \n', '\t// To call to start the crowdsale\n', '\tfunction start() onlyOwner {\n', '\t\tif (startTime != 0) throw; // Crowdsale was already started\n', '\n', '\t\tstartTime = now ;            \n', '\t\tendTime =  now + CROWDSALE_PERIOD;    \n', '\t}\n', '\n', '\t// Main function on ETH receive\n', '\tfunction receiveETH(address beneficiary) internal {\n', '\t\tif (msg.value < MIN_INVEST_ETHER) throw; // Do not accept investment if the amount is lower than the minimum allowed investment\n', '\t\t\n', '\t\tuint coinToSend = bonus(msg.value.mul(COIN_PER_ETHER).div(1 ether)); // Calculate the amount of tokens to send\n', '\t\tif (coinToSend.add(coinSentToEther) > MAX_CAP) throw;\t\n', '\n', '\t\tBacker backer = backers[beneficiary];\n', '\t\tcoin.transfer(beneficiary, coinToSend); // Transfer TRIBE\n', '\n', '\t\tbacker.coinSent = backer.coinSent.add(coinToSend);\n', '\t\tbacker.weiReceived = backer.weiReceived.add(msg.value); // Update the total wei collected during the crowdfunding for this backer    \n', '\n', '\t\tetherReceived = etherReceived.add(msg.value); // Update the total wei collected during the crowdfunding\n', '\t\tcoinSentToEther = coinSentToEther.add(coinToSend);\n', '\n', '\t\t// Send events\n', '\t\tLogCoinsEmited(msg.sender ,coinToSend);\n', '\t\tLogReceivedETH(beneficiary, etherReceived); \n', '\t}\n', '\t\n', '\n', '\t// Bonus function for the first week\n', '\tfunction bonus(uint amount) internal constant returns (uint) {\n', '\t\tif (now < startTime.add(2 minutes)) return amount.add(amount.div(5));   // bonus 20%\n', '\t\treturn amount;\n', '\t}\n', '\n', '\t// Finalize function\n', '\tfunction finalize() onlyOwner public {\n', '\n', '        // Check if the crowdsale has ended or if the old tokens have been sold\n', '    if(coinSentToEther != MAX_CAP){\n', '        if (now < endTime)  throw; // If Crowdsale still running\n', '        if (coinSentToEther < MIN_CAP && now < endTime + 7 days) throw; // If MIN_CAP is not reached donors have 7days to get refund before we can finalise\n', '    }\n', '\t\t\n', '\t\tif (!multisigEther.send(this.balance)) throw; // Move the remaining Ether to the multisig address\n', '\t\t\n', '\t\tuint remains = coin.balanceOf(this);\n', '\t\tif (remains > 0) {\n', '      coinToBurn = coinToBurn.add(remains);\n', '      // Transfer remains to owner to burn\n', '      coin.transfer(owner, remains);\n', '\t\t}\n', '\t\tcrowdsaleClosed = true;\n', '\t}\n', '\n', '\t// Drain functions in case of unexpected issues with the smart contract.\n', '  // ETH drain\n', '\tfunction drain() onlyOwner {\n', '    if (!multisigEther.send(this.balance)) throw; //Transfer to team multisig wallet\n', '\t}\n', '  // TOKEN drain\n', '  function coinDrain() onlyOwner {\n', '    uint remains = coin.balanceOf(this);\n', '    coin.transfer(owner, remains); // Transfer to owner wallet\n', '\t}\n', '\n', '\t// Change multisig wallet in case its needed\n', '\tfunction changeMultisig(address addr) onlyOwner public {\n', '\t\tif (addr == address(0)) throw;\n', '\t\tmultisigEther = addr;\n', '\t}\n', '\n', '\t// Manually back TRIBE owner address.\n', '\tfunction changeTribeOwner() onlyOwner public {\n', '\t\tcoin.transferOwnership(owner);\n', '\t}\n', '\n', '\t// Transfer remains to owner in case if impossible to do min invest\n', '  //THIS CHANGED!!!\n', '\tfunction getCoinRemains() onlyOwner public {\n', '    uint remains = coin.balanceOf(this);\n', '\n', '\t\tif(MIN_CAP < coinSentToEther) throw;\n', '\n', '\t\tBacker backer = backers[owner];\n', '\t\tcoin.transfer(owner, remains); // Transfer TRIBE right now \n', '\n', '\t\tbacker.coinSent = backer.coinSent.add(remains);\n', '\n', '\t\tcoinSentToEther = coinSentToEther.add(remains);\n', '\n', '\t\t// Send events\n', '\t\tLogCoinsEmited(this ,remains);\n', '\t\tLogReceivedETH(owner, etherReceived);\n', '\t}\n', '\n', '\n', '\t//Refund function when minimum cap isnt reached, this is step is step 2, THIS FUNCTION ONLY AVAILABLE IF MIN CAP NOT REACHED.\n', '  //STEP1: From TRIBE token contract use "approve" function with the amount of TRIBE you got in total.\n', '  //STEP2: From TRIBE crowdsale contract use "refund" function with the amount of TRIBE you got in total.\n', '  //STEP3: From TRIBE crowdsale contract use "withdrawPayement" function to recieve the ETH.\n', '\tfunction refund(uint _value) minCapNotReached public {\n', '\t\t\n', '\t\tif (_value != backers[msg.sender].coinSent) throw; // compare value from backer balance\n', '\n', '\t\tcoin.transferFrom(msg.sender, address(this), _value); // get the token back to the crowdsale contract\n', '\n', '\t\tuint ETHToSend = backers[msg.sender].weiReceived;\n', '\t\tbackers[msg.sender].weiReceived=0;\n', '\n', '\t\tif (ETHToSend > 0) {\n', '\t\t\tasyncSend(msg.sender, ETHToSend); // pull payment to get refund in ETH\n', '\t\t}\n', '\t}\n', '\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    assert(b > 0);\n', '    uint c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      throw;\n', '    }\n', '  }\n', '}']
