['pragma solidity ^0.4.11;\n', '\n', '// Token standard API\n', '// https://github.com/ethereum/EIPs/issues/20\n', 'contract ERC20 {\n', '    function totalSupply() constant returns (uint supply);\n', '    function balanceOf( address who ) constant returns (uint value);\n', '    function allowance( address owner, address spender ) constant returns (uint _allowance);\n', '    function transfer( address to, uint value) returns (bool ok);\n', '    function transferFrom( address from, address to, uint value) returns (bool ok);\n', '    function approve( address spender, uint value ) returns (bool ok);\n', '    event Transfer( address indexed from, address indexed to, uint value);\n', '    event Approval( address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '\n', '// Safe Math \n', '// From https://github.com/dapphub/ds-math\n', 'contract DSMath {\n', '    /*\n', '    standard uint256 functions\n', '     */\n', '    function add(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        assert((z = x + y) >= x);\n', '    }\n', '    function sub(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        assert((z = x - y) <= x);\n', '    }\n', '}\n', '\n', '// Base ERC2.0 Token \n', 'contract BaseToken is ERC20, DSMath {\n', '    uint256                                            _supply;\n', '    mapping (address => uint256)                       _balances;\n', '    mapping (address => mapping (address => uint256))  _approvals;\n', '    \n', '    function totalSupply() constant returns (uint256) {\n', '        return _supply;\n', '    }\n', '\n', '    function balanceOf(address src) constant returns (uint256) {\n', '        return _balances[src];\n', '    }\n', '\n', '    function allowance(address src, address guy) constant returns (uint256) {\n', '        return _approvals[src][guy];\n', '    }\n', '    \n', '    function transfer(address dst, uint wad) returns (bool) {\n', '        assert(_balances[msg.sender] >= wad);\n', '        \n', '        _balances[msg.sender] = sub(_balances[msg.sender], wad);\n', '        _balances[dst] = add(_balances[dst], wad);\n', '        \n', '        Transfer(msg.sender, dst, wad);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address src, address dst, uint wad) returns (bool) {\n', '        assert(_balances[src] >= wad);\n', '        assert(_approvals[src][msg.sender] >= wad);\n', '        \n', '        _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\n', '        _balances[src] = sub(_balances[src], wad);\n', '        _balances[dst] = add(_balances[dst], wad);\n', '        \n', '        Transfer(src, dst, wad);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function approve(address guy, uint256 wad) returns (bool) {\n', '        _approvals[msg.sender][guy] = wad;\n', '        \n', '        Approval(msg.sender, guy, wad);\n', '        \n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract GMSToken is BaseToken {\n', '\n', '    string public standard = &#39;GMSToken 1.0&#39;;\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '\n', '\tfunction () {\n', '        //if ether is sent to this address, send it back.\n', '        revert();\n', '    }\n', '\n', '    function GMSToken(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        uint8 decimalUnits,\n', '        string tokenSymbol\n', '        ) {\n', '        _balances[msg.sender] = initialSupply;              // Give the creator all initial tokens\n', '        _supply = initialSupply;                        // Update total supply\n', '        name = tokenName;                                   // Set the name for display purposes\n', '        symbol = tokenSymbol;                               // Set the symbol for display purposes\n', '        decimals = decimalUnits;                            // Amount of decimals for display purposes\n', '    }\n', '}']
['pragma solidity ^0.4.11;\n', '\n', '// Token standard API\n', '// https://github.com/ethereum/EIPs/issues/20\n', 'contract ERC20 {\n', '    function totalSupply() constant returns (uint supply);\n', '    function balanceOf( address who ) constant returns (uint value);\n', '    function allowance( address owner, address spender ) constant returns (uint _allowance);\n', '    function transfer( address to, uint value) returns (bool ok);\n', '    function transferFrom( address from, address to, uint value) returns (bool ok);\n', '    function approve( address spender, uint value ) returns (bool ok);\n', '    event Transfer( address indexed from, address indexed to, uint value);\n', '    event Approval( address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '\n', '// Safe Math \n', '// From https://github.com/dapphub/ds-math\n', 'contract DSMath {\n', '    /*\n', '    standard uint256 functions\n', '     */\n', '    function add(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        assert((z = x + y) >= x);\n', '    }\n', '    function sub(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        assert((z = x - y) <= x);\n', '    }\n', '}\n', '\n', '// Base ERC2.0 Token \n', 'contract BaseToken is ERC20, DSMath {\n', '    uint256                                            _supply;\n', '    mapping (address => uint256)                       _balances;\n', '    mapping (address => mapping (address => uint256))  _approvals;\n', '    \n', '    function totalSupply() constant returns (uint256) {\n', '        return _supply;\n', '    }\n', '\n', '    function balanceOf(address src) constant returns (uint256) {\n', '        return _balances[src];\n', '    }\n', '\n', '    function allowance(address src, address guy) constant returns (uint256) {\n', '        return _approvals[src][guy];\n', '    }\n', '    \n', '    function transfer(address dst, uint wad) returns (bool) {\n', '        assert(_balances[msg.sender] >= wad);\n', '        \n', '        _balances[msg.sender] = sub(_balances[msg.sender], wad);\n', '        _balances[dst] = add(_balances[dst], wad);\n', '        \n', '        Transfer(msg.sender, dst, wad);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address src, address dst, uint wad) returns (bool) {\n', '        assert(_balances[src] >= wad);\n', '        assert(_approvals[src][msg.sender] >= wad);\n', '        \n', '        _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);\n', '        _balances[src] = sub(_balances[src], wad);\n', '        _balances[dst] = add(_balances[dst], wad);\n', '        \n', '        Transfer(src, dst, wad);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function approve(address guy, uint256 wad) returns (bool) {\n', '        _approvals[msg.sender][guy] = wad;\n', '        \n', '        Approval(msg.sender, guy, wad);\n', '        \n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract GMSToken is BaseToken {\n', '\n', "    string public standard = 'GMSToken 1.0';\n", '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '\n', '\tfunction () {\n', '        //if ether is sent to this address, send it back.\n', '        revert();\n', '    }\n', '\n', '    function GMSToken(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        uint8 decimalUnits,\n', '        string tokenSymbol\n', '        ) {\n', '        _balances[msg.sender] = initialSupply;              // Give the creator all initial tokens\n', '        _supply = initialSupply;                        // Update total supply\n', '        name = tokenName;                                   // Set the name for display purposes\n', '        symbol = tokenSymbol;                               // Set the symbol for display purposes\n', '        decimals = decimalUnits;                            // Amount of decimals for display purposes\n', '    }\n', '}']
