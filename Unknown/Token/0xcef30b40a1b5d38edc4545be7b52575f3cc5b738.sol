['pragma solidity ^0.4.0;\n', '\n', 'contract IconomiToken {\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '  event BlockLockSet(uint256 _value);\n', '  event NewOwner(address _newOwner);\n', '\n', '  modifier onlyOwner {\n', '    if (msg.sender == owner) {\n', '      _;\n', '    }\n', '  }\n', '\n', '  modifier blockLock {\n', '    if (!isLocked() || msg.sender == owner) {\n', '      _;\n', '    }\n', '  }\n', '\n', '  modifier checkIfToContract(address _to) {\n', '    if(_to != address(this))  {\n', '      _;\n', '    }\n', '  }\n', '\n', '  uint256 public totalSupply;\n', '  string public name;\n', '  uint8 public decimals;\n', '  string public symbol;\n', "  string public version = '0.0.1';\n", '  address public owner;\n', '  uint256 public lockedUntilBlock;\n', '\n', '  function IconomiToken(\n', '    uint256 _initialAmount,\n', '    string _tokenName,\n', '    uint8 _decimalUnits,\n', '    string _tokenSymbol,\n', '    uint256 _lockedUntilBlock\n', '    ) {\n', '    balances[msg.sender] = _initialAmount;\n', '    totalSupply = _initialAmount;\n', '    name = _tokenName;\n', '    decimals = _decimalUnits;\n', '    symbol = _tokenSymbol;\n', '    lockedUntilBlock = _lockedUntilBlock;\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /* Approves and then calls the receiving contract */\n', '  function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '\n', "    //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\n", '    //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '    //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '    if(!_spender.call(bytes4(sha3("receiveApproval(address,uint256,address,bytes)")), msg.sender, _value, this, _extraData)) { throw; }\n', '    return true;\n', '\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) blockLock checkIfToContract(_to) returns (bool success) {\n', '\n', '    if (balances[msg.sender] >= _value && _value > 0) {\n', '      balances[msg.sender] -= _value;\n', '      balances[_to] += _value;\n', '      Transfer(msg.sender, _to, _value);\n', '      return true;\n', '    } else {\n', '      return false;\n', '    }\n', '\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) blockLock checkIfToContract(_to) returns (bool success) {\n', '\n', '    if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '      balances[_to] += _value;\n', '      balances[_from] -= _value;\n', '      allowed[_from][msg.sender] -= _value;\n', '      Transfer(_from, _to, _value);\n', '      return true;\n', '    } else {\n', '      return false;\n', '    }\n', '\n', '  }\n', '\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) returns (bool success) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function setBlockLock(uint256 _lockedUntilBlock) onlyOwner returns (bool success) {\n', '    lockedUntilBlock = _lockedUntilBlock;\n', '    BlockLockSet(_lockedUntilBlock);\n', '    return true;\n', '  }\n', '\n', '  function isLocked() constant returns (bool success) {\n', '    return lockedUntilBlock > block.number;\n', '  }\n', '\n', '  function replaceOwner(address _newOwner) onlyOwner returns (bool success) {\n', '    owner = _newOwner;\n', '    NewOwner(_newOwner);\n', '    return true;\n', '  }\n', '\n', '  mapping (address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', '\n', 'contract IconomiTokenTest is IconomiToken {\n', '  function IconomiTokenTest(\n', '    uint256 _initialAmount,\n', '    string _tokenName,\n', '    uint8 _decimalUnits,\n', '    string _tokenSymbol,\n', '    uint256 _lockedUntilBlock\n', '    ) IconomiToken(_initialAmount, _tokenName, _decimalUnits, _tokenSymbol, _lockedUntilBlock) {\n', '  }\n', '\n', '  function destruct() onlyOwner {\n', '    selfdestruct(owner);\n', '  }\n', '}']