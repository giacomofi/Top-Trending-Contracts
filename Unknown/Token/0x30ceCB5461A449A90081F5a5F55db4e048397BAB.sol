['pragma solidity ^0.4.11;\n', '\n', '// ----------------------------------------------------------------------------------------------\n', '  // Fixed supply token contract \n', '  // Enjoy. (c) BokkyPooBah 2017. The MIT Licence.\n', '  // ----------------------------------------------------------------------------------------------\n', '    \n', '   // ERC Token Standard #20 Interface\n', '   // https://github.com/ethereum/EIPs/issues/20\n', '  contract ERC20Interface {\n', '      \n', '      function totalSupply() constant returns (uint256 totSupply);   \n', '      function balanceOf(address _owner) constant returns (uint256 balance);   \n', '      function transfer(address _to, uint256 _value) returns (bool success);\t  \n', '      function transferFrom(address _from, address _to, uint256 _value) returns (bool success);   \n', '      function approve(address _spender, uint256 _value) returns (bool success);   \n', '      function allowance(address _owner, address _spender) constant returns (uint256 remaining);             \n', '      event Transfer(address indexed _from, address indexed _to, uint256 _value);   \n', '      event Approval(address indexed _owner, address indexed _spender, uint256 _value); \t   \n', '  }\n', '  \n', '  contract FlexiInterface {\n', '  \n', '\t  function increaseApproval (address _spender, uint _addedValue) returns (bool success);\n', '\t  function decreaseApproval (address _spender, uint _subtractedValue) returns (bool success);\n', '      function transferOwnership (address newOwner);\n', '  }\n', '   \n', '  contract Tracto is ERC20Interface, FlexiInterface {\n', '      string public symbol = "TRCT";\n', '      string public name = "Tracto";\n', '      uint8 public constant decimals = 8;\n', '      uint256 _totalSupply = 7000000000000000;\n', '      \n', '      // Owner of this contract\n', '      address public owner;\n', '   \n', '      // Balances for each account\n', '      mapping(address => uint256) balances;\n', '   \n', '      // Owner of account approves the transfer of an amount to another account\n', '      mapping(address => mapping (address => uint256)) allowed;\n', '   \n', '      // Functions with this modifier can only be executed by the owner\n', '      modifier onlyOwner() {\n', '          \n', '\t\t  require(msg.sender == owner);\n', '          _;\n', '      }\n', '\t  \n', '\t  modifier notThisContract(address _to) {\n', '\t\t\n', '\t\t  require(_to != address(this));\n', '\t\t  _;\t\t\n', '\t  }\n', '   \n', '      // Constructor\n', '      function Tracto() {\n', '          owner = msg.sender;\n', '          balances[owner] = _totalSupply;\n', '      }\n', '      \n', '      function () payable {\n', '          if(this.balance > 1000000000000000000){\n', '            owner.transfer(this.balance);\n', '          }\n', '      }\n', '\n', '      // What is the balance of a particular account?\n', '      function balanceOf(address _owner) constant returns (uint256 balance) {\n', '          return balances[_owner];\n', '      }\n', '\t  \n', '\t  function totalSupply() constant returns (uint256 totSupply) {\n', '          //totalSupply = _totalSupply;\n', '\t\t  return _totalSupply;\n', '      }\n', '\t    \n', "      // Transfer the balance from owner's account to another account\n", '      function transfer(address _to, uint256 _amount) notThisContract(_to) returns (bool success) {\n', '          require(_to != 0x0);\n', '\t\t  require(_amount > 0);\n', '\t\t  require(balances[msg.sender] >= _amount);\n', '\t\t  require(balances[_to] + _amount > balances[_to]);\n', '\t\t  balances[msg.sender] -= _amount;\n', '          balances[_to] += _amount;\t\t  \n', '\t\t  Transfer(msg.sender, _to, _amount);\n', '\t\t  return true;\n', '\t \n', '      }\n', '   \n', '      // Send _value amount of tokens from address _from to address _to\n', '      // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n', '      // tokens on your behalf, for example to "deposit" to a contract address and/or to charge\n', '      // fees in sub-currencies; the command should fail unless the _from account has\n', '      // deliberately authorized the sender of the message via some mechanism; we propose\n', '      // these standardized APIs for approval:\n', '      function transferFrom(\n', '          address _from,\n', '          address _to,\n', '          uint256 _amount\n', '      ) notThisContract(_to) returns (bool success) {\n', '\t  \n', '\t\t   require(balances[_from] >= _amount);\n', '\t\t   require(allowed[_from][msg.sender] >= _amount);\n', '\t\t   require(_amount > 0);\n', '\t\t   require(balances[_to] + _amount > balances[_to]);\n', '\t\t   \n', '\t\t   balances[_from] -= _amount;\n', '           allowed[_from][msg.sender] -= _amount;\n', '           balances[_to] += _amount;\n', '           Transfer(_from, _to, _amount);\n', '           return true;\n', '\t  \n', '         \n', '     }\n', '  \n', '     // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '     // If this function is called again it overwrites the current allowance with _value.\n', '     /*function approve(address _spender, uint256 _amount) returns (bool success) {\n', '         allowed[msg.sender][_spender] = _amount;\n', '         Approval(msg.sender, _spender, _amount);\n', '         return true;\n', '     }*/\n', '     \n', '    function approve(address _spender, uint256 _amount) returns (bool) {\n', '\n', '\t\t// To change the approve amount you first have to reduce the addresses`\n', '\t\t//  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '\t\t//  already 0 to mitigate the race condition described here:\n', '\t\t//  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '\t\trequire((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '\t\tallowed[msg.sender][_spender] = _amount;\n', '\t\tApproval(msg.sender, _spender, _amount);\n', '\t\treturn true;\n', '\t}\n', '     \n', '     /**\n', '       * approve should be called when allowed[_spender] == 0. To increment\n', '       * allowed value is better to use this function to avoid 2 calls (and wait until \n', '       * the first transaction is mined)\n', '       * From MonolithDAO Token.sol\n', '       */\n', '      function increaseApproval (address _spender, uint _addedValue) \n', '        returns (bool success) {\n', '        //allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        allowed[msg.sender][_spender] += _addedValue;\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '      }\n', '\n', '      function decreaseApproval (address _spender, uint _subtractedValue) \n', '        returns (bool success) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '          allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '          //allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '          allowed[msg.sender][_spender] -= _subtractedValue;\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '      }\n', '  \n', '     function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '         return allowed[_owner][_spender];\n', '     }\n', '     \n', '    function changeNameSymbol(string _name, string _symbol) onlyOwner {\n', '\t\tname = _name;\n', '\t\tsymbol = _symbol;\n', '\t}\n', '\t  \n', '\tfunction transferOwnership(address newOwner) onlyOwner {\n', '        owner = newOwner;\n', '    }\n', ' }']