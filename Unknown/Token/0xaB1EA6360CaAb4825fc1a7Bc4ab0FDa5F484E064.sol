['pragma solidity ^0.4.11;\n', '\n', 'contract Erc20Token {\n', '    /* Map all our our balances for issued tokens */\n', '    mapping (address => uint256) balances;\n', '\n', '    /* Map between users and their approval addresses and amounts */\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '\n', '    /* List of all token holders */\n', '    address[] allTokenHolders;\n', '\n', '    /* The name of the contract */\n', '    string public name;\n', '\n', '    /* The symbol for the contract */\n', '    string public symbol;\n', '\n', '    /* How many DPs are in use in this contract */\n', '    uint8 public decimals;\n', '\n', '    /* Defines the current supply of the token in its own units */\n', '    uint256 totalSupplyAmount = 0;\n', '\n', '    /* Our transfer event to fire whenever we shift SMRT around */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /* Our approval event when one user approves another to control */\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    /* Create a new instance of the token with the specified details. */\n', '    function Erc20Token(string _name, string _symbol, uint8 _decimals) {\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '    }\n', '\n', '     /* Transfer funds between two addresses that are not the current msg.sender - this requires approval to have been set separately and follows standard ERC20 guidelines */\n', '     function transferFrom(address _from, address _to, uint256 _amount) returns (bool success) {\n', '        if (balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount > 0 && balances[_to] + _amount > balances[_to]) {\n', '            bool isNew = balances[_to] < 1;\n', '            balances[_from] -= _amount;\n', '            allowed[_from][msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            if (isNew)\n', '                tokenOwnerAdd(_to);\n', '            if (balances[_from] < 1)\n', '                tokenOwnerRemove(_from);\n', '            Transfer(_from, _to, _amount);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /* Adds an approval for the specified account to spend money of the message sender up to the defined limit */\n', '    function approve(address _spender, uint256 _amount) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    /* Gets the current allowance that has been approved for the specified spender of the owner address */\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /* Gets the total supply available of this token */\n', '    function totalSupply() constant returns (uint256) {\n', '        return totalSupplyAmount;\n', '    }\n', '\n', '    /* Gets the balance of a specified account */\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /* Transfer the balance from owner&#39;s account to another account */\n', '    function transfer(address _to, uint256 _amount) returns (bool success) {\n', '        /* Check if sender has balance and for overflows */\n', '        if (balances[msg.sender] < _amount || balances[_to] + _amount < balances[_to])\n', '            throw;\n', '\n', '        /* Do a check to see if they are new, if so we&#39;ll want to add it to our array */\n', '        bool isRecipientNew = balances[_to] < 1;\n', '\n', '        /* Add and subtract new balances */\n', '        balances[msg.sender] -= _amount;\n', '        balances[_to] += _amount;\n', '\n', '        /* Consolidate arrays if they are new or if sender now has empty balance */\n', '        if (isRecipientNew)\n', '            tokenOwnerAdd(_to);\n', '        if (balances[msg.sender] < 1)\n', '            tokenOwnerRemove(msg.sender);\n', '\n', '        /* Fire notification event */\n', '        Transfer(msg.sender, _to, _amount);\n', '        success = true;\n', '    }\n', '\n', '    /* If the specified address is not in our owner list, add them - this can be called by descendents to ensure the database is kept up to date. */\n', '    function tokenOwnerAdd(address _addr) internal {\n', '        /* First check if they already exist */\n', '        uint256 tokenHolderCount = allTokenHolders.length;\n', '        for (uint256 i = 0; i < tokenHolderCount; i++)\n', '            if (allTokenHolders[i] == _addr)\n', '                /* Already found so we can abort now */\n', '                return;\n', '\n', '        /* They don&#39;t seem to exist, so let&#39;s add them */\n', '        allTokenHolders.length++;\n', '        allTokenHolders[allTokenHolders.length - 1] = _addr;\n', '    }\n', '\n', '    /* If the specified address is in our owner list, remove them - this can be called by descendents to ensure the database is kept up to date. */\n', '    function tokenOwnerRemove(address _addr) internal {\n', '        /* Find out where in our array they are */\n', '        uint256 tokenHolderCount = allTokenHolders.length;\n', '        uint256 foundIndex = 0;\n', '        bool found = false;\n', '        uint256 i;\n', '        for (i = 0; i < tokenHolderCount; i++)\n', '            if (allTokenHolders[i] == _addr) {\n', '                foundIndex = i;\n', '                found = true;\n', '                break;\n', '            }\n', '\n', '        /* If we didn&#39;t find them just return */\n', '        if (!found)\n', '            return;\n', '\n', '        /* We now need to shuffle down the array */\n', '        for (i = foundIndex; i < tokenHolderCount - 1; i++)\n', '            allTokenHolders[i] = allTokenHolders[i + 1];\n', '        allTokenHolders.length--;\n', '    }\n', '}\n', '\n', 'contract ImperialCredits is Erc20Token("Imperial Credits", "XIC", 0) {\n', '    address owner;\n', '    bool public isIco  = true;\n', '\n', '    function icoWithdraw() {\n', '      if (this.balance == 0 || msg.sender != owner)\n', '        throw;\n', '      if (!owner.send(this.balance))\n', '        throw;\n', '    }\n', '\n', '    function icoClose() {\n', '      if (msg.sender != owner || !isIco)\n', '        throw;\n', '      if (this.balance > 0)\n', '        if (!owner.send(this.balance))\n', '          throw;\n', '      uint256 remaining = 1000000000 - totalSupplyAmount;\n', '      if (remaining > 0) {\n', '        balances[msg.sender] += remaining;\n', '        totalSupplyAmount = 1000000000;\n', '      }\n', '      isIco = false;\n', '    }\n', '\n', '    function destroyCredits(uint256 amount) {\n', '      if (balances[msg.sender] < amount)\n', '        throw;\n', '      balances[msg.sender] -= amount;\n', '      totalSupplyAmount -= amount;\n', '    }\n', '\n', '    function ImperialCredits() {\n', '      owner=msg.sender;\n', '      balances[msg.sender] = 100000;\n', '      totalSupplyAmount = 100000;\n', '    }\n', '\n', '    function () payable {\n', '        if (totalSupplyAmount >= 1000000000 || !isIco)\n', '          throw;\n', '        uint256 mintAmount = msg.value / 100000000000000;\n', '        uint256 maxMint = 1000000000 - totalSupplyAmount;\n', '        if (mintAmount > maxMint)\n', '          mintAmount = maxMint;\n', '        uint256 change = msg.value - (100000000000000 * mintAmount);\n', '        if (!msg.sender.send(change))\n', '          throw;\n', '        balances[msg.sender] += mintAmount;\n', '        totalSupplyAmount += mintAmount;\n', '    }\n', '}']