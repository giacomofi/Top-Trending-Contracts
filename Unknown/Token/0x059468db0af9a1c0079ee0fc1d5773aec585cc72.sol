['pragma solidity ^0.4.11;\n', 'contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '   contract StudioToken  {\n', '       \n', '       using SafeMath for uint256;\n', '    /* Public variables of the token */\n', '    string public standard = &#39;Token 0.1&#39;;\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '   \n', '    address public owner;\n', '    bool public pauseForDividend = false;\n', '    \n', '    \n', '    \n', '\n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping ( uint => address ) public accountIndex;\n', '    uint accountCount;\n', '    \n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /* This notifies clients about the amount burnt */\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function StudioToken(\n', '       ) {\n', '            \n', '       uint256 initialSupply = 50000000;\n', '        uint8 decimalUnits = 0;   \n', '        appendTokenHolders ( msg.sender );    \n', '        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens\n', '        totalSupply = initialSupply;                        // Update total supply\n', '        name = "Studio";                                   // Set the name for display purposes\n', '        symbol = "STDO";                               // Set the symbol for display purposes\n', '        decimals = decimalUnits;                            // Amount of decimals for display purposes\n', '        \n', '        owner = msg.sender;\n', '    }\n', '    \n', '    function getBalance ( address tokenHolder ) returns (uint256) {\n', '        return balanceOf[ tokenHolder ];\n', '    }\n', '    \n', '    \n', '    function getAccountCount ( ) returns (uint256) {\n', '        return accountCount;\n', '    }\n', '    \n', '    \n', '    function getAddress ( uint256 slot ) returns ( address ) {\n', '        return accountIndex[ slot ];\n', '    }\n', '    \n', '    function getTotalSupply ( ) returns (uint256) {\n', '        return totalSupply;\n', '    }\n', '    \n', '    \n', '   \n', '    \n', '   \n', '    function appendTokenHolders ( address tokenHolder ) private {\n', '        \n', '        if ( balanceOf[ tokenHolder ] == 0 ){ \n', '            accountIndex[ accountCount ] = tokenHolder;\n', '            accountCount++;\n', '        }\n', '        \n', '    }\n', '    \n', '\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) {\n', '        if (_to == 0x0) throw;                               // Prevent transfer to 0x0 address. Use burn() instead\n', '        if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) throw;\n', '        if (  pauseForDividend == true ) throw;// Check for overflows\n', '        appendTokenHolders ( _to);\n', '        balanceOf[msg.sender] -= _value;                     // Subtract from the sender\n', '        balanceOf[_to] += _value;                            // Add the same to the recipient\n', '        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n', '    }\n', '\n', '    /* Allow another contract to spend some tokens in your behalf */\n', '    function approve(address _spender, uint256 _value)\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /* Approve and then communicate the approved contract in a single tx */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }        \n', '\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (_to == 0x0) throw;                                // Prevent transfer to 0x0 address. Use burn() instead\n', '        if (balanceOf[_from] < _value) throw;                 // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows\n', '        if (_value > allowance[_from][msg.sender]) throw;     // Check allowance\n', '        if (  pauseForDividend == true ) throw;// Check for overflows\n', '        balanceOf[_from] -= _value;                           // Subtract from the sender\n', '        balanceOf[_to] += _value;                             // Add the same to the recipient\n', '        allowance[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function burn(uint256 _value) returns (bool success) {\n', '        if (balanceOf[msg.sender] < _value) throw;            // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;                      // Subtract from the sender\n', '        totalSupply -= _value;                                // Updates totalSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _value) returns (bool success) {\n', '        if (balanceOf[_from] < _value) throw;                // Check if the sender has enough\n', '        if (_value > allowance[_from][msg.sender]) throw;    // Check allowance\n', '        balanceOf[_from] -= _value;                          // Subtract from the sender\n', '        totalSupply -= _value;                               // Updates totalSupply\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '    \n', '     modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    \n', '    \n', '    \n', '    function pauseForDividend() onlyOwner{\n', '        \n', '        if ( pauseForDividend == true ) pauseForDividend = false; else pauseForDividend = true;\n', '        \n', '    }\n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    function transferOwnership ( address newOwner) onlyOwner {\n', '        \n', '        owner = newOwner;\n', '        \n', '        \n', '    }\n', '    \n', '    \n', '    \n', '    \n', '}\n', '\n', '\n', 'contract Dividend {\n', '    StudioToken studio; // StudioICO contract instance\n', '    address studio_contract;\n', '   \n', '  \n', '    uint public accountCount;\n', '    event Log(uint);\n', '    address owner;\n', '\n', '\n', '    uint256 public ether_profit;\n', '    uint256 public profit_per_token;\n', '    uint256 holder_token_balance;\n', '    uint256 holder_profit;\n', '    \n', '    \n', '    \n', '     mapping (address => uint256) public balanceOf;\n', '    \n', '    \n', '    event Message(uint256 holder_profit);\n', '    event Transfer(address indexed_from, address indexed_to, uint value);\n', '\n', '    // modifier for owner\n', '    modifier onlyOwner() {\n', '        if (msg.sender != owner) {\n', '            throw;\n', '        }\n', '        _;\n', '    }\n', '    // constructor which takes address of smart contract\n', '    function Dividend(address Studiocontract) {\n', '        owner = msg.sender;\n', '        studio = StudioToken(Studiocontract);\n', '    }\n', '    // unnamed function which takes ether\n', '    function() payable {\n', '       \n', '        studio.pauseForDividend();\n', '\n', '        accountCount = studio.getAccountCount();\n', '        \n', '          Log(accountCount);\n', '\n', '            ether_profit = msg.value;\n', '\n', '            profit_per_token = ether_profit / studio.getTotalSupply();\n', '\n', '            Message(profit_per_token);\n', '        \n', '        \n', '        if (msg.sender == owner) {\n', '            \n', '            for ( uint i=0; i < accountCount ; i++ ) {\n', '               \n', '               address tokenHolder = studio.getAddress(i);\n', '               balanceOf[ tokenHolder ] +=  studio.getBalance( tokenHolder ) * profit_per_token;\n', '        \n', '            }\n', '            \n', '          \n', '\n', '          \n', '            \n', '        }\n', '        \n', '        \n', '         studio.pauseForDividend();\n', '    }\n', '    \n', '    \n', '    \n', '    function withdrawDividends (){\n', '        \n', '        \n', '        msg.sender.transfer(balanceOf[ msg.sender ]);\n', '        balanceOf[ msg.sender ] = 0;\n', '        \n', '        \n', '    }\n', '    \n', '  \n', '    \n', '\n', '\n', '}']
['pragma solidity ^0.4.11;\n', 'contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '   contract StudioToken  {\n', '       \n', '       using SafeMath for uint256;\n', '    /* Public variables of the token */\n', "    string public standard = 'Token 0.1';\n", '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '   \n', '    address public owner;\n', '    bool public pauseForDividend = false;\n', '    \n', '    \n', '    \n', '\n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping ( uint => address ) public accountIndex;\n', '    uint accountCount;\n', '    \n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /* This notifies clients about the amount burnt */\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function StudioToken(\n', '       ) {\n', '            \n', '       uint256 initialSupply = 50000000;\n', '        uint8 decimalUnits = 0;   \n', '        appendTokenHolders ( msg.sender );    \n', '        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens\n', '        totalSupply = initialSupply;                        // Update total supply\n', '        name = "Studio";                                   // Set the name for display purposes\n', '        symbol = "STDO";                               // Set the symbol for display purposes\n', '        decimals = decimalUnits;                            // Amount of decimals for display purposes\n', '        \n', '        owner = msg.sender;\n', '    }\n', '    \n', '    function getBalance ( address tokenHolder ) returns (uint256) {\n', '        return balanceOf[ tokenHolder ];\n', '    }\n', '    \n', '    \n', '    function getAccountCount ( ) returns (uint256) {\n', '        return accountCount;\n', '    }\n', '    \n', '    \n', '    function getAddress ( uint256 slot ) returns ( address ) {\n', '        return accountIndex[ slot ];\n', '    }\n', '    \n', '    function getTotalSupply ( ) returns (uint256) {\n', '        return totalSupply;\n', '    }\n', '    \n', '    \n', '   \n', '    \n', '   \n', '    function appendTokenHolders ( address tokenHolder ) private {\n', '        \n', '        if ( balanceOf[ tokenHolder ] == 0 ){ \n', '            accountIndex[ accountCount ] = tokenHolder;\n', '            accountCount++;\n', '        }\n', '        \n', '    }\n', '    \n', '\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) {\n', '        if (_to == 0x0) throw;                               // Prevent transfer to 0x0 address. Use burn() instead\n', '        if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) throw;\n', '        if (  pauseForDividend == true ) throw;// Check for overflows\n', '        appendTokenHolders ( _to);\n', '        balanceOf[msg.sender] -= _value;                     // Subtract from the sender\n', '        balanceOf[_to] += _value;                            // Add the same to the recipient\n', '        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n', '    }\n', '\n', '    /* Allow another contract to spend some tokens in your behalf */\n', '    function approve(address _spender, uint256 _value)\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '    /* Approve and then communicate the approved contract in a single tx */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }        \n', '\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (_to == 0x0) throw;                                // Prevent transfer to 0x0 address. Use burn() instead\n', '        if (balanceOf[_from] < _value) throw;                 // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows\n', '        if (_value > allowance[_from][msg.sender]) throw;     // Check allowance\n', '        if (  pauseForDividend == true ) throw;// Check for overflows\n', '        balanceOf[_from] -= _value;                           // Subtract from the sender\n', '        balanceOf[_to] += _value;                             // Add the same to the recipient\n', '        allowance[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function burn(uint256 _value) returns (bool success) {\n', '        if (balanceOf[msg.sender] < _value) throw;            // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;                      // Subtract from the sender\n', '        totalSupply -= _value;                                // Updates totalSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _value) returns (bool success) {\n', '        if (balanceOf[_from] < _value) throw;                // Check if the sender has enough\n', '        if (_value > allowance[_from][msg.sender]) throw;    // Check allowance\n', '        balanceOf[_from] -= _value;                          // Subtract from the sender\n', '        totalSupply -= _value;                               // Updates totalSupply\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '    \n', '     modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    \n', '    \n', '    \n', '    function pauseForDividend() onlyOwner{\n', '        \n', '        if ( pauseForDividend == true ) pauseForDividend = false; else pauseForDividend = true;\n', '        \n', '    }\n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    function transferOwnership ( address newOwner) onlyOwner {\n', '        \n', '        owner = newOwner;\n', '        \n', '        \n', '    }\n', '    \n', '    \n', '    \n', '    \n', '}\n', '\n', '\n', 'contract Dividend {\n', '    StudioToken studio; // StudioICO contract instance\n', '    address studio_contract;\n', '   \n', '  \n', '    uint public accountCount;\n', '    event Log(uint);\n', '    address owner;\n', '\n', '\n', '    uint256 public ether_profit;\n', '    uint256 public profit_per_token;\n', '    uint256 holder_token_balance;\n', '    uint256 holder_profit;\n', '    \n', '    \n', '    \n', '     mapping (address => uint256) public balanceOf;\n', '    \n', '    \n', '    event Message(uint256 holder_profit);\n', '    event Transfer(address indexed_from, address indexed_to, uint value);\n', '\n', '    // modifier for owner\n', '    modifier onlyOwner() {\n', '        if (msg.sender != owner) {\n', '            throw;\n', '        }\n', '        _;\n', '    }\n', '    // constructor which takes address of smart contract\n', '    function Dividend(address Studiocontract) {\n', '        owner = msg.sender;\n', '        studio = StudioToken(Studiocontract);\n', '    }\n', '    // unnamed function which takes ether\n', '    function() payable {\n', '       \n', '        studio.pauseForDividend();\n', '\n', '        accountCount = studio.getAccountCount();\n', '        \n', '          Log(accountCount);\n', '\n', '            ether_profit = msg.value;\n', '\n', '            profit_per_token = ether_profit / studio.getTotalSupply();\n', '\n', '            Message(profit_per_token);\n', '        \n', '        \n', '        if (msg.sender == owner) {\n', '            \n', '            for ( uint i=0; i < accountCount ; i++ ) {\n', '               \n', '               address tokenHolder = studio.getAddress(i);\n', '               balanceOf[ tokenHolder ] +=  studio.getBalance( tokenHolder ) * profit_per_token;\n', '        \n', '            }\n', '            \n', '          \n', '\n', '          \n', '            \n', '        }\n', '        \n', '        \n', '         studio.pauseForDividend();\n', '    }\n', '    \n', '    \n', '    \n', '    function withdrawDividends (){\n', '        \n', '        \n', '        msg.sender.transfer(balanceOf[ msg.sender ]);\n', '        balanceOf[ msg.sender ] = 0;\n', '        \n', '        \n', '    }\n', '    \n', '  \n', '    \n', '\n', '\n', '}']
