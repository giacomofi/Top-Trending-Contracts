['pragma solidity ^0.4.17;\n', '\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) constant returns (uint256);\n', '    function transfer(address to, uint256 value) returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) constant returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) returns (bool);\n', '    function approve(address spender, uint256 value) returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) returns (bool) {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amout of tokens to be transfered\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '        var _allowance = allowed[_from][msg.sender];\n', '\n', '        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '        // require (_value <= _allowance);\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifing the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        require(newOwner != address(0));\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to mint tokens\n', '    * @param _to The address that will recieve the minted tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function mint(address _to, uint256 _amount) onlyOwner returns (bool) {\n', '        return mintInternal(_to, _amount);\n', '    }\n', '\n', '    /**\n', '    * @dev Function to stop minting new tokens.\n', '    * @return True if the operation was successful.\n', '    */\n', '    function finishMinting() onlyOwner returns (bool) {\n', '        mintingFinished = true;\n', '        MintFinished();\n', '        return true;\n', '    }\n', '\n', '    function mintInternal(address _to, uint256 _amount) internal canMint returns (bool) {\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Mint(_to, _amount);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract CustomToken is MintableToken {\n', '\n', '    string public name;\n', '\n', "    string public currentState = 'Inactive';\n", '\n', '    string public symbol;\n', '\n', '    uint8 public decimals;\n', '\n', '    uint256 public limitPreIcoTokens;\n', '\n', '    uint256 public weiPerToken;\n', '\n', '    uint256 public limitIcoTokens;\n', '\n', '    bool public preIcoActive = false;\n', '\n', '    bool public icoActive = false;\n', '\n', '    bool public preBountyAdded = false;\n', '\n', '    bool public bountyAdded = false;\n', '\n', '    bool public ownersStakeAdded = false;\n', '\n', '    // address where funds are collected\n', '    address public wallet;\n', '\n', '    // how many token units a buyer gets per wei\n', '    uint256 public ratePreIco;\n', '\n', '    uint256 public rateIco;\n', '\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    // Only Owner can transfer balances and mint ROOTS without payment.\n', '    // Everybody can buy IOU ROOT token by sending some amount of ETH to the contract.\n', '    // Amount of purchased ROOTS determined by the Rate.\n', '    // All ETH are going to Wallet address.\n', '    // Owner can finalize the contract by `finishMinting` transaction\n', '    function CustomToken(\n', '    uint256 _ratePre,\n', '    uint256 _rate,\n', '    address _wallet,\n', '    string _name,\n', '    string _symbol,\n', '    uint8 _decimals,\n', '    uint256 _weiPerToken,\n', '    uint256 _limitPreICO,\n', '    uint256 _limitICO\n', '    ) {\n', '        require(_rate > 0);\n', '        require(_wallet != 0x0);\n', '\n', '        rateIco = _rate;\n', '        ratePreIco = _ratePre;\n', '        wallet = _wallet;\n', '        name = _name;\n', '        weiPerToken = _weiPerToken;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '        limitPreIcoTokens = _limitPreICO;\n', '        limitIcoTokens = _limitICO;\n', '    }\n', '\n', '    function transfer(address _to, uint _value) onlyOwner returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) onlyOwner returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function () payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    function changeWallet(address _newWallet) onlyOwner returns (bool) {\n', '        require(_newWallet != 0x0);\n', '        wallet = _newWallet;\n', '        return true;\n', '    }\n', '\n', '    function changeWeiPerToken(uint256 _newWeiPerToken) onlyOwner returns (bool) {\n', '        require(weiPerToken != 0);\n', '        weiPerToken = _newWeiPerToken;\n', '        return true;\n', '    }\n', '\n', '    function stopIco(address _addrToSendSteak) onlyOwner returns (bool) {\n', '        require(!bountyAdded && !ownersStakeAdded);\n', '        require(_addrToSendSteak != 0x0);\n', '        icoActive = false;\n', '        preIcoActive = false;\n', '        currentState = "Ico finished";\n', '        addOwnersStakeAndBonty(_addrToSendSteak);\n', '        mintingFinished = true;\n', '        MintFinished();\n', '        return true;\n', '    }\n', '\n', '    function stopPreIco() onlyOwner returns (bool) {\n', '        require(!preBountyAdded);\n', '        preIcoActive = false;\n', '        currentState = "Pre Ico finished";\n', '        addPreBounty();\n', '        return true;\n', '    }\n', '\n', '    function startPreIco() onlyOwner returns (bool) {\n', '        require(!icoActive);\n', '        icoActive = false;\n', '        preIcoActive = true;\n', '        currentState = "Pre Ico";\n', '        return true;\n', '    }\n', '\n', '    function startIco() onlyOwner returns (bool) {\n', '        icoActive = true;\n', '        preIcoActive = false;\n', '        currentState = "Ico";\n', '        return true;\n', '    }\n', '\n', '    function buyTokens(address beneficiary) payable {\n', '        require(beneficiary != 0x0);\n', '        require(msg.value > 0);\n', '\n', '        uint256 weiAmount = msg.value;\n', '\n', '        uint256 rate = ratePreIco;\n', '        if(icoActive) rate = rateIco;\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = weiAmount.div(weiPerToken).mul(rate);\n', '\n', '        require((preIcoActive && totalSupply + tokens <= limitPreIcoTokens) || (icoActive && totalSupply + tokens <= limitIcoTokens) );\n', '\n', '        mintInternal(beneficiary, tokens);\n', '        TokenPurchase(\n', '        msg.sender,\n', '        beneficiary,\n', '        weiAmount,\n', '        tokens\n', '        );\n', '\n', '        forwardFunds();\n', '    }\n', '\n', '    // send ether to the fund collection wallet\n', '    function forwardFunds() internal {\n', '        wallet.transfer(msg.value);\n', '    }\n', '\n', '    function addPreBounty() internal onlyOwner returns (bool status) {\n', '        require(!preBountyAdded);\n', '        uint256 additionalCount = totalSupply * 6/100;\n', '        preBountyAdded = true;\n', '        mintInternal(wallet, additionalCount);\n', '        return true;\n', '    }\n', '\n', '    function addOwnersStakeAndBonty(address _addrToSendSteak) internal onlyOwner returns (bool status) {\n', '        require(!bountyAdded && !ownersStakeAdded);\n', '        uint256 additionalCount = totalSupply * 14/100;\n', '        uint256 additionalOwnersStakeCount = totalSupply * 14/100;\n', '        bountyAdded = true;\n', '        ownersStakeAdded = true;\n', '        mintInternal(wallet, additionalCount);\n', '        mintInternal(_addrToSendSteak, additionalOwnersStakeCount);\n', '        return true;\n', '    }\n', '\n', '}']