['pragma solidity ^0.4.10;\n', '\n', '\n', '/// @title Abstract token contract - Functions to be implemented by token contracts.\n', 'contract Token {\n', '    function transfer(address to, uint256 value) returns (bool success);\n', '    function transferFrom(address from, address to, uint256 value) returns (bool success);\n', '    function approve(address spender, uint256 value) returns (bool success);\n', '\n', '    // This is not an abstract function, because solc won&#39;t recognize generated getter functions for public variables as functions.\n', '    function totalSupply() constant returns (uint256) {}\n', '    function balanceOf(address owner) constant returns (uint256 balance);\n', '    function allowance(address owner, address spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/// @title Standard token contract - Standard token interface implementation.\n', 'contract StandardToken is Token {\n', '\n', '    /*\n', '     *  Data structures\n', '     */\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalSupply;\n', '\n', '    /*\n', '     *  Public functions\n', '     */\n', '    /// @dev Transfers sender&#39;s tokens to a given address. Returns success.\n', '    /// @param _to Address of token receiver.\n', '    /// @param _value Number of tokens to transfer.\n', '    /// @return Returns success of function call.\n', '    function transfer(address _to, uint256 _value)\n', '        public\n', '        returns (bool)\n', '    {\n', '        if (balances[msg.sender] < _value) {\n', '            // Balance too low\n', '            throw;\n', '        }\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\n', '    /// @param _from Address from where tokens are withdrawn.\n', '    /// @param _to Address to where tokens are sent.\n', '    /// @param _value Number of tokens to transfer.\n', '    /// @return Returns success of function call.\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '        public\n', '        returns (bool)\n', '    {\n', '        if (balances[_from] < _value || allowed[_from][msg.sender] < _value) {\n', '            // Balance or allowance too low\n', '            throw;\n', '        }\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /// @dev Sets approved amount of tokens for spender. Returns success.\n', '    /// @param _spender Address of allowed account.\n', '    /// @param _value Number of approved tokens.\n', '    /// @return Returns success of function call.\n', '    function approve(address _spender, uint256 _value)\n', '        public\n', '        returns (bool)\n', '    {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /*\n', '     * Read functions\n', '     */\n', '    /// @dev Returns number of allowed tokens for given address.\n', '    /// @param _owner Address of token owner.\n', '    /// @param _spender Address of token spender.\n', '    /// @return Returns remaining allowance for spender.\n', '    function allowance(address _owner, address _spender)\n', '        constant\n', '        public\n', '        returns (uint256)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /// @dev Returns number of tokens owned by given address.\n', '    /// @param _owner Address of token owner.\n', '    /// @return Returns balance of owner.\n', '    function balanceOf(address _owner)\n', '        constant\n', '        public\n', '        returns (uint256)\n', '    {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', '\n', '/// @title DelphiToken contract\n', '/// @author Christopher Grant - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="16757e647f656279667e73645672737a667e7f387b77647d736265">[email&#160;protected]</a>>\n', 'contract DelphiToken is StandardToken {\n', '\n', '    /*\n', '     *  Token meta data\n', '     */\n', '    string constant public name = "Delphi";\n', '    string constant public symbol = "DEL";\n', '    uint8 constant public decimals = 18;\n', '\n', '    /*\n', '     *  Public functions\n', '     */\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function DelphiToken() public {\n', '        uint256 initialSupply = 10000000 * 10**18;\n', '        totalSupply = initialSupply;\n', '        balances[msg.sender] = initialSupply;\n', '    }\n', '}']