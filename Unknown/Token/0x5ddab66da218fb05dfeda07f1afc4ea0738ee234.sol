['pragma solidity ^0.4.9;\n', '\n', '// ----------------------------------------------------------------------------------------------\n', '// The new RARE token contract\n', '//\n', '// https://github.com/bokkypoobah/RAREPeperiumToken\n', '//\n', '// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2017 for Michael C. The MIT Licence.\n', '// ----------------------------------------------------------------------------------------------\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        if (msg.sender != owner) throw;\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() {\n', '        if (msg.sender == newOwner) {\n', '            OwnershipTransferred(owner, newOwner);\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20Token is Owned {\n', '    string public symbol;\n', '    string public name;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Balances for each account\n', '    // ------------------------------------------------------------------------\n', '    mapping (address => uint256) balances;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner of account approves the transfer of an amount to another account\n', '    // ------------------------------------------------------------------------\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Events\n', '    // ------------------------------------------------------------------------\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    function ERC20Token(string _symbol, string _name, uint8 _decimals, uint256 _totalSupply) {\n', '        symbol = _symbol;\n', '        name = _name;\n', '        decimals = _decimals;\n', '        totalSupply = _totalSupply;\n', '        balances[msg.sender] = _totalSupply;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the account balance of another account with address _owner\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from owner's account to another account\n", '    // ------------------------------------------------------------------------\n', '    function transfer(address _to, uint256 _amount) returns (bool success) {\n', '        if (balances[msg.sender] >= _amount             // User has balance\n', '            && _amount > 0                              // Non-zero transfer\n', '            && balances[_to] + _amount > balances[_to]  // Overflow check\n', '        ) {\n', '            balances[msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(msg.sender, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Allow _spender to withdraw from your account, multiple times, up to the\n', '    // _value amount. If this function is called again it overwrites the\n', '    // current allowance with _value.\n', '    // ------------------------------------------------------------------------\n', '    function approve(address _spender, uint256 _amount) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Spender of tokens transfer an amount of tokens from the token owner's\n", '    // balance to another account. The owner of the tokens must already\n', '    // have approve(...)-d this transfer\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', '    ) returns (bool success) {\n', '        if (balances[_from] >= _amount                  // From a/c has balance\n', '            && allowed[_from][msg.sender] >= _amount    // Transfer approved\n', '            && _amount > 0                              // Non-zero transfer\n', '            && balances[_to] + _amount > balances[_to]  // Overflow check\n', '        ) {\n', '            balances[_from] -= _amount;\n', '            allowed[_from][msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(_from, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    // ------------------------------------------------------------------------\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Don't accept ethers\n", '    // ------------------------------------------------------------------------\n', '    function () {\n', '        throw;\n', '    }\n', '}\n', '\n', '\n', 'contract RareToken is ERC20Token {\n', '    // ------------------------------------------------------------------------\n', '    // 100,000,000 tokens that will be populated by the fill, 8 decimal places\n', '    // ------------------------------------------------------------------------\n', '    function RareToken() ERC20Token ("RARE", "RARE", 8, 0) {\n', '    }\n', '\n', '    function burnTokens(uint256 value) onlyOwner {\n', '        if (balances[owner] < value) throw;\n', '        balances[owner] -= value;\n', '        totalSupply -= value;\n', '        Transfer(owner, 0, value);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Fill - to populate tokens from the old token contract\n', '    // ------------------------------------------------------------------------\n', '    // From https://github.com/BitySA/whetcwithdraw/tree/master/daobalance\n', '    bool public sealed;\n', '    // The compiler will warn that this constant does not match the address checksum\n', '    uint256 constant D160 = 0x010000000000000000000000000000000000000000;\n', '    // The 160 LSB is the address of the balance\n', '    // The 96 MSB is the balance of that address.\n', '    function fill(uint256[] data) onlyOwner {\n', '        if (sealed) throw;\n', '        for (uint256 i = 0; i < data.length; i++) {\n', '            address account = address(data[i] & (D160-1));\n', '            uint256 amount = data[i] / D160;\n', '            // Prevent duplicates\n', '            if (balances[account] == 0) {\n', '                balances[account] = amount;\n', '                totalSupply += amount;\n', '                Transfer(0x0, account, amount);\n', '            }\n', '        }\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // After sealing, no more filling is possible\n', '    // ------------------------------------------------------------------------\n', '    function seal() onlyOwner {\n', '        if (sealed) throw;\n', '        sealed = true;\n', '    }\n', '}']