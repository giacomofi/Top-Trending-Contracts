['pragma solidity ^0.4.2;\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        if (msg.sender != owner) throw;\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        if (newOwner == 0x0000000000000000000000000000000000000000) throw;\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', 'contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\n', '\n', '\n', '\n', '\n', '/* Dentacoin Contract */\n', 'contract token is owned {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '    uint256 public buyPriceEth;\n', '    uint256 public sellPriceEth;\n', '    uint256 public minBalanceForAccounts;\n', '//Public variables of the token\n', '\n', '\n', '/* Creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '\n', '/* Generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '\n', '/* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function token() {\n', '        totalSupply = 8000000000000;\n', '        balanceOf[msg.sender] = totalSupply;\n', '// Give the creator all tokens\n', '        name = "Dentacoin";\n', '// Set the name for display purposes\n', '        symbol = "Ù¨";\n', '// Set the symbol for display purposes\n', '        decimals = 0;\n', '// Amount of decimals for display purposes\n', '        buyPriceEth = 1 finney;\n', '        sellPriceEth = 1 finney;\n', '// Sell and buy prices for Dentacoins\n', '        minBalanceForAccounts = 5 finney;\n', '// Minimal eth balance of sender and receiver\n', '    }\n', '\n', '\n', '\n', '\n', '/* Constructor parameters */\n', '    function setEtherPrices(uint256 newBuyPriceEth, uint256 newSellPriceEth) onlyOwner {\n', '        buyPriceEth = newBuyPriceEth;\n', '        sellPriceEth = newSellPriceEth;\n', '    }\n', '\n', '    function setMinBalance(uint minimumBalanceInWei) onlyOwner {\n', '     minBalanceForAccounts = minimumBalanceInWei;\n', '    }\n', '\n', '\n', '\n', '\n', '/* Send coins */\n', '    function transfer(address _to, uint256 _value) {\n', '        if (_value < 1) throw;\n', '// Prevents drain, spam and overflows\n', '        address DentacoinAddress = this;\n', '        if (msg.sender != owner && _to == DentacoinAddress) {\n', '            sellDentacoinsAgainstEther(_value);\n', '// Sell Dentacoins against eth by sending to the token contract\n', '        } else {\n', '            if (balanceOf[msg.sender] < _value) throw;\n', '// Check if the sender has enough\n', '            if (balanceOf[_to] + _value < balanceOf[_to]) throw;\n', '// Check for overflows\n', '            balanceOf[msg.sender] -= _value;\n', '// Subtract from the sender\n', '            if (msg.sender.balance >= minBalanceForAccounts && _to.balance >= minBalanceForAccounts) {\n', '                balanceOf[_to] += _value;\n', '// Add the same to the recipient\n', '                Transfer(msg.sender, _to, _value);\n', '// Notify anyone listening that this transfer took place\n', '            } else {\n', '                balanceOf[this] += 1;\n', '                balanceOf[_to] += (_value - 1);\n', '// Add the same to the recipient\n', '                Transfer(msg.sender, _to, _value);\n', '// Notify anyone listening that this transfer took place\n', '                if(msg.sender.balance < minBalanceForAccounts) {\n', '                    if(!msg.sender.send(minBalanceForAccounts * 3)) throw;\n', '// Send minBalance to Sender\n', '                }\n', '                if(_to.balance < minBalanceForAccounts) {\n', '                    if(!_to.send(minBalanceForAccounts)) throw;\n', '// Send minBalance to Receiver\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '\n', '\n', '\n', '/* User buys Dentacoins and pays in Ether */\n', '    function buyDentacoinsAgainstEther() payable returns (uint amount) {\n', '        if (buyPriceEth == 0) throw;\n', '// Avoid buying if not allowed\n', '        if (msg.value < buyPriceEth) throw;\n', '// Avoid sending small amounts and spam\n', '        amount = msg.value / buyPriceEth;\n', '// Calculate the amount of Dentacoins\n', '        if (balanceOf[this] < amount) throw;\n', '// Check if it has enough to sell\n', '        balanceOf[msg.sender] += amount;\n', "// Add the amount to buyer's balance\n", '        balanceOf[this] -= amount;\n', "// Subtract amount from seller's balance\n", '        Transfer(this, msg.sender, amount);\n', '// Execute an event reflecting the change\n', '        return amount;\n', '    }\n', '\n', '\n', '/* User sells Dentacoins and gets Ether */\n', '    function sellDentacoinsAgainstEther(uint256 amount) returns (uint revenue) {\n', '        if (sellPriceEth == 0) throw;\n', '// Avoid selling\n', '        if (amount < 1) throw;\n', '// Avoid spam\n', '        if (balanceOf[msg.sender] < amount) throw;\n', '// Check if the sender has enough to sell\n', '        revenue = amount * sellPriceEth;\n', '// revenue = eth that will be send to the user\n', '        if ((this.balance - revenue) < (100 * minBalanceForAccounts)) throw;\n', '// Keep certain amount of eth in contract for tx fees\n', '        balanceOf[this] += amount;\n', "// Add the amount to owner's balance\n", '        balanceOf[msg.sender] -= amount;\n', "// Subtract the amount from seller's balance\n", '        if (!msg.sender.send(revenue)) {\n', "// Send ether to the seller. It's important\n", '            throw;\n', '// To do this last to avoid recursion attacks\n', '        } else {\n', '            Transfer(msg.sender, this, amount);\n', '// Execute an event reflecting on the change\n', '            return revenue;\n', '// End function and returns\n', '        }\n', '    }\n', '\n', '\n', '\n', '\n', '/* Allow another contract to spend some tokens in your behalf */\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        return true;\n', '    }\n', '\n', '\n', '/* Approve and then comunicate the approved contract in a single tx */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '\n', '/* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (balanceOf[_from] < _value) throw;\n', '// Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) throw;\n', '// Check for overflows\n', '        if (_value > allowance[_from][msg.sender]) throw;\n', '// Check allowance\n', '        balanceOf[_from] -= _value;\n', '// Subtract from the sender\n', '        balanceOf[_to] += _value;\n', '// Add the same to the recipient\n', '        allowance[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '\n', '\n', '/* refund To Owner */\n', '    function refundToOwner (uint256 amountOfEth, uint256 dcn) onlyOwner {\n', '        uint256 eth = amountOfEth * 1 ether;\n', '        if (!msg.sender.send(eth)) {\n', "// Send ether to the owner. It's important\n", '            throw;\n', '// To do this last to avoid recursion attacks\n', '        } else {\n', '            Transfer(msg.sender, this, amountOfEth);\n', '// Execute an event reflecting on the change\n', '        }\n', '        if (balanceOf[this] < dcn) throw;\n', '// Check if it has enough to sell\n', '        balanceOf[msg.sender] += dcn;\n', "// Add the amount to buyer's balance\n", '        balanceOf[this] -= dcn;\n', "// Subtract amount from seller's balance\n", '        Transfer(this, msg.sender, dcn);\n', '// Execute an event reflecting the change\n', '    }\n', '\n', '\n', '/* This unnamed function is called whenever someone tries to send ether to it and sells Dentacoins */\n', '    function() payable {\n', '        if (msg.sender != owner) {\n', '            buyDentacoinsAgainstEther();\n', '        }\n', '    }\n', '}']