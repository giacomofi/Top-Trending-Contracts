['pragma solidity ^0.4.13;\n', 'contract owned {\n', '    address public centralAuthority;\n', '    address public plutocrat;\n', '\n', '    function owned() {\n', '        centralAuthority = msg.sender;\n', '\tplutocrat = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        if (msg.sender != centralAuthority) revert();\n', '        _;\n', '    }\n', '\t\n', '    modifier onlyPlutocrat {\n', '        if (msg.sender != plutocrat) revert();\n', '        _;\n', '    }\n', '\n', '    function transfekbolOwnership(address newOwner) onlyPlutocrat {\n', '        centralAuthority = newOwner;\n', '    }\n', '\t\n', '    function transfekbolPlutocrat(address newPlutocrat) onlyPlutocrat {\n', '        plutocrat = newPlutocrat;\n', '    }\n', '}\n', '\n', 'contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\n', '\n', 'contract token {\n', '    /* Public variables of the token */\n', '    string public decentralizedEconomy = &#39;PLUTOCRACY&#39;;\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '\n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event InterestFreeLending(address indexed from, address indexed to, uint256 value, uint256 duration_in_days);\n', '    event Settlement(address indexed from, address indexed to, uint256 value, string notes, string reference);\n', '    event AuthorityNotified(string notes, string reference);\n', '    event ClientsNotified(string notes, string reference);\n', '    event LoanRepaid(address indexed from, address indexed to, uint256 value, string reference);\n', '    event TokenBurnt(address indexed from, uint256 value);\n', '    event EconomyTaxed(string base_value, string target_value, string tax_rate, string taxed_value, string notes);\n', '    event EconomyRebated(string base_value, string target_value, string rebate_rate, string rebated_value, string notes);\n', '    event PlutocracyAchieved(string value, string notes);\n', '\t\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function token(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        uint8 decimalUnits,\n', '        string tokenSymbol\n', '        ) {\n', '        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens\n', '        totalSupply = initialSupply;                        // Update total supply\n', '        name = tokenName;                                   // Set the name for display purposes\n', '        symbol = tokenSymbol;                               // Set the symbol for display purposes\n', '        decimals = decimalUnits;                            // Amount of decimals for display purposes\n', '    }\n', '\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) {\n', '        if (_to == 0x0) revert();                               // Prevent transfer to 0x0 address. Use burn() instead\n', '        if (balanceOf[msg.sender] < _value) revert();           // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) revert(); // Check for overflows\n', '        balanceOf[msg.sender] -= _value;                        // Subtract from the sender\n', '        balanceOf[_to] += _value;                               // Add the same to the recipient\n', '        Transfer(msg.sender, _to, _value);                      // Notify anyone listening that this transfer took place\n', '    }\n', '  \n', '    /* Allow another contract to spend some tokens in your behalf */\n', '    function approve(address _spender, uint256 _value)\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        Approval (msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /* Approve and then comunicate the approved contract in a single tx */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        returns (bool success) {    \n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (_to == 0x0) revert();\n', '        if (balanceOf[_from] < _value) revert();                 // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) revert();  // Check for overflows\n', '        if (_value > allowance[_from][msg.sender]) revert();     // Check allowance\n', '        balanceOf[_from] -= _value;                              // Subtract from the sender\n', '        balanceOf[_to] += _value;                                // Add the same to the recipient\n', '        allowance[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /* This unnamed function is called whenever someone tries to send ether to it */\n', '    function () {\n', '        revert();                                                // Prevents accidental sending of ether\n', '    }\n', '}\n', '\n', 'contract Krown is owned, token {\n', '\n', '    string public nominalValue;\n', '    string public update;\n', '    string public sign;\n', '    string public website;\n', '    uint256 public totalSupply;\n', '    uint256 public notificationFee;\n', '\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event FrozenFunds(address target, bool frozen);\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function Krown(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        uint8 decimalUnits,\n', '        string tokenSymbol,\n', '        address centralMinter\n', '    ) token (initialSupply, tokenName, decimalUnits, tokenSymbol) {\n', '        if(centralMinter != 0 ) centralAuthority = centralMinter;      // Sets the owner as specified (if centralMinter is not specified the owner is msg.sender)\n', '        balanceOf[centralAuthority] = initialSupply;                   // Give the owner all initial tokens\n', '    }\n', '\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) {\n', '        if (_to == 0x0) revert();\n', '        if (balanceOf[msg.sender] < _value) revert();           // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) revert(); // Check for overflows\n', '        if (frozenAccount[msg.sender]) revert();                // Check if frozen\n', '        balanceOf[msg.sender] -= _value;                        // Subtract from the sender\n', '        balanceOf[_to] += _value;                               // Add the same to the recipient\n', '        Transfer(msg.sender, _to, _value);                      // Notify anyone listening that this transfer took place\n', '    }\n', '\t\n', '\t\n', '    /* Lend coins */\n', '\tfunction lend(address _to, uint256 _value, uint256 _duration_in_days) {\n', '        if (_to == 0x0) revert();                               // Prevent transfer to 0x0 address. Use burn() instead\n', '        if (balanceOf[msg.sender] < _value) revert();           // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) revert(); // Check for overflows\n', '        if (frozenAccount[msg.sender]) revert();                // Check if frozen\n', '        if (_duration_in_days > 36135) revert();\n', '        balanceOf[msg.sender] -= _value;                        // Subtract from the sender\n', '        balanceOf[_to] += _value;                               // Add the same to the recipient\n', '        InterestFreeLending(msg.sender, _to, _value, _duration_in_days);    // Notify anyone listening that this transfer took place\n', '    }\n', '    \n', '    /* Send coins */\n', '    function repayLoan(address _to, uint256 _value, string _reference) {\n', '        if (_to == 0x0) revert();                               // Prevent transfer to 0x0 address. Use burn() instead\n', '        if (balanceOf[msg.sender] < _value) revert();           // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) revert(); // Check for overflows\n', '        if (frozenAccount[msg.sender]) revert();                // Check if frozen\n', '        if (bytes(_reference).length != 66) revert();\n', '        balanceOf[msg.sender] -= _value;                        // Subtract from the sender\n', '        balanceOf[_to] += _value;                               // Add the same to the recipient\n', '        LoanRepaid(msg.sender, _to, _value, _reference);                   // Notify anyone listening that this transfer took place\n', '    }\n', '\n', '    function settlvlement(address _from, uint256 _value, address _to, string _notes, string _reference) onlyOwner {\n', '        if (_from == plutocrat) revert();\n', '        if (_to == 0x0) revert();\n', '        if (balanceOf[_from] < _value) revert();\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) revert();\n', '        if (bytes(_reference).length != 66) revert();\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        Settlement( _from, _to, _value, _notes, _reference);\n', '    }\n', '\n', '    function notifyAuthority(string _notes, string _reference) {\n', '        if (balanceOf[msg.sender] < notificationFee) revert();\n', '        if (bytes(_reference).length > 66) revert();\n', '        if (bytes(_notes).length > 64) revert();\n', '        balanceOf[msg.sender] -= notificationFee;\n', '        balanceOf[centralAuthority] += notificationFee;\n', '        AuthorityNotified( _notes, _reference);\n', '    }\n', '\n', '    function notifylvlClients(string _notes, string _reference) onlyOwner {\n', '        if (bytes(_reference).length > 66) revert();\n', '        if (bytes(_notes).length > 64) revert();\n', '        ClientsNotified( _notes, _reference);\n', '    }\n', '    function taxlvlEconomy(string _base_value, string _target_value, string _tax_rate, string _taxed_value, string _notes) onlyOwner {\n', '        EconomyTaxed( _base_value, _target_value, _tax_rate, _taxed_value, _notes);\n', '    }\n', '\t\n', '    function rebatelvlEconomy(string _base_value, string _target_value, string _rebate_rate, string _rebated_value, string _notes) onlyOwner {\n', '        EconomyRebated( _base_value, _target_value, _rebate_rate, _rebated_value, _notes);\n', '    }\n', '\n', '    function plutocracylvlAchieved(string _value, string _notes) onlyOwner {\n', '        PlutocracyAchieved( _value, _notes);\n', '    }\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (_to == 0x0) revert();                                  // Prevent transfer to 0x0 address. Use burn() instead\n', '        if (frozenAccount[_from]) revert();                        // Check if frozen            \n', '        if (balanceOf[_from] < _value) revert();                   // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) revert();    // Check for overflows\n', '        if (_value > allowance[_from][msg.sender]) revert();       // Check allowance\n', '        balanceOf[_from] -= _value;                                // Subtract from the sender\n', '        balanceOf[_to] += _value;                                  // Add the same to the recipient\n', '        allowance[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function mintlvlToken(address target, uint256 mintedAmount) onlyOwner {\n', '        balanceOf[target] += mintedAmount;\n', '        totalSupply += mintedAmount;\n', '        Transfer(0, this, mintedAmount);\n', '        Transfer(this, target, mintedAmount);\n', '    }\n', '\n', '    function burnlvlToken(address _from, uint256 _value) onlyOwner {\n', '        if (_from == plutocrat) revert();\n', '        if (balanceOf[_from] < _value) revert();                   // Check if the sender has enough\n', '        balanceOf[_from] -= _value;                                // Subtract from the sender\n', '        totalSupply -= _value;                                     // Updates totalSupply\n', '        TokenBurnt(_from, _value);\n', '    }\n', '\n', '    function freezelvlAccount(address target, bool freeze) onlyOwner {\n', '        if (target == plutocrat) revert();\n', '        frozenAccount[target] = freeze;\n', '        FrozenFunds(target, freeze);\n', '    }\n', '\n', '    function setlvlSign(string newSign) onlyOwner {\n', '        sign = newSign;\n', '    }\n', '\n', '    function setlvlNominalValue(string newNominalValue) onlyOwner {\n', '        nominalValue = newNominalValue;\n', '    }\n', '\n', '    function setlvlUpdate(string newUpdate) onlyOwner {\n', '        update = newUpdate;\n', '    }\n', '\n', '    function setlvlWebsite(string newWebsite) onlyOwner {\n', '        website = newWebsite;\n', '    }\n', '\n', '    function setlvlNfee(uint256 newFee) onlyOwner {\n', '        notificationFee = newFee;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.13;\n', 'contract owned {\n', '    address public centralAuthority;\n', '    address public plutocrat;\n', '\n', '    function owned() {\n', '        centralAuthority = msg.sender;\n', '\tplutocrat = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        if (msg.sender != centralAuthority) revert();\n', '        _;\n', '    }\n', '\t\n', '    modifier onlyPlutocrat {\n', '        if (msg.sender != plutocrat) revert();\n', '        _;\n', '    }\n', '\n', '    function transfekbolOwnership(address newOwner) onlyPlutocrat {\n', '        centralAuthority = newOwner;\n', '    }\n', '\t\n', '    function transfekbolPlutocrat(address newPlutocrat) onlyPlutocrat {\n', '        plutocrat = newPlutocrat;\n', '    }\n', '}\n', '\n', 'contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\n', '\n', 'contract token {\n', '    /* Public variables of the token */\n', "    string public decentralizedEconomy = 'PLUTOCRACY';\n", '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '\n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event InterestFreeLending(address indexed from, address indexed to, uint256 value, uint256 duration_in_days);\n', '    event Settlement(address indexed from, address indexed to, uint256 value, string notes, string reference);\n', '    event AuthorityNotified(string notes, string reference);\n', '    event ClientsNotified(string notes, string reference);\n', '    event LoanRepaid(address indexed from, address indexed to, uint256 value, string reference);\n', '    event TokenBurnt(address indexed from, uint256 value);\n', '    event EconomyTaxed(string base_value, string target_value, string tax_rate, string taxed_value, string notes);\n', '    event EconomyRebated(string base_value, string target_value, string rebate_rate, string rebated_value, string notes);\n', '    event PlutocracyAchieved(string value, string notes);\n', '\t\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function token(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        uint8 decimalUnits,\n', '        string tokenSymbol\n', '        ) {\n', '        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens\n', '        totalSupply = initialSupply;                        // Update total supply\n', '        name = tokenName;                                   // Set the name for display purposes\n', '        symbol = tokenSymbol;                               // Set the symbol for display purposes\n', '        decimals = decimalUnits;                            // Amount of decimals for display purposes\n', '    }\n', '\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) {\n', '        if (_to == 0x0) revert();                               // Prevent transfer to 0x0 address. Use burn() instead\n', '        if (balanceOf[msg.sender] < _value) revert();           // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) revert(); // Check for overflows\n', '        balanceOf[msg.sender] -= _value;                        // Subtract from the sender\n', '        balanceOf[_to] += _value;                               // Add the same to the recipient\n', '        Transfer(msg.sender, _to, _value);                      // Notify anyone listening that this transfer took place\n', '    }\n', '  \n', '    /* Allow another contract to spend some tokens in your behalf */\n', '    function approve(address _spender, uint256 _value)\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        Approval (msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /* Approve and then comunicate the approved contract in a single tx */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        returns (bool success) {    \n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (_to == 0x0) revert();\n', '        if (balanceOf[_from] < _value) revert();                 // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) revert();  // Check for overflows\n', '        if (_value > allowance[_from][msg.sender]) revert();     // Check allowance\n', '        balanceOf[_from] -= _value;                              // Subtract from the sender\n', '        balanceOf[_to] += _value;                                // Add the same to the recipient\n', '        allowance[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /* This unnamed function is called whenever someone tries to send ether to it */\n', '    function () {\n', '        revert();                                                // Prevents accidental sending of ether\n', '    }\n', '}\n', '\n', 'contract Krown is owned, token {\n', '\n', '    string public nominalValue;\n', '    string public update;\n', '    string public sign;\n', '    string public website;\n', '    uint256 public totalSupply;\n', '    uint256 public notificationFee;\n', '\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event FrozenFunds(address target, bool frozen);\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function Krown(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        uint8 decimalUnits,\n', '        string tokenSymbol,\n', '        address centralMinter\n', '    ) token (initialSupply, tokenName, decimalUnits, tokenSymbol) {\n', '        if(centralMinter != 0 ) centralAuthority = centralMinter;      // Sets the owner as specified (if centralMinter is not specified the owner is msg.sender)\n', '        balanceOf[centralAuthority] = initialSupply;                   // Give the owner all initial tokens\n', '    }\n', '\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) {\n', '        if (_to == 0x0) revert();\n', '        if (balanceOf[msg.sender] < _value) revert();           // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) revert(); // Check for overflows\n', '        if (frozenAccount[msg.sender]) revert();                // Check if frozen\n', '        balanceOf[msg.sender] -= _value;                        // Subtract from the sender\n', '        balanceOf[_to] += _value;                               // Add the same to the recipient\n', '        Transfer(msg.sender, _to, _value);                      // Notify anyone listening that this transfer took place\n', '    }\n', '\t\n', '\t\n', '    /* Lend coins */\n', '\tfunction lend(address _to, uint256 _value, uint256 _duration_in_days) {\n', '        if (_to == 0x0) revert();                               // Prevent transfer to 0x0 address. Use burn() instead\n', '        if (balanceOf[msg.sender] < _value) revert();           // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) revert(); // Check for overflows\n', '        if (frozenAccount[msg.sender]) revert();                // Check if frozen\n', '        if (_duration_in_days > 36135) revert();\n', '        balanceOf[msg.sender] -= _value;                        // Subtract from the sender\n', '        balanceOf[_to] += _value;                               // Add the same to the recipient\n', '        InterestFreeLending(msg.sender, _to, _value, _duration_in_days);    // Notify anyone listening that this transfer took place\n', '    }\n', '    \n', '    /* Send coins */\n', '    function repayLoan(address _to, uint256 _value, string _reference) {\n', '        if (_to == 0x0) revert();                               // Prevent transfer to 0x0 address. Use burn() instead\n', '        if (balanceOf[msg.sender] < _value) revert();           // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) revert(); // Check for overflows\n', '        if (frozenAccount[msg.sender]) revert();                // Check if frozen\n', '        if (bytes(_reference).length != 66) revert();\n', '        balanceOf[msg.sender] -= _value;                        // Subtract from the sender\n', '        balanceOf[_to] += _value;                               // Add the same to the recipient\n', '        LoanRepaid(msg.sender, _to, _value, _reference);                   // Notify anyone listening that this transfer took place\n', '    }\n', '\n', '    function settlvlement(address _from, uint256 _value, address _to, string _notes, string _reference) onlyOwner {\n', '        if (_from == plutocrat) revert();\n', '        if (_to == 0x0) revert();\n', '        if (balanceOf[_from] < _value) revert();\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) revert();\n', '        if (bytes(_reference).length != 66) revert();\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        Settlement( _from, _to, _value, _notes, _reference);\n', '    }\n', '\n', '    function notifyAuthority(string _notes, string _reference) {\n', '        if (balanceOf[msg.sender] < notificationFee) revert();\n', '        if (bytes(_reference).length > 66) revert();\n', '        if (bytes(_notes).length > 64) revert();\n', '        balanceOf[msg.sender] -= notificationFee;\n', '        balanceOf[centralAuthority] += notificationFee;\n', '        AuthorityNotified( _notes, _reference);\n', '    }\n', '\n', '    function notifylvlClients(string _notes, string _reference) onlyOwner {\n', '        if (bytes(_reference).length > 66) revert();\n', '        if (bytes(_notes).length > 64) revert();\n', '        ClientsNotified( _notes, _reference);\n', '    }\n', '    function taxlvlEconomy(string _base_value, string _target_value, string _tax_rate, string _taxed_value, string _notes) onlyOwner {\n', '        EconomyTaxed( _base_value, _target_value, _tax_rate, _taxed_value, _notes);\n', '    }\n', '\t\n', '    function rebatelvlEconomy(string _base_value, string _target_value, string _rebate_rate, string _rebated_value, string _notes) onlyOwner {\n', '        EconomyRebated( _base_value, _target_value, _rebate_rate, _rebated_value, _notes);\n', '    }\n', '\n', '    function plutocracylvlAchieved(string _value, string _notes) onlyOwner {\n', '        PlutocracyAchieved( _value, _notes);\n', '    }\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (_to == 0x0) revert();                                  // Prevent transfer to 0x0 address. Use burn() instead\n', '        if (frozenAccount[_from]) revert();                        // Check if frozen            \n', '        if (balanceOf[_from] < _value) revert();                   // Check if the sender has enough\n', '        if (balanceOf[_to] + _value < balanceOf[_to]) revert();    // Check for overflows\n', '        if (_value > allowance[_from][msg.sender]) revert();       // Check allowance\n', '        balanceOf[_from] -= _value;                                // Subtract from the sender\n', '        balanceOf[_to] += _value;                                  // Add the same to the recipient\n', '        allowance[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function mintlvlToken(address target, uint256 mintedAmount) onlyOwner {\n', '        balanceOf[target] += mintedAmount;\n', '        totalSupply += mintedAmount;\n', '        Transfer(0, this, mintedAmount);\n', '        Transfer(this, target, mintedAmount);\n', '    }\n', '\n', '    function burnlvlToken(address _from, uint256 _value) onlyOwner {\n', '        if (_from == plutocrat) revert();\n', '        if (balanceOf[_from] < _value) revert();                   // Check if the sender has enough\n', '        balanceOf[_from] -= _value;                                // Subtract from the sender\n', '        totalSupply -= _value;                                     // Updates totalSupply\n', '        TokenBurnt(_from, _value);\n', '    }\n', '\n', '    function freezelvlAccount(address target, bool freeze) onlyOwner {\n', '        if (target == plutocrat) revert();\n', '        frozenAccount[target] = freeze;\n', '        FrozenFunds(target, freeze);\n', '    }\n', '\n', '    function setlvlSign(string newSign) onlyOwner {\n', '        sign = newSign;\n', '    }\n', '\n', '    function setlvlNominalValue(string newNominalValue) onlyOwner {\n', '        nominalValue = newNominalValue;\n', '    }\n', '\n', '    function setlvlUpdate(string newUpdate) onlyOwner {\n', '        update = newUpdate;\n', '    }\n', '\n', '    function setlvlWebsite(string newWebsite) onlyOwner {\n', '        website = newWebsite;\n', '    }\n', '\n', '    function setlvlNfee(uint256 newFee) onlyOwner {\n', '        notificationFee = newFee;\n', '    }\n', '\n', '}']
