['pragma solidity ^0.4.11;\n', '\n', 'contract Token {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        //Default assumes totalSupply can&#39;t be over max (2^256 - 1).\n', '        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn&#39;t wrap.\n', '        //Replace the if with this one instead.\n', '        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '\n', '    function Owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        if (msg.sender != owner) throw;\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner returns (address _owner) {\n', '        owner = newOwner;\n', '        return owner;\n', '    }\n', '}\n', '\n', 'contract ProsperaToken is StandardToken, Owned {\n', '\n', '    function () {\n', '        //if ether is sent to this address, send it back.\n', '        throw;\n', '    }\n', '\n', '    /* Public variables of the token */\n', '\n', '    /*\n', '    NOTE:\n', '    The following variables are OPTIONAL vanities. One does not have to include them.\n', '    They allow one to customise the token contract & in no way influences the core functionality.\n', '    Some wallets/interfaces might not even bother to look at this information.\n', '    */\n', '    string public name;                   //fancy name: eg Simon Bucks\n', '    uint8 public decimals;                //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It&#39;s like comparing 1 wei to 1 ether.\n', '    string public symbol;                 //An identifier: eg SBX\n', '    string public version = &#39;0.1&#39;;       //human 0.1 standard. Just an arbitrary versioning scheme.\n', '\n', '\n', '    function ProsperaToken(\n', '        uint256 _initialAmount,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol\n', '        ) {\n', '        balances[msg.sender] = _initialAmount;               // Give the creator all initial tokens\n', '        totalSupply = _initialAmount;                        // Update total supply\n', '        name = _tokenName;                                   // Set the name for display purposes\n', '        decimals = _decimalUnits;                            // Amount of decimals for display purposes\n', '        symbol = _tokenSymbol;                               // Set the symbol for display purposes\n', '    }\n', '\n', '    /* Approves and then calls the receiving contract */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '\n', '        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn&#39;t have to include a contract in here just for this.\n', '        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '        if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { throw; }\n', '        return true;\n', '    }\n', '\n', '\n', '    /* Batch token transfer. Used by contract creator to distribute initial coins to holders */\n', '    function batchTransfer(address[] _recipients, uint256[] _values) returns (bool success) {\n', '      if ((_recipients.length == 0) || (_recipients.length != _values.length)) throw;\n', '\n', '      for(uint8 i = 0; i < _recipients.length; i += 1) {\n', '        if (!transfer(_recipients[i], _values[i])) throw;\n', '      }\n', '      return true;\n', '    }\n', '\n', '\n', '\n', '    address minterContract;\n', '    event Mint(address indexed _account, uint256 _amount);\n', '\n', '    modifier onlyMinter {\n', '        if (msg.sender != minterContract) throw;\n', '         _;\n', '    }\n', '\n', '    function setMinter (address newMinter) onlyOwner returns (bool success) {\n', '      minterContract = newMinter;\n', '      return true;\n', '    }\n', '\n', '    function mintToAccount(address _account, uint256 _amount) onlyMinter returns (bool success) {\n', '        // Checks for variable overflow\n', '        if (balances[_account] + _amount < balances[_account]) throw;\n', '        balances[_account] += _amount;\n', '        Mint(_account, _amount);\n', '        return true;\n', '    }\n', '\n', '    function incrementTotalSupply(uint256 _incrementValue) onlyMinter returns (bool success) {\n', '        totalSupply += _incrementValue;\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Minter is Owned {\n', '\n', '  uint256 public lastMintingTime = 0;\n', '  uint256 public lastMintingAmount;\n', '  address public prosperaTokenAddress;\n', '  ProsperaToken public prosperaToken;\n', '\n', '  modifier allowedMinting() {\n', '    if (block.timestamp >= lastMintingTime + 30 days) {\n', '      _;\n', '    }\n', '  }\n', '\n', '  function Minter (uint256 _lastMintingAmount, address _ownerContract) {\n', '    lastMintingAmount = _lastMintingAmount;\n', '    prosperaTokenAddress = _ownerContract;\n', '    prosperaToken = ProsperaToken(_ownerContract);\n', '  }\n', '\n', '  // increases 2.95% from last minting\n', '  function calculateMintAmount() returns (uint256 amount){\n', '   return lastMintingAmount * 10295 / 10000;\n', '  }\n', '\n', '  function updateMintingStatus(uint256 _mintedAmount) internal {\n', '    lastMintingAmount = _mintedAmount;\n', '    lastMintingTime = block.timestamp;\n', '    prosperaToken.incrementTotalSupply(_mintedAmount);\n', '  }\n', '\n', '  function mint() allowedMinting onlyOwner returns (bool success) {\n', '    uint256 value = calculateMintAmount();\n', '    prosperaToken.mintToAccount(msg.sender, value);\n', '    updateMintingStatus(value);\n', '    return true;\n', '  }\n', '}']
['pragma solidity ^0.4.11;\n', '\n', 'contract Token {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', "        //Default assumes totalSupply can't be over max (2^256 - 1).\n", "        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n", '        //Replace the if with this one instead.\n', '        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '\n', '    function Owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        if (msg.sender != owner) throw;\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner returns (address _owner) {\n', '        owner = newOwner;\n', '        return owner;\n', '    }\n', '}\n', '\n', 'contract ProsperaToken is StandardToken, Owned {\n', '\n', '    function () {\n', '        //if ether is sent to this address, send it back.\n', '        throw;\n', '    }\n', '\n', '    /* Public variables of the token */\n', '\n', '    /*\n', '    NOTE:\n', '    The following variables are OPTIONAL vanities. One does not have to include them.\n', '    They allow one to customise the token contract & in no way influences the core functionality.\n', '    Some wallets/interfaces might not even bother to look at this information.\n', '    */\n', '    string public name;                   //fancy name: eg Simon Bucks\n', "    uint8 public decimals;                //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.\n", '    string public symbol;                 //An identifier: eg SBX\n', "    string public version = '0.1';       //human 0.1 standard. Just an arbitrary versioning scheme.\n", '\n', '\n', '    function ProsperaToken(\n', '        uint256 _initialAmount,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol\n', '        ) {\n', '        balances[msg.sender] = _initialAmount;               // Give the creator all initial tokens\n', '        totalSupply = _initialAmount;                        // Update total supply\n', '        name = _tokenName;                                   // Set the name for display purposes\n', '        decimals = _decimalUnits;                            // Amount of decimals for display purposes\n', '        symbol = _tokenSymbol;                               // Set the symbol for display purposes\n', '    }\n', '\n', '    /* Approves and then calls the receiving contract */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '\n', "        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\n", '        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '        if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { throw; }\n', '        return true;\n', '    }\n', '\n', '\n', '    /* Batch token transfer. Used by contract creator to distribute initial coins to holders */\n', '    function batchTransfer(address[] _recipients, uint256[] _values) returns (bool success) {\n', '      if ((_recipients.length == 0) || (_recipients.length != _values.length)) throw;\n', '\n', '      for(uint8 i = 0; i < _recipients.length; i += 1) {\n', '        if (!transfer(_recipients[i], _values[i])) throw;\n', '      }\n', '      return true;\n', '    }\n', '\n', '\n', '\n', '    address minterContract;\n', '    event Mint(address indexed _account, uint256 _amount);\n', '\n', '    modifier onlyMinter {\n', '        if (msg.sender != minterContract) throw;\n', '         _;\n', '    }\n', '\n', '    function setMinter (address newMinter) onlyOwner returns (bool success) {\n', '      minterContract = newMinter;\n', '      return true;\n', '    }\n', '\n', '    function mintToAccount(address _account, uint256 _amount) onlyMinter returns (bool success) {\n', '        // Checks for variable overflow\n', '        if (balances[_account] + _amount < balances[_account]) throw;\n', '        balances[_account] += _amount;\n', '        Mint(_account, _amount);\n', '        return true;\n', '    }\n', '\n', '    function incrementTotalSupply(uint256 _incrementValue) onlyMinter returns (bool success) {\n', '        totalSupply += _incrementValue;\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Minter is Owned {\n', '\n', '  uint256 public lastMintingTime = 0;\n', '  uint256 public lastMintingAmount;\n', '  address public prosperaTokenAddress;\n', '  ProsperaToken public prosperaToken;\n', '\n', '  modifier allowedMinting() {\n', '    if (block.timestamp >= lastMintingTime + 30 days) {\n', '      _;\n', '    }\n', '  }\n', '\n', '  function Minter (uint256 _lastMintingAmount, address _ownerContract) {\n', '    lastMintingAmount = _lastMintingAmount;\n', '    prosperaTokenAddress = _ownerContract;\n', '    prosperaToken = ProsperaToken(_ownerContract);\n', '  }\n', '\n', '  // increases 2.95% from last minting\n', '  function calculateMintAmount() returns (uint256 amount){\n', '   return lastMintingAmount * 10295 / 10000;\n', '  }\n', '\n', '  function updateMintingStatus(uint256 _mintedAmount) internal {\n', '    lastMintingAmount = _mintedAmount;\n', '    lastMintingTime = block.timestamp;\n', '    prosperaToken.incrementTotalSupply(_mintedAmount);\n', '  }\n', '\n', '  function mint() allowedMinting onlyOwner returns (bool success) {\n', '    uint256 value = calculateMintAmount();\n', '    prosperaToken.mintToAccount(msg.sender, value);\n', '    updateMintingStatus(value);\n', '    return true;\n', '  }\n', '}']
