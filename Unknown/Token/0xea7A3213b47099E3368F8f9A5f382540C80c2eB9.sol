['pragma solidity ^0.4.17;\n', 'contract tokenRecipient { function receiveApproval(address from, uint256 value, address token, bytes extraData); }\n', 'contract JaxBox\n', '  { \n', '     /* Variables  */\n', '    string  public name;         // name  of contract\n', '    string  public symbol;       // symbol of contract\n', '    uint8   public decimals;     // how many decimals to keep , 18 is best \n', '    uint256 public totalSupply; // how many tokens to create\n', '    uint256 public remaining;   // how many tokens has left\n', '    uint256 public ethRate;     // current rate of ether\n', '    address public owner;       // contract creator\n', '    uint256 public amountCollected; // how much funds has been collected\n', '    uint8   public icoStatus;\n', '    uint8   public icoTokenPrice;\n', '    address public benAddress;\n', '    \n', '     /* Array  */\n', '    mapping (address => uint256) public balanceOf; // array of all balances\n', '    mapping (address => uint256) public investors;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    mapping (address => bool) public frozenAccount;\n', '    \n', '    /* Events  */\n', '    event FrozenFunds(address target, bool frozen);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Burn(address indexed from, uint256 value);\n', '    event TransferSell(address indexed from, address indexed to, uint256 value, string typex); // only for ico sales\n', '    \n', '\n', '     /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function JaxBox() \n', '    {\n', '      totalSupply = 10000000000000000000000000000; // as the decimals are 18 we add 18 zero after total supply, as all values are stored in wei\n', '      owner =  msg.sender;                      // Set owner of contract\n', '      balanceOf[owner] = totalSupply;           // Give the creator all initial tokens\n', '      totalSupply = totalSupply;                // Update total supply\n', '      name = "JaxBox";                     // Set the name for display purposes\n', '      symbol = "JBC";                       // Set the symbol for display purposes\n', '      decimals = 18;                            // Amount of decimals for display purposes\n', '      remaining = totalSupply;\n', '      ethRate = 300;\n', '      icoStatus = 1;\n', '      icoTokenPrice = 10; // values are in cents\n', '      benAddress = 0x57D1aED65eE1921CC7D2F3702C8A28E5Dd317913;\n', '    }\n', '\n', '   modifier onlyOwner()\n', '    {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function ()  payable// called when ether is send\n', '    {\n', '        if (remaining > 0 && icoStatus == 1 )\n', '        {\n', '            uint  finalTokens =  ((msg.value / 10 ** 16) * ((ethRate * 10 ** 2) / icoTokenPrice)) / 10 ** 2;\n', '            if(finalTokens < remaining)\n', '                {\n', '                    remaining = remaining - finalTokens;\n', '                    amountCollected = amountCollected + (msg.value / 10 ** 18);\n', '                    _transfer(owner,msg.sender, finalTokens); \n', '                    TransferSell(owner, msg.sender, finalTokens,&#39;Online&#39;);\n', '                }\n', '            else\n', '                {\n', '                    throw;\n', '                }\n', '        }\n', '        else\n', '        {\n', '            throw;\n', '        }\n', '    }    \n', '    \n', '    function sellOffline(address rec_address,uint256 token_amount) onlyOwner \n', '    {\n', '        if (remaining > 0)\n', '        {\n', '            uint finalTokens =  (token_amount  * (10 ** 18)); //  we sell each token for $0.10 so multiply by 10\n', '            if(finalTokens < remaining)\n', '                {\n', '                    remaining = remaining - finalTokens;\n', '                    _transfer(owner,rec_address, finalTokens);    \n', '                    TransferSell(owner, rec_address, finalTokens,&#39;Offline&#39;);\n', '                }\n', '            else\n', '                {\n', '                    throw;\n', '                }\n', '        }\n', '        else\n', '        {\n', '            throw;\n', '        }        \n', '    }\n', '    \n', '    function getEthRate() onlyOwner constant returns  (uint) // Get current rate of ether \n', '    {\n', '        return ethRate;\n', '    }\n', '    \n', '    function setEthRate (uint newEthRate)   onlyOwner // Set ether price\n', '    {\n', '        ethRate = newEthRate;\n', '    } \n', '\n', '\n', '    function getTokenPrice() onlyOwner constant returns  (uint8) // Get current token price\n', '    {\n', '        return icoTokenPrice;\n', '    }\n', '    \n', '    function setTokenPrice (uint8 newTokenRate)   onlyOwner // Set one token price\n', '    {\n', '        icoTokenPrice = newTokenRate;\n', '    }     \n', '    \n', '    \n', '\n', '    \n', '    function changeIcoStatus (uint8 statx)   onlyOwner // Change ICO Status\n', '    {\n', '        icoStatus = statx;\n', '    } \n', '    \n', '    \n', '    function withdraw(uint amountWith) onlyOwner // withdraw partical amount\n', '        {\n', '            if(msg.sender == owner)\n', '            {\n', '                if(amountWith > 0)\n', '                    {\n', '                        amountWith = (amountWith * 10 ** 18); // as input accept parameter in weis\n', '                        benAddress.send(amountWith);\n', '                    }\n', '            }\n', '            else\n', '            {\n', '                throw;\n', '            }\n', '        }\n', '\n', '    function withdraw_all() onlyOwner // call when ICO is done\n', '        {\n', '            if(msg.sender == owner)\n', '            {\n', '                benAddress.send(this.balance);\n', '                //suicide(msg.sender);\n', '            }\n', '            else\n', '            {\n', '                throw;\n', '            }\n', '        }\n', '\n', '    function mintToken(uint256 tokensToMint) onlyOwner \n', '        {\n', '            var totalTokenToMint = tokensToMint * (10 ** 18);\n', '            balanceOf[owner] += totalTokenToMint;\n', '            totalSupply += totalTokenToMint;\n', '            Transfer(0, owner, totalTokenToMint);\n', '        }\n', '\n', '    function freezeAccount(address target, bool freeze) onlyOwner \n', '        {\n', '            frozenAccount[target] = freeze;\n', '            FrozenFunds(target, freeze);\n', '        }\n', '            \n', '\n', '    function getCollectedAmount() constant returns (uint256 balance) \n', '        {\n', '            return amountCollected;\n', '        }        \n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) \n', '        {\n', '            return balanceOf[_owner];\n', '        }\n', '\n', '    function totalSupply() constant returns (uint256 tsupply) \n', '        {\n', '            tsupply = totalSupply;\n', '        }    \n', '\n', '\n', '    function transferOwnership(address newOwner) onlyOwner \n', '        { \n', '            balanceOf[owner] = 0;                        \n', '            balanceOf[newOwner] = remaining;               \n', '            owner = newOwner; \n', '        }        \n', '\n', '  /* Internal transfer, only can be called by this contract */\n', '  function _transfer(address _from, address _to, uint _value) internal \n', '      {\n', '          require(!frozenAccount[_from]);                     // Prevent transfer from frozenfunds\n', '          require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n', '          require (balanceOf[_from] > _value);                // Check if the sender has enough\n', '          require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\n', '          balanceOf[_from] -= _value;                         // Subtract from the sender\n', '          balanceOf[_to] += _value;                            // Add the same to the recipient\n', '          Transfer(_from, _to, _value);\n', '      }\n', '\n', '\n', '  function transfer(address _to, uint256 _value) \n', '      {\n', '          _transfer(msg.sender, _to, _value);\n', '      }\n', '\n', '  /// @notice Send `_value` tokens to `_to` in behalf of `_from`\n', '  /// @param _from The address of the sender\n', '  /// @param _to The address of the recipient\n', '  /// @param _value the amount to send\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) \n', '      {\n', '          require (_value < allowance[_from][msg.sender]);     // Check allowance\n', '          allowance[_from][msg.sender] -= _value;\n', '          _transfer(_from, _to, _value);\n', '          return true;\n', '      }\n', '\n', '  /// @notice Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '  /// @param _spender The address authorized to spend\n', '  /// @param _value the max amount they can spend\n', '  function approve(address _spender, uint256 _value) returns (bool success) \n', '      {\n', '          allowance[msg.sender][_spender] = _value;\n', '          return true;\n', '      }\n', '\n', '  /// @notice Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '  /// @param _spender The address authorized to spend\n', '  /// @param _value the max amount they can spend\n', '  /// @param _extraData some extra information to send to the approved contract\n', '  function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success)\n', '      {\n', '          tokenRecipient spender = tokenRecipient(_spender);\n', '          if (approve(_spender, _value)) {\n', '              spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '              return true;\n', '          }\n', '      }        \n', '\n', '  /// @notice Remove `_value` tokens from the system irreversibly\n', '  /// @param _value the amount of money to burn\n', '  function burn(uint256 _value) returns (bool success) \n', '      {\n', '          require (balanceOf[msg.sender] > _value);            // Check if the sender has enough\n', '          balanceOf[msg.sender] -= _value;                      // Subtract from the sender\n', '          totalSupply -= _value;                                // Updates totalSupply\n', '          Burn(msg.sender, _value);\n', '          return true;\n', '      }\n', '\n', '  function burnFrom(address _from, uint256 _value) returns (bool success) \n', '      {\n', '          require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '          require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '          balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', '          allowance[_from][msg.sender] -= _value;             // Subtract from the sender&#39;s allowance\n', '          totalSupply -= _value;                              // Update totalSupply\n', '          Burn(_from, _value);\n', '          return true;\n', '      }\n', '} // end of contract']