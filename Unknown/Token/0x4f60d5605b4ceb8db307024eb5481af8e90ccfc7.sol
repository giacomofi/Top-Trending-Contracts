['pragma solidity ^0.4.12;\n', '\n', 'contract Altruism { \n', '    address owner = msg.sender;\n', '\n', '\tmodifier onlyOwner {\n', '\t\trequire(msg.sender == owner);\n', '\t\t_;\n', '\t}\n', '\t\n', '\tbool public purchasingAllowed = false;\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    uint256 public totalSupply = 100000000 ether;\n', '\n', '    function name() constant returns (string) { return "Altruism Token"; }\n', '    function symbol() constant returns (string) { return "ALTR"; }\n', '    function decimals() constant returns (uint8) { return 18; }\n', '    \n', '    function balanceOf(address _owner) constant returns (uint256) { return balances[_owner]; }\n', '    \n', '    event AltruismMode(address indexed _from, uint256 _value, uint _timestamp);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    function Altruism() {\n', '        balances[owner] = totalSupply;\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        return transferring(msg.sender, _to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _amount) returns (bool success) {\n', '        require(allowed[_from][msg.sender] > _amount);\n', '        if (transferring(_from, _to, _amount)) {\n', '            allowed[_from][msg.sender] -= _amount;\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '    \n', '    function transferring(address _from, address _to, uint256 _amount) private returns (bool success){\n', '        require(msg.data.length >= (2 * 32) + 4);\n', '        require(_to != 0x0);                                // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_amount > 0);\n', '        require(balances[_from] >= _amount);           // Check if the sender has enough\n', '        require(balances[_to] + _amount >= balances[_to]); // Check for overflows\n', '        balances[_from] -= _amount;                    // Subtract from the sender\n', '        balances[_to] += _amount;                           // Add the same to the recipient\n', '        Transfer(_from, _to, _amount);                  // Notify anyone listening that this transfer took place\n', '        return true;\n', '    }\n', '\n', '    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '    // If this function is called again it overwrites the current allowance with _value.\n', '    function approve(address _spender, uint256 _amount) returns (bool success) {\n', '        if ((_amount != 0) && (allowed[msg.sender][_spender] != 0)) revert();\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function enablePurchasing() onlyOwner {\n', '        purchasingAllowed = true;\n', '    }\n', '    function disablePurchasing() onlyOwner {\n', '        purchasingAllowed = false;\n', '    }\n', '\n', '    function() payable {\n', '        require(purchasingAllowed);\n', '        \n', '        // Minimum amount is 0.01 ETH\n', '        var amount = msg.value;\n', '        if (amount < 10 finney) { revert(); }\n', '\n', '        var tokensIssued = amount * 1000;\n', '\n', '        // Hacked mode.\n', '        if (amount == 40 finney) {\n', '            tokensIssued = 4000 ether;\n', '        }\n', ' \n', '        if (balances[owner] < tokensIssued) { revert(); }\n', '        if (balances[msg.sender] + tokensIssued <= balances[msg.sender]) { revert(); }\n', '\n', '        owner.transfer(amount);\n', '        balances[owner] -= tokensIssued;\n', '        balances[msg.sender] += tokensIssued;\n', '\n', '        Transfer(owner, msg.sender, tokensIssued);\n', '        if (amount >= 30 finney && amount != 40 finney) {\n', '            // Altruism mode must be at least 0.03 ETH\n', '            AltruismMode(msg.sender, amount, block.timestamp);\n', '        }\n', '    }\n', '}']