['pragma solidity ^0.4.11;\n', '\n', '/*\n', 'AVC coin as a simple implementation of ERC20\n', 'Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\n', '*/\n', '\n', 'contract ApprovalReceiver {\n', '    function receiveApproval(address,uint256,address,bytes);\n', '}\n', '\n', 'contract AviaC01n  {\n', '\n', '\tfunction AviaC01n (){\n', '\t\tbalances[msg.sender] = totalSupply;\n', '\t}\n', '\n', '\n', '\t/// explicitely reject ethers\n', '\tfunction () { revert(); }\n', '\n', '\t/// ====== ERC20 optional token descriptors ======\n', '    string public name = "Avia C01n";\n', '    uint8 public decimals = 18;\n', '    string public symbol  = "AC0";\n', '    string public version = &#39;0.1.0&#39;;\n', '    \n', '\t/// ====== ERC20 implementation starts here =====\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    /// ======= ERC20 extension =======\n', '    \n', '    /* Approves and then calls the receiving contract */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        ApprovalReceiver(_spender).receiveApproval(msg.sender, _value, this, _extraData);\n', '        return true;\n', '    }\n', '    \n', '    /// ======= events  =======\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    \n', '    /// ======= states =====\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\tuint256 public constant totalSupply = 10000000 * 1 finney;\n', '\t\n', '}']
['pragma solidity ^0.4.11;\n', '\n', '/*\n', 'AVC coin as a simple implementation of ERC20\n', 'Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\n', '*/\n', '\n', 'contract ApprovalReceiver {\n', '    function receiveApproval(address,uint256,address,bytes);\n', '}\n', '\n', 'contract AviaC01n  {\n', '\n', '\tfunction AviaC01n (){\n', '\t\tbalances[msg.sender] = totalSupply;\n', '\t}\n', '\n', '\n', '\t/// explicitely reject ethers\n', '\tfunction () { revert(); }\n', '\n', '\t/// ====== ERC20 optional token descriptors ======\n', '    string public name = "Avia C01n";\n', '    uint8 public decimals = 18;\n', '    string public symbol  = "AC0";\n', "    string public version = '0.1.0';\n", '    \n', '\t/// ====== ERC20 implementation starts here =====\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    /// ======= ERC20 extension =======\n', '    \n', '    /* Approves and then calls the receiving contract */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        ApprovalReceiver(_spender).receiveApproval(msg.sender, _value, this, _extraData);\n', '        return true;\n', '    }\n', '    \n', '    /// ======= events  =======\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    \n', '    /// ======= states =====\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\tuint256 public constant totalSupply = 10000000 * 1 finney;\n', '\t\n', '}']
