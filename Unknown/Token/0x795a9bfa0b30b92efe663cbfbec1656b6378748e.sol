['pragma solidity ^0.4.10;\n', 'contract ERC20 {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) constant returns (uint);\n', '  function allowance(address owner, address spender) constant returns (uint);\n', '\n', '  function transfer(address to, uint value) returns (bool ok);\n', '  function transferFrom(address from, address to, uint value) returns (bool ok);\n', '  function approve(address spender, uint value) returns (bool ok);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '/**\n', ' * Provides methods to safely add, subtract and multiply uint256 numbers.\n', ' */\n', 'contract SafeMath {\n', '  uint256 constant private MAX_UINT256 =\n', '    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n', '\n', '  /**\n', '   * Add two uint256 values, throw in case of overflow.\n', '   *\n', '   * @param x first value to add\n', '   * @param y second value to add\n', '   * @return x + y\n', '   */\n', '  function safeAdd (uint256 x, uint256 y)\n', '  constant internal\n', '  returns (uint256 z) {\n', '    if (x > MAX_UINT256 - y) throw;\n', '    return x + y;\n', '  }\n', '\n', '  /**\n', '   * Subtract one uint256 value from another, throw in case of underflow.\n', '   *\n', '   * @param x value to subtract from\n', '   * @param y value to subtract\n', '   * @return x - y\n', '   */\n', '  function safeSub (uint256 x, uint256 y)\n', '  constant internal\n', '  returns (uint256 z) {\n', '    if (x < y) throw;\n', '    return x - y;\n', '  }\n', '\n', '  /**\n', '   * Multiply two uint256 values, throw in case of overflow.\n', '   *\n', '   * @param x first value to multiply\n', '   * @param y second value to multiply\n', '   * @return x * y\n', '   */\n', '  function safeMul (uint256 x, uint256 y)\n', '  constant internal\n', '  returns (uint256 z) {\n', '    if (y == 0) return 0; // Prevent division by zero at the next line\n', '    if (x > MAX_UINT256 / y) throw;\n', '    return x * y;\n', '  }\n', '}\n', '\n', 'contract Vote is ERC20, SafeMath{\n', '\n', '\tmapping (address => uint) balances;\n', '\tmapping (address => mapping (address => uint)) allowed;\n', '\n', '\tuint public totalSupply;\n', '\tuint public initialSupply;\n', '\tstring public name;\n', '\tstring public symbol;\n', '\tuint8 public decimals;\n', '\n', '\tfunction Vote(){\n', '\t\tinitialSupply = 100000;\n', '\t\ttotalSupply = initialSupply;\n', '\t\tbalances[msg.sender] = initialSupply;\n', '\t\tname = "EthTaipei Logo Vote";\n', '\t\tsymbol = "EthTaipei Logo";\n', '\t\tdecimals = 0;\n', '\t}\n', '\n', '\tfunction transfer(address _to, uint _value) returns (bool) {\n', '\t    balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '\t    balances[_to] = safeAdd(balances[_to], _value);\n', '\t    Transfer(msg.sender, _to, _value);\n', '\t    return true;\n', '  \t}\n', '\n', '  \tfunction transferFrom(address _from, address _to, uint _value) returns (bool) {\n', '\t    var _allowance = allowed[_from][msg.sender];\t    \n', '\t    balances[_to] = safeAdd(balances[_to], _value);\n', '\t    balances[_from] = safeSub(balances[_from], _value);\n', '\t    allowed[_from][msg.sender] = safeSub(_allowance, _value);\n', '\t    Transfer(_from, _to, _value);\n', '\t    return true;\n', '  \t}\n', '\n', '  \tfunction approve(address _spender, uint _value) returns (bool) {\n', '    \tallowed[msg.sender][_spender] = _value;\n', '    \tApproval(msg.sender, _spender, _value);\n', '    \treturn true;\n', '  \t}\n', '\n', '  \tfunction balanceOf(address _address) constant returns (uint balance) {\n', '  \t\treturn balances[_address];\n', '  \t}\n', '\n', '  \tfunction allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '    \treturn allowed[_owner][_spender];\n', '  \t}\n', '\n', '}']
['pragma solidity ^0.4.10;\n', 'contract ERC20 {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) constant returns (uint);\n', '  function allowance(address owner, address spender) constant returns (uint);\n', '\n', '  function transfer(address to, uint value) returns (bool ok);\n', '  function transferFrom(address from, address to, uint value) returns (bool ok);\n', '  function approve(address spender, uint value) returns (bool ok);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '/**\n', ' * Provides methods to safely add, subtract and multiply uint256 numbers.\n', ' */\n', 'contract SafeMath {\n', '  uint256 constant private MAX_UINT256 =\n', '    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n', '\n', '  /**\n', '   * Add two uint256 values, throw in case of overflow.\n', '   *\n', '   * @param x first value to add\n', '   * @param y second value to add\n', '   * @return x + y\n', '   */\n', '  function safeAdd (uint256 x, uint256 y)\n', '  constant internal\n', '  returns (uint256 z) {\n', '    if (x > MAX_UINT256 - y) throw;\n', '    return x + y;\n', '  }\n', '\n', '  /**\n', '   * Subtract one uint256 value from another, throw in case of underflow.\n', '   *\n', '   * @param x value to subtract from\n', '   * @param y value to subtract\n', '   * @return x - y\n', '   */\n', '  function safeSub (uint256 x, uint256 y)\n', '  constant internal\n', '  returns (uint256 z) {\n', '    if (x < y) throw;\n', '    return x - y;\n', '  }\n', '\n', '  /**\n', '   * Multiply two uint256 values, throw in case of overflow.\n', '   *\n', '   * @param x first value to multiply\n', '   * @param y second value to multiply\n', '   * @return x * y\n', '   */\n', '  function safeMul (uint256 x, uint256 y)\n', '  constant internal\n', '  returns (uint256 z) {\n', '    if (y == 0) return 0; // Prevent division by zero at the next line\n', '    if (x > MAX_UINT256 / y) throw;\n', '    return x * y;\n', '  }\n', '}\n', '\n', 'contract Vote is ERC20, SafeMath{\n', '\n', '\tmapping (address => uint) balances;\n', '\tmapping (address => mapping (address => uint)) allowed;\n', '\n', '\tuint public totalSupply;\n', '\tuint public initialSupply;\n', '\tstring public name;\n', '\tstring public symbol;\n', '\tuint8 public decimals;\n', '\n', '\tfunction Vote(){\n', '\t\tinitialSupply = 100000;\n', '\t\ttotalSupply = initialSupply;\n', '\t\tbalances[msg.sender] = initialSupply;\n', '\t\tname = "EthTaipei Logo Vote";\n', '\t\tsymbol = "EthTaipei Logo";\n', '\t\tdecimals = 0;\n', '\t}\n', '\n', '\tfunction transfer(address _to, uint _value) returns (bool) {\n', '\t    balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '\t    balances[_to] = safeAdd(balances[_to], _value);\n', '\t    Transfer(msg.sender, _to, _value);\n', '\t    return true;\n', '  \t}\n', '\n', '  \tfunction transferFrom(address _from, address _to, uint _value) returns (bool) {\n', '\t    var _allowance = allowed[_from][msg.sender];\t    \n', '\t    balances[_to] = safeAdd(balances[_to], _value);\n', '\t    balances[_from] = safeSub(balances[_from], _value);\n', '\t    allowed[_from][msg.sender] = safeSub(_allowance, _value);\n', '\t    Transfer(_from, _to, _value);\n', '\t    return true;\n', '  \t}\n', '\n', '  \tfunction approve(address _spender, uint _value) returns (bool) {\n', '    \tallowed[msg.sender][_spender] = _value;\n', '    \tApproval(msg.sender, _spender, _value);\n', '    \treturn true;\n', '  \t}\n', '\n', '  \tfunction balanceOf(address _address) constant returns (uint balance) {\n', '  \t\treturn balances[_address];\n', '  \t}\n', '\n', '  \tfunction allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '    \treturn allowed[_owner][_spender];\n', '  \t}\n', '\n', '}']
