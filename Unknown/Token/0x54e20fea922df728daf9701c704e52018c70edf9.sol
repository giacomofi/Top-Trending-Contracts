['pragma solidity ^0.4.16;\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '        modifier onlyOwner() { //This modifier is for checking owner is calling\n', '        if (owner == msg.sender) {\n', '            _;\n', '        } else {\n', '            revert();\n', '        }\n', '\n', '    }\n', '\n', '}\n', '\n', 'contract Mortal is Ownable {\n', '    \n', '    function kill()  public{\n', '        if (msg.sender == owner)\n', '            selfdestruct(owner);\n', '    }\n', '}\n', '\n', 'contract Token {\n', '    uint256 public totalSupply;\n', '    uint256 tokensForICO;\n', '    uint256 etherRaised;\n', '\n', '    function balanceOf(address _owner)public constant returns(uint256 balance);\n', '\n', '    function transfer(address _to, uint256 _tokens) public returns(bool resultTransfer);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _tokens) public returns(bool resultTransfer);\n', '\n', '    function approve(address _spender, uint _value)public returns(bool success);\n', '\n', '    function allowance(address _owner, address _spender)public constant returns(uint remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS paused\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS NOT paused\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause()public onlyOwner whenNotPaused {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause()public onlyOwner whenPaused {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', 'contract StandardToken is Token,Mortal,Pausable {\n', '    \n', '    function transfer(address _to, uint256 _value)public whenNotPaused returns (bool success) {\n', '        require(_to!=0x0);\n', '        require(_value>0);\n', '         if (balances[msg.sender] >= _value) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 totalTokensToTransfer)public whenNotPaused returns (bool success) {\n', '        require(_from!=0x0);\n', '        require(_to!=0x0);\n', '        require(totalTokensToTransfer>0);\n', '    \n', '       if (balances[_from] >= totalTokensToTransfer&&allowance(_from,_to)>=totalTokensToTransfer) {\n', '            balances[_to] += totalTokensToTransfer;\n', '            balances[_from] -= totalTokensToTransfer;\n', '            allowed[_from][msg.sender] -= totalTokensToTransfer;\n', '            Transfer(_from, _to, totalTokensToTransfer);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner)public constant returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value)public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender)public constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '   \n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', 'contract Care is StandardToken{\n', '    string public constant name = "CareX";\n', '    uint256 public constant decimals = 2;\n', '    string public constant symbol = "CARE";\n', '\n', '    function Care() public{\n', '       totalSupply=100000000 * (10 ** decimals);  //Hunderd Million\n', '       owner = msg.sender;\n', '       balances[msg.sender] = totalSupply;\n', '       \n', '    }\n', '    /**\n', '     * @dev directly send ether and transfer token to that account \n', '     */\n', '    function() public {\n', '       revert(); //we will not acept ether directly\n', '        \n', '    }\n', '}']