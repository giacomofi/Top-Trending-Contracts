['pragma solidity ^0.4.11;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  MintableToken public token;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */ \n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) {\n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != 0x0);\n', '\n', '    token = createTokenContract();\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '  }\n', '\n', '  // creates the token to be sold. \n', '  // override this method to have crowdsale of a specific mintable token.\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new MintableToken();\n', '  }\n', '\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) payable {\n', '    require(beneficiary != 0x0);\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '  \n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until \n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) \n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) \n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract BurnableToken is StandardToken {\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint _value)\n', '        public\n', '    {\n', '        require(_value > 0);\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(burner, _value);\n', '    }\n', '\n', '    event Burn(address indexed burner, uint indexed value);\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(0x0, _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', 'contract PundiXToken is MintableToken, BurnableToken {\n', '\n', '    event ShowCurrentIndex(address indexed to, uint256 value);\n', '    event ShowBonus(address indexed to, uint256 value);\n', '\n', '    string public constant name = "Pundi X Token";\n', '    string public constant symbol = "PXS";\n', '    uint8 public constant decimals = 18;\n', '\n', '    uint256 public totalSupplyBonus;\n', '\n', '    uint64[] public bonusTimeList = [\n', '    1512057600,1514736000,1517414400,1519833600,1522512000,1525104000,1527782400,1530374400,1533052800,1535731200,1538323200,1541001600,\n', '    1543593600,1546272000,1548950400,1551369600,1554048000,1556640000,1559318400,1561910400,1564588800,1567267200,1569859200,1572537600,\n', '    1575129600,1577808000,1580486400,1582992000,1585670400,1588262400,1590940800,1593532800,1596211200,1598889600,1601481600,1604160000];\n', '\n', '\n', '    uint8 public currentTimeIndex;\n', '\n', '    function PundiXToken() {\n', '        currentTimeIndex = 0;\n', '    }\n', '\n', '    // --------------------------------------------------------\n', '    mapping(address=>uint256) weiBalance;\n', '    address[] public investors;\n', '\n', '    function addWei(address _address, uint256 _value) onlyOwner canMint public {\n', '        uint256 value = weiBalance[_address];\n', '        if (value == 0) {\n', '            investors.push(_address);\n', '        }\n', '        weiBalance[_address] = value.add(_value);\n', '    }\n', '\n', '    function getInvestorsCount() constant onlyOwner public returns (uint256 investorsCount) {\n', '        return investors.length;\n', '    }\n', '\n', '    function getWeiBalance(address _address) constant onlyOwner public returns (uint256 balance) {\n', '        return weiBalance[_address];\n', '    }\n', '\n', '    // --------------------------------------------------------\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        bool result = super.transferFrom(_from, _to, _value);\n', '        if (result && currentTimeIndex < bonusTimeList.length) {\n', '            bonus(_from);\n', '            bonus(_to);\n', '        }\n', '        return result;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        bool result = super.transfer(_to, _value);\n', '        if (result && currentTimeIndex < bonusTimeList.length) {\n', '            bonus(msg.sender);\n', '            bonus(_to);\n', '        }\n', '        return result;\n', '    }\n', '\n', '\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '        bool result = super.mint(_to, _amount);\n', '        if (result) {\n', '            bonus(_to);\n', '        }\n', '        return result;\n', '    }\n', '\n', '    function burn(uint256 _value) public {\n', '        super.burn(_value);\n', '        if (currentTimeIndex < bonusTimeList.length) {\n', '            bonus(msg.sender);\n', '        }\n', '\n', '    }\n', '    // --------------------------------------------------------\n', '\n', '    mapping(address => User) public users;\n', '\n', '    struct User {\n', '        uint256 txTimestamp;\n', '        uint256[] monthBalance;\n', '        uint8 monthIndex;\n', '        uint256[] receiveBonus;\n', '        uint8 receiveIndex;\n', '    }\n', '\n', '    function bonus(address _address) internal {\n', '        User storage user = users[_address];\n', '        tryNextTimeRange();\n', '\n', '        uint64 maxTime = bonusTimeList[currentTimeIndex];\n', '        if (user.txTimestamp > maxTime) {\n', '            return;\n', '        }\n', '\n', '        uint64 minTime = 0;\n', '        if (currentTimeIndex > 0) {\n', '            minTime = bonusTimeList[currentTimeIndex-1];\n', '        }\n', '\n', '        for (uint _i = user.monthBalance.length; _i <= currentTimeIndex; _i++) {\n', '            user.monthBalance.push(0);\n', '        }\n', '\n', '        // first time\n', '        if (user.txTimestamp == 0) {\n', '            user.monthBalance[currentTimeIndex] = balances[_address];\n', '            user.monthIndex = currentTimeIndex;\n', '        } else if (user.txTimestamp >= minTime) {\n', '            user.monthBalance[currentTimeIndex] = balances[_address];\n', '        } else { // (user.txTimestamp < minTime) cross month\n', '            uint256 pBalance = user.monthBalance[user.monthIndex];\n', '            for (uint8 i = user.monthIndex; i < currentTimeIndex; i++) {\n', '                user.monthBalance[i] = pBalance;\n', '            }\n', '            user.monthBalance[currentTimeIndex] = balances[_address];\n', '            user.monthIndex = currentTimeIndex;\n', '        }\n', '        user.txTimestamp = now;\n', '\n', '    }\n', '\n', '    function tryNextTimeRange() internal {\n', '        uint8 len = uint8(bonusTimeList.length) - 1;\n', '        uint64 _now = uint64(now);\n', '        for(; currentTimeIndex < len; currentTimeIndex++) {\n', '            if (bonusTimeList[currentTimeIndex] >= _now) {\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '    function receiveBonus() public {\n', '        tryNextTimeRange();\n', '\n', '        if (currentTimeIndex == 0) {\n', '            return;\n', '        }\n', '\n', '        address addr = msg.sender;\n', '\n', '        User storage user = users[addr];\n', '\n', '        if (user.monthIndex < currentTimeIndex) {\n', '            bonus(addr);\n', '        }\n', '\n', '        User storage xuser = users[addr];\n', '\n', '        if (xuser.receiveIndex == xuser.monthIndex || xuser.receiveIndex >= bonusTimeList.length) {\n', '            return;\n', '        }\n', '\n', '\n', '        require(user.receiveIndex < user.monthIndex);\n', '\n', '        uint8 monthInterval = xuser.monthIndex - xuser.receiveIndex;\n', '\n', '        uint256 bonusToken = 0;\n', '\n', '        if (monthInterval > 6) {\n', '            uint8 _length = monthInterval - 6;\n', '\n', '            for (uint8 j = 0; j < _length; j++) {\n', '                xuser.receiveBonus.push(0);\n', '                xuser.receiveIndex++;\n', '            }\n', '        }\n', '\n', '        uint256 balance = xuser.monthBalance[xuser.monthIndex];\n', '\n', '        for (uint8 i = xuser.receiveIndex; i < xuser.monthIndex; i++) {\n', '            uint256 preMonthBonus = calculateBonusToken(i, balance);\n', '            balance = preMonthBonus.add(balance);\n', '            bonusToken = bonusToken.add(preMonthBonus);\n', '            xuser.receiveBonus.push(preMonthBonus);\n', '            xuser.receiveIndex++;\n', '        }\n', '\n', '        // 事件\n', '        ShowBonus(addr, bonusToken);\n', '\n', '        if (bonusToken == 0) {\n', '            return;\n', '        }\n', '\n', '        totalSupplyBonus = totalSupplyBonus.sub(bonusToken);\n', '\n', '        this.transfer(addr, bonusToken);\n', '    }\n', '\n', '    function calculateBonusToken(uint8 _monthIndex, uint256 _balance) internal returns (uint256) {\n', '        uint256 bonusToken = 0;\n', '        if (_monthIndex < 12) {\n', '            // 7.31606308769453%\n', '            bonusToken = _balance.div(10000000000000000).mul(731606308769453);\n', '        } else if (_monthIndex < 24) {\n', '            // 2.11637098909784%\n', '            bonusToken = _balance.div(10000000000000000).mul(211637098909784);\n', '        } else if (_monthIndex < 36) {\n', '            // 0.881870060450728%\n', '            bonusToken = _balance.div(100000000000000000).mul(881870060450728);\n', '        }\n', '\n', '        return bonusToken;\n', '    }\n', '\n', '\n', '    function calculationTotalSupply() onlyOwner {\n', '        uint256 u1 = totalSupply.div(10);\n', '\n', '        uint256 year1 = u1.mul(4);\n', '        uint256 year2 = u1.mul(2);\n', '        uint256 year3 = u1;\n', '\n', '        totalSupplyBonus = year1.add(year2).add(year3);\n', '    }\n', '\n', '    function recycleUnreceivedBonus(address _address) onlyOwner {\n', '        tryNextTimeRange();\n', '        require(currentTimeIndex > 34);\n', '\n', '        uint64 _now = uint64(now);\n', '\n', '        uint64 maxTime = bonusTimeList[currentTimeIndex];\n', '\n', '        uint256 bonusToken = 0;\n', '\n', '        // TODO 180 days\n', '        uint64 finalTime = 180 days + maxTime;\n', '\n', '        if (_now > finalTime) {\n', '            bonusToken = totalSupplyBonus;\n', '            totalSupplyBonus = 0;\n', '        }\n', '\n', '        require(bonusToken != 0);\n', '\n', '        this.transfer(_address, bonusToken);\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.11;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  MintableToken public token;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */ \n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) {\n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != 0x0);\n', '\n', '    token = createTokenContract();\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '  }\n', '\n', '  // creates the token to be sold. \n', '  // override this method to have crowdsale of a specific mintable token.\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new MintableToken();\n', '  }\n', '\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) payable {\n', '    require(beneficiary != 0x0);\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '  \n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until \n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) \n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) \n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract BurnableToken is StandardToken {\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint _value)\n', '        public\n', '    {\n', '        require(_value > 0);\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(burner, _value);\n', '    }\n', '\n', '    event Burn(address indexed burner, uint indexed value);\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(0x0, _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', 'contract PundiXToken is MintableToken, BurnableToken {\n', '\n', '    event ShowCurrentIndex(address indexed to, uint256 value);\n', '    event ShowBonus(address indexed to, uint256 value);\n', '\n', '    string public constant name = "Pundi X Token";\n', '    string public constant symbol = "PXS";\n', '    uint8 public constant decimals = 18;\n', '\n', '    uint256 public totalSupplyBonus;\n', '\n', '    uint64[] public bonusTimeList = [\n', '    1512057600,1514736000,1517414400,1519833600,1522512000,1525104000,1527782400,1530374400,1533052800,1535731200,1538323200,1541001600,\n', '    1543593600,1546272000,1548950400,1551369600,1554048000,1556640000,1559318400,1561910400,1564588800,1567267200,1569859200,1572537600,\n', '    1575129600,1577808000,1580486400,1582992000,1585670400,1588262400,1590940800,1593532800,1596211200,1598889600,1601481600,1604160000];\n', '\n', '\n', '    uint8 public currentTimeIndex;\n', '\n', '    function PundiXToken() {\n', '        currentTimeIndex = 0;\n', '    }\n', '\n', '    // --------------------------------------------------------\n', '    mapping(address=>uint256) weiBalance;\n', '    address[] public investors;\n', '\n', '    function addWei(address _address, uint256 _value) onlyOwner canMint public {\n', '        uint256 value = weiBalance[_address];\n', '        if (value == 0) {\n', '            investors.push(_address);\n', '        }\n', '        weiBalance[_address] = value.add(_value);\n', '    }\n', '\n', '    function getInvestorsCount() constant onlyOwner public returns (uint256 investorsCount) {\n', '        return investors.length;\n', '    }\n', '\n', '    function getWeiBalance(address _address) constant onlyOwner public returns (uint256 balance) {\n', '        return weiBalance[_address];\n', '    }\n', '\n', '    // --------------------------------------------------------\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        bool result = super.transferFrom(_from, _to, _value);\n', '        if (result && currentTimeIndex < bonusTimeList.length) {\n', '            bonus(_from);\n', '            bonus(_to);\n', '        }\n', '        return result;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        bool result = super.transfer(_to, _value);\n', '        if (result && currentTimeIndex < bonusTimeList.length) {\n', '            bonus(msg.sender);\n', '            bonus(_to);\n', '        }\n', '        return result;\n', '    }\n', '\n', '\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '        bool result = super.mint(_to, _amount);\n', '        if (result) {\n', '            bonus(_to);\n', '        }\n', '        return result;\n', '    }\n', '\n', '    function burn(uint256 _value) public {\n', '        super.burn(_value);\n', '        if (currentTimeIndex < bonusTimeList.length) {\n', '            bonus(msg.sender);\n', '        }\n', '\n', '    }\n', '    // --------------------------------------------------------\n', '\n', '    mapping(address => User) public users;\n', '\n', '    struct User {\n', '        uint256 txTimestamp;\n', '        uint256[] monthBalance;\n', '        uint8 monthIndex;\n', '        uint256[] receiveBonus;\n', '        uint8 receiveIndex;\n', '    }\n', '\n', '    function bonus(address _address) internal {\n', '        User storage user = users[_address];\n', '        tryNextTimeRange();\n', '\n', '        uint64 maxTime = bonusTimeList[currentTimeIndex];\n', '        if (user.txTimestamp > maxTime) {\n', '            return;\n', '        }\n', '\n', '        uint64 minTime = 0;\n', '        if (currentTimeIndex > 0) {\n', '            minTime = bonusTimeList[currentTimeIndex-1];\n', '        }\n', '\n', '        for (uint _i = user.monthBalance.length; _i <= currentTimeIndex; _i++) {\n', '            user.monthBalance.push(0);\n', '        }\n', '\n', '        // first time\n', '        if (user.txTimestamp == 0) {\n', '            user.monthBalance[currentTimeIndex] = balances[_address];\n', '            user.monthIndex = currentTimeIndex;\n', '        } else if (user.txTimestamp >= minTime) {\n', '            user.monthBalance[currentTimeIndex] = balances[_address];\n', '        } else { // (user.txTimestamp < minTime) cross month\n', '            uint256 pBalance = user.monthBalance[user.monthIndex];\n', '            for (uint8 i = user.monthIndex; i < currentTimeIndex; i++) {\n', '                user.monthBalance[i] = pBalance;\n', '            }\n', '            user.monthBalance[currentTimeIndex] = balances[_address];\n', '            user.monthIndex = currentTimeIndex;\n', '        }\n', '        user.txTimestamp = now;\n', '\n', '    }\n', '\n', '    function tryNextTimeRange() internal {\n', '        uint8 len = uint8(bonusTimeList.length) - 1;\n', '        uint64 _now = uint64(now);\n', '        for(; currentTimeIndex < len; currentTimeIndex++) {\n', '            if (bonusTimeList[currentTimeIndex] >= _now) {\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '    function receiveBonus() public {\n', '        tryNextTimeRange();\n', '\n', '        if (currentTimeIndex == 0) {\n', '            return;\n', '        }\n', '\n', '        address addr = msg.sender;\n', '\n', '        User storage user = users[addr];\n', '\n', '        if (user.monthIndex < currentTimeIndex) {\n', '            bonus(addr);\n', '        }\n', '\n', '        User storage xuser = users[addr];\n', '\n', '        if (xuser.receiveIndex == xuser.monthIndex || xuser.receiveIndex >= bonusTimeList.length) {\n', '            return;\n', '        }\n', '\n', '\n', '        require(user.receiveIndex < user.monthIndex);\n', '\n', '        uint8 monthInterval = xuser.monthIndex - xuser.receiveIndex;\n', '\n', '        uint256 bonusToken = 0;\n', '\n', '        if (monthInterval > 6) {\n', '            uint8 _length = monthInterval - 6;\n', '\n', '            for (uint8 j = 0; j < _length; j++) {\n', '                xuser.receiveBonus.push(0);\n', '                xuser.receiveIndex++;\n', '            }\n', '        }\n', '\n', '        uint256 balance = xuser.monthBalance[xuser.monthIndex];\n', '\n', '        for (uint8 i = xuser.receiveIndex; i < xuser.monthIndex; i++) {\n', '            uint256 preMonthBonus = calculateBonusToken(i, balance);\n', '            balance = preMonthBonus.add(balance);\n', '            bonusToken = bonusToken.add(preMonthBonus);\n', '            xuser.receiveBonus.push(preMonthBonus);\n', '            xuser.receiveIndex++;\n', '        }\n', '\n', '        // 事件\n', '        ShowBonus(addr, bonusToken);\n', '\n', '        if (bonusToken == 0) {\n', '            return;\n', '        }\n', '\n', '        totalSupplyBonus = totalSupplyBonus.sub(bonusToken);\n', '\n', '        this.transfer(addr, bonusToken);\n', '    }\n', '\n', '    function calculateBonusToken(uint8 _monthIndex, uint256 _balance) internal returns (uint256) {\n', '        uint256 bonusToken = 0;\n', '        if (_monthIndex < 12) {\n', '            // 7.31606308769453%\n', '            bonusToken = _balance.div(10000000000000000).mul(731606308769453);\n', '        } else if (_monthIndex < 24) {\n', '            // 2.11637098909784%\n', '            bonusToken = _balance.div(10000000000000000).mul(211637098909784);\n', '        } else if (_monthIndex < 36) {\n', '            // 0.881870060450728%\n', '            bonusToken = _balance.div(100000000000000000).mul(881870060450728);\n', '        }\n', '\n', '        return bonusToken;\n', '    }\n', '\n', '\n', '    function calculationTotalSupply() onlyOwner {\n', '        uint256 u1 = totalSupply.div(10);\n', '\n', '        uint256 year1 = u1.mul(4);\n', '        uint256 year2 = u1.mul(2);\n', '        uint256 year3 = u1;\n', '\n', '        totalSupplyBonus = year1.add(year2).add(year3);\n', '    }\n', '\n', '    function recycleUnreceivedBonus(address _address) onlyOwner {\n', '        tryNextTimeRange();\n', '        require(currentTimeIndex > 34);\n', '\n', '        uint64 _now = uint64(now);\n', '\n', '        uint64 maxTime = bonusTimeList[currentTimeIndex];\n', '\n', '        uint256 bonusToken = 0;\n', '\n', '        // TODO 180 days\n', '        uint64 finalTime = 180 days + maxTime;\n', '\n', '        if (_now > finalTime) {\n', '            bonusToken = totalSupplyBonus;\n', '            totalSupplyBonus = 0;\n', '        }\n', '\n', '        require(bonusToken != 0);\n', '\n', '        this.transfer(_address, bonusToken);\n', '    }\n', '\n', '}']
