['pragma solidity 0.4.16;\n', '\n', 'contract PullPayInterface {\n', '  function asyncSend(address _dest) public payable;\n', '}\n', '\n', 'contract ERC223ReceivingContract {\n', '    function tokenFallback(address _from, uint _value, bytes _data);\n', '}\n', '\n', 'contract ControllerInterface {\n', '\n', '\n', '  // State Variables\n', '  bool public paused;\n', '  address public nutzAddr;\n', '\n', '  // Nutz functions\n', '  function babzBalanceOf(address _owner) constant returns (uint256);\n', '  function activeSupply() constant returns (uint256);\n', '  function burnPool() constant returns (uint256);\n', '  function powerPool() constant returns (uint256);\n', '  function totalSupply() constant returns (uint256);\n', '  function allowance(address _owner, address _spender) constant returns (uint256);\n', '\n', '  function approve(address _owner, address _spender, uint256 _amountBabz) public;\n', '  function transfer(address _from, address _to, uint256 _amountBabz, bytes _data) public;\n', '  function transferFrom(address _sender, address _from, address _to, uint256 _amountBabz, bytes _data) public;\n', '\n', '  // Market functions\n', '  function floor() constant returns (uint256);\n', '  function ceiling() constant returns (uint256);\n', '\n', '  function purchase(address _sender, uint256 _value, uint256 _price) public returns (uint256);\n', '  function sell(address _from, uint256 _price, uint256 _amountBabz);\n', '\n', '  // Power functions\n', '  function powerBalanceOf(address _owner) constant returns (uint256);\n', '  function outstandingPower() constant returns (uint256);\n', '  function authorizedPower() constant returns (uint256);\n', '  function powerTotalSupply() constant returns (uint256);\n', '\n', '  function powerUp(address _sender, address _from, uint256 _amountBabz) public;\n', '  function downTick(address _owner, uint256 _now) public;\n', '  function createDownRequest(address _owner, uint256 _amountPower) public;\n', '  function downs(address _owner) constant public returns(uint256, uint256, uint256);\n', '  function downtime() constant returns (uint256);\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() constant returns (uint256);\n', '  function balanceOf(address _owner) constant returns (uint256);\n', '  function transfer(address _to, uint256 _value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', 'contract ERC223Basic is ERC20Basic {\n', '    function transfer(address to, uint value, bytes data) returns (bool);\n', '}\n', '\n', '/*\n', ' * ERC20 interface\n', ' * see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC223Basic {\n', '  // active supply of tokens\n', '  function activeSupply() constant returns (uint256);\n', '  function allowance(address _owner, address _spender) constant returns (uint256);\n', '  function transferFrom(address _from, address _to, uint _value) returns (bool);\n', '  function approve(address _spender, uint256 _value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * Nutz implements a price floor and a price ceiling on the token being\n', ' * sold. It is based of the zeppelin token contract.\n', ' */\n', 'contract Nutz is Ownable, ERC20 {\n', '\n', '  event Sell(address indexed seller, uint256 value);\n', '\n', '  string public name = "Acebusters Nutz";\n', '  // acebusters units:\n', '  // 10^12 - Nutz   (NTZ)\n', '  // 10^9 - Jonyz\n', '  // 10^6 - Helcz\n', '  // 10^3 - Pascalz\n', '  // 10^0 - Babz\n', '  string public symbol = "NTZ";\n', '  uint256 public decimals = 12;\n', '\n', '  // returns balances of active holders\n', '  function balanceOf(address _owner) constant returns (uint) {\n', '    return ControllerInterface(owner).babzBalanceOf(_owner);\n', '  }\n', '\n', '  function totalSupply() constant returns (uint256) {\n', '    return ControllerInterface(owner).totalSupply();\n', '  }\n', '\n', '  function activeSupply() constant returns (uint256) {\n', '    return ControllerInterface(owner).activeSupply();\n', '  }\n', '\n', '  // return remaining allowance\n', '  // if calling return allowed[address(this)][_spender];\n', '  // returns balance of ether parked to be withdrawn\n', '  function allowance(address _owner, address _spender) constant returns (uint256) {\n', '    return ControllerInterface(owner).allowance(_owner, _spender);\n', '  }\n', '\n', '  // returns either the salePrice, or if reserve does not suffice\n', '  // for active supply, returns maxFloor\n', '  function floor() constant returns (uint256) {\n', '    return ControllerInterface(owner).floor();\n', '  }\n', '\n', '  // returns either the salePrice, or if reserve does not suffice\n', '  // for active supply, returns maxFloor\n', '  function ceiling() constant returns (uint256) {\n', '    return ControllerInterface(owner).ceiling();\n', '  }\n', '\n', '  function powerPool() constant returns (uint256) {\n', '    return ControllerInterface(owner).powerPool();\n', '  }\n', '\n', '\n', '  function _checkDestination(address _from, address _to, uint256 _value, bytes _data) internal {\n', '    // erc223: Retrieve the size of the code on target address, this needs assembly .\n', '    uint256 codeLength;\n', '    assembly {\n', '      codeLength := extcodesize(_to)\n', '    }\n', '    if(codeLength>0) {\n', '      ERC223ReceivingContract untrustedReceiver = ERC223ReceivingContract(_to);\n', '      // untrusted contract call\n', '      untrustedReceiver.tokenFallback(_from, _value, _data);\n', '    }\n', '  }\n', '\n', '\n', '\n', '  // ############################################\n', '  // ########### ADMIN FUNCTIONS ################\n', '  // ############################################\n', '\n', '  function powerDown(address powerAddr, address _holder, uint256 _amountBabz) public onlyOwner {\n', '    bytes memory empty;\n', '    _checkDestination(powerAddr, _holder, _amountBabz, empty);\n', '    // NTZ transfered from power pool to user&#39;s balance\n', '    Transfer(powerAddr, _holder, _amountBabz);\n', '  }\n', '\n', '\n', '  function asyncSend(address _pullAddr, address _dest, uint256 _amountWei) public onlyOwner {\n', '    assert(_amountWei <= this.balance);\n', '    PullPayInterface(_pullAddr).asyncSend.value(_amountWei)(_dest);\n', '  }\n', '\n', '\n', '  // ############################################\n', '  // ########### PUBLIC FUNCTIONS ###############\n', '  // ############################################\n', '\n', '  function approve(address _spender, uint256 _amountBabz) public {\n', '    ControllerInterface(owner).approve(msg.sender, _spender, _amountBabz);\n', '    Approval(msg.sender, _spender, _amountBabz);\n', '  }\n', '\n', '  function transfer(address _to, uint256 _amountBabz, bytes _data) public returns (bool) {\n', '    ControllerInterface(owner).transfer(msg.sender, _to, _amountBabz, _data);\n', '    Transfer(msg.sender, _to, _amountBabz);\n', '    _checkDestination(msg.sender, _to, _amountBabz, _data);\n', '    return true;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _amountBabz) public returns (bool) {\n', '    bytes memory empty;\n', '    return transfer(_to, _amountBabz, empty);\n', '  }\n', '\n', '  function transData(address _to, uint256 _amountBabz, bytes _data) public returns (bool) {\n', '    return transfer(_to, _amountBabz, _data);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _amountBabz, bytes _data) public returns (bool) {\n', '    ControllerInterface(owner).transferFrom(msg.sender, _from, _to, _amountBabz, _data);\n', '    Transfer(_from, _to, _amountBabz);\n', '    _checkDestination(_from, _to, _amountBabz, _data);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _amountBabz) public returns (bool) {\n', '    bytes memory empty;\n', '    return transferFrom(_from, _to, _amountBabz, empty);\n', '  }\n', '\n', '  function () public payable {\n', '    uint256 price = ControllerInterface(owner).ceiling();\n', '    purchase(price);\n', '    require(msg.value > 0);\n', '  }\n', '\n', '  function purchase(uint256 _price) public payable {\n', '    require(msg.value > 0);\n', '    uint256 amountBabz = ControllerInterface(owner).purchase(msg.sender, msg.value, _price);\n', '    Transfer(owner, msg.sender, amountBabz);\n', '    bytes memory empty;\n', '    _checkDestination(address(this), msg.sender, amountBabz, empty);\n', '  }\n', '\n', '  function sell(uint256 _price, uint256 _amountBabz) public {\n', '    require(_amountBabz != 0);\n', '    ControllerInterface(owner).sell(msg.sender, _price, _amountBabz);\n', '    Sell(msg.sender, _amountBabz);\n', '  }\n', '\n', '  function powerUp(uint256 _amountBabz) public {\n', '    Transfer(msg.sender, owner, _amountBabz);\n', '    ControllerInterface(owner).powerUp(msg.sender, msg.sender, _amountBabz);\n', '  }\n', '\n', '}']
['pragma solidity 0.4.16;\n', '\n', 'contract PullPayInterface {\n', '  function asyncSend(address _dest) public payable;\n', '}\n', '\n', 'contract ERC223ReceivingContract {\n', '    function tokenFallback(address _from, uint _value, bytes _data);\n', '}\n', '\n', 'contract ControllerInterface {\n', '\n', '\n', '  // State Variables\n', '  bool public paused;\n', '  address public nutzAddr;\n', '\n', '  // Nutz functions\n', '  function babzBalanceOf(address _owner) constant returns (uint256);\n', '  function activeSupply() constant returns (uint256);\n', '  function burnPool() constant returns (uint256);\n', '  function powerPool() constant returns (uint256);\n', '  function totalSupply() constant returns (uint256);\n', '  function allowance(address _owner, address _spender) constant returns (uint256);\n', '\n', '  function approve(address _owner, address _spender, uint256 _amountBabz) public;\n', '  function transfer(address _from, address _to, uint256 _amountBabz, bytes _data) public;\n', '  function transferFrom(address _sender, address _from, address _to, uint256 _amountBabz, bytes _data) public;\n', '\n', '  // Market functions\n', '  function floor() constant returns (uint256);\n', '  function ceiling() constant returns (uint256);\n', '\n', '  function purchase(address _sender, uint256 _value, uint256 _price) public returns (uint256);\n', '  function sell(address _from, uint256 _price, uint256 _amountBabz);\n', '\n', '  // Power functions\n', '  function powerBalanceOf(address _owner) constant returns (uint256);\n', '  function outstandingPower() constant returns (uint256);\n', '  function authorizedPower() constant returns (uint256);\n', '  function powerTotalSupply() constant returns (uint256);\n', '\n', '  function powerUp(address _sender, address _from, uint256 _amountBabz) public;\n', '  function downTick(address _owner, uint256 _now) public;\n', '  function createDownRequest(address _owner, uint256 _amountPower) public;\n', '  function downs(address _owner) constant public returns(uint256, uint256, uint256);\n', '  function downtime() constant returns (uint256);\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() constant returns (uint256);\n', '  function balanceOf(address _owner) constant returns (uint256);\n', '  function transfer(address _to, uint256 _value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', 'contract ERC223Basic is ERC20Basic {\n', '    function transfer(address to, uint value, bytes data) returns (bool);\n', '}\n', '\n', '/*\n', ' * ERC20 interface\n', ' * see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC223Basic {\n', '  // active supply of tokens\n', '  function activeSupply() constant returns (uint256);\n', '  function allowance(address _owner, address _spender) constant returns (uint256);\n', '  function transferFrom(address _from, address _to, uint _value) returns (bool);\n', '  function approve(address _spender, uint256 _value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * Nutz implements a price floor and a price ceiling on the token being\n', ' * sold. It is based of the zeppelin token contract.\n', ' */\n', 'contract Nutz is Ownable, ERC20 {\n', '\n', '  event Sell(address indexed seller, uint256 value);\n', '\n', '  string public name = "Acebusters Nutz";\n', '  // acebusters units:\n', '  // 10^12 - Nutz   (NTZ)\n', '  // 10^9 - Jonyz\n', '  // 10^6 - Helcz\n', '  // 10^3 - Pascalz\n', '  // 10^0 - Babz\n', '  string public symbol = "NTZ";\n', '  uint256 public decimals = 12;\n', '\n', '  // returns balances of active holders\n', '  function balanceOf(address _owner) constant returns (uint) {\n', '    return ControllerInterface(owner).babzBalanceOf(_owner);\n', '  }\n', '\n', '  function totalSupply() constant returns (uint256) {\n', '    return ControllerInterface(owner).totalSupply();\n', '  }\n', '\n', '  function activeSupply() constant returns (uint256) {\n', '    return ControllerInterface(owner).activeSupply();\n', '  }\n', '\n', '  // return remaining allowance\n', '  // if calling return allowed[address(this)][_spender];\n', '  // returns balance of ether parked to be withdrawn\n', '  function allowance(address _owner, address _spender) constant returns (uint256) {\n', '    return ControllerInterface(owner).allowance(_owner, _spender);\n', '  }\n', '\n', '  // returns either the salePrice, or if reserve does not suffice\n', '  // for active supply, returns maxFloor\n', '  function floor() constant returns (uint256) {\n', '    return ControllerInterface(owner).floor();\n', '  }\n', '\n', '  // returns either the salePrice, or if reserve does not suffice\n', '  // for active supply, returns maxFloor\n', '  function ceiling() constant returns (uint256) {\n', '    return ControllerInterface(owner).ceiling();\n', '  }\n', '\n', '  function powerPool() constant returns (uint256) {\n', '    return ControllerInterface(owner).powerPool();\n', '  }\n', '\n', '\n', '  function _checkDestination(address _from, address _to, uint256 _value, bytes _data) internal {\n', '    // erc223: Retrieve the size of the code on target address, this needs assembly .\n', '    uint256 codeLength;\n', '    assembly {\n', '      codeLength := extcodesize(_to)\n', '    }\n', '    if(codeLength>0) {\n', '      ERC223ReceivingContract untrustedReceiver = ERC223ReceivingContract(_to);\n', '      // untrusted contract call\n', '      untrustedReceiver.tokenFallback(_from, _value, _data);\n', '    }\n', '  }\n', '\n', '\n', '\n', '  // ############################################\n', '  // ########### ADMIN FUNCTIONS ################\n', '  // ############################################\n', '\n', '  function powerDown(address powerAddr, address _holder, uint256 _amountBabz) public onlyOwner {\n', '    bytes memory empty;\n', '    _checkDestination(powerAddr, _holder, _amountBabz, empty);\n', "    // NTZ transfered from power pool to user's balance\n", '    Transfer(powerAddr, _holder, _amountBabz);\n', '  }\n', '\n', '\n', '  function asyncSend(address _pullAddr, address _dest, uint256 _amountWei) public onlyOwner {\n', '    assert(_amountWei <= this.balance);\n', '    PullPayInterface(_pullAddr).asyncSend.value(_amountWei)(_dest);\n', '  }\n', '\n', '\n', '  // ############################################\n', '  // ########### PUBLIC FUNCTIONS ###############\n', '  // ############################################\n', '\n', '  function approve(address _spender, uint256 _amountBabz) public {\n', '    ControllerInterface(owner).approve(msg.sender, _spender, _amountBabz);\n', '    Approval(msg.sender, _spender, _amountBabz);\n', '  }\n', '\n', '  function transfer(address _to, uint256 _amountBabz, bytes _data) public returns (bool) {\n', '    ControllerInterface(owner).transfer(msg.sender, _to, _amountBabz, _data);\n', '    Transfer(msg.sender, _to, _amountBabz);\n', '    _checkDestination(msg.sender, _to, _amountBabz, _data);\n', '    return true;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _amountBabz) public returns (bool) {\n', '    bytes memory empty;\n', '    return transfer(_to, _amountBabz, empty);\n', '  }\n', '\n', '  function transData(address _to, uint256 _amountBabz, bytes _data) public returns (bool) {\n', '    return transfer(_to, _amountBabz, _data);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _amountBabz, bytes _data) public returns (bool) {\n', '    ControllerInterface(owner).transferFrom(msg.sender, _from, _to, _amountBabz, _data);\n', '    Transfer(_from, _to, _amountBabz);\n', '    _checkDestination(_from, _to, _amountBabz, _data);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _amountBabz) public returns (bool) {\n', '    bytes memory empty;\n', '    return transferFrom(_from, _to, _amountBabz, empty);\n', '  }\n', '\n', '  function () public payable {\n', '    uint256 price = ControllerInterface(owner).ceiling();\n', '    purchase(price);\n', '    require(msg.value > 0);\n', '  }\n', '\n', '  function purchase(uint256 _price) public payable {\n', '    require(msg.value > 0);\n', '    uint256 amountBabz = ControllerInterface(owner).purchase(msg.sender, msg.value, _price);\n', '    Transfer(owner, msg.sender, amountBabz);\n', '    bytes memory empty;\n', '    _checkDestination(address(this), msg.sender, amountBabz, empty);\n', '  }\n', '\n', '  function sell(uint256 _price, uint256 _amountBabz) public {\n', '    require(_amountBabz != 0);\n', '    ControllerInterface(owner).sell(msg.sender, _price, _amountBabz);\n', '    Sell(msg.sender, _amountBabz);\n', '  }\n', '\n', '  function powerUp(uint256 _amountBabz) public {\n', '    Transfer(msg.sender, owner, _amountBabz);\n', '    ControllerInterface(owner).powerUp(msg.sender, msg.sender, _amountBabz);\n', '  }\n', '\n', '}']
