['pragma solidity ^0.4.13; \n', 'contract Owned { \n', '  address public owner;\n', '\n', '  function Owned() {\n', '      owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner {\n', '      require(msg.sender == owner);\n', '      _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '      owner = newOwner;\n', '  }\n', '}\n', '\n', 'contract ERC20Interface {\n', '    // Get the total token supply\n', '    uint256 public totalSupply;\n', ' \n', '    // Get the account balance of another account with address _owner\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', ' \n', '    // Send _value amount of tokens to address _to\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', ' \n', '    // Send _value amount of tokens from address _from to address _to\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', ' \n', '    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '    // If this function is called again it overwrites the current allowance with _value.\n', '    // this function is required for some DEX functionality\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', ' \n', '    // Returns the amount which _spender is still allowed to withdraw from _owner\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', ' \n', '    // Triggered when tokens are transferred.\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', ' \n', '    // Triggered whenever approve(address _spender, uint256 _value) is called.\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    // Burn token\n', '    event Burn(address indexed from, uint256 value);\n', '}\n', '\n', 'contract PlatoToken is Owned, ERC20Interface {\n', '  string  public name = "Plato"; \n', '  string  public symbol = "PAT"; \n', '  uint8   public decimals = 8; \n', '  uint256 public totalSupply = 100000000;\n', '  mapping (address => uint256) public balanceOf;\n', '  mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '  function PlatoToken() {\n', '    owner = msg.sender;\n', '    balanceOf[owner] = totalSupply;\n', '  }\n', '\n', '  function balanceOf(address _owner) constant returns (uint256 balance){\n', '    return balanceOf[_owner];\n', '  }  \n', '  /* Internal transfer, only can be called by this contract */\n', '  function _transfer(address _from, address _to, uint _value) internal {\n', '      require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n', '      require (balanceOf[_from] > _value);                // Check if the sender has enough\n', '      require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\n', '      balanceOf[_from] -= _value;                         // Subtract from the sender\n', '      balanceOf[_to] += _value;                            // Add the same to the recipient\n', '      Transfer(_from, _to, _value);\n', '  }\n', '\n', '  /// @notice Send `_value` tokens to `_to` from your account\n', '  /// @param _to The address of the recipient\n', '  /// @param _value the amount to send\n', '  function transfer(address _to, uint256 _value) returns (bool success){\n', '      _transfer(msg.sender, _to, _value);\n', '      return true;\n', '  }\n', '\n', '  /// @notice Send `_value` tokens to `_to` in behalf of `_from`\n', '  /// @param _from The address of the sender\n', '  /// @param _to The address of the recipient\n', '  /// @param _value the amount to send\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '      require (_value < allowance[_from][msg.sender]);     // Check allowance\n', '      allowance[_from][msg.sender] -= _value;\n', '      _transfer(_from, _to, _value);\n', '      return true;\n', '  }\n', '\n', '  /// @notice Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '  /// @param _spender The address authorized to spend\n', '  /// @param _value the max amount they can spend\n', '  function approve(address _spender, uint256 _value)\n', '      returns (bool success) {\n', '      allowance[msg.sender][_spender] = _value;\n', '      return true;\n', '  }  \n', '\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowance[_owner][_spender];\n', '  }\n', '\n', '  /// @notice Remove `_value` tokens from the system irreversibly\n', '  /// @param _value the amount of money to burn\n', '  function burn(uint256 _value) returns (bool success) {\n', '      require (balanceOf[msg.sender] > _value);            // Check if the sender has enough\n', '      balanceOf[msg.sender] -= _value;                      // Subtract from the sender\n', '      totalSupply -= _value;                                // Updates totalSupply\n', '      Burn(msg.sender, _value);\n', '      return true;\n', '  }\n', '\n', '  function burnFrom(address _from, uint256 _value) returns (bool success) {\n', '      require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '      require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '      balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', '      allowance[_from][msg.sender] -= _value;             // Subtract from the sender&#39;s allowance\n', '      totalSupply -= _value;                              // Update totalSupply\n', '      Burn(_from, _value);\n', '      return true;\n', '  }\n', '  \n', '  /// @notice Create `mintedAmount` tokens and send it to `target`\n', '  /// @param target Address to receive the tokens\n', '  /// @param mintedAmount the amount of tokens it will receive\n', '  function mintToken(address target, uint256 mintedAmount) onlyOwner {\n', '      balanceOf[target] += mintedAmount;\n', '      totalSupply += mintedAmount;\n', '      Transfer(0, this, mintedAmount);\n', '      Transfer(this, target, mintedAmount);\n', '  }\n', '\n', '  function(){\n', '    revert();\n', '  }\n', '}']