['/**\n', ' * Cool Crypto\n', ' *\n', ' * Keep it Simple, \n', ' * Keep it Cool\n', ' * \n', ' * @title CoolToken Smart Contract\n', ' * @author CoolCrypto\n', ' * @description A Cool Token For Everyone\n', ' * \n', ' * 100 Million COOL\n', ' * \n', ' **/\n', 'pragma solidity >=0.4.4;\n', '\n', '//Cool safeMath\n', 'library safeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    assert(b > 0);\n', '    uint c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      throw;\n', '    }\n', '  }\n', '}\n', '\n', '//Cool Contract\n', 'contract CoolToken {\n', '    string public standard = &#39;CoolToken&#39;;\n', '    string public name = &#39;Cool&#39;;\n', '    string public symbol = &#39;COOL&#39;;\n', '    uint8 public decimals = 18;\n', '    uint256 public totalSupply = 100000000000000000000000000;\n', '    // 100000000000000000000000000/10^18=100M COOL.\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    mapping(address => uint256) public balanceOf;\n', '    mapping(address => mapping(address => uint256)) public allowed;\n', '\n', '    function Token() {\n', '        balanceOf[msg.sender] = totalSupply;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) {\n', '        require(_value > 0 && balanceOf[msg.sender] >= _value);\n', '\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[_to] += _value;\n', '\n', '        Transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) {\n', '        require(_value > 0 && balanceOf[_from] >= _value && allowed[_from][msg.sender] >= _value);\n', '\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '\n', '        Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) {\n', '        allowed[msg.sender][_spender] = _value;\n', '    }\n', '\n', '  \n', '    function allowance(address _owner, address _spender) constant returns(uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function getBalanceOf(address _who) returns(uint256 amount) {\n', '        return balanceOf[_who];\n', '    }\n', '}']
['/**\n', ' * Cool Crypto\n', ' *\n', ' * Keep it Simple, \n', ' * Keep it Cool\n', ' * \n', ' * @title CoolToken Smart Contract\n', ' * @author CoolCrypto\n', ' * @description A Cool Token For Everyone\n', ' * \n', ' * 100 Million COOL\n', ' * \n', ' **/\n', 'pragma solidity >=0.4.4;\n', '\n', '//Cool safeMath\n', 'library safeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    assert(b > 0);\n', '    uint c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      throw;\n', '    }\n', '  }\n', '}\n', '\n', '//Cool Contract\n', 'contract CoolToken {\n', "    string public standard = 'CoolToken';\n", "    string public name = 'Cool';\n", "    string public symbol = 'COOL';\n", '    uint8 public decimals = 18;\n', '    uint256 public totalSupply = 100000000000000000000000000;\n', '    // 100000000000000000000000000/10^18=100M COOL.\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    mapping(address => uint256) public balanceOf;\n', '    mapping(address => mapping(address => uint256)) public allowed;\n', '\n', '    function Token() {\n', '        balanceOf[msg.sender] = totalSupply;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) {\n', '        require(_value > 0 && balanceOf[msg.sender] >= _value);\n', '\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[_to] += _value;\n', '\n', '        Transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) {\n', '        require(_value > 0 && balanceOf[_from] >= _value && allowed[_from][msg.sender] >= _value);\n', '\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '\n', '        Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) {\n', '        allowed[msg.sender][_spender] = _value;\n', '    }\n', '\n', '  \n', '    function allowance(address _owner, address _spender) constant returns(uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function getBalanceOf(address _who) returns(uint256 amount) {\n', '        return balanceOf[_who];\n', '    }\n', '}']
