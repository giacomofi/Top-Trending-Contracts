['/*\n', 'This file is part of the NeuroDAO Contract.\n', '\n', 'The NeuroDAO Contract is free software: you can redistribute it and/or\n', 'modify it under the terms of the GNU lesser General Public License as published\n', 'by the Free Software Foundation, either version 3 of the License, or\n', '(at your option) any later version.\n', '\n', 'The NeuroDAO Contract is distributed in the hope that it will be useful,\n', 'but WITHOUT ANY WARRANTY; without even the implied warranty of\n', 'MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n', 'GNU lesser General Public License for more details.\n', '\n', 'You should have received a copy of the GNU lesser General Public License\n', 'along with the NeuroDAO Contract. If not, see <http://www.gnu.org/licenses/>.\n', '\n', '@author Ilya Svirin <i.svirin@nordavind.ru>\n', '*/\n', '\n', '\n', 'pragma solidity ^0.4.0;\n', '\n', 'contract owned {\n', '\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    function owned() payable {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    modifier onlyOwner {\n', '        require(owner == msg.sender);\n', '        _;\n', '    }\n', '\n', '    function changeOwner(address _owner) onlyOwner public {\n', '        require(_owner != 0);\n', '        newOwner = _owner;\n', '    }\n', '    \n', '    function confirmOwner() public {\n', '        require(newOwner == msg.sender);\n', '        owner = newOwner;\n', '        delete newOwner;\n', '    }\n', '}\n', '\n', 'contract Crowdsale is owned {\n', '    \n', '    uint256 public totalSupply;\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    function Crowdsale() payable owned() {\n', '        totalSupply = 21000000;\n', '        balanceOf[this] = 5000000;\n', '        balanceOf[owner] = totalSupply - balanceOf[this];\n', '        Transfer(this, owner, balanceOf[owner]);\n', '    }\n', '\n', '    function () payable {\n', '        require(balanceOf[this] > 0);\n', '        uint256 tokens = 5000 * msg.value / 1000000000000000000;\n', '        if (tokens > balanceOf[this]) {\n', '            tokens = balanceOf[this];\n', '            uint valueWei = tokens * 1000000000000000000 / 5000;\n', '            msg.sender.transfer(msg.value - valueWei);\n', '        }\n', '        require(balanceOf[msg.sender] + tokens > balanceOf[msg.sender]); // overflow\n', '        require(tokens > 0);\n', '        balanceOf[msg.sender] += tokens;\n', '        balanceOf[this] -= tokens;\n', '        Transfer(this, msg.sender, tokens);\n', '    }\n', '}\n', '\n', 'contract Token is Crowdsale {\n', '    \n', "    string  public standard    = 'Token 0.1';\n", "    string  public name        = 'NeuroDAO';\n", '    string  public symbol      = "NDAO";\n', '    uint8   public decimals    = 0;\n', '\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Burned(address indexed owner, uint256 value);\n', '\n', '    function Token() payable Crowdsale() {}\n', '\n', '    function transfer(address _to, uint256 _value) public {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]); // overflow\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) public {\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]); // overflow\n', '        require(allowed[_from][msg.sender] >= _value);\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant\n', '        returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function burn(uint256 _value) public {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        balanceOf[msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        Burned(msg.sender, _value);\n', '    }\n', '}\n', '\n', 'contract MigrationAgent {\n', '    function migrateFrom(address _from, uint256 _value);\n', '}\n', '\n', 'contract TokenMigration is Token {\n', '    \n', '    address public migrationAgent;\n', '    uint256 public totalMigrated;\n', '\n', '    event Migrate(address indexed from, address indexed to, uint256 value);\n', '\n', '    function TokenMigration() payable Token() {}\n', '\n', '    // Migrate _value of tokens to the new token contract\n', '    function migrate(uint256 _value) external {\n', '        require(migrationAgent != 0);\n', '        require(_value != 0);\n', '        require(_value <= balanceOf[msg.sender]);\n', '        balanceOf[msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        totalMigrated += _value;\n', '        MigrationAgent(migrationAgent).migrateFrom(msg.sender, _value);\n', '        Migrate(msg.sender, migrationAgent, _value);\n', '    }\n', '\n', '    function setMigrationAgent(address _agent) external onlyOwner {\n', '        require(migrationAgent == 0);\n', '        migrationAgent = _agent;\n', '    }\n', '}\n', '\n', 'contract NeuroDAO is TokenMigration {\n', '    function NeuroDAO() payable TokenMigration() {}\n', '    \n', '    function withdraw() public onlyOwner {\n', '        owner.transfer(this.balance);\n', '    }\n', '    \n', '    function killMe() public onlyOwner {\n', '        require(totalSupply == 0);\n', '        selfdestruct(owner);\n', '    }\n', '}']