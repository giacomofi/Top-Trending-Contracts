['contract NigerTokenICO {\n', '    \n', '    function name() constant returns (string) { return "NiggerCoin"; }\n', '    function symbol() constant returns (string) { return "NGR"; }\n', '    function decimals() constant returns (uint8) { return 4; }\n', '\t\n', '\n', '    uint256 public INITIAL_SUPPLY;\n', '\tuint256 public totalSupply;\n', '\t\n', '\tuint256 public totalContrib;\n', '    \n', '    uint256 public rate;\n', '  \n', '    address public owner;\t\t\t\t\t\t    //init owner address\n', '\t\n', '\tuint256 public amount;\n', '\t\n', '\t\n', '\tfunction NigerTokenICO() {\n', '        INITIAL_SUPPLY = 60000000000;                  //Starting coin supply\n', '\t\ttotalSupply = 0;\n', '\t\t\n', '\t\ttotalContrib = 0;\n', '        \n', '        rate = 148800000;                            //How many tokens per ETH given\n', '\t\t\n', '\t\towner = msg.sender;\t\t\t                //Make owner of contract the creator\n', '\t\t\n', '\t\tbalances[msg.sender] = INITIAL_SUPPLY;\t\t//Send owner of contract all starting tokens\n', '\t}\n', '\t\n', '\t\n', '\t//This function is called when Ether is sent to the contract address\n', '\t//Even if 0 ether is sent.\n', '\tfunction () payable {\n', '\t    \n', '\t    uint256 tryAmount = div((mul(msg.value, rate)), 1 ether);                   //Don&#39;t let people buy more tokens than there are.\n', '\t    \n', '\t\tif (msg.value == 0 || msg.value < 0 || balanceOf(owner) < tryAmount) {\t\t//If zero ether is sent, kill. Do nothing. \n', '\t\t\trevert();\n', '\t\t}\n', '\t\t\n', '\t    amount = 0;\t\t\t\t\t\t\t\t\t                //set the &#39;amount&#39; var back to zero\n', '\t\tamount = div((mul(msg.value, rate)), 1 ether);\t\t\t\t//take sent ether, multiply it by the rate then divide by 1 ether.\n', '\t\ttransferFrom(owner, msg.sender, amount);                    //Send tokens to buyer\n', '\t\ttotalSupply += amount;\t\t\t\t\t\t\t\t\t\t//Keep track of how many have been sold.\n', '\t\ttotalContrib = (totalContrib + msg.value);\n', '\t\tamount = 0;\t\t\t\t\t\t\t\t\t                //set the &#39;amount&#39; var back to zero\n', '\t\t\n', '\t\t\n', '\t\towner.transfer(msg.value);\t\t\t\t\t                //Send the ETH to contract owner.\n', '\n', '\t}\t\n', '\t\n', '\t\n', '\t\n', '  \n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  \n', '  mapping(address => uint256) balances;\n', '\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '\n', '        if (_value == 0) { return false; }\n', '\n', '        uint256 fromBalance = balances[msg.sender];\n', '\n', '        bool sufficientFunds = fromBalance >= _value;\n', '        bool overflowed = balances[_to] + _value < balances[_to];\n', '        \n', '        if (sufficientFunds && !overflowed) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            \n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '\n', '\n', '    function balanceOf(address _owner) constant returns (uint256) { return balances[_owner]; }\n', '\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '\n', '        if (_value == 0) { return false; }\n', '        \n', '        uint256 fromBalance = balances[owner];\n', '\n', '        bool sufficientFunds = fromBalance >= _value;\n', '\n', '        if (sufficientFunds) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            \n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '\t\n', '    function getStats() constant returns (uint256, uint256) {\n', '        return (totalSupply, totalContrib);\n', '    }\n', '\n', '\t\n', '\t\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\t\n', '\t\n', '\t\n', '}']
['contract NigerTokenICO {\n', '    \n', '    function name() constant returns (string) { return "NiggerCoin"; }\n', '    function symbol() constant returns (string) { return "NGR"; }\n', '    function decimals() constant returns (uint8) { return 4; }\n', '\t\n', '\n', '    uint256 public INITIAL_SUPPLY;\n', '\tuint256 public totalSupply;\n', '\t\n', '\tuint256 public totalContrib;\n', '    \n', '    uint256 public rate;\n', '  \n', '    address public owner;\t\t\t\t\t\t    //init owner address\n', '\t\n', '\tuint256 public amount;\n', '\t\n', '\t\n', '\tfunction NigerTokenICO() {\n', '        INITIAL_SUPPLY = 60000000000;                  //Starting coin supply\n', '\t\ttotalSupply = 0;\n', '\t\t\n', '\t\ttotalContrib = 0;\n', '        \n', '        rate = 148800000;                            //How many tokens per ETH given\n', '\t\t\n', '\t\towner = msg.sender;\t\t\t                //Make owner of contract the creator\n', '\t\t\n', '\t\tbalances[msg.sender] = INITIAL_SUPPLY;\t\t//Send owner of contract all starting tokens\n', '\t}\n', '\t\n', '\t\n', '\t//This function is called when Ether is sent to the contract address\n', '\t//Even if 0 ether is sent.\n', '\tfunction () payable {\n', '\t    \n', "\t    uint256 tryAmount = div((mul(msg.value, rate)), 1 ether);                   //Don't let people buy more tokens than there are.\n", '\t    \n', '\t\tif (msg.value == 0 || msg.value < 0 || balanceOf(owner) < tryAmount) {\t\t//If zero ether is sent, kill. Do nothing. \n', '\t\t\trevert();\n', '\t\t}\n', '\t\t\n', "\t    amount = 0;\t\t\t\t\t\t\t\t\t                //set the 'amount' var back to zero\n", '\t\tamount = div((mul(msg.value, rate)), 1 ether);\t\t\t\t//take sent ether, multiply it by the rate then divide by 1 ether.\n', '\t\ttransferFrom(owner, msg.sender, amount);                    //Send tokens to buyer\n', '\t\ttotalSupply += amount;\t\t\t\t\t\t\t\t\t\t//Keep track of how many have been sold.\n', '\t\ttotalContrib = (totalContrib + msg.value);\n', "\t\tamount = 0;\t\t\t\t\t\t\t\t\t                //set the 'amount' var back to zero\n", '\t\t\n', '\t\t\n', '\t\towner.transfer(msg.value);\t\t\t\t\t                //Send the ETH to contract owner.\n', '\n', '\t}\t\n', '\t\n', '\t\n', '\t\n', '  \n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  \n', '  mapping(address => uint256) balances;\n', '\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '\n', '        if (_value == 0) { return false; }\n', '\n', '        uint256 fromBalance = balances[msg.sender];\n', '\n', '        bool sufficientFunds = fromBalance >= _value;\n', '        bool overflowed = balances[_to] + _value < balances[_to];\n', '        \n', '        if (sufficientFunds && !overflowed) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            \n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '\n', '\n', '    function balanceOf(address _owner) constant returns (uint256) { return balances[_owner]; }\n', '\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '\n', '        if (_value == 0) { return false; }\n', '        \n', '        uint256 fromBalance = balances[owner];\n', '\n', '        bool sufficientFunds = fromBalance >= _value;\n', '\n', '        if (sufficientFunds) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            \n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '\t\n', '    function getStats() constant returns (uint256, uint256) {\n', '        return (totalSupply, totalContrib);\n', '    }\n', '\n', '\t\n', '\t\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\t\n', '\t\n', '\t\n', '}']
