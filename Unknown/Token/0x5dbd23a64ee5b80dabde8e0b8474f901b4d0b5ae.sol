['pragma solidity ^0.4.16;\n', '\n', '// The ERC20 Token Standard Interface\n', 'contract ERC20 {\n', '    function totalSupply() constant returns (uint totals);\n', '    function balanceOf(address _owner) constant returns (uint balance);\n', '    function transfer(address _to, uint _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint _value) returns (bool success);\n', '    function approve(address _spender, uint _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', '// The BEX Token Standard Interface\n', 'contract BEXInterface {\n', '\n', '    // burn some BEX token from sender&#39;s account to a specific address which nobody can spent\n', '    // this function only called by contract&#39;s owner\n', '    function burn(uint _value, uint _burnpwd) returns (bool success);\n', '}\n', '\n', '// BEX Token implemention\n', 'contract BEXToken is ERC20, BEXInterface {\n', '    address public constant burnToAddr = 0x0000000000000000000000000000000000000000;\n', '    string public constant name = "BEX";\n', '    string public constant symbol = "BEX";\n', '    uint8 public constant decimals = 18;\n', '    uint256 constant totalAmount = 200000000000000000000000000;\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '    \n', '    function BEXToken() {\n', '        balances[msg.sender] = totalAmount;\n', '    }\n', '    \n', '    modifier notAllowBurnedAddr(address _addr) {\n', '        require(_addr != burnToAddr);\n', '        _;\n', '    }\n', '    \n', '    function totalSupply() constant returns (uint totals) {\n', '        return totalAmount;\n', '    }\n', '    \n', '    function balanceOf(address _owner) constant returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '    \n', '    function transfer(address _to, uint _value) notAllowBurnedAddr(msg.sender) returns (bool success) {\n', '        if (balances[msg.sender] >= _value && _value > 0 && balances[_to] + _value > balances[_to]) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint _value) notAllowBurnedAddr(_from) returns (bool success) {\n', '        if (balances[_from] >= _value && _value > 0 && allowed[_from][msg.sender] >= _value\n', '            && balances[_to] + _value > balances[_to]) {\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '    \n', '    function approve(address _spender, uint _value) notAllowBurnedAddr(msg.sender) returns (bool success) {\n', '        // To change the approve amount you first have to reduce the addresses&#39;s allowance to zero\n', '        if (_value != 0 && allowed[msg.sender][_spender] != 0) {\n', '            return false;\n', '        }\n', '        if (_value >= 0) {\n', '            allowed[msg.sender][_spender] = _value;\n', '            Approval(msg.sender, _spender, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function burn(uint _value, uint _burnpwd) returns (bool success) {\n', '        if (_burnpwd == 120915188 && balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[burnToAddr] += _value;\n', '            Transfer(msg.sender, burnToAddr, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '}']
['pragma solidity ^0.4.16;\n', '\n', '// The ERC20 Token Standard Interface\n', 'contract ERC20 {\n', '    function totalSupply() constant returns (uint totals);\n', '    function balanceOf(address _owner) constant returns (uint balance);\n', '    function transfer(address _to, uint _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint _value) returns (bool success);\n', '    function approve(address _spender, uint _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', '// The BEX Token Standard Interface\n', 'contract BEXInterface {\n', '\n', "    // burn some BEX token from sender's account to a specific address which nobody can spent\n", "    // this function only called by contract's owner\n", '    function burn(uint _value, uint _burnpwd) returns (bool success);\n', '}\n', '\n', '// BEX Token implemention\n', 'contract BEXToken is ERC20, BEXInterface {\n', '    address public constant burnToAddr = 0x0000000000000000000000000000000000000000;\n', '    string public constant name = "BEX";\n', '    string public constant symbol = "BEX";\n', '    uint8 public constant decimals = 18;\n', '    uint256 constant totalAmount = 200000000000000000000000000;\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '    \n', '    function BEXToken() {\n', '        balances[msg.sender] = totalAmount;\n', '    }\n', '    \n', '    modifier notAllowBurnedAddr(address _addr) {\n', '        require(_addr != burnToAddr);\n', '        _;\n', '    }\n', '    \n', '    function totalSupply() constant returns (uint totals) {\n', '        return totalAmount;\n', '    }\n', '    \n', '    function balanceOf(address _owner) constant returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '    \n', '    function transfer(address _to, uint _value) notAllowBurnedAddr(msg.sender) returns (bool success) {\n', '        if (balances[msg.sender] >= _value && _value > 0 && balances[_to] + _value > balances[_to]) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint _value) notAllowBurnedAddr(_from) returns (bool success) {\n', '        if (balances[_from] >= _value && _value > 0 && allowed[_from][msg.sender] >= _value\n', '            && balances[_to] + _value > balances[_to]) {\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '    \n', '    function approve(address _spender, uint _value) notAllowBurnedAddr(msg.sender) returns (bool success) {\n', "        // To change the approve amount you first have to reduce the addresses's allowance to zero\n", '        if (_value != 0 && allowed[msg.sender][_spender] != 0) {\n', '            return false;\n', '        }\n', '        if (_value >= 0) {\n', '            allowed[msg.sender][_spender] = _value;\n', '            Approval(msg.sender, _spender, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function burn(uint _value, uint _burnpwd) returns (bool success) {\n', '        if (_burnpwd == 120915188 && balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[burnToAddr] += _value;\n', '            Transfer(msg.sender, burnToAddr, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '}']
