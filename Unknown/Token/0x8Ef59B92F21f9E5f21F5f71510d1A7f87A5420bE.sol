['pragma solidity ^0.4.13;\n', ' \n', 'contract Dexer {\n', '    string public symbol = "DEX";\n', '    string public name = " Dexer ";\n', '    uint8 public constant decimals = 2;\n', '    uint256 _totalSupply = 300000000;\n', '    address owner = 0x35a887e7327cb08e7a510D71a873b09d5055709D;\n', '    bool setupDone = false;\n', '\t\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', ' \n', '    mapping(address => uint256) balances;\n', ' \n', '    mapping(address => mapping (address => uint256)) allowed;\n', ' \n', '    function Token(address adr) {\n', '\t\towner = adr;        \n', '    }\n', '\t\n', '\tfunction SetupToken(string tokenName, string tokenSymbol, uint256 tokenSupply)\n', '\t{\n', '\t\tif (msg.sender == owner && setupDone == false)\n', '\t\t{\n', '\t\t\tsymbol = tokenSymbol;\n', '\t\t\tname = tokenName;\n', '\t\t\t_totalSupply = tokenSupply * 100;\n', '\t\t\tbalances[owner] = _totalSupply;\n', '\t\t\tsetupDone = true;\n', '\t\t}\n', '\t}\n', ' \n', '    function totalSupply() constant returns (uint256 totalSupply) {        \n', '\t\treturn _totalSupply;\n', '    }\n', ' \n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', ' \n', '    function transfer(address _to, uint256 _amount) returns (bool success) {\n', '        if (balances[msg.sender] >= _amount \n', '            && _amount > 0\n', '            && balances[_to] + _amount > balances[_to]) {\n', '            balances[msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(msg.sender, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', ' \n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', '    ) returns (bool success) {\n', '        if (balances[_from] >= _amount\n', '            && allowed[_from][msg.sender] >= _amount\n', '            && _amount > 0\n', '            && balances[_to] + _amount > balances[_to]) {\n', '            balances[_from] -= _amount;\n', '            allowed[_from][msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(_from, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', ' \n', '    function approve(address _spender, uint256 _amount) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', ' \n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}']