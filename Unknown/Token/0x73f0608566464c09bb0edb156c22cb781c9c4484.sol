['pragma solidity ^0.4.2;\n', '\n', '/// Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\n', '/// @title Abstract token contract - Functions to be implemented by token contracts.\n', '\n', 'contract AbstractToken {\n', "    // This is not an abstract function, because solc won't recognize generated getter functions for public variables as functions\n", '    function totalSupply() constant returns (uint256 supply) {}\n', '    function balanceOf(address owner) constant returns (uint256 balance);\n', '    function transfer(address to, uint256 value) returns (bool success);\n', '    function transferFrom(address from, address to, uint256 value) returns (bool success);\n', '    function approve(address spender, uint256 value) returns (bool success);\n', '    function allowance(address owner, address spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Issuance(address indexed to, uint256 value);\n', '}\n', '\n', '\n', 'contract StandardToken is AbstractToken {\n', '\n', '    /*\n', '     *  Data structures\n', '     */\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalSupply;\n', '\n', '    /*\n', '     *  Read and write storage functions\n', '     */\n', "    /// @dev Transfers sender's tokens to a given address. Returns success.\n", '    /// @param _to Address of token receiver.\n', '    /// @param _value Number of tokens to transfer.\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '        else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\n', '    /// @param _from Address from where tokens are withdrawn.\n', '    /// @param _to Address to where tokens are sent.\n', '    /// @param _value Number of tokens to transfer.\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        }\n', '        else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns number of tokens owned by given address.\n', '    /// @param _owner Address of token owner.\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /// @dev Sets approved amount of tokens for spender. Returns success.\n', '    /// @param _spender Address of allowed account.\n', '    /// @param _value Number of approved tokens.\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /*\n', '     * Read storage functions\n', '     */\n', '    /// @dev Returns number of allowed tokens for given address.\n', '    /// @param _owner Address of token owner.\n', '    /// @param _spender Address of token spender.\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '}\n', '\n', '\n', '/// @title Token contract - Implements Standard Token Interface with HumaniQ features.\n', '/// @author Evgeny Yurtaev - <evgeny@etherionlab.com>\n', 'contract HumaniqToken is StandardToken {\n', '\n', '    /*\n', '     * External contracts\n', '     */\n', '    address public emissionContractAddress = 0x0;\n', '\n', '    /*\n', '     * Token meta data\n', '     */\n', '    string constant public name = "HumaniQ";\n', '    string constant public symbol = "HMQ";\n', '    uint8 constant public decimals = 8;\n', '\n', '    address public founder = 0x0;\n', '    bool locked = true;\n', '    /*\n', '     * Modifiers\n', '     */\n', '    modifier onlyFounder() {\n', '        // Only founder is allowed to do this action.\n', '        if (msg.sender != founder) {\n', '            throw;\n', '        }\n', '        _;\n', '    }\n', '\n', '    modifier isCrowdfundingContract() {\n', '        // Only emission address is allowed to proceed.\n', '        if (msg.sender != emissionContractAddress) {\n', '            throw;\n', '        }\n', '        _;\n', '    }\n', '\n', '    modifier unlocked() {\n', '        // Only when transferring coins is enabled.\n', '        if (locked == true) {\n', '            throw;\n', '        }\n', '        _;\n', '    }\n', '\n', '    /*\n', '     * Contract functions\n', '     */\n', '\n', '    /// @dev Crowdfunding contract issues new tokens for address. Returns success.\n', '    /// @param _for Address of receiver.\n', '    /// @param tokenCount Number of tokens to issue.\n', '    function issueTokens(address _for, uint tokenCount)\n', '        external\n', '        payable\n', '        isCrowdfundingContract\n', '        returns (bool)\n', '    {\n', '        if (tokenCount == 0) {\n', '            return false;\n', '        }\n', '        balances[_for] += tokenCount;\n', '        totalSupply += tokenCount;\n', '        Issuance(_for, tokenCount);\n', '        return true;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value)\n', '        unlocked\n', '        returns (bool success)\n', '    {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '        unlocked\n', '        returns (bool success)\n', '    {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /// @dev Function to change address that is allowed to do emission.\n', '    /// @param newAddress Address of new emission contract.\n', '    function changeEmissionContractAddress(address newAddress)\n', '        external\n', '        onlyFounder\n', '        returns (bool)\n', '    {\n', '        emissionContractAddress = newAddress;\n', '    }\n', '\n', '    /// @dev Function that locks/unlocks transfers of token.\n', '    /// @param value True/False\n', '    function lock(bool value)\n', '        external\n', '        onlyFounder\n', '    {\n', '        locked = value;\n', '    }\n', '\n', '    /// @dev Contract constructor function sets initial token balances.\n', '    /// @param _founder Address of the founder of HumaniQ.\n', '    function HumaniqToken(address _founder)\n', '    {\n', '        totalSupply = 0;\n', '        founder = _founder;\n', '    }\n', '}']