['pragma solidity ^0.4.11;\n', '\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', ' \n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '   \n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '  \n', '\n', '  function increaseApproval (address _spender, uint _addedValue) \n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) \n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract StarToken is StandardToken,Ownable {\n', '\n', '  string public constant name = "StarLight";\n', '  string public constant symbol = "STAR";\n', '  uint8 public constant decimals = 18;\n', '  \n', '  address public address1 = 0x08294159dE662f0Bd810FeaB94237cf3A7bB2A3D;\n', '  address public address2 = 0xAed27d4ecCD7C0a0bd548383DEC89031b7bBcf3E;\n', '  address public address3 = 0x41ba7eED9be2450961eBFD7C9Fb715cae077f1dC;\n', '  address public address4 = 0xb9cdb4CDC8f9A931063cA30BcDE8b210D3BA80a3;\n', '  address public address5 = 0x5aBF2CA9e7F5F1895c6FBEcF5668f164797eDc5D;\n', ' uint256 public weiRaised;\n', '\n', '\n', '\n', '  uint public  price;\n', '    \n', '\n', ' \n', '  function StarToken() {\n', '    \n', '    price = 1136;\n', '  }\n', '  \n', '  function () payable {\n', '      \n', '      buy();\n', '  }\n', '  \n', '  function buy() payable {\n', '\n', '    require(msg.value >= 1 ether);\n', '    \n', '\n', '\n', '\n', '      uint256 weiAmount = msg.value;\n', '\n', '\n', '        uint256 toto = totalSupply.div(1 ether);\n', '\n', '      if ( toto> 3000000) {\n', '\n', '          price = 558;\n', '        }\n', '\n', '        if (toto > 9000000) {\n', '\n', '          price = 277;\n', '        }\n', '\n', '        if (toto > 23400000) {\n', '\n', '            price = 136;\n', '        }\n', '\n', '        if (toto > 104400000) {\n', '\n', '            price = 0;\n', '        }\n', '\n', '      // calculate token amount to be created\n', '      uint256 tokens = weiAmount.mul(price);\n', '\n', '    // update state\n', '      weiRaised = weiRaised.add(weiAmount);\n', '\n', '\n', '      totalSupply = totalSupply.add(tokens);\n', '      balances[msg.sender] = balances[msg.sender].add(tokens);\n', '\n', '\n', '      address1.transfer(weiAmount.div(5));\n', '      address2.transfer(weiAmount.div(5));\n', '      address3.transfer(weiAmount.div(5));\n', '      address4.transfer(weiAmount.div(5));\n', '      address5.transfer(weiAmount.div(5));\n', '\n', '  }\n', '\n', '\n', '  function setPrice(uint256 newPrice){\n', '\n', '        price = newPrice;\n', '\n', '  }\n', '  \n', '\n', '\n', '  function withdraw() onlyOwner\n', '    {\n', '        owner.transfer(this.balance);\n', '    }\n', '\n', '\n', '\n', '}']
['pragma solidity ^0.4.11;\n', '\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', ' \n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '   \n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '  \n', '\n', '  function increaseApproval (address _spender, uint _addedValue) \n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) \n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract StarToken is StandardToken,Ownable {\n', '\n', '  string public constant name = "StarLight";\n', '  string public constant symbol = "STAR";\n', '  uint8 public constant decimals = 18;\n', '  \n', '  address public address1 = 0x08294159dE662f0Bd810FeaB94237cf3A7bB2A3D;\n', '  address public address2 = 0xAed27d4ecCD7C0a0bd548383DEC89031b7bBcf3E;\n', '  address public address3 = 0x41ba7eED9be2450961eBFD7C9Fb715cae077f1dC;\n', '  address public address4 = 0xb9cdb4CDC8f9A931063cA30BcDE8b210D3BA80a3;\n', '  address public address5 = 0x5aBF2CA9e7F5F1895c6FBEcF5668f164797eDc5D;\n', ' uint256 public weiRaised;\n', '\n', '\n', '\n', '  uint public  price;\n', '    \n', '\n', ' \n', '  function StarToken() {\n', '    \n', '    price = 1136;\n', '  }\n', '  \n', '  function () payable {\n', '      \n', '      buy();\n', '  }\n', '  \n', '  function buy() payable {\n', '\n', '    require(msg.value >= 1 ether);\n', '    \n', '\n', '\n', '\n', '      uint256 weiAmount = msg.value;\n', '\n', '\n', '        uint256 toto = totalSupply.div(1 ether);\n', '\n', '      if ( toto> 3000000) {\n', '\n', '          price = 558;\n', '        }\n', '\n', '        if (toto > 9000000) {\n', '\n', '          price = 277;\n', '        }\n', '\n', '        if (toto > 23400000) {\n', '\n', '            price = 136;\n', '        }\n', '\n', '        if (toto > 104400000) {\n', '\n', '            price = 0;\n', '        }\n', '\n', '      // calculate token amount to be created\n', '      uint256 tokens = weiAmount.mul(price);\n', '\n', '    // update state\n', '      weiRaised = weiRaised.add(weiAmount);\n', '\n', '\n', '      totalSupply = totalSupply.add(tokens);\n', '      balances[msg.sender] = balances[msg.sender].add(tokens);\n', '\n', '\n', '      address1.transfer(weiAmount.div(5));\n', '      address2.transfer(weiAmount.div(5));\n', '      address3.transfer(weiAmount.div(5));\n', '      address4.transfer(weiAmount.div(5));\n', '      address5.transfer(weiAmount.div(5));\n', '\n', '  }\n', '\n', '\n', '  function setPrice(uint256 newPrice){\n', '\n', '        price = newPrice;\n', '\n', '  }\n', '  \n', '\n', '\n', '  function withdraw() onlyOwner\n', '    {\n', '        owner.transfer(this.balance);\n', '    }\n', '\n', '\n', '\n', '}']
