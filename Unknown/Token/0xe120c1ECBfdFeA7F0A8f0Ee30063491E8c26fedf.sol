['pragma solidity ^0.4.11;\n', '\n', 'contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\n', '\n', 'contract SuretlyToken {\n', '\n', '  string public constant standard = &#39;Token 0.1&#39;;\n', '  string public constant name = "Suretly";\n', '  string public constant symbol = "SUR";\n', '  uint8 public constant decimals = 8;\n', '  uint256 public totalSupply = 237614 * 100000000;\n', '\n', '  address public owner;\n', '\n', '  mapping (address => uint256) public balanceOf;\n', '  mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event NewOwner(address _newOwner);\n', '  event Burn(address indexed _from, uint256 _value);\n', '\n', '  function SuretlyToken() {\n', '    owner = msg.sender;\n', '    balanceOf[owner] = totalSupply;\n', '  }\n', '\n', '  function replaceOwner(address _newOwner) returns (bool success) {\n', '    assert(msg.sender == owner);\n', '    owner = _newOwner;\n', '    NewOwner(_newOwner);\n', '    return true;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) {\n', '    require(_to != 0x0);\n', '    require(_to != address(this));\n', '    assert(!(balanceOf[msg.sender] < _value));\n', '    assert(!(balanceOf[_to] + _value < balanceOf[_to]));\n', '    balanceOf[msg.sender] -= _value;\n', '    balanceOf[_to] += _value;\n', '    Transfer(msg.sender, _to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '    require(_to != 0x0);\n', '    require(_to != address(this));\n', '    assert(!(balanceOf[_from] < _value));\n', '    assert(!(balanceOf[_to] + _value < balanceOf[_to]));\n', '    assert(!(_value > allowance[_from][msg.sender]));\n', '    balanceOf[_from] -= _value;\n', '    balanceOf[_to] += _value;\n', '    allowance[_from][msg.sender] -= _value;\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) returns (bool success) {\n', '    allowance[msg.sender][_spender] = _value;\n', '    return true;\n', '  }\n', '\n', '  function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '    tokenRecipient spender = tokenRecipient(_spender);\n', '    if (approve(_spender, _value)) {\n', '      spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '      return true;\n', '    }\n', '  }\n', '\n', '  function burn(uint256 _value) returns (bool success) {\n', '    assert(!(balanceOf[msg.sender] < _value));\n', '    balanceOf[msg.sender] -= _value;\n', '    totalSupply -= _value;\n', '    Burn(msg.sender, _value);\n', '    return true;\n', '  }\n', '\n', '  function burnFrom(address _from, uint256 _value) returns (bool success) {\n', '    assert(!(balanceOf[_from] < _value));\n', '    assert(!(_value > allowance[_from][msg.sender]));\n', '    balanceOf[_from] -= _value;\n', '    totalSupply -= _value;\n', '    Burn(_from, _value);\n', '    return true;\n', ' }\n', '}']