['pragma solidity ^0.4.13;\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\n', '\n', 'contract PIN is owned {\n', '    /* Public variables of the token */\n', '    string public standard = &#39;PIN 0.1&#39;;\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 0;\n', '    uint256 public totalSupply;\n', '    bool public locked;\n', '    uint256 public icoSince;\n', '    uint256 public icoTill;\n', '\n', '     /* This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event IcoFinished();\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    uint256 public buyPrice = 0.01 ether;\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function PIN(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol,\n', '        uint256 _icoSince,\n', '        uint256 _icoTill,\n', '        uint durationInDays\n', '    ) {\n', '        totalSupply = initialSupply;\n', '\n', '        balanceOf[this] = totalSupply / 100 * 22;             // Give the smart contract 22% of initial tokens\n', '        name = tokenName;                                     // Set the name for display purposes\n', '        symbol = tokenSymbol;                                 // Set the symbol for display purposes\n', '\n', '        balanceOf[msg.sender] = totalSupply / 100 * 78;       // Give remaining total supply to contract owner, will be destroyed\n', '\n', '        Transfer(this, msg.sender, balanceOf[msg.sender]);\n', '\n', '        if(_icoSince == 0 && _icoTill == 0) {\n', '            icoSince = now;\n', '            icoTill = now + durationInDays * 35 days;\n', '        }\n', '        else {\n', '            icoSince = _icoSince;\n', '            icoTill = _icoTill;\n', '        }\n', '    }\n', '\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) {\n', '        require(locked == false);                            // Check if smart contract is locked\n', '\n', '        require(balanceOf[msg.sender] >= _value);            // Check if the sender has enough\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);   // Check for overflows\n', '\n', '        balanceOf[msg.sender] -= _value;                     // Subtract from the sender\n', '        balanceOf[_to] += _value;                            // Add the same to the recipient\n', '        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n', '    }\n', '\n', '    /* Allow another contract to spend some tokens in your behalf */\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '\n', '        return true;\n', '    }\n', '\n', '    /* Approve and then communicate the approved contract in a single tx */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        require(locked == false);                            // Check if smart contract is locked\n', '        require(_value > 0);\n', '        require(balanceOf[_from] >= _value);                 // Check if the sender has enough\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);   // Check for overflows\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '\n', '        balanceOf[_from] -= _value;                          // Subtract from the sender\n', '        balanceOf[_to] += _value;                            // Add the same to the recipient\n', '        allowance[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function buy(uint256 ethers, uint256 time) internal {\n', '        require(locked == false);                            // Check if smart contract is locked\n', '        require(time >= icoSince && time <= icoTill);        // check for ico dates\n', '        require(ethers > 0);                             // check if ethers is greater than zero\n', '\n', '        uint amount = ethers / buyPrice;\n', '\n', '        require(balanceOf[this] >= amount);                  // check if smart contract has sufficient number of tokens\n', '\n', '        balanceOf[msg.sender] += amount;\n', '        balanceOf[this] -= amount;\n', '\n', '        Transfer(this, msg.sender, amount);\n', '    }\n', '\n', '    function () payable {\n', '        buy(msg.value, now);\n', '    }\n', '\n', '    function internalIcoFinished(uint256 time) internal returns (bool) {\n', '        if(time > icoTill) {\n', '            uint256 unsoldTokens = balanceOf[this];\n', '\n', '            balanceOf[owner] += unsoldTokens;\n', '            balanceOf[this] = 0;\n', '\n', '            Transfer(this, owner, unsoldTokens);\n', '\n', '            IcoFinished();\n', '\n', '            return true;\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    function icoFinished() onlyOwner {\n', '        internalIcoFinished(now);\n', '    }\n', '\n', '    function transferEthers() onlyOwner {\n', '        owner.transfer(this.balance);\n', '    }\n', '\n', '    function setBuyPrice(uint256 _buyPrice) onlyOwner {\n', '        buyPrice = _buyPrice;\n', '    }\n', '\n', '    function setLocked(bool _locked) onlyOwner {\n', '        locked = _locked;\n', '    }\n', '\n', '    function burn(uint256 _value) onlyOwner returns (bool success) {\n', '        require (balanceOf[msg.sender] > _value);            // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;                      // Subtract from the sender\n', '        totalSupply -= _value;                                // Updates totalSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.13;\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\n', '\n', 'contract PIN is owned {\n', '    /* Public variables of the token */\n', "    string public standard = 'PIN 0.1';\n", '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 0;\n', '    uint256 public totalSupply;\n', '    bool public locked;\n', '    uint256 public icoSince;\n', '    uint256 public icoTill;\n', '\n', '     /* This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event IcoFinished();\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    uint256 public buyPrice = 0.01 ether;\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function PIN(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol,\n', '        uint256 _icoSince,\n', '        uint256 _icoTill,\n', '        uint durationInDays\n', '    ) {\n', '        totalSupply = initialSupply;\n', '\n', '        balanceOf[this] = totalSupply / 100 * 22;             // Give the smart contract 22% of initial tokens\n', '        name = tokenName;                                     // Set the name for display purposes\n', '        symbol = tokenSymbol;                                 // Set the symbol for display purposes\n', '\n', '        balanceOf[msg.sender] = totalSupply / 100 * 78;       // Give remaining total supply to contract owner, will be destroyed\n', '\n', '        Transfer(this, msg.sender, balanceOf[msg.sender]);\n', '\n', '        if(_icoSince == 0 && _icoTill == 0) {\n', '            icoSince = now;\n', '            icoTill = now + durationInDays * 35 days;\n', '        }\n', '        else {\n', '            icoSince = _icoSince;\n', '            icoTill = _icoTill;\n', '        }\n', '    }\n', '\n', '    /* Send coins */\n', '    function transfer(address _to, uint256 _value) {\n', '        require(locked == false);                            // Check if smart contract is locked\n', '\n', '        require(balanceOf[msg.sender] >= _value);            // Check if the sender has enough\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);   // Check for overflows\n', '\n', '        balanceOf[msg.sender] -= _value;                     // Subtract from the sender\n', '        balanceOf[_to] += _value;                            // Add the same to the recipient\n', '        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n', '    }\n', '\n', '    /* Allow another contract to spend some tokens in your behalf */\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '\n', '        return true;\n', '    }\n', '\n', '    /* Approve and then communicate the approved contract in a single tx */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /* A contract attempts to get the coins */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        require(locked == false);                            // Check if smart contract is locked\n', '        require(_value > 0);\n', '        require(balanceOf[_from] >= _value);                 // Check if the sender has enough\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);   // Check for overflows\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '\n', '        balanceOf[_from] -= _value;                          // Subtract from the sender\n', '        balanceOf[_to] += _value;                            // Add the same to the recipient\n', '        allowance[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function buy(uint256 ethers, uint256 time) internal {\n', '        require(locked == false);                            // Check if smart contract is locked\n', '        require(time >= icoSince && time <= icoTill);        // check for ico dates\n', '        require(ethers > 0);                             // check if ethers is greater than zero\n', '\n', '        uint amount = ethers / buyPrice;\n', '\n', '        require(balanceOf[this] >= amount);                  // check if smart contract has sufficient number of tokens\n', '\n', '        balanceOf[msg.sender] += amount;\n', '        balanceOf[this] -= amount;\n', '\n', '        Transfer(this, msg.sender, amount);\n', '    }\n', '\n', '    function () payable {\n', '        buy(msg.value, now);\n', '    }\n', '\n', '    function internalIcoFinished(uint256 time) internal returns (bool) {\n', '        if(time > icoTill) {\n', '            uint256 unsoldTokens = balanceOf[this];\n', '\n', '            balanceOf[owner] += unsoldTokens;\n', '            balanceOf[this] = 0;\n', '\n', '            Transfer(this, owner, unsoldTokens);\n', '\n', '            IcoFinished();\n', '\n', '            return true;\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    function icoFinished() onlyOwner {\n', '        internalIcoFinished(now);\n', '    }\n', '\n', '    function transferEthers() onlyOwner {\n', '        owner.transfer(this.balance);\n', '    }\n', '\n', '    function setBuyPrice(uint256 _buyPrice) onlyOwner {\n', '        buyPrice = _buyPrice;\n', '    }\n', '\n', '    function setLocked(bool _locked) onlyOwner {\n', '        locked = _locked;\n', '    }\n', '\n', '    function burn(uint256 _value) onlyOwner returns (bool success) {\n', '        require (balanceOf[msg.sender] > _value);            // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;                      // Subtract from the sender\n', '        totalSupply -= _value;                                // Updates totalSupply\n', '        Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '}']
