['pragma solidity ^0.4.11;\n', '\n', 'contract owned {\n', '\n', '        address public owner;\n', '\n', '        function owned() {\n', '                owner = msg.sender;\n', '        }\n', '\n', '        modifier onlyOwner {\n', '                if (msg.sender == owner)\n', '                _;\n', '        }\n', '\n', '\n', '}\n', '\n', 'contract tokenRecipient {\n', '        function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData);\n', '}\n', '\n', 'contract IERC20Token {\n', '\n', '        /// @return total amount of tokens\n', '        function totalSupply() constant returns (uint256 totalSupply);\n', '\n', '        /// @param _owner The address from which the balance will be retrieved\n', '        /// @return The balance\n', '        function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '        /// @notice send `_value` token to `_to` from `msg.sender`\n', '        /// @param _to The address of the recipient\n', '        /// @param _value The amount of token to be transferred\n', '        /// @return Whether the transfer was successful or not\n', '        function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '        /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '        /// @param _from The address of the sender\n', '        /// @param _to The address of the recipient\n', '        /// @param _value The amount of token to be transferred\n', '        /// @return Whether the transfer was successful or not\n', '        function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '        /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '        /// @param _spender The address of the account able to transfer the tokens\n', '        /// @param _value The amount of wei to be approved for transfer\n', '        /// @return Whether the approval was successful or not\n', '        function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '        /// @param _owner The address of the account owning tokens\n', '        /// @param _spender The address of the account able to transfer the tokens\n', '        /// @return Amount of remaining tokens allowed to spent\n', '        function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '        event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '        event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '        event Burn(address indexed from, uint256 value);\n', '}\n', '\n', 'contract TESTH is IERC20Token, owned{\n', '\n', '        /* Public variables of the token */\n', '        string public standard = "TESTH v1.0";\n', '        string public name = "TESTH";\n', '        string public symbol = "TESTH";\n', '        uint8 public decimals = 18;\n', '        uint256 public initialSupply = 50000000 *  10 ** 18;\n', '        uint256 public tokenFrozenUntilBlock;\n', '        uint256 public timeLock = block.timestamp + 2 days; //cofounders time lock\n', '\n', '        /* Private variables of the token */\n', '        uint256 supply = initialSupply;\n', '        mapping (address => uint256) balances;\n', '        mapping (address => mapping (address => uint256)) allowances;\n', '        mapping (address => bool) rAddresses;\n', '\n', '\n', '        event TokenFrozen(uint256 _frozenUntilBlock, string _reason);\n', '\n', '        /* Initializes contract and  sets restricted addresses */\n', '        function TESTH() {\n', '                rAddresses[0x0] = true;                        // Users cannot send tokens to 0x0 address\n', '                rAddresses[address(this)] = true;      // Users cannot sent tokens to this contracts address\n', '        }\n', '\n', '        /* Get total supply of issued coins */\n', '        function totalSupply() constant returns (uint256 totalSupply) {\n', '                return supply;\n', '        }\n', '\n', '        /* Get balance of specific address */\n', '        function balanceOf(address _owner) constant returns (uint256 balance) {\n', '                return balances[_owner];\n', '        }\n', '\n', '         function transferOwnership(address newOwner) onlyOwner {\n', '                require(transfer(newOwner, balances[msg.sender]));\n', '                owner = newOwner;\n', '        }\n', '\n', '        /* Send coins */\n', '        function transfer(address _to, uint256 _value) returns (bool success) {\n', '                require (block.number >= tokenFrozenUntilBlock) ;       // Throw is token is frozen in case of emergency\n', '                require (!rAddresses[_to]) ;                // Prevent transfer to restricted addresses\n', '                require (balances[msg.sender] >= _value);           // Check if the sender has enough\n', '                require (balances[_to] + _value >= balances[_to]) ;  // Check for overflows\n', '                require (!(msg.sender == owner && block.timestamp < timeLock && (balances[msg.sender]-_value) < 10000000 * 10 ** 18));\n', '\n', '                balances[msg.sender] -= _value;                     // Subtract from the sender\n', '                balances[_to] += _value;                            // Add the same to the recipient\n', '                Transfer(msg.sender, _to, _value);                  // Notify anyone listening that this transfer took place\n', '                return true;\n', '        }\n', '\n', '        /* Allow another contract to spend some tokens in your behalf */\n', '        function approve(address _spender, uint256 _value) returns (bool success) {\n', '                require (block.number > tokenFrozenUntilBlock); // Throw is token is frozen in case of emergency\n', '                allowances[msg.sender][_spender] = _value;          // Set allowance\n', '                Approval(msg.sender, _spender, _value);             // Raise Approval event\n', '                return true;\n', '        }\n', '\n', '        /* Approve and then communicate the approved contract in a single tx */\n', '        function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '                tokenRecipient spender = tokenRecipient(_spender);              // Cast spender to tokenRecipient contract\n', '                approve(_spender, _value);                                      // Set approval to contract for _value\n', '                spender.receiveApproval(msg.sender, _value, this, _extraData);  // Raise method on _spender contract\n', '                return true;\n', '        }\n', '\n', '        /* A contract attempts to get the coins */\n', '        function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '                require (block.number > tokenFrozenUntilBlock); // Throw is token is frozen in case of emergency\n', '                require (!rAddresses[_to]);                // Prevent transfer to restricted addresses\n', '                require(balances[_from] >= _value);                // Check if the sender has enough\n', '                require (balances[_to] + _value >= balances[_to]);  // Check for overflows\n', '                require (_value <= allowances[_from][msg.sender]);  // Check allowance\n', '                require (!(_from == owner && block.timestamp < timeLock && (balances[_from]-_value) < 10000000 * 10 ** 18));\n', '                balances[_from] -= _value;                          // Subtract from the sender\n', '                balances[_to] += _value;                            // Add the same to the recipient\n', '                allowances[_from][msg.sender] -= _value;            // Deduct allowance for this address\n', '                Transfer(_from, _to, _value);                       // Notify anyone listening that this transfer took place\n', '                return true;\n', '        }\n', '\n', '        function burn(uint256 _value) returns (bool success) {\n', '                require(balances[msg.sender] >= _value);                 // Check if the sender has enough\n', '                balances[msg.sender] -= _value;                          // Subtract from the sender\n', '                supply-=_value;\n', '                Burn(msg.sender, _value);\n', '                return true;\n', '        }\n', '\n', '        function burnFrom(address _from, uint256 _value) returns (bool success) {\n', '                require(balances[_from] >= _value);                // Check if the targeted balance is enough\n', '                require(_value <= allowances[_from][msg.sender]);    // Check allowance\n', '                balances[_from] -= _value;                         // Subtract from the targeted balance\n', '                allowances[_from][msg.sender] -= _value;             // Subtract from the sender&#39;s allowance\n', '                supply -= _value;                              // Update totalSupply\n', '                Burn(_from, _value);\n', '                return true;\n', '        }\n', '\n', '        /* Get the amount of remaining tokens to spend */\n', '        function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '                return allowances[_owner][_spender];\n', '        }\n', '\n', '\n', '\n', '        /* Stops all token transfers in case of emergency */\n', '        function freezeTransfersUntil(uint256 _frozenUntilBlock, string _reason) onlyOwner {\n', '                tokenFrozenUntilBlock = _frozenUntilBlock;\n', '                TokenFrozen(_frozenUntilBlock, _reason);\n', '        }\n', '\n', '        function unfreezeTransfersUntil(string _reason) onlyOwner {\n', '                tokenFrozenUntilBlock = 0;\n', '                TokenFrozen(0, _reason);\n', '        }\n', '\n', '        /* Owner can add new restricted address or removes one */\n', '        function editRestrictedAddress(address _newRestrictedAddress) onlyOwner {\n', '                rAddresses[_newRestrictedAddress] = !rAddresses[_newRestrictedAddress];\n', '        }\n', '\n', '        function isRestrictedAddress(address _queryAddress) constant returns (bool answer){\n', '                return rAddresses[_queryAddress];\n', '        }\n', '}']
['pragma solidity ^0.4.11;\n', '\n', 'contract owned {\n', '\n', '        address public owner;\n', '\n', '        function owned() {\n', '                owner = msg.sender;\n', '        }\n', '\n', '        modifier onlyOwner {\n', '                if (msg.sender == owner)\n', '                _;\n', '        }\n', '\n', '\n', '}\n', '\n', 'contract tokenRecipient {\n', '        function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData);\n', '}\n', '\n', 'contract IERC20Token {\n', '\n', '        /// @return total amount of tokens\n', '        function totalSupply() constant returns (uint256 totalSupply);\n', '\n', '        /// @param _owner The address from which the balance will be retrieved\n', '        /// @return The balance\n', '        function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '        /// @notice send `_value` token to `_to` from `msg.sender`\n', '        /// @param _to The address of the recipient\n', '        /// @param _value The amount of token to be transferred\n', '        /// @return Whether the transfer was successful or not\n', '        function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '        /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '        /// @param _from The address of the sender\n', '        /// @param _to The address of the recipient\n', '        /// @param _value The amount of token to be transferred\n', '        /// @return Whether the transfer was successful or not\n', '        function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '        /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '        /// @param _spender The address of the account able to transfer the tokens\n', '        /// @param _value The amount of wei to be approved for transfer\n', '        /// @return Whether the approval was successful or not\n', '        function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '        /// @param _owner The address of the account owning tokens\n', '        /// @param _spender The address of the account able to transfer the tokens\n', '        /// @return Amount of remaining tokens allowed to spent\n', '        function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '        event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '        event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '        event Burn(address indexed from, uint256 value);\n', '}\n', '\n', 'contract TESTH is IERC20Token, owned{\n', '\n', '        /* Public variables of the token */\n', '        string public standard = "TESTH v1.0";\n', '        string public name = "TESTH";\n', '        string public symbol = "TESTH";\n', '        uint8 public decimals = 18;\n', '        uint256 public initialSupply = 50000000 *  10 ** 18;\n', '        uint256 public tokenFrozenUntilBlock;\n', '        uint256 public timeLock = block.timestamp + 2 days; //cofounders time lock\n', '\n', '        /* Private variables of the token */\n', '        uint256 supply = initialSupply;\n', '        mapping (address => uint256) balances;\n', '        mapping (address => mapping (address => uint256)) allowances;\n', '        mapping (address => bool) rAddresses;\n', '\n', '\n', '        event TokenFrozen(uint256 _frozenUntilBlock, string _reason);\n', '\n', '        /* Initializes contract and  sets restricted addresses */\n', '        function TESTH() {\n', '                rAddresses[0x0] = true;                        // Users cannot send tokens to 0x0 address\n', '                rAddresses[address(this)] = true;      // Users cannot sent tokens to this contracts address\n', '        }\n', '\n', '        /* Get total supply of issued coins */\n', '        function totalSupply() constant returns (uint256 totalSupply) {\n', '                return supply;\n', '        }\n', '\n', '        /* Get balance of specific address */\n', '        function balanceOf(address _owner) constant returns (uint256 balance) {\n', '                return balances[_owner];\n', '        }\n', '\n', '         function transferOwnership(address newOwner) onlyOwner {\n', '                require(transfer(newOwner, balances[msg.sender]));\n', '                owner = newOwner;\n', '        }\n', '\n', '        /* Send coins */\n', '        function transfer(address _to, uint256 _value) returns (bool success) {\n', '                require (block.number >= tokenFrozenUntilBlock) ;       // Throw is token is frozen in case of emergency\n', '                require (!rAddresses[_to]) ;                // Prevent transfer to restricted addresses\n', '                require (balances[msg.sender] >= _value);           // Check if the sender has enough\n', '                require (balances[_to] + _value >= balances[_to]) ;  // Check for overflows\n', '                require (!(msg.sender == owner && block.timestamp < timeLock && (balances[msg.sender]-_value) < 10000000 * 10 ** 18));\n', '\n', '                balances[msg.sender] -= _value;                     // Subtract from the sender\n', '                balances[_to] += _value;                            // Add the same to the recipient\n', '                Transfer(msg.sender, _to, _value);                  // Notify anyone listening that this transfer took place\n', '                return true;\n', '        }\n', '\n', '        /* Allow another contract to spend some tokens in your behalf */\n', '        function approve(address _spender, uint256 _value) returns (bool success) {\n', '                require (block.number > tokenFrozenUntilBlock); // Throw is token is frozen in case of emergency\n', '                allowances[msg.sender][_spender] = _value;          // Set allowance\n', '                Approval(msg.sender, _spender, _value);             // Raise Approval event\n', '                return true;\n', '        }\n', '\n', '        /* Approve and then communicate the approved contract in a single tx */\n', '        function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '                tokenRecipient spender = tokenRecipient(_spender);              // Cast spender to tokenRecipient contract\n', '                approve(_spender, _value);                                      // Set approval to contract for _value\n', '                spender.receiveApproval(msg.sender, _value, this, _extraData);  // Raise method on _spender contract\n', '                return true;\n', '        }\n', '\n', '        /* A contract attempts to get the coins */\n', '        function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '                require (block.number > tokenFrozenUntilBlock); // Throw is token is frozen in case of emergency\n', '                require (!rAddresses[_to]);                // Prevent transfer to restricted addresses\n', '                require(balances[_from] >= _value);                // Check if the sender has enough\n', '                require (balances[_to] + _value >= balances[_to]);  // Check for overflows\n', '                require (_value <= allowances[_from][msg.sender]);  // Check allowance\n', '                require (!(_from == owner && block.timestamp < timeLock && (balances[_from]-_value) < 10000000 * 10 ** 18));\n', '                balances[_from] -= _value;                          // Subtract from the sender\n', '                balances[_to] += _value;                            // Add the same to the recipient\n', '                allowances[_from][msg.sender] -= _value;            // Deduct allowance for this address\n', '                Transfer(_from, _to, _value);                       // Notify anyone listening that this transfer took place\n', '                return true;\n', '        }\n', '\n', '        function burn(uint256 _value) returns (bool success) {\n', '                require(balances[msg.sender] >= _value);                 // Check if the sender has enough\n', '                balances[msg.sender] -= _value;                          // Subtract from the sender\n', '                supply-=_value;\n', '                Burn(msg.sender, _value);\n', '                return true;\n', '        }\n', '\n', '        function burnFrom(address _from, uint256 _value) returns (bool success) {\n', '                require(balances[_from] >= _value);                // Check if the targeted balance is enough\n', '                require(_value <= allowances[_from][msg.sender]);    // Check allowance\n', '                balances[_from] -= _value;                         // Subtract from the targeted balance\n', "                allowances[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n", '                supply -= _value;                              // Update totalSupply\n', '                Burn(_from, _value);\n', '                return true;\n', '        }\n', '\n', '        /* Get the amount of remaining tokens to spend */\n', '        function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '                return allowances[_owner][_spender];\n', '        }\n', '\n', '\n', '\n', '        /* Stops all token transfers in case of emergency */\n', '        function freezeTransfersUntil(uint256 _frozenUntilBlock, string _reason) onlyOwner {\n', '                tokenFrozenUntilBlock = _frozenUntilBlock;\n', '                TokenFrozen(_frozenUntilBlock, _reason);\n', '        }\n', '\n', '        function unfreezeTransfersUntil(string _reason) onlyOwner {\n', '                tokenFrozenUntilBlock = 0;\n', '                TokenFrozen(0, _reason);\n', '        }\n', '\n', '        /* Owner can add new restricted address or removes one */\n', '        function editRestrictedAddress(address _newRestrictedAddress) onlyOwner {\n', '                rAddresses[_newRestrictedAddress] = !rAddresses[_newRestrictedAddress];\n', '        }\n', '\n', '        function isRestrictedAddress(address _queryAddress) constant returns (bool answer){\n', '                return rAddresses[_queryAddress];\n', '        }\n', '}']
