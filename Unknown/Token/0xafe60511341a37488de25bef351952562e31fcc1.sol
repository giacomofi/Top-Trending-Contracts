['pragma solidity ^0.4.11;\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\n', '\n', 'contract ParentToken {\n', '\n', '     /* library used for calculations */\n', '    using SafeMath for uint256; \n', '\n', '    /* Public variables of the token */\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address=>uint)) allowance;        \n', '\n', '\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function ParentToken(uint256 currentSupply,\n', '        string tokenName,\n', '        uint8 decimalUnits,\n', '        string tokenSymbol){\n', '            \n', '       balances[msg.sender] =  currentSupply;    // Give the creator all initial tokens  \n', '       totalSupply = currentSupply;              // Update total supply \n', '       name = tokenName;                         // Set the name for display purposes\n', '       decimals = decimalUnits;                  // Decimals for the tokens\n', '       symbol = tokenSymbol;\t\t\t\t\t// Set the symbol for display purposes\t\n', '    }\n', '    \n', '    \n', '\n', '   ///@notice Transfer tokens to the beneficiary account\n', '   ///@param  to The beneficiary account\n', '   ///@param  value The amount of tokens to be transfered  \n', '       function transfer(address to, uint value) returns (bool success){\n', '        require(\n', '            balances[msg.sender] >= value \n', '            && value > 0 \n', '            );\n', '            balances[msg.sender] = balances[msg.sender].sub(value);    \n', '            balances[to] = balances[to].add(value);\n', '            return true;\n', '    }\n', '    \n', '\t///@notice Allow another contract to spend some tokens in your behalf\n', '\t///@param  spender The address authorized to spend \n', '\t///@param  value The amount to be approved \n', '    function approve(address spender, uint256 value)\n', '        returns (bool success) {\n', '        allowance[msg.sender][spender] = value;\n', '        return true;\n', '    }\n', '\n', '    ///@notice Approve and then communicate the approved contract in a single tx\n', '\t///@param  spender The address authorized to spend \n', '\t///@param  value The amount to be approved \n', '    function approveAndCall(address spender, uint256 value, bytes extraData)\n', '        returns (bool success) {    \n', '        tokenRecipient recSpender = tokenRecipient(spender);\n', '        if (approve(spender, value)) {\n', '            recSpender.receiveApproval(msg.sender, value, this, extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '\n', '\n', '   ///@notice Transfer tokens between accounts\n', '   ///@param  from The benefactor/sender account.\n', '   ///@param  to The beneficiary account\n', '   ///@param  value The amount to be transfered  \n', '    function transferFrom(address from, address to, uint value) returns (bool success){\n', '        \n', '        require(\n', '            allowance[from][msg.sender] >= value\n', '            &&balances[from] >= value\n', '            && value > 0\n', '            );\n', '            \n', '            balances[from] = balances[from].sub(value);\n', '            balances[to] =  balances[to].add(value);\n', '            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n', '            return true;\n', '        }\n', '        \n', '}\n', '\n', '\n', 'contract TBOT is owned,ParentToken{\n', '\n', '     /* library used for calculations */\n', '    using SafeMath for uint256; \n', '\n', '     /* Public variables of the token */\n', '    string public standard = &#39;Token 0.1&#39;;  \n', '    uint256 public currentSupply= 3000000000000000;\n', '    string public constant symbol = "TBT";\n', '    string public constant tokenName = "TBOT";\n', '    uint8 public constant decimals = 8;\n', '\n', '    \n', '\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '\n', '  ///@notice Default function used for any payments made.\n', '    function () payable {\n', '        acceptPayment();    \n', '    }\n', '   \n', '\n', '   ///@notice Accept payment and transfer to owner account. \n', '    function acceptPayment() payable {\n', '        require(msg.value>0);\n', '        \n', '        owner.transfer(msg.value);\n', '    }\n', '\n', '\n', '\n', '    function TBOT()ParentToken(currentSupply,tokenName,decimals,symbol){}\n', '\n', '\n', '   ///@notice Provides balance of the account requested \n', '   ///@param  add Address of the account for which balance is being enquired\n', '    function balanceOf(address add) constant returns (uint balance){\n', '       return balances[add];\n', '    }\n', '    \n', '    \n', '    \n', '   ///@notice Transfer tokens to the beneficiary account\n', '   ///@param  to The beneficiary account\n', '   ///@param  value The amount of tokens to be transfered \n', '        function transfer(address to, uint value) returns (bool success){\n', '        require(\n', '            balances[msg.sender] >= value \n', '            && value > 0 \n', '            && (!frozenAccount[msg.sender]) \t\t\t\t\t\t\t\t\t\t// Allow transfer only if account is not frozen\n', '            );\n', '            balances[msg.sender] = balances[msg.sender].sub(value);                 \n', '            balances[to] = balances[to].add(value);                               // Update the balance of beneficiary account\n', '\t\t\tTransfer(msg.sender,to,value);\n', '            return true;\n', '    }\n', '    \n', '    \n', '\n', '   ///@notice Transfer tokens between accounts\n', '   ///@param  from The benefactor/sender account.\n', '   ///@param  to The beneficiary account\n', '   ///@param  value The amount to be transfered  \n', '        function transferFrom(address from, address to, uint value) returns (bool success){\n', '        \n', '            require(\n', '            allowance[from][msg.sender] >= value\n', '            &&balances[from] >= value                                                 //Check if the benefactor has sufficient balance\n', '            && value > 0 \n', '            && (!frozenAccount[msg.sender])                                           // Allow transfer only if account is not frozen\n', '            );\n', '            \n', '            balances[from] = balances[from].sub(value);                               // Deduct from the benefactor account\n', '            balances[to] =  balances[to].add(value);                                  // Update the balance of beneficiary account\n', '            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n', '            Transfer(from,to,value);\n', '            return true;\n', '        }\n', '        \n', '    \n', '\n', '   ///@notice Increase the number of coins\n', '   ///@param  target The address of the account where the coins would be added.\n', '   ///@param  mintedAmount The amount of coins to be added\n', '        function mintToken(address target, uint256 mintedAmount) onlyOwner {\n', '        balances[target] = balances[target].add(mintedAmount);      //Add the amount of coins to be increased to the balance\n', '        currentSupply = currentSupply.add(mintedAmount);            //Add the amount of coins to be increased to the supply\n', '        Transfer(0, this, mintedAmount);\n', '        Transfer(this, target, mintedAmount);\n', '    }\n', '\n', '   ///@notice Freeze the account at the target address\n', '   ///@param  target The address of the account to be frozen\n', '    function freezeAccount(address target, bool freeze) onlyOwner {\n', '        require(freeze);                                             //Check if account has to be freezed\n', '        frozenAccount[target] = freeze;                              //Freeze the account  \n', '        FrozenFunds(target, freeze);\n', '    }\n', '\n', '\n', '   /// @notice Remove tokens from the system irreversibly\n', '    /// @param value The amount of money to burn\n', '    function burn(uint256 value) onlyOwner returns (bool success)  {\n', '        require (balances[msg.sender] > value && value>0);            // Check if the sender has enough balance\n', '        balances[msg.sender] = balances[msg.sender].sub(value);       // Deduct from the sender\n', '        currentSupply = currentSupply.sub(value);                     // Update currentSupply\n', '        Burn(msg.sender, value);\n', '        return true;\n', '    }\n', '\n', '    function burnFrom(address from, uint256 value) onlyOwner returns (bool success) {\n', '        require(balances[from] >= value);                                         // Check if the targeted balance is enough\n', '        require(value <= allowance[from][msg.sender]);                            // Check allowance\n', '        balances[from] = balances[from].sub(value);                               // Deduct from the targeted balance\n', '        allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);     // Deduct from the sender&#39;s allowance\n', '        currentSupply = currentSupply.sub(value);                                 // Update currentSupply\n', '        Burn(from, value);\n', '        return true;\n', '    }\n', '\n', '\n', '\n', '  /* This notifies clients about the amount transfered */\n', '\tevent Transfer(address indexed _from, address indexed _to,uint256 _value);     \n', '\n', '  /* This notifies clients about the amount approved */\n', '\tevent Approval(address indexed _owner, address indexed _spender,uint256 _value);\n', '\n', '  /* This notifies clients about the account freeze */\n', '\tevent FrozenFunds(address target, bool frozen);\n', '    \n', '  /* This notifies clients about the amount burnt */\n', '   event Burn(address indexed from, uint256 value);\n', '\n', '}']
['pragma solidity ^0.4.11;\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    function owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\n', '\n', 'contract ParentToken {\n', '\n', '     /* library used for calculations */\n', '    using SafeMath for uint256; \n', '\n', '    /* Public variables of the token */\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address=>uint)) allowance;        \n', '\n', '\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function ParentToken(uint256 currentSupply,\n', '        string tokenName,\n', '        uint8 decimalUnits,\n', '        string tokenSymbol){\n', '            \n', '       balances[msg.sender] =  currentSupply;    // Give the creator all initial tokens  \n', '       totalSupply = currentSupply;              // Update total supply \n', '       name = tokenName;                         // Set the name for display purposes\n', '       decimals = decimalUnits;                  // Decimals for the tokens\n', '       symbol = tokenSymbol;\t\t\t\t\t// Set the symbol for display purposes\t\n', '    }\n', '    \n', '    \n', '\n', '   ///@notice Transfer tokens to the beneficiary account\n', '   ///@param  to The beneficiary account\n', '   ///@param  value The amount of tokens to be transfered  \n', '       function transfer(address to, uint value) returns (bool success){\n', '        require(\n', '            balances[msg.sender] >= value \n', '            && value > 0 \n', '            );\n', '            balances[msg.sender] = balances[msg.sender].sub(value);    \n', '            balances[to] = balances[to].add(value);\n', '            return true;\n', '    }\n', '    \n', '\t///@notice Allow another contract to spend some tokens in your behalf\n', '\t///@param  spender The address authorized to spend \n', '\t///@param  value The amount to be approved \n', '    function approve(address spender, uint256 value)\n', '        returns (bool success) {\n', '        allowance[msg.sender][spender] = value;\n', '        return true;\n', '    }\n', '\n', '    ///@notice Approve and then communicate the approved contract in a single tx\n', '\t///@param  spender The address authorized to spend \n', '\t///@param  value The amount to be approved \n', '    function approveAndCall(address spender, uint256 value, bytes extraData)\n', '        returns (bool success) {    \n', '        tokenRecipient recSpender = tokenRecipient(spender);\n', '        if (approve(spender, value)) {\n', '            recSpender.receiveApproval(msg.sender, value, this, extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '\n', '\n', '   ///@notice Transfer tokens between accounts\n', '   ///@param  from The benefactor/sender account.\n', '   ///@param  to The beneficiary account\n', '   ///@param  value The amount to be transfered  \n', '    function transferFrom(address from, address to, uint value) returns (bool success){\n', '        \n', '        require(\n', '            allowance[from][msg.sender] >= value\n', '            &&balances[from] >= value\n', '            && value > 0\n', '            );\n', '            \n', '            balances[from] = balances[from].sub(value);\n', '            balances[to] =  balances[to].add(value);\n', '            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n', '            return true;\n', '        }\n', '        \n', '}\n', '\n', '\n', 'contract TBOT is owned,ParentToken{\n', '\n', '     /* library used for calculations */\n', '    using SafeMath for uint256; \n', '\n', '     /* Public variables of the token */\n', "    string public standard = 'Token 0.1';  \n", '    uint256 public currentSupply= 3000000000000000;\n', '    string public constant symbol = "TBT";\n', '    string public constant tokenName = "TBOT";\n', '    uint8 public constant decimals = 8;\n', '\n', '    \n', '\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '\n', '  ///@notice Default function used for any payments made.\n', '    function () payable {\n', '        acceptPayment();    \n', '    }\n', '   \n', '\n', '   ///@notice Accept payment and transfer to owner account. \n', '    function acceptPayment() payable {\n', '        require(msg.value>0);\n', '        \n', '        owner.transfer(msg.value);\n', '    }\n', '\n', '\n', '\n', '    function TBOT()ParentToken(currentSupply,tokenName,decimals,symbol){}\n', '\n', '\n', '   ///@notice Provides balance of the account requested \n', '   ///@param  add Address of the account for which balance is being enquired\n', '    function balanceOf(address add) constant returns (uint balance){\n', '       return balances[add];\n', '    }\n', '    \n', '    \n', '    \n', '   ///@notice Transfer tokens to the beneficiary account\n', '   ///@param  to The beneficiary account\n', '   ///@param  value The amount of tokens to be transfered \n', '        function transfer(address to, uint value) returns (bool success){\n', '        require(\n', '            balances[msg.sender] >= value \n', '            && value > 0 \n', '            && (!frozenAccount[msg.sender]) \t\t\t\t\t\t\t\t\t\t// Allow transfer only if account is not frozen\n', '            );\n', '            balances[msg.sender] = balances[msg.sender].sub(value);                 \n', '            balances[to] = balances[to].add(value);                               // Update the balance of beneficiary account\n', '\t\t\tTransfer(msg.sender,to,value);\n', '            return true;\n', '    }\n', '    \n', '    \n', '\n', '   ///@notice Transfer tokens between accounts\n', '   ///@param  from The benefactor/sender account.\n', '   ///@param  to The beneficiary account\n', '   ///@param  value The amount to be transfered  \n', '        function transferFrom(address from, address to, uint value) returns (bool success){\n', '        \n', '            require(\n', '            allowance[from][msg.sender] >= value\n', '            &&balances[from] >= value                                                 //Check if the benefactor has sufficient balance\n', '            && value > 0 \n', '            && (!frozenAccount[msg.sender])                                           // Allow transfer only if account is not frozen\n', '            );\n', '            \n', '            balances[from] = balances[from].sub(value);                               // Deduct from the benefactor account\n', '            balances[to] =  balances[to].add(value);                                  // Update the balance of beneficiary account\n', '            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n', '            Transfer(from,to,value);\n', '            return true;\n', '        }\n', '        \n', '    \n', '\n', '   ///@notice Increase the number of coins\n', '   ///@param  target The address of the account where the coins would be added.\n', '   ///@param  mintedAmount The amount of coins to be added\n', '        function mintToken(address target, uint256 mintedAmount) onlyOwner {\n', '        balances[target] = balances[target].add(mintedAmount);      //Add the amount of coins to be increased to the balance\n', '        currentSupply = currentSupply.add(mintedAmount);            //Add the amount of coins to be increased to the supply\n', '        Transfer(0, this, mintedAmount);\n', '        Transfer(this, target, mintedAmount);\n', '    }\n', '\n', '   ///@notice Freeze the account at the target address\n', '   ///@param  target The address of the account to be frozen\n', '    function freezeAccount(address target, bool freeze) onlyOwner {\n', '        require(freeze);                                             //Check if account has to be freezed\n', '        frozenAccount[target] = freeze;                              //Freeze the account  \n', '        FrozenFunds(target, freeze);\n', '    }\n', '\n', '\n', '   /// @notice Remove tokens from the system irreversibly\n', '    /// @param value The amount of money to burn\n', '    function burn(uint256 value) onlyOwner returns (bool success)  {\n', '        require (balances[msg.sender] > value && value>0);            // Check if the sender has enough balance\n', '        balances[msg.sender] = balances[msg.sender].sub(value);       // Deduct from the sender\n', '        currentSupply = currentSupply.sub(value);                     // Update currentSupply\n', '        Burn(msg.sender, value);\n', '        return true;\n', '    }\n', '\n', '    function burnFrom(address from, uint256 value) onlyOwner returns (bool success) {\n', '        require(balances[from] >= value);                                         // Check if the targeted balance is enough\n', '        require(value <= allowance[from][msg.sender]);                            // Check allowance\n', '        balances[from] = balances[from].sub(value);                               // Deduct from the targeted balance\n', "        allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);     // Deduct from the sender's allowance\n", '        currentSupply = currentSupply.sub(value);                                 // Update currentSupply\n', '        Burn(from, value);\n', '        return true;\n', '    }\n', '\n', '\n', '\n', '  /* This notifies clients about the amount transfered */\n', '\tevent Transfer(address indexed _from, address indexed _to,uint256 _value);     \n', '\n', '  /* This notifies clients about the amount approved */\n', '\tevent Approval(address indexed _owner, address indexed _spender,uint256 _value);\n', '\n', '  /* This notifies clients about the account freeze */\n', '\tevent FrozenFunds(address target, bool frozen);\n', '    \n', '  /* This notifies clients about the amount burnt */\n', '   event Burn(address indexed from, uint256 value);\n', '\n', '}']
