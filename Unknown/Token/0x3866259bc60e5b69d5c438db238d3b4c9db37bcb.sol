['pragma solidity ^0.4.11;\n', '\n', '// ----------------------------------------------------------------------------\n', '// OAX &#39;openANX Token&#39; crowdfunding contract\n', '//\n', '// Refer to http://openanx.org/ for further information.\n', '//\n', '// Enjoy. (c) openANX and BokkyPooBah / Bok Consulting Pty Ltd 2017. \n', '// The MIT Licence.\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// OAX &#39;openANX Token&#39; crowdfunding contract - ERC20 Token Interface\n', '//\n', '// Refer to http://openanx.org/ for further information.\n', '//\n', '// Enjoy. (c) openANX and BokkyPooBah / Bok Consulting Pty Ltd 2017. \n', '// The MIT Licence.\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/issues/20\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    uint public totalSupply;\n', '    function balanceOf(address _owner) constant returns (uint balance);\n', '    function transfer(address _to, uint _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint _value) \n', '        returns (bool success);\n', '    function approve(address _spender, uint _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant \n', '        returns (uint remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender, \n', '        uint _value);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// OAX &#39;openANX Token&#39; crowdfunding contract - Owned contracts\n', '//\n', '// Refer to http://openanx.org/ for further information.\n', '//\n', '// Enjoy. (c) openANX and BokkyPooBah / Bok Consulting Pty Ltd 2017. \n', '// The MIT Licence.\n', '// ----------------------------------------------------------------------------\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Current owner, and proposed new owner\n', '    // ------------------------------------------------------------------------\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor - assign creator as the owner\n', '    // ------------------------------------------------------------------------\n', '    function Owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Modifier to mark that a function can only be executed by the owner\n', '    // ------------------------------------------------------------------------\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can initiate transfer of contract to a new owner\n', '    // ------------------------------------------------------------------------\n', '    function transferOwnership(address _newOwner) onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', ' \n', '    // ------------------------------------------------------------------------\n', '    // New owner has to accept transfer of contract\n', '    // ------------------------------------------------------------------------\n', '    function acceptOwnership() {\n', '        require(msg.sender == newOwner);\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// OAX &#39;openANX Token&#39; crowdfunding contract\n', '//\n', '// Refer to http://openanx.org/ for further information.\n', '//\n', '// Enjoy. (c) openANX and BokkyPooBah / Bok Consulting Pty Ltd 2017. \n', '// The MIT Licence.\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths, borrowed from OpenZeppelin\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Add a number to another number, checking for overflows\n', '    // ------------------------------------------------------------------------\n', '    function add(uint a, uint b) internal returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a && c >= b);\n', '        return c;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Subtract a number from another number, checking for underflows\n', '    // ------------------------------------------------------------------------\n', '    function sub(uint a, uint b) internal returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// OAX &#39;openANX Token&#39; crowdfunding contract - Configuration\n', '//\n', '// Refer to http://openanx.org/ for further information.\n', '//\n', '// Enjoy. (c) openANX and BokkyPooBah / Bok Consulting Pty Ltd 2017. \n', '// The MIT Licence.\n', '// ----------------------------------------------------------------------------\n', '\n', '// ----------------------------------------------------------------------------\n', '// openANX crowdsale token smart contract - configuration parameters\n', '// ----------------------------------------------------------------------------\n', 'contract OpenANXTokenConfig {\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token symbol(), name() and decimals()\n', '    // ------------------------------------------------------------------------\n', '    string public constant SYMBOL = "OAX";\n', '    string public constant NAME = "openANX Token";\n', '    uint8 public constant DECIMALS = 18;\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Decimal factor for multiplications from OAX unit to OAX natural unit\n', '    // ------------------------------------------------------------------------\n', '    uint public constant DECIMALSFACTOR = 10**uint(DECIMALS);\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Tranche 1 soft cap and hard cap, and total tokens\n', '    // ------------------------------------------------------------------------\n', '    uint public constant TOKENS_SOFT_CAP = 13000000 * DECIMALSFACTOR;\n', '    uint public constant TOKENS_HARD_CAP = 30000000 * DECIMALSFACTOR;\n', '    uint public constant TOKENS_TOTAL = 100000000 * DECIMALSFACTOR;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Tranche 1 crowdsale start date and end date\n', '    // Do not use the `now` function here\n', '    // Start - Thursday, 22-Jun-17 13:00:00 UTC / 1pm GMT 22 June 2017\n', '    // End - Saturday, 22-Jul-17 13:00:00 UTC / 1pm GMT 22 July 2017 \n', '    // ------------------------------------------------------------------------\n', '    uint public constant START_DATE = 1498136400;\n', '    uint public constant END_DATE = 1500728400;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // 1 year and 2 year dates for locked tokens\n', '    // Do not use the `now` function here \n', '    // ------------------------------------------------------------------------\n', '    uint public constant LOCKED_1Y_DATE = START_DATE + 365 days;\n', '    uint public constant LOCKED_2Y_DATE = START_DATE + 2 * 365 days;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Individual transaction contribution min and max amounts\n', '    // Set to 0 to switch off, or `x ether`\n', '    // ------------------------------------------------------------------------\n', '    uint public CONTRIBUTIONS_MIN = 0 ether;\n', '    uint public CONTRIBUTIONS_MAX = 0 ether;\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// OAX &#39;openANX Token&#39; crowdfunding contract - locked tokens\n', '//\n', '// Refer to http://openanx.org/ for further information.\n', '//\n', '// Enjoy. (c) openANX and BokkyPooBah / Bok Consulting Pty Ltd 2017. \n', '// The MIT Licence.\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract that holds the 1Y and 2Y locked token information\n', '// ----------------------------------------------------------------------------\n', 'contract LockedTokens is OpenANXTokenConfig {\n', '    using SafeMath for uint;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // 1y and 2y locked totals, not including unsold tranche1 and all tranche2\n', '    // tokens\n', '    // ------------------------------------------------------------------------\n', '    uint public constant TOKENS_LOCKED_1Y_TOTAL = 14000000 * DECIMALSFACTOR;\n', '    uint public constant TOKENS_LOCKED_2Y_TOTAL = 26000000 * DECIMALSFACTOR;\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Tokens locked for 1 year for sale 2 in the following account\n', '    // ------------------------------------------------------------------------\n', '    address public TRANCHE2_ACCOUNT = 0x813703Eb676f3B6C76dA75cBa0cbC49DdbCA7B37;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Current totalSupply of 1y and 2y locked tokens\n', '    // ------------------------------------------------------------------------\n', '    uint public totalSupplyLocked1Y;\n', '    uint public totalSupplyLocked2Y;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Locked tokens mapping\n', '    // ------------------------------------------------------------------------\n', '    mapping (address => uint) public balancesLocked1Y;\n', '    mapping (address => uint) public balancesLocked2Y;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Address of openANX crowdsale token contract\n', '    // ------------------------------------------------------------------------\n', '    ERC20Interface public tokenContract;\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor - called by crowdsale token contract\n', '    // ------------------------------------------------------------------------\n', '    function LockedTokens(address _tokenContract) {\n', '        tokenContract = ERC20Interface(_tokenContract);\n', '\n', '        // --- 1y locked tokens ---\n', '\n', '        // Confirm 1Y totals        \n', '        add1Y(0x4beE088efDBCC610EEEa101ded7204150AF1C8b9,1000000 * DECIMALSFACTOR);\n', '        add1Y(0x839551201f866907Eb5017bE79cEB48aDa58650c,925000 * DECIMALSFACTOR);\n', '        add1Y(0xa92d4Cd3412862386c234Be572Fe4A8FA4BB09c6,925000 * DECIMALSFACTOR);\n', '        add1Y(0xECf2B5fce33007E5669D63de39a4c663e56958dD,925000 * DECIMALSFACTOR);\n', '        add1Y(0xD6B7695bc74E2C950eb953316359Eab283C5Bda8,925000 * DECIMALSFACTOR);\n', '        add1Y(0xBE3463Eae26398D55a7118683079264BcF3ab24B,150000 * DECIMALSFACTOR);\n', '        add1Y(0xf47428Fb9A61c9f3312cB035AEE049FBa76ba62a,150000 * DECIMALSFACTOR);\n', '        add1Y(0xfCcc77165D822Ef9004714d829bDC267C743658a,50000 * DECIMALSFACTOR);\n', '        add1Y(0xaf8df2aCAec3d5d92dE42a6c19d7706A4F3E8D8b,50000 * DECIMALSFACTOR);\n', '        add1Y(0x22a6f9693856374BF2922cd837d07F6670E7FA4d,250000 * DECIMALSFACTOR);\n', '        add1Y(0x3F720Ca8FfF598F00a51DE32A8Cb58Ca73f22aDe,50000 * DECIMALSFACTOR);\n', '        add1Y(0xBd0D1954B301E414F0b5D0827A69EC5dD559e50B,50000 * DECIMALSFACTOR);\n', '        add1Y(0x2ad6B011FEcDE830c9cc4dc0d0b77F055D6b5990,50000 * DECIMALSFACTOR);\n', '        add1Y(0x0c5cD0E971cA18a0F0E0d581f4B93FaD31D608B0,2000085 * DECIMALSFACTOR);\n', '        add1Y(0xFaaDC4d80Eaf430Ab604337CB67d77eC763D3e23,200248 * DECIMALSFACTOR);\n', '        add1Y(0xDAef46f89c264182Cd87Ce93B620B63c7AfB14f7,1616920 * DECIMALSFACTOR);\n', '        add1Y(0x19cc59C30cE54706633dC29EdEbAE1efF1757b25,224980 * DECIMALSFACTOR);\n', '        add1Y(0xa130fE5D399104CA5AF168fbbBBe19F95d739741,745918 * DECIMALSFACTOR);\n', '        add1Y(0xC0cD1bf6F2939095a56B0DFa085Ba2886b84E7d1,745918 * DECIMALSFACTOR);\n', '        add1Y(0xf2C26e79eD264B0E3e5A5DFb1Dd91EA61f512C6e,745918 * DECIMALSFACTOR);\n', '        add1Y(0x5F876a8A5F1B66fbf3D0D119075b62aF4386e319,745918 * DECIMALSFACTOR);\n', '        add1Y(0xb8E046570800Dd76720aF6d42d3cCae451F54f15,745920 * DECIMALSFACTOR);\n', '        add1Y(0xA524fa65Aac4647fa7bA2c20D22F64450c351bBd,714286 * DECIMALSFACTOR);\n', '        add1Y(0x27209b276C15a936BCE08D7D70f0c97aeb3CE8c3,13889 * DECIMALSFACTOR);\n', '\n', '        assert(totalSupplyLocked1Y == TOKENS_LOCKED_1Y_TOTAL);\n', '\n', '        // --- 2y locked tokens ---\n', '        add2Y(0x4beE088efDBCC610EEEa101ded7204150AF1C8b9,1000000 * DECIMALSFACTOR);\n', '        add2Y(0x839551201f866907Eb5017bE79cEB48aDa58650c,925000 * DECIMALSFACTOR);\n', '        add2Y(0xa92d4Cd3412862386c234Be572Fe4A8FA4BB09c6,925000 * DECIMALSFACTOR);\n', '        add2Y(0xECf2B5fce33007E5669D63de39a4c663e56958dD,925000 * DECIMALSFACTOR);\n', '        add2Y(0xD6B7695bc74E2C950eb953316359Eab283C5Bda8,925000 * DECIMALSFACTOR);\n', '        add2Y(0xBE3463Eae26398D55a7118683079264BcF3ab24B,150000 * DECIMALSFACTOR);\n', '        add2Y(0xf47428Fb9A61c9f3312cB035AEE049FBa76ba62a,150000 * DECIMALSFACTOR);\n', '        add2Y(0xfCcc77165D822Ef9004714d829bDC267C743658a,50000 * DECIMALSFACTOR);\n', '        add2Y(0xDAef46f89c264182Cd87Ce93B620B63c7AfB14f7,500000 * DECIMALSFACTOR);\n', '        add2Y(0xaf8df2aCAec3d5d92dE42a6c19d7706A4F3E8D8b,50000 * DECIMALSFACTOR);\n', '        add2Y(0x22a6f9693856374BF2922cd837d07F6670E7FA4d,250000 * DECIMALSFACTOR);\n', '        add2Y(0x3F720Ca8FfF598F00a51DE32A8Cb58Ca73f22aDe,50000 * DECIMALSFACTOR);\n', '        add2Y(0xBd0D1954B301E414F0b5D0827A69EC5dD559e50B,50000 * DECIMALSFACTOR);\n', '        add2Y(0x2ad6B011FEcDE830c9cc4dc0d0b77F055D6b5990,50000 * DECIMALSFACTOR);\n', '\n', '        //treasury\n', '        add2Y(0x990a2D172398007fcbd5078D84696BdD8cCDf7b2,20000000 * DECIMALSFACTOR);\n', '\n', '        assert(totalSupplyLocked2Y == TOKENS_LOCKED_2Y_TOTAL);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Add remaining tokens to locked 1y balances\n', '    // ------------------------------------------------------------------------\n', '    function addRemainingTokens() {\n', '        // Only the crowdsale contract can call this function\n', '        require(msg.sender == address(tokenContract));\n', '        // Total tokens to be created\n', '        uint remainingTokens = TOKENS_TOTAL;\n', '        // Minus precommitments and public crowdsale tokens\n', '        remainingTokens = remainingTokens.sub(tokenContract.totalSupply());\n', '        // Minus 1y locked tokens\n', '        remainingTokens = remainingTokens.sub(totalSupplyLocked1Y);\n', '        // Minus 2y locked tokens\n', '        remainingTokens = remainingTokens.sub(totalSupplyLocked2Y);\n', '        // Unsold tranche1 and tranche2 tokens to be locked for 1y \n', '        add1Y(TRANCHE2_ACCOUNT, remainingTokens);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Add to 1y locked balances and totalSupply\n', '    // ------------------------------------------------------------------------\n', '    function add1Y(address account, uint value) private {\n', '        balancesLocked1Y[account] = balancesLocked1Y[account].add(value);\n', '        totalSupplyLocked1Y = totalSupplyLocked1Y.add(value);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Add to 2y locked balances and totalSupply\n', '    // ------------------------------------------------------------------------\n', '    function add2Y(address account, uint value) private {\n', '        balancesLocked2Y[account] = balancesLocked2Y[account].add(value);\n', '        totalSupplyLocked2Y = totalSupplyLocked2Y.add(value);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // 1y locked balances for an account\n', '    // ------------------------------------------------------------------------\n', '    function balanceOfLocked1Y(address account) constant returns (uint balance) {\n', '        return balancesLocked1Y[account];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // 2y locked balances for an account\n', '    // ------------------------------------------------------------------------\n', '    function balanceOfLocked2Y(address account) constant returns (uint balance) {\n', '        return balancesLocked2Y[account];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // 1y and 2y locked balances for an account\n', '    // ------------------------------------------------------------------------\n', '    function balanceOfLocked(address account) constant returns (uint balance) {\n', '        return balancesLocked1Y[account].add(balancesLocked2Y[account]);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // 1y and 2y locked total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupplyLocked() constant returns (uint) {\n', '        return totalSupplyLocked1Y + totalSupplyLocked2Y;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // An account can unlock their 1y locked tokens 1y after token launch date\n', '    // ------------------------------------------------------------------------\n', '    function unlock1Y() {\n', '        require(now >= LOCKED_1Y_DATE);\n', '        uint amount = balancesLocked1Y[msg.sender];\n', '        require(amount > 0);\n', '        balancesLocked1Y[msg.sender] = 0;\n', '        totalSupplyLocked1Y = totalSupplyLocked1Y.sub(amount);\n', '        if (!tokenContract.transfer(msg.sender, amount)) throw;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // An account can unlock their 2y locked tokens 2y after token launch date\n', '    // ------------------------------------------------------------------------\n', '    function unlock2Y() {\n', '        require(now >= LOCKED_2Y_DATE);\n', '        uint amount = balancesLocked2Y[msg.sender];\n', '        require(amount > 0);\n', '        balancesLocked2Y[msg.sender] = 0;\n', '        totalSupplyLocked2Y = totalSupplyLocked2Y.sub(amount);\n', '        if (!tokenContract.transfer(msg.sender, amount)) throw;\n', '    }\n', '}\n', '\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Token is ERC20Interface, Owned {\n', '    using SafeMath for uint;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // symbol(), name() and decimals()\n', '    // ------------------------------------------------------------------------\n', '    string public symbol;\n', '    string public name;\n', '    uint8 public decimals;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Balances for each account\n', '    // ------------------------------------------------------------------------\n', '    mapping(address => uint) balances;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner of account approves the transfer of an amount to another account\n', '    // ------------------------------------------------------------------------\n', '    mapping(address => mapping (address => uint)) allowed;\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    function ERC20Token(\n', '        string _symbol, \n', '        string _name, \n', '        uint8 _decimals, \n', '        uint _totalSupply\n', '    ) Owned() {\n', '        symbol = _symbol;\n', '        name = _name;\n', '        decimals = _decimals;\n', '        totalSupply = _totalSupply;\n', '        balances[owner] = _totalSupply;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the account balance of another account with address _owner\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address _owner) constant returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer the balance from owner&#39;s account to another account\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address _to, uint _amount) returns (bool success) {\n', '        if (balances[msg.sender] >= _amount             // User has balance\n', '            && _amount > 0                              // Non-zero transfer\n', '            && balances[_to] + _amount > balances[_to]  // Overflow check\n', '        ) {\n', '            balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '            balances[_to] = balances[_to].add(_amount);\n', '            Transfer(msg.sender, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Allow _spender to withdraw from your account, multiple times, up to the\n', '    // _value amount. If this function is called again it overwrites the\n', '    // current allowance with _value.\n', '    // ------------------------------------------------------------------------\n', '    function approve(\n', '        address _spender,\n', '        uint _amount\n', '    ) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Spender of tokens transfer an amount of tokens from the token owner&#39;s\n', '    // balance to another account. The owner of the tokens must already\n', '    // have approve(...)-d this transfer\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint _amount\n', '    ) returns (bool success) {\n', '        if (balances[_from] >= _amount                  // From a/c has balance\n', '            && allowed[_from][msg.sender] >= _amount    // Transfer approved\n', '            && _amount > 0                              // Non-zero transfer\n', '            && balances[_to] + _amount > balances[_to]  // Overflow check\n', '        ) {\n', '            balances[_from] = balances[_from].sub(_amount);\n', '            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '            balances[_to] = balances[_to].add(_amount);\n', '            Transfer(_from, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', '    // transferred to the spender&#39;s account\n', '    // ------------------------------------------------------------------------\n', '    function allowance(\n', '        address _owner, \n', '        address _spender\n', '    ) constant returns (uint remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// openANX crowdsale token smart contract\n', '// ----------------------------------------------------------------------------\n', 'contract OpenANXToken is ERC20Token, OpenANXTokenConfig {\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Has the crowdsale been finalised?\n', '    // ------------------------------------------------------------------------\n', '    bool public finalised = false;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Number of tokens per 1,000 ETH\n', '    // This can be adjusted as the ETH/USD rate changes\n', '    //\n', '    // Indicative rate of ETH per token of 0.00290923 at 8 June 2017\n', '    // \n', '    // This is the same as 1 / 0.00290923 = 343.733565238912015 OAX per ETH\n', '    //\n', '    // tokensPerEther  = 343.733565238912015\n', '    // tokensPerKEther = 343,733.565238912015\n', '    // tokensPerKEther = 343,734 rounded to an uint, six significant figures\n', '    // ------------------------------------------------------------------------\n', '    uint public tokensPerKEther = 343734;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Locked Tokens - holds the 1y and 2y locked tokens information\n', '    // ------------------------------------------------------------------------\n', '    LockedTokens public lockedTokens;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Wallet receiving the raised funds \n', '    // ------------------------------------------------------------------------\n', '    address public wallet;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Crowdsale participant&#39;s accounts need to be KYC verified KYC before\n', '    // the participant can move their tokens\n', '    // ------------------------------------------------------------------------\n', '    mapping(address => bool) public kycRequired;\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    function OpenANXToken(address _wallet) \n', '        ERC20Token(SYMBOL, NAME, DECIMALS, 0)\n', '    {\n', '        wallet = _wallet;\n', '        lockedTokens = new LockedTokens(this);\n', '        require(address(lockedTokens) != 0x0);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // openANX can change the crowdsale wallet address\n', '    // Can be set at any time before or during the crowdsale\n', '    // Not relevant after the crowdsale is finalised as no more contributions\n', '    // are accepted\n', '    // ------------------------------------------------------------------------\n', '    function setWallet(address _wallet) onlyOwner {\n', '        wallet = _wallet;\n', '        WalletUpdated(wallet);\n', '    }\n', '    event WalletUpdated(address newWallet);\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // openANX can set number of tokens per 1,000 ETH\n', '    // Can only be set before the start of the crowdsale\n', '    // ------------------------------------------------------------------------\n', '    function setTokensPerKEther(uint _tokensPerKEther) onlyOwner {\n', '        require(now < START_DATE);\n', '        require(_tokensPerKEther > 0);\n', '        tokensPerKEther = _tokensPerKEther;\n', '        TokensPerKEtherUpdated(tokensPerKEther);\n', '    }\n', '    event TokensPerKEtherUpdated(uint tokensPerKEther);\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Accept ethers to buy tokens during the crowdsale\n', '    // ------------------------------------------------------------------------\n', '    function () payable {\n', '        proxyPayment(msg.sender);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Accept ethers from one account for tokens to be created for another\n', '    // account. Can be used by exchanges to purchase tokens on behalf of \n', '    // it&#39;s user\n', '    // ------------------------------------------------------------------------\n', '    function proxyPayment(address participant) payable {\n', '        // No contributions after the crowdsale is finalised\n', '        require(!finalised);\n', '\n', '        // No contributions before the start of the crowdsale\n', '        require(now >= START_DATE);\n', '        // No contributions after the end of the crowdsale\n', '        require(now <= END_DATE);\n', '\n', '        // No contributions below the minimum (can be 0 ETH)\n', '        require(msg.value >= CONTRIBUTIONS_MIN);\n', '        // No contributions above a maximum (if maximum is set to non-0)\n', '        require(CONTRIBUTIONS_MAX == 0 || msg.value < CONTRIBUTIONS_MAX);\n', '\n', '        // Calculate number of tokens for contributed ETH\n', '        // `18` is the ETH decimals\n', '        // `- decimals` is the token decimals\n', '        // `+ 3` for the tokens per 1,000 ETH factor\n', '        uint tokens = msg.value * tokensPerKEther / 10**uint(18 - decimals + 3);\n', '\n', '        // Check if the hard cap will be exceeded\n', '        require(totalSupply + tokens <= TOKENS_HARD_CAP);\n', '\n', '        // Add tokens purchased to account&#39;s balance and total supply\n', '        balances[participant] = balances[participant].add(tokens);\n', '        totalSupply = totalSupply.add(tokens);\n', '\n', '        // Log the tokens purchased \n', '        Transfer(0x0, participant, tokens);\n', '        TokensBought(participant, msg.value, this.balance, tokens,\n', '             totalSupply, tokensPerKEther);\n', '\n', '        // KYC verification required before participant can transfer the tokens\n', '        kycRequired[participant] = true;\n', '\n', '        // Transfer the contributed ethers to the crowdsale wallet\n', '        if (!wallet.send(msg.value)) throw;\n', '    }\n', '    event TokensBought(address indexed buyer, uint ethers, \n', '        uint newEtherBalance, uint tokens, uint newTotalSupply, \n', '        uint tokensPerKEther);\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // openANX to finalise the crowdsale - to adding the locked tokens to \n', '    // this contract and the total supply\n', '    // ------------------------------------------------------------------------\n', '    function finalise() onlyOwner {\n', '        // Can only finalise if raised > soft cap or after the end date\n', '        require(totalSupply >= TOKENS_SOFT_CAP || now > END_DATE);\n', '\n', '        // Can only finalise once\n', '        require(!finalised);\n', '\n', '        // Calculate and add remaining tokens to locked balances\n', '        lockedTokens.addRemainingTokens();\n', '\n', '        // Allocate locked and premined tokens\n', '        balances[address(lockedTokens)] = balances[address(lockedTokens)].\n', '            add(lockedTokens.totalSupplyLocked());\n', '        totalSupply = totalSupply.add(lockedTokens.totalSupplyLocked());\n', '\n', '        // Can only finalise once\n', '        finalised = true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // openANX to add precommitment funding token balance before the crowdsale\n', '    // commences\n', '    // ------------------------------------------------------------------------\n', '    function addPrecommitment(address participant, uint balance) onlyOwner {\n', '        require(now < START_DATE);\n', '        require(balance > 0);\n', '        balances[participant] = balances[participant].add(balance);\n', '        totalSupply = totalSupply.add(balance);\n', '        Transfer(0x0, participant, balance);\n', '    }\n', '    event PrecommitmentAdded(address indexed participant, uint balance);\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer the balance from owner&#39;s account to another account, with KYC\n', '    // verification check for the crowdsale participant&#39;s first transfer\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address _to, uint _amount) returns (bool success) {\n', '        // Cannot transfer before crowdsale ends\n', '        require(finalised);\n', '        // Cannot transfer if KYC verification is required\n', '        require(!kycRequired[msg.sender]);\n', '        // Standard transfer\n', '        return super.transfer(_to, _amount);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Spender of tokens transfer an amount of tokens from the token owner&#39;s\n', '    // balance to another account, with KYC verification check for the\n', '    // crowdsale participant&#39;s first transfer\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address _from, address _to, uint _amount) \n', '        returns (bool success)\n', '    {\n', '        // Cannot transfer before crowdsale ends\n', '        require(finalised);\n', '        // Cannot transfer if KYC verification is required\n', '        require(!kycRequired[_from]);\n', '        // Standard transferFrom\n', '        return super.transferFrom(_from, _to, _amount);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // openANX to KYC verify the participant&#39;s account\n', '    // ------------------------------------------------------------------------\n', '    function kycVerify(address participant) onlyOwner {\n', '        kycRequired[participant] = false;\n', '        KycVerified(participant);\n', '    }\n', '    event KycVerified(address indexed participant);\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Any account can burn _from&#39;s tokens as long as the _from account has \n', '    // approved the _amount to be burnt using\n', '    //   approve(0x0, _amount)\n', '    // ------------------------------------------------------------------------\n', '    function burnFrom(\n', '        address _from,\n', '        uint _amount\n', '    ) returns (bool success) {\n', '        if (balances[_from] >= _amount                  // From a/c has balance\n', '            && allowed[_from][0x0] >= _amount           // Transfer approved\n', '            && _amount > 0                              // Non-zero transfer\n', '            && balances[0x0] + _amount > balances[0x0]  // Overflow check\n', '        ) {\n', '            balances[_from] = balances[_from].sub(_amount);\n', '            allowed[_from][0x0] = allowed[_from][0x0].sub(_amount);\n', '            balances[0x0] = balances[0x0].add(_amount);\n', '            totalSupply = totalSupply.sub(_amount);\n', '            Transfer(_from, 0x0, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // 1y locked balances for an account\n', '    // ------------------------------------------------------------------------\n', '    function balanceOfLocked1Y(address account) constant returns (uint balance) {\n', '        return lockedTokens.balanceOfLocked1Y(account);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // 2y locked balances for an account\n', '    // ------------------------------------------------------------------------\n', '    function balanceOfLocked2Y(address account) constant returns (uint balance) {\n', '        return lockedTokens.balanceOfLocked2Y(account);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // 1y and 2y locked balances for an account\n', '    // ------------------------------------------------------------------------\n', '    function balanceOfLocked(address account) constant returns (uint balance) {\n', '        return lockedTokens.balanceOfLocked(account);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // 1y locked total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupplyLocked1Y() constant returns (uint) {\n', '        if (finalised) {\n', '            return lockedTokens.totalSupplyLocked1Y();\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // 2y locked total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupplyLocked2Y() constant returns (uint) {\n', '        if (finalised) {\n', '            return lockedTokens.totalSupplyLocked2Y();\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // 1y and 2y locked total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupplyLocked() constant returns (uint) {\n', '        if (finalised) {\n', '            return lockedTokens.totalSupplyLocked();\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Unlocked total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupplyUnlocked() constant returns (uint) {\n', '        if (finalised && totalSupply >= lockedTokens.totalSupplyLocked()) {\n', '            return totalSupply.sub(lockedTokens.totalSupplyLocked());\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // openANX can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint amount)\n', '      onlyOwner returns (bool success) \n', '    {\n', '        return ERC20Interface(tokenAddress).transfer(owner, amount);\n', '    }\n', '}']