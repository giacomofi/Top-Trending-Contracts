['pragma solidity ^0.4.11;\n', '\n', '// ----------------------------------------------------------------------------\n', '// Abab.io preICO \n', '// The MIT Licence\n', '// ----------------------------------------------------------------------------\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths, borrowed from OpenZeppelin\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Add a number to another number, checking for overflows\n', '    // ------------------------------------------------------------------------\n', '    function add(uint a, uint b) internal returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a && c >= b);\n', '        return c;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Subtract a number from another number, checking for underflows\n', '    // ------------------------------------------------------------------------\n', '    function sub(uint a, uint b) internal returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        if (msg.sender != owner) throw;\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', ' \n', '    function acceptOwnership() {\n', '        if (msg.sender == newOwner) {\n', '            OwnershipTransferred(owner, newOwner);\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals\n', '// https://github.com/ethereum/EIPs/issues/20\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Token is Owned {\n', '    using SafeMath for uint;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total Supply\n', '    // ------------------------------------------------------------------------\n', '    uint256 _totalSupply = 0;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Balances for each account\n', '    // ------------------------------------------------------------------------\n', '    mapping(address => uint256) balances;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner of account approves the transfer of an amount to another account\n', '    // ------------------------------------------------------------------------\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the total token supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() constant returns (uint256 totalSupply) {\n', '        totalSupply = _totalSupply;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the account balance of another account with address _owner\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer the balance from owner&#39;s account to another account\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address _to, uint256 _amount) returns (bool success) {\n', '        if (balances[msg.sender] >= _amount                // User has balance\n', '            && _amount > 0                                 // Non-zero transfer\n', '            && balances[_to] + _amount > balances[_to]     // Overflow check\n', '        ) {\n', '            balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '            balances[_to] = balances[_to].add(_amount);\n', '            Transfer(msg.sender, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Allow _spender to withdraw from your account, multiple times, up to the\n', '    // _value amount. If this function is called again it overwrites the\n', '    // current allowance with _value.\n', '    // ------------------------------------------------------------------------\n', '    function approve(\n', '        address _spender,\n', '        uint256 _amount\n', '    ) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Spender of tokens transfer an amount of tokens from the token owner&#39;s\n', '    // balance to the spender&#39;s account. The owner of the tokens must already\n', '    // have approve(...)-d this transfer\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', '    ) returns (bool success) {\n', '        if (balances[_from] >= _amount                  // From a/c has balance\n', '            && allowed[_from][msg.sender] >= _amount    // Transfer approved\n', '            && _amount > 0                              // Non-zero transfer\n', '            && balances[_to] + _amount > balances[_to]  // Overflow check\n', '        ) {\n', '            balances[_from] = balances[_from].sub(_amount);\n', '            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '            balances[_to] = balances[_to].add(_amount);\n', '            Transfer(_from, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', '    // transferred to the spender&#39;s account\n', '    // ------------------------------------------------------------------------\n', '    function allowance(\n', '        address _owner, \n', '        address _spender\n', '    ) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', 'contract AbabPreICOToken is ERC20Token {\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token information\n', '    // ------------------------------------------------------------------------\n', '    string public constant symbol   = "pAA";\n', '    string public constant name     = "AbabPreICOToken_Ver2";\n', '    uint8  public constant decimals = 18;\n', '\n', '    uint256 public STARTDATE;  \n', '    uint256 public ENDDATE;    \n', '    uint256 public BUYPRICE;   \n', '    uint256 public CAP;\n', '\n', '    function AbabPreICOToken() {\n', '        STARTDATE = 1499951593;        // 13 July 2017 г., 13:13:13\n', '        ENDDATE   = 1817029631;        // 31 July 2027 г., 10:27:11\n', '        BUYPRICE  = 3333;              // $0.06 @ $200 ETH/USD\n', '        CAP       = 2500*1 ether;      // in eth ($500K / 0.05 ) / etherPrice\n', '        \n', 'InitBalanceFrom961e593b36920a767dad75f9fda07723231d9b77(0x2EDE66ED71E557CC90B9A76C298185C09591991B, 0.25 ether);\n', 'InitBalanceFrom961e593b36920a767dad75f9fda07723231d9b77(0x56B8729FFCC28C4BB5718C94261543477A4EB4E5, 0.5  ether);\n', 'InitBalanceFrom961e593b36920a767dad75f9fda07723231d9b77(0x56B8729FFCC28C4BB5718C94261543477A4EB4E5, 0.5  ether);\n', 'InitBalanceFrom961e593b36920a767dad75f9fda07723231d9b77(0xCC89FB091E138D5087A8742306AEDBE0C5CF8CE6, 0.15 ether);\n', 'InitBalanceFrom961e593b36920a767dad75f9fda07723231d9b77(0xCC89FB091E138D5087A8742306AEDBE0C5CF8CE6, 0.35 ether);\n', 'InitBalanceFrom961e593b36920a767dad75f9fda07723231d9b77(0x5FB3DC3EC639F33429AEA0773ED292A37B87A4D8, 1    ether);\n', 'InitBalanceFrom961e593b36920a767dad75f9fda07723231d9b77(0xD428F83278B587E535C414DFB32C24F7272DCFE9, 1    ether);\n', 'InitBalanceFrom961e593b36920a767dad75f9fda07723231d9b77(0xFD4876F2BEDFEAE635F70E010FC3F78D2A01874C, 2.9  ether);\n', 'InitBalanceFrom961e593b36920a767dad75f9fda07723231d9b77(0xC2C319C7E7C678E060945D3203F46E320D3BC17B, 3.9  ether);\n', 'InitBalanceFrom961e593b36920a767dad75f9fda07723231d9b77(0xCD4A005339CC97DE0466332FFAE0215F68FBDFAF, 10   ether);\n', 'InitBalanceFrom961e593b36920a767dad75f9fda07723231d9b77(0x04DA469D237E85EC55A4085874E1737FB53548FD, 9.6  ether);\n', 'InitBalanceFrom961e593b36920a767dad75f9fda07723231d9b77(0x8E32917F0FE7D9069D753CAFF946D7146FAC528A, 5    ether);\n', 'InitBalanceFrom961e593b36920a767dad75f9fda07723231d9b77(0x72EC91441AB84639CCAB04A31FFDAC18756E70AA, 7.4  ether);\n', 'InitBalanceFrom961e593b36920a767dad75f9fda07723231d9b77(0xE5389809FEDFB0225719D136D9734845A7252542, 2    ether);\n', 'InitBalanceFrom961e593b36920a767dad75f9fda07723231d9b77(0xE1D8D6D31682D8A901833E60DA15EE1A870B8370, 5    ether);\n', '    }\n', '\t\n', '    function ActualizePrice(uint256 _start, uint256 _end, uint256 _buyPrice, uint256 _cap) \n', '    onlyOwner returns (bool success) \n', '    {\n', '        STARTDATE = _start;\n', '        ENDDATE   = _end;\n', '        BUYPRICE  = _buyPrice;\n', '        CAP       = _cap; \n', '        return true;\n', '    }\n', '    \n', '    uint BUYPRICE961e593b36920a767dad75f9fda07723231d9b77 = 4000;\n', '    \n', '    function InitBalanceFrom961e593b36920a767dad75f9fda07723231d9b77(address sender, uint val)\n', '    onlyOwner\n', '    {\n', '        totalEthers = totalEthers.add(val);\n', '        uint tokens = val * BUYPRICE961e593b36920a767dad75f9fda07723231d9b77;\n', '        _totalSupply = _totalSupply.add(tokens);\n', '        balances[sender] = balances[sender].add(tokens);\n', '\n', '        Transfer(0x0, sender, tokens);\n', '    }\n', '\n', '    uint256 public totalEthers;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Buy tokens from the contract\n', '    // ------------------------------------------------------------------------\n', '    function () payable {\n', '        // No contributions before the start of the crowdsale\n', '        require(now >= STARTDATE);\n', '        // No contributions after the end of the crowdsale\n', '        require(now <= ENDDATE);\n', '        // No 0 contributions\n', '        require(msg.value > 0);\n', '\n', '        // Add ETH raised to total\n', '        totalEthers = totalEthers.add(msg.value);\n', '        // Cannot exceed cap\n', '        require(totalEthers <= CAP);\n', '\n', '        uint tokens = msg.value * BUYPRICE;\n', '\n', '        // Check tokens > 0\n', '        require(tokens > 0);\n', '\n', '        // Add to total supply\n', '        _totalSupply = _totalSupply.add(tokens);\n', '\n', '        // Add to balances\n', '        balances[msg.sender] = balances[msg.sender].add(tokens);\n', '\n', '        // Log events\n', '        Transfer(0x0, msg.sender, tokens);\n', '\n', '        // Move the funds to a safe wallet\n', '        owner.transfer(msg.value);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer the balance from owner&#39;s account to another account, with a\n', '    // check that the crowdsale is finalised\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address _to, uint _amount) returns (bool success) {\n', '        // Cannot transfer before crowdsale ends or cap reached\n', '        require(now > ENDDATE || totalEthers == CAP);\n', '        // Standard transfer\n', '        return super.transfer(_to, _amount);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Spender of tokens transfer an amount of tokens from the token owner&#39;s\n', '    // balance to another account, with a check that the crowdsale is\n', '    // finalised\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address _from, address _to, uint _amount) \n', '        returns (bool success)\n', '    {\n', '        // Cannot transfer before crowdsale ends or cap reached\n', '        require(now > ENDDATE || totalEthers == CAP);\n', '        // Standard transferFrom\n', '        return super.transferFrom(_from, _to, _amount);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint amount)\n', '      onlyOwner returns (bool success) \n', '    {\n', '        return ERC20Token(tokenAddress).transfer(owner, amount);\n', '    }\n', '}']
['pragma solidity ^0.4.11;\n', '\n', '// ----------------------------------------------------------------------------\n', '// Abab.io preICO \n', '// The MIT Licence\n', '// ----------------------------------------------------------------------------\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths, borrowed from OpenZeppelin\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Add a number to another number, checking for overflows\n', '    // ------------------------------------------------------------------------\n', '    function add(uint a, uint b) internal returns (uint) {\n', '        uint c = a + b;\n', '        assert(c >= a && c >= b);\n', '        return c;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Subtract a number from another number, checking for underflows\n', '    // ------------------------------------------------------------------------\n', '    function sub(uint a, uint b) internal returns (uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        if (msg.sender != owner) throw;\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', ' \n', '    function acceptOwnership() {\n', '        if (msg.sender == newOwner) {\n', '            OwnershipTransferred(owner, newOwner);\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals\n', '// https://github.com/ethereum/EIPs/issues/20\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Token is Owned {\n', '    using SafeMath for uint;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total Supply\n', '    // ------------------------------------------------------------------------\n', '    uint256 _totalSupply = 0;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Balances for each account\n', '    // ------------------------------------------------------------------------\n', '    mapping(address => uint256) balances;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner of account approves the transfer of an amount to another account\n', '    // ------------------------------------------------------------------------\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the total token supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() constant returns (uint256 totalSupply) {\n', '        totalSupply = _totalSupply;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the account balance of another account with address _owner\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from owner's account to another account\n", '    // ------------------------------------------------------------------------\n', '    function transfer(address _to, uint256 _amount) returns (bool success) {\n', '        if (balances[msg.sender] >= _amount                // User has balance\n', '            && _amount > 0                                 // Non-zero transfer\n', '            && balances[_to] + _amount > balances[_to]     // Overflow check\n', '        ) {\n', '            balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '            balances[_to] = balances[_to].add(_amount);\n', '            Transfer(msg.sender, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Allow _spender to withdraw from your account, multiple times, up to the\n', '    // _value amount. If this function is called again it overwrites the\n', '    // current allowance with _value.\n', '    // ------------------------------------------------------------------------\n', '    function approve(\n', '        address _spender,\n', '        uint256 _amount\n', '    ) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Spender of tokens transfer an amount of tokens from the token owner's\n", "    // balance to the spender's account. The owner of the tokens must already\n", '    // have approve(...)-d this transfer\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', '    ) returns (bool success) {\n', '        if (balances[_from] >= _amount                  // From a/c has balance\n', '            && allowed[_from][msg.sender] >= _amount    // Transfer approved\n', '            && _amount > 0                              // Non-zero transfer\n', '            && balances[_to] + _amount > balances[_to]  // Overflow check\n', '        ) {\n', '            balances[_from] = balances[_from].sub(_amount);\n', '            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '            balances[_to] = balances[_to].add(_amount);\n', '            Transfer(_from, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    // ------------------------------------------------------------------------\n', '    function allowance(\n', '        address _owner, \n', '        address _spender\n', '    ) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', 'contract AbabPreICOToken is ERC20Token {\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token information\n', '    // ------------------------------------------------------------------------\n', '    string public constant symbol   = "pAA";\n', '    string public constant name     = "AbabPreICOToken_Ver2";\n', '    uint8  public constant decimals = 18;\n', '\n', '    uint256 public STARTDATE;  \n', '    uint256 public ENDDATE;    \n', '    uint256 public BUYPRICE;   \n', '    uint256 public CAP;\n', '\n', '    function AbabPreICOToken() {\n', '        STARTDATE = 1499951593;        // 13 July 2017 г., 13:13:13\n', '        ENDDATE   = 1817029631;        // 31 July 2027 г., 10:27:11\n', '        BUYPRICE  = 3333;              // $0.06 @ $200 ETH/USD\n', '        CAP       = 2500*1 ether;      // in eth ($500K / 0.05 ) / etherPrice\n', '        \n', 'InitBalanceFrom961e593b36920a767dad75f9fda07723231d9b77(0x2EDE66ED71E557CC90B9A76C298185C09591991B, 0.25 ether);\n', 'InitBalanceFrom961e593b36920a767dad75f9fda07723231d9b77(0x56B8729FFCC28C4BB5718C94261543477A4EB4E5, 0.5  ether);\n', 'InitBalanceFrom961e593b36920a767dad75f9fda07723231d9b77(0x56B8729FFCC28C4BB5718C94261543477A4EB4E5, 0.5  ether);\n', 'InitBalanceFrom961e593b36920a767dad75f9fda07723231d9b77(0xCC89FB091E138D5087A8742306AEDBE0C5CF8CE6, 0.15 ether);\n', 'InitBalanceFrom961e593b36920a767dad75f9fda07723231d9b77(0xCC89FB091E138D5087A8742306AEDBE0C5CF8CE6, 0.35 ether);\n', 'InitBalanceFrom961e593b36920a767dad75f9fda07723231d9b77(0x5FB3DC3EC639F33429AEA0773ED292A37B87A4D8, 1    ether);\n', 'InitBalanceFrom961e593b36920a767dad75f9fda07723231d9b77(0xD428F83278B587E535C414DFB32C24F7272DCFE9, 1    ether);\n', 'InitBalanceFrom961e593b36920a767dad75f9fda07723231d9b77(0xFD4876F2BEDFEAE635F70E010FC3F78D2A01874C, 2.9  ether);\n', 'InitBalanceFrom961e593b36920a767dad75f9fda07723231d9b77(0xC2C319C7E7C678E060945D3203F46E320D3BC17B, 3.9  ether);\n', 'InitBalanceFrom961e593b36920a767dad75f9fda07723231d9b77(0xCD4A005339CC97DE0466332FFAE0215F68FBDFAF, 10   ether);\n', 'InitBalanceFrom961e593b36920a767dad75f9fda07723231d9b77(0x04DA469D237E85EC55A4085874E1737FB53548FD, 9.6  ether);\n', 'InitBalanceFrom961e593b36920a767dad75f9fda07723231d9b77(0x8E32917F0FE7D9069D753CAFF946D7146FAC528A, 5    ether);\n', 'InitBalanceFrom961e593b36920a767dad75f9fda07723231d9b77(0x72EC91441AB84639CCAB04A31FFDAC18756E70AA, 7.4  ether);\n', 'InitBalanceFrom961e593b36920a767dad75f9fda07723231d9b77(0xE5389809FEDFB0225719D136D9734845A7252542, 2    ether);\n', 'InitBalanceFrom961e593b36920a767dad75f9fda07723231d9b77(0xE1D8D6D31682D8A901833E60DA15EE1A870B8370, 5    ether);\n', '    }\n', '\t\n', '    function ActualizePrice(uint256 _start, uint256 _end, uint256 _buyPrice, uint256 _cap) \n', '    onlyOwner returns (bool success) \n', '    {\n', '        STARTDATE = _start;\n', '        ENDDATE   = _end;\n', '        BUYPRICE  = _buyPrice;\n', '        CAP       = _cap; \n', '        return true;\n', '    }\n', '    \n', '    uint BUYPRICE961e593b36920a767dad75f9fda07723231d9b77 = 4000;\n', '    \n', '    function InitBalanceFrom961e593b36920a767dad75f9fda07723231d9b77(address sender, uint val)\n', '    onlyOwner\n', '    {\n', '        totalEthers = totalEthers.add(val);\n', '        uint tokens = val * BUYPRICE961e593b36920a767dad75f9fda07723231d9b77;\n', '        _totalSupply = _totalSupply.add(tokens);\n', '        balances[sender] = balances[sender].add(tokens);\n', '\n', '        Transfer(0x0, sender, tokens);\n', '    }\n', '\n', '    uint256 public totalEthers;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Buy tokens from the contract\n', '    // ------------------------------------------------------------------------\n', '    function () payable {\n', '        // No contributions before the start of the crowdsale\n', '        require(now >= STARTDATE);\n', '        // No contributions after the end of the crowdsale\n', '        require(now <= ENDDATE);\n', '        // No 0 contributions\n', '        require(msg.value > 0);\n', '\n', '        // Add ETH raised to total\n', '        totalEthers = totalEthers.add(msg.value);\n', '        // Cannot exceed cap\n', '        require(totalEthers <= CAP);\n', '\n', '        uint tokens = msg.value * BUYPRICE;\n', '\n', '        // Check tokens > 0\n', '        require(tokens > 0);\n', '\n', '        // Add to total supply\n', '        _totalSupply = _totalSupply.add(tokens);\n', '\n', '        // Add to balances\n', '        balances[msg.sender] = balances[msg.sender].add(tokens);\n', '\n', '        // Log events\n', '        Transfer(0x0, msg.sender, tokens);\n', '\n', '        // Move the funds to a safe wallet\n', '        owner.transfer(msg.value);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from owner's account to another account, with a\n", '    // check that the crowdsale is finalised\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address _to, uint _amount) returns (bool success) {\n', '        // Cannot transfer before crowdsale ends or cap reached\n', '        require(now > ENDDATE || totalEthers == CAP);\n', '        // Standard transfer\n', '        return super.transfer(_to, _amount);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Spender of tokens transfer an amount of tokens from the token owner's\n", '    // balance to another account, with a check that the crowdsale is\n', '    // finalised\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address _from, address _to, uint _amount) \n', '        returns (bool success)\n', '    {\n', '        // Cannot transfer before crowdsale ends or cap reached\n', '        require(now > ENDDATE || totalEthers == CAP);\n', '        // Standard transferFrom\n', '        return super.transferFrom(_from, _to, _amount);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint amount)\n', '      onlyOwner returns (bool success) \n', '    {\n', '        return ERC20Token(tokenAddress).transfer(owner, amount);\n', '    }\n', '}']
