['pragma solidity ^0.4.11;\n', '\n', '//#importRegion\n', '    /**\n', '     * @title SafeMath\n', '     * @dev Math operations with safety checks that throw on error\n', '     */\n', '    library SafeMath {\n', '      function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '      }\n', '\n', '      function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '      }\n', '\n', '      function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '      }\n', '\n', '      function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '      }\n', '    }\n', '\n', '    /**\n', '     * @title ERC20Basic\n', '     * @dev Simpler version of ERC20 interface\n', '     * @dev see https://github.com/ethereum/EIPs/issues/179\n', '     */\n', '    contract ERC20Basic {\n', '      uint256 public totalSupply;\n', '      function balanceOf(address who) constant returns (uint256);\n', '      function transfer(address to, uint256 value) returns (bool);\n', '      event Transfer(address indexed from, address indexed to, uint256 value);\n', '    }\n', '\n', '    /**\n', '     * @title ERC20 interface\n', '     * @dev see https://github.com/ethereum/EIPs/issues/20\n', '     */\n', '    contract ERC20 is ERC20Basic {\n', '      function allowance(address owner, address spender) constant returns (uint256);\n', '      function transferFrom(address from, address to, uint256 value) returns (bool);\n', '      function approve(address spender, uint256 value) returns (bool);\n', '      event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    }\n', '\n', '    /**\n', '     * @title Basic token\n', '     * @dev Basic version of StandardToken, with no allowances. \n', '     */\n', '    contract BasicToken is ERC20Basic {\n', '      using SafeMath for uint256;\n', '\n', '      mapping(address => uint256) balances;\n', '\n', '      /**\n', '      * @dev transfer token for a specified address\n', '      * @param _to The address to transfer to.\n', '      * @param _value The amount to be transferred.\n', '      */\n', '      function transfer(address _to, uint256 _value) returns (bool) {\n', '        require(_to != address(0));\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '      }\n', '\n', '      /**\n', '      * @dev Gets the balance of the specified address.\n', '      * @param _owner The address to query the the balance of. \n', '      * @return An uint256 representing the amount owned by the passed address.\n', '      */\n', '      function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '      }\n', '\n', '    }\n', '\n', '    /**\n', '     * @title Standard ERC20 token\n', '     *\n', '     * @dev Implementation of the basic standard token.\n', '     * @dev https://github.com/ethereum/EIPs/issues/20\n', '     * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', '     */\n', '    contract StandardToken is ERC20, BasicToken {\n', '\n', '      mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '      /**\n', '       * @dev Transfer tokens from one address to another\n', '       * @param _from address The address which you want to send tokens from\n', '       * @param _to address The address which you want to transfer to\n', '       * @param _value uint256 the amount of tokens to be transferred\n', '       */\n', '      function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '        require(_to != address(0));\n', '\n', '        var _allowance = allowed[_from][msg.sender];\n', '\n', '        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '        // require (_value <= _allowance);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '      }\n', '\n', '      /**\n', '       * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '       * @param _spender The address which will spend the funds.\n', '       * @param _value The amount of tokens to be spent.\n', '       */\n', '      function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '      }\n', '\n', '      /**\n', '       * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '       * @param _owner address The address which owns the funds.\n', '       * @param _spender address The address which will spend the funds.\n', '       * @return A uint256 specifying the amount of tokens still available for the spender.\n', '       */\n', '      function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '      }\n', '      \n', '      /**\n', '       * approve should be called when allowed[_spender] == 0. To increment\n', '       * allowed value is better to use this function to avoid 2 calls (and wait until \n', '       * the first transaction is mined)\n', '       * From MonolithDAO Token.sol\n', '       */\n', '      function increaseApproval (address _spender, uint _addedValue) \n', '        returns (bool success) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '      }\n', '\n', '      function decreaseApproval (address _spender, uint _subtractedValue) \n', '        returns (bool success) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '          allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '          allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '      }\n', '\n', '    }\n', '\n', '    /**\n', '     * @title Ownable\n', '     * @dev The Ownable contract has an owner address, and provides basic authorization control\n', '     * functions, this simplifies the implementation of "user permissions".\n', '     */\n', '    contract Ownable {\n', '      address public owner;\n', '\n', '\n', '      event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '      /**\n', '       * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '       * account.\n', '       */\n', '      function Ownable() {\n', '        owner = msg.sender;\n', '      }\n', '\n', '\n', '      /**\n', '       * @dev Throws if called by any account other than the owner.\n', '       */\n', '      modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '      }\n', '\n', '\n', '      /**\n', '       * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '       * @param newOwner The address to transfer ownership to.\n', '       */\n', '      function transferOwnership(address newOwner) onlyOwner {\n', '        require(newOwner != address(0));      \n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '      }\n', '\n', '    }\n', '//#endImportRegion\n', '\n', 'contract RewardToken is StandardToken, Ownable {\n', '    bool public payments = false;\n', '    mapping(address => uint256) public rewards;\n', '    uint public payment_time = 0;\n', '    uint public payment_amount = 0;\n', '\n', '    event Reward(address indexed to, uint256 value);\n', '\n', '    function payment() payable onlyOwner {\n', '        require(payments);\n', '        require(msg.value >= 0.01 * 1 ether);\n', '\n', '        payment_time = now;\n', '        payment_amount = this.balance;\n', '    }\n', '\n', '    function _reward(address _to) private returns (bool) {\n', '        require(payments);\n', '        require(rewards[_to] < payment_time);\n', '\n', '        if(balances[_to] > 0) {\n', '\t\t\tuint amount = payment_amount * balances[_to] / totalSupply;\n', '\n', '\t\t\trequire(_to.send(amount));\n', '\n', '\t\t\tReward(_to, amount);\n', '\t\t}\n', '\n', '        rewards[_to] = payment_time;\n', '\n', '        return true;\n', '    }\n', '\n', '    function reward() returns (bool) {\n', '        return _reward(msg.sender);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool) {\n', '\t\tif(payments) {\n', '\t\t\tif(rewards[msg.sender] < payment_time) require(_reward(msg.sender));\n', '\t\t\tif(rewards[_to] < payment_time) require(_reward(_to));\n', '\t\t}\n', '\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '\t\tif(payments) {\n', '\t\t\tif(rewards[_from] < payment_time) require(_reward(_from));\n', '\t\t\tif(rewards[_to] < payment_time) require(_reward(_to));\n', '\t\t}\n', '\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '}\n', '\n', 'contract LoriToken is RewardToken {\n', '    using SafeMath for uint;\n', '\n', '    string public name = "LORI Invest Token";\n', '    string public symbol = "LORI";\n', '    uint256 public decimals = 18;\n', '\n', '    bool public mintingFinished = false;\n', '    bool public commandGetBonus = false;\n', '    uint public commandGetBonusTime = 1543932000;       // 04.12.2018 14:00 +0\n', '\n', '    event Mint(address indexed holder, uint256 tokenAmount);\n', '    event MintFinished();\n', '    event MintCommandBonus();\n', '\n', '    function _mint(address _to, uint256 _amount) onlyOwner private returns(bool) {\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '\n', '        Mint(_to, _amount);\n', '        Transfer(address(0), _to, _amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    function mint(address _to, uint256 _amount) onlyOwner returns(bool) {\n', '        require(!mintingFinished);\n', '        return _mint(_to, _amount);\n', '    }\n', '\n', '    function finishMinting() onlyOwner returns(bool) {\n', '        mintingFinished = true;\n', '        payments = true;\n', '\n', '        MintFinished();\n', '\n', '        return true;\n', '    }\n', '\n', '    function commandMintBonus(address _to) onlyOwner {\n', '        require(mintingFinished && !commandGetBonus);\n', '        require(now > commandGetBonusTime);\n', '\n', '        commandGetBonus = true;\n', '\n', '        require(_mint(_to, totalSupply * 5 / 100));\n', '\n', '        MintCommandBonus();\n', '    }\n', '}\n', '\n', 'contract Crowdsale is Ownable {\n', '    using SafeMath for uint;\n', '\n', '    LoriToken public token;\n', '    address public beneficiary = 0xdA6273CBF8DFB22f4A55A6F87bb1A91C57e578db;\n', '\n', '    uint public collected;\n', '\n', '    uint public preICOstartTime = 1507644000;     // 10.10.2017 14:00 +0\n', '    uint public preICOendTime = 1508853600;     // 24.10.2017 14:00 +0\n', '    uint public ICOstartTime = 1510322400;    // 10.11.2017 14:00 +0\n', '    uint public ICOendTime = 1512396000;       // 04.12.2017 14:00 +0\n', '    bool public crowdsaleFinished = false;\n', '\n', '    event NewContribution(address indexed holder, uint256 tokenAmount, uint256 etherAmount);\n', '\n', '    function Crowdsale() {\n', '        token = new LoriToken();\n', '    }\n', '\n', '    function() payable {\n', '        doPurchase();\n', '    }\n', '\n', '    function doPurchase() payable {\n', '        assert((now > preICOstartTime && now < preICOendTime) || (now > ICOstartTime && now < ICOendTime));\n', '        require(msg.value >= 0.01 * 1 ether);\n', '        require(!crowdsaleFinished);\n', '\n', '        uint tokens = msg.value * (now >= ICOstartTime ? 100 : 120);\n', '\n', '        require(token.mint(msg.sender, tokens));\n', '        require(beneficiary.send(msg.value));\n', '\n', '        collected = collected.add(msg.value);\n', '\n', '        NewContribution(msg.sender, tokens, msg.value);\n', '    }\n', '\n', '    function withdraw() onlyOwner {\n', '        require(token.finishMinting());\n', '        require(beneficiary.send(this.balance));\n', '        token.transferOwnership(beneficiary);\n', '\n', '        crowdsaleFinished = true;\n', '    }\n', '}']
['pragma solidity ^0.4.11;\n', '\n', '//#importRegion\n', '    /**\n', '     * @title SafeMath\n', '     * @dev Math operations with safety checks that throw on error\n', '     */\n', '    library SafeMath {\n', '      function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '      }\n', '\n', '      function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '      }\n', '\n', '      function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '      }\n', '\n', '      function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '      }\n', '    }\n', '\n', '    /**\n', '     * @title ERC20Basic\n', '     * @dev Simpler version of ERC20 interface\n', '     * @dev see https://github.com/ethereum/EIPs/issues/179\n', '     */\n', '    contract ERC20Basic {\n', '      uint256 public totalSupply;\n', '      function balanceOf(address who) constant returns (uint256);\n', '      function transfer(address to, uint256 value) returns (bool);\n', '      event Transfer(address indexed from, address indexed to, uint256 value);\n', '    }\n', '\n', '    /**\n', '     * @title ERC20 interface\n', '     * @dev see https://github.com/ethereum/EIPs/issues/20\n', '     */\n', '    contract ERC20 is ERC20Basic {\n', '      function allowance(address owner, address spender) constant returns (uint256);\n', '      function transferFrom(address from, address to, uint256 value) returns (bool);\n', '      function approve(address spender, uint256 value) returns (bool);\n', '      event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    }\n', '\n', '    /**\n', '     * @title Basic token\n', '     * @dev Basic version of StandardToken, with no allowances. \n', '     */\n', '    contract BasicToken is ERC20Basic {\n', '      using SafeMath for uint256;\n', '\n', '      mapping(address => uint256) balances;\n', '\n', '      /**\n', '      * @dev transfer token for a specified address\n', '      * @param _to The address to transfer to.\n', '      * @param _value The amount to be transferred.\n', '      */\n', '      function transfer(address _to, uint256 _value) returns (bool) {\n', '        require(_to != address(0));\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '      }\n', '\n', '      /**\n', '      * @dev Gets the balance of the specified address.\n', '      * @param _owner The address to query the the balance of. \n', '      * @return An uint256 representing the amount owned by the passed address.\n', '      */\n', '      function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '      }\n', '\n', '    }\n', '\n', '    /**\n', '     * @title Standard ERC20 token\n', '     *\n', '     * @dev Implementation of the basic standard token.\n', '     * @dev https://github.com/ethereum/EIPs/issues/20\n', '     * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', '     */\n', '    contract StandardToken is ERC20, BasicToken {\n', '\n', '      mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '      /**\n', '       * @dev Transfer tokens from one address to another\n', '       * @param _from address The address which you want to send tokens from\n', '       * @param _to address The address which you want to transfer to\n', '       * @param _value uint256 the amount of tokens to be transferred\n', '       */\n', '      function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '        require(_to != address(0));\n', '\n', '        var _allowance = allowed[_from][msg.sender];\n', '\n', '        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '        // require (_value <= _allowance);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '      }\n', '\n', '      /**\n', '       * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '       * @param _spender The address which will spend the funds.\n', '       * @param _value The amount of tokens to be spent.\n', '       */\n', '      function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '      }\n', '\n', '      /**\n', '       * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '       * @param _owner address The address which owns the funds.\n', '       * @param _spender address The address which will spend the funds.\n', '       * @return A uint256 specifying the amount of tokens still available for the spender.\n', '       */\n', '      function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '      }\n', '      \n', '      /**\n', '       * approve should be called when allowed[_spender] == 0. To increment\n', '       * allowed value is better to use this function to avoid 2 calls (and wait until \n', '       * the first transaction is mined)\n', '       * From MonolithDAO Token.sol\n', '       */\n', '      function increaseApproval (address _spender, uint _addedValue) \n', '        returns (bool success) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '      }\n', '\n', '      function decreaseApproval (address _spender, uint _subtractedValue) \n', '        returns (bool success) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '          allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '          allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '      }\n', '\n', '    }\n', '\n', '    /**\n', '     * @title Ownable\n', '     * @dev The Ownable contract has an owner address, and provides basic authorization control\n', '     * functions, this simplifies the implementation of "user permissions".\n', '     */\n', '    contract Ownable {\n', '      address public owner;\n', '\n', '\n', '      event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '      /**\n', '       * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '       * account.\n', '       */\n', '      function Ownable() {\n', '        owner = msg.sender;\n', '      }\n', '\n', '\n', '      /**\n', '       * @dev Throws if called by any account other than the owner.\n', '       */\n', '      modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '      }\n', '\n', '\n', '      /**\n', '       * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '       * @param newOwner The address to transfer ownership to.\n', '       */\n', '      function transferOwnership(address newOwner) onlyOwner {\n', '        require(newOwner != address(0));      \n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '      }\n', '\n', '    }\n', '//#endImportRegion\n', '\n', 'contract RewardToken is StandardToken, Ownable {\n', '    bool public payments = false;\n', '    mapping(address => uint256) public rewards;\n', '    uint public payment_time = 0;\n', '    uint public payment_amount = 0;\n', '\n', '    event Reward(address indexed to, uint256 value);\n', '\n', '    function payment() payable onlyOwner {\n', '        require(payments);\n', '        require(msg.value >= 0.01 * 1 ether);\n', '\n', '        payment_time = now;\n', '        payment_amount = this.balance;\n', '    }\n', '\n', '    function _reward(address _to) private returns (bool) {\n', '        require(payments);\n', '        require(rewards[_to] < payment_time);\n', '\n', '        if(balances[_to] > 0) {\n', '\t\t\tuint amount = payment_amount * balances[_to] / totalSupply;\n', '\n', '\t\t\trequire(_to.send(amount));\n', '\n', '\t\t\tReward(_to, amount);\n', '\t\t}\n', '\n', '        rewards[_to] = payment_time;\n', '\n', '        return true;\n', '    }\n', '\n', '    function reward() returns (bool) {\n', '        return _reward(msg.sender);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool) {\n', '\t\tif(payments) {\n', '\t\t\tif(rewards[msg.sender] < payment_time) require(_reward(msg.sender));\n', '\t\t\tif(rewards[_to] < payment_time) require(_reward(_to));\n', '\t\t}\n', '\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '\t\tif(payments) {\n', '\t\t\tif(rewards[_from] < payment_time) require(_reward(_from));\n', '\t\t\tif(rewards[_to] < payment_time) require(_reward(_to));\n', '\t\t}\n', '\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '}\n', '\n', 'contract LoriToken is RewardToken {\n', '    using SafeMath for uint;\n', '\n', '    string public name = "LORI Invest Token";\n', '    string public symbol = "LORI";\n', '    uint256 public decimals = 18;\n', '\n', '    bool public mintingFinished = false;\n', '    bool public commandGetBonus = false;\n', '    uint public commandGetBonusTime = 1543932000;       // 04.12.2018 14:00 +0\n', '\n', '    event Mint(address indexed holder, uint256 tokenAmount);\n', '    event MintFinished();\n', '    event MintCommandBonus();\n', '\n', '    function _mint(address _to, uint256 _amount) onlyOwner private returns(bool) {\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '\n', '        Mint(_to, _amount);\n', '        Transfer(address(0), _to, _amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    function mint(address _to, uint256 _amount) onlyOwner returns(bool) {\n', '        require(!mintingFinished);\n', '        return _mint(_to, _amount);\n', '    }\n', '\n', '    function finishMinting() onlyOwner returns(bool) {\n', '        mintingFinished = true;\n', '        payments = true;\n', '\n', '        MintFinished();\n', '\n', '        return true;\n', '    }\n', '\n', '    function commandMintBonus(address _to) onlyOwner {\n', '        require(mintingFinished && !commandGetBonus);\n', '        require(now > commandGetBonusTime);\n', '\n', '        commandGetBonus = true;\n', '\n', '        require(_mint(_to, totalSupply * 5 / 100));\n', '\n', '        MintCommandBonus();\n', '    }\n', '}\n', '\n', 'contract Crowdsale is Ownable {\n', '    using SafeMath for uint;\n', '\n', '    LoriToken public token;\n', '    address public beneficiary = 0xdA6273CBF8DFB22f4A55A6F87bb1A91C57e578db;\n', '\n', '    uint public collected;\n', '\n', '    uint public preICOstartTime = 1507644000;     // 10.10.2017 14:00 +0\n', '    uint public preICOendTime = 1508853600;     // 24.10.2017 14:00 +0\n', '    uint public ICOstartTime = 1510322400;    // 10.11.2017 14:00 +0\n', '    uint public ICOendTime = 1512396000;       // 04.12.2017 14:00 +0\n', '    bool public crowdsaleFinished = false;\n', '\n', '    event NewContribution(address indexed holder, uint256 tokenAmount, uint256 etherAmount);\n', '\n', '    function Crowdsale() {\n', '        token = new LoriToken();\n', '    }\n', '\n', '    function() payable {\n', '        doPurchase();\n', '    }\n', '\n', '    function doPurchase() payable {\n', '        assert((now > preICOstartTime && now < preICOendTime) || (now > ICOstartTime && now < ICOendTime));\n', '        require(msg.value >= 0.01 * 1 ether);\n', '        require(!crowdsaleFinished);\n', '\n', '        uint tokens = msg.value * (now >= ICOstartTime ? 100 : 120);\n', '\n', '        require(token.mint(msg.sender, tokens));\n', '        require(beneficiary.send(msg.value));\n', '\n', '        collected = collected.add(msg.value);\n', '\n', '        NewContribution(msg.sender, tokens, msg.value);\n', '    }\n', '\n', '    function withdraw() onlyOwner {\n', '        require(token.finishMinting());\n', '        require(beneficiary.send(this.balance));\n', '        token.transferOwnership(beneficiary);\n', '\n', '        crowdsaleFinished = true;\n', '    }\n', '}']
