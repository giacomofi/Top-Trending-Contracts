['pragma solidity ^0.4.13;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    \n', '  address public owner;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', ' \n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    \n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', ' \n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', ' \n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', ' \n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  \n', '}\n', ' \n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '    \n', '  event Pause();\n', '  \n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS paused\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS NOT paused\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '  \n', '}\n', '\n', '\n', '/**\n', ' * @title PreSale\n', ' * @dev The PreSale contract stores balances investors of pre sale stage.\n', ' */\n', 'contract PreSale is Pausable {\n', '    \n', '  event Invest(address, uint);\n', '\n', '  using SafeMath for uint;\n', '    \n', '  address public wallet;\n', '\n', '  uint public start;\n', '  \n', '  uint public total;\n', '  \n', '  uint16 public period;\n', '\n', '  mapping (address => uint) balances;\n', '  \n', '  mapping (address => bool) invested;\n', '  \n', '  address[] public investors;\n', '  \n', '  modifier saleIsOn() {\n', '    require(now > start && now < start + period * 1 days);\n', '    _;\n', '  }\n', '  \n', '  function totalInvestors() constant returns (uint) {\n', '    return investors.length;\n', '  }\n', '  \n', '  function balanceOf(address investor) constant returns (uint) {\n', '    return balances[investor];\n', '  }\n', '  \n', '  function setStart(uint newStart) onlyOwner {\n', '    start = newStart;\n', '  }\n', '  \n', '  function setPeriod(uint16 newPeriod) onlyOwner {\n', '    period = newPeriod;\n', '  }\n', '  \n', '  function setWallet(address newWallet) onlyOwner {\n', '    require(newWallet != address(0));\n', '    wallet = newWallet;\n', '  }\n', '\n', '  function invest() saleIsOn whenNotPaused payable {\n', '    wallet.transfer(msg.value);\n', '    balances[msg.sender] = balances[msg.sender].add(msg.value);\n', '    bool isInvested = invested[msg.sender];\n', '    if(!isInvested) {\n', '        investors.push(msg.sender);    \n', '        invested[msg.sender] = true;\n', '    }\n', '    total = total.add(msg.value);\n', '    Invest(msg.sender, msg.value);\n', '  }\n', '\n', '  function() external payable {\n', '    invest();\n', '  }\n', '\n', '}']