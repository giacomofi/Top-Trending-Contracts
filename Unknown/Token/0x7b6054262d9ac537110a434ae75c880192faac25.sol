['pragma solidity ^0.4.16;\n', '\n', 'contract Owned {\n', '\n', '    \n', '    address public owner;\n', '    address public ico;\n', '\n', '    function Owned() {\n', '        owner = msg.sender;\n', '        ico = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        \n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyICO() {\n', '        \n', '        require(msg.sender == ico);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) onlyOwner {\n', '        owner = _newOwner;\n', '    }\n', '    function transferIcoship(address _newIco) onlyOwner {\n', '        ico = _newIco;\n', '    }\n', '}\n', '\n', '\n', 'contract Token {\n', '    \n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', 'contract StandardToken is Token {\n', '\n', '    bool public locked;\n', '\n', '    mapping (address => uint256) balances;\n', '\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    \n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '\n', '        require(!locked);\n', '        \n', '        require(balances[msg.sender] >= _value);\n', '        \n', '        require(balances[_to] + _value >= balances[_to]);\n', '       \n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '\n', '\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '\n', '        require(!locked);\n', '        \n', '        require(balances[_from] >= _value);\n', '             \n', '        require(balances[_to] + _value >= balances[_to]);    \n', '       \n', '        require(_value <= allowed[_from][msg.sender]);    \n', '\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '\n', '        allowed[_from][msg.sender] -= _value;\n', '\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '  \n', '        require(!locked);\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract StarToken is Owned, StandardToken {\n', '\n', '    string public standard = "Token 0.1";\n', '\n', '    string public name = "StarLight";        \n', '    \n', '    string public symbol = "STAR";\n', '\n', '    uint8 public decimals = 8;\n', '   \n', '    function StarToken() {  \n', '        balances[msg.sender] = 0;\n', '        totalSupply = 0;\n', '        locked = false;\n', '    }\n', '   \n', '    function unlock() onlyOwner returns (bool success)  {\n', '        locked = false;\n', '        return true;\n', '    }\n', '    \n', '    function lock() onlyOwner returns (bool success)  {\n', '        locked = true;\n', '        return true;\n', '    }\n', '    \n', '    \n', '\n', '    function issue(address _recipient, uint256 _value) onlyICO returns (bool success) {\n', '\n', '        require(_value >= 0);\n', '\n', '        balances[_recipient] += _value;\n', '        totalSupply += _value;\n', '\n', '        Transfer(0, owner, _value);\n', '        Transfer(owner, _recipient, _value);\n', '\n', '        return true;\n', '    }\n', '   \n', '    function () {\n', '        throw;\n', '    }\n', '}']
['pragma solidity ^0.4.16;\n', '\n', 'contract Owned {\n', '\n', '    \n', '    address public owner;\n', '    address public ico;\n', '\n', '    function Owned() {\n', '        owner = msg.sender;\n', '        ico = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        \n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyICO() {\n', '        \n', '        require(msg.sender == ico);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) onlyOwner {\n', '        owner = _newOwner;\n', '    }\n', '    function transferIcoship(address _newIco) onlyOwner {\n', '        ico = _newIco;\n', '    }\n', '}\n', '\n', '\n', 'contract Token {\n', '    \n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', 'contract StandardToken is Token {\n', '\n', '    bool public locked;\n', '\n', '    mapping (address => uint256) balances;\n', '\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    \n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '\n', '        require(!locked);\n', '        \n', '        require(balances[msg.sender] >= _value);\n', '        \n', '        require(balances[_to] + _value >= balances[_to]);\n', '       \n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '\n', '\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '\n', '        require(!locked);\n', '        \n', '        require(balances[_from] >= _value);\n', '             \n', '        require(balances[_to] + _value >= balances[_to]);    \n', '       \n', '        require(_value <= allowed[_from][msg.sender]);    \n', '\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '\n', '        allowed[_from][msg.sender] -= _value;\n', '\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '  \n', '        require(!locked);\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract StarToken is Owned, StandardToken {\n', '\n', '    string public standard = "Token 0.1";\n', '\n', '    string public name = "StarLight";        \n', '    \n', '    string public symbol = "STAR";\n', '\n', '    uint8 public decimals = 8;\n', '   \n', '    function StarToken() {  \n', '        balances[msg.sender] = 0;\n', '        totalSupply = 0;\n', '        locked = false;\n', '    }\n', '   \n', '    function unlock() onlyOwner returns (bool success)  {\n', '        locked = false;\n', '        return true;\n', '    }\n', '    \n', '    function lock() onlyOwner returns (bool success)  {\n', '        locked = true;\n', '        return true;\n', '    }\n', '    \n', '    \n', '\n', '    function issue(address _recipient, uint256 _value) onlyICO returns (bool success) {\n', '\n', '        require(_value >= 0);\n', '\n', '        balances[_recipient] += _value;\n', '        totalSupply += _value;\n', '\n', '        Transfer(0, owner, _value);\n', '        Transfer(owner, _recipient, _value);\n', '\n', '        return true;\n', '    }\n', '   \n', '    function () {\n', '        throw;\n', '    }\n', '}']
