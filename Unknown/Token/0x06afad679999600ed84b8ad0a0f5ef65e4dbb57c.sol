['/**\n', ' *  CanYaCoin Presale contract\n', ' */\n', '\n', 'pragma solidity 0.4.15;\n', '\n', 'library SafeMath {\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20TokenInterface {\n', '    /// @return The total amount of tokens\n', '    function totalSupply() constant returns (uint256 supply);\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant public returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract CanYaCoin is ERC20TokenInterface {\n', '\n', '    string public constant name = "CanYaCoin";\n', '    string public constant symbol = "CAN";\n', '    uint256 public constant decimals = 6;\n', '    uint256 public constant totalTokens = 100000000 * (10 ** decimals);\n', '\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '    function CanYaCoin() {\n', '        balances[msg.sender] = totalTokens;\n', '    }\n', '\n', '    function totalSupply() constant returns (uint256) {\n', '        return totalTokens;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        if (balances[msg.sender] >= _value) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value) {\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant public returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', '/* Included for compilation to match bytecode for etherscan. Unused. */\n', 'contract Presale {\n', '    using SafeMath for uint256;\n', '\n', '    CanYaCoin public CanYaCoinToken;\n', '    bool public ended = false;\n', '    uint256 internal refundAmount = 0;\n', '    uint256 public constant MAX_CONTRIBUTION = 3780 ether;\n', '    uint256 public constant MIN_CONTRIBUTION = 1 ether;\n', '    address public owner;\n', '    address public multisig;\n', '    uint256 public constant pricePerToken = 400000000; // (wei per CAN)\n', '    uint256 public tokensAvailable = 9450000 * (10**6); // Whitepaper 9.45mil * 10^6\n', '\n', '    event LogRefund(uint256 _amount);\n', '    event LogEnded(bool _soldOut);\n', '    event LogContribution(uint256 _amount, uint256 _tokensPurchased);\n', '\n', '    modifier notEnded() {\n', '        require(!ended);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /// @dev Sets up the amount of tokens available as per the whitepaper\n', '    /// @param _token Address of the CanYaCoin contract\n', '    function Presale(address _token, address _multisig) {\n', '        require (_token != address(0) && _multisig != address(0));\n', '        owner = msg.sender;\n', '        CanYaCoinToken = CanYaCoin(_token);\n', '        multisig = _multisig;\n', '    }\n', '\n', '    /// @dev Fallback function, this allows users to purchase tokens by simply sending ETH to the\n', '    /// contract; they will however need to specify a higher amount of gas than the default (21000)\n', '    function () notEnded payable public {\n', '        require(msg.value >= MIN_CONTRIBUTION && msg.value <= MAX_CONTRIBUTION);\n', '        uint256 tokensPurchased = msg.value.div(pricePerToken);\n', '        if (tokensPurchased > tokensAvailable) {\n', '            ended = true;\n', '            LogEnded(true);\n', '            refundAmount = (tokensPurchased - tokensAvailable) * pricePerToken;\n', '            tokensPurchased = tokensAvailable;\n', '        }\n', '        tokensAvailable -= tokensPurchased;\n', '        \n', '        //Refund the difference\n', '        if (ended && refundAmount > 0) {\n', '            uint256 toRefund = refundAmount;\n', '            refundAmount = 0;\n', '            // reentry should not be possible\n', '            msg.sender.transfer(toRefund);\n', '            LogRefund(toRefund);\n', '        }\n', '        LogContribution(msg.value, tokensPurchased);\n', '        CanYaCoinToken.transfer(msg.sender, tokensPurchased);\n', '        multisig.transfer(msg.value - toRefund);\n', '    }\n', '\n', '    /// @dev Ends the crowdsale and withdraws any remaining tokens\n', '    /// @param _to Address to withdraw the tokens to\n', '    function withdrawTokens(address _to) onlyOwner public {\n', '        require(_to != address(0));\n', '        if (!ended) {\n', '            LogEnded(false);\n', '        }\n', '        ended = true;\n', '        CanYaCoinToken.transfer(_to, tokensAvailable);\n', '    }\n', '}']