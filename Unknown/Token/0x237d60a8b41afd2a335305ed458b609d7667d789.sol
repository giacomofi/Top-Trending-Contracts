['pragma solidity ^0.4.2;\n', '/**\n', ' * @title Contract for object that have an owner\n', ' */\n', 'contract Owned {\n', '    /**\n', '     * Contract owner address\n', '     */\n', '    address public owner;\n', '\n', '    /**\n', '     * @dev Store owner on creation\n', '     */\n', '    function Owned() { owner = msg.sender; }\n', '\n', '    /**\n', '     * @dev Delegate contract to another person\n', '     * @param _owner is another person address\n', '     */\n', '    function delegate(address _owner) onlyOwner\n', '    { owner = _owner; }\n', '\n', '    /**\n', '     * @dev Owner check modifier\n', '     */\n', '    modifier onlyOwner { if (msg.sender != owner) throw; _; }\n', '}\n', '/**\n', ' * @title Contract for objects that can be morder\n', ' */\n', 'contract Mortal is Owned {\n', '    /**\n', '     * @dev Destroy contract and scrub a data\n', '     * @notice Only owner can kill me\n', '     */\n', '    function kill() onlyOwner\n', '    { suicide(owner); }\n', '}\n', '\n', '// Standard token interface (ERC 20)\n', '// https://github.com/ethereum/EIPs/issues/20\n', 'contract ERC20 \n', '{\n', '// Functions:\n', '    /// @return total amount of tokens\n', '    uint256 public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool);\n', '\n', '    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256);\n', '\n', '// Events:\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '/**\n', ' * @title Token compatible contract represents any asset in digital economy\n', ' * @dev Accounting based on sha3 hashed identifiers\n', ' */\n', 'contract TokenHash is Mortal, ERC20 {\n', '    /* Short description of token */\n', '    string public name;\n', '    string public symbol;\n', '\n', '    /* Fixed point position */\n', '    uint8 public decimals;\n', '\n', '    /* Token approvement system */\n', '    mapping(bytes32 => uint256) balances;\n', '    mapping(bytes32 => mapping(bytes32 => uint256)) allowances;\n', ' \n', '    /**\n', '     * @dev Get balance of plain address\n', '     * @param _owner is a target address\n', '     * @return amount of tokens on balance\n', '     */\n', '    function balanceOf(address _owner) constant returns (uint256)\n', '    { return balances[sha3(_owner)]; }\n', '\n', '    /**\n', '     * @dev Get balance of ident\n', '     * @param _owner is a target ident\n', '     * @return amount of tokens on balance\n', '     */\n', '    function balanceOf(bytes32 _owner) constant returns (uint256)\n', '    { return balances[_owner]; }\n', '\n', '    /**\n', '     * @dev Take allowed tokens\n', '     * @param _owner The address of the account owning tokens\n', '     * @param _spender The address of the account able to transfer the tokens\n', '     * @return Amount of remaining tokens allowed to spent\n', '     */\n', '    function allowance(address _owner, address _spender) constant returns (uint256)\n', '    { return allowances[sha3(_owner)][sha3(_spender)]; }\n', '\n', '    /**\n', '     * @dev Take allowed tokens\n', '     * @param _owner The ident of the account owning tokens\n', '     * @param _spender The ident of the account able to transfer the tokens\n', '     * @return Amount of remaining tokens allowed to spent\n', '     */\n', '    function allowance(bytes32 _owner, bytes32 _spender) constant returns (uint256)\n', '    { return allowances[_owner][_spender]; }\n', '\n', '    /* Token constructor */\n', '    function TokenHash(string _name, string _symbol, uint8 _decimals, uint256 _count) {\n', '        name        = _name;\n', '        symbol      = _symbol;\n', '        decimals    = _decimals;\n', '        totalSupply = _count;\n', '        balances[sha3(msg.sender)] = _count;\n', '    }\n', ' \n', '    /**\n', '     * @dev Transfer self tokens to given address\n', '     * @param _to destination address\n', '     * @param _value amount of token values to send\n', '     * @notice `_value` tokens will be sended to `_to`\n', '     * @return `true` when transfer done\n', '     */\n', '    function transfer(address _to, uint256 _value) returns (bool) {\n', '        var sender = sha3(msg.sender);\n', '\n', '        if (balances[sender] >= _value) {\n', '            balances[sender]    -= _value;\n', '            balances[sha3(_to)] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer self tokens to given address\n', '     * @param _to destination ident\n', '     * @param _value amount of token values to send\n', '     * @notice `_value` tokens will be sended to `_to`\n', '     * @return `true` when transfer done\n', '     */\n', '    function transfer(bytes32 _to, uint256 _value) returns (bool) {\n', '        var sender = sha3(msg.sender);\n', '\n', '        if (balances[sender] >= _value) {\n', '            balances[sender] -= _value;\n', '            balances[_to]    += _value;\n', '            TransferHash(sender, _to, _value);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Transfer with approvement mechainsm\n', '     * @param _from source address, `_value` tokens shold be approved for `sender`\n', '     * @param _to destination address\n', '     * @param _value amount of token values to send \n', '     * @notice from `_from` will be sended `_value` tokens to `_to`\n', '     * @return `true` when transfer is done\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '        var to    = sha3(_to);\n', '        var from  = sha3(_from);\n', '        var sender= sha3(msg.sender);\n', '        var avail = allowances[from][sender]\n', '                  > balances[from] ? balances[from]\n', '                                   : allowances[from][sender];\n', '        if (avail >= _value) {\n', '            allowances[from][sender] -= _value;\n', '            balances[from] -= _value;\n', '            balances[to]   += _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer with approvement mechainsm\n', '     * @param _from source ident, `_value` tokens shold be approved for `sender`\n', '     * @param _to destination ident\n', '     * @param _value amount of token values to send \n', '     * @notice from `_from` will be sended `_value` tokens to `_to`\n', '     * @return `true` when transfer is done\n', '     */\n', '    function transferFrom(bytes32 _from, bytes32 _to, uint256 _value) returns (bool) {\n', '        var sender= sha3(msg.sender);\n', '        var avail = allowances[_from][sender]\n', '                  > balances[_from] ? balances[_from]\n', '                                    : allowances[_from][sender];\n', '        if (avail >= _value) {\n', '            allowances[_from][sender] -= _value;\n', '            balances[_from] -= _value;\n', '            balances[_to]   += _value;\n', '            TransferHash(_from, _to, _value);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @dev Give to target address ability for self token manipulation without sending\n', '     * @param _spender target address (future requester)\n', '     * @param _value amount of token values for approving\n', '     */\n', '    function approve(address _spender, uint256 _value) returns (bool) {\n', '        allowances[sha3(msg.sender)][sha3(_spender)] += _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', ' \n', '    /**\n', '     * @dev Give to target ident ability for self token manipulation without sending\n', '     * @param _spender target ident (future requester)\n', '     * @param _value amount of token values for approving\n', '     */\n', '    function approve(bytes32 _spender, uint256 _value) returns (bool) {\n', '        allowances[sha3(msg.sender)][_spender] += _value;\n', '        ApprovalHash(sha3(msg.sender), _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Reset count of tokens approved for given address\n', '     * @param _spender target address\n', '     */\n', '    function unapprove(address _spender)\n', '    { allowances[sha3(msg.sender)][sha3(_spender)] = 0; }\n', ' \n', '    /**\n', '     * @dev Reset count of tokens approved for given ident\n', '     * @param _spender target ident\n', '     */\n', '    function unapprove(bytes32 _spender)\n', '    { allowances[sha3(msg.sender)][_spender] = 0; }\n', ' \n', '    /* Hash driven events */\n', '    event TransferHash(bytes32 indexed _from,  bytes32 indexed _to,      uint256 _value);\n', '    event ApprovalHash(bytes32 indexed _owner, bytes32 indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '//sol Registrar\n', '// Simple global registrar.\n', '// @authors:\n', '//   Gav Wood <g@ethdev.com>\n', '\n', 'contract Registrar {\n', '\tevent Changed(string indexed name);\n', '\n', '\tfunction owner(string _name) constant returns (address o_owner);\n', '\tfunction addr(string _name) constant returns (address o_address);\n', '\tfunction subRegistrar(string _name) constant returns (address o_subRegistrar);\n', '\tfunction content(string _name) constant returns (bytes32 o_content);\n', '}\n', '\n', '//sol OwnedRegistrar\n', '// Global registrar with single authoritative owner.\n', '// @authors:\n', '//   Gav Wood <g@ethdev.com>\n', '\n', 'contract AiraRegistrarService is Registrar, Mortal {\n', '\tstruct Record {\n', '\t\taddress addr;\n', '\t\taddress subRegistrar;\n', '\t\tbytes32 content;\n', '\t}\n', '\t\n', '    function owner(string _name) constant returns (address o_owner)\n', '    { return 0; }\n', '\n', '\tfunction disown(string _name) onlyOwner {\n', '\t\tdelete m_toRecord[_name];\n', '\t\tChanged(_name);\n', '\t}\n', '\n', '\tfunction setAddr(string _name, address _a) onlyOwner {\n', '\t\tm_toRecord[_name].addr = _a;\n', '\t\tChanged(_name);\n', '\t}\n', '\tfunction setSubRegistrar(string _name, address _registrar) onlyOwner {\n', '\t\tm_toRecord[_name].subRegistrar = _registrar;\n', '\t\tChanged(_name);\n', '\t}\n', '\tfunction setContent(string _name, bytes32 _content) onlyOwner {\n', '\t\tm_toRecord[_name].content = _content;\n', '\t\tChanged(_name);\n', '\t}\n', '\tfunction record(string _name) constant returns (address o_addr, address o_subRegistrar, bytes32 o_content) {\n', '\t\to_addr = m_toRecord[_name].addr;\n', '\t\to_subRegistrar = m_toRecord[_name].subRegistrar;\n', '\t\to_content = m_toRecord[_name].content;\n', '\t}\n', '\tfunction addr(string _name) constant returns (address) { return m_toRecord[_name].addr; }\n', '\tfunction subRegistrar(string _name) constant returns (address) { return m_toRecord[_name].subRegistrar; }\n', '\tfunction content(string _name) constant returns (bytes32) { return m_toRecord[_name].content; }\n', '\n', '\tmapping (string => Record) m_toRecord;\n', '}\n', '\n', 'contract AiraEtherFunds is TokenHash {\n', '    function AiraEtherFunds(address _bot_reg, string _name, string _symbol)\n', '            TokenHash(_name, _symbol, 18, 0) {\n', '        reg = AiraRegistrarService(_bot_reg);\n', '    }\n', '\n', '    /**\n', '     * @dev Event spawned when activation request received\n', '     */\n', '    event ActivationRequest(address indexed ident, bytes32 indexed code);\n', '\n', '    // Balance limit\n', '    uint256 public limit;\n', '    \n', '    function setLimit(uint256 _limit) onlyOwner\n', '    { limit = _limit; }\n', '\n', '    // Account activation fee\n', '    uint256 public fee;\n', '    \n', '    function setFee(uint256 _fee) onlyOwner\n', '    { fee = _fee; }\n', '\n', '    /**\n', '     * @dev Refill balance and activate it by code\n', '     * @param _code is activation code\n', '     */\n', '    function activate(string _code) payable {\n', '        var value = msg.value;\n', ' \n', '        // Get a fee\n', '        if (fee > 0) {\n', '            if (value < fee) throw;\n', '            balances[sha3(owner)] += fee;\n', '            value                 -= fee;\n', '        }\n', '\n', '        // Refund over limit\n', '        if (limit > 0 && value > limit) {\n', '            var refund = value - limit;\n', '            if (!msg.sender.send(refund)) throw;\n', '            value = limit;\n', '        }\n', '\n', '        // Refill account balance\n', '        balances[sha3(msg.sender)] += value;\n', '        totalSupply                += value;\n', '\n', '        // Activation event\n', '        ActivationRequest(msg.sender, stringToBytes32(_code));\n', '    }\n', '\n', '    /**\n', '     * @dev String to bytes32 conversion helper\n', '     */\n', '    function stringToBytes32(string memory source) constant returns (bytes32 result)\n', '    { assembly { result := mload(add(source, 32)) } }\n', '\n', '    /**\n', '     * @dev This is the way to refill token balance by ethers\n', '     * @param _dest is destination address\n', '     */\n', '    function refill(address _dest) payable returns (bool)\n', '    { return refill(sha3(_dest)); }\n', '\n', '    /**\n', '     * @dev This method is called when money sended to contract address,\n', '     *      a synonym for refill()\n', '     */\n', '    function () payable\n', '    { refill(msg.sender); }\n', '\n', '    /**\n', '     * @dev This is the way to refill token balance by ethers\n', '     * @param _dest is destination identifier\n', '     */\n', '    function refill(bytes32 _dest) payable returns (bool) {\n', '        // Throw when over limit\n', '        if (balances[_dest] + msg.value > limit) throw;\n', '\n', '        // Refill\n', '        balances[_dest] += msg.value;\n', '        totalSupply     += msg.value;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Outgoing transfer (send) with allowance\n', '     * @param _from source identifier\n', '     * @param _to external destination address\n', '     * @param _value amount of token values to send \n', '     */\n', '    function sendFrom(bytes32 _from, address _to, uint256 _value) {\n', '        var sender = sha3(msg.sender);\n', '        var avail = allowances[_from][sender]\n', '                  > balances[_from] ? balances[_from]\n', '                                    : allowances[_from][sender];\n', '        if (avail >= _value) {\n', '            allowances[_from][sender] -= _value;\n', '            balances[_from]           -= _value;\n', '            totalSupply               -= _value;\n', '            if (!_to.send(_value)) throw;\n', '        }\n', '    }\n', '\n', '    AiraRegistrarService public reg;\n', '    modifier onlySecure { if (msg.sender != reg.addr("AiraSecure")) throw; _; }\n', '\n', '    /**\n', '     * @dev Increase approved token values for AiraEthBot\n', '     * @param _client is a client ident\n', '     * @param _value is amount of tokens\n', '     */\n', '    function secureApprove(bytes32 _client, uint256 _value) onlySecure {\n', '        var ethBot = reg.addr("AiraEth");\n', '        if (ethBot != 0) {\n', '            allowances[_client][sha3(ethBot)] += _value;\n', '            ApprovalHash(_client, sha3(ethBot), _value);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Close allowance for AiraEthBot\n', '     * @param _client is a client ident\n', '     */\n', '    function secureUnapprove(bytes32 _client) onlySecure {\n', '        var ethBot = reg.addr("AiraEth");\n', '        if (ethBot != 0)\n', '            allowances[_client][sha3(ethBot)] = 0;\n', '    }\n', '\n', '    // By security issues deny to kill this by owner\n', '    function kill() onlyOwner { throw; }\n', '}']