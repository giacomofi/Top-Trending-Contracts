['pragma solidity ^0.4.11;\n', '\n', 'contract EthTermDeposits{\n', ' mapping(address => uint) public deposits;\n', ' mapping(address => uint) public depositEndTime;\n', '\t\n', '\tfunction EthTermDeposits(){\n', '\n', '\t}\n', '\t/*\n', '\t @notice Creates or updates a deposit that is available for withdrawal after the specified number of weeks.\n', '\t @dev\n', '\t @param numberOfWeeks The number of weeks for which the deposit is being locked. After the specified number of weeks the deposit amount is being unlocked and available for withdrawal. If a deposit with the same name exists it appends the numberOfWeeks to current deposit due time.\n', '\t @returns True on successful deposit.\n', '\t*/\n', '\tfunction Deposit(uint8 numberOfWeeks) payable returns(bool){\n', '\t\taddress owner = msg.sender;\n', '\t\tuint amount = msg.value;\n', '\t\tuint _time = block.timestamp + numberOfWeeks * 1 weeks;\n', '\n', '\t\tif(deposits[owner] > 0){\n', '\t\t\t_time = depositEndTime[owner] + numberOfWeeks * 1 weeks;\n', '\t\t}\n', '\t\tdepositEndTime[owner] = _time;\n', '\t\tdeposits[owner] += amount;\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/*\n', '\t\t@notice Withdraws due deposit.\n', '\t*/\n', '\n', '\tfunction Withdraw() returns(bool){\n', '\t\taddress owner = msg.sender;\n', '\t\tif(depositEndTime[owner] > 0 &&\n', '\t\t   block.timestamp > depositEndTime[owner] &&\n', '\t\t   deposits[owner] > 0){\n', '\t\t\tuint amount = deposits[owner];\n', '\t\t\tdeposits[owner] = 0;\n', '\t\t\tmsg.sender.transfer(amount);\n', '\t\t\treturn true;\n', '\t\t}else{\n', '\t\t\t/* deposit unavailable for withdrawal or already withdrawn. */\n', '\t\t\treturn false;\n', '\t\t}\n', '\t}\n', '\tfunction () {\n', '\t\trevert();\n', '\t}\n', '}']