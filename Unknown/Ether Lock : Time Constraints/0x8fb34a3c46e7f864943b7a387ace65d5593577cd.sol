['pragma solidity ^0.4.16;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    \n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  \n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    \n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    \n', '  address public owner;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '    \n', '  event Mint(address indexed to, uint256 amount);\n', '  \n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will recieve the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '  \n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '    \n', '  event Pause();\n', '  \n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS paused\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS NOT paused\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '  \n', '}\n', '\n', '\n', 'contract FidcomToken is MintableToken {\n', '    \n', '  string public constant name = "Fidcom Test";\n', '   \n', '  string public constant symbol = "FIDCT";\n', '    \n', '  uint32 public constant decimals = 18;\n', '\n', '  bool public transferAllowed = false;\n', '\n', '  modifier whenTransferAllowed() {\n', '    require(transferAllowed);\n', '    _;\n', '  }\n', '\n', '  function allowTransfer() onlyOwner {\n', '    transferAllowed = true;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) whenTransferAllowed returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) whenTransferAllowed returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '    \n', '}\n', '\n', '\n', 'contract StagedCrowdsale is Ownable {\n', '\n', '  using SafeMath for uint;\n', '\n', '  struct Stage {\n', '    uint period;\n', '    uint hardCap;\n', '    uint price;\n', '    uint invested;\n', '    uint closed;\n', '  }\n', '\n', '  uint public start;\n', '\n', '  uint public totalPeriod;\n', '\n', '  uint public totalHardCap;\n', ' \n', '  uint public totalInvested;\n', '\n', '  Stage[] public stages;\n', '\n', '  function stagesCount() constant returns(uint) {\n', '    return stages.length;\n', '  }\n', '\n', '  function setStart(uint newStart) onlyOwner {\n', '    start = newStart;\n', '  }\n', '\n', '  function addStage(uint period, uint hardCap, uint price) onlyOwner {\n', '    require(period>0 && hardCap >0 && price > 0);\n', '    stages.push(Stage(period, hardCap, price, 0, 0));\n', '    totalPeriod = totalPeriod.add(period);\n', '    totalHardCap = totalHardCap.add(hardCap);\n', '  }\n', '\n', '  function removeStage(uint8 number) onlyOwner {\n', '    require(number >=0 && number < stages.length);\n', '\n', '    Stage storage stage = stages[number];\n', '    totalHardCap = totalHardCap.sub(stage.hardCap);    \n', '    totalPeriod = totalPeriod.sub(stage.period);\n', '\n', '    delete stages[number];\n', '\n', '    for (uint i = number; i < stages.length - 1; i++) {\n', '      stages[i] = stages[i+1];\n', '    }\n', '\n', '    stages.length--;\n', '  }\n', '\n', '  function changeStage(uint8 number, uint period, uint hardCap, uint price) onlyOwner {\n', '    require(number >= 0 &&number < stages.length);\n', '\n', '    Stage storage stage = stages[number];\n', '\n', '    totalHardCap = totalHardCap.sub(stage.hardCap);    \n', '    totalPeriod = totalPeriod.sub(stage.period);    \n', '\n', '    stage.hardCap = hardCap;\n', '    stage.period = period;\n', '    stage.price = price;\n', '\n', '    totalHardCap = totalHardCap.add(hardCap);    \n', '    totalPeriod = totalPeriod.add(period);    \n', '  }\n', '\n', '  function insertStage(uint8 numberAfter, uint period, uint hardCap, uint price) onlyOwner {\n', '    require(numberAfter < stages.length);\n', '\n', '\n', '    totalPeriod = totalPeriod.add(period);\n', '    totalHardCap = totalHardCap.add(hardCap);\n', '\n', '    stages.length++;\n', '\n', '    for (uint i = stages.length - 2; i > numberAfter; i--) {\n', '      stages[i + 1] = stages[i];\n', '    }\n', '\n', '    stages[numberAfter + 1] = Stage(period, hardCap, price, 0, 0);\n', '  }\n', '\n', '  function clearStages() onlyOwner {\n', '    for (uint i = 0; i < stages.length; i++) {\n', '      delete stages[i];\n', '    }\n', '    stages.length -= stages.length;\n', '    totalPeriod = 0;\n', '    totalHardCap = 0;\n', '  }\n', '\n', '  modifier saleIsOn() {\n', '    require(stages.length > 0 && now >= start && now < lastSaleDate());\n', '    _;\n', '  }\n', '  \n', '  modifier isUnderHardCap() {\n', '    require(totalInvested <= totalHardCap);\n', '    _;\n', '  }\n', '  \n', '  function lastSaleDate() constant returns(uint) {\n', '    require(stages.length > 0);\n', '    uint lastDate = start;\n', '    for(uint i=0; i < stages.length; i++) {\n', '      if(stages[i].invested >= stages[i].hardCap) {\n', '        lastDate = stages[i].closed;\n', '      } else {\n', '        lastDate = lastDate.add(stages[i].period * 1 days);\n', '      }\n', '    }\n', '    return lastDate;\n', '  }\n', '\n', '  function currentStage() saleIsOn constant returns(uint) {\n', '    uint previousDate = start;\n', '    for(uint i=0; i < stages.length; i++) {\n', '      if(stages[i].invested < stages[i].hardCap) {\n', '        if(now >= previousDate && now < previousDate + stages[i].period * 1 days) {\n', '          return i;\n', '        }\n', '        previousDate = previousDate.add(stages[i].period * 1 days);\n', '      } else {\n', '        previousDate = stages[i].closed;\n', '      }\n', '    }\n', '    return 0;\n', '  }\n', '\n', '  function updateStageWithInvested() internal {\n', '    uint stageIndex = currentStage();\n', '    totalInvested = totalInvested.add(msg.value);\n', '    Stage storage stage = stages[stageIndex];\n', '    stage.invested = stage.invested.add(msg.value);\n', '    if(stage.invested >= stage.hardCap) {\n', '      stage.closed = now;\n', '    }\n', '  }\n', '\n', '\n', '}\n', '\n', 'contract Crowdsale is StagedCrowdsale, Pausable {\n', '    \n', '  address public multisigWallet;\n', '  \n', '  address public foundersTokensWallet;\n', '  \n', '  address public bountyTokensWallet;\n', '  \n', '  uint public percentRate = 1000;\n', '\n', '  uint public foundersPercent;\n', '  \n', '  uint public bountyPercent;\n', '  \n', '  FidcomToken public token = new FidcomToken();\n', '\n', '  function setFoundersPercent(uint newFoundersPercent) onlyOwner {\n', '    require(newFoundersPercent > 0 && newFoundersPercent < percentRate);\n', '    foundersPercent = newFoundersPercent;\n', '  }\n', '  \n', '  function setBountyPercent(uint newBountyPercent) onlyOwner {\n', '    require(newBountyPercent > 0 && newBountyPercent < percentRate);\n', '    bountyPercent = newBountyPercent;\n', '  }\n', '  \n', '  function setMultisigWallet(address newMultisigWallet) onlyOwner {\n', '    multisigWallet = newMultisigWallet;\n', '  }\n', '\n', '  function setFoundersTokensWallet(address newFoundersTokensWallet) onlyOwner {\n', '    foundersTokensWallet = newFoundersTokensWallet;\n', '  }\n', '\n', '  function setBountyTokensWallet(address newBountyTokensWallet) onlyOwner {\n', '    bountyTokensWallet = newBountyTokensWallet;\n', '  }\n', '\n', '  function finishMinting() public whenNotPaused onlyOwner {\n', '    uint issuedTokenSupply = token.totalSupply();\n', '    uint summaryTokensPercent = bountyPercent + foundersPercent;\n', '    uint summaryFoundersTokens = issuedTokenSupply.mul(summaryTokensPercent).div(percentRate - summaryTokensPercent);\n', '    uint totalSupply = summaryFoundersTokens + issuedTokenSupply;\n', '    uint foundersTokens = totalSupply.div(percentRate).mul(foundersPercent);\n', '    uint bountyTokens = totalSupply.div(percentRate).mul(bountyPercent);\n', '    token.mint(foundersTokensWallet, foundersTokens);\n', '    token.mint(bountyTokensWallet, bountyTokens);\n', '    token.finishMinting();\n', '    token.allowTransfer();\n', '    token.transferOwnership(owner);\n', '  }\n', '\n', '  function createTokens() whenNotPaused isUnderHardCap saleIsOn payable {\n', '    require(msg.value > 0);\n', '    uint stageIndex = currentStage();\n', '    Stage storage stage = stages[stageIndex];\n', '    multisigWallet.transfer(msg.value);\n', '    uint price = stage.price;\n', '    uint tokens = msg.value.div(price).mul(1 ether);\n', '    updateStageWithInvested();\n', '    token.mint(msg.sender, tokens);\n', '  }\n', '\n', '  function() external payable {\n', '    createTokens();\n', '  }\n', '\n', '  function retrieveTokens(address anotherToken) public onlyOwner {\n', '    ERC20 alienToken = ERC20(anotherToken);\n', '    alienToken.transfer(multisigWallet, token.balanceOf(this));\n', '  }\n', '\n', '}']