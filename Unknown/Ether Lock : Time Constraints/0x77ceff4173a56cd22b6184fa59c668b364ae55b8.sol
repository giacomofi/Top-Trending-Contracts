['pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'contract SafeMath {\n', '\n', '    uint constant DAY_IN_SECONDS = 86400;\n', '    uint constant BASE = 1000000000000000000;\n', '    uint constant preIcoPrice = 4101;\n', '    uint constant icoPrice = 2255;\n', '\n', '    function mul(uint256 a, uint256 b) constant internal returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) constant internal returns (uint256) {\n', '        assert(b != 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) constant internal returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) constant internal returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function mulByFraction(uint256 number, uint256 numerator, uint256 denominator) internal returns (uint256) {\n', '        return div(mul(number, numerator), denominator);\n', '    }\n', '\n', '    // presale volume bonus calculation \n', '    function presaleVolumeBonus(uint256 price) internal returns (uint256) {\n', '\n', '        // preCTX > ETH\n', '        uint256 val = div(price, preIcoPrice);\n', '\n', '        if(val >= 100 * BASE) return add(price, price * 1/20); // 5%\n', '        if(val >= 50 * BASE) return add(price, price * 3/100); // 3%\n', '        if(val >= 20 * BASE) return add(price, price * 1/50);  // 2%\n', '\n', '        return price;\n', '    }\n', '\n', '    // ICO volume bonus calculation\n', '    function volumeBonus(uint256 etherValue) internal returns (uint256) {\n', '\n', '        if(etherValue >= 1000000000000000000000) return 15;// +15% tokens\n', '        if(etherValue >=  500000000000000000000) return 10; // +10% tokens\n', '        if(etherValue >=  300000000000000000000) return 7;  // +7% tokens\n', '        if(etherValue >=  100000000000000000000) return 5;  // +5% tokens\n', '        if(etherValue >=   50000000000000000000) return 3;   // +3% tokens\n', '        if(etherValue >=   20000000000000000000) return 2;   // +2% tokens\n', '\n', '        return 0;\n', '    }\n', '\n', '    // ICO date bonus calculation\n', '    function dateBonus(uint startIco) internal returns (uint256) {\n', '\n', '        // day from ICO start\n', '        uint daysFromStart = (now - startIco) / DAY_IN_SECONDS + 1;\n', '\n', '        if(daysFromStart == 1) return 15; // +15% tokens\n', '        if(daysFromStart == 2) return 10; // +10% tokens\n', '        if(daysFromStart == 3) return 10; // +10% tokens\n', '        if(daysFromStart == 4) return 5;  // +5% tokens\n', '        if(daysFromStart == 5) return 5;  // +5% tokens\n', '        if(daysFromStart == 6) return 5;  // +5% tokens\n', '\n', '        // no discount\n', '        return 0;\n', '    }\n', '\n', '}\n', '\n', '\n', '/// Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\n', '/// @title Abstract token contract - Functions to be implemented by token contracts.\n', '\n', 'contract AbstractToken {\n', '    // This is not an abstract function, because solc won&#39;t recognize generated getter functions for public variables as functions\n', '    function totalSupply() constant returns (uint256) {}\n', '    function balanceOf(address owner) constant returns (uint256 balance);\n', '    function transfer(address to, uint256 value) returns (bool success);\n', '    function transferFrom(address from, address to, uint256 value) returns (bool success);\n', '    function approve(address spender, uint256 value) returns (bool success);\n', '    function allowance(address owner, address spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Issuance(address indexed to, uint256 value);\n', '}\n', '\n', 'contract StandardToken is AbstractToken {\n', '    /*\n', '     *  Data structures\n', '     */\n', '    mapping (address => uint256) balances;\n', '    mapping (address => bool) ownerAppended;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalSupply;\n', '    address[] public owners;\n', '\n', '    /*\n', '     *  Read and write storage functions\n', '     */\n', '    /// @dev Transfers sender&#39;s tokens to a given address. Returns success.\n', '    /// @param _to Address of token receiver.\n', '    /// @param _value Number of tokens to transfer.\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            if(!ownerAppended[_to]) {\n', '                ownerAppended[_to] = true;\n', '                owners.push(_to);\n', '            }\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '        else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\n', '    /// @param _from Address from where tokens are withdrawn.\n', '    /// @param _to Address to where tokens are sent.\n', '    /// @param _value Number of tokens to transfer.\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            if(!ownerAppended[_to]) {\n', '                ownerAppended[_to] = true;\n', '                owners.push(_to);\n', '            }\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        }\n', '        else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns number of tokens owned by given address.\n', '    /// @param _owner Address of token owner.\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /// @dev Sets approved amount of tokens for spender. Returns success.\n', '    /// @param _spender Address of allowed account.\n', '    /// @param _value Number of approved tokens.\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /*\n', '     * Read storage functions\n', '     */\n', '    /// @dev Returns number of allowed tokens for given address.\n', '    /// @param _owner Address of token owner.\n', '    /// @param _spender Address of token spender.\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract CarTaxiToken is StandardToken, SafeMath {\n', '    /*\n', '     * Token meta data\n', '     */\n', '    string public constant name = "CarTaxi";\n', '    string public constant symbol = "CTX";\n', '    uint public constant decimals = 18;\n', '\n', '    // tottal supply\n', '\n', '    address public icoContract = 0x0;\n', '    /*\n', '     * Modifiers\n', '     */\n', '\n', '    modifier onlyIcoContract() {\n', '        // only ICO contract is allowed to proceed\n', '        require(msg.sender == icoContract);\n', '        _;\n', '    }\n', '\n', '    /*\n', '     * Contract functions\n', '     */\n', '\n', '    /// @dev Contract is needed in icoContract address\n', '    /// @param _icoContract Address of account which will be mint tokens\n', '    function CarTaxiToken(address _icoContract) {\n', '        assert(_icoContract != 0x0);\n', '        icoContract = _icoContract;\n', '    }\n', '\n', '    /// @dev Burns tokens from address. It&#39;s can be applied by account with address this.icoContract\n', '    /// @param _from Address of account, from which will be burned tokens\n', '    /// @param _value Amount of tokens, that will be burned\n', '    function burnTokens(address _from, uint _value) onlyIcoContract {\n', '        assert(_from != 0x0);\n', '        require(_value > 0);\n', '\n', '        balances[_from] = sub(balances[_from], _value);\n', '    }\n', '\n', '    /// @dev Adds tokens to address. It&#39;s can be applied by account with address this.icoContract\n', '    /// @param _to Address of account to which the tokens will pass\n', '    /// @param _value Amount of tokens\n', '    function emitTokens(address _to, uint _value) onlyIcoContract {\n', '        assert(_to != 0x0);\n', '        require(_value > 0);\n', '\n', '        balances[_to] = add(balances[_to], _value);\n', '\n', '        if(!ownerAppended[_to]) {\n', '            ownerAppended[_to] = true;\n', '            owners.push(_to);\n', '        }\n', '\n', '    }\n', '\n', '    function getOwner(uint index) constant returns (address, uint256) {\n', '        return (owners[index], balances[owners[index]]);\n', '    }\n', '\n', '    function getOwnerCount() constant returns (uint) {\n', '        return owners.length;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract CarTaxiIco is SafeMath {\n', '    /*\n', '     * ICO meta data\n', '     */\n', '    CarTaxiToken public cartaxiToken;\n', '    AbstractToken public preIcoToken;\n', '\n', '    enum State{\n', '        Pause,\n', '        Init,\n', '        Running,\n', '        Stopped,\n', '        Migrated\n', '    }\n', '\n', '    State public currentState = State.Pause;\n', '\n', '    uint public startIcoDate = 0;\n', '\n', '    // Address of account to which ethers will be tranfered in case of successful ICO\n', '    address public escrow;\n', '    // Address of manager\n', '    address public icoManager;\n', '    // Address of a account, that will transfer tokens from pre-ICO\n', '    address public tokenImporter = 0x0;\n', '    // Addresses of founders and bountyOwner\n', '    address public founder1;\n', '    address public founder2;\n', '    address public founder3;\n', '    address public founder4;\n', '    address public bountyOwner;\n', '\n', '    // 487.500.000 CTX tokens\n', '    uint public constant supplyLimit = 487500000000000000000000000;\n', '\n', '    //  12500000 CTX is token for bountyOwner\n', '    uint public constant bountyOwnersTokens = 12500000000000000000000000;\n', '\n', '    // 1 ETH = 2255 CTX\n', '    uint public constant PRICE = 2255;\n', '\n', '    // BASE = 10^18\n', '    uint constant BASE = 1000000000000000000;\n', '\n', '    // 2018.02.04 07:00 UTC\n', '    // founders&#39; reward time\n', '    uint public foundersRewardTime = 1517727600;\n', '\n', '    // Amount of imported tokens from pre-ICO\n', '    uint public importedTokens = 0;\n', '    // Amount of sold tokens on ICO\n', '    uint public soldTokensOnIco = 0;\n', '    // Amount of issued tokens on pre-ICO = 3047.999951828165582669 * 4101\n', '    uint public constant soldTokensOnPreIco = 12499847802447308000000000;\n', '    // Tokens to founders can be sent only if sentTokensToFounders == false and time > foundersRewardTime\n', '    bool public sentTokensToFounders = false;\n', '    // Tokens to bounty owner can be sent only after ICO\n', '    bool public sentTokensToBountyOwner = false;\n', '\n', '    uint public etherRaised = 0;\n', '\n', '    /*\n', '     * Modifiers\n', '     */\n', '\n', '    modifier whenInitialized() {\n', '        // only when contract is initialized\n', '        require(currentState >= State.Init);\n', '        _;\n', '    }\n', '\n', '    modifier onlyManager() {\n', '        // only ICO manager can do this action\n', '        require(msg.sender == icoManager);\n', '        _;\n', '    }\n', '\n', '    modifier onIcoRunning() {\n', '        // Checks, if ICO is running and has not been stopped\n', '        require(currentState == State.Running);\n', '        _;\n', '    }\n', '\n', '    modifier onIcoStopped() {\n', '        // Checks if ICO was stopped or deadline is reached\n', '        require(currentState == State.Stopped);\n', '        _;\n', '    }\n', '\n', '    modifier notMigrated() {\n', '        // Checks if base can be migrated\n', '        require(currentState != State.Migrated);\n', '        _;\n', '    }\n', '\n', '    modifier onlyImporter() {\n', '        // only importer contract is allowed to proceed\n', '        require(msg.sender == tokenImporter);\n', '        _;\n', '    }\n', '\n', '    /// @dev Constructor of ICO. Requires address of icoManager,\n', '    /// @param _icoManager Address of ICO manager\n', '    /// @param _preIcoToken Address of pre-ICO contract\n', '    function CarTaxiIco(address _icoManager, address _preIcoToken) {\n', '        assert(_preIcoToken != 0x0);\n', '        assert(_icoManager != 0x0);\n', '\n', '        cartaxiToken = new CarTaxiToken(this);\n', '        icoManager = _icoManager;\n', '        preIcoToken = AbstractToken(_preIcoToken);\n', '    }\n', '\n', '    /// @dev Initialises addresses of founders, tokens owner, escrow.\n', '    /// Initialises balances of tokens owner\n', '    /// @param _founder1 Address of founder 1\n', '    /// @param _founder2 Address of founder 2\n', '    /// @param _founder3 Address of founder 3\n', '    /// @param _founder4 Address of founder 4\n', '    /// @param _escrow Address of escrow\n', '    function init(address _founder1, address _founder2, address _founder3, address _founder4, address _escrow) onlyManager {\n', '        assert(currentState != State.Init);\n', '        assert(_founder1 != 0x0);\n', '        assert(_founder2 != 0x0);\n', '        assert(_founder3 != 0x0);\n', '        assert(_founder4 != 0x0);\n', '        assert(_escrow != 0x0);\n', '\n', '        founder1 = _founder1;\n', '        founder2 = _founder2;\n', '        founder3 = _founder3;\n', '        founder4 = _founder4;\n', '        escrow = _escrow;\n', '\n', '        currentState = State.Init;\n', '    }\n', '\n', '    /// @dev Sets new state\n', '    /// @param _newState Value of new state\n', '    function setState(State _newState) public onlyManager\n', '    {\n', '        currentState = _newState;\n', '        if(currentState == State.Running) {\n', '            startIcoDate = now;\n', '        }\n', '    }\n', '\n', '    /// @dev Sets new manager. Only manager can do it\n', '    /// @param _newIcoManager Address of new ICO manager\n', '    function setNewManager(address _newIcoManager) onlyManager {\n', '        assert(_newIcoManager != 0x0);\n', '        icoManager = _newIcoManager;\n', '    }\n', '\n', '    /// @dev Sets bounty owner. Only manager can do it\n', '    /// @param _bountyOwner Address of Bounty owner\n', '    function setBountyOwner(address _bountyOwner) onlyManager {\n', '        assert(_bountyOwner != 0x0);\n', '        bountyOwner = _bountyOwner;\n', '    }\n', '\n', '    // saves info if account&#39;s tokens were imported from pre-ICO\n', '    mapping (address => bool) private importedFromPreIco;\n', '\n', '    /// @dev Imports account&#39;s tokens from pre-ICO. It can be done only by user, ICO manager or token importer\n', '    /// @param _account Address of account which tokens will be imported\n', '    function importTokens(address _account) {\n', '        // only token holder or manager can do migration\n', '        require(msg.sender == icoManager || msg.sender == _account);\n', '        require(!importedFromPreIco[_account]);\n', '\n', '        uint preIcoBal = preIcoToken.balanceOf(_account);\n', '        uint preIcoBalance = presaleVolumeBonus(preIcoBal);\n', '\n', '        if (preIcoBalance > 0) {\n', '            cartaxiToken.emitTokens(_account, preIcoBalance);\n', '            importedTokens = add(importedTokens, preIcoBalance);\n', '        }\n', '\n', '        importedFromPreIco[_account] = true;\n', '    }\n', '\n', '    /// @dev Buy quantity of tokens depending on the amount of sent ethers.\n', '    /// @param _buyer Address of account which will receive tokens\n', '    function buyTokens(address _buyer) private {\n', '        assert(_buyer != 0x0);\n', '        require(msg.value > 0);\n', '\n', '        uint tokensToEmit = msg.value * PRICE;\n', '        //calculate date bonus\n', '        uint dateBonusPercent = dateBonus(startIcoDate);\n', '        //calculate volume bonus\n', '        uint volumeBonusPercent = volumeBonus(msg.value);\n', '        //total bonus tokens\n', '        uint totalBonusPercent = dateBonusPercent + volumeBonusPercent;\n', '\n', '        if(totalBonusPercent > 0){\n', '            tokensToEmit =  tokensToEmit + mulByFraction(tokensToEmit, totalBonusPercent, 100);\n', '        }\n', '\n', '        require(add(soldTokensOnIco, tokensToEmit) <= supplyLimit);\n', '\n', '        soldTokensOnIco = add(soldTokensOnIco, tokensToEmit);\n', '\n', '        //emit tokens to token holder\n', '        cartaxiToken.emitTokens(_buyer, tokensToEmit);\n', '\n', '        etherRaised = add(etherRaised, msg.value);\n', '    }\n', '\n', '    /// @dev Fall back function ~50k-100k gas\n', '    function () payable onIcoRunning {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    /// @dev Burn tokens from accounts only in state "not migrated". Only manager can do it\n', '    /// @param _from Address of account\n', '    function burnTokens(address _from, uint _value) onlyManager notMigrated {\n', '        cartaxiToken.burnTokens(_from, _value);\n', '    }\n', '\n', '    /// @dev Partial withdraw. Only manager can do it\n', '    function withdrawEther(uint _value) onlyManager {\n', '        require(_value > 0);\n', '        assert(_value <= this.balance);\n', '        // send 123 to get 1.23\n', '        escrow.transfer(_value * 10000000000000000); // 10^16\n', '    }\n', '\n', '    /// @dev Ether withdraw. Only manager can do it\n', '    function withdrawAllEther() onlyManager {\n', '        if(this.balance > 0)\n', '        {\n', '            escrow.transfer(this.balance);\n', '        }\n', '    }\n', '\n', '    ///@dev Send tokens to bountyOwner depending on crowdsale results. Can be send only after ICO.\n', '    function sendTokensToBountyOwner() onlyManager whenInitialized {\n', '        require(!sentTokensToBountyOwner);\n', '\n', '        //Calculate total tokens sold on pre-ICO and ICO\n', '        uint tokensSold = add(soldTokensOnIco, soldTokensOnPreIco);\n', '\n', '        //Calculate bounty tokens depending on total tokens sold\n', '        uint bountyTokens = mulByFraction(tokensSold, 25, 1000); // 2.5%\n', '\n', '        cartaxiToken.emitTokens(bountyOwner, bountyTokens);\n', '\n', '        sentTokensToBountyOwner = true;\n', '    }\n', '\n', '    /// @dev Send tokens to founders. Can be sent only after cartaxiToken.rewardTime() (2018.02.04 0:00 UTC)\n', '    function sendTokensToFounders() onlyManager whenInitialized {\n', '        require(!sentTokensToFounders && now >= foundersRewardTime);\n', '\n', '        //Calculate total tokens sold on pre-ICO and ICO\n', '        uint tokensSold = add(soldTokensOnIco, soldTokensOnPreIco);\n', '\n', '        //Calculate founder reward depending on total tokens sold\n', '        uint totalRewardToFounders = mulByFraction(tokensSold, 3166, 10000); // 31.66%\n', '\n', '        uint founderReward = mulByFraction(totalRewardToFounders, 25, 100); // 25% pie\n', '\n', '        //send every founder 25% of total founder reward\n', '        cartaxiToken.emitTokens(founder1, founderReward);\n', '        cartaxiToken.emitTokens(founder2, founderReward);\n', '        cartaxiToken.emitTokens(founder3, founderReward);\n', '        cartaxiToken.emitTokens(founder4, founderReward);\n', '\n', '        sentTokensToFounders = true;\n', '    }\n', '}']
['pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'contract SafeMath {\n', '\n', '    uint constant DAY_IN_SECONDS = 86400;\n', '    uint constant BASE = 1000000000000000000;\n', '    uint constant preIcoPrice = 4101;\n', '    uint constant icoPrice = 2255;\n', '\n', '    function mul(uint256 a, uint256 b) constant internal returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) constant internal returns (uint256) {\n', '        assert(b != 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) constant internal returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) constant internal returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function mulByFraction(uint256 number, uint256 numerator, uint256 denominator) internal returns (uint256) {\n', '        return div(mul(number, numerator), denominator);\n', '    }\n', '\n', '    // presale volume bonus calculation \n', '    function presaleVolumeBonus(uint256 price) internal returns (uint256) {\n', '\n', '        // preCTX > ETH\n', '        uint256 val = div(price, preIcoPrice);\n', '\n', '        if(val >= 100 * BASE) return add(price, price * 1/20); // 5%\n', '        if(val >= 50 * BASE) return add(price, price * 3/100); // 3%\n', '        if(val >= 20 * BASE) return add(price, price * 1/50);  // 2%\n', '\n', '        return price;\n', '    }\n', '\n', '    // ICO volume bonus calculation\n', '    function volumeBonus(uint256 etherValue) internal returns (uint256) {\n', '\n', '        if(etherValue >= 1000000000000000000000) return 15;// +15% tokens\n', '        if(etherValue >=  500000000000000000000) return 10; // +10% tokens\n', '        if(etherValue >=  300000000000000000000) return 7;  // +7% tokens\n', '        if(etherValue >=  100000000000000000000) return 5;  // +5% tokens\n', '        if(etherValue >=   50000000000000000000) return 3;   // +3% tokens\n', '        if(etherValue >=   20000000000000000000) return 2;   // +2% tokens\n', '\n', '        return 0;\n', '    }\n', '\n', '    // ICO date bonus calculation\n', '    function dateBonus(uint startIco) internal returns (uint256) {\n', '\n', '        // day from ICO start\n', '        uint daysFromStart = (now - startIco) / DAY_IN_SECONDS + 1;\n', '\n', '        if(daysFromStart == 1) return 15; // +15% tokens\n', '        if(daysFromStart == 2) return 10; // +10% tokens\n', '        if(daysFromStart == 3) return 10; // +10% tokens\n', '        if(daysFromStart == 4) return 5;  // +5% tokens\n', '        if(daysFromStart == 5) return 5;  // +5% tokens\n', '        if(daysFromStart == 6) return 5;  // +5% tokens\n', '\n', '        // no discount\n', '        return 0;\n', '    }\n', '\n', '}\n', '\n', '\n', '/// Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\n', '/// @title Abstract token contract - Functions to be implemented by token contracts.\n', '\n', 'contract AbstractToken {\n', "    // This is not an abstract function, because solc won't recognize generated getter functions for public variables as functions\n", '    function totalSupply() constant returns (uint256) {}\n', '    function balanceOf(address owner) constant returns (uint256 balance);\n', '    function transfer(address to, uint256 value) returns (bool success);\n', '    function transferFrom(address from, address to, uint256 value) returns (bool success);\n', '    function approve(address spender, uint256 value) returns (bool success);\n', '    function allowance(address owner, address spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Issuance(address indexed to, uint256 value);\n', '}\n', '\n', 'contract StandardToken is AbstractToken {\n', '    /*\n', '     *  Data structures\n', '     */\n', '    mapping (address => uint256) balances;\n', '    mapping (address => bool) ownerAppended;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalSupply;\n', '    address[] public owners;\n', '\n', '    /*\n', '     *  Read and write storage functions\n', '     */\n', "    /// @dev Transfers sender's tokens to a given address. Returns success.\n", '    /// @param _to Address of token receiver.\n', '    /// @param _value Number of tokens to transfer.\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            if(!ownerAppended[_to]) {\n', '                ownerAppended[_to] = true;\n', '                owners.push(_to);\n', '            }\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '        else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\n', '    /// @param _from Address from where tokens are withdrawn.\n', '    /// @param _to Address to where tokens are sent.\n', '    /// @param _value Number of tokens to transfer.\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            if(!ownerAppended[_to]) {\n', '                ownerAppended[_to] = true;\n', '                owners.push(_to);\n', '            }\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        }\n', '        else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns number of tokens owned by given address.\n', '    /// @param _owner Address of token owner.\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /// @dev Sets approved amount of tokens for spender. Returns success.\n', '    /// @param _spender Address of allowed account.\n', '    /// @param _value Number of approved tokens.\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /*\n', '     * Read storage functions\n', '     */\n', '    /// @dev Returns number of allowed tokens for given address.\n', '    /// @param _owner Address of token owner.\n', '    /// @param _spender Address of token spender.\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract CarTaxiToken is StandardToken, SafeMath {\n', '    /*\n', '     * Token meta data\n', '     */\n', '    string public constant name = "CarTaxi";\n', '    string public constant symbol = "CTX";\n', '    uint public constant decimals = 18;\n', '\n', '    // tottal supply\n', '\n', '    address public icoContract = 0x0;\n', '    /*\n', '     * Modifiers\n', '     */\n', '\n', '    modifier onlyIcoContract() {\n', '        // only ICO contract is allowed to proceed\n', '        require(msg.sender == icoContract);\n', '        _;\n', '    }\n', '\n', '    /*\n', '     * Contract functions\n', '     */\n', '\n', '    /// @dev Contract is needed in icoContract address\n', '    /// @param _icoContract Address of account which will be mint tokens\n', '    function CarTaxiToken(address _icoContract) {\n', '        assert(_icoContract != 0x0);\n', '        icoContract = _icoContract;\n', '    }\n', '\n', "    /// @dev Burns tokens from address. It's can be applied by account with address this.icoContract\n", '    /// @param _from Address of account, from which will be burned tokens\n', '    /// @param _value Amount of tokens, that will be burned\n', '    function burnTokens(address _from, uint _value) onlyIcoContract {\n', '        assert(_from != 0x0);\n', '        require(_value > 0);\n', '\n', '        balances[_from] = sub(balances[_from], _value);\n', '    }\n', '\n', "    /// @dev Adds tokens to address. It's can be applied by account with address this.icoContract\n", '    /// @param _to Address of account to which the tokens will pass\n', '    /// @param _value Amount of tokens\n', '    function emitTokens(address _to, uint _value) onlyIcoContract {\n', '        assert(_to != 0x0);\n', '        require(_value > 0);\n', '\n', '        balances[_to] = add(balances[_to], _value);\n', '\n', '        if(!ownerAppended[_to]) {\n', '            ownerAppended[_to] = true;\n', '            owners.push(_to);\n', '        }\n', '\n', '    }\n', '\n', '    function getOwner(uint index) constant returns (address, uint256) {\n', '        return (owners[index], balances[owners[index]]);\n', '    }\n', '\n', '    function getOwnerCount() constant returns (uint) {\n', '        return owners.length;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract CarTaxiIco is SafeMath {\n', '    /*\n', '     * ICO meta data\n', '     */\n', '    CarTaxiToken public cartaxiToken;\n', '    AbstractToken public preIcoToken;\n', '\n', '    enum State{\n', '        Pause,\n', '        Init,\n', '        Running,\n', '        Stopped,\n', '        Migrated\n', '    }\n', '\n', '    State public currentState = State.Pause;\n', '\n', '    uint public startIcoDate = 0;\n', '\n', '    // Address of account to which ethers will be tranfered in case of successful ICO\n', '    address public escrow;\n', '    // Address of manager\n', '    address public icoManager;\n', '    // Address of a account, that will transfer tokens from pre-ICO\n', '    address public tokenImporter = 0x0;\n', '    // Addresses of founders and bountyOwner\n', '    address public founder1;\n', '    address public founder2;\n', '    address public founder3;\n', '    address public founder4;\n', '    address public bountyOwner;\n', '\n', '    // 487.500.000 CTX tokens\n', '    uint public constant supplyLimit = 487500000000000000000000000;\n', '\n', '    //  12500000 CTX is token for bountyOwner\n', '    uint public constant bountyOwnersTokens = 12500000000000000000000000;\n', '\n', '    // 1 ETH = 2255 CTX\n', '    uint public constant PRICE = 2255;\n', '\n', '    // BASE = 10^18\n', '    uint constant BASE = 1000000000000000000;\n', '\n', '    // 2018.02.04 07:00 UTC\n', "    // founders' reward time\n", '    uint public foundersRewardTime = 1517727600;\n', '\n', '    // Amount of imported tokens from pre-ICO\n', '    uint public importedTokens = 0;\n', '    // Amount of sold tokens on ICO\n', '    uint public soldTokensOnIco = 0;\n', '    // Amount of issued tokens on pre-ICO = 3047.999951828165582669 * 4101\n', '    uint public constant soldTokensOnPreIco = 12499847802447308000000000;\n', '    // Tokens to founders can be sent only if sentTokensToFounders == false and time > foundersRewardTime\n', '    bool public sentTokensToFounders = false;\n', '    // Tokens to bounty owner can be sent only after ICO\n', '    bool public sentTokensToBountyOwner = false;\n', '\n', '    uint public etherRaised = 0;\n', '\n', '    /*\n', '     * Modifiers\n', '     */\n', '\n', '    modifier whenInitialized() {\n', '        // only when contract is initialized\n', '        require(currentState >= State.Init);\n', '        _;\n', '    }\n', '\n', '    modifier onlyManager() {\n', '        // only ICO manager can do this action\n', '        require(msg.sender == icoManager);\n', '        _;\n', '    }\n', '\n', '    modifier onIcoRunning() {\n', '        // Checks, if ICO is running and has not been stopped\n', '        require(currentState == State.Running);\n', '        _;\n', '    }\n', '\n', '    modifier onIcoStopped() {\n', '        // Checks if ICO was stopped or deadline is reached\n', '        require(currentState == State.Stopped);\n', '        _;\n', '    }\n', '\n', '    modifier notMigrated() {\n', '        // Checks if base can be migrated\n', '        require(currentState != State.Migrated);\n', '        _;\n', '    }\n', '\n', '    modifier onlyImporter() {\n', '        // only importer contract is allowed to proceed\n', '        require(msg.sender == tokenImporter);\n', '        _;\n', '    }\n', '\n', '    /// @dev Constructor of ICO. Requires address of icoManager,\n', '    /// @param _icoManager Address of ICO manager\n', '    /// @param _preIcoToken Address of pre-ICO contract\n', '    function CarTaxiIco(address _icoManager, address _preIcoToken) {\n', '        assert(_preIcoToken != 0x0);\n', '        assert(_icoManager != 0x0);\n', '\n', '        cartaxiToken = new CarTaxiToken(this);\n', '        icoManager = _icoManager;\n', '        preIcoToken = AbstractToken(_preIcoToken);\n', '    }\n', '\n', '    /// @dev Initialises addresses of founders, tokens owner, escrow.\n', '    /// Initialises balances of tokens owner\n', '    /// @param _founder1 Address of founder 1\n', '    /// @param _founder2 Address of founder 2\n', '    /// @param _founder3 Address of founder 3\n', '    /// @param _founder4 Address of founder 4\n', '    /// @param _escrow Address of escrow\n', '    function init(address _founder1, address _founder2, address _founder3, address _founder4, address _escrow) onlyManager {\n', '        assert(currentState != State.Init);\n', '        assert(_founder1 != 0x0);\n', '        assert(_founder2 != 0x0);\n', '        assert(_founder3 != 0x0);\n', '        assert(_founder4 != 0x0);\n', '        assert(_escrow != 0x0);\n', '\n', '        founder1 = _founder1;\n', '        founder2 = _founder2;\n', '        founder3 = _founder3;\n', '        founder4 = _founder4;\n', '        escrow = _escrow;\n', '\n', '        currentState = State.Init;\n', '    }\n', '\n', '    /// @dev Sets new state\n', '    /// @param _newState Value of new state\n', '    function setState(State _newState) public onlyManager\n', '    {\n', '        currentState = _newState;\n', '        if(currentState == State.Running) {\n', '            startIcoDate = now;\n', '        }\n', '    }\n', '\n', '    /// @dev Sets new manager. Only manager can do it\n', '    /// @param _newIcoManager Address of new ICO manager\n', '    function setNewManager(address _newIcoManager) onlyManager {\n', '        assert(_newIcoManager != 0x0);\n', '        icoManager = _newIcoManager;\n', '    }\n', '\n', '    /// @dev Sets bounty owner. Only manager can do it\n', '    /// @param _bountyOwner Address of Bounty owner\n', '    function setBountyOwner(address _bountyOwner) onlyManager {\n', '        assert(_bountyOwner != 0x0);\n', '        bountyOwner = _bountyOwner;\n', '    }\n', '\n', "    // saves info if account's tokens were imported from pre-ICO\n", '    mapping (address => bool) private importedFromPreIco;\n', '\n', "    /// @dev Imports account's tokens from pre-ICO. It can be done only by user, ICO manager or token importer\n", '    /// @param _account Address of account which tokens will be imported\n', '    function importTokens(address _account) {\n', '        // only token holder or manager can do migration\n', '        require(msg.sender == icoManager || msg.sender == _account);\n', '        require(!importedFromPreIco[_account]);\n', '\n', '        uint preIcoBal = preIcoToken.balanceOf(_account);\n', '        uint preIcoBalance = presaleVolumeBonus(preIcoBal);\n', '\n', '        if (preIcoBalance > 0) {\n', '            cartaxiToken.emitTokens(_account, preIcoBalance);\n', '            importedTokens = add(importedTokens, preIcoBalance);\n', '        }\n', '\n', '        importedFromPreIco[_account] = true;\n', '    }\n', '\n', '    /// @dev Buy quantity of tokens depending on the amount of sent ethers.\n', '    /// @param _buyer Address of account which will receive tokens\n', '    function buyTokens(address _buyer) private {\n', '        assert(_buyer != 0x0);\n', '        require(msg.value > 0);\n', '\n', '        uint tokensToEmit = msg.value * PRICE;\n', '        //calculate date bonus\n', '        uint dateBonusPercent = dateBonus(startIcoDate);\n', '        //calculate volume bonus\n', '        uint volumeBonusPercent = volumeBonus(msg.value);\n', '        //total bonus tokens\n', '        uint totalBonusPercent = dateBonusPercent + volumeBonusPercent;\n', '\n', '        if(totalBonusPercent > 0){\n', '            tokensToEmit =  tokensToEmit + mulByFraction(tokensToEmit, totalBonusPercent, 100);\n', '        }\n', '\n', '        require(add(soldTokensOnIco, tokensToEmit) <= supplyLimit);\n', '\n', '        soldTokensOnIco = add(soldTokensOnIco, tokensToEmit);\n', '\n', '        //emit tokens to token holder\n', '        cartaxiToken.emitTokens(_buyer, tokensToEmit);\n', '\n', '        etherRaised = add(etherRaised, msg.value);\n', '    }\n', '\n', '    /// @dev Fall back function ~50k-100k gas\n', '    function () payable onIcoRunning {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    /// @dev Burn tokens from accounts only in state "not migrated". Only manager can do it\n', '    /// @param _from Address of account\n', '    function burnTokens(address _from, uint _value) onlyManager notMigrated {\n', '        cartaxiToken.burnTokens(_from, _value);\n', '    }\n', '\n', '    /// @dev Partial withdraw. Only manager can do it\n', '    function withdrawEther(uint _value) onlyManager {\n', '        require(_value > 0);\n', '        assert(_value <= this.balance);\n', '        // send 123 to get 1.23\n', '        escrow.transfer(_value * 10000000000000000); // 10^16\n', '    }\n', '\n', '    /// @dev Ether withdraw. Only manager can do it\n', '    function withdrawAllEther() onlyManager {\n', '        if(this.balance > 0)\n', '        {\n', '            escrow.transfer(this.balance);\n', '        }\n', '    }\n', '\n', '    ///@dev Send tokens to bountyOwner depending on crowdsale results. Can be send only after ICO.\n', '    function sendTokensToBountyOwner() onlyManager whenInitialized {\n', '        require(!sentTokensToBountyOwner);\n', '\n', '        //Calculate total tokens sold on pre-ICO and ICO\n', '        uint tokensSold = add(soldTokensOnIco, soldTokensOnPreIco);\n', '\n', '        //Calculate bounty tokens depending on total tokens sold\n', '        uint bountyTokens = mulByFraction(tokensSold, 25, 1000); // 2.5%\n', '\n', '        cartaxiToken.emitTokens(bountyOwner, bountyTokens);\n', '\n', '        sentTokensToBountyOwner = true;\n', '    }\n', '\n', '    /// @dev Send tokens to founders. Can be sent only after cartaxiToken.rewardTime() (2018.02.04 0:00 UTC)\n', '    function sendTokensToFounders() onlyManager whenInitialized {\n', '        require(!sentTokensToFounders && now >= foundersRewardTime);\n', '\n', '        //Calculate total tokens sold on pre-ICO and ICO\n', '        uint tokensSold = add(soldTokensOnIco, soldTokensOnPreIco);\n', '\n', '        //Calculate founder reward depending on total tokens sold\n', '        uint totalRewardToFounders = mulByFraction(tokensSold, 3166, 10000); // 31.66%\n', '\n', '        uint founderReward = mulByFraction(totalRewardToFounders, 25, 100); // 25% pie\n', '\n', '        //send every founder 25% of total founder reward\n', '        cartaxiToken.emitTokens(founder1, founderReward);\n', '        cartaxiToken.emitTokens(founder2, founderReward);\n', '        cartaxiToken.emitTokens(founder3, founderReward);\n', '        cartaxiToken.emitTokens(founder4, founderReward);\n', '\n', '        sentTokensToFounders = true;\n', '    }\n', '}']
