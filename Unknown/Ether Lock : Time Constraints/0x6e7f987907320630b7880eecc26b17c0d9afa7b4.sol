['contract ValidetherOracle {\n', '\n', '  //  Name of the institution to Ethereum address of the institution\n', '  mapping (string => address) nameToAddress;\n', '    //  Ethereum address of the institution to Name of the institution\n', '  mapping (address => string) addressToName;\n', '\n', '  address admin;\n', '\n', '  modifier onlyAdmin {\n', '     if (msg.sender != admin) throw;\n', '     _\n', '  }\n', '\n', '  /*\n', '    Constructor Function\n', '  */\n', '  function ValidetherOracle() {\n', '    admin = msg.sender;\n', '  }\n', '\n', '  /*\n', '    Function which adds an institution\n', '    */\n', '  function addInstitution(address institutionAddress, string institutionName) onlyAdmin {\n', '    nameToAddress[institutionName] = institutionAddress;\n', '    addressToName[institutionAddress] = institutionName;\n', '  }\n', '\n', '  /*\n', '    Function which validates an institution address and returns its name\n', '    @param institutionAddress Ethereum Address of the institution\n', '    @return "" if the address is not valid and the institution name if the address is valid.\n', '    */\n', '  function getInstitutionByAddress(address institutionAddress) constant returns(string) {\n', '    return addressToName[institutionAddress];\n', '  }\n', '\n', '  /*\n', '    Function which validates an institution name and returns its address\n', '    @param institutionName Name of the institution\n', '    @return 0x0000000000000000000000000000000000000000 if the name is not valid and the institution Ethereum Address if the name is valid.\n', '  */\n', '  function getInstitutionByName(string institutionName) constant returns(address) {\n', '    return nameToAddress[institutionName];\n', '  }\n', '\n', '  /*\n', '    Function which changes the admin address of the contract\n', '    @param newAdmin Ethereum address of the new admin\n', '  */\n', '  function setNewAdmin(address newAdmin) onlyAdmin {\n', '    admin = newAdmin;\n', '  }\n', '\n', '}']