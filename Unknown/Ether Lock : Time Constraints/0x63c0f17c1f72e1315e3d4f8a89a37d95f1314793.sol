['pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '}\n', '\n', 'contract Token {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '}\n', '\n', '/*  ERC 20 token */\n', 'contract PreSaleToken is Token {\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '    \n', '    mapping (address => uint256) balances;\n', '}\n', '\n', 'contract MASSTokenPreSale is PreSaleToken {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public constant decimals = 18;\n', '    \n', '    bool public isEnded = false;\n', '    address public contractOwner;\n', '    address public massEthFund;\n', '    uint256 public presaleStartBlock;\n', '    uint256 public presaleEndBlock;\n', '    uint256 public constant tokenExchangeRate = 1300;\n', '    uint256 public constant tokenCap = 13 * (10**6) * 10**decimals;\n', '    \n', '    event CreatePreSale(address indexed _to, uint256 _amount);\n', '    \n', '    function MASSTokenPreSale(address _massEthFund, uint256 _presaleStartBlock, uint256 _presaleEndBlock) {\n', '        massEthFund = _massEthFund;\n', '        presaleStartBlock = _presaleStartBlock;\n', '        presaleEndBlock = _presaleEndBlock;\n', '        contractOwner = massEthFund;\n', '        totalSupply = 0;\n', '    }\n', '    \n', '    function () payable public {\n', '        if (isEnded) throw;\n', '        if (block.number < presaleStartBlock) throw;\n', '        if (block.number > presaleEndBlock) throw;\n', '        if (msg.value == 0) throw;\n', '        \n', '        uint256 tokens = msg.value.mul(tokenExchangeRate);\n', '        uint256 checkedSupply = totalSupply.add(tokens);\n', '        \n', '        if (tokenCap < checkedSupply) throw;\n', '        \n', '        totalSupply = checkedSupply;\n', '        balances[msg.sender] += tokens;\n', '        CreatePreSale(msg.sender, tokens);\n', '    }\n', '    \n', '    function endPreSale() public {\n', '        require (msg.sender == contractOwner);\n', '        if (isEnded) throw;\n', '        if (block.number < presaleEndBlock && totalSupply != tokenCap) throw;\n', '        isEnded = true;\n', '        if (!massEthFund.send(this.balance)) throw;\n', '    }\n', '}']
['pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '}\n', '\n', 'contract Token {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '}\n', '\n', '/*  ERC 20 token */\n', 'contract PreSaleToken is Token {\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '    \n', '    mapping (address => uint256) balances;\n', '}\n', '\n', 'contract MASSTokenPreSale is PreSaleToken {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public constant decimals = 18;\n', '    \n', '    bool public isEnded = false;\n', '    address public contractOwner;\n', '    address public massEthFund;\n', '    uint256 public presaleStartBlock;\n', '    uint256 public presaleEndBlock;\n', '    uint256 public constant tokenExchangeRate = 1300;\n', '    uint256 public constant tokenCap = 13 * (10**6) * 10**decimals;\n', '    \n', '    event CreatePreSale(address indexed _to, uint256 _amount);\n', '    \n', '    function MASSTokenPreSale(address _massEthFund, uint256 _presaleStartBlock, uint256 _presaleEndBlock) {\n', '        massEthFund = _massEthFund;\n', '        presaleStartBlock = _presaleStartBlock;\n', '        presaleEndBlock = _presaleEndBlock;\n', '        contractOwner = massEthFund;\n', '        totalSupply = 0;\n', '    }\n', '    \n', '    function () payable public {\n', '        if (isEnded) throw;\n', '        if (block.number < presaleStartBlock) throw;\n', '        if (block.number > presaleEndBlock) throw;\n', '        if (msg.value == 0) throw;\n', '        \n', '        uint256 tokens = msg.value.mul(tokenExchangeRate);\n', '        uint256 checkedSupply = totalSupply.add(tokens);\n', '        \n', '        if (tokenCap < checkedSupply) throw;\n', '        \n', '        totalSupply = checkedSupply;\n', '        balances[msg.sender] += tokens;\n', '        CreatePreSale(msg.sender, tokens);\n', '    }\n', '    \n', '    function endPreSale() public {\n', '        require (msg.sender == contractOwner);\n', '        if (isEnded) throw;\n', '        if (block.number < presaleEndBlock && totalSupply != tokenCap) throw;\n', '        isEnded = true;\n', '        if (!massEthFund.send(this.balance)) throw;\n', '    }\n', '}']
