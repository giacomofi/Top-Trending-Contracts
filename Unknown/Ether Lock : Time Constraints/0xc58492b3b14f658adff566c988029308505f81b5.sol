['pragma solidity ^0.4.11;\n', '\n', 'contract PonziScheme {\n', '  uint public round;\n', '  address public lastDepositor;\n', '  uint public lastDepositorAmount;\n', '  uint public startingAmount;\n', '  uint public nextAmount;\n', '\n', '  function PonziScheme(uint _startingAmount) {\n', '    round = 1;\n', '    startingAmount = _startingAmount;\n', '    nextAmount = _startingAmount;\n', '  }\n', '\n', '  function() payable {\n', '    if(round == 1) {\n', '      if(msg.value != startingAmount) {\n', '        throw;\n', '      }\n', '    } else {\n', '      checkAmount(msg.value);\n', '\n', '      lastDepositor.send(msg.value);\n', '    }\n', '\n', '    lastDepositorAmount = msg.value;\n', '    lastDepositor = msg.sender;\n', '    nextAmount = msg.value * 2;\n', '\n', '    increaseRound();\n', '  }\n', '\n', '  function checkAmount(uint amount) private {\n', '    if(amount != lastDepositorAmount * 2) {\n', '      throw;\n', '    }\n', '  }\n', '\n', '  function increaseRound() private {\n', '    round = round + 1;\n', '  }\n', '}']
['pragma solidity ^0.4.11;\n', '\n', 'contract PonziScheme {\n', '  uint public round;\n', '  address public lastDepositor;\n', '  uint public lastDepositorAmount;\n', '  uint public startingAmount;\n', '  uint public nextAmount;\n', '\n', '  function PonziScheme(uint _startingAmount) {\n', '    round = 1;\n', '    startingAmount = _startingAmount;\n', '    nextAmount = _startingAmount;\n', '  }\n', '\n', '  function() payable {\n', '    if(round == 1) {\n', '      if(msg.value != startingAmount) {\n', '        throw;\n', '      }\n', '    } else {\n', '      checkAmount(msg.value);\n', '\n', '      lastDepositor.send(msg.value);\n', '    }\n', '\n', '    lastDepositorAmount = msg.value;\n', '    lastDepositor = msg.sender;\n', '    nextAmount = msg.value * 2;\n', '\n', '    increaseRound();\n', '  }\n', '\n', '  function checkAmount(uint amount) private {\n', '    if(amount != lastDepositorAmount * 2) {\n', '      throw;\n', '    }\n', '  }\n', '\n', '  function increaseRound() private {\n', '    round = round + 1;\n', '  }\n', '}']
