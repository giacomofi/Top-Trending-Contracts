['pragma solidity ^0.4.11;\n', '\n', '/*\n', '   Copyright 2017 DappHub, LLC\n', '\n', '   Licensed under the Apache License, Version 2.0 (the "License");\n', '   you may not use this file except in compliance with the License.\n', '   You may obtain a copy of the License at\n', '\n', '       http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '   Unless required by applicable law or agreed to in writing, software\n', '   distributed under the License is distributed on an "AS IS" BASIS,\n', '   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '   See the License for the specific language governing permissions and\n', '   limitations under the License.\n', '*/\n', '\n', '// Abstract contract for the full ERC 20 Token standard\n', '// https://github.com/ethereum/EIPs/issues/20\n', '\n', 'contract ERC20Token {\n', '\tfunction totalSupply() constant returns (uint supply);\n', '\n', '\t/// @param _owner The address from which the balance will be retrieved\n', '\t/// @return The balance\n', '\tfunction balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '\t/// @notice send `_value` token to `_to` from `msg.sender`\n', '\t/// @param _to The address of the recipient\n', '\t/// @param _value The amount of token to be transferred\n', '\t/// @return Whether the transfer was successful or not\n', '\tfunction transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '\t/// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '\t/// @param _from The address of the sender\n', '\t/// @param _to The address of the recipient\n', '\t/// @param _value The amount of token to be transferred\n', '\t/// @return Whether the transfer was successful or not\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '\t/// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '\t/// @param _spender The address of the account able to transfer the tokens\n', '\t/// @param _value The amount of tokens to be approved for transfer\n', '\t/// @return Whether the approval was successful or not\n', '\tfunction approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '\t/// @param _owner The address of the account owning tokens\n', '\t/// @param _spender The address of the account able to transfer the tokens\n', '\t/// @return Amount of remaining tokens allowed to spent\n', '\tfunction allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'pragma solidity ^0.4.11;\n', '\n', '/*\n', '    Copyright 2016, Jordi Baylina\n', '\n', '    This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '    This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '\n', '    You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', ' */\n', '\n', '/// @title MiniMeToken Contract\n', '/// @author Jordi Baylina\n', '/// @dev This token contract&#39;s goal is to make it easy for anyone to clone this\n', '///  token using the token distribution at a given block, this will allow DAO&#39;s\n', '///  and DApps to upgrade their features in a decentralized manner without\n', '///  affecting the original token\n', '/// @dev It is ERC20 compliant, but still needs to under go further testing.\n', '\n', '\n', '/// @dev The token controller contract must implement these functions\n', 'contract TokenController {\n', '    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n', '    /// @param _owner The address that sent the ether to create tokens\n', '    /// @return True if the ether is accepted, false if it throws\n', '    function proxyPayment(address _owner) payable returns(bool);\n', '\n', '    /// @notice Notifies the controller about a token transfer allowing the\n', '    ///  controller to react if desired\n', '    /// @param _from The origin of the transfer\n', '    /// @param _to The destination of the transfer\n', '    /// @param _amount The amount of the transfer\n', '    /// @return False if the controller does not authorize the transfer\n', '    function onTransfer(address _from, address _to, uint _amount) returns(bool);\n', '\n', '    /// @notice Notifies the controller about an approval allowing the\n', '    ///  controller to react if desired\n', '    /// @param _owner The address that calls `approve()`\n', '    /// @param _spender The spender in the `approve()` call\n', '    /// @param _amount The amount in the `approve()` call\n', '    /// @return False if the controller does not authorize the approval\n', '    function onApprove(address _owner, address _spender, uint _amount)\n', '        returns(bool);\n', '}\n', '\n', 'contract Controlled {\n', '    /// @notice The address of the controller is the only address that can call\n', '    ///  a function with this modifier\n', '    modifier onlyController { if (msg.sender != controller) throw; _; }\n', '\n', '    address public controller;\n', '\n', '    function Controlled() { controller = msg.sender;}\n', '\n', '    /// @notice Changes the controller of the contract\n', '    /// @param _newController The new controller of the contract\n', '    function changeController(address _newController) onlyController {\n', '        controller = _newController;\n', '    }\n', '}\n', '\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n', '}\n', '\n', '/// @dev The actual token contract, the default controller is the msg.sender\n', '///  that deploys the contract, so usually this token will be deployed by a\n', '///  token controller contract, which Giveth will call a "Campaign"\n', 'contract MiniMeToken is Controlled, ERC20Token {\n', '\n', '    string public name;                //The Token&#39;s name: e.g. DigixDAO Tokens\n', '    uint8 public decimals;             //Number of decimals of the smallest unit\n', '    string public symbol;              //An identifier: e.g. REP\n', '    string public version = &#39;MMT_0.1&#39;; //An arbitrary versioning scheme\n', '\n', '    /// @dev `Checkpoint` is the structure that attaches a block number to a\n', '    ///  given value, the block number attached is the one that last changed the\n', '    ///  value\n', '    struct  Checkpoint {\n', '\n', '        // `fromBlock` is the block number that the value was generated from\n', '        uint128 fromBlock;\n', '\n', '        // `value` is the amount of tokens at a specific block number\n', '        uint128 value;\n', '    }\n', '\n', '    // `parentToken` is the Token address that was cloned to produce this token;\n', '    //  it will be 0x0 for a token that was not cloned\n', '    MiniMeToken public parentToken;\n', '\n', '    // `parentSnapShotBlock` is the block number from the Parent Token that was\n', '    //  used to determine the initial distribution of the Clone Token\n', '    uint public parentSnapShotBlock;\n', '\n', '    // `creationBlock` is the block number that the Clone Token was created\n', '    uint public creationBlock;\n', '\n', '    // `balances` is the map that tracks the balance of each address, in this\n', '    //  contract when the balance changes the block number that the change\n', '    //  occurred is also included in the map\n', '    mapping (address => Checkpoint[]) balances;\n', '\n', '    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    // Tracks the history of the `totalSupply` of the token\n', '    Checkpoint[] totalSupplyHistory;\n', '\n', '    // Flag that determines if the token is transferable or not.\n', '    bool public transfersEnabled;\n', '\n', '    // The factory used to create new clone tokens\n', '    MiniMeTokenFactory public tokenFactory;\n', '\n', '////////////////\n', '// Constructor\n', '////////////////\n', '\n', '    /// @notice Constructor to create a MiniMeToken\n', '    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\n', '    ///  will create the Clone token contracts, the token factory needs to be\n', '    ///  deployed first\n', '    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\n', '    ///  new token\n', '    /// @param _parentSnapShotBlock Block of the parent token that will\n', '    ///  determine the initial distribution of the clone token, set to 0 if it\n', '    ///  is a new token\n', '    /// @param _tokenName Name of the new token\n', '    /// @param _decimalUnits Number of decimals of the new token\n', '    /// @param _tokenSymbol Token Symbol for the new token\n', '    /// @param _transfersEnabled If true, tokens will be able to be transferred\n', '    function MiniMeToken(\n', '        address _tokenFactory,\n', '        address _parentToken,\n', '        uint _parentSnapShotBlock,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol,\n', '        bool _transfersEnabled\n', '    ) {\n', '        tokenFactory = MiniMeTokenFactory(_tokenFactory);\n', '        name = _tokenName;                                 // Set the name\n', '        decimals = _decimalUnits;                          // Set the decimals\n', '        symbol = _tokenSymbol;                             // Set the symbol\n', '        parentToken = MiniMeToken(_parentToken);\n', '        parentSnapShotBlock = _parentSnapShotBlock;\n', '        transfersEnabled = _transfersEnabled;\n', '        creationBlock = block.number;\n', '    }\n', '\n', '\n', '///////////////////\n', '// ERC20 Methods\n', '///////////////////\n', '\n', '\t/**\n', '\t*\n', '\t* Fix for the ERC20 short address attack\n', '\t*\n', '\t* http://vessenes.com/the-erc20-short-address-attack-explained/\n', '\t*/\n', '\tmodifier onlyPayloadSize(uint size) {\n', '\t\tif(msg.data.length != size + 4) {\n', '\t\tthrow;\n', '\t\t}\n', '\t\t_;\n', '\t}\n', '\n', '\t/// @notice Send `_amount` tokens to `_to` from `msg.sender`\n', '\t/// @param _to The address of the recipient\n', '\t/// @param _amount The amount of tokens to be transferred\n', '\t/// @return Whether the transfer was successful or not\n', '\tfunction transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) returns (bool success) {\n', '\t\tif (!transfersEnabled) throw;\n', '\t\treturn doTransfer(msg.sender, _to, _amount);\n', '    }\n', '\n', '    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n', '    ///  is approved by `_from`\n', '    /// @param _from The address holding the tokens being transferred\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return True if the transfer was successful\n', '    function transferFrom(address _from, address _to, uint256 _amount\n', '    ) returns (bool success) {\n', '\n', '        // The controller of this contract can move tokens around at will,\n', '        //  this is important to recognize! Confirm that you trust the\n', '        //  controller of this contract, which in most situations should be\n', '        //  another open source smart contract or 0x0\n', '        if (msg.sender != controller) {\n', '            if (!transfersEnabled) throw;\n', '\n', '            // The standard ERC 20 transferFrom functionality\n', '            if (allowed[_from][msg.sender] < _amount) return false;\n', '            allowed[_from][msg.sender] -= _amount;\n', '        }\n', '        return doTransfer(_from, _to, _amount);\n', '    }\n', '\n', '    /// @dev This is the actual transfer function in the token contract, it can\n', '    ///  only be called by other functions in this contract.\n', '    /// @param _from The address holding the tokens being transferred\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return True if the transfer was successful\n', '    function doTransfer(address _from, address _to, uint _amount\n', '    ) internal returns(bool) {\n', '\n', '           if (_amount == 0) {\n', '               return true;\n', '           }\n', '\n', '           if (parentSnapShotBlock >= block.number) throw;\n', '\n', '           // Do not allow transfer to 0x0 or the token contract itself\n', '           if ((_to == 0) || (_to == address(this))) throw;\n', '\n', '           // If the amount being transfered is more than the balance of the\n', '           //  account the transfer returns false\n', '           var previousBalanceFrom = balanceOfAt(_from, block.number);\n', '           if (previousBalanceFrom < _amount) {\n', '               return false;\n', '           }\n', '\n', '           // Alerts the token controller of the transfer\n', '           if (isContract(controller)) {\n', '               if (!TokenController(controller).onTransfer(_from, _to, _amount))\n', '               throw;\n', '           }\n', '\n', '           // First update the balance array with the new value for the address\n', '           //  sending the tokens\n', '           updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\n', '\n', '           // Then update the balance array with the new value for the address\n', '           //  receiving the tokens\n', '           var previousBalanceTo = balanceOfAt(_to, block.number);\n', '           if (previousBalanceTo + _amount < previousBalanceTo) throw; // Check for overflow\n', '           updateValueAtNow(balances[_to], previousBalanceTo + _amount);\n', '\n', '           // An event to make the transfer easy to find on the blockchain\n', '           Transfer(_from, _to, _amount);\n', '\n', '           return true;\n', '    }\n', '\n', '    /// @param _owner The address that&#39;s balance is being requested\n', '    /// @return The balance of `_owner` at the current block\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balanceOfAt(_owner, block.number);\n', '    }\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n', '    ///  its behalf. This is a modified version of the ERC20 approve function\n', '    ///  to be a little bit safer\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _amount The amount of tokens to be approved for transfer\n', '    /// @return True if the approval was successful\n', '    function approve(address _spender, uint256 _amount) returns (bool success) {\n', '        if (!transfersEnabled) throw;\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender,0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        if ((_amount!=0) && (allowed[msg.sender][_spender] !=0)) throw;\n', '\n', '        // Alerts the token controller of the approve function call\n', '        if (isContract(controller)) {\n', '            if (!TokenController(controller).onApprove(msg.sender, _spender, _amount))\n', '                throw;\n', '        }\n', '\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    /// @dev This function makes it easy to read the `allowed[]` map\n', '    /// @param _owner The address of the account that owns the token\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens of _owner that _spender is allowed\n', '    ///  to spend\n', '    function allowance(address _owner, address _spender\n', '    ) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n', '    ///  its behalf, and then a function is triggered in the contract that is\n', '    ///  being approved, `_spender`. This allows users to use their tokens to\n', '    ///  interact with contracts in one function call instead of two\n', '    /// @param _spender The address of the contract able to transfer the tokens\n', '    /// @param _amount The amount of tokens to be approved for transfer\n', '    /// @return True if the function call was successful\n', '    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n', '    ) returns (bool success) {\n', '        if (!approve(_spender, _amount)) throw;\n', '\n', '        ApproveAndCallFallBack(_spender).receiveApproval(\n', '            msg.sender,\n', '            _amount,\n', '            this,\n', '            _extraData\n', '        );\n', '\n', '        return true;\n', '    }\n', '\n', '    /// @dev This function makes it easy to get the total number of tokens\n', '    /// @return The total number of tokens\n', '    function totalSupply() constant returns (uint) {\n', '        return totalSupplyAt(block.number);\n', '    }\n', '\n', '\n', '////////////////\n', '// Query balance and totalSupply in History\n', '////////////////\n', '\n', '    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @param _blockNumber The block number when the balance is queried\n', '    /// @return The balance at `_blockNumber`\n', '    function balanceOfAt(address _owner, uint _blockNumber) constant\n', '        returns (uint) {\n', '\n', '        // These next few lines are used when the balance of the token is\n', '        //  requested before a check point was ever created for this token, it\n', '        //  requires that the `parentToken.balanceOfAt` be queried at the\n', '        //  genesis block for that token as this contains initial balance of\n', '        //  this token\n', '        if ((balances[_owner].length == 0)\n', '            || (balances[_owner][0].fromBlock > _blockNumber)) {\n', '            if (address(parentToken) != 0) {\n', '                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\n', '            } else {\n', '                // Has no parent\n', '                return 0;\n', '            }\n', '\n', '        // This will return the expected balance during normal situations\n', '        } else {\n', '            return getValueAt(balances[_owner], _blockNumber);\n', '        }\n', '    }\n', '\n', '    /// @notice Total amount of tokens at a specific `_blockNumber`.\n', '    /// @param _blockNumber The block number when the totalSupply is queried\n', '    /// @return The total amount of tokens at `_blockNumber`\n', '    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n', '\n', '        // These next few lines are used when the totalSupply of the token is\n', '        //  requested before a check point was ever created for this token, it\n', '        //  requires that the `parentToken.totalSupplyAt` be queried at the\n', '        //  genesis block for this token as that contains totalSupply of this\n', '        //  token at this block number.\n', '        if ((totalSupplyHistory.length == 0)\n', '            || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n', '            if (address(parentToken) != 0) {\n', '                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\n', '            } else {\n', '                return 0;\n', '            }\n', '\n', '        // This will return the expected totalSupply during normal situations\n', '        } else {\n', '            return getValueAt(totalSupplyHistory, _blockNumber);\n', '        }\n', '    }\n', '\n', '////////////////\n', '// Clone Token Method\n', '////////////////\n', '\n', '    /// @notice Creates a new clone token with the initial distribution being\n', '    ///  this token at `_snapshotBlock`\n', '    /// @param _cloneTokenName Name of the clone token\n', '    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\n', '    /// @param _cloneTokenSymbol Symbol of the clone token\n', '    /// @param _snapshotBlock Block when the distribution of the parent token is\n', '    ///  copied to set the initial distribution of the new clone token;\n', '    ///  if the block is zero than the actual block, the current block is used\n', '    /// @param _transfersEnabled True if transfers are allowed in the clone\n', '    /// @return The address of the new MiniMeToken Contract\n', '    function createCloneToken(\n', '        string _cloneTokenName,\n', '        uint8 _cloneDecimalUnits,\n', '        string _cloneTokenSymbol,\n', '        uint _snapshotBlock,\n', '        bool _transfersEnabled\n', '        ) onlyController returns(address) {\n', '        if (_snapshotBlock == 0) _snapshotBlock = block.number;\n', '        MiniMeToken cloneToken = tokenFactory.createCloneToken(\n', '            this,\n', '            _snapshotBlock,\n', '            _cloneTokenName,\n', '            _cloneDecimalUnits,\n', '            _cloneTokenSymbol,\n', '            _transfersEnabled\n', '            );\n', '\n', '        cloneToken.changeController(msg.sender);\n', '\n', '        // An event to make the token easy to find on the blockchain\n', '        NewCloneToken(address(cloneToken), _snapshotBlock);\n', '        return address(cloneToken);\n', '    }\n', '\n', '////////////////\n', '// Generate and destroy tokens\n', '////////////////\n', '\n', '    /// @notice Generates `_amount` tokens that are assigned to `_owner`\n', '    /// @param _owner The address that will be assigned the new tokens\n', '    /// @param _amount The quantity of tokens generated\n', '    /// @return True if the tokens are generated correctly\n', '    function generateTokens(address _owner, uint _amount) onlyController returns (bool) {\n', '        uint curTotalSupply = getValueAt(totalSupplyHistory, block.number);\n', '        if (curTotalSupply + _amount < curTotalSupply) throw; // Check for overflow\n', '\t\t\n', '        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n', '        var previousBalanceTo = balanceOf(_owner);\n', '        if (previousBalanceTo + _amount < previousBalanceTo) throw; // Check for overflow\n', '\t\t\n', '        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n', '        Transfer(0, _owner, _amount);\n', '        return true;\n', '    }\n', '\n', '\n', '    /// @notice Burns `_amount` tokens from `_owner`\n', '    /// @param _owner The address that will lose the tokens\n', '    /// @param _amount The quantity of tokens to burn\n', '    /// @return True if the tokens are burned correctly\n', '    function destroyTokens(address _owner, uint _amount\n', '    ) onlyController returns (bool) {\n', '        uint curTotalSupply = getValueAt(totalSupplyHistory, block.number);\n', '        if (curTotalSupply < _amount) throw;\n', '        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n', '        var previousBalanceFrom = balanceOf(_owner);\n', '        if (previousBalanceFrom < _amount) throw;\n', '        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n', '        Transfer(_owner, 0, _amount);\n', '        return true;\n', '    }\n', '\n', '////////////////\n', '// Enable tokens transfers\n', '////////////////\n', '\n', '\n', '    /// @notice Enables token holders to transfer their tokens freely if true\n', '    /// @param _transfersEnabled True if transfers are allowed in the clone\n', '    function enableTransfers(bool _transfersEnabled) onlyController {\n', '        transfersEnabled = _transfersEnabled;\n', '    }\n', '\n', '////////////////\n', '// Internal helper functions to query and set a value in a snapshot array\n', '////////////////\n', '\n', '    /// @dev `getValueAt` retrieves the number of tokens at a given block number\n', '    /// @param checkpoints The history of values being queried\n', '    /// @param _block The block number to retrieve the value at\n', '    /// @return The number of tokens being queried\n', '    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n', '    ) constant internal returns (uint) {\n', '        if (checkpoints.length == 0) return 0;\n', '\n', '        // Shortcut for the actual value\n', '        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\n', '            return checkpoints[checkpoints.length-1].value;\n', '        if (_block < checkpoints[0].fromBlock) return 0;\n', '\n', '        // Binary search of the value in the array\n', '        uint min = 0;\n', '        uint max = checkpoints.length-1;\n', '        while (max > min) {\n', '            uint mid = (max + min + 1)/ 2;\n', '            if (checkpoints[mid].fromBlock<=_block) {\n', '                min = mid;\n', '            } else {\n', '                max = mid-1;\n', '            }\n', '        }\n', '        return checkpoints[min].value;\n', '    }\n', '\n', '    /// @dev `updateValueAtNow` used to update the `balances` map and the\n', '    ///  `totalSupplyHistory`\n', '    /// @param checkpoints The history of data being updated\n', '    /// @param _value The new number of tokens\n', '    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\n', '    ) internal  {\n', '        if ((checkpoints.length == 0)\n', '        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\n', '               Checkpoint newCheckPoint = checkpoints[ checkpoints.length++ ];\n', '               newCheckPoint.fromBlock =  uint128(block.number);\n', '               newCheckPoint.value = uint128(_value);\n', '           } else {\n', '               Checkpoint oldCheckPoint = checkpoints[checkpoints.length-1];\n', '               oldCheckPoint.value = uint128(_value);\n', '           }\n', '    }\n', '\n', '    /// @dev Internal function to determine if an address is a contract\n', '    /// @param _addr The address being queried\n', '    /// @return True if `_addr` is a contract\n', '    function isContract(address _addr) constant internal returns(bool) {\n', '        uint size;\n', '        if (_addr == 0) return false;\n', '        assembly {\n', '            size := extcodesize(_addr)\n', '        }\n', '        return size>0;\n', '    }\n', '\n', '    /// @dev Helper function to return a min betwen the two uints\n', '    function min(uint a, uint b) internal returns (uint) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /// @notice The fallback function: If the contract&#39;s controller has not been\n', '    ///  set to 0, then the `proxyPayment` method is called which relays the\n', '    ///  ether and creates tokens as described in the token controller contract\n', '    function ()  payable {\n', '        if (isContract(controller)) {\n', '            if (! TokenController(controller).proxyPayment.value(msg.value)(msg.sender))\n', '                throw;\n', '        } else {\n', '            throw;\n', '        }\n', '    }\n', '\n', '\n', '\t////////////////\n', '\t// Events\n', '\t////////////////\n', '\tevent Transfer(address indexed _from, address indexed _to, uint256 _amount);\n', '\tevent NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\n', '\tevent Approval(address indexed _owner, address indexed _spender, uint256 _amount);\n', '\n', '}\n', '\n', '////////////////\n', '// MiniMeTokenFactory\n', '////////////////\n', '\n', '/// @dev This contract is used to generate clone contracts from a contract.\n', '///  In solidity this is the way to create a contract from a contract of the\n', '///  same class\n', 'contract MiniMeTokenFactory {\n', '\n', '    /// @notice Update the DApp by creating a new token with new functionalities\n', '    ///  the msg.sender becomes the controller of this clone token\n', '    /// @param _parentToken Address of the token being cloned\n', '    /// @param _snapshotBlock Block of the parent token that will\n', '    ///  determine the initial distribution of the clone token\n', '    /// @param _tokenName Name of the new token\n', '    /// @param _decimalUnits Number of decimals of the new token\n', '    /// @param _tokenSymbol Token Symbol for the new token\n', '    /// @param _transfersEnabled If true, tokens will be able to be transferred\n', '    /// @return The address of the new token contract\n', '    function createCloneToken(\n', '        address _parentToken,\n', '        uint _snapshotBlock,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol,\n', '        bool _transfersEnabled\n', '    ) returns (MiniMeToken) {\n', '        MiniMeToken newToken = new MiniMeToken(\n', '            this,\n', '            _parentToken,\n', '            _snapshotBlock,\n', '            _tokenName,\n', '            _decimalUnits,\n', '            _tokenSymbol,\n', '            _transfersEnabled\n', '            );\n', '\n', '        newToken.changeController(msg.sender);\n', '        return newToken;\n', '    }\n', '}\n', '\n', '/// @title Clit Token (CLIT) - Crowd funding code for CLIT Coin project\n', '/// \n', '\n', '\n', 'contract ClitCoinToken is MiniMeToken {\n', '\n', '\n', '\tfunction ClitCoinToken(\n', '\t\t//address _tokenFactory\n', '\t) MiniMeToken(\n', '\t\t0x0,\n', '\t\t0x0,            // no parent token\n', '\t\t0,              // no snapshot block number from parent\n', '\t\t"CLIT Token", \t// Token name\n', '\t\t0,              // Decimals\n', '\t\t"CLIT",         // Symbol\n', '\t\tfalse            // Enable transfers\n', '\t) {\n', '\t\tversion = "CLIT 1.0";\n', '\t}\n', '\n', '\n', '}\n', '\n', '/*\n', ' * Math operations with safety checks\n', ' */\n', 'contract SafeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    assert(b > 0);\n', '    uint c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract ClitCrowdFunder is Controlled, SafeMath {\n', '\n', '\taddress public creator;\n', '    address public fundRecipient;\n', '\t\n', '\t// State variables\n', '    State public state = State.Fundraising; // initialize on create\t\n', '    uint public fundingGoal; \n', '\tuint public totalRaised;\n', '\tuint public currentBalance;\n', '\tuint public issuedTokenBalance;\n', '\tuint public totalTokensIssued;\n', '\tuint public capTokenAmount;\n', '\tuint public startBlockNumber;\n', '\tuint public endBlockNumber;\n', '\tuint public eolBlockNumber;\n', '\t\n', '\tuint public firstExchangeRatePeriod;\n', '\tuint public secondExchangeRatePeriod;\n', '\tuint public thirdExchangeRatePeriod;\n', '\tuint public fourthExchangeRatePeriod;\n', '\t\n', '\tuint public firstTokenExchangeRate;\n', '\tuint public secondTokenExchangeRate;\n', '\tuint public thirdTokenExchangeRate;\n', '\tuint public fourthTokenExchangeRate;\n', '\tuint public finalTokenExchangeRate;\t\n', '\t\n', '\tbool public fundingGoalReached;\n', '\t\n', '    ClitCoinToken public exchangeToken;\n', '\t\n', '\t/* This generates a public event on the blockchain that will notify clients */\n', '\tevent HardCapReached(address fundRecipient, uint amountRaised);\n', '\tevent GoalReached(address fundRecipient, uint amountRaised);\n', '\tevent FundTransfer(address backer, uint amount, bool isContribution);\t\n', '\tevent FrozenFunds(address target, bool frozen);\n', '\tevent RefundPeriodStarted();\n', '\n', '\t/* data structure to hold information about campaign contributors */\n', '\tmapping(address => uint256) private balanceOf;\n', '\tmapping (address => bool) private frozenAccount;\n', '\t\n', '\t// Data structures\n', '    enum State {\n', '\t\tFundraising,\n', '\t\tExpiredRefund,\n', '\t\tSuccessful,\n', '\t\tClosed\n', '\t}\n', '\t\n', '\t/*\n', '     *  Modifiers\n', '     */\n', '\n', '\tmodifier inState(State _state) {\n', '        if (state != _state) throw;\n', '        _;\n', '    }\n', '\t\n', '\t// Add one week to endBlockNumber\n', '\tmodifier atEndOfLifecycle() {\n', '        if(!((state == State.ExpiredRefund && block.number > eolBlockNumber) || state == State.Successful)) {\n', '            throw;\n', '        }\n', '        _;\n', '    }\n', '\t\n', '\tmodifier accountNotFrozen() {\n', '        if (frozenAccount[msg.sender] == true) throw;\n', '        _;\n', '    }\n', '\t\n', '    modifier minInvestment() {\n', '      // User has to send at least 0.01 Eth\n', '      require(msg.value >= 10 ** 16);\n', '      _;\n', '    }\n', '\t\n', '\tmodifier isStarted() {\n', '\t\trequire(block.number >= startBlockNumber);\n', '\t\t_;\n', '\t}\n', '\n', '\t/*  at initialization, setup the owner */\n', '\tfunction ClitCrowdFunder(\n', '\t\taddress _fundRecipient,\n', '\t\tuint _delayStartHours,\n', '\t\tClitCoinToken _addressOfExchangeToken\n', '\t) {\n', '\t\tcreator = msg.sender;\n', '\t\t\n', '\t\tfundRecipient = _fundRecipient;\n', '\t\tfundingGoal = 7000 * 1 ether;\n', '\t\tcapTokenAmount = 140 * 10 ** 6;\n', '\t\tstate = State.Fundraising;\n', '\t\tfundingGoalReached = false;\n', '\t\t\n', '\t\ttotalRaised = 0;\n', '\t\tcurrentBalance = 0;\n', '\t\ttotalTokensIssued = 0;\n', '\t\tissuedTokenBalance = 0;\n', '\t\t\n', '\t\tstartBlockNumber = block.number + div(mul(3600, _delayStartHours), 14);\n', '\t\tendBlockNumber = startBlockNumber + div(mul(3600, 1080), 14); // 45 days \n', '\t\teolBlockNumber = endBlockNumber + div(mul(3600, 168), 14);  // one week - contract end of life\n', '\n', '\t\tfirstExchangeRatePeriod = startBlockNumber + div(mul(3600, 24), 14);   // First 24 hour sale \n', '\t\tsecondExchangeRatePeriod = firstExchangeRatePeriod + div(mul(3600, 240), 14); // Next 10 days\n', '\t\tthirdExchangeRatePeriod = secondExchangeRatePeriod + div(mul(3600, 240), 14); // Next 10 days\n', '\t\tfourthExchangeRatePeriod = thirdExchangeRatePeriod + div(mul(3600, 240), 14); // Next 10 days\n', '\t\t\n', '\t\tuint _tokenExchangeRate = 1000;\n', '\t\tfirstTokenExchangeRate = (_tokenExchangeRate + 1000);\t\n', '\t\tsecondTokenExchangeRate = (_tokenExchangeRate + 500);\n', '\t\tthirdTokenExchangeRate = (_tokenExchangeRate + 300);\n', '\t\tfourthTokenExchangeRate = (_tokenExchangeRate + 100);\n', '\t\tfinalTokenExchangeRate = _tokenExchangeRate;\n', '\t\t\n', '\t\texchangeToken = ClitCoinToken(_addressOfExchangeToken);\n', '\t}\n', '\t\n', '\tfunction freezeAccount(address target, bool freeze) onlyController {\n', '        frozenAccount[target] = freeze;\n', '        FrozenFunds(target, freeze);\n', '    }\t\n', '\t\n', '\tfunction getCurrentExchangeRate(uint amount) public constant returns(uint) {\n', '\t\tif (block.number <= firstExchangeRatePeriod) {\n', '\t\t\treturn firstTokenExchangeRate * amount / 1 ether;\n', '\t\t} else if (block.number <= secondExchangeRatePeriod) {\n', '\t\t\treturn secondTokenExchangeRate * amount / 1 ether;\n', '\t\t} else if (block.number <= thirdExchangeRatePeriod) {\n', '\t\t\treturn thirdTokenExchangeRate * amount / 1 ether;\n', '\t\t} else if (block.number <= fourthExchangeRatePeriod) {\n', '\t\t\treturn fourthTokenExchangeRate * amount / 1 ether;\n', '\t\t} else if (block.number <= endBlockNumber) {\n', '\t\t\treturn finalTokenExchangeRate * amount / 1 ether;\n', '\t\t}\n', '\t\t\n', '\t\treturn finalTokenExchangeRate * amount / 1 ether;\n', '\t}\n', '\n', '\tfunction investment() public inState(State.Fundraising) isStarted accountNotFrozen minInvestment payable returns(uint)  {\n', '\t\t\n', '\t\tuint amount = msg.value;\n', '\t\tif (amount == 0) throw;\n', '\t\t\n', '\t\tbalanceOf[msg.sender] += amount;\t\n', '\t\t\n', '\t\ttotalRaised += amount;\n', '\t\tcurrentBalance += amount;\n', '\t\t\t\t\t\t\n', '\t\tuint tokenAmount = getCurrentExchangeRate(amount);\n', '\t\texchangeToken.generateTokens(msg.sender, tokenAmount);\n', '\t\ttotalTokensIssued += tokenAmount;\n', '\t\tissuedTokenBalance += tokenAmount;\n', '\t\t\n', '\t\tFundTransfer(msg.sender, amount, true); \n', '\t\t\n', '\t\tcheckIfFundingCompleteOrExpired();\n', '\t\t\n', '\t\treturn balanceOf[msg.sender];\n', '\t}\n', '\n', '\tfunction checkIfFundingCompleteOrExpired() {\n', '\t\tif (block.number > endBlockNumber || totalTokensIssued >= capTokenAmount ) {\n', '\t\t\t// Hard limit reached\n', '\t\t\tif (currentBalance > fundingGoal || fundingGoalReached == true) {\n', '\t\t\t\tstate = State.Successful;\n', '\t\t\t\tpayOut();\n', '\t\t\t\t\n', '\t\t\t\tHardCapReached(fundRecipient, totalRaised);\n', '\t\t\t\t\n', '\t\t\t\t// Contract can be immediately closed out\n', '\t\t\t\tremoveContract();\n', '\n', '\t\t\t} else  {\n', '\t\t\t\tstate = State.ExpiredRefund; // backers can now collect refunds by calling getRefund()\n', '\t\t\t\t\n', '\t\t\t\tRefundPeriodStarted();\n', '\t\t\t}\n', '\t\t} else if (currentBalance > fundingGoal && fundingGoalReached == false) {\n', '\t\t\t// Once goal reached\n', '\t\t\tfundingGoalReached = true;\n', '\t\t\t\n', '\t\t\tstate = State.Successful;\n', '\t\t\tpayOut();\n', '\t\t\t\n', '\t\t\t// Continue allowing users to buy in\n', '\t\t\tstate = State.Fundraising;\n', '\t\t\t\n', '\t\t\t// currentBalance is zero after pay out\n', '\t\t\tGoalReached(fundRecipient, totalRaised);\n', '\t\t}\n', '\t}\n', '\n', '\tfunction payOut() public inState(State.Successful) {\n', '\t\t// Ethereum balance\n', '\t\tvar amount = currentBalance;\n', '\t\tcurrentBalance = 0;\n', '\n', '\t\tfundRecipient.transfer(amount);\n', '\t\t\n', '\t\t// Update the token reserve amount so that 50% of tokens remain in reserve\n', '\t\tvar tokenCount = issuedTokenBalance;\n', '\t\tissuedTokenBalance = 0;\n', '\t\t\n', '\t\texchangeToken.generateTokens(fundRecipient, tokenCount);\t\t\n', '\t}\n', '\n', '\tfunction getRefund() public inState(State.ExpiredRefund) {\t\n', '\t\tuint amountToRefund = balanceOf[msg.sender];\n', '\t\tbalanceOf[msg.sender] = 0;\n', '\t\t\n', '\t\t// throws error if fails\n', '\t\tmsg.sender.transfer(amountToRefund);\n', '\t\tcurrentBalance -= amountToRefund;\n', '\t\t\n', '\t\tFundTransfer(msg.sender, amountToRefund, false);\n', '\t}\n', '\t\n', '\tfunction removeContract() public atEndOfLifecycle {\t\t\n', '\t\tstate = State.Closed;\n', '\t\t\n', '\t\t// Allow clit owners to freely trade coins on the open market\n', '\t\texchangeToken.enableTransfers(true);\n', '\t\t\n', '\t\t// Restore ownership to controller\n', '\t\texchangeToken.changeController(controller);\n', '\n', '\t\tselfdestruct(msg.sender);\n', '\t}\n', '\t\n', '\t/* The function without name is the default function that is called whenever anyone sends funds to a contract */\n', '\tfunction () payable { \n', '\t\tinvestment(); \n', '\t}\t\n', '\n', '}']
['pragma solidity ^0.4.11;\n', '\n', '/*\n', '   Copyright 2017 DappHub, LLC\n', '\n', '   Licensed under the Apache License, Version 2.0 (the "License");\n', '   you may not use this file except in compliance with the License.\n', '   You may obtain a copy of the License at\n', '\n', '       http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '   Unless required by applicable law or agreed to in writing, software\n', '   distributed under the License is distributed on an "AS IS" BASIS,\n', '   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '   See the License for the specific language governing permissions and\n', '   limitations under the License.\n', '*/\n', '\n', '// Abstract contract for the full ERC 20 Token standard\n', '// https://github.com/ethereum/EIPs/issues/20\n', '\n', 'contract ERC20Token {\n', '\tfunction totalSupply() constant returns (uint supply);\n', '\n', '\t/// @param _owner The address from which the balance will be retrieved\n', '\t/// @return The balance\n', '\tfunction balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '\t/// @notice send `_value` token to `_to` from `msg.sender`\n', '\t/// @param _to The address of the recipient\n', '\t/// @param _value The amount of token to be transferred\n', '\t/// @return Whether the transfer was successful or not\n', '\tfunction transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '\t/// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '\t/// @param _from The address of the sender\n', '\t/// @param _to The address of the recipient\n', '\t/// @param _value The amount of token to be transferred\n', '\t/// @return Whether the transfer was successful or not\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '\t/// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '\t/// @param _spender The address of the account able to transfer the tokens\n', '\t/// @param _value The amount of tokens to be approved for transfer\n', '\t/// @return Whether the approval was successful or not\n', '\tfunction approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '\t/// @param _owner The address of the account owning tokens\n', '\t/// @param _spender The address of the account able to transfer the tokens\n', '\t/// @return Amount of remaining tokens allowed to spent\n', '\tfunction allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'pragma solidity ^0.4.11;\n', '\n', '/*\n', '    Copyright 2016, Jordi Baylina\n', '\n', '    This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '    This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '\n', '    You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', ' */\n', '\n', '/// @title MiniMeToken Contract\n', '/// @author Jordi Baylina\n', "/// @dev This token contract's goal is to make it easy for anyone to clone this\n", "///  token using the token distribution at a given block, this will allow DAO's\n", '///  and DApps to upgrade their features in a decentralized manner without\n', '///  affecting the original token\n', '/// @dev It is ERC20 compliant, but still needs to under go further testing.\n', '\n', '\n', '/// @dev The token controller contract must implement these functions\n', 'contract TokenController {\n', '    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n', '    /// @param _owner The address that sent the ether to create tokens\n', '    /// @return True if the ether is accepted, false if it throws\n', '    function proxyPayment(address _owner) payable returns(bool);\n', '\n', '    /// @notice Notifies the controller about a token transfer allowing the\n', '    ///  controller to react if desired\n', '    /// @param _from The origin of the transfer\n', '    /// @param _to The destination of the transfer\n', '    /// @param _amount The amount of the transfer\n', '    /// @return False if the controller does not authorize the transfer\n', '    function onTransfer(address _from, address _to, uint _amount) returns(bool);\n', '\n', '    /// @notice Notifies the controller about an approval allowing the\n', '    ///  controller to react if desired\n', '    /// @param _owner The address that calls `approve()`\n', '    /// @param _spender The spender in the `approve()` call\n', '    /// @param _amount The amount in the `approve()` call\n', '    /// @return False if the controller does not authorize the approval\n', '    function onApprove(address _owner, address _spender, uint _amount)\n', '        returns(bool);\n', '}\n', '\n', 'contract Controlled {\n', '    /// @notice The address of the controller is the only address that can call\n', '    ///  a function with this modifier\n', '    modifier onlyController { if (msg.sender != controller) throw; _; }\n', '\n', '    address public controller;\n', '\n', '    function Controlled() { controller = msg.sender;}\n', '\n', '    /// @notice Changes the controller of the contract\n', '    /// @param _newController The new controller of the contract\n', '    function changeController(address _newController) onlyController {\n', '        controller = _newController;\n', '    }\n', '}\n', '\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n', '}\n', '\n', '/// @dev The actual token contract, the default controller is the msg.sender\n', '///  that deploys the contract, so usually this token will be deployed by a\n', '///  token controller contract, which Giveth will call a "Campaign"\n', 'contract MiniMeToken is Controlled, ERC20Token {\n', '\n', "    string public name;                //The Token's name: e.g. DigixDAO Tokens\n", '    uint8 public decimals;             //Number of decimals of the smallest unit\n', '    string public symbol;              //An identifier: e.g. REP\n', "    string public version = 'MMT_0.1'; //An arbitrary versioning scheme\n", '\n', '    /// @dev `Checkpoint` is the structure that attaches a block number to a\n', '    ///  given value, the block number attached is the one that last changed the\n', '    ///  value\n', '    struct  Checkpoint {\n', '\n', '        // `fromBlock` is the block number that the value was generated from\n', '        uint128 fromBlock;\n', '\n', '        // `value` is the amount of tokens at a specific block number\n', '        uint128 value;\n', '    }\n', '\n', '    // `parentToken` is the Token address that was cloned to produce this token;\n', '    //  it will be 0x0 for a token that was not cloned\n', '    MiniMeToken public parentToken;\n', '\n', '    // `parentSnapShotBlock` is the block number from the Parent Token that was\n', '    //  used to determine the initial distribution of the Clone Token\n', '    uint public parentSnapShotBlock;\n', '\n', '    // `creationBlock` is the block number that the Clone Token was created\n', '    uint public creationBlock;\n', '\n', '    // `balances` is the map that tracks the balance of each address, in this\n', '    //  contract when the balance changes the block number that the change\n', '    //  occurred is also included in the map\n', '    mapping (address => Checkpoint[]) balances;\n', '\n', '    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    // Tracks the history of the `totalSupply` of the token\n', '    Checkpoint[] totalSupplyHistory;\n', '\n', '    // Flag that determines if the token is transferable or not.\n', '    bool public transfersEnabled;\n', '\n', '    // The factory used to create new clone tokens\n', '    MiniMeTokenFactory public tokenFactory;\n', '\n', '////////////////\n', '// Constructor\n', '////////////////\n', '\n', '    /// @notice Constructor to create a MiniMeToken\n', '    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\n', '    ///  will create the Clone token contracts, the token factory needs to be\n', '    ///  deployed first\n', '    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\n', '    ///  new token\n', '    /// @param _parentSnapShotBlock Block of the parent token that will\n', '    ///  determine the initial distribution of the clone token, set to 0 if it\n', '    ///  is a new token\n', '    /// @param _tokenName Name of the new token\n', '    /// @param _decimalUnits Number of decimals of the new token\n', '    /// @param _tokenSymbol Token Symbol for the new token\n', '    /// @param _transfersEnabled If true, tokens will be able to be transferred\n', '    function MiniMeToken(\n', '        address _tokenFactory,\n', '        address _parentToken,\n', '        uint _parentSnapShotBlock,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol,\n', '        bool _transfersEnabled\n', '    ) {\n', '        tokenFactory = MiniMeTokenFactory(_tokenFactory);\n', '        name = _tokenName;                                 // Set the name\n', '        decimals = _decimalUnits;                          // Set the decimals\n', '        symbol = _tokenSymbol;                             // Set the symbol\n', '        parentToken = MiniMeToken(_parentToken);\n', '        parentSnapShotBlock = _parentSnapShotBlock;\n', '        transfersEnabled = _transfersEnabled;\n', '        creationBlock = block.number;\n', '    }\n', '\n', '\n', '///////////////////\n', '// ERC20 Methods\n', '///////////////////\n', '\n', '\t/**\n', '\t*\n', '\t* Fix for the ERC20 short address attack\n', '\t*\n', '\t* http://vessenes.com/the-erc20-short-address-attack-explained/\n', '\t*/\n', '\tmodifier onlyPayloadSize(uint size) {\n', '\t\tif(msg.data.length != size + 4) {\n', '\t\tthrow;\n', '\t\t}\n', '\t\t_;\n', '\t}\n', '\n', '\t/// @notice Send `_amount` tokens to `_to` from `msg.sender`\n', '\t/// @param _to The address of the recipient\n', '\t/// @param _amount The amount of tokens to be transferred\n', '\t/// @return Whether the transfer was successful or not\n', '\tfunction transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) returns (bool success) {\n', '\t\tif (!transfersEnabled) throw;\n', '\t\treturn doTransfer(msg.sender, _to, _amount);\n', '    }\n', '\n', '    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n', '    ///  is approved by `_from`\n', '    /// @param _from The address holding the tokens being transferred\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return True if the transfer was successful\n', '    function transferFrom(address _from, address _to, uint256 _amount\n', '    ) returns (bool success) {\n', '\n', '        // The controller of this contract can move tokens around at will,\n', '        //  this is important to recognize! Confirm that you trust the\n', '        //  controller of this contract, which in most situations should be\n', '        //  another open source smart contract or 0x0\n', '        if (msg.sender != controller) {\n', '            if (!transfersEnabled) throw;\n', '\n', '            // The standard ERC 20 transferFrom functionality\n', '            if (allowed[_from][msg.sender] < _amount) return false;\n', '            allowed[_from][msg.sender] -= _amount;\n', '        }\n', '        return doTransfer(_from, _to, _amount);\n', '    }\n', '\n', '    /// @dev This is the actual transfer function in the token contract, it can\n', '    ///  only be called by other functions in this contract.\n', '    /// @param _from The address holding the tokens being transferred\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return True if the transfer was successful\n', '    function doTransfer(address _from, address _to, uint _amount\n', '    ) internal returns(bool) {\n', '\n', '           if (_amount == 0) {\n', '               return true;\n', '           }\n', '\n', '           if (parentSnapShotBlock >= block.number) throw;\n', '\n', '           // Do not allow transfer to 0x0 or the token contract itself\n', '           if ((_to == 0) || (_to == address(this))) throw;\n', '\n', '           // If the amount being transfered is more than the balance of the\n', '           //  account the transfer returns false\n', '           var previousBalanceFrom = balanceOfAt(_from, block.number);\n', '           if (previousBalanceFrom < _amount) {\n', '               return false;\n', '           }\n', '\n', '           // Alerts the token controller of the transfer\n', '           if (isContract(controller)) {\n', '               if (!TokenController(controller).onTransfer(_from, _to, _amount))\n', '               throw;\n', '           }\n', '\n', '           // First update the balance array with the new value for the address\n', '           //  sending the tokens\n', '           updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\n', '\n', '           // Then update the balance array with the new value for the address\n', '           //  receiving the tokens\n', '           var previousBalanceTo = balanceOfAt(_to, block.number);\n', '           if (previousBalanceTo + _amount < previousBalanceTo) throw; // Check for overflow\n', '           updateValueAtNow(balances[_to], previousBalanceTo + _amount);\n', '\n', '           // An event to make the transfer easy to find on the blockchain\n', '           Transfer(_from, _to, _amount);\n', '\n', '           return true;\n', '    }\n', '\n', "    /// @param _owner The address that's balance is being requested\n", '    /// @return The balance of `_owner` at the current block\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balanceOfAt(_owner, block.number);\n', '    }\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n', '    ///  its behalf. This is a modified version of the ERC20 approve function\n', '    ///  to be a little bit safer\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _amount The amount of tokens to be approved for transfer\n', '    /// @return True if the approval was successful\n', '    function approve(address _spender, uint256 _amount) returns (bool success) {\n', '        if (!transfersEnabled) throw;\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender,0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        if ((_amount!=0) && (allowed[msg.sender][_spender] !=0)) throw;\n', '\n', '        // Alerts the token controller of the approve function call\n', '        if (isContract(controller)) {\n', '            if (!TokenController(controller).onApprove(msg.sender, _spender, _amount))\n', '                throw;\n', '        }\n', '\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    /// @dev This function makes it easy to read the `allowed[]` map\n', '    /// @param _owner The address of the account that owns the token\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens of _owner that _spender is allowed\n', '    ///  to spend\n', '    function allowance(address _owner, address _spender\n', '    ) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n', '    ///  its behalf, and then a function is triggered in the contract that is\n', '    ///  being approved, `_spender`. This allows users to use their tokens to\n', '    ///  interact with contracts in one function call instead of two\n', '    /// @param _spender The address of the contract able to transfer the tokens\n', '    /// @param _amount The amount of tokens to be approved for transfer\n', '    /// @return True if the function call was successful\n', '    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n', '    ) returns (bool success) {\n', '        if (!approve(_spender, _amount)) throw;\n', '\n', '        ApproveAndCallFallBack(_spender).receiveApproval(\n', '            msg.sender,\n', '            _amount,\n', '            this,\n', '            _extraData\n', '        );\n', '\n', '        return true;\n', '    }\n', '\n', '    /// @dev This function makes it easy to get the total number of tokens\n', '    /// @return The total number of tokens\n', '    function totalSupply() constant returns (uint) {\n', '        return totalSupplyAt(block.number);\n', '    }\n', '\n', '\n', '////////////////\n', '// Query balance and totalSupply in History\n', '////////////////\n', '\n', '    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @param _blockNumber The block number when the balance is queried\n', '    /// @return The balance at `_blockNumber`\n', '    function balanceOfAt(address _owner, uint _blockNumber) constant\n', '        returns (uint) {\n', '\n', '        // These next few lines are used when the balance of the token is\n', '        //  requested before a check point was ever created for this token, it\n', '        //  requires that the `parentToken.balanceOfAt` be queried at the\n', '        //  genesis block for that token as this contains initial balance of\n', '        //  this token\n', '        if ((balances[_owner].length == 0)\n', '            || (balances[_owner][0].fromBlock > _blockNumber)) {\n', '            if (address(parentToken) != 0) {\n', '                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\n', '            } else {\n', '                // Has no parent\n', '                return 0;\n', '            }\n', '\n', '        // This will return the expected balance during normal situations\n', '        } else {\n', '            return getValueAt(balances[_owner], _blockNumber);\n', '        }\n', '    }\n', '\n', '    /// @notice Total amount of tokens at a specific `_blockNumber`.\n', '    /// @param _blockNumber The block number when the totalSupply is queried\n', '    /// @return The total amount of tokens at `_blockNumber`\n', '    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n', '\n', '        // These next few lines are used when the totalSupply of the token is\n', '        //  requested before a check point was ever created for this token, it\n', '        //  requires that the `parentToken.totalSupplyAt` be queried at the\n', '        //  genesis block for this token as that contains totalSupply of this\n', '        //  token at this block number.\n', '        if ((totalSupplyHistory.length == 0)\n', '            || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n', '            if (address(parentToken) != 0) {\n', '                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\n', '            } else {\n', '                return 0;\n', '            }\n', '\n', '        // This will return the expected totalSupply during normal situations\n', '        } else {\n', '            return getValueAt(totalSupplyHistory, _blockNumber);\n', '        }\n', '    }\n', '\n', '////////////////\n', '// Clone Token Method\n', '////////////////\n', '\n', '    /// @notice Creates a new clone token with the initial distribution being\n', '    ///  this token at `_snapshotBlock`\n', '    /// @param _cloneTokenName Name of the clone token\n', '    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\n', '    /// @param _cloneTokenSymbol Symbol of the clone token\n', '    /// @param _snapshotBlock Block when the distribution of the parent token is\n', '    ///  copied to set the initial distribution of the new clone token;\n', '    ///  if the block is zero than the actual block, the current block is used\n', '    /// @param _transfersEnabled True if transfers are allowed in the clone\n', '    /// @return The address of the new MiniMeToken Contract\n', '    function createCloneToken(\n', '        string _cloneTokenName,\n', '        uint8 _cloneDecimalUnits,\n', '        string _cloneTokenSymbol,\n', '        uint _snapshotBlock,\n', '        bool _transfersEnabled\n', '        ) onlyController returns(address) {\n', '        if (_snapshotBlock == 0) _snapshotBlock = block.number;\n', '        MiniMeToken cloneToken = tokenFactory.createCloneToken(\n', '            this,\n', '            _snapshotBlock,\n', '            _cloneTokenName,\n', '            _cloneDecimalUnits,\n', '            _cloneTokenSymbol,\n', '            _transfersEnabled\n', '            );\n', '\n', '        cloneToken.changeController(msg.sender);\n', '\n', '        // An event to make the token easy to find on the blockchain\n', '        NewCloneToken(address(cloneToken), _snapshotBlock);\n', '        return address(cloneToken);\n', '    }\n', '\n', '////////////////\n', '// Generate and destroy tokens\n', '////////////////\n', '\n', '    /// @notice Generates `_amount` tokens that are assigned to `_owner`\n', '    /// @param _owner The address that will be assigned the new tokens\n', '    /// @param _amount The quantity of tokens generated\n', '    /// @return True if the tokens are generated correctly\n', '    function generateTokens(address _owner, uint _amount) onlyController returns (bool) {\n', '        uint curTotalSupply = getValueAt(totalSupplyHistory, block.number);\n', '        if (curTotalSupply + _amount < curTotalSupply) throw; // Check for overflow\n', '\t\t\n', '        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n', '        var previousBalanceTo = balanceOf(_owner);\n', '        if (previousBalanceTo + _amount < previousBalanceTo) throw; // Check for overflow\n', '\t\t\n', '        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n', '        Transfer(0, _owner, _amount);\n', '        return true;\n', '    }\n', '\n', '\n', '    /// @notice Burns `_amount` tokens from `_owner`\n', '    /// @param _owner The address that will lose the tokens\n', '    /// @param _amount The quantity of tokens to burn\n', '    /// @return True if the tokens are burned correctly\n', '    function destroyTokens(address _owner, uint _amount\n', '    ) onlyController returns (bool) {\n', '        uint curTotalSupply = getValueAt(totalSupplyHistory, block.number);\n', '        if (curTotalSupply < _amount) throw;\n', '        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n', '        var previousBalanceFrom = balanceOf(_owner);\n', '        if (previousBalanceFrom < _amount) throw;\n', '        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n', '        Transfer(_owner, 0, _amount);\n', '        return true;\n', '    }\n', '\n', '////////////////\n', '// Enable tokens transfers\n', '////////////////\n', '\n', '\n', '    /// @notice Enables token holders to transfer their tokens freely if true\n', '    /// @param _transfersEnabled True if transfers are allowed in the clone\n', '    function enableTransfers(bool _transfersEnabled) onlyController {\n', '        transfersEnabled = _transfersEnabled;\n', '    }\n', '\n', '////////////////\n', '// Internal helper functions to query and set a value in a snapshot array\n', '////////////////\n', '\n', '    /// @dev `getValueAt` retrieves the number of tokens at a given block number\n', '    /// @param checkpoints The history of values being queried\n', '    /// @param _block The block number to retrieve the value at\n', '    /// @return The number of tokens being queried\n', '    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n', '    ) constant internal returns (uint) {\n', '        if (checkpoints.length == 0) return 0;\n', '\n', '        // Shortcut for the actual value\n', '        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\n', '            return checkpoints[checkpoints.length-1].value;\n', '        if (_block < checkpoints[0].fromBlock) return 0;\n', '\n', '        // Binary search of the value in the array\n', '        uint min = 0;\n', '        uint max = checkpoints.length-1;\n', '        while (max > min) {\n', '            uint mid = (max + min + 1)/ 2;\n', '            if (checkpoints[mid].fromBlock<=_block) {\n', '                min = mid;\n', '            } else {\n', '                max = mid-1;\n', '            }\n', '        }\n', '        return checkpoints[min].value;\n', '    }\n', '\n', '    /// @dev `updateValueAtNow` used to update the `balances` map and the\n', '    ///  `totalSupplyHistory`\n', '    /// @param checkpoints The history of data being updated\n', '    /// @param _value The new number of tokens\n', '    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\n', '    ) internal  {\n', '        if ((checkpoints.length == 0)\n', '        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\n', '               Checkpoint newCheckPoint = checkpoints[ checkpoints.length++ ];\n', '               newCheckPoint.fromBlock =  uint128(block.number);\n', '               newCheckPoint.value = uint128(_value);\n', '           } else {\n', '               Checkpoint oldCheckPoint = checkpoints[checkpoints.length-1];\n', '               oldCheckPoint.value = uint128(_value);\n', '           }\n', '    }\n', '\n', '    /// @dev Internal function to determine if an address is a contract\n', '    /// @param _addr The address being queried\n', '    /// @return True if `_addr` is a contract\n', '    function isContract(address _addr) constant internal returns(bool) {\n', '        uint size;\n', '        if (_addr == 0) return false;\n', '        assembly {\n', '            size := extcodesize(_addr)\n', '        }\n', '        return size>0;\n', '    }\n', '\n', '    /// @dev Helper function to return a min betwen the two uints\n', '    function min(uint a, uint b) internal returns (uint) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', "    /// @notice The fallback function: If the contract's controller has not been\n", '    ///  set to 0, then the `proxyPayment` method is called which relays the\n', '    ///  ether and creates tokens as described in the token controller contract\n', '    function ()  payable {\n', '        if (isContract(controller)) {\n', '            if (! TokenController(controller).proxyPayment.value(msg.value)(msg.sender))\n', '                throw;\n', '        } else {\n', '            throw;\n', '        }\n', '    }\n', '\n', '\n', '\t////////////////\n', '\t// Events\n', '\t////////////////\n', '\tevent Transfer(address indexed _from, address indexed _to, uint256 _amount);\n', '\tevent NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\n', '\tevent Approval(address indexed _owner, address indexed _spender, uint256 _amount);\n', '\n', '}\n', '\n', '////////////////\n', '// MiniMeTokenFactory\n', '////////////////\n', '\n', '/// @dev This contract is used to generate clone contracts from a contract.\n', '///  In solidity this is the way to create a contract from a contract of the\n', '///  same class\n', 'contract MiniMeTokenFactory {\n', '\n', '    /// @notice Update the DApp by creating a new token with new functionalities\n', '    ///  the msg.sender becomes the controller of this clone token\n', '    /// @param _parentToken Address of the token being cloned\n', '    /// @param _snapshotBlock Block of the parent token that will\n', '    ///  determine the initial distribution of the clone token\n', '    /// @param _tokenName Name of the new token\n', '    /// @param _decimalUnits Number of decimals of the new token\n', '    /// @param _tokenSymbol Token Symbol for the new token\n', '    /// @param _transfersEnabled If true, tokens will be able to be transferred\n', '    /// @return The address of the new token contract\n', '    function createCloneToken(\n', '        address _parentToken,\n', '        uint _snapshotBlock,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol,\n', '        bool _transfersEnabled\n', '    ) returns (MiniMeToken) {\n', '        MiniMeToken newToken = new MiniMeToken(\n', '            this,\n', '            _parentToken,\n', '            _snapshotBlock,\n', '            _tokenName,\n', '            _decimalUnits,\n', '            _tokenSymbol,\n', '            _transfersEnabled\n', '            );\n', '\n', '        newToken.changeController(msg.sender);\n', '        return newToken;\n', '    }\n', '}\n', '\n', '/// @title Clit Token (CLIT) - Crowd funding code for CLIT Coin project\n', '/// \n', '\n', '\n', 'contract ClitCoinToken is MiniMeToken {\n', '\n', '\n', '\tfunction ClitCoinToken(\n', '\t\t//address _tokenFactory\n', '\t) MiniMeToken(\n', '\t\t0x0,\n', '\t\t0x0,            // no parent token\n', '\t\t0,              // no snapshot block number from parent\n', '\t\t"CLIT Token", \t// Token name\n', '\t\t0,              // Decimals\n', '\t\t"CLIT",         // Symbol\n', '\t\tfalse            // Enable transfers\n', '\t) {\n', '\t\tversion = "CLIT 1.0";\n', '\t}\n', '\n', '\n', '}\n', '\n', '/*\n', ' * Math operations with safety checks\n', ' */\n', 'contract SafeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    assert(b > 0);\n', '    uint c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract ClitCrowdFunder is Controlled, SafeMath {\n', '\n', '\taddress public creator;\n', '    address public fundRecipient;\n', '\t\n', '\t// State variables\n', '    State public state = State.Fundraising; // initialize on create\t\n', '    uint public fundingGoal; \n', '\tuint public totalRaised;\n', '\tuint public currentBalance;\n', '\tuint public issuedTokenBalance;\n', '\tuint public totalTokensIssued;\n', '\tuint public capTokenAmount;\n', '\tuint public startBlockNumber;\n', '\tuint public endBlockNumber;\n', '\tuint public eolBlockNumber;\n', '\t\n', '\tuint public firstExchangeRatePeriod;\n', '\tuint public secondExchangeRatePeriod;\n', '\tuint public thirdExchangeRatePeriod;\n', '\tuint public fourthExchangeRatePeriod;\n', '\t\n', '\tuint public firstTokenExchangeRate;\n', '\tuint public secondTokenExchangeRate;\n', '\tuint public thirdTokenExchangeRate;\n', '\tuint public fourthTokenExchangeRate;\n', '\tuint public finalTokenExchangeRate;\t\n', '\t\n', '\tbool public fundingGoalReached;\n', '\t\n', '    ClitCoinToken public exchangeToken;\n', '\t\n', '\t/* This generates a public event on the blockchain that will notify clients */\n', '\tevent HardCapReached(address fundRecipient, uint amountRaised);\n', '\tevent GoalReached(address fundRecipient, uint amountRaised);\n', '\tevent FundTransfer(address backer, uint amount, bool isContribution);\t\n', '\tevent FrozenFunds(address target, bool frozen);\n', '\tevent RefundPeriodStarted();\n', '\n', '\t/* data structure to hold information about campaign contributors */\n', '\tmapping(address => uint256) private balanceOf;\n', '\tmapping (address => bool) private frozenAccount;\n', '\t\n', '\t// Data structures\n', '    enum State {\n', '\t\tFundraising,\n', '\t\tExpiredRefund,\n', '\t\tSuccessful,\n', '\t\tClosed\n', '\t}\n', '\t\n', '\t/*\n', '     *  Modifiers\n', '     */\n', '\n', '\tmodifier inState(State _state) {\n', '        if (state != _state) throw;\n', '        _;\n', '    }\n', '\t\n', '\t// Add one week to endBlockNumber\n', '\tmodifier atEndOfLifecycle() {\n', '        if(!((state == State.ExpiredRefund && block.number > eolBlockNumber) || state == State.Successful)) {\n', '            throw;\n', '        }\n', '        _;\n', '    }\n', '\t\n', '\tmodifier accountNotFrozen() {\n', '        if (frozenAccount[msg.sender] == true) throw;\n', '        _;\n', '    }\n', '\t\n', '    modifier minInvestment() {\n', '      // User has to send at least 0.01 Eth\n', '      require(msg.value >= 10 ** 16);\n', '      _;\n', '    }\n', '\t\n', '\tmodifier isStarted() {\n', '\t\trequire(block.number >= startBlockNumber);\n', '\t\t_;\n', '\t}\n', '\n', '\t/*  at initialization, setup the owner */\n', '\tfunction ClitCrowdFunder(\n', '\t\taddress _fundRecipient,\n', '\t\tuint _delayStartHours,\n', '\t\tClitCoinToken _addressOfExchangeToken\n', '\t) {\n', '\t\tcreator = msg.sender;\n', '\t\t\n', '\t\tfundRecipient = _fundRecipient;\n', '\t\tfundingGoal = 7000 * 1 ether;\n', '\t\tcapTokenAmount = 140 * 10 ** 6;\n', '\t\tstate = State.Fundraising;\n', '\t\tfundingGoalReached = false;\n', '\t\t\n', '\t\ttotalRaised = 0;\n', '\t\tcurrentBalance = 0;\n', '\t\ttotalTokensIssued = 0;\n', '\t\tissuedTokenBalance = 0;\n', '\t\t\n', '\t\tstartBlockNumber = block.number + div(mul(3600, _delayStartHours), 14);\n', '\t\tendBlockNumber = startBlockNumber + div(mul(3600, 1080), 14); // 45 days \n', '\t\teolBlockNumber = endBlockNumber + div(mul(3600, 168), 14);  // one week - contract end of life\n', '\n', '\t\tfirstExchangeRatePeriod = startBlockNumber + div(mul(3600, 24), 14);   // First 24 hour sale \n', '\t\tsecondExchangeRatePeriod = firstExchangeRatePeriod + div(mul(3600, 240), 14); // Next 10 days\n', '\t\tthirdExchangeRatePeriod = secondExchangeRatePeriod + div(mul(3600, 240), 14); // Next 10 days\n', '\t\tfourthExchangeRatePeriod = thirdExchangeRatePeriod + div(mul(3600, 240), 14); // Next 10 days\n', '\t\t\n', '\t\tuint _tokenExchangeRate = 1000;\n', '\t\tfirstTokenExchangeRate = (_tokenExchangeRate + 1000);\t\n', '\t\tsecondTokenExchangeRate = (_tokenExchangeRate + 500);\n', '\t\tthirdTokenExchangeRate = (_tokenExchangeRate + 300);\n', '\t\tfourthTokenExchangeRate = (_tokenExchangeRate + 100);\n', '\t\tfinalTokenExchangeRate = _tokenExchangeRate;\n', '\t\t\n', '\t\texchangeToken = ClitCoinToken(_addressOfExchangeToken);\n', '\t}\n', '\t\n', '\tfunction freezeAccount(address target, bool freeze) onlyController {\n', '        frozenAccount[target] = freeze;\n', '        FrozenFunds(target, freeze);\n', '    }\t\n', '\t\n', '\tfunction getCurrentExchangeRate(uint amount) public constant returns(uint) {\n', '\t\tif (block.number <= firstExchangeRatePeriod) {\n', '\t\t\treturn firstTokenExchangeRate * amount / 1 ether;\n', '\t\t} else if (block.number <= secondExchangeRatePeriod) {\n', '\t\t\treturn secondTokenExchangeRate * amount / 1 ether;\n', '\t\t} else if (block.number <= thirdExchangeRatePeriod) {\n', '\t\t\treturn thirdTokenExchangeRate * amount / 1 ether;\n', '\t\t} else if (block.number <= fourthExchangeRatePeriod) {\n', '\t\t\treturn fourthTokenExchangeRate * amount / 1 ether;\n', '\t\t} else if (block.number <= endBlockNumber) {\n', '\t\t\treturn finalTokenExchangeRate * amount / 1 ether;\n', '\t\t}\n', '\t\t\n', '\t\treturn finalTokenExchangeRate * amount / 1 ether;\n', '\t}\n', '\n', '\tfunction investment() public inState(State.Fundraising) isStarted accountNotFrozen minInvestment payable returns(uint)  {\n', '\t\t\n', '\t\tuint amount = msg.value;\n', '\t\tif (amount == 0) throw;\n', '\t\t\n', '\t\tbalanceOf[msg.sender] += amount;\t\n', '\t\t\n', '\t\ttotalRaised += amount;\n', '\t\tcurrentBalance += amount;\n', '\t\t\t\t\t\t\n', '\t\tuint tokenAmount = getCurrentExchangeRate(amount);\n', '\t\texchangeToken.generateTokens(msg.sender, tokenAmount);\n', '\t\ttotalTokensIssued += tokenAmount;\n', '\t\tissuedTokenBalance += tokenAmount;\n', '\t\t\n', '\t\tFundTransfer(msg.sender, amount, true); \n', '\t\t\n', '\t\tcheckIfFundingCompleteOrExpired();\n', '\t\t\n', '\t\treturn balanceOf[msg.sender];\n', '\t}\n', '\n', '\tfunction checkIfFundingCompleteOrExpired() {\n', '\t\tif (block.number > endBlockNumber || totalTokensIssued >= capTokenAmount ) {\n', '\t\t\t// Hard limit reached\n', '\t\t\tif (currentBalance > fundingGoal || fundingGoalReached == true) {\n', '\t\t\t\tstate = State.Successful;\n', '\t\t\t\tpayOut();\n', '\t\t\t\t\n', '\t\t\t\tHardCapReached(fundRecipient, totalRaised);\n', '\t\t\t\t\n', '\t\t\t\t// Contract can be immediately closed out\n', '\t\t\t\tremoveContract();\n', '\n', '\t\t\t} else  {\n', '\t\t\t\tstate = State.ExpiredRefund; // backers can now collect refunds by calling getRefund()\n', '\t\t\t\t\n', '\t\t\t\tRefundPeriodStarted();\n', '\t\t\t}\n', '\t\t} else if (currentBalance > fundingGoal && fundingGoalReached == false) {\n', '\t\t\t// Once goal reached\n', '\t\t\tfundingGoalReached = true;\n', '\t\t\t\n', '\t\t\tstate = State.Successful;\n', '\t\t\tpayOut();\n', '\t\t\t\n', '\t\t\t// Continue allowing users to buy in\n', '\t\t\tstate = State.Fundraising;\n', '\t\t\t\n', '\t\t\t// currentBalance is zero after pay out\n', '\t\t\tGoalReached(fundRecipient, totalRaised);\n', '\t\t}\n', '\t}\n', '\n', '\tfunction payOut() public inState(State.Successful) {\n', '\t\t// Ethereum balance\n', '\t\tvar amount = currentBalance;\n', '\t\tcurrentBalance = 0;\n', '\n', '\t\tfundRecipient.transfer(amount);\n', '\t\t\n', '\t\t// Update the token reserve amount so that 50% of tokens remain in reserve\n', '\t\tvar tokenCount = issuedTokenBalance;\n', '\t\tissuedTokenBalance = 0;\n', '\t\t\n', '\t\texchangeToken.generateTokens(fundRecipient, tokenCount);\t\t\n', '\t}\n', '\n', '\tfunction getRefund() public inState(State.ExpiredRefund) {\t\n', '\t\tuint amountToRefund = balanceOf[msg.sender];\n', '\t\tbalanceOf[msg.sender] = 0;\n', '\t\t\n', '\t\t// throws error if fails\n', '\t\tmsg.sender.transfer(amountToRefund);\n', '\t\tcurrentBalance -= amountToRefund;\n', '\t\t\n', '\t\tFundTransfer(msg.sender, amountToRefund, false);\n', '\t}\n', '\t\n', '\tfunction removeContract() public atEndOfLifecycle {\t\t\n', '\t\tstate = State.Closed;\n', '\t\t\n', '\t\t// Allow clit owners to freely trade coins on the open market\n', '\t\texchangeToken.enableTransfers(true);\n', '\t\t\n', '\t\t// Restore ownership to controller\n', '\t\texchangeToken.changeController(controller);\n', '\n', '\t\tselfdestruct(msg.sender);\n', '\t}\n', '\t\n', '\t/* The function without name is the default function that is called whenever anyone sends funds to a contract */\n', '\tfunction () payable { \n', '\t\tinvestment(); \n', '\t}\t\n', '\n', '}']
