['pragma solidity ^0.4.8;\n', '\n', '// ----------------------------------------------------------------------------------------------\n', '// Unique ICO deposit contacts for customers to deposit ethers that are sent to different\n', '// wallets\n', '//\n', '// Enjoy. (c) Bok Consulting Pty Ltd & Incent Rewards 2017. The MIT Licence.\n', '// ----------------------------------------------------------------------------------------------\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        if (msg.sender != owner) throw;\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract ICODepositContract {\n', '    uint256 public totalDeposit;\n', '    ICOCustomerDeposit public customerDeposit;\n', '\n', '    function ICODepositContract(ICOCustomerDeposit _customerDeposit) {\n', '        customerDeposit = _customerDeposit;\n', '    }\n', '\n', '    function () payable {\n', '        totalDeposit += msg.value;\n', 'customerDeposit.customerDepositedEther.value(msg.value)();\n', '    }\n', '}\n', '\n', '\n', 'contract ICOCustomerDeposit is Owned {\n', '    uint256 public totalDeposits;\n', '    ICODepositContract[] public contracts;\n', '\n', '    event Deposit(address indexed _from, uint _value);\n', '\n', '    // Define destination addresses\n', '    // 0.5%\n', '    address incentToCustomer = 0xa5f93F2516939d592f00c1ADF0Af4ABE589289ba;\n', '    // 0.5%\n', '    address icoFees = 0x38671398aD25461FB446A9BfaC2f4ED857C86863;\n', '    // 99%\n', '    address icoClientWallet = 0x994B085D71e0f9a7A36bE4BE691789DBf19009c8;\n', '\n', '    function createNewDepositContract(uint256 number) onlyOwner {\n', '        for (uint256 i = 0; i < number; i++) {\n', '            ICODepositContract depositContract = new ICODepositContract(this);\n', '            contracts.push(depositContract);\n', '        }\n', '    }\n', '\n', '    function customerDepositedEther() payable {\n', '        totalDeposits += msg.value;\n', '        uint256 value1 = msg.value * 1 / 200;\n', '        if (!incentToCustomer.send(value1)) throw;\n', '        uint256 value2 = msg.value * 1 / 200;\n', '        if (!icoFees.send(value2)) throw;\n', '        uint256 value3 = msg.value - value1 - value2;\n', '        if (!icoClientWallet.send(value3)) throw;\n', '        Deposit(msg.sender, msg.value);\n', '    }\n', '\n', '    // Prevent accidental sending of ethers\n', '    function () {\n', '        throw;\n', '    }\n', '}']