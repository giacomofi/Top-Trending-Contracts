['pragma solidity 0.4.11;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control \n', ' * functions, this simplifies the implementation of "user permissions". \n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /** \n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner. \n', '   */\n', '  modifier onlyOwner() {\n', '    if (msg.sender != owner) {\n', '      throw;\n', '    }\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to. \n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ExchangeRate\n', ' * @dev Allows updating and retrieveing of Conversion Rates for PAY tokens\n', ' *\n', ' * ABI\n', ' * [{"constant":false,"inputs":[{"name":"_symbol","type":"string"},{"name":"_rate","type":"uint256"}],"name":"updateRate","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"data","type":"uint256[]"}],"name":"updateRates","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_symbol","type":"string"}],"name":"getRate","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"rates","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"type":"function"},{"anonymous":false,"inputs":[{"indexed":false,"name":"timestamp","type":"uint256"},{"indexed":false,"name":"symbol","type":"bytes32"},{"indexed":false,"name":"rate","type":"uint256"}],"name":"RateUpdated","type":"event"}]\n', ' */\n', 'contract ExchangeRate is Ownable {\n', '\n', '  event RateUpdated(uint timestamp, bytes32 symbol, uint rate);\n', '\n', '  mapping(bytes32 => uint) public rates;\n', '\n', '  /**\n', '   * @dev Allows the current owner to update a single rate.\n', '   * @param _symbol The symbol to be updated. \n', '   * @param _rate the rate for the symbol. \n', '   */\n', '  function updateRate(string _symbol, uint _rate) public onlyOwner {\n', '    rates[sha3(_symbol)] = _rate;\n', '    RateUpdated(now, sha3(_symbol), _rate);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to update multiple rates.\n', '   * @param data an array that alternates sha3 hashes of the symbol and the corresponding rate . \n', '   */\n', '  function updateRates(uint[] data) public onlyOwner {\n', '    if (data.length % 2 > 0)\n', '      throw;\n', '    uint i = 0;\n', '    while (i < data.length / 2) {\n', '      bytes32 symbol = bytes32(data[i * 2]);\n', '      uint rate = data[i * 2 + 1];\n', '      rates[symbol] = rate;\n', '      RateUpdated(now, symbol, rate);\n', '      i++;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the anyone to read the current rate.\n', '   * @param _symbol the symbol to be retrieved. \n', '   */\n', '  function getRate(string _symbol) public constant returns(uint) {\n', '    return rates[sha3(_symbol)];\n', '  }\n', '\n', '}']
['pragma solidity 0.4.11;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control \n', ' * functions, this simplifies the implementation of "user permissions". \n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /** \n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner. \n', '   */\n', '  modifier onlyOwner() {\n', '    if (msg.sender != owner) {\n', '      throw;\n', '    }\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to. \n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ExchangeRate\n', ' * @dev Allows updating and retrieveing of Conversion Rates for PAY tokens\n', ' *\n', ' * ABI\n', ' * [{"constant":false,"inputs":[{"name":"_symbol","type":"string"},{"name":"_rate","type":"uint256"}],"name":"updateRate","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"data","type":"uint256[]"}],"name":"updateRates","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_symbol","type":"string"}],"name":"getRate","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"","type":"bytes32"}],"name":"rates","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"payable":false,"type":"function"},{"anonymous":false,"inputs":[{"indexed":false,"name":"timestamp","type":"uint256"},{"indexed":false,"name":"symbol","type":"bytes32"},{"indexed":false,"name":"rate","type":"uint256"}],"name":"RateUpdated","type":"event"}]\n', ' */\n', 'contract ExchangeRate is Ownable {\n', '\n', '  event RateUpdated(uint timestamp, bytes32 symbol, uint rate);\n', '\n', '  mapping(bytes32 => uint) public rates;\n', '\n', '  /**\n', '   * @dev Allows the current owner to update a single rate.\n', '   * @param _symbol The symbol to be updated. \n', '   * @param _rate the rate for the symbol. \n', '   */\n', '  function updateRate(string _symbol, uint _rate) public onlyOwner {\n', '    rates[sha3(_symbol)] = _rate;\n', '    RateUpdated(now, sha3(_symbol), _rate);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to update multiple rates.\n', '   * @param data an array that alternates sha3 hashes of the symbol and the corresponding rate . \n', '   */\n', '  function updateRates(uint[] data) public onlyOwner {\n', '    if (data.length % 2 > 0)\n', '      throw;\n', '    uint i = 0;\n', '    while (i < data.length / 2) {\n', '      bytes32 symbol = bytes32(data[i * 2]);\n', '      uint rate = data[i * 2 + 1];\n', '      rates[symbol] = rate;\n', '      RateUpdated(now, symbol, rate);\n', '      i++;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the anyone to read the current rate.\n', '   * @param _symbol the symbol to be retrieved. \n', '   */\n', '  function getRate(string _symbol) public constant returns(uint) {\n', '    return rates[sha3(_symbol)];\n', '  }\n', '\n', '}']
