['// Presale interface\n', '\n', 'pragma solidity ^0.4.16;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Presale {\n', '  using SafeMath for uint256;\n', '\n', '  mapping (address => uint256) public balances;\n', '\n', '  // Minimum amount of wei required for presale to be successful.  If not successful, refunds are provided.\n', '  uint256 public minGoal;\n', '  // Maximum amount of wei for presale to raise.\n', '  uint256 public maxGoal;\n', '  // The epoch unix timestamp of when the presale starts\n', '  uint256 public startTime;\n', '  // The epoch unix timestamp of when the presale ends\n', '  uint256 public endTime;\n', '  // The wallet address that the funds will be sent to\n', '  address public projectWallet;\n', '\n', '  uint256 private totalRaised;\n', '\n', '  function Presale(\n', '    uint256 _minGoal,\n', '    uint256 _maxGoal,\n', '    uint256 _startTime,\n', '    uint256 _endTime,\n', '    address _projectWallet\n', '  )\n', '  {\n', '    require(_minGoal > 0);\n', '    require(_endTime > _startTime);\n', '    require(_projectWallet != address(0x0));\n', '    require(_maxGoal > _minGoal);\n', '\n', '    minGoal = _minGoal;\n', '    maxGoal = _maxGoal;\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    projectWallet = _projectWallet;\n', '  }\n', '\n', '  function transferToProjectWallet() {\n', '    // only allow transfers if there is balance\n', '    require(this.balance > 0);\n', '    // only allow transfers if minimum goal is met\n', '    require(totalRaised >= minGoal);\n', '    if(!projectWallet.send(this.balance)) {\n', '      revert();\n', '    }\n', '  }\n', '\n', '  function refund() {\n', '    // only allow refund if the presale has ended\n', '    require(now > endTime);\n', '    // only allow refund if the minGoal has not been reached\n', '    require(totalRaised < minGoal);\n', '    // only allow refund during a 60 day window after presale ends\n', '    require(now < (endTime + 60 days));\n', '    uint256 amount = balances[msg.sender];\n', '    // only allow refund if investor has invested\n', '    require(amount > 0);\n', '    // after refunding, zero out balance\n', '    balances[msg.sender] = 0;\n', '    if (!msg.sender.send(amount)) {\n', '      revert();\n', '    }\n', '  }\n', '\n', '  function transferRemaining() {\n', '    // only allow transfer if presale has failed\n', '    require(totalRaised < minGoal);\n', '    // only allow transfer after refund window has passed\n', '    require(now >= (endTime + 60 days));\n', '    // only allow transfer if there is remaining balance\n', '    require(this.balance > 0);\n', '    projectWallet.transfer(this.balance);\n', '  }\n', '\n', '  function () payable {\n', '    // only allow payments greater than 0\n', '    require(msg.value > 0);\n', '    // only allow payments after presale has started\n', '    require(now >= startTime);\n', '    // only allow payments before presale has ended\n', '    require(now <= endTime);\n', '    // only allow payments if the maxGoal has not been reached\n', '    require(totalRaised < maxGoal);\n', '\n', '    // If this investment should cause the max to be achieved\n', '    // Then it should only accept up to the max goal\n', '    // And refund the remaining\n', '    if (totalRaised.add(msg.value) > maxGoal) {\n', '      var refundAmount = totalRaised + msg.value - maxGoal;\n', '      if (!msg.sender.send(refundAmount)) {\n', '        revert();\n', '      }\n', '      var raised = maxGoal - totalRaised;\n', '      balances[msg.sender] = balances[msg.sender].add(raised);\n', '      totalRaised = totalRaised.add(raised);\n', '    } else {\n', '      // if all checks pass, then add amount to balance of the sender\n', '      balances[msg.sender] = balances[msg.sender].add(msg.value);\n', '      totalRaised = totalRaised.add(msg.value);\n', '    }\n', '  }\n', '}\n', '\n', 'contract OpenMoneyPresale is Presale {\n', '  function OpenMoneyPresale() Presale(83.33 ether,\n', '                                      2000 ether,\n', '                                      1505649600,\n', '                                      1505995200,\n', '                                      address(0x2a00BFd8379786ADfEbb6f2F59011535a4f8d4E4))\n', '                                      {}\n', '\n', '}']