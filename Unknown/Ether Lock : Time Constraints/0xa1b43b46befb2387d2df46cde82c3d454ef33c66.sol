['pragma solidity ^0.4.8;\n', '\n', 'contract TimeLockSend {\n', '    address sender;\n', '    address recipient;\n', '    uint256 created;\n', '    uint256 deadline;\n', '    \n', '    function TimeLockSend(address _sender, address _recipient, uint256 _deadline) payable {\n', '        if (msg.value <= 0) {\n', '            throw;\n', '        }\n', '        sender = _sender;\n', '        recipient = _recipient;\n', '        created = now;\n', '        deadline = _deadline;\n', '    }\n', '    \n', '    function withdraw() {\n', '        if (msg.sender == recipient) {\n', '            selfdestruct(recipient);\n', '        } else if (msg.sender == sender && now > deadline) {\n', '            selfdestruct(sender);\n', '        } else {\n', '            throw;\n', '        }\n', '    }\n', '    \n', '    function () {\n', '        throw;\n', '    }\n', '}\n', '\n', 'contract SafeSender {\n', '    address owner;\n', '    \n', '    event TimeLockSendCreated(\n', '        address indexed sender, \n', '        address indexed recipient, \n', '        uint256 deadline,\n', '        address safeSendAddress\n', '    );\n', '    \n', '    function SafeSender() {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    function safeSend(address recipient, uint256 timeLimit) payable returns (address) {\n', '        if (msg.value <= 0 || (now + timeLimit) <= now) {\n', '            throw;\n', '        }\n', '        uint256 deadline = now + timeLimit;\n', '        TimeLockSend newSend = (new TimeLockSend).value(msg.value)(msg.sender, recipient, deadline);\n', '        if (address(newSend) == address(0)) {\n', '            throw;\n', '        }\n', '        TimeLockSendCreated(\n', '            msg.sender,\n', '            recipient,\n', '            deadline,\n', '            address(newSend)\n', '        );\n', '        return address(newSend);\n', '    }\n', '    \n', '    function withdraw() {\n', '        if (msg.sender != owner) {\n', '            throw;\n', '        }\n', '        if (this.balance > 0 && !owner.send(this.balance)) {\n', '            throw;\n', '        }\n', '    }\n', '    \n', '    function () payable {\n', '        // why yes, thank you.\n', '    }\n', '}']