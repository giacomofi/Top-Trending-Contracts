['pragma solidity ^0.4.13;\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract ReentrancyGuard {\n', '\n', '  /**\n', '   * @dev We use a single lock for the whole contract.\n', '   */\n', '  bool private rentrancy_lock = false;\n', '\n', '  /**\n', '   * @dev Prevents a contract from calling itself, directly or indirectly.\n', '   * @notice If you mark a function `nonReentrant`, you should also\n', '   * mark it `external`. Calling one nonReentrant function from\n', '   * another is not supported. Instead, you can implement a\n', '   * `private` function doing the actual work, and a `external`\n', '   * wrapper marked as `nonReentrant`.\n', '   */\n', '  modifier nonReentrant() {\n', '    require(!rentrancy_lock);\n', '    rentrancy_lock = true;\n', '    _;\n', '    rentrancy_lock = false;\n', '  }\n', '\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Claimable is Ownable {\n', '  address public pendingOwner;\n', '\n', '  /**\n', '   * @dev Modifier throws if called by any account other than the pendingOwner.\n', '   */\n', '  modifier onlyPendingOwner() {\n', '    require(msg.sender == pendingOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to set the pendingOwner address.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    pendingOwner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer.\n', '   */\n', '  function claimOwnership() onlyPendingOwner {\n', '    owner = pendingOwner;\n', '    pendingOwner = 0x0;\n', '  }\n', '}\n', '\n', 'contract Operational is Claimable {\n', '    address public operator;\n', '\n', '    function Operational(address _operator) {\n', '      operator = _operator;\n', '    }\n', '\n', '    modifier onlyOperator() {\n', '      require(msg.sender == operator);\n', '      _;\n', '    }\n', '\n', '    function transferOperator(address newOperator) onlyOwner {\n', '      require(newOperator != address(0));\n', '      operator = newOperator;\n', '    }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', 'contract LockableToken is StandardToken, ReentrancyGuard {\n', '\n', '    struct LockedBalance {\n', '        address owner;\n', '        uint256 value;\n', '        uint256 releaseTime;\n', '    }\n', '\n', '    mapping (uint => LockedBalance) public lockedBalances;\n', '    uint public lockedBalanceCount;\n', '\n', '    event TransferLockedToken(address indexed from, address indexed to, uint256 value, uint256 releaseTime);\n', '    event ReleaseLockedBalance(address indexed owner, uint256 value, uint256 releaseTime);\n', '\n', '    // &#231;&#187;\x99 _to &#232;&#189;&#172;&#231;&#167;&#187; _value &#228;&#184;&#170;&#233;\x94\x81&#229;&#174;\x9a&#229;\x88&#176; _releaseTime &#231;\x9a\x84 token\n', '    function transferLockedToken(address _to, uint256 _value, uint256 _releaseTime) nonReentrant returns (bool) {\n', '        require(_releaseTime > now);\n', '        require(_releaseTime.sub(1 years) < now);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        lockedBalances[lockedBalanceCount] = LockedBalance({owner: _to, value: _value, releaseTime: _releaseTime});\n', '        lockedBalanceCount++;\n', '        TransferLockedToken(msg.sender, _to, _value, _releaseTime);\n', '        return true;\n', '    }\n', '\n', '    // &#230;\x9f&#165; address &#231;\x9a\x84&#233;\x94\x81&#229;&#174;\x9a&#228;&#189;\x99&#233;&#162;\x9d\n', '    function lockedBalanceOf(address _owner) constant returns (uint256 value) {\n', '        for (uint i = 0; i < lockedBalanceCount; i++) {\n', '            LockedBalance lockedBalance = lockedBalances[i];\n', '            if (_owner == lockedBalance.owner) {\n', '                value = value.add(lockedBalance.value);\n', '            }\n', '        }\n', '        return value;\n', '    }\n', '\n', '    // &#232;&#167;&#163;&#233;\x94\x81&#230;\x89\x80&#230;\x9c\x89&#229;&#183;&#178;&#229;\x88&#176;&#233;\x94\x81&#229;&#174;\x9a&#230;\x97&#182;&#233;\x97&#180;&#231;\x9a\x84 token\n', '    function releaseLockedBalance () returns (uint256 releaseAmount) {\n', '        uint index = 0;\n', '        while (index < lockedBalanceCount) {\n', '            if (now >= lockedBalances[index].releaseTime) {\n', '                releaseAmount += lockedBalances[index].value;\n', '                unlockBalanceByIndex(index);\n', '            } else {\n', '                index++;\n', '            }\n', '        }\n', '        return releaseAmount;\n', '    }\n', '\n', '    function unlockBalanceByIndex (uint index) internal {\n', '        LockedBalance lockedBalance = lockedBalances[index];\n', '        balances[lockedBalance.owner] = balances[lockedBalance.owner].add(lockedBalance.value);\n', '        ReleaseLockedBalance(lockedBalance.owner, lockedBalance.value, lockedBalance.releaseTime);\n', '        lockedBalances[index] = lockedBalances[lockedBalanceCount - 1];\n', '        delete lockedBalances[lockedBalanceCount - 1];\n', '        lockedBalanceCount--;\n', '    }\n', '\n', '}\n', '\n', 'library DateTime {\n', '        /*\n', '         *  Date and Time utilities for ethereum contracts\n', '         *\n', '         */\n', '        struct DateTime {\n', '                uint16 year;\n', '                uint8 month;\n', '                uint8 day;\n', '                uint8 hour;\n', '                uint8 minute;\n', '                uint8 second;\n', '                uint8 weekday;\n', '        }\n', '\n', '        uint constant DAY_IN_SECONDS = 86400;\n', '        uint constant YEAR_IN_SECONDS = 31536000;\n', '        uint constant LEAP_YEAR_IN_SECONDS = 31622400;\n', '\n', '        uint constant HOUR_IN_SECONDS = 3600;\n', '        uint constant MINUTE_IN_SECONDS = 60;\n', '\n', '        uint16 constant ORIGIN_YEAR = 1970;\n', '\n', '        function isLeapYear(uint16 year) constant returns (bool) {\n', '                if (year % 4 != 0) {\n', '                        return false;\n', '                }\n', '                if (year % 100 != 0) {\n', '                        return true;\n', '                }\n', '                if (year % 400 != 0) {\n', '                        return false;\n', '                }\n', '                return true;\n', '        }\n', '\n', '        function leapYearsBefore(uint year) constant returns (uint) {\n', '                year -= 1;\n', '                return year / 4 - year / 100 + year / 400;\n', '        }\n', '\n', '        function getDaysInMonth(uint8 month, uint16 year) constant returns (uint8) {\n', '                if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n', '                        return 31;\n', '                }\n', '                else if (month == 4 || month == 6 || month == 9 || month == 11) {\n', '                        return 30;\n', '                }\n', '                else if (isLeapYear(year)) {\n', '                        return 29;\n', '                }\n', '                else {\n', '                        return 28;\n', '                }\n', '        }\n', '\n', '        function parseTimestamp(uint timestamp) internal returns (DateTime dt) {\n', '                uint secondsAccountedFor = 0;\n', '                uint buf;\n', '                uint8 i;\n', '\n', '                // Year\n', '                dt.year = getYear(timestamp);\n', '                buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR);\n', '\n', '                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\n', '                secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);\n', '\n', '                // Month\n', '                uint secondsInMonth;\n', '                for (i = 1; i <= 12; i++) {\n', '                        secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dt.year);\n', '                        if (secondsInMonth + secondsAccountedFor > timestamp) {\n', '                                dt.month = i;\n', '                                break;\n', '                        }\n', '                        secondsAccountedFor += secondsInMonth;\n', '                }\n', '\n', '                // Day\n', '                for (i = 1; i <= getDaysInMonth(dt.month, dt.year); i++) {\n', '                        if (DAY_IN_SECONDS + secondsAccountedFor > timestamp) {\n', '                                dt.day = i;\n', '                                break;\n', '                        }\n', '                        secondsAccountedFor += DAY_IN_SECONDS;\n', '                }\n', '\n', '                // Hour\n', '                dt.hour = 0;//getHour(timestamp);\n', '\n', '                // Minute\n', '                dt.minute = 0;//getMinute(timestamp);\n', '\n', '                // Second\n', '                dt.second = 0;//getSecond(timestamp);\n', '\n', '                // Day of week.\n', '                dt.weekday = 0;//getWeekday(timestamp);\n', '\n', '        }\n', '\n', '        function getYear(uint timestamp) constant returns (uint16) {\n', '                uint secondsAccountedFor = 0;\n', '                uint16 year;\n', '                uint numLeapYears;\n', '\n', '                // Year\n', '                year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\n', '                numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\n', '\n', '                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\n', '                secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\n', '\n', '                while (secondsAccountedFor > timestamp) {\n', '                        if (isLeapYear(uint16(year - 1))) {\n', '                                secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\n', '                        }\n', '                        else {\n', '                                secondsAccountedFor -= YEAR_IN_SECONDS;\n', '                        }\n', '                        year -= 1;\n', '                }\n', '                return year;\n', '        }\n', '\n', '        function getMonth(uint timestamp) constant returns (uint8) {\n', '                return parseTimestamp(timestamp).month;\n', '        }\n', '\n', '        function getDay(uint timestamp) constant returns (uint8) {\n', '                return parseTimestamp(timestamp).day;\n', '        }\n', '\n', '        function getHour(uint timestamp) constant returns (uint8) {\n', '                return uint8((timestamp / 60 / 60) % 24);\n', '        }\n', '\n', '        function getMinute(uint timestamp) constant returns (uint8) {\n', '                return uint8((timestamp / 60) % 60);\n', '        }\n', '\n', '        function getSecond(uint timestamp) constant returns (uint8) {\n', '                return uint8(timestamp % 60);\n', '        }\n', '\n', '        function toTimestamp(uint16 year, uint8 month, uint8 day) constant returns (uint timestamp) {\n', '                return toTimestamp(year, month, day, 0, 0, 0);\n', '        }\n', '\n', '        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute, uint8 second) constant returns (uint timestamp) {\n', '                uint16 i;\n', '\n', '                // Year\n', '                for (i = ORIGIN_YEAR; i < year; i++) {\n', '                        if (isLeapYear(i)) {\n', '                                timestamp += LEAP_YEAR_IN_SECONDS;\n', '                        }\n', '                        else {\n', '                                timestamp += YEAR_IN_SECONDS;\n', '                        }\n', '                }\n', '\n', '                // Month\n', '                uint8[12] memory monthDayCounts;\n', '                monthDayCounts[0] = 31;\n', '                if (isLeapYear(year)) {\n', '                        monthDayCounts[1] = 29;\n', '                }\n', '                else {\n', '                        monthDayCounts[1] = 28;\n', '                }\n', '                monthDayCounts[2] = 31;\n', '                monthDayCounts[3] = 30;\n', '                monthDayCounts[4] = 31;\n', '                monthDayCounts[5] = 30;\n', '                monthDayCounts[6] = 31;\n', '                monthDayCounts[7] = 31;\n', '                monthDayCounts[8] = 30;\n', '                monthDayCounts[9] = 31;\n', '                monthDayCounts[10] = 30;\n', '                monthDayCounts[11] = 31;\n', '\n', '                for (i = 1; i < month; i++) {\n', '                        timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1];\n', '                }\n', '\n', '                // Day\n', '                timestamp += DAY_IN_SECONDS * (day - 1);\n', '\n', '                // Hour\n', '                timestamp += HOUR_IN_SECONDS * (hour);\n', '\n', '                // Minute\n', '                timestamp += MINUTE_IN_SECONDS * (minute);\n', '\n', '                // Second\n', '                timestamp += second;\n', '\n', '                return timestamp;\n', '        }\n', '}\n', '\n', 'contract ReleaseableToken is Operational, LockableToken {\n', '    using SafeMath for uint;\n', '    using DateTime for uint256;\n', '    bool secondYearUpdate = false; // Limit &#230;\x9b&#180;&#230;\x96&#176;&#229;\x88&#176;&#231;&#172;&#172;&#228;&#186;\x8c&#229;&#185;&#180;\n', '    uint256 public releasedSupply; // &#229;&#183;&#178;&#233;\x87\x8a&#230;\x94&#190;&#231;\x9a\x84&#230;\x95&#176;&#233;\x87\x8f\n', '    uint256 public createTime; // &#229;\x90\x88&#231;&#186;&#166;&#229;\x88\x9b&#229;&#187;&#186;&#230;\x97&#182;&#233;\x97&#180;\n', '    uint256 standardDecimals = 100000000; // &#231;\x94&#177;&#228;&#186;\x8e&#230;\x9c\x898&#228;&#189;\x8d&#229;&#176;\x8f&#230;\x95&#176;&#239;&#188;\x8c&#228;&#188;&#160;&#232;&#191;\x9b&#230;\x9d&#165;&#231;\x9a\x84&#229;\x8f\x82&#230;\x95&#176;&#233;\x83&#189;&#230;\x98&#175;&#228;&#184;\x8d&#229;&#184;&#166;&#229;\x90\x8e&#233;\x9d&#162;&#231;\x9a\x84&#229;&#176;\x8f&#230;\x95&#176;&#239;&#188;\x8c&#232;&#166;\x81&#230;\x9c\x89&#228;&#185;\x98100000000&#231;\x9a\x84&#230;\x93\x8d&#228;&#189;\x9c&#230;\x89\x8d&#232;\x83&#189;&#228;&#191;\x9d&#232;&#175;\x81&#230;\x95&#176;&#233;\x87\x8f&#231;&#186;&#167;&#228;&#184;\x80&#232;\x87&#180;\n', '    uint256 public totalSupply = standardDecimals.mul(1000000000); // &#230;\x80&#187;&#233;\x87\x8f10&#228;&#186;&#191;\n', '    uint256 public limitSupplyPerYear = standardDecimals.mul(60000000); // &#230;&#175;\x8f&#229;&#185;&#180;&#233;\x87\x8a&#230;\x94&#190;&#231;\x9a\x84LLT&#231;\x9a\x84&#233;\x99\x90&#233;&#162;\x9d&#239;&#188;\x8c&#231;&#172;&#172;&#228;&#184;\x80&#229;&#185;&#180;6000&#228;&#184;\x87\n', '    uint256 public dailyLimit = standardDecimals.mul(1000000); // &#230;&#175;\x8f&#229;&#164;&#169;&#233;\x87\x8a&#230;\x94&#190;&#231;\x9a\x84&#233;\x99\x90&#233;&#162;\x9d\n', '\n', '    event ReleaseSupply(address receiver, uint256 value, uint256 releaseTime);\n', '    event UnfreezeAmount(address receiver, uint256 amount, uint256 unfreezeTime);\n', '\n', '    struct FrozenRecord {\n', '        uint256 amount; // &#229;\x86&#187;&#231;&#187;\x93&#231;\x9a\x84&#230;\x95&#176;&#233;\x87\x8f\n', '        uint256 unfreezeTime; // &#232;&#167;&#163;&#229;\x86&#187;&#231;\x9a\x84&#230;\x97&#182;&#233;\x97&#180;\n', '    }\n', '\n', '    mapping (uint => FrozenRecord) public frozenRecords;\n', '    uint public frozenRecordsCount = 0;\n', '\n', '    function ReleaseableToken(\n', '                    uint256 initialSupply,\n', '                    uint256 initReleasedSupply,\n', '                    address operator\n', '                ) Operational(operator) {\n', '        totalSupply = initialSupply;\n', '        releasedSupply = initReleasedSupply;\n', '        createTime = now;\n', '        balances[msg.sender] = initReleasedSupply;\n', '    }\n', '\n', '    // &#229;\x9c&#168; timestamp &#230;\x97&#182;&#233;\x97&#180;&#231;\x82&#185;&#233;\x87\x8a&#230;\x94&#190; releaseAmount &#231;\x9a\x84 token\n', '    function releaseSupply(uint256 releaseAmount, uint256 timestamp) onlyOperator returns(uint256 _actualRelease) {\n', '        require(timestamp >= createTime && timestamp <= now);\n', '        require(!judgeReleaseRecordExist(timestamp));\n', '        require(releaseAmount <= dailyLimit);\n', '        updateLimit();\n', '        require(limitSupplyPerYear > 0);\n', '        if (releaseAmount > limitSupplyPerYear) {\n', '            if (releasedSupply.add(limitSupplyPerYear) > totalSupply) {\n', '                releasedSupply = totalSupply;\n', '                releaseAmount = totalSupply.sub(releasedSupply);\n', '            } else {\n', '                releasedSupply = releasedSupply.add(limitSupplyPerYear);\n', '                releaseAmount = limitSupplyPerYear;\n', '            }\n', '            limitSupplyPerYear = 0;\n', '        } else {\n', '            if (releasedSupply.add(releaseAmount) > totalSupply) {\n', '                releasedSupply = totalSupply;\n', '                releaseAmount = totalSupply.sub(releasedSupply);\n', '            } else {\n', '                releasedSupply = releasedSupply.add(releaseAmount);\n', '            }\n', '            limitSupplyPerYear = limitSupplyPerYear.sub(releaseAmount);\n', '        }\n', '        frozenRecords[frozenRecordsCount] = FrozenRecord(releaseAmount, timestamp.add(26 * 1 weeks));\n', '        frozenRecordsCount++;\n', '        ReleaseSupply(msg.sender, releaseAmount, timestamp);\n', '        return releaseAmount;\n', '    }\n', '\n', '    // &#229;\x88&#164;&#230;\x96&#173; timestamp &#232;&#191;\x99&#228;&#184;\x80&#229;&#164;&#169;&#230;\x9c\x89&#230;&#178;&#161;&#230;\x9c\x89&#229;&#183;&#178;&#231;&#187;\x8f&#233;\x87\x8a&#230;\x94&#190;&#231;\x9a\x84&#232;&#174;&#176;&#229;&#189;\x95\n', '    function judgeReleaseRecordExist(uint256 timestamp) internal returns(bool _exist) {\n', '        bool exist = false;\n', '        if (frozenRecordsCount > 0) {\n', '            for (uint index = 0; index < frozenRecordsCount; index++) {\n', '                if ((frozenRecords[index].unfreezeTime.parseTimestamp().year == (timestamp.add(26 * 1 weeks)).parseTimestamp().year)\n', '                    && (frozenRecords[index].unfreezeTime.parseTimestamp().month == (timestamp.add(26 * 1 weeks)).parseTimestamp().month)\n', '                    && (frozenRecords[index].unfreezeTime.parseTimestamp().day == (timestamp.add(26 * 1 weeks)).parseTimestamp().day)) {\n', '                    exist = true;\n', '                }\n', '            }\n', '        }\n', '        return exist;\n', '    }\n', '\n', '    // &#230;\x9b&#180;&#230;\x96&#176;&#230;&#175;\x8f&#229;&#185;&#180;&#233;\x87\x8a&#230;\x94&#190;token&#231;\x9a\x84&#233;\x99\x90&#229;\x88&#182;&#230;\x95&#176;&#233;\x87\x8f\n', '    function updateLimit() internal {\n', '        if (createTime.add(1 years) < now && !secondYearUpdate) {\n', '            limitSupplyPerYear = standardDecimals.mul(120000000);\n', '            secondYearUpdate = true;\n', '        }\n', '        if (createTime.add(2 * 1 years) < now) {\n', '            if (releasedSupply < totalSupply) {\n', '                limitSupplyPerYear = totalSupply.sub(releasedSupply);\n', '            }\n', '        }\n', '    }\n', '\n', '    // &#232;&#167;&#163;&#229;\x86&#187; releaseSupply &#228;&#184;&#173;&#233;\x87\x8a&#230;\x94&#190;&#231;\x9a\x84 token\n', '    function unfreeze() onlyOperator returns(uint256 _unfreezeAmount) {\n', '        uint256 unfreezeAmount = 0;\n', '        uint index = 0;\n', '        while (index < frozenRecordsCount) {\n', '            if (frozenRecords[index].unfreezeTime < now) {\n', '                unfreezeAmount += frozenRecords[index].amount;\n', '                unfreezeByIndex(index);\n', '            } else {\n', '                index++;\n', '            }\n', '        }\n', '        return unfreezeAmount;\n', '    }\n', '\n', '    function unfreezeByIndex (uint index) internal {\n', '        FrozenRecord unfreezeRecord = frozenRecords[index];\n', '        balances[owner] = balances[owner].add(unfreezeRecord.amount);\n', '        UnfreezeAmount(owner, unfreezeRecord.amount, unfreezeRecord.unfreezeTime);\n', '        frozenRecords[index] = frozenRecords[frozenRecordsCount - 1];\n', '        delete frozenRecords[frozenRecordsCount - 1];\n', '        frozenRecordsCount--;\n', '    }\n', '\n', '    // &#232;&#174;&#190;&#231;&#189;&#174;&#230;&#175;\x8f&#229;&#164;&#169;&#233;\x87\x8a&#230;\x94&#190; token &#231;\x9a\x84&#233;\x99\x90&#233;&#162;\x9d\n', '    function setDailyLimit(uint256 _dailyLimit) onlyOwner {\n', '        dailyLimit = _dailyLimit;\n', '    }\n', '}\n', '\n', 'contract LLToken is ReleaseableToken {\n', '    string public standard = &#39;2017082602&#39;;\n', '    string public name = &#39;LLToken&#39;;\n', '    string public symbol = &#39;LLT&#39;;\n', '    uint8 public decimals = 8;\n', '\n', '    function LLToken(\n', '                     uint256 initialSupply,\n', '                     uint256 initReleasedSupply,\n', '                     address operator\n', '                     ) ReleaseableToken(initialSupply, initReleasedSupply, operator) {}\n', '}']
['pragma solidity ^0.4.13;\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract ReentrancyGuard {\n', '\n', '  /**\n', '   * @dev We use a single lock for the whole contract.\n', '   */\n', '  bool private rentrancy_lock = false;\n', '\n', '  /**\n', '   * @dev Prevents a contract from calling itself, directly or indirectly.\n', '   * @notice If you mark a function `nonReentrant`, you should also\n', '   * mark it `external`. Calling one nonReentrant function from\n', '   * another is not supported. Instead, you can implement a\n', '   * `private` function doing the actual work, and a `external`\n', '   * wrapper marked as `nonReentrant`.\n', '   */\n', '  modifier nonReentrant() {\n', '    require(!rentrancy_lock);\n', '    rentrancy_lock = true;\n', '    _;\n', '    rentrancy_lock = false;\n', '  }\n', '\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Claimable is Ownable {\n', '  address public pendingOwner;\n', '\n', '  /**\n', '   * @dev Modifier throws if called by any account other than the pendingOwner.\n', '   */\n', '  modifier onlyPendingOwner() {\n', '    require(msg.sender == pendingOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to set the pendingOwner address.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    pendingOwner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer.\n', '   */\n', '  function claimOwnership() onlyPendingOwner {\n', '    owner = pendingOwner;\n', '    pendingOwner = 0x0;\n', '  }\n', '}\n', '\n', 'contract Operational is Claimable {\n', '    address public operator;\n', '\n', '    function Operational(address _operator) {\n', '      operator = _operator;\n', '    }\n', '\n', '    modifier onlyOperator() {\n', '      require(msg.sender == operator);\n', '      _;\n', '    }\n', '\n', '    function transferOperator(address newOperator) onlyOwner {\n', '      require(newOperator != address(0));\n', '      operator = newOperator;\n', '    }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', 'contract LockableToken is StandardToken, ReentrancyGuard {\n', '\n', '    struct LockedBalance {\n', '        address owner;\n', '        uint256 value;\n', '        uint256 releaseTime;\n', '    }\n', '\n', '    mapping (uint => LockedBalance) public lockedBalances;\n', '    uint public lockedBalanceCount;\n', '\n', '    event TransferLockedToken(address indexed from, address indexed to, uint256 value, uint256 releaseTime);\n', '    event ReleaseLockedBalance(address indexed owner, uint256 value, uint256 releaseTime);\n', '\n', '    // ç»\x99 _to è½¬ç§» _value ä¸ªé\x94\x81å®\x9aå\x88° _releaseTime ç\x9a\x84 token\n', '    function transferLockedToken(address _to, uint256 _value, uint256 _releaseTime) nonReentrant returns (bool) {\n', '        require(_releaseTime > now);\n', '        require(_releaseTime.sub(1 years) < now);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        lockedBalances[lockedBalanceCount] = LockedBalance({owner: _to, value: _value, releaseTime: _releaseTime});\n', '        lockedBalanceCount++;\n', '        TransferLockedToken(msg.sender, _to, _value, _releaseTime);\n', '        return true;\n', '    }\n', '\n', '    // æ\x9f¥ address ç\x9a\x84é\x94\x81å®\x9aä½\x99é¢\x9d\n', '    function lockedBalanceOf(address _owner) constant returns (uint256 value) {\n', '        for (uint i = 0; i < lockedBalanceCount; i++) {\n', '            LockedBalance lockedBalance = lockedBalances[i];\n', '            if (_owner == lockedBalance.owner) {\n', '                value = value.add(lockedBalance.value);\n', '            }\n', '        }\n', '        return value;\n', '    }\n', '\n', '    // è§£é\x94\x81æ\x89\x80æ\x9c\x89å·²å\x88°é\x94\x81å®\x9aæ\x97¶é\x97´ç\x9a\x84 token\n', '    function releaseLockedBalance () returns (uint256 releaseAmount) {\n', '        uint index = 0;\n', '        while (index < lockedBalanceCount) {\n', '            if (now >= lockedBalances[index].releaseTime) {\n', '                releaseAmount += lockedBalances[index].value;\n', '                unlockBalanceByIndex(index);\n', '            } else {\n', '                index++;\n', '            }\n', '        }\n', '        return releaseAmount;\n', '    }\n', '\n', '    function unlockBalanceByIndex (uint index) internal {\n', '        LockedBalance lockedBalance = lockedBalances[index];\n', '        balances[lockedBalance.owner] = balances[lockedBalance.owner].add(lockedBalance.value);\n', '        ReleaseLockedBalance(lockedBalance.owner, lockedBalance.value, lockedBalance.releaseTime);\n', '        lockedBalances[index] = lockedBalances[lockedBalanceCount - 1];\n', '        delete lockedBalances[lockedBalanceCount - 1];\n', '        lockedBalanceCount--;\n', '    }\n', '\n', '}\n', '\n', 'library DateTime {\n', '        /*\n', '         *  Date and Time utilities for ethereum contracts\n', '         *\n', '         */\n', '        struct DateTime {\n', '                uint16 year;\n', '                uint8 month;\n', '                uint8 day;\n', '                uint8 hour;\n', '                uint8 minute;\n', '                uint8 second;\n', '                uint8 weekday;\n', '        }\n', '\n', '        uint constant DAY_IN_SECONDS = 86400;\n', '        uint constant YEAR_IN_SECONDS = 31536000;\n', '        uint constant LEAP_YEAR_IN_SECONDS = 31622400;\n', '\n', '        uint constant HOUR_IN_SECONDS = 3600;\n', '        uint constant MINUTE_IN_SECONDS = 60;\n', '\n', '        uint16 constant ORIGIN_YEAR = 1970;\n', '\n', '        function isLeapYear(uint16 year) constant returns (bool) {\n', '                if (year % 4 != 0) {\n', '                        return false;\n', '                }\n', '                if (year % 100 != 0) {\n', '                        return true;\n', '                }\n', '                if (year % 400 != 0) {\n', '                        return false;\n', '                }\n', '                return true;\n', '        }\n', '\n', '        function leapYearsBefore(uint year) constant returns (uint) {\n', '                year -= 1;\n', '                return year / 4 - year / 100 + year / 400;\n', '        }\n', '\n', '        function getDaysInMonth(uint8 month, uint16 year) constant returns (uint8) {\n', '                if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n', '                        return 31;\n', '                }\n', '                else if (month == 4 || month == 6 || month == 9 || month == 11) {\n', '                        return 30;\n', '                }\n', '                else if (isLeapYear(year)) {\n', '                        return 29;\n', '                }\n', '                else {\n', '                        return 28;\n', '                }\n', '        }\n', '\n', '        function parseTimestamp(uint timestamp) internal returns (DateTime dt) {\n', '                uint secondsAccountedFor = 0;\n', '                uint buf;\n', '                uint8 i;\n', '\n', '                // Year\n', '                dt.year = getYear(timestamp);\n', '                buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR);\n', '\n', '                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\n', '                secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);\n', '\n', '                // Month\n', '                uint secondsInMonth;\n', '                for (i = 1; i <= 12; i++) {\n', '                        secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dt.year);\n', '                        if (secondsInMonth + secondsAccountedFor > timestamp) {\n', '                                dt.month = i;\n', '                                break;\n', '                        }\n', '                        secondsAccountedFor += secondsInMonth;\n', '                }\n', '\n', '                // Day\n', '                for (i = 1; i <= getDaysInMonth(dt.month, dt.year); i++) {\n', '                        if (DAY_IN_SECONDS + secondsAccountedFor > timestamp) {\n', '                                dt.day = i;\n', '                                break;\n', '                        }\n', '                        secondsAccountedFor += DAY_IN_SECONDS;\n', '                }\n', '\n', '                // Hour\n', '                dt.hour = 0;//getHour(timestamp);\n', '\n', '                // Minute\n', '                dt.minute = 0;//getMinute(timestamp);\n', '\n', '                // Second\n', '                dt.second = 0;//getSecond(timestamp);\n', '\n', '                // Day of week.\n', '                dt.weekday = 0;//getWeekday(timestamp);\n', '\n', '        }\n', '\n', '        function getYear(uint timestamp) constant returns (uint16) {\n', '                uint secondsAccountedFor = 0;\n', '                uint16 year;\n', '                uint numLeapYears;\n', '\n', '                // Year\n', '                year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\n', '                numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\n', '\n', '                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\n', '                secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\n', '\n', '                while (secondsAccountedFor > timestamp) {\n', '                        if (isLeapYear(uint16(year - 1))) {\n', '                                secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\n', '                        }\n', '                        else {\n', '                                secondsAccountedFor -= YEAR_IN_SECONDS;\n', '                        }\n', '                        year -= 1;\n', '                }\n', '                return year;\n', '        }\n', '\n', '        function getMonth(uint timestamp) constant returns (uint8) {\n', '                return parseTimestamp(timestamp).month;\n', '        }\n', '\n', '        function getDay(uint timestamp) constant returns (uint8) {\n', '                return parseTimestamp(timestamp).day;\n', '        }\n', '\n', '        function getHour(uint timestamp) constant returns (uint8) {\n', '                return uint8((timestamp / 60 / 60) % 24);\n', '        }\n', '\n', '        function getMinute(uint timestamp) constant returns (uint8) {\n', '                return uint8((timestamp / 60) % 60);\n', '        }\n', '\n', '        function getSecond(uint timestamp) constant returns (uint8) {\n', '                return uint8(timestamp % 60);\n', '        }\n', '\n', '        function toTimestamp(uint16 year, uint8 month, uint8 day) constant returns (uint timestamp) {\n', '                return toTimestamp(year, month, day, 0, 0, 0);\n', '        }\n', '\n', '        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute, uint8 second) constant returns (uint timestamp) {\n', '                uint16 i;\n', '\n', '                // Year\n', '                for (i = ORIGIN_YEAR; i < year; i++) {\n', '                        if (isLeapYear(i)) {\n', '                                timestamp += LEAP_YEAR_IN_SECONDS;\n', '                        }\n', '                        else {\n', '                                timestamp += YEAR_IN_SECONDS;\n', '                        }\n', '                }\n', '\n', '                // Month\n', '                uint8[12] memory monthDayCounts;\n', '                monthDayCounts[0] = 31;\n', '                if (isLeapYear(year)) {\n', '                        monthDayCounts[1] = 29;\n', '                }\n', '                else {\n', '                        monthDayCounts[1] = 28;\n', '                }\n', '                monthDayCounts[2] = 31;\n', '                monthDayCounts[3] = 30;\n', '                monthDayCounts[4] = 31;\n', '                monthDayCounts[5] = 30;\n', '                monthDayCounts[6] = 31;\n', '                monthDayCounts[7] = 31;\n', '                monthDayCounts[8] = 30;\n', '                monthDayCounts[9] = 31;\n', '                monthDayCounts[10] = 30;\n', '                monthDayCounts[11] = 31;\n', '\n', '                for (i = 1; i < month; i++) {\n', '                        timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1];\n', '                }\n', '\n', '                // Day\n', '                timestamp += DAY_IN_SECONDS * (day - 1);\n', '\n', '                // Hour\n', '                timestamp += HOUR_IN_SECONDS * (hour);\n', '\n', '                // Minute\n', '                timestamp += MINUTE_IN_SECONDS * (minute);\n', '\n', '                // Second\n', '                timestamp += second;\n', '\n', '                return timestamp;\n', '        }\n', '}\n', '\n', 'contract ReleaseableToken is Operational, LockableToken {\n', '    using SafeMath for uint;\n', '    using DateTime for uint256;\n', '    bool secondYearUpdate = false; // Limit æ\x9b´æ\x96°å\x88°ç¬¬äº\x8cå¹´\n', '    uint256 public releasedSupply; // å·²é\x87\x8aæ\x94¾ç\x9a\x84æ\x95°é\x87\x8f\n', '    uint256 public createTime; // å\x90\x88çº¦å\x88\x9bå»ºæ\x97¶é\x97´\n', '    uint256 standardDecimals = 100000000; // ç\x94±äº\x8eæ\x9c\x898ä½\x8då°\x8fæ\x95°ï¼\x8cä¼\xa0è¿\x9bæ\x9d¥ç\x9a\x84å\x8f\x82æ\x95°é\x83½æ\x98¯ä¸\x8då¸¦å\x90\x8eé\x9d¢ç\x9a\x84å°\x8fæ\x95°ï¼\x8cè¦\x81æ\x9c\x89ä¹\x98100000000ç\x9a\x84æ\x93\x8dä½\x9cæ\x89\x8dè\x83½ä¿\x9dè¯\x81æ\x95°é\x87\x8fçº§ä¸\x80è\x87´\n', '    uint256 public totalSupply = standardDecimals.mul(1000000000); // æ\x80»é\x87\x8f10äº¿\n', '    uint256 public limitSupplyPerYear = standardDecimals.mul(60000000); // æ¯\x8få¹´é\x87\x8aæ\x94¾ç\x9a\x84LLTç\x9a\x84é\x99\x90é¢\x9dï¼\x8cç¬¬ä¸\x80å¹´6000ä¸\x87\n', '    uint256 public dailyLimit = standardDecimals.mul(1000000); // æ¯\x8få¤©é\x87\x8aæ\x94¾ç\x9a\x84é\x99\x90é¢\x9d\n', '\n', '    event ReleaseSupply(address receiver, uint256 value, uint256 releaseTime);\n', '    event UnfreezeAmount(address receiver, uint256 amount, uint256 unfreezeTime);\n', '\n', '    struct FrozenRecord {\n', '        uint256 amount; // å\x86»ç»\x93ç\x9a\x84æ\x95°é\x87\x8f\n', '        uint256 unfreezeTime; // è§£å\x86»ç\x9a\x84æ\x97¶é\x97´\n', '    }\n', '\n', '    mapping (uint => FrozenRecord) public frozenRecords;\n', '    uint public frozenRecordsCount = 0;\n', '\n', '    function ReleaseableToken(\n', '                    uint256 initialSupply,\n', '                    uint256 initReleasedSupply,\n', '                    address operator\n', '                ) Operational(operator) {\n', '        totalSupply = initialSupply;\n', '        releasedSupply = initReleasedSupply;\n', '        createTime = now;\n', '        balances[msg.sender] = initReleasedSupply;\n', '    }\n', '\n', '    // å\x9c¨ timestamp æ\x97¶é\x97´ç\x82¹é\x87\x8aæ\x94¾ releaseAmount ç\x9a\x84 token\n', '    function releaseSupply(uint256 releaseAmount, uint256 timestamp) onlyOperator returns(uint256 _actualRelease) {\n', '        require(timestamp >= createTime && timestamp <= now);\n', '        require(!judgeReleaseRecordExist(timestamp));\n', '        require(releaseAmount <= dailyLimit);\n', '        updateLimit();\n', '        require(limitSupplyPerYear > 0);\n', '        if (releaseAmount > limitSupplyPerYear) {\n', '            if (releasedSupply.add(limitSupplyPerYear) > totalSupply) {\n', '                releasedSupply = totalSupply;\n', '                releaseAmount = totalSupply.sub(releasedSupply);\n', '            } else {\n', '                releasedSupply = releasedSupply.add(limitSupplyPerYear);\n', '                releaseAmount = limitSupplyPerYear;\n', '            }\n', '            limitSupplyPerYear = 0;\n', '        } else {\n', '            if (releasedSupply.add(releaseAmount) > totalSupply) {\n', '                releasedSupply = totalSupply;\n', '                releaseAmount = totalSupply.sub(releasedSupply);\n', '            } else {\n', '                releasedSupply = releasedSupply.add(releaseAmount);\n', '            }\n', '            limitSupplyPerYear = limitSupplyPerYear.sub(releaseAmount);\n', '        }\n', '        frozenRecords[frozenRecordsCount] = FrozenRecord(releaseAmount, timestamp.add(26 * 1 weeks));\n', '        frozenRecordsCount++;\n', '        ReleaseSupply(msg.sender, releaseAmount, timestamp);\n', '        return releaseAmount;\n', '    }\n', '\n', '    // å\x88¤æ\x96\xad timestamp è¿\x99ä¸\x80å¤©æ\x9c\x89æ²¡æ\x9c\x89å·²ç»\x8fé\x87\x8aæ\x94¾ç\x9a\x84è®°å½\x95\n', '    function judgeReleaseRecordExist(uint256 timestamp) internal returns(bool _exist) {\n', '        bool exist = false;\n', '        if (frozenRecordsCount > 0) {\n', '            for (uint index = 0; index < frozenRecordsCount; index++) {\n', '                if ((frozenRecords[index].unfreezeTime.parseTimestamp().year == (timestamp.add(26 * 1 weeks)).parseTimestamp().year)\n', '                    && (frozenRecords[index].unfreezeTime.parseTimestamp().month == (timestamp.add(26 * 1 weeks)).parseTimestamp().month)\n', '                    && (frozenRecords[index].unfreezeTime.parseTimestamp().day == (timestamp.add(26 * 1 weeks)).parseTimestamp().day)) {\n', '                    exist = true;\n', '                }\n', '            }\n', '        }\n', '        return exist;\n', '    }\n', '\n', '    // æ\x9b´æ\x96°æ¯\x8få¹´é\x87\x8aæ\x94¾tokenç\x9a\x84é\x99\x90å\x88¶æ\x95°é\x87\x8f\n', '    function updateLimit() internal {\n', '        if (createTime.add(1 years) < now && !secondYearUpdate) {\n', '            limitSupplyPerYear = standardDecimals.mul(120000000);\n', '            secondYearUpdate = true;\n', '        }\n', '        if (createTime.add(2 * 1 years) < now) {\n', '            if (releasedSupply < totalSupply) {\n', '                limitSupplyPerYear = totalSupply.sub(releasedSupply);\n', '            }\n', '        }\n', '    }\n', '\n', '    // è§£å\x86» releaseSupply ä¸\xadé\x87\x8aæ\x94¾ç\x9a\x84 token\n', '    function unfreeze() onlyOperator returns(uint256 _unfreezeAmount) {\n', '        uint256 unfreezeAmount = 0;\n', '        uint index = 0;\n', '        while (index < frozenRecordsCount) {\n', '            if (frozenRecords[index].unfreezeTime < now) {\n', '                unfreezeAmount += frozenRecords[index].amount;\n', '                unfreezeByIndex(index);\n', '            } else {\n', '                index++;\n', '            }\n', '        }\n', '        return unfreezeAmount;\n', '    }\n', '\n', '    function unfreezeByIndex (uint index) internal {\n', '        FrozenRecord unfreezeRecord = frozenRecords[index];\n', '        balances[owner] = balances[owner].add(unfreezeRecord.amount);\n', '        UnfreezeAmount(owner, unfreezeRecord.amount, unfreezeRecord.unfreezeTime);\n', '        frozenRecords[index] = frozenRecords[frozenRecordsCount - 1];\n', '        delete frozenRecords[frozenRecordsCount - 1];\n', '        frozenRecordsCount--;\n', '    }\n', '\n', '    // è®¾ç½®æ¯\x8få¤©é\x87\x8aæ\x94¾ token ç\x9a\x84é\x99\x90é¢\x9d\n', '    function setDailyLimit(uint256 _dailyLimit) onlyOwner {\n', '        dailyLimit = _dailyLimit;\n', '    }\n', '}\n', '\n', 'contract LLToken is ReleaseableToken {\n', "    string public standard = '2017082602';\n", "    string public name = 'LLToken';\n", "    string public symbol = 'LLT';\n", '    uint8 public decimals = 8;\n', '\n', '    function LLToken(\n', '                     uint256 initialSupply,\n', '                     uint256 initReleasedSupply,\n', '                     address operator\n', '                     ) ReleaseableToken(initialSupply, initReleasedSupply, operator) {}\n', '}']
