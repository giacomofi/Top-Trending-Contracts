['pragma solidity ^0.4.15;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract PreIco is Ownable {\n', '    using SafeMath for uint;\n', '\n', '    uint public decimals = 18;\n', '\n', '    uint256 public initialSupply;\n', '\n', '    uint256 public remainingSupply;\n', '\n', '    uint256 public tokenValue;  // value in wei\n', '\n', '    address public updater;  // account in charge of updating the token value\n', '\n', '    uint256 public startBlock;  // block number of contract deploy\n', '\n', '    uint256 public endTime;  // seconds from 1970-01-01T00:00:00Z\n', '\n', '    function PreIco(uint256 _initialSupply, uint256 initialValue, address initialUpdater, uint256 end) {\n', '        initialSupply = _initialSupply;\n', '        remainingSupply = initialSupply;\n', '        tokenValue = initialValue;\n', '        updater = initialUpdater;\n', '        startBlock = block.number;\n', '        endTime = end;\n', '    }\n', '\n', '    event UpdateValue(uint256 newValue);\n', '\n', '    function updateValue(uint256 newValue) {\n', '        require(msg.sender == updater || msg.sender == owner);\n', '        tokenValue = newValue;\n', '        UpdateValue(newValue);\n', '    }\n', '\n', '    function updateUpdater(address newUpdater) onlyOwner {\n', '        updater = newUpdater;\n', '    }\n', '\n', '    function updateEndTime(uint256 newEnd) onlyOwner {\n', '        endTime = newEnd;\n', '    }\n', '\n', '    event Withdraw(address indexed to, uint value);\n', '\n', '    function withdraw(address to, uint256 value) onlyOwner {\n', '        to.transfer(value);\n', '        Withdraw(to, value);\n', '    }\n', '\n', '    modifier beforeEndTime() {\n', '        require(now < endTime);\n', '        _;\n', '    }\n', '\n', '    event AssignToken(address indexed to, uint value);\n', '\n', '    function () payable beforeEndTime {\n', '        require(remainingSupply > 0);\n', '        address sender = msg.sender;\n', '        uint256 value = msg.value.mul(10 ** decimals).div(tokenValue);\n', '        if (remainingSupply >= value) {\n', '            AssignToken(sender, value);\n', '            remainingSupply = remainingSupply.sub(value);\n', '        } else {\n', '            AssignToken(sender, remainingSupply);\n', '            remainingSupply = 0;\n', '        }\n', '    }\n', '}']
['pragma solidity ^0.4.15;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract PreIco is Ownable {\n', '    using SafeMath for uint;\n', '\n', '    uint public decimals = 18;\n', '\n', '    uint256 public initialSupply;\n', '\n', '    uint256 public remainingSupply;\n', '\n', '    uint256 public tokenValue;  // value in wei\n', '\n', '    address public updater;  // account in charge of updating the token value\n', '\n', '    uint256 public startBlock;  // block number of contract deploy\n', '\n', '    uint256 public endTime;  // seconds from 1970-01-01T00:00:00Z\n', '\n', '    function PreIco(uint256 _initialSupply, uint256 initialValue, address initialUpdater, uint256 end) {\n', '        initialSupply = _initialSupply;\n', '        remainingSupply = initialSupply;\n', '        tokenValue = initialValue;\n', '        updater = initialUpdater;\n', '        startBlock = block.number;\n', '        endTime = end;\n', '    }\n', '\n', '    event UpdateValue(uint256 newValue);\n', '\n', '    function updateValue(uint256 newValue) {\n', '        require(msg.sender == updater || msg.sender == owner);\n', '        tokenValue = newValue;\n', '        UpdateValue(newValue);\n', '    }\n', '\n', '    function updateUpdater(address newUpdater) onlyOwner {\n', '        updater = newUpdater;\n', '    }\n', '\n', '    function updateEndTime(uint256 newEnd) onlyOwner {\n', '        endTime = newEnd;\n', '    }\n', '\n', '    event Withdraw(address indexed to, uint value);\n', '\n', '    function withdraw(address to, uint256 value) onlyOwner {\n', '        to.transfer(value);\n', '        Withdraw(to, value);\n', '    }\n', '\n', '    modifier beforeEndTime() {\n', '        require(now < endTime);\n', '        _;\n', '    }\n', '\n', '    event AssignToken(address indexed to, uint value);\n', '\n', '    function () payable beforeEndTime {\n', '        require(remainingSupply > 0);\n', '        address sender = msg.sender;\n', '        uint256 value = msg.value.mul(10 ** decimals).div(tokenValue);\n', '        if (remainingSupply >= value) {\n', '            AssignToken(sender, value);\n', '            remainingSupply = remainingSupply.sub(value);\n', '        } else {\n', '            AssignToken(sender, remainingSupply);\n', '            remainingSupply = 0;\n', '        }\n', '    }\n', '}']
