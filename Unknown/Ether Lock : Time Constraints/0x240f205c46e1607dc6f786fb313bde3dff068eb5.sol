['pragma solidity ^0.4.15;\n', '\n', 'contract token { function transfer(address receiver, uint amount); }\n', '\n', 'contract SchmeckleTokenSale {\n', '  int public currentStage;\n', '  uint public priceInWei;\n', '  uint public availableTokensOnCurrentStage;\n', '  token public tokenReward;\n', '  event SaleStageUp(int newSaleStage, uint newTokenPrice);\n', '\n', '  address beneficiary;\n', '  uint decimalBase;\n', '  uint totalAmount;\n', '\n', '  function SchmeckleTokenSale() {\n', '      beneficiary = msg.sender;\n', '      priceInWei = 100 szabo;\n', '      decimalBase = 1000000000000000000;\n', '      tokenReward = token(0xD7a1BF3Cc676Fc7111cAD65972C8499c9B98Fb6f);\n', '      availableTokensOnCurrentStage = 538000;\n', '      totalAmount = 0;\n', '      currentStage = -3;\n', '  }\n', '\n', '  function () payable {\n', '      uint amount = msg.value;\n', '\n', '      if (amount < 1 finney) revert();\n', '\n', '      uint tokens = amount * decimalBase / priceInWei;\n', '\n', '      if (tokens > availableTokensOnCurrentStage * decimalBase) revert();\n', '\n', '      if (currentStage > 21) revert();\n', '\n', '      totalAmount += amount;\n', '      availableTokensOnCurrentStage -= tokens / decimalBase + 1;\n', '      if (totalAmount >= 3 ether && currentStage == -3) {\n', '          currentStage = -2;\n', '          priceInWei = 500 szabo;\n', '          SaleStageUp(currentStage, priceInWei);\n', '      }\n', '      if (totalAmount >= 42 ether && currentStage == -2) {\n', '          currentStage = -1;\n', '          priceInWei = 1000 szabo;\n', '          SaleStageUp(currentStage, priceInWei);\n', '      }\n', '      if (availableTokensOnCurrentStage < 1000 && currentStage >= 0) {\n', '          currentStage++;\n', '          priceInWei = priceInWei * 2;\n', '          availableTokensOnCurrentStage = 1000000;\n', '          SaleStageUp(currentStage, priceInWei);\n', '      }\n', '\n', '      tokenReward.transfer(msg.sender, tokens);\n', '  }\n', '\n', '  modifier onlyBeneficiary {\n', '      if (msg.sender != beneficiary) revert();\n', '      _;\n', '  }\n', '\n', ' function withdraw(address recipient, uint amount) onlyBeneficiary {\n', '      if (recipient == 0x0) revert();\n', '      recipient.transfer(amount);\n', ' }\n', '\n', ' function launchSale() onlyBeneficiary () {\n', '      if (currentStage > -1) revert();\n', '      currentStage = 0;\n', '      priceInWei = priceInWei * 2;\n', '      availableTokensOnCurrentStage = 2100000;\n', '      SaleStageUp(currentStage, priceInWei);\n', ' }\n', '}']
['pragma solidity ^0.4.15;\n', '\n', 'contract token { function transfer(address receiver, uint amount); }\n', '\n', 'contract SchmeckleTokenSale {\n', '  int public currentStage;\n', '  uint public priceInWei;\n', '  uint public availableTokensOnCurrentStage;\n', '  token public tokenReward;\n', '  event SaleStageUp(int newSaleStage, uint newTokenPrice);\n', '\n', '  address beneficiary;\n', '  uint decimalBase;\n', '  uint totalAmount;\n', '\n', '  function SchmeckleTokenSale() {\n', '      beneficiary = msg.sender;\n', '      priceInWei = 100 szabo;\n', '      decimalBase = 1000000000000000000;\n', '      tokenReward = token(0xD7a1BF3Cc676Fc7111cAD65972C8499c9B98Fb6f);\n', '      availableTokensOnCurrentStage = 538000;\n', '      totalAmount = 0;\n', '      currentStage = -3;\n', '  }\n', '\n', '  function () payable {\n', '      uint amount = msg.value;\n', '\n', '      if (amount < 1 finney) revert();\n', '\n', '      uint tokens = amount * decimalBase / priceInWei;\n', '\n', '      if (tokens > availableTokensOnCurrentStage * decimalBase) revert();\n', '\n', '      if (currentStage > 21) revert();\n', '\n', '      totalAmount += amount;\n', '      availableTokensOnCurrentStage -= tokens / decimalBase + 1;\n', '      if (totalAmount >= 3 ether && currentStage == -3) {\n', '          currentStage = -2;\n', '          priceInWei = 500 szabo;\n', '          SaleStageUp(currentStage, priceInWei);\n', '      }\n', '      if (totalAmount >= 42 ether && currentStage == -2) {\n', '          currentStage = -1;\n', '          priceInWei = 1000 szabo;\n', '          SaleStageUp(currentStage, priceInWei);\n', '      }\n', '      if (availableTokensOnCurrentStage < 1000 && currentStage >= 0) {\n', '          currentStage++;\n', '          priceInWei = priceInWei * 2;\n', '          availableTokensOnCurrentStage = 1000000;\n', '          SaleStageUp(currentStage, priceInWei);\n', '      }\n', '\n', '      tokenReward.transfer(msg.sender, tokens);\n', '  }\n', '\n', '  modifier onlyBeneficiary {\n', '      if (msg.sender != beneficiary) revert();\n', '      _;\n', '  }\n', '\n', ' function withdraw(address recipient, uint amount) onlyBeneficiary {\n', '      if (recipient == 0x0) revert();\n', '      recipient.transfer(amount);\n', ' }\n', '\n', ' function launchSale() onlyBeneficiary () {\n', '      if (currentStage > -1) revert();\n', '      currentStage = 0;\n', '      priceInWei = priceInWei * 2;\n', '      availableTokensOnCurrentStage = 2100000;\n', '      SaleStageUp(currentStage, priceInWei);\n', ' }\n', '}']
