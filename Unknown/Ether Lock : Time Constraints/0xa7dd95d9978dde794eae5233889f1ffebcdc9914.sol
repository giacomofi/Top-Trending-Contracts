['pragma solidity ^0.4.11;\n', '\n', '\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      throw;\n', '    }\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '\n', '    /// @dev `owner` is the only address that can call a function with this\n', '    /// modifier\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    address public owner;\n', '\n', '    /// @notice The Constructor assigns the message sender to be `owner`\n', '    function Ownable() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    address public newOwner;\n', '\n', '    /// @notice `owner` can step down and assign some other address to this role\n', '    /// @param _newOwner The address of the new owner.\n', '    function changeOwner(address _newOwner) onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '\n', '    function acceptOwnership() {\n', '        if (msg.sender == newOwner) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  bool public stopped;\n', '  event onEmergencyChanged(bool isStopped);\n', '\n', '  modifier stopInEmergency {\n', '    if (stopped) {\n', '      throw;\n', '    }\n', '    _;\n', '  }\n', '\n', '  modifier onlyInEmergency {\n', '    if (!stopped) {\n', '      throw;\n', '    }\n', '    _;\n', '  }\n', '\n', '  // called by the owner on emergency, triggers stopped state\n', '  function emergencyStop() external onlyOwner {\n', '    stopped = true;\n', '    onEmergencyChanged(stopped);\n', '  }\n', '\n', '  // called by the owner on end of emergency, returns to normal state\n', '  function release() external onlyOwner onlyInEmergency {\n', '    stopped = false;\n', '    onEmergencyChanged(stopped);\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() constant returns (uint);\n', '  function balanceOf(address who) constant returns (uint);\n', '  function transfer(address to, uint value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '\n', '  mapping(address => uint) balances;\n', '\n', '  function allowance(address owner, address spender) constant returns (uint);\n', '  function transferFrom(address from, address to, uint value) returns (bool);\n', '  function approve(address spender, uint value) returns (bool);\n', '  function approveAndCall(address spender, uint256 value, bytes extraData) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '\n', '  function doTransfer(address _from, address _to, uint _amount) internal returns(bool);\n', '}\n', '\n', 'contract GrantsControlled {\n', '    modifier onlyGrantsController { if (msg.sender != grantsController) throw; _; }\n', '\n', '    address public grantsController;\n', '\n', '    function GrantsControlled() { grantsController = msg.sender;}\n', '\n', '    function changeGrantsController(address _newController) onlyGrantsController {\n', '        grantsController = _newController;\n', '    }\n', '}\n', '\n', 'contract LimitedTransferToken is ERC20 {\n', '  // Checks whether it can transfer or otherwise throws.\n', '  modifier canTransfer(address _sender, uint _value) {\n', '   if (_value > transferableTokens(_sender, uint64(now))) throw;\n', '   _;\n', '  }\n', '\n', '  // Checks modifier and allows transfer if tokens are not locked.\n', '  function transfer(address _to, uint _value) canTransfer(msg.sender, _value) returns (bool) {\n', '   return super.transfer(_to, _value);\n', '  }\n', '\n', '  // Checks modifier and allows transfer if tokens are not locked.\n', '  function transferFrom(address _from, address _to, uint _value) canTransfer(_from, _value) returns (bool) {\n', '   return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  // Default transferable tokens function returns all tokens for a holder (no limit).\n', '  function transferableTokens(address holder, uint64 time) constant public returns (uint256) {\n', '    return balanceOf(holder);\n', '  }\n', '}\n', '\n', 'contract Controlled {\n', '    /// @notice The address of the controller is the only address that can call\n', '    ///  a function with this modifier\n', '    modifier onlyController { if (msg.sender != controller) throw; _; }\n', '\n', '    address public controller;\n', '\n', '    function Controlled() { controller = msg.sender;}\n', '\n', '    /// @notice Changes the controller of the contract\n', '    /// @param _newController The new controller of the contract\n', '    function changeController(address _newController) onlyController {\n', '        controller = _newController;\n', '    }\n', '}\n', '\n', 'contract MiniMeToken is ERC20, Controlled {\n', '    using SafeMath for uint;\n', '\n', '    string public name;                //The Token&#39;s name: e.g. DigixDAO Tokens\n', '    uint8 public decimals;             //Number of decimals of the smallest unit\n', '    string public symbol;              //An identifier: e.g. REP\n', '    string public version = &#39;MMT_0.1&#39;; //An arbitrary versioning scheme\n', '\n', '\n', '    /// @dev `Checkpoint` is the structure that attaches a block number to a\n', '    ///  given value, the block number attached is the one that last changed the\n', '    ///  value\n', '    struct  Checkpoint {\n', '\n', '        // `fromBlock` is the block number that the value was generated from\n', '        uint128 fromBlock;\n', '\n', '        // `value` is the amount of tokens at a specific block number\n', '        uint128 value;\n', '    }\n', '\n', '    // `parentToken` is the Token address that was cloned to produce this token;\n', '    //  it will be 0x0 for a token that was not cloned\n', '    MiniMeToken public parentToken;\n', '\n', '    // `parentSnapShotBlock` is the block number from the Parent Token that was\n', '    //  used to determine the initial distribution of the Clone Token\n', '    uint public parentSnapShotBlock;\n', '\n', '    // `creationBlock` is the block number that the Clone Token was created\n', '    uint public creationBlock;\n', '\n', '    // `balances` is the map that tracks the balance of each address, in this\n', '    //  contract when the balance changes the block number that the change\n', '    //  occurred is also included in the map\n', '    mapping (address => Checkpoint[]) balances;\n', '\n', '    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    // Tracks the history of the `totalSupply` of the token\n', '    Checkpoint[] totalSupplyHistory;\n', '\n', '    // Flag that determines if the token is transferable or not.\n', '    bool public transfersEnabled;\n', '\n', '    // The factory used to create new clone tokens\n', '    MiniMeTokenFactory public tokenFactory;\n', '\n', '////////////////\n', '// Constructor\n', '////////////////\n', '\n', '    /// @notice Constructor to create a MiniMeToken\n', '    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\n', '    ///  will create the Clone token contracts, the token factory needs to be\n', '    ///  deployed first\n', '    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\n', '    ///  new token\n', '    /// @param _parentSnapShotBlock Block of the parent token that will\n', '    ///  determine the initial distribution of the clone token, set to 0 if it\n', '    ///  is a new token\n', '    /// @param _tokenName Name of the new token\n', '    /// @param _decimalUnits Number of decimals of the new token\n', '    /// @param _tokenSymbol Token Symbol for the new token\n', '    /// @param _transfersEnabled If true, tokens will be able to be transferred\n', '    function MiniMeToken(\n', '        address _tokenFactory,\n', '        address _parentToken,\n', '        uint _parentSnapShotBlock,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol,\n', '        bool _transfersEnabled\n', '    ) {\n', '        tokenFactory = MiniMeTokenFactory(_tokenFactory);\n', '        name = _tokenName;                                 // Set the name\n', '        decimals = _decimalUnits;                          // Set the decimals\n', '        symbol = _tokenSymbol;                             // Set the symbol\n', '        parentToken = MiniMeToken(_parentToken);\n', '        parentSnapShotBlock = _parentSnapShotBlock;\n', '        transfersEnabled = _transfersEnabled;\n', '        creationBlock = block.number;\n', '    }\n', '\n', '\n', '///////////////////\n', '// ERC20 Methods\n', '///////////////////\n', '\n', '    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _amount) returns (bool success) {\n', '        if (!transfersEnabled) throw;\n', '        return doTransfer(msg.sender, _to, _amount);\n', '    }\n', '\n', '    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n', '    ///  is approved by `_from`\n', '    /// @param _from The address holding the tokens being transferred\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return True if the transfer was successful\n', '    function transferFrom(address _from, address _to, uint256 _amount\n', '    ) returns (bool success) {\n', '\n', '        // The controller of this contract can move tokens around at will,\n', '        //  this is important to recognize! Confirm that you trust the\n', '        //  controller of this contract, which in most situations should be\n', '        //  another open source smart contract or 0x0\n', '        if (msg.sender != controller) {\n', '            if (!transfersEnabled) throw;\n', '\n', '            // The standard ERC 20 transferFrom functionality\n', '            if (allowed[_from][msg.sender] < _amount) return false;\n', '            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '        }\n', '        return doTransfer(_from, _to, _amount);\n', '    }\n', '\n', '    /// @dev This is the actual transfer function in the token contract, it can\n', '    ///  only be called by other functions in this contract.\n', '    /// @param _from The address holding the tokens being transferred\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return True if the transfer was successful\n', '    function doTransfer(address _from, address _to, uint _amount\n', '    ) internal returns(bool) {\n', '\n', '           if (_amount == 0) {\n', '               return true;\n', '           }\n', '\n', '           if (parentSnapShotBlock >= block.number) throw;\n', '\n', '           // Do not allow transfer to 0x0 or the token contract itself\n', '           if ((_to == 0) || (_to == address(this))) throw;\n', '\n', '           // If the amount being transfered is more than the balance of the\n', '           //  account the transfer returns false\n', '           var previousBalanceFrom = balanceOfAt(_from, block.number);\n', '           if (previousBalanceFrom < _amount) {\n', '               return false;\n', '           }\n', '\n', '           // Alerts the token controller of the transfer\n', '           if (isContract(controller)) {\n', '               if (!TokenController(controller).onTransfer(_from, _to, _amount))\n', '               throw;\n', '           }\n', '\n', '           // First update the balance array with the new value for the address\n', '           //  sending the tokens\n', '           updateValueAtNow(balances[_from], previousBalanceFrom.sub(_amount));\n', '\n', '           // Then update the balance array with the new value for the address\n', '           //  receiving the tokens\n', '           var previousBalanceTo = balanceOfAt(_to, block.number);\n', '           updateValueAtNow(balances[_to], previousBalanceTo.add(_amount));\n', '\n', '           // An event to make the transfer easy to find on the blockchain\n', '           Transfer(_from, _to, _amount);\n', '\n', '           return true;\n', '    }\n', '\n', '    /// @param _owner The address that&#39;s balance is being requested\n', '    /// @return The balance of `_owner` at the current block\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balanceOfAt(_owner, block.number);\n', '    }\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n', '    ///  its behalf. This is a modified version of the ERC20 approve function\n', '    ///  to be a little bit safer\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _amount The amount of tokens to be approved for transfer\n', '    /// @return True if the approval was successful\n', '    function approve(address _spender, uint256 _amount) returns (bool success) {\n', '        if (!transfersEnabled) throw;\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender,0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        if ((_amount!=0) && (allowed[msg.sender][_spender] !=0)) throw;\n', '\n', '        // Alerts the token controller of the approve function call\n', '        if (isContract(controller)) {\n', '            if (!TokenController(controller).onApprove(msg.sender, _spender, _amount))\n', '                throw;\n', '        }\n', '\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    /// @dev This function makes it easy to read the `allowed[]` map\n', '    /// @param _owner The address of the account that owns the token\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens of _owner that _spender is allowed\n', '    ///  to spend\n', '    function allowance(address _owner, address _spender\n', '    ) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n', '    ///  its behalf, and then a function is triggered in the contract that is\n', '    ///  being approved, `_spender`. This allows users to use their tokens to\n', '    ///  interact with contracts in one function call instead of two\n', '    /// @param _spender The address of the contract able to transfer the tokens\n', '    /// @param _amount The amount of tokens to be approved for transfer\n', '    /// @return True if the function call was successful\n', '    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n', '    ) returns (bool success) {\n', '        if (!approve(_spender, _amount)) throw;\n', '\n', '        ApproveAndCallFallBack(_spender).receiveApproval(\n', '            msg.sender,\n', '            _amount,\n', '            this,\n', '            _extraData\n', '        );\n', '\n', '        return true;\n', '    }\n', '\n', '    /// @dev This function makes it easy to get the total number of tokens\n', '    /// @return The total number of tokens\n', '    function totalSupply() constant returns (uint) {\n', '        return totalSupplyAt(block.number);\n', '    }\n', '\n', '\n', '////////////////\n', '// Query balance and totalSupply in History\n', '////////////////\n', '\n', '    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @param _blockNumber The block number when the balance is queried\n', '    /// @return The balance at `_blockNumber`\n', '    function balanceOfAt(address _owner, uint _blockNumber) constant\n', '        returns (uint) {\n', '\n', '        // These next few lines are used when the balance of the token is\n', '        //  requested before a check point was ever created for this token, it\n', '        //  requires that the `parentToken.balanceOfAt` be queried at the\n', '        //  genesis block for that token as this contains initial balance of\n', '        //  this token\n', '        if ((balances[_owner].length == 0)\n', '            || (balances[_owner][0].fromBlock > _blockNumber)) {\n', '            if (address(parentToken) != 0) {\n', '                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\n', '            } else {\n', '                // Has no parent\n', '                return 0;\n', '            }\n', '\n', '        // This will return the expected balance during normal situations\n', '        } else {\n', '            return getValueAt(balances[_owner], _blockNumber);\n', '        }\n', '    }\n', '\n', '    /// @notice Total amount of tokens at a specific `_blockNumber`.\n', '    /// @param _blockNumber The block number when the totalSupply is queried\n', '    /// @return The total amount of tokens at `_blockNumber`\n', '    function totalSupplyAt(uint _blockNumber) constant returns(uint) {\n', '\n', '        // These next few lines are used when the totalSupply of the token is\n', '        //  requested before a check point was ever created for this token, it\n', '        //  requires that the `parentToken.totalSupplyAt` be queried at the\n', '        //  genesis block for this token as that contains totalSupply of this\n', '        //  token at this block number.\n', '        if ((totalSupplyHistory.length == 0)\n', '            || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n', '            if (address(parentToken) != 0) {\n', '                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\n', '            } else {\n', '                return 0;\n', '            }\n', '\n', '        // This will return the expected totalSupply during normal situations\n', '        } else {\n', '            return getValueAt(totalSupplyHistory, _blockNumber);\n', '        }\n', '    }\n', '\n', '////////////////\n', '// Clone Token Method\n', '////////////////\n', '\n', '    /// @notice Creates a new clone token with the initial distribution being\n', '    ///  this token at `_snapshotBlock`\n', '    /// @param _cloneTokenName Name of the clone token\n', '    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\n', '    /// @param _cloneTokenSymbol Symbol of the clone token\n', '    /// @param _snapshotBlock Block when the distribution of the parent token is\n', '    ///  copied to set the initial distribution of the new clone token;\n', '    ///  if the block is zero than the actual block, the current block is used\n', '    /// @param _transfersEnabled True if transfers are allowed in the clone\n', '    /// @return The address of the new MiniMeToken Contract\n', '    function createCloneToken(\n', '        string _cloneTokenName,\n', '        uint8 _cloneDecimalUnits,\n', '        string _cloneTokenSymbol,\n', '        uint _snapshotBlock,\n', '        bool _transfersEnabled\n', '        ) returns(address) {\n', '        if (_snapshotBlock == 0) _snapshotBlock = block.number;\n', '        MiniMeToken cloneToken = tokenFactory.createCloneToken(\n', '            this,\n', '            _snapshotBlock,\n', '            _cloneTokenName,\n', '            _cloneDecimalUnits,\n', '            _cloneTokenSymbol,\n', '            _transfersEnabled\n', '            );\n', '\n', '        cloneToken.changeController(msg.sender);\n', '\n', '        // An event to make the token easy to find on the blockchain\n', '        NewCloneToken(address(cloneToken), _snapshotBlock);\n', '        return address(cloneToken);\n', '    }\n', '\n', '////////////////\n', '// Generate and destroy tokens\n', '////////////////\n', '\n', '    /// @notice Generates `_amount` tokens that are assigned to `_owner`\n', '    /// @param _owner The address that will be assigned the new tokens\n', '    /// @param _amount The quantity of tokens generated\n', '    /// @return True if the tokens are generated correctly\n', '    function generateTokens(address _owner, uint _amount\n', '    ) onlyController returns (bool) {\n', '        uint curTotalSupply = getValueAt(totalSupplyHistory, block.number);\n', '        updateValueAtNow(totalSupplyHistory, curTotalSupply.add(_amount));\n', '        var previousBalanceTo = balanceOf(_owner);\n', '        updateValueAtNow(balances[_owner], previousBalanceTo.add(_amount));\n', '        Transfer(0, _owner, _amount);\n', '        return true;\n', '    }\n', '\n', '\n', '    /// @notice Burns `_amount` tokens from `_owner`\n', '    /// @param _owner The address that will lose the tokens\n', '    /// @param _amount The quantity of tokens to burn\n', '    /// @return True if the tokens are burned correctly\n', '    function destroyTokens(address _owner, uint _amount\n', '    ) onlyController returns (bool) {\n', '        uint curTotalSupply = getValueAt(totalSupplyHistory, block.number);\n', '        if (curTotalSupply < _amount) throw;\n', '        updateValueAtNow(totalSupplyHistory, curTotalSupply.sub(_amount));\n', '        var previousBalanceFrom = balanceOf(_owner);\n', '        if (previousBalanceFrom < _amount) throw;\n', '        updateValueAtNow(balances[_owner], previousBalanceFrom.sub(_amount));\n', '        Transfer(_owner, 0, _amount);\n', '        return true;\n', '    }\n', '\n', '////////////////\n', '// Enable tokens transfers\n', '////////////////\n', '\n', '\n', '    /// @notice Enables token holders to transfer their tokens freely if true\n', '    /// @param _transfersEnabled True if transfers are allowed in the clone\n', '    function enableTransfers(bool _transfersEnabled) onlyController {\n', '        transfersEnabled = _transfersEnabled;\n', '    }\n', '\n', '////////////////\n', '// Internal helper functions to query and set a value in a snapshot array\n', '////////////////\n', '\n', '    /// @dev `getValueAt` retrieves the number of tokens at a given block number\n', '    /// @param checkpoints The history of values being queried\n', '    /// @param _block The block number to retrieve the value at\n', '    /// @return The number of tokens being queried\n', '    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n', '    ) constant internal returns (uint) {\n', '        if (checkpoints.length == 0) return 0;\n', '\n', '        // Shortcut for the actual value\n', '        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\n', '            return checkpoints[checkpoints.length-1].value;\n', '        if (_block < checkpoints[0].fromBlock) return 0;\n', '\n', '        // Binary search of the value in the array\n', '        uint min = 0;\n', '        uint max = checkpoints.length-1;\n', '        while (max > min) {\n', '            uint mid = (max + min + 1)/ 2;\n', '            if (checkpoints[mid].fromBlock<=_block) {\n', '                min = mid;\n', '            } else {\n', '                max = mid-1;\n', '            }\n', '        }\n', '        return checkpoints[min].value;\n', '    }\n', '\n', '    /// @dev `updateValueAtNow` used to update the `balances` map and the\n', '    ///  `totalSupplyHistory`\n', '    /// @param checkpoints The history of data being updated\n', '    /// @param _value The new number of tokens\n', '    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\n', '    ) internal  {\n', '        if ((checkpoints.length == 0)\n', '        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\n', '               Checkpoint newCheckPoint = checkpoints[ checkpoints.length++ ];\n', '               newCheckPoint.fromBlock =  uint128(block.number);\n', '               newCheckPoint.value = uint128(_value);\n', '           } else {\n', '               Checkpoint oldCheckPoint = checkpoints[checkpoints.length-1];\n', '               oldCheckPoint.value = uint128(_value);\n', '           }\n', '    }\n', '\n', '    /// @dev Internal function to determine if an address is a contract\n', '    /// @param _addr The address being queried\n', '    /// @return True if `_addr` is a contract\n', '    function isContract(address _addr) constant internal returns(bool) {\n', '        uint size;\n', '        if (_addr == 0) return false;\n', '        assembly {\n', '            size := extcodesize(_addr)\n', '        }\n', '        return size>0;\n', '    }\n', '\n', '    /// @dev Helper function to return a min betwen the two uints\n', '    function min(uint a, uint b) internal returns (uint) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /// @notice The fallback function: If the contract&#39;s controller has not been\n', '    ///  set to 0, then the `proxyPayment` method is called which relays the\n', '    ///  ether and creates tokens as described in the token controller contract\n', '    function ()  payable {\n', '        if (isContract(controller)) {\n', '            if (! TokenController(controller).proxyPayment.value(msg.value)(msg.sender))\n', '                throw;\n', '        } else {\n', '            throw;\n', '        }\n', '    }\n', '\n', '    //////////\n', '    // Safety Methods\n', '    //////////\n', '\n', '    /// @notice This method can be used by the controller to extract mistakenly\n', '    ///  sent tokens to this contract.\n', '    /// @param _token The address of the token contract that you want to recover\n', '    ///  set to 0 in case you want to extract ether.\n', '    /// @param _claimer Address that tokens will be send to\n', '    function claimTokens(address _token, address _claimer) onlyController {\n', '        if (_token == 0x0) {\n', '            _claimer.transfer(this.balance);\n', '            return;\n', '        }\n', '\n', '        ERC20Basic token = ERC20Basic(_token);\n', '        uint balance = token.balanceOf(this);\n', '        token.transfer(_claimer, balance);\n', '        ClaimedTokens(_token, _claimer, balance);\n', '    }\n', '\n', '\n', '////////////////\n', '// Events\n', '////////////////\n', '    event ClaimedTokens(address indexed _token, address indexed _claimer, uint _amount);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n', '    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\n', '    event Approval(\n', '        address indexed _owner,\n', '        address indexed _spender,\n', '        uint256 _amount\n', '        );\n', '\n', '}\n', '\n', '\n', '////////////////\n', '// MiniMeTokenFactory\n', '////////////////\n', '\n', '/// @dev This contract is used to generate clone contracts from a contract.\n', '///  In solidity this is the way to create a contract from a contract of the\n', '///  same class\n', 'contract MiniMeTokenFactory {\n', '\n', '    /// @notice Update the DApp by creating a new token with new functionalities\n', '    ///  the msg.sender becomes the controller of this clone token\n', '    /// @param _parentToken Address of the token being cloned\n', '    /// @param _snapshotBlock Block of the parent token that will\n', '    ///  determine the initial distribution of the clone token\n', '    /// @param _tokenName Name of the new token\n', '    /// @param _decimalUnits Number of decimals of the new token\n', '    /// @param _tokenSymbol Token Symbol for the new token\n', '    /// @param _transfersEnabled If true, tokens will be able to be transferred\n', '    /// @return The address of the new token contract\n', '    function createCloneToken(\n', '        address _parentToken,\n', '        uint _snapshotBlock,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol,\n', '        bool _transfersEnabled\n', '    ) returns (MiniMeToken) {\n', '        MiniMeToken newToken = new MiniMeToken(\n', '            this,\n', '            _parentToken,\n', '            _snapshotBlock,\n', '            _tokenName,\n', '            _decimalUnits,\n', '            _tokenSymbol,\n', '            _transfersEnabled\n', '            );\n', '\n', '        newToken.changeController(msg.sender);\n', '        return newToken;\n', '    }\n', '}\n', '\n', 'contract VestedToken is LimitedTransferToken, GrantsControlled {\n', '  using SafeMath for uint;\n', '\n', '  uint256 MAX_GRANTS_PER_ADDRESS = 20;\n', '\n', '  struct TokenGrant {\n', '    address granter;     // 20 bytes\n', '    uint256 value;       // 32 bytes\n', '    uint64 cliff;\n', '    uint64 vesting;\n', '    uint64 start;        // 3 * 8 = 24 bytes\n', '    bool revokable;\n', '    bool burnsOnRevoke;  // 2 * 1 = 2 bits? or 2 bytes?\n', '  } // total 78 bytes = 3 sstore per operation (32 per sstore)\n', '\n', '  mapping (address => TokenGrant[]) public grants;\n', '\n', '  event NewTokenGrant(address indexed from, address indexed to, uint256 value, uint256 grantId);\n', '\n', '  /**\n', '   * @dev Grant tokens to a specified address\n', '   * @param _to address The address which the tokens will be granted to.\n', '   * @param _value uint256 The amount of tokens to be granted.\n', '   * @param _start uint64 Time of the beginning of the grant.\n', '   * @param _cliff uint64 Time of the cliff period.\n', '   * @param _vesting uint64 The vesting period.\n', '   */\n', '  function grantVestedTokens(\n', '    address _to,\n', '    uint256 _value,\n', '    uint64 _start,\n', '    uint64 _cliff,\n', '    uint64 _vesting,\n', '    bool _revokable,\n', '    bool _burnsOnRevoke\n', '  ) onlyGrantsController public {\n', '\n', '    // Check for date inconsistencies that may cause unexpected behavior\n', '    if (_cliff < _start || _vesting < _cliff) {\n', '      throw;\n', '    }\n', '\n', '    if (tokenGrantsCount(_to) > MAX_GRANTS_PER_ADDRESS) throw;   // To prevent a user being spammed and have his balance locked (out of gas attack when calculating vesting).\n', '\n', '    uint count = grants[_to].push(\n', '                TokenGrant(\n', '                  _revokable ? msg.sender : 0, // avoid storing an extra 20 bytes when it is non-revokable\n', '                  _value,\n', '                  _cliff,\n', '                  _vesting,\n', '                  _start,\n', '                  _revokable,\n', '                  _burnsOnRevoke\n', '                )\n', '              );\n', '\n', '    transfer(_to, _value);\n', '\n', '    NewTokenGrant(msg.sender, _to, _value, count - 1);\n', '  }\n', '\n', '  /**\n', '   * @dev Revoke the grant of tokens of a specifed address.\n', '   * @param _holder The address which will have its tokens revoked.\n', '   * @param _grantId The id of the token grant.\n', '   */\n', '  function revokeTokenGrant(address _holder, uint _grantId) public {\n', '    TokenGrant grant = grants[_holder][_grantId];\n', '\n', '    if (!grant.revokable) { // Check if grant was revokable\n', '      throw;\n', '    }\n', '\n', '    if (grant.granter != msg.sender) { // Only granter can revoke it\n', '      throw;\n', '    }\n', '\n', '    address receiver = grant.burnsOnRevoke ? 0xdead : msg.sender;\n', '\n', '    uint256 nonVested = nonVestedTokens(grant, uint64(now));\n', '\n', '    // remove grant from array\n', '    delete grants[_holder][_grantId];\n', '    grants[_holder][_grantId] = grants[_holder][grants[_holder].length.sub(1)];\n', '    grants[_holder].length -= 1;\n', '\n', '    // This will call MiniMe&#39;s doTransfer method, so token is transferred according to\n', '    // MiniMe Token logic\n', '    doTransfer(_holder, receiver, nonVested);\n', '\n', '    Transfer(_holder, receiver, nonVested);\n', '  }\n', '\n', '  /**\n', '   * @dev Revoke all grants of tokens of a specifed address.\n', '   * @param _holder The address which will have its tokens revoked.\n', '   */\n', '    function revokeAllTokenGrants(address _holder) {\n', '        var grandsCount = tokenGrantsCount(_holder);\n', '        for (uint i = 0; i < grandsCount; i++) {\n', '          revokeTokenGrant(_holder, 0);\n', '        }\n', '    }\n', '\n', '  /**\n', '   * @dev Calculate the total amount of transferable tokens of a holder at a given time\n', '   * @param holder address The address of the holder\n', '   * @param time uint64 The specific time.\n', '   * @return An uint representing a holder&#39;s total amount of transferable tokens.\n', '   */\n', '  function transferableTokens(address holder, uint64 time) constant public returns (uint256) {\n', '    uint256 grantIndex = tokenGrantsCount(holder);\n', '\n', '    if (grantIndex == 0) return balanceOf(holder); // shortcut for holder without grants\n', '\n', '    // Iterate through all the grants the holder has, and add all non-vested tokens\n', '    uint256 nonVested = 0;\n', '    for (uint256 i = 0; i < grantIndex; i++) {\n', '      nonVested = SafeMath.add(nonVested, nonVestedTokens(grants[holder][i], time));\n', '    }\n', '\n', '    // Balance - totalNonVested is the amount of tokens a holder can transfer at any given time\n', '    uint256 vestedTransferable = SafeMath.sub(balanceOf(holder), nonVested);\n', '\n', '    // Return the minimum of how many vested can transfer and other value\n', '    // in case there are other limiting transferability factors (default is balanceOf)\n', '    return SafeMath.min256(vestedTransferable, super.transferableTokens(holder, time));\n', '  }\n', '\n', '  /**\n', '   * @dev Check the amount of grants that an address has.\n', '   * @param _holder The holder of the grants.\n', '   * @return A uint representing the total amount of grants.\n', '   */\n', '  function tokenGrantsCount(address _holder) constant returns (uint index) {\n', '    return grants[_holder].length;\n', '  }\n', '\n', '  /**\n', '   * @dev Calculate amount of vested tokens at a specifc time.\n', '   * @param tokens uint256 The amount of tokens grantted.\n', '   * @param time uint64 The time to be checked\n', '   * @param start uint64 A time representing the begining of the grant\n', '   * @param cliff uint64 The cliff period.\n', '   * @param vesting uint64 The vesting period.\n', '   * @return An uint representing the amount of vested tokensof a specif grant.\n', '   *  transferableTokens\n', '   *   |                         _/--------   vestedTokens rect\n', '   *   |                       _/\n', '   *   |                     _/\n', '   *   |                   _/\n', '   *   |                 _/\n', '   *   |                /\n', '   *   |              .|\n', '   *   |            .  |\n', '   *   |          .    |\n', '   *   |        .      |\n', '   *   |      .        |\n', '   *   |    .          |\n', '   *   +===+===========+---------+----------> time\n', '   *      Start       Clift    Vesting\n', '   */\n', '  function calculateVestedTokens(\n', '    uint256 tokens,\n', '    uint256 time,\n', '    uint256 start,\n', '    uint256 cliff,\n', '    uint256 vesting) constant returns (uint256)\n', '    {\n', '      // Shortcuts for before cliff and after vesting cases.\n', '      if (time < cliff) return 0;\n', '      if (time >= vesting) return tokens;\n', '\n', '      // Interpolate all vested tokens.\n', '      // As before cliff the shortcut returns 0, we can use just calculate a value\n', '      // in the vesting rect (as shown in above&#39;s figure)\n', '\n', '      // vestedTokens = tokens * (time - start) / (vesting - start)\n', '      uint256 vestedTokens = SafeMath.div(\n', '                                    SafeMath.mul(\n', '                                      tokens,\n', '                                      SafeMath.sub(time, start)\n', '                                      ),\n', '                                    SafeMath.sub(vesting, start)\n', '                                    );\n', '\n', '      return vestedTokens;\n', '  }\n', '\n', '  /**\n', '   * @dev Get all information about a specifc grant.\n', '   * @param _holder The address which will have its tokens revoked.\n', '   * @param _grantId The id of the token grant.\n', '   * @return Returns all the values that represent a TokenGrant(address, value, start, cliff,\n', '   * revokability, burnsOnRevoke, and vesting) plus the vested value at the current time.\n', '   */\n', '  function tokenGrant(address _holder, uint _grantId) constant returns (address granter, uint256 value, uint256 vested, uint64 start, uint64 cliff, uint64 vesting, bool revokable, bool burnsOnRevoke) {\n', '    TokenGrant grant = grants[_holder][_grantId];\n', '\n', '    granter = grant.granter;\n', '    value = grant.value;\n', '    start = grant.start;\n', '    cliff = grant.cliff;\n', '    vesting = grant.vesting;\n', '    revokable = grant.revokable;\n', '    burnsOnRevoke = grant.burnsOnRevoke;\n', '\n', '    vested = vestedTokens(grant, uint64(now));\n', '  }\n', '\n', '  /**\n', '   * @dev Get the amount of vested tokens at a specific time.\n', '   * @param grant TokenGrant The grant to be checked.\n', '   * @param time The time to be checked\n', '   * @return An uint representing the amount of vested tokens of a specific grant at a specific time.\n', '   */\n', '  function vestedTokens(TokenGrant grant, uint64 time) private constant returns (uint256) {\n', '    return calculateVestedTokens(\n', '      grant.value,\n', '      uint256(time),\n', '      uint256(grant.start),\n', '      uint256(grant.cliff),\n', '      uint256(grant.vesting)\n', '    );\n', '  }\n', '\n', '  /**\n', '   * @dev Calculate the amount of non vested tokens at a specific time.\n', '   * @param grant TokenGrant The grant to be checked.\n', '   * @param time uint64 The time to be checked\n', '   * @return An uint representing the amount of non vested tokens of a specifc grant on the\n', '   * passed time frame.\n', '   */\n', '  function nonVestedTokens(TokenGrant grant, uint64 time) private constant returns (uint256) {\n', '    return grant.value.sub(vestedTokens(grant, time));\n', '  }\n', '\n', '  /**\n', '   * @dev Calculate the date when the holder can trasfer all its tokens\n', '   * @param holder address The address of the holder\n', '   * @return An uint representing the date of the last transferable tokens.\n', '   */\n', '  function lastTokenIsTransferableDate(address holder) constant public returns (uint64 date) {\n', '    date = uint64(now);\n', '    uint256 grantIndex = grants[holder].length;\n', '    for (uint256 i = 0; i < grantIndex; i++) {\n', '      date = SafeMath.max64(grants[holder][i].vesting, date);\n', '    }\n', '  }\n', '}\n', '\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 _amount, address _token, bytes _data);\n', '}\n', '\n', '\n', 'contract TokenController {\n', '    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n', '    /// @param _owner The address that sent the ether to create tokens\n', '    /// @return True if the ether is accepted, false if it throws\n', '    function proxyPayment(address _owner) payable returns(bool);\n', '\n', '    /// @notice Notifies the controller about a token transfer allowing the\n', '    ///  controller to react if desired\n', '    /// @param _from The origin of the transfer\n', '    /// @param _to The destination of the transfer\n', '    /// @param _amount The amount of the transfer\n', '    /// @return False if the controller does not authorize the transfer\n', '    function onTransfer(address _from, address _to, uint _amount) returns(bool);\n', '\n', '    /// @notice Notifies the controller about an approval allowing the\n', '    ///  controller to react if desired\n', '    /// @param _owner The address that calls `approve()`\n', '    /// @param _spender The spender in the `approve()` call\n', '    /// @param _amount The amount in the `approve()` call\n', '    /// @return False if the controller does not authorize the approval\n', '    function onApprove(address _owner, address _spender, uint _amount)\n', '        returns(bool);\n', '}\n', '\n', 'contract District0xNetworkToken is MiniMeToken, VestedToken {\n', '    function District0xNetworkToken(address _controller, address _tokenFactory)\n', '        MiniMeToken(\n', '            _tokenFactory,\n', '            0x0,                        // no parent token\n', '            0,                          // no snapshot block number from parent\n', '            "district0x Network Token", // Token name\n', '            18,                         // Decimals\n', '            "DNT",                      // Symbol\n', '            true                        // Enable transfers\n', '            )\n', '    {\n', '        changeController(_controller);\n', '        changeGrantsController(_controller);\n', '    }\n', '}\n', '\n', 'contract HasNoTokens is Ownable {\n', '\n', '  District0xNetworkToken public district0xNetworkToken;\n', '\n', ' /**\n', '  * @dev Reject all ERC23 compatible tokens\n', '  * @param from_ address The address that is transferring the tokens\n', '  * @param value_ uint256 the amount of the specified token\n', '  * @param data_ Bytes The data passed from the caller.\n', '  */\n', '  function tokenFallback(address from_, uint256 value_, bytes data_) external {\n', '    throw;\n', '  }\n', '\n', '  function isTokenSaleToken(address tokenAddr) returns(bool);\n', '\n', '  /**\n', '   * @dev Reclaim all ERC20Basic compatible tokens\n', '   * @param tokenAddr address The address of the token contract\n', '   */\n', '  function reclaimToken(address tokenAddr) external onlyOwner {\n', '    require(!isTokenSaleToken(tokenAddr));\n', '    ERC20Basic tokenInst = ERC20Basic(tokenAddr);\n', '    uint256 balance = tokenInst.balanceOf(this);\n', '    tokenInst.transfer(msg.sender, balance);\n', '  }\n', '}\n', '\n', '\n', 'contract District0xContribution is Pausable, HasNoTokens, TokenController {\n', '    using SafeMath for uint;\n', '\n', '    District0xNetworkToken public district0xNetworkToken;\n', '    address public multisigWallet;                                      // Wallet that receives all sale funds\n', '    address public founder1;                                            // Wallet of founder 1\n', '    address public founder2;                                            // Wallet of founder 2\n', '    address public earlySponsor;                                        // Wallet of early sponsor\n', '    address[] public advisers;                                          // 4 Wallets of advisors\n', '\n', '    uint public constant FOUNDER1_STAKE = 119000000 ether;              // 119M DNT\n', '    uint public constant FOUNDER2_STAKE = 79000000 ether;               // 79M  DNT\n', '    uint public constant EARLY_CONTRIBUTOR_STAKE = 5000000 ether;       // 5M   DNT\n', '    uint public constant ADVISER_STAKE = 5000000 ether;                 // 5M   DNT\n', '    uint public constant ADVISER_STAKE2 = 1000000 ether;                // 1M   DNT\n', '    uint public constant COMMUNITY_ADVISERS_STAKE = 5000000 ether;      // 5M   DNT\n', '    uint public constant CONTRIB_PERIOD1_STAKE = 600000000 ether;       // 600M DNT\n', '    uint public constant CONTRIB_PERIOD2_STAKE = 140000000 ether;       // 140M DNT\n', '    uint public constant CONTRIB_PERIOD3_STAKE = 40000000 ether;        // 40M  DNT\n', '\n', '    uint public minContribAmount = 0.01 ether;                          // 0.01 ether\n', '    uint public maxGasPrice = 50000000000;                              // 50 GWei\n', '\n', '    uint public constant TEAM_VESTING_CLIFF = 24 weeks;                 // 6 months vesting cliff for founders and advisors, except community advisors\n', '    uint public constant TEAM_VESTING_PERIOD = 96 weeks;                // 2 years vesting period for founders and advisors, except community advisors\n', '\n', '    uint public constant EARLY_CONTRIBUTOR_VESTING_CLIFF = 12 weeks;    // 3 months vesting cliff for early sponsor\n', '    uint public constant EARLY_CONTRIBUTOR_VESTING_PERIOD = 24 weeks;   // 6 months vesting cliff for early sponsor\n', '\n', '    bool public tokenTransfersEnabled = false;                          // DNT token transfers will be enabled manually\n', '                                                                        // after first contribution period\n', '                                                                        // Can&#39;t be disabled back\n', '    struct Contributor {\n', '        uint amount;                        // Amount of ETH contributed by an address in given contribution period\n', '        bool isCompensated;                 // Whether this contributor received DNT token for ETH contribution\n', '        uint amountCompensated;             // Amount of DNT received. Not really needed to store,\n', '                                            // but stored for accounting and security purposes\n', '    }\n', '\n', '    uint public softCapAmount;                                 // Soft cap of contribution period in wei\n', '    uint public afterSoftCapDuration;                          // Number of seconds to the end of sale from the moment of reaching soft cap (unless reaching hardcap)\n', '    uint public hardCapAmount;                                 // When reached this amount of wei, the contribution will end instantly\n', '    uint public startTime;                                     // Start time of contribution period in UNIX time\n', '    uint public endTime;                                       // End time of contribution period in UNIX time\n', '    bool public isEnabled;                                     // If contribution period was enabled by multisignature\n', '    bool public softCapReached;                                // If soft cap was reached\n', '    bool public hardCapReached;                                // If hard cap was reached\n', '    uint public totalContributed;                              // Total amount of ETH contributed in given period\n', '    address[] public contributorsKeys;                         // Addresses of all contributors in given contribution period\n', '    mapping (address => Contributor) public contributors;\n', '\n', '    event onContribution(uint totalContributed, address indexed contributor, uint amount,\n', '        uint contributorsCount);\n', '    event onSoftCapReached(uint endTime);\n', '    event onHardCapReached(uint endTime);\n', '    event onCompensated(address indexed contributor, uint amount);\n', '\n', '    modifier onlyMultisig() {\n', '        require(multisigWallet == msg.sender);\n', '        _;\n', '    }\n', '\n', '    function District0xContribution(\n', '        address _multisigWallet,\n', '        address _founder1,\n', '        address _founder2,\n', '        address _earlySponsor,\n', '        address[] _advisers\n', '    ) {\n', '        require(_advisers.length == 5);\n', '        multisigWallet = _multisigWallet;\n', '        founder1 = _founder1;\n', '        founder2 = _founder2;\n', '        earlySponsor = _earlySponsor;\n', '        advisers = _advisers;\n', '    }\n', '\n', '    // @notice Returns true if contribution period is currently running\n', '    function isContribPeriodRunning() constant returns (bool) {\n', '        return !hardCapReached &&\n', '               isEnabled &&\n', '               startTime <= now &&\n', '               endTime > now;\n', '    }\n', '\n', '    function contribute()\n', '        payable\n', '        stopInEmergency\n', '    {\n', '        contributeWithAddress(msg.sender);\n', '    }\n', '\n', '    // @notice Function to participate in contribution period\n', '    //  Amounts from the same address should be added up\n', '    //  If soft or hard cap is reached, end time should be modified\n', '    //  Funds should be transferred into multisig wallet\n', '    // @param contributor Address that will receive DNT token\n', '    function contributeWithAddress(address contributor)\n', '        payable\n', '        stopInEmergency\n', '    {\n', '        require(tx.gasprice <= maxGasPrice);\n', '        require(msg.value >= minContribAmount);\n', '        require(isContribPeriodRunning());\n', '\n', '        uint contribValue = msg.value;\n', '        uint excessContribValue = 0;\n', '\n', '        uint oldTotalContributed = totalContributed;\n', '\n', '        totalContributed = oldTotalContributed.add(contribValue);\n', '\n', '        uint newTotalContributed = totalContributed;\n', '\n', '        // Soft cap was reached\n', '        if (newTotalContributed >= softCapAmount &&\n', '            oldTotalContributed < softCapAmount)\n', '        {\n', '            softCapReached = true;\n', '            endTime = afterSoftCapDuration.add(now);\n', '            onSoftCapReached(endTime);\n', '        }\n', '        // Hard cap was reached\n', '        if (newTotalContributed >= hardCapAmount &&\n', '            oldTotalContributed < hardCapAmount)\n', '        {\n', '            hardCapReached = true;\n', '            endTime = now;\n', '            onHardCapReached(endTime);\n', '\n', '            // Everything above hard cap will be sent back to contributor\n', '            excessContribValue = newTotalContributed.sub(hardCapAmount);\n', '            contribValue = contribValue.sub(excessContribValue);\n', '\n', '            totalContributed = hardCapAmount;\n', '        }\n', '\n', '        if (contributors[contributor].amount == 0) {\n', '            contributorsKeys.push(contributor);\n', '        }\n', '\n', '        contributors[contributor].amount = contributors[contributor].amount.add(contribValue);\n', '\n', '        multisigWallet.transfer(contribValue);\n', '        if (excessContribValue > 0) {\n', '            msg.sender.transfer(excessContribValue);\n', '        }\n', '        onContribution(newTotalContributed, contributor, contribValue, contributorsKeys.length);\n', '    }\n', '\n', '    // @notice This method is called by owner after contribution period ends, to distribute DNT in proportional manner\n', '    //  Each contributor should receive DNT just once even if this method is called multiple times\n', '    //  In case of many contributors must be able to compensate contributors in paginational way, otherwise might\n', '    //  run out of gas if wanted to compensate all on one method call. Therefore parameters offset and limit\n', '    // @param periodIndex Index of contribution period (0-2)\n', '    // @param offset Number of first contributors to skip.\n', '    // @param limit Max number of contributors compensated on this call\n', '    function compensateContributors(uint offset, uint limit)\n', '        onlyOwner\n', '    {\n', '        require(isEnabled);\n', '        require(endTime < now);\n', '\n', '        uint i = offset;\n', '        uint compensatedCount = 0;\n', '        uint contributorsCount = contributorsKeys.length;\n', '\n', '        uint ratio = CONTRIB_PERIOD1_STAKE\n', '            .mul(1000000000000000000)\n', '            .div(totalContributed);\n', '\n', '        while (i < contributorsCount && compensatedCount < limit) {\n', '            address contributorAddress = contributorsKeys[i];\n', '            if (!contributors[contributorAddress].isCompensated) {\n', '                uint amountContributed = contributors[contributorAddress].amount;\n', '                contributors[contributorAddress].isCompensated = true;\n', '\n', '                contributors[contributorAddress].amountCompensated =\n', '                    amountContributed.mul(ratio).div(1000000000000000000);\n', '\n', '                district0xNetworkToken.transfer(contributorAddress, contributors[contributorAddress].amountCompensated);\n', '                onCompensated(contributorAddress, contributors[contributorAddress].amountCompensated);\n', '\n', '                compensatedCount++;\n', '            }\n', '            i++;\n', '        }\n', '    }\n', '\n', '    // @notice Method for setting up contribution period\n', '    //  Only owner should be able to execute\n', '    //  Setting first contribution period sets up vesting for founders & advisors\n', '    //  Contribution period should still not be enabled after calling this method\n', '    // @param softCapAmount Soft Cap in wei\n', '    // @param afterSoftCapDuration Number of seconds till the end of sale in the moment of reaching soft cap (unless reaching hard cap)\n', '    // @param hardCapAmount Hard Cap in wei\n', '    // @param startTime Contribution start time in UNIX time\n', '    // @param endTime Contribution end time in UNIX time\n', '    function setContribPeriod(\n', '        uint _softCapAmount,\n', '        uint _afterSoftCapDuration,\n', '        uint _hardCapAmount,\n', '        uint _startTime,\n', '        uint _endTime\n', '    )\n', '        onlyOwner\n', '    {\n', '        require(_softCapAmount > 0);\n', '        require(_hardCapAmount > _softCapAmount);\n', '        require(_afterSoftCapDuration > 0);\n', '        require(_startTime > now);\n', '        require(_endTime > _startTime);\n', '        require(!isEnabled);\n', '\n', '        softCapAmount = _softCapAmount;\n', '        afterSoftCapDuration = _afterSoftCapDuration;\n', '        hardCapAmount = _hardCapAmount;\n', '        startTime = _startTime;\n', '        endTime = _endTime;\n', '\n', '        district0xNetworkToken.revokeAllTokenGrants(founder1);\n', '        district0xNetworkToken.revokeAllTokenGrants(founder2);\n', '        district0xNetworkToken.revokeAllTokenGrants(earlySponsor);\n', '\n', '        for (uint j = 0; j < advisers.length; j++) {\n', '            district0xNetworkToken.revokeAllTokenGrants(advisers[j]);\n', '        }\n', '\n', '        uint64 vestingDate = uint64(startTime.add(TEAM_VESTING_PERIOD));\n', '        uint64 cliffDate = uint64(startTime.add(TEAM_VESTING_CLIFF));\n', '        uint64 earlyContribVestingDate = uint64(startTime.add(EARLY_CONTRIBUTOR_VESTING_PERIOD));\n', '        uint64 earlyContribCliffDate = uint64(startTime.add(EARLY_CONTRIBUTOR_VESTING_CLIFF));\n', '        uint64 startDate = uint64(startTime);\n', '\n', '        district0xNetworkToken.grantVestedTokens(founder1, FOUNDER1_STAKE, startDate, cliffDate, vestingDate, true, false);\n', '        district0xNetworkToken.grantVestedTokens(founder2, FOUNDER2_STAKE, startDate, cliffDate, vestingDate, true, false);\n', '        district0xNetworkToken.grantVestedTokens(earlySponsor, EARLY_CONTRIBUTOR_STAKE, startDate, earlyContribCliffDate, earlyContribVestingDate, true, false);\n', '        district0xNetworkToken.grantVestedTokens(advisers[0], ADVISER_STAKE, startDate, cliffDate, vestingDate, true, false);\n', '        district0xNetworkToken.grantVestedTokens(advisers[1], ADVISER_STAKE, startDate, cliffDate, vestingDate, true, false);\n', '        district0xNetworkToken.grantVestedTokens(advisers[2], ADVISER_STAKE2, startDate, cliffDate, vestingDate, true, false);\n', '        district0xNetworkToken.grantVestedTokens(advisers[3], ADVISER_STAKE2, startDate, cliffDate, vestingDate, true, false);\n', '\n', '        // Community advisors stake has no vesting, but we set it up this way, so we can revoke it in case of\n', '        // re-setting up contribution period\n', '        district0xNetworkToken.grantVestedTokens(advisers[4], COMMUNITY_ADVISERS_STAKE, startDate, startDate, startDate, true, false);\n', '    }\n', '\n', '    // @notice Enables contribution period\n', '    //  Must be executed by multisignature\n', '    function enableContribPeriod()\n', '        onlyMultisig\n', '    {\n', '        require(startTime > now);\n', '        isEnabled = true;\n', '    }\n', '\n', '    // @notice Sets new min. contribution amount\n', '    //  Only owner can execute\n', '    //  Cannot be executed while contribution period is running\n', '    // @param _minContribAmount new min. amount\n', '    function setMinContribAmount(uint _minContribAmount)\n', '        onlyOwner\n', '    {\n', '        require(_minContribAmount > 0);\n', '        require(startTime > now);\n', '        minContribAmount = _minContribAmount;\n', '    }\n', '\n', '    // @notice Sets new max gas price for contribution\n', '    //  Only owner can execute\n', '    //  Cannot be executed while contribution period is running\n', '    // @param _minContribAmount new min. amount\n', '    function setMaxGasPrice(uint _maxGasPrice)\n', '        onlyOwner\n', '    {\n', '        require(_maxGasPrice > 0);\n', '        require(startTime > now);\n', '        maxGasPrice = _maxGasPrice;\n', '    }\n', '\n', '    // @notice Sets District0xNetworkToken contract\n', '    //  Generates all DNT tokens and assigns them to this contract\n', '    //  If token contract has already generated tokens, do not generate again\n', '    // @param _district0xNetworkToken District0xNetworkToken address\n', '    function setDistrict0xNetworkToken(address _district0xNetworkToken)\n', '        onlyOwner\n', '    {\n', '        require(_district0xNetworkToken != 0x0);\n', '        require(!isEnabled);\n', '        district0xNetworkToken = District0xNetworkToken(_district0xNetworkToken);\n', '        if (district0xNetworkToken.totalSupply() == 0) {\n', '            district0xNetworkToken.generateTokens(this, FOUNDER1_STAKE\n', '                .add(FOUNDER2_STAKE)\n', '                .add(EARLY_CONTRIBUTOR_STAKE)\n', '                .add(ADVISER_STAKE.mul(2))\n', '                .add(ADVISER_STAKE2.mul(2))\n', '                .add(COMMUNITY_ADVISERS_STAKE)\n', '                .add(CONTRIB_PERIOD1_STAKE));\n', '\n', '            district0xNetworkToken.generateTokens(multisigWallet, CONTRIB_PERIOD2_STAKE\n', '                .add(CONTRIB_PERIOD3_STAKE));\n', '        }\n', '    }\n', '\n', '    // @notice Enables transfers of DNT\n', '    //  Will be executed after first contribution period by owner\n', '    function enableDistrict0xNetworkTokenTransfers()\n', '        onlyOwner\n', '    {\n', '        require(endTime < now);\n', '        tokenTransfersEnabled = true;\n', '    }\n', '\n', '    // @notice Method to claim tokens accidentally sent to a DNT contract\n', '    //  Only multisig wallet can execute\n', '    // @param _token Address of claimed ERC20 Token\n', '    function claimTokensFromTokenDistrict0xNetworkToken(address _token)\n', '        onlyMultisig\n', '    {\n', '        district0xNetworkToken.claimTokens(_token, multisigWallet);\n', '    }\n', '\n', '    // @notice Kill method should not really be needed, but just in case\n', '    function kill(address _to) onlyMultisig external {\n', '        suicide(_to);\n', '    }\n', '\n', '    function()\n', '        payable\n', '        stopInEmergency\n', '    {\n', '        contributeWithAddress(msg.sender);\n', '    }\n', '\n', '    // MiniMe Controller default settings for allowing token transfers.\n', '    function proxyPayment(address _owner) payable public returns (bool) {\n', '        throw;\n', '    }\n', '\n', '    // Before transfers are enabled for everyone, only this contract is allowed to distribute DNT\n', '    function onTransfer(address _from, address _to, uint _amount) public returns (bool) {\n', '        return tokenTransfersEnabled || _from == address(this) || _to == address(this);\n', '    }\n', '\n', '    function onApprove(address _owner, address _spender, uint _amount) public returns (bool) {\n', '        return tokenTransfersEnabled;\n', '    }\n', '\n', '    function isTokenSaleToken(address tokenAddr) returns(bool) {\n', '        return district0xNetworkToken == tokenAddr;\n', '    }\n', '\n', '    /*\n', '     Following constant methods are used for tests and contribution web app\n', '     They don&#39;t impact logic of contribution contract, therefor DOES NOT NEED TO BE AUDITED\n', '     */\n', '\n', '    // Used by contribution front-end to obtain contribution period properties\n', '    function getContribPeriod()\n', '        constant\n', '        returns (bool[3] boolValues, uint[8] uintValues)\n', '    {\n', '        boolValues[0] = isEnabled;\n', '        boolValues[1] = softCapReached;\n', '        boolValues[2] = hardCapReached;\n', '\n', '        uintValues[0] = softCapAmount;\n', '        uintValues[1] = afterSoftCapDuration;\n', '        uintValues[2] = hardCapAmount;\n', '        uintValues[3] = startTime;\n', '        uintValues[4] = endTime;\n', '        uintValues[5] = totalContributed;\n', '        uintValues[6] = contributorsKeys.length;\n', '        uintValues[7] = CONTRIB_PERIOD1_STAKE;\n', '\n', '        return (boolValues, uintValues);\n', '    }\n', '\n', '    // Used by contribution front-end to obtain contribution contract properties\n', '    function getConfiguration()\n', '        constant\n', '        returns (bool, address, address, address, address, address[] _advisers, bool, uint)\n', '    {\n', '        _advisers = new address[](advisers.length);\n', '        for (uint i = 0; i < advisers.length; i++) {\n', '            _advisers[i] = advisers[i];\n', '        }\n', '        return (stopped, multisigWallet, founder1, founder2, earlySponsor, _advisers, tokenTransfersEnabled,\n', '            maxGasPrice);\n', '    }\n', '\n', '    // Used by contribution front-end to obtain contributor&#39;s properties\n', '    function getContributor(address contributorAddress)\n', '        constant\n', '        returns(uint, bool, uint)\n', '    {\n', '        Contributor contributor = contributors[contributorAddress];\n', '        return (contributor.amount, contributor.isCompensated, contributor.amountCompensated);\n', '    }\n', '\n', '    // Function to verify if all contributors were compensated\n', '    function getUncompensatedContributors(uint offset, uint limit)\n', '        constant\n', '        returns (uint[] contributorIndexes)\n', '    {\n', '        uint contributorsCount = contributorsKeys.length;\n', '\n', '        if (limit == 0) {\n', '            limit = contributorsCount;\n', '        }\n', '\n', '        uint i = offset;\n', '        uint resultsCount = 0;\n', '        uint[] memory _contributorIndexes = new uint[](limit);\n', '\n', '        while (i < contributorsCount && resultsCount < limit) {\n', '            if (!contributors[contributorsKeys[i]].isCompensated) {\n', '                _contributorIndexes[resultsCount] = i;\n', '                resultsCount++;\n', '            }\n', '            i++;\n', '        }\n', '\n', '        contributorIndexes = new uint[](resultsCount);\n', '        for (i = 0; i < resultsCount; i++) {\n', '            contributorIndexes[i] = _contributorIndexes[i];\n', '        }\n', '        return contributorIndexes;\n', '    }\n', '\n', '    function getNow()\n', '        constant\n', '        returns(uint)\n', '    {\n', '        return now;\n', '    }\n', '}']