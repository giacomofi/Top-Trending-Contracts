['pragma solidity ^0.4.11;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '  \n', '    /*\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until \n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) \n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) \n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract SmokeExchangeCoin is StandardToken {\n', '  string public name = "Smoke Exchange Token";\n', '  string public symbol = "SMX";\n', '  uint256 public decimals = 18;  \n', '  address public ownerAddress;\n', '    \n', '  event Distribute(address indexed to, uint256 value);\n', '  \n', '  function SmokeExchangeCoin(uint256 _totalSupply, address _ownerAddress, address smxTeamAddress, uint256 allocCrowdsale, uint256 allocAdvBounties, uint256 allocTeam) {\n', '    ownerAddress = _ownerAddress;\n', '    totalSupply = _totalSupply;\n', '    balances[ownerAddress] += allocCrowdsale;\n', '    balances[ownerAddress] += allocAdvBounties;\n', '    balances[smxTeamAddress] += allocTeam;\n', '  }\n', '  \n', '  function distribute(address _to, uint256 _value) returns (bool) {\n', '    require(balances[ownerAddress] >= _value);\n', '    balances[ownerAddress] = balances[ownerAddress].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Distribute(_to, _value);\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract SmokeExchangeCoinCrowdsale is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  SmokeExchangeCoin public token;\n', '  \n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '  uint256 public privateStartTime;\n', '  uint256 public privateEndTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '  \n', '  uint private constant DECIMALS = 1000000000000000000;\n', '  //PRICES\n', '  uint public constant TOTAL_SUPPLY = 28500000 * DECIMALS; //28.5 millions\n', '  uint public constant BASIC_RATE = 300; //300 tokens per 1 eth\n', '  uint public constant PRICE_STANDARD    = BASIC_RATE * DECIMALS; \n', '  uint public constant PRICE_PREBUY = PRICE_STANDARD * 150/100;\n', '  uint public constant PRICE_STAGE_ONE   = PRICE_STANDARD * 125/100;\n', '  uint public constant PRICE_STAGE_TWO   = PRICE_STANDARD * 115/100;\n', '  uint public constant PRICE_STAGE_THREE   = PRICE_STANDARD * 107/100;\n', '  uint public constant PRICE_STAGE_FOUR = PRICE_STANDARD;\n', '  \n', '  uint public constant PRICE_PREBUY_BONUS = PRICE_STANDARD * 165/100;\n', '  uint public constant PRICE_STAGE_ONE_BONUS = PRICE_STANDARD * 145/100;\n', '  uint public constant PRICE_STAGE_TWO_BONUS = PRICE_STANDARD * 125/100;\n', '  uint public constant PRICE_STAGE_THREE_BONUS = PRICE_STANDARD * 115/100;\n', '  uint public constant PRICE_STAGE_FOUR_BONUS = PRICE_STANDARD;\n', '  \n', '  //uint public constant PRICE_WHITELIST_BONUS = PRICE_STANDARD * 165/100;\n', '  \n', '  //TIME LIMITS\n', '  uint public constant STAGE_ONE_TIME_END = 1 weeks;\n', '  uint public constant STAGE_TWO_TIME_END = 2 weeks;\n', '  uint public constant STAGE_THREE_TIME_END = 3 weeks;\n', '  uint public constant STAGE_FOUR_TIME_END = 4 weeks;\n', '  \n', '  uint public constant ALLOC_CROWDSALE = TOTAL_SUPPLY * 75/100;\n', '  uint public constant ALLOC_TEAM = TOTAL_SUPPLY * 15/100;  \n', '  uint public constant ALLOC_ADVISORS_BOUNTIES = TOTAL_SUPPLY * 10/100;\n', '  \n', '  uint256 public smxSold = 0;\n', '  \n', '  address public ownerAddress;\n', '  address public smxTeamAddress;\n', '  \n', '  //active = false/not active = true\n', '  bool public halted;\n', '  \n', '  //in wei\n', '  uint public cap; \n', '  \n', '  //in wei, prebuy hardcap\n', '  uint public privateCap;\n', '  \n', '  uint256 public bonusThresholdWei;\n', '  \n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */ \n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '  \n', '  /**\n', '  * Modifier to run function only if contract is active (not halted)\n', '  */\n', '  modifier isNotHalted() {\n', '    require(!halted);\n', '    _;\n', '  }\n', '  \n', '  /**\n', '  * Constructor for SmokeExchageCoinCrowdsale\n', '  * @param _privateStartTime start time for presale\n', '  * @param _startTime start time for public sale\n', '  * @param _ethWallet all incoming eth transfered here. Use multisig wallet\n', '  * @param _privateWeiCap hard cap for presale\n', '  * @param _weiCap hard cap in wei for the crowdsale\n', '  * @param _bonusThresholdWei in wei. Minimum amount of wei required for bonus\n', '  * @param _smxTeamAddress team address \n', '  */\n', '  function SmokeExchangeCoinCrowdsale(uint256 _privateStartTime, uint256 _startTime, address _ethWallet, uint256 _privateWeiCap, uint256 _weiCap, uint256 _bonusThresholdWei, address _smxTeamAddress) {\n', '    require(_privateStartTime >= now);\n', '    require(_ethWallet != 0x0);    \n', '    require(_smxTeamAddress != 0x0);    \n', '    \n', '    privateStartTime = _privateStartTime;\n', '    //presale 10 days\n', '    privateEndTime = privateStartTime + 10 days;    \n', '    startTime = _startTime;\n', '    \n', '    //ICO start time after presale end\n', '    require(_startTime >= privateEndTime);\n', '    \n', '    endTime = _startTime + STAGE_FOUR_TIME_END;\n', '    \n', '    wallet = _ethWallet;   \n', '    smxTeamAddress = _smxTeamAddress;\n', '    ownerAddress = msg.sender;\n', '    \n', '    cap = _weiCap;    \n', '    privateCap = _privateWeiCap;\n', '    bonusThresholdWei = _bonusThresholdWei;\n', '                 \n', '    token = new SmokeExchangeCoin(TOTAL_SUPPLY, ownerAddress, smxTeamAddress, ALLOC_CROWDSALE, ALLOC_ADVISORS_BOUNTIES, ALLOC_TEAM);\n', '  }\n', '  \n', '  // fallback function can be used to buy tokens\n', '  function () payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '  \n', '  // @return true if investors can buy at the moment\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool privatePeriod = now >= privateStartTime && now < privateEndTime;\n', '    bool withinPeriod = (now >= startTime && now <= endTime) || (privatePeriod);\n', '    bool nonZeroPurchase = (msg.value != 0);\n', '    //cap depends on stage.\n', '    bool withinCap = privatePeriod ? (weiRaised.add(msg.value) <= privateCap) : (weiRaised.add(msg.value) <= cap);\n', '    // check if there are smx token left\n', '    bool smxAvailable = (ALLOC_CROWDSALE - smxSold > 0); \n', '    return withinPeriod && nonZeroPurchase && withinCap && smxAvailable;\n', '    //return true;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    bool capReached = weiRaised >= cap;\n', '    bool tokenSold = ALLOC_CROWDSALE - smxSold == 0;\n', '    bool timeEnded = now > endTime;\n', '    return timeEnded || capReached || tokenSold;\n', '  }  \n', '  \n', '  /**\n', '  * Main function for buying tokens\n', '  * @param beneficiary purchased tokens go to this address\n', '  */\n', '  function buyTokens(address beneficiary) payable isNotHalted {\n', '    require(beneficiary != 0x0);\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be distributed\n', '    uint256 tokens = SafeMath.div(SafeMath.mul(weiAmount, getCurrentRate(weiAmount)), 1 ether);\n', '    //require that there are more or equal tokens available for sell\n', '    require(ALLOC_CROWDSALE - smxSold >= tokens);\n', '\n', '    //update total weiRaised\n', '    weiRaised = weiRaised.add(weiAmount);\n', '    //updated total smxSold\n', '    smxSold = smxSold.add(tokens);\n', '    \n', '    //add token to beneficiary and subtract from ownerAddress balance\n', '    token.distribute(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    //forward eth received to walletEth\n', '    forwardFunds();\n', '  }\n', '  \n', '  // send ether to the fund collection wallet  \n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '  \n', '  /**\n', '  * Get rate. Depends on current time\n', '  *\n', '  */\n', '  function getCurrentRate(uint256 _weiAmount) constant returns (uint256) {  \n', '      \n', '      bool hasBonus = _weiAmount >= bonusThresholdWei;\n', '  \n', '      if (now < startTime) {\n', '        return hasBonus ? PRICE_PREBUY_BONUS : PRICE_PREBUY;\n', '      }\n', '      uint delta = SafeMath.sub(now, startTime);\n', '\n', '      //3+weeks from start\n', '      if (delta > STAGE_THREE_TIME_END) {\n', '        return hasBonus ? PRICE_STAGE_FOUR_BONUS : PRICE_STAGE_FOUR;\n', '      }\n', '      //2+weeks from start\n', '      if (delta > STAGE_TWO_TIME_END) {\n', '        return hasBonus ? PRICE_STAGE_THREE_BONUS : PRICE_STAGE_THREE;\n', '      }\n', '      //1+week from start\n', '      if (delta > STAGE_ONE_TIME_END) {\n', '        return hasBonus ? PRICE_STAGE_TWO_BONUS : PRICE_STAGE_TWO;\n', '      }\n', '\n', '      //less than 1 week from start\n', '      return hasBonus ? PRICE_STAGE_ONE_BONUS : PRICE_STAGE_ONE;\n', '  }\n', '  \n', '  /**\n', '  * Enable/disable halted\n', '  */\n', '  function toggleHalt(bool _halted) onlyOwner {\n', '    halted = _halted;\n', '  }\n', '}']