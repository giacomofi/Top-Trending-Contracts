['pragma solidity ^0.4.5;\n', '\n', 'contract Bank_With_Interest {\n', '    //\n', '    ////////////////////////////////////////////////////////////////\n', '    //\n', '    //  A term deposit bank that pays interest on withdrawal  \n', '    //\n', '    //  v0.01 beta, use AT OWN RISK - I am not refunding any lost ether!\n', '    //  And check the code before depositing anything.\n', '    //\n', '    //  How to use: 1) transfer min. 250 ether using the deposit() function (5 ether deposit fee per deposit)\n', '    //                 note: minimum ether amount and deposit fee can change, so check public variables\n', '    //                   - minimum_payment\n', '    //                   - deposit_fee\n', '    //                 before depositing!\n', '    //\n', '    //              2) withdraw after 5 days, receive up to 10% interest (1 additional ether for every 10 ether withdrawal)\n', '    //                 note: to get most of the interest paid out, withdraw in lots of 10 ether...\n', '    //\n', '    ///////////////////////////////////////////////////////////////////\n', '    //\n', '    //  Now you may ask - where do the extra ether come from? :)\n', '    //  The answer is simple: From people who dont follow the instructions properly! \n', '    //                        And there are usually plenty of those...\n', '    //\n', '    //  Common pitfalls:\n', '    //   e.g. - deposit to the fallback function instead of the proper deposit() function\n', '    //        - withdraw MORE than 10 ether AT A TIME ... (that just means you get less interest paid out)\n', '    //        -  or you wait too long after your term deposit ended, and other people have drained the interest pool.\n', '    //\n', '    //  You can always check the availbale interest amount using get_available_interest_amount () before you withdraw\n', '    //  And be quick - everyone gets the same 30850 block term deposit time (~5 days) until they can withdraw.\n', '    //\n', '    //  Also FYI: The bank cannot remove money from the interest pool until the end of the contract life.\n', '    //        And make sure you withdraw your balances before the end of the contract life also.\n', '    //        Check public contract_alive_until_this_block variable to find out when the contract life ends.\n', '    //           Initial end date is block #3000000 (~Mid Jan 2017), but the bank can extend that life.\n', '    //           Note: the bank can only EXTEND that end date, not shorten it.\n', '    //\n', '    // And here we go - happy reading:\n', '    //\n', '    // store of all account balances\n', '    mapping(address => uint256) balances;\n', '    mapping(address => uint256) term_deposit_end_block; // store per address the minimum time for the term deposit\n', '                                                         //\n', '    address public thebank; // the bank\n', '    \n', '    uint256 public minimum_payment; // minimum deposits\n', '    uint256 public deposit_fee;     // fee for deposits\n', '    \n', '    uint256 public contract_alive_until_this_block;\n', '    \n', '    bool public any_customer_payments_yet = false; // the first cutomer payment will make this true and \n', '                                        // the contract cannot be deleted any more before end of life\n', '    \n', '    function Bank_With_Interest() { // create the contract\n', '        thebank = msg.sender;  \n', '        minimum_payment = 250 ether;\n', '        deposit_fee = 5 ether;\n', '        contract_alive_until_this_block = 3000000; // around 2 months from now (mid Jan 2017)\n', '                                                   // --> can be extended but not brought forward\n', '        //\n', '        // bank cannot touch remaining interest balance until the contract has reached end of life.\n', '        term_deposit_end_block[thebank] = 0;// contract_alive_until_this_block;\n', '        //\n', '    }\n', '    \n', '   //////////////////////////////////////////////////////////////////////////////////////////\n', '    // deposit ether into term-deposit account\n', '    //////////////////////////////////////////////////////////////////////////////////////////\n', '    function deposit() payable {\n', '        //\n', '        if (msg.value < minimum_payment) throw; // minimum deposit is at least minimum_payment.\n', '        //\n', "        // no fee for first payment (if the customers's balance is 0)\n", '        if (balances[msg.sender] == 0) deposit_fee = 0 ether;  \n', '        //\n', '        if ( msg.sender == thebank ){ // thebank is depositing into bank/interest account, without fee\n', '            balances[thebank] += msg.value;\n', '        }\n', '        else { // customer deposit\n', '            any_customer_payments_yet = true; // cannot remove contract any more until end of life\n', "            balances[msg.sender] += msg.value - deposit_fee;  // credit the sender's account\n", '            balances[thebank] += deposit_fee; // difference (fee) to be credited to thebank\n', '            term_deposit_end_block[msg.sender] = block.number + 30850; //  approx 5 days ( 5 * 86400/14 ); \n', '        }\n', '        //\n', '    }\n', '    \n', '    //////////////////////////////////////////////////////////////////////////////////////////\n', '    // withdraw from account, with 10 ether interest  (after term deposit end)\n', '    //////////////////////////////////////////////////////////////////////////////////////////\n', '    //\n', '    function withdraw(uint256 withdraw_amount) {\n', '        //\n', '        if (withdraw_amount < 10 ether) throw; // minimum withdraw amount is 10 ether\n', '        if ( withdraw_amount > balances[msg.sender]  ) throw; // cannot withdraw more than in customer balance\n', '        if (block.number < term_deposit_end_block[msg.sender] ) throw; // cannot withdraw until the term deposit has ended\n', '        // Note: thebank/interest account cannot be withdrawed from until contract end-of life.\n', "        //       thebank's term-deposit end block is the same as contract_alive_until_this_block\n", '        //\n', '        uint256 interest = 1 ether;  // 1 ether interest paid at time of withdrawal\n', '        //\n', "        if (msg.sender == thebank){ // but no interest for thebank (who can't withdraw until block contract_alive_until_this_block anyways)\n", '            interest = 0 ether;\n', '        }\n', '        //                          \n', '        if (interest > balances[thebank])   // cant pay more interest than available in the thebank/bank\n', '            interest = balances[thebank];  // so send whatever is left anyways\n', '        //\n', '        //\n', '        balances[thebank] -= interest;  // reduce thebank balance, and send bonus to customer\n', '        balances[msg.sender] -= withdraw_amount;\n', '        //\n', '        if (!msg.sender.send(withdraw_amount)) throw;  // send withdraw amount, but check for error to roll back if needed\n', '        if (!msg.sender.send(interest)) throw;         // send interest amount, but check for error to roll back if needed\n', '        //\n', '    }\n', '    \n', '    ////////////////////////////////////////////////////////////////////////////\n', '    // HELPER FUNCTIONS\n', '    ////////////////////////////////////////////////////////////////////////////\n', '    \n', '    // set minimum deposit limits\n', '    function set_minimum_payment(uint256 new_limit) {\n', '        if ( msg.sender == thebank ){\n', '            minimum_payment = new_limit;\n', '        }\n', '    }\n', '    //\n', '    // change deposit fee\n', '    function set_deposit_fee (uint256 new_fee) {\n', '        if ( msg.sender == thebank ){\n', '            deposit_fee = new_fee;\n', '        }\n', '    }\n', '    \n', '    // find out how much money is available for interest payments\n', '    function get_available_interest_amount () returns (uint256) {\n', '        return balances[thebank];\n', '    }\n', '    // find out what the end date of the customers term deposit is\n', '    function get_term_deposit_end_date () returns (uint256) {\n', '        return term_deposit_end_block[msg.sender];\n', '    }    \n', '    // find out how much money is available for interest payments\n', '    function get_balance () returns (uint256) {\n', '        return balances[msg.sender];\n', '    }\n', '    //\n', '    ////////////////////////////////////////////////////////////////\n', "    // this bank won't live forever, so this will handle the exit (or extend its life)\n", '    ////////////////////////////////////////////////////////////\n', '\t//\n', '    function extend_life_of_contract (uint256 newblock){\n', '        if ( msg.sender != thebank || newblock < contract_alive_until_this_block ) throw;\n', '        // can only extend\n', '        contract_alive_until_this_block = newblock; \n', '        // lock thebank/interest account until new end date\n', '        term_deposit_end_block[thebank] = contract_alive_until_this_block;\n', '    }\n', '    //\n', '    // the self destruct after the final block number has been reached (or immediately if there havent been any customer payments yet)\n', '    function close_bank(){\n', '        if (contract_alive_until_this_block < block.number || !any_customer_payments_yet)\n', '            selfdestruct(thebank); \n', '            // any funds still remaining within the bank will be sent to the creator\n', '            // --> bank customers have to make sure they withdraw their $$$ before the final block.\n', '    }\n', '    ////////////////////////////////////////////////////////////////\n', '    // fallback function\n', '    ////////////////////////////////////////////////////////////\n', '    function () payable { // any unidentified payments (that didnt call the deposit function) \n', '                          // go into the standard interest account of the bank\n', '                          // and become available for interest withdrawal by bank users\n', '        balances[thebank] += msg.value;\n', '    }\n', '}']