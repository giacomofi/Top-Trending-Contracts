['/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20Basic {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) constant returns (uint);\n', '  function transfer(address to, uint value);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', '\n', '/**\n', ' * @title TokenTimelock\n', ' * @dev TokenTimelock is a token holder contract that will allow a\n', ' * beneficiary to extract the tokens after a time has passed\n', ' */\n', 'contract TokenTimelock {\n', '\n', '  // ERC20 basic token contract being held\n', '  ERC20Basic token;\n', '\n', '  // beneficiary of tokens after they are released\n', '  address beneficiary;\n', '\n', '  // timestamp where token release is enabled\n', '  uint releaseTime;\n', '\n', '  function TokenTimelock(ERC20Basic _token, address _beneficiary, uint _releaseTime) {\n', '    require(_releaseTime > now);\n', '    token = _token;\n', '    beneficiary = _beneficiary;\n', '    releaseTime = _releaseTime;\n', '  }\n', '\n', '  /**\n', '   * @dev beneficiary claims tokens held by time lock\n', '   */\n', '  function claim() {\n', '    require(msg.sender == beneficiary);\n', '    require(now >= releaseTime);\n', '\n', '    uint amount = token.balanceOf(this);\n', '    require(amount > 0);\n', '\n', '    token.transfer(beneficiary, amount);\n', '  }\n', '}']