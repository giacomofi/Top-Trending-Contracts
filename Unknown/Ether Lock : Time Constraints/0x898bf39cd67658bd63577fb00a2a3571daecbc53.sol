['pragma solidity ^0.4.10;\n', '\n', '// Miners create Elixor (EXOR), which they then convert to Elixir (ELIX)\n', '\n', 'contract elixor {\n', '    \n', 'string public name; \n', 'string public symbol; \n', 'uint8 public decimals; \n', 'uint256 public startTime;\n', 'uint256 public totalSupply;\n', '\n', 'bool public balanceImportsComplete;\n', '\n', 'mapping (address => bool) public numRewardsAvailableSetForChildAddress;\n', '\n', 'mapping (address => bool) public isNewParent;\n', 'mapping (address => address) public returnChildForParentNew;\n', '\n', 'bool public genesisImportsComplete;\n', '\n', '// Until contract is locked, devs can freeze the system if anything arises.\n', '// Then deploy a contract that interfaces with the state of this one.\n', 'bool public frozen;\n', 'bool public freezeProhibited;\n', '\n', 'address public devAddress; // For doing imports\n', '\n', 'bool importsComplete; // Locked when devs have updated all balances\n', '\n', 'mapping (address => uint256) public burnAmountAllowed;\n', '\n', 'mapping(address => mapping (address => uint256)) allowed;\n', '\n', '// Balances for each account\n', 'mapping(address => uint256) balances;\n', '\n', 'mapping (address => uint256) public numRewardsAvailable;\n', '\n', '// ELIX address info\n', 'bool public ELIXAddressSet;\n', 'address public ELIXAddress;\n', '\n', 'event Transfer(address indexed from, address indexed to, uint256 value);\n', '// Triggered whenever approve(address _spender, uint256 _value) is called.\n', 'event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', 'function elixor() {\n', 'name = "elixor";\n', 'symbol = "EXOR";\n', 'decimals = 18;\n', 'startTime=1500307354; //Time contract went online.\n', 'devAddress=0x85196Da9269B24bDf5FfD2624ABB387fcA05382B; // Set the dev import address\n', '\n', '// Dev will create 10 batches as test using 1 EXOR in dev address (which is a child)\n', '// Also will send tiny amounts to several random addresses to make sure parent-child auth works.\n', '// Then set numRewardsAvailable to 0\n', 'balances[devAddress]+=1000000000000000000;\n', 'totalSupply+=1000000000000000000;\n', 'numRewardsAvailableSetForChildAddress[devAddress]=true;\n', 'numRewardsAvailable[devAddress]=10;\n', '}\n', '\n', '// Returns balance of particular account\n', 'function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '}\n', '\n', 'function transfer(address _to, uint256 _value) { \n', 'if (!frozen){\n', '    \n', '    if (balances[msg.sender] < _value) revert();\n', '    if (balances[_to] + _value < balances[_to]) revert();\n', '\n', '    if (returnIsParentAddress(_to) || isNewParent[_to])     {\n', '        if ((msg.sender==returnChildAddressForParent(_to)) || (returnChildForParentNew[_to]==msg.sender))  {\n', '            \n', '            if (numRewardsAvailableSetForChildAddress[msg.sender]==false)  {\n', '                setNumRewardsAvailableForAddress(msg.sender);\n', '            }\n', '\n', '            if (numRewardsAvailable[msg.sender]>0)    {\n', '                uint256 currDate=block.timestamp;\n', '                uint256 returnMaxPerBatchGenerated=5000000000000000000000; //max 5000 coins per batch\n', '                uint256 deployTime=10*365*86400; //10 years\n', '                uint256 secondsSinceStartTime=currDate-startTime;\n', '                uint256 maximizationTime=deployTime+startTime;\n', '                uint256 coinsPerBatchGenerated;\n', '                if (currDate>=maximizationTime)  {\n', '                    coinsPerBatchGenerated=returnMaxPerBatchGenerated;\n', '                } else  {\n', '                    uint256 b=(returnMaxPerBatchGenerated/4);\n', '                    uint256 m=(returnMaxPerBatchGenerated-b)/deployTime;\n', '                    coinsPerBatchGenerated=secondsSinceStartTime*m+b;\n', '                }\n', '                numRewardsAvailable[msg.sender]-=1;\n', '                balances[msg.sender]+=coinsPerBatchGenerated;\n', '                totalSupply+=coinsPerBatchGenerated;\n', '            }\n', '        }\n', '    }\n', '    \n', '    if (_to==ELIXAddress)   {\n', '        //They want to convert to ELIX\n', '        convertToELIX(_value,msg.sender);\n', '    }\n', '    \n', '    balances[msg.sender] -= _value;\n', '    balances[_to] += _value;\n', '    Transfer(msg.sender, _to, _value);\n', '}\n', '}\n', '\n', 'function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', ') returns (bool success) {\n', '    if (!frozen){\n', '    if (balances[_from] >= _amount\n', '        && allowed[_from][msg.sender] >= _amount\n', '        && _amount > 0\n', '        && balances[_to] + _amount > balances[_to]) {\n', '        balances[_from] -= _amount;\n', '        allowed[_from][msg.sender] -= _amount;\n', '\n', '    if (_to==ELIXAddress)   {\n', '        //They want to convert to ELIX\n', '        convertToELIX(_amount,msg.sender);\n', '    }\n', '\n', '        balances[_to] += _amount;\n', '        return true;\n', '    } else {\n', '        return false;\n', '    }\n', '    }\n', '}\n', '  \n', '// Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '// If this function is called again it overwrites the current allowance with _value.\n', 'function approve(address _spender, uint256 _amount) returns (bool success) {\n', '    allowed[msg.sender][_spender] = _amount;\n', '    Approval(msg.sender, _spender, _amount);\n', '    return true;\n', '}\n', '\n', '// Allows devs to set num rewards used. Locked up when system online.\n', 'function setNumRewardsAvailableForAddresses(uint256[] numRewardsAvailableForAddresses,address[] addressesToSetFor)    {\n', '    if (tx.origin==devAddress) { // Dev address\n', '       if (!importsComplete)  {\n', '           for (uint256 i=0;i<addressesToSetFor.length;i++)  {\n', '               address addressToSet=addressesToSetFor[i];\n', '               numRewardsAvailable[addressToSet]=numRewardsAvailableForAddresses[i];\n', '           }\n', '       }\n', '    }\n', '}\n', '\n', '// Freezes the entire system\n', 'function freezeTransfers() {\n', '    if (tx.origin==devAddress) { // Dev address\n', '        if (!freezeProhibited)  {\n', '               frozen=true;\n', '        }\n', '    }\n', '}\n', '\n', '// Prevent Freezing (Once system is ready to be locked)\n', 'function prohibitFreeze()   {\n', '    if (tx.origin==devAddress) { // Dev address\n', '        freezeProhibited=true;\n', '    }\n', '}\n', '\n', '// Get whether address is genesis parent\n', 'function returnIsParentAddress(address possibleParent) returns(bool)  {\n', '    return tme(0xEe22430595aE400a30FFBA37883363Fbf293e24e).parentAddress(possibleParent);\n', '}\n', '\n', '// Return child address for parent\n', 'function returnChildAddressForParent(address parent) returns(address)  {\n', '    return tme(0xEe22430595aE400a30FFBA37883363Fbf293e24e).returnChildAddressForParent(parent);\n', '}\n', '\n', '//Allows dev to set ELIX Address\n', 'function setELIXAddress(address ELIXAddressToSet)   {\n', '    if (tx.origin==devAddress) { // Dev address\n', '        if (!ELIXAddressSet)  {\n', '                ELIXAddressSet=true;\n', '               ELIXAddress=ELIXAddressToSet;\n', '        }\n', '    }\n', '}\n', '\n', '// Conversion to ELIX function\n', 'function convertToELIX(uint256 amount,address sender) private   {\n', '    totalSupply-=amount;\n', '    burnAmountAllowed[sender]=amount;\n', '    elixir(ELIXAddress).createAmountFromEXORForAddress(amount,sender);\n', '    burnAmountAllowed[sender]=0;\n', '}\n', '\n', 'function returnAmountOfELIXAddressCanProduce(address producingAddress) public returns(uint256)   {\n', '    return burnAmountAllowed[producingAddress];\n', '}\n', '\n', '// Locks up all changes to balances\n', 'function lockBalanceChanges() {\n', '    if (tx.origin==devAddress) { // Dev address\n', '       balanceImportsComplete=true;\n', '   }\n', '}\n', '\n', 'function importGenesisPairs(address[] parents,address[] children) public {\n', '    if (tx.origin==devAddress) { // Dev address\n', '        if (!genesisImportsComplete)    {\n', '            for (uint256 i=0;i<parents.length;i++)  {\n', '                address child=children[i];\n', '                address parent=parents[i];\n', '                // Set the parent as parent address\n', '                isNewParent[parent]=true; // Exciting\n', '                // Set the child of that parent\n', '                returnChildForParentNew[parent]=child;\n', '                balances[child]+=1000000000000000000;\n', '                totalSupply+=1000000000000000000;\n', '                numRewardsAvailable[child]=10;\n', '                numRewardsAvailableSetForChildAddress[child]=true;\n', '            }\n', '        }\n', '   }\n', '\n', '}\n', '\n', 'function lockGenesisImports() public    {\n', '    if (tx.origin==devAddress) {\n', '        genesisImportsComplete=true;\n', '    }\n', '}\n', '\n', '// Devs will upload balances snapshot of blockchain via this function.\n', 'function importAmountForAddresses(uint256[] amounts,address[] addressesToAddTo) public {\n', '   if (tx.origin==devAddress) { // Dev address\n', '       if (!balanceImportsComplete)  {\n', '           for (uint256 i=0;i<addressesToAddTo.length;i++)  {\n', '                address addressToAddTo=addressesToAddTo[i];\n', '                uint256 amount=amounts[i];\n', '                balances[addressToAddTo]+=amount;\n', '                totalSupply+=amount;\n', '           }\n', '       }\n', '   }\n', '}\n', '\n', '// Extra balance removal in case any issues arise. Do not anticipate using this function.\n', 'function removeAmountForAddresses(uint256[] amounts,address[] addressesToRemoveFrom) public {\n', '   if (tx.origin==devAddress) { // Dev address\n', '       if (!balanceImportsComplete)  {\n', '           for (uint256 i=0;i<addressesToRemoveFrom.length;i++)  {\n', '                address addressToRemoveFrom=addressesToRemoveFrom[i];\n', '                uint256 amount=amounts[i];\n', '                balances[addressToRemoveFrom]-=amount;\n', '                totalSupply-=amount;\n', '           }\n', '       }\n', '   }\n', '}\n', '\n', '// Manual override in case any issues arise. Do not anticipate using this function.\n', 'function manuallySetNumRewardsAvailableForChildAddress(address addressToSet,uint256 rewardsAvail) public {\n', '   if (tx.origin==devAddress) { // Dev address\n', '       if (!genesisImportsComplete)  {\n', '            numRewardsAvailable[addressToSet]=rewardsAvail;\n', '            numRewardsAvailableSetForChildAddress[addressToSet]=true;\n', '       }\n', '   }\n', '}\n', '\n', '// Manual override for total supply in case any issues arise. Do not anticipate using this function.\n', 'function removeFromTotalSupply(uint256 amount) public {\n', '   if (tx.origin==devAddress) { // Dev address\n', '       if (!balanceImportsComplete)  {\n', '            totalSupply-=amount;\n', '       }\n', '   }\n', '}\n', '\n', 'function setNumRewardsAvailableForAddress(address addressToSet) private {\n', '    //Get the number of rewards used in the old contract\n', '    tme tmeContract=tme(0xEe22430595aE400a30FFBA37883363Fbf293e24e);\n', '    uint256 numRewardsUsed=tmeContract.numRewardsUsed(addressToSet);\n', '    numRewardsAvailable[addressToSet]=10-numRewardsUsed;\n', '    numRewardsAvailableSetForChildAddress[addressToSet]=true;\n', '}\n', '\n', '}\n', '\n', '// Pulling info about parent-child pairs from the original contract\n', 'contract tme    {\n', '    function parentAddress(address possibleParent) public returns(bool);\n', '    function returnChildAddressForParent(address parentAddressOfChild) public returns(address);\n', '    function numRewardsUsed(address childAddress) public returns(uint256);\n', '}\n', '\n', 'contract elixir {\n', '    function createAmountFromEXORForAddress(uint256 amount,address sender);\n', '}']
['pragma solidity ^0.4.10;\n', '\n', '// Miners create Elixor (EXOR), which they then convert to Elixir (ELIX)\n', '\n', 'contract elixor {\n', '    \n', 'string public name; \n', 'string public symbol; \n', 'uint8 public decimals; \n', 'uint256 public startTime;\n', 'uint256 public totalSupply;\n', '\n', 'bool public balanceImportsComplete;\n', '\n', 'mapping (address => bool) public numRewardsAvailableSetForChildAddress;\n', '\n', 'mapping (address => bool) public isNewParent;\n', 'mapping (address => address) public returnChildForParentNew;\n', '\n', 'bool public genesisImportsComplete;\n', '\n', '// Until contract is locked, devs can freeze the system if anything arises.\n', '// Then deploy a contract that interfaces with the state of this one.\n', 'bool public frozen;\n', 'bool public freezeProhibited;\n', '\n', 'address public devAddress; // For doing imports\n', '\n', 'bool importsComplete; // Locked when devs have updated all balances\n', '\n', 'mapping (address => uint256) public burnAmountAllowed;\n', '\n', 'mapping(address => mapping (address => uint256)) allowed;\n', '\n', '// Balances for each account\n', 'mapping(address => uint256) balances;\n', '\n', 'mapping (address => uint256) public numRewardsAvailable;\n', '\n', '// ELIX address info\n', 'bool public ELIXAddressSet;\n', 'address public ELIXAddress;\n', '\n', 'event Transfer(address indexed from, address indexed to, uint256 value);\n', '// Triggered whenever approve(address _spender, uint256 _value) is called.\n', 'event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', 'function elixor() {\n', 'name = "elixor";\n', 'symbol = "EXOR";\n', 'decimals = 18;\n', 'startTime=1500307354; //Time contract went online.\n', 'devAddress=0x85196Da9269B24bDf5FfD2624ABB387fcA05382B; // Set the dev import address\n', '\n', '// Dev will create 10 batches as test using 1 EXOR in dev address (which is a child)\n', '// Also will send tiny amounts to several random addresses to make sure parent-child auth works.\n', '// Then set numRewardsAvailable to 0\n', 'balances[devAddress]+=1000000000000000000;\n', 'totalSupply+=1000000000000000000;\n', 'numRewardsAvailableSetForChildAddress[devAddress]=true;\n', 'numRewardsAvailable[devAddress]=10;\n', '}\n', '\n', '// Returns balance of particular account\n', 'function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '}\n', '\n', 'function transfer(address _to, uint256 _value) { \n', 'if (!frozen){\n', '    \n', '    if (balances[msg.sender] < _value) revert();\n', '    if (balances[_to] + _value < balances[_to]) revert();\n', '\n', '    if (returnIsParentAddress(_to) || isNewParent[_to])     {\n', '        if ((msg.sender==returnChildAddressForParent(_to)) || (returnChildForParentNew[_to]==msg.sender))  {\n', '            \n', '            if (numRewardsAvailableSetForChildAddress[msg.sender]==false)  {\n', '                setNumRewardsAvailableForAddress(msg.sender);\n', '            }\n', '\n', '            if (numRewardsAvailable[msg.sender]>0)    {\n', '                uint256 currDate=block.timestamp;\n', '                uint256 returnMaxPerBatchGenerated=5000000000000000000000; //max 5000 coins per batch\n', '                uint256 deployTime=10*365*86400; //10 years\n', '                uint256 secondsSinceStartTime=currDate-startTime;\n', '                uint256 maximizationTime=deployTime+startTime;\n', '                uint256 coinsPerBatchGenerated;\n', '                if (currDate>=maximizationTime)  {\n', '                    coinsPerBatchGenerated=returnMaxPerBatchGenerated;\n', '                } else  {\n', '                    uint256 b=(returnMaxPerBatchGenerated/4);\n', '                    uint256 m=(returnMaxPerBatchGenerated-b)/deployTime;\n', '                    coinsPerBatchGenerated=secondsSinceStartTime*m+b;\n', '                }\n', '                numRewardsAvailable[msg.sender]-=1;\n', '                balances[msg.sender]+=coinsPerBatchGenerated;\n', '                totalSupply+=coinsPerBatchGenerated;\n', '            }\n', '        }\n', '    }\n', '    \n', '    if (_to==ELIXAddress)   {\n', '        //They want to convert to ELIX\n', '        convertToELIX(_value,msg.sender);\n', '    }\n', '    \n', '    balances[msg.sender] -= _value;\n', '    balances[_to] += _value;\n', '    Transfer(msg.sender, _to, _value);\n', '}\n', '}\n', '\n', 'function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', ') returns (bool success) {\n', '    if (!frozen){\n', '    if (balances[_from] >= _amount\n', '        && allowed[_from][msg.sender] >= _amount\n', '        && _amount > 0\n', '        && balances[_to] + _amount > balances[_to]) {\n', '        balances[_from] -= _amount;\n', '        allowed[_from][msg.sender] -= _amount;\n', '\n', '    if (_to==ELIXAddress)   {\n', '        //They want to convert to ELIX\n', '        convertToELIX(_amount,msg.sender);\n', '    }\n', '\n', '        balances[_to] += _amount;\n', '        return true;\n', '    } else {\n', '        return false;\n', '    }\n', '    }\n', '}\n', '  \n', '// Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '// If this function is called again it overwrites the current allowance with _value.\n', 'function approve(address _spender, uint256 _amount) returns (bool success) {\n', '    allowed[msg.sender][_spender] = _amount;\n', '    Approval(msg.sender, _spender, _amount);\n', '    return true;\n', '}\n', '\n', '// Allows devs to set num rewards used. Locked up when system online.\n', 'function setNumRewardsAvailableForAddresses(uint256[] numRewardsAvailableForAddresses,address[] addressesToSetFor)    {\n', '    if (tx.origin==devAddress) { // Dev address\n', '       if (!importsComplete)  {\n', '           for (uint256 i=0;i<addressesToSetFor.length;i++)  {\n', '               address addressToSet=addressesToSetFor[i];\n', '               numRewardsAvailable[addressToSet]=numRewardsAvailableForAddresses[i];\n', '           }\n', '       }\n', '    }\n', '}\n', '\n', '// Freezes the entire system\n', 'function freezeTransfers() {\n', '    if (tx.origin==devAddress) { // Dev address\n', '        if (!freezeProhibited)  {\n', '               frozen=true;\n', '        }\n', '    }\n', '}\n', '\n', '// Prevent Freezing (Once system is ready to be locked)\n', 'function prohibitFreeze()   {\n', '    if (tx.origin==devAddress) { // Dev address\n', '        freezeProhibited=true;\n', '    }\n', '}\n', '\n', '// Get whether address is genesis parent\n', 'function returnIsParentAddress(address possibleParent) returns(bool)  {\n', '    return tme(0xEe22430595aE400a30FFBA37883363Fbf293e24e).parentAddress(possibleParent);\n', '}\n', '\n', '// Return child address for parent\n', 'function returnChildAddressForParent(address parent) returns(address)  {\n', '    return tme(0xEe22430595aE400a30FFBA37883363Fbf293e24e).returnChildAddressForParent(parent);\n', '}\n', '\n', '//Allows dev to set ELIX Address\n', 'function setELIXAddress(address ELIXAddressToSet)   {\n', '    if (tx.origin==devAddress) { // Dev address\n', '        if (!ELIXAddressSet)  {\n', '                ELIXAddressSet=true;\n', '               ELIXAddress=ELIXAddressToSet;\n', '        }\n', '    }\n', '}\n', '\n', '// Conversion to ELIX function\n', 'function convertToELIX(uint256 amount,address sender) private   {\n', '    totalSupply-=amount;\n', '    burnAmountAllowed[sender]=amount;\n', '    elixir(ELIXAddress).createAmountFromEXORForAddress(amount,sender);\n', '    burnAmountAllowed[sender]=0;\n', '}\n', '\n', 'function returnAmountOfELIXAddressCanProduce(address producingAddress) public returns(uint256)   {\n', '    return burnAmountAllowed[producingAddress];\n', '}\n', '\n', '// Locks up all changes to balances\n', 'function lockBalanceChanges() {\n', '    if (tx.origin==devAddress) { // Dev address\n', '       balanceImportsComplete=true;\n', '   }\n', '}\n', '\n', 'function importGenesisPairs(address[] parents,address[] children) public {\n', '    if (tx.origin==devAddress) { // Dev address\n', '        if (!genesisImportsComplete)    {\n', '            for (uint256 i=0;i<parents.length;i++)  {\n', '                address child=children[i];\n', '                address parent=parents[i];\n', '                // Set the parent as parent address\n', '                isNewParent[parent]=true; // Exciting\n', '                // Set the child of that parent\n', '                returnChildForParentNew[parent]=child;\n', '                balances[child]+=1000000000000000000;\n', '                totalSupply+=1000000000000000000;\n', '                numRewardsAvailable[child]=10;\n', '                numRewardsAvailableSetForChildAddress[child]=true;\n', '            }\n', '        }\n', '   }\n', '\n', '}\n', '\n', 'function lockGenesisImports() public    {\n', '    if (tx.origin==devAddress) {\n', '        genesisImportsComplete=true;\n', '    }\n', '}\n', '\n', '// Devs will upload balances snapshot of blockchain via this function.\n', 'function importAmountForAddresses(uint256[] amounts,address[] addressesToAddTo) public {\n', '   if (tx.origin==devAddress) { // Dev address\n', '       if (!balanceImportsComplete)  {\n', '           for (uint256 i=0;i<addressesToAddTo.length;i++)  {\n', '                address addressToAddTo=addressesToAddTo[i];\n', '                uint256 amount=amounts[i];\n', '                balances[addressToAddTo]+=amount;\n', '                totalSupply+=amount;\n', '           }\n', '       }\n', '   }\n', '}\n', '\n', '// Extra balance removal in case any issues arise. Do not anticipate using this function.\n', 'function removeAmountForAddresses(uint256[] amounts,address[] addressesToRemoveFrom) public {\n', '   if (tx.origin==devAddress) { // Dev address\n', '       if (!balanceImportsComplete)  {\n', '           for (uint256 i=0;i<addressesToRemoveFrom.length;i++)  {\n', '                address addressToRemoveFrom=addressesToRemoveFrom[i];\n', '                uint256 amount=amounts[i];\n', '                balances[addressToRemoveFrom]-=amount;\n', '                totalSupply-=amount;\n', '           }\n', '       }\n', '   }\n', '}\n', '\n', '// Manual override in case any issues arise. Do not anticipate using this function.\n', 'function manuallySetNumRewardsAvailableForChildAddress(address addressToSet,uint256 rewardsAvail) public {\n', '   if (tx.origin==devAddress) { // Dev address\n', '       if (!genesisImportsComplete)  {\n', '            numRewardsAvailable[addressToSet]=rewardsAvail;\n', '            numRewardsAvailableSetForChildAddress[addressToSet]=true;\n', '       }\n', '   }\n', '}\n', '\n', '// Manual override for total supply in case any issues arise. Do not anticipate using this function.\n', 'function removeFromTotalSupply(uint256 amount) public {\n', '   if (tx.origin==devAddress) { // Dev address\n', '       if (!balanceImportsComplete)  {\n', '            totalSupply-=amount;\n', '       }\n', '   }\n', '}\n', '\n', 'function setNumRewardsAvailableForAddress(address addressToSet) private {\n', '    //Get the number of rewards used in the old contract\n', '    tme tmeContract=tme(0xEe22430595aE400a30FFBA37883363Fbf293e24e);\n', '    uint256 numRewardsUsed=tmeContract.numRewardsUsed(addressToSet);\n', '    numRewardsAvailable[addressToSet]=10-numRewardsUsed;\n', '    numRewardsAvailableSetForChildAddress[addressToSet]=true;\n', '}\n', '\n', '}\n', '\n', '// Pulling info about parent-child pairs from the original contract\n', 'contract tme    {\n', '    function parentAddress(address possibleParent) public returns(bool);\n', '    function returnChildAddressForParent(address parentAddressOfChild) public returns(address);\n', '    function numRewardsUsed(address childAddress) public returns(uint256);\n', '}\n', '\n', 'contract elixir {\n', '    function createAmountFromEXORForAddress(uint256 amount,address sender);\n', '}']
