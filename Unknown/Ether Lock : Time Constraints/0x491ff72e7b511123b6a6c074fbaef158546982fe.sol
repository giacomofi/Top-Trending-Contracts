['pragma solidity ^0.4.4;\n', '\n', 'contract Token {\n', '    function transfer(address _to, uint _value) returns (bool);\n', '    function balanceOf(address owner) returns(uint);\n', '}\n', '\n', '\n', 'contract Owned {\n', '    address public owner;\n', '\n', '    function Owned() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        if (msg.sender != owner) throw;\n', '        _;\n', '    }\n', '\n', '    address newOwner;\n', '\n', '    function changeOwner(address _newOwner) onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() {\n', '        if (msg.sender == newOwner) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', 'contract TokenReceivable is Owned {\n', '    event logTokenTransfer(address token, address to, uint amount);\n', '\n', '    function claimTokens(address _token, address _to) onlyOwner returns (bool) {\n', '        Token token = Token(_token);\n', '        uint balance = token.balanceOf(this);\n', '        if (token.transfer(_to, balance)) {\n', '            logTokenTransfer(_token, _to, balance);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '}\n', '\n', 'contract FunFairSale is Owned, TokenReceivable {\n', '    uint public deadline =  1499436000; // July 7th, 2017; 14:00 GMT\n', '    uint public startTime = 1498140000; // June 22nd, 2017; 14:00 GMT\n', '    uint public capAmount = 125000000 ether;\n', '\n', '    // Don&#39;t allow contributions when the gas price is above\n', '    // 50 Gwei to discourage gas price manipulation.\n', '    uint constant MAX_GAS_PRICE = 50 * 1024 * 1024 * 1024 wei;\n', '\n', '    function FunFairSale() {}\n', '\n', '    function shortenDeadline(uint t) onlyOwner {\n', '        // Used to shorten the deadline once (if) we&#39;ve hit the soft cap.\n', '        if (t > deadline) throw;\n', '        deadline = t;\n', '    }\n', '\n', '    function () payable {\n', '        // Don&#39;t encourage gas price manipulation.\n', '    \tif (tx.gasprice > MAX_GAS_PRICE) throw;\n', '        if (block.timestamp < startTime || block.timestamp >= deadline) throw;\n', '        if (this.balance >= capAmount) throw;\n', '        if (this.balance + msg.value >= capAmount) {\n', '            deadline = block.timestamp;\n', '        }\n', '    }\n', '\n', '    function withdraw() onlyOwner {\n', '        if (!owner.call.value(this.balance)()) throw;\n', '    }\n', '\n', '    function setCap(uint _cap) onlyOwner {\n', '        capAmount = _cap;\n', '    }\n', '\n', '    function setStartTime(uint _startTime, uint _deadline) onlyOwner {\n', '        if (block.timestamp >= startTime) throw;\n', '        startTime = _startTime;\n', '        deadline = _deadline;\n', '    }\n', '\n', '}']