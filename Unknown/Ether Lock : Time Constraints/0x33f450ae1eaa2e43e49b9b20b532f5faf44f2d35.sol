['pragma solidity ^0.4.11;\n', '\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply = 0;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract AKM is BasicToken, Ownable {\n', '  using SafeMath for uint256;\n', '  \n', '  string public constant name = "AKM Token";\n', '  string public constant symbol = "AKM";\n', '  uint256 public constant decimals = 8;\n', '  \n', '  uint256 public tokenPerWai = (10 ** (18 - decimals) * 1 wei) / 1250;\n', '  uint256 public token = 10 ** decimals;\n', '  uint256 public constant INITIAL_SUPPLY = 2800000;\n', '  \n', '  uint256 public creationTime;\n', '  bool public is_started_bonuses = false;\n', '  bool public is_started_payouts = true;\n', '  \n', '  function emissionPay(uint256 _ammount) private {\n', '    uint256 ownBonus = _ammount.div(100).mul(25);\n', '    totalSupply = totalSupply.add(_ammount.add(ownBonus));\n', '    \n', '    balances[msg.sender] = balances[msg.sender].add(_ammount);\n', '    balances[owner] = balances[owner].add(ownBonus);\n', '    \n', '    if(msg.value > 10 ether) \n', '      Transfer(0, msg.sender, _ammount);\n', '    Transfer(this, owner, ownBonus);\n', '    Transfer(this, msg.sender, _ammount);\n', '  }\n', '  \n', '  function extraEmission(uint256 _ammount) public onlyOwner {\n', '    _ammount = _ammount.mul(token);\n', '    totalSupply = totalSupply.add(_ammount);\n', '    balances[owner] = balances[owner].add(_ammount);\n', '    Transfer(this, owner, _ammount);\n', '  }\n', '\n', '  \n', '  function AKM() {\n', '    totalSupply = INITIAL_SUPPLY.mul(token);\n', '    balances[owner] = totalSupply;\n', '  }\n', '  \n', '  function startBonuses() public onlyOwner {\n', '    if(!is_started_bonuses) {\n', '      creationTime = now;\n', '      is_started_bonuses = true;\n', '    }\n', '  }\n', '  \n', '  function startPayouts() public onlyOwner {\n', '    is_started_payouts = true;\n', '  }\n', '  \n', '  function stopPayouts() public onlyOwner {\n', '    is_started_payouts = false;\n', '  }\n', '  \n', '  function setTokensPerEther(uint256 _value) public onlyOwner {\n', '     require(_value > 0);\n', '     tokenPerWai = (10 ** 10 * 1 wei) / _value;\n', '  }\n', '  \n', '  function getBonusPercent() private constant returns(uint256) {\n', '    if(!is_started_bonuses) return 100;\n', '    uint256 diff = now.sub(creationTime);\n', '    uint256 diff_weeks = diff.div(1 weeks);\n', '    if(diff_weeks < 1) // 0 ... 1 week\n', '      return 130;\n', '    else if(diff_weeks < 2)// 1 ... 2 week\n', '      return 125;\n', '    else if(diff_weeks < 3)// 2 ... 3 week\n', '      return 120;\n', '    else if(diff_weeks < 4)// 3 ... 4 week\n', '      return 115;\n', '    else if(diff_weeks < 5)// 4 ... 5 week\n', '      return 110;\n', '    else {\n', '      is_started_bonuses = false;\n', '      return 100;\n', '    }\n', '  }\n', '  \n', '  \n', '  function() payable {\n', '    assert(is_started_payouts);\n', '    uint256 amount = msg.value.div(tokenPerWai);\n', '    amount = amount.div(100).mul(getBonusPercent());\n', '    emissionPay(amount);\n', '    owner.transfer(msg.value);\n', '  }\n', '  \n', '  \n', '}']