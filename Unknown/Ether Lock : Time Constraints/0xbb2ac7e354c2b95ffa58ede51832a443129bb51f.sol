['pragma solidity 0.4.15;\n', '\n', '/// @title Ownable\n', '/// @dev The Ownable contract has an owner address, and provides basic authorization control\n', '/// functions, this simplifies the implementation of "user permissions".\n', 'contract Ownable {\n', '\n', '  // EVENTS\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  // PUBLIC FUNCTIONS\n', '\n', '  /// @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /// @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '  /// @param newOwner The address to transfer ownership to.\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  // MODIFIERS\n', '\n', '  /// @dev Throws if called by any account other than the owner.\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  // FIELDS\n', '\n', '  address public owner;\n', '}\n', '\n', '/// @title ERC20 interface\n', '/// @dev Full ERC20 interface described at https://github.com/ethereum/EIPs/issues/20.\n', 'contract ERC20 {\n', '\n', '  // EVENTS\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '  // PUBLIC FUNCTIONS\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  function balanceOf(address _owner) public constant returns (uint256);\n', '  function allowance(address _owner, address _spender) public constant returns (uint256);\n', '\n', '  // FIELDS\n', '\n', '  uint256 public totalSupply;\n', '}\n', '\n', 'contract WithToken {\n', '    ERC20 public token;\n', '}\n', '\n', 'contract SSPTypeAware {\n', '    enum SSPType { Gate, Direct }\n', '}\n', '\n', 'contract SSPRegistry is SSPTypeAware{\n', '    // This is the function that actually insert a record.\n', '    function register(address key, SSPType sspType, uint16 publisherFee, address recordOwner);\n', '\n', '    // Updates the values of the given record.\n', '    function updatePublisherFee(address key, uint16 newFee, address sender);\n', '\n', '    function applyKarmaDiff(address key, uint256[2] diff);\n', '\n', '    // Unregister a given record\n', '    function unregister(address key, address sender);\n', '\n', '    //Transfer ownership of record\n', '    function transfer(address key, address newOwner, address sender);\n', '\n', '    function getOwner(address key) constant returns(address);\n', '\n', '    // Tells whether a given key is registered.\n', '    function isRegistered(address key) constant returns(bool);\n', '\n', '    function getSSP(address key) constant returns(address sspAddress, SSPType sspType, uint16 publisherFee, uint256[2] karma, address recordOwner);\n', '\n', '    function getAllSSP() constant returns(address[] addresses, SSPType[] sspTypes, uint16[] publisherFees, uint256[2][] karmas, address[] recordOwners);\n', '\n', '    function kill();\n', '}\n', '\n', 'contract PublisherRegistry {\n', '    // This is the function that actually insert a record.\n', '    function register(address key, bytes32[5] url, address recordOwner);\n', '\n', '    // Updates the values of the given record.\n', '    function updateUrl(address key, bytes32[5] url, address sender);\n', '\n', '    function applyKarmaDiff(address key, uint256[2] diff);\n', '\n', '    // Unregister a given record\n', '    function unregister(address key, address sender);\n', '\n', '    //Transfer ownership of record\n', '    function transfer(address key, address newOwner, address sender);\n', '\n', '    function getOwner(address key) constant returns(address);\n', '\n', '    // Tells whether a given key is registered.\n', '    function isRegistered(address key) constant returns(bool);\n', '\n', '    function getPublisher(address key) constant returns(address publisherAddress, bytes32[5] url, uint256[2] karma, address recordOwner);\n', '\n', '    //@dev Get list of all registered publishers\n', '    //@return Returns array of addresses registered as DSP with register times\n', '    function getAllPublishers() constant returns(address[] addresses, bytes32[5][] urls, uint256[2][] karmas, address[] recordOwners);\n', '\n', '    function kill();\n', '}\n', '\n', 'contract DSPTypeAware {\n', '    enum DSPType { Gate, Direct }\n', '}\n', '\n', 'contract DSPRegistry is DSPTypeAware{\n', '    // This is the function that actually insert a record.\n', '    function register(address key, DSPType dspType, bytes32[5] url, address recordOwner);\n', '\n', '    // Updates the values of the given record.\n', '    function updateUrl(address key, bytes32[5] url, address sender);\n', '\n', '    function applyKarmaDiff(address key, uint256[2] diff);\n', '\n', '    // Unregister a given record\n', '    function unregister(address key, address sender);\n', '\n', '    // Transfer ownership of a given record.\n', '    function transfer(address key, address newOwner, address sender);\n', '\n', '    function getOwner(address key) constant returns(address);\n', '\n', '    // Tells whether a given key is registered.\n', '    function isRegistered(address key) constant returns(bool);\n', '\n', '    function getDSP(address key) constant returns(address dspAddress, DSPType dspType, bytes32[5] url, uint256[2] karma, address recordOwner);\n', '\n', '    //@dev Get list of all registered dsp\n', '    //@return Returns array of addresses registered as DSP with register times\n', '    function getAllDSP() constant returns(address[] addresses, DSPType[] dspTypes, bytes32[5][] urls, uint256[2][] karmas, address[] recordOwners) ;\n', '\n', '    function kill();\n', '}\n', '\n', 'contract DepositRegistry {\n', '    // This is the function that actually insert a record.\n', '    function register(address key, uint256 amount, address depositOwner);\n', '\n', '    // Unregister a given record\n', '    function unregister(address key);\n', '\n', '    function transfer(address key, address newOwner, address sender);\n', '\n', '    function spend(address key, uint256 amount);\n', '\n', '    function refill(address key, uint256 amount);\n', '\n', '    // Tells whether a given key is registered.\n', '    function isRegistered(address key) constant returns(bool);\n', '\n', '    function getDepositOwner(address key) constant returns(address);\n', '\n', '    function getDeposit(address key) constant returns(uint256 amount);\n', '\n', '    function getDepositRecord(address key) constant returns(address owner, uint time, uint256 amount, address depositOwner);\n', '\n', '    function hasEnough(address key, uint256 amount) constant returns(bool);\n', '\n', '    function kill();\n', '}\n', '\n', 'contract AuditorRegistry {\n', '    // This is the function that actually insert a record.\n', '    function register(address key, address recordOwner);\n', '\n', '    function applyKarmaDiff(address key, uint256[2] diff);\n', '\n', '    // Unregister a given record\n', '    function unregister(address key, address sender);\n', '\n', '    //Transfer ownership of record\n', '    function transfer(address key, address newOwner, address sender);\n', '\n', '    function getOwner(address key) constant returns(address);\n', '\n', '    // Tells whether a given key is registered.\n', '    function isRegistered(address key) constant returns(bool);\n', '\n', '    function getAuditor(address key) constant returns(address auditorAddress, uint256[2] karma, address recordOwner);\n', '\n', '    //@dev Get list of all registered dsp\n', '    //@return Returns array of addresses registered as DSP with register times\n', '    function getAllAuditors() constant returns(address[] addresses, uint256[2][] karmas, address[] recordOwners);\n', '\n', '    function kill();\n', '}\n', '\n', 'contract DepositAware is WithToken{\n', '    function returnDeposit(address depositAccount, DepositRegistry depositRegistry) internal {\n', '        if (depositRegistry.isRegistered(depositAccount)) {\n', '            uint256 amount = depositRegistry.getDeposit(depositAccount);\n', '            address depositOwner = depositRegistry.getDepositOwner(depositAccount);\n', '            if (amount > 0) {\n', '                token.transfer(depositOwner, amount);\n', '                depositRegistry.unregister(depositAccount);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'contract SecurityDepositAware is DepositAware{\n', '    uint256 constant SECURITY_DEPOSIT_SIZE = 10;\n', '\n', '    DepositRegistry public securityDepositRegistry;\n', '\n', '    function receiveSecurityDeposit(address depositAccount) internal {\n', '        token.transferFrom(msg.sender, this, SECURITY_DEPOSIT_SIZE);\n', '        securityDepositRegistry.register(depositAccount, SECURITY_DEPOSIT_SIZE, msg.sender);\n', '    }\n', '\n', '    function transferSecurityDeposit(address depositAccount, address newOwner) {\n', '        securityDepositRegistry.transfer(depositAccount, newOwner, msg.sender);\n', '    }\n', '}\n', '\n', 'contract AuditorRegistrar is SecurityDepositAware{\n', '    AuditorRegistry public auditorRegistry;\n', '\n', '    event AuditorRegistered(address auditorAddress);\n', '    event AuditorUnregistered(address auditorAddress);\n', '\n', '    //@dev Retrieve information about registered Auditor\n', '    //@return Address of registered Auditor and time when registered\n', '    function findAuditor(address addr) constant returns(address auditorAddress, uint256[2] karma, address recordOwner) {\n', '        return auditorRegistry.getAuditor(addr);\n', '    }\n', '\n', '    //@dev check if Auditor registered\n', '    function isAuditorRegistered(address key) constant returns(bool) {\n', '        return auditorRegistry.isRegistered(key);\n', '    }\n', '\n', '    //@dev Register organisation as Auditor\n', '    //@param auditorAddress address of wallet to register\n', '    function registerAuditor(address auditorAddress) {\n', '        receiveSecurityDeposit(auditorAddress);\n', '        auditorRegistry.register(auditorAddress, msg.sender);\n', '        AuditorRegistered(auditorAddress);\n', '    }\n', '\n', '    //@dev Unregister Auditor and return unused deposit\n', '    //@param Address of Auditor to be unregistered\n', '    function unregisterAuditor(address auditorAddress) {\n', '        returnDeposit(auditorAddress, securityDepositRegistry);\n', '        auditorRegistry.unregister(auditorAddress, msg.sender);\n', '        AuditorUnregistered(auditorAddress);\n', '    }\n', '\n', '    //@dev transfer ownership of this Auditor record\n', '    //@param address of Auditor\n', '    //@param address of new owner\n', '    function transferAuditorRecord(address key, address newOwner) {\n', '        auditorRegistry.transfer(key, newOwner, msg.sender);\n', '    }\n', '}\n', '\n', 'contract DSPRegistrar is DSPTypeAware, SecurityDepositAware {\n', '    DSPRegistry public dspRegistry;\n', '\n', '    event DSPRegistered(address dspAddress);\n', '    event DSPUnregistered(address dspAddress);\n', '    event DSPParametersChanged(address dspAddress);\n', '\n', '    //@dev Retrieve information about registered DSP\n', '    //@return Address of registered DSP and time when registered\n', '    function findDsp(address addr) constant returns(address dspAddress, DSPType dspType, bytes32[5] url, uint256[2] karma, address recordOwner) {\n', '        return dspRegistry.getDSP(addr);\n', '    }\n', '\n', '    //@dev Register organisation as DSP\n', '    //@param dspAddress address of wallet to register\n', '    function registerDsp(address dspAddress, DSPType dspType, bytes32[5] url) {\n', '        receiveSecurityDeposit(dspAddress);\n', '        dspRegistry.register(dspAddress, dspType, url, msg.sender);\n', '        DSPRegistered(dspAddress);\n', '    }\n', '\n', '    //@dev check if DSP registered\n', '    function isDspRegistered(address key) constant returns(bool) {\n', '        return dspRegistry.isRegistered(key);\n', '    }\n', '\n', '    //@dev Unregister DSP and return unused deposit\n', '    //@param Address of DSP to be unregistered\n', '    function unregisterDsp(address dspAddress) {\n', '        returnDeposit(dspAddress, securityDepositRegistry);\n', '        dspRegistry.unregister(dspAddress, msg.sender);\n', '        DSPUnregistered(dspAddress);\n', '    }\n', '\n', '    //@dev Change url of DSP\n', '    //@param address of DSP to change\n', '    //@param new url\n', '    function updateUrl(address key, bytes32[5] url) {\n', '        dspRegistry.updateUrl(key, url, msg.sender);\n', '        DSPParametersChanged(key);\n', '    }\n', '\n', '    //@dev transfer ownership of this DSP record\n', '    //@param address of DSP\n', '    //@param address of new owner\n', '    function transferDSPRecord(address key, address newOwner) {\n', '        dspRegistry.transfer(key, newOwner, msg.sender);\n', '    }\n', '}\n', '\n', 'contract PublisherRegistrar is SecurityDepositAware{\n', '    PublisherRegistry public publisherRegistry;\n', '\n', '    event PublisherRegistered(address publisherAddress);\n', '    event PublisherUnregistered(address publisherAddress);\n', '    event PublisherParametersChanged(address publisherAddress);\n', '\n', '    //@dev Retrieve information about registered Publisher\n', '    //@return Address of registered Publisher and time when registered\n', '    function findPublisher(address addr) constant returns(address publisherAddress, bytes32[5] url, uint256[2] karma, address recordOwner) {\n', '        return publisherRegistry.getPublisher(addr);\n', '    }\n', '\n', '    function isPublisherRegistered(address key) constant returns(bool) {\n', '        return publisherRegistry.isRegistered(key);\n', '    }\n', '\n', '    //@dev Register organisation as Publisher\n', '    //@param publisherAddress address of wallet to register\n', '    function registerPublisher(address publisherAddress, bytes32[5] url) {\n', '        receiveSecurityDeposit(publisherAddress);\n', '        publisherRegistry.register(publisherAddress, url, msg.sender);\n', '        PublisherRegistered(publisherAddress);\n', '    }\n', '\n', '    //@dev Unregister Publisher and return unused deposit\n', '    //@param Address of Publisher to be unregistered\n', '    function unregisterPublisher(address publisherAddress) {\n', '        returnDeposit(publisherAddress, securityDepositRegistry);\n', '        publisherRegistry.unregister(publisherAddress, msg.sender);\n', '        PublisherUnregistered(publisherAddress);\n', '    }\n', '\n', '    //@dev transfer ownership of this Publisher record\n', '    //@param address of Publisher\n', '    //@param address of new owner\n', '    function transferPublisherRecord(address key, address newOwner) {\n', '        publisherRegistry.transfer(key, newOwner, msg.sender);\n', '    }\n', '}\n', '\n', 'contract SSPRegistrar is SSPTypeAware, SecurityDepositAware{\n', '    SSPRegistry public sspRegistry;\n', '\n', '    event SSPRegistered(address sspAddress);\n', '    event SSPUnregistered(address sspAddress);\n', '    event SSPParametersChanged(address sspAddress);\n', '\n', '    //@dev Retrieve information about registered SSP\n', '    //@return Address of registered SSP and time when registered\n', '    function findSsp(address sspAddr) constant returns(address sspAddress, SSPType sspType, uint16 publisherFee, uint256[2] karma, address recordOwner) {\n', '        return sspRegistry.getSSP(sspAddr);\n', '    }\n', '\n', '    //@dev Register organisation as SSP\n', '    //@param sspAddress address of wallet to register\n', '    function registerSsp(address sspAddress, SSPType sspType, uint16 publisherFee) {\n', '        receiveSecurityDeposit(sspAddress);\n', '        sspRegistry.register(sspAddress, sspType, publisherFee, msg.sender);\n', '        SSPRegistered(sspAddress);\n', '    }\n', '\n', '    //@dev check if SSP registered\n', '    function isSspRegistered(address key) constant returns(bool) {\n', '        return sspRegistry.isRegistered(key);\n', '    }\n', '\n', '    //@dev Unregister SSP and return unused deposit\n', '    //@param Address of SSP to be unregistered\n', '    function unregisterSsp(address sspAddress) {\n', '        returnDeposit(sspAddress, securityDepositRegistry);\n', '        sspRegistry.unregister(sspAddress, msg.sender);\n', '        SSPUnregistered(sspAddress);\n', '    }\n', '\n', '    //@dev Change publisher fee of SSP\n', '    //@param address of SSP to change\n', '    //@param new publisher fee\n', '    function updatePublisherFee(address key, uint16 newFee) {\n', '        sspRegistry.updatePublisherFee(key, newFee, msg.sender);\n', '        SSPParametersChanged(key);\n', '    }\n', '\n', '    //@dev transfer ownership of this SSP record\n', '    //@param address of SSP\n', '    //@param address of new owner\n', '    function transferSSPRecord(address key, address newOwner) {\n', '        sspRegistry.transfer(key, newOwner, msg.sender);\n', '    }\n', '}\n', '\n', 'contract ChannelApi {\n', '    function applyRuntimeUpdate(address from, address to, uint impressionsCount, uint fraudCount);\n', '\n', '    function applyAuditorsCheckUpdate(address from, address to, uint fraudCountDelta);\n', '}\n', '\n', 'contract RegistryProvider {\n', '    function replaceSSPRegistry(SSPRegistry newRegistry);\n', '\n', '    function replaceDSPRegistry(DSPRegistry newRegistry);\n', '\n', '    function replacePublisherRegistry(PublisherRegistry newRegistry) ;\n', '\n', '    function replaceAuditorRegistry(AuditorRegistry newRegistry);\n', '\n', '    function replaceSecurityDepositRegistry(DepositRegistry newRegistry);\n', '\n', '    function getSSPRegistry() internal constant returns (SSPRegistry);\n', '\n', '    function getDSPRegistry() internal constant returns (DSPRegistry);\n', '\n', '    function getPublisherRegistry() internal constant returns (PublisherRegistry);\n', '\n', '    function getAuditorRegistry() internal constant returns (AuditorRegistry);\n', '\n', '    function getSecurityDepositRegistry() internal constant returns (DepositRegistry);\n', '}\n', '\n', 'contract StateChannelListener is RegistryProvider, ChannelApi {\n', '    address channelContractAddress;\n', '\n', '    event ChannelContractAddressChanged(address indexed previousAddress, address indexed newAddress);\n', '\n', '    function applyRuntimeUpdate(address from, address to, uint impressionsCount, uint fraudCount) onlyChannelContract {\n', '        uint256[2] storage karmaDiff;\n', '        karmaDiff[0] = impressionsCount;\n', '        karmaDiff[1] = 0;\n', '        if (getDSPRegistry().isRegistered(from)) {\n', '            getDSPRegistry().applyKarmaDiff(from, karmaDiff);\n', '        } else if (getSSPRegistry().isRegistered(from)) {\n', '            getSSPRegistry().applyKarmaDiff(from, karmaDiff);\n', '        }\n', '\n', '        karmaDiff[1] = fraudCount;\n', '        if (getSSPRegistry().isRegistered(to)) {\n', '            karmaDiff[0] = 0;\n', '            getSSPRegistry().applyKarmaDiff(to, karmaDiff);\n', '        } else if (getPublisherRegistry().isRegistered(to)) {\n', '            karmaDiff[0] = impressionsCount;\n', '            getPublisherRegistry().applyKarmaDiff(to, karmaDiff);\n', '        }\n', '    }\n', '\n', '    function applyAuditorsCheckUpdate(address from, address to, uint fraudCountDelta) onlyChannelContract {\n', '        //To be implemented\n', '    }\n', '\n', '    modifier onlyChannelContract() {\n', '        require(msg.sender == channelContractAddress);\n', '        _;\n', '    }\n', '}\n', '\n', 'contract PapyrusDAO is WithToken,\n', '                       RegistryProvider,\n', '                       StateChannelListener,\n', '                       SSPRegistrar,\n', '                       DSPRegistrar,\n', '                       PublisherRegistrar,\n', '                       AuditorRegistrar,\n', '                       Ownable {\n', '\n', '    function PapyrusDAO(ERC20 papyrusToken,\n', '                        SSPRegistry _sspRegistry,\n', '                        DSPRegistry _dspRegistry,\n', '                        PublisherRegistry _publisherRegistry,\n', '                        AuditorRegistry _auditorRegistry,\n', '                        DepositRegistry _securityDepositRegistry\n', '    ) {\n', '        token = papyrusToken;\n', '        sspRegistry = _sspRegistry;\n', '        dspRegistry = _dspRegistry;\n', '        publisherRegistry = _publisherRegistry;\n', '        auditorRegistry = _auditorRegistry;\n', '        securityDepositRegistry = _securityDepositRegistry;\n', '    }\n', '\n', '    event DepositsTransferred(address newDao, uint256 sum);\n', '    event SSPRegistryReplaced(address from, address to);\n', '    event DSPRegistryReplaced(address from, address to);\n', '    event PublisherRegistryReplaced(address from, address to);\n', '    event AuditorRegistryReplaced(address from, address to);\n', '    event SecurityDepositRegistryReplaced(address from, address to);\n', '\n', '    function replaceSSPRegistry(SSPRegistry newRegistry) onlyOwner {\n', '        address old = sspRegistry;\n', '        sspRegistry = newRegistry;\n', '        SSPRegistryReplaced(old, newRegistry);\n', '    }\n', '\n', '    function replaceDSPRegistry(DSPRegistry newRegistry) onlyOwner {\n', '        address old = dspRegistry;\n', '        dspRegistry = newRegistry;\n', '        DSPRegistryReplaced(old, newRegistry);\n', '    }\n', '\n', '    function replacePublisherRegistry(PublisherRegistry newRegistry) onlyOwner {\n', '        address old = publisherRegistry;\n', '        publisherRegistry = newRegistry;\n', '        PublisherRegistryReplaced(old, publisherRegistry);\n', '    }\n', '\n', '    function replaceAuditorRegistry(AuditorRegistry newRegistry) onlyOwner {\n', '        address old = auditorRegistry;\n', '        auditorRegistry = newRegistry;\n', '        AuditorRegistryReplaced(old, auditorRegistry);\n', '    }\n', '\n', '    function replaceSecurityDepositRegistry(DepositRegistry newRegistry) onlyOwner {\n', '        address old = securityDepositRegistry;\n', '        securityDepositRegistry = newRegistry;\n', '        SecurityDepositRegistryReplaced(old, securityDepositRegistry);\n', '    }\n', '\n', '    function replaceChannelContractAddress(address newChannelContract) onlyOwner public {\n', '        require(newChannelContract != address(0));\n', '        ChannelContractAddressChanged(channelContractAddress, newChannelContract);\n', '        channelContractAddress = newChannelContract;\n', '    }\n', '\n', '    function getSSPRegistry() internal constant returns (SSPRegistry) {\n', '        return sspRegistry;\n', '    }\n', '\n', '    function getDSPRegistry() internal constant returns (DSPRegistry) {\n', '        return dspRegistry;\n', '    }\n', '\n', '    function getPublisherRegistry() internal constant returns (PublisherRegistry) {\n', '        return publisherRegistry;\n', '    }\n', '\n', '    function getAuditorRegistry() internal constant returns (AuditorRegistry) {\n', '        return auditorRegistry;\n', '    }\n', '\n', '    function getSecurityDepositRegistry() internal constant returns (DepositRegistry) {\n', '        return securityDepositRegistry;\n', '    }\n', '\n', '    function transferDepositsToNewDao(address newDao) onlyOwner {\n', '        uint256 depositSum = token.balanceOf(this);\n', '        token.transfer(newDao, depositSum);\n', '        DepositsTransferred(newDao, depositSum);\n', '    }\n', '\n', '    function kill() onlyOwner {\n', '        selfdestruct(owner);\n', '    }\n', '}']