['pragma solidity ^0.4.13;\n', '\n', 'contract Token {\n', '  /* This is a slight change to the ERC20 base standard.\n', '     function totalSupply() constant returns (uint256 supply);\n', '     is replaced with:\n', '     uint256 public totalSupply;\n', '     This automatically creates a getter function for the totalSupply.\n', '     This is moved to the base contract since public getter functions are not\n', '     currently recognised as an implementation of the matching abstract\n', '     function by the compiler.\n', '  */\n', '  /// total amount of tokens\n', '  uint256 public totalSupply;\n', '\n', '  /// @param _owner The address from which the balance will be retrieved\n', '  /// @return The balance\n', '  function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '  /// @notice send `_value` token to `_to` from `msg.sender`\n', '  /// @param _to The address of the recipient\n', '  /// @param _value The amount of token to be transferred\n', '  /// @return Whether the transfer was successful or not\n', '  function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '  /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '  /// @param _from The address of the sender\n', '  /// @param _to The address of the recipient\n', '  /// @param _value The amount of token to be transferred\n', '  /// @return Whether the transfer was successful or not\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '  /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '  /// @param _spender The address of the account able to transfer the tokens\n', '  /// @param _value The amount of tokens to be approved for transfer\n', '  /// @return Whether the approval was successful or not\n', '  function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '  /// @param _owner The address of the account owning tokens\n', '  /// @param _spender The address of the account able to transfer the tokens\n', '  /// @return Amount of remaining tokens allowed to spent\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StandardToken is Token {\n', '\n', '  function transfer(address _to, uint256 _value) returns (bool success) {\n', '    //Default assumes totalSupply can&#39;t be over max (2^256 - 1).\n', '    //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn&#39;t wrap.\n', '    //Replace the if with this one instead.\n', '    //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '    if (balances[msg.sender] >= _value && _value > 0) {\n', '      balances[msg.sender] -= _value;\n', '      balances[_to] += _value;\n', '      Transfer(msg.sender, _to, _value);\n', '      return true;\n', '    } else { return false; }\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '    //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '    //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '    if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '      balances[_to] += _value;\n', '      balances[_from] -= _value;\n', '      allowed[_from][msg.sender] -= _value;\n', '      Transfer(_from, _to, _value);\n', '      return true;\n', '    } else { return false; }\n', '  }\n', '\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) returns (bool success) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  mapping (address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract EasyMineToken is StandardToken {\n', '\n', '  string public constant name = "easyMINE Token";\n', '  string public constant symbol = "EMT";\n', '  uint8 public constant decimals = 18;\n', '\n', '  function EasyMineToken(address _icoAddress,\n', '                         address _preIcoAddress,\n', '                         address _easyMineWalletAddress,\n', '                         address _bountyWalletAddress) {\n', '    require(_icoAddress != 0x0);\n', '    require(_preIcoAddress != 0x0);\n', '    require(_easyMineWalletAddress != 0x0);\n', '    require(_bountyWalletAddress != 0x0);\n', '\n', '    totalSupply = 33000000 * 10**18;                     // 33.000.000 EMT\n', '\n', '    uint256 icoTokens = 27000000 * 10**18;               // 27.000.000 EMT\n', '\n', '    uint256 preIcoTokens = 2000000 * 10**18;             // 2.000.000 EMT\n', '\n', '    uint256 easyMineTokens = 3000000 * 10**18;           // 1.500.000 EMT dev team +\n', '                                                         // 500.000 EMT advisors +\n', '                                                         // 1.000.000 EMT easyMINE corporation +\n', '                                                         // = 3.000.000 EMT\n', '\n', '    uint256 bountyTokens = 1000000 * 10**18;             // 1.000.000 EMT\n', '\n', '    assert(icoTokens + preIcoTokens + easyMineTokens + bountyTokens == totalSupply);\n', '\n', '    balances[_icoAddress] = icoTokens;\n', '    Transfer(0, _icoAddress, icoTokens);\n', '\n', '    balances[_preIcoAddress] = preIcoTokens;\n', '    Transfer(0, _preIcoAddress, preIcoTokens);\n', '\n', '    balances[_easyMineWalletAddress] = easyMineTokens;\n', '    Transfer(0, _easyMineWalletAddress, easyMineTokens);\n', '\n', '    balances[_bountyWalletAddress] = bountyTokens;\n', '    Transfer(0, _bountyWalletAddress, bountyTokens);\n', '  }\n', '\n', '  function burn(uint256 _value) returns (bool success) {\n', '    if (balances[msg.sender] >= _value && _value > 0) {\n', '      balances[msg.sender] -= _value;\n', '      totalSupply -= _value;\n', '      Transfer(msg.sender, 0x0, _value);\n', '      return true;\n', '    } else {\n', '      return false;\n', '    }\n', '  }\n', '}\n', '\n', 'contract EasyMineTokenWallet {\n', '\n', '  uint256 constant public VESTING_PERIOD = 180 days;\n', '  uint256 constant public DAILY_FUNDS_RELEASE = 15000 * 10**18; // 0.5% * 3M tokens = 15k tokens a day\n', '\n', '  address public owner;\n', '  address public withdrawalAddress;\n', '  Token public easyMineToken;\n', '  uint256 public startTime;\n', '  uint256 public totalWithdrawn;\n', '\n', '  modifier isOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function EasyMineTokenWallet() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  function setup(address _easyMineToken, address _withdrawalAddress)\n', '    public\n', '    isOwner\n', '  {\n', '    require(_easyMineToken != 0x0);\n', '    require(_withdrawalAddress != 0x0);\n', '\n', '    easyMineToken = Token(_easyMineToken);\n', '    withdrawalAddress = _withdrawalAddress;\n', '    startTime = now;\n', '  }\n', '\n', '  function withdraw(uint256 requestedAmount)\n', '    public\n', '    isOwner\n', '    returns (uint256 amount)\n', '  {\n', '    uint256 limit = maxPossibleWithdrawal();\n', '    uint256 withdrawalAmount = requestedAmount;\n', '    if (requestedAmount > limit) {\n', '      withdrawalAmount = limit;\n', '    }\n', '\n', '    if (withdrawalAmount > 0) {\n', '      if (!easyMineToken.transfer(withdrawalAddress, withdrawalAmount)) {\n', '        revert();\n', '      }\n', '      totalWithdrawn += withdrawalAmount;\n', '    }\n', '\n', '    return withdrawalAmount;\n', '  }\n', '\n', '  function maxPossibleWithdrawal()\n', '    public\n', '    constant\n', '    returns (uint256)\n', '  {\n', '    if (now < startTime + VESTING_PERIOD) {\n', '      return 0;\n', '    } else {\n', '      uint256 daysPassed = (now - (startTime + VESTING_PERIOD)) / 86400;\n', '      uint256 res = DAILY_FUNDS_RELEASE * daysPassed - totalWithdrawn;\n', '      if (res < 0) {\n', '        return 0;\n', '      } else {\n', '        return res;\n', '      }\n', '    }\n', '  }\n', '\n', '}\n', '\n', 'contract EasyMineIco {\n', '\n', '  event TokensSold(address indexed buyer, uint256 amount);\n', '  event TokensReserved(uint256 amount);\n', '  event IcoFinished(uint256 burned);\n', '\n', '  struct PriceThreshold {\n', '    uint256 tokenCount;\n', '    uint256 price;\n', '    uint256 tokensSold;\n', '  }\n', '\n', '  /* Maximum duration of ICO */\n', '  uint256 public maxDuration;\n', '\n', '  /* Minimum start delay in blocks */\n', '  uint256 public minStartDelay;\n', '\n', '  /* The owner of this contract */\n', '  address public owner;\n', '\n', '  /* The sys address that handles token reservation */\n', '  address public sys;\n', '\n', '  /* The reservation address - where reserved tokens will be send */\n', '  address public reservationAddress;\n', '\n', '  /* The easyMINE wallet address */\n', '  address public wallet;\n', '\n', '  /* The easyMINE token */\n', '  EasyMineToken public easyMineToken;\n', '\n', '  /* ICO start block */\n', '  uint256 public startBlock;\n', '\n', '  /* ICO end block */\n', '  uint256 public endBlock;\n', '\n', '  /* The three price thresholds */\n', '  PriceThreshold[3] public priceThresholds;\n', '\n', '  /* Current stage */\n', '  Stages public stage;\n', '\n', '  enum Stages {\n', '    Deployed,\n', '    SetUp,\n', '    StartScheduled,\n', '    Started,\n', '    Ended\n', '  }\n', '\n', '  modifier atStage(Stages _stage) {\n', '    require(stage == _stage);\n', '    _;\n', '  }\n', '\n', '  modifier isOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  modifier isSys() {\n', '    require(msg.sender == sys);\n', '    _;\n', '  }\n', '\n', '  modifier isValidPayload() {\n', '    require(msg.data.length == 0 || msg.data.length == 4);\n', '    _;\n', '  }\n', '\n', '  modifier timedTransitions() {\n', '    if (stage == Stages.StartScheduled && block.number >= startBlock) {\n', '      stage = Stages.Started;\n', '    }\n', '    if (stage == Stages.Started && block.number >= endBlock) {\n', '      finalize();\n', '    }\n', '    _;\n', '  }\n', '\n', '  function EasyMineIco(address _wallet)\n', '    public {\n', '    require(_wallet != 0x0);\n', '\n', '    owner = msg.sender;\n', '    wallet = _wallet;\n', '    stage = Stages.Deployed;\n', '  }\n', '\n', '  /* Fallback function */\n', '  function()\n', '    public\n', '    payable\n', '    timedTransitions {\n', '    if (stage == Stages.Started) {\n', '      buyTokens();\n', '    } else {\n', '      revert();\n', '    }\n', '  }\n', '\n', '  function setup(address _easyMineToken, address _sys, address _reservationAddress, uint256 _minStartDelay, uint256 _maxDuration)\n', '    public\n', '    isOwner\n', '    atStage(Stages.Deployed)\n', '  {\n', '    require(_easyMineToken != 0x0);\n', '    require(_sys != 0x0);\n', '    require(_reservationAddress != 0x0);\n', '    require(_minStartDelay > 0);\n', '    require(_maxDuration > 0);\n', '\n', '    priceThresholds[0] = PriceThreshold(2000000  * 10**18, 0.00070 * 10**18, 0);\n', '    priceThresholds[1] = PriceThreshold(2000000  * 10**18, 0.00075 * 10**18, 0);\n', '    priceThresholds[2] = PriceThreshold(23000000 * 10**18, 0.00080 * 10**18, 0);\n', '\n', '    easyMineToken = EasyMineToken(_easyMineToken);\n', '    sys = _sys;\n', '    reservationAddress = _reservationAddress;\n', '    minStartDelay = _minStartDelay;\n', '    maxDuration = _maxDuration;\n', '\n', '    // Validate token balance\n', '    assert(easyMineToken.balanceOf(this) == maxTokensSold());\n', '\n', '    stage = Stages.SetUp;\n', '  }\n', '\n', '  function maxTokensSold()\n', '    public\n', '    constant\n', '    returns (uint256) {\n', '    uint256 total = 0;\n', '    for (uint8 i = 0; i < priceThresholds.length; i++) {\n', '      total += priceThresholds[i].tokenCount;\n', '    }\n', '    return total;\n', '  }\n', '\n', '  function totalTokensSold()\n', '    public\n', '    constant\n', '    returns (uint256) {\n', '    uint256 total = 0;\n', '    for (uint8 i = 0; i < priceThresholds.length; i++) {\n', '      total += priceThresholds[i].tokensSold;\n', '    }\n', '    return total;\n', '  }\n', '\n', '  /* Schedules start of the ICO */\n', '  function scheduleStart(uint256 _startBlock)\n', '    public\n', '    isOwner\n', '    atStage(Stages.SetUp)\n', '  {\n', '    // Start allowed minimum 5000 blocks from now\n', '    require(_startBlock > block.number + minStartDelay);\n', '\n', '    startBlock = _startBlock;\n', '    endBlock = startBlock + maxDuration;\n', '    stage = Stages.StartScheduled;\n', '  }\n', '\n', '  function updateStage()\n', '    public\n', '    timedTransitions\n', '    returns (Stages)\n', '  {\n', '    return stage;\n', '  }\n', '\n', '  function buyTokens()\n', '    public\n', '    payable\n', '    isValidPayload\n', '    timedTransitions\n', '    atStage(Stages.Started)\n', '  {\n', '    require(msg.value > 0);\n', '\n', '    uint256 amountRemaining = msg.value;\n', '    uint256 tokensToReceive = 0;\n', '\n', '    for (uint8 i = 0; i < priceThresholds.length; i++) {\n', '      uint256 tokensAvailable = priceThresholds[i].tokenCount - priceThresholds[i].tokensSold;\n', '      uint256 maxTokensByAmount = amountRemaining * 10**18 / priceThresholds[i].price;\n', '\n', '      uint256 tokens;\n', '      if (maxTokensByAmount > tokensAvailable) {\n', '        tokens = tokensAvailable;\n', '        amountRemaining -= (priceThresholds[i].price * tokens) / 10**18;\n', '      } else {\n', '        tokens = maxTokensByAmount;\n', '        amountRemaining = 0;\n', '      }\n', '      priceThresholds[i].tokensSold += tokens;\n', '      tokensToReceive += tokens;\n', '    }\n', '\n', '    assert(tokensToReceive > 0);\n', '\n', '    if (amountRemaining != 0) {\n', '      assert(msg.sender.send(amountRemaining));\n', '    }\n', '\n', '    assert(wallet.send(msg.value - amountRemaining));\n', '    assert(easyMineToken.transfer(msg.sender, tokensToReceive));\n', '\n', '    if (totalTokensSold() == maxTokensSold()) {\n', '      finalize();\n', '    }\n', '\n', '    TokensSold(msg.sender, tokensToReceive);\n', '  }\n', '\n', '  function reserveTokens(uint256 tokenCount)\n', '    public\n', '    isSys\n', '    timedTransitions\n', '    atStage(Stages.Started)\n', '  {\n', '    require(tokenCount > 0);\n', '\n', '    uint256 tokensRemaining = tokenCount;\n', '\n', '    for (uint8 i = 0; i < priceThresholds.length; i++) {\n', '      uint256 tokensAvailable = priceThresholds[i].tokenCount - priceThresholds[i].tokensSold;\n', '\n', '      uint256 tokens;\n', '      if (tokensRemaining > tokensAvailable) {\n', '        tokens = tokensAvailable;\n', '      } else {\n', '        tokens = tokensRemaining;\n', '      }\n', '      priceThresholds[i].tokensSold += tokens;\n', '      tokensRemaining -= tokens;\n', '    }\n', '\n', '    uint256 tokensReserved = tokenCount - tokensRemaining;\n', '\n', '    assert(easyMineToken.transfer(reservationAddress, tokensReserved));\n', '\n', '    if (totalTokensSold() == maxTokensSold()) {\n', '      finalize();\n', '    }\n', '\n', '    TokensReserved(tokensReserved);\n', '  }\n', '\n', '  /* Transfer any ether accidentally left in this contract */\n', '  function cleanup()\n', '    public\n', '    isOwner\n', '    timedTransitions\n', '    atStage(Stages.Ended)\n', '  {\n', '    assert(owner.send(this.balance));\n', '  }\n', '\n', '  function finalize()\n', '    private\n', '  {\n', '    stage = Stages.Ended;\n', '\n', '    // burn unsold tokens\n', '    uint256 balance = easyMineToken.balanceOf(this);\n', '    easyMineToken.burn(balance);\n', '    IcoFinished(balance);\n', '  }\n', '\n', '}']
['pragma solidity ^0.4.13;\n', '\n', 'contract Token {\n', '  /* This is a slight change to the ERC20 base standard.\n', '     function totalSupply() constant returns (uint256 supply);\n', '     is replaced with:\n', '     uint256 public totalSupply;\n', '     This automatically creates a getter function for the totalSupply.\n', '     This is moved to the base contract since public getter functions are not\n', '     currently recognised as an implementation of the matching abstract\n', '     function by the compiler.\n', '  */\n', '  /// total amount of tokens\n', '  uint256 public totalSupply;\n', '\n', '  /// @param _owner The address from which the balance will be retrieved\n', '  /// @return The balance\n', '  function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '  /// @notice send `_value` token to `_to` from `msg.sender`\n', '  /// @param _to The address of the recipient\n', '  /// @param _value The amount of token to be transferred\n', '  /// @return Whether the transfer was successful or not\n', '  function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '  /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '  /// @param _from The address of the sender\n', '  /// @param _to The address of the recipient\n', '  /// @param _value The amount of token to be transferred\n', '  /// @return Whether the transfer was successful or not\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '  /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '  /// @param _spender The address of the account able to transfer the tokens\n', '  /// @param _value The amount of tokens to be approved for transfer\n', '  /// @return Whether the approval was successful or not\n', '  function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '  /// @param _owner The address of the account owning tokens\n', '  /// @param _spender The address of the account able to transfer the tokens\n', '  /// @return Amount of remaining tokens allowed to spent\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StandardToken is Token {\n', '\n', '  function transfer(address _to, uint256 _value) returns (bool success) {\n', "    //Default assumes totalSupply can't be over max (2^256 - 1).\n", "    //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n", '    //Replace the if with this one instead.\n', '    //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '    if (balances[msg.sender] >= _value && _value > 0) {\n', '      balances[msg.sender] -= _value;\n', '      balances[_to] += _value;\n', '      Transfer(msg.sender, _to, _value);\n', '      return true;\n', '    } else { return false; }\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '    //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '    //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '    if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '      balances[_to] += _value;\n', '      balances[_from] -= _value;\n', '      allowed[_from][msg.sender] -= _value;\n', '      Transfer(_from, _to, _value);\n', '      return true;\n', '    } else { return false; }\n', '  }\n', '\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) returns (bool success) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  mapping (address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract EasyMineToken is StandardToken {\n', '\n', '  string public constant name = "easyMINE Token";\n', '  string public constant symbol = "EMT";\n', '  uint8 public constant decimals = 18;\n', '\n', '  function EasyMineToken(address _icoAddress,\n', '                         address _preIcoAddress,\n', '                         address _easyMineWalletAddress,\n', '                         address _bountyWalletAddress) {\n', '    require(_icoAddress != 0x0);\n', '    require(_preIcoAddress != 0x0);\n', '    require(_easyMineWalletAddress != 0x0);\n', '    require(_bountyWalletAddress != 0x0);\n', '\n', '    totalSupply = 33000000 * 10**18;                     // 33.000.000 EMT\n', '\n', '    uint256 icoTokens = 27000000 * 10**18;               // 27.000.000 EMT\n', '\n', '    uint256 preIcoTokens = 2000000 * 10**18;             // 2.000.000 EMT\n', '\n', '    uint256 easyMineTokens = 3000000 * 10**18;           // 1.500.000 EMT dev team +\n', '                                                         // 500.000 EMT advisors +\n', '                                                         // 1.000.000 EMT easyMINE corporation +\n', '                                                         // = 3.000.000 EMT\n', '\n', '    uint256 bountyTokens = 1000000 * 10**18;             // 1.000.000 EMT\n', '\n', '    assert(icoTokens + preIcoTokens + easyMineTokens + bountyTokens == totalSupply);\n', '\n', '    balances[_icoAddress] = icoTokens;\n', '    Transfer(0, _icoAddress, icoTokens);\n', '\n', '    balances[_preIcoAddress] = preIcoTokens;\n', '    Transfer(0, _preIcoAddress, preIcoTokens);\n', '\n', '    balances[_easyMineWalletAddress] = easyMineTokens;\n', '    Transfer(0, _easyMineWalletAddress, easyMineTokens);\n', '\n', '    balances[_bountyWalletAddress] = bountyTokens;\n', '    Transfer(0, _bountyWalletAddress, bountyTokens);\n', '  }\n', '\n', '  function burn(uint256 _value) returns (bool success) {\n', '    if (balances[msg.sender] >= _value && _value > 0) {\n', '      balances[msg.sender] -= _value;\n', '      totalSupply -= _value;\n', '      Transfer(msg.sender, 0x0, _value);\n', '      return true;\n', '    } else {\n', '      return false;\n', '    }\n', '  }\n', '}\n', '\n', 'contract EasyMineTokenWallet {\n', '\n', '  uint256 constant public VESTING_PERIOD = 180 days;\n', '  uint256 constant public DAILY_FUNDS_RELEASE = 15000 * 10**18; // 0.5% * 3M tokens = 15k tokens a day\n', '\n', '  address public owner;\n', '  address public withdrawalAddress;\n', '  Token public easyMineToken;\n', '  uint256 public startTime;\n', '  uint256 public totalWithdrawn;\n', '\n', '  modifier isOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function EasyMineTokenWallet() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  function setup(address _easyMineToken, address _withdrawalAddress)\n', '    public\n', '    isOwner\n', '  {\n', '    require(_easyMineToken != 0x0);\n', '    require(_withdrawalAddress != 0x0);\n', '\n', '    easyMineToken = Token(_easyMineToken);\n', '    withdrawalAddress = _withdrawalAddress;\n', '    startTime = now;\n', '  }\n', '\n', '  function withdraw(uint256 requestedAmount)\n', '    public\n', '    isOwner\n', '    returns (uint256 amount)\n', '  {\n', '    uint256 limit = maxPossibleWithdrawal();\n', '    uint256 withdrawalAmount = requestedAmount;\n', '    if (requestedAmount > limit) {\n', '      withdrawalAmount = limit;\n', '    }\n', '\n', '    if (withdrawalAmount > 0) {\n', '      if (!easyMineToken.transfer(withdrawalAddress, withdrawalAmount)) {\n', '        revert();\n', '      }\n', '      totalWithdrawn += withdrawalAmount;\n', '    }\n', '\n', '    return withdrawalAmount;\n', '  }\n', '\n', '  function maxPossibleWithdrawal()\n', '    public\n', '    constant\n', '    returns (uint256)\n', '  {\n', '    if (now < startTime + VESTING_PERIOD) {\n', '      return 0;\n', '    } else {\n', '      uint256 daysPassed = (now - (startTime + VESTING_PERIOD)) / 86400;\n', '      uint256 res = DAILY_FUNDS_RELEASE * daysPassed - totalWithdrawn;\n', '      if (res < 0) {\n', '        return 0;\n', '      } else {\n', '        return res;\n', '      }\n', '    }\n', '  }\n', '\n', '}\n', '\n', 'contract EasyMineIco {\n', '\n', '  event TokensSold(address indexed buyer, uint256 amount);\n', '  event TokensReserved(uint256 amount);\n', '  event IcoFinished(uint256 burned);\n', '\n', '  struct PriceThreshold {\n', '    uint256 tokenCount;\n', '    uint256 price;\n', '    uint256 tokensSold;\n', '  }\n', '\n', '  /* Maximum duration of ICO */\n', '  uint256 public maxDuration;\n', '\n', '  /* Minimum start delay in blocks */\n', '  uint256 public minStartDelay;\n', '\n', '  /* The owner of this contract */\n', '  address public owner;\n', '\n', '  /* The sys address that handles token reservation */\n', '  address public sys;\n', '\n', '  /* The reservation address - where reserved tokens will be send */\n', '  address public reservationAddress;\n', '\n', '  /* The easyMINE wallet address */\n', '  address public wallet;\n', '\n', '  /* The easyMINE token */\n', '  EasyMineToken public easyMineToken;\n', '\n', '  /* ICO start block */\n', '  uint256 public startBlock;\n', '\n', '  /* ICO end block */\n', '  uint256 public endBlock;\n', '\n', '  /* The three price thresholds */\n', '  PriceThreshold[3] public priceThresholds;\n', '\n', '  /* Current stage */\n', '  Stages public stage;\n', '\n', '  enum Stages {\n', '    Deployed,\n', '    SetUp,\n', '    StartScheduled,\n', '    Started,\n', '    Ended\n', '  }\n', '\n', '  modifier atStage(Stages _stage) {\n', '    require(stage == _stage);\n', '    _;\n', '  }\n', '\n', '  modifier isOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  modifier isSys() {\n', '    require(msg.sender == sys);\n', '    _;\n', '  }\n', '\n', '  modifier isValidPayload() {\n', '    require(msg.data.length == 0 || msg.data.length == 4);\n', '    _;\n', '  }\n', '\n', '  modifier timedTransitions() {\n', '    if (stage == Stages.StartScheduled && block.number >= startBlock) {\n', '      stage = Stages.Started;\n', '    }\n', '    if (stage == Stages.Started && block.number >= endBlock) {\n', '      finalize();\n', '    }\n', '    _;\n', '  }\n', '\n', '  function EasyMineIco(address _wallet)\n', '    public {\n', '    require(_wallet != 0x0);\n', '\n', '    owner = msg.sender;\n', '    wallet = _wallet;\n', '    stage = Stages.Deployed;\n', '  }\n', '\n', '  /* Fallback function */\n', '  function()\n', '    public\n', '    payable\n', '    timedTransitions {\n', '    if (stage == Stages.Started) {\n', '      buyTokens();\n', '    } else {\n', '      revert();\n', '    }\n', '  }\n', '\n', '  function setup(address _easyMineToken, address _sys, address _reservationAddress, uint256 _minStartDelay, uint256 _maxDuration)\n', '    public\n', '    isOwner\n', '    atStage(Stages.Deployed)\n', '  {\n', '    require(_easyMineToken != 0x0);\n', '    require(_sys != 0x0);\n', '    require(_reservationAddress != 0x0);\n', '    require(_minStartDelay > 0);\n', '    require(_maxDuration > 0);\n', '\n', '    priceThresholds[0] = PriceThreshold(2000000  * 10**18, 0.00070 * 10**18, 0);\n', '    priceThresholds[1] = PriceThreshold(2000000  * 10**18, 0.00075 * 10**18, 0);\n', '    priceThresholds[2] = PriceThreshold(23000000 * 10**18, 0.00080 * 10**18, 0);\n', '\n', '    easyMineToken = EasyMineToken(_easyMineToken);\n', '    sys = _sys;\n', '    reservationAddress = _reservationAddress;\n', '    minStartDelay = _minStartDelay;\n', '    maxDuration = _maxDuration;\n', '\n', '    // Validate token balance\n', '    assert(easyMineToken.balanceOf(this) == maxTokensSold());\n', '\n', '    stage = Stages.SetUp;\n', '  }\n', '\n', '  function maxTokensSold()\n', '    public\n', '    constant\n', '    returns (uint256) {\n', '    uint256 total = 0;\n', '    for (uint8 i = 0; i < priceThresholds.length; i++) {\n', '      total += priceThresholds[i].tokenCount;\n', '    }\n', '    return total;\n', '  }\n', '\n', '  function totalTokensSold()\n', '    public\n', '    constant\n', '    returns (uint256) {\n', '    uint256 total = 0;\n', '    for (uint8 i = 0; i < priceThresholds.length; i++) {\n', '      total += priceThresholds[i].tokensSold;\n', '    }\n', '    return total;\n', '  }\n', '\n', '  /* Schedules start of the ICO */\n', '  function scheduleStart(uint256 _startBlock)\n', '    public\n', '    isOwner\n', '    atStage(Stages.SetUp)\n', '  {\n', '    // Start allowed minimum 5000 blocks from now\n', '    require(_startBlock > block.number + minStartDelay);\n', '\n', '    startBlock = _startBlock;\n', '    endBlock = startBlock + maxDuration;\n', '    stage = Stages.StartScheduled;\n', '  }\n', '\n', '  function updateStage()\n', '    public\n', '    timedTransitions\n', '    returns (Stages)\n', '  {\n', '    return stage;\n', '  }\n', '\n', '  function buyTokens()\n', '    public\n', '    payable\n', '    isValidPayload\n', '    timedTransitions\n', '    atStage(Stages.Started)\n', '  {\n', '    require(msg.value > 0);\n', '\n', '    uint256 amountRemaining = msg.value;\n', '    uint256 tokensToReceive = 0;\n', '\n', '    for (uint8 i = 0; i < priceThresholds.length; i++) {\n', '      uint256 tokensAvailable = priceThresholds[i].tokenCount - priceThresholds[i].tokensSold;\n', '      uint256 maxTokensByAmount = amountRemaining * 10**18 / priceThresholds[i].price;\n', '\n', '      uint256 tokens;\n', '      if (maxTokensByAmount > tokensAvailable) {\n', '        tokens = tokensAvailable;\n', '        amountRemaining -= (priceThresholds[i].price * tokens) / 10**18;\n', '      } else {\n', '        tokens = maxTokensByAmount;\n', '        amountRemaining = 0;\n', '      }\n', '      priceThresholds[i].tokensSold += tokens;\n', '      tokensToReceive += tokens;\n', '    }\n', '\n', '    assert(tokensToReceive > 0);\n', '\n', '    if (amountRemaining != 0) {\n', '      assert(msg.sender.send(amountRemaining));\n', '    }\n', '\n', '    assert(wallet.send(msg.value - amountRemaining));\n', '    assert(easyMineToken.transfer(msg.sender, tokensToReceive));\n', '\n', '    if (totalTokensSold() == maxTokensSold()) {\n', '      finalize();\n', '    }\n', '\n', '    TokensSold(msg.sender, tokensToReceive);\n', '  }\n', '\n', '  function reserveTokens(uint256 tokenCount)\n', '    public\n', '    isSys\n', '    timedTransitions\n', '    atStage(Stages.Started)\n', '  {\n', '    require(tokenCount > 0);\n', '\n', '    uint256 tokensRemaining = tokenCount;\n', '\n', '    for (uint8 i = 0; i < priceThresholds.length; i++) {\n', '      uint256 tokensAvailable = priceThresholds[i].tokenCount - priceThresholds[i].tokensSold;\n', '\n', '      uint256 tokens;\n', '      if (tokensRemaining > tokensAvailable) {\n', '        tokens = tokensAvailable;\n', '      } else {\n', '        tokens = tokensRemaining;\n', '      }\n', '      priceThresholds[i].tokensSold += tokens;\n', '      tokensRemaining -= tokens;\n', '    }\n', '\n', '    uint256 tokensReserved = tokenCount - tokensRemaining;\n', '\n', '    assert(easyMineToken.transfer(reservationAddress, tokensReserved));\n', '\n', '    if (totalTokensSold() == maxTokensSold()) {\n', '      finalize();\n', '    }\n', '\n', '    TokensReserved(tokensReserved);\n', '  }\n', '\n', '  /* Transfer any ether accidentally left in this contract */\n', '  function cleanup()\n', '    public\n', '    isOwner\n', '    timedTransitions\n', '    atStage(Stages.Ended)\n', '  {\n', '    assert(owner.send(this.balance));\n', '  }\n', '\n', '  function finalize()\n', '    private\n', '  {\n', '    stage = Stages.Ended;\n', '\n', '    // burn unsold tokens\n', '    uint256 balance = easyMineToken.balanceOf(this);\n', '    easyMineToken.burn(balance);\n', '    IcoFinished(balance);\n', '  }\n', '\n', '}']
