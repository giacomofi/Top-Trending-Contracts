['pragma solidity ^0.4.15;\n', '\n', '//import &#39;./lib/safeMath.sol&#39;;\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// import &#39;./ERC20.sol&#39;;\n', 'contract ERC20 {\n', '  uint256 public totalSupply;\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function balanceOf(address who) constant returns (uint256);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// import &#39;./helpers/BasicToken.sol&#39;;\n', 'contract BasicToken is ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    \n', '/**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '    function transfer(address _to, uint256 _value) returns (bool) {\n', '        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[msg.sender] = balances[msg.sender].sub(_value);\n', '            balances[_to] = balances[_to].add(_value);\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '    \n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        uint256 _allowance = allowed[_from][msg.sender];\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '      }\n', '      return false;\n', '}\n', '\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '\n', '}\n', '\n', '// import &#39;./BiQToken.sol&#39;;\n', 'contract BiQToken is BasicToken {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  string public name = "BurstIQ Token";              //name of the token\n', '  string public symbol = "BiQ";                      // symbol of the token\n', '  uint8 public decimals = 18;                        // decimals\n', '  uint256 public totalSupply = 1000000000 * 10**18;  // total supply of BiQ Tokens\n', '\n', '  // variables\n', '  uint256 public keyEmployeesAllocatedFund;           // fund allocated to key employees\n', '  uint256 public advisorsAllocation;                  // fund allocated to advisors\n', '  uint256 public marketIncentivesAllocation;          // fund allocated to Market\n', '  uint256 public vestingFounderAllocation;            // funds allocated to founders that in under vesting period\n', '  uint256 public totalAllocatedTokens;                // variable to keep track of funds allocated\n', '  uint256 public tokensAllocatedToCrowdFund;          // funds allocated to crowdfund\n', '  uint256 public saftInvestorAllocation;              // funds allocated to private presales and instituational investors\n', '\n', '  bool public isPublicTokenReleased = false;          // flag to track the release the public token\n', '\n', '  // addresses\n', '\n', '  address public founderMultiSigAddress;              // multi sign address of founders which hold\n', '  address public advisorAddress;                      //  advisor address which hold advisorsAllocation funds\n', '  address public vestingFounderAddress;               // address of founder that hold vestingFounderAllocation\n', '  address public crowdFundAddress;                    // address of crowdfund contract\n', '\n', '  // vesting period\n', '\n', '  uint256 public preAllocatedTokensVestingTime;       // crowdfund start time + 6 months\n', '\n', '  //events\n', '\n', '  event ChangeFoundersWalletAddress(uint256  _blockTimeStamp, address indexed _foundersWalletAddress);\n', '  event TransferPreAllocatedFunds(uint256  _blockTimeStamp , address _to , uint256 _value);\n', '  event PublicTokenReleased(uint256 _blockTimeStamp);\n', '\n', '  //modifiers\n', '\n', '  modifier onlyCrowdFundAddress() {\n', '    require(msg.sender == crowdFundAddress);\n', '    _;\n', '  }\n', '\n', '  modifier nonZeroAddress(address _to) {\n', '    require(_to != 0x0);\n', '    _;\n', '  }\n', '\n', '  modifier onlyFounders() {\n', '    require(msg.sender == founderMultiSigAddress);\n', '    _;\n', '  }\n', '\n', '  modifier onlyVestingFounderAddress() {\n', '    require(msg.sender == vestingFounderAddress);\n', '    _;\n', '  }\n', '\n', '  modifier onlyAdvisorAddress() {\n', '    require(msg.sender == advisorAddress);\n', '    _;\n', '  }\n', '\n', '  modifier isPublicTokenNotReleased() {\n', '    require(isPublicTokenReleased == false);\n', '    _;\n', '  }\n', '\n', '\n', '  // creation of the token contract\n', '  function BiQToken (address _crowdFundAddress, address _founderMultiSigAddress, address _advisorAddress, address _vestingFounderAddress) {\n', '    crowdFundAddress = _crowdFundAddress;\n', '    founderMultiSigAddress = _founderMultiSigAddress;\n', '    vestingFounderAddress = _vestingFounderAddress;\n', '    advisorAddress = _advisorAddress;\n', '\n', '    // Token Distribution\n', '    vestingFounderAllocation = 18 * 10 ** 25 ;        // 18 % allocation of totalSupply\n', '    keyEmployeesAllocatedFund = 2 * 10 ** 25 ;        // 2 % allocation of totalSupply\n', '    advisorsAllocation = 5 * 10 ** 25 ;               // 5 % allocation of totalSupply\n', '    tokensAllocatedToCrowdFund = 60 * 10 ** 25 ;      // 60 % allocation of totalSupply\n', '    marketIncentivesAllocation = 5 * 10 ** 25 ;       // 5 % allocation of totalSupply\n', '    saftInvestorAllocation = 10 * 10 ** 25 ;          // 10 % alloaction of totalSupply\n', '\n', '    // Assigned balances to respective stakeholders\n', '    balances[founderMultiSigAddress] = keyEmployeesAllocatedFund + saftInvestorAllocation;\n', '    balances[crowdFundAddress] = tokensAllocatedToCrowdFund;\n', '\n', '    totalAllocatedTokens = balances[founderMultiSigAddress];\n', '    preAllocatedTokensVestingTime = now + 180 * 1 days;                // it should be 6 months period for vesting\n', '  }\n', '\n', '  // function to keep track of the total token allocation\n', '  function changeTotalSupply(uint256 _amount) onlyCrowdFundAddress {\n', '    totalAllocatedTokens = totalAllocatedTokens.add(_amount);\n', '    tokensAllocatedToCrowdFund = tokensAllocatedToCrowdFund.sub(_amount);\n', '  }\n', '\n', '  // function to change founder multisig wallet address\n', '  function changeFounderMultiSigAddress(address _newFounderMultiSigAddress) onlyFounders nonZeroAddress(_newFounderMultiSigAddress) {\n', '    founderMultiSigAddress = _newFounderMultiSigAddress;\n', '    ChangeFoundersWalletAddress(now, founderMultiSigAddress);\n', '  }\n', '\n', '  // function for releasing the public tokens called once by the founder only\n', '  function releaseToken() onlyFounders isPublicTokenNotReleased {\n', '    isPublicTokenReleased = !isPublicTokenReleased;\n', '    PublicTokenReleased(now);\n', '  }\n', '\n', '  // function to transfer market Incentives fund\n', '  function transferMarketIncentivesFund(address _to, uint _value) onlyFounders nonZeroAddress(_to)  returns (bool) {\n', '    if (marketIncentivesAllocation >= _value) {\n', '      marketIncentivesAllocation = marketIncentivesAllocation.sub(_value);\n', '      balances[_to] = balances[_to].add(_value);\n', '      totalAllocatedTokens = totalAllocatedTokens.add(_value);\n', '      TransferPreAllocatedFunds(now, _to, _value);\n', '      return true;\n', '    }\n', '    return false;\n', '  }\n', '\n', '\n', '  // fund transferred to vesting Founders address after 6 months\n', '  function getVestedFounderTokens() onlyVestingFounderAddress returns (bool) {\n', '    if (now >= preAllocatedTokensVestingTime && vestingFounderAllocation > 0) {\n', '      balances[vestingFounderAddress] = balances[vestingFounderAddress].add(vestingFounderAllocation);\n', '      totalAllocatedTokens = totalAllocatedTokens.add(vestingFounderAllocation);\n', '      vestingFounderAllocation = 0;\n', '      TransferPreAllocatedFunds(now, vestingFounderAddress, vestingFounderAllocation);\n', '      return true;\n', '    }\n', '    return false;\n', '  }\n', '\n', '  // fund transferred to vesting advisor address after 6 months\n', '  function getVestedAdvisorTokens() onlyAdvisorAddress returns (bool) {\n', '    if (now >= preAllocatedTokensVestingTime && advisorsAllocation > 0) {\n', '      balances[advisorAddress] = balances[advisorAddress].add(advisorsAllocation);\n', '      totalAllocatedTokens = totalAllocatedTokens.add(advisorsAllocation);\n', '      advisorsAllocation = 0;\n', '      TransferPreAllocatedFunds(now, advisorAddress, advisorsAllocation);\n', '      return true;\n', '    } else {\n', '      return false;\n', '    }\n', '  }\n', '\n', '  // overloaded transfer function to restrict the investor to transfer the token before the ICO sale ends\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    if (msg.sender == crowdFundAddress) {\n', '      return super.transfer(_to,_value);\n', '    } else {\n', '      if (isPublicTokenReleased) {\n', '        return super.transfer(_to,_value);\n', '      }\n', '      return false;\n', '    }\n', '  }\n', '\n', '  // overloaded transferFrom function to restrict the investor to transfer the token before the ICO sale ends\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    if (msg.sender == crowdFundAddress) {\n', '      return super.transferFrom(_from, _to, _value);\n', '    } else {\n', '      if (isPublicTokenReleased) {\n', '        return super.transferFrom(_from, _to, _value);\n', '      }\n', '      return false;\n', '    }\n', '  }\n', '\n', '  // fallback function to restrict direct sending of ether\n', '  function () {\n', '    revert();\n', '  }\n', '\n', '}\n', '\n', 'contract BiQCrowdFund {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    BiQToken public token;                                 // Token contract reference\n', '\n', '    //variables\n', '    uint256 public crowdfundStartTime;                     // Starting time of CrowdFund\n', '    uint256 public crowdfundEndTime;                       // End time of Crowdfund\n', '    uint256 public totalWeiRaised = 0;                     // Counter to track the amount raised\n', '    uint256 public exchangeRate = 2307;                    // Calculated using priceOfEtherInUSD/priceOfBiQToken so 276.84/0.12\n', '    uint256 internal minAmount = 36.1219 * 10 ** 18;       // Calculated using 10k USD / 276.84 USD\n', '\n', '    bool public isCrowdFundActive = false;                 // Flag to track the crowdfund active or not\n', '    bool internal isTokenDeployed = false;                 // Flag to track the token deployment -- only can be set once\n', '    bool internal hasCrowdFundStarted = false;             // Flag to track if the crowdfund started\n', '\n', '    // addresses\n', '    address public founderMultiSigAddress;                 // Founders multisig address\n', '    address public remainingTokenHolder;                   // Address to hold the remaining tokens after crowdfund end\n', '    address public authorizerAddress;                      // Address of Authorizer who will authorize the investor\n', '\n', '    // mapping\n', '    mapping (address => uint256) auth;                     // KYC authentication\n', '\n', '    enum State { PreSale, CrowdFund }\n', '\n', '    //events\n', '    event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount);\n', '    event CrowdFundClosed(uint256 _blockTimeStamp);\n', '    event ChangeFoundersWalletAddress(uint256 _blockTimeStamp, address indexed _foundersWalletAddress);\n', '\n', '    //Modifiers\n', '    modifier tokenIsDeployed() {\n', '        require(isTokenDeployed == true);\n', '        _;\n', '    }\n', '     modifier nonZeroEth() {\n', '        require(msg.value > 0);\n', '        _;\n', '    }\n', '\n', '    modifier nonZeroAddress(address _to) {\n', '        require(_to != 0x0);\n', '        _;\n', '    }\n', '\n', '    modifier checkCrowdFundActive() {\n', '        require(isCrowdFundActive == true);\n', '        _;\n', '    }\n', '\n', '    modifier onlyFounders() {\n', '        require(msg.sender == founderMultiSigAddress);\n', '        _;\n', '    }\n', '\n', '    modifier onlyPublic() {\n', '        require(msg.sender != founderMultiSigAddress);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAuthorizer() {\n', '        require(msg.sender == authorizerAddress);\n', '        _;\n', '    }\n', '\n', '\n', '    modifier inState(State state) {\n', '        require(getState() == state);\n', '        _;\n', '    }\n', '\n', '    // Constructor to initialize the local variables\n', '    function BiQCrowdFund (address _founderWalletAddress, address _remainingTokenHolder, address _authorizerAddress) {\n', '        founderMultiSigAddress = _founderWalletAddress;\n', '        remainingTokenHolder = _remainingTokenHolder;\n', '        authorizerAddress = _authorizerAddress;\n', '    }\n', '\n', '    // Function to change the founders multisig address\n', '    function setFounderMultiSigAddress(address _newFounderAddress) onlyFounders nonZeroAddress(_newFounderAddress) {\n', '        founderMultiSigAddress = _newFounderAddress;\n', '        ChangeFoundersWalletAddress(now, founderMultiSigAddress);\n', '    }\n', '\n', '     function setAuthorizerAddress(address _newAuthorizerAddress) onlyFounders nonZeroAddress(_newAuthorizerAddress) {\n', '        authorizerAddress = _newAuthorizerAddress;\n', '    }\n', '\n', '     function setRemainingTokenHolder(address _newRemainingTokenHolder) onlyFounders nonZeroAddress(_newRemainingTokenHolder) {\n', '        remainingTokenHolder = _newRemainingTokenHolder;\n', '    }\n', '\n', '    // Attach the token contract, can only be done once\n', '    function setTokenAddress(address _tokenAddress) onlyFounders nonZeroAddress(_tokenAddress) {\n', '        require(isTokenDeployed == false);\n', '        token = BiQToken(_tokenAddress);\n', '        isTokenDeployed = true;\n', '    }\n', '\n', '    // change the state of crowdfund\n', '    function changeCrowdfundState() tokenIsDeployed onlyFounders inState(State.CrowdFund) {\n', '        isCrowdFundActive = !isCrowdFundActive;\n', '    }\n', '\n', '    // for KYC/AML\n', '    function authorize(address _to, uint256 max_amount) onlyAuthorizer {\n', '        auth[_to] = max_amount * 1 ether;\n', '    }\n', '\n', '    // Buy token function call only in duration of crowdfund active\n', '    function buyTokens(address beneficiary) nonZeroEth tokenIsDeployed onlyPublic nonZeroAddress(beneficiary) payable returns(bool) {\n', '        // Only allow a certain amount for every investor\n', '        if (auth[beneficiary] < msg.value) {\n', '            revert();\n', '        }\n', '        auth[beneficiary] = auth[beneficiary].sub(msg.value);\n', '\n', '        if (getState() == State.PreSale) {\n', '            if (buyPreSaleTokens(beneficiary)) {\n', '                return true;\n', '            }\n', '            revert();\n', '        } else {\n', '            require(now < crowdfundEndTime && isCrowdFundActive);\n', '            fundTransfer(msg.value);\n', '\n', '            uint256 amount = getNoOfTokens(exchangeRate, msg.value);\n', '\n', '            if (token.transfer(beneficiary, amount)) {\n', '                token.changeTotalSupply(amount);\n', '                totalWeiRaised = totalWeiRaised.add(msg.value);\n', '                TokenPurchase(beneficiary, msg.value, amount);\n', '                return true;\n', '            }\n', '            revert();\n', '        }\n', '\n', '    }\n', '\n', '    // function to transfer the funds to founders account\n', '    function fundTransfer(uint256 weiAmount) internal {\n', '        founderMultiSigAddress.transfer(weiAmount);\n', '    }\n', '\n', '    ///////////////////////////////////// Constant Functions /////////////////////////////////////\n', '\n', '    // function to get the current state of the crowdsale\n', '   function getState() public constant returns(State) {\n', '        if (!isCrowdFundActive && !hasCrowdFundStarted) {\n', '            return State.PreSale;\n', '        }\n', '        return State.CrowdFund;\n', '   }\n', '\n', '    // To get the authorized amount corresponding to an address\n', '   function getPreAuthorizedAmount(address _address) constant returns(uint256) {\n', '        return auth[_address];\n', '   }\n', '\n', '   // get the amount of tokens a user would receive for a specific amount of ether\n', '   function calculateTotalTokenPerContribution(uint256 _totalETHContribution) public constant returns(uint256) {\n', '       if (getState() == State.PreSale) {\n', '           return getTokensForPreSale(exchangeRate, _totalETHContribution * 1 ether).div(10 ** 18);\n', '       }\n', '       return getNoOfTokens(exchangeRate, _totalETHContribution);\n', '   }\n', '\n', '    // provides the bonus %\n', '    function currentBonus(uint256 _ethContribution) public constant returns (uint8) {\n', '        if (getState() == State.PreSale) {\n', '            return getPreSaleBonusRate(_ethContribution * 1 ether);\n', '        }\n', '        return getCurrentBonusRate();\n', '    }\n', '\n', '\n', '///////////////////////////////////// Presale Functions /////////////////////////////////////\n', '    // function to buy the tokens at presale with minimum investment = 10k USD\n', '    function buyPreSaleTokens(address beneficiary) internal returns(bool) {\n', '       // check the minimum investment should be 10k USD\n', '        if (msg.value < minAmount) {\n', '          revert();\n', '        } else {\n', '            fundTransfer(msg.value);\n', '            uint256 amount = getTokensForPreSale(exchangeRate, msg.value);\n', '\n', '            if (token.transfer(beneficiary, amount)) {\n', '                token.changeTotalSupply(amount);\n', '                totalWeiRaised = totalWeiRaised.add(msg.value);\n', '                TokenPurchase(beneficiary, msg.value, amount);\n', '                return true;\n', '            }\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // function calculate the total no of tokens with bonus multiplication in the duration of presale\n', '    function getTokensForPreSale(uint256 _exchangeRate, uint256 _amount) internal returns (uint256) {\n', '        uint256 noOfToken = _amount.mul(_exchangeRate);\n', '        uint256 preSaleTokenQuantity = ((100 + getPreSaleBonusRate(_amount)) * noOfToken ).div(100);\n', '        return preSaleTokenQuantity;\n', '    }\n', '\n', '    function getPreSaleBonusRate(uint256 _ethAmount) internal returns (uint8) {\n', '        if ( _ethAmount >= minAmount.mul(5) && _ethAmount < minAmount.mul(10)) {\n', '            return 30;\n', '        }\n', '        if (_ethAmount >= minAmount.mul(10)) {\n', '            return 35;\n', '        }\n', '        if (_ethAmount >= minAmount) {\n', '            return 25;\n', '        }\n', '    }\n', '///////////////////////////////////// Crowdfund Functions /////////////////////////////////////\n', '\n', '    // Starts the crowdfund, can only be called once\n', '    function startCrowdfund(uint256 _exchangeRate) onlyFounders tokenIsDeployed inState(State.PreSale) {\n', '        if (_exchangeRate > 0 && !hasCrowdFundStarted) {\n', '            exchangeRate = _exchangeRate;\n', '            crowdfundStartTime = now;\n', '            crowdfundEndTime = crowdfundStartTime + 5 * 1 weeks; // end date is 5 weeks after the starting date\n', '            isCrowdFundActive = !isCrowdFundActive;\n', '            hasCrowdFundStarted = !hasCrowdFundStarted;\n', '        } else {\n', '            revert();\n', '        }\n', '    }\n', '\n', '    // function call after crowdFundEndTime.\n', '    // It transfers the remaining tokens to remainingTokenHolder address\n', '    function endCrowdfund() onlyFounders returns (bool) {\n', '        require(now > crowdfundEndTime);\n', '        uint256 remainingToken = token.balanceOf(this);  // remaining tokens\n', '\n', '        if (remainingToken != 0 && token.transfer(remainingTokenHolder, remainingToken)) {\n', '          return true;\n', '        } else {\n', '            return false;\n', '        }\n', '        CrowdFundClosed(now);\n', '    }\n', '\n', '   // function to calculate the total no of tokens with bonus multiplication\n', '    function getNoOfTokens(uint256 _exchangeRate, uint256 _amount) internal returns (uint256) {\n', '         uint256 noOfToken = _amount.mul(_exchangeRate);\n', '         uint256 noOfTokenWithBonus = ((100 + getCurrentBonusRate()) * noOfToken).div(100);\n', '         return noOfTokenWithBonus;\n', '    }\n', '\n', '    // function provide the current bonus rate\n', '    function getCurrentBonusRate() internal returns (uint8) {\n', '        if (now > crowdfundStartTime + 4 weeks) {\n', '            return 0;\n', '        }\n', '        if (now > crowdfundStartTime + 3 weeks) {\n', '            return 5;\n', '        }\n', '        if (now > crowdfundStartTime + 2 weeks) {\n', '            return 10;\n', '        }\n', '        if (now > crowdfundStartTime + 1 weeks) {\n', '            return 15;\n', '        }\n', '        if (now > crowdfundStartTime) {\n', '            return 20;\n', '        }\n', '    }\n', '\n', '    // Crowdfund entry\n', '    // send ether to the contract address\n', '    // With at least 200 000 gas\n', '    function() public payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '}']
['pragma solidity ^0.4.15;\n', '\n', "//import './lib/safeMath.sol';\n", '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', "// import './ERC20.sol';\n", 'contract ERC20 {\n', '  uint256 public totalSupply;\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function balanceOf(address who) constant returns (uint256);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', "// import './helpers/BasicToken.sol';\n", 'contract BasicToken is ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    \n', '/**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '    function transfer(address _to, uint256 _value) returns (bool) {\n', '        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[msg.sender] = balances[msg.sender].sub(_value);\n', '            balances[_to] = balances[_to].add(_value);\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '    \n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        uint256 _allowance = allowed[_from][msg.sender];\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '      }\n', '      return false;\n', '}\n', '\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '\n', '}\n', '\n', "// import './BiQToken.sol';\n", 'contract BiQToken is BasicToken {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  string public name = "BurstIQ Token";              //name of the token\n', '  string public symbol = "BiQ";                      // symbol of the token\n', '  uint8 public decimals = 18;                        // decimals\n', '  uint256 public totalSupply = 1000000000 * 10**18;  // total supply of BiQ Tokens\n', '\n', '  // variables\n', '  uint256 public keyEmployeesAllocatedFund;           // fund allocated to key employees\n', '  uint256 public advisorsAllocation;                  // fund allocated to advisors\n', '  uint256 public marketIncentivesAllocation;          // fund allocated to Market\n', '  uint256 public vestingFounderAllocation;            // funds allocated to founders that in under vesting period\n', '  uint256 public totalAllocatedTokens;                // variable to keep track of funds allocated\n', '  uint256 public tokensAllocatedToCrowdFund;          // funds allocated to crowdfund\n', '  uint256 public saftInvestorAllocation;              // funds allocated to private presales and instituational investors\n', '\n', '  bool public isPublicTokenReleased = false;          // flag to track the release the public token\n', '\n', '  // addresses\n', '\n', '  address public founderMultiSigAddress;              // multi sign address of founders which hold\n', '  address public advisorAddress;                      //  advisor address which hold advisorsAllocation funds\n', '  address public vestingFounderAddress;               // address of founder that hold vestingFounderAllocation\n', '  address public crowdFundAddress;                    // address of crowdfund contract\n', '\n', '  // vesting period\n', '\n', '  uint256 public preAllocatedTokensVestingTime;       // crowdfund start time + 6 months\n', '\n', '  //events\n', '\n', '  event ChangeFoundersWalletAddress(uint256  _blockTimeStamp, address indexed _foundersWalletAddress);\n', '  event TransferPreAllocatedFunds(uint256  _blockTimeStamp , address _to , uint256 _value);\n', '  event PublicTokenReleased(uint256 _blockTimeStamp);\n', '\n', '  //modifiers\n', '\n', '  modifier onlyCrowdFundAddress() {\n', '    require(msg.sender == crowdFundAddress);\n', '    _;\n', '  }\n', '\n', '  modifier nonZeroAddress(address _to) {\n', '    require(_to != 0x0);\n', '    _;\n', '  }\n', '\n', '  modifier onlyFounders() {\n', '    require(msg.sender == founderMultiSigAddress);\n', '    _;\n', '  }\n', '\n', '  modifier onlyVestingFounderAddress() {\n', '    require(msg.sender == vestingFounderAddress);\n', '    _;\n', '  }\n', '\n', '  modifier onlyAdvisorAddress() {\n', '    require(msg.sender == advisorAddress);\n', '    _;\n', '  }\n', '\n', '  modifier isPublicTokenNotReleased() {\n', '    require(isPublicTokenReleased == false);\n', '    _;\n', '  }\n', '\n', '\n', '  // creation of the token contract\n', '  function BiQToken (address _crowdFundAddress, address _founderMultiSigAddress, address _advisorAddress, address _vestingFounderAddress) {\n', '    crowdFundAddress = _crowdFundAddress;\n', '    founderMultiSigAddress = _founderMultiSigAddress;\n', '    vestingFounderAddress = _vestingFounderAddress;\n', '    advisorAddress = _advisorAddress;\n', '\n', '    // Token Distribution\n', '    vestingFounderAllocation = 18 * 10 ** 25 ;        // 18 % allocation of totalSupply\n', '    keyEmployeesAllocatedFund = 2 * 10 ** 25 ;        // 2 % allocation of totalSupply\n', '    advisorsAllocation = 5 * 10 ** 25 ;               // 5 % allocation of totalSupply\n', '    tokensAllocatedToCrowdFund = 60 * 10 ** 25 ;      // 60 % allocation of totalSupply\n', '    marketIncentivesAllocation = 5 * 10 ** 25 ;       // 5 % allocation of totalSupply\n', '    saftInvestorAllocation = 10 * 10 ** 25 ;          // 10 % alloaction of totalSupply\n', '\n', '    // Assigned balances to respective stakeholders\n', '    balances[founderMultiSigAddress] = keyEmployeesAllocatedFund + saftInvestorAllocation;\n', '    balances[crowdFundAddress] = tokensAllocatedToCrowdFund;\n', '\n', '    totalAllocatedTokens = balances[founderMultiSigAddress];\n', '    preAllocatedTokensVestingTime = now + 180 * 1 days;                // it should be 6 months period for vesting\n', '  }\n', '\n', '  // function to keep track of the total token allocation\n', '  function changeTotalSupply(uint256 _amount) onlyCrowdFundAddress {\n', '    totalAllocatedTokens = totalAllocatedTokens.add(_amount);\n', '    tokensAllocatedToCrowdFund = tokensAllocatedToCrowdFund.sub(_amount);\n', '  }\n', '\n', '  // function to change founder multisig wallet address\n', '  function changeFounderMultiSigAddress(address _newFounderMultiSigAddress) onlyFounders nonZeroAddress(_newFounderMultiSigAddress) {\n', '    founderMultiSigAddress = _newFounderMultiSigAddress;\n', '    ChangeFoundersWalletAddress(now, founderMultiSigAddress);\n', '  }\n', '\n', '  // function for releasing the public tokens called once by the founder only\n', '  function releaseToken() onlyFounders isPublicTokenNotReleased {\n', '    isPublicTokenReleased = !isPublicTokenReleased;\n', '    PublicTokenReleased(now);\n', '  }\n', '\n', '  // function to transfer market Incentives fund\n', '  function transferMarketIncentivesFund(address _to, uint _value) onlyFounders nonZeroAddress(_to)  returns (bool) {\n', '    if (marketIncentivesAllocation >= _value) {\n', '      marketIncentivesAllocation = marketIncentivesAllocation.sub(_value);\n', '      balances[_to] = balances[_to].add(_value);\n', '      totalAllocatedTokens = totalAllocatedTokens.add(_value);\n', '      TransferPreAllocatedFunds(now, _to, _value);\n', '      return true;\n', '    }\n', '    return false;\n', '  }\n', '\n', '\n', '  // fund transferred to vesting Founders address after 6 months\n', '  function getVestedFounderTokens() onlyVestingFounderAddress returns (bool) {\n', '    if (now >= preAllocatedTokensVestingTime && vestingFounderAllocation > 0) {\n', '      balances[vestingFounderAddress] = balances[vestingFounderAddress].add(vestingFounderAllocation);\n', '      totalAllocatedTokens = totalAllocatedTokens.add(vestingFounderAllocation);\n', '      vestingFounderAllocation = 0;\n', '      TransferPreAllocatedFunds(now, vestingFounderAddress, vestingFounderAllocation);\n', '      return true;\n', '    }\n', '    return false;\n', '  }\n', '\n', '  // fund transferred to vesting advisor address after 6 months\n', '  function getVestedAdvisorTokens() onlyAdvisorAddress returns (bool) {\n', '    if (now >= preAllocatedTokensVestingTime && advisorsAllocation > 0) {\n', '      balances[advisorAddress] = balances[advisorAddress].add(advisorsAllocation);\n', '      totalAllocatedTokens = totalAllocatedTokens.add(advisorsAllocation);\n', '      advisorsAllocation = 0;\n', '      TransferPreAllocatedFunds(now, advisorAddress, advisorsAllocation);\n', '      return true;\n', '    } else {\n', '      return false;\n', '    }\n', '  }\n', '\n', '  // overloaded transfer function to restrict the investor to transfer the token before the ICO sale ends\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    if (msg.sender == crowdFundAddress) {\n', '      return super.transfer(_to,_value);\n', '    } else {\n', '      if (isPublicTokenReleased) {\n', '        return super.transfer(_to,_value);\n', '      }\n', '      return false;\n', '    }\n', '  }\n', '\n', '  // overloaded transferFrom function to restrict the investor to transfer the token before the ICO sale ends\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    if (msg.sender == crowdFundAddress) {\n', '      return super.transferFrom(_from, _to, _value);\n', '    } else {\n', '      if (isPublicTokenReleased) {\n', '        return super.transferFrom(_from, _to, _value);\n', '      }\n', '      return false;\n', '    }\n', '  }\n', '\n', '  // fallback function to restrict direct sending of ether\n', '  function () {\n', '    revert();\n', '  }\n', '\n', '}\n', '\n', 'contract BiQCrowdFund {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    BiQToken public token;                                 // Token contract reference\n', '\n', '    //variables\n', '    uint256 public crowdfundStartTime;                     // Starting time of CrowdFund\n', '    uint256 public crowdfundEndTime;                       // End time of Crowdfund\n', '    uint256 public totalWeiRaised = 0;                     // Counter to track the amount raised\n', '    uint256 public exchangeRate = 2307;                    // Calculated using priceOfEtherInUSD/priceOfBiQToken so 276.84/0.12\n', '    uint256 internal minAmount = 36.1219 * 10 ** 18;       // Calculated using 10k USD / 276.84 USD\n', '\n', '    bool public isCrowdFundActive = false;                 // Flag to track the crowdfund active or not\n', '    bool internal isTokenDeployed = false;                 // Flag to track the token deployment -- only can be set once\n', '    bool internal hasCrowdFundStarted = false;             // Flag to track if the crowdfund started\n', '\n', '    // addresses\n', '    address public founderMultiSigAddress;                 // Founders multisig address\n', '    address public remainingTokenHolder;                   // Address to hold the remaining tokens after crowdfund end\n', '    address public authorizerAddress;                      // Address of Authorizer who will authorize the investor\n', '\n', '    // mapping\n', '    mapping (address => uint256) auth;                     // KYC authentication\n', '\n', '    enum State { PreSale, CrowdFund }\n', '\n', '    //events\n', '    event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount);\n', '    event CrowdFundClosed(uint256 _blockTimeStamp);\n', '    event ChangeFoundersWalletAddress(uint256 _blockTimeStamp, address indexed _foundersWalletAddress);\n', '\n', '    //Modifiers\n', '    modifier tokenIsDeployed() {\n', '        require(isTokenDeployed == true);\n', '        _;\n', '    }\n', '     modifier nonZeroEth() {\n', '        require(msg.value > 0);\n', '        _;\n', '    }\n', '\n', '    modifier nonZeroAddress(address _to) {\n', '        require(_to != 0x0);\n', '        _;\n', '    }\n', '\n', '    modifier checkCrowdFundActive() {\n', '        require(isCrowdFundActive == true);\n', '        _;\n', '    }\n', '\n', '    modifier onlyFounders() {\n', '        require(msg.sender == founderMultiSigAddress);\n', '        _;\n', '    }\n', '\n', '    modifier onlyPublic() {\n', '        require(msg.sender != founderMultiSigAddress);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAuthorizer() {\n', '        require(msg.sender == authorizerAddress);\n', '        _;\n', '    }\n', '\n', '\n', '    modifier inState(State state) {\n', '        require(getState() == state);\n', '        _;\n', '    }\n', '\n', '    // Constructor to initialize the local variables\n', '    function BiQCrowdFund (address _founderWalletAddress, address _remainingTokenHolder, address _authorizerAddress) {\n', '        founderMultiSigAddress = _founderWalletAddress;\n', '        remainingTokenHolder = _remainingTokenHolder;\n', '        authorizerAddress = _authorizerAddress;\n', '    }\n', '\n', '    // Function to change the founders multisig address\n', '    function setFounderMultiSigAddress(address _newFounderAddress) onlyFounders nonZeroAddress(_newFounderAddress) {\n', '        founderMultiSigAddress = _newFounderAddress;\n', '        ChangeFoundersWalletAddress(now, founderMultiSigAddress);\n', '    }\n', '\n', '     function setAuthorizerAddress(address _newAuthorizerAddress) onlyFounders nonZeroAddress(_newAuthorizerAddress) {\n', '        authorizerAddress = _newAuthorizerAddress;\n', '    }\n', '\n', '     function setRemainingTokenHolder(address _newRemainingTokenHolder) onlyFounders nonZeroAddress(_newRemainingTokenHolder) {\n', '        remainingTokenHolder = _newRemainingTokenHolder;\n', '    }\n', '\n', '    // Attach the token contract, can only be done once\n', '    function setTokenAddress(address _tokenAddress) onlyFounders nonZeroAddress(_tokenAddress) {\n', '        require(isTokenDeployed == false);\n', '        token = BiQToken(_tokenAddress);\n', '        isTokenDeployed = true;\n', '    }\n', '\n', '    // change the state of crowdfund\n', '    function changeCrowdfundState() tokenIsDeployed onlyFounders inState(State.CrowdFund) {\n', '        isCrowdFundActive = !isCrowdFundActive;\n', '    }\n', '\n', '    // for KYC/AML\n', '    function authorize(address _to, uint256 max_amount) onlyAuthorizer {\n', '        auth[_to] = max_amount * 1 ether;\n', '    }\n', '\n', '    // Buy token function call only in duration of crowdfund active\n', '    function buyTokens(address beneficiary) nonZeroEth tokenIsDeployed onlyPublic nonZeroAddress(beneficiary) payable returns(bool) {\n', '        // Only allow a certain amount for every investor\n', '        if (auth[beneficiary] < msg.value) {\n', '            revert();\n', '        }\n', '        auth[beneficiary] = auth[beneficiary].sub(msg.value);\n', '\n', '        if (getState() == State.PreSale) {\n', '            if (buyPreSaleTokens(beneficiary)) {\n', '                return true;\n', '            }\n', '            revert();\n', '        } else {\n', '            require(now < crowdfundEndTime && isCrowdFundActive);\n', '            fundTransfer(msg.value);\n', '\n', '            uint256 amount = getNoOfTokens(exchangeRate, msg.value);\n', '\n', '            if (token.transfer(beneficiary, amount)) {\n', '                token.changeTotalSupply(amount);\n', '                totalWeiRaised = totalWeiRaised.add(msg.value);\n', '                TokenPurchase(beneficiary, msg.value, amount);\n', '                return true;\n', '            }\n', '            revert();\n', '        }\n', '\n', '    }\n', '\n', '    // function to transfer the funds to founders account\n', '    function fundTransfer(uint256 weiAmount) internal {\n', '        founderMultiSigAddress.transfer(weiAmount);\n', '    }\n', '\n', '    ///////////////////////////////////// Constant Functions /////////////////////////////////////\n', '\n', '    // function to get the current state of the crowdsale\n', '   function getState() public constant returns(State) {\n', '        if (!isCrowdFundActive && !hasCrowdFundStarted) {\n', '            return State.PreSale;\n', '        }\n', '        return State.CrowdFund;\n', '   }\n', '\n', '    // To get the authorized amount corresponding to an address\n', '   function getPreAuthorizedAmount(address _address) constant returns(uint256) {\n', '        return auth[_address];\n', '   }\n', '\n', '   // get the amount of tokens a user would receive for a specific amount of ether\n', '   function calculateTotalTokenPerContribution(uint256 _totalETHContribution) public constant returns(uint256) {\n', '       if (getState() == State.PreSale) {\n', '           return getTokensForPreSale(exchangeRate, _totalETHContribution * 1 ether).div(10 ** 18);\n', '       }\n', '       return getNoOfTokens(exchangeRate, _totalETHContribution);\n', '   }\n', '\n', '    // provides the bonus %\n', '    function currentBonus(uint256 _ethContribution) public constant returns (uint8) {\n', '        if (getState() == State.PreSale) {\n', '            return getPreSaleBonusRate(_ethContribution * 1 ether);\n', '        }\n', '        return getCurrentBonusRate();\n', '    }\n', '\n', '\n', '///////////////////////////////////// Presale Functions /////////////////////////////////////\n', '    // function to buy the tokens at presale with minimum investment = 10k USD\n', '    function buyPreSaleTokens(address beneficiary) internal returns(bool) {\n', '       // check the minimum investment should be 10k USD\n', '        if (msg.value < minAmount) {\n', '          revert();\n', '        } else {\n', '            fundTransfer(msg.value);\n', '            uint256 amount = getTokensForPreSale(exchangeRate, msg.value);\n', '\n', '            if (token.transfer(beneficiary, amount)) {\n', '                token.changeTotalSupply(amount);\n', '                totalWeiRaised = totalWeiRaised.add(msg.value);\n', '                TokenPurchase(beneficiary, msg.value, amount);\n', '                return true;\n', '            }\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // function calculate the total no of tokens with bonus multiplication in the duration of presale\n', '    function getTokensForPreSale(uint256 _exchangeRate, uint256 _amount) internal returns (uint256) {\n', '        uint256 noOfToken = _amount.mul(_exchangeRate);\n', '        uint256 preSaleTokenQuantity = ((100 + getPreSaleBonusRate(_amount)) * noOfToken ).div(100);\n', '        return preSaleTokenQuantity;\n', '    }\n', '\n', '    function getPreSaleBonusRate(uint256 _ethAmount) internal returns (uint8) {\n', '        if ( _ethAmount >= minAmount.mul(5) && _ethAmount < minAmount.mul(10)) {\n', '            return 30;\n', '        }\n', '        if (_ethAmount >= minAmount.mul(10)) {\n', '            return 35;\n', '        }\n', '        if (_ethAmount >= minAmount) {\n', '            return 25;\n', '        }\n', '    }\n', '///////////////////////////////////// Crowdfund Functions /////////////////////////////////////\n', '\n', '    // Starts the crowdfund, can only be called once\n', '    function startCrowdfund(uint256 _exchangeRate) onlyFounders tokenIsDeployed inState(State.PreSale) {\n', '        if (_exchangeRate > 0 && !hasCrowdFundStarted) {\n', '            exchangeRate = _exchangeRate;\n', '            crowdfundStartTime = now;\n', '            crowdfundEndTime = crowdfundStartTime + 5 * 1 weeks; // end date is 5 weeks after the starting date\n', '            isCrowdFundActive = !isCrowdFundActive;\n', '            hasCrowdFundStarted = !hasCrowdFundStarted;\n', '        } else {\n', '            revert();\n', '        }\n', '    }\n', '\n', '    // function call after crowdFundEndTime.\n', '    // It transfers the remaining tokens to remainingTokenHolder address\n', '    function endCrowdfund() onlyFounders returns (bool) {\n', '        require(now > crowdfundEndTime);\n', '        uint256 remainingToken = token.balanceOf(this);  // remaining tokens\n', '\n', '        if (remainingToken != 0 && token.transfer(remainingTokenHolder, remainingToken)) {\n', '          return true;\n', '        } else {\n', '            return false;\n', '        }\n', '        CrowdFundClosed(now);\n', '    }\n', '\n', '   // function to calculate the total no of tokens with bonus multiplication\n', '    function getNoOfTokens(uint256 _exchangeRate, uint256 _amount) internal returns (uint256) {\n', '         uint256 noOfToken = _amount.mul(_exchangeRate);\n', '         uint256 noOfTokenWithBonus = ((100 + getCurrentBonusRate()) * noOfToken).div(100);\n', '         return noOfTokenWithBonus;\n', '    }\n', '\n', '    // function provide the current bonus rate\n', '    function getCurrentBonusRate() internal returns (uint8) {\n', '        if (now > crowdfundStartTime + 4 weeks) {\n', '            return 0;\n', '        }\n', '        if (now > crowdfundStartTime + 3 weeks) {\n', '            return 5;\n', '        }\n', '        if (now > crowdfundStartTime + 2 weeks) {\n', '            return 10;\n', '        }\n', '        if (now > crowdfundStartTime + 1 weeks) {\n', '            return 15;\n', '        }\n', '        if (now > crowdfundStartTime) {\n', '            return 20;\n', '        }\n', '    }\n', '\n', '    // Crowdfund entry\n', '    // send ether to the contract address\n', '    // With at least 200 000 gas\n', '    function() public payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '}']
