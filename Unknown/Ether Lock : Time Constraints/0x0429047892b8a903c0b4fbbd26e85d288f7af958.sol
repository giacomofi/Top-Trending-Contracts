['pragma solidity ^0.4.10;\n', '\n', '/* taking ideas from FirstBlood token */\n', 'contract SafeMath {\n', '\n', '    /* function assert(bool assertion) internal { */\n', '    /*   if (!assertion) { */\n', '    /*     throw; */\n', '    /*   } */\n', '    /* }      // assert no longer needed once solidity is on 0.4.10 */\n', '\n', '    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x + y;\n', '      assert((z >= x) && (z >= y));\n', '      return z;\n', '    }\n', '\n', '    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\n', '      assert(x >= y);\n', '      uint256 z = x - y;\n', '      return z;\n', '    }\n', '\n', '    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x * y;\n', '      assert((x == 0)||(z/x == y));\n', '      return z;\n', '    }\n', '\n', '}\n', '\n', 'contract Token {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '/*  ERC 20 token */\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '      if (balances[msg.sender] >= _value && _value > 0) {\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract FakeToken is StandardToken, SafeMath {\n', '\n', '    // metadata\n', '    string public constant name = "Fake Token";\n', '    string public constant symbol = "FTK";\n', '    uint256 public constant decimals = 18;\n', '    string public version = "1.0";\n', '\n', '    // contracts\n', '    address public ethFundDeposit;      // deposit address for ETH\n', '\n', '    // crowdsale parameters\n', '    bool public isFinalized;              // switched to true in operational state\n', '    uint256 public fundingStartBlock;\n', '    uint256 public fundingEndBlock;\n', '    uint256 public constant tokenExchangeRate = 1000; // 6400 tokens per 1 ETH\n', '\n', '    // constructor\n', '    function FakeToken(\n', '        address _owner,\n', '        uint256 _fundingStartBlock,\n', '        uint256 _fundingEndBlock)\n', '    {\n', '      isFinalized = false;                   //controls pre through crowdsale state\n', '      ethFundDeposit = _owner;\n', '      fundingStartBlock = _fundingStartBlock;\n', '      fundingEndBlock = _fundingEndBlock;\n', '      totalSupply = 0;\n', '    }\n', '\n', '    /// @dev Accepts ether and creates new BAT tokens.\n', '    function () payable external {\n', '      require (block.number >= fundingStartBlock);\n', '      require (block.number <= fundingEndBlock);\n', '      if (msg.value == 0) throw;\n', '\n', "      uint256 tokens = safeMult(msg.value, tokenExchangeRate); // check that we're not over totals\n", '      uint256 checkedSupply = safeAdd(totalSupply, tokens);\n', '      Transfer(0, msg.sender, tokens);\n', '      totalSupply = checkedSupply;\n', '      balances[msg.sender] += tokens;  // safeAdd not needed; bad semantics to use here\n', '    }\n', '\n', '    function changeStartBlock(uint256 blockNumberChanged) external{\n', '        fundingStartBlock = blockNumberChanged;\n', '        fundingEndBlock = blockNumberChanged;\n', '    }\n', '\n', '    /// @dev Ends the funding period and sends the ETH home\n', '    function finalize() external {\n', '      if (msg.sender != ethFundDeposit) throw; // locks finalize to the ultimate ETH owner\n', '      if(!ethFundDeposit.send(this.balance)) throw;  // send the eth to Brave International\n', '    }\n', '}']