['pragma solidity ^0.4.4;\n', '\n', '// TGE (ICO) Proxy\n', 'contract TgeProxy {\n', '\n', '  address[] public managers;\n', '  mapping (address => address) votesAddr;\n', '\n', '  bool locked = false;\n', '\n', '  function TgeProxy() {\n', '    // any number of managers can be added in constructor\n', '    managers.push(0xCE05A8Aa56E1054FAFC214788246707F5258c0Ae);\n', '    managers.push(0xBb62A710BDbEAF1d3AD417A222d1ab6eD08C37f5);\n', '    managers.push(0x009A55A3c16953A359484afD299ebdC444200EdB);\n', '  }\n', '\n', '  // gateway for tge contributions\n', '  // this function will start accepting ETH, when ico/tge address\n', '  // will be confirmed by all contract managers\n', '  function() payable isLocked {\n', '    votesAddr[managers[0]].transfer(msg.value);\n', '  }\n', '\n', '  // this function allows ico/tge manager to set final ico/tge address\n', '  // it can be overwritten until contract address is locked\n', '  function setTgeAddr(address addr) isManager isUnlocked {\n', '    votesAddr[msg.sender] = addr;\n', '    lockAttemp();\n', '  }\n', '  \n', '  function lockAttemp() private {\n', '    address addr = votesAddr[managers[0]];\n', '    bool lock = true;\n', '    for (uint8 i = 0; i < managers.length; ++i) {\n', '      if (votesAddr[managers[i]] == 0x0) {\n', '        lock = false;\n', '        break;\n', '      }\n', '      if (votesAddr[managers[i]] != addr) {\n', '        lock = false;\n', '        break;\n', '      }\n', '    }\n', '    if (lock) {\n', '      locked = true;\n', '    }\n', '  }\n', '  \n', '  // only for contract managers\n', '  modifier isManager() {\n', '    for (uint8 i = 0; i < managers.length; ++i) {\n', '      if (managers[i] == msg.sender) {\n', '        _;\n', '      }\n', '    }\n', '  }\n', '\n', '  // run code only in unlocked mode\n', '  modifier isUnlocked() {\n', '    assert(!locked);\n', '    _;\n', '  }\n', '\n', '  // run code only when tge address is locked\n', '  modifier isLocked() {\n', '    assert(locked);\n', '    _;\n', '  }\n', '  \n', '}']