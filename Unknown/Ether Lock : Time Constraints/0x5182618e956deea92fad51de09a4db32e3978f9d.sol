['pragma solidity ^0.4.16;        \n', '   \n', '  contract CentraSale { \n', '\n', '    using SafeMath for uint; \n', '\n', '    address public contract_address = 0x96a65609a7b84e8842732deb08f56c3e21ac6f8a; \n', '\n', '    address public owner;\n', '    uint public cap;\n', '    uint public constant cap_max = 170000*10**18;\n', '    uint public constant min_value = 10**18*1/10; \n', '    uint public operation;\n', '    mapping(uint => address) public operation_address;\n', '    mapping(uint => uint) public operation_amount;\n', '\n', '    uint256 public constant token_price = 10**18*1/200;  \n', '    uint256 public tokens_total;  \n', '\n', '    uint public constant contract_start = 1505844000;\n', '    uint public constant contract_finish = 1507269600;\n', '\n', '    uint public constant card_titanium_minamount = 500*10**18;\n', '    uint public constant card_titanium_first = 200000;\n', '    mapping(address => uint) cards_titanium_check; \n', '    address[] public cards_titanium;\n', '\n', '    uint public constant card_black_minamount = 100*10**18;\n', '    uint public constant card_black_first = 500000;\n', '    mapping(address => uint) public cards_black_check; \n', '    address[] public cards_black;\n', '\n', '    uint public constant card_metal_minamount = 40*10**18;\n', '    uint public constant card_metal_first = 750000;\n', '    mapping(address => uint) cards_metal_check; \n', '    address[] public cards_metal;      \n', '\n', '    uint public constant card_gold_minamount = 30*10**18;\n', '    uint public constant card_gold_first = 1000000;\n', '    mapping(address => uint) cards_gold_check; \n', '    address[] public cards_gold;      \n', '\n', '    uint public constant card_blue_minamount = 5/10*10**18;\n', '    uint public constant card_blue_first = 100000000;\n', '    mapping(address => uint) cards_blue_check; \n', '    address[] public cards_blue;\n', '\n', '    uint public constant card_start_minamount = 1/10*10**18;\n', '    uint public constant card_start_first = 100000000;\n', '    mapping(address => uint) cards_start_check; \n', '    address[] public cards_start;\n', '      \n', '   \n', '    // Functions with this modifier can only be executed by the owner\n', '    modifier onlyOwner() {\n', '        if (msg.sender != owner) {\n', '            throw;\n', '        }\n', '        _;\n', '    }      \n', ' \n', '    // Constructor\n', '    function CentraSale() {\n', '        owner = msg.sender; \n', '        operation = 0; \n', '        cap = 0;        \n', '    }\n', '      \n', '    //default function for crowdfunding\n', '    function() payable {    \n', '\n', '      if(!(msg.value >= min_value)) throw;\n', '      if(now < contract_start) throw;\n', '      if(now > contract_finish) throw;                     \n', '\n', '      //if(cap + msg.value > cap_max) throw;         \n', '\n', '      tokens_total = msg.value*10**18/token_price;\n', '      if(!(tokens_total > 0)) throw;           \n', '\n', '      if(!contract_transfer(tokens_total)) throw;\n', '\n', '      cap = cap.add(msg.value); \n', '      operations();\n', '      get_card();\n', '      owner.send(this.balance);\n', '    }\n', '\n', '    //Contract execute\n', '    function contract_transfer(uint _amount) private returns (bool) {      \n', '\n', '      if(!contract_address.call(bytes4(sha3("transfer(address,uint256)")),msg.sender,_amount)) {    \n', '        return false;\n', '      }\n', '      return true;\n', '    } \n', '\n', '    //Update operations\n', '    function operations() private returns (bool) {\n', '        operation_address[operation] = msg.sender;\n', '        operation_amount[operation] = msg.value;        \n', '        operation = operation.add(1);        \n', '        return true;\n', '    }    \n', '\n', '    //Withdraw money from contract balance to owner\n', '    function withdraw() onlyOwner returns (bool result) {\n', '        owner.send(this.balance);\n', '        return true;\n', '    }\n', '\n', '    //get total titanium cards\n', '    function cards_titanium_total() constant returns (uint) { \n', '      return cards_titanium.length;\n', '    }  \n', '    //get total black cards\n', '    function cards_black_total() constant returns (uint) { \n', '      return cards_black.length;\n', '    }\n', '    //get total metal cards\n', '    function cards_metal_total() constant returns (uint) { \n', '      return cards_metal.length;\n', '    }        \n', '    //get total gold cards\n', '    function cards_gold_total() constant returns (uint) { \n', '      return cards_gold.length;\n', '    }        \n', '    //get total blue cards\n', '    function cards_blue_total() constant returns (uint) { \n', '      return cards_blue.length;\n', '    }\n', '\n', '    //get total start cards\n', '    function cards_start_total() constant returns (uint) { \n', '      return cards_start.length;\n', '    }\n', '\n', '    /*\n', '    * User get card(titanium, black, gold metal, gold and other), if amount eth sufficient for this.\n', '    */\n', '    function get_card() private returns (bool) {\n', '\n', '      if((msg.value >= card_titanium_minamount)\n', '        &&(cards_titanium.length < card_titanium_first)\n', '        &&(cards_titanium_check[msg.sender] != 1)\n', '        ) {\n', '        cards_titanium.push(msg.sender);\n', '        cards_titanium_check[msg.sender] = 1;\n', '      }\n', '\n', '      if((msg.value >= card_black_minamount)\n', '        &&(msg.value < card_titanium_minamount)\n', '        &&(cards_black.length < card_black_first)\n', '        &&(cards_black_check[msg.sender] != 1)\n', '        ) {\n', '        cards_black.push(msg.sender);\n', '        cards_black_check[msg.sender] = 1;\n', '      }                \n', '\n', '      if((msg.value >= card_metal_minamount)\n', '        &&(msg.value < card_black_minamount)\n', '        &&(cards_metal.length < card_metal_first)\n', '        &&(cards_metal_check[msg.sender] != 1)\n', '        ) {\n', '        cards_metal.push(msg.sender);\n', '        cards_metal_check[msg.sender] = 1;\n', '      }               \n', '\n', '      if((msg.value >= card_gold_minamount)\n', '        &&(msg.value < card_metal_minamount)\n', '        &&(cards_gold.length < card_gold_first)\n', '        &&(cards_gold_check[msg.sender] != 1)\n', '        ) {\n', '        cards_gold.push(msg.sender);\n', '        cards_gold_check[msg.sender] = 1;\n', '      }               \n', '\n', '      if((msg.value >= card_blue_minamount)\n', '        &&(msg.value < card_gold_minamount)\n', '        &&(cards_blue.length < card_blue_first)\n', '        &&(cards_blue_check[msg.sender] != 1)\n', '        ) {\n', '        cards_blue.push(msg.sender);\n', '        cards_blue_check[msg.sender] = 1;\n', '      }\n', '\n', '      if((msg.value >= card_start_minamount)\n', '        &&(msg.value < card_blue_minamount)\n', '        &&(cards_start.length < card_start_first)\n', '        &&(cards_start_check[msg.sender] != 1)\n', '        ) {\n', '        cards_start.push(msg.sender);\n', '        cards_start_check[msg.sender] = 1;\n', '      }\n', '\n', '      return true;\n', '    }    \n', '      \n', ' }\n', '\n', ' /**\n', '   * Math operations with safety checks\n', '   */\n', '  library SafeMath {\n', '    function mul(uint a, uint b) internal returns (uint) {\n', '      uint c = a * b;\n', '      assert(a == 0 || c / a == b);\n', '      return c;\n', '    }\n', '\n', '    function div(uint a, uint b) internal returns (uint) {\n', '      // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '      uint c = a / b;\n', '      // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '      return c;\n', '    }\n', '\n', '    function sub(uint a, uint b) internal returns (uint) {\n', '      assert(b <= a);\n', '      return a - b;\n', '    }\n', '\n', '    function add(uint a, uint b) internal returns (uint) {\n', '      uint c = a + b;\n', '      assert(c >= a);\n', '      return c;\n', '    }\n', '\n', '    function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '      return a >= b ? a : b;\n', '    }\n', '\n', '    function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '      return a < b ? a : b;\n', '    }\n', '\n', '    function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '      return a >= b ? a : b;\n', '    }\n', '\n', '    function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '      return a < b ? a : b;\n', '    }\n', '\n', '    function assert(bool assertion) internal {\n', '      if (!assertion) {\n', '        throw;\n', '      }\n', '    }\n', '  }']