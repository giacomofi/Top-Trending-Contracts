['pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'contract SafeMath {\n', '\n', '    uint constant DAY_IN_SECONDS = 86400;\n', '    uint constant BASE = 1000000000000000000;\n', '    uint constant preIcoPrice = 4101;\n', '    uint constant icoPrice = 2255;\n', '\n', '    function mul(uint256 a, uint256 b) constant internal returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) constant internal returns (uint256) {\n', '        assert(b != 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) constant internal returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) constant internal returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function mulByFraction(uint256 number, uint256 numerator, uint256 denominator) internal returns (uint256) {\n', '        return div(mul(number, numerator), denominator);\n', '    }\n', '\n', '    // presale volume bonus calculation \n', '    function presaleVolumeBonus(uint256 price) internal returns (uint256) {\n', '\n', '        // preCTX > ETH\n', '        uint256 val = div(price, preIcoPrice);\n', '\n', '        if(val >= 100 * BASE) return add(price, price * 1/20); // 5%\n', '        if(val >= 50 * BASE) return add(price, price * 3/100); // 3%\n', '        if(val >= 20 * BASE) return add(price, price * 1/50);  // 2%\n', '\n', '        return price;\n', '    }\n', '\n', '\t// ICO volume bonus calculation \n', '    function volumeBonus(uint256 etherValue) internal returns (uint256) {\n', '\t\t\n', '        if(etherValue >= 1000000000000000000000) return 15;// +15% tokens\n', '        if(etherValue >=  500000000000000000000) return 10; // +10% tokens\n', '        if(etherValue >=  300000000000000000000) return 7;  // +7% tokens\n', '        if(etherValue >=  100000000000000000000) return 5;  // +5% tokens\n', '        if(etherValue >=   50000000000000000000) return 3;   // +3% tokens\n', '        if(etherValue >=   20000000000000000000) return 2;   // +2% tokens\n', '\n', '        return 0;\n', '    }\n', '\n', '\t// ICO date bonus calculation \n', '    function dateBonus(uint startIco) internal returns (uint256) {\n', '\n', '        // day from ICO start\n', '        uint daysFromStart = (now - startIco) / DAY_IN_SECONDS + 1;\n', '\n', '        if(daysFromStart == 1) return 15; // +15% tokens\n', '        if(daysFromStart == 2) return 10; // +10% tokens\n', '        if(daysFromStart == 3) return 10; // +10% tokens\n', '        if(daysFromStart == 4) return 5;  // +5% tokens\n', '        if(daysFromStart == 5) return 5;  // +5% tokens\n', '        if(daysFromStart == 6) return 5;  // +5% tokens\n', '\n', '\t\t// no discount\n', '        return 0;\n', '    }\n', '\n', '}\n', '\n', '\n', '/// Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\n', '/// @title Abstract token contract - Functions to be implemented by token contracts.\n', '\n', 'contract AbstractToken {\n', '    // This is not an abstract function, because solc won&#39;t recognize generated getter functions for public variables as functions\n', '    function totalSupply() constant returns (uint256) {}\n', '    function balanceOf(address owner) constant returns (uint256 balance);\n', '    function transfer(address to, uint256 value) returns (bool success);\n', '    function transferFrom(address from, address to, uint256 value) returns (bool success);\n', '    function approve(address spender, uint256 value) returns (bool success);\n', '    function allowance(address owner, address spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Issuance(address indexed to, uint256 value);\n', '}\n', '\n', 'contract StandardToken is AbstractToken {\n', '    /*\n', '     *  Data structures\n', '     */\n', '    mapping (address => uint256) balances;\n', '    mapping (address => bool) ownerAppended;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalSupply;\n', '    address[] public owners;\n', '\n', '    /*\n', '     *  Read and write storage functions\n', '     */\n', '    /// @dev Transfers sender&#39;s tokens to a given address. Returns success.\n', '    /// @param _to Address of token receiver.\n', '    /// @param _value Number of tokens to transfer.\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            if(!ownerAppended[_to]) {\n', '                ownerAppended[_to] = true;\n', '                owners.push(_to);\n', '            }\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '        else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\n', '    /// @param _from Address from where tokens are withdrawn.\n', '    /// @param _to Address to where tokens are sent.\n', '    /// @param _value Number of tokens to transfer.\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            if(!ownerAppended[_to]) {\n', '                ownerAppended[_to] = true;\n', '                owners.push(_to);\n', '            }\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        }\n', '        else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns number of tokens owned by given address.\n', '    /// @param _owner Address of token owner.\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /// @dev Sets approved amount of tokens for spender. Returns success.\n', '    /// @param _spender Address of allowed account.\n', '    /// @param _value Number of approved tokens.\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /*\n', '     * Read storage functions\n', '     */\n', '    /// @dev Returns number of allowed tokens for given address.\n', '    /// @param _owner Address of token owner.\n', '    /// @param _spender Address of token spender.\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract CarTaxiToken is StandardToken, SafeMath {\n', '    /*\n', '     * Token meta data\n', '     */\n', '    string public constant name = "CarTaxi";\n', '    string public constant symbol = "CTX";\n', '    uint public constant decimals = 18;\n', '\n', '    // tottal supply\n', '\n', '    address public icoContract = 0x0;\n', '    /*\n', '     * Modifiers\n', '     */\n', '\n', '    modifier onlyIcoContract() {\n', '        // only ICO contract is allowed to proceed\n', '        require(msg.sender == icoContract);\n', '        _;\n', '    }\n', '\n', '    /*\n', '     * Contract functions\n', '     */\n', '\n', '    /// @dev Contract is needed in icoContract address\n', '    /// @param _icoContract Address of account which will be mint tokens\n', '    function CarTaxiToken(address _icoContract) {\n', '        assert(_icoContract != 0x0);\n', '        icoContract = _icoContract;\n', '    }\n', '\n', '    /// @dev Burns tokens from address. It&#39;s can be applied by account with address this.icoContract\n', '    /// @param _from Address of account, from which will be burned tokens\n', '    /// @param _value Amount of tokens, that will be burned\n', '    function burnTokens(address _from, uint _value) onlyIcoContract {\n', '        assert(_from != 0x0);\n', '        require(_value > 0);\n', '\n', '        balances[_from] = sub(balances[_from], _value);\n', '    }\n', '\n', '    /// @dev Adds tokens to address. It&#39;s can be applied by account with address this.icoContract\n', '    /// @param _to Address of account to which the tokens will pass\n', '    /// @param _value Amount of tokens\n', '    function emitTokens(address _to, uint _value) onlyIcoContract {\n', '        assert(_to != 0x0);\n', '        require(_value > 0);\n', '\n', '        balances[_to] = add(balances[_to], _value);\n', '\n', '        if(!ownerAppended[_to]) {\n', '            ownerAppended[_to] = true;\n', '            owners.push(_to);\n', '        }\n', '\n', '    }\n', '\n', '    function getOwner(uint index) constant returns (address, uint256) {\n', '        return (owners[index], balances[owners[index]]);\n', '    }\n', '\n', '    function getOwnerCount() constant returns (uint) {\n', '        return owners.length;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'contract SafeMath {\n', '\n', '    uint constant DAY_IN_SECONDS = 86400;\n', '    uint constant BASE = 1000000000000000000;\n', '    uint constant preIcoPrice = 4101;\n', '    uint constant icoPrice = 2255;\n', '\n', '    function mul(uint256 a, uint256 b) constant internal returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) constant internal returns (uint256) {\n', '        assert(b != 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) constant internal returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) constant internal returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function mulByFraction(uint256 number, uint256 numerator, uint256 denominator) internal returns (uint256) {\n', '        return div(mul(number, numerator), denominator);\n', '    }\n', '\n', '    // presale volume bonus calculation \n', '    function presaleVolumeBonus(uint256 price) internal returns (uint256) {\n', '\n', '        // preCTX > ETH\n', '        uint256 val = div(price, preIcoPrice);\n', '\n', '        if(val >= 100 * BASE) return add(price, price * 1/20); // 5%\n', '        if(val >= 50 * BASE) return add(price, price * 3/100); // 3%\n', '        if(val >= 20 * BASE) return add(price, price * 1/50);  // 2%\n', '\n', '        return price;\n', '    }\n', '\n', '\t// ICO volume bonus calculation \n', '    function volumeBonus(uint256 etherValue) internal returns (uint256) {\n', '\t\t\n', '        if(etherValue >= 1000000000000000000000) return 15;// +15% tokens\n', '        if(etherValue >=  500000000000000000000) return 10; // +10% tokens\n', '        if(etherValue >=  300000000000000000000) return 7;  // +7% tokens\n', '        if(etherValue >=  100000000000000000000) return 5;  // +5% tokens\n', '        if(etherValue >=   50000000000000000000) return 3;   // +3% tokens\n', '        if(etherValue >=   20000000000000000000) return 2;   // +2% tokens\n', '\n', '        return 0;\n', '    }\n', '\n', '\t// ICO date bonus calculation \n', '    function dateBonus(uint startIco) internal returns (uint256) {\n', '\n', '        // day from ICO start\n', '        uint daysFromStart = (now - startIco) / DAY_IN_SECONDS + 1;\n', '\n', '        if(daysFromStart == 1) return 15; // +15% tokens\n', '        if(daysFromStart == 2) return 10; // +10% tokens\n', '        if(daysFromStart == 3) return 10; // +10% tokens\n', '        if(daysFromStart == 4) return 5;  // +5% tokens\n', '        if(daysFromStart == 5) return 5;  // +5% tokens\n', '        if(daysFromStart == 6) return 5;  // +5% tokens\n', '\n', '\t\t// no discount\n', '        return 0;\n', '    }\n', '\n', '}\n', '\n', '\n', '/// Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20\n', '/// @title Abstract token contract - Functions to be implemented by token contracts.\n', '\n', 'contract AbstractToken {\n', "    // This is not an abstract function, because solc won't recognize generated getter functions for public variables as functions\n", '    function totalSupply() constant returns (uint256) {}\n', '    function balanceOf(address owner) constant returns (uint256 balance);\n', '    function transfer(address to, uint256 value) returns (bool success);\n', '    function transferFrom(address from, address to, uint256 value) returns (bool success);\n', '    function approve(address spender, uint256 value) returns (bool success);\n', '    function allowance(address owner, address spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Issuance(address indexed to, uint256 value);\n', '}\n', '\n', 'contract StandardToken is AbstractToken {\n', '    /*\n', '     *  Data structures\n', '     */\n', '    mapping (address => uint256) balances;\n', '    mapping (address => bool) ownerAppended;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalSupply;\n', '    address[] public owners;\n', '\n', '    /*\n', '     *  Read and write storage functions\n', '     */\n', "    /// @dev Transfers sender's tokens to a given address. Returns success.\n", '    /// @param _to Address of token receiver.\n', '    /// @param _value Number of tokens to transfer.\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            if(!ownerAppended[_to]) {\n', '                ownerAppended[_to] = true;\n', '                owners.push(_to);\n', '            }\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '        else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success.\n', '    /// @param _from Address from where tokens are withdrawn.\n', '    /// @param _to Address to where tokens are sent.\n', '    /// @param _value Number of tokens to transfer.\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            if(!ownerAppended[_to]) {\n', '                ownerAppended[_to] = true;\n', '                owners.push(_to);\n', '            }\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        }\n', '        else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns number of tokens owned by given address.\n', '    /// @param _owner Address of token owner.\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /// @dev Sets approved amount of tokens for spender. Returns success.\n', '    /// @param _spender Address of allowed account.\n', '    /// @param _value Number of approved tokens.\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /*\n', '     * Read storage functions\n', '     */\n', '    /// @dev Returns number of allowed tokens for given address.\n', '    /// @param _owner Address of token owner.\n', '    /// @param _spender Address of token spender.\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract CarTaxiToken is StandardToken, SafeMath {\n', '    /*\n', '     * Token meta data\n', '     */\n', '    string public constant name = "CarTaxi";\n', '    string public constant symbol = "CTX";\n', '    uint public constant decimals = 18;\n', '\n', '    // tottal supply\n', '\n', '    address public icoContract = 0x0;\n', '    /*\n', '     * Modifiers\n', '     */\n', '\n', '    modifier onlyIcoContract() {\n', '        // only ICO contract is allowed to proceed\n', '        require(msg.sender == icoContract);\n', '        _;\n', '    }\n', '\n', '    /*\n', '     * Contract functions\n', '     */\n', '\n', '    /// @dev Contract is needed in icoContract address\n', '    /// @param _icoContract Address of account which will be mint tokens\n', '    function CarTaxiToken(address _icoContract) {\n', '        assert(_icoContract != 0x0);\n', '        icoContract = _icoContract;\n', '    }\n', '\n', "    /// @dev Burns tokens from address. It's can be applied by account with address this.icoContract\n", '    /// @param _from Address of account, from which will be burned tokens\n', '    /// @param _value Amount of tokens, that will be burned\n', '    function burnTokens(address _from, uint _value) onlyIcoContract {\n', '        assert(_from != 0x0);\n', '        require(_value > 0);\n', '\n', '        balances[_from] = sub(balances[_from], _value);\n', '    }\n', '\n', "    /// @dev Adds tokens to address. It's can be applied by account with address this.icoContract\n", '    /// @param _to Address of account to which the tokens will pass\n', '    /// @param _value Amount of tokens\n', '    function emitTokens(address _to, uint _value) onlyIcoContract {\n', '        assert(_to != 0x0);\n', '        require(_value > 0);\n', '\n', '        balances[_to] = add(balances[_to], _value);\n', '\n', '        if(!ownerAppended[_to]) {\n', '            ownerAppended[_to] = true;\n', '            owners.push(_to);\n', '        }\n', '\n', '    }\n', '\n', '    function getOwner(uint index) constant returns (address, uint256) {\n', '        return (owners[index], balances[owners[index]]);\n', '    }\n', '\n', '    function getOwnerCount() constant returns (uint) {\n', '        return owners.length;\n', '    }\n', '\n', '}']
