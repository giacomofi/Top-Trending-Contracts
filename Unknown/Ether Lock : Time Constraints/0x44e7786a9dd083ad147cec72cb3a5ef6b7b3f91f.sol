['pragma solidity ^0.4.8;\n', ' \n', 'contract owned {\n', '\n', '  address public owner;\n', ' \n', '  function owned() { owner = msg.sender; }\n', '\n', '  modifier onlyOwner {\n', '    if (msg.sender != owner) { throw; }\n', '    _;\n', '  }\n', '\n', '  function changeOwner( address newowner ) onlyOwner {\n', '    owner = newowner;\n', '  }\n', '}\n', '\n', 'contract OX_TOKEN is owned {\n', ' \n', '  string public constant name = "OX";\n', '  string public constant symbol = "OX"; \n', ' \n', '  event Receipt( address indexed _to,\n', '                 uint _oxen,\n', '                 uint _paymentwei ); \n', '\n', '  event Transfer( address indexed _from,\n', '                  address indexed _to,\n', '                  uint _ox );\n', '\n', '  uint public starttime;\n', '  bool public expanded;\n', '  uint public inCirculation;\n', '  mapping( address => uint ) public oxen;\n', '\n', '  function OX_TOKEN() {\n', '    starttime = 0;\n', '    expanded = false;\n', '    inCirculation = 0;\n', '  }\n', '\n', '  function closedown() onlyOwner {\n', '    selfdestruct( owner );\n', '  }\n', '\n', '  function() payable {}\n', '\n', '  function withdraw( uint amount ) onlyOwner {\n', '    if (amount <= this.balance)\n', '      bool result = owner.send( amount );\n', '  }\n', '\n', '  function startSale() onlyOwner {\n', '    if (starttime != 0) return;\n', '\n', '    starttime = now; // now is block timestamp, units are unix-seconds\n', '\n', '    // allocate 2 for the org itself, so only 5 can be sold\n', '    inCirculation = 200000000;\n', '    oxen[OX_ORG] = inCirculation;\n', '    Transfer( OX_ORG, OX_ORG, inCirculation );\n', '  }\n', '\n', '  // TEST CODE ONLY\n', '  //function hack() { starttime = now - 32 days; }\n', '  //function setstart( uint newstart ) { starttime = newstart; }\n', '  //function gettime() constant returns (uint) { return now; }\n', '\n', '  function expand() {\n', '    if (expanded || saleOn()) { return; }\n', '\n', '    expanded = true;\n', '\n', '    // 1 / 0.7 = 1.428571..., ext is the number to add\n', '    uint ext = inCirculation * 1428571428 / 10**9 - inCirculation;\n', '    oxen[OX_ORG] += ext;\n', '    inCirculation += ext;\n', '    Transfer( this, OX_ORG, ext );\n', '  }\n', '\n', '  function buyOx() payable {\n', '\n', '    // min purchase .1 E = 10**17 wei\n', '    if (!saleOn() || msg.value < 10**17) {\n', '      throw; // returns customer&#39;s Ether and unused gas\n', '    }\n', '\n', '    // rate: 1 eth <==> 3000 ox\n', '    //\n', '    // to buy: msg.value * 3000 * (100 + bonus)\n', '    //         ---------          -------------\n', '    //          10**18                 100\n', '\n', '    uint tobuy = (msg.value * 3 * (100 + bonus())) / 10**17;\n', '\n', '    if (inCirculation + tobuy > 700000000) {\n', '      throw; // returns customer&#39;s Ether and unused gas\n', '    }\n', '\n', '    inCirculation += tobuy;\n', '    oxen[msg.sender] += tobuy;\n', '    Receipt( msg.sender, tobuy, msg.value );\n', '  }\n', '\n', '  function transfer( address to, uint ox ) {\n', '    if ( ox > oxen[msg.sender] || saleOn() ) {\n', '      return;\n', '    }\n', '\n', '    if (!expanded) { expand(); }\n', '\n', '    oxen[msg.sender] -= ox;\n', '    oxen[to] += ox;\n', '    Transfer( msg.sender, to, ox );\n', '  }\n', '\n', '  function saleOn() constant returns(bool) {\n', '    return now - starttime < 31 days;\n', '  }\n', '\n', '  function bonus() constant returns(uint) {\n', '    uint elapsed = now - starttime;\n', '\n', '    if (elapsed < 1 days) return 25;\n', '    if (elapsed < 1 weeks) return 20;\n', '    if (elapsed < 2 weeks) return 15;\n', '    if (elapsed < 3 weeks) return 10;\n', '    if (elapsed < 4 weeks) return 5;\n', '    return 0;\n', '  }\n', '\n', '  address public constant OX_ORG = 0x8f256c71a25344948777f333abd42f2b8f32be8e;\n', '  address public constant AUTHOR = 0x8e9342eb769c4039aaf33da739fb2fc8af9afdc1;\n', '}']
['pragma solidity ^0.4.8;\n', ' \n', 'contract owned {\n', '\n', '  address public owner;\n', ' \n', '  function owned() { owner = msg.sender; }\n', '\n', '  modifier onlyOwner {\n', '    if (msg.sender != owner) { throw; }\n', '    _;\n', '  }\n', '\n', '  function changeOwner( address newowner ) onlyOwner {\n', '    owner = newowner;\n', '  }\n', '}\n', '\n', 'contract OX_TOKEN is owned {\n', ' \n', '  string public constant name = "OX";\n', '  string public constant symbol = "OX"; \n', ' \n', '  event Receipt( address indexed _to,\n', '                 uint _oxen,\n', '                 uint _paymentwei ); \n', '\n', '  event Transfer( address indexed _from,\n', '                  address indexed _to,\n', '                  uint _ox );\n', '\n', '  uint public starttime;\n', '  bool public expanded;\n', '  uint public inCirculation;\n', '  mapping( address => uint ) public oxen;\n', '\n', '  function OX_TOKEN() {\n', '    starttime = 0;\n', '    expanded = false;\n', '    inCirculation = 0;\n', '  }\n', '\n', '  function closedown() onlyOwner {\n', '    selfdestruct( owner );\n', '  }\n', '\n', '  function() payable {}\n', '\n', '  function withdraw( uint amount ) onlyOwner {\n', '    if (amount <= this.balance)\n', '      bool result = owner.send( amount );\n', '  }\n', '\n', '  function startSale() onlyOwner {\n', '    if (starttime != 0) return;\n', '\n', '    starttime = now; // now is block timestamp, units are unix-seconds\n', '\n', '    // allocate 2 for the org itself, so only 5 can be sold\n', '    inCirculation = 200000000;\n', '    oxen[OX_ORG] = inCirculation;\n', '    Transfer( OX_ORG, OX_ORG, inCirculation );\n', '  }\n', '\n', '  // TEST CODE ONLY\n', '  //function hack() { starttime = now - 32 days; }\n', '  //function setstart( uint newstart ) { starttime = newstart; }\n', '  //function gettime() constant returns (uint) { return now; }\n', '\n', '  function expand() {\n', '    if (expanded || saleOn()) { return; }\n', '\n', '    expanded = true;\n', '\n', '    // 1 / 0.7 = 1.428571..., ext is the number to add\n', '    uint ext = inCirculation * 1428571428 / 10**9 - inCirculation;\n', '    oxen[OX_ORG] += ext;\n', '    inCirculation += ext;\n', '    Transfer( this, OX_ORG, ext );\n', '  }\n', '\n', '  function buyOx() payable {\n', '\n', '    // min purchase .1 E = 10**17 wei\n', '    if (!saleOn() || msg.value < 10**17) {\n', "      throw; // returns customer's Ether and unused gas\n", '    }\n', '\n', '    // rate: 1 eth <==> 3000 ox\n', '    //\n', '    // to buy: msg.value * 3000 * (100 + bonus)\n', '    //         ---------          -------------\n', '    //          10**18                 100\n', '\n', '    uint tobuy = (msg.value * 3 * (100 + bonus())) / 10**17;\n', '\n', '    if (inCirculation + tobuy > 700000000) {\n', "      throw; // returns customer's Ether and unused gas\n", '    }\n', '\n', '    inCirculation += tobuy;\n', '    oxen[msg.sender] += tobuy;\n', '    Receipt( msg.sender, tobuy, msg.value );\n', '  }\n', '\n', '  function transfer( address to, uint ox ) {\n', '    if ( ox > oxen[msg.sender] || saleOn() ) {\n', '      return;\n', '    }\n', '\n', '    if (!expanded) { expand(); }\n', '\n', '    oxen[msg.sender] -= ox;\n', '    oxen[to] += ox;\n', '    Transfer( msg.sender, to, ox );\n', '  }\n', '\n', '  function saleOn() constant returns(bool) {\n', '    return now - starttime < 31 days;\n', '  }\n', '\n', '  function bonus() constant returns(uint) {\n', '    uint elapsed = now - starttime;\n', '\n', '    if (elapsed < 1 days) return 25;\n', '    if (elapsed < 1 weeks) return 20;\n', '    if (elapsed < 2 weeks) return 15;\n', '    if (elapsed < 3 weeks) return 10;\n', '    if (elapsed < 4 weeks) return 5;\n', '    return 0;\n', '  }\n', '\n', '  address public constant OX_ORG = 0x8f256c71a25344948777f333abd42f2b8f32be8e;\n', '  address public constant AUTHOR = 0x8e9342eb769c4039aaf33da739fb2fc8af9afdc1;\n', '}']
