['pragma solidity ^0.4.13;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', 'contract CRCToken is StandardToken,Ownable{\n', '\t//the base info of the token \n', '\tstring public name;\n', '\tstring public symbol;\n', '\tstring public constant version = "1.0";\n', '\tuint256 public constant decimals = 18;\n', '\n', '\tuint256 public constant MAX_SUPPLY = 500000000 * 10**decimals;\n', '\tuint256 public constant quota = MAX_SUPPLY/100;\n', '\n', '\t//the percentage of all usages\n', '\tuint256 public constant allOfferingPercentage = 50;\n', '\tuint256 public constant teamKeepingPercentage = 15;\n', '\tuint256 public constant communityContributionPercentage = 35;\n', '\n', '\t//the quota of all usages\n', '\tuint256 public constant allOfferingQuota = quota*allOfferingPercentage;\n', '\tuint256 public constant teamKeepingQuota = quota*teamKeepingPercentage;\n', '\tuint256 public constant communityContributionQuota = quota*communityContributionPercentage;\n', '\n', '\t//the cap of diff offering channel\n', '\t//this percentage must less the the allOfferingPercentage\n', '\tuint256 public constant privateOfferingPercentage = 10;\n', '\tuint256 public constant privateOfferingCap = quota*privateOfferingPercentage;\n', '\n', '\t//diff rate of the diff offering channel\n', '\tuint256 public constant publicOfferingExchangeRate = 25000;\n', '\tuint256 public constant privateOfferingExchangeRate = 50000;\n', '\n', '\t//need to edit\n', '\taddress public etherProceedsAccount;\n', '\taddress public crcWithdrawAccount;\n', '\n', '\t//dependency on the start day\n', '\tuint256 public fundingStartBlock;\n', '\tuint256 public fundingEndBlock;\n', '\tuint256 public teamKeepingLockEndBlock ;\n', '\n', '\tuint256 public privateOfferingSupply;\n', '\tuint256 public allOfferingSupply;\n', '\tuint256 public teamWithdrawSupply;\n', '\tuint256 public communityContributionSupply;\n', '\n', '\n', '\n', '\t// bool public isFinalized;// switched to true in operational state\n', '\n', '\tevent CreateCRC(address indexed _to, uint256 _value);\n', '\n', '\t// uint256 public\n', '\n', '\tfunction CRCToken(){\n', '\t\tname = "CRCToken";\n', '\t\tsymbol ="CRC";\n', '\n', '\t\tetherProceedsAccount = 0x5390f9D18A7131aC9C532C1dcD1bEAb3e8A44cbF;\n', '\t\tcrcWithdrawAccount = 0xb353425bA4FE2670DaC1230da934498252E692bD;\n', '\n', '\t\tfundingStartBlock=4263161;\n', '\t\tfundingEndBlock=4313561;\n', '\t\tteamKeepingLockEndBlock=5577161;\n', '\n', '\t\ttotalSupply = 0 ;\n', '\t\tprivateOfferingSupply=0;\n', '\t\tallOfferingSupply=0;\n', '\t\tteamWithdrawSupply=0;\n', '\t\tcommunityContributionSupply=0;\n', '\t}\n', '\n', '\n', '\tmodifier beforeFundingStartBlock(){\n', '\t\tassert(getCurrentBlockNum() < fundingStartBlock);\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier notBeforeFundingStartBlock(){\n', '\t\tassert(getCurrentBlockNum() >= fundingStartBlock);\n', '\t\t_;\n', '\t}\n', '\tmodifier notAfterFundingEndBlock(){\n', '\t\tassert(getCurrentBlockNum() < fundingEndBlock);\n', '\t\t_;\n', '\t}\n', '\tmodifier notBeforeTeamKeepingLockEndBlock(){\n', '\t\tassert(getCurrentBlockNum() >= teamKeepingLockEndBlock);\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier totalSupplyNotReached(uint256 _ethContribution,uint rate){\n', '\t\tassert(totalSupply.add(_ethContribution.mul(rate)) <= MAX_SUPPLY);\n', '\t\t_;\n', '\t}\n', '\tmodifier allOfferingNotReached(uint256 _ethContribution,uint rate){\n', '\t\tassert(allOfferingSupply.add(_ethContribution.mul(rate)) <= allOfferingQuota);\n', '\t\t_;\n', '\t}\t \n', '\n', '\tmodifier privateOfferingCapNotReached(uint256 _ethContribution){\n', '\t\tassert(privateOfferingSupply.add(_ethContribution.mul(privateOfferingExchangeRate)) <= privateOfferingCap);\n', '\t\t_;\n', '\t}\t \n', '\t\n', '\n', '\tmodifier etherProceedsAccountOnly(){\n', '\t\tassert(msg.sender == getEtherProceedsAccount());\n', '\t\t_;\n', '\t}\n', '\tmodifier crcWithdrawAccountOnly(){\n', '\t\tassert(msg.sender == getCrcWithdrawAccount());\n', '\t\t_;\n', '\t}\n', '\n', '\n', '\n', '\n', '\tfunction processFunding(address receiver,uint256 _value,uint256 fundingRate) internal\n', '\t\ttotalSupplyNotReached(_value,fundingRate)\n', '\t\tallOfferingNotReached(_value,fundingRate)\n', '\n', '\t{\n', '\t\tuint256 tokenAmount = _value.mul(fundingRate);\n', '\t\ttotalSupply=totalSupply.add(tokenAmount);\n', '\t\tallOfferingSupply=allOfferingSupply.add(tokenAmount);\n', '\t\tbalances[receiver] += tokenAmount;  // safeAdd not needed; bad semantics to use here\n', '\t\tCreateCRC(receiver, tokenAmount);\t // logs token creation\n', '\t}\n', '\n', '\n', '\tfunction () payable external{\n', '\t\tif(getCurrentBlockNum()<=fundingStartBlock){\n', '\t\t\tprocessPrivateFunding(msg.sender);\n', '\t\t}else{\n', '\t\t\tprocessEthPulicFunding(msg.sender);\n', '\t\t}\n', '\n', '\n', '\t}\n', '\n', '\tfunction processEthPulicFunding(address receiver) internal\n', '\t notBeforeFundingStartBlock\n', '\t notAfterFundingEndBlock\n', '\t{\n', '\t\tprocessFunding(receiver,msg.value,publicOfferingExchangeRate);\n', '\t}\n', '\t\n', '\n', '\tfunction processPrivateFunding(address receiver) internal\n', '\t beforeFundingStartBlock\n', '\t privateOfferingCapNotReached(msg.value)\n', '\t{\n', '\t\tuint256 tokenAmount = msg.value.mul(privateOfferingExchangeRate);\n', '\t\tprivateOfferingSupply=privateOfferingSupply.add(tokenAmount);\n', '\t\tprocessFunding(receiver,msg.value,privateOfferingExchangeRate);\n', '\t}  \n', '\n', '\tfunction icoPlatformWithdraw(uint256 _value) external\n', '\t\tcrcWithdrawAccountOnly\n', '\t{\n', '\t\tprocessFunding(msg.sender,_value,1);\n', '\t}\n', '\n', '\tfunction teamKeepingWithdraw(uint256 tokenAmount) external\n', '\t   crcWithdrawAccountOnly\n', '\t   notBeforeTeamKeepingLockEndBlock\n', '\t{\n', '\t\tassert(teamWithdrawSupply.add(tokenAmount)<=teamKeepingQuota);\n', '\t\tassert(totalSupply.add(tokenAmount)<=MAX_SUPPLY);\n', '\t\tteamWithdrawSupply=teamWithdrawSupply.add(tokenAmount);\n', '\t\ttotalSupply=totalSupply.add(tokenAmount);\n', '\t\tbalances[msg.sender]+=tokenAmount;\n', '\t\tCreateCRC(msg.sender, tokenAmount);\n', '\t}\n', '\n', '\tfunction communityContributionWithdraw(uint256 tokenAmount) external\n', '\t    crcWithdrawAccountOnly\n', '\t{\n', '\t\tassert(communityContributionSupply.add(tokenAmount)<=communityContributionQuota);\n', '\t\tassert(totalSupply.add(tokenAmount)<=MAX_SUPPLY);\n', '\t\tcommunityContributionSupply=communityContributionSupply.add(tokenAmount);\n', '\t\ttotalSupply=totalSupply.add(tokenAmount);\n', '\t\tbalances[msg.sender] += tokenAmount;\n', '\t\tCreateCRC(msg.sender, tokenAmount);\n', '\t}\n', '\n', '\tfunction etherProceeds() external\n', '\t\tetherProceedsAccountOnly\n', '\t{\n', '\t\tif(!msg.sender.send(this.balance)) revert();\n', '\t}\n', '\t\n', '\n', '\n', '\n', '\tfunction getCurrentBlockNum()  internal returns (uint256){\n', '\t\treturn block.number;\n', '\t}\n', '\n', '\tfunction getEtherProceedsAccount() internal  returns (address){\n', '\t\treturn etherProceedsAccount;\n', '\t}\n', '\n', '\n', '\tfunction getCrcWithdrawAccount() internal returns (address){\n', '\t\treturn crcWithdrawAccount;\n', '\t}\n', '\n', '\tfunction setName(string _name) external\n', '\t\tonlyOwner\n', '\t{\n', '\t\tname=_name;\n', '\t}\n', '\n', '\tfunction setSymbol(string _symbol) external\n', '\t\tonlyOwner\n', '\t{\n', '\t\tsymbol=_symbol;\n', '\t}\n', '\n', '\n', '\tfunction setEtherProceedsAccount(address _etherProceedsAccount) external\n', '\t\tonlyOwner\n', '\t{\n', '\t\tetherProceedsAccount=_etherProceedsAccount;\n', '\t}\n', '\n', '\tfunction setCrcWithdrawAccount(address _crcWithdrawAccount) external\n', '\t\tonlyOwner\n', '\t{\n', '\t\tcrcWithdrawAccount=_crcWithdrawAccount;\n', '\t}\n', '\n', '\tfunction setFundingBlock(uint256 _fundingStartBlock,uint256 _fundingEndBlock,uint256 _teamKeepingLockEndBlock) external\n', '\t\tonlyOwner\n', '\t{\n', '\n', '\t\tfundingStartBlock=_fundingStartBlock;\n', '\t\tfundingEndBlock = _fundingEndBlock;\n', '\t\tteamKeepingLockEndBlock = _teamKeepingLockEndBlock;\n', '\t}\n', '\n', '\n', '}']