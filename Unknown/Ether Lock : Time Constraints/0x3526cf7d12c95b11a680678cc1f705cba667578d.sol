['pragma solidity ^0.4.17;\n', '\n', 'contract Owned {\n', '    address public Owner;\n', '    function Owned() { Owner = msg.sender; }\n', '    modifier onlyOwner { if ( msg.sender == Owner ) _; }\n', '}\n', '\n', 'contract StaffFunds is Owned {\n', '    address public Owner;\n', '    mapping (address=>uint) public deposits;\n', '    \n', '    function StaffWallet() { Owner = msg.sender; }\n', '    \n', '    function() payable { }\n', '    \n', '    function deposit() payable { // For employee benefits\n', '        if( msg.value >= 1 ether ) // prevent dust payments\n', '            deposits[msg.sender] += msg.value;\n', '        else return;\n', '    }\n', '    \n', '    function withdraw(uint amount) onlyOwner {  // only BOD can initiate payments as requested\n', '        uint depo = deposits[msg.sender];\n', '        deposits[msg.sender] -= msg.value; // MAX: for security re entry attack dnr\n', '        if( amount <= depo && depo > 0 )\n', '            msg.sender.send(amount);\n', '    }\n', '//TODO\n', '    function kill() onlyOwner { \n', '        require(this.balance == 0); // MAX: prevent losing funds\n', '        suicide(msg.sender);\n', '\t}\n', '} // Copyright 2017 RDev, developed for']