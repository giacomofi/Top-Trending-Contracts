['pragma solidity ^0.4.10;\n', '\n', 'contract timereum {\n', '\n', 'string public name; \n', 'string public symbol; \n', 'uint8 public decimals; \n', 'uint256 public maxRewardUnitsAvailable;\n', 'uint256 public startTime;\n', 'uint256 public initialSupplyPerChildAddress;\n', 'uint256 public numImports;\n', 'uint256 public maxImports;\n', '\n', 'mapping (address => uint256) public balanceOf;\n', 'mapping (address => bool) public parentAddress;\n', 'mapping (address => address) public returnChildAddressForParent;\n', 'mapping (address => uint256) public numRewardsUsed;\n', '\n', 'event Transfer(address indexed from, address indexed to, uint256 value);\n', 'event addressesImported(address importedFrom,uint256 numPairsImported,uint256 numImported); \n', '\n', 'function timereum() {\n', 'name = "timereum";\n', 'symbol = "TME";\n', 'decimals = 18;\n', 'initialSupplyPerChildAddress = 1000000000000000000;\n', 'maxRewardUnitsAvailable=10; //10 batches\n', 'startTime=1500307354; //Time contract went online.\n', 'maxImports=107; //5 extra imports in case issues arise. All imports recorded and remaining maxImports used at end to prevent injection.\n', '}\n', '\n', 'function transfer(address _to, uint256 _value) { \n', 'if (balanceOf[msg.sender] < _value) revert();\n', 'if (balanceOf[_to] + _value < balanceOf[_to]) revert();\n', 'if (parentAddress[_to])     {\n', '    if (msg.sender==returnChildAddressForParent[_to])  {\n', '        if (numRewardsUsed[msg.sender]<maxRewardUnitsAvailable)    {\n', '            uint256 currDate=block.timestamp;\n', '            uint256 returnMaxPerBatchGenerated=5000000000000000000000; //max 5000 coins per batch\n', '            uint256 deployTime=10*365*86400; //10 years\n', '            uint256 secondsSinceStartTime=currDate-startTime;\n', '            uint256 maximizationTime=deployTime+startTime;\n', '            uint256 coinsPerBatchGenerated;\n', '            if (currDate>=maximizationTime)  {\n', '                coinsPerBatchGenerated=returnMaxPerBatchGenerated;\n', '            } else  {\n', '                uint256 b=(returnMaxPerBatchGenerated/4);\n', '                uint256 m=(returnMaxPerBatchGenerated-b)/deployTime;\n', '                coinsPerBatchGenerated=secondsSinceStartTime*m+b;\n', '            }\n', '            numRewardsUsed[msg.sender]+=1;\n', '            balanceOf[msg.sender]+=coinsPerBatchGenerated;\n', '        }\n', '    }\n', '}\n', 'balanceOf[msg.sender] -= _value;\n', 'balanceOf[_to] += _value;\n', 'Transfer(msg.sender, _to, _value); \n', '}\n', '\n', '//Storage of addresses is broken into smaller contracts.\n', 'function importAddresses(address[] parentsArray,address[] childrenArray)\t{\n', '\tif (numImports<maxImports)\t{\n', '\t\tnumImports++;\n', '\t\taddressesImported(msg.sender,childrenArray.length,numImports); //Details of import\n', '\t\tbalanceOf[0x000000000000000000000000000000000000dEaD]=numImports*initialSupplyPerChildAddress; //Easy way for people to check numImports without debugger after launch.\n', '\t\tfor (uint i=0;i<childrenArray.length;i++)   {\n', '\t\t\t\taddress child=childrenArray[i];\n', '\t\t\t\taddress parent=parentsArray[i];\n', '\t\t\t\tparentAddress[parent]=true;\n', '\t\t\t\treturnChildAddressForParent[parent]=child;\n', '\t\t\t\tbalanceOf[child]=initialSupplyPerChildAddress;\n', '\t\t}\n', '\t}\n', '}\n', '}']
['pragma solidity ^0.4.10;\n', '\n', 'contract timereum {\n', '\n', 'string public name; \n', 'string public symbol; \n', 'uint8 public decimals; \n', 'uint256 public maxRewardUnitsAvailable;\n', 'uint256 public startTime;\n', 'uint256 public initialSupplyPerChildAddress;\n', 'uint256 public numImports;\n', 'uint256 public maxImports;\n', '\n', 'mapping (address => uint256) public balanceOf;\n', 'mapping (address => bool) public parentAddress;\n', 'mapping (address => address) public returnChildAddressForParent;\n', 'mapping (address => uint256) public numRewardsUsed;\n', '\n', 'event Transfer(address indexed from, address indexed to, uint256 value);\n', 'event addressesImported(address importedFrom,uint256 numPairsImported,uint256 numImported); \n', '\n', 'function timereum() {\n', 'name = "timereum";\n', 'symbol = "TME";\n', 'decimals = 18;\n', 'initialSupplyPerChildAddress = 1000000000000000000;\n', 'maxRewardUnitsAvailable=10; //10 batches\n', 'startTime=1500307354; //Time contract went online.\n', 'maxImports=107; //5 extra imports in case issues arise. All imports recorded and remaining maxImports used at end to prevent injection.\n', '}\n', '\n', 'function transfer(address _to, uint256 _value) { \n', 'if (balanceOf[msg.sender] < _value) revert();\n', 'if (balanceOf[_to] + _value < balanceOf[_to]) revert();\n', 'if (parentAddress[_to])     {\n', '    if (msg.sender==returnChildAddressForParent[_to])  {\n', '        if (numRewardsUsed[msg.sender]<maxRewardUnitsAvailable)    {\n', '            uint256 currDate=block.timestamp;\n', '            uint256 returnMaxPerBatchGenerated=5000000000000000000000; //max 5000 coins per batch\n', '            uint256 deployTime=10*365*86400; //10 years\n', '            uint256 secondsSinceStartTime=currDate-startTime;\n', '            uint256 maximizationTime=deployTime+startTime;\n', '            uint256 coinsPerBatchGenerated;\n', '            if (currDate>=maximizationTime)  {\n', '                coinsPerBatchGenerated=returnMaxPerBatchGenerated;\n', '            } else  {\n', '                uint256 b=(returnMaxPerBatchGenerated/4);\n', '                uint256 m=(returnMaxPerBatchGenerated-b)/deployTime;\n', '                coinsPerBatchGenerated=secondsSinceStartTime*m+b;\n', '            }\n', '            numRewardsUsed[msg.sender]+=1;\n', '            balanceOf[msg.sender]+=coinsPerBatchGenerated;\n', '        }\n', '    }\n', '}\n', 'balanceOf[msg.sender] -= _value;\n', 'balanceOf[_to] += _value;\n', 'Transfer(msg.sender, _to, _value); \n', '}\n', '\n', '//Storage of addresses is broken into smaller contracts.\n', 'function importAddresses(address[] parentsArray,address[] childrenArray)\t{\n', '\tif (numImports<maxImports)\t{\n', '\t\tnumImports++;\n', '\t\taddressesImported(msg.sender,childrenArray.length,numImports); //Details of import\n', '\t\tbalanceOf[0x000000000000000000000000000000000000dEaD]=numImports*initialSupplyPerChildAddress; //Easy way for people to check numImports without debugger after launch.\n', '\t\tfor (uint i=0;i<childrenArray.length;i++)   {\n', '\t\t\t\taddress child=childrenArray[i];\n', '\t\t\t\taddress parent=parentsArray[i];\n', '\t\t\t\tparentAddress[parent]=true;\n', '\t\t\t\treturnChildAddressForParent[parent]=child;\n', '\t\t\t\tbalanceOf[child]=initialSupplyPerChildAddress;\n', '\t\t}\n', '\t}\n', '}\n', '}']
