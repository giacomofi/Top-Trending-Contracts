['pragma solidity ^0.4.13;\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '/**\n', ' * @title Math\n', ' * @dev Assorted math operations\n', ' */\n', 'contract Math {\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '  }\n', '}\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'contract SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is SafeMath, ERC20Basic {\n', '  mapping(address => uint256) balances;\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint _value) returns (bool){\n', '    balances[msg.sender] = sub(balances[msg.sender],_value);\n', '    balances[_to] = add(balances[_to],_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '    balances[_to] = add(balances[_to],_value);\n', '    balances[_from] = sub(balances[_from],_value);\n', '    allowed[_from][msg.sender] = sub(_allowance,_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '}\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '  bool public mintingFinished = false;\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will recieve the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n', '    totalSupply = add(totalSupply,_amount);\n', '    balances[_to] = add(balances[_to],_amount);\n', '    Mint(_to, _amount);\n', '    return true;\n', '  }\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '  bool public paused = false;\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS paused\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS NOT paused\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '/**\n', ' * Pausable token\n', ' *\n', ' * Simple ERC20 Token example, with pausable token creation\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '  function transfer(address _to, uint256 _value) whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '  function transferFrom(address _from, address _to, uint256 _value) whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '}\n', '/**\n', ' * @title LimitedTransferToken\n', ' * @dev LimitedTransferToken defines the generic interface and the implementation to limit token\n', ' * transferability for different events. It is intended to be used as a base class for other token\n', ' * contracts.\n', ' * LimitedTransferToken has been designed to allow for different limiting factors,\n', ' * this can be achieved by recursively calling super.transferableTokens() until the base class is\n', ' * hit. For example:\n', ' *     function transferableTokens(address holder, uint64 time) constant public returns (uint256) {\n', ' *       return min256(unlockedTokens, super.transferableTokens(holder, time));\n', ' *     }\n', ' * A working example is VestedToken.sol:\n', ' * https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/VestedToken.sol\n', ' */\n', 'contract LimitedTransferToken is ERC20 {\n', '  /**\n', '   * @dev Checks whether it can transfer or otherwise throws.\n', '   */\n', '  modifier canTransfer(address _sender, uint256 _value) {\n', '   require(_value <= transferableTokens(_sender, uint64(now)));\n', '   _;\n', '  }\n', '  /**\n', '   * @dev Checks modifier and allows transfer if tokens are not locked.\n', '   * @param _to The address that will recieve the tokens.\n', '   * @param _value The amount of tokens to be transferred.\n', '   */\n', '  function transfer(address _to, uint256 _value) canTransfer(msg.sender, _value) returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '  /**\n', '  * @dev Checks modifier and allows transfer if tokens are not locked.\n', '  * @param _from The address that will send the tokens.\n', '  * @param _to The address that will recieve the tokens.\n', '  * @param _value The amount of tokens to be transferred.\n', '  */\n', '  function transferFrom(address _from, address _to, uint256 _value) canTransfer(_from, _value) returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '  /**\n', '   * @dev Default transferable tokens function returns all tokens for a holder (no limit).\n', '   * @dev Overwriting transferableTokens(address holder, uint64 time) is the way to provide the\n', '   * specific logic for limiting token transferability for a holder over time.\n', '   */\n', '  function transferableTokens(address holder, uint64 time) constant public returns (uint256) {\n', '    return balanceOf(holder);\n', '  }\n', '}\n', '/**\n', ' * @title Vested token\n', ' * @dev Tokens that can be vested for a group of addresses.\n', ' */\n', 'contract VestedToken is Math, StandardToken, LimitedTransferToken {\n', '  uint256 MAX_GRANTS_PER_ADDRESS = 20;\n', '  struct TokenGrant {\n', '    address granter;     // 20 bytes\n', '    uint256 value;       // 32 bytes\n', '    uint64 cliff;\n', '    uint64 vesting;\n', '    uint64 start;        // 3 * 8 = 24 bytes\n', '    bool revokable;\n', '    bool burnsOnRevoke;  // 2 * 1 = 2 bits? or 2 bytes?\n', '  } // total 78 bytes = 3 sstore per operation (32 per sstore)\n', '  mapping (address => TokenGrant[]) public grants;\n', '  event NewTokenGrant(address indexed from, address indexed to, uint256 value, uint256 grantId);\n', '  /**\n', '   * @dev Grant tokens to a specified address\n', '   * @param _to address The address which the tokens will be granted to.\n', '   * @param _value uint256 The amount of tokens to be granted.\n', '   * @param _start uint64 Time of the beginning of the grant.\n', '   * @param _cliff uint64 Time of the cliff period.\n', '   * @param _vesting uint64 The vesting period.\n', '   */\n', '  function grantVestedTokens(\n', '    address _to,\n', '    uint256 _value,\n', '    uint64 _start,\n', '    uint64 _cliff,\n', '    uint64 _vesting,\n', '    bool _revokable,\n', '    bool _burnsOnRevoke\n', '  ) public {\n', '    // Check for date inconsistencies that may cause unexpected behavior\n', '    require(_cliff >= _start && _vesting >= _cliff);\n', '    require(tokenGrantsCount(_to) < MAX_GRANTS_PER_ADDRESS);   // To prevent a user being spammed and have his balance locked (out of gas attack when calculating vesting).\n', '    uint256 count = grants[_to].push(\n', '                TokenGrant(\n', '                  _revokable ? msg.sender : 0, // avoid storing an extra 20 bytes when it is non-revokable\n', '                  _value,\n', '                  _cliff,\n', '                  _vesting,\n', '                  _start,\n', '                  _revokable,\n', '                  _burnsOnRevoke\n', '                )\n', '              );\n', '    transfer(_to, _value);\n', '    NewTokenGrant(msg.sender, _to, _value, count - 1);\n', '  }\n', '  /**\n', '   * @dev Revoke the grant of tokens of a specifed address.\n', '   * @param _holder The address which will have its tokens revoked.\n', '   * @param _grantId The id of the token grant.\n', '   */\n', '  function revokeTokenGrant(address _holder, uint256 _grantId) public {\n', '    TokenGrant storage grant = grants[_holder][_grantId];\n', '    require(grant.revokable);\n', '    require(grant.granter == msg.sender); // Only granter can revoke it\n', '    address receiver = grant.burnsOnRevoke ? 0xdead : msg.sender;\n', '    uint256 nonVested = nonVestedTokens(grant, uint64(now));\n', '    // remove grant from array\n', '    delete grants[_holder][_grantId];\n', '    grants[_holder][_grantId] = grants[_holder][sub(grants[_holder].length,1)];\n', '    grants[_holder].length -= 1;\n', '    balances[receiver] = add(balances[receiver],nonVested);\n', '    balances[_holder] = sub(balances[_holder],nonVested);\n', '    Transfer(_holder, receiver, nonVested);\n', '  }\n', '  /**\n', '   * @dev Calculate the total amount of transferable tokens of a holder at a given time\n', '   * @param holder address The address of the holder\n', '   * @param time uint64 The specific time.\n', '   * @return An uint256 representing a holder&#39;s total amount of transferable tokens.\n', '   */\n', '  function transferableTokens(address holder, uint64 time) constant public returns (uint256) {\n', '    uint256 grantIndex = tokenGrantsCount(holder);\n', '    if (grantIndex == 0) return super.transferableTokens(holder, time); // shortcut for holder without grants\n', '    // Iterate through all the grants the holder has, and add all non-vested tokens\n', '    uint256 nonVested = 0;\n', '    for (uint256 i = 0; i < grantIndex; i++) {\n', '      nonVested = add(nonVested, nonVestedTokens(grants[holder][i], time));\n', '    }\n', '    // Balance - totalNonVested is the amount of tokens a holder can transfer at any given time\n', '    uint256 vestedTransferable = sub(balanceOf(holder), nonVested);\n', '    // Return the minimum of how many vested can transfer and other value\n', '    // in case there are other limiting transferability factors (default is balanceOf)\n', '    return min256(vestedTransferable, super.transferableTokens(holder, time));\n', '  }\n', '  /**\n', '   * @dev Check the amount of grants that an address has.\n', '   * @param _holder The holder of the grants.\n', '   * @return A uint256 representing the total amount of grants.\n', '   */\n', '  function tokenGrantsCount(address _holder) constant returns (uint256 index) {\n', '    return grants[_holder].length;\n', '  }\n', '  /**\n', '   * @dev Calculate amount of vested tokens at a specifc time.\n', '   * @param tokens uint256 The amount of tokens grantted.\n', '   * @param time uint64 The time to be checked\n', '   * @param start uint64 A time representing the begining of the grant\n', '   * @param cliff uint64 The cliff period.\n', '   * @param vesting uint64 The vesting period.\n', '   * @return An uint256 representing the amount of vested tokensof a specif grant.\n', '   *  transferableTokens\n', '   *   |                         _/--------   vestedTokens rect\n', '   *   |                       _/\n', '   *   |                     _/\n', '   *   |                   _/\n', '   *   |                 _/\n', '   *   |                /\n', '   *   |              .|\n', '   *   |            .  |\n', '   *   |          .    |\n', '   *   |        .      |\n', '   *   |      .        |\n', '   *   |    .          |\n', '   *   +===+===========+---------+----------> time\n', '   *      Start       Clift    Vesting\n', '   */\n', '  function calculateVestedTokens(\n', '    uint256 tokens,\n', '    uint256 time,\n', '    uint256 start,\n', '    uint256 cliff,\n', '    uint256 vesting) constant returns (uint256)\n', '    {\n', '      // Shortcuts for before cliff and after vesting cases.\n', '      if (time < cliff) return 0;\n', '      if (time >= vesting) return tokens;\n', '      // Interpolate all vested tokens.\n', '      // As before cliff the shortcut returns 0, we can use just calculate a value\n', '      // in the vesting rect (as shown in above&#39;s figure)\n', '      // vestedTokens = tokens * (time - start) / (vesting - start)\n', '      uint256 vestedTokens = div(\n', '                                    mul(\n', '                                      tokens,\n', '                                      sub(time, start)\n', '                                      ),\n', '                                    sub(vesting, start)\n', '                                    );\n', '      return vestedTokens;\n', '  }\n', '  /**\n', '   * @dev Get all information about a specifc grant.\n', '   * @param _holder The address which will have its tokens revoked.\n', '   * @param _grantId The id of the token grant.\n', '   * @return Returns all the values that represent a TokenGrant(address, value, start, cliff,\n', '   * revokability, burnsOnRevoke, and vesting) plus the vested value at the current time.\n', '   */\n', '  function tokenGrant(address _holder, uint256 _grantId) constant returns (address granter, uint256 value, uint256 vested, uint64 start, uint64 cliff, uint64 vesting, bool revokable, bool burnsOnRevoke) {\n', '    TokenGrant storage grant = grants[_holder][_grantId];\n', '    granter = grant.granter;\n', '    value = grant.value;\n', '    start = grant.start;\n', '    cliff = grant.cliff;\n', '    vesting = grant.vesting;\n', '    revokable = grant.revokable;\n', '    burnsOnRevoke = grant.burnsOnRevoke;\n', '    vested = vestedTokens(grant, uint64(now));\n', '  }\n', '  /**\n', '   * @dev Get the amount of vested tokens at a specific time.\n', '   * @param grant TokenGrant The grant to be checked.\n', '   * @param time The time to be checked\n', '   * @return An uint256 representing the amount of vested tokens of a specific grant at a specific time.\n', '   */\n', '  function vestedTokens(TokenGrant grant, uint64 time) private constant returns (uint256) {\n', '    return calculateVestedTokens(\n', '      grant.value,\n', '      uint256(time),\n', '      uint256(grant.start),\n', '      uint256(grant.cliff),\n', '      uint256(grant.vesting)\n', '    );\n', '  }\n', '  /**\n', '   * @dev Calculate the amount of non vested tokens at a specific time.\n', '   * @param grant TokenGrant The grant to be checked.\n', '   * @param time uint64 The time to be checked\n', '   * @return An uint256 representing the amount of non vested tokens of a specifc grant on the\n', '   * passed time frame.\n', '   */\n', '  function nonVestedTokens(TokenGrant grant, uint64 time) private constant returns (uint256) {\n', '    return sub(grant.value,vestedTokens(grant, time));\n', '  }\n', '  /**\n', '   * @dev Calculate the date when the holder can trasfer all its tokens\n', '   * @param holder address The address of the holder\n', '   * @return An uint256 representing the date of the last transferable tokens.\n', '   */\n', '  function lastTokenIsTransferableDate(address holder) constant public returns (uint64 date) {\n', '    date = uint64(now);\n', '    uint256 grantIndex = grants[holder].length;\n', '    for (uint256 i = 0; i < grantIndex; i++) {\n', '      date = max64(grants[holder][i].vesting, date);\n', '    }\n', '  }\n', '}\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is SafeMath, StandardToken {\n', '    event Burn(address indexed burner, uint indexed value);\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint _value)\n', '        public\n', '    {\n', '        require(_value > 0);\n', '        address burner = msg.sender;\n', '        balances[burner] = sub(balances[burner], _value);\n', '        totalSupply = sub(totalSupply, _value);\n', '        Burn(burner, _value);\n', '    }\n', '}\n', '/**\n', ' * @title PLC\n', ' * @dev PLC is ERC20 token contract, inheriting MintableToken, PausableToken,\n', ' * VestedToken, BurnableToken contract from open zeppelin.\n', ' */\n', 'contract PLC is MintableToken, PausableToken, VestedToken, BurnableToken {\n', '  string public name = "PlusCoin";\n', '  string public symbol = "PLC";\n', '  uint256 public decimals = 18;\n', '}\n', '/**\n', ' * @title RefundVault\n', ' * @dev This contract is used for storing funds while a crowdsale\n', ' * is in progress. Supports refunding the money if crowdsale fails,\n', ' * and forwarding it if crowdsale is successful.\n', ' */\n', 'contract RefundVault is Ownable, SafeMath{\n', '  enum State { Active, Refunding, Closed }\n', '  mapping (address => uint256) public deposited;\n', '  mapping (address => uint256) public refunded;\n', '  State public state;\n', '  address public devMultisig;\n', '  address[] public reserveWallet;\n', '  event Closed();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '  /**\n', '   * @dev This constructor sets the addresses of multi-signature wallet and\n', '   * 5 reserve wallets.\n', '   * and forwarding it if crowdsale is successful.\n', '   * @param _devMultiSig address The address of multi-signature wallet.\n', '   * @param _reserveWallet address[5] The addresses of reserve wallet.\n', '   */\n', '  function RefundVault(address _devMultiSig, address[] _reserveWallet) {\n', '    state = State.Active;\n', '    devMultisig = _devMultiSig;\n', '    reserveWallet = _reserveWallet;\n', '  }\n', '  /**\n', '   * @dev This function is called when user buy tokens. Only RefundVault\n', '   * contract stores the Ether user sent which forwarded from crowdsale\n', '   * contract.\n', '   * @param investor address The address who buy the token from crowdsale.\n', '   */\n', '  function deposit(address investor) onlyOwner payable {\n', '    require(state == State.Active);\n', '    deposited[investor] = add(deposited[investor], msg.value);\n', '  }\n', '  event Transferred(address _to, uint _value);\n', '  /**\n', '   * @dev This function is called when crowdsale is successfully finalized.\n', '   */\n', '  function close() onlyOwner {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    uint256 balance = this.balance;\n', '    uint256 devAmount = div(balance, 10);\n', '    devMultisig.transfer(devAmount);\n', '    Transferred(devMultisig, devAmount);\n', '    uint256 reserveAmount = div(mul(balance, 9), 10);\n', '    uint256 reserveAmountForEach = div(reserveAmount, reserveWallet.length);\n', '    for(uint8 i = 0; i < reserveWallet.length; i++){\n', '      reserveWallet[i].transfer(reserveAmountForEach);\n', '      Transferred(reserveWallet[i], reserveAmountForEach);\n', '    }\n', '    Closed();\n', '  }\n', '  /**\n', '   * @dev This function is called when crowdsale is unsuccessfully finalized\n', '   * and refund is required.\n', '   */\n', '  function enableRefunds() onlyOwner {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    RefundsEnabled();\n', '  }\n', '  /**\n', '   * @dev This function allows for user to refund Ether.\n', '   */\n', '  function refund(address investor) returns (bool) {\n', '    require(state == State.Refunding);\n', '    if (refunded[investor] > 0) {\n', '      return false;\n', '    }\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    refunded[investor] = depositedValue;\n', '    investor.transfer(depositedValue);\n', '    Refunded(investor, depositedValue);\n', '    return true;\n', '  }\n', '}\n', '/**\n', ' * @title KYC\n', ' * @dev KYC contract handles the white list for PLCCrowdsale contract\n', ' * Only accounts registered in KYC contract can buy PLC token.\n', ' * Admins can register account, and the reason why\n', ' */\n', 'contract KYC is Ownable, SafeMath, Pausable {\n', '  // check the address is registered for token sale\n', '  mapping (address => bool) public registeredAddress;\n', '  // check the address is admin of kyc contract\n', '  mapping (address => bool) public admin;\n', '  event Registered(address indexed _addr);\n', '  event Unregistered(address indexed _addr);\n', '  event NewAdmin(address indexed _addr);\n', '  /**\n', '   * @dev check whether the address is registered for token sale or not.\n', '   * @param _addr address\n', '   */\n', '  modifier onlyRegistered(address _addr) {\n', '    require(isRegistered(_addr));\n', '    _;\n', '  }\n', '  /**\n', '   * @dev check whether the msg.sender is admin or not\n', '   */\n', '  modifier onlyAdmin() {\n', '    require(admin[msg.sender]);\n', '    _;\n', '  }\n', '  function KYC() {\n', '    admin[msg.sender] = true;\n', '  }\n', '  /**\n', '   * @dev set new admin as admin of KYC contract\n', '   * @param _addr address The address to set as admin of KYC contract\n', '   */\n', '  function setAdmin(address _addr)\n', '    public\n', '    onlyOwner\n', '  {\n', '    require(_addr != address(0) && admin[_addr] == false);\n', '    admin[_addr] = true;\n', '    NewAdmin(_addr);\n', '  }\n', '  /**\n', '   * @dev check the address is register for token sale\n', '   * @param _addr address The address to check whether register or not\n', '   */\n', '  function isRegistered(address _addr)\n', '    public\n', '    constant\n', '    returns (bool)\n', '  {\n', '    return registeredAddress[_addr];\n', '  }\n', '  /**\n', '   * @dev register the address for token sale\n', '   * @param _addr address The address to register for token sale\n', '   */\n', '  function register(address _addr)\n', '    public\n', '    onlyAdmin\n', '    whenNotPaused\n', '  {\n', '    require(_addr != address(0) && registeredAddress[_addr] == false);\n', '    registeredAddress[_addr] = true;\n', '    Registered(_addr);\n', '  }\n', '  /**\n', '   * @dev register the addresses for token sale\n', '   * @param _addrs address[] The addresses to register for token sale\n', '   */\n', '  function registerByList(address[] _addrs)\n', '    public\n', '    onlyAdmin\n', '    whenNotPaused\n', '  {\n', '    for(uint256 i = 0; i < _addrs.length; i++) {\n', '      require(_addrs[i] != address(0) && registeredAddress[_addrs[i]] == false);\n', '      registeredAddress[_addrs[i]] = true;\n', '      Registered(_addrs[i]);\n', '    }\n', '  }\n', '  /**\n', '   * @dev unregister the registered address\n', '   * @param _addr address The address to unregister for token sale\n', '   */\n', '  function unregister(address _addr)\n', '    public\n', '    onlyAdmin\n', '    onlyRegistered(_addr)\n', '  {\n', '    registeredAddress[_addr] = false;\n', '    Unregistered(_addr);\n', '  }\n', '  /**\n', '   * @dev unregister the registered addresses\n', '   * @param _addrs address[] The addresses to unregister for token sale\n', '   */\n', '  function unregisterByList(address[] _addrs)\n', '    public\n', '    onlyAdmin\n', '  {\n', '    for(uint256 i = 0; i < _addrs.length; i++) {\n', '      require(isRegistered(_addrs[i]));\n', '      registeredAddress[_addrs[i]] = false;\n', '      Unregistered(_addrs[i]);\n', '    }\n', '  }\n', '}\n', '/**\n', ' * @title PLCCrowdsale\n', ' * @dev PLCCrowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract PLCCrowdsale is Ownable, SafeMath, Pausable {\n', '  // token registery contract\n', '  KYC public kyc;\n', '  // The token being sold\n', '  PLC public token;\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint64 public startTime; // 1506384000; //2017.9.26 12:00 am (UTC)\n', '  uint64 public endTime; // 1507593600; //2017.10.10 12:00 am (UTC)\n', '  uint64[5] public deadlines; // [1506643200, 1506902400, 1507161600, 1507420800, 1507593600]; // [2017.9.26, 2017.10.02, 2017.10.05, 2017.10.08, 2017.10.10]\n', '  mapping (address => uint256) public presaleRate;\n', '  uint8[5] public rates = [240, 230, 220, 210, 200];\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '  // amount of ether buyer can buy\n', '  uint256 constant public maxGuaranteedLimit = 5000 ether;\n', '  // amount of ether presale buyer can buy\n', '  mapping (address => uint256) public presaleGuaranteedLimit;\n', '  mapping (address => bool) public isDeferred;\n', '  // amount of ether funded for each buyer\n', '  // bool: true if deferred otherwise false\n', '  mapping (bool => mapping (address => uint256)) public buyerFunded;\n', '  // amount of tokens minted for deferredBuyers\n', '  uint256 public deferredTotalTokens;\n', '  // buyable interval in block number 20\n', '  uint256 constant public maxCallFrequency = 20;\n', '  // block number when buyer buy\n', '  mapping (address => uint256) public lastCallBlock;\n', '  bool public isFinalized = false;\n', '  // minimum amount of funds to be raised in weis\n', '  uint256 public maxEtherCap; // 100000 ether;\n', '  uint256 public minEtherCap; // 30000 ether;\n', '  // investor address list\n', '  address[] buyerList;\n', '  mapping (address => bool) inBuyerList;\n', '  // number of refunded investors\n', '  uint256 refundCompleted;\n', '  // new owner of token contract when crowdsale is Finalized\n', '  address newTokenOwner = 0x568E2B5e9643D38e6D8146FeE8d80a1350b2F1B9;\n', '  // refund vault used to hold funds while crowdsale is running\n', '  RefundVault public vault;\n', '  // dev team multisig wallet\n', '  address devMultisig;\n', '  // reserve\n', '  address[] reserveWallet;\n', '  /**\n', '   * @dev Checks whether buyer is sending transaction too frequently\n', '   */\n', '  modifier canBuyInBlock () {\n', '    require(add(lastCallBlock[msg.sender], maxCallFrequency) < block.number);\n', '    lastCallBlock[msg.sender] = block.number;\n', '    _;\n', '  }\n', '  /**\n', '   * @dev Checks whether ico is started\n', '   */\n', '  modifier onlyAfterStart() {\n', '    require(now >= startTime && now <= endTime);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev Checks whether ico is not started\n', '   */\n', '  modifier onlyBeforeStart() {\n', '    require(now < startTime);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev Checks whether the account is registered\n', '   */\n', '  modifier onlyRegistered(address _addr) {\n', '    require(kyc.isRegistered(_addr));\n', '    _;\n', '  }\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '  event PresaleTokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '  event DeferredPresaleTokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '  /**\n', '   * event for finalize logging\n', '   */\n', '  event Finalized();\n', '  /**\n', '   * event for register presale logging\n', '   * @param presaleInvestor who register for presale\n', '   * @param presaleAmount weis presaleInvestor can buy as presale\n', '   * @param _presaleRate rate at which presaleInvestor can buy tokens\n', '   * @param _isDeferred whether the investor is deferred investor\n', '   */\n', '  event RegisterPresale(address indexed presaleInvestor, uint256 presaleAmount, uint256 _presaleRate, bool _isDeferred);\n', '  /**\n', '   * event for unregister presale logging\n', '   * @param presaleInvestor who register for presale\n', '   */\n', '  event UnregisterPresale(address indexed presaleInvestor);\n', '  /**\n', '   * @dev PLCCrowdsale constructor sets variables\n', '   * @param _kyc address The address which KYC contract is deployed at\n', '   * @param _token address The address which PLC contract is deployed at\n', '   * @param _refundVault address The address which RefundVault is deployed at\n', '   * @param _devMultisig address The address which MultiSigWallet for devTeam is deployed at\n', '   * @param _reserveWallet address[5] The address list of reserveWallet addresses\n', '   * @param _timelines uint64[5] list of timelines from startTime to endTime with timelines for rate changes\n', '   * @param _maxEtherCap uint256 The value which maximum weis to be funded\n', '   * @param _minEtherCap uint256 The value which minimum weis to be funded\n', '   */\n', '  function PLCCrowdsale(\n', '    address _kyc,\n', '    address _token,\n', '    address _refundVault,\n', '    address _devMultisig,\n', '    address[] _reserveWallet,\n', '    uint64[6] _timelines, // [startTime, ... , endTime]\n', '    uint256 _maxEtherCap,\n', '    uint256 _minEtherCap)\n', '  {\n', '    //timelines check\n', '    for(uint8 i = 0; i < _timelines.length-1; i++){\n', '      require(_timelines[i] < _timelines[i+1]);\n', '    }\n', '    require(_timelines[0] >= now);\n', '    //address check\n', '    require(_kyc != 0x00 && _token != 0x00 && _refundVault != 0x00 && _devMultisig != 0x00);\n', '    for(i = 0; i < _reserveWallet.length; i++){\n', '      require(_reserveWallet[i] != 0x00);\n', '    }\n', '    //cap check\n', '    require(_minEtherCap < _maxEtherCap);\n', '    kyc   = KYC(_kyc);\n', '    token = PLC(_token);\n', '    vault = RefundVault(_refundVault);\n', '    devMultisig   = _devMultisig;\n', '    reserveWallet = _reserveWallet;\n', '    startTime    = _timelines[0];\n', '    endTime      = _timelines[5];\n', '    deadlines[0] = _timelines[1];\n', '    deadlines[1] = _timelines[2];\n', '    deadlines[2] = _timelines[3];\n', '    deadlines[3] = _timelines[4];\n', '    deadlines[4] = _timelines[5];\n', '    maxEtherCap  = _maxEtherCap;\n', '    minEtherCap  = _minEtherCap;\n', '  }\n', '  /**\n', '   * @dev PLCCrowdsale fallback function for buying Tokens\n', '   */\n', '  function () payable {\n', '    if(isDeferred[msg.sender])\n', '      buyDeferredPresaleTokens(msg.sender);\n', '    else if(now < startTime)\n', '      buyPresaleTokens(msg.sender);\n', '    else\n', '      buyTokens();\n', '  }\n', '  /**\n', '   * @dev push all token buyers in list\n', '   * @param _addr address Account to push into buyerList\n', '   */\n', '  function pushBuyerList(address _addr) internal {\n', '    if (!inBuyerList[_addr]) {\n', '      inBuyerList[_addr] = true;\n', '      buyerList.push(_addr);\n', '    }\n', '  }\n', '  /**\n', '   * @dev register presale account checking modifier\n', '   * @param presaleInvestor address The account to register as presale account\n', '   * @param presaleAmount uint256 The value which investor is allowed to buy\n', '   * @param _presaleRate uint256 The rate at which investor buy tokens\n', '   * @param _isDeferred bool whether presaleInvestor is deferred buyer\n', '   */\n', '  function registerPresale(address presaleInvestor, uint256 presaleAmount, uint256 _presaleRate, bool _isDeferred)\n', '    onlyBeforeStart\n', '    onlyOwner\n', '  {\n', '    require(presaleInvestor != 0x00);\n', '    require(presaleAmount > 0);\n', '    require(_presaleRate > 0);\n', '    require(presaleGuaranteedLimit[presaleInvestor] == 0);\n', '    presaleGuaranteedLimit[presaleInvestor] = presaleAmount;\n', '    presaleRate[presaleInvestor] = _presaleRate;\n', '    isDeferred[presaleInvestor] = _isDeferred;\n', '    if(_isDeferred) {\n', '      weiRaised = add(weiRaised, presaleAmount);\n', '      uint256 deferredInvestorToken = mul(presaleAmount, _presaleRate);\n', '      uint256 deferredDevToken = div(mul(deferredInvestorToken, 20), 70);\n', '      uint256 deferredReserveToken = div(mul(deferredInvestorToken, 10), 70);\n', '      uint256 totalAmount = add(deferredInvestorToken, add(deferredDevToken, deferredReserveToken));\n', '      token.mint(address(this), totalAmount);\n', '      deferredTotalTokens = add(deferredTotalTokens, totalAmount);\n', '    }\n', '    RegisterPresale(presaleInvestor, presaleAmount, _presaleRate, _isDeferred);\n', '  }\n', '  /**\n', '   * @dev register presale account checking modifier\n', '   * @param presaleInvestor address The account to register as presale account\n', '   */\n', '  function unregisterPresale(address presaleInvestor)\n', '    onlyBeforeStart\n', '    onlyOwner\n', '  {\n', '    require(presaleInvestor != 0x00);\n', '    require(presaleGuaranteedLimit[presaleInvestor] > 0);\n', '    uint256 _amount = presaleGuaranteedLimit[presaleInvestor];\n', '    uint256 _rate = presaleRate[presaleInvestor];\n', '    bool _isDeferred = isDeferred[presaleInvestor];\n', '    require(buyerFunded[_isDeferred][presaleInvestor] == 0);\n', '    presaleGuaranteedLimit[presaleInvestor] = 0;\n', '    presaleRate[presaleInvestor] = 0;\n', '    isDeferred[presaleInvestor] = false;\n', '    if(_isDeferred) {\n', '      weiRaised = sub(weiRaised, _amount);\n', '      uint256 deferredInvestorToken = mul(_amount, _rate);\n', '      uint256 deferredDevToken = div(mul(deferredInvestorToken, 20), 70);\n', '      uint256 deferredReserveToken = div(mul(deferredInvestorToken, 10), 70);\n', '      uint256 totalAmount = add(deferredInvestorToken, add(deferredDevToken, deferredReserveToken));\n', '      deferredTotalTokens = sub(deferredTotalTokens, totalAmount);\n', '      token.burn(totalAmount);\n', '    }\n', '    UnregisterPresale(presaleInvestor);\n', '  }\n', '  /**\n', '   * @dev buy token (deferred presale investor)\n', '   * @param beneficiary address The account to receive tokens\n', '   */\n', '  function buyDeferredPresaleTokens(address beneficiary)\n', '    payable\n', '    whenNotPaused\n', '  {\n', '    require(beneficiary != 0x00);\n', '    require(isDeferred[beneficiary]);\n', '    uint guaranteedLimit = presaleGuaranteedLimit[beneficiary];\n', '    require(guaranteedLimit > 0);\n', '    uint256 weiAmount = msg.value;\n', '    require(weiAmount != 0);\n', '    uint256 totalAmount = add(buyerFunded[true][beneficiary], weiAmount);\n', '    uint256 toFund;\n', '    if (totalAmount > guaranteedLimit) {\n', '      toFund = sub(guaranteedLimit, buyerFunded[true][beneficiary]);\n', '    } else {\n', '      toFund = weiAmount;\n', '    }\n', '    require(toFund > 0);\n', '    require(weiAmount >= toFund);\n', '    uint256 tokens = mul(toFund, presaleRate[beneficiary]);\n', '    uint256 toReturn = sub(weiAmount, toFund);\n', '    buy(beneficiary, tokens, toFund, toReturn, true);\n', '    // token distribution : 70% for sale, 20% for dev, 10% for reserve\n', '    uint256 devAmount = div(mul(tokens, 20), 70);\n', '    uint256 reserveAmount = div(mul(tokens, 10), 70);\n', '    distributeToken(devAmount, reserveAmount, true);\n', '    // ether distribution : 10% for dev, 90% for reserve\n', '    uint256 devEtherAmount = div(toFund, 10);\n', '    uint256 reserveEtherAmount = div(mul(toFund, 9), 10);\n', '    distributeEther(devEtherAmount, reserveEtherAmount);\n', '    DeferredPresaleTokenPurchase(msg.sender, beneficiary, toFund, tokens);\n', '  }\n', '  /**\n', '   * @dev buy token (normal presale investor)\n', '   * @param beneficiary address The account to receive tokens\n', '   */\n', '  function buyPresaleTokens(address beneficiary)\n', '    payable\n', '    whenNotPaused\n', '    onlyBeforeStart\n', '  {\n', '    // check validity\n', '    require(beneficiary != 0x00);\n', '    require(validPurchase());\n', '    require(!isDeferred[beneficiary]);\n', '    uint guaranteedLimit = presaleGuaranteedLimit[beneficiary];\n', '    require(guaranteedLimit > 0);\n', '    // calculate eth amount\n', '    uint256 weiAmount = msg.value;\n', '    uint256 totalAmount = add(buyerFunded[false][beneficiary], weiAmount);\n', '    uint256 toFund;\n', '    if (totalAmount > guaranteedLimit) {\n', '      toFund = sub(guaranteedLimit, buyerFunded[false][beneficiary]);\n', '    } else {\n', '      toFund = weiAmount;\n', '    }\n', '    require(toFund > 0);\n', '    require(weiAmount >= toFund);\n', '    uint256 tokens = mul(toFund, presaleRate[beneficiary]);\n', '    uint256 toReturn = sub(weiAmount, toFund);\n', '    buy(beneficiary, tokens, toFund, toReturn, false);\n', '    forwardFunds(toFund);\n', '    PresaleTokenPurchase(msg.sender, beneficiary, toFund, tokens);\n', '  }\n', '  /**\n', '   * @dev buy token (normal investors)\n', '   */\n', '  function buyTokens()\n', '    payable\n', '    whenNotPaused\n', '    canBuyInBlock\n', '    onlyAfterStart\n', '    onlyRegistered(msg.sender)\n', '  {\n', '    // check validity\n', '    require(validPurchase());\n', '    require(buyerFunded[false][msg.sender] < maxGuaranteedLimit);\n', '    // calculate eth amount\n', '    uint256 weiAmount = msg.value;\n', '    uint256 totalAmount = add(buyerFunded[false][msg.sender], weiAmount);\n', '    uint256 toFund;\n', '    if (totalAmount > maxGuaranteedLimit) {\n', '      toFund = sub(maxGuaranteedLimit, buyerFunded[false][msg.sender]);\n', '    } else {\n', '      toFund = weiAmount;\n', '    }\n', '    if(add(weiRaised,toFund) > maxEtherCap) {\n', '      toFund = sub(maxEtherCap, weiRaised);\n', '    }\n', '    require(toFund > 0);\n', '    require(weiAmount >= toFund);\n', '    uint256 tokens = mul(toFund, getRate());\n', '    uint256 toReturn = sub(weiAmount, toFund);\n', '    buy(msg.sender, tokens, toFund, toReturn, false);\n', '    forwardFunds(toFund);\n', '    TokenPurchase(msg.sender, msg.sender, toFund, tokens);\n', '  }\n', '  /**\n', '   * @dev get buy rate for now\n', '   * @return rate uint256 rate for now\n', '   */\n', '  function getRate() constant returns (uint256 rate) {\n', '    for(uint8 i = 0; i < deadlines.length; i++)\n', '      if(now < deadlines[i])\n', '        return rates[i];\n', '      return rates[rates.length-1];//should never be returned, but to be sure to not divide by 0\n', '  }\n', '  /**\n', '   * @dev get the number of buyers\n', '   * @return uint256 the number of buyers\n', '   */\n', '  function getBuyerNumber() constant returns (uint256) {\n', '    return buyerList.length;\n', '  }\n', '  /**\n', '   * @dev send ether to the fund collection wallet\n', '   * @param toFund uint256 The value of weis to send to vault\n', '   */\n', '  function forwardFunds(uint256 toFund) internal {\n', '    vault.deposit.value(toFund)(msg.sender);\n', '  }\n', '  /**\n', '   * @dev checks whether purchase value is not zero and maxEtherCap is not reached\n', '   * @return true if the transaction can buy tokens\n', '   */\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return nonZeroPurchase && !maxReached();\n', '  }\n', '  function buy(\n', '    address _beneficiary,\n', '    uint256 _tokens,\n', '    uint256 _toFund,\n', '    uint256 _toReturn,\n', '    bool _isDeferred)\n', '    internal\n', '  {\n', '    if (!_isDeferred) {\n', '      pushBuyerList(msg.sender);\n', '      weiRaised = add(weiRaised, _toFund);\n', '    }\n', '    buyerFunded[_isDeferred][_beneficiary] = add(buyerFunded[_isDeferred][_beneficiary], _toFund);\n', '    if (!_isDeferred) {\n', '      token.mint(address(this), _tokens);\n', '    }\n', '    // 1 week lock\n', '    token.grantVestedTokens(\n', '      _beneficiary,\n', '      _tokens,\n', '      uint64(endTime),\n', '      uint64(endTime + 1 weeks),\n', '      uint64(endTime + 1 weeks),\n', '      false,\n', '      false);\n', '    // return ether if needed\n', '    if (_toReturn > 0) {\n', '      msg.sender.transfer(_toReturn);\n', '    }\n', '  }\n', '  /**\n', '   * @dev distribute token to multisig wallet and reserve walletes.\n', '   * This function is called in two context where crowdsale is closing and\n', '   * deferred token is bought.\n', '   * @param devAmount uint256 token amount for dev multisig wallet\n', '   * @param reserveAmount uint256 token amount for reserve walletes\n', '   * @param _isDeferred bool check whether function is called when deferred token is sold\n', '   */\n', '  function distributeToken(uint256 devAmount, uint256 reserveAmount, bool _isDeferred) internal {\n', '    uint256 eachReserveAmount = div(reserveAmount, reserveWallet.length);\n', '    token.grantVestedTokens(\n', '      devMultisig,\n', '      devAmount,\n', '      uint64(endTime),\n', '      uint64(endTime),\n', '      uint64(endTime + 1 years),\n', '      false,\n', '      false);\n', '    if (_isDeferred) {\n', '      for(uint8 i = 0; i < reserveWallet.length; i++) {\n', '        token.transfer(reserveWallet[i], eachReserveAmount);\n', '      }\n', '    } else {\n', '      for(uint8 j = 0; j < reserveWallet.length; j++) {\n', '        token.mint(reserveWallet[j], eachReserveAmount);\n', '      }\n', '    }\n', '  }\n', '  /**\n', '   * @dev distribute ether to multisig wallet and reserve walletes\n', '   * @param devAmount uint256 ether amount for dev multisig wallet\n', '   * @param reserveAmount uint256 ether amount for reserve walletes\n', '   */\n', '  function distributeEther(uint256 devAmount, uint256 reserveAmount) internal {\n', '    uint256 eachReserveAmount = div(reserveAmount, reserveWallet.length);\n', '    devMultisig.transfer(devAmount);\n', '    for(uint8 i = 0; i < reserveWallet.length; i++){\n', '      reserveWallet[i].transfer(eachReserveAmount);\n', '    }\n', '  }\n', '  /**\n', '   * @dev checks whether crowdsale is ended\n', '   * @return true if crowdsale event has ended\n', '   */\n', '  function hasEnded() public constant returns (bool) {\n', '    return now > endTime;\n', '  }\n', '  /**\n', '   * @dev should be called after crowdsale ends, to do\n', '   */\n', '  function finalize() {\n', '    require(!isFinalized);\n', '    require(hasEnded() || maxReached());\n', '    finalization();\n', '    Finalized();\n', '    isFinalized = true;\n', '  }\n', '  /**\n', '   * @dev end token minting on finalization, mint tokens for dev team and reserve wallets\n', '   */\n', '  function finalization() internal {\n', '    if (minReached()) {\n', '      vault.close();\n', '      uint256 totalToken = token.totalSupply();\n', '      uint256 tokenSold = sub(totalToken, deferredTotalTokens);\n', '      // token distribution : 70% for sale, 20% for dev, 10% for reserve\n', '      uint256 devAmount = div(mul(tokenSold, 20), 70);\n', '      uint256 reserveAmount = div(mul(tokenSold, 10), 70);\n', '      token.mint(address(this), devAmount);\n', '      distributeToken(devAmount, reserveAmount, false);\n', '    } else {\n', '      vault.enableRefunds();\n', '    }\n', '    token.finishMinting();\n', '    token.transferOwnership(newTokenOwner);\n', '  }\n', '  /**\n', '   * @dev should be called when ethereum is forked during crowdsale for refunding ethers on not supported fork\n', '   */\n', '  function finalizeWhenForked() onlyOwner whenPaused {\n', '    require(!isFinalized);\n', '    isFinalized = true;\n', '    vault.enableRefunds();\n', '    token.finishMinting();\n', '  }\n', '  /**\n', '   * @dev refund a lot of investors at a time checking onlyOwner\n', '   * @param numToRefund uint256 The number of investors to refund\n', '   */\n', '  function refundAll(uint256 numToRefund) onlyOwner {\n', '    require(isFinalized);\n', '    require(!minReached());\n', '    require(numToRefund > 0);\n', '    uint256 limit = refundCompleted + numToRefund;\n', '    if (limit > buyerList.length) {\n', '      limit = buyerList.length;\n', '    }\n', '    for(uint256 i = refundCompleted; i < limit; i++) {\n', '      vault.refund(buyerList[i]);\n', '    }\n', '    refundCompleted = limit;\n', '  }\n', '  /**\n', '   * @dev if crowdsale is unsuccessful, investors can claim refunds here\n', '   * @param investor address The account to be refunded\n', '   */\n', '  function claimRefund(address investor) returns (bool) {\n', '    require(isFinalized);\n', '    require(!minReached());\n', '    return vault.refund(investor);\n', '  }\n', '  /**\n', '   * @dev Checks whether maxEtherCap is reached\n', '   * @return true if max ether cap is reaced\n', '   */\n', '  function maxReached() public constant returns (bool) {\n', '    return weiRaised == maxEtherCap;\n', '  }\n', '  /**\n', '   * @dev Checks whether minEtherCap is reached\n', '   * @return true if min ether cap is reaced\n', '   */\n', '  function minReached() public constant returns (bool) {\n', '    return weiRaised >= minEtherCap;\n', '  }\n', '  /**\n', '   * @dev should burn unpaid tokens of deferred presale investors\n', '   */\n', '  function burnUnpaidTokens()\n', '    onlyOwner\n', '  {\n', '    require(isFinalized);\n', '    uint256 unpaidTokens = token.balanceOf(address(this));\n', '    token.burn(unpaidTokens);\n', '  }\n', '}']
['pragma solidity ^0.4.13;\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '/**\n', ' * @title Math\n', ' * @dev Assorted math operations\n', ' */\n', 'contract Math {\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '  }\n', '}\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'contract SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is SafeMath, ERC20Basic {\n', '  mapping(address => uint256) balances;\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint _value) returns (bool){\n', '    balances[msg.sender] = sub(balances[msg.sender],_value);\n', '    balances[_to] = add(balances[_to],_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '    balances[_to] = add(balances[_to],_value);\n', '    balances[_from] = sub(balances[_from],_value);\n', '    allowed[_from][msg.sender] = sub(_allowance,_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '}\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '  bool public mintingFinished = false;\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will recieve the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n', '    totalSupply = add(totalSupply,_amount);\n', '    balances[_to] = add(balances[_to],_amount);\n', '    Mint(_to, _amount);\n', '    return true;\n', '  }\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '  bool public paused = false;\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS paused\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS NOT paused\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '/**\n', ' * Pausable token\n', ' *\n', ' * Simple ERC20 Token example, with pausable token creation\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '  function transfer(address _to, uint256 _value) whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '  function transferFrom(address _from, address _to, uint256 _value) whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '}\n', '/**\n', ' * @title LimitedTransferToken\n', ' * @dev LimitedTransferToken defines the generic interface and the implementation to limit token\n', ' * transferability for different events. It is intended to be used as a base class for other token\n', ' * contracts.\n', ' * LimitedTransferToken has been designed to allow for different limiting factors,\n', ' * this can be achieved by recursively calling super.transferableTokens() until the base class is\n', ' * hit. For example:\n', ' *     function transferableTokens(address holder, uint64 time) constant public returns (uint256) {\n', ' *       return min256(unlockedTokens, super.transferableTokens(holder, time));\n', ' *     }\n', ' * A working example is VestedToken.sol:\n', ' * https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/VestedToken.sol\n', ' */\n', 'contract LimitedTransferToken is ERC20 {\n', '  /**\n', '   * @dev Checks whether it can transfer or otherwise throws.\n', '   */\n', '  modifier canTransfer(address _sender, uint256 _value) {\n', '   require(_value <= transferableTokens(_sender, uint64(now)));\n', '   _;\n', '  }\n', '  /**\n', '   * @dev Checks modifier and allows transfer if tokens are not locked.\n', '   * @param _to The address that will recieve the tokens.\n', '   * @param _value The amount of tokens to be transferred.\n', '   */\n', '  function transfer(address _to, uint256 _value) canTransfer(msg.sender, _value) returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '  /**\n', '  * @dev Checks modifier and allows transfer if tokens are not locked.\n', '  * @param _from The address that will send the tokens.\n', '  * @param _to The address that will recieve the tokens.\n', '  * @param _value The amount of tokens to be transferred.\n', '  */\n', '  function transferFrom(address _from, address _to, uint256 _value) canTransfer(_from, _value) returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '  /**\n', '   * @dev Default transferable tokens function returns all tokens for a holder (no limit).\n', '   * @dev Overwriting transferableTokens(address holder, uint64 time) is the way to provide the\n', '   * specific logic for limiting token transferability for a holder over time.\n', '   */\n', '  function transferableTokens(address holder, uint64 time) constant public returns (uint256) {\n', '    return balanceOf(holder);\n', '  }\n', '}\n', '/**\n', ' * @title Vested token\n', ' * @dev Tokens that can be vested for a group of addresses.\n', ' */\n', 'contract VestedToken is Math, StandardToken, LimitedTransferToken {\n', '  uint256 MAX_GRANTS_PER_ADDRESS = 20;\n', '  struct TokenGrant {\n', '    address granter;     // 20 bytes\n', '    uint256 value;       // 32 bytes\n', '    uint64 cliff;\n', '    uint64 vesting;\n', '    uint64 start;        // 3 * 8 = 24 bytes\n', '    bool revokable;\n', '    bool burnsOnRevoke;  // 2 * 1 = 2 bits? or 2 bytes?\n', '  } // total 78 bytes = 3 sstore per operation (32 per sstore)\n', '  mapping (address => TokenGrant[]) public grants;\n', '  event NewTokenGrant(address indexed from, address indexed to, uint256 value, uint256 grantId);\n', '  /**\n', '   * @dev Grant tokens to a specified address\n', '   * @param _to address The address which the tokens will be granted to.\n', '   * @param _value uint256 The amount of tokens to be granted.\n', '   * @param _start uint64 Time of the beginning of the grant.\n', '   * @param _cliff uint64 Time of the cliff period.\n', '   * @param _vesting uint64 The vesting period.\n', '   */\n', '  function grantVestedTokens(\n', '    address _to,\n', '    uint256 _value,\n', '    uint64 _start,\n', '    uint64 _cliff,\n', '    uint64 _vesting,\n', '    bool _revokable,\n', '    bool _burnsOnRevoke\n', '  ) public {\n', '    // Check for date inconsistencies that may cause unexpected behavior\n', '    require(_cliff >= _start && _vesting >= _cliff);\n', '    require(tokenGrantsCount(_to) < MAX_GRANTS_PER_ADDRESS);   // To prevent a user being spammed and have his balance locked (out of gas attack when calculating vesting).\n', '    uint256 count = grants[_to].push(\n', '                TokenGrant(\n', '                  _revokable ? msg.sender : 0, // avoid storing an extra 20 bytes when it is non-revokable\n', '                  _value,\n', '                  _cliff,\n', '                  _vesting,\n', '                  _start,\n', '                  _revokable,\n', '                  _burnsOnRevoke\n', '                )\n', '              );\n', '    transfer(_to, _value);\n', '    NewTokenGrant(msg.sender, _to, _value, count - 1);\n', '  }\n', '  /**\n', '   * @dev Revoke the grant of tokens of a specifed address.\n', '   * @param _holder The address which will have its tokens revoked.\n', '   * @param _grantId The id of the token grant.\n', '   */\n', '  function revokeTokenGrant(address _holder, uint256 _grantId) public {\n', '    TokenGrant storage grant = grants[_holder][_grantId];\n', '    require(grant.revokable);\n', '    require(grant.granter == msg.sender); // Only granter can revoke it\n', '    address receiver = grant.burnsOnRevoke ? 0xdead : msg.sender;\n', '    uint256 nonVested = nonVestedTokens(grant, uint64(now));\n', '    // remove grant from array\n', '    delete grants[_holder][_grantId];\n', '    grants[_holder][_grantId] = grants[_holder][sub(grants[_holder].length,1)];\n', '    grants[_holder].length -= 1;\n', '    balances[receiver] = add(balances[receiver],nonVested);\n', '    balances[_holder] = sub(balances[_holder],nonVested);\n', '    Transfer(_holder, receiver, nonVested);\n', '  }\n', '  /**\n', '   * @dev Calculate the total amount of transferable tokens of a holder at a given time\n', '   * @param holder address The address of the holder\n', '   * @param time uint64 The specific time.\n', "   * @return An uint256 representing a holder's total amount of transferable tokens.\n", '   */\n', '  function transferableTokens(address holder, uint64 time) constant public returns (uint256) {\n', '    uint256 grantIndex = tokenGrantsCount(holder);\n', '    if (grantIndex == 0) return super.transferableTokens(holder, time); // shortcut for holder without grants\n', '    // Iterate through all the grants the holder has, and add all non-vested tokens\n', '    uint256 nonVested = 0;\n', '    for (uint256 i = 0; i < grantIndex; i++) {\n', '      nonVested = add(nonVested, nonVestedTokens(grants[holder][i], time));\n', '    }\n', '    // Balance - totalNonVested is the amount of tokens a holder can transfer at any given time\n', '    uint256 vestedTransferable = sub(balanceOf(holder), nonVested);\n', '    // Return the minimum of how many vested can transfer and other value\n', '    // in case there are other limiting transferability factors (default is balanceOf)\n', '    return min256(vestedTransferable, super.transferableTokens(holder, time));\n', '  }\n', '  /**\n', '   * @dev Check the amount of grants that an address has.\n', '   * @param _holder The holder of the grants.\n', '   * @return A uint256 representing the total amount of grants.\n', '   */\n', '  function tokenGrantsCount(address _holder) constant returns (uint256 index) {\n', '    return grants[_holder].length;\n', '  }\n', '  /**\n', '   * @dev Calculate amount of vested tokens at a specifc time.\n', '   * @param tokens uint256 The amount of tokens grantted.\n', '   * @param time uint64 The time to be checked\n', '   * @param start uint64 A time representing the begining of the grant\n', '   * @param cliff uint64 The cliff period.\n', '   * @param vesting uint64 The vesting period.\n', '   * @return An uint256 representing the amount of vested tokensof a specif grant.\n', '   *  transferableTokens\n', '   *   |                         _/--------   vestedTokens rect\n', '   *   |                       _/\n', '   *   |                     _/\n', '   *   |                   _/\n', '   *   |                 _/\n', '   *   |                /\n', '   *   |              .|\n', '   *   |            .  |\n', '   *   |          .    |\n', '   *   |        .      |\n', '   *   |      .        |\n', '   *   |    .          |\n', '   *   +===+===========+---------+----------> time\n', '   *      Start       Clift    Vesting\n', '   */\n', '  function calculateVestedTokens(\n', '    uint256 tokens,\n', '    uint256 time,\n', '    uint256 start,\n', '    uint256 cliff,\n', '    uint256 vesting) constant returns (uint256)\n', '    {\n', '      // Shortcuts for before cliff and after vesting cases.\n', '      if (time < cliff) return 0;\n', '      if (time >= vesting) return tokens;\n', '      // Interpolate all vested tokens.\n', '      // As before cliff the shortcut returns 0, we can use just calculate a value\n', "      // in the vesting rect (as shown in above's figure)\n", '      // vestedTokens = tokens * (time - start) / (vesting - start)\n', '      uint256 vestedTokens = div(\n', '                                    mul(\n', '                                      tokens,\n', '                                      sub(time, start)\n', '                                      ),\n', '                                    sub(vesting, start)\n', '                                    );\n', '      return vestedTokens;\n', '  }\n', '  /**\n', '   * @dev Get all information about a specifc grant.\n', '   * @param _holder The address which will have its tokens revoked.\n', '   * @param _grantId The id of the token grant.\n', '   * @return Returns all the values that represent a TokenGrant(address, value, start, cliff,\n', '   * revokability, burnsOnRevoke, and vesting) plus the vested value at the current time.\n', '   */\n', '  function tokenGrant(address _holder, uint256 _grantId) constant returns (address granter, uint256 value, uint256 vested, uint64 start, uint64 cliff, uint64 vesting, bool revokable, bool burnsOnRevoke) {\n', '    TokenGrant storage grant = grants[_holder][_grantId];\n', '    granter = grant.granter;\n', '    value = grant.value;\n', '    start = grant.start;\n', '    cliff = grant.cliff;\n', '    vesting = grant.vesting;\n', '    revokable = grant.revokable;\n', '    burnsOnRevoke = grant.burnsOnRevoke;\n', '    vested = vestedTokens(grant, uint64(now));\n', '  }\n', '  /**\n', '   * @dev Get the amount of vested tokens at a specific time.\n', '   * @param grant TokenGrant The grant to be checked.\n', '   * @param time The time to be checked\n', '   * @return An uint256 representing the amount of vested tokens of a specific grant at a specific time.\n', '   */\n', '  function vestedTokens(TokenGrant grant, uint64 time) private constant returns (uint256) {\n', '    return calculateVestedTokens(\n', '      grant.value,\n', '      uint256(time),\n', '      uint256(grant.start),\n', '      uint256(grant.cliff),\n', '      uint256(grant.vesting)\n', '    );\n', '  }\n', '  /**\n', '   * @dev Calculate the amount of non vested tokens at a specific time.\n', '   * @param grant TokenGrant The grant to be checked.\n', '   * @param time uint64 The time to be checked\n', '   * @return An uint256 representing the amount of non vested tokens of a specifc grant on the\n', '   * passed time frame.\n', '   */\n', '  function nonVestedTokens(TokenGrant grant, uint64 time) private constant returns (uint256) {\n', '    return sub(grant.value,vestedTokens(grant, time));\n', '  }\n', '  /**\n', '   * @dev Calculate the date when the holder can trasfer all its tokens\n', '   * @param holder address The address of the holder\n', '   * @return An uint256 representing the date of the last transferable tokens.\n', '   */\n', '  function lastTokenIsTransferableDate(address holder) constant public returns (uint64 date) {\n', '    date = uint64(now);\n', '    uint256 grantIndex = grants[holder].length;\n', '    for (uint256 i = 0; i < grantIndex; i++) {\n', '      date = max64(grants[holder][i].vesting, date);\n', '    }\n', '  }\n', '}\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is SafeMath, StandardToken {\n', '    event Burn(address indexed burner, uint indexed value);\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint _value)\n', '        public\n', '    {\n', '        require(_value > 0);\n', '        address burner = msg.sender;\n', '        balances[burner] = sub(balances[burner], _value);\n', '        totalSupply = sub(totalSupply, _value);\n', '        Burn(burner, _value);\n', '    }\n', '}\n', '/**\n', ' * @title PLC\n', ' * @dev PLC is ERC20 token contract, inheriting MintableToken, PausableToken,\n', ' * VestedToken, BurnableToken contract from open zeppelin.\n', ' */\n', 'contract PLC is MintableToken, PausableToken, VestedToken, BurnableToken {\n', '  string public name = "PlusCoin";\n', '  string public symbol = "PLC";\n', '  uint256 public decimals = 18;\n', '}\n', '/**\n', ' * @title RefundVault\n', ' * @dev This contract is used for storing funds while a crowdsale\n', ' * is in progress. Supports refunding the money if crowdsale fails,\n', ' * and forwarding it if crowdsale is successful.\n', ' */\n', 'contract RefundVault is Ownable, SafeMath{\n', '  enum State { Active, Refunding, Closed }\n', '  mapping (address => uint256) public deposited;\n', '  mapping (address => uint256) public refunded;\n', '  State public state;\n', '  address public devMultisig;\n', '  address[] public reserveWallet;\n', '  event Closed();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '  /**\n', '   * @dev This constructor sets the addresses of multi-signature wallet and\n', '   * 5 reserve wallets.\n', '   * and forwarding it if crowdsale is successful.\n', '   * @param _devMultiSig address The address of multi-signature wallet.\n', '   * @param _reserveWallet address[5] The addresses of reserve wallet.\n', '   */\n', '  function RefundVault(address _devMultiSig, address[] _reserveWallet) {\n', '    state = State.Active;\n', '    devMultisig = _devMultiSig;\n', '    reserveWallet = _reserveWallet;\n', '  }\n', '  /**\n', '   * @dev This function is called when user buy tokens. Only RefundVault\n', '   * contract stores the Ether user sent which forwarded from crowdsale\n', '   * contract.\n', '   * @param investor address The address who buy the token from crowdsale.\n', '   */\n', '  function deposit(address investor) onlyOwner payable {\n', '    require(state == State.Active);\n', '    deposited[investor] = add(deposited[investor], msg.value);\n', '  }\n', '  event Transferred(address _to, uint _value);\n', '  /**\n', '   * @dev This function is called when crowdsale is successfully finalized.\n', '   */\n', '  function close() onlyOwner {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    uint256 balance = this.balance;\n', '    uint256 devAmount = div(balance, 10);\n', '    devMultisig.transfer(devAmount);\n', '    Transferred(devMultisig, devAmount);\n', '    uint256 reserveAmount = div(mul(balance, 9), 10);\n', '    uint256 reserveAmountForEach = div(reserveAmount, reserveWallet.length);\n', '    for(uint8 i = 0; i < reserveWallet.length; i++){\n', '      reserveWallet[i].transfer(reserveAmountForEach);\n', '      Transferred(reserveWallet[i], reserveAmountForEach);\n', '    }\n', '    Closed();\n', '  }\n', '  /**\n', '   * @dev This function is called when crowdsale is unsuccessfully finalized\n', '   * and refund is required.\n', '   */\n', '  function enableRefunds() onlyOwner {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    RefundsEnabled();\n', '  }\n', '  /**\n', '   * @dev This function allows for user to refund Ether.\n', '   */\n', '  function refund(address investor) returns (bool) {\n', '    require(state == State.Refunding);\n', '    if (refunded[investor] > 0) {\n', '      return false;\n', '    }\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    refunded[investor] = depositedValue;\n', '    investor.transfer(depositedValue);\n', '    Refunded(investor, depositedValue);\n', '    return true;\n', '  }\n', '}\n', '/**\n', ' * @title KYC\n', ' * @dev KYC contract handles the white list for PLCCrowdsale contract\n', ' * Only accounts registered in KYC contract can buy PLC token.\n', ' * Admins can register account, and the reason why\n', ' */\n', 'contract KYC is Ownable, SafeMath, Pausable {\n', '  // check the address is registered for token sale\n', '  mapping (address => bool) public registeredAddress;\n', '  // check the address is admin of kyc contract\n', '  mapping (address => bool) public admin;\n', '  event Registered(address indexed _addr);\n', '  event Unregistered(address indexed _addr);\n', '  event NewAdmin(address indexed _addr);\n', '  /**\n', '   * @dev check whether the address is registered for token sale or not.\n', '   * @param _addr address\n', '   */\n', '  modifier onlyRegistered(address _addr) {\n', '    require(isRegistered(_addr));\n', '    _;\n', '  }\n', '  /**\n', '   * @dev check whether the msg.sender is admin or not\n', '   */\n', '  modifier onlyAdmin() {\n', '    require(admin[msg.sender]);\n', '    _;\n', '  }\n', '  function KYC() {\n', '    admin[msg.sender] = true;\n', '  }\n', '  /**\n', '   * @dev set new admin as admin of KYC contract\n', '   * @param _addr address The address to set as admin of KYC contract\n', '   */\n', '  function setAdmin(address _addr)\n', '    public\n', '    onlyOwner\n', '  {\n', '    require(_addr != address(0) && admin[_addr] == false);\n', '    admin[_addr] = true;\n', '    NewAdmin(_addr);\n', '  }\n', '  /**\n', '   * @dev check the address is register for token sale\n', '   * @param _addr address The address to check whether register or not\n', '   */\n', '  function isRegistered(address _addr)\n', '    public\n', '    constant\n', '    returns (bool)\n', '  {\n', '    return registeredAddress[_addr];\n', '  }\n', '  /**\n', '   * @dev register the address for token sale\n', '   * @param _addr address The address to register for token sale\n', '   */\n', '  function register(address _addr)\n', '    public\n', '    onlyAdmin\n', '    whenNotPaused\n', '  {\n', '    require(_addr != address(0) && registeredAddress[_addr] == false);\n', '    registeredAddress[_addr] = true;\n', '    Registered(_addr);\n', '  }\n', '  /**\n', '   * @dev register the addresses for token sale\n', '   * @param _addrs address[] The addresses to register for token sale\n', '   */\n', '  function registerByList(address[] _addrs)\n', '    public\n', '    onlyAdmin\n', '    whenNotPaused\n', '  {\n', '    for(uint256 i = 0; i < _addrs.length; i++) {\n', '      require(_addrs[i] != address(0) && registeredAddress[_addrs[i]] == false);\n', '      registeredAddress[_addrs[i]] = true;\n', '      Registered(_addrs[i]);\n', '    }\n', '  }\n', '  /**\n', '   * @dev unregister the registered address\n', '   * @param _addr address The address to unregister for token sale\n', '   */\n', '  function unregister(address _addr)\n', '    public\n', '    onlyAdmin\n', '    onlyRegistered(_addr)\n', '  {\n', '    registeredAddress[_addr] = false;\n', '    Unregistered(_addr);\n', '  }\n', '  /**\n', '   * @dev unregister the registered addresses\n', '   * @param _addrs address[] The addresses to unregister for token sale\n', '   */\n', '  function unregisterByList(address[] _addrs)\n', '    public\n', '    onlyAdmin\n', '  {\n', '    for(uint256 i = 0; i < _addrs.length; i++) {\n', '      require(isRegistered(_addrs[i]));\n', '      registeredAddress[_addrs[i]] = false;\n', '      Unregistered(_addrs[i]);\n', '    }\n', '  }\n', '}\n', '/**\n', ' * @title PLCCrowdsale\n', ' * @dev PLCCrowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract PLCCrowdsale is Ownable, SafeMath, Pausable {\n', '  // token registery contract\n', '  KYC public kyc;\n', '  // The token being sold\n', '  PLC public token;\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint64 public startTime; // 1506384000; //2017.9.26 12:00 am (UTC)\n', '  uint64 public endTime; // 1507593600; //2017.10.10 12:00 am (UTC)\n', '  uint64[5] public deadlines; // [1506643200, 1506902400, 1507161600, 1507420800, 1507593600]; // [2017.9.26, 2017.10.02, 2017.10.05, 2017.10.08, 2017.10.10]\n', '  mapping (address => uint256) public presaleRate;\n', '  uint8[5] public rates = [240, 230, 220, 210, 200];\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '  // amount of ether buyer can buy\n', '  uint256 constant public maxGuaranteedLimit = 5000 ether;\n', '  // amount of ether presale buyer can buy\n', '  mapping (address => uint256) public presaleGuaranteedLimit;\n', '  mapping (address => bool) public isDeferred;\n', '  // amount of ether funded for each buyer\n', '  // bool: true if deferred otherwise false\n', '  mapping (bool => mapping (address => uint256)) public buyerFunded;\n', '  // amount of tokens minted for deferredBuyers\n', '  uint256 public deferredTotalTokens;\n', '  // buyable interval in block number 20\n', '  uint256 constant public maxCallFrequency = 20;\n', '  // block number when buyer buy\n', '  mapping (address => uint256) public lastCallBlock;\n', '  bool public isFinalized = false;\n', '  // minimum amount of funds to be raised in weis\n', '  uint256 public maxEtherCap; // 100000 ether;\n', '  uint256 public minEtherCap; // 30000 ether;\n', '  // investor address list\n', '  address[] buyerList;\n', '  mapping (address => bool) inBuyerList;\n', '  // number of refunded investors\n', '  uint256 refundCompleted;\n', '  // new owner of token contract when crowdsale is Finalized\n', '  address newTokenOwner = 0x568E2B5e9643D38e6D8146FeE8d80a1350b2F1B9;\n', '  // refund vault used to hold funds while crowdsale is running\n', '  RefundVault public vault;\n', '  // dev team multisig wallet\n', '  address devMultisig;\n', '  // reserve\n', '  address[] reserveWallet;\n', '  /**\n', '   * @dev Checks whether buyer is sending transaction too frequently\n', '   */\n', '  modifier canBuyInBlock () {\n', '    require(add(lastCallBlock[msg.sender], maxCallFrequency) < block.number);\n', '    lastCallBlock[msg.sender] = block.number;\n', '    _;\n', '  }\n', '  /**\n', '   * @dev Checks whether ico is started\n', '   */\n', '  modifier onlyAfterStart() {\n', '    require(now >= startTime && now <= endTime);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev Checks whether ico is not started\n', '   */\n', '  modifier onlyBeforeStart() {\n', '    require(now < startTime);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev Checks whether the account is registered\n', '   */\n', '  modifier onlyRegistered(address _addr) {\n', '    require(kyc.isRegistered(_addr));\n', '    _;\n', '  }\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '  event PresaleTokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '  event DeferredPresaleTokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '  /**\n', '   * event for finalize logging\n', '   */\n', '  event Finalized();\n', '  /**\n', '   * event for register presale logging\n', '   * @param presaleInvestor who register for presale\n', '   * @param presaleAmount weis presaleInvestor can buy as presale\n', '   * @param _presaleRate rate at which presaleInvestor can buy tokens\n', '   * @param _isDeferred whether the investor is deferred investor\n', '   */\n', '  event RegisterPresale(address indexed presaleInvestor, uint256 presaleAmount, uint256 _presaleRate, bool _isDeferred);\n', '  /**\n', '   * event for unregister presale logging\n', '   * @param presaleInvestor who register for presale\n', '   */\n', '  event UnregisterPresale(address indexed presaleInvestor);\n', '  /**\n', '   * @dev PLCCrowdsale constructor sets variables\n', '   * @param _kyc address The address which KYC contract is deployed at\n', '   * @param _token address The address which PLC contract is deployed at\n', '   * @param _refundVault address The address which RefundVault is deployed at\n', '   * @param _devMultisig address The address which MultiSigWallet for devTeam is deployed at\n', '   * @param _reserveWallet address[5] The address list of reserveWallet addresses\n', '   * @param _timelines uint64[5] list of timelines from startTime to endTime with timelines for rate changes\n', '   * @param _maxEtherCap uint256 The value which maximum weis to be funded\n', '   * @param _minEtherCap uint256 The value which minimum weis to be funded\n', '   */\n', '  function PLCCrowdsale(\n', '    address _kyc,\n', '    address _token,\n', '    address _refundVault,\n', '    address _devMultisig,\n', '    address[] _reserveWallet,\n', '    uint64[6] _timelines, // [startTime, ... , endTime]\n', '    uint256 _maxEtherCap,\n', '    uint256 _minEtherCap)\n', '  {\n', '    //timelines check\n', '    for(uint8 i = 0; i < _timelines.length-1; i++){\n', '      require(_timelines[i] < _timelines[i+1]);\n', '    }\n', '    require(_timelines[0] >= now);\n', '    //address check\n', '    require(_kyc != 0x00 && _token != 0x00 && _refundVault != 0x00 && _devMultisig != 0x00);\n', '    for(i = 0; i < _reserveWallet.length; i++){\n', '      require(_reserveWallet[i] != 0x00);\n', '    }\n', '    //cap check\n', '    require(_minEtherCap < _maxEtherCap);\n', '    kyc   = KYC(_kyc);\n', '    token = PLC(_token);\n', '    vault = RefundVault(_refundVault);\n', '    devMultisig   = _devMultisig;\n', '    reserveWallet = _reserveWallet;\n', '    startTime    = _timelines[0];\n', '    endTime      = _timelines[5];\n', '    deadlines[0] = _timelines[1];\n', '    deadlines[1] = _timelines[2];\n', '    deadlines[2] = _timelines[3];\n', '    deadlines[3] = _timelines[4];\n', '    deadlines[4] = _timelines[5];\n', '    maxEtherCap  = _maxEtherCap;\n', '    minEtherCap  = _minEtherCap;\n', '  }\n', '  /**\n', '   * @dev PLCCrowdsale fallback function for buying Tokens\n', '   */\n', '  function () payable {\n', '    if(isDeferred[msg.sender])\n', '      buyDeferredPresaleTokens(msg.sender);\n', '    else if(now < startTime)\n', '      buyPresaleTokens(msg.sender);\n', '    else\n', '      buyTokens();\n', '  }\n', '  /**\n', '   * @dev push all token buyers in list\n', '   * @param _addr address Account to push into buyerList\n', '   */\n', '  function pushBuyerList(address _addr) internal {\n', '    if (!inBuyerList[_addr]) {\n', '      inBuyerList[_addr] = true;\n', '      buyerList.push(_addr);\n', '    }\n', '  }\n', '  /**\n', '   * @dev register presale account checking modifier\n', '   * @param presaleInvestor address The account to register as presale account\n', '   * @param presaleAmount uint256 The value which investor is allowed to buy\n', '   * @param _presaleRate uint256 The rate at which investor buy tokens\n', '   * @param _isDeferred bool whether presaleInvestor is deferred buyer\n', '   */\n', '  function registerPresale(address presaleInvestor, uint256 presaleAmount, uint256 _presaleRate, bool _isDeferred)\n', '    onlyBeforeStart\n', '    onlyOwner\n', '  {\n', '    require(presaleInvestor != 0x00);\n', '    require(presaleAmount > 0);\n', '    require(_presaleRate > 0);\n', '    require(presaleGuaranteedLimit[presaleInvestor] == 0);\n', '    presaleGuaranteedLimit[presaleInvestor] = presaleAmount;\n', '    presaleRate[presaleInvestor] = _presaleRate;\n', '    isDeferred[presaleInvestor] = _isDeferred;\n', '    if(_isDeferred) {\n', '      weiRaised = add(weiRaised, presaleAmount);\n', '      uint256 deferredInvestorToken = mul(presaleAmount, _presaleRate);\n', '      uint256 deferredDevToken = div(mul(deferredInvestorToken, 20), 70);\n', '      uint256 deferredReserveToken = div(mul(deferredInvestorToken, 10), 70);\n', '      uint256 totalAmount = add(deferredInvestorToken, add(deferredDevToken, deferredReserveToken));\n', '      token.mint(address(this), totalAmount);\n', '      deferredTotalTokens = add(deferredTotalTokens, totalAmount);\n', '    }\n', '    RegisterPresale(presaleInvestor, presaleAmount, _presaleRate, _isDeferred);\n', '  }\n', '  /**\n', '   * @dev register presale account checking modifier\n', '   * @param presaleInvestor address The account to register as presale account\n', '   */\n', '  function unregisterPresale(address presaleInvestor)\n', '    onlyBeforeStart\n', '    onlyOwner\n', '  {\n', '    require(presaleInvestor != 0x00);\n', '    require(presaleGuaranteedLimit[presaleInvestor] > 0);\n', '    uint256 _amount = presaleGuaranteedLimit[presaleInvestor];\n', '    uint256 _rate = presaleRate[presaleInvestor];\n', '    bool _isDeferred = isDeferred[presaleInvestor];\n', '    require(buyerFunded[_isDeferred][presaleInvestor] == 0);\n', '    presaleGuaranteedLimit[presaleInvestor] = 0;\n', '    presaleRate[presaleInvestor] = 0;\n', '    isDeferred[presaleInvestor] = false;\n', '    if(_isDeferred) {\n', '      weiRaised = sub(weiRaised, _amount);\n', '      uint256 deferredInvestorToken = mul(_amount, _rate);\n', '      uint256 deferredDevToken = div(mul(deferredInvestorToken, 20), 70);\n', '      uint256 deferredReserveToken = div(mul(deferredInvestorToken, 10), 70);\n', '      uint256 totalAmount = add(deferredInvestorToken, add(deferredDevToken, deferredReserveToken));\n', '      deferredTotalTokens = sub(deferredTotalTokens, totalAmount);\n', '      token.burn(totalAmount);\n', '    }\n', '    UnregisterPresale(presaleInvestor);\n', '  }\n', '  /**\n', '   * @dev buy token (deferred presale investor)\n', '   * @param beneficiary address The account to receive tokens\n', '   */\n', '  function buyDeferredPresaleTokens(address beneficiary)\n', '    payable\n', '    whenNotPaused\n', '  {\n', '    require(beneficiary != 0x00);\n', '    require(isDeferred[beneficiary]);\n', '    uint guaranteedLimit = presaleGuaranteedLimit[beneficiary];\n', '    require(guaranteedLimit > 0);\n', '    uint256 weiAmount = msg.value;\n', '    require(weiAmount != 0);\n', '    uint256 totalAmount = add(buyerFunded[true][beneficiary], weiAmount);\n', '    uint256 toFund;\n', '    if (totalAmount > guaranteedLimit) {\n', '      toFund = sub(guaranteedLimit, buyerFunded[true][beneficiary]);\n', '    } else {\n', '      toFund = weiAmount;\n', '    }\n', '    require(toFund > 0);\n', '    require(weiAmount >= toFund);\n', '    uint256 tokens = mul(toFund, presaleRate[beneficiary]);\n', '    uint256 toReturn = sub(weiAmount, toFund);\n', '    buy(beneficiary, tokens, toFund, toReturn, true);\n', '    // token distribution : 70% for sale, 20% for dev, 10% for reserve\n', '    uint256 devAmount = div(mul(tokens, 20), 70);\n', '    uint256 reserveAmount = div(mul(tokens, 10), 70);\n', '    distributeToken(devAmount, reserveAmount, true);\n', '    // ether distribution : 10% for dev, 90% for reserve\n', '    uint256 devEtherAmount = div(toFund, 10);\n', '    uint256 reserveEtherAmount = div(mul(toFund, 9), 10);\n', '    distributeEther(devEtherAmount, reserveEtherAmount);\n', '    DeferredPresaleTokenPurchase(msg.sender, beneficiary, toFund, tokens);\n', '  }\n', '  /**\n', '   * @dev buy token (normal presale investor)\n', '   * @param beneficiary address The account to receive tokens\n', '   */\n', '  function buyPresaleTokens(address beneficiary)\n', '    payable\n', '    whenNotPaused\n', '    onlyBeforeStart\n', '  {\n', '    // check validity\n', '    require(beneficiary != 0x00);\n', '    require(validPurchase());\n', '    require(!isDeferred[beneficiary]);\n', '    uint guaranteedLimit = presaleGuaranteedLimit[beneficiary];\n', '    require(guaranteedLimit > 0);\n', '    // calculate eth amount\n', '    uint256 weiAmount = msg.value;\n', '    uint256 totalAmount = add(buyerFunded[false][beneficiary], weiAmount);\n', '    uint256 toFund;\n', '    if (totalAmount > guaranteedLimit) {\n', '      toFund = sub(guaranteedLimit, buyerFunded[false][beneficiary]);\n', '    } else {\n', '      toFund = weiAmount;\n', '    }\n', '    require(toFund > 0);\n', '    require(weiAmount >= toFund);\n', '    uint256 tokens = mul(toFund, presaleRate[beneficiary]);\n', '    uint256 toReturn = sub(weiAmount, toFund);\n', '    buy(beneficiary, tokens, toFund, toReturn, false);\n', '    forwardFunds(toFund);\n', '    PresaleTokenPurchase(msg.sender, beneficiary, toFund, tokens);\n', '  }\n', '  /**\n', '   * @dev buy token (normal investors)\n', '   */\n', '  function buyTokens()\n', '    payable\n', '    whenNotPaused\n', '    canBuyInBlock\n', '    onlyAfterStart\n', '    onlyRegistered(msg.sender)\n', '  {\n', '    // check validity\n', '    require(validPurchase());\n', '    require(buyerFunded[false][msg.sender] < maxGuaranteedLimit);\n', '    // calculate eth amount\n', '    uint256 weiAmount = msg.value;\n', '    uint256 totalAmount = add(buyerFunded[false][msg.sender], weiAmount);\n', '    uint256 toFund;\n', '    if (totalAmount > maxGuaranteedLimit) {\n', '      toFund = sub(maxGuaranteedLimit, buyerFunded[false][msg.sender]);\n', '    } else {\n', '      toFund = weiAmount;\n', '    }\n', '    if(add(weiRaised,toFund) > maxEtherCap) {\n', '      toFund = sub(maxEtherCap, weiRaised);\n', '    }\n', '    require(toFund > 0);\n', '    require(weiAmount >= toFund);\n', '    uint256 tokens = mul(toFund, getRate());\n', '    uint256 toReturn = sub(weiAmount, toFund);\n', '    buy(msg.sender, tokens, toFund, toReturn, false);\n', '    forwardFunds(toFund);\n', '    TokenPurchase(msg.sender, msg.sender, toFund, tokens);\n', '  }\n', '  /**\n', '   * @dev get buy rate for now\n', '   * @return rate uint256 rate for now\n', '   */\n', '  function getRate() constant returns (uint256 rate) {\n', '    for(uint8 i = 0; i < deadlines.length; i++)\n', '      if(now < deadlines[i])\n', '        return rates[i];\n', '      return rates[rates.length-1];//should never be returned, but to be sure to not divide by 0\n', '  }\n', '  /**\n', '   * @dev get the number of buyers\n', '   * @return uint256 the number of buyers\n', '   */\n', '  function getBuyerNumber() constant returns (uint256) {\n', '    return buyerList.length;\n', '  }\n', '  /**\n', '   * @dev send ether to the fund collection wallet\n', '   * @param toFund uint256 The value of weis to send to vault\n', '   */\n', '  function forwardFunds(uint256 toFund) internal {\n', '    vault.deposit.value(toFund)(msg.sender);\n', '  }\n', '  /**\n', '   * @dev checks whether purchase value is not zero and maxEtherCap is not reached\n', '   * @return true if the transaction can buy tokens\n', '   */\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return nonZeroPurchase && !maxReached();\n', '  }\n', '  function buy(\n', '    address _beneficiary,\n', '    uint256 _tokens,\n', '    uint256 _toFund,\n', '    uint256 _toReturn,\n', '    bool _isDeferred)\n', '    internal\n', '  {\n', '    if (!_isDeferred) {\n', '      pushBuyerList(msg.sender);\n', '      weiRaised = add(weiRaised, _toFund);\n', '    }\n', '    buyerFunded[_isDeferred][_beneficiary] = add(buyerFunded[_isDeferred][_beneficiary], _toFund);\n', '    if (!_isDeferred) {\n', '      token.mint(address(this), _tokens);\n', '    }\n', '    // 1 week lock\n', '    token.grantVestedTokens(\n', '      _beneficiary,\n', '      _tokens,\n', '      uint64(endTime),\n', '      uint64(endTime + 1 weeks),\n', '      uint64(endTime + 1 weeks),\n', '      false,\n', '      false);\n', '    // return ether if needed\n', '    if (_toReturn > 0) {\n', '      msg.sender.transfer(_toReturn);\n', '    }\n', '  }\n', '  /**\n', '   * @dev distribute token to multisig wallet and reserve walletes.\n', '   * This function is called in two context where crowdsale is closing and\n', '   * deferred token is bought.\n', '   * @param devAmount uint256 token amount for dev multisig wallet\n', '   * @param reserveAmount uint256 token amount for reserve walletes\n', '   * @param _isDeferred bool check whether function is called when deferred token is sold\n', '   */\n', '  function distributeToken(uint256 devAmount, uint256 reserveAmount, bool _isDeferred) internal {\n', '    uint256 eachReserveAmount = div(reserveAmount, reserveWallet.length);\n', '    token.grantVestedTokens(\n', '      devMultisig,\n', '      devAmount,\n', '      uint64(endTime),\n', '      uint64(endTime),\n', '      uint64(endTime + 1 years),\n', '      false,\n', '      false);\n', '    if (_isDeferred) {\n', '      for(uint8 i = 0; i < reserveWallet.length; i++) {\n', '        token.transfer(reserveWallet[i], eachReserveAmount);\n', '      }\n', '    } else {\n', '      for(uint8 j = 0; j < reserveWallet.length; j++) {\n', '        token.mint(reserveWallet[j], eachReserveAmount);\n', '      }\n', '    }\n', '  }\n', '  /**\n', '   * @dev distribute ether to multisig wallet and reserve walletes\n', '   * @param devAmount uint256 ether amount for dev multisig wallet\n', '   * @param reserveAmount uint256 ether amount for reserve walletes\n', '   */\n', '  function distributeEther(uint256 devAmount, uint256 reserveAmount) internal {\n', '    uint256 eachReserveAmount = div(reserveAmount, reserveWallet.length);\n', '    devMultisig.transfer(devAmount);\n', '    for(uint8 i = 0; i < reserveWallet.length; i++){\n', '      reserveWallet[i].transfer(eachReserveAmount);\n', '    }\n', '  }\n', '  /**\n', '   * @dev checks whether crowdsale is ended\n', '   * @return true if crowdsale event has ended\n', '   */\n', '  function hasEnded() public constant returns (bool) {\n', '    return now > endTime;\n', '  }\n', '  /**\n', '   * @dev should be called after crowdsale ends, to do\n', '   */\n', '  function finalize() {\n', '    require(!isFinalized);\n', '    require(hasEnded() || maxReached());\n', '    finalization();\n', '    Finalized();\n', '    isFinalized = true;\n', '  }\n', '  /**\n', '   * @dev end token minting on finalization, mint tokens for dev team and reserve wallets\n', '   */\n', '  function finalization() internal {\n', '    if (minReached()) {\n', '      vault.close();\n', '      uint256 totalToken = token.totalSupply();\n', '      uint256 tokenSold = sub(totalToken, deferredTotalTokens);\n', '      // token distribution : 70% for sale, 20% for dev, 10% for reserve\n', '      uint256 devAmount = div(mul(tokenSold, 20), 70);\n', '      uint256 reserveAmount = div(mul(tokenSold, 10), 70);\n', '      token.mint(address(this), devAmount);\n', '      distributeToken(devAmount, reserveAmount, false);\n', '    } else {\n', '      vault.enableRefunds();\n', '    }\n', '    token.finishMinting();\n', '    token.transferOwnership(newTokenOwner);\n', '  }\n', '  /**\n', '   * @dev should be called when ethereum is forked during crowdsale for refunding ethers on not supported fork\n', '   */\n', '  function finalizeWhenForked() onlyOwner whenPaused {\n', '    require(!isFinalized);\n', '    isFinalized = true;\n', '    vault.enableRefunds();\n', '    token.finishMinting();\n', '  }\n', '  /**\n', '   * @dev refund a lot of investors at a time checking onlyOwner\n', '   * @param numToRefund uint256 The number of investors to refund\n', '   */\n', '  function refundAll(uint256 numToRefund) onlyOwner {\n', '    require(isFinalized);\n', '    require(!minReached());\n', '    require(numToRefund > 0);\n', '    uint256 limit = refundCompleted + numToRefund;\n', '    if (limit > buyerList.length) {\n', '      limit = buyerList.length;\n', '    }\n', '    for(uint256 i = refundCompleted; i < limit; i++) {\n', '      vault.refund(buyerList[i]);\n', '    }\n', '    refundCompleted = limit;\n', '  }\n', '  /**\n', '   * @dev if crowdsale is unsuccessful, investors can claim refunds here\n', '   * @param investor address The account to be refunded\n', '   */\n', '  function claimRefund(address investor) returns (bool) {\n', '    require(isFinalized);\n', '    require(!minReached());\n', '    return vault.refund(investor);\n', '  }\n', '  /**\n', '   * @dev Checks whether maxEtherCap is reached\n', '   * @return true if max ether cap is reaced\n', '   */\n', '  function maxReached() public constant returns (bool) {\n', '    return weiRaised == maxEtherCap;\n', '  }\n', '  /**\n', '   * @dev Checks whether minEtherCap is reached\n', '   * @return true if min ether cap is reaced\n', '   */\n', '  function minReached() public constant returns (bool) {\n', '    return weiRaised >= minEtherCap;\n', '  }\n', '  /**\n', '   * @dev should burn unpaid tokens of deferred presale investors\n', '   */\n', '  function burnUnpaidTokens()\n', '    onlyOwner\n', '  {\n', '    require(isFinalized);\n', '    uint256 unpaidTokens = token.balanceOf(address(this));\n', '    token.burn(unpaidTokens);\n', '  }\n', '}']
