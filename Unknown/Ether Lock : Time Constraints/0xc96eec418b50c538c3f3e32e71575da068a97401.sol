['/**\n', ' *  _____             _   _                                   \n', ' * /  __ \\           | | (_)                                  \n', ' * | /  \\/ ___  _ __ | |_ _ _ __   __ _  ___ _ __   ___ _   _ \n', " * | |    / _ \\| '_ \\| __| | '_ \\ / _` |/ _ \\ '_ \\ / __| | | |\n", ' * | \\__/\\ (_) | | | | |_| | | | | (_| |  __/ | | | (__| |_| |\n', ' *  \\____/\\___/|_| |_|\\__|_|_| |_|\\__, |\\___|_| |_|\\___|\\__, |\n', ' *                                 __/ |                 __/ |\n', ' *                                |___/                 |___/ \n', ' *\n', ' */\n', '\n', '/**\n', ' * Overflow aware uint math functions.\n', ' *\n', ' * Inspired by https://github.com/MakerDAO/maker-otc/blob/master/contracts/simple_market.sol\n', ' */\n', 'pragma solidity ^0.4.8;\n', 'contract SafeMath {\n', '  //internals\n', '\n', '  function safeMul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) throw;\n', '  }\n', '}\n', '\n', '/**\n', ' * ERC 20 token\n', ' *\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract Token {\n', '\n', '    /// @return total amount of tokens\n', '    function totalSupply() constant returns (uint256 supply) {}\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '}\n', '\n', '/**\n', ' * ERC 20 token\n', ' *\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract StandardToken is Token {\n', '\n', '    /**\n', '     * Reviewed:\n', '     * - Interger overflow = OK, checked\n', '     */\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', "        //Default assumes totalSupply can't be over max (2^256 - 1).\n", "        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n", '        //Replace the if with this one instead.\n', '        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        //if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    uint256 public totalSupply;\n', '\n', '}\n', '\n', '\n', '/**\n', ' * Contingency crowdsale crowdsale contract. Modified from FirstBlood crowdsale contract.\n', ' *\n', ' * Security criteria evaluated against http://ethereum.stackexchange.com/questions/8551/methodological-security-review-of-a-smart-contract\n', ' *\n', ' *\n', ' */\n', 'contract ContingencyToken is StandardToken, SafeMath {\n', '    /*\n', '        Modified version of the FirstBlood.io token and token sale\n', '    */\n', '    \n', '    string public name = "Contingency Token";\n', '    string public symbol = "CTY";\n', '    uint public decimals = 18;\n', '    uint public startBlock = 3100000; //crowdsale start block\n', '    uint public endBlock = 3272800; //crowdsale end block\n', '\n', '    // Initial founder address\n', '    // All deposited ETH will be forwarded to this address.\n', '    address public founder = 0x4485f44aa1f99b43BD6400586C1B2A02ec263Ec0;\n', '\n', '    uint public etherCap = 850000 * 10**18; //max amount raised during crowdsale (8.5M USD worth of ether will be measured with a moving average market price at beginning of the crowdsale)\n', '    uint public transferLockup = 370284; //transfers are locked for this many blocks after endBlock (assuming 14 second blocks, this is 2 months)\n', '    uint public founderLockup = 1126285; //founder allocation cannot be created until this many blocks after endBlock (assuming 14 second blocks, this is 6 months)\n', '\n', '    uint public founderAllocation = 10 * 10**16; //10% of token supply allocated post-crowdsale for the founder allocation\n', '    bool public founderAllocated = false; //this will change to true when the founder fund is allocated\n', '    uint public presaleTokenSupply = 0; //this will keep track of the token supply created during the crowdsale\n', '    uint public presaleEtherRaised = 0; //this will keep track of the Ether raised during the crowdsale\n', '    bool public halted = false; //the founder address can set this to true to halt the crowdsale due to emergency\n', '    event Buy(address indexed sender, uint eth, uint fbt);\n', '    event Withdraw(address indexed sender, address to, uint eth);\n', '    event AllocateFounderTokens(address indexed sender);\n', '\n', '    /**\n', '     * Security review\n', '     *\n', "     * - Integer overflow: does not apply, blocknumber can't grow that high\n", '     * - Division is the last operation and constant, should not cause issues\n', '     * - Price function plotted https://github.com/Firstbloodio/token/issues/2\n', '     */\n', '    function price() constant returns(uint) {\n', '        if (block.number>=startBlock && block.number<startBlock+250) return 170; //function() {\n', '        if (block.number<startBlock || block.number>endBlock) return 100; //default price\n', '        return 100 + 4*(endBlock - block.number)/(endBlock - startBlock + 1)*67/4; //crowdsale price\n', '    }\n', '\n', '    // price() exposed for unit tests\n', '    function testPrice(uint blockNumber) constant returns(uint) {\n', '        if (blockNumber>=startBlock && blockNumber<startBlock+250) return 170; //hour one\n', '        if (blockNumber<startBlock || blockNumber>endBlock) return 100; //default price\n', '        return 100 + 4*(endBlock - blockNumber)/(endBlock - startBlock + 1)*67/4; //crowdsale price\n', '    }\n', '\n', '    // Buy entry point\n', '    function() payable {\n', '        buyRecipient(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * Main token buy function.\n', '     *\n', '     * Security review\n', '     *\n', '     * - Integer math: ok - using SafeMath\n', '     *\n', '     * - halt flag added - ok\n', '     *\n', '     * Applicable tests:\n', '     *\n', '     * - Test halting, buying, and failing\n', '     * - Test buying on behalf of a recipient\n', '     * - Test buy\n', '     * - Test unhalting, buying, and succeeding\n', '     * - Test buying after the sale ends\n', '     *\n', '     */\n', '    function buyRecipient(address recipient) payable {\n', '        if (block.number<startBlock || block.number>endBlock || safeAdd(presaleEtherRaised,msg.value)>etherCap || halted) throw;\n', '        uint tokens = safeMul(msg.value, price());\n', '        balances[recipient] = safeAdd(balances[recipient], tokens);\n', '        totalSupply = safeAdd(totalSupply, tokens);\n', '        presaleEtherRaised = safeAdd(presaleEtherRaised, msg.value);\n', '\n', '        //if (!founder.send(msg.value)) throw; //immediately send Ether to founder address\n', '        //Due to Metamask not sending enough gas with this method, we send ether later with the function "founderWithdraw" below\n', '\n', '        Buy(recipient, msg.value, tokens);\n', '    }\n', '    \n', '    function founderWithdraw(uint amount) {\n', '        // Founder to receive presale ether\n', '        if (msg.sender!=founder) throw;\n', '        if (!founder.send(amount)) throw;\n', '    }\n', '\n', '    /**\n', '     * Set up founder address token balance.\n', '     *\n', '     * Security review\n', '     *\n', '     * - Integer math: ok - only called once with fixed parameters\n', '     *\n', '     * Applicable tests:\n', '     *\n', '     * - Test bounty and ecosystem allocation\n', '     * - Test bounty and ecosystem allocation twice\n', '     *\n', '     */\n', '    function allocateFounderTokens() {\n', '        if (msg.sender!=founder) throw;\n', '        if (block.number <= endBlock + founderLockup) throw;\n', '        if (founderAllocated) throw;\n', '        //if (!bountyAllocated || !ecosystemAllocated) throw; // Extra bounty or ecosystem allocation for founders disabled for contingency\n', '        balances[founder] = safeAdd(balances[founder], presaleTokenSupply * founderAllocation / (1 ether));\n', '        totalSupply = safeAdd(totalSupply, presaleTokenSupply * founderAllocation / (1 ether));\n', '        founderAllocated = true;\n', '        AllocateFounderTokens(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * Emergency Stop crowdsale.\n', '     *\n', '     *  Applicable tests:\n', '     *\n', '     * - Test unhalting, buying, and succeeding\n', '     */\n', '    function halt() {\n', '        if (msg.sender!=founder) throw;\n', '        halted = true;\n', '    }\n', '\n', '    function unhalt() {\n', '        if (msg.sender!=founder) throw;\n', '        halted = false;\n', '    }\n', '\n', '    /**\n', '     * Change founder address (where crowdsale ETH is being forwarded).\n', '     *\n', '     * Applicable tests:\n', '     *\n', '     * - Test founder change by hacker\n', '     * - Test founder change\n', '     * - Test founder token allocation twice\n', '     *\n', '     */\n', '\n', '    function changeFounder(address newFounder) {\n', '        if (msg.sender!=founder) throw;\n', '        founder = newFounder;\n', '    }\n', '\n', '    /**\n', '     * ERC 20 Standard Token interface transfer function\n', '     *\n', '     * Prevent transfers until freeze period is over.\n', '     *\n', '     * Applicable tests:\n', '     *\n', '     * - Test restricted early transfer\n', '     * - Test transfer after restricted period\n', '     */\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        if (block.number <= endBlock + transferLockup && msg.sender!=founder) throw;\n', '        return super.transfer(_to, _value);\n', '    }\n', '    /**\n', '     * ERC 20 Standard Token interface transfer function\n', '     *\n', '     * Prevent transfers until freeze period is over.\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (block.number <= endBlock + transferLockup && msg.sender!=founder) throw;\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '}']