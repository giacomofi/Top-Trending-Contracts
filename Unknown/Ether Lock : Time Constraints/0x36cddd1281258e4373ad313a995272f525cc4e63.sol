['pragma solidity ^0.4.15;\n', '\n', 'contract IToken { \n', '    function issue(address _recipient, uint256 _value) returns (bool);\n', '    function totalSupply() constant returns (uint256);\n', '    function unlock() returns (bool);\n', '}\n', '\n', 'contract CoinoorCrowdsale {\n', '\n', '    // Crowdsale details\n', '    address public beneficiary; // Company address multisig (100% eth + 4.9 mln tokens)\n', '    address public creator; // Creator (.25 mln tokens)\n', '    address public marketing; // Marketing team (2.5 mln tokens)\n', '    address public bounty; // Bounty (100k tokens)\n', '    address public confirmedBy; // Address that confirmed beneficiary\n', '    uint256 public maxSupply = 65000000 * 10**8; // 65 mln tokens\n', '    uint256 public minAcceptedAmount = 40 finney; // 1/25 ether\n', '\n', '    // Eth to CNR rate\n', '    uint256 public ratePreICO = 450; // 50% bonus\n', '    uint256 public rateWaiting = 0;\n', '    uint256 public rateAngelDay = 420; // 40% bonus\n', '    uint256 public rateFirstWeek = 390; // 30% bonus\n', '    uint256 public rateSecondWeek = 375; // 25% bonus\n', '    uint256 public rateThirdWeek = 360; // 20% bonus\n', '    uint256 public rateLastWeek = 330; // 10% bonus\n', '\n', '    uint256 public ratePreICOEnd = 10 days;\n', '    uint256 public rateWaitingEnd = 20 days;\n', '    uint256 public rateAngelDayEnd = 21 days;\n', '    uint256 public rateFirstWeekEnd = 28 days;\n', '    uint256 public rateSecondWeekEnd = 35 days;\n', '    uint256 public rateThirdWeekEnd = 42 days;\n', '    uint256 public rateLastWeekEnd = 49 days;\n', '\n', '    enum Stages {\n', '        Deploying,\n', '        InProgress,\n', '        Ended\n', '    }\n', '\n', '    Stages public stage = Stages.Deploying;\n', '\n', '    // Crowdsale state\n', '    uint256 public start;\n', '    uint256 public end;\n', '    uint256 public raised;\n', '\n', '    // Token\n', '    IToken public token;\n', '\n', '\n', '    /**\n', '     * Throw if at stage other than current stage\n', '     * \n', '     * @param _stage expected stage to test for\n', '     */\n', '    modifier atStage(Stages _stage) {\n', '        require(stage == _stage);\n', '\n', '        _;\n', '    }\n', '    \n', '\n', '    /**\n', '     * Throw if sender is not beneficiary\n', '     */\n', '    modifier onlyBeneficiary() {\n', '        require(beneficiary == msg.sender);\n', '\n', '        _;\n', '    }\n', '\n', '\n', '    /**\n', '     * Construct\n', '     *\n', '     * @param _tokenAddress The address of the token contact\n', '     * @param _beneficiary The address of the beneficiary\n', '     * @param _creator The address of the tech team\n', '     * @param _marketing The address of the marketing team\n', '     * @param _bounty The address of the bounty wallet\n', '     * @param _start The timestamp of the start date\n', '     */\n', '    function CoinoorCrowdsale(address _tokenAddress, address _beneficiary, address _creator, address _marketing, address _bounty, uint256 _start) {\n', '        token = IToken(_tokenAddress);\n', '        beneficiary = _beneficiary;\n', '        creator = _creator;\n', '        marketing = _marketing;\n', '        bounty = _bounty;\n', '        start = _start;\n', '        end = start + rateLastWeekEnd;\n', '    }\n', '\n', '\n', '    /**\n', '     * Deploy and start the crowdsale\n', '     */\n', '    function init() atStage(Stages.Deploying) {\n', '        stage = Stages.InProgress;\n', '\n', '        // Create tokens\n', '        if (!token.issue(beneficiary, 4900000 * 10**8)) {\n', '            stage = Stages.Deploying;\n', '            revert();\n', '        }\n', '\n', '        if (!token.issue(creator, 2500000 * 10**8)) {\n', '            stage = Stages.Deploying;\n', '            revert();\n', '        }\n', '\n', '        if (!token.issue(marketing, 2500000 * 10**8)) {\n', '            stage = Stages.Deploying;\n', '            revert();\n', '        }\n', '\n', '        if (!token.issue(bounty, 100000 * 10**8)) {\n', '            stage = Stages.Deploying;\n', '            revert();\n', '        }\n', '    }\n', '\n', '\n', '    /**\n', '     * For testing purposes\n', '     *\n', '     * @return The beneficiary address\n', '     */\n', '    function confirmBeneficiary() onlyBeneficiary {\n', '        confirmedBy = msg.sender;\n', '    }\n', '\n', '\n', '    /**\n', '     * Convert `_wei` to an amount in tokens using \n', '     * the current rate\n', '     *\n', '     * @param _wei amount of wei to convert\n', '     * @return The amount in tokens\n', '     */\n', '    function toTokens(uint256 _wei) returns (uint256 amount) {\n', '        uint256 rate = 0;\n', '        if (stage != Stages.Ended && now >= start && now <= end) {\n', '\n', '            // Check for preico\n', '            if (now <= start + ratePreICOEnd) {\n', '                rate = ratePreICO;\n', '            }\n', '\n', '            // Check for waiting period\n', '            else if (now <= start + rateWaitingEnd) {\n', '                rate = rateWaiting;\n', '            }\n', '\n', '            // Check for angelday\n', '            else if (now <= start + rateAngelDayEnd) {\n', '                rate = rateAngelDay;\n', '            }\n', '\n', '            // Check first week\n', '            else if (now <= start + rateFirstWeekEnd) {\n', '                rate = rateFirstWeek;\n', '            }\n', '\n', '            // Check second week\n', '            else if (now <= start + rateSecondWeekEnd) {\n', '                rate = rateSecondWeek;\n', '            }\n', '\n', '            // Check third week\n', '            else if (now <= start + rateThirdWeekEnd) {\n', '                rate = rateThirdWeek;\n', '            }\n', '\n', '            // Check last week\n', '            else if (now <= start + rateLastWeekEnd) {\n', '                rate = rateLastWeek;\n', '            }\n', '        }\n', '\n', '        return _wei * rate * 10**8 / 1 ether; // 10**8 for 8 decimals\n', '    }\n', '\n', '\n', '    /**\n', '     * Function to end the crowdsale by setting \n', '     * the stage to Ended\n', '     */\n', '    function endCrowdsale() atStage(Stages.InProgress) {\n', '        require(now > end);\n', '\n', '        stage = Stages.Ended;\n', '        if (!token.unlock()) {\n', '            stage = Stages.InProgress;\n', '        }\n', '    }\n', '\n', '\n', '    /**\n', '     * Transfer appropriate percentage of raised amount \n', '     * to the company address\n', '     */\n', '    function withdraw() onlyBeneficiary atStage(Stages.Ended) {\n', '        beneficiary.transfer(this.balance);\n', '    }\n', '\n', '    \n', '    /**\n', '     * Receives Eth and issue tokens to the sender\n', '     */\n', '    function () payable atStage(Stages.InProgress) {\n', '\n', '        // Crowdsale not started yet\n', '        require(now >= start);\n', '\n', '        // Crowdsale expired\n', '        require(now <= end);\n', '\n', '        // Enforce min amount\n', '        require(msg.value >= minAcceptedAmount);\n', ' \n', '        address sender = msg.sender;\n', '        uint256 received = msg.value;\n', '        uint256 valueInTokens = toTokens(received);\n', '\n', '        // Period between pre-ico and ico\n', '        require(valueInTokens > 0);\n', '\n', '        // Track\n', '        raised += received;\n', '\n', '        // Check max supply\n', '        if (token.totalSupply() + valueInTokens >= maxSupply) {\n', '            stage = Stages.Ended;\n', '        }\n', '\n', '        // Create tokens\n', '        if (!token.issue(sender, valueInTokens)) {\n', '            revert();\n', '        }\n', '\n', '        // 100% eth\n', '        if (!beneficiary.send(received)) {\n', '            revert();\n', '        }\n', '    }\n', '}']
['pragma solidity ^0.4.15;\n', '\n', 'contract IToken { \n', '    function issue(address _recipient, uint256 _value) returns (bool);\n', '    function totalSupply() constant returns (uint256);\n', '    function unlock() returns (bool);\n', '}\n', '\n', 'contract CoinoorCrowdsale {\n', '\n', '    // Crowdsale details\n', '    address public beneficiary; // Company address multisig (100% eth + 4.9 mln tokens)\n', '    address public creator; // Creator (.25 mln tokens)\n', '    address public marketing; // Marketing team (2.5 mln tokens)\n', '    address public bounty; // Bounty (100k tokens)\n', '    address public confirmedBy; // Address that confirmed beneficiary\n', '    uint256 public maxSupply = 65000000 * 10**8; // 65 mln tokens\n', '    uint256 public minAcceptedAmount = 40 finney; // 1/25 ether\n', '\n', '    // Eth to CNR rate\n', '    uint256 public ratePreICO = 450; // 50% bonus\n', '    uint256 public rateWaiting = 0;\n', '    uint256 public rateAngelDay = 420; // 40% bonus\n', '    uint256 public rateFirstWeek = 390; // 30% bonus\n', '    uint256 public rateSecondWeek = 375; // 25% bonus\n', '    uint256 public rateThirdWeek = 360; // 20% bonus\n', '    uint256 public rateLastWeek = 330; // 10% bonus\n', '\n', '    uint256 public ratePreICOEnd = 10 days;\n', '    uint256 public rateWaitingEnd = 20 days;\n', '    uint256 public rateAngelDayEnd = 21 days;\n', '    uint256 public rateFirstWeekEnd = 28 days;\n', '    uint256 public rateSecondWeekEnd = 35 days;\n', '    uint256 public rateThirdWeekEnd = 42 days;\n', '    uint256 public rateLastWeekEnd = 49 days;\n', '\n', '    enum Stages {\n', '        Deploying,\n', '        InProgress,\n', '        Ended\n', '    }\n', '\n', '    Stages public stage = Stages.Deploying;\n', '\n', '    // Crowdsale state\n', '    uint256 public start;\n', '    uint256 public end;\n', '    uint256 public raised;\n', '\n', '    // Token\n', '    IToken public token;\n', '\n', '\n', '    /**\n', '     * Throw if at stage other than current stage\n', '     * \n', '     * @param _stage expected stage to test for\n', '     */\n', '    modifier atStage(Stages _stage) {\n', '        require(stage == _stage);\n', '\n', '        _;\n', '    }\n', '    \n', '\n', '    /**\n', '     * Throw if sender is not beneficiary\n', '     */\n', '    modifier onlyBeneficiary() {\n', '        require(beneficiary == msg.sender);\n', '\n', '        _;\n', '    }\n', '\n', '\n', '    /**\n', '     * Construct\n', '     *\n', '     * @param _tokenAddress The address of the token contact\n', '     * @param _beneficiary The address of the beneficiary\n', '     * @param _creator The address of the tech team\n', '     * @param _marketing The address of the marketing team\n', '     * @param _bounty The address of the bounty wallet\n', '     * @param _start The timestamp of the start date\n', '     */\n', '    function CoinoorCrowdsale(address _tokenAddress, address _beneficiary, address _creator, address _marketing, address _bounty, uint256 _start) {\n', '        token = IToken(_tokenAddress);\n', '        beneficiary = _beneficiary;\n', '        creator = _creator;\n', '        marketing = _marketing;\n', '        bounty = _bounty;\n', '        start = _start;\n', '        end = start + rateLastWeekEnd;\n', '    }\n', '\n', '\n', '    /**\n', '     * Deploy and start the crowdsale\n', '     */\n', '    function init() atStage(Stages.Deploying) {\n', '        stage = Stages.InProgress;\n', '\n', '        // Create tokens\n', '        if (!token.issue(beneficiary, 4900000 * 10**8)) {\n', '            stage = Stages.Deploying;\n', '            revert();\n', '        }\n', '\n', '        if (!token.issue(creator, 2500000 * 10**8)) {\n', '            stage = Stages.Deploying;\n', '            revert();\n', '        }\n', '\n', '        if (!token.issue(marketing, 2500000 * 10**8)) {\n', '            stage = Stages.Deploying;\n', '            revert();\n', '        }\n', '\n', '        if (!token.issue(bounty, 100000 * 10**8)) {\n', '            stage = Stages.Deploying;\n', '            revert();\n', '        }\n', '    }\n', '\n', '\n', '    /**\n', '     * For testing purposes\n', '     *\n', '     * @return The beneficiary address\n', '     */\n', '    function confirmBeneficiary() onlyBeneficiary {\n', '        confirmedBy = msg.sender;\n', '    }\n', '\n', '\n', '    /**\n', '     * Convert `_wei` to an amount in tokens using \n', '     * the current rate\n', '     *\n', '     * @param _wei amount of wei to convert\n', '     * @return The amount in tokens\n', '     */\n', '    function toTokens(uint256 _wei) returns (uint256 amount) {\n', '        uint256 rate = 0;\n', '        if (stage != Stages.Ended && now >= start && now <= end) {\n', '\n', '            // Check for preico\n', '            if (now <= start + ratePreICOEnd) {\n', '                rate = ratePreICO;\n', '            }\n', '\n', '            // Check for waiting period\n', '            else if (now <= start + rateWaitingEnd) {\n', '                rate = rateWaiting;\n', '            }\n', '\n', '            // Check for angelday\n', '            else if (now <= start + rateAngelDayEnd) {\n', '                rate = rateAngelDay;\n', '            }\n', '\n', '            // Check first week\n', '            else if (now <= start + rateFirstWeekEnd) {\n', '                rate = rateFirstWeek;\n', '            }\n', '\n', '            // Check second week\n', '            else if (now <= start + rateSecondWeekEnd) {\n', '                rate = rateSecondWeek;\n', '            }\n', '\n', '            // Check third week\n', '            else if (now <= start + rateThirdWeekEnd) {\n', '                rate = rateThirdWeek;\n', '            }\n', '\n', '            // Check last week\n', '            else if (now <= start + rateLastWeekEnd) {\n', '                rate = rateLastWeek;\n', '            }\n', '        }\n', '\n', '        return _wei * rate * 10**8 / 1 ether; // 10**8 for 8 decimals\n', '    }\n', '\n', '\n', '    /**\n', '     * Function to end the crowdsale by setting \n', '     * the stage to Ended\n', '     */\n', '    function endCrowdsale() atStage(Stages.InProgress) {\n', '        require(now > end);\n', '\n', '        stage = Stages.Ended;\n', '        if (!token.unlock()) {\n', '            stage = Stages.InProgress;\n', '        }\n', '    }\n', '\n', '\n', '    /**\n', '     * Transfer appropriate percentage of raised amount \n', '     * to the company address\n', '     */\n', '    function withdraw() onlyBeneficiary atStage(Stages.Ended) {\n', '        beneficiary.transfer(this.balance);\n', '    }\n', '\n', '    \n', '    /**\n', '     * Receives Eth and issue tokens to the sender\n', '     */\n', '    function () payable atStage(Stages.InProgress) {\n', '\n', '        // Crowdsale not started yet\n', '        require(now >= start);\n', '\n', '        // Crowdsale expired\n', '        require(now <= end);\n', '\n', '        // Enforce min amount\n', '        require(msg.value >= minAcceptedAmount);\n', ' \n', '        address sender = msg.sender;\n', '        uint256 received = msg.value;\n', '        uint256 valueInTokens = toTokens(received);\n', '\n', '        // Period between pre-ico and ico\n', '        require(valueInTokens > 0);\n', '\n', '        // Track\n', '        raised += received;\n', '\n', '        // Check max supply\n', '        if (token.totalSupply() + valueInTokens >= maxSupply) {\n', '            stage = Stages.Ended;\n', '        }\n', '\n', '        // Create tokens\n', '        if (!token.issue(sender, valueInTokens)) {\n', '            revert();\n', '        }\n', '\n', '        // 100% eth\n', '        if (!beneficiary.send(received)) {\n', '            revert();\n', '        }\n', '    }\n', '}']
