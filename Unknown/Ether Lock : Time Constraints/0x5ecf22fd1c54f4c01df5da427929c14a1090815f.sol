['pragma solidity ^0.4.2;\n', '\n', 'contract DateTime {\n', '        /*\n', '         *  Date and Time utilities for ethereum contracts\n', '         *\n', '         */\n', '        struct DateTime {\n', '                uint16 year;\n', '                uint8 month;\n', '                uint8 day;\n', '                uint8 hour;\n', '                uint8 minute;\n', '                uint8 second;\n', '                uint8 weekday;\n', '        }\n', '\n', '        uint constant DAY_IN_SECONDS = 86400;\n', '        uint constant YEAR_IN_SECONDS = 31536000;\n', '        uint constant LEAP_YEAR_IN_SECONDS = 31622400;\n', '\n', '        uint constant HOUR_IN_SECONDS = 3600;\n', '        uint constant MINUTE_IN_SECONDS = 60;\n', '\n', '        uint16 constant ORIGIN_YEAR = 1970;\n', '\n', '        function isLeapYear(uint16 year) constant returns (bool) {\n', '                if (year % 4 != 0) {\n', '                        return false;\n', '                }\n', '                if (year % 100 != 0) {\n', '                        return true;\n', '                }\n', '                if (year % 400 != 0) {\n', '                        return false;\n', '                }\n', '                return true;\n', '        }\n', '\n', '        function leapYearsBefore(uint year) constant returns (uint) {\n', '                year -= 1;\n', '                return year / 4 - year / 100 + year / 400;\n', '        }\n', '\n', '        function getDaysInMonth(uint8 month, uint16 year) constant returns (uint8) {\n', '                if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n', '                        return 31;\n', '                }\n', '                else if (month == 4 || month == 6 || month == 9 || month == 11) {\n', '                        return 30;\n', '                }\n', '                else if (isLeapYear(year)) {\n', '                        return 29;\n', '                }\n', '                else {\n', '                        return 28;\n', '                }\n', '        }\n', '\n', '        function parseTimestamp(uint timestamp) internal  returns (DateTime dt) {\n', '                uint secondsAccountedFor = 0;\n', '                uint buf;\n', '                uint8 i;\n', '\n', '                // Year\n', '                dt.year = getYear(timestamp);\n', '                buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR);\n', '\n', '                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\n', '                secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);\n', '\n', '                // Month\n', '                uint secondsInMonth;\n', '                for (i = 1; i <= 12; i++) {\n', '                        secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dt.year);\n', '                        if (secondsInMonth + secondsAccountedFor > timestamp) {\n', '                                dt.month = i;\n', '                                break;\n', '                        }\n', '                        secondsAccountedFor += secondsInMonth;\n', '                }\n', '\n', '                // Day\n', '                for (i = 1; i <= getDaysInMonth(dt.month, dt.year); i++) {\n', '                        if (DAY_IN_SECONDS + secondsAccountedFor > timestamp) {\n', '                                dt.day = i;\n', '                                break;\n', '                        }\n', '                        secondsAccountedFor += DAY_IN_SECONDS;\n', '                }\n', '\n', '                // Hour\n', '                dt.hour = getHour(timestamp);\n', '\n', '                // Minute\n', '                dt.minute = getMinute(timestamp);\n', '\n', '                // Second\n', '                dt.second = getSecond(timestamp);\n', '\n', '                // Day of week.\n', '                dt.weekday = getWeekday(timestamp);\n', '        }\n', '\n', '        function getYear(uint timestamp) constant returns (uint16) {\n', '                uint secondsAccountedFor = 0;\n', '                uint16 year;\n', '                uint numLeapYears;\n', '\n', '                // Year\n', '                year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\n', '                numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\n', '\n', '                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\n', '                secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\n', '\n', '                while (secondsAccountedFor > timestamp) {\n', '                        if (isLeapYear(uint16(year - 1))) {\n', '                                secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\n', '                        }\n', '                        else {\n', '                                secondsAccountedFor -= YEAR_IN_SECONDS;\n', '                        }\n', '                        year -= 1;\n', '                }\n', '                return year;\n', '        }\n', '\n', '        function getMonth(uint timestamp) constant returns (uint8) {\n', '                return parseTimestamp(timestamp).month;\n', '        }\n', '\n', '        function getDay(uint timestamp) constant returns (uint8) {\n', '                return parseTimestamp(timestamp).day;\n', '        }\n', '\n', '        function getHour(uint timestamp) constant returns (uint8) {\n', '                return uint8((timestamp / 60 / 60) % 24);\n', '        }\n', '\n', '        function getMinute(uint timestamp) constant returns (uint8) {\n', '                return uint8((timestamp / 60) % 60);\n', '        }\n', '\n', '        function getSecond(uint timestamp) constant returns (uint8) {\n', '                return uint8(timestamp % 60);\n', '        }\n', '\n', '        function getWeekday(uint timestamp) constant returns (uint8) {\n', '                return uint8((timestamp / DAY_IN_SECONDS + 4) % 7);\n', '        }\n', '\n', '        function toTimestamp(uint16 year, uint8 month, uint8 day) constant returns (uint timestamp) {\n', '                return toTimestamp(year, month, day, 0, 0, 0);\n', '        }\n', '\n', '        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour) constant returns (uint timestamp) {\n', '                return toTimestamp(year, month, day, hour, 0, 0);\n', '        }\n', '\n', '        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute) constant returns (uint timestamp) {\n', '                return toTimestamp(year, month, day, hour, minute, 0);\n', '        }\n', '\n', '        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute, uint8 second) constant returns (uint timestamp) {\n', '            uint16 i;\n', '\n', '            // Year\n', '            for (i = ORIGIN_YEAR; i < year; i++) {\n', '                    if (isLeapYear(i)) {\n', '                            timestamp += LEAP_YEAR_IN_SECONDS;\n', '                    }\n', '                    else {\n', '                            timestamp += YEAR_IN_SECONDS;\n', '                    }\n', '            }\n', '\n', '            // Month\n', '            uint8[12] memory monthDayCounts;\n', '            monthDayCounts[0] = 31;\n', '            if (isLeapYear(year)) {\n', '                    monthDayCounts[1] = 29;\n', '            }\n', '            else {\n', '                    monthDayCounts[1] = 28;\n', '            }\n', '            monthDayCounts[2] = 31;\n', '            monthDayCounts[3] = 30;\n', '            monthDayCounts[4] = 31;\n', '            monthDayCounts[5] = 30;\n', '            monthDayCounts[6] = 31;\n', '            monthDayCounts[7] = 31;\n', '            monthDayCounts[8] = 30;\n', '            monthDayCounts[9] = 31;\n', '            monthDayCounts[10] = 30;\n', '            monthDayCounts[11] = 31;\n', '\n', '            for (i = 1; i < month; i++) {\n', '                    timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1];\n', '            }\n', '\n', '            // Day\n', '            timestamp += DAY_IN_SECONDS * (day - 1);\n', '\n', '            // Hour\n', '            timestamp += HOUR_IN_SECONDS * (hour);\n', '\n', '            // Minute\n', '            timestamp += MINUTE_IN_SECONDS * (minute);\n', '\n', '            // Second\n', '            timestamp += second;\n', '\n', '            return timestamp;\n', '    }\n', '}\n', '\n', '// Copyrobo contract for notarization\n', 'contract ProofOfExistence {\n', '    \n', '    \n', '    function uintToBytes(uint v) constant returns (bytes32 ret) {\n', '        if (v == 0) {\n', "            ret = '0';\n", '        }\n', '        else {\n', '            while (v > 0) {\n', '                ret = bytes32(uint(ret) / (2 ** 8));\n', '                ret |= bytes32(((v % 10) + 48) * 2 ** (8 * 31));\n', '                v /= 10;\n', '            }\n', '        }\n', '        return ret;\n', '    }\n', '    \n', '    function bytes32ToString(bytes32 x) constant returns (string) {\n', '        bytes memory bytesString = new bytes(32);\n', '        uint charCount = 0;\n', '        for (uint j = 0; j < 32; j++) {\n', '            byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\n', '            if (char != 0) {\n', '                bytesString[charCount] = char;\n', '                charCount++;\n', '            }\n', '        }\n', '        bytes memory bytesStringTrimmed = new bytes(charCount);\n', '        for (j = 0; j < charCount; j++) {\n', '            bytesStringTrimmed[j] = bytesString[j];\n', '        }\n', '        return string(bytesStringTrimmed);\n', '    }\n', '    \n', '    function bytes32ToString(uint16 x) constant returns (string) {\n', '        bytes32 a = uintToBytes(x);\n', '        return bytes32ToString(a);\n', '    }\n', '    \n', 'function strConcat(string _a, string _b, string _c, string _d, string _e) internal returns (string){\n', '    bytes memory _ba = bytes(_a);\n', '    bytes memory _bb = bytes(_b);\n', '    bytes memory _bc = bytes(_c);\n', '    bytes memory _bd = bytes(_d);\n', '    bytes memory _be = bytes(_e);\n', '    string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n', '    bytes memory babcde = bytes(abcde);\n', '    uint k = 0;\n', '    for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n', '    for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n', '    for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n', '    for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n', '    for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n', '    return string(babcde);\n', '}\n', '\n', 'function strConcat(string _a, string _b, string _c, string _d) internal returns (string) {\n', '    return strConcat(_a, _b, _c, _d, "");\n', '}\n', '\n', 'function strConcat(string _a, string _b, string _c) internal returns (string) {\n', '    return strConcat(_a, _b, _c, "", "");\n', '}\n', '\n', 'function strConcat(string _a, string _b) internal returns (string) {\n', '    return strConcat(_a, _b, "", "", "");\n', '}\n', '   \n', '  // string: sha256 of document\n', '  // unit : timestamp \n', '  mapping (string => uint) private proofs;\n', '\n', '  function notarize(string sha256) {\n', '    // validate it has 64 characters\n', '    \n', '    if ( bytes(sha256).length == 64 ){\n', "      // check if it is existing, don't save it\n", '      if ( proofs[sha256] == 0 ){\n', '        proofs[sha256] = block.timestamp;\n', '      }\n', '    }\n', '  }\n', '  \n', '  // Input sha256 hash string to check\n', '  function verify(string sha256) constant returns (string) {\n', '    var timestamp =  proofs[sha256];\n', '    if ( timestamp == 0 ){\n', '        return "No data found";\n', '    }else{\n', '        DateTime dt = DateTime(msg.sender);\n', '        \n', '        uint16 year = dt.getYear(timestamp);\n', '        uint16 month = dt.getMonth(timestamp);\n', '        uint16 day = dt.getDay(timestamp);\n', '        uint16 hour = dt.getHour(timestamp);\n', '        uint16 minute = dt.getMinute(timestamp);\n', '        uint16 second = dt.getSecond(timestamp);\n', '        \n', '        string  memory result = strConcat(bytes32ToString(year) , "-" , bytes32ToString(month),"-",bytes32ToString(day));\n', '        result = strConcat(result," ");\n', '        result = strConcat( bytes32ToString(hour) , ":" , bytes32ToString(minute),":",bytes32ToString(second));\n', '        result = strConcat(result," UTC");\n', '        \n', '\n', '\n', '        //UTC Format: 2013-10-26 14:37:48 UTC\n', '\n', '        return result;\n', '    }\n', '  }\n', '  \n', '}']