['pragma solidity ^0.4.11;\n', '\n', '/// @title SaintArnould (Tokyo) Token (SAT) -\n', 'contract SaintArnouldToken {\n', '    string public constant name = "Saint Arnould Token";\n', '    string public constant symbol = "SAT";\n', '    uint8 public constant decimals = 18;  // 18 decimal places, the same as ETH.\n', '\n', '    uint256 public constant tokenCreationRate = 5000;  //creation rate 1 ETH = 5000 SAT\n', '    uint256 public constant firstTokenCap = 10 ether * tokenCreationRate; \n', '    uint256 public constant secondTokenCap = 920 ether * tokenCreationRate; //27,900,000 YEN\n', '\n', '    uint256 public fundingStartBlock;\n', '    uint256 public fundingEndBlock;\n', '    uint256 public locked_allocation;\n', '    uint256 public unlockingBlock;\n', '\n', '    // Receives ETH for founders.\n', '    address public founders;\n', '\n', '    // The flag indicates if the SAT contract is in Funding state.\n', '    bool public funding_ended = false;\n', '\n', '    // The current total token supply.\n', '    uint256 totalTokens;\n', '\n', '    mapping (address => uint256) balances;\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    function SaintArnouldToken(address _founders,\n', '                               uint256 _fundingStartBlock,\n', '                               uint256 _fundingEndBlock) {\n', '\n', '        if (_founders == 0) throw;\n', '        if (_fundingStartBlock <= block.number) throw;\n', '        if (_fundingEndBlock   <= _fundingStartBlock) throw;\n', '\n', '        founders = _founders;\n', '        fundingStartBlock = _fundingStartBlock;\n', '        fundingEndBlock = _fundingEndBlock;\n', '    }\n', '\n', '    /// @notice Transfer `_value` SAT tokens from sender&#39;s account\n', '    /// `msg.sender` to provided account address `_to`.\n', '    /// @param _to The address of the tokens recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        // Abort if not in Operational state.\n', '        if (!funding_ended) throw;\n', '        if (msg.sender == founders) throw;\n', '        var senderBalance = balances[msg.sender];\n', '        if (senderBalance >= _value && _value > 0) {\n', '            senderBalance -= _value;\n', '            balances[msg.sender] = senderBalance;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function totalSupply() external constant returns (uint256) {\n', '        return totalTokens;\n', '    }\n', '\n', '    function balanceOf(address _owner) external constant returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    // Crowdfunding:\n', '\n', '    /// @notice Create tokens when funding is active.\n', '    /// @dev Required state: Funding Active\n', '    /// @dev State transition: -> Funding Success (only if cap reached)\n', '    function buy(address _sender) internal {\n', '        // Abort if not in Funding Active state.\n', '        if (funding_ended) throw;\n', '        // The checking for blocktimes.\n', '        if (block.number < fundingStartBlock) throw;\n', '        if (block.number > fundingEndBlock) throw;\n', '\n', '        // Do not allow creating 0 or more than the cap tokens.\n', '        if (msg.value == 0) throw;\n', '\n', '        var numTokens = msg.value * tokenCreationRate;\n', '        totalTokens += numTokens;\n', '\n', '        // Assign new tokens to the sender\n', '        balances[_sender] += numTokens;\n', '\n', '        // sending funds to founders\n', '        founders.transfer(msg.value);\n', '\n', '        // Log token creation event\n', '        Transfer(0, _sender, numTokens);\n', '    }\n', '\n', '    /// @notice Finalize crowdfunding\n', '    function finalize() external {\n', '        if (block.number <= fundingEndBlock) throw;\n', '\n', '        //locked allocation for founders \n', '        locked_allocation = totalTokens * 10 / 100;\n', '        balances[founders] = locked_allocation;\n', '        totalTokens += locked_allocation;\n', '        \n', '        unlockingBlock = block.number + 864000;   //about 6 months locked time.\n', '        funding_ended = true;\n', '    }\n', '\n', '    function transferFounders(address _to, uint256 _value) public returns (bool) {\n', '        if (!funding_ended) throw;\n', '        if (block.number <= unlockingBlock) throw;\n', '        if (msg.sender != founders) throw;\n', '        var senderBalance = balances[msg.sender];\n', '        if (senderBalance >= _value && _value > 0) {\n', '            senderBalance -= _value;\n', '            balances[msg.sender] = senderBalance;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /// @notice If anybody sends Ether directly to this contract, consider he is\n', '    function() public payable {\n', '        buy(msg.sender);\n', '    }\n', '}']