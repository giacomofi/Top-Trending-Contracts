['/*\n', 'this smartcontract used to store documents text on the Ethereum blockchain\n', '*/\n', '\n', 'contract ProofOfExistence{\n', '\n', '    /* ---- Public variables: */\n', '    string public created;\n', '    address public manager; // account that adds info to this smartcontract\n', "    uint256 public index;   // record's numbers and number of records\n", '    mapping (uint256 => Doc) public docs; // index => Doc\n', '    // to get Doc obj call ProofOfExistence.docs(index);\n', '\n', '    /* ---- Stored document structure: */\n', '\n', '    struct Doc {\n', "        string publisher; // publisher's email\n", '        uint256 publishedOnUnixTime; // block timestamp (block.timestamp)\n', '        uint256 publishedInBlockNumber; // block.number\n', '        string text; // text of the document\n', '    }\n', '\n', '    /* ---- Constructor: */\n', '\n', '    function ProofOfExistence(){\n', '        manager = msg.sender;\n', '        created = "cryptonomica.net";\n', '        index = 0; //\n', '    }\n', '\n', '    /* ---- Event:  */\n', "    // This generates a public event on the blockchain that will notify clients. In 'Mist' SmartContract page enable 'Watch contract events'\n", '    event DocumentAdded(uint256 indexed index,\n', '                        string indexed publisher,\n', '                        uint256 publishedOnUnixTime,\n', '                        string indexed text);\n', '\n', '    /* ----- Main method: */\n', '\n', '    function addDoc(string _publisher, string _text) returns (uint256) {\n', '        // authorization\n', '        if (msg.sender != manager) throw;\n', '        // document number\n', '        index += 1;\n', '        // add document data:\n', '        docs[index] = Doc(_publisher, now, block.number, _text);\n', '        // add event\n', '        DocumentAdded(index,\n', '                      docs[index].publisher,\n', '                      docs[index].publishedOnUnixTime,\n', '                      docs[index].text);\n', '        // return number of the stored document\n', '        return index;\n', '    }\n', '\n', '    /* ---- Utilities: */\n', '\n', '    function () {\n', '        // This function gets executed if a\n', '        // transaction with invalid data is sent to\n', '        // the contract or just ether without data.\n', '        // We revert the send so that no-one\n', '        // accidentally loses money when using the\n', '        // contract.\n', '        throw;\n', '    }\n', '\n', '}']