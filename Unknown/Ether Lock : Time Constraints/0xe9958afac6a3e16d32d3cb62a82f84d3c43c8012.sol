['pragma solidity ^0.4.13;\n', '\n', '\n', 'contract BM_MasterClass_Reserved {\n', '    mapping (address => uint256) public holders;\n', '    uint256 public amount_investments = 0;\n', '    uint256 public countHolders = 0;\n', '\n', '    uint256 public dtStart = 1502737200; //14.08.2017 22:00 MSK\n', '    uint256 public dtEnd = 1502910000; //16.08.2017 22:00 MSK\n', '\n', '    uint256 public minSizeInvest = 100 finney;\n', '\n', '    address public owner;\n', '\n', '    event Investment(address holder, uint256 value);\n', '\n', '    function BM_MasterClass_Reserved(){\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier isOwner()\n', '    {\n', '        assert(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function changeOwner(address new_owner) isOwner {\n', '        assert(new_owner!=address(0x0));\n', '        assert(new_owner!=address(this));\n', '        owner = new_owner;\n', '    }\n', '\n', '    function getDataHolders(address holder) external constant returns(uint256)\n', '    {\n', '        return holders[holder];\n', '    }\n', '\n', '    function sendInvestmentsToOwner() isOwner {\n', '        assert(now >= dtEnd);\n', '        owner.transfer(this.balance);\n', '    }\n', '\n', '    function () payable {\n', '        assert(now < dtEnd);\n', '        assert(now >= dtStart);\n', '        assert(msg.value>=minSizeInvest);\n', '\n', '        if(holders[msg.sender] == 0){\n', '            countHolders += 1;\n', '        }\n', '        holders[msg.sender] += msg.value;\n', '        amount_investments += msg.value;\n', '        Investment(msg.sender, msg.value);\n', '    }\n', '}']
['pragma solidity ^0.4.13;\n', '\n', '\n', 'contract BM_MasterClass_Reserved {\n', '    mapping (address => uint256) public holders;\n', '    uint256 public amount_investments = 0;\n', '    uint256 public countHolders = 0;\n', '\n', '    uint256 public dtStart = 1502737200; //14.08.2017 22:00 MSK\n', '    uint256 public dtEnd = 1502910000; //16.08.2017 22:00 MSK\n', '\n', '    uint256 public minSizeInvest = 100 finney;\n', '\n', '    address public owner;\n', '\n', '    event Investment(address holder, uint256 value);\n', '\n', '    function BM_MasterClass_Reserved(){\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier isOwner()\n', '    {\n', '        assert(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function changeOwner(address new_owner) isOwner {\n', '        assert(new_owner!=address(0x0));\n', '        assert(new_owner!=address(this));\n', '        owner = new_owner;\n', '    }\n', '\n', '    function getDataHolders(address holder) external constant returns(uint256)\n', '    {\n', '        return holders[holder];\n', '    }\n', '\n', '    function sendInvestmentsToOwner() isOwner {\n', '        assert(now >= dtEnd);\n', '        owner.transfer(this.balance);\n', '    }\n', '\n', '    function () payable {\n', '        assert(now < dtEnd);\n', '        assert(now >= dtStart);\n', '        assert(msg.value>=minSizeInvest);\n', '\n', '        if(holders[msg.sender] == 0){\n', '            countHolders += 1;\n', '        }\n', '        holders[msg.sender] += msg.value;\n', '        amount_investments += msg.value;\n', '        Investment(msg.sender, msg.value);\n', '    }\n', '}']
