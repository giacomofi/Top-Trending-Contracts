['pragma solidity ^0.4.10;\n', '/*\n', '      No more panic sells.\n', '      Force yourself to hodl them eths with HodlBox!\n', '*/\n', '\n', 'contract HodlBox {\n', '\n', '  uint public hodlTillBlock;\n', '  address public hodler;\n', '  uint public hodling;\n', '  bool public withdrawn;\n', '\n', '  event HodlReleased(bool _isReleased);\n', '  event Hodling(bool _isCreated);\n', '\n', '  function HodlBox(uint _blocks) payable {\n', '    hodler = msg.sender;\n', '    hodling = msg.value;\n', '    hodlTillBlock = block.number + _blocks;\n', '    withdrawn = false;\n', '    Hodling(true);\n', '  }\n', '\n', '  function deposit() payable {\n', '    hodling += msg.value;\n', '  }\n', '\n', '  function releaseTheHodl() {\n', '    // Only the contract creator can release funds from their HodlBox,\n', '    // and only after the defined number of blocks has passed.\n', '    if (msg.sender != hodler) throw;\n', '    if (block.number < hodlTillBlock) throw;\n', '    if (withdrawn) throw;\n', '    if (hodling <= 0) throw;\n', '    withdrawn = true;\n', '    hodling = 0;\n', '\n', '    // Send event to notifiy UI\n', '    HodlReleased(true);\n', '\n', '    selfdestruct(hodler);\n', '  }\n', '\n', '  // constant functions do not mutate state\n', '  function hodlCountdown() constant returns (uint) {\n', '    var hodlCount = hodlTillBlock - block.number;\n', '    if (block.number >= hodlTillBlock) {\n', '      return 0;\n', '    }\n', '    return hodlCount;\n', '  }\n', '\n', '  function isDeholdable() constant returns (bool) {\n', '    if (block.number < hodlTillBlock) {\n', '      return false;\n', '    } else {\n', '      return true;\n', '    }\n', '  }\n', '\n', '}']
['pragma solidity ^0.4.10;\n', '/*\n', '      No more panic sells.\n', '      Force yourself to hodl them eths with HodlBox!\n', '*/\n', '\n', 'contract HodlBox {\n', '\n', '  uint public hodlTillBlock;\n', '  address public hodler;\n', '  uint public hodling;\n', '  bool public withdrawn;\n', '\n', '  event HodlReleased(bool _isReleased);\n', '  event Hodling(bool _isCreated);\n', '\n', '  function HodlBox(uint _blocks) payable {\n', '    hodler = msg.sender;\n', '    hodling = msg.value;\n', '    hodlTillBlock = block.number + _blocks;\n', '    withdrawn = false;\n', '    Hodling(true);\n', '  }\n', '\n', '  function deposit() payable {\n', '    hodling += msg.value;\n', '  }\n', '\n', '  function releaseTheHodl() {\n', '    // Only the contract creator can release funds from their HodlBox,\n', '    // and only after the defined number of blocks has passed.\n', '    if (msg.sender != hodler) throw;\n', '    if (block.number < hodlTillBlock) throw;\n', '    if (withdrawn) throw;\n', '    if (hodling <= 0) throw;\n', '    withdrawn = true;\n', '    hodling = 0;\n', '\n', '    // Send event to notifiy UI\n', '    HodlReleased(true);\n', '\n', '    selfdestruct(hodler);\n', '  }\n', '\n', '  // constant functions do not mutate state\n', '  function hodlCountdown() constant returns (uint) {\n', '    var hodlCount = hodlTillBlock - block.number;\n', '    if (block.number >= hodlTillBlock) {\n', '      return 0;\n', '    }\n', '    return hodlCount;\n', '  }\n', '\n', '  function isDeholdable() constant returns (bool) {\n', '    if (block.number < hodlTillBlock) {\n', '      return false;\n', '    } else {\n', '      return true;\n', '    }\n', '  }\n', '\n', '}']
