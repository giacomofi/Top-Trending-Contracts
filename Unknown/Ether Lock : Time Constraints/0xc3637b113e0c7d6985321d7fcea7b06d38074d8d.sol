['pragma solidity ^0.4.13;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    \n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  \n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    \n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    \n', '  address public owner;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '    \n', '  event Mint(address indexed to, uint256 amount);\n', '  \n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '  address public saleAgent;\n', '\n', '  function setSaleAgent(address newSaleAgnet) {\n', '    require(msg.sender == saleAgent || msg.sender == owner);\n', '    saleAgent = newSaleAgnet;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will recieve the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) returns (bool) {\n', '    require(msg.sender == saleAgent && !mintingFinished);\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() returns (bool) {\n', '    require(msg.sender == saleAgent || msg.sender == owner && !mintingFinished);\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '  \n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '    \n', '  event Pause();\n', '  \n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS paused\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS NOT paused\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '  \n', '}\n', '\n', 'contract TlindToken is MintableToken {\t\n', '    \n', '  string public constant name = "Tlind";\n', '   \n', '  string public constant symbol = "TDT";\n', '    \n', '  uint32 public constant decimals = 18;\n', '    \n', '}\n', '\n', '\n', 'contract StagedCrowdsale is Pausable {\n', '\n', '  using SafeMath for uint;\n', '\n', '  struct Milestone {\n', '    uint period;\n', '    uint bonus;\n', '  }\n', '\n', '  uint public start;\n', '\n', '  uint public totalPeriod;\n', '\n', '  uint public invested;\n', '\n', '  uint public hardCap;\n', ' \n', '  Milestone[] public milestones;\n', '\n', '  function milestonesCount() constant returns(uint) {\n', '    return milestones.length;\n', '  }\n', '\n', '  function setStart(uint newStart) onlyOwner {\n', '    start = newStart;\n', '  }\n', '\n', '  function setHardcap(uint newHardcap) onlyOwner {\n', '    hardCap = newHardcap;\n', '  }\n', '\n', '  function addMilestone(uint period, uint bonus) onlyOwner {\n', '    require(period > 0);\n', '    milestones.push(Milestone(period, bonus));\n', '    totalPeriod = totalPeriod.add(period);\n', '  }\n', '\n', '  function removeMilestones(uint8 number) onlyOwner {\n', '    require(number < milestones.length);\n', '    Milestone storage milestone = milestones[number];\n', '    totalPeriod = totalPeriod.sub(milestone.period);\n', '\n', '    delete milestones[number];\n', '\n', '    for (uint i = number; i < milestones.length - 1; i++) {\n', '      milestones[i] = milestones[i+1];\n', '    }\n', '\n', '    milestones.length--;\n', '  }\n', '\n', '  function changeMilestone(uint8 number, uint period, uint bonus) onlyOwner {\n', '    require(number < milestones.length);\n', '    Milestone storage milestone = milestones[number];\n', '\n', '    totalPeriod = totalPeriod.sub(milestone.period);    \n', '\n', '    milestone.period = period;\n', '    milestone.bonus = bonus;\n', '\n', '    totalPeriod = totalPeriod.add(period);    \n', '  }\n', '\n', '  function insertMilestone(uint8 numberAfter, uint period, uint bonus) onlyOwner {\n', '    require(numberAfter < milestones.length);\n', '\n', '    totalPeriod = totalPeriod.add(period);\n', '\n', '    milestones.length++;\n', '\n', '    for (uint i = milestones.length - 2; i > numberAfter; i--) {\n', '      milestones[i + 1] = milestones[i];\n', '    }\n', '\n', '    milestones[numberAfter + 1] = Milestone(period, bonus);\n', '  }\n', '\n', '  function clearMilestones() onlyOwner {\n', '    require(milestones.length > 0);\n', '    for (uint i = 0; i < milestones.length; i++) {\n', '      delete milestones[i];\n', '    }\n', '    milestones.length -= milestones.length;\n', '    totalPeriod = 0;\n', '  }\n', '\n', '  modifier saleIsOn() {\n', '    require(milestones.length > 0 && now >= start && now < lastSaleDate());\n', '    _;\n', '  }\n', '  \n', '  modifier isUnderHardCap() {\n', '    require(invested <= hardCap);\n', '    _;\n', '  }\n', '  \n', '  function lastSaleDate() constant returns(uint) {\n', '    require(milestones.length > 0);\n', '    return start + totalPeriod * 1 days;\n', '  }\n', '\n', '  function currentMilestone() saleIsOn constant returns(uint) {\n', '    uint previousDate = start;\n', '    for(uint i=0; i < milestones.length; i++) {\n', '      if(now >= previousDate && now < previousDate + milestones[i].period * 1 days) {\n', '        return i;\n', '      }\n', '      previousDate = previousDate.add(milestones[i].period * 1 days);\n', '    }\n', '    revert();\n', '  }\n', '\n', '}\n', '\n', 'contract CommonSale is StagedCrowdsale {\n', '\n', '  address public multisigWallet;\n', '  \n', '  address public foundersTokensWallet;\n', '  \n', '  address public bountyTokensWallet;\n', '\n', '  uint public foundersTokensPercent;\n', '  \n', '  uint public bountyTokensPercent;\n', ' \n', '  uint public price;\n', '\n', '  uint public percentRate = 100;\n', '\n', '  uint public softcap;\n', '\n', '  bool public refundOn = false;\n', '\n', '  bool public isSoftcapOn = false;\n', '\n', '  mapping (address => uint) balances;\n', '\n', '  CommonSale public nextSale;\n', '  \n', '  MintableToken public token;\n', '\n', '  function setSoftcap(uint newSoftcap) onlyOwner {\n', '    isSoftcapOn = true;\n', '    softcap = newSoftcap;\n', '  }\n', '\n', '  function setToken(address newToken) onlyOwner {\n', '    token = MintableToken(newToken);\n', '  }\n', '\n', '  function setNextSale(address newNextSale) onlyOwner {\n', '    nextSale = CommonSale(newNextSale);\n', '  }\n', '\n', '  function setPrice(uint newPrice) onlyOwner {\n', '    price = newPrice;\n', '  }\n', '\n', '  function setPercentRate(uint newPercentRate) onlyOwner {\n', '    percentRate = newPercentRate;\n', '  }\n', '\n', '  function setFoundersTokensPercent(uint newFoundersTokensPercent) onlyOwner {\n', '    foundersTokensPercent = newFoundersTokensPercent;\n', '  }\n', '  \n', '  function setBountyTokensPercent(uint newBountyTokensPercent) onlyOwner {\n', '    bountyTokensPercent = newBountyTokensPercent;\n', '  }\n', '  \n', '  function setMultisigWallet(address newMultisigWallet) onlyOwner {\n', '    multisigWallet = newMultisigWallet;\n', '  }\n', '\n', '  function setFoundersTokensWallet(address newFoundersTokensWallet) onlyOwner {\n', '    foundersTokensWallet = newFoundersTokensWallet;\n', '  }\n', '\n', '  function setBountyTokensWallet(address newBountyTokensWallet) onlyOwner {\n', '    bountyTokensWallet = newBountyTokensWallet;\n', '  }\n', '\n', '  function createTokens() whenNotPaused isUnderHardCap saleIsOn payable {\n', '    require(msg.value > 100000000000000000);\n', '    uint milestoneIndex = currentMilestone();\n', '    Milestone storage milestone = milestones[milestoneIndex];\n', '    if(!isSoftcapOn) {\n', '      multisigWallet.transfer(msg.value);\n', '    }\n', '    invested = invested.add(msg.value);\n', '    uint tokens = msg.value.mul(1 ether).div(price);\n', '    uint bonusTokens = tokens.mul(milestone.bonus).div(percentRate);\n', '    uint tokensWithBonus = tokens.add(bonusTokens);\n', '    token.mint(this, tokensWithBonus);\n', '    token.transfer(msg.sender, tokensWithBonus);\n', '    balances[msg.sender] = balances[msg.sender].add(msg.value);\n', '  }\n', '\n', '  function refund() whenNotPaused {\n', '    require(now > start && refundOn && balances[msg.sender] > 0);\n', '    msg.sender.transfer(balances[msg.sender]);\n', '  } \n', '\n', '  function finishMinting() public whenNotPaused onlyOwner {\n', '    if(isSoftcapOn && invested < softcap) {\n', '      refundOn = true;\n', '      token.finishMinting();\n', '    } else {\n', '      if(isSoftcapOn) {\n', '        multisigWallet.transfer(invested);\n', '      }\n', '      uint issuedTokenSupply = token.totalSupply();\n', '      uint summaryTokensPercent = bountyTokensPercent + foundersTokensPercent;\n', '      uint summaryFoundersTokens = issuedTokenSupply.mul(summaryTokensPercent).div(percentRate - summaryTokensPercent);\n', '      uint totalSupply = summaryFoundersTokens + issuedTokenSupply;\n', '      uint foundersTokens = totalSupply.mul(foundersTokensPercent).div(percentRate);\n', '      uint bountyTokens = totalSupply.mul(bountyTokensPercent).div(percentRate);\n', '      token.mint(this, foundersTokens);\n', '      token.transfer(foundersTokensWallet, foundersTokens);\n', '      token.mint(this, bountyTokens);\n', '      token.transfer(bountyTokensWallet, bountyTokens);\n', '      if(nextSale == address(0)) {\n', '        token.finishMinting();\n', '      } else {\n', '        token.setSaleAgent(nextSale);\n', '      }\n', '    }\n', '  }\n', '\n', '  function() external payable {\n', '    createTokens();\n', '  }\n', '\n', '  function retrieveTokens(address anotherToken) public onlyOwner {\n', '    ERC20 alienToken = ERC20(anotherToken);\n', '    alienToken.transfer(multisigWallet, token.balanceOf(this));\n', '  }\n', '\n', '}\n', '\n', '\n', '// FIXME: needs to fix addresses and hardcap, softcap\n', '// Перевести дату начала в GMT, а затем в UNIX формат с помощью сервсиа http://www.onlineconversion.com/unix_time.htm\n', 'contract Configurator is Ownable {\n', '\n', '  MintableToken public token; \n', '\n', '  CommonSale public presale;\n', '\n', '  CommonSale public mainsale;\n', '\n', '  function deploy() {\n', '    address presaleMultisigWallet = 0x675cf930aefA144dA7e10ddBACC02f902A233eFC;\n', '    address presaleBountyTokensWallet = 0x06B8fF8476425E45A3D2878e0a27BB79efd4Dde1;\n', '    address presaleFoundersWallet = 0x27F1Ac3E29CBec9D225d98fF95B6933bD30E3F71;\n', '    uint presaleSoftcap = 0x0;\n', '    uint presaleHardcap = 0x0;\n', '\n', '    address mainsaleMultisigWallet = 0xFb72502E9c56497BAC3B1c21DE434b371891CC05;\n', '    address mainsaleBountyTokensWallet = 0xd08112054C8e01E33fAEE176531dEB087809CbB2;\n', '    address mainsaleFoundersWallet = 0xDeFAE9a126bA5aA2537AaC481D9335827159D33B;\n', '    uint mainsaleHardcap = 0x0;\n', '\n', '    token = new TlindToken();\n', '\n', '    presale = new CommonSale();\n', '\n', '    presale.setToken(token);\n', '    presale.setSoftcap(presaleSoftcap);\n', '    presale.setHardcap(presaleHardcap);\n', '    presale.setMultisigWallet(presaleMultisigWallet);\n', '    presale.setFoundersTokensWallet(presaleFoundersWallet);\n', '    presale.setBountyTokensWallet(presaleBountyTokensWallet);\n', '    presale.setStart(1506344400);\n', '    presale.setFoundersTokensPercent(15);\n', '    presale.setBountyTokensPercent(5);\n', '    presale.setPrice(10000000000000000);\n', '    presale.addMilestone(8,300);\n', '    presale.addMilestone(8,200);\n', '    token.setSaleAgent(presale);\t\n', '\n', '    mainsale = new CommonSale();\n', '\n', '    mainsale.setToken(token);\n', '    mainsale.setHardcap(mainsaleHardcap);\n', '    mainsale.setMultisigWallet(mainsaleMultisigWallet);\n', '    mainsale.setFoundersTokensWallet(mainsaleFoundersWallet);\n', '    mainsale.setBountyTokensWallet(mainsaleBountyTokensWallet);\n', '    mainsale.setStart(1510318800);\n', '    mainsale.setFoundersTokensPercent(15);\n', '    mainsale.setBountyTokensPercent(5);\n', '    mainsale.setPrice(10000000000000000);\n', '    mainsale.addMilestone(1,50);\n', '    mainsale.addMilestone(6,30);\n', '    mainsale.addMilestone(14,15);\n', '    mainsale.addMilestone(14,10);\n', '    mainsale.addMilestone(14,5);\n', '    mainsale.addMilestone(7,0);\n', '    \n', '    presale.setNextSale(mainsale);\n', '\n', '    token.transferOwnership(owner);\n', '    presale.transferOwnership(owner);\n', '    mainsale.transferOwnership(owner);\n', '  }\n', '\n', '}\n', '\n', 'contract TestConfigurator is Ownable {\n', '\n', '  MintableToken public token; \n', '\n', '  CommonSale public presale;\n', '\n', '  CommonSale public mainsale;\n', '\n', '  function deploy() {\n', '    address presaleMultisigWallet = 0x675cf930aefA144dA7e10ddBACC02f902A233eFC;\n', '    address presaleBountyTokensWallet = 0x06B8fF8476425E45A3D2878e0a27BB79efd4Dde1;\n', '    address presaleFoundersWallet = 0x27F1Ac3E29CBec9D225d98fF95B6933bD30E3F71;\n', '    uint presaleSoftcap = 1000000000000000000; // 1eth\n', '    uint presaleHardcap = 2000000000000000000; // 2eth\n', '\n', '    address mainsaleMultisigWallet = 0xFb72502E9c56497BAC3B1c21DE434b371891CC05;\n', '    address mainsaleBountyTokensWallet = 0xd08112054C8e01E33fAEE176531dEB087809CbB2;\n', '    address mainsaleFoundersWallet = 0xDeFAE9a126bA5aA2537AaC481D9335827159D33B;\n', '    uint mainsaleHardcap = 2500000000000000000; // 2.5eth\n', '\n', '    token = new TlindToken();\n', '\n', '    presale = new CommonSale();\n', '\n', '    presale.setToken(token);\n', '    presale.setSoftcap(presaleSoftcap);\n', '    presale.setHardcap(presaleHardcap);\n', '    presale.setMultisigWallet(presaleMultisigWallet);\n', '    presale.setFoundersTokensWallet(presaleFoundersWallet);\n', '    presale.setBountyTokensWallet(presaleBountyTokensWallet);\n', '    presale.setStart(1505984400);  //21.09.2017 09.00\n', '    presale.setFoundersTokensPercent(15);\n', '    presale.setBountyTokensPercent(5);\n', '    presale.setPrice(10000000000000000);\n', '    presale.addMilestone(1,200); //+200%\n', '    presale.addMilestone(1,30); //+30%\n', '    token.setSaleAgent(presale);\t\n', '\n', '    mainsale = new CommonSale();\n', '\n', '    mainsale.setToken(token);\n', '    mainsale.setHardcap(mainsaleHardcap);\n', '    mainsale.setMultisigWallet(mainsaleMultisigWallet);\n', '    mainsale.setFoundersTokensWallet(mainsaleFoundersWallet);\n', '    mainsale.setBountyTokensWallet(mainsaleBountyTokensWallet);\n', '    mainsale.setStart(1506070800);  //22.09.2017 09.00\n', '    mainsale.setFoundersTokensPercent(15);\n', '    mainsale.setBountyTokensPercent(5);\n', '    mainsale.setPrice(10000000000000000);\n', '    mainsale.addMilestone(1,5); //+5%\n', '    mainsale.addMilestone(1,0);\n', '    \n', '    presale.setNextSale(mainsale);\n', '\n', '    token.transferOwnership(owner);\n', '    presale.transferOwnership(owner);\n', '    mainsale.transferOwnership(owner);\n', '  }\n', '\n', '}']