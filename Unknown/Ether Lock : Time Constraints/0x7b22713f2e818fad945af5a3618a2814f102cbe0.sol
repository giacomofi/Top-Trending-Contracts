['/*\n', '\n', '  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '  http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '\n', '*/\n', 'pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Token {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '/// @title LRC Foundation Icebox Program\n', '/// @author Daniel Wang - <<span class="__cf_email__" data-cfemail="0c686d626569604c6063637c7e65626b22637e6b">[email&#160;protected]</span>>.\n', '/// For more information, please visit https://loopring.org.\n', '\n', '/// Loopring Foundation&#39;s LRC (20% of total supply) will be locked during the first two yearsï¼Œ\n', '/// two years later, 1/24 of all locked LRC fund can be unlocked every month.\n', '\n', 'contract LRCFoundationIceboxContract {\n', '    using SafeMath for uint;\n', '    \n', '    uint public constant FREEZE_PERIOD = 720 days; // = 2 years\n', '\n', '    address public lrcTokenAddress  = 0x0;\n', '    address public owner            = 0x0;\n', '\n', '    uint public lrcInitialBalance   = 0;\n', '    uint public lrcWithdrawn         = 0;\n', '    uint public lrcUnlockPerMonth   = 0;\n', '    uint public startTime           = 0;\n', '\n', '    /* \n', '     * EVENTS\n', '     */\n', '\n', '    /// Emitted when program starts.\n', '    event Started(uint _time);\n', '\n', '    /// Emitted for each sucuessful deposit.\n', '    uint public withdrawId = 0;\n', '    event Withdrawal(uint _withdrawId, uint _lrcAmount);\n', '\n', '    /// @dev Initialize the contract\n', '    /// @param _lrcTokenAddress LRC ERC20 token address\n', '    /// @param _owner Owner&#39;s address\n', '    function LRCFoundationIceboxContract(address _lrcTokenAddress, address _owner) {\n', '        require(_lrcTokenAddress != address(0));\n', '        require(_owner != address(0));\n', '\n', '        lrcTokenAddress = _lrcTokenAddress;\n', '        owner = _owner;\n', '    }\n', '\n', '    /*\n', '     * PUBLIC FUNCTIONS\n', '     */\n', '\n', '    /// @dev start the program.\n', '    function start() public {\n', '        require(msg.sender == owner);\n', '        require(startTime == 0);\n', '\n', '        lrcInitialBalance = Token(lrcTokenAddress).balanceOf(address(this));\n', '        require(lrcInitialBalance > 0);\n', '\n', '        lrcUnlockPerMonth = lrcInitialBalance.div(24); // 24 month\n', '        startTime = now;\n', '\n', '        Started(startTime);\n', '    }\n', '\n', '\n', '    function () payable {\n', '        require(msg.sender == owner);\n', '        require(msg.value == 0);\n', '        require(startTime > 0);\n', '        require(now > startTime + FREEZE_PERIOD);\n', '\n', '        var token = Token(lrcTokenAddress);\n', '        uint balance = token.balanceOf(address(this));\n', '        require(balance > 0);\n', '\n', '        uint lrcAmount = calculateLRCUnlockAmount(now, balance);\n', '        if (lrcAmount > 0) {\n', '            lrcWithdrawn += lrcAmount;\n', '\n', '            Withdrawal(withdrawId++, lrcAmount);\n', '            require(token.transfer(owner, lrcAmount));\n', '        }\n', '    }\n', '\n', '\n', '    /*\n', '     * INTERNAL FUNCTIONS\n', '     */\n', '\n', '    function calculateLRCUnlockAmount(uint _now, uint _balance) internal returns (uint lrcAmount) {\n', '        uint unlockable = (_now - startTime - FREEZE_PERIOD)\n', '            .div(30 days)\n', '            .mul(lrcUnlockPerMonth) - lrcWithdrawn;\n', '\n', '        require(unlockable > 0);\n', '\n', '        if (unlockable > _balance) return _balance;\n', '        else return unlockable;\n', '    }\n', '\n', '}']
['/*\n', '\n', '  Copyright 2017 Loopring Project Ltd (Loopring Foundation).\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '  http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '\n', '*/\n', 'pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '}\n', '\n', 'contract Token {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '/// @title LRC Foundation Icebox Program\n', '/// @author Daniel Wang - <daniel@loopring.org>.\n', '/// For more information, please visit https://loopring.org.\n', '\n', "/// Loopring Foundation's LRC (20% of total supply) will be locked during the first two yearsï¼Œ\n", '/// two years later, 1/24 of all locked LRC fund can be unlocked every month.\n', '\n', 'contract LRCFoundationIceboxContract {\n', '    using SafeMath for uint;\n', '    \n', '    uint public constant FREEZE_PERIOD = 720 days; // = 2 years\n', '\n', '    address public lrcTokenAddress  = 0x0;\n', '    address public owner            = 0x0;\n', '\n', '    uint public lrcInitialBalance   = 0;\n', '    uint public lrcWithdrawn         = 0;\n', '    uint public lrcUnlockPerMonth   = 0;\n', '    uint public startTime           = 0;\n', '\n', '    /* \n', '     * EVENTS\n', '     */\n', '\n', '    /// Emitted when program starts.\n', '    event Started(uint _time);\n', '\n', '    /// Emitted for each sucuessful deposit.\n', '    uint public withdrawId = 0;\n', '    event Withdrawal(uint _withdrawId, uint _lrcAmount);\n', '\n', '    /// @dev Initialize the contract\n', '    /// @param _lrcTokenAddress LRC ERC20 token address\n', "    /// @param _owner Owner's address\n", '    function LRCFoundationIceboxContract(address _lrcTokenAddress, address _owner) {\n', '        require(_lrcTokenAddress != address(0));\n', '        require(_owner != address(0));\n', '\n', '        lrcTokenAddress = _lrcTokenAddress;\n', '        owner = _owner;\n', '    }\n', '\n', '    /*\n', '     * PUBLIC FUNCTIONS\n', '     */\n', '\n', '    /// @dev start the program.\n', '    function start() public {\n', '        require(msg.sender == owner);\n', '        require(startTime == 0);\n', '\n', '        lrcInitialBalance = Token(lrcTokenAddress).balanceOf(address(this));\n', '        require(lrcInitialBalance > 0);\n', '\n', '        lrcUnlockPerMonth = lrcInitialBalance.div(24); // 24 month\n', '        startTime = now;\n', '\n', '        Started(startTime);\n', '    }\n', '\n', '\n', '    function () payable {\n', '        require(msg.sender == owner);\n', '        require(msg.value == 0);\n', '        require(startTime > 0);\n', '        require(now > startTime + FREEZE_PERIOD);\n', '\n', '        var token = Token(lrcTokenAddress);\n', '        uint balance = token.balanceOf(address(this));\n', '        require(balance > 0);\n', '\n', '        uint lrcAmount = calculateLRCUnlockAmount(now, balance);\n', '        if (lrcAmount > 0) {\n', '            lrcWithdrawn += lrcAmount;\n', '\n', '            Withdrawal(withdrawId++, lrcAmount);\n', '            require(token.transfer(owner, lrcAmount));\n', '        }\n', '    }\n', '\n', '\n', '    /*\n', '     * INTERNAL FUNCTIONS\n', '     */\n', '\n', '    function calculateLRCUnlockAmount(uint _now, uint _balance) internal returns (uint lrcAmount) {\n', '        uint unlockable = (_now - startTime - FREEZE_PERIOD)\n', '            .div(30 days)\n', '            .mul(lrcUnlockPerMonth) - lrcWithdrawn;\n', '\n', '        require(unlockable > 0);\n', '\n', '        if (unlockable > _balance) return _balance;\n', '        else return unlockable;\n', '    }\n', '\n', '}']
