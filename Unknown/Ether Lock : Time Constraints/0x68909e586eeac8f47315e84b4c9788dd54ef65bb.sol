['pragma solidity ^0.4.11;\n', '\n', '/* taking ideas from FirstBlood token */\n', 'contract SafeMath {\n', '\n', 'function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\n', 'uint256 z = x + y;\n', '      assert((z >= x) && (z >= y));\n', '      return z;\n', '    }\n', '\n', '    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\n', '      assert(x >= y);\n', '      uint256 z = x - y;\n', '      return z;\n', '    }\n', '\n', '    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x * y;\n', '      assert((x == 0)||(z/x == y));\n', '      return z;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract EvenCoin is SafeMath {\n', '\n', '    // metadata\n', '    string public constant name = "EvenCoin";\n', '    string public constant symbol = "EVN";\n', '    uint256 public constant decimals = 18;\n', '    string public version = "1.0";\n', '\n', '    // contracts\n', '    address public founder;      // deposit address for ETH for EvenCoin\n', '    // crowdsale parameters\n', '    bool public isFinalized;              // switched to true in operational state\n', '    bool public saleStarted; //switched to true during ICO\n', '    uint public firstWeek;\n', '    uint public secondWeek;\n', '    uint public thirdWeek;\n', '    uint256 public soldCoins;\n', '    uint256 public totalGenesisAddresses;\n', '    uint256 public currentGenesisAddresses;\n', '    uint256 public initialSupplyPerAddress;\n', '    uint256 public initialBlockCount;\n', '    uint256 private minedBlocks;\n', '    uint256 public rewardPerBlockPerAddress;\n', '    uint256 private availableAmount;\n', '    uint256 private availableBalance;\n', '    uint256 private totalMaxAvailableAmount;\n', '    uint256 public constant founderFund = 5 * (10**6) * 10**decimals;   // 12.5m EvenCoin reserved for Owners\n', '    uint256 public constant preMinedFund = 10 * (10**6) * 10**decimals;   // 12.5m EvenCoin reserved for Promotion, Exchange etc.\n', '    uint256 public tokenExchangeRate = 2000; //  EvenCoin tokens per 1 ETH\n', '    mapping (address => uint256) balances;\n', '    mapping (address => bool) public genesisAddress;\n', '\n', '\n', '    // events\n', '    event CreateEVN(address indexed _to, uint256 _value);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    // constructor\n', '    function EvenCoin()\n', '    {\n', '      isFinalized = false;                   //controls pre through crowdsale state\n', '      saleStarted = false;\n', '      soldCoins = 0;\n', '      founder = &#39;0x9e8De5BE5B046D2c85db22324260D624E0ddadF4&#39;;\n', '      initialSupplyPerAddress = 21250 * 10**decimals;\n', '      rewardPerBlockPerAddress = 898444106206663;\n', '      totalGenesisAddresses = 4000;\n', '      currentGenesisAddresses = 0;\n', '      initialBlockCount = 0;\n', '      balances[founder] = founderFund;    // Deposit tokens for Owners\n', '      CreateEVN(founder, founderFund);  // logs Owners deposit\n', '\n', '\n', '\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function currentEthBlock() constant returns (uint256 blockNumber)\n', '    {\n', '    \treturn block.number;\n', '    }\n', '\n', '    function currentBlock() constant returns (uint256 blockNumber)\n', '    {\n', '      if(initialBlockCount == 0){\n', '        return 0;\n', '      }\n', '      else{\n', '      return block.number - initialBlockCount;\n', '    }\n', '    }\n', '\n', '    function setGenesisAddressArray(address[] _address) public returns (bool success)\n', '    {\n', '      if(initialBlockCount == 0) throw;\n', '      uint256 tempGenesisAddresses = currentGenesisAddresses + _address.length;\n', '      if (tempGenesisAddresses <= totalGenesisAddresses )\n', '    \t{\n', '    \t\tif (msg.sender == founder)\n', '    \t\t{\n', '          currentGenesisAddresses = currentGenesisAddresses + _address.length;\n', '    \t\t\tfor (uint i = 0; i < _address.length; i++)\n', '    \t\t\t{\n', '    \t\t\t\tbalances[_address[i]] = initialSupplyPerAddress;\n', '    \t\t\t\tgenesisAddress[_address[i]] = true;\n', '    \t\t\t}\n', '    \t\t\treturn true;\n', '    \t\t}\n', '    \t}\n', '    \treturn false;\n', '    }\n', '\n', '    function availableBalanceOf(address _address) constant returns (uint256 Balance)\n', '    {\n', '    \tif (genesisAddress[_address])\n', '    \t{\n', '    \t\tminedBlocks = block.number - initialBlockCount;\n', '        if(minedBlocks % 2 != 0){\n', '          minedBlocks = minedBlocks - 1;\n', '        }\n', '\n', '    \t\tif (minedBlocks >= 23652000) return balances[_address];\n', '    \t\t  availableAmount = rewardPerBlockPerAddress*minedBlocks;\n', '    \t\t  totalMaxAvailableAmount = initialSupplyPerAddress - availableAmount;\n', '          availableBalance = balances[_address] - totalMaxAvailableAmount;\n', '          return availableBalance;\n', '    \t}\n', '    \telse {\n', '    \t\treturn balances[_address];\n', '      }\n', '    }\n', '\n', '    function totalSupply() constant returns (uint256 totalSupply)\n', '    {\n', '      if (initialBlockCount != 0)\n', '      {\n', '      minedBlocks = block.number - initialBlockCount;\n', '      if(minedBlocks % 2 != 0){\n', '        minedBlocks = minedBlocks - 1;\n', '      }\n', '    \tavailableAmount = rewardPerBlockPerAddress*minedBlocks;\n', '    }\n', '    else{\n', '      availableAmount = 0;\n', '    }\n', '    \treturn availableAmount*totalGenesisAddresses+founderFund+preMinedFund;\n', '    }\n', '\n', '    function maxTotalSupply() constant returns (uint256 maxSupply)\n', '    {\n', '    \treturn initialSupplyPerAddress*totalGenesisAddresses+founderFund+preMinedFund;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value)\n', '    {\n', '      if (genesisAddress[_to]) throw;\n', '\n', '      if (balances[msg.sender] < _value) throw;\n', '\n', '      if (balances[_to] + _value < balances[_to]) throw;\n', '\n', '      if (genesisAddress[msg.sender])\n', '      {\n', '    \t   minedBlocks = block.number - initialBlockCount;\n', '         if(minedBlocks % 2 != 0){\n', '           minedBlocks = minedBlocks - 1;\n', '         }\n', '    \t    if (minedBlocks < 23652000)\n', '    \t     {\n', '    \t\t       availableAmount = rewardPerBlockPerAddress*minedBlocks;\n', '    \t\t       totalMaxAvailableAmount = initialSupplyPerAddress - availableAmount;\n', '    \t\t       availableBalance = balances[msg.sender] - totalMaxAvailableAmount;\n', '    \t\t       if (_value > availableBalance) throw;\n', '    \t     }\n', '      }\n', '      balances[msg.sender] -= _value;\n', '      balances[_to] += _value;\n', '      Transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /// @dev Accepts ether and creates new EVN tokens.\n', '    function () payable {\n', '      //bool isPreSale = true;\n', '      if (isFinalized) throw;\n', '      if (!saleStarted) throw;\n', '      if (msg.value == 0) throw;\n', '      //change exchange rate based on duration\n', '      if (now > firstWeek && now < secondWeek){\n', '        tokenExchangeRate = 1500;\n', '      }\n', '      else if (now > secondWeek && now < thirdWeek){\n', '        tokenExchangeRate = 1000;\n', '      }\n', '      else if (now > thirdWeek){\n', '        tokenExchangeRate = 500;\n', '      }\n', '      //create tokens\n', '      uint256 tokens = safeMult(msg.value, tokenExchangeRate); // check that we&#39;re not over totals\n', '      uint256 checkedSupply = safeAdd(soldCoins, tokens);\n', '\n', '      // return money if something goes wrong\n', '      if (preMinedFund < checkedSupply) throw;  // odd fractions won&#39;t be found\n', '      soldCoins = checkedSupply;\n', '      //All good. start the transfer\n', '      balances[msg.sender] += tokens;  // safeAdd not needed\n', '      CreateEVN(msg.sender, tokens);  // logs token creation\n', '    }\n', '\n', '    /// EvenCoin Ends the funding period and sends the ETH home\n', '    function finalize() external {\n', '      if (isFinalized) throw;\n', '      if (msg.sender != founder) throw; // locks finalize to the ultimate ETH owner\n', '      if (soldCoins < preMinedFund){\n', '        uint256 remainingTokens = safeSubtract(preMinedFund, soldCoins);\n', '        uint256 checkedSupply = safeAdd(soldCoins, remainingTokens);\n', '        if (preMinedFund < checkedSupply) throw;\n', '        soldCoins = checkedSupply;\n', '        balances[msg.sender] += remainingTokens;\n', '        CreateEVN(msg.sender, remainingTokens);\n', '      }\n', '      // move to operational\n', '      if(!founder.send(this.balance)) throw;\n', '      isFinalized = true;  // send the eth to EvenCoin\n', '      if (block.number % 2 != 0){\n', '        initialBlockCount = safeAdd(block.number, 1);\n', '      }\n', '      else{\n', '        initialBlockCount = block.number;\n', '      }\n', '    }\n', '\n', '    function startSale() external {\n', '      if(saleStarted) throw;\n', '      if (msg.sender != founder) throw; // locks start sale to the ultimate ETH owner\n', '      firstWeek = now + 1 weeks; //sets duration of first cutoff\n', '      secondWeek = firstWeek + 1 weeks; //sets duration of second cutoff\n', '      thirdWeek = secondWeek + 1 weeks; //sets duration of third cutoff\n', '      saleStarted = true; //start the sale\n', '    }\n', '\n', '\n', '}']
['pragma solidity ^0.4.11;\n', '\n', '/* taking ideas from FirstBlood token */\n', 'contract SafeMath {\n', '\n', 'function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\n', 'uint256 z = x + y;\n', '      assert((z >= x) && (z >= y));\n', '      return z;\n', '    }\n', '\n', '    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\n', '      assert(x >= y);\n', '      uint256 z = x - y;\n', '      return z;\n', '    }\n', '\n', '    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x * y;\n', '      assert((x == 0)||(z/x == y));\n', '      return z;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract EvenCoin is SafeMath {\n', '\n', '    // metadata\n', '    string public constant name = "EvenCoin";\n', '    string public constant symbol = "EVN";\n', '    uint256 public constant decimals = 18;\n', '    string public version = "1.0";\n', '\n', '    // contracts\n', '    address public founder;      // deposit address for ETH for EvenCoin\n', '    // crowdsale parameters\n', '    bool public isFinalized;              // switched to true in operational state\n', '    bool public saleStarted; //switched to true during ICO\n', '    uint public firstWeek;\n', '    uint public secondWeek;\n', '    uint public thirdWeek;\n', '    uint256 public soldCoins;\n', '    uint256 public totalGenesisAddresses;\n', '    uint256 public currentGenesisAddresses;\n', '    uint256 public initialSupplyPerAddress;\n', '    uint256 public initialBlockCount;\n', '    uint256 private minedBlocks;\n', '    uint256 public rewardPerBlockPerAddress;\n', '    uint256 private availableAmount;\n', '    uint256 private availableBalance;\n', '    uint256 private totalMaxAvailableAmount;\n', '    uint256 public constant founderFund = 5 * (10**6) * 10**decimals;   // 12.5m EvenCoin reserved for Owners\n', '    uint256 public constant preMinedFund = 10 * (10**6) * 10**decimals;   // 12.5m EvenCoin reserved for Promotion, Exchange etc.\n', '    uint256 public tokenExchangeRate = 2000; //  EvenCoin tokens per 1 ETH\n', '    mapping (address => uint256) balances;\n', '    mapping (address => bool) public genesisAddress;\n', '\n', '\n', '    // events\n', '    event CreateEVN(address indexed _to, uint256 _value);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    // constructor\n', '    function EvenCoin()\n', '    {\n', '      isFinalized = false;                   //controls pre through crowdsale state\n', '      saleStarted = false;\n', '      soldCoins = 0;\n', "      founder = '0x9e8De5BE5B046D2c85db22324260D624E0ddadF4';\n", '      initialSupplyPerAddress = 21250 * 10**decimals;\n', '      rewardPerBlockPerAddress = 898444106206663;\n', '      totalGenesisAddresses = 4000;\n', '      currentGenesisAddresses = 0;\n', '      initialBlockCount = 0;\n', '      balances[founder] = founderFund;    // Deposit tokens for Owners\n', '      CreateEVN(founder, founderFund);  // logs Owners deposit\n', '\n', '\n', '\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function currentEthBlock() constant returns (uint256 blockNumber)\n', '    {\n', '    \treturn block.number;\n', '    }\n', '\n', '    function currentBlock() constant returns (uint256 blockNumber)\n', '    {\n', '      if(initialBlockCount == 0){\n', '        return 0;\n', '      }\n', '      else{\n', '      return block.number - initialBlockCount;\n', '    }\n', '    }\n', '\n', '    function setGenesisAddressArray(address[] _address) public returns (bool success)\n', '    {\n', '      if(initialBlockCount == 0) throw;\n', '      uint256 tempGenesisAddresses = currentGenesisAddresses + _address.length;\n', '      if (tempGenesisAddresses <= totalGenesisAddresses )\n', '    \t{\n', '    \t\tif (msg.sender == founder)\n', '    \t\t{\n', '          currentGenesisAddresses = currentGenesisAddresses + _address.length;\n', '    \t\t\tfor (uint i = 0; i < _address.length; i++)\n', '    \t\t\t{\n', '    \t\t\t\tbalances[_address[i]] = initialSupplyPerAddress;\n', '    \t\t\t\tgenesisAddress[_address[i]] = true;\n', '    \t\t\t}\n', '    \t\t\treturn true;\n', '    \t\t}\n', '    \t}\n', '    \treturn false;\n', '    }\n', '\n', '    function availableBalanceOf(address _address) constant returns (uint256 Balance)\n', '    {\n', '    \tif (genesisAddress[_address])\n', '    \t{\n', '    \t\tminedBlocks = block.number - initialBlockCount;\n', '        if(minedBlocks % 2 != 0){\n', '          minedBlocks = minedBlocks - 1;\n', '        }\n', '\n', '    \t\tif (minedBlocks >= 23652000) return balances[_address];\n', '    \t\t  availableAmount = rewardPerBlockPerAddress*minedBlocks;\n', '    \t\t  totalMaxAvailableAmount = initialSupplyPerAddress - availableAmount;\n', '          availableBalance = balances[_address] - totalMaxAvailableAmount;\n', '          return availableBalance;\n', '    \t}\n', '    \telse {\n', '    \t\treturn balances[_address];\n', '      }\n', '    }\n', '\n', '    function totalSupply() constant returns (uint256 totalSupply)\n', '    {\n', '      if (initialBlockCount != 0)\n', '      {\n', '      minedBlocks = block.number - initialBlockCount;\n', '      if(minedBlocks % 2 != 0){\n', '        minedBlocks = minedBlocks - 1;\n', '      }\n', '    \tavailableAmount = rewardPerBlockPerAddress*minedBlocks;\n', '    }\n', '    else{\n', '      availableAmount = 0;\n', '    }\n', '    \treturn availableAmount*totalGenesisAddresses+founderFund+preMinedFund;\n', '    }\n', '\n', '    function maxTotalSupply() constant returns (uint256 maxSupply)\n', '    {\n', '    \treturn initialSupplyPerAddress*totalGenesisAddresses+founderFund+preMinedFund;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value)\n', '    {\n', '      if (genesisAddress[_to]) throw;\n', '\n', '      if (balances[msg.sender] < _value) throw;\n', '\n', '      if (balances[_to] + _value < balances[_to]) throw;\n', '\n', '      if (genesisAddress[msg.sender])\n', '      {\n', '    \t   minedBlocks = block.number - initialBlockCount;\n', '         if(minedBlocks % 2 != 0){\n', '           minedBlocks = minedBlocks - 1;\n', '         }\n', '    \t    if (minedBlocks < 23652000)\n', '    \t     {\n', '    \t\t       availableAmount = rewardPerBlockPerAddress*minedBlocks;\n', '    \t\t       totalMaxAvailableAmount = initialSupplyPerAddress - availableAmount;\n', '    \t\t       availableBalance = balances[msg.sender] - totalMaxAvailableAmount;\n', '    \t\t       if (_value > availableBalance) throw;\n', '    \t     }\n', '      }\n', '      balances[msg.sender] -= _value;\n', '      balances[_to] += _value;\n', '      Transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /// @dev Accepts ether and creates new EVN tokens.\n', '    function () payable {\n', '      //bool isPreSale = true;\n', '      if (isFinalized) throw;\n', '      if (!saleStarted) throw;\n', '      if (msg.value == 0) throw;\n', '      //change exchange rate based on duration\n', '      if (now > firstWeek && now < secondWeek){\n', '        tokenExchangeRate = 1500;\n', '      }\n', '      else if (now > secondWeek && now < thirdWeek){\n', '        tokenExchangeRate = 1000;\n', '      }\n', '      else if (now > thirdWeek){\n', '        tokenExchangeRate = 500;\n', '      }\n', '      //create tokens\n', "      uint256 tokens = safeMult(msg.value, tokenExchangeRate); // check that we're not over totals\n", '      uint256 checkedSupply = safeAdd(soldCoins, tokens);\n', '\n', '      // return money if something goes wrong\n', "      if (preMinedFund < checkedSupply) throw;  // odd fractions won't be found\n", '      soldCoins = checkedSupply;\n', '      //All good. start the transfer\n', '      balances[msg.sender] += tokens;  // safeAdd not needed\n', '      CreateEVN(msg.sender, tokens);  // logs token creation\n', '    }\n', '\n', '    /// EvenCoin Ends the funding period and sends the ETH home\n', '    function finalize() external {\n', '      if (isFinalized) throw;\n', '      if (msg.sender != founder) throw; // locks finalize to the ultimate ETH owner\n', '      if (soldCoins < preMinedFund){\n', '        uint256 remainingTokens = safeSubtract(preMinedFund, soldCoins);\n', '        uint256 checkedSupply = safeAdd(soldCoins, remainingTokens);\n', '        if (preMinedFund < checkedSupply) throw;\n', '        soldCoins = checkedSupply;\n', '        balances[msg.sender] += remainingTokens;\n', '        CreateEVN(msg.sender, remainingTokens);\n', '      }\n', '      // move to operational\n', '      if(!founder.send(this.balance)) throw;\n', '      isFinalized = true;  // send the eth to EvenCoin\n', '      if (block.number % 2 != 0){\n', '        initialBlockCount = safeAdd(block.number, 1);\n', '      }\n', '      else{\n', '        initialBlockCount = block.number;\n', '      }\n', '    }\n', '\n', '    function startSale() external {\n', '      if(saleStarted) throw;\n', '      if (msg.sender != founder) throw; // locks start sale to the ultimate ETH owner\n', '      firstWeek = now + 1 weeks; //sets duration of first cutoff\n', '      secondWeek = firstWeek + 1 weeks; //sets duration of second cutoff\n', '      thirdWeek = secondWeek + 1 weeks; //sets duration of third cutoff\n', '      saleStarted = true; //start the sale\n', '    }\n', '\n', '\n', '}']
