['pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control \n', ' * functions, this simplifies the implementation of "user permissions". \n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /** \n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner. \n', '   */\n', '  modifier onlyOwner() {\n', '    if (msg.sender != owner) {\n', '      throw;\n', '    }\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to. \n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value);\n', '  function approve(address spender, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '   * @dev Fix for the ERC20 short address attack.\n', '   */\n', '  modifier onlyPayloadSize(uint256 size) {\n', '     if(msg.data.length < size + 4) {\n', '       throw;\n', '     }\n', '     _;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implemantation of the basic standart token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is BasicToken, ERC20 {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // if (_value > _allowance) throw;\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens than an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', 'contract CryptoABS is StandardToken, Ownable {\n', '  string public name;                                   // 名稱\n', '  string public symbol;                                 // token 代號\n', '  uint256 public decimals = 0;                          // decimals\n', '  address public contractAddress;                       // contract address\n', '\n', '  uint256 public minInvestInWei;                        // 最低投資金額 in wei\n', '  uint256 public tokenExchangeRateInWei;                // 1 Token = n ETH in wei\n', '\n', '  uint256 public startBlock;                            // ICO 起始的 block number\n', '  uint256 public endBlock;                              // ICO 結束的 block number\n', '  uint256 public maxTokenSupply;                        // ICO 的 max token，透過 USD to ETH 換算出來\n', '  \n', '  uint256 public initializedTime;                       // 起始時間，合約部署的時候會寫入\n', '  uint256 public financingPeriod;                       // token 籌資期間\n', '  uint256 public tokenLockoutPeriod;                    // token 閉鎖期，閉鎖期內不得 transfer\n', '  uint256 public tokenMaturityPeriod;                   // token 到期日\n', '\n', '  bool public paused;                                   // 暫停合約功能執行\n', '  bool public initialized;                              // 合約啟動\n', '  uint256 public finalizedBlock;                        // 合約終止投資的區塊編號\n', '  uint256 public finalizedTime;                         // 合約終止投資的時間\n', '  uint256 public finalizedCapital;                      // 合約到期的 ETH 金額\n', '\n', '  struct ExchangeRate {\n', '    uint256 blockNumber;                                // block number\n', '    uint256 exchangeRateInWei;                          // 1 USD = n ETH in wei, 派發利息使用的利率基準\n', '  }\n', '\n', '  ExchangeRate[] public exchangeRateArray;              // exchange rate array\n', '  uint256 public nextExchangeRateIndex;                 // exchange rate last index\n', '  \n', '  uint256[] public interestArray;                       // interest array\n', '\n', '  struct Payee {\n', '    bool isExists;                                      // payee 存在\n', '    bool isPayable;                                     // payee 允許領錢\n', '    uint256 interestInWei;                              // 待領利息金額\n', '  }\n', '\n', '  mapping (address => Payee) public payees; \n', '  address[] public payeeArray;                          // payee array\n', '  uint256 public nextPayeeIndex;                        // payee deposite interest index\n', '\n', '  struct Asset {\n', '    string data;                                        // asset data\n', '  }\n', '\n', '  Asset[] public assetArray;                            // asset array\n', '\n', '  /**\n', '   * @dev Throws if contract paused.\n', '   */\n', '  modifier notPaused() {\n', '    require(paused == false);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if contract is paused.\n', '   */\n', '  modifier isPaused() {\n', '    require(paused == true);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if not a payee. \n', '   */\n', '  modifier isPayee() {\n', '    require(payees[msg.sender].isPayable == true);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if contract not initialized. \n', '   */\n', '  modifier isInitialized() {\n', '    require(initialized == true);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if contract not open. \n', '   */\n', '  modifier isContractOpen() {\n', '    require(\n', '      getBlockNumber() >= startBlock &&\n', '      getBlockNumber() <= endBlock &&\n', '      finalizedBlock == 0);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if token in lockout period. \n', '   */\n', '  modifier notLockout() {\n', '    require(now > (initializedTime + financingPeriod + tokenLockoutPeriod));\n', '    _;\n', '  }\n', '  \n', '  /**\n', '   * @dev Throws if not over maturity date. \n', '   */\n', '  modifier overMaturity() {\n', '    require(now > (initializedTime + financingPeriod + tokenMaturityPeriod));\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Contract constructor.\n', '   */\n', '  function CryptoABS() {\n', '    paused = false;\n', '  }\n', '\n', '  /**\n', '   * @dev Initialize contract with inital parameters. \n', '   * @param _name name of token\n', '   * @param _symbol symbol of token\n', '   * @param _contractAddress contract deployed address\n', '   * @param _startBlock start block number\n', '   * @param _endBlock end block number\n', '   * @param _initializedTime contract initalized time\n', '   * @param _financingPeriod contract financing period\n', '   * @param _tokenLockoutPeriod contract token lockout period\n', '   * @param _tokenMaturityPeriod contract token maturity period\n', '   * @param _minInvestInWei minimum wei accept of invest\n', '   * @param _maxTokenSupply maximum toke supply\n', '   * @param _tokenExchangeRateInWei token exchange rate in wei\n', '   * @param _exchangeRateInWei eth exchange rate in wei\n', '   */\n', '  function initialize(\n', '      string _name,\n', '      string _symbol,\n', '      uint256 _decimals,\n', '      address _contractAddress,\n', '      uint256 _startBlock,\n', '      uint256 _endBlock,\n', '      uint256 _initializedTime,\n', '      uint256 _financingPeriod,\n', '      uint256 _tokenLockoutPeriod,\n', '      uint256 _tokenMaturityPeriod,\n', '      uint256 _minInvestInWei,\n', '      uint256 _maxTokenSupply,\n', '      uint256 _tokenExchangeRateInWei,\n', '      uint256 _exchangeRateInWei) onlyOwner {\n', '    require(bytes(name).length == 0);\n', '    require(bytes(symbol).length == 0);\n', '    require(decimals == 0);\n', '    require(contractAddress == 0x0);\n', '    require(totalSupply == 0);\n', '    require(decimals == 0);\n', '    require(_startBlock >= getBlockNumber());\n', '    require(_startBlock < _endBlock);\n', '    require(financingPeriod == 0);\n', '    require(tokenLockoutPeriod == 0);\n', '    require(tokenMaturityPeriod == 0);\n', '    require(initializedTime == 0);\n', '    require(_maxTokenSupply >= totalSupply);\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '    contractAddress = _contractAddress;\n', '    startBlock = _startBlock;\n', '    endBlock = _endBlock;\n', '    initializedTime = _initializedTime;\n', '    financingPeriod = _financingPeriod;\n', '    tokenLockoutPeriod = _tokenLockoutPeriod;\n', '    tokenMaturityPeriod = _tokenMaturityPeriod;\n', '    minInvestInWei = _minInvestInWei;\n', '    maxTokenSupply = _maxTokenSupply;\n', '    tokenExchangeRateInWei = _tokenExchangeRateInWei;\n', '    ownerSetExchangeRateInWei(_exchangeRateInWei);\n', '    initialized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Finalize contract\n', '   */\n', '  function finalize() public isInitialized {\n', '    require(getBlockNumber() >= startBlock);\n', '    require(msg.sender == owner || getBlockNumber() > endBlock);\n', '\n', '    finalizedBlock = getBlockNumber();\n', '    finalizedTime = now;\n', '\n', '    Finalized();\n', '  }\n', '\n', '  /**\n', '   * @dev fallback function accept ether\n', '   */\n', '  function () payable notPaused {\n', '    proxyPayment(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev payment function, transfer eth to token\n', '   * @param _payee The payee address\n', '   */\n', '  function proxyPayment(address _payee) public payable notPaused isInitialized isContractOpen returns (bool) {\n', '    require(msg.value > 0);\n', '\n', '    uint256 amount = msg.value;\n', '    require(amount >= minInvestInWei); \n', '\n', '    uint256 refund = amount % tokenExchangeRateInWei;\n', '    uint256 tokens = (amount - refund) / tokenExchangeRateInWei;\n', '    require(totalSupply.add(tokens) <= maxTokenSupply);\n', '    totalSupply = totalSupply.add(tokens);\n', '    balances[_payee] = balances[_payee].add(tokens);\n', '\n', '    if (payees[msg.sender].isExists != true) {\n', '      payees[msg.sender].isExists = true;\n', '      payees[msg.sender].isPayable = true;\n', '      payeeArray.push(msg.sender);\n', '    }\n', '\n', '    require(owner.send(amount - refund));\n', '    if (refund > 0) {\n', '      require(msg.sender.send(refund));\n', '    }\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev transfer token\n', '   * @param _to The address to transfer to.\n', '   * @param _value The amount to be transferred.\n', '   */\n', '  function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) notLockout notPaused isInitialized {\n', '    require(_to != contractAddress);\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    if (payees[_to].isExists != true) {\n', '      payees[_to].isExists = true;\n', '      payees[_to].isPayable = true;\n', '      payeeArray.push(_to);\n', '    }\n', '    Transfer(msg.sender, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) notLockout notPaused isInitialized {\n', '    require(_to != contractAddress);\n', '    require(_from != contractAddress);\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // if (_value > _allowance) throw;\n', '    require(_allowance >= _value);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    if (payees[_to].isExists != true) {\n', '      payees[_to].isExists = true;\n', '      payees[_to].isPayable = true;\n', '      payeeArray.push(_to);\n', '    }\n', '    Transfer(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev add interest to each payees\n', '   */\n', '  function ownerDepositInterest() onlyOwner isPaused isInitialized {\n', '    uint256 i = nextPayeeIndex;\n', '    uint256 payeesLength = payeeArray.length;\n', '    while (i < payeesLength && msg.gas > 2000000) {\n', '      address _payee = payeeArray[i];\n', '      uint256 _balance = balances[_payee];\n', '      if (payees[_payee].isPayable == true && _balance > 0) {\n', '        uint256 _interestInWei = (_balance * interestArray[getInterestCount() - 1]) / totalSupply;\n', '        payees[_payee].interestInWei += _interestInWei;\n', '        DepositInterest(getInterestCount(), _payee, _balance, _interestInWei);\n', '      }\n', '      i++;\n', '    }\n', '    nextPayeeIndex = i;\n', '  }\n', '\n', '  /**\n', '   * @dev return interest by address, unit `wei`\n', '   * @param _address The payee address\n', '   */\n', '  function interestOf(address _address) isInitialized constant returns (uint256 result)  {\n', '    require(payees[_address].isExists == true);\n', '    return payees[_address].interestInWei;\n', '  }\n', '\n', '  /**\n', '   * @dev withdraw interest by payee\n', '   * @param _interestInWei Withdraw interest amount in wei\n', '   */\n', '  function payeeWithdrawInterest(uint256 _interestInWei) payable isPayee isInitialized notLockout {\n', '    require(msg.value == 0);\n', '    uint256 interestInWei = _interestInWei;\n', '    require(payees[msg.sender].isPayable == true && _interestInWei <= payees[msg.sender].interestInWei);\n', '    require(msg.sender.send(interestInWei));\n', '    payees[msg.sender].interestInWei -= interestInWei;\n', '    PayeeWithdrawInterest(msg.sender, interestInWei, payees[msg.sender].interestInWei);\n', '  }\n', '\n', '  /**\n', '   * @dev withdraw capital by payee\n', '   */\n', '  function payeeWithdrawCapital() payable isPayee isPaused isInitialized overMaturity {\n', '    require(msg.value == 0);\n', '    require(balances[msg.sender] > 0 && totalSupply > 0);\n', '    uint256 capital = (balances[msg.sender] * finalizedCapital) / totalSupply;\n', '    balances[msg.sender] = 0;\n', '    require(msg.sender.send(capital));\n', '    PayeeWithdrawCapital(msg.sender, capital);\n', '  }\n', '\n', '  /**\n', '   * @dev pause contract\n', '   */\n', '  function ownerPauseContract() onlyOwner {\n', '    paused = true;\n', '  }\n', '\n', '  /**\n', '   * @dev resume contract\n', '   */\n', '  function ownerResumeContract() onlyOwner {\n', '    paused = false;\n', '  }\n', '\n', '  /**\n', '   * @dev set exchange rate in wei, 1 Token = n ETH in wei\n', '   * @param _exchangeRateInWei change rate of ether\n', '   */\n', '  function ownerSetExchangeRateInWei(uint256 _exchangeRateInWei) onlyOwner {\n', '    require(_exchangeRateInWei > 0);\n', '    var _exchangeRate = ExchangeRate( getBlockNumber(), _exchangeRateInWei);\n', '    exchangeRateArray.push(_exchangeRate);\n', '    nextExchangeRateIndex = exchangeRateArray.length;\n', '  }\n', '\n', '  /**\n', '   * @dev disable single payee in emergency\n', '   * @param _address Disable payee address\n', '   */\n', '  function ownerDisablePayee(address _address) onlyOwner {\n', '    require(_address != owner);\n', '    payees[_address].isPayable = false;\n', '  }\n', '\n', '  /**\n', '   * @dev enable single payee\n', '   * @param _address Enable payee address\n', '   */\n', '  function ownerEnablePayee(address _address) onlyOwner {\n', '    payees[_address].isPayable = true;\n', '  }\n', '\n', '  /**\n', '   * @dev get payee count\n', '   */\n', '  function getPayeeCount() constant returns (uint256) {\n', '    return payeeArray.length;\n', '  }\n', '\n', '  /**\n', '   * @dev get block number\n', '   */\n', '  function getBlockNumber() internal constant returns (uint256) {\n', '    return block.number;\n', '  }\n', '\n', '  /**\n', '   * @dev add asset data, audit information\n', '   * @param _data asset data\n', '   */\n', '  function ownerAddAsset(string _data) onlyOwner {\n', '    var _asset = Asset(_data);\n', '    assetArray.push(_asset);\n', '  }\n', '\n', '  /**\n', '   * @dev get asset count\n', '   */\n', '  function getAssetCount() constant returns (uint256 result) {\n', '    return assetArray.length;\n', '  }\n', '\n', '  /**\n', '   * @dev put all capital in this contract\n', '   */\n', '  function ownerPutCapital() payable isInitialized isPaused onlyOwner {\n', '    require(msg.value > 0);\n', '    finalizedCapital = msg.value;\n', '  }\n', '\n', '  /**\n', '   * @dev put interest in this contract\n', '   * @param _terms Number of interest\n', '   */\n', '  function ownerPutInterest(uint256 _terms) payable isInitialized isPaused onlyOwner {\n', '    require(_terms == (getInterestCount() + 1));\n', '    interestArray.push(msg.value);\n', '  }\n', '\n', '  /**\n', '   * @dev get interest count\n', '   */\n', '  function getInterestCount() constant returns (uint256 result) {\n', '    return interestArray.length;\n', '  }\n', '\n', '  /**\n', '   * @dev withdraw balance from contract if emergency\n', '   */\n', '  function ownerWithdraw() payable isInitialized onlyOwner {\n', '    require(owner.send(this.balance));\n', '  }\n', '\n', '  event PayeeWithdrawCapital(address _payee, uint256 _capital);\n', '  event PayeeWithdrawInterest(address _payee, uint256 _interest, uint256 _remainInterest);\n', '  event DepositInterest(uint256 _terms, address _payee, uint256 _balance, uint256 _interest);\n', '  event Finalized();\n', '}']
['pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control \n', ' * functions, this simplifies the implementation of "user permissions". \n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /** \n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner. \n', '   */\n', '  modifier onlyOwner() {\n', '    if (msg.sender != owner) {\n', '      throw;\n', '    }\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to. \n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value);\n', '  function approve(address spender, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '   * @dev Fix for the ERC20 short address attack.\n', '   */\n', '  modifier onlyPayloadSize(uint256 size) {\n', '     if(msg.data.length < size + 4) {\n', '       throw;\n', '     }\n', '     _;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implemantation of the basic standart token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is BasicToken, ERC20 {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // if (_value > _allowance) throw;\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens than an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', 'contract CryptoABS is StandardToken, Ownable {\n', '  string public name;                                   // 名稱\n', '  string public symbol;                                 // token 代號\n', '  uint256 public decimals = 0;                          // decimals\n', '  address public contractAddress;                       // contract address\n', '\n', '  uint256 public minInvestInWei;                        // 最低投資金額 in wei\n', '  uint256 public tokenExchangeRateInWei;                // 1 Token = n ETH in wei\n', '\n', '  uint256 public startBlock;                            // ICO 起始的 block number\n', '  uint256 public endBlock;                              // ICO 結束的 block number\n', '  uint256 public maxTokenSupply;                        // ICO 的 max token，透過 USD to ETH 換算出來\n', '  \n', '  uint256 public initializedTime;                       // 起始時間，合約部署的時候會寫入\n', '  uint256 public financingPeriod;                       // token 籌資期間\n', '  uint256 public tokenLockoutPeriod;                    // token 閉鎖期，閉鎖期內不得 transfer\n', '  uint256 public tokenMaturityPeriod;                   // token 到期日\n', '\n', '  bool public paused;                                   // 暫停合約功能執行\n', '  bool public initialized;                              // 合約啟動\n', '  uint256 public finalizedBlock;                        // 合約終止投資的區塊編號\n', '  uint256 public finalizedTime;                         // 合約終止投資的時間\n', '  uint256 public finalizedCapital;                      // 合約到期的 ETH 金額\n', '\n', '  struct ExchangeRate {\n', '    uint256 blockNumber;                                // block number\n', '    uint256 exchangeRateInWei;                          // 1 USD = n ETH in wei, 派發利息使用的利率基準\n', '  }\n', '\n', '  ExchangeRate[] public exchangeRateArray;              // exchange rate array\n', '  uint256 public nextExchangeRateIndex;                 // exchange rate last index\n', '  \n', '  uint256[] public interestArray;                       // interest array\n', '\n', '  struct Payee {\n', '    bool isExists;                                      // payee 存在\n', '    bool isPayable;                                     // payee 允許領錢\n', '    uint256 interestInWei;                              // 待領利息金額\n', '  }\n', '\n', '  mapping (address => Payee) public payees; \n', '  address[] public payeeArray;                          // payee array\n', '  uint256 public nextPayeeIndex;                        // payee deposite interest index\n', '\n', '  struct Asset {\n', '    string data;                                        // asset data\n', '  }\n', '\n', '  Asset[] public assetArray;                            // asset array\n', '\n', '  /**\n', '   * @dev Throws if contract paused.\n', '   */\n', '  modifier notPaused() {\n', '    require(paused == false);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if contract is paused.\n', '   */\n', '  modifier isPaused() {\n', '    require(paused == true);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if not a payee. \n', '   */\n', '  modifier isPayee() {\n', '    require(payees[msg.sender].isPayable == true);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if contract not initialized. \n', '   */\n', '  modifier isInitialized() {\n', '    require(initialized == true);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if contract not open. \n', '   */\n', '  modifier isContractOpen() {\n', '    require(\n', '      getBlockNumber() >= startBlock &&\n', '      getBlockNumber() <= endBlock &&\n', '      finalizedBlock == 0);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if token in lockout period. \n', '   */\n', '  modifier notLockout() {\n', '    require(now > (initializedTime + financingPeriod + tokenLockoutPeriod));\n', '    _;\n', '  }\n', '  \n', '  /**\n', '   * @dev Throws if not over maturity date. \n', '   */\n', '  modifier overMaturity() {\n', '    require(now > (initializedTime + financingPeriod + tokenMaturityPeriod));\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Contract constructor.\n', '   */\n', '  function CryptoABS() {\n', '    paused = false;\n', '  }\n', '\n', '  /**\n', '   * @dev Initialize contract with inital parameters. \n', '   * @param _name name of token\n', '   * @param _symbol symbol of token\n', '   * @param _contractAddress contract deployed address\n', '   * @param _startBlock start block number\n', '   * @param _endBlock end block number\n', '   * @param _initializedTime contract initalized time\n', '   * @param _financingPeriod contract financing period\n', '   * @param _tokenLockoutPeriod contract token lockout period\n', '   * @param _tokenMaturityPeriod contract token maturity period\n', '   * @param _minInvestInWei minimum wei accept of invest\n', '   * @param _maxTokenSupply maximum toke supply\n', '   * @param _tokenExchangeRateInWei token exchange rate in wei\n', '   * @param _exchangeRateInWei eth exchange rate in wei\n', '   */\n', '  function initialize(\n', '      string _name,\n', '      string _symbol,\n', '      uint256 _decimals,\n', '      address _contractAddress,\n', '      uint256 _startBlock,\n', '      uint256 _endBlock,\n', '      uint256 _initializedTime,\n', '      uint256 _financingPeriod,\n', '      uint256 _tokenLockoutPeriod,\n', '      uint256 _tokenMaturityPeriod,\n', '      uint256 _minInvestInWei,\n', '      uint256 _maxTokenSupply,\n', '      uint256 _tokenExchangeRateInWei,\n', '      uint256 _exchangeRateInWei) onlyOwner {\n', '    require(bytes(name).length == 0);\n', '    require(bytes(symbol).length == 0);\n', '    require(decimals == 0);\n', '    require(contractAddress == 0x0);\n', '    require(totalSupply == 0);\n', '    require(decimals == 0);\n', '    require(_startBlock >= getBlockNumber());\n', '    require(_startBlock < _endBlock);\n', '    require(financingPeriod == 0);\n', '    require(tokenLockoutPeriod == 0);\n', '    require(tokenMaturityPeriod == 0);\n', '    require(initializedTime == 0);\n', '    require(_maxTokenSupply >= totalSupply);\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '    contractAddress = _contractAddress;\n', '    startBlock = _startBlock;\n', '    endBlock = _endBlock;\n', '    initializedTime = _initializedTime;\n', '    financingPeriod = _financingPeriod;\n', '    tokenLockoutPeriod = _tokenLockoutPeriod;\n', '    tokenMaturityPeriod = _tokenMaturityPeriod;\n', '    minInvestInWei = _minInvestInWei;\n', '    maxTokenSupply = _maxTokenSupply;\n', '    tokenExchangeRateInWei = _tokenExchangeRateInWei;\n', '    ownerSetExchangeRateInWei(_exchangeRateInWei);\n', '    initialized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Finalize contract\n', '   */\n', '  function finalize() public isInitialized {\n', '    require(getBlockNumber() >= startBlock);\n', '    require(msg.sender == owner || getBlockNumber() > endBlock);\n', '\n', '    finalizedBlock = getBlockNumber();\n', '    finalizedTime = now;\n', '\n', '    Finalized();\n', '  }\n', '\n', '  /**\n', '   * @dev fallback function accept ether\n', '   */\n', '  function () payable notPaused {\n', '    proxyPayment(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev payment function, transfer eth to token\n', '   * @param _payee The payee address\n', '   */\n', '  function proxyPayment(address _payee) public payable notPaused isInitialized isContractOpen returns (bool) {\n', '    require(msg.value > 0);\n', '\n', '    uint256 amount = msg.value;\n', '    require(amount >= minInvestInWei); \n', '\n', '    uint256 refund = amount % tokenExchangeRateInWei;\n', '    uint256 tokens = (amount - refund) / tokenExchangeRateInWei;\n', '    require(totalSupply.add(tokens) <= maxTokenSupply);\n', '    totalSupply = totalSupply.add(tokens);\n', '    balances[_payee] = balances[_payee].add(tokens);\n', '\n', '    if (payees[msg.sender].isExists != true) {\n', '      payees[msg.sender].isExists = true;\n', '      payees[msg.sender].isPayable = true;\n', '      payeeArray.push(msg.sender);\n', '    }\n', '\n', '    require(owner.send(amount - refund));\n', '    if (refund > 0) {\n', '      require(msg.sender.send(refund));\n', '    }\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev transfer token\n', '   * @param _to The address to transfer to.\n', '   * @param _value The amount to be transferred.\n', '   */\n', '  function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) notLockout notPaused isInitialized {\n', '    require(_to != contractAddress);\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    if (payees[_to].isExists != true) {\n', '      payees[_to].isExists = true;\n', '      payees[_to].isPayable = true;\n', '      payeeArray.push(_to);\n', '    }\n', '    Transfer(msg.sender, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) notLockout notPaused isInitialized {\n', '    require(_to != contractAddress);\n', '    require(_from != contractAddress);\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // if (_value > _allowance) throw;\n', '    require(_allowance >= _value);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    if (payees[_to].isExists != true) {\n', '      payees[_to].isExists = true;\n', '      payees[_to].isPayable = true;\n', '      payeeArray.push(_to);\n', '    }\n', '    Transfer(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev add interest to each payees\n', '   */\n', '  function ownerDepositInterest() onlyOwner isPaused isInitialized {\n', '    uint256 i = nextPayeeIndex;\n', '    uint256 payeesLength = payeeArray.length;\n', '    while (i < payeesLength && msg.gas > 2000000) {\n', '      address _payee = payeeArray[i];\n', '      uint256 _balance = balances[_payee];\n', '      if (payees[_payee].isPayable == true && _balance > 0) {\n', '        uint256 _interestInWei = (_balance * interestArray[getInterestCount() - 1]) / totalSupply;\n', '        payees[_payee].interestInWei += _interestInWei;\n', '        DepositInterest(getInterestCount(), _payee, _balance, _interestInWei);\n', '      }\n', '      i++;\n', '    }\n', '    nextPayeeIndex = i;\n', '  }\n', '\n', '  /**\n', '   * @dev return interest by address, unit `wei`\n', '   * @param _address The payee address\n', '   */\n', '  function interestOf(address _address) isInitialized constant returns (uint256 result)  {\n', '    require(payees[_address].isExists == true);\n', '    return payees[_address].interestInWei;\n', '  }\n', '\n', '  /**\n', '   * @dev withdraw interest by payee\n', '   * @param _interestInWei Withdraw interest amount in wei\n', '   */\n', '  function payeeWithdrawInterest(uint256 _interestInWei) payable isPayee isInitialized notLockout {\n', '    require(msg.value == 0);\n', '    uint256 interestInWei = _interestInWei;\n', '    require(payees[msg.sender].isPayable == true && _interestInWei <= payees[msg.sender].interestInWei);\n', '    require(msg.sender.send(interestInWei));\n', '    payees[msg.sender].interestInWei -= interestInWei;\n', '    PayeeWithdrawInterest(msg.sender, interestInWei, payees[msg.sender].interestInWei);\n', '  }\n', '\n', '  /**\n', '   * @dev withdraw capital by payee\n', '   */\n', '  function payeeWithdrawCapital() payable isPayee isPaused isInitialized overMaturity {\n', '    require(msg.value == 0);\n', '    require(balances[msg.sender] > 0 && totalSupply > 0);\n', '    uint256 capital = (balances[msg.sender] * finalizedCapital) / totalSupply;\n', '    balances[msg.sender] = 0;\n', '    require(msg.sender.send(capital));\n', '    PayeeWithdrawCapital(msg.sender, capital);\n', '  }\n', '\n', '  /**\n', '   * @dev pause contract\n', '   */\n', '  function ownerPauseContract() onlyOwner {\n', '    paused = true;\n', '  }\n', '\n', '  /**\n', '   * @dev resume contract\n', '   */\n', '  function ownerResumeContract() onlyOwner {\n', '    paused = false;\n', '  }\n', '\n', '  /**\n', '   * @dev set exchange rate in wei, 1 Token = n ETH in wei\n', '   * @param _exchangeRateInWei change rate of ether\n', '   */\n', '  function ownerSetExchangeRateInWei(uint256 _exchangeRateInWei) onlyOwner {\n', '    require(_exchangeRateInWei > 0);\n', '    var _exchangeRate = ExchangeRate( getBlockNumber(), _exchangeRateInWei);\n', '    exchangeRateArray.push(_exchangeRate);\n', '    nextExchangeRateIndex = exchangeRateArray.length;\n', '  }\n', '\n', '  /**\n', '   * @dev disable single payee in emergency\n', '   * @param _address Disable payee address\n', '   */\n', '  function ownerDisablePayee(address _address) onlyOwner {\n', '    require(_address != owner);\n', '    payees[_address].isPayable = false;\n', '  }\n', '\n', '  /**\n', '   * @dev enable single payee\n', '   * @param _address Enable payee address\n', '   */\n', '  function ownerEnablePayee(address _address) onlyOwner {\n', '    payees[_address].isPayable = true;\n', '  }\n', '\n', '  /**\n', '   * @dev get payee count\n', '   */\n', '  function getPayeeCount() constant returns (uint256) {\n', '    return payeeArray.length;\n', '  }\n', '\n', '  /**\n', '   * @dev get block number\n', '   */\n', '  function getBlockNumber() internal constant returns (uint256) {\n', '    return block.number;\n', '  }\n', '\n', '  /**\n', '   * @dev add asset data, audit information\n', '   * @param _data asset data\n', '   */\n', '  function ownerAddAsset(string _data) onlyOwner {\n', '    var _asset = Asset(_data);\n', '    assetArray.push(_asset);\n', '  }\n', '\n', '  /**\n', '   * @dev get asset count\n', '   */\n', '  function getAssetCount() constant returns (uint256 result) {\n', '    return assetArray.length;\n', '  }\n', '\n', '  /**\n', '   * @dev put all capital in this contract\n', '   */\n', '  function ownerPutCapital() payable isInitialized isPaused onlyOwner {\n', '    require(msg.value > 0);\n', '    finalizedCapital = msg.value;\n', '  }\n', '\n', '  /**\n', '   * @dev put interest in this contract\n', '   * @param _terms Number of interest\n', '   */\n', '  function ownerPutInterest(uint256 _terms) payable isInitialized isPaused onlyOwner {\n', '    require(_terms == (getInterestCount() + 1));\n', '    interestArray.push(msg.value);\n', '  }\n', '\n', '  /**\n', '   * @dev get interest count\n', '   */\n', '  function getInterestCount() constant returns (uint256 result) {\n', '    return interestArray.length;\n', '  }\n', '\n', '  /**\n', '   * @dev withdraw balance from contract if emergency\n', '   */\n', '  function ownerWithdraw() payable isInitialized onlyOwner {\n', '    require(owner.send(this.balance));\n', '  }\n', '\n', '  event PayeeWithdrawCapital(address _payee, uint256 _capital);\n', '  event PayeeWithdrawInterest(address _payee, uint256 _interest, uint256 _remainInterest);\n', '  event DepositInterest(uint256 _terms, address _payee, uint256 _balance, uint256 _interest);\n', '  event Finalized();\n', '}']
