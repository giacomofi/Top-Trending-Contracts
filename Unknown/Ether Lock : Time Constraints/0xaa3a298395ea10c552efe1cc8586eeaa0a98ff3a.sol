['pragma solidity ^0.4.13;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract BonusCalculator {\n', '    function getBonus() constant returns (uint);\n', '}\n', '\n', 'contract GoldeaBonusCalculator is BonusCalculator, Ownable {\n', '    uint public start;\n', '    uint public end;\n', '    uint constant period = 86400 * 7;\n', '    mapping (uint => uint8) bonuses;\n', '\n', '    function GoldeaBonusCalculator(uint256 _start, uint256 _end) {\n', '        start = _start;\n', '        end = _end;\n', '        bonuses[0] = 30;\n', '        bonuses[1] = 20;\n', '        bonuses[3] = 10;\n', '    }\n', '\n', '    function getBonus() constant returns (uint) {\n', '        assert(now > start);\n', '        assert(now < end);\n', '\n', '        uint week = (now - start) / period;\n', '        uint8 foundBonus = bonuses[week];\n', '        if (foundBonus != 0) {\n', '            return foundBonus;\n', '        } else {\n', '            return 5;\n', '        }\n', '    }\n', '\n', '    function setStart(uint256 _start) onlyOwner() {\n', '        start = _start;\n', '    }\n', '\n', '    function setEnd(uint256 _end) onlyOwner() {\n', '        end = _end;\n', '    }\n', '}']
['pragma solidity ^0.4.13;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract BonusCalculator {\n', '    function getBonus() constant returns (uint);\n', '}\n', '\n', 'contract GoldeaBonusCalculator is BonusCalculator, Ownable {\n', '    uint public start;\n', '    uint public end;\n', '    uint constant period = 86400 * 7;\n', '    mapping (uint => uint8) bonuses;\n', '\n', '    function GoldeaBonusCalculator(uint256 _start, uint256 _end) {\n', '        start = _start;\n', '        end = _end;\n', '        bonuses[0] = 30;\n', '        bonuses[1] = 20;\n', '        bonuses[3] = 10;\n', '    }\n', '\n', '    function getBonus() constant returns (uint) {\n', '        assert(now > start);\n', '        assert(now < end);\n', '\n', '        uint week = (now - start) / period;\n', '        uint8 foundBonus = bonuses[week];\n', '        if (foundBonus != 0) {\n', '            return foundBonus;\n', '        } else {\n', '            return 5;\n', '        }\n', '    }\n', '\n', '    function setStart(uint256 _start) onlyOwner() {\n', '        start = _start;\n', '    }\n', '\n', '    function setEnd(uint256 _end) onlyOwner() {\n', '        end = _end;\n', '    }\n', '}']
