['pragma solidity ^0.4.11;\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /** \n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner. \n', '   */\n', '  modifier onlyOwner() {\n', '    if (msg.sender != owner) {\n', '      throw;\n', '    }\n', '    _;\n', ' }\n', ' \n', '}\n', '  \n', 'contract ERC20 {\n', '\n', '    function totalSupply() constant returns (uint256);\n', '    function balanceOf(address who) constant returns (uint256);\n', '    function transfer(address to, uint256 value);\n', '    function transferFrom(address from, address to, uint256 value);\n', '    function approve(address spender, uint256 value);\n', '    function allowance(address owner, address spender) constant returns (uint256);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '}\n', '\n', 'contract CTCToken is Ownable, ERC20 {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    // Token properties\n', '    string public name = "ChainTrade Coin";\n', '    string public symbol = "CTC";\n', '    uint256 public decimals = 18;\n', '\n', '    uint256 public initialPrice = 1000;\n', '    uint256 public _totalSupply = 225000000e18;\n', '    uint256 public _icoSupply = 200000000e18;\n', '\n', '    // Balances for each account\n', '    mapping (address => uint256) balances;\n', '    \n', '    \n', '    //Balances for waiting KYC approving\n', '    mapping (address => uint256) balancesWaitingKYC;\n', '\n', '    // Owner of account approves the transfer of an amount to another account\n', '    mapping (address => mapping(address => uint256)) allowed;\n', '    \n', '    // start and end timestamps where investments are allowed (both inclusive)\n', '    uint256 public startTime = 1507334400; \n', '    uint256 public endTime = 1514764799; \n', '\n', '    // Owner of Token\n', '    address public owner;\n', '\n', '    // Wallet Address of Token\n', '    address public multisig;\n', '\n', '    // how many token units a buyer gets per wei\n', '    uint256 public RATE;\n', '\n', '    uint256 public minContribAmount = 0.01 ether;\n', '    uint256 public kycLevel = 15 ether;\n', '    uint256 minCapBonus = 200 ether;\n', '\n', '    uint256 public hardCap = 200000000e18;\n', '    \n', '    //number of total tokens sold \n', '    uint256 public totalNumberTokenSold=0;\n', '\n', '    bool public mintingFinished = false;\n', '\n', '    bool public tradable = true;\n', '\n', '    bool public active = true;\n', '\n', '    event MintFinished();\n', '    event StartTradable();\n', '    event PauseTradable();\n', '    event HaltTokenAllOperation();\n', '    event ResumeTokenAllOperation();\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    modifier canTradable() {\n', '        require(tradable);\n', '        _;\n', '    }\n', '\n', '    modifier isActive() {\n', '        require(active);\n', '        _;\n', '    }\n', '    \n', '    modifier saleIsOpen(){\n', '        require(startTime <= getNow() && getNow() <=endTime);\n', '        _;\n', '    }\n', '\n', '    // Constructor\n', '    // @notice CTCToken Contract\n', '    // @return the transaction address\n', '    function CTCToken(address _multisig) {\n', '        require(_multisig != 0x0);\n', '        multisig = _multisig;\n', '        RATE = initialPrice;\n', '\n', '        balances[multisig] = _totalSupply;\n', '\n', '        owner = msg.sender;\n', '    }\n', '\n', '    // Payable method\n', '    // @notice Anyone can buy the tokens on tokensale by paying ether\n', '    function () external payable {\n', '        \n', '        if (!validPurchase()){\n', '\t\t\trefundFunds(msg.sender);\n', '\t\t}\n', '\t\t\n', '\t\ttokensale(msg.sender);\n', '    }\n', '\n', '    // @notice tokensale\n', '    // @param recipient The address of the recipient\n', '    // @return the transaction address and send the event as Transfer\n', '        function tokensale(address recipient) canMint isActive saleIsOpen payable {\n', '        require(recipient != 0x0);\n', '\t\t\n', '        uint256 weiAmount = msg.value;\n', '        uint256 nbTokens = weiAmount.mul(RATE).div(1 ether);\n', '        \n', '        \n', '        require(_icoSupply >= nbTokens);\n', '        \n', '        bool percentageBonusApplicable = weiAmount >= minCapBonus;\n', '        if (percentageBonusApplicable) {\n', '            nbTokens = nbTokens.mul(11).div(10);\n', '        }\n', '        \n', '        totalNumberTokenSold=totalNumberTokenSold.add(nbTokens);\n', '\n', '        _icoSupply = _icoSupply.sub(nbTokens);\n', '\n', '        TokenPurchase(msg.sender, recipient, weiAmount, nbTokens);\n', '\n', '         if(weiAmount< kycLevel) {\n', '            updateBalances(recipient, nbTokens);\n', '         } else {\n', '            balancesWaitingKYC[recipient] = balancesWaitingKYC[recipient].add(nbTokens); \n', '         }\n', '         forwardFunds();  \n', '        \n', '    }\n', '    \n', '    function updateBalances(address receiver, uint256 tokens) internal {\n', '        balances[multisig] = balances[multisig].sub(tokens);\n', '        balances[receiver] = balances[receiver].add(tokens);\n', '    }\n', '    \n', '    //refund back if not KYC approved\n', '     function refundFunds(address origin) internal {\n', '        origin.transfer(msg.value);\n', '    }\n', '\n', '    // send ether to the fund collection wallet\n', '    // override to create custom fund forwarding mechanisms\n', '    function forwardFunds() internal {\n', '        multisig.transfer(msg.value);\n', '    }\n', '\n', '    // @return true if the transaction can buy tokens\n', '    function validPurchase() internal constant returns (bool) {\n', '        bool withinPeriod = getNow() >= startTime && getNow() <= endTime;\n', '        bool nonZeroPurchase = msg.value != 0;\n', '        bool minContribution = minContribAmount <= msg.value;\n', '        bool notReachedHardCap = hardCap >= totalNumberTokenSold;\n', '        return withinPeriod && nonZeroPurchase && minContribution && notReachedHardCap;\n', '    }\n', '\n', '    // @return true if crowdsale current lot event has ended\n', '    function hasEnded() public constant returns (bool) {\n', '        return getNow() > endTime;\n', '    }\n', '\n', '    function getNow() public constant returns (uint) {\n', '        return now;\n', '    }\n', '\n', '    // Set/change Multi-signature wallet address\n', '    function changeMultiSignatureWallet (address _multisig) onlyOwner isActive {\n', '        multisig = _multisig;\n', '    }\n', '\n', '    // Change ETH/Token exchange rate\n', '    function changeTokenRate(uint _tokenPrice) onlyOwner isActive {\n', '        RATE = _tokenPrice;\n', '    }\n', '\n', '    // Change Token contract owner\n', '    function changeOwner(address _newOwner) onlyOwner isActive {\n', '        owner = _newOwner;\n', '    }\n', '\n', '    // Set Finish Minting.\n', '    function finishMinting() onlyOwner isActive {\n', '        mintingFinished = true;\n', '        MintFinished();\n', '    }\n', '\n', '    // Start or pause tradable to Transfer token\n', '    function startTradable(bool _tradable) onlyOwner isActive {\n', '        tradable = _tradable;\n', '        if (tradable)\n', '            StartTradable();\n', '        else\n', '            PauseTradable();\n', '    }\n', '\n', '    //UpdateICODateTime(uint256 _startTime,)\n', '    function updateICODate(uint256 _startTime, uint256 _endTime) public onlyOwner {\n', '        startTime = _startTime;\n', '        endTime = _endTime;\n', '    }\n', '    \n', '    //Change startTime to start ICO manually\n', '    function changeStartTime(uint256 _startTime) onlyOwner {\n', '        startTime = _startTime;\n', '    }\n', '\n', '    //Change endTime to end ICO manually\n', '    function changeEndTime(uint256 _endTime) onlyOwner {\n', '        endTime = _endTime;\n', '    }\n', '\n', '    // @return total tokens supplied\n', '    function totalSupply() constant returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '    \n', '    // @return total tokens supplied\n', '    function totalNumberTokenSold() constant returns (uint256) {\n', '        return totalNumberTokenSold;\n', '    }\n', '\n', '\n', '    //Change total supply\n', '    function changeTotalSupply(uint256 totalSupply) onlyOwner {\n', '        _totalSupply = totalSupply;\n', '    }\n', '\n', '\n', '    // What is the balance of a particular account?\n', '    // @param who The address of the particular account\n', '    // @return the balanace the particular account\n', '    function balanceOf(address who) constant returns (uint256) {\n', '        return balances[who];\n', '    }\n', '\n', '    // What is the balance of a particular account?\n', '    // @param who The address of the particular account\n', '    // @return the balance of KYC waiting to be approved\n', '    function balanceOfKyCToBeApproved(address who) constant returns (uint256) {\n', '        return balancesWaitingKYC[who];\n', '    }\n', '    \n', '\n', '    function approveBalancesWaitingKYC(address[] listAddresses) onlyOwner {\n', '         for (uint256 i = 0; i < listAddresses.length; i++) {\n', '             address client = listAddresses[i];\n', '             balances[multisig] = balances[multisig].sub(balancesWaitingKYC[client]);\n', '             balances[client] = balances[client].add(balancesWaitingKYC[client]);\n', '             totalNumberTokenSold=totalNumberTokenSold.add(balancesWaitingKYC[client]);\n', '             _icoSupply = _icoSupply.sub(balancesWaitingKYC[client]);\n', '             balancesWaitingKYC[client] = 0;\n', '        }\n', '    }\n', '\n', '    function addBonusForOneHolder(address holder, uint256 bonusToken) onlyOwner{\n', '         require(holder != 0x0); \n', '         balances[multisig] = balances[multisig].sub(bonusToken);\n', '         balances[holder] = balances[holder].add(bonusToken);\n', '\t\t totalNumberTokenSold=totalNumberTokenSold.add(bonusToken);\n', '\t\t _icoSupply = _icoSupply.sub(bonusToken);\n', '    }\n', '\n', '    \n', '    function addBonusForMultipleHolders(address[] listAddresses, uint256[] bonus) onlyOwner {\n', '        require(listAddresses.length == bonus.length); \n', '         for (uint256 i = 0; i < listAddresses.length; i++) {\n', '                require(listAddresses[i] != 0x0); \n', '                balances[listAddresses[i]] = balances[listAddresses[i]].add(bonus[i]);\n', '                balances[multisig] = balances[multisig].sub(bonus[i]);\n', '\t\t\t\ttotalNumberTokenSold=totalNumberTokenSold.add(bonus[i]);\n', '\t\t\t\t_icoSupply = _icoSupply.sub(bonus[i]);\n', '         }\n', '    }\n', '    \n', '   \n', '    \n', '    function modifyCurrentHardCap(uint256 _hardCap) onlyOwner isActive {\n', '        hardCap = _hardCap;\n', '    }\n', '\n', '    // @notice send `value` token to `to` from `msg.sender`\n', '    // @param to The address of the recipient\n', '    // @param value The amount of token to be transferred\n', '    // @return the transaction address and send the event as Transfer\n', '    function transfer(address to, uint256 value) canTradable isActive {\n', '        require (\n', '            balances[msg.sender] >= value && value > 0\n', '        );\n', '        balances[msg.sender] = balances[msg.sender].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '        Transfer(msg.sender, to, value);\n', '    }\n', '\n', '    // @notice send `value` token to `to` from `from`\n', '    // @param from The address of the sender\n', '    // @param to The address of the recipient\n', '    // @param value The amount of token to be transferred\n', '    // @return the transaction address and send the event as Transfer\n', '    function transferFrom(address from, address to, uint256 value) canTradable isActive {\n', '        require (\n', '            allowed[from][msg.sender] >= value && balances[from] >= value && value > 0\n', '        );\n', '        balances[from] = balances[from].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\n', '        Transfer(from, to, value);\n', '    }\n', '\n', '    // Allow spender to withdraw from your account, multiple times, up to the value amount.\n', '    // If this function is called again it overwrites the current allowance with value.\n', '    // @param spender The address of the sender\n', '    // @param value The amount to be approved\n', '    // @return the transaction address and send the event as Approval\n', '    function approve(address spender, uint256 value) isActive {\n', '        require (\n', '            balances[msg.sender] >= value && value > 0\n', '        );\n', '        allowed[msg.sender][spender] = value;\n', '        Approval(msg.sender, spender, value);\n', '    }\n', '\n', '    // Check the allowed value for the spender to withdraw from owner\n', '    // @param owner The address of the owner\n', '    // @param spender The address of the spender\n', '    // @return the amount which spender is still allowed to withdraw from owner\n', '    function allowance(address _owner, address spender) constant returns (uint256) {\n', '        return allowed[_owner][spender];\n', '    }\n', '\n', '    // Get current price of a Token\n', '    // @return the price or token value for a ether\n', '    function getRate() constant returns (uint256 result) {\n', '      return RATE;\n', '    }\n', '    \n', '    function getTokenDetail() public constant returns (string, string, uint256, uint256, uint256, uint256, uint256) {\n', '        return (name, symbol, startTime, endTime, _totalSupply, _icoSupply, totalNumberTokenSold);\n', '    }\n', '}']