['contract Base \n', '{\n', '    function add(uint256 x, uint256 y) internal returns (uint256) {\n', '        uint256 z = x + y;\n', '        if((z >= x) && (z >= y))\n', '        {\n', '          return z;\n', '        }\n', '        else\n', '        {\n', '            throw;\n', '        }\n', '        \n', '    }\n', '\n', '    function sub(uint256 x, uint256 y) internal returns (uint256) {\n', '        if(x >= y)\n', '        {\n', '           uint256 z = x - y;\n', '           return z;\n', '        }\n', '        else\n', '        {\n', '            throw;\n', '        }\n', '    }\n', '\n', '    function mul(uint256 x, uint256 y) internal returns (uint256) {\n', '        uint256 z = x * y;\n', '        if((x == 0) || (z / x == y))\n', '        {\n', '            return z;\n', '        }\n', '        else\n', '        {\n', '            throw;\n', '        }\n', '    }\n', '    \n', '    address Owner_01;\n', '    address Owner_02;\n', '    address Owner_03;\n', '    \n', '    function Base()\n', '    {\n', '        Owner_01 = msg.sender;\n', '    }\n', '    \n', '    event Deposit(address indexed sender, uint value);\n', '    event Withdraw(address indexed sender, uint value);\n', '    event Log(string message);\n', '}\n', '\n', 'contract SiriusFund is Base\n', '{\n', '    uint public TotalInvested;\n', '    uint public Available;\n', '    uint public InvestorsQty;\n', '    mapping (address => uint) public Investors;\n', '    address Owner_0l;\n', '    address Owner_02;\n', '    address Owner_03;\n', '    \n', '    function initSiriusFund()\n', '    {\n', '        Owner_0l = msg.sender;\n', '    }\n', '    \n', '    function SetScndOwner(address addr) public anyOwner\n', '    {\n', '        Owner_02 = addr;\n', '    }\n', '    \n', '    function SetThrdOwner(address addr) public anyOwner\n', '    {\n', '        Owner_03 = addr;\n', '    }\n', '    \n', '    function() \n', '    {\n', '        DepositFund();\n', '    }\n', '    \n', '    function DepositFund() public\n', '    {\n', '        if(msg.value>= 1 ether)\n', '        {\n', '            if(Investors[msg.sender]==0)InvestorsQty++;\n', '            Investors[msg.sender]+=msg.value;\n', '            TotalInvested+=msg.value;\n', '            Available+=msg.value;\n', '            Deposit(msg.sender,msg.value);\n', '        }   \n', '    }\n', '    \n', '    function withdraw(address _addr, uint _wei) public anyOwner\n', '    {\n', '        if(Investors[_addr]==0)throw;\n', '        if(_addr.send(_wei))\n', '        {\n', '             Available-=_wei;\n', '             Withdraw(_addr,_wei);\n', '        }\n', '    }\n', '    \n', '    modifier anyOwner()\n', '    {\n', '        if ( msg.sender != Owner_01 && msg.sender != Owner_02 && msg.sender != Owner_03)throw;\n', '        _\n', '    }\n', '}']