['pragma solidity ^0.4.2;\n', '\n', 'contract owned {\n', '\taddress public owner;\n', '\n', '\tfunction owned() {\n', '\t\towner = msg.sender;\n', '\t}\n', '\n', '\tfunction changeOwner(address newOwner) onlyOwner {\n', '\t\towner = newOwner;\n', '\t}\n', '\n', '\tmodifier onlyOwner {\n', '\t\trequire(msg.sender == owner);\n', '\t\t_;\n', '\t}\n', '}\n', '\n', 'contract tokenRecipient {function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData);}\n', 'contract CSToken is owned {uint8 public decimals;function mintToken(address target, uint256 mintedAmount, uint agingTime);function addAgingTimesForPool(address poolAddress, uint agingTime);}\n', '\n', 'contract KICKICOCrowdsale is owned {\n', '\tuint[] public preIcoStagePeriod;\n', '\n', '\tuint[] public IcoStagePeriod;\n', '\n', '\tbool public PreIcoClosedManually = false;\n', '\n', '\tbool public IcoClosedManually = false;\n', '\n', '\tuint[] public thresholdsByState;\n', '\n', '\tuint public totalCollected = 0;\n', '\n', '\tuint public allowedForWithdrawn = 0;\n', '\n', '\tuint[] public prices;\n', '\n', '\tuint[] public bonuses;\n', '\n', '\taddress public prPool;\n', '\n', '\taddress public founders;\n', '\n', '\taddress public advisory;\n', '\n', '\taddress public bounties;\n', '\n', '\taddress public lottery;\n', '\n', '\taddress public seedInvestors;\n', '\n', '\tuint public tokensRaised;\n', '\n', '\tuint[] public etherRaisedByState;\n', '\n', '\tuint tokenMultiplier = 10;\n', '\n', '\tCSToken public tokenReward;\n', '\n', '\tmapping (address => uint256) public balanceOf;\n', '\n', '\tevent FundTransfer(address backer, uint amount, bool isContribution);\n', '\n', '\tuint[] public agingTimeByStage;\n', '\n', '\tbool parametersHaveBeenSet = false;\n', '\n', '\tfunction KICKICOCrowdsale(address _tokenAddress, address _prPool, address _founders, address _advisory, address _bounties, address _lottery, address _seedInvestors) {\n', '\t\ttokenReward = CSToken(_tokenAddress);\n', '\n', '\t\ttokenMultiplier = tokenMultiplier ** tokenReward.decimals();\n', '\n', '\t\t// bind pools\n', '\t\tprPool = _prPool;\n', '\t\tfounders = _founders;\n', '\t\tadvisory = _advisory;\n', '\t\tbounties = _bounties;\n', '\t\tlottery = _lottery;\n', '\t\tseedInvestors = _seedInvestors;\n', '\t}\n', '\n', '\tfunction setParams() onlyOwner {\n', '\t\trequire(!parametersHaveBeenSet);\n', '\n', '\t\tparametersHaveBeenSet = true;\n', '\n', '\t\ttokenReward.addAgingTimesForPool(prPool, 1513242000);\n', '\t\ttokenReward.addAgingTimesForPool(advisory, 1507366800);\n', '\t\ttokenReward.addAgingTimesForPool(bounties, 1509526800);\n', '\t\ttokenReward.addAgingTimesForPool(lottery, 1512118800);\n', '\t\ttokenReward.addAgingTimesForPool(seedInvestors, 1506762000);\n', '\n', '\t\t// mint to pools\n', '\t\ttokenReward.mintToken(founders, 100000000 * tokenMultiplier, 1514797200);\n', '\t\ttokenReward.mintToken(advisory, 10000000 * tokenMultiplier, 0);\n', '\t\ttokenReward.mintToken(bounties, 25000000 * tokenMultiplier, 0);\n', '\t\ttokenReward.mintToken(lottery, 2000000 * tokenMultiplier, 0);\n', '\t\ttokenReward.mintToken(seedInvestors, 20000000 * tokenMultiplier, 0);\n', '\t\ttokenReward.mintToken(prPool, 23000000 * tokenMultiplier, 0);\n', '\n', '\t\tpreIcoStagePeriod.push(1501246800);\n', '\t\tpreIcoStagePeriod.push(1502744400);\n', '\n', '\t\tIcoStagePeriod.push(1504011600);\n', '\t\tIcoStagePeriod.push(1506718800);\n', '\n', '\t\t// bind maxs thresholds\n', '\t\tthresholdsByState.push(5000 ether);\n', '\t\tthresholdsByState.push(200000 ether);\n', '\n', '\t\tetherRaisedByState.push(0);\n', '\t\tetherRaisedByState.push(0);\n', '\n', '\t\t// bind aging time for each stages\n', '\t\tagingTimeByStage.push(1507366800);\n', '\t\tagingTimeByStage.push(1508058000);\n', '\n', '\t\t// bind prices\n', '\t\tprices.push(1666666);\n', '\t\tprices.push(3333333);\n', '\n', '\t\tbonuses.push(1990 finney);\n', '\t\tbonuses.push(2990 finney);\n', '\t\tbonuses.push(4990 finney);\n', '\t\tbonuses.push(6990 finney);\n', '\t\tbonuses.push(9500 finney);\n', '\t\tbonuses.push(14500 finney);\n', '\t\tbonuses.push(19500 finney);\n', '\t\tbonuses.push(29500 finney);\n', '\t\tbonuses.push(49500 finney);\n', '\t\tbonuses.push(74500 finney);\n', '\t\tbonuses.push(99 ether);\n', '\t\tbonuses.push(149 ether);\n', '\t\tbonuses.push(199 ether);\n', '\t\tbonuses.push(299 ether);\n', '\t\tbonuses.push(499 ether);\n', '\t\tbonuses.push(749 ether);\n', '\t\tbonuses.push(999 ether);\n', '\t\tbonuses.push(1499 ether);\n', '\t\tbonuses.push(1999 ether);\n', '\t\tbonuses.push(2999 ether);\n', '\t\tbonuses.push(4999 ether);\n', '\t\tbonuses.push(7499 ether);\n', '\t\tbonuses.push(9999 ether);\n', '\t\tbonuses.push(14999 ether);\n', '\t\tbonuses.push(19999 ether);\n', '\t\tbonuses.push(49999 ether);\n', '\t\tbonuses.push(99999 ether);\n', '\t}\n', '\n', '\tfunction mint(uint amount, uint tokens, address sender, uint currentStage) internal {\n', '\t\tbalanceOf[sender] += amount;\n', '\t\ttokensRaised += tokens;\n', '\t\tetherRaisedByState[currentStage] += amount;\n', '\t\ttotalCollected += amount;\n', '\t\tallowedForWithdrawn += amount;\n', '\t\ttokenReward.mintToken(sender, tokens, agingTimeByStage[currentStage]);\n', '\t\ttokenReward.mintToken(prPool, tokens * 10 / 100, 0);\n', '\t}\n', '\n', '\tfunction processPayment(address from, uint amount) internal {\n', '\t\tuint originalAmount = amount;\n', '\t\tFundTransfer(from, amount, true);\n', '\t\tuint currentStage = 0;\n', '\t\tif (now >= preIcoStagePeriod[0] && now < preIcoStagePeriod[1]) {\n', '\t\t\tcurrentStage = 0;\n', '\t\t}\n', '\t\tif (now >= IcoStagePeriod[0] && now < IcoStagePeriod[1]) {\n', '\t\t\tcurrentStage = 1;\n', '\t\t}\n', '\n', '\t\tuint price = prices[currentStage];\n', '\t\tuint coefficient = 1000;\n', '\n', '\t\tfor (uint i = 0; i < 15; i++) {\n', '\t\t\tif (amount >= bonuses[i])\n', '\t\t\t\tcoefficient = 1000 + ((i + 1 + (i > 11 ? 1 : 0)) * 5);\n', '\t\t\tif (amount < bonuses[i]) break;\n', '\t\t}\n', '\t\tif (coefficient == 1000) {\n', '\t\t\tfor (uint z = 0; z < 12; z++) {\n', '\t\t\t\tif (amount >= bonuses[z + 15])\n', '\t\t\t\t\tcoefficient = 1000 + ((8 + z) * 10);\n', '\t\t\t\tif (amount < bonuses[z]) break;\n', '\t\t\t}\n', '\t\t}\n', '\n', '\t\tprice = price * 1000 / coefficient;\n', '\n', '\t\tuint remain = thresholdsByState[currentStage] - etherRaisedByState[currentStage];\n', '\n', '\t\tif (remain <= amount) {\n', '\t\t\tamount = remain;\n', '\t\t}\n', '\n', '\t\tuint tokenAmount = amount / price;\n', '\n', '\t\tuint currentAmount = tokenAmount * price;\n', '\t\tmint(currentAmount, tokenAmount, from, currentStage);\n', '\t\tuint change = originalAmount - currentAmount;\n', '\t\tif (change > 0) {\n', '\t\t\tif (from.send(change)) {\n', '\t\t\t\tFundTransfer(from, change, false);\n', '\t\t\t}\n', '\t\t\telse revert();\n', '\t\t}\n', '\t}\n', '\n', '\tfunction() payable {\n', '\t\trequire(parametersHaveBeenSet);\n', '\t\trequire(msg.value >= 50 finney);\n', '\n', '\t\t// validate by stage periods\n', '\t\trequire((now >= preIcoStagePeriod[0] && now < preIcoStagePeriod[1]) || (now >= IcoStagePeriod[0] && now < IcoStagePeriod[1]));\n', '\t\t// validate if closed manually or reached the threshold\n', '\t\tif(now >= preIcoStagePeriod[0] && now < preIcoStagePeriod[1]) {\n', '\t\t\trequire(!PreIcoClosedManually && etherRaisedByState[0] < thresholdsByState[0]);\n', '\t\t} else {\n', '\t\t\trequire(!IcoClosedManually && etherRaisedByState[1] < thresholdsByState[1]);\n', '\t\t}\n', '\t\tprocessPayment(msg.sender, msg.value);\n', '\t}\n', '\n', '\tfunction closeCurrentStage() onlyOwner {\n', '\t\tif (now >= preIcoStagePeriod[0] && now < preIcoStagePeriod[1] && !PreIcoClosedManually) {\n', '\t\t\tPreIcoClosedManually = true;\n', '\t\t} else {\n', '\t\t\tif (now >= IcoStagePeriod[0] && now < IcoStagePeriod[1] && !IcoClosedManually) {\n', '\t\t\t\tIcoClosedManually = true;\n', '\t\t\t} else {\n', '\t\t\t\trevert();\n', '\t\t\t}\n', '\t\t}\n', '\t}\n', '\n', '\tfunction safeWithdrawal(uint amount) onlyOwner {\n', '\t\trequire(allowedForWithdrawn >= amount);\n', '\n', '\t\t// lock withdraw if stage not closed\n', '//\t\trequire((now >= preIcoStagePeriod[1] && now < IcoStagePeriod[0]) || (now >= IcoStagePeriod[1]));\n', '\t\tif(now >= preIcoStagePeriod[0] && now < preIcoStagePeriod[1])\n', '\t\t\trequire(PreIcoClosedManually || etherRaisedByState[0] >= thresholdsByState[0]);\n', '\t\tif(now >= IcoStagePeriod[0] && now < IcoStagePeriod[1])\n', '\t\t\trequire(IcoClosedManually || etherRaisedByState[1] >= thresholdsByState[1]);\n', '\n', '\t\tallowedForWithdrawn -= amount;\n', '\t\tif(owner.send(amount)) {\n', '\t\t\tFundTransfer(msg.sender, amount, false);\n', '\t\t} else {\n', '\t\t\tallowedForWithdrawn += amount;\n', '\t\t}\n', '\t}\n', '\n', '\tfunction kill() onlyOwner {\n', '\t\trequire(now > IcoStagePeriod[1]);\n', '\n', '\t\ttokenReward.changeOwner(owner);\n', '\t\tselfdestruct(owner);\n', '\t}\n', '}']
['pragma solidity ^0.4.2;\n', '\n', 'contract owned {\n', '\taddress public owner;\n', '\n', '\tfunction owned() {\n', '\t\towner = msg.sender;\n', '\t}\n', '\n', '\tfunction changeOwner(address newOwner) onlyOwner {\n', '\t\towner = newOwner;\n', '\t}\n', '\n', '\tmodifier onlyOwner {\n', '\t\trequire(msg.sender == owner);\n', '\t\t_;\n', '\t}\n', '}\n', '\n', 'contract tokenRecipient {function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData);}\n', 'contract CSToken is owned {uint8 public decimals;function mintToken(address target, uint256 mintedAmount, uint agingTime);function addAgingTimesForPool(address poolAddress, uint agingTime);}\n', '\n', 'contract KICKICOCrowdsale is owned {\n', '\tuint[] public preIcoStagePeriod;\n', '\n', '\tuint[] public IcoStagePeriod;\n', '\n', '\tbool public PreIcoClosedManually = false;\n', '\n', '\tbool public IcoClosedManually = false;\n', '\n', '\tuint[] public thresholdsByState;\n', '\n', '\tuint public totalCollected = 0;\n', '\n', '\tuint public allowedForWithdrawn = 0;\n', '\n', '\tuint[] public prices;\n', '\n', '\tuint[] public bonuses;\n', '\n', '\taddress public prPool;\n', '\n', '\taddress public founders;\n', '\n', '\taddress public advisory;\n', '\n', '\taddress public bounties;\n', '\n', '\taddress public lottery;\n', '\n', '\taddress public seedInvestors;\n', '\n', '\tuint public tokensRaised;\n', '\n', '\tuint[] public etherRaisedByState;\n', '\n', '\tuint tokenMultiplier = 10;\n', '\n', '\tCSToken public tokenReward;\n', '\n', '\tmapping (address => uint256) public balanceOf;\n', '\n', '\tevent FundTransfer(address backer, uint amount, bool isContribution);\n', '\n', '\tuint[] public agingTimeByStage;\n', '\n', '\tbool parametersHaveBeenSet = false;\n', '\n', '\tfunction KICKICOCrowdsale(address _tokenAddress, address _prPool, address _founders, address _advisory, address _bounties, address _lottery, address _seedInvestors) {\n', '\t\ttokenReward = CSToken(_tokenAddress);\n', '\n', '\t\ttokenMultiplier = tokenMultiplier ** tokenReward.decimals();\n', '\n', '\t\t// bind pools\n', '\t\tprPool = _prPool;\n', '\t\tfounders = _founders;\n', '\t\tadvisory = _advisory;\n', '\t\tbounties = _bounties;\n', '\t\tlottery = _lottery;\n', '\t\tseedInvestors = _seedInvestors;\n', '\t}\n', '\n', '\tfunction setParams() onlyOwner {\n', '\t\trequire(!parametersHaveBeenSet);\n', '\n', '\t\tparametersHaveBeenSet = true;\n', '\n', '\t\ttokenReward.addAgingTimesForPool(prPool, 1513242000);\n', '\t\ttokenReward.addAgingTimesForPool(advisory, 1507366800);\n', '\t\ttokenReward.addAgingTimesForPool(bounties, 1509526800);\n', '\t\ttokenReward.addAgingTimesForPool(lottery, 1512118800);\n', '\t\ttokenReward.addAgingTimesForPool(seedInvestors, 1506762000);\n', '\n', '\t\t// mint to pools\n', '\t\ttokenReward.mintToken(founders, 100000000 * tokenMultiplier, 1514797200);\n', '\t\ttokenReward.mintToken(advisory, 10000000 * tokenMultiplier, 0);\n', '\t\ttokenReward.mintToken(bounties, 25000000 * tokenMultiplier, 0);\n', '\t\ttokenReward.mintToken(lottery, 2000000 * tokenMultiplier, 0);\n', '\t\ttokenReward.mintToken(seedInvestors, 20000000 * tokenMultiplier, 0);\n', '\t\ttokenReward.mintToken(prPool, 23000000 * tokenMultiplier, 0);\n', '\n', '\t\tpreIcoStagePeriod.push(1501246800);\n', '\t\tpreIcoStagePeriod.push(1502744400);\n', '\n', '\t\tIcoStagePeriod.push(1504011600);\n', '\t\tIcoStagePeriod.push(1506718800);\n', '\n', '\t\t// bind maxs thresholds\n', '\t\tthresholdsByState.push(5000 ether);\n', '\t\tthresholdsByState.push(200000 ether);\n', '\n', '\t\tetherRaisedByState.push(0);\n', '\t\tetherRaisedByState.push(0);\n', '\n', '\t\t// bind aging time for each stages\n', '\t\tagingTimeByStage.push(1507366800);\n', '\t\tagingTimeByStage.push(1508058000);\n', '\n', '\t\t// bind prices\n', '\t\tprices.push(1666666);\n', '\t\tprices.push(3333333);\n', '\n', '\t\tbonuses.push(1990 finney);\n', '\t\tbonuses.push(2990 finney);\n', '\t\tbonuses.push(4990 finney);\n', '\t\tbonuses.push(6990 finney);\n', '\t\tbonuses.push(9500 finney);\n', '\t\tbonuses.push(14500 finney);\n', '\t\tbonuses.push(19500 finney);\n', '\t\tbonuses.push(29500 finney);\n', '\t\tbonuses.push(49500 finney);\n', '\t\tbonuses.push(74500 finney);\n', '\t\tbonuses.push(99 ether);\n', '\t\tbonuses.push(149 ether);\n', '\t\tbonuses.push(199 ether);\n', '\t\tbonuses.push(299 ether);\n', '\t\tbonuses.push(499 ether);\n', '\t\tbonuses.push(749 ether);\n', '\t\tbonuses.push(999 ether);\n', '\t\tbonuses.push(1499 ether);\n', '\t\tbonuses.push(1999 ether);\n', '\t\tbonuses.push(2999 ether);\n', '\t\tbonuses.push(4999 ether);\n', '\t\tbonuses.push(7499 ether);\n', '\t\tbonuses.push(9999 ether);\n', '\t\tbonuses.push(14999 ether);\n', '\t\tbonuses.push(19999 ether);\n', '\t\tbonuses.push(49999 ether);\n', '\t\tbonuses.push(99999 ether);\n', '\t}\n', '\n', '\tfunction mint(uint amount, uint tokens, address sender, uint currentStage) internal {\n', '\t\tbalanceOf[sender] += amount;\n', '\t\ttokensRaised += tokens;\n', '\t\tetherRaisedByState[currentStage] += amount;\n', '\t\ttotalCollected += amount;\n', '\t\tallowedForWithdrawn += amount;\n', '\t\ttokenReward.mintToken(sender, tokens, agingTimeByStage[currentStage]);\n', '\t\ttokenReward.mintToken(prPool, tokens * 10 / 100, 0);\n', '\t}\n', '\n', '\tfunction processPayment(address from, uint amount) internal {\n', '\t\tuint originalAmount = amount;\n', '\t\tFundTransfer(from, amount, true);\n', '\t\tuint currentStage = 0;\n', '\t\tif (now >= preIcoStagePeriod[0] && now < preIcoStagePeriod[1]) {\n', '\t\t\tcurrentStage = 0;\n', '\t\t}\n', '\t\tif (now >= IcoStagePeriod[0] && now < IcoStagePeriod[1]) {\n', '\t\t\tcurrentStage = 1;\n', '\t\t}\n', '\n', '\t\tuint price = prices[currentStage];\n', '\t\tuint coefficient = 1000;\n', '\n', '\t\tfor (uint i = 0; i < 15; i++) {\n', '\t\t\tif (amount >= bonuses[i])\n', '\t\t\t\tcoefficient = 1000 + ((i + 1 + (i > 11 ? 1 : 0)) * 5);\n', '\t\t\tif (amount < bonuses[i]) break;\n', '\t\t}\n', '\t\tif (coefficient == 1000) {\n', '\t\t\tfor (uint z = 0; z < 12; z++) {\n', '\t\t\t\tif (amount >= bonuses[z + 15])\n', '\t\t\t\t\tcoefficient = 1000 + ((8 + z) * 10);\n', '\t\t\t\tif (amount < bonuses[z]) break;\n', '\t\t\t}\n', '\t\t}\n', '\n', '\t\tprice = price * 1000 / coefficient;\n', '\n', '\t\tuint remain = thresholdsByState[currentStage] - etherRaisedByState[currentStage];\n', '\n', '\t\tif (remain <= amount) {\n', '\t\t\tamount = remain;\n', '\t\t}\n', '\n', '\t\tuint tokenAmount = amount / price;\n', '\n', '\t\tuint currentAmount = tokenAmount * price;\n', '\t\tmint(currentAmount, tokenAmount, from, currentStage);\n', '\t\tuint change = originalAmount - currentAmount;\n', '\t\tif (change > 0) {\n', '\t\t\tif (from.send(change)) {\n', '\t\t\t\tFundTransfer(from, change, false);\n', '\t\t\t}\n', '\t\t\telse revert();\n', '\t\t}\n', '\t}\n', '\n', '\tfunction() payable {\n', '\t\trequire(parametersHaveBeenSet);\n', '\t\trequire(msg.value >= 50 finney);\n', '\n', '\t\t// validate by stage periods\n', '\t\trequire((now >= preIcoStagePeriod[0] && now < preIcoStagePeriod[1]) || (now >= IcoStagePeriod[0] && now < IcoStagePeriod[1]));\n', '\t\t// validate if closed manually or reached the threshold\n', '\t\tif(now >= preIcoStagePeriod[0] && now < preIcoStagePeriod[1]) {\n', '\t\t\trequire(!PreIcoClosedManually && etherRaisedByState[0] < thresholdsByState[0]);\n', '\t\t} else {\n', '\t\t\trequire(!IcoClosedManually && etherRaisedByState[1] < thresholdsByState[1]);\n', '\t\t}\n', '\t\tprocessPayment(msg.sender, msg.value);\n', '\t}\n', '\n', '\tfunction closeCurrentStage() onlyOwner {\n', '\t\tif (now >= preIcoStagePeriod[0] && now < preIcoStagePeriod[1] && !PreIcoClosedManually) {\n', '\t\t\tPreIcoClosedManually = true;\n', '\t\t} else {\n', '\t\t\tif (now >= IcoStagePeriod[0] && now < IcoStagePeriod[1] && !IcoClosedManually) {\n', '\t\t\t\tIcoClosedManually = true;\n', '\t\t\t} else {\n', '\t\t\t\trevert();\n', '\t\t\t}\n', '\t\t}\n', '\t}\n', '\n', '\tfunction safeWithdrawal(uint amount) onlyOwner {\n', '\t\trequire(allowedForWithdrawn >= amount);\n', '\n', '\t\t// lock withdraw if stage not closed\n', '//\t\trequire((now >= preIcoStagePeriod[1] && now < IcoStagePeriod[0]) || (now >= IcoStagePeriod[1]));\n', '\t\tif(now >= preIcoStagePeriod[0] && now < preIcoStagePeriod[1])\n', '\t\t\trequire(PreIcoClosedManually || etherRaisedByState[0] >= thresholdsByState[0]);\n', '\t\tif(now >= IcoStagePeriod[0] && now < IcoStagePeriod[1])\n', '\t\t\trequire(IcoClosedManually || etherRaisedByState[1] >= thresholdsByState[1]);\n', '\n', '\t\tallowedForWithdrawn -= amount;\n', '\t\tif(owner.send(amount)) {\n', '\t\t\tFundTransfer(msg.sender, amount, false);\n', '\t\t} else {\n', '\t\t\tallowedForWithdrawn += amount;\n', '\t\t}\n', '\t}\n', '\n', '\tfunction kill() onlyOwner {\n', '\t\trequire(now > IcoStagePeriod[1]);\n', '\n', '\t\ttokenReward.changeOwner(owner);\n', '\t\tselfdestruct(owner);\n', '\t}\n', '}']
