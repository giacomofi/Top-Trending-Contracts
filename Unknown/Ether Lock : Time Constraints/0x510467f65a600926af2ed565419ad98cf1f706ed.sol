['pragma solidity ^0.4.15;\n', '\n', 'contract Owned {\n', '    address owner;\n', '\n', '    modifier onlyowner() {\n', '        if (msg.sender == owner) {\n', '            _;\n', '        }\n', '    }\n', '\n', '    function Owned() {\n', '        owner = msg.sender;\n', '    }\n', '}\n', '\n', '\n', 'contract Mortal is Owned {\n', '    \n', '    function kill() {\n', '        if (msg.sender == owner)\n', '            selfdestruct(owner);\n', '    }\n', '}\n', '\n', '\n', 'contract Slotthereum is Mortal {\n', '\n', '    mapping (address => Game[]) private games;      // games per address\n', '\n', '    uint private minBetAmount = 10000000000000000;  // minimum amount per bet\n', '    uint private maxBetAmount = 5000000000000000000;  // maximum amount per bet\n', '    uint private pointer = 1;                       // block pointer\n', '    uint private numberOfPlayers = 0;               // number of players\n', '\n', '    struct Game {\n', '        uint id;\n', '        uint amount;\n', '        uint8 start;\n', '        uint8 end;\n', '        bytes32 hash;\n', '        uint8 number;\n', '        bool win;\n', '        uint prize;\n', '    }\n', '\n', '    event MinBetAmountChanged(uint amount);\n', '    event MaxBetAmountChanged(uint amount);\n', '\n', '    event GameWin(\n', '        address indexed player,\n', '        uint indexed gameId,\n', '        uint8 start,\n', '        uint8 end,\n', '        uint8 number,\n', '        uint amount,\n', '        uint prize\n', '    );\n', '\n', '    event GameLoose(\n', '        address indexed player,\n', '        uint indexed gameId,\n', '        uint8 start,\n', '        uint8 end,\n', '        uint8 number,\n', '        uint amount,\n', '        uint prize\n', '    );\n', '\n', '    function notify(address player, uint gameId, uint8 start, uint8 end, uint8 number, uint amount, uint prize, bool win) internal {\n', '        if (win) {\n', '            GameWin(\n', '                player,\n', '                gameId,\n', '                start,\n', '                end,\n', '                number,\n', '                amount,\n', '                prize\n', '            );\n', '        } else {\n', '            GameLoose(\n', '                player,\n', '                gameId,\n', '                start,\n', '                end,\n', '                number,\n', '                amount,\n', '                prize\n', '            );\n', '        }\n', '    }\n', '\n', '    function getBlockHash(uint i) internal constant returns (bytes32 blockHash) {\n', '        if (i > 255) {\n', '            i = 255;\n', '        }\n', '        if (i < 0) {\n', '            i = 1;\n', '        }\n', '        blockHash = block.blockhash(block.number - i);\n', '    }\n', '\n', '    function getNumber(bytes32 _a) internal constant returns (uint8) {\n', '        uint8 mint = 0; // pointer?\n', '        for (uint i = 31; i >= 1; i--) {\n', '            if ((uint8(_a[i]) >= 48) && (uint8(_a[i]) <= 57)) {\n', '                return uint8(_a[i]) - 48;\n', '            }\n', '        }\n', '        return mint;\n', '    }\n', '\n', '    function placeBet(uint8 start, uint8 end) public payable returns (bool) {\n', '        if (msg.value < minBetAmount) {\n', '            return false;\n', '        }\n', '\n', '        if (msg.value > maxBetAmount) {\n', '            return false;\n', '        }\n', '\n', '        uint8 counter = end - start + 1;\n', '\n', '        if (counter > 9) {\n', '            return false;\n', '        }\n', '\n', '        if (counter < 1) {\n', '            return false;\n', '        }\n', '\n', '        uint gameId = games[msg.sender].length;\n', '        games[msg.sender].length += 1;\n', '        games[msg.sender][gameId].id = gameId;\n', '        games[msg.sender][gameId].amount = msg.value;\n', '        games[msg.sender][gameId].start = start;\n', '        games[msg.sender][gameId].end = end;\n', '        games[msg.sender][gameId].hash = getBlockHash(pointer);\n', '        games[msg.sender][gameId].number = getNumber(games[msg.sender][gameId].hash);\n', '        // set pointer to number ?\n', '\n', '        games[msg.sender][gameId].prize = 1;\n', '        if ((games[msg.sender][gameId].number >= start) && (games[msg.sender][gameId].number <= end)) {\n', '            games[msg.sender][gameId].win = true;\n', '            uint dec = msg.value / 10;\n', '            uint parts = 10 - counter;\n', '            games[msg.sender][gameId].prize = msg.value + dec * parts;\n', '        }\n', '\n', '        msg.sender.transfer(games[msg.sender][gameId].prize);\n', '\n', '        notify(\n', '            msg.sender,\n', '            gameId,\n', '            start,\n', '            end,\n', '            games[msg.sender][gameId].number,\n', '            msg.value,\n', '            games[msg.sender][gameId].prize,\n', '            games[msg.sender][gameId].win\n', '        );\n', '\n', '        return true;\n', '    }\n', '\n', '    function setMinBetAmount(uint _minBetAmount) onlyowner returns (uint) {\n', '        minBetAmount = _minBetAmount;\n', '        MinBetAmountChanged(minBetAmount);\n', '        return minBetAmount;\n', '    }\n', '\n', '    function setMaxBetAmount(uint _maxBetAmount) onlyowner returns (uint) {\n', '        maxBetAmount = _maxBetAmount;\n', '        MaxBetAmountChanged(maxBetAmount);\n', '        return maxBetAmount;\n', '    }\n', '\n', '    function getGameIds(address player) constant returns(uint[] memory ids) {\n', '        ids = new uint[](games[player].length);\n', '        for (uint i = 0; i < games[player].length; i++) {\n', '            ids[i] = games[player][i].id;\n', '        }\n', '    }\n', '\n', '    function getGameAmount(address player, uint gameId) constant returns(uint) {\n', '        return games[player][gameId].amount;\n', '    }\n', '\n', '    function getGameStart(address player, uint gameId) constant returns(uint8) {\n', '        return games[player][gameId].start;\n', '    }\n', '\n', '    function getGameEnd(address player, uint gameId) constant returns(uint8) {\n', '        return games[player][gameId].end;\n', '    }\n', '\n', '    function getGameHash(address player, uint gameId) constant returns(bytes32) {\n', '        return games[player][gameId].hash;\n', '    }\n', '\n', '    function getGameNumber(address player, uint gameId) constant returns(uint8) {\n', '        return games[player][gameId].number;\n', '    }\n', '\n', '    function getGameWin(address player, uint gameId) constant returns(bool) {\n', '        return games[player][gameId].win;\n', '    }\n', '\n', '    function getGamePrize(address player, uint gameId) constant returns(uint) {\n', '        return games[player][gameId].prize;\n', '    }\n', '\n', '    function getMinBetAmount() constant returns(uint) {\n', '        return minBetAmount;\n', '    }\n', '\n', '    function getMaxBetAmount() constant returns(uint) {\n', '        return maxBetAmount;\n', '    }\n', '\n', '    function () payable {\n', '    }\n', '}']
['pragma solidity ^0.4.15;\n', '\n', 'contract Owned {\n', '    address owner;\n', '\n', '    modifier onlyowner() {\n', '        if (msg.sender == owner) {\n', '            _;\n', '        }\n', '    }\n', '\n', '    function Owned() {\n', '        owner = msg.sender;\n', '    }\n', '}\n', '\n', '\n', 'contract Mortal is Owned {\n', '    \n', '    function kill() {\n', '        if (msg.sender == owner)\n', '            selfdestruct(owner);\n', '    }\n', '}\n', '\n', '\n', 'contract Slotthereum is Mortal {\n', '\n', '    mapping (address => Game[]) private games;      // games per address\n', '\n', '    uint private minBetAmount = 10000000000000000;  // minimum amount per bet\n', '    uint private maxBetAmount = 5000000000000000000;  // maximum amount per bet\n', '    uint private pointer = 1;                       // block pointer\n', '    uint private numberOfPlayers = 0;               // number of players\n', '\n', '    struct Game {\n', '        uint id;\n', '        uint amount;\n', '        uint8 start;\n', '        uint8 end;\n', '        bytes32 hash;\n', '        uint8 number;\n', '        bool win;\n', '        uint prize;\n', '    }\n', '\n', '    event MinBetAmountChanged(uint amount);\n', '    event MaxBetAmountChanged(uint amount);\n', '\n', '    event GameWin(\n', '        address indexed player,\n', '        uint indexed gameId,\n', '        uint8 start,\n', '        uint8 end,\n', '        uint8 number,\n', '        uint amount,\n', '        uint prize\n', '    );\n', '\n', '    event GameLoose(\n', '        address indexed player,\n', '        uint indexed gameId,\n', '        uint8 start,\n', '        uint8 end,\n', '        uint8 number,\n', '        uint amount,\n', '        uint prize\n', '    );\n', '\n', '    function notify(address player, uint gameId, uint8 start, uint8 end, uint8 number, uint amount, uint prize, bool win) internal {\n', '        if (win) {\n', '            GameWin(\n', '                player,\n', '                gameId,\n', '                start,\n', '                end,\n', '                number,\n', '                amount,\n', '                prize\n', '            );\n', '        } else {\n', '            GameLoose(\n', '                player,\n', '                gameId,\n', '                start,\n', '                end,\n', '                number,\n', '                amount,\n', '                prize\n', '            );\n', '        }\n', '    }\n', '\n', '    function getBlockHash(uint i) internal constant returns (bytes32 blockHash) {\n', '        if (i > 255) {\n', '            i = 255;\n', '        }\n', '        if (i < 0) {\n', '            i = 1;\n', '        }\n', '        blockHash = block.blockhash(block.number - i);\n', '    }\n', '\n', '    function getNumber(bytes32 _a) internal constant returns (uint8) {\n', '        uint8 mint = 0; // pointer?\n', '        for (uint i = 31; i >= 1; i--) {\n', '            if ((uint8(_a[i]) >= 48) && (uint8(_a[i]) <= 57)) {\n', '                return uint8(_a[i]) - 48;\n', '            }\n', '        }\n', '        return mint;\n', '    }\n', '\n', '    function placeBet(uint8 start, uint8 end) public payable returns (bool) {\n', '        if (msg.value < minBetAmount) {\n', '            return false;\n', '        }\n', '\n', '        if (msg.value > maxBetAmount) {\n', '            return false;\n', '        }\n', '\n', '        uint8 counter = end - start + 1;\n', '\n', '        if (counter > 9) {\n', '            return false;\n', '        }\n', '\n', '        if (counter < 1) {\n', '            return false;\n', '        }\n', '\n', '        uint gameId = games[msg.sender].length;\n', '        games[msg.sender].length += 1;\n', '        games[msg.sender][gameId].id = gameId;\n', '        games[msg.sender][gameId].amount = msg.value;\n', '        games[msg.sender][gameId].start = start;\n', '        games[msg.sender][gameId].end = end;\n', '        games[msg.sender][gameId].hash = getBlockHash(pointer);\n', '        games[msg.sender][gameId].number = getNumber(games[msg.sender][gameId].hash);\n', '        // set pointer to number ?\n', '\n', '        games[msg.sender][gameId].prize = 1;\n', '        if ((games[msg.sender][gameId].number >= start) && (games[msg.sender][gameId].number <= end)) {\n', '            games[msg.sender][gameId].win = true;\n', '            uint dec = msg.value / 10;\n', '            uint parts = 10 - counter;\n', '            games[msg.sender][gameId].prize = msg.value + dec * parts;\n', '        }\n', '\n', '        msg.sender.transfer(games[msg.sender][gameId].prize);\n', '\n', '        notify(\n', '            msg.sender,\n', '            gameId,\n', '            start,\n', '            end,\n', '            games[msg.sender][gameId].number,\n', '            msg.value,\n', '            games[msg.sender][gameId].prize,\n', '            games[msg.sender][gameId].win\n', '        );\n', '\n', '        return true;\n', '    }\n', '\n', '    function setMinBetAmount(uint _minBetAmount) onlyowner returns (uint) {\n', '        minBetAmount = _minBetAmount;\n', '        MinBetAmountChanged(minBetAmount);\n', '        return minBetAmount;\n', '    }\n', '\n', '    function setMaxBetAmount(uint _maxBetAmount) onlyowner returns (uint) {\n', '        maxBetAmount = _maxBetAmount;\n', '        MaxBetAmountChanged(maxBetAmount);\n', '        return maxBetAmount;\n', '    }\n', '\n', '    function getGameIds(address player) constant returns(uint[] memory ids) {\n', '        ids = new uint[](games[player].length);\n', '        for (uint i = 0; i < games[player].length; i++) {\n', '            ids[i] = games[player][i].id;\n', '        }\n', '    }\n', '\n', '    function getGameAmount(address player, uint gameId) constant returns(uint) {\n', '        return games[player][gameId].amount;\n', '    }\n', '\n', '    function getGameStart(address player, uint gameId) constant returns(uint8) {\n', '        return games[player][gameId].start;\n', '    }\n', '\n', '    function getGameEnd(address player, uint gameId) constant returns(uint8) {\n', '        return games[player][gameId].end;\n', '    }\n', '\n', '    function getGameHash(address player, uint gameId) constant returns(bytes32) {\n', '        return games[player][gameId].hash;\n', '    }\n', '\n', '    function getGameNumber(address player, uint gameId) constant returns(uint8) {\n', '        return games[player][gameId].number;\n', '    }\n', '\n', '    function getGameWin(address player, uint gameId) constant returns(bool) {\n', '        return games[player][gameId].win;\n', '    }\n', '\n', '    function getGamePrize(address player, uint gameId) constant returns(uint) {\n', '        return games[player][gameId].prize;\n', '    }\n', '\n', '    function getMinBetAmount() constant returns(uint) {\n', '        return minBetAmount;\n', '    }\n', '\n', '    function getMaxBetAmount() constant returns(uint) {\n', '        return maxBetAmount;\n', '    }\n', '\n', '    function () payable {\n', '    }\n', '}']
