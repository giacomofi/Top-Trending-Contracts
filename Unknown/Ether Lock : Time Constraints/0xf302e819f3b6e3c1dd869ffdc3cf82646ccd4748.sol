['pragma solidity ^0.4.11;\n', '\n', '/*  Copyright 2017 GoInto, LLC\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '        http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '*/\n', '\n', '/** gointo migration tracker\n', '\n', '    Tracks the locations of smart contracts and their libraries should the need \n', '    arise for a migration\n', ' */\n', 'contract GointoMigration {\n', '\n', '    struct Manager {\n', '        bool isAdmin;\n', '        bool isManager;\n', '        address addedBy;\n', '    }\n', '\n', '    mapping (address => Manager) internal managers;\n', '    mapping (string => address) internal contracts;\n', '\n', '    event EventSetContract(address by, string key, address contractAddress);\n', '    event EventAddAdmin(address by, address admin);\n', '    event EventRemoveAdmin(address by, address admin);\n', '    event EventAddManager(address by, address manager);\n', '    event EventRemoveManager(address by, address manager);\n', '\n', '    /**\n', '     * Only admins can execute\n', '     */\n', '    modifier onlyAdmin() { \n', '        require(managers[msg.sender].isAdmin == true);\n', '        _; \n', '    }\n', '\n', '    /**\n', '     * Only managers can execute\n', '     */\n', '    modifier onlyManager() { \n', '        require(managers[msg.sender].isManager == true);\n', '        _; \n', '    }\n', '\n', '    function GointoMigration(address originalAdmin) {\n', '        managers[originalAdmin] = Manager(true, true, msg.sender);\n', '    }\n', '\n', '    /**\n', '     * Set a contract location by key\n', '     * @param key - The string key to be used for lookup.  e.g. &#39;etherep&#39;\n', '     * @param contractAddress - The address of the contract\n', '     */\n', '    function setContract(string key, address contractAddress) external onlyManager {\n', '\n', '        // Keep the key length down\n', '        require(bytes(key).length <= 32);\n', '\n', '        // Set\n', '        contracts[key] = contractAddress;\n', '\n', '        // Send event notification\n', '        EventSetContract(msg.sender, key, contractAddress);\n', '\n', '    }\n', '\n', '    /**\n', '     * Get a contract location by key\n', '     * @param key - The string key to be used for lookup.  e.g. &#39;etherep&#39;\n', '     * @return contractAddress - The address of the contract\n', '     */\n', '    function getContract(string key) external constant returns (address) {\n', '\n', '        // Keep the key length down\n', '        require(bytes(key).length <= 32);\n', '\n', '        // Set\n', '        return contracts[key];\n', '\n', '    }\n', '\n', '    /**\n', '     * Get permissions of an address\n', '     * @param who - The address to check\n', '     * @return isAdmin - Is this address an admin?\n', '     * @return isManager - Is this address a manager?\n', '     */\n', '    function getPermissions(address who) external constant returns (bool, bool) {\n', '        return (managers[who].isAdmin, managers[who].isManager);\n', '    }\n', '\n', '    /**\n', '     * Add an admin\n', '     * @param adminAddress - The address of the admin\n', '     */\n', '    function addAdmin(address adminAddress) external onlyAdmin {\n', '\n', '        // Set\n', '        managers[adminAddress] = Manager(true, true, msg.sender);\n', '\n', '        // Send event notification\n', '        EventAddAdmin(msg.sender, adminAddress);\n', '\n', '    }\n', '\n', '    /**\n', '     * Remove an admin\n', '     * @param adminAddress - The address of the admin\n', '     */\n', '    function removeAdmin(address adminAddress) external onlyAdmin {\n', '\n', '        // Let&#39;s make sure we have at least one admin\n', '        require(adminAddress != msg.sender);\n', '\n', '        // Set\n', '        managers[adminAddress] = Manager(false, false, msg.sender);\n', '\n', '        // Send event notification\n', '        EventRemoveAdmin(msg.sender, adminAddress);\n', '\n', '    }\n', '\n', '    /**\n', '     * Add a manager\n', '     * @param manAddress - The address of the new manager\n', '     */\n', '    function addManager(address manAddress) external onlyAdmin {\n', '\n', '        // Set\n', '        managers[manAddress] = Manager(false, true, msg.sender);\n', '\n', '        // Send event notification\n', '        EventAddManager(msg.sender, manAddress);\n', '\n', '    }\n', '\n', '    /**\n', '     * Remove a manager\n', '     * @param manAddress - The address of the new manager\n', '     */\n', '    function removeManager(address manAddress) external onlyAdmin {\n', '\n', '        // Set\n', '        managers[manAddress] = Manager(false, false, msg.sender);\n', '\n', '        // Send event notification\n', '        EventRemoveManager(msg.sender, manAddress);\n', '\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.11;\n', '\n', '/*  Copyright 2017 GoInto, LLC\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '        http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '*/\n', '\n', '/** gointo migration tracker\n', '\n', '    Tracks the locations of smart contracts and their libraries should the need \n', '    arise for a migration\n', ' */\n', 'contract GointoMigration {\n', '\n', '    struct Manager {\n', '        bool isAdmin;\n', '        bool isManager;\n', '        address addedBy;\n', '    }\n', '\n', '    mapping (address => Manager) internal managers;\n', '    mapping (string => address) internal contracts;\n', '\n', '    event EventSetContract(address by, string key, address contractAddress);\n', '    event EventAddAdmin(address by, address admin);\n', '    event EventRemoveAdmin(address by, address admin);\n', '    event EventAddManager(address by, address manager);\n', '    event EventRemoveManager(address by, address manager);\n', '\n', '    /**\n', '     * Only admins can execute\n', '     */\n', '    modifier onlyAdmin() { \n', '        require(managers[msg.sender].isAdmin == true);\n', '        _; \n', '    }\n', '\n', '    /**\n', '     * Only managers can execute\n', '     */\n', '    modifier onlyManager() { \n', '        require(managers[msg.sender].isManager == true);\n', '        _; \n', '    }\n', '\n', '    function GointoMigration(address originalAdmin) {\n', '        managers[originalAdmin] = Manager(true, true, msg.sender);\n', '    }\n', '\n', '    /**\n', '     * Set a contract location by key\n', "     * @param key - The string key to be used for lookup.  e.g. 'etherep'\n", '     * @param contractAddress - The address of the contract\n', '     */\n', '    function setContract(string key, address contractAddress) external onlyManager {\n', '\n', '        // Keep the key length down\n', '        require(bytes(key).length <= 32);\n', '\n', '        // Set\n', '        contracts[key] = contractAddress;\n', '\n', '        // Send event notification\n', '        EventSetContract(msg.sender, key, contractAddress);\n', '\n', '    }\n', '\n', '    /**\n', '     * Get a contract location by key\n', "     * @param key - The string key to be used for lookup.  e.g. 'etherep'\n", '     * @return contractAddress - The address of the contract\n', '     */\n', '    function getContract(string key) external constant returns (address) {\n', '\n', '        // Keep the key length down\n', '        require(bytes(key).length <= 32);\n', '\n', '        // Set\n', '        return contracts[key];\n', '\n', '    }\n', '\n', '    /**\n', '     * Get permissions of an address\n', '     * @param who - The address to check\n', '     * @return isAdmin - Is this address an admin?\n', '     * @return isManager - Is this address a manager?\n', '     */\n', '    function getPermissions(address who) external constant returns (bool, bool) {\n', '        return (managers[who].isAdmin, managers[who].isManager);\n', '    }\n', '\n', '    /**\n', '     * Add an admin\n', '     * @param adminAddress - The address of the admin\n', '     */\n', '    function addAdmin(address adminAddress) external onlyAdmin {\n', '\n', '        // Set\n', '        managers[adminAddress] = Manager(true, true, msg.sender);\n', '\n', '        // Send event notification\n', '        EventAddAdmin(msg.sender, adminAddress);\n', '\n', '    }\n', '\n', '    /**\n', '     * Remove an admin\n', '     * @param adminAddress - The address of the admin\n', '     */\n', '    function removeAdmin(address adminAddress) external onlyAdmin {\n', '\n', "        // Let's make sure we have at least one admin\n", '        require(adminAddress != msg.sender);\n', '\n', '        // Set\n', '        managers[adminAddress] = Manager(false, false, msg.sender);\n', '\n', '        // Send event notification\n', '        EventRemoveAdmin(msg.sender, adminAddress);\n', '\n', '    }\n', '\n', '    /**\n', '     * Add a manager\n', '     * @param manAddress - The address of the new manager\n', '     */\n', '    function addManager(address manAddress) external onlyAdmin {\n', '\n', '        // Set\n', '        managers[manAddress] = Manager(false, true, msg.sender);\n', '\n', '        // Send event notification\n', '        EventAddManager(msg.sender, manAddress);\n', '\n', '    }\n', '\n', '    /**\n', '     * Remove a manager\n', '     * @param manAddress - The address of the new manager\n', '     */\n', '    function removeManager(address manAddress) external onlyAdmin {\n', '\n', '        // Set\n', '        managers[manAddress] = Manager(false, false, msg.sender);\n', '\n', '        // Send event notification\n', '        EventRemoveManager(msg.sender, manAddress);\n', '\n', '    }\n', '\n', '}']
