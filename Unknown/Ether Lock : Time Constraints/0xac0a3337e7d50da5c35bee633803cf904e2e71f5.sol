['pragma solidity ^0.4.13;\n', ' \n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract SpaceICOToken {\n', '\tusing SafeMath for uint256;\n', '\tstring public name = "SpaceICO Token";\n', '    string public symbol = "SIO";\n', '    uint256 public decimals = 18;\n', '\n', '    uint256 private saleStart;\n', '    uint256 private saleEnd;\n', '\n', '    uint256 private constant TOTAL_SUPPLY = 50000000 * 1 ether;\n', '    uint256 private constant SOFT_CAP = 500 * 1 ether;\n', '\n', '\tmapping (address => uint) balances;\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '\n', '\taddress private owner;\n', '\n', '    function getSaleStart() constant returns (uint256) {\n', '        return saleStart;\n', '    }\n', '\n', '    function getSaleEnd() constant returns (uint256) {\n', '        return saleEnd;\n', '    }\n', '\n', ' \n', '    function getCurrentPrice() constant returns (uint price) {\n', '        //Token price, ETH: 0,002\n', '        price = 500 * 1 ether;\n', '    }\n', '\n', '    function softCapReached() constant returns (bool) {\n', '        return this.balance > SOFT_CAP;\n', '    }\n', '\n', '    function inSalePeriod() constant returns (bool) {\n', '        return now > saleStart && now < saleEnd;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        balance = balances[_owner];\n', '    }\n', '\n', '\tfunction SpaceICOToken(uint _saleStart) {\n', '        owner = msg.sender;\n', '        if (_saleStart == 0) {\n', '            saleStart = 1508025600; //Beginning: 10.15.2017\n', '            saleEnd = 1509408000; //End: 10.31.2017\n', '        } else {\n', '            saleStart = _saleStart;\n', '            saleEnd = _saleStart + 17 days;\n', '        }\n', '\n', '        balances[owner] = 50000000 * 10 ** decimals;\n', '\t}\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool) {\n', '        require(_to != address(0));\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _amount) returns (bool success) {\n', '        require(now > saleEnd + 14 days);\n', '\n', '        if (balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount > 0 && balances[_to] + _amount > balances[_to]) {\n', '\n', '            balances[_from] = balances[_from].sub(_amount);\n', '            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '            balances[_to] = balances[_to].add(_amount);\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function approve(address _spender, uint _amount) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function() payable {\n', '        buyTokens();\n', '    }\n', '\n', '    function buyTokens() payable {\n', '        require(msg.value > 0);\n', '        require(inSalePeriod());\n', '\n', '        uint amountInWei = msg.value;\n', '\n', '        uint price = getCurrentPrice();\n', '        uint tokenAmount = price * amountInWei / 1 ether;\n', '        \n', '        transfer(msg.sender, tokenAmount);        \n', '\n', '        //Raise event\n', '        BuyToken(msg.sender, amountInWei, 0);\n', '    }\n', '\n', '    function refund() {\n', '        if (softCapReached() == false && now > saleEnd) {\n', '\n', '            uint tokenAmount = balanceOf(msg.sender);\n', '            uint amount = tokenAmount.div(1 ether);\n', '            \n', '            msg.sender.transfer(amount);\n', '            Refund();\n', '        }\n', '    }\n', '\n', '    function withdraw() {\n', '        require(msg.sender == owner);\n', '\n', '        if (softCapReached() == true && now > saleEnd) {\n', '            msg.sender.transfer(this.balance);\n', '        }\n', '    }\n', '\n', '\tevent Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '    event BuyToken(address indexed _purchaser, uint256 _value, uint256 _amount);\n', '    event Refund();\n', '}']