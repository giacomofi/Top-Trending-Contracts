['pragma solidity ^0.4.0;\n', '\n', 'contract Bounty {\n', '    struct Talk {\n', '        uint balance;\n', '        mapping(address => uint) witnessedPresenter;\n', '        mapping(address => bool) witnessedBy;\n', '    }\n', '    \n', '    event TalkBounty (bytes32 title);\n', '    \n', '    mapping(bytes32 => Talk) public talks;\n', '    \n', '    modifier onlywitness {\n', '        require(msg.sender == 0x07114957EdBcCc1DA265ea2Aa420a1a22e6afF58\n', '        || msg.sender == 0x75427E62EB560447165a54eEf9B6367d87F98418);\n', '        _;\n', '    }\n', '    \n', '    function add(bytes32 title) payable {\n', '        talks[title].balance += msg.value;\n', '        TalkBounty(title);\n', '    }\n', '    \n', '    function witness(bytes32 title, address presenter) onlywitness returns (uint) {\n', '        if (talks[title].witnessedBy[msg.sender]) {\n', '            revert();\n', '        }\n', '        talks[title].witnessedBy[msg.sender] = true;\n', '        talks[title].witnessedPresenter[presenter] += 1;\n', '        return talks[title].witnessedPresenter[presenter];\n', '    }\n', '    \n', '    function claim(bytes32 title) {\n', '        if (talks[title].witnessedPresenter[msg.sender] < 2) {\n', '            revert();\n', '        }\n', '        uint amount = talks[title].balance;\n', '        talks[title].balance = 0;\n', '        msg.sender.transfer(amount);\n', '    }\n', '}']
['pragma solidity ^0.4.0;\n', '\n', 'contract Bounty {\n', '    struct Talk {\n', '        uint balance;\n', '        mapping(address => uint) witnessedPresenter;\n', '        mapping(address => bool) witnessedBy;\n', '    }\n', '    \n', '    event TalkBounty (bytes32 title);\n', '    \n', '    mapping(bytes32 => Talk) public talks;\n', '    \n', '    modifier onlywitness {\n', '        require(msg.sender == 0x07114957EdBcCc1DA265ea2Aa420a1a22e6afF58\n', '        || msg.sender == 0x75427E62EB560447165a54eEf9B6367d87F98418);\n', '        _;\n', '    }\n', '    \n', '    function add(bytes32 title) payable {\n', '        talks[title].balance += msg.value;\n', '        TalkBounty(title);\n', '    }\n', '    \n', '    function witness(bytes32 title, address presenter) onlywitness returns (uint) {\n', '        if (talks[title].witnessedBy[msg.sender]) {\n', '            revert();\n', '        }\n', '        talks[title].witnessedBy[msg.sender] = true;\n', '        talks[title].witnessedPresenter[presenter] += 1;\n', '        return talks[title].witnessedPresenter[presenter];\n', '    }\n', '    \n', '    function claim(bytes32 title) {\n', '        if (talks[title].witnessedPresenter[msg.sender] < 2) {\n', '            revert();\n', '        }\n', '        uint amount = talks[title].balance;\n', '        talks[title].balance = 0;\n', '        msg.sender.transfer(amount);\n', '    }\n', '}']
