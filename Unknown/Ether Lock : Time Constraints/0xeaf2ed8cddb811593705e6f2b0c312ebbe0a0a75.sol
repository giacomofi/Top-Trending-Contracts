['pragma solidity ^0.4.4;\n', '\n', 'contract PreTgeExperty {\n', '\n', '  // TGE\n', '  struct Contributor {\n', '    address addr;\n', '    uint256 amount;\n', '    uint256 timestamp;\n', '    bool rejected;\n', '  }\n', '  Contributor[] public contributors;\n', '  mapping(address => bool) public isWhitelisted;\n', '  address public managerAddr;\n', '\n', '  // wallet\n', '  struct Tx {\n', '    address founder;\n', '    address destAddr;\n', '    bool active;\n', '  }\n', '  mapping (address => bool) public founders;\n', '  Tx[] public txs;\n', '  \n', '  // preICO constructor\n', '  function PreTgeExperty() public {\n', '    managerAddr = 0x71e2f5362fdf6A48ab726E1D3ef1Cd4B087436fC;\n', '    founders[0xCE05A8Aa56E1054FAFC214788246707F5258c0Ae] = true;\n', '    founders[0xBb62A710BDbEAF1d3AD417A222d1ab6eD08C37f5] = true;\n', '    founders[0x009A55A3c16953A359484afD299ebdC444200EdB] = true;\n', '  }\n', '  \n', '  // whitelist address\n', '  function whitelist(address addr) public isManager {\n', '    isWhitelisted[addr] = true;\n', '  }\n', '\n', '  function reject(uint256 idx) public isManager {\n', '    // contributor must exist\n', '    assert(contributors[idx].addr != 0);\n', '    // contribution cant be rejected\n', '    assert(!contributors[idx].rejected);\n', '\n', '    // de-whitelist address\n', '    isWhitelisted[contributors[idx].addr] = false;\n', '\n', '    // reject contribution\n', '    contributors[idx].rejected = true;\n', '\n', '    // return ETH to contributor\n', '    contributors[idx].addr.transfer(contributors[idx].amount);\n', '  }\n', '\n', '  // contribute function\n', '  function() public payable {\n', '    // allow to contribute only whitelisted KYC addresses\n', '    assert(isWhitelisted[msg.sender]);\n', '\n', '    // save contributor for further use\n', '    contributors.push(Contributor({\n', '      addr: msg.sender,\n', '      amount: msg.value,\n', '      timestamp: block.timestamp,\n', '      rejected: false\n', '    }));\n', '  }\n', '\n', '  // one of founders can propose destination address for ethers\n', '  function proposeTx(address destAddr) public isFounder {\n', '    txs.push(Tx({\n', '      founder: msg.sender,\n', '      destAddr: destAddr,\n', '      active: true\n', '    }));\n', '  }\n', '\n', '  // another founder can approve specified tx and send it to destAddr\n', '  function approveTx(uint8 txIdx) public isFounder {\n', '    assert(txs[txIdx].founder != msg.sender);\n', '    assert(txs[txIdx].active);\n', '    \n', '    txs[txIdx].active = false;\n', '    txs[txIdx].destAddr.transfer(this.balance);\n', '  }\n', '\n', '  // isManager modifier\n', '  modifier isManager() {\n', '    if (msg.sender == managerAddr) {\n', '      _;\n', '    }\n', '  }\n', '  \n', '  // check if msg.sender is founder\n', '  modifier isFounder() {\n', '    require(founders[msg.sender]);\n', '    _;\n', '  }\n', '}']