['pragma solidity ^0.4.17;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    \n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  \n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    \n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    \n', '  address public owner;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '    \n', '  event Mint(address indexed to, uint256 amount);\n', '  \n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '  address public saleAgent;\n', '\n', '  function setSaleAgent(address newSaleAgnet) {\n', '    require(msg.sender == saleAgent || msg.sender == owner);\n', '    saleAgent = newSaleAgnet;\n', '  }\n', '\n', '  function mint(address _to, uint256 _amount) returns (bool) {\n', '    require(msg.sender == saleAgent && !mintingFinished);\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() returns (bool) {\n', '    require((msg.sender == saleAgent || msg.sender == owner) && !mintingFinished);\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '\n', '  \n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '    \n', '  event Pause();\n', '  \n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS paused\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to allow actions only when the contract IS NOT paused\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '  \n', '}\n', '\n', 'contract CovestingToken is MintableToken {\t\n', '    \n', '  string public constant name = "Covesting";\n', '   \n', '  string public constant symbol = "COV";\n', '    \n', '  uint32 public constant decimals = 18;\n', '\n', '  mapping (address => uint) public locked;\n', '\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    require(locked[msg.sender] < now);\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    require(locked[_from] < now);\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '  \n', '  function lock(address addr, uint periodInDays) {\n', '    require(locked[addr] < now && (msg.sender == saleAgent || msg.sender == addr));\n', '    locked[addr] = now + periodInDays * 1 days;\n', '  }\n', '\n', '  function () payable {\n', '    revert();\n', '  }\n', '\n', '}\n', '\n', 'contract StagedCrowdsale is Pausable {\n', '\n', '  using SafeMath for uint;\n', '\n', '  struct Stage {\n', '    uint hardcap;\n', '    uint price;\n', '    uint invested;\n', '    uint closed;\n', '  }\n', '\n', '  uint public start;\n', '\n', '  uint public period;\n', '\n', '  uint public totalHardcap;\n', ' \n', '  uint public totalInvested;\n', '\n', '  Stage[] public stages;\n', '\n', '  function stagesCount() public constant returns(uint) {\n', '    return stages.length;\n', '  }\n', '\n', '  function setStart(uint newStart) public onlyOwner {\n', '    start = newStart;\n', '  }\n', '\n', '  function setPeriod(uint newPeriod) public onlyOwner {\n', '    period = newPeriod;\n', '  }\n', '\n', '  function addStage(uint hardcap, uint price) public onlyOwner {\n', '    require(hardcap > 0 && price > 0);\n', '    Stage memory stage = Stage(hardcap.mul(1 ether), price, 0, 0);\n', '    stages.push(stage);\n', '    totalHardcap = totalHardcap.add(stage.hardcap);\n', '  }\n', '\n', '  function removeStage(uint8 number) public onlyOwner {\n', '    require(number >=0 && number < stages.length);\n', '    Stage storage stage = stages[number];\n', '    totalHardcap = totalHardcap.sub(stage.hardcap);    \n', '    delete stages[number];\n', '    for (uint i = number; i < stages.length - 1; i++) {\n', '      stages[i] = stages[i+1];\n', '    }\n', '    stages.length--;\n', '  }\n', '\n', '  function changeStage(uint8 number, uint hardcap, uint price) public onlyOwner {\n', '    require(number >= 0 &&number < stages.length);\n', '    Stage storage stage = stages[number];\n', '    totalHardcap = totalHardcap.sub(stage.hardcap);    \n', '    stage.hardcap = hardcap.mul(1 ether);\n', '    stage.price = price;\n', '    totalHardcap = totalHardcap.add(stage.hardcap);    \n', '  }\n', '\n', '  function insertStage(uint8 numberAfter, uint hardcap, uint price) public onlyOwner {\n', '    require(numberAfter < stages.length);\n', '    Stage memory stage = Stage(hardcap.mul(1 ether), price, 0, 0);\n', '    totalHardcap = totalHardcap.add(stage.hardcap);\n', '    stages.length++;\n', '    for (uint i = stages.length - 2; i > numberAfter; i--) {\n', '      stages[i + 1] = stages[i];\n', '    }\n', '    stages[numberAfter + 1] = stage;\n', '  }\n', '\n', '  function clearStages() public onlyOwner {\n', '    for (uint i = 0; i < stages.length; i++) {\n', '      delete stages[i];\n', '    }\n', '    stages.length -= stages.length;\n', '    totalHardcap = 0;\n', '  }\n', '\n', '  function lastSaleDate() public constant returns(uint) {\n', '    return start + period * 1 days;\n', '  }\n', '\n', '  modifier saleIsOn() {\n', '    require(stages.length > 0 && now >= start && now < lastSaleDate());\n', '    _;\n', '  }\n', '  \n', '  modifier isUnderHardcap() {\n', '    require(totalInvested <= totalHardcap);\n', '    _;\n', '  }\n', '\n', '  function currentStage() public saleIsOn isUnderHardcap constant returns(uint) {\n', '    for(uint i=0; i < stages.length; i++) {\n', '      if(stages[i].closed == 0) {\n', '        return i;\n', '      }\n', '    }\n', '    revert();\n', '  }\n', '\n', '}\n', '\n', 'contract CommonSale is StagedCrowdsale {\n', '\n', '  address public multisigWallet;\n', '\n', '  uint public minPrice;\n', '\n', '  uint public totalTokensMinted;\n', '\n', '  CovestingToken public token;\n', '  \n', '  function setMinPrice(uint newMinPrice) public onlyOwner {\n', '    minPrice = newMinPrice;\n', '  }\n', '\n', '  function setMultisigWallet(address newMultisigWallet) public onlyOwner {\n', '    multisigWallet = newMultisigWallet;\n', '  }\n', '  \n', '  function setToken(address newToken) public onlyOwner {\n', '    token = CovestingToken(newToken);\n', '  }\n', '\n', '  function createTokens() public whenNotPaused payable {\n', '    require(msg.value >= minPrice);\n', '    uint stageIndex = currentStage();\n', '    multisigWallet.transfer(msg.value);\n', '    Stage storage stage = stages[stageIndex];\n', '    uint tokens = msg.value.mul(stage.price);\n', '    token.mint(this, tokens);\n', '    token.transfer(msg.sender, tokens);\n', '    totalTokensMinted = totalTokensMinted.add(tokens);\n', '    totalInvested = totalInvested.add(msg.value);\n', '    stage.invested = stage.invested.add(msg.value);\n', '    if(stage.invested >= stage.hardcap) {\n', '      stage.closed = now;\n', '    }\n', '  }\n', '\n', '  function() external payable {\n', '    createTokens();\n', '  }\n', '\n', '  function retrieveTokens(address anotherToken) public onlyOwner {\n', '    ERC20 alienToken = ERC20(anotherToken);\n', '    alienToken.transfer(multisigWallet, token.balanceOf(this));\n', '  }\n', '\n', '}\n', '\n', 'contract Presale is CommonSale {\n', '\n', '  Mainsale public mainsale;\n', '\n', '  function setMainsale(address newMainsale) public onlyOwner {\n', '    mainsale = Mainsale(newMainsale);\n', '  }\n', '\n', '  function setMultisigWallet(address newMultisigWallet) public onlyOwner {\n', '    multisigWallet = newMultisigWallet;\n', '  }\n', '\n', '  function finishMinting() public whenNotPaused onlyOwner {\n', '    token.setSaleAgent(mainsale);\n', '  }\n', '\n', '  function() external payable {\n', '    createTokens();\n', '  }\n', '\n', '  function retrieveTokens(address anotherToken) public onlyOwner {\n', '    ERC20 alienToken = ERC20(anotherToken);\n', '    alienToken.transfer(multisigWallet, token.balanceOf(this));\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract Mainsale is CommonSale {\n', '\n', '  address public foundersTokensWallet;\n', '  \n', '  address public bountyTokensWallet;\n', '  \n', '  uint public foundersTokensPercent;\n', '  \n', '  uint public bountyTokensPercent;\n', '  \n', '  uint public percentRate = 100;\n', '\n', '  uint public lockPeriod;\n', '\n', '  function setLockPeriod(uint newLockPeriod) public onlyOwner {\n', '    lockPeriod = newLockPeriod;\n', '  }\n', '\n', '  function setFoundersTokensPercent(uint newFoundersTokensPercent) public onlyOwner {\n', '    foundersTokensPercent = newFoundersTokensPercent;\n', '  }\n', '\n', '  function setBountyTokensPercent(uint newBountyTokensPercent) public onlyOwner {\n', '    bountyTokensPercent = newBountyTokensPercent;\n', '  }\n', '\n', '  function setFoundersTokensWallet(address newFoundersTokensWallet) public onlyOwner {\n', '    foundersTokensWallet = newFoundersTokensWallet;\n', '  }\n', '\n', '  function setBountyTokensWallet(address newBountyTokensWallet) public onlyOwner {\n', '    bountyTokensWallet = newBountyTokensWallet;\n', '  }\n', '\n', '  function finishMinting() public whenNotPaused onlyOwner {\n', '    uint summaryTokensPercent = bountyTokensPercent + foundersTokensPercent;\n', '    uint mintedTokens = token.totalSupply();\n', '    uint summaryFoundersTokens = mintedTokens.mul(summaryTokensPercent).div(percentRate - summaryTokensPercent);\n', '    uint totalSupply = summaryFoundersTokens + mintedTokens;\n', '    uint foundersTokens = totalSupply.mul(foundersTokensPercent).div(percentRate);\n', '    uint bountyTokens = totalSupply.mul(bountyTokensPercent).div(percentRate);\n', '    token.mint(this, foundersTokens);\n', '    token.lock(foundersTokensWallet, lockPeriod * 1 days);\n', '    token.transfer(foundersTokensWallet, foundersTokens);\n', '    token.mint(this, bountyTokens);\n', '    token.transfer(bountyTokensWallet, bountyTokens);\n', '    totalTokensMinted = totalTokensMinted.add(foundersTokens).add(bountyTokens);\n', '    token.finishMinting();\n', '  }\n', '\n', '}\n', '\n', 'contract Configurator is Ownable {\n', '\n', '  CovestingToken public token; \n', '\n', '  Presale public presale;\n', '\n', '  Mainsale public mainsale;\n', '\n', '  function deploy() public onlyOwner {\n', '    token = new CovestingToken();\n', '\n', '    presale = new Presale();\n', '\n', '    presale.setToken(token);\n', '    presale.addStage(5000,300);\n', '    presale.setMultisigWallet(0x6245C05a6fc205d249d0775769cfE73CB596e57D);\n', '    presale.setStart(1508504400);\n', '    presale.setPeriod(30);\n', '    presale.setMinPrice(100000000000000000);\n', '    token.setSaleAgent(presale);\t\n', '\n', '    mainsale = new Mainsale();\n', '\n', '    mainsale.setToken(token);\n', '    mainsale.addStage(5000,200);\n', '    mainsale.addStage(5000,180);\n', '    mainsale.addStage(10000,170);\n', '    mainsale.addStage(20000,160);\n', '    mainsale.addStage(20000,150);\n', '    mainsale.addStage(40000,130);\n', '    mainsale.setMultisigWallet(0x15A071B83396577cCbd86A979Af7d2aBa9e18970);\n', '    mainsale.setFoundersTokensWallet(0x25ED4f0D260D5e5218D95390036bc8815Ff38262);\n', '    mainsale.setBountyTokensWallet(0x717bfD30f039424B049D918F935DEdD069B66810);\n', '    mainsale.setStart(1511528400);\n', '    mainsale.setPeriod(30);\n', '    mainsale.setLockPeriod(90);\n', '    mainsale.setMinPrice(100000000000000000);\n', '    mainsale.setFoundersTokensPercent(13);\n', '    mainsale.setBountyTokensPercent(5);\n', '\n', '    presale.setMainsale(mainsale);\n', '\n', '    token.transferOwnership(owner);\n', '    presale.transferOwnership(owner);\n', '    mainsale.transferOwnership(owner);\n', '  }\n', '\n', '}']