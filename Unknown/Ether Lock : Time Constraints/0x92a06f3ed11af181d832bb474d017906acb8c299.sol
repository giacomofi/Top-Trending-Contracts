['/**\n', ' * Overflow aware uint math functions.\n', ' *\n', ' * Inspired by https://github.com/MakerDAO/maker-otc/blob/master/contracts/simple_market.sol\n', ' */\n', 'pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * ERC 20 token\n', ' *\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ZeePinToken  {\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    uint256 public totalSupply;\n', '\n', '\n', '    string public name = "ZeePin Token";\n', '    string public symbol = "ZPT";\n', '    uint public decimals = 18;\n', '\n', '    uint public startTime; //crowdsale start time (set in constructor)\n', '    uint public endTime; //crowdsale end time (set in constructor)\n', '    uint public startEarlyBird;  //crowdsale end time (set in constructor)\n', '    uint public endEarlyBird;  //crowdsale end time (set in constructor)\n', '    uint public startPeTime;  //pe start time (set in constructor)\n', '    uint public endPeTime; //pe end time (set in constructor)\n', '    uint public endFirstWeek;\n', '    uint public endSecondWeek;\n', '    uint public endThirdWeek;\n', '    uint public endFourthWeek;\n', '    uint public endFifthWeek;\n', '\n', '\n', '    // Initial founder address (set in constructor)\n', '    // All deposited ETH will be instantly forwarded to this address.\n', '    address public founder = 0x0;\n', '\n', '    // signer address (for clickwrap agreement)\n', '    // see function() {} for comments\n', '    address public signer = 0x0;\n', '\n', '    // price is defined by time\n', '    uint256 public pePrice = 6160;\n', '    uint256 public earlyBirdPrice = 5720;\n', '    uint256 public firstWeekTokenPrice = 4840;\n', '    uint256 public secondWeekTokenPrice = 4752;\n', '    uint256 public thirdWeekTokenPrice = 4620;\n', '    uint256 public fourthWeekTokenPrice = 4532;\n', '    uint256 public fifthWeekTokenPrice = 4400;\n', '\n', '    uint256 public etherCap = 90909 * 10**decimals; //max amount raised during crowdsale, which represents 5,100,000,000 ZPTs\n', '    uint256 public totalMintedToken = 1000000000;\n', '    uint256 public etherLowLimit = 16500 * 10**decimals;\n', '    uint256 public earlyBirdCap = 6119 * 10**decimals;\n', '    uint256 public earlyBirdMinPerPerson = 5 * 10**decimals;\n', '    uint256 public earlyBirdMaxPerPerson = 200 * 10**decimals;\n', '    uint256 public peCap = 2700 * 10**decimals;\n', '    uint256 public peMinPerPerson = 150 * 10**decimals;\n', '    uint256 public peMaxPerPerson = 450 * 10**decimals;\n', '    uint256 public regularMinPerPerson = 1 * 10**17;\n', '    uint256 public regularMaxPerPerson = 200 * 10**decimals;\n', '\n', '    uint public transferLockup = 15 days ; //transfers are locked for this time period after\n', '\n', '    uint public founderLockup = 2 weeks; //founder allocation cannot be created until this time period after endTime\n', '    \n', '\n', '    uint256 public founderAllocation = 100 * 10**16; //100% of token supply allocated post-crowdsale for the founder/operation allocation\n', '\n', '\n', '    bool public founderAllocated = false; //this will change to true when the founder fund is allocated\n', '\n', '    uint256 public saleTokenSupply = 0; //this will keep track of the token supply created during the crowdsale\n', '    uint256 public saleEtherRaised = 0; //this will keep track of the Ether raised during the crowdsale\n', '    bool public halted = false; //the founder address can set this to true to halt the crowdsale due to emergency\n', '\n', '    event Buy(uint256 eth, uint256 fbt);\n', '    event AllocateFounderTokens(address indexed sender);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event print(bytes32 msg);\n', '\n', '    //constructor\n', '    function ZeePinToken(address founderInput, address signerInput, uint startTimeInput, uint endTimeInput, uint startEarlyBirdInput, uint endEarlyBirdInput, uint startPeInput, uint endPeInput) {\n', '        founder = founderInput;\n', '        signer = signerInput;\n', '        startTime = startTimeInput;\n', '        endTime = endTimeInput;\n', '        startEarlyBird = startEarlyBirdInput;\n', '        endEarlyBird = endEarlyBirdInput;\n', '        startPeTime = startPeInput;\n', '        endPeTime = endPeInput;\n', '        \n', '        endFirstWeek = startTime + 1 weeks;\n', '        endSecondWeek = startTime + 2 weeks;\n', '        endThirdWeek = startTime + 3 weeks;\n', '        endFourthWeek = startTime + 4 weeks;\n', '        endFifthWeek = startTime + 5 weeks;\n', '    }\n', '\n', '    //price based on current token supply\n', '    function price() constant returns(uint256) {\n', '        if (now <= endEarlyBird && now >= startEarlyBird) return earlyBirdPrice;\n', '        if (now <= endFirstWeek) return firstWeekTokenPrice;\n', '        if (now <= endSecondWeek) return secondWeekTokenPrice;\n', '        if (now <= endThirdWeek) return thirdWeekTokenPrice;\n', '        if (now <= endFourthWeek) return fourthWeekTokenPrice;\n', '        if (now <= endFifthWeek) return fifthWeekTokenPrice;\n', '        return fifthWeekTokenPrice;\n', '    }\n', '\n', '    // price() exposed for unit tests\n', '    function testPrice(uint256 currentTime) constant returns(uint256) {\n', '        if (currentTime < endEarlyBird && currentTime >= startEarlyBird) return earlyBirdPrice;\n', '        if (currentTime < endFirstWeek && currentTime >= startTime) return firstWeekTokenPrice;\n', '        if (currentTime < endSecondWeek && currentTime >= endFirstWeek) return secondWeekTokenPrice;\n', '        if (currentTime < endThirdWeek && currentTime >= endSecondWeek) return thirdWeekTokenPrice;\n', '        if (currentTime < endFourthWeek && currentTime >= endThirdWeek) return fourthWeekTokenPrice;\n', '        if (currentTime < endFifthWeek && currentTime >= endFourthWeek) return fifthWeekTokenPrice;\n', '        return fifthWeekTokenPrice;\n', '    }\n', '\n', '\n', '    // Buy entry point\n', '    function buy( bytes32 hash) payable {\n', '        print(hash);\n', '        if (((now < startTime || now >= endTime) && (now < startEarlyBird || now >= endEarlyBird)) || halted) revert();\n', '        if (now>=startEarlyBird && now<endEarlyBird) {\n', '            if (msg.value < earlyBirdMinPerPerson || msg.value > earlyBirdMaxPerPerson || (saleEtherRaised + msg.value) > (peCap + earlyBirdCap)) {\n', '                revert();\n', '            }\n', '        }\n', '        if (now>=startTime && now<endTime) {\n', '            if (msg.value < regularMinPerPerson || msg.value > regularMaxPerPerson || (saleEtherRaised + msg.value) > etherCap ) {\n', '                revert();\n', '            }\n', '        }\n', '        uint256 tokens = (msg.value * price());\n', '        balances[msg.sender] = (balances[msg.sender] + tokens);\n', '        totalSupply = (totalSupply + tokens);\n', '        saleEtherRaised = (saleEtherRaised + msg.value);\n', '\n', '        if (!founder.call.value(msg.value)()) revert(); //immediately send Ether to founder address\n', '\n', '        Buy(msg.value, tokens);\n', '    }\n', '\n', '    /**\n', '     * Set up founder address token balance.\n', '     *\n', '     * Security review\n', '     *\n', '     * - Integer math: ok - only called once with fixed parameters\n', '     *\n', '     * Applicable tests:\n', '     *\n', '     *\n', '     */\n', '    function allocateFounderTokens() {\n', '        if (msg.sender!=founder) revert();\n', '        if (now <= endTime + founderLockup) revert();\n', '        if (founderAllocated) revert();\n', '        balances[founder] = (balances[founder] + totalSupply * founderAllocation / (1 ether));\n', '        totalSupply = (totalSupply + totalSupply * founderAllocation / (1 ether));\n', '        founderAllocated = true;\n', '        AllocateFounderTokens(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * Set up founder address token balance.\n', '     *\n', '     * Security review\n', '     *\n', '     * - Integer math: ok - only called once with fixed parameters\n', '     *\n', '     * Applicable tests:\n', '     *\n', '     *\n', '     */\n', '    function offlineSales(uint256 offlineNum, uint256 offlineEther) {\n', '        if (msg.sender!=founder) revert();\n', '        // if (now >= startEarlyBird && now <= endEarlyBird) revert(); //offline sales can be done only during early bird time \n', '        if (saleEtherRaised + offlineEther > etherCap) revert();\n', '        totalSupply = (totalSupply + offlineNum);\n', '        balances[founder] = (balances[founder] + offlineNum );\n', '        saleEtherRaised = (saleEtherRaised + offlineEther);\n', '    }\n', '\n', '    /**\n', '     * Emergency Stop ICO.\n', '     *\n', '     *  Applicable tests:\n', '     *\n', '     * - Test unhalting, buying, and succeeding\n', '     */\n', '    function halt() {\n', '        if (msg.sender!=founder) revert();\n', '        halted = true;\n', '    }\n', '\n', '    function unhalt() {\n', '        if (msg.sender!=founder) revert();\n', '        halted = false;\n', '    }\n', '\n', '    /**\n', '     * Change founder address (where ICO ETH is being forwarded).\n', '     *\n', '     * Applicable tests:\n', '     *\n', '     * - Test founder change by hacker\n', '     * - Test founder change\n', '     * - Test founder token allocation twice\n', '     */\n', '    function changeFounder(address newFounder) {\n', '        if (msg.sender!=founder) revert();\n', '        founder = newFounder;\n', '    }\n', '\n', '    /**\n', '     * ERC 20 Standard Token interface transfer function\n', '     *\n', '     * Prevent transfers until freeze period is over.\n', '     *\n', '     * Applicable tests:\n', '     *\n', '     * - Test restricted early transfer\n', '     * - Test transfer after restricted period\n', '     */\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        if (now <= endTime + transferLockup) revert();\n', '\n', '        //Default assumes totalSupply can&#39;t be over max (2^256 - 1).\n', '        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn&#39;t wrap.\n', '        //Replace the if with this one instead.\n', '        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        //if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '\n', '    }\n', '    /**\n', '     * ERC 20 Standard Token interface transfer function\n', '     *\n', '     * Prevent transfers until freeze period is over.\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (msg.sender != founder) revert();\n', '\n', '        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    /**\n', '     * Do not allow direct deposits.\n', '     *\n', '     * All crowdsale depositors must have read the legal agreement.\n', '     * This is confirmed by having them signing the terms of service on the website.\n', '     * The give their crowdsale Ethereum source address on the website.\n', '     * Website signs this address using crowdsale private key (different from founders key).\n', '     * buy() takes this signature as input and rejects all deposits that do not have\n', '     * signature you receive after reading terms of service.\n', '     *\n', '     */\n', '    function() payable {\n', '        buy(0x33);\n', '    }\n', '\n', '    // only owner can kill\n', '    function kill() { \n', '        if (msg.sender == founder) suicide(founder); \n', '    }\n', '\n', '}']
['/**\n', ' * Overflow aware uint math functions.\n', ' *\n', ' * Inspired by https://github.com/MakerDAO/maker-otc/blob/master/contracts/simple_market.sol\n', ' */\n', 'pragma solidity ^0.4.11;\n', '\n', '/**\n', ' * ERC 20 token\n', ' *\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ZeePinToken  {\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    uint256 public totalSupply;\n', '\n', '\n', '    string public name = "ZeePin Token";\n', '    string public symbol = "ZPT";\n', '    uint public decimals = 18;\n', '\n', '    uint public startTime; //crowdsale start time (set in constructor)\n', '    uint public endTime; //crowdsale end time (set in constructor)\n', '    uint public startEarlyBird;  //crowdsale end time (set in constructor)\n', '    uint public endEarlyBird;  //crowdsale end time (set in constructor)\n', '    uint public startPeTime;  //pe start time (set in constructor)\n', '    uint public endPeTime; //pe end time (set in constructor)\n', '    uint public endFirstWeek;\n', '    uint public endSecondWeek;\n', '    uint public endThirdWeek;\n', '    uint public endFourthWeek;\n', '    uint public endFifthWeek;\n', '\n', '\n', '    // Initial founder address (set in constructor)\n', '    // All deposited ETH will be instantly forwarded to this address.\n', '    address public founder = 0x0;\n', '\n', '    // signer address (for clickwrap agreement)\n', '    // see function() {} for comments\n', '    address public signer = 0x0;\n', '\n', '    // price is defined by time\n', '    uint256 public pePrice = 6160;\n', '    uint256 public earlyBirdPrice = 5720;\n', '    uint256 public firstWeekTokenPrice = 4840;\n', '    uint256 public secondWeekTokenPrice = 4752;\n', '    uint256 public thirdWeekTokenPrice = 4620;\n', '    uint256 public fourthWeekTokenPrice = 4532;\n', '    uint256 public fifthWeekTokenPrice = 4400;\n', '\n', '    uint256 public etherCap = 90909 * 10**decimals; //max amount raised during crowdsale, which represents 5,100,000,000 ZPTs\n', '    uint256 public totalMintedToken = 1000000000;\n', '    uint256 public etherLowLimit = 16500 * 10**decimals;\n', '    uint256 public earlyBirdCap = 6119 * 10**decimals;\n', '    uint256 public earlyBirdMinPerPerson = 5 * 10**decimals;\n', '    uint256 public earlyBirdMaxPerPerson = 200 * 10**decimals;\n', '    uint256 public peCap = 2700 * 10**decimals;\n', '    uint256 public peMinPerPerson = 150 * 10**decimals;\n', '    uint256 public peMaxPerPerson = 450 * 10**decimals;\n', '    uint256 public regularMinPerPerson = 1 * 10**17;\n', '    uint256 public regularMaxPerPerson = 200 * 10**decimals;\n', '\n', '    uint public transferLockup = 15 days ; //transfers are locked for this time period after\n', '\n', '    uint public founderLockup = 2 weeks; //founder allocation cannot be created until this time period after endTime\n', '    \n', '\n', '    uint256 public founderAllocation = 100 * 10**16; //100% of token supply allocated post-crowdsale for the founder/operation allocation\n', '\n', '\n', '    bool public founderAllocated = false; //this will change to true when the founder fund is allocated\n', '\n', '    uint256 public saleTokenSupply = 0; //this will keep track of the token supply created during the crowdsale\n', '    uint256 public saleEtherRaised = 0; //this will keep track of the Ether raised during the crowdsale\n', '    bool public halted = false; //the founder address can set this to true to halt the crowdsale due to emergency\n', '\n', '    event Buy(uint256 eth, uint256 fbt);\n', '    event AllocateFounderTokens(address indexed sender);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event print(bytes32 msg);\n', '\n', '    //constructor\n', '    function ZeePinToken(address founderInput, address signerInput, uint startTimeInput, uint endTimeInput, uint startEarlyBirdInput, uint endEarlyBirdInput, uint startPeInput, uint endPeInput) {\n', '        founder = founderInput;\n', '        signer = signerInput;\n', '        startTime = startTimeInput;\n', '        endTime = endTimeInput;\n', '        startEarlyBird = startEarlyBirdInput;\n', '        endEarlyBird = endEarlyBirdInput;\n', '        startPeTime = startPeInput;\n', '        endPeTime = endPeInput;\n', '        \n', '        endFirstWeek = startTime + 1 weeks;\n', '        endSecondWeek = startTime + 2 weeks;\n', '        endThirdWeek = startTime + 3 weeks;\n', '        endFourthWeek = startTime + 4 weeks;\n', '        endFifthWeek = startTime + 5 weeks;\n', '    }\n', '\n', '    //price based on current token supply\n', '    function price() constant returns(uint256) {\n', '        if (now <= endEarlyBird && now >= startEarlyBird) return earlyBirdPrice;\n', '        if (now <= endFirstWeek) return firstWeekTokenPrice;\n', '        if (now <= endSecondWeek) return secondWeekTokenPrice;\n', '        if (now <= endThirdWeek) return thirdWeekTokenPrice;\n', '        if (now <= endFourthWeek) return fourthWeekTokenPrice;\n', '        if (now <= endFifthWeek) return fifthWeekTokenPrice;\n', '        return fifthWeekTokenPrice;\n', '    }\n', '\n', '    // price() exposed for unit tests\n', '    function testPrice(uint256 currentTime) constant returns(uint256) {\n', '        if (currentTime < endEarlyBird && currentTime >= startEarlyBird) return earlyBirdPrice;\n', '        if (currentTime < endFirstWeek && currentTime >= startTime) return firstWeekTokenPrice;\n', '        if (currentTime < endSecondWeek && currentTime >= endFirstWeek) return secondWeekTokenPrice;\n', '        if (currentTime < endThirdWeek && currentTime >= endSecondWeek) return thirdWeekTokenPrice;\n', '        if (currentTime < endFourthWeek && currentTime >= endThirdWeek) return fourthWeekTokenPrice;\n', '        if (currentTime < endFifthWeek && currentTime >= endFourthWeek) return fifthWeekTokenPrice;\n', '        return fifthWeekTokenPrice;\n', '    }\n', '\n', '\n', '    // Buy entry point\n', '    function buy( bytes32 hash) payable {\n', '        print(hash);\n', '        if (((now < startTime || now >= endTime) && (now < startEarlyBird || now >= endEarlyBird)) || halted) revert();\n', '        if (now>=startEarlyBird && now<endEarlyBird) {\n', '            if (msg.value < earlyBirdMinPerPerson || msg.value > earlyBirdMaxPerPerson || (saleEtherRaised + msg.value) > (peCap + earlyBirdCap)) {\n', '                revert();\n', '            }\n', '        }\n', '        if (now>=startTime && now<endTime) {\n', '            if (msg.value < regularMinPerPerson || msg.value > regularMaxPerPerson || (saleEtherRaised + msg.value) > etherCap ) {\n', '                revert();\n', '            }\n', '        }\n', '        uint256 tokens = (msg.value * price());\n', '        balances[msg.sender] = (balances[msg.sender] + tokens);\n', '        totalSupply = (totalSupply + tokens);\n', '        saleEtherRaised = (saleEtherRaised + msg.value);\n', '\n', '        if (!founder.call.value(msg.value)()) revert(); //immediately send Ether to founder address\n', '\n', '        Buy(msg.value, tokens);\n', '    }\n', '\n', '    /**\n', '     * Set up founder address token balance.\n', '     *\n', '     * Security review\n', '     *\n', '     * - Integer math: ok - only called once with fixed parameters\n', '     *\n', '     * Applicable tests:\n', '     *\n', '     *\n', '     */\n', '    function allocateFounderTokens() {\n', '        if (msg.sender!=founder) revert();\n', '        if (now <= endTime + founderLockup) revert();\n', '        if (founderAllocated) revert();\n', '        balances[founder] = (balances[founder] + totalSupply * founderAllocation / (1 ether));\n', '        totalSupply = (totalSupply + totalSupply * founderAllocation / (1 ether));\n', '        founderAllocated = true;\n', '        AllocateFounderTokens(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * Set up founder address token balance.\n', '     *\n', '     * Security review\n', '     *\n', '     * - Integer math: ok - only called once with fixed parameters\n', '     *\n', '     * Applicable tests:\n', '     *\n', '     *\n', '     */\n', '    function offlineSales(uint256 offlineNum, uint256 offlineEther) {\n', '        if (msg.sender!=founder) revert();\n', '        // if (now >= startEarlyBird && now <= endEarlyBird) revert(); //offline sales can be done only during early bird time \n', '        if (saleEtherRaised + offlineEther > etherCap) revert();\n', '        totalSupply = (totalSupply + offlineNum);\n', '        balances[founder] = (balances[founder] + offlineNum );\n', '        saleEtherRaised = (saleEtherRaised + offlineEther);\n', '    }\n', '\n', '    /**\n', '     * Emergency Stop ICO.\n', '     *\n', '     *  Applicable tests:\n', '     *\n', '     * - Test unhalting, buying, and succeeding\n', '     */\n', '    function halt() {\n', '        if (msg.sender!=founder) revert();\n', '        halted = true;\n', '    }\n', '\n', '    function unhalt() {\n', '        if (msg.sender!=founder) revert();\n', '        halted = false;\n', '    }\n', '\n', '    /**\n', '     * Change founder address (where ICO ETH is being forwarded).\n', '     *\n', '     * Applicable tests:\n', '     *\n', '     * - Test founder change by hacker\n', '     * - Test founder change\n', '     * - Test founder token allocation twice\n', '     */\n', '    function changeFounder(address newFounder) {\n', '        if (msg.sender!=founder) revert();\n', '        founder = newFounder;\n', '    }\n', '\n', '    /**\n', '     * ERC 20 Standard Token interface transfer function\n', '     *\n', '     * Prevent transfers until freeze period is over.\n', '     *\n', '     * Applicable tests:\n', '     *\n', '     * - Test restricted early transfer\n', '     * - Test transfer after restricted period\n', '     */\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        if (now <= endTime + transferLockup) revert();\n', '\n', "        //Default assumes totalSupply can't be over max (2^256 - 1).\n", "        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n", '        //Replace the if with this one instead.\n', '        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        //if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '\n', '    }\n', '    /**\n', '     * ERC 20 Standard Token interface transfer function\n', '     *\n', '     * Prevent transfers until freeze period is over.\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (msg.sender != founder) revert();\n', '\n', '        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    /**\n', '     * Do not allow direct deposits.\n', '     *\n', '     * All crowdsale depositors must have read the legal agreement.\n', '     * This is confirmed by having them signing the terms of service on the website.\n', '     * The give their crowdsale Ethereum source address on the website.\n', '     * Website signs this address using crowdsale private key (different from founders key).\n', '     * buy() takes this signature as input and rejects all deposits that do not have\n', '     * signature you receive after reading terms of service.\n', '     *\n', '     */\n', '    function() payable {\n', '        buy(0x33);\n', '    }\n', '\n', '    // only owner can kill\n', '    function kill() { \n', '        if (msg.sender == founder) suicide(founder); \n', '    }\n', '\n', '}']
