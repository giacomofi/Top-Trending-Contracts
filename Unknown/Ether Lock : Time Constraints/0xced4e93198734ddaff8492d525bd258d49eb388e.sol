['pragma solidity ^0.4.13;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract MintableInterface {\n', '  function mint(address _to, uint256 _amount) returns (bool);\n', '  function mintLocked(address _to, uint256 _amount) returns (bool);\n', '}\n', '\n', '/**\n', ' * This is the Crowdsale contract from OpenZeppelin version 1.2.0\n', ' * The only changes are:\n', ' *   - the type of token field is changed from MintableToken to MintableInterface\n', ' *   - the createTokenContract() method is removed, the token field must be initialized in the derived contracts constuctor\n', ' **/\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Crowdsale \n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end block, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet \n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  MintableInterface public token;\n', '\n', '  // start and end block where investments are allowed (both inclusive)\n', '  uint256 public startBlock;\n', '  uint256 public endBlock;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */ \n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  function Crowdsale(uint256 _startBlock, uint256 _endBlock, uint256 _rate, address _wallet) {\n', '    require(_startBlock >= block.number);\n', '    require(_endBlock >= _startBlock);\n', '    require(_rate > 0);\n', '    require(_wallet != 0x0);\n', '\n', '    startBlock = _startBlock;\n', '    endBlock = _endBlock;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '  }\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) payable {\n', '    require(beneficiary != 0x0);\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal constant returns (bool) {\n', '    uint256 current = block.number;\n', '    bool withinPeriod = current >= startBlock && current <= endBlock;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    return block.number > endBlock;\n', '  }\n', '\n', '\n', '}\n', '\n', '/**\n', ' * @title CappedCrowdsale\n', ' * @dev Extension of Crowsdale with a max amount of funds raised\n', ' */\n', 'contract TokenCappedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // tokenCap should be initialized in derived contract\n', '  uint256 public tokenCap;\n', '\n', '  uint256 public soldTokens;\n', '\n', '  // overriding Crowdsale#hasEnded to add tokenCap logic\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    bool capReached = soldTokens >= tokenCap;\n', '    return super.hasEnded() || capReached;\n', '  }\n', '\n', '  // overriding Crowdsale#buyTokens to add extra tokenCap logic\n', '  function buyTokens(address beneficiary) payable {\n', '    // calculate token amount to be created\n', '    uint256 tokens = msg.value.mul(rate);\n', '    uint256 newTotalSold = soldTokens.add(tokens);\n', '    require(newTotalSold <= tokenCap);\n', '    soldTokens = newTotalSold;\n', '    super.buyTokens(beneficiary);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * This is the TokenTimelock contract from OpenZeppelin version 1.2.0\n', ' * The only changes are:\n', ' *   - all contract fields are declared as public\n', ' *   - removed deprecated claim() method\n', ' **/\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title TokenTimelock\n', ' * @dev TokenTimelock is a token holder contract that will allow a \n', ' * beneficiary to extract the tokens after a given release time\n', ' */\n', 'contract TokenTimelock {\n', '  \n', '  // ERC20 basic token contract being held\n', '  ERC20Basic public token;\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '\n', '  // timestamp when token release is enabled\n', '  uint public releaseTime;\n', '\n', '  function TokenTimelock(ERC20Basic _token, address _beneficiary, uint _releaseTime) {\n', '    require(_releaseTime > now);\n', '    token = _token;\n', '    beneficiary = _beneficiary;\n', '    releaseTime = _releaseTime;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers tokens held by timelock to beneficiary.\n', '   */\n', '  function release() {\n', '    require(now >= releaseTime);\n', '\n', '    uint amount = token.balanceOf(this);\n', '    require(amount > 0);\n', '\n', '    token.transfer(beneficiary, amount);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', 'contract EidooToken is MintableInterface, Ownable, StandardToken {\n', '  using SafeMath for uint256;\n', '\n', '  string public name = "Eidoo Token";\n', '  string public symbol = "EDO";\n', '  uint256 public decimals = 18;\n', '\n', '  uint256 public transferableFromBlock;\n', '  uint256 public lockEndBlock;\n', '  mapping (address => uint256) public initiallyLockedAmount;\n', '\n', '  function EidooToken(uint256 _transferableFromBlock, uint256 _lockEndBlock) {\n', '    require(_lockEndBlock > _transferableFromBlock);\n', '    transferableFromBlock = _transferableFromBlock;\n', '    lockEndBlock = _lockEndBlock;\n', '  }\n', '\n', '  modifier canTransfer(address _from, uint _value) {\n', '    if (block.number < lockEndBlock) {\n', '      require(block.number >= transferableFromBlock);\n', '      uint256 locked = lockedBalanceOf(_from);\n', '      if (locked > 0) {\n', '        uint256 newBalance = balanceOf(_from).sub(_value);\n', '        require(newBalance >= locked);\n', '      }\n', '    }\n', '   _;\n', '  }\n', '\n', '  function lockedBalanceOf(address _to) constant returns(uint256) {\n', '    uint256 locked = initiallyLockedAmount[_to];\n', '    if (block.number >= lockEndBlock ) return 0;\n', '    else if (block.number <= transferableFromBlock) return locked;\n', '\n', '    uint256 releaseForBlock = locked.div(lockEndBlock.sub(transferableFromBlock));\n', '    uint256 released = block.number.sub(transferableFromBlock).mul(releaseForBlock);\n', '    return locked.sub(released);\n', '  }\n', '\n', '  function transfer(address _to, uint _value) canTransfer(msg.sender, _value) returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _value) canTransfer(_from, _value) returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  // --------------- Minting methods\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished());\n', '    _;\n', '  }\n', '\n', '  function mintingFinished() constant returns(bool) {\n', '    return block.number >= transferableFromBlock;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens, implements MintableInterface\n', '   * @param _to The address that will recieve the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  function mintLocked(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n', '    initiallyLockedAmount[_to] = initiallyLockedAmount[_to].add(_amount);\n', '    return mint(_to, _amount);\n', '  }\n', '\n', '  function burn(uint256 _amount) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '    totalSupply = totalSupply.sub(_amount);\n', '    Transfer(msg.sender, address(0), _amount);\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract EidooTokenSale is Ownable, TokenCappedCrowdsale {\n', '  using SafeMath for uint256;\n', '  uint256 public MAXIMUM_SUPPLY = 100000000 * 10**18;\n', '  uint256 [] public LOCKED = [     20000000 * 10**18,\n', '                                   15000000 * 10**18,\n', '                                    6000000 * 10**18,\n', '                                    6000000 * 10**18 ];\n', '  uint256 public POST_ICO =        21000000 * 10**18;\n', '  uint256 [] public LOCK_END = [\n', '    1570190400, // 4 October 2019 12:00:00 GMT\n', '    1538654400, // 4 October 2018 12:00:00 GMT\n', '    1522843200, // 4 April 2018 12:00:00 GMT\n', '    1515067200  // 4 January 2018 12:00:00 GMT\n', '  ];\n', '\n', '  mapping (address => bool) public claimed;\n', '  TokenTimelock [4] public timeLocks;\n', '\n', '  event ClaimTokens(address indexed to, uint amount);\n', '\n', '  modifier beforeStart() {\n', '    require(block.number < startBlock);\n', '    _;\n', '  }\n', '\n', '  function EidooTokenSale(\n', '    uint256 _startBlock,\n', '    uint256 _endBlock,\n', '    uint256 _rate,\n', '    uint _tokenStartBlock,\n', '    uint _tokenLockEndBlock,\n', '    address _wallet\n', '  )\n', '    Crowdsale(_startBlock, _endBlock, _rate, _wallet)\n', '  {\n', '    token = new EidooToken(_tokenStartBlock, _tokenLockEndBlock);\n', '\n', '    // create timelocks for tokens\n', '    timeLocks[0] = new TokenTimelock(EidooToken(token), _wallet, LOCK_END[0]);\n', '    timeLocks[1] = new TokenTimelock(EidooToken(token), _wallet, LOCK_END[1]);\n', '    timeLocks[2] = new TokenTimelock(EidooToken(token), _wallet, LOCK_END[2]);\n', '    timeLocks[3] = new TokenTimelock(EidooToken(token), _wallet, LOCK_END[3]);\n', '    token.mint(address(timeLocks[0]), LOCKED[0]);\n', '    token.mint(address(timeLocks[1]), LOCKED[1]);\n', '    token.mint(address(timeLocks[2]), LOCKED[2]);\n', '    token.mint(address(timeLocks[3]), LOCKED[3]);\n', '\n', '    token.mint(_wallet, POST_ICO);\n', '\n', '    // initialize maximum number of tokens that can be sold\n', '    tokenCap = MAXIMUM_SUPPLY.sub(EidooToken(token).totalSupply());\n', '  }\n', '\n', '  function claimTokens(address [] buyers, uint [] amounts) onlyOwner beforeStart public {\n', '    require(buyers.length == amounts.length);\n', '    uint len = buyers.length;\n', '    for (uint i = 0; i < len; i++) {\n', '      address to = buyers[i];\n', '      uint256 amount = amounts[i];\n', '      if (amount > 0 && !claimed[to]) {\n', '        claimed[to] = true;\n', '        if (to == 0x32Be343B94f860124dC4fEe278FDCBD38C102D88) {\n', '          // replace Poloniex Wallet address\n', '          to = 0x2274bebe2b47Ec99D50BB9b12005c921F28B83bB;\n', '        }\n', '        tokenCap = tokenCap.sub(amount);\n', '        uint256 unlockedAmount = amount.div(10).mul(3);\n', '        token.mint(to, unlockedAmount);\n', '        token.mintLocked(to, amount.sub(unlockedAmount));\n', '        ClaimTokens(to, amount);\n', '      }\n', '    }\n', '  }\n', '\n', '}']