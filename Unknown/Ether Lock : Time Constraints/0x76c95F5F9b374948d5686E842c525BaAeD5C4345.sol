['pragma solidity ^0.4.15;\n', '\n', 'contract EthPixel {\n', '    struct Pixel {\n', '        bytes32 color;\n', '        uint256 amount;\n', '        address holder;\n', '    }\n', '\n', '    Pixel [1000000] public pixels;\n', '\n', '    event PixelBought(uint256 coordinates, bytes32 color, uint256 amount, address holder, address boughtFrom);\n', '\n', '    function buyPixel(uint256 _coordinates, bytes32 _color) payable returns (bool) {\n', '        require(msg.value > 0);\n', '        require(_color.length > 0);\n', '\n', '        Pixel memory pixel = pixels[_coordinates];\n', '\n', '        require(msg.value > pixel.amount);\n', '        require(msg.sender != pixel.holder);\n', '\n', '        if (pixel.amount > 0) {\n', '            pixel.holder.transfer(pixel.amount);\n', '        }\n', '\n', '        pixels[_coordinates] = Pixel({\n', '            color: _color,\n', '            amount: msg.value,\n', '            holder: msg.sender\n', '        });\n', '\n', '        PixelBought(_coordinates, _color, msg.value, msg.sender, pixel.holder);\n', '\n', '        return true;\n', '    }\n', '}']