['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-25\n', '*/\n', '\n', '// SPDX-License-Identifier: GPL-3.0\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '//Safe Math Interface\n', ' \n', 'contract SafeMath {\n', ' \n', '    function safeAdd(uint256 a, uint256 b) public pure returns (uint256 c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', ' \n', '    function safeSub(uint256 a, uint256 b) public pure returns (uint256 c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', ' \n', '    function safeMul(uint256 a, uint256 b) public pure returns (uint256 c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', ' \n', '    function safeDiv(uint256 a, uint256 b) public pure returns (uint256 c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', ' \n', ' \n', '//ERC Token Standard #20 Interface\n', ' \n', 'interface ERC20Interface {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '     /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '     /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', ' \n', '    event Transfer(address indexed from, address indexed to, uint256 tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\n', '}\n', ' \n', ' \n', '\n', ' \n', '//Actual token contract\n', ' \n', 'contract NiftyToken is ERC20Interface, SafeMath {\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint256 public _totalSupply;\n', ' \n', '    mapping (address => uint256) private _balances;\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '    \n', ' \n', '    constructor() public {\n', '        symbol = "NIFTY";\n', '        name = "NIFTY";\n', '        decimals = 2;\n', '        _totalSupply = 2300000000;\n', '        _balances[0xD132BB4DE5B6b5527bd0E662395AE4FDF604e748] = _totalSupply;\n', '        emit Transfer(address(0), 0xD132BB4DE5B6b5527bd0E662395AE4FDF604e748, _totalSupply);\n', '    }\n', ' \n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', ' \n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', ' \n', '    function transfer(address to, uint256 tokens) public override returns (bool success) {\n', '        _balances[msg.sender] = safeSub(_balances[msg.sender], tokens);\n', '        _balances[to] = safeAdd(_balances[to], tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', ' \n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _allowances[msg.sender][spender] = amount;\n', '        emit Approval(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', ' \n', '    function transferFrom(address from, address to, uint256 tokens) public override returns (bool success) {\n', '        _balances[from] = safeSub(_balances[from], tokens);\n', '        _allowances[from][msg.sender] = safeSub(_allowances[from][msg.sender], tokens);\n', '        _balances[to] = safeAdd(_balances[to], tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', ' \n', '    function allowance(address tokenOwner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[tokenOwner][spender];\n', '    }\n', ' \n', '}']