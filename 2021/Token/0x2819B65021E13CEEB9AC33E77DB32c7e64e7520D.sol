['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-04\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.4;\n', '\n', 'contract Ownable {\n', '    event OwnerChanged(address newOwner);\n', '\n', '    address public owner;\n', '\n', '    /**\n', '     * @dev Initializes contact owner\n', '     *\n', '     * Emits an {OwnerChanged} event.\n', '     *\n', '     * @param _owner contract owner\n', '     */\n', '    function initializeOwnable(address _owner) public {\n', '        owner = _owner;\n', '        emit OwnerChanged(_owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Updates contract owner\n', '     *\n', '     * Emits an {OwnerChanged} event.\n', '     */\n', '    function setOwner(address new_owner) public onlyOwner{\n', '        owner = new_owner;\n', '        emit OwnerChanged(new_owner);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Permits actions only from owner\n', '     */\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner, "Only the contract owner may perform this action");\n', '        _;\n', '    }\n', '}\n', '\n', '\n', 'interface IERC20 {\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '}\n', '\n', '\n', 'contract Claimer is Ownable {\n', '    /**\n', '    * @dev Emitted when ETH has claimed.\n', '    */\n', '    event Claimed(address recipient, uint256 amount);\n', '\n', '\n', '    /**\n', '    * @dev Emitted when ERC20 has claimed.\n', '    */\n', '    event ClaimedERC20(address recipient, address token, uint256 amount);\n', '\n', '\n', '    /**\n', '     * @dev Initializes contact with owner address\n', '     *\n', '     * Emits an {OwnerChanged} event.\n', '     *\n', '     * @param _owner contract owner\n', '     */\n', '    function initialize(address _owner) public {\n', '        require(owner == address(0));\n', '        initializeOwnable(_owner);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Transfer all contract ETH to recipient. Only owner can use it\n', '     *\n', '     * Emits an {Claimed} event.\n', '     *\n', '     * @param recipient Account for transfer ETH\n', '     */\n', '    function claim(address payable recipient)  public onlyOwner {\n', '        uint256 amount = address(this).balance;\n', '        (bool sent, ) = recipient.call{value: amount}("");\n', '        require(sent, "Failed to send Ether");\n', '        emit Claimed(recipient, amount);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Transfer all contract amount of specified tokent to recipient. Only owner can use it\n', '     *\n', '     * Emits an {ClaimedERC20} event.\n', '     *\n', '     * @param recipient Account for transfer ERC20 token\n', '     * @param token Address of ERC20 token\n', '     */\n', '    function claimERC20(address payable recipient, address token) public onlyOwner {\n', '        uint256 amount = IERC20(token).balanceOf(address(this));\n', '        IERC20(token).transfer(recipient, amount);\n', '        emit ClaimedERC20(recipient, token, amount);\n', '    }\n', '\n', '}']