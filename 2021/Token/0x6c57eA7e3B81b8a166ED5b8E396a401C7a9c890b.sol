['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-18\n', '*/\n', '\n', '// File: contracts/utils/Ownable.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', 'contract Ownable {\n', '    address private _contract_owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = msg.sender;\n', '        _contract_owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _contract_owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_contract_owner == msg.sender, "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_contract_owner, newOwner);\n', '        _contract_owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/utils/SafeMath.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', 'library SafeMath {\n', '    function safeAdd(uint a, uint b) public pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a, "add");\n', '    }\n', '    function safeSubR(uint a, uint b, string memory s) public pure returns (uint c) {\n', '        require(b <= a, s);\n', '        c = a - b;\n', '    }\n', '    function safeSub(uint a, uint b) public pure returns (uint c) {\n', '        require(b <= a, "sub");\n', '        c = a - b;\n', '    }\n', '    function safeMul(uint a, uint b) public pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b, "mul");\n', '    }\n', '    function safeDiv(uint a, uint b) public pure returns (uint c) {\n', '        require(b > 0, "div");\n', '        c = a / b;\n', '    }\n', '    function safeDivR(uint a, uint b, string memory s) public pure returns (uint c) {\n', '        require(b > 0, s);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '// File: contracts/utils/Address.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', 'library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != 0x0 && codehash != accountHash);\n', '    }\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '// File: contracts/erc20/IERC20.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/erc20/SafeERC20.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', '\n', '\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).safeAdd(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).safeSub(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/core/IPool.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', 'contract ICurvePool{\n', '  function deposit(uint256 _amount) public;\n', '  function withdraw(uint256 _amount) public;\n', '\n', '  function get_virtual_price() public view returns(uint256);\n', '\n', '  function get_lp_token_balance() public view returns(uint256);\n', '\n', '  function get_lp_token_addr() public view returns(address);\n', '\n', '  function earn_crv() public;\n', '\n', '  string public name;\n', '}\n', '\n', 'contract ICurvePoolForETH{\n', '  function deposit() public payable;\n', '  function withdraw(uint256 _amount) public;\n', '\n', '  function get_virtual_price() public view returns(uint256);\n', '\n', '  function get_lp_token_balance() public view returns(uint256);\n', '\n', '  function get_lp_token_addr() public view returns(address);\n', '\n', '  function earn_crv() public;\n', '\n', '  string public name;\n', '}\n', '\n', '// File: contracts/utils/AddressArray.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', 'library AddressArray{\n', '  function exists(address[] memory self, address addr) public pure returns(bool){\n', '    for (uint i = 0; i< self.length;i++){\n', '      if (self[i]==addr){\n', '        return true;\n', '      }\n', '    }\n', '    return false;\n', '  }\n', '\n', '  function index_of(address[] memory self, address addr) public pure returns(uint){\n', '    for (uint i = 0; i< self.length;i++){\n', '      if (self[i]==addr){\n', '        return i;\n', '      }\n', '    }\n', '    require(false, "AddressArray:index_of, not exist");\n', '  }\n', '\n', '  function remove(address[] storage self, address addr) public returns(bool){\n', '    uint index = index_of(self, addr);\n', '    self[index] = self[self.length - 1];\n', '\n', '    delete self[self.length-1];\n', '    self.length--;\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: contracts/core/CFController.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract CRVHandlerInterface{\n', '  function handleCRV(address target_token, uint256 amount, uint min_amount) public;\n', '  function handleExtraToken(address from, address target_token, uint256 amount, uint min_amount) public;\n', '}\n', '\n', 'contract CFController is Ownable{\n', '  using SafeERC20 for IERC20;\n', '  using AddressArray for address[];\n', '  using SafeMath for uint256;\n', '\n', '  address[] public all_pools;\n', '\n', '  address public current_pool;\n', '\n', '  uint256 public last_earn_block;\n', '  uint256 public earn_gap;\n', '  address public crv_token;\n', '  address public target_token;\n', '\n', '  address public fee_pool;\n', '  uint256 public harvest_fee_ratio;\n', '  uint256 public ratio_base;\n', '\n', '  address public extra_yield_token;\n', '  CRVHandlerInterface public crv_handler;\n', '\n', '  constructor(address _crv, address _target, uint256 _earn_gap) public{\n', '    last_earn_block = 0;\n', '    if(_earn_gap == 0){\n', '      earn_gap = 5760;\n', '    }else{\n', '      earn_gap = _earn_gap;\n', '    }\n', '\n', '    last_earn_block = block.number;\n', '    if(_crv == address(0x0)){\n', '      crv_token = address(0xD533a949740bb3306d119CC777fa900bA034cd52);\n', '    }else{\n', '      crv_token = _crv;\n', '    }\n', '    if(_target == address(0x0)){\n', '      target_token = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48); //USDC\n', '    }else{\n', '      target_token = _target;\n', '    }\n', '\n', '    ratio_base = 10000;\n', '  }\n', '\n', '  function get_current_pool() public view returns(ICurvePool) {\n', '    return ICurvePool(current_pool);\n', '  }\n', '\n', '  function add_pool(address addr) public onlyOwner{\n', '    require(!all_pools.exists(addr), "already exist");\n', '    if(current_pool == address(0x0)){\n', '      current_pool = addr;\n', '    }\n', '    all_pools.push(addr);\n', '  }\n', '\n', '  function remove_pool(address addr) public onlyOwner{\n', '    require(all_pools.exists(addr), "not exist");\n', '    require(current_pool != addr, "active, cannot remove");\n', '    all_pools.remove(addr);\n', '  }\n', '\n', '  event ChangeCurrentPool(address old, address _new);\n', '  function change_current_pool(address addr) public onlyOwner{\n', '    require(all_pools.exists(addr), "not exist");\n', '    require(current_pool != addr, "already active");\n', '\n', '    emit ChangeCurrentPool(current_pool, addr);\n', '    //pull out all target token\n', '    uint256 cur = ICurvePool(current_pool).get_lp_token_balance();\n', '    ICurvePool(current_pool).withdraw(cur);\n', '    uint256 b = IERC20(target_token).balanceOf(address(this));\n', '    current_pool = addr;\n', '\n', '    //deposit to new pool\n', '    IERC20(target_token).safeApprove(current_pool, b);\n', '    ICurvePool(current_pool).deposit(b);\n', '  }\n', '\n', '\n', '  event EarnCRV(address addr, uint256 amount);\n', '  event EarnExtra(address addr, address token, uint256 amount);\n', '  //at least 24 hours to call this\n', '  function earnCRV(uint crv_min_amount, uint extra_min_amount) public onlyOwner{\n', '    require(block.number.safeSub(last_earn_block) >= earn_gap, "not long enough");\n', '    last_earn_block = block.number;\n', '\n', '    ICurvePool(current_pool).earn_crv();\n', '\n', '    uint256 amount = IERC20(crv_token).balanceOf(address(this));\n', '    emit EarnCRV(address(this), amount);\n', '\n', '    if(amount > 0){\n', '      require(crv_handler != CRVHandlerInterface(0x0), "invalid crv handler");\n', '      IERC20(crv_token).approve(address(crv_handler), amount);\n', '      crv_handler.handleCRV(target_token, amount, crv_min_amount);\n', '    }\n', '\n', '    if(extra_yield_token != address(0x0)){\n', '      amount = IERC20(extra_yield_token).balanceOf(address(this));\n', '      emit EarnExtra(address(this), extra_yield_token, amount);\n', '      if(amount > 0){\n', '        IERC20(extra_yield_token).approve(address(crv_handler), amount);\n', '        crv_handler.handleExtraToken(extra_yield_token, target_token, amount, extra_min_amount);\n', '      }\n', '    }\n', '  }\n', '\n', '  event CFFRefund(uint256 amount, uint256 fee);\n', '  function refundTarget(uint256 _amount) public{\n', '    IERC20(target_token).safeTransferFrom(msg.sender, address(this), _amount);\n', '\n', '    if(harvest_fee_ratio != 0 && fee_pool != address(0x0)){\n', '      uint256 f = _amount.safeMul(harvest_fee_ratio).safeDiv(ratio_base);\n', '      emit CFFRefund(_amount, f);\n', '      _amount = _amount.safeSub(f);\n', '      if(f != 0){\n', '        IERC20(target_token).safeTransfer(fee_pool, f);\n', '      }\n', '    }else{\n', '      emit CFFRefund(_amount, 0);\n', '    }\n', '\n', '    IERC20(target_token).safeApprove(current_pool, _amount);\n', '    ICurvePool(current_pool).deposit(_amount);\n', '  }\n', '\n', '  function pauseAndTransferTo(address _target) public onlyOwner{\n', '    //pull out all target token\n', '    uint256 cur = ICurvePool(current_pool).get_lp_token_balance();\n', '    ICurvePool(current_pool).withdraw(cur);\n', '    uint256 b = IERC20(target_token).balanceOf(address(this));\n', '\n', '    IERC20(target_token).safeTransfer(_target, b);\n', '\n', '    current_pool = address(0x0);\n', '  }\n', '\n', '  event ChangeExtraToken(address old, address _new);\n', '  function changeExtraToken(address _new) public onlyOwner{\n', '    address old = extra_yield_token;\n', '    extra_yield_token = _new;\n', '    emit ChangeExtraToken(old, extra_yield_token);\n', '  }\n', '\n', '  event ChangeCRVHandler(address old, address _new);\n', '  function changeCRVHandler(address _new) public onlyOwner{\n', '    address old = address(crv_handler);\n', '    crv_handler = CRVHandlerInterface(_new);\n', '    emit ChangeCRVHandler(old, address(crv_handler));\n', '  }\n', '\n', '  event ChangeFeePool(address old, address _new);\n', '  function changeFeePool(address _fp) public onlyOwner{\n', '    address old = fee_pool;\n', '    fee_pool = _fp;\n', '    emit ChangeFeePool(old, fee_pool);\n', '  }\n', '\n', '  event ChangeHarvestFee(uint256 old, uint256 _new);\n', '  function changeHarvestFee(uint256 _fee) public onlyOwner{\n', '    require(_fee < ratio_base, "invalid fee");\n', '    uint256 old = harvest_fee_ratio;\n', '    harvest_fee_ratio = _fee;\n', '    emit ChangeHarvestFee(old, harvest_fee_ratio);\n', '  }\n', '}\n', '\n', 'contract CFControllerFactory{\n', '  event NewCFController(address addr);\n', '  function createCFController(address _crv, address _target, uint256 _earn_gap) public returns(address){\n', '    CFController cf = new CFController(_crv, _target, _earn_gap);\n', '    emit NewCFController(address(cf));\n', '    cf.transferOwnership(msg.sender);\n', '    return address(cf);\n', '  }\n', '}']