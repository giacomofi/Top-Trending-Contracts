['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-13\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '\n', '/**\n', '    - Official contract of Alpha Wolf\n', '\n', '    ░█████╗░██╗░░░░░██████╗░██╗░░██╗░█████╗░\u2003\u2003░██╗░░░░░░░██╗░█████╗░██╗░░░░░███████╗\n', '    ██╔══██╗██║░░░░░██╔══██╗██║░░██║██╔══██╗\u2003\u2003░██║░░██╗░░██║██╔══██╗██║░░░░░██╔════╝\n', '    ███████║██║░░░░░██████╔╝███████║███████║\u2003\u2003░╚██╗████╗██╔╝██║░░██║██║░░░░░█████╗░░\n', '    ██╔══██║██║░░░░░██╔═══╝░██╔══██║██╔══██║\u2003\u2003░░████╔═████║░██║░░██║██║░░░░░██╔══╝░░\n', '    ██║░░██║███████╗██║░░░░░██║░░██║██║░░██║\u2003\u2003░░╚██╔╝░╚██╔╝░╚█████╔╝███████╗██║░░░░░\n', '    ╚═╝░░╚═╝╚══════╝╚═╝░░░░░╚═╝░░╚═╝╚═╝░░╚═╝\u2003\u2003░░░╚═╝░░░╚═╝░░░╚════╝░╚══════╝╚═╝░░░░░\n', '*/\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'interface IERC20Metadata is IERC20 {\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '}\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; \n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '        * @dev Initializes the contract setting the deployer as the initial owner.\n', '    */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '   \n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '   \n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract AWF is Ownable, IERC20, IERC20Metadata {\n', '    mapping (address => BalanceOwner) private _balances;\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '    string private _name;\n', '    string private _symbol;\n', '    address[] private _balanceOwners;\n', '    address feeWallet = 0x42097d82E40d5C6964eb84179888674aC9160428;\n', '    uint256 private constant basePercent = 100;\n', '    struct BalanceOwner {\n', '        uint256 amount;\n', '        bool exists;\n', '    }\n', '\n', '    constructor () {\n', '        _name = "Alpha Wolf";\n', '        _symbol = "AWF";\n', '\n', '        uint256 initSupply = 1000000000000000*10**18;\n', '        _mint(msg.sender, initSupply);\n', '    }\n', '\n', '    function name() public view virtual override returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view virtual override returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view virtual override returns (uint8) {\n', '        return 18;\n', '    }\n', '\n', '    function totalSupply() public view virtual override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '    \n', '    function balanceOf(address account) public view virtual override returns (uint256) {\n', '        return _balances[account].amount;\n', '    }\n', '\n', '    function findOnePercent(uint256 value) public pure  returns (uint256)  {\n', '        uint256 onePercent = value * basePercent / 10000;\n', '        return onePercent;\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '   \n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '\n', '        uint256 currentAllowance = _allowances[sender][_msgSender()];\n', '        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");\n', '        _approve(sender, _msgSender(), currentAllowance - amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n', '        return true;\n', '    }\n', '   \n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        uint256 currentAllowance = _allowances[_msgSender()][spender];\n', '        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");\n', '        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n', '\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual returns (bool) {\n', '        require(_balances[sender].amount >= amount, "ERC20: transfer amount exceeds balance");\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        uint256 onePercent = findOnePercent(amount);\n', '        uint256 tokensToBurn = onePercent *1;\n', '        uint256 tokensToRedistribute = onePercent * 1;\n', '        uint256 toFeeWallet = onePercent*1;\n', '        uint256 tokensToTransfer = amount - tokensToBurn - tokensToRedistribute - toFeeWallet;\n', '\n', '        _balances[sender].amount -= amount;\n', '        _balances[recipient].amount += tokensToTransfer;\n', '        _balances[feeWallet].amount += toFeeWallet;\n', '        if (!_balances[recipient].exists){\n', '            _balanceOwners.push(recipient);\n', '            _balances[recipient].exists = true;\n', '        }\n', '\n', '        redistribute(sender, tokensToRedistribute);\n', '        _burn(sender, tokensToBurn);\n', '        emit Transfer(sender, recipient, tokensToTransfer);\n', '        return true;\n', '    }\n', '\n', '    function redistribute(address sender, uint256 amount) internal {\n', '      uint256 remaining = amount;\n', '      for (uint256 i = 0; i < _balanceOwners.length; i++) {\n', '        if (_balances[_balanceOwners[i]].amount == 0 || _balanceOwners[i] == sender) continue;\n', '        \n', '        uint256 ownedAmount = _balances[_balanceOwners[i]].amount;\n', '        uint256 ownedPercentage = _totalSupply / ownedAmount;\n', '        uint256 toReceive = amount / ownedPercentage;\n', '        if (toReceive == 0) continue;\n', '        if (remaining < toReceive) break;        \n', '        remaining -= toReceive;\n', '        _balances[_balanceOwners[i]].amount += toReceive;\n', '      }\n', '    }\n', '\n', '     function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {\n', '        for (uint256 i = 0; i < receivers.length; i++) {\n', '            _transfer(msg.sender, receivers[i], amounts[i]);\n', '        }\n', '    }\n', '\n', '    function _mint(address account, uint256 amount) internal virtual onlyOwner  {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply += amount;\n', '        _balances[account].amount += amount;\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '    \n', '    function burn(uint256 amount) public onlyOwner {\n', '        _burn(_msgSender(), amount);\n', '    }\n', '    \n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        uint256 accountBalance = _balances[account].amount;\n', '        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");\n', '        _balances[account].amount = accountBalance - amount;\n', '        _totalSupply -= amount;\n', '\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}']