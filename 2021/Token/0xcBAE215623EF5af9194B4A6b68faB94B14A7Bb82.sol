['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-16\n', '*/\n', '\n', '/*                                                                                                                \n', '                                                                                                                                                     \n', '                                    .... .                                                                                                      u     \n', '                                   :i:::.EBi                            .r:::.JB.                   ii:::.Rg    :i:i:.QE                     .:.BB:   \n', '                                   .. .  QBQ:                           :::.. bBB:                  i.:...BBB   i::...BBB                  .i:. DBB   \n', '                                  .J::..iBBB                            i:....BBB                  .::.. 7BBQ  .::.. vBBg                :::.:. dBg   \n', '                                   KBBBBBBB2                           .:.:. rBBZ                  ::.:. PBBi  ::... EBB.              .:::.:.. ZBg   \n', '       ..... .         ..... .      rdUSUis        ..:::.:..           i::.. EBB:       ...:::.    i.:...BBB   i.:...BBB   .. .      .BBv..:... PBD   \n', '      .ri:i:.gg       .ri::..BBi  r:.  .B.      ::i::::.:::ii:.       .i:.. .BBB     .iii:::::::: .::.. LBBS  :::.. sQB2.:i:i.jB.      bi.:..   dBD   \n', '       i:::: sQB      i::. .gBBB..::.. XBB7   :i::..     ..:::i7      ::.:. vBBS   .ii::..     .::::.:. ZBB.  ::.:. gBQ. :::...BQ.     ..:.. Sb PBg   \n', '       ::.:..iBB     i:..  ZBQB. ::.:..BBQ  .ii:.. rqgQQZ:..:..:B:    i::.. MBB.  :i:... :YXbP5:..:::..:BQB   i::..:BBB  ::.:..QB:    :::.. sBBBbBB   \n', '       :::::.:BB    :i... bBQB: .i::. rBBD  i:::.:QBBBBBQB:..:. PB.  .i::: :BBQ  i::.. .PBBBBBBBr..:.. uBBJ  :::.. IBBY  i::.. gB7   :i:.. LBBBS :Q   \n', '       .i.:...BB.  :i.:. PBBB:  :::.. dBB: ::::.iBBBB7    .:::. JBB  :i::. uBBY .::::..BBBBP:   .::.:..MBB   i:.:..QBB   i:.:. qB1  .i:.. vBBBK       \n', '        i:::. MBi .i:.. XBBBi   i:.:..QBB .:::..:i.:.  ........ 2BB  i::...QBB  i:::..ZBBB.      i.:..:BBQ  .i::..iBBQ   :::.. 1BZ  i:.. 7BBBb        \n', '        i:::: ZBs r::. 5BBBr   :i:::.vBBI i::::.      .......   RQB  i:::.rBBM .r:::.rBBB       .i::: XBBr  i:::: qQBr   .r:::.vBQ :i:: rBBQZ         \n', '        :r:::.XBb.::. 5BBB7    r:::..gBB  i:::.72uuUUIUIUI1I12sIBBQ :i::..XBBr ii:::.SBBY       ii::..QBQ   ri::.:QBB    .r:::.rQB:::: rBBBM          \n', '        .r:::.SB:.:. uBQBL    .r:::.iBBQ .i:::.EBBBBBBBBBBBQBBBBBBJ i:::..BBB  ii:::.IBB       :i:::.rBBD  .r:::.7BBZ     r:::.iB7..: iBBBR           \n', '         r:::.v7.:. jBBBJ     :i::. 1BBu :i:::.vBB      .:... i    .i:::.7QBd  r::::.iQB      :r:::. PBB:  i:::. EBBi     ::::.iu... iQBBQ            \n', '         i:::.:... LBBB2      r:::..QBB  .r::.:.LE     ....  :BBi  ::::. PBB:  :i:::..rD    .:i::::..BBB   r:::.:BBB      :i:::.... :BBBB             \n', '         :i:::::. vBBB5      .i:.: rBBQ   :r::....:::i::.. .IBBBB  i.:...BBB    ri::.:..:i::.:::.:. 7BBK  .i.:..LBBK      .r::::.: :BBBB              \n', '         .r::::. 7BBBK       :...  5BBv    .7:......... .:5BBBBb  :.... vBBS     ir........ rg: ..  EBB.  i..   gBB.       i:::::.:BBBB               \n', '          i:::..7BQBb        qQq5I1BBB      .EQIri:i:rsqQBBBBB:   YBqS21MBB.      rg2riiivIQBBqb5SU5BBB   EQSS1SBBB        :::::.:QBQB                \n', '         .r::..rBQBE          bBBBBBBR        vBBQBBBQBBBQB1.      sBBBBBBB        .QBBBBBBBBBSPBBBBBBI    QBBBBBBI        i:::..QBBB                 \n', '        .r::. rBQBg                               .rrri:                              .iiri.                              ii::..MBBB                  \n', '     iiii::. 7BBBR          r::.......::i:i:i::..        ...::::i:::.......::::::::::..     ...........:i::........:iii:ii::. :RBBB.                  \n', '     r::.. .1BQBM          :i:::.:.:.:::::::.:::.:.....:.:::::::::::.:::.:::::::::::::.:.:.:::::::.:.:.:::::.:.:.:::::::.... 7BBBB.                   \n', '    ir..::JRBBBP           vi.............................................................................................:7DBBBB                     \n', '    .BBBQBQBBBr            7BBBBQBBBBBQBBBQBQBBBBBBBBBBBBBBBBBBBQBBBQBBBQBQBBBBBBBBBQBBBBBBBQBBBBBBBBBBBBBQBBBBBBBBBBBQBQBBBBBBK                      \n', '      XDbq5Y:               .DZPEPEPdPEPdPdPdPdbEPEbEPEbEPEPdPEPEbdbEdZbZdEdEdEdEbEdZbEdZdZdEbEdZdEbEdZdEbEdZdEdZdEbEdZdZPP5ji                        \n', '                                                                                                                                    \n', '               \n', '*/\n', '\n', '// File contracts/openzeppelin_contracts/utils/Context.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/openzeppelin_contracts/access/Ownable.sol\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        revert("Cannot renounceOwnership with this contract");\n', '        //not possible for these contracts\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/openzeppelin_contracts/token/ERC20/IERC20.sol\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// File contracts/openzeppelin_contracts/token/ERC20/ERC20.sol\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}.\n', '     *\n', '     * The defaut value of {decimals} is 18. To select a different value for\n', '     * {decimals} you should overload it.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name_, string memory symbol_) {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view virtual returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view virtual returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n', '     * overloaded;\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view virtual returns (uint8) {\n', '        return 18;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view virtual override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view virtual override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '\n', '        uint256 currentAllowance = _allowances[sender][_msgSender()];\n', '        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");\n', '        _approve(sender, _msgSender(), currentAllowance - amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        uint256 currentAllowance = _allowances[_msgSender()][spender];\n', '        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");\n', '        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        uint256 senderBalance = _balances[sender];\n', '        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[sender] = senderBalance - amount;\n', '        _balances[recipient] += amount;\n', '\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply += amount;\n', '        _balances[account] += amount;\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        uint256 accountBalance = _balances[account];\n', '        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");\n', '        _balances[account] = accountBalance - amount;\n', '        _totalSupply -= amount;\n', '\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '\n', '// File contracts/Vault.sol\n', '\n', 'pragma solidity 0.8.4;\n', 'contract Vault is Ownable {\n', '    address private dispatcherAddress;\n', '    address private multiSigAddress;\n', '    address[] private tokens;\n', '\n', '    struct supportedToken {\n', '        ERC20 token;\n', '        bool active;\n', '    }\n', '\n', '    mapping(address => supportedToken) private tokensStore;\n', '\n', '    constructor(address _multiSigAddress) Ownable() {\n', '        require(_multiSigAddress != address(0), "Cannot set address to 0");\n', '        multiSigAddress = _multiSigAddress;\n', '    }\n', '\n', '    /*****************  Getters **************** */\n', '\n', '    function getDispatcherAddress() public view returns (address) {\n', '        return dispatcherAddress;\n', '    }\n', '\n', '    function getMultiSigAddress() public view returns (address) {\n', '        return multiSigAddress;\n', '    }\n', '\n', '    function getTokenAddresses() public view returns (address[] memory) {\n', '        return tokens;\n', '    }\n', '\n', '    /***************** Calls **************** */\n', '    function transferFunds(address _tokenAddress, address _recipient, uint256 _amount) external onlyDispatcher {\n', '        require(tokensStore[_tokenAddress].active == true, "Token not supported");\n', '        require(_amount > 0, "Cannot transfer 0 tokens");\n', '        ERC20(_tokenAddress).transfer(_recipient, _amount);\n', '        emit ReleasedFundsEvent(_recipient, _amount);\n', '    }\n', '\n', '    function newMultiSig(address _multiSigAddress) external onlyMultiSig {\n', '        require(_multiSigAddress != address(0), "Cannot set address to 0");\n', '        multiSigAddress = _multiSigAddress;\n', '        emit NewMultiSigEvent(_multiSigAddress);\n', '    }\n', '\n', '    function newDispatcher(address _dispatcherAddress) external onlyMultiSig {\n', '        require(_dispatcherAddress != address(0), "Can\'t set address to 0");\n', '        dispatcherAddress = _dispatcherAddress;\n', '        emit NewDispatcherEvent(dispatcherAddress);\n', '    }\n', '\n', '    function addToken(address _tokenAddress) external onlyMultiSig {\n', '        require(tokensStore[_tokenAddress].active != true, "Token already supported");\n', '        tokensStore[_tokenAddress].token = ERC20(_tokenAddress);\n', '        tokensStore[_tokenAddress].active = true;\n', '        tokens.push(_tokenAddress);\n', '        emit AddTokenEvent(_tokenAddress);\n', '    }\n', '\n', '    function removeToken(address _tokenAddress) external onlyMultiSig {\n', '        require(tokensStore[_tokenAddress].active == true, "Token not supported already");\n', '        tokensStore[_tokenAddress].active = false;\n', '        popTokenArray(_tokenAddress);\n', '        emit RemoveTokenEvent(_tokenAddress);\n', '    }\n', '\n', '    /*****************  Internal **************** */\n', '\n', '    function popTokenArray(address _tokenAddress) private {\n', '        for(uint256 i = 0; i <= tokens.length; i++)\n', '        {\n', '            if(_tokenAddress == tokens[i])\n', '            {\n', '                tokens[i] = tokens[tokens.length - 1];\n', '                tokens.pop();\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '    /*****************  Modifiers **************** */\n', '\n', '    modifier onlyDispatcher() {\n', '        require(dispatcherAddress == msg.sender, "Not the disptacher");\n', '        _;\n', '    }\n', '\n', '    modifier onlyMultiSig() {\n', '        require(multiSigAddress == msg.sender, "Not the multisig");\n', '        _;\n', '    }\n', '\n', '    /*****************  Events **************** */\n', '    event NewMultiSigEvent(address newMultiSigAddress);\n', '    event AddTokenEvent(address newTokenAddress);\n', '    event RemoveTokenEvent(address removedTokenAddress);\n', '    event NewDispatcherEvent(address newdDspatcherAddress);\n', '    event ReleasedFundsEvent(address indexed recipient, uint256 amount);\n', '}\n', '\n', '\n', '// File contracts/Dispatcher.sol\n', '\n', 'pragma solidity 0.8.4;\n', 'contract Dispatcher is Ownable {\n', '\n', '    Vault private vault;\n', '\n', '    address private multiSigAddress;\n', '    address private bridgeControllerAddress;\n', '    address[] private validators;\n', '\n', '    uint256 private valThreshold = 1;\n', '    uint256 private uuid = 0;\n', '\n', '    uint256[] private outstandingTransferProposalsIndex;\n', '\n', '    struct transferProposal {\n', '        address recipientAddress;\n', '        uint256 amount;\n', '        address tokenAddress;\n', '        address[] signatures;\n', '        string note;\n', '        bool signed;\n', '    }\n', '    mapping(uint256 => transferProposal) private transferProposalStore;\n', '\n', '    mapping(string => string) private transactions;\n', '\n', '    constructor(address _vaultAddress, address _multiSigAddress) Ownable() {\n', '        require(_multiSigAddress != address(0), "Cannot set address to 0");\n', '        multiSigAddress = _multiSigAddress;\n', '        vault = Vault(_vaultAddress);\n', '        bridgeControllerAddress = msg.sender;\n', '    }\n', '\n', '    /*****************  Getters **************** */\n', '    function getBridgeController() public view returns (address) \n', '    {\n', '        return bridgeControllerAddress;\n', '    }\n', '\n', '    function getValidators() public view returns (address[] memory) \n', '    {\n', '        return validators;\n', '    }\n', '\n', '    function getVaultAddress() public view returns (Vault) \n', '    {\n', '        return vault;\n', '    }\n', '\n', '    function getMultiSig() public view returns (address) \n', '    {\n', '        return multiSigAddress;\n', '    }\n', '    \n', '    function getOutstandingTransferProposals() public view returns (uint256[] memory) {\n', '        return outstandingTransferProposalsIndex;\n', '    }\n', '\n', '    function getValThreshold() public view returns (uint256) \n', '    {\n', '        return valThreshold;\n', '    }\n', '    function getCreatedTransanction(string memory txID) public view returns (string memory)\n', '    {\n', '        return transactions[txID];\n', '    }\n', '\n', '    function getUUID() public view returns (uint256)\n', '    {\n', '        return uuid;\n', '    }\n', '\n', '    /*****************  Setters **************** */\n', '    function newThreshold(uint256 _threshold) external onlyMultiSig {\n', '        require(_threshold <= validators.length, "Validation threshold cannot exceed amount of validators");\n', '        require(_threshold > 0, "Threshold must be greater than 0");\n', '        valThreshold = _threshold;\n', '        emit NewThresholdEvent(_threshold);\n', '    }\n', '\n', '    function newMultiSig(address _multiSigAddress) external onlyMultiSig {\n', '        require(_multiSigAddress != address(0), "Cannot set address to 0");\n', '        multiSigAddress = _multiSigAddress;\n', '        emit NewMultiSigEvent(_multiSigAddress);\n', '    }\n', '\n', '\n', '    function newVault(address _vaultAddress) external onlyMultiSig {\n', '        require(_vaultAddress != address(0), "Vault address cannot be 0");\n', '        vault = Vault(_vaultAddress);\n', '        emit NewVault(_vaultAddress);\n', '    }\n', '\n', '    function newBridgeController(address _bridgeControllerAddress) external onlyMultiSig {\n', '        require(_bridgeControllerAddress != address(0), "Bridge controller address cannot be 0");\n', '        bridgeControllerAddress = _bridgeControllerAddress;\n', '        emit NewBridgeController(_bridgeControllerAddress);\n', '    }\n', '\n', '    function addNewValidator(address _validatorAddress) external onlyMultiSig {\n', '        require(_validatorAddress != address(0), "Validator cannot be 0");\n', '        validators.push(_validatorAddress);\n', '        emit AddedNewValidator(_validatorAddress);\n', '    }\n', '\n', '    function removeValidator(address _validatorAddress) external onlyMultiSig {\n', '        //Remove a validator threshold count in order to avoid not having enough validators\n', '        for(uint256 i = 0; i <= validators.length; i++)\n', '        {\n', '            if(validators[i] == _validatorAddress)\n', '            {\n', '                validators[i] = validators[validators.length - 1];\n', '                validators.pop();\n', '                if(valThreshold > 1)\n', '                {\n', '                    valThreshold = valThreshold - 1;\n', '                }\n', '                break;\n', '            }\n', '        }\n', '        emit RemovedValidator(_validatorAddress);\n', '    }\n', '\n', '\n', '    /***************** Calls **************** */\n', '\n', '    function proposeNewTxn(address _userAddress, address _tokenAddress, uint256 _amount, string memory _note) external onlyBridgeController{\n', '        transferProposalStore[uuid].recipientAddress = _userAddress;\n', '        transferProposalStore[uuid].amount = _amount;\n', '        transferProposalStore[uuid].tokenAddress = _tokenAddress;\n', '        transferProposalStore[uuid].note = _note;\n', '        if(valThreshold == 1)\n', '        {\n', '            vault.transferFunds(transferProposalStore[uuid].tokenAddress, transferProposalStore[uuid].recipientAddress, transferProposalStore[uuid].amount);\n', '            emit ApprovedTransaction(transferProposalStore[uuid].recipientAddress, transferProposalStore[uuid].amount, uuid);\n', '            emit proposalCreated(uuid);\n', '            transferProposalStore[uuid].signed = true;\n', '        }\n', '        else\n', '        {\n', '            transferProposalStore[uuid].signatures.push(msg.sender);\n', '            outstandingTransferProposalsIndex.push(uuid);\n', '            emit proposalCreated(uuid);\n', '        }\n', '        uuid += 1;\n', '    }\n', '\n', '    function approveTxn(uint256 _proposal) external onlyValidators oneVoteTransfer(_proposal){\n', '        require(transferProposalStore[_proposal].signed == false, "Already Signed");\n', '\n', '        transferProposalStore[_proposal].signatures.push(msg.sender);\n', '\n', '        if (transferProposalStore[_proposal].signatures.length >= valThreshold) {\n', '            vault.transferFunds(transferProposalStore[_proposal].tokenAddress, transferProposalStore[_proposal].recipientAddress, transferProposalStore[_proposal].amount);\n', '            popTransferProposal(_proposal);\n', '            emit ApprovedTransaction(transferProposalStore[_proposal].recipientAddress, transferProposalStore[_proposal].amount, _proposal);\n', '        }\n', '    }\n', '\n', '    function createTxn(\n', '    string memory _id, \n', '    string memory _note,\n', '    address _tokenAddress,\n', '    uint256 _calculatedFee,\n', '    uint256 _amount\n', '    ) external payable{\n', '        require(_amount > 0, "Must send an amount");\n', '        require(msg.value == _calculatedFee, "Calculated fee sent wrong");\n', '        require(bytes(transactions[_id]).length == 0, "Must be a new transaction");\n', '        transactions[_id] = _note;\n', '        ERC20(_tokenAddress).transferFrom(msg.sender, address(vault), _amount);\n', '        payable(bridgeControllerAddress).transfer(msg.value);\n', '        emit NewTransactionCreated(msg.sender, _tokenAddress, _amount);\n', '    }\n', '\n', '\n', '    /*****************  Internal **************** */\n', '\n', '    function popTransferProposal(uint256 _uuid) private {\n', '        for(uint256 i = 0; i <= outstandingTransferProposalsIndex.length; i++)\n', '        {\n', '            if(outstandingTransferProposalsIndex[i] == _uuid)\n', '            {\n', '                outstandingTransferProposalsIndex[i] = outstandingTransferProposalsIndex[outstandingTransferProposalsIndex.length - 1];\n', '                outstandingTransferProposalsIndex.pop();\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '    /*****************  Modifiers **************** */\n', '    modifier onlyBridgeController() {\n', '        require(bridgeControllerAddress == msg.sender, "Only the controller can create new transactions");\n', '        _;\n', '    }\n', '    \n', '    modifier onlyMultiSig() {\n', '        require(multiSigAddress == msg.sender, "Not the multisig");\n', '        _;\n', '    }\n', '\n', '    modifier onlyValidators() {\n', '        for (uint256 i = 0; i < validators.length; i++) {\n', '            if (validators[i] == msg.sender) {\n', '                _;\n', '            }\n', '        }\n', '    }\n', '\n', '    modifier oneVoteTransfer (uint256 _proposal) {\n', '        for(uint256 i = 0; i < transferProposalStore[_proposal].signatures.length; i++){\n', '            require(transferProposalStore[_proposal].signatures[i] != msg.sender, "You have already voted");\n', '        }\n', '\n', '        _;\n', '    }\n', '\n', '        /*****************  Events **************** */\n', '    event NewVault(address newAddress); \n', '    event NewMultiSigEvent(address newMultiSigAddress);\n', '    event AddedNewValidator(address newValidator);\n', '    event RemovedValidator(address oldValidator);\n', '    event NewBridgeController(address newBridgeController);\n', '    event NewThresholdEvent(uint256 newThreshold);\n', '    event proposalCreated(uint256 UUID);\n', '    event ApprovedTransaction(address indexed recipient, uint256 amount, uint256 UUID);\n', '    event NewTransactionCreated(address indexed sender, address tokenAddress, uint256 amount);\n', '    event ReleasedFunds(address indexed recipient, uint256 amount);\n', '}']