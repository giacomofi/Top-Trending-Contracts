['pragma solidity ^0.5.0;\n', '\n', 'import "./SafeERC20.sol";\n', 'import "./Ownable.sol";\n', 'import "./SafeMath.sol";\n', '\n', '/**\n', ' * @title PartnersVesting\n', ' * @dev A token holder contract that can release its token balance gradually at different vesting points\n', ' */\n', 'contract TokenVesting is Ownable {\n', '    // The vesting schedule is time-based (i.e. using block timestamps as opposed to e.g. block numbers), and is\n', '    // therefore sensitive to timestamp manipulation (which is something miners can do, to a certain degree). Therefore,\n', '    // it is recommended to avoid using short time durations (less than a minute). Typical vesting schemes, with a\n', '    // cliff period of a year and a duration of four years, are safe to use.\n', '    // solhint-disable not-rely-on-time\n', '\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    event TokensReleased(address token, uint256 amount);\n', '\n', '    // The token being vested\n', '    IERC20 public _token;\n', '\n', '    // beneficiary of tokens after they are released\n', '    address private _beneficiary;\n', '\n', '    // Durations and timestamps are expressed in UNIX time, the same units as block.timestamp.\n', '    uint256 private _start;\n', '\n', '    uint256 private _released = 0;\n', '    uint256 private _amount = 0;\n', '    uint256[] private _schedule;\n', '    uint256[] private _percent;\n', '\n', '    /**\n', '     * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n', '     * beneficiary, gradually in a linear fashion until start + duration. By then all\n', '     * of the balance will have vested.\n', '     * @param token ERC20 token which is being vested\n', '     * @param beneficiary address of the beneficiary to whom vested tokens are transferred\n', '     * @param amount Amount of tokens being vested\n', '     * @param schedule array of the timestamps (as Unix time) at which point vesting starts\n', '     * @param percent array of the percents which can be released at which vesting points\n', '     */\n', '    constructor (IERC20 token, address beneficiary, uint256 amount, uint256[] memory schedule,\n', '        uint256[] memory percent) public {\n', '        require(beneficiary != address(0), "TokenVesting: beneficiary is the zero address");\n', '\n', '        require(schedule.length == percent.length, "TokenVesting: Incorrect release schedule");\n', '        require(schedule.length <= 255);\n', '\n', '        _token = token;\n', '        _beneficiary = beneficiary;\n', '        _amount = amount;\n', '        _schedule = schedule;\n', '        _percent = percent;\n', '\n', '    }\n', '\n', '    /**\n', '     * @return the beneficiary of the tokens.\n', '     */\n', '    function beneficiary() public view returns (address) {\n', '        return _beneficiary;\n', '    }\n', '\n', '    /**\n', '     * @return the start time of the token vesting.\n', '     */\n', '    function totalAmount() public view returns (uint256) {\n', '        return _amount;\n', '    }\n', '\n', '    /**\n', '     * @return the amount of the token released.\n', '     */\n', '    function released() public view returns (uint256) {\n', '        return _released;\n', '    }\n', '\n', '    /**\n', '     * @return the vested amount of the token for a particular timestamp.\n', '     */\n', '    function vestedAmount(uint256 ts) public view returns (uint256) {\n', '        int8 unreleasedIdx = _releasableIdx(ts);\n', '        if (unreleasedIdx >= 0) {\n', '            return _amount.mul(_percent[uint(unreleasedIdx)]).div(100);\n', '        } else {\n', '            return 0;\n', '        }\n', '\n', '    }\n', '\n', '    /**\n', '     * @notice Allows the owner to revoke the vesting. Tokens already vested\n', '     * remain in the contract, the rest are returned to the owner.\n', '     */\n', '    function revoke(uint256 amount) public onlyOwner {\n', '        _token.safeTransfer(owner(), amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Transfers vested tokens to beneficiary.\n', '     */\n', '    function release() public {\n', '        int8 unreleasedIdx = _releasableIdx(block.timestamp);\n', '\n', '        require(unreleasedIdx >= 0, "TokenVesting: no tokens are due");\n', '\n', '        uint256 unreleasedAmount = _amount.mul(_percent[uint(unreleasedIdx)]).div(100);\n', '\n', '        _token.safeTransfer(_beneficiary, unreleasedAmount);\n', '\n', '        _percent[uint(unreleasedIdx)] = 0;\n', '        _released = _released.add(unreleasedAmount);\n', '\n', '        emit TokensReleased(address(_token), unreleasedAmount);\n', '    }\n', '\n', '    /**\n', "     * @dev Calculates the index that has already vested but hasn't been released yet.\n", '     */\n', '    function _releasableIdx(uint256 ts) private view returns (int8) {\n', '        for (uint8 i = 0; i < _schedule.length; i++) {\n', '            if (ts > _schedule[i] && _percent[i] > 0) {\n', '                return int8(i);\n', '            }\n', '        }\n', '\n', '        return -1;\n', '    }\n', '\n', '}']