['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-17\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '\n', '//   .d8888b.                    888 888 \n', '//  d88P  Y88b                   888 888 \n', '//  Y88b.                        888 888 \n', '//   "Y888b.   88888b.   .d88b.  888 888 \n', '//      "Y88b. 888 "88b d8P  Y8b 888 888 \n', '//        "888 888  888 88888888 888 888 \n', '//  Y88b  d88P 888 d88P Y8b.     888 888 \n', '//   "Y8888P"  88888P"   "Y8888  888 888 \n', '//             888                       \n', '//             888                       \n', '//             888                       \n', '\n', '// Special thanks to:\n', '// @BoringCrypto for his great libraries @ https://github.com/boringcrypto/BoringSolidity\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '// Contract: BoringOwnable\n', '// Audit on 5-Jan-2021 by Keno and BoringCrypto\n', '// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\n', '// Edited by BoringCrypto\n', '\n', 'contract BoringOwnableData {\n', '    address public owner;\n', '    address public pendingOwner;\n', '}\n', '\n', 'contract BoringOwnable is BoringOwnableData {\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /// @notice `owner` defaults to msg.sender on construction.\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), msg.sender);\n', '    }\n', '\n', '    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\n', '    /// Can only be invoked by the current `owner`.\n', '    /// @param newOwner Address of the new owner.\n', '    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\n', '    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\n', '    function transferOwnership(\n', '        address newOwner,\n', '        bool direct,\n', '        bool renounce\n', '    ) public onlyOwner {\n', '        if (direct) {\n', '            // Checks\n', '            require(newOwner != address(0) || renounce, "Ownable: zero address");\n', '\n', '            // Effects\n', '            emit OwnershipTransferred(owner, newOwner);\n', '            owner = newOwner;\n', '            pendingOwner = address(0);\n', '        } else {\n', '            // Effects\n', '            pendingOwner = newOwner;\n', '        }\n', '    }\n', '\n', '    /// @notice Needs to be called by `pendingOwner` to claim ownership.\n', '    function claimOwnership() public {\n', '        address _pendingOwner = pendingOwner;\n', '\n', '        // Checks\n', '        require(msg.sender == _pendingOwner, "Ownable: caller != pending owner");\n', '\n', '        // Effects\n', '        emit OwnershipTransferred(owner, _pendingOwner);\n', '        owner = _pendingOwner;\n', '        pendingOwner = address(0);\n', '    }\n', '\n', '    /// @notice Only allows the `owner` to execute the function.\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '}\n', '\n', 'contract Domain {\n', '    bytes32 private constant DOMAIN_SEPARATOR_SIGNATURE_HASH = keccak256("EIP712Domain(uint256 chainId,address verifyingContract)");\n', '    // See https://eips.ethereum.org/EIPS/eip-191\n', '    string private constant EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA = "\\x19\\x01";\n', '\n', '    // solhint-disable var-name-mixedcase\n', '    bytes32 private immutable _DOMAIN_SEPARATOR;\n', '    uint256 private immutable DOMAIN_SEPARATOR_CHAIN_ID;    \n', '\n', '    /// @dev Calculate the DOMAIN_SEPARATOR\n', '    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\n', '        return keccak256(\n', '            abi.encode(\n', '                DOMAIN_SEPARATOR_SIGNATURE_HASH,\n', '                chainId,\n', '                address(this)\n', '            )\n', '        );\n', '    }\n', '\n', '    constructor() public {\n', '        uint256 chainId; assembly {chainId := chainid()}\n', '        _DOMAIN_SEPARATOR = _calculateDomainSeparator(DOMAIN_SEPARATOR_CHAIN_ID = chainId);\n', '    }\n', '\n', '    /// @dev Return the DOMAIN_SEPARATOR\n', "    // It's named internal to allow making it public from the contract that uses it by creating a simple view function\n", '    // with the desired public name, such as DOMAIN_SEPARATOR or domainSeparator.\n', '    // solhint-disable-next-line func-name-mixedcase\n', '    function _domainSeparator() internal view returns (bytes32) {\n', '        uint256 chainId; assembly {chainId := chainid()}\n', '        return chainId == DOMAIN_SEPARATOR_CHAIN_ID ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(chainId);\n', '    }\n', '\n', '    function _getDigest(bytes32 dataHash) internal view returns (bytes32 digest) {\n', '        digest =\n', '            keccak256(\n', '                abi.encodePacked(\n', '                    EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA,\n', '                    _domainSeparator(),\n', '                    dataHash\n', '                )\n', '            );\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    /// @notice EIP 2612\n', '    function permit(\n', '        address owner,\n', '        address spender,\n', '        uint256 value,\n', '        uint256 deadline,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external;\n', '}\n', '\n', '// Data part taken out for building of contracts that receive delegate calls\n', 'contract ERC20Data {\n', '    /// @notice owner > balance mapping.\n', '    mapping(address => uint256) public balanceOf;\n', '    /// @notice owner > spender > allowance mapping.\n', '    mapping(address => mapping(address => uint256)) public allowance;\n', '    /// @notice owner > nonce mapping. Used in `permit`.\n', '    mapping(address => uint256) public nonces;\n', '}\n', '\n', 'abstract contract ERC20 is IERC20, Domain {\n', '    /// @notice owner > balance mapping.\n', '    mapping(address => uint256) public override balanceOf;\n', '    /// @notice owner > spender > allowance mapping.\n', '    mapping(address => mapping(address => uint256)) public override allowance;\n', '    /// @notice owner > nonce mapping. Used in `permit`.\n', '    mapping(address => uint256) public nonces;\n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    /// @notice Transfers `amount` tokens from `msg.sender` to `to`.\n', '    /// @param to The address to move the tokens.\n', '    /// @param amount of the tokens to move.\n', '    /// @return (bool) Returns True if succeeded.\n', '    function transfer(address to, uint256 amount) public returns (bool) {\n', '        // If `amount` is 0, or `msg.sender` is `to` nothing happens\n', '        if (amount != 0 || msg.sender == to) {\n', '            uint256 srcBalance = balanceOf[msg.sender];\n', '            require(srcBalance >= amount, "ERC20: balance too low");\n', '            if (msg.sender != to) {\n', '                require(to != address(0), "ERC20: no zero address"); // Moved down so low balance calls safe some gas\n', '\n', '                balanceOf[msg.sender] = srcBalance - amount; // Underflow is checked\n', '                balanceOf[to] += amount;\n', '            }\n', '        }\n', '        emit Transfer(msg.sender, to, amount);\n', '        return true;\n', '    }\n', '\n', '    /// @notice Transfers `amount` tokens from `from` to `to`. Caller needs approval for `from`.\n', '    /// @param from Address to draw tokens from.\n', '    /// @param to The address to move the tokens.\n', '    /// @param amount The token amount to move.\n', '    /// @return (bool) Returns True if succeeded.\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 amount\n', '    ) public returns (bool) {\n', '        // If `amount` is 0, or `from` is `to` nothing happens\n', '        if (amount != 0) {\n', '            uint256 srcBalance = balanceOf[from];\n', '            require(srcBalance >= amount, "ERC20: balance too low");\n', '\n', '            if (from != to) {\n', '                uint256 spenderAllowance = allowance[from][msg.sender];\n', "                // If allowance is infinite, don't decrease it to save on gas (breaks with EIP-20).\n", '                if (spenderAllowance != type(uint256).max) {\n', '                    require(spenderAllowance >= amount, "ERC20: allowance too low");\n', '                    allowance[from][msg.sender] = spenderAllowance - amount; // Underflow is checked\n', '                }\n', '                require(to != address(0), "ERC20: no zero address"); // Moved down so other failed calls safe some gas\n', '\n', '                balanceOf[from] = srcBalance - amount; // Underflow is checked\n', '                balanceOf[to] += amount;\n', '            }\n', '        }\n', '        emit Transfer(from, to, amount);\n', '        return true;\n', '    }\n', '\n', '    /// @notice Approves `amount` from sender to be spend by `spender`.\n', "    /// @param spender Address of the party that can draw from msg.sender's account.\n", '    /// @param amount The maximum collective amount that `spender` can draw.\n', '    /// @return (bool) Returns True if approved.\n', '    function approve(address spender, uint256 amount) public override returns (bool) {\n', '        allowance[msg.sender][spender] = amount;\n', '        emit Approval(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    // solhint-disable-next-line func-name-mixedcase\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32) {\n', '        return _domainSeparator();\n', '    }\n', '\n', '    // keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");\n', '    bytes32 private constant PERMIT_SIGNATURE_HASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n', '\n', '    /// @notice Approves `value` from `owner_` to be spend by `spender`.\n', '    /// @param owner_ Address of the owner.\n', '    /// @param spender The address of the spender that gets approved to draw from `owner_`.\n', '    /// @param value The maximum collective amount that `spender` can draw.\n', '    /// @param deadline This permit must be redeemed before this deadline (UTC timestamp in seconds).\n', '    function permit(\n', '        address owner_,\n', '        address spender,\n', '        uint256 value,\n', '        uint256 deadline,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external override {\n', '        require(owner_ != address(0), "ERC20: Owner cannot be 0");\n', '        require(block.timestamp < deadline, "ERC20: Expired");\n', '        require(\n', '            ecrecover(_getDigest(keccak256(abi.encode(PERMIT_SIGNATURE_HASH, owner_, spender, value, nonces[owner_]++, deadline))), v, r, s) ==\n', '                owner_,\n', '            "ERC20: Invalid Signature"\n', '        );\n', '        allowance[owner_][spender] = value;\n', '        emit Approval(owner_, spender, value);\n', '    }\n', '}\n', '\n', '// Contract: BoringMath\n', '/// @notice A library for performing overflow-/underflow-safe math,\n', '/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\n', 'library BoringMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        require((c = a + b) >= b, "BoringMath: Add Overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        require((c = a - b) <= a, "BoringMath: Underflow");\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        require(b == 0 || (c = a * b) / b == a, "BoringMath: Mul Overflow");\n', '    }\n', '}\n', '\n', '/// @title Spell\n', '/// @author 0xMerlin\n', '/// @dev This contract spreads Magic.\n', 'contract Spell is ERC20, BoringOwnable {\n', '    using BoringMath for uint256;\n', "    // ERC20 'variables'\n", '    string public constant symbol = "SPELL";\n', '    string public constant name = "Spell Token";\n', '    uint8 public constant decimals = 18;\n', '    uint256 public override totalSupply;\n', '    uint256 public constant MAX_SUPPLY = 420 * 1e27;\n', '\n', '    function mint(address to, uint256 amount) public onlyOwner {\n', '        require(to != address(0), "SPELL: no mint to zero address");\n', '        require(MAX_SUPPLY >= totalSupply.add(amount), "SPELL: Don\'t go over MAX");\n', '\n', '        totalSupply = totalSupply + amount;\n', '        balanceOf[to] += amount;\n', '        emit Transfer(address(0), to, amount);\n', '    }\n', '}']