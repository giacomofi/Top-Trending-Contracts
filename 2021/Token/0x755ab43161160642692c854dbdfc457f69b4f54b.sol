['# @version 0.2.11\n', '# (c) CoinFLEX\n', '# Hub for Upgrading ERC-20 Tokens\n', "'''\n", '@title TokenSwap\n', '@author CoinFLEX\n', '@license Copyright (c) CoinFLEX, 2021 - all rights reserved\n', '@notice Hub for Upgrading FLEXCoin ERC-20 Tokens\n', '@dev Holds a set amount of new ERC-20 token to give out in exchange for older version\n', "'''\n", 'from vyper.interfaces import ERC20\n', '\n', '### Member Variables ###\n', 'old_addr: public(address) # Address of the old ERC-20 token contract\n', 'new_addr: public(address) # Address of the new ERC-20 token contract\n', 'treasury: public(address) # Address to move old ERC-20 tokens to after handing out new ERC-20 tokens\n', 'owner:    public(address) # Address where this contract belongs to\n', '\n', '### Events ###\n', 'event FundsRescued:\n', '  _token_addr: indexed(address)\n', '  _target:     indexed(address)\n', '  _amount:     uint256\n', '\n', 'event OwnershipTransferred:\n', '  _prev_owner: indexed(address)\n', '  _new_owner:  indexed(address)\n', '\n', 'event TokensSwapped:\n', '  _addr:       indexed(address)\n', '  _amount:     uint256\n', '\n', 'event TreasuryChanged:\n', '  _prev_treasury: indexed(address)\n', '  _new_treasury:  indexed(address)\n', '\n', '### Constructor ###\n', '@external\n', 'def __init__(_old_addr: address, _new_addr: address, _treasury: address):\n', "  '''\n", '  @notice Contract constructor\n', '  @param _old_addr  address of the old ERC-20 token contract\n', '  @param _new_addr  address of the old ERC-20 token contract\n', '  @param _treasury  address to move old ERC-20 tokens to after handing out new ERC-20 tokens\n', "  '''\n", "  assert _old_addr != ZERO_ADDRESS, 'Old ERC-20 token address cannot be zero.' # dev: old ERC-20 token address cannot be zero\n", '  self.old_addr = _old_addr\n', "  assert _new_addr != ZERO_ADDRESS, 'New ERC-20 token address cannot be zero.' # dev: new ERC-20 token address cannot be zero\n", '  self.new_addr = _new_addr\n', "  assert _treasury != ZERO_ADDRESS, 'Treasury address cannot be zero.' # dev: treasury address cannot be zero\n", '  self.treasury = _treasury\n', '  self.owner = msg.sender\n', '\n', '### Methods ###\n', '@external\n', 'def change_treasury(_addr: address) -> bool:\n', "  '''\n", '  @notice Change the treasury address where old ERC-20 tokens get transferred to after swap.\n', '  @dev only contract owner has access to this action\n', '  @param _addr  the address of the new ERC-20 token treasury\n', "  '''\n", "  assert msg.sender == self.owner, 'Only contract owner is permitted to this action.' # dev: only owner\n", "  assert _addr != ZERO_ADDRESS, 'Treasury address cannot be zero.' # dev: treasury address cannot be zero\n", '  _prev_treasury: address = self.treasury # dev: save previous treasury address for logging\n', '  self.treasury           = _addr         # dev: set new treasury address\n', '  log TreasuryChanged(_prev_treasury, _addr)\n', '  return True\n', '\n', '@external\n', "@nonreentrant('lock')\n", 'def rescue_funds(_addr: address, _amount: uint256) -> bool:\n', "  '''\n", '  @notice Rescue air-dropped fund from this contract\n', '  @dev only contract owner has access to this action\n', '  @param _addr  the token address to have its funds rescued\n', '  @param _amount  the amount of tokens to have its funds rescued\n', "  '''\n", "  assert msg.sender == self.owner, 'Only contract owner is permitted to this action.' # dev: only owner\n", "  assert _addr != ZERO_ADDRESS, 'Token address to rescue funds from cannot be zero.' # dev: token address to rescue funds from cannot be zero\n", "  assert _amount > 0, 'Amount to rescue must be greater than zero.' # dev: amount to rescue must be greater than zero\n", "  assert ERC20(_addr).transfer(msg.sender, _amount), 'Transfer failed.' # dev: transfer failed\n", '  log FundsRescued(_addr, msg.sender, _amount)\n', '  return True\n', '\n', '@external\n', "@nonreentrant('lock')\n", 'def swap(_amount: uint256) -> bool:\n', "  '''\n", '  @notice Swap old ERC-20 tokens with the new ERC-20 tokens\n', '  @dev old ERC-20 tokens are transfered to the treasury address and the new ERC-20 tokens are handed out from this contract\n', '  @param _amount  the amount to perform the swap\n', "  '''\n", "  assert _amount > 0, 'Amount to swap must be greater than zero.' # dev: amount to swap must be greater than zero\n", "  assert ERC20(self.old_addr).transferFrom(msg.sender, self.treasury, _amount), 'Old token transfer failed.' # dev: transfer failed\n", "  assert ERC20(self.new_addr).transfer(msg.sender, _amount), 'New token transfer failed.' # dev: transfer failed\n", '  log TokensSwapped(msg.sender, _amount)\n', '  return True\n', '\n', '@external\n', 'def transfer_ownership(_addr: address) -> bool:\n', "  '''\n", '  @notice Transfer ownership for this contract; Only one owner address allowed\n', '  @dev only contract owner has access to this action\n', "  @param _addr  the address to transfer this contract's ownership to\n", "  '''\n", "  assert msg.sender == self.owner, 'Only contract owner is permitted to this action.' # dev: only owner\n", "  assert _addr != ZERO_ADDRESS, 'Cannot transfer contract ownership to zero address.' # dev: cannot transfer ownership to zero address\n", '  self.owner = _addr # dev: set new owner\n', '  log OwnershipTransferred(msg.sender, _addr)\n', '  return True']