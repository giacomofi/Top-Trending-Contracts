['// SPDX-License-Identifier: MIT\n', 'pragma solidity >=0.4.19 <0.8.5;\n', 'import "./Dooery.sol";\n', 'import "./ERC721.sol";\n', 'import "./SafeMath.sol";\n', '\n', 'contract ShibaDibaDoo is Dooery, ERC721 { \n', '\n', '    using SafeMath for uint256;\n', '    event DoosMinted(address owner);\n', '    mapping(uint256 => uint256) private _totalSupply;\n', '\n', '    constructor() ERC721("Shiba Diba Doo Hybrids", "SDDH") {\n', '        dooPeople.push(MintMasters(payable(address(0x62CAD076adE9D7Ce4880c2c7362Bf63a7E83de39)), 50));\n', '        dooPeople.push(MintMasters(payable(address(0xd528ceB24Fa1cc6De73BeDd70Ece22Af0226B4dA)), 50));\n', '    }\n', '\n', '    modifier canDoo(uint _qty){\n', '        require(msg.value == (dooPrice * _qty));\n', '        _;\n', '    }\n', '\n', '    modifier canDooit() {\n', '        require(doos.length < 9999);\n', '        _;\n', '    }\n', '\n', '    modifier canSendpayout(){\n', '        require(address(this).balance > 0.01 ether);\n', '        _;\n', '    }\n', '\n', '    struct MintMasters {\n', '        address payable addr;\n', '        uint percent;\n', '    }\n', '\n', '    MintMasters[] dooPeople;\n', '\n', '    uint dooPrice = 0.06 ether;\n', '\n', '    function setDooPrice(uint _fee) external onlyOwner {\n', '        dooPrice = _fee;\n', '    }\n', '\n', '    function sendpayout() external payable onlyOwner() canSendpayout() {\n', '        uint nbalance = address(this).balance - 0.01 ether;\n', '        for(uint i = 0; i < dooPeople.length; i++){\n', '            MintMasters storage o = dooPeople[i];\n', '            o.addr.transfer((nbalance * o.percent) / 100);       \n', '        }\n', '        \n', '    }\n', '\n', '\n', '    function balance() external view onlyOwner returns (uint)  {\n', '        return address(this).balance;\n', '    }\n', '\n', '    function getDooPrice() external view returns (uint){\n', '        return dooPrice;\n', '    }\n', '\n', '    function getDoosIdsByOwner(address _owner) external view returns(uint[] memory) {\n', '        uint[] memory result = new uint[](ownerDooCount[_owner]);\n', '        uint meter = 0;\n', '        for (uint i = 0; i < doos.length; i++) {\n', '            if (dooToOwner[i + 1] == _owner) {\n', '                result[meter] = i;\n', '                meter++;\n', '            }\n', '        }\n', '        return result;\n', '    }\n', '\n', '    function getDoosCount() external view returns(uint){\n', '        return doos.length;\n', '    }\n', '\n', '    function setBaseTokenURI(string calldata _uri) external onlyOwner {\n', '        baseTokenURI = _uri;\n', '    }\n', '\n', '    function _baseURI() internal override view returns (string memory) {\n', '        return baseTokenURI;\n', '    }\n', '    \n', '    function _beforeTokenTransfer(address _from, address _to, uint256 _tokenId) internal override {\n', '        if(address(0) != _from){\n', '            ownerDooCount[_to] = ownerDooCount[_to].add(1);\n', '        } \n', '        if(_to != dooToOwner[_tokenId]){\n', '            ownerDooCount[_from] = ownerDooCount[_from].sub(1);\n', '            dooToOwner[_tokenId] = _to;\n', '        }\n', '        \n', '    }\n', '    \n', '    function mintDoo() internal canDooit() {\n', '        Doo memory doo = Doo(doos.length + 1);\n', '        doos.push(doo);\n', '        uint id = doos.length;\n', '        dooToOwner[id] = msg.sender;\n', '        ownerDooCount[msg.sender] = ownerDooCount[msg.sender].add(1);\n', '        _mint(msg.sender, id);\n', '    }\n', '\n', '    function buyDoos(uint _qty) external payable canDoo(_qty) {\n', '        require(_qty <= 40, "max 40 Tokens per transaction");\n', '        uint i = 0;\n', '        while(i < _qty){\n', '            mintDoo();\n', '            i++;\n', '        }\n', '        emit DoosMinted(msg.sender);\n', '    }\n', '\n', '    function reserveDoos(uint _qty) external onlyOwner {\n', '        require(_qty <= 2, "Max 2 Tokens can be reserved");\n', '        uint i = 0;\n', '        while(i < _qty){\n', '            mintDoo();\n', '            i++;\n', '        }\n', '        emit DoosMinted(msg.sender);\n', '    }\n', '\n', '}']