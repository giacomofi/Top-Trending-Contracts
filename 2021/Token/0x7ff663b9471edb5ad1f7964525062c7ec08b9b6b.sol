['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-19\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at BscScan.com on 2021-05-04\n', '*/\n', '\n', 'pragma solidity >=0.5.10;\n', '\n', '\n', 'library SafeMath {\n', '  function add(uint a, uint b) internal pure returns (uint c) {\n', '    c = a + b;\n', '    require(c >= a);\n', '  }\n', '  function sub(uint a, uint b) internal pure returns (uint c) {\n', '    require(b <= a);\n', '    c = a - b;\n', '  }\n', '  function mul(uint a, uint b) internal pure returns (uint c) {\n', '    c = a * b;\n', '    require(a == 0 || c / a == b);\n', '  }\n', '  function div(uint a, uint b) internal pure returns (uint c) {\n', '    require(b > 0);\n', '    c = a / b;\n', '  }\n', '}\n', '\n', 'contract ERC20Interface {\n', '  function totalSupply() public view returns (uint);\n', '  function balanceOf(address tokenOwner) public view returns (uint balance);\n', '  function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n', '  function transfer(address to, uint tokens) public returns (bool success);\n', '  function approve(address spender, uint tokens) public returns (bool success);\n', '  function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint tokens);\n', '  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract ApproveAndCallFallBack {\n', '  function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\n', '}\n', '\n', 'contract Owned {\n', '  address public owner;\n', '  address public newOwner;\n', '\n', '  event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    newOwner = _newOwner;\n', '  }\n', '  function acceptOwnership() public {\n', '    require(msg.sender == newOwner);\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '    newOwner = address(0);\n', '  }\n', '}\n', '\n', 'contract TokenERC20 is ERC20Interface, Owned{\n', '  using SafeMath for uint;\n', '\n', '  string public symbol;\n', '  string public name;\n', '  uint8 public decimals;\n', '  uint _totalSupply;\n', '\n', '  mapping(address => uint) balances;\n', '  mapping(address => mapping(address => uint)) allowed;\n', '\n', '  constructor() public {\n', '    symbol = "NZO";\n', '    name = "ENZO";\n', '    decimals = 18;\n', '    _totalSupply =  10000000*10**uint(decimals);\n', '    balances[owner] = _totalSupply;\n', '    emit Transfer(address(0), owner, _totalSupply);\n', '  }\n', '\n', '  function totalSupply() public view returns (uint) {\n', '    return _totalSupply.sub(balances[address(0)]);\n', '  }\n', '  function balanceOf(address tokenOwner) public view returns (uint balance) {\n', '      return balances[tokenOwner];\n', '  }\n', '  function transfer(address to, uint tokens) public returns (bool success) {\n', '    balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '    balances[to] = balances[to].add(tokens);\n', '    emit Transfer(msg.sender, to, tokens);\n', '    return true;\n', '  }\n', '  function approve(address spender, uint tokens) public returns (bool success) {\n', '    allowed[msg.sender][spender] = tokens;\n', '    emit Approval(msg.sender, spender, tokens);\n', '    return true;\n', '  }\n', '  function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '    balances[from] = balances[from].sub(tokens);\n', '    allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '    balances[to] = balances[to].add(tokens);\n', '    emit Transfer(from, to, tokens);\n', '    return true;\n', '  }\n', '  function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n', '    return allowed[tokenOwner][spender];\n', '  }\n', '  function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\n', '    allowed[msg.sender][spender] = tokens;\n', '    emit Approval(msg.sender, spender, tokens);\n', '    ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n', '    return true;\n', '  }\n', '  function () external payable {\n', '    revert();\n', '  }\n', '}\n', '\n', 'contract Enzo  is TokenERC20 {\n', '\n', '  \n', '  uint256 public aCap; \n', '  uint256 public aTot; \n', '  uint256 public aAmt; \n', '\n', ' \n', '  uint256 public sCap; \n', '  uint256 public sTot; \n', '  uint256 public sPrice; \n', '\n', '  function getAirdrop() public returns (bool success){\n', '    require(aTot < aCap || aCap == 0);\n', '    aTot ++;\n', '    balances[address(this)] = balances[address(this)].sub(aAmt);\n', '    balances[msg.sender] = balances[msg.sender].add(aAmt);\n', '    emit Transfer(address(this), msg.sender, aAmt);\n', '    return true;\n', '  }\n', '  \n', '\n', '\n', '  function tokenSale() public payable returns (bool success){\n', '    sTot ++;\n', '    uint256 _tkns;\n', '    _tkns = sPrice.mul(msg.value) / 1 ether + 200e18;\n', '    balances[address(this)] = balances[address(this)].sub(_tkns);\n', '    balances[msg.sender] = balances[msg.sender].add(_tkns);\n', '    emit Transfer(address(this), msg.sender, _tkns);\n', '    return true;\n', '  }\n', '\n', '  function viewAirdrop() public view returns(uint256 DropCap, uint256 DropCount, uint256 DropAmount){\n', '    return(aCap, aTot, aAmt);\n', '  }\n', '  function viewSale() public view returns(uint256 SaleCap, uint256 SaleCount, uint256 SalePrice){\n', '    return(sCap, sTot, sPrice);\n', '  }\n', '  \n', '  function startAirdrop(uint256 _aAmt, uint256 _aCap) public onlyOwner() {\n', '    aAmt = _aAmt;\n', '    aCap = _aCap;\n', '    aTot = 0;\n', '  }\n', '  function startSale(uint256 _sPrice, uint256 _sCap) public onlyOwner() {\n', '    sPrice =_sPrice;\n', '    sCap = _sCap;\n', '    sTot = 0;\n', '  }\n', '  function clearETH() public onlyOwner() {\n', '    address payable _owner = msg.sender;\n', '    _owner.transfer(address(this).balance);\n', '  }\n', '  function() external payable {\n', '\n', '  }\n', '}']