['//SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity ^0.7.0;\n', 'import "./ERC1155.sol";\n', '\n', 'interface CurioCards{\n', '  function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n', '}\n', '\n', 'contract WrappedCurioCards is ERC1155 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    bytes4 constant private INTERFACE_SIGNATURE_URI = 0x0e89341c;\n', '\n', '    // id => creators\n', '    mapping (uint256 => address) public creators;\n', '    // id => contracts\n', '    mapping (uint256 => address) public contracts;    \n', '\n', '    // A nonce to ensure we have a unique id each time we mint.\n', '    address public owner;\n', '\n', '    constructor(){\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier creatorOnly(uint256 _id) {\n', '        require(creators[_id] == msg.sender);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(owner == msg.sender);\n', '        _;\n', '    }\n', '\n', '    function supportsInterface(bytes4 _interfaceId) override\n', '    public\n', '    pure\n', '    returns (bool) {\n', '        if (_interfaceId == INTERFACE_SIGNATURE_URI) {\n', '            return true;\n', '        } else {\n', '            return super.supportsInterface(_interfaceId);\n', '        }\n', '    }\n', '\n', '    // Creates a new token type and assings _initialSupply to minter\n', '    function create(uint256 id,address curiocontract, string calldata _uri) external onlyOwner{\n', '        creators[id] = msg.sender;\n', '        contracts[id]= curiocontract;\n', '        balances[id][msg.sender] = 0;\n', '\n', '        // Transfer event with mint semantic\n', '        emit TransferSingle(msg.sender, address(0x0), msg.sender, id, 0);\n', '\n', '        if (bytes(_uri).length > 0)\n', '            emit URI(_uri, id);\n', '    }\n', '\n', '    function mint(uint256 _id, address  _to, uint256  _quantity) internal {\n', '\n', '\n', '            // Grant the items to the caller\n', '            balances[_id][_to] = _quantity.add(balances[_id][_to]);\n', '\n', '            // Emit the Transfer/Mint event.\n', '            // the 0x0 source address implies a mint \n', '            // It will also provide the circulating supply info.\n', '            emit TransferSingle(msg.sender, address(0x0), _to, _id, _quantity);\n', '\n', '            if (_to.isContract()) {\n', "                _doSafeTransferAcceptanceCheck(msg.sender, msg.sender, _to, _id, _quantity, '');\n", '            }\n', '    }\n', '\n', '    function wrap(uint256 id,uint256 amount) public{\n', '        address contractaddress =  contracts[id];\n', '        CurioCards cards=CurioCards(contractaddress);\n', '        require(cards.transferFrom(msg.sender,address(this),amount));\n', '        mint(id,msg.sender,amount);\n', '    }\n', '\n', '    function unwrap(uint256 id,uint256 amount) public{\n', '        \n', '        address contractaddress =  contracts[id];\n', '        CurioCards cards=CurioCards(contractaddress);\n', '        require(cards.transferFrom(address(this),msg.sender,amount));\n', '        balances[id][msg.sender] = amount.add(balances[id][msg.sender]);\n', '        emit TransferSingle(address(0x0),msg.sender, msg.sender,id , amount);\n', '    }\n', '\n', '\n', '\n', '    function setURI(string calldata _uri, uint256 _id) external creatorOnly(_id) {\n', '        emit URI(_uri, _id);\n', '    }\n', '}']