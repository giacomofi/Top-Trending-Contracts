['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-15\n', '*/\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', '/*\n', '\n', ' ⛏️ Miners Guild ⛏️\n', '\n', ' DAO for community-based donations \n', ' \n', ' Donate to depositors of this contract by sending ERC20 tokens directly to the contract address. \n', '\n', '*/\n', '                                                                                 \n', '  \n', ' \n', '\n', '\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', ' \n', ' \n', ' \n', '   \n', '\n', 'interface MintableERC20  {\n', '     function mint(address account, uint256 amount) external ;\n', '     function burn(address account, uint256 amount) external ;\n', '}\n', '\n', ' \n', ' \n', 'abstract contract ApproveAndCallFallBack {\n', '       function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public virtual;\n', '  }\n', '  \n', '  \n', '  \n', '  \n', '/**\n', ' * \n', ' * \n', ' *  Staking contract that supports community-extractable donations \n', ' *\n', ' */\n', 'contract MinersGuild is \n', '  ApproveAndCallFallBack\n', '{\n', ' \n', '  \n', '  address public _stakeableCurrency; \n', '  address public _reservePoolToken; \n', '   \n', '  event Donation(address from, uint256 amount);\n', '   \n', '  constructor(  address stakeableCurrency, address reservePoolToken  ) \n', '  { \n', '    \n', '   _stakeableCurrency = stakeableCurrency;\n', '   _reservePoolToken = reservePoolToken;\n', '  }\n', '  \n', '  function donateCurrency(address from, uint256 currencyAmount) public returns (bool){\n', '\n', "     require( IERC20(_stakeableCurrency).transferFrom(from, address(this), currencyAmount ), 'transfer failed'  );\n", '     \n', '     emit Donation(from,currencyAmount);\n', '\n', '     return true; \n', '  }\n', ' \n', '  \n', '  function stakeCurrency( address from,  uint256 currencyAmount ) public returns (bool){\n', '       \n', '      uint256 reserveTokensMinted = _reserveTokensMinted(  currencyAmount) ;\n', '     \n', "      require( IERC20(_stakeableCurrency).transferFrom(from, address(this), currencyAmount ), 'transfer failed'  );\n", '          \n', '      MintableERC20(_reservePoolToken).mint(from,  reserveTokensMinted) ;\n', '      \n', '     return true; \n', '  }\n', '  \n', '   \n', '  function unstakeCurrency( uint256 reserveTokenAmount, address currencyToClaim) public returns (bool){\n', '        \n', '     \n', '      uint256 vaultOutputAmount =  _vaultOutputAmount( reserveTokenAmount, currencyToClaim );\n', '        \n', '        \n', '      MintableERC20(_reservePoolToken).burn(msg.sender,  reserveTokenAmount ); \n', '      \n', '       \n', '      IERC20(currencyToClaim).transfer( msg.sender, vaultOutputAmount );\n', '       \n', '      \n', '      \n', '     return true; \n', '  }\n', '  \n', '\n', '    //amount of reserve tokens to give to staker \n', '  function _reserveTokensMinted(  uint256 currencyAmount ) public view returns (uint){\n', '\n', '      uint256 totalReserveTokens = IERC20(_reservePoolToken).totalSupply();\n', '\n', '\n', '      uint256 internalVaultBalance =  IERC20(_stakeableCurrency).balanceOf(address(this)); \n', '      \n', '     \n', '      if(totalReserveTokens == 0 || internalVaultBalance == 0 ){\n', '        return currencyAmount;\n', '      }\n', '      \n', '      \n', '      uint256 incomingTokenRatio = (currencyAmount*100000000) / internalVaultBalance;\n', '       \n', '       \n', '      return ( ( totalReserveTokens)  * incomingTokenRatio) / 100000000;\n', '  }\n', '  \n', '  \n', '    //amount of output tokens to give to redeemer\n', '  function _vaultOutputAmount(   uint256 reserveTokenAmount, address currencyToClaim ) public view returns (uint){\n', '\n', '      uint256 internalVaultBalance = IERC20(currencyToClaim ).balanceOf(address(this));\n', '      \n', '\n', '      uint256 totalReserveTokens = IERC20(_reservePoolToken).totalSupply();\n', ' \n', '       \n', '      uint256 burnedTokenRatio = (reserveTokenAmount*100000000) / totalReserveTokens  ;\n', '      \n', '       \n', '      return (internalVaultBalance * burnedTokenRatio) / 100000000;\n', '  }\n', '\n', ' \n', '  \n', '  \n', '    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public override{\n', '      require(token == _stakeableCurrency);\n', '      \n', '       stakeCurrency(from, tokens);  \n', '    }\n', '    \n', '   \n', '     // ------------------------------------------------------------------------\n', '\n', "    // Don't accept ETH\n", '\n', '    // ------------------------------------------------------------------------\n', ' \n', '    fallback() external payable { revert(); }\n', '    receive() external payable { revert(); }\n', '   \n', '\n', '}']