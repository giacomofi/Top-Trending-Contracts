['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-16\n', '*/\n', '\n', '// Sources flattened with hardhat v2.0.10 https://hardhat.org\n', '\n', '// File contracts/interfaces/ICurve.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface ICurve {\n', '    function exchange(\n', '        int128 i,\n', '        int128 j,\n', '        uint256 dx,\n', '        uint256 min_dy\n', '    ) external;\n', '}\n', '\n', '\n', '// File contracts/interfaces/IERC20.sol\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface IERC20 {\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function transferFrom(address from, address recipient, uint256 amount) external returns (bool);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function balanceOf(address account) external view returns (uint256);\n', '}\n', '\n', '\n', '// File contracts/interfaces/ISynthetix.sol\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface ISynthetix {\n', '    function exchangeOnBehalf(\n', '        address exchangeForAddress, \n', '        bytes32 sourceCurrencyKey, \n', '        uint256 sourceAmount, \n', '        bytes32 destinationCurrencyKey\n', '    ) external returns (uint256 amountReceived);\n', '}\n', '\n', '\n', '// File contracts/interfaces/IDelegateApprovals.sol\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface IDelegateApprovals {\n', '    function approveExchangeOnBehalf(address delegate) external;\n', '}\n', '\n', '\n', '// File contracts/TeslaSwap.sol\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', '\n', '\n', 'contract TeslaSwap {\n', '  ICurve public curve;\n', '  ISynthetix public synthetix;\n', '  IERC20 public USDC;\n', '  IERC20 public sUSD;\n', '  IERC20 public sTSLA;\n', '  \n', '  constructor(address _USDC, address _sUSDC, address _sTSLA, address _curve, address _synthetix) {\n', '    USDC = IERC20(_USDC);\n', '    sUSD = IERC20(_sUSDC);\n', '    sTSLA = IERC20(_sTSLA);\n', '    curve = ICurve(_curve);\n', '    synthetix = ISynthetix(_synthetix);\n', '\n', '    USDC.approve(address(curve), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n', '  }\n', '\n', '  function swapUSDCForTequila (\n', '    uint256 amountIn,\n', '    uint256 amountOutMin\n', '  ) external {\n', '    USDC.transferFrom(msg.sender, address(this), amountIn);\n', '\n', '    curve.exchange(1, 3, amountIn, amountOutMin);\n', '    uint256 sUSDOut = sUSD.balanceOf(address(this));\n', '    sUSD.transfer(msg.sender, sUSDOut);\n', '\n', '    synthetix.exchangeOnBehalf(msg.sender, "sUSD", sUSDOut, "sTSLA");\n', '  }\n', '}']