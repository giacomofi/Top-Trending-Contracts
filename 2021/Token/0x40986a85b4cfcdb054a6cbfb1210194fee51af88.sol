['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-26\n', '*/\n', '\n', '// Sources flattened with hardhat v2.1.2 https://hardhat.org\n', '\n', '// File contracts/interfaces/IERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT;\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '  /**\n', '   * @dev Returns the amount of tokens in existence.\n', '   */\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  /**\n', '   * @dev Returns the amount of tokens owned by `account`.\n', '   */\n', '  function balanceOf(address account) external view returns (uint256);\n', '\n', '  /**\n', "   * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '   *\n', '   * Returns a boolean value indicating whether the operation succeeded.\n', '   *\n', '   * Emits a {Transfer} event.\n', '   */\n', '  function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '  /**\n', '   * @dev Returns the remaining number of tokens that `spender` will be\n', '   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '   * zero by default.\n', '   *\n', '   * This value changes when {approve} or {transferFrom} are called.\n', '   */\n', '  function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '  /**\n', "   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '   *\n', '   * Returns a boolean value indicating whether the operation succeeded.\n', '   *\n', '   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '   * that someone may use both the old and the new allowance by unfortunate\n', '   * transaction ordering. One possible solution to mitigate this race\n', "   * condition is to first reduce the spender's allowance to 0 and set the\n", '   * desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   *\n', '   * Emits an {Approval} event.\n', '   */\n', '  function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '  /**\n', '   * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "   * allowance mechanism. `amount` is then deducted from the caller's\n", '   * allowance.\n', '   *\n', '   * Returns a boolean value indicating whether the operation succeeded.\n', '   *\n', '   * Emits a {Transfer} event.\n', '   */\n', '  function transferFrom(\n', '    address sender,\n', '    address recipient,\n', '    uint256 amount\n', '  ) external returns (bool);\n', '\n', '  /**\n', '   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '   * another (`to`).\n', '   *\n', '   * Note that `value` may be zero.\n', '   */\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '  /**\n', '   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '   * a call to {approve}. `value` is the new allowance.\n', '   */\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File contracts/libraries/SafeMath.sol\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '  /**\n', '   * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '   *\n', '   * _Available since v3.4._\n', '   */\n', '  function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '    uint256 c = a + b;\n', '    if (c < a) return (false, 0);\n', '    return (true, c);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '   *\n', '   * _Available since v3.4._\n', '   */\n', '  function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '    if (b > a) return (false, 0);\n', '    return (true, a - b);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '   *\n', '   * _Available since v3.4._\n', '   */\n', '  function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '    if (a == 0) return (true, 0);\n', '    uint256 c = a * b;\n', '    if (c / a != b) return (false, 0);\n', '    return (true, c);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '   *\n', '   * _Available since v3.4._\n', '   */\n', '  function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '    if (b == 0) return (false, 0);\n', '    return (true, a / b);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '   *\n', '   * _Available since v3.4._\n', '   */\n', '  function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '    if (b == 0) return (false, 0);\n', '    return (true, a % b);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the addition of two unsigned integers, reverting on\n', '   * overflow.\n', '   *\n', "   * Counterpart to Solidity's `+` operator.\n", '   *\n', '   * Requirements:\n', '   *\n', '   * - Addition cannot overflow.\n', '   */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a, "SafeMath: addition overflow");\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the subtraction of two unsigned integers, reverting on\n', '   * overflow (when the result is negative).\n', '   *\n', "   * Counterpart to Solidity's `-` operator.\n", '   *\n', '   * Requirements:\n', '   *\n', '   * - Subtraction cannot overflow.\n', '   */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a, "SafeMath: subtraction overflow");\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the multiplication of two unsigned integers, reverting on\n', '   * overflow.\n', '   *\n', "   * Counterpart to Solidity's `*` operator.\n", '   *\n', '   * Requirements:\n', '   *\n', '   * - Multiplication cannot overflow.\n', '   */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) return 0;\n', '    uint256 c = a * b;\n', '    require(c / a == b, "SafeMath: multiplication overflow");\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the integer division of two unsigned integers, reverting on\n', '   * division by zero. The result is rounded towards zero.\n', '   *\n', "   * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '   * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '   * uses an invalid opcode to revert (consuming all remaining gas).\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - The divisor cannot be zero.\n', '   */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0, "SafeMath: division by zero");\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '   * reverting when dividing by zero.\n', '   *\n', "   * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '   * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '   * invalid opcode to revert (consuming all remaining gas).\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - The divisor cannot be zero.\n', '   */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0, "SafeMath: modulo by zero");\n', '    return a % b;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '   * overflow (when the result is negative).\n', '   *\n', '   * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '   * message unnecessarily. For custom revert reasons use {trySub}.\n', '   *\n', "   * Counterpart to Solidity's `-` operator.\n", '   *\n', '   * Requirements:\n', '   *\n', '   * - Subtraction cannot overflow.\n', '   */\n', '  function sub(\n', '    uint256 a,\n', '    uint256 b,\n', '    string memory errorMessage\n', '  ) internal pure returns (uint256) {\n', '    require(b <= a, errorMessage);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '   * division by zero. The result is rounded towards zero.\n', '   *\n', '   * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '   * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '   *\n', "   * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '   * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '   * uses an invalid opcode to revert (consuming all remaining gas).\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - The divisor cannot be zero.\n', '   */\n', '  function div(\n', '    uint256 a,\n', '    uint256 b,\n', '    string memory errorMessage\n', '  ) internal pure returns (uint256) {\n', '    require(b > 0, errorMessage);\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '   * reverting with custom message when dividing by zero.\n', '   *\n', '   * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '   * message unnecessarily. For custom revert reasons use {tryMod}.\n', '   *\n', "   * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '   * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '   * invalid opcode to revert (consuming all remaining gas).\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - The divisor cannot be zero.\n', '   */\n', '  function mod(\n', '    uint256 a,\n', '    uint256 b,\n', '    string memory errorMessage\n', '  ) internal pure returns (uint256) {\n', '    require(b > 0, errorMessage);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '// File contracts/access/Context.sol\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '  function _msgSender() internal view virtual returns (address payable) {\n', '    return msg.sender;\n', '  }\n', '\n', '  function _msgData() internal view virtual returns (bytes memory) {\n', '    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '    return msg.data;\n', '  }\n', '}\n', '\n', '// File contracts/security/Pausable.sol\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'abstract contract Pausable is Context {\n', '  /**\n', '   * @dev Emitted when the pause is triggered by `account`.\n', '   */\n', '  event Paused(address account);\n', '\n', '  /**\n', '   * @dev Emitted when the pause is lifted by `account`.\n', '   */\n', '  event Unpaused(address account);\n', '\n', '  bool private _paused;\n', '\n', '  /**\n', '   * @dev Initializes the contract in unpaused state.\n', '   */\n', '  constructor() {\n', '    _paused = false;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns true if the contract is paused, and false otherwise.\n', '   */\n', '  function paused() public view virtual returns (bool) {\n', '    return _paused;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - The contract must not be paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused(), "Pausable: paused");\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - The contract must be paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused(), "Pausable: not paused");\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Triggers stopped state.\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - The contract must not be paused.\n', '   */\n', '  function _pause() internal virtual whenNotPaused {\n', '    _paused = true;\n', '    emit Paused(_msgSender());\n', '  }\n', '\n', '  /**\n', '   * @dev Returns to normal state.\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - The contract must be paused.\n', '   */\n', '  function _unpause() internal virtual whenPaused {\n', '    _paused = false;\n', '    emit Unpaused(_msgSender());\n', '  }\n', '}\n', '\n', '// File contracts/access/Ownable.sol\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', 'abstract contract Ownable is Pausable {\n', '  address public _owner;\n', '  address public _admin;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev Initializes the contract setting the deployer as the initial owner.\n', '   */\n', '  constructor(address ownerAddress) {\n', '    _owner = _msgSender();\n', '    _admin = ownerAddress;\n', '    emit OwnershipTransferred(address(0), _owner);\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyAdmin() {\n', '    require(_admin == _msgSender(), "Ownable: caller is not the admin");\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Leaves the contract without owner. It will not be possible to call\n', '   * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '   *\n', '   * NOTE: Renouncing ownership will leave the contract without an owner,\n', '   * thereby removing any functionality that is only available to the owner.\n', '   */\n', '  function renounceOwnership() public onlyAdmin {\n', '    emit OwnershipTransferred(_owner, _admin);\n', '    _owner = _admin;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '   * Can only be called by the current owner.\n', '   */\n', '  function transferOwnership(address newOwner) public virtual onlyOwner {\n', '    require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', '// File contracts/UnifarmToken.sol\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', 'contract UnifarmToken is Ownable {\n', '  /// @notice EIP-20 token name for this token\n', '  string public constant name = "UNIFARM Token";\n', '\n', '  /// @notice EIP-20 token symbol for this token\n', '  string public constant symbol = "UFARM";\n', '\n', '  /// @notice EIP-20 token decimals for this token\n', '  uint8 public constant decimals = 18;\n', '\n', '  /// @notice Total number of tokens in circulation\n', '  uint256 public totalSupply = 1000000000e18; // 1 billion UFARM\n', '\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => mapping(address => uint256)) internal allowances;\n', '\n', '  mapping(address => uint256) internal balances;\n', '\n', '  /// @notice A record of each accounts delegate\n', '  mapping(address => address) public delegates;\n', '\n', '  /// @notice A checkpoint for marking number of votes from a given block\n', '  struct Checkpoint {\n', '    uint32 fromBlock;\n', '    uint256 votes;\n', '  }\n', '\n', '  /// @notice A record of votes checkpoints for each account, by index\n', '  mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\n', '\n', '  mapping(address => uint256) public lockedTokens;\n', '\n', '  /// @notice The number of checkpoints for each account\n', '  mapping(address => uint32) public numCheckpoints;\n', '\n', "  /// @notice The EIP-712 typehash for the contract's domain\n", '  bytes32 public constant DOMAIN_TYPEHASH =\n', '    keccak256("EIP712Domain(string name,uint256 chainId,address verifyingContract)");\n', '\n', '  /// @notice The EIP-712 typehash for the delegation struct used by the contract\n', '  bytes32 public constant DELEGATION_TYPEHASH = keccak256("Delegation(address delegatee,uint256 nonce,uint256 expiry)");\n', '\n', '  /// @notice The EIP-712 typehash for the permit struct used by the contract\n', '  bytes32 public constant PERMIT_TYPEHASH =\n', '    keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");\n', '\n', '  /// @notice A record of states for signing / validating signatures\n', '  mapping(address => uint256) public nonces;\n', '\n', '  /// @notice An event thats emitted when an account changes its delegate\n', '  event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\n', '\n', "  /// @notice An event thats emitted when a delegate account's vote balance changes\n", '  event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\n', '\n', '  /// @notice The standard EIP-20 transfer event\n', '  event Transfer(address indexed from, address indexed to, uint256 amount);\n', '\n', '  /// @notice The standard EIP-20 approval event\n', '  event Approval(address indexed owner, address indexed spender, uint256 amount);\n', '\n', '  /**\n', '   * @notice Construct a new UFARM token\n', '   * @param account The initial account to grant all the tokens\n', '   */\n', '  constructor(address account) Ownable(account) {\n', '    balances[account] = uint256(totalSupply);\n', '    emit Transfer(address(0), account, totalSupply);\n', '  }\n', '\n', '  /**\n', '   * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\n', '   * @param account The address of the account holding the funds\n', '   * @param spender The address of the account spending the funds\n', '   * @return The number of tokens approved\n', '   */\n', '  function allowance(address account, address spender) external view returns (uint256) {\n', '    return allowances[account][spender];\n', '  }\n', '\n', '  /**\n', '   * @notice Approve `spender` to transfer up to `amount` from `src`\n', '   * @dev This will overwrite the approval amount for `spender`\n', '   *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n', '   * @param spender The address of the account which may transfer tokens\n', '   * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\n', '   * @return Whether or not the approval succeeded\n', '   */\n', '  function approve(address spender, uint256 rawAmount) external returns (bool) {\n', '    require(spender != address(0), "UFARM::approve: invalid spender address");\n', '\n', '    uint256 amount;\n', '    if (rawAmount == uint256(-1)) {\n', '      amount = uint256(-1);\n', '    } else {\n', '      amount = rawAmount; //safe96(rawAmount, "UFARM::approve: amount exceeds 96 bits");\n', '    }\n', '\n', '    allowances[msg.sender][spender] = amount;\n', '\n', '    emit Approval(msg.sender, spender, amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '   *\n', '   * This is an alternative to {approve} that can be used as a mitigation for\n', '   * problems described in {IERC20-approve}.\n', '   *\n', '   * Emits an {Approval} event indicating the updated allowance.\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - `spender` cannot be the zero address.\n', '   */\n', '  function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\n', '    require(spender != address(0), "UFARM::approve: invalid spender address");\n', '    uint256 newAllowance = allowances[_msgSender()][spender].add(addedValue);\n', '    allowances[_msgSender()][spender] = newAllowance;\n', '    emit Approval(msg.sender, spender, newAllowance);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '   *\n', '   * This is an alternative to {approve} that can be used as a mitigation for\n', '   * problems described in {IERC20-approve}.\n', '   *\n', '   * Emits an {Approval} event indicating the updated allowance.\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - `spender` cannot be the zero address.\n', '   * - `spender` must have allowance for the caller of at least\n', '   * `subtractedValue`.\n', '   */\n', '  function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\n', '    require(spender != address(0), "UFARM::approve: invalid spender address");\n', '    uint256 currentAllowance = allowances[_msgSender()][spender];\n', '    require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");\n', '\n', '    allowances[_msgSender()][spender] = currentAllowance.sub(subtractedValue);\n', '    emit Approval(msg.sender, spender, currentAllowance.sub(subtractedValue));\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @notice Triggers an approval from owner to spends\n', '   * @param owner The address to approve from\n', '   * @param spender The address to be approved\n', '   * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\n', '   * @param deadline The time at which to expire the signature\n', '   * @param v The recovery byte of the signature\n', '   * @param r Half of the ECDSA signature pair\n', '   * @param s Half of the ECDSA signature pair\n', '   */\n', '  function permit(\n', '    address owner,\n', '    address spender,\n', '    uint256 rawAmount,\n', '    uint256 deadline,\n', '    uint8 v,\n', '    bytes32 r,\n', '    bytes32 s\n', '  ) external {\n', '    uint256 amount;\n', '    if (rawAmount == uint256(-1)) {\n', '      amount = uint256(-1);\n', '    } else {\n', '      amount = rawAmount; //safe96(rawAmount, "UFARM::permit: amount exceeds 96 bits");\n', '    }\n', '\n', '    bytes32 domainSeparator =\n', '      keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\n', '    bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, rawAmount, nonces[owner]++, deadline));\n', '    bytes32 digest = keccak256(abi.encodePacked("\\x19\\x01", domainSeparator, structHash));\n', '    address signatory = ecrecover(digest, v, r, s);\n', '    require(signatory != address(0), "UFARM::permit: invalid signature");\n', '    require(signatory == owner, "UFARM::permit: unauthorized");\n', '    require(block.timestamp <= deadline, "UFARM::permit: signature expired");\n', '\n', '    allowances[owner][spender] = amount;\n', '\n', '    emit Approval(owner, spender, amount);\n', '  }\n', '\n', '  /**\n', '   * @notice Get the number of tokens held by the `account`\n', '   * @param account The address of the account to get the balance of\n', '   * @return The number of tokens held\n', '   */\n', '  function balanceOf(address account) external view returns (uint256) {\n', '    return balances[account];\n', '  }\n', '\n', '  /**\n', '   * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n', '   * @param dst The address of the destination account\n', '   * @param rawAmount The number of tokens to transfer\n', '   * @return Whether or not the transfer succeeded\n', '   */\n', '  function transfer(address dst, uint256 rawAmount) external returns (bool) {\n', '    _transferTokens(msg.sender, dst, rawAmount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfer `amount` tokens from `src` to `dst`\n', '   * @param src The address of the source account\n', '   * @param dst The address of the destination account\n', '   * @param rawAmount The number of tokens to transfer\n', '   * @return Whether or not the transfer succeeded\n', '   */\n', '  function transferFrom(\n', '    address src,\n', '    address dst,\n', '    uint256 rawAmount\n', '  ) external returns (bool) {\n', '    address spender = msg.sender;\n', '    uint256 spenderAllowance = allowances[src][spender];\n', '\n', '    if (spender != src && spenderAllowance != uint256(-1)) {\n', '      uint256 newAllowance = spenderAllowance.sub(rawAmount, "UFARM::transferFrom: exceeds allowance");\n', '      allowances[src][spender] = newAllowance;\n', '\n', '      emit Approval(src, spender, newAllowance);\n', '    }\n', '\n', '    _transferTokens(src, dst, rawAmount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @notice Delegate votes from `msg.sender` to `delegatee`\n', '   * @param delegatee The address to delegate votes to\n', '   */\n', '  function delegate(address delegatee) external returns (bool) {\n', '    _delegate(msg.sender, delegatee);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @notice Delegates votes from signatory to `delegatee`\n', '   * @param delegatee The address to delegate votes to\n', '   * @param nonce The contract state required to match the signature\n', '   * @param expiry The time at which to expire the signature\n', '   * @param v The recovery byte of the signature\n', '   * @param r Half of the ECDSA signature pair\n', '   * @param s Half of the ECDSA signature pair\n', '   */\n', '  function delegateBySig(\n', '    address delegatee,\n', '    uint256 nonce,\n', '    uint256 expiry,\n', '    uint8 v,\n', '    bytes32 r,\n', '    bytes32 s\n', '  ) external {\n', '    require(block.timestamp <= expiry, "UFARM::delegateBySig: signature expired");\n', '    bytes32 domainSeparator =\n', '      keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\n', '    bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\n', '    bytes32 digest = keccak256(abi.encodePacked("\\x19\\x01", domainSeparator, structHash));\n', '    address signatory = ecrecover(digest, v, r, s);\n', '    require(signatory != address(0), "UFARM::delegateBySig: invalid signature");\n', '    require(nonce == nonces[signatory]++, "UFARM::delegateBySig: invalid nonce");\n', '    return _delegate(signatory, delegatee);\n', '  }\n', '\n', '  /**\n', '   * @notice Gets the current votes balance for `account`\n', '   * @param account The address to get votes balance\n', '   * @return The number of current votes for `account`\n', '   */\n', '  function getCurrentVotes(address account) external view returns (uint256) {\n', '    uint32 nCheckpoints = numCheckpoints[account];\n', '    return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\n', '  }\n', '\n', '  /**\n', '   * @notice Determine the prior number of votes for an account as of a block number\n', '   * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\n', '   * @param account The address of the account to check\n', '   * @param blockNumber The block number to get the vote balance at\n', '   * @return The number of votes the account had as of the given block\n', '   */\n', '  function getPriorVotes(address account, uint256 blockNumber) external view returns (uint256) {\n', '    require(blockNumber < block.number, "UFARM::getPriorVotes: not yet determined");\n', '\n', '    uint32 nCheckpoints = numCheckpoints[account];\n', '    if (nCheckpoints == 0) {\n', '      return 0;\n', '    }\n', '\n', '    // First check most recent balance\n', '    if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\n', '      return checkpoints[account][nCheckpoints - 1].votes;\n', '    }\n', '\n', '    // Next check implicit zero balance\n', '    if (checkpoints[account][0].fromBlock > blockNumber) {\n', '      return 0;\n', '    }\n', '\n', '    uint32 lower = 0;\n', '    uint32 upper = nCheckpoints - 1;\n', '    while (upper > lower) {\n', '      uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n', '      Checkpoint memory cp = checkpoints[account][center];\n', '      if (cp.fromBlock == blockNumber) {\n', '        return cp.votes;\n', '      } else if (cp.fromBlock < blockNumber) {\n', '        lower = center;\n', '      } else {\n', '        upper = center - 1;\n', '      }\n', '    }\n', '    return checkpoints[account][lower].votes;\n', '  }\n', '\n', '  /**\n', '   * @notice burn the token of any token holder.\n', '   * @dev balance should be greater than amount. function will revert will balance is less than amount.\n', '   * @param holder the addrress of token holder.\n', '   * @param amount number of tokens to burn.\n', '   * @return true when burnToken succeeded.\n', '   */\n', '\n', '  function burnToken(address holder, uint256 amount) external onlyOwner returns (bool) {\n', '    require(balances[holder] >= amount, "UFARM::burnToken: Insufficient balance");\n', '\n', '    balances[holder] = balances[holder].sub(amount);\n', '    totalSupply = totalSupply.sub(amount);\n', '    _moveDelegates(delegates[holder], delegates[address(0)], amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @notice lock the token of any token holder.\n', '   * @dev balance should be greater than amount. function will revert will balance is less than amount.\n', '   * @param holder the addrress of token holder.\n', '   * @param amount number of tokens to burn.\n', '   * @return true when lockToken succeeded.\n', '   */\n', '\n', '  function lockToken(address holder, uint256 amount) external onlyOwner returns (bool) {\n', '    require(balances[holder] >= amount, "UFARM::burnToken: Insufficient balance");\n', '\n', '    balances[holder] = balances[holder].sub(amount);\n', '    lockedTokens[holder] = lockedTokens[holder].add(amount);\n', '    _moveDelegates(delegates[holder], delegates[address(0)], amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @notice unLock the token of any token holder.\n', '   * @dev locked balance should be greater than amount. function will revert will locked balance is less than amount.\n', '   * @param holder the addrress of token holder.\n', '   * @param amount number of tokens to burn.\n', '   * @return true when unLockToken succeeded.\n', '   */\n', '\n', '  function unlockToken(address holder, uint256 amount) external onlyOwner returns (bool) {\n', '    require(lockedTokens[holder] >= amount, "UFARM::unlockToken: OverflowLocked balance");\n', '\n', '    lockedTokens[holder] = lockedTokens[holder].sub(amount);\n', '    balances[holder] = balances[holder].add(amount);\n', '    _moveDelegates(delegates[address(0)], delegates[holder], amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @notice set the delegatee.\n', '   * @dev delegatee address should not be zero address.\n', '   * @param delegator the addrress of token holder.\n', '   * @param delegatee number of tokens to burn.\n', '   */\n', '\n', '  function _delegate(address delegator, address delegatee) internal {\n', '    require(delegatee != address(0), "UFARM::_delegate: invalid delegatee address");\n', '    address currentDelegate = delegates[delegator];\n', '    uint256 delegatorBalance = balances[delegator];\n', '    delegates[delegator] = delegatee;\n', '\n', '    emit DelegateChanged(delegator, currentDelegate, delegatee);\n', '\n', '    _moveDelegates(currentDelegate, delegatee, delegatorBalance);\n', '  }\n', '\n', '  /**\n', '   * @notice transfer tokens to src --> dst.\n', '   * @dev src address should be valid ethereum address.\n', '   * @dev dst address should be valid ethereum address.\n', '   * @dev amount should be greater than zero.\n', '   * @param src the source address.\n', '   * @param dst the destination address.\n', '   * @param amount number of token to transfer.\n', '   */\n', '\n', '  function _transferTokens(\n', '    address src,\n', '    address dst,\n', '    uint256 amount\n', '  ) internal {\n', '    require(src != address(0), "UFARM::_transferTokens: cannot transfer from the zero address");\n', '    require(dst != address(0), "UFARM::_transferTokens: cannot transfer to the zero address");\n', '    require(amount > 0, "UFARM::_transferTokens: invalid amount wut??");\n', '\n', '    balances[src] = balances[src].sub(amount, "UFARM::_transferTokens: exceeds balance");\n', '    balances[dst] = balances[dst].add(amount);\n', '    emit Transfer(src, dst, amount);\n', '\n', '    _moveDelegates(delegates[src], delegates[dst], amount);\n', '  }\n', '\n', '  /**\n', '   * @notice transfer the vote token.\n', '   * @dev srcRep address should be valid ethereum address.\n', '   * @dev dstRep address should be valid ethereum address.\n', '   * @dev amount should be greater than zero.\n', '   * @param srcRep the source vote address.\n', '   * @param dstRep the destination vote address.\n', '   * @param amount number of vote token to transfer.\n', '   */\n', '\n', '  function _moveDelegates(\n', '    address srcRep,\n', '    address dstRep,\n', '    uint256 amount\n', '  ) internal {\n', '    if (srcRep != dstRep && amount > 0) {\n', '      if (srcRep != address(0)) {\n', '        uint32 srcRepNum = numCheckpoints[srcRep];\n', '        uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\n', '        uint256 srcRepNew = srcRepOld.sub(amount);\n', '        _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\n', '      }\n', '\n', '      if (dstRep != address(0)) {\n', '        uint32 dstRepNum = numCheckpoints[dstRep];\n', '        uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\n', '        uint256 dstRepNew = dstRepOld.add(amount);\n', '        _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\n', '      }\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @notice write checkpoint for delegatee.\n', '   * @dev blocknumber should be uint32.\n', '   * @param delegatee the address of delegatee.\n', '   * @param nCheckpoints no of checkpoints.\n', '   * @param oldVotes number of old votes.\n', '   * @param newVotes number of new votes.\n', '   */\n', '\n', '  function _writeCheckpoint(\n', '    address delegatee,\n', '    uint32 nCheckpoints,\n', '    uint256 oldVotes,\n', '    uint256 newVotes\n', '  ) internal {\n', '    uint32 blockNumber = safe32(block.number, "UFARM::_writeCheckpoint: block number exceeds 32 bits");\n', '\n', '    if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\n', '      checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\n', '    } else {\n', '      checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\n', '      numCheckpoints[delegatee] = nCheckpoints + 1;\n', '    }\n', '\n', '    emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\n', '  }\n', '\n', '  /**\n', '   * @notice safe32 function using for uint32 type.\n', '   * @param n the data.\n', '   * @param errorMessage set the errorMessage.\n', '   * @return uint32 data.\n', '   */\n', '\n', '  function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\n', '    require(n < 2**32, errorMessage);\n', '    return uint32(n);\n', '  }\n', '\n', '  /**\n', '   * @notice get the chainId from inline assembly.\n', '   * @return uint256 chainId of Node.\n', '   */\n', '\n', '  function getChainId() internal pure returns (uint256) {\n', '    uint256 chainId;\n', '    assembly {\n', '      chainId := chainid()\n', '    }\n', '    return chainId;\n', '  }\n', '}']