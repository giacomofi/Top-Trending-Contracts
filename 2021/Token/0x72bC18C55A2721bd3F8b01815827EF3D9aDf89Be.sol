['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-09\n', '*/\n', '\n', '/**\n', ' *https://github.com/agelessZeal\n', '*/\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', '// SPDX-License-Identifier: UNLICENSED\n', 'contract ZeroDeposit {\n', '\n', '    event Deposit(address indexed account, uint32 indexed orderId, uint256 amount);\n', '    event Paused(address account);\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '    address private _owner;\n', '    mapping (uint32 => uint256) private orderToBalance;\n', '    uint256 private _buyers;\n', '    \n', '\n', '    function buyers() public view returns (uint256) {\n', '        return _buyers;\n', '    }\n', '    \n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    modifier whenNotPaused() {\n', '        require(!paused(), "Contract is paused.");\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused() {\n', '        require(paused(), "Contract is not paused.");\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(_owner == msg.sender, "Can only be called by owner.");\n', '        _;\n', '    }\n', '\n', '    constructor() {\n', '        _owner = msg.sender;\n', '        _paused = false;\n', '        _buyers = 0;\n', '    }\n', '\n', '    function deposit(uint32 orderId) public payable whenNotPaused {\n', '        require(msg.value > 0, "No value provided to deposit.");\n', '        orderToBalance[orderId] = orderToBalance[orderId] + msg.value;\n', '        _buyers += 1;\n', '        emit Deposit(msg.sender, orderId, msg.value);\n', '    }\n', '\n', '    function getOrderBalance(uint32 orderId) public view returns (uint256) {\n', '        return orderToBalance[orderId];\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------------------------------------\n', '\n', '    // Only owner functionality below here\n', '    function pause() public whenNotPaused onlyOwner {\n', '        _paused = true;\n', '        emit Paused(msg.sender);\n', '    }\n', '\n', '    function unpause() public whenPaused onlyOwner {\n', '        _paused = false;\n', '        emit Unpaused(msg.sender);\n', '    }\n', '\n', '    function withdraw(address payable account, uint256 amount) public onlyOwner {\n', '        require(amount > 0, "No value provided to withdraw.");\n', '        sendValue(account, amount);\n', '    }\n', '\n', '    function withdrawAll(address payable account) public onlyOwner {\n', '        sendValue(account, address(this).balance);\n', '    }\n', '\n', '    function sendValue(address payable recipient, uint256 amount) private {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}']