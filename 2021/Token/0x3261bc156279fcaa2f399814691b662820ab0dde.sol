['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-27\n', '*/\n', '\n', 'pragma solidity ^0.7.4;\n', '\n', 'interface erc20 {\n', '    function transferFrom(address  sender, address recipient, uint256 amount) external returns (bool);\n', '    function approval(address owner, address spender) external view returns (uint256);\n', '    function balanceOf(address _owner) external view returns (uint256 balance);\n', '}\n', '\n', 'interface erc721 {\n', '    function ownerOf(uint n) external view returns (address);\n', '}\n', '\n', 'contract bulkSender {\n', '\n', '    address owner = msg.sender;\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner,"Unauthorised");\n', '        _;\n', '    }\n', '\n', '    event EtherSent(address indexed to, uint256 value);\n', '    event EtherFailed(address indexed to, uint256 value);\n', '\n', '    event TokensSent(erc20 indexed token,address indexed to, uint256 value);\n', '    event TokensFailed(erc20 indexed token, address indexed to, uint256 value);\n', '\n', '    function sendEther(address payable[] memory _recipients, uint256[] memory _values) public payable onlyOwner {\n', '        require(_recipients.length == _values.length,"number of recipients <> number of values");\n', '        for (uint i = 0; i < _values.length; i++) {\n', '            require(address(this).balance >= _values[i],"Insuficcient balance");\n', '            if (_recipients[i].send(_values[i])){\n', '                emit EtherSent(_recipients[i], _values[i]);\n', '            } else {\n', '                emit EtherFailed(_recipients[i], _values[i]);\n', '            }\n', '        }\n', '        msg.sender.transfer(address(this).balance);\n', '    }\n', '\n', '    function sendTokens(erc20 token, address[] memory _recipients, uint256[] memory _values) public onlyOwner {\n', '        sendTokensFrom(token, msg.sender, _recipients, _values);\n', '    }\n', '\n', '    function sendTokensFrom(erc20 token, address source, address[] memory _recipients, uint256[] memory _values) public onlyOwner {\n', '        require(_recipients.length == _values.length,"number of recipients <> number of values");\n', '        for (uint i = 0; i < _values.length; i++) {\n', '            if (token.transferFrom(source,_recipients[i],_values[i])) {\n', '                emit TokensSent(token,_recipients[i], _values[i]);\n', '            } else {\n', '                emit TokensFailed(token,_recipients[i], _values[i]);\n', '            }\n', '        }\n', '    }\n', '\n', '}']