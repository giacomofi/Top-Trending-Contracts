['# @version 0.2.12\n', '"""\n', '@title Polymer\n', '@license MIT\n', '@author Original: Takayuki Jimba (@yudetamago), Editor: Polymer\n', '@notice Polymer is the token used in the Polymer ecosystem.\n', '"""\n', '\n', 'from vyper.interfaces import ERC20\n', '\n', 'implements: ERC20\n', '\n', 'event Transfer:\n', '    sender: indexed(address)\n', '    receiver: indexed(address)\n', '    value: uint256\n', '\n', '\n', 'event Approval:\n', '    owner: indexed(address)\n', '    spender: indexed(address)\n', '    value: uint256\n', '\n', '\n', 'event OwnerChange:\n', '    owner: indexed(address)\n', '\n', '\n', 'event MinterChange:\n', '    minter: indexed(address)\n', '\n', '\n', '# Public variables\n', 'name: public(String[64])\n', 'symbol: public(String[32])\n', 'decimals: public(uint256)\n', '\n', '# Function variables\n', 'balanceOf: public(HashMap[address, uint256])\n', 'allowance: public(HashMap[address, HashMap[address, uint256]])\n', 'totalSupply: public(uint256)\n', 'minter: public(address)\n', 'owner: public(address)\n', '\n', '\n', '@external\n', 'def __init__(_name: String[64], _symbol: String[32], _decimals: uint256, _supply: uint256, source: address):\n', '    init_supply: uint256 = _supply * 10 ** _decimals\n', '    self.name = _name\n', '    self.symbol = _symbol\n', '    self.decimals = _decimals\n', '    self.balanceOf[msg.sender] = init_supply\n', '    self.totalSupply = init_supply\n', '    self.minter = source\n', '    self.owner = msg.sender\n', '    log Transfer(ZERO_ADDRESS, msg.sender, init_supply)\n', '\n', '\n', '@external\n', 'def setOwner(_owner : address):\n', '    """\n', '    @notice Sets the owner\n', '    @param _owner address The new owner\n', '    """\n', '    assert self.owner == msg.sender, "Staff Only"\n', '\n', '    self.owner = _owner\n', '\n', '    log OwnerChange(_owner)\n', '\n', '\n', '@external\n', 'def setMinter(_minter : address):\n', '    assert self.owner == msg.sender, "Staff Only"\n', '\n', '    self.minter = _minter\n', '\n', '    log MinterChange(_minter)\n', '\n', '\n', '@external\n', 'def transfer(_to : address, _value : uint256) -> bool:\n', '    """\n', '    @dev Transfer token for a specified address\n', '    @param _to The address to transfer to.\n', '    @param _value The amount to be transferred.\n', '    """\n', '    # NOTE: vyper does not allow underflows\n', '    #       so the following subtraction would revert on insufficient balance\n', '    self.balanceOf[msg.sender] -= _value\n', '    self.balanceOf[_to] += _value\n', '    log Transfer(msg.sender, _to, _value)\n', '    return True\n', '\n', '\n', '@external\n', 'def transferFrom(_from : address, _to : address, _value : uint256) -> bool:\n', '    """\n', '     @dev Transfer tokens from one address to another.\n', '     @param _from address The address which you want to send tokens from\n', '     @param _to address The address which you want to transfer to\n', '     @param _value uint256 the amount of tokens to be transferred\n', '    """\n', '    # NOTE: vyper does not allow underflows\n', '    #       so the following subtraction would revert on insufficient balance\n', '    self.balanceOf[_from] -= _value\n', '    self.balanceOf[_to] += _value\n', '    # NOTE: vyper does not allow underflows\n', '    #      so the following subtraction would revert on insufficient allowance\n', '    if self.allowance[_from][msg.sender] != MAX_UINT256:\n', '        self.allowance[_from][msg.sender] -= _value\n', '    log Transfer(_from, _to, _value)\n', '    return True\n', '\n', '\n', '@external\n', 'def approve(_spender : address, _value : uint256) -> bool:\n', '    """\n', '    @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '         Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '         and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "         race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '         https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    @param _spender The address which will spend the funds.\n', '    @param _value The amount of tokens to be spent.\n', '    """\n', '    self.allowance[msg.sender][_spender] = _value\n', '    log Approval(msg.sender, _spender, _value)\n', '    return True\n', '\n', '\n', '@external\n', 'def mint(_to: address, _value: uint256):\n', '    """\n', '    @dev Mint an amount of the token and assigns it to an account.\n', '         This encapsulates the modification of balances such that the\n', '         proper events are emitted.\n', '    @param _to The account that will receive the created tokens.\n', '    @param _value The amount that will be created.\n', '    """\n', '    assert msg.sender == self.minter, "Seniors Only"\n', '    assert _to != ZERO_ADDRESS\n', '    self.totalSupply += _value\n', '    self.balanceOf[_to] += _value\n', '    log Transfer(ZERO_ADDRESS, _to, _value)\n', '\n', '\n', '@internal\n', 'def _burn(_from: address, _value: uint256):\n', '    """\n', '    @dev Internal function that burns an amount of the token of a given\n', '         account.\n', '    @param _from The account whose tokens will be burned.\n', '    @param _value The amount that will be burned.\n', '    """\n', '    assert _from != ZERO_ADDRESS\n', '    self.totalSupply -= _value\n', '    self.balanceOf[_from] -= _value\n', '    log Transfer(_from, ZERO_ADDRESS, _value)\n', '\n', '\n', '@external\n', 'def burn(_value: uint256):\n', '    """\n', '    @dev Burn an amount of the token of msg.sender.\n', '    @param _value The amount that will be burned.\n', '    """\n', '    self._burn(msg.sender, _value)\n', '\n', '\n', '@external\n', 'def burnFrom(_from: address, _value: uint256):\n', '    """\n', '    @dev Burn an amount of the token from a given account.\n', '    @param _from The account whose tokens will be burned.\n', '    @param _value The amount that will be burned.\n', '    """\n', '    if self.allowance[_from][msg.sender] != MAX_UINT256:\n', '        self.allowance[_from][msg.sender] -= _value\n', '    self._burn(_from, _value)']