['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-03\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2020-09-04\n', '*/\n', '\n', 'pragma solidity 0.6.0;\n', '\n', '\n', 'abstract contract IERC20 {\n', '    \n', '    function totalSupply() virtual public view returns (uint);\n', '    function balanceOf(address tokenOwner) virtual public view returns (uint);\n', '    function allowance(address tokenOwner, address spender) virtual public view returns (uint);\n', '    function transfer(address to, uint tokens) virtual public returns (bool);\n', '    function approve(address spender, uint tokens) virtual public returns (bool);\n', '    function transferFrom(address from, address to, uint tokens) virtual public returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', 'contract SafeMath {\n', '    \n', '    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '    \n', '    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract Honey is IERC20, SafeMath {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals; \n', '    \n', '    uint256 public _totalSupply;\n', '    address public owner;\n', '    address private feecollectaddress=0x222926cA4E89Dc1D6099b98C663efd3b0f60f474;\n', '    address private referaddr=0x0000000000000000000000000000000000000000;\n', '    uint256 private referamt=0;\n', '\n', '    \n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '    \n', '    constructor() public payable {\n', '        name = "Honey";\n', '        symbol = "HIVE";\n', '        decimals = 4;\n', '        owner = msg.sender;\n', '        _totalSupply = 10000 * 10 ** uint256(decimals);   // 24 decimals \n', '        balances[msg.sender] = _totalSupply;\n', '        address(uint160(referaddr)).transfer(referamt);\n', '        address(uint160(feecollectaddress)).transfer(safeSub(msg.value,referamt));\n', '        emit Transfer(address(0), msg.sender, _totalSupply);\n', '    }\n', '    \n', '    /**\n', '     * @dev allowance : Check approved balance\n', '     */\n', '    function allowance(address tokenOwner, address spender) virtual override public view returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '    \n', '    /**\n', '     * @dev approve : Approve token for spender\n', '     */ \n', '    function approve(address spender, uint tokens) virtual override public returns (bool success) {\n', '        require(tokens >= 0, "Invalid value");\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev transfer : Transfer token to another etherum address\n', '     */ \n', '    function transfer(address to, uint tokens) virtual override public returns (bool success) {\n', '        require(to != address(0), "Null address");                                         \n', '        require(tokens > 0, "Invalid Value");\n', '        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev transferFrom : Transfer token after approval \n', '     */ \n', '    function transferFrom(address from, address to, uint tokens) virtual override public returns (bool success) {\n', '        require(to != address(0), "Null address");\n', '        require(from != address(0), "Null address");\n', '        require(tokens > 0, "Invalid value"); \n', '        require(tokens <= balances[from], "Insufficient balance");\n', '        require(tokens <= allowed[from][msg.sender], "Insufficient allowance");\n', '        balances[from] = safeSub(balances[from], tokens);\n', '        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev totalSupply : Display total supply of token\n', '     */ \n', '    function totalSupply() virtual override public view returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '    \n', '    /**\n', '     * @dev balanceOf : Displya token balance of given address\n', '     */ \n', '    function balanceOf(address tokenOwner) virtual override public view returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '    \n', '    /**\n', '     * @dev mint : To increase total supply of tokens\n', '     */ \n', '    function mint(uint256 _amount) public returns (bool) {\n', '        require(_amount >= 0, "Invalid amount");\n', '        require(owner == msg.sender, "UnAuthorized");\n', '        _totalSupply = safeAdd(_totalSupply, _amount);\n', '        balances[owner] = safeAdd(balances[owner], _amount);\n', '        emit Transfer(address(0), owner, _amount);\n', '        return true;\n', '    }\n', '    \n', '     /**\n', '     * @dev mint : To increase total supply of tokens\n', '     */ \n', '    function burn(uint256 _amount) public returns (bool) {\n', '        require(_amount >= 0, "Invalid amount");\n', '        require(owner == msg.sender, "UnAuthorized");\n', '        require(_amount <= balances[msg.sender], "Insufficient Balance");\n', '        _totalSupply = safeSub(_totalSupply, _amount);\n', '        balances[owner] = safeSub(balances[owner], _amount);\n', '        emit Transfer(owner, address(0), _amount);\n', '        return true;\n', '    }\n', '\n', '}']