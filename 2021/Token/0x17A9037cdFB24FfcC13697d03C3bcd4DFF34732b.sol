['pragma solidity ^0.5.0;\n', '\n', 'import "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '\n', '// interface for legacy ERC20 tokens e.g. USDT\n', 'interface IERC20Legacy {\n', '  function transfer(address _to, uint _value) external;\n', '  function balanceOf(address who) external view returns (uint);\n', '}\n', '\n', 'contract WalleBot {\n', '  event TransferSuccess(IERC20 token);\n', '  event OwnerAdded(address owner);\n', '  event OwnerRemoved(address owner);\n', '\n', '  address[4] _owners;\n', '\n', '\tconstructor() public {\n', '    _owners[0] = msg.sender;\n', '\t}\n', '\n', '  modifier onlyOwner() {\n', '      require(isOwner(), "Ownable: caller is not the owner");\n', '      _;\n', '  }\n', '\n', '  function isOwner() public view returns (bool) {\n', '      return isOwnerForAddress(msg.sender);\n', '  }\n', '\n', '  function isOwnerForAddress(address addr) public view returns (bool) {\n', '      if (addr == address(0)) {\n', '        return false;\n', '      }\n', '      for (uint i = 0; i < _owners.length; i++) {\n', '        if (addr == _owners[i]) {\n', '          return true;\n', '        }\n', '      }\n', '      return false;\n', '  }\n', '\n', '  function owners() public view returns (address[4] memory) {\n', '    return _owners;\n', '  }\n', '\n', '  function setOwner(uint index, address addr) public onlyOwner {\n', '    require(index < 4, "invalid index!");\n', '    address oldAddr = _owners[index];\n', '    _owners[index] = addr;\n', '    if (oldAddr != address(0)) {\n', '      emit OwnerRemoved(oldAddr);\n', '    }\n', '    emit OwnerAdded(addr);\n', '  }\n', '\n', '\n', '  function removeOwner(uint index) public onlyOwner {\n', '    require(index < 4, "invalid index!");\n', '    address addr = _owners[index];\n', '    _owners[index] = address(0);\n', '    emit OwnerRemoved(addr);\n', '  }\n', '\n', '\tfunction batchSend(IERC20 token, address[] memory receiver, uint[] memory amounts) public onlyOwner returns(bool sufficient) {\n', '    require(receiver.length == amounts.length, "WalleBot: address should match amounts");\n', '    for (uint i = 0; i < receiver.length; i++) {\n', '      require(token.transfer(receiver[i], amounts[i]), "WalleBot: transfer failed");\n', '    }\n', '    emit TransferSuccess(token);\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction getBalance(IERC20 token) public view returns(uint) {\n', '\t\treturn token.balanceOf(address(this));\n', '\t}\n', '\n', '  function withdraw(IERC20 token) public onlyOwner returns (bool) {\n', '    token.transfer(msg.sender, token.balanceOf(address(this)));\n', '    return true;\n', '  }\n', '\n', '  // allow withdraw legacy erc 20 tokens\n', '  function withdrawLegacy(IERC20Legacy token) public onlyOwner returns (bool) {\n', '    token.transfer(msg.sender, token.balanceOf(address(this)));\n', '    return true;\n', '  }\n', '}\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}']