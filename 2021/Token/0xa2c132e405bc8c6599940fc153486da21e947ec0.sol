['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-04\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.0;\n', 'pragma experimental ABIEncoderV2;\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath{\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) \n', '    {\n', '        if (a == 0) {\n', '        return 0;}\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) \n', '    {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) \n', '    {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) \n', '    {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '}\n', '/**\n', ' * @dev Interface of the ERC standard.\n', ' */\n', 'pragma solidity ^0.8.0;\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract Staker {\n', '    using SafeMath for uint;\n', '    \n', '    IERC20 public xDNA;\n', '    uint[] timespans = [2592000, 7776000, 15552000, 31536000];\n', '    uint[] rates = [103, 110, 123, 149];\n', '    mapping(uint => address) public ownerOf;\n', '    struct Stake {\n', '        uint amount;\n', '        uint reward;\n', '        uint start;\n', '        uint8 timespan;\n', '        bool withdrawn;\n', '        uint256 stakedAt;\n', '    }\n', '    Stake[] public stakes;\n', '\n', '    function stake(uint _amount, uint8 _timespan) public returns (uint _tokenId) {\n', "        require(block.timestamp < 1656547200,'Cannot Stake Amount After 30th June,2022');\n", "        require(_amount >= 1000000000000000000,'Minimum of 1 token can be staked');\n", '        require(_timespan < 4);\n', '        require(xDNA.transferFrom(msg.sender, address(this), _amount));\n', '        Stake memory _stake = Stake({\n', '            amount: _amount,\n', '            reward:_amount.mul(rates[_timespan]).div(100),\n', '            start: block.timestamp,\n', '            timespan: _timespan,\n', '            withdrawn: false,\n', '            stakedAt:block.timestamp\n', '        });\n', '        _tokenId = stakes.length;\n', '        stakes.push(_stake);\n', '        ownerOf[_tokenId] = msg.sender;\n', '    }\n', '    \n', '    function unstake(uint _id) public {\n', '        require(msg.sender == ownerOf[_id]);\n', '        Stake storage _s = stakes[_id];\n', '        uint8 _t = _s.timespan;\n', '        require(_s.withdrawn == false);\n', '        require(block.timestamp >= _s.start + timespans[_t]);\n', '        require(xDNA.transfer(msg.sender, _s.amount.mul(rates[_t]).div(100)));\n', '        _s.withdrawn = true;\n', '    }\n', '    \n', '   \n', '    function tokenUsed() public view returns (IERC20 t) {\n', '        return xDNA;\n', '    }\n', '    function tokensOf(address _owner) public view returns (Stake[] memory ownerTokens) {\n', '        uint _count = 0;\n', '        for (uint i = 0; i < stakes.length; i++) {\n', '            if (ownerOf[i] == _owner) _count++;\n', '        }\n', '        if (_count == 0) return new Stake[](0);\n', '        ownerTokens = new Stake[](_count);\n', '        uint _index = 0;        \n', '        for (uint i = 0; i < stakes.length; i++) {\n', '\n', '            if (ownerOf[i] == _owner) ownerTokens[_index++] = stakes[i];\n', '        }\n', '    }\n', '    \n', '    constructor (IERC20 _token) {\n', '        xDNA = IERC20(_token);\n', '    }\n', '}']