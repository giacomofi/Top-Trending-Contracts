['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-09\n', '*/\n', '\n', 'pragma abicoder v2;\n', 'pragma solidity ^0.7.0;\n', '\n', 'contract BulkTokenMetadata {\n', '    struct Token {\n', '        address token_address;\n', '        uint totalSupply;\n', '        uint decimals;\n', '        string symbol;\n', '        string name;\n', '    }\n', '\n', '  function getTokens(address[] calldata tokenAddresses) external view returns (Token[] memory tokens) {\n', '    tokens = new Token[](tokenAddresses.length);\n', '    \n', '    for(uint i = 0; i < tokenAddresses.length; i++) {\n', '      if(isAContract(tokenAddresses[i])) {\n', '        try this.getTokenInfo(tokenAddresses[i]) returns (Token memory token) {\n', '          tokens[i] = token;\n', '        } catch {\n', '          tokens[i] = Token(address(0), 0, 0, "", "");  \n', '        }\n', '      } else {\n', '        tokens[i] = Token(address(0), 0, 0, "", "");   \n', '      }\n', '    }\n', '    return tokens;\n', '  }\n', '  \n', '  function getTokenInfo(address tokenAddress) public view returns (Token memory token) {\n', '    token = Token(tokenAddress, ERC20(tokenAddress).totalSupply(), ERC20(tokenAddress).decimals(), ERC20(tokenAddress).symbol(), ERC20(tokenAddress).name());\n', '  }\n', '    \n', "  // check if contract (token, exchange) is actually a smart contract and not a 'regular' address\n", '  function isAContract(address contractAddr) internal view returns (bool) {\n', '    uint256 codeSize;\n', '    assembly { codeSize := extcodesize(contractAddr) } // contract code size\n', '    return codeSize > 0; \n', "    // Might not be 100% foolproof, but reliable enough for an early return in 'view' functions \n", '  }\n', '}\n', '\n', 'interface ERC20 {\n', '    function totalSupply() external view returns (uint supply);\n', '    function balanceOf(address _owner) external view returns (uint balance);\n', '    function allowance(address _owner, address _spender) external view returns (uint remaining);\n', '    function decimals() external view returns(uint digits);\n', '    function symbol() external view returns (string memory);\n', '    function name() external view returns (string memory);\n', '}']