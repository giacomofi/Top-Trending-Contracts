['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-30\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.8.5;\n', 'contract Token {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '    \n', '    uint public constant MAX_SUPPLY = 400000000e18;\n', '\n', '    address public owner;\n', '    modifier restricted {\n', '        require(msg.sender == owner, "This function is restricted to owner");\n', '        _;\n', '    }\n', '    modifier issuerOnly {\n', '        require(isIssuer[msg.sender], "You do not have issuer rights");\n', '        _;\n', '    }\n', '\n', '    mapping(address => uint256) public balanceOf;\n', '    mapping(address => mapping(address => uint256)) public allowance;\n', '    mapping(address => bool) public isIssuer;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event IssuerRights(address indexed issuer, bool value);\n', '    event TransferOwnership(address indexed previousOwner, address indexed newOwner);\n', '\n', '    function getOwner() public view returns (address) {\n', '        return owner;\n', '    }\n', '\n', '    function mint(address _to, uint256 _amount) public issuerOnly returns (bool success) {\n', '        require(_amount + totalSupply <= MAX_SUPPLY, "AMC: maxcap reached");\n', '        totalSupply += _amount;\n', '        balanceOf[_to] += _amount;\n', '        emit Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    function burn(uint256 _amount) public issuerOnly returns (bool success) {\n', '        totalSupply -= _amount;\n', '        balanceOf[msg.sender] -= _amount;\n', '        emit Transfer(msg.sender, address(0), _amount);\n', '        return true;\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _amount) public issuerOnly returns (bool success) {\n', '        allowance[_from][msg.sender] -= _amount;\n', '        balanceOf[_from] -= _amount;\n', '        totalSupply -= _amount;\n', '        emit Transfer(_from, address(0), _amount);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _amount) public returns (bool success) {\n', '        allowance[msg.sender][_spender] = _amount;\n', '        emit Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _amount) public returns (bool success) {\n', '        balanceOf[msg.sender] -= _amount;\n', '        balanceOf[_to] += _amount;\n', '        emit Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom( address _from, address _to, uint256 _amount) public returns (bool success) {\n', '        allowance[_from][msg.sender] -= _amount;\n', '        balanceOf[_from] -= _amount;\n', '        balanceOf[_to] += _amount;\n', '        emit Transfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public restricted {\n', '        require(_newOwner != address(0), "Invalid address: should not be 0x0");\n', '        emit TransferOwnership(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '\n', '    function setIssuerRights(address _issuer, bool _value) public restricted {\n', '        isIssuer[_issuer] = _value;\n', '        emit IssuerRights(_issuer, _value);\n', '    }\n', '\n', '    constructor(string memory _name, string memory _symbol, uint8 _decimals) {\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '        owner = msg.sender;\n', '        emit TransferOwnership(address(0), msg.sender);\n', '    }\n', '}']