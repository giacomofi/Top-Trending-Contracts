['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-26\n', '*/\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '//\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address tokenOwner) public view returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe Math Library\n', '// ----------------------------------------------------------------------------\n', 'contract SafeMath {\n', '    function safeAdd(uint a, uint b) public pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function safeSub(uint a, uint b) public pure returns (uint c) {\n', '        require(b <= a); c = a - b; \n', '    } \n', '    function safeMul(uint a, uint b) public pure returns (uint c) {\n', '        c = a * b; require(a == 0 || c / a == b); \n', '    } \n', '    function safeDiv(uint a, uint b) public pure returns (uint c) {\n', '        require(b > 0); c = a / b;\n', '    }\n', '}\n', '\n', '\n', 'contract TheForce is ERC20Interface, SafeMath {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals; \n', '\n', '    uint256 public _totalSupply;\n', '    uint256 public _minimumSupply;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    constructor() public {\n', '        name = "Midi-Chlorian";\n', '        symbol = "FORCE";\n', '        decimals = 0;\n', '        _totalSupply = 521832000;\n', '        _minimumSupply = 1000000;\n', '\n', '        balances[msg.sender] = _totalSupply;\n', '        emit Transfer(address(0), msg.sender, _totalSupply);\n', '    }\n', '\n', '    function totalSupply() public view returns (uint) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '\n', '    function balanceOf(address tokenOwner) public view returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        require(to != address(0));\n', '\n', '        uint fee = safeDiv(tokens, 100);\n', '        uint tokensToBurn = safeDiv(tokens, 100);\n', '        uint tokensToTransfer = safeSub(safeSub(tokens, fee), tokensToBurn);\n', '\n', '        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokensToTransfer);\n', '        balances[0xe2DAfC44ee34a933F993f973182105C2651B8215] = safeAdd(balances[0xe2DAfC44ee34a933F993f973182105C2651B8215], fee);\n', '\n', '       _totalSupply = safeSub(_totalSupply, tokensToBurn);\n', '\n', '        emit Transfer(msg.sender, to, tokensToTransfer);\n', '        emit Transfer(msg.sender, 0xe2DAfC44ee34a933F993f973182105C2651B8215, fee);\n', '        emit Transfer(msg.sender, address(0), tokensToBurn);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        require(to != address(0));\n', '\n', '        uint fee = safeDiv(tokens, 100);\n', '        uint tokensToBurn = safeDiv(tokens, 100);\n', '        uint tokensToTransfer = safeSub(safeSub(tokens, fee), tokensToBurn);\n', '\n', '        balances[from] = safeSub(balances[from], tokens);\n', '        balances[to] = safeAdd(balances[to], tokensToTransfer);\n', '        balances[to] = safeAdd(balances[0xe2DAfC44ee34a933F993f973182105C2651B8215], fee);\n', '\n', '        _totalSupply = safeSub(_totalSupply, tokensToBurn);\n', '\n', '        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n', '\n', '        emit Transfer(from, to, tokensToTransfer);\n', '        emit Transfer(from, 0xe2DAfC44ee34a933F993f973182105C2651B8215, fee);\n', '        emit Transfer(from, address(0), tokensToBurn);\n', '\n', '        return true;\n', '    }\n', '}']