['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-17\n', '*/\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error.\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a, "SafeMath: addition overflow");\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a, "SafeMath: subtraction overflow");\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Multiplies two unsigned integers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0, "SafeMath: division by zero"); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0, "SafeMath: modulo by zero");\n', '    return a % b;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address payable private _owner;\n', '\n', '  /**\n', '   * Event that notifies clients about the ownership transference\n', '   * @param previousOwner Address registered as the former owner\n', '   * @param newOwner Address that is registered as the new owner\n', '   */\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() {\n', '    _owner = msg.sender;\n', '    emit OwnershipTransferred(address(0), _owner);\n', '  }\n', '\n', '  /**\n', '   * @return the address of the owner.\n', '   */\n', '  function owner() public view returns (address payable) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == _owner, "Ownable: Caller is not the owner");\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address payable newOwner) public onlyOwner {\n', '    require(newOwner != address(0), "Ownable: New owner is the zero address");\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Interface of the ERC20 standard as defined in the EIP.\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', ' */\n', 'interface IERC20 {\n', '\n', '  /**\n', '   * @dev Returns the amount of tokens owned by `account`.\n', '   */\n', '  function balanceOf(address account) external view returns (uint256);\n', '\n', '  /**\n', "   * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '   *\n', '   * Returns a boolean value indicating whether the operation succeeded.\n', '   *\n', '   * Emits a {Transfer} event.\n', '   */\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '\n', '  /**\n', '   * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "   * allowance mechanism. `amount` is then deducted from the caller's\n", '   * allowance.\n', '   *\n', '   * Returns a boolean value indicating whether the operation succeeded.\n', '   *\n', '   * Emits a {Transfer} event.\n', '   */\n', '  function transferFrom(address from, address to, uint256 value)\n', '    external returns (bool);\n', '\n', '  /**\n', "   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '   *\n', '   * Returns a boolean value indicating whether the operation succeeded.\n', '   *\n', '   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '   * that someone may use both the old and the new allowance by unfortunate\n', '   * transaction ordering. One possible solution to mitigate this race\n', "   * condition is to first reduce the spender's allowance to 0 and set the\n", '   * desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   *\n', '   * Emits an {Approval} event.\n', '   */\n', '  function approve(address spender, uint256 value)\n', '    external returns (bool);\n', '\n', '  /**\n', '   * @dev Returns the remaining number of tokens that `spender` will be\n', '   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '   * zero by default.\n', '   *\n', '   * This value changes when {approve} or {transferFrom} are called.\n', '   */\n', '  function allowance(address owner, address spender)\n', '    external view returns (uint256);\n', '\n', '  /**\n', '   * Event that notifies clients about the amount transferred\n', '   * @param from Address owner of the transferred funds\n', '   * @param to Destination address\n', '   * @param value Amount of tokens transferred\n', '   */\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  /**\n', '   * Event that notifies clients about the amount approved to be spent\n', '   * @param owner Address owner of the approved funds\n', '   * @param spender The address authorized to spend the funds\n', '   * @param value Amount of tokens approved\n', '   */\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title ERC20\n', ' *\n', ' * @dev Implementation of the basic standard token\n', ' * functions declared in the IERC20 interface.\n', ' * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', ' */\n', 'contract ERC20 is IERC20 {\n', '  using SafeMath for uint256;\n', '\n', '  mapping (address => uint256) public balances;\n', '  mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '  uint256 public totalSupply;\n', '\n', '  constructor(uint256 initialSupply) {\n', '    require(msg.sender != address(0), "ERC20: create from the zero address");\n', '    totalSupply = initialSupply;\n', '    balances[msg.sender] = initialSupply;\n', '    emit Transfer(address(0), msg.sender, initialSupply);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the balance of the specified address.\n', '   * @param account The address to query the balance of.\n', '   * @return An uint256 representing the amount owned by the passed address.\n', '   */\n', '  function balanceOf(address account) external view override returns (uint256) {\n', '    return balances[account];\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer token for a specified address\n', '   * @param to The address to transfer to.\n', '   * @param value The amount to be transferred.\n', '   */\n', '  function transfer(address to, uint256 value) public override returns (bool) {\n', '    require(value <= balances[msg.sender], "ERC20: balance is not enough");\n', '    require(to != address(0), "ERC20: transfer to the zero address");\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(value);\n', '    balances[to] = balances[to].add(value);\n', '    emit Transfer(msg.sender, to, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param from address The address which you want to send tokens from\n', '   * @param to address The address which you want to transfer to\n', '   * @param value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    public\n', '    override\n', '    returns (bool)\n', '  {\n', '    require(value <= balances[from]);\n', '    require(value <= allowed[from][msg.sender]);\n', '    require(from != address(0), "ERC20: transfer from the zero address");\n', '    require(to != address(0), "ERC20: transfer to the zero address");\n', '\n', '    balances[from] = balances[from].sub(value);\n', '    balances[to] = balances[to].add(value);\n', '    allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\n', '    emit Transfer(from, to, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param spender The address which will spend the funds.\n', '   * @param value The amount of tokens to be spent.\n', '   */\n', '  function approve(address spender, uint256 value) public override returns (bool) {\n', '    require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '    allowed[msg.sender][spender] = value;\n', '    emit Approval(msg.sender, spender, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param owner address The address which owns the funds.\n', '   * @param spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address owner,\n', '    address spender\n', '   )\n', '    external\n', '    view\n', '    override\n', '    returns (uint256)\n', '  {\n', '    return allowed[owner][spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * @param spender The address which will spend the funds.\n', '   * @param addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseAllowance(\n', '    address spender,\n', '    uint256 addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(spender != address(0), "ERC20: spender is the zero address");\n', '\n', '    allowed[msg.sender][spender] = (\n', '      allowed[msg.sender][spender].add(addedValue));\n', '    emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * @param spender The address which will spend the funds.\n', '   * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseAllowance(\n', '    address spender,\n', '    uint256 subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(spender != address(0), "ERC20: spender is the zero address");\n', '\n', '    allowed[msg.sender][spender] = (\n', '      allowed[msg.sender][spender].sub(subtractedValue));\n', '    emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\n', '    return true;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Wakaya1Token\n', ' * @dev Contract for token Wakaya 1 Token\n', ' **/\n', 'contract Wakaya1Token is ERC20, Ownable {\n', '\n', '  string public constant name = "Wakaya 1 Token";\n', '  string public constant symbol = "WKY1";\n', '  uint8 public constant decimals = 18;\n', '\n', '  // Contract hash is the SHA-256 hash for the document of the security contract\n', '  string public contractHash = "3CF0591CD6B34DA949E8A2F647E97AE352C6A96D743E38125685264FFD317A5F";\n', '\n', '  /**\n', '   * Event that notifies the update of the contract hash\n', '   * @param previousContractHash Address registered as the former owner\n', '   * @param newContractHash Address that is registered as the new owner\n', '   */\n', '  event ContractHashUpdated(\n', '    string previousContractHash,\n', '    string newContractHash\n', '  );\n', '\n', '  // Initial supply is the balance assigned to the owner\n', '  uint256 private constant _initialSupply = 75000 * (10 ** uint256(decimals));\n', '\n', '  /**\n', '   * @dev Constructor\n', '   */\n', '  constructor()\n', '    ERC20(_initialSupply)\n', '  {\n', '    require(msg.sender != address(0), "Wakaya 1 Token: Create contract from the zero address");\n', '    emit ContractHashUpdated("", contractHash);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows to transfer out the ether balance that was sent into this contract\n', '   */\n', '  function withdrawEther() external onlyOwner {\n', '    uint256 totalBalance = address(this).balance;\n', '    require(totalBalance > 0, "Wakaya 1 Token: No ether available to be withdrawn");\n', '    owner().transfer(totalBalance);\n', '  }\n', '\n', '  /**\n', '   * @dev Function for updating the contract hash, whenever the contract document is updated a new hash is generated\n', '   * @param newContractHash The hash of the updated contract document.\n', '   */\n', '  function updateContractHash(string calldata newContractHash) external onlyOwner {\n', '    emit ContractHashUpdated(contractHash, newContractHash);\n', '    contractHash = newContractHash;\n', '  }\n', '}']