['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-23\n', '*/\n', '\n', '// File: contracts/noteUSDStorage.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'contract noteUSDStorage {\n', '    /** WARNING: NEVER RE-ORDER VARIABLES! \n', '     *  Always double-check that new variables are added APPEND-ONLY.\n', '     *  Re-ordering variables can permanently BREAK the deployed proxy contract.\n', '     */\n', '\n', '    bool public initialized;\n', '\n', '    mapping(address => uint256) internal _balances;\n', '\n', '    mapping(address => mapping(address => uint256)) internal _allowances;\n', '\n', '    mapping(address => bool) public blacklist;\n', '\n', '    uint256 internal _totalSupply;\n', '\n', '    string public constant name = "noteUSD";\n', '    string public constant symbol = "noteUSD";\n', '    uint256 public multiplier;\n', '    uint8 public constant decimals = 18;\n', '    address public admin;\n', '    uint256 internal constant deci = 1e18;\n', '\n', '    bool internal getpause;\n', '}\n', '\n', '// File: contracts/Proxiable.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'contract Proxiable {\n', '    // Code position in storage is keccak256("PROXIABLE") = "0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7"\n', '\n', '    function updateCodeAddress(address newAddress) internal {\n', '        require(\n', '            bytes32(\n', '                0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7\n', '            ) == Proxiable(newAddress).proxiableUUID(),\n', '            "Not compatible"\n', '        );\n', '        assembly {\n', '            // solium-disable-line\n', '            sstore(\n', '                0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7,\n', '                newAddress\n', '            )\n', '        }\n', '    }\n', '\n', '    function proxiableUUID() public pure returns (bytes32) {\n', '        return\n', '            0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7;\n', '    }\n', '}\n', '\n', '// File: contracts/noteUSD.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whBTCer the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whBTCer the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this mBTCod brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/BTCereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whBTCer the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor() internal {}\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/BTCereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract LibraryLock is noteUSDStorage {\n', '    // Ensures no one can manipulate the Logic Contract once it is deployed.\t\n', '    // PARITY WALLET HACK PREVENTION\t\n', '\n', '    modifier delegatedOnly() {\t\n', '        require(\t\n', '            initialized == true,\t\n', '            "The library is locked. No direct \'call\' is allowed."\t\n', '        );\t\n', '        _;\t\n', '    }\t\n', '    function initialize() internal {\t\n', '        initialized = true;\t\n', '    }\t\n', '}\n', '\n', 'contract noteUSD is noteUSDStorage, Context, IERC20, Proxiable, LibraryLock {\t\n', '    using SafeMath for uint256;\n', '\n', '    event fTokenBlacklist(address indexed account, bool blocked);\n', '    event ChangeMultiplier(uint256 multiplier);\n', '    event AdminChanged(address admin);\n', '    event CodeUpdated(address indexed newCode);\t\n', '\n', '    function initialize(uint256 _totalsupply) public {\n', '        require(!initialized, "The library has already been initialized.");\t\n', '        LibraryLock.initialize();\n', '        admin = msg.sender;\n', '        multiplier = 1 * deci;\n', '        _totalSupply = _totalsupply;\n', '        _balances[msg.sender] = _totalSupply;\n', '    }\n', '\n', '    /// @dev Update the logic contract code\t\n', '    function updateCode(address newCode) external onlyAdmin delegatedOnly {\t\n', '        updateCodeAddress(newCode);\t\n', '        emit CodeUpdated(newCode);\t\n', '    }\n', '\n', '    function setMultiplier(uint256 _multiplier)\n', '        external\n', '        onlyAdmin()\n', '        ispaused()\n', '    {\n', '        require(\n', '            _multiplier > multiplier,\n', '            "the multiplier should be greater than previous multiplier"\n', '        );\n', '        multiplier = _multiplier;\n', '        emit ChangeMultiplier(multiplier);\n', '    }\n', '\n', '    function totalSupply() public override view returns (uint256) {\n', '        return _totalSupply.mul(multiplier).div(deci);\n', '    }\n', '\n', '    function setTotalSupply(uint256 inputTotalsupply) external onlyAdmin() {\n', '        require(\n', '            inputTotalsupply > totalSupply(),\n', '            "the input total supply is not greater than present total supply"\n', '        );\n', '        multiplier = (inputTotalsupply.mul(deci)).div(_totalSupply);\n', '        emit ChangeMultiplier(multiplier);\n', '    }\n', '\n', '    function balanceOf(address account) public override view returns (uint256) {\n', '        uint256 externalAmt;\n', '        externalAmt = _balances[account].mul(multiplier).div(deci);\n', '        return externalAmt;\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount)\n', '        public\n', '        virtual\n', '        override\n', '        Notblacklist(msg.sender)\n', '        Notblacklist(recipient)\n', '        ispaused()\n', '        returns (bool)\n', '    {\n', '        uint256 internalAmt;\n', '        uint256 externalAmt = amount;\n', '        internalAmt = (amount.mul(deci)).div(multiplier);\n', '\n', '        _transfer(msg.sender, recipient, externalAmt);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender)\n', '        public\n', '        virtual\n', '        override\n', '        view\n', '        returns (uint256)\n', '    {\n', '        uint256 internalAmt;\n', '         uint256 maxapproval = 115792089237316195423570985008687907853269984665640564039457584007913129639935;\n', '         maxapproval = maxapproval.div(multiplier).mul(deci);\n', '        if(_allowances[owner][spender] > maxapproval){\n', '           internalAmt = 115792089237316195423570985008687907853269984665640564039457584007913129639935;\n', '        }else{\n', '          internalAmt = (_allowances[owner][spender]).mul(multiplier).div(deci);\n', '        }\n', '       \n', '        return internalAmt;\n', '    }\n', '\n', '    function approve(address spender, uint256 amount)\n', '        public\n', '        virtual\n', '        override\n', '        Notblacklist(spender)\n', '        Notblacklist(msg.sender)\n', '        ispaused()\n', '        returns (bool)\n', '    {\n', '        uint256 internalAmt;\n', '        uint256 externalAmt = amount;\n', '        _approve(msg.sender, spender, externalAmt);\n', '        return true;\n', '    }\n', '    \n', '        /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public \n', '        Notblacklist(spender)\n', '        Notblacklist(msg.sender)\n', '        ispaused()  \n', '        returns (bool) {\n', '         uint256 externalAmt = allowance(_msgSender(),spender) ;\n', '        _approve(_msgSender(), spender, externalAmt.add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public \n', '        Notblacklist(spender)\n', '        Notblacklist(msg.sender)\n', '        ispaused() \n', '        returns (bool) {\n', '        uint256 externalAmt = allowance(_msgSender(),spender) ;\n', '        _approve(_msgSender(), spender, externalAmt.sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    )\n', '        public\n', '        virtual\n', '        override\n', '        Notblacklist(sender)\n', '        Notblacklist(msg.sender)\n', '        Notblacklist(recipient)\n', '        ispaused()\n', '        returns (bool)\n', '    {\n', '        uint256 externalAmt = allowance(sender,_msgSender());\n', '        _transfer(sender, recipient, amount);\n', '        _approve(\n', '            sender,\n', '            _msgSender(),\n', '           externalAmt.sub(\n', '                amount,\n', '                "ERC20: transfer amount exceeds allowance"\n', '            )\n', '        );\n', '        return true;\n', '    }\n', '\n', '    function _transfer(\n', '        address sender,\n', '        address recipient,\n', '        uint256 externalAmt\n', '    ) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '        uint256 internalAmt = externalAmt.mul(deci).div(multiplier);\n', '        _balances[sender] = _balances[sender].sub(\n', '            internalAmt,\n', '            "ERC20: transfer internalAmt exceeds balance"\n', '        );\n', '        _balances[recipient] = _balances[recipient].add(internalAmt);\n', '        emit Transfer(sender, recipient, externalAmt);\n', '    }\n', '\n', '    function mint(address mintTo, uint256 amount)\n', '        public\n', '        virtual\n', '        onlyAdmin()\n', '        ispaused()\n', '        returns (bool)\n', '    {\n', '        uint256 externalAmt = amount;\n', '        uint256 internalAmt = externalAmt.mul(deci).div(multiplier);\n', '        _mint(mintTo, internalAmt, externalAmt);\n', '        return true;\n', '    }\n', '\n', '    function _mint(\n', '        address account,\n', '        uint256 internalAmt,\n', '        uint256 externalAmt\n', '    ) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _totalSupply = _totalSupply.add(internalAmt);\n', '        _balances[account] = _balances[account].add(internalAmt);\n', '        emit Transfer(address(0), account, externalAmt);\n', '    }\n', '\n', '    function burn(address burnFrom, uint256 amount)\n', '        public\n', '        virtual\n', '        onlyAdmin()\n', '        ispaused()\n', '        returns (bool)\n', '    {\n', '        uint256 internalAmt;\n', '        uint256 externalAmt = amount;\n', '        internalAmt = externalAmt.mul(deci).div(multiplier);\n', '\n', '        _burn(burnFrom, internalAmt, externalAmt);\n', '        return true;\n', '    }\n', '\n', '    function _burn(\n', '        address account,\n', '        uint256 internalAmt,\n', '        uint256 externalAmt\n', '    ) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _balances[account] = _balances[account].sub(\n', '            internalAmt,\n', '            "ERC20: burn internaAmt exceeds balance"\n', '        );\n', '        _totalSupply = _totalSupply.sub(internalAmt);\n', '        emit Transfer(account, address(0), externalAmt);\n', '    }\n', '\n', '    function _approve(\n', '        address owner,\n', '        address spender,\n', '        uint256 externalAmt\n', '    ) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '         uint256 internalAmt;\n', '         uint256 maxapproval = 115792089237316195423570985008687907853269984665640564039457584007913129639935;\n', '         maxapproval = maxapproval.div(multiplier).mul(deci);\n', '        if(externalAmt > maxapproval){\n', '           internalAmt = 115792089237316195423570985008687907853269984665640564039457584007913129639935;\n', '        }else{\n', '         internalAmt = externalAmt.mul(deci).div(multiplier);\n', '        }\n', '        _allowances[owner][spender] = internalAmt;\n', '        emit Approval(owner, spender,externalAmt);\n', '    }\n', '\n', '    function TransferOwnerShip(address account) public onlyAdmin() {\n', '        require(account != address(0), "account cannot be zero address");\n', '        require(msg.sender == admin, "you are not the admin");\n', '        admin = account;\n', '        emit AdminChanged(admin);\n', '    }\n', '\n', '    function pause() external onlyAdmin() {\n', '        getpause = true;\n', '    }\n', '\n', '    function unpause() external onlyAdmin() {\n', '        getpause = false;\n', '    }\n', '\n', '    // pause unpause\n', '\n', '    modifier ispaused() {\n', '        require(getpause == false, "the contract is paused");\n', '        _;\n', '    }\n', '\n', '    modifier onlyAdmin() {\n', '        require(msg.sender == admin, "you are not the admin");\n', '        _;\n', '    }\n', '\n', '    function AddToBlacklist(address account) external onlyAdmin() {\n', '        blacklist[account] = true;\n', '        emit fTokenBlacklist(account, true);\n', '    }\n', '\n', '    function RemoveFromBlacklist(address account) external onlyAdmin() {\n', '        blacklist[account] = false;\n', '        emit fTokenBlacklist(account, false);\n', '    }\n', '\n', '    modifier Notblacklist(address account) {\n', '        require(!blacklist[account], "account is blacklisted");\n', '        _;\n', '    }\n', '}']