['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-30\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.8.5;\n', 'interface IERC20 {\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function mint(address to, uint256 amount) external returns (bool);\n', '    function burnFrom(address from, uint256 amount) external returns (bool);\n', '}\n', 'contract BridgeAssistE {\n', '    address public owner;\n', '    IERC20 public TKN;\n', '\n', '    modifier restricted {\n', '        require(msg.sender == owner, "This function is restricted to owner");\n', '        _;\n', '    }\n', '    \n', '    event Collect(address indexed sender, uint256 amount);\n', '    event Dispense(address indexed sender, uint256 amount);\n', '    event TransferOwnership(address indexed previousOwner, address indexed newOwner);\n', '\n', '    function collect(address _sender, uint256 _amount) public restricted returns (bool success) {\n', '        require(TKN.allowance(_sender, address(this)) >= _amount, "Amount check failed");\n', '        require(TKN.burnFrom(_sender,  _amount), "burnFrom() failure. Make sure that your balance is not lower than the allowance you set");\n', '        emit Collect(_sender, _amount);\n', '        return true;\n', '    }\n', '\n', '    function dispense(address _sender, uint256 _amount) public restricted returns (bool success) {\n', '        require(TKN.mint(_sender, _amount), "mint() failure. Contact contract owner");\n', '        emit Dispense(_sender, _amount);\n', '        return true;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public restricted {\n', '        require(_newOwner != address(0), "Invalid address: should not be 0x0");\n', '        emit TransferOwnership(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '\n', '    constructor(IERC20 _TKN) {\n', '        TKN = _TKN;\n', '        owner = msg.sender;\n', '    }\n', '}']