['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-15\n', '*/\n', '\n', 'pragma solidity ^0.6.0;//标明了版本符合标准\n', '\n', '    library SafeMath {//安全数值运算库\n', '        function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '            if (a == 0) {\n', '                return 0; \n', '            }\n', '            uint256 c = a * b;\n', '            assert(c / a == b);\n', '            return c; \n', '        }\n', '        function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '// assert(b > 0); // Solidity automatically throws when dividing by 0\n', '            uint256 c = a / b;\n', "// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '            return c; \n', '        }\n', '\n', '        function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '            assert(b <= a);\n', '            return a - b; \n', '        }\n', '        function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '            uint256 c = a + b;\n', '            assert(c >= a);\n', '            return c; \n', '        }\n', '    }\n', '\n', '    contract ALPHA {\n', '        using SafeMath for uint;\n', '        string public name; // ERC20 标准\n', '        string public symbol; // ERC20 标准\n', '        uint256 public decimals; // ERC20 标准，decimals 可以有的小数点个数，最小的代币单位。18 是建议的默认值\n', '        uint256 public totalSupply; // ERC20 标准 总供应量\n', '        mapping (address => uint256) public balanceOf;\n', '        mapping (address => mapping (address => uint256)) public allowance;\n', '        event Transfer(address indexed from, address indexed to, uint256 value);\n', '        constructor(uint256 initialSupply, string memory tokenName, string memory tokenSymbol, uint256 _decimals) public {\n', '            totalSupply = initialSupply * 10 ** _decimals; // 供应的份额，份额跟最小的代币单位有关，份额 = 币数 * 10 ** decimals。\n', '            balanceOf[msg.sender] = totalSupply; // 创建者拥有所有的代币\n', '            name = tokenName; // 代币名称\n', '            symbol = tokenSymbol; // 代币符号\n', '            decimals = _decimals; \n', '        }\n', '\n', '        function _transfer(address _from, address _to, uint _value) internal {//检测了_to 是否为空地址，但未检测地址_to 和_from 是否为同地址\n', '            require(_to != address(0)&& _from != _to);\n', '            require(balanceOf[_from] >= _value);\n', '            require(balanceOf[_to].add(_value) > balanceOf[_to]);\n', '            uint previousBalances = balanceOf[_from].add(balanceOf[_to]); balanceOf[_from] = balanceOf[_from].sub(_value); balanceOf[_to] = balanceOf[_to].add(_value);\n', '            emit Transfer(_from, _to, _value);\n', '            assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances); \n', '        }\n', '\n', '\n', '        function transfer(address _to, uint256 _value) public {\n', '            // require(_to != address(0) && _to != _from); \n', '            _transfer(msg.sender, _to, _value); \n', '        }\n', '\n', '\n', '        function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {//显示的返回了 true，检测地址_to 和_from 是否为同地址，检测地址_from 是否为空地址\n', '            require(_value <= allowance[_from][msg.sender]); // Check allowance\n', '            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value); _transfer(_from, _to, _value);\n', '            return true; \n', '        }\n', '\n', '\n', '        function approve(address _spender, uint256 _value) public//不存在交易顺序依赖\n', '            returns (bool success) {\n', '            require(_spender != address(0));\n', '            require((_value == 0) || (allowance[msg.sender][_spender] == 0));\n', '            allowance[msg.sender][_spender] = _value;\n', '            return true; \n', '        }\n', '\n', '        \n', '    }']