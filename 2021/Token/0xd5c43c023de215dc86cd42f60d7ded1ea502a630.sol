['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-23\n', '*/\n', '\n', 'pragma solidity >=0.6.0 <= 0.8.5;\n', '  \n', '// SPDX-License-Identifier: MIT\n', '// @title ERC20 Token\n', '// @created_by  Stonoex\n', '\n', '/**\n', ' * \n', ' * @dev Operations with Overflow chechs.\n', ' * \n', ' **/\n', ' \n', 'library Math { \n', '    \n', '    /**\n', '     * \n', '     * @dev Return the subtraction of two integers, reverting with message on overflow\n', '     * \n', '     **/\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      require(b <= a, "Subtraction overflow");\n', '      return a - b;\n', '    }\n', '    \n', '    /**\n', '     * \n', '     * @dev Return the addition of two integers, reverting with message on overflow\n', '     * \n', '     **/\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      uint256 c = a + b;\n', '      require(c >= a, "Addition overflow");\n', '      return c;\n', '    }\n', '    \n', '    /**\n', '     * \n', '     * @dev Return the multiplication of two two integers, reverting with message on overflow\n', '     * \n', '     **/\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b, "Multiplication overflow");\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * \n', ' * @dev Contract that guarantees exclusive access to specific functions for the owner\n', ' * \n', ' * */\n', 'abstract contract Ownable {\n', '    address private _owner;\n', '    address private _newOwner;\n', '    \n', '    event OwnerShipTransferred(address indexed oldOwner, address indexed newOwner);\n', '    \n', '    /**\n', '     * \n', '     * @dev Setting the deployer as the initial owner.\n', '     * \n', '     */\n', '     \n', '    constructor() {\n', '        _owner = msg.sender;\n', '        _newOwner = msg.sender;\n', '        emit OwnerShipTransferred(address(0), _owner);\n', '    }\n', '    \n', '     /**\n', '     * \n', '     * @dev Returns the address of the current owner.\n', '     * \n', '     */\n', '    \n', '    function owner() public view returns(address){\n', '        return _owner;\n', '    }\n', '    \n', '    /**\n', '     * \n', '     * @dev Reverting with message on overflow if called by any account other than the owner.\n', '     * \n', '     */\n', '    modifier onlyOwner(){\n', '        require(msg.sender == _owner, "You are not the owner");\n', '        _;\n', '    }\n', '    \n', '    /**\n', '     * \n', '     * @dev Set new owner to transfer ownership, reverting with message on overflow if account is not the owner\n', '     * \n', '     */\n', '    function transferOwnership(address newOwner_) public onlyOwner{\n', '        require(newOwner_ != address(0), "Invalid address");\n', '        _newOwner = newOwner_;\n', '    }\n', '    \n', '    /**\n', '     * \n', '     * @dev Accept ownership, reverting with message on overflow if account is not the new owner\n', '     * \n', '     */\n', '    function acceptOwnership()public{\n', '        require(msg.sender == _newOwner, "You are not the new owner");\n', '        _transferOwnership(_newOwner);\n', '    }\n', '    \n', '    function _transferOwnership(address newOwner_) internal{\n', '        emit OwnerShipTransferred(_owner,newOwner_);\n', '        _owner = newOwner_;\n', '    }\n', '}\n', '\n', '/**\n', ' * \n', ' * @dev Contract that guarantees pause and unpause specific functions\n', ' * \n', ' * */\n', ' \n', ' contract Pausable is Ownable{\n', '    event Pause();\n', '    event Unpause();\n', '     \n', '    bool private _isPaused = true;\n', '     \n', '    function isPaused() public view returns(bool){\n', '        return _isPaused;\n', '    }\n', '    \n', '    modifier whenNotPaused(){\n', '        require(!_isPaused, "Contract is paused.");\n', '        _;\n', '    }\n', '    \n', '    modifier whenPaused(){\n', '        require(_isPaused, "Contract is not paused.");\n', '        _;\n', '    }\n', '    \n', '    function pause()public onlyOwner whenNotPaused{\n', '        _isPaused = true;\n', '        emit Pause();\n', '    }\n', '    \n', '    function unpause()public onlyOwner whenPaused{\n', '        _isPaused = false;\n', '        emit Unpause();\n', '    }\n', ' }\n', ' \n', ' interface IERC20 {\n', '    \n', '  function totalSupply() external view returns (uint256);\n', '  function balanceOf(address account) external view returns (uint256);\n', '  function transfer(address recipient, uint256 amount) external returns (bool);\n', '  function allowance(address owner, address spender) external view returns (uint256);\n', '  function approve(address spender, uint256 amount) external returns (bool);\n', '  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '  \n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract CollateralDetails is Ownable {\n', '    \n', '    event record(uint position, string document, string book, uint256 bags, uint256 tokens, string executionType);\n', '    \n', '    uint256 private _currentBags;\n', '    string private _docURL;\n', '    \n', '    struct Collateral {\n', '        string cda_wa_document;\n', '        string book;\n', '        uint256 bags;\n', '        uint256 tokenAmount;\n', '        string executionType;\n', '    }\n', '    \n', '    Collateral[] private _collateralList;\n', '    mapping(uint => Collateral) private _collateral;\n', '    \n', '    function getDocURL() public view returns(string memory){\n', '        return _docURL;\n', '    }\n', '    \n', '    function setDocURL(string memory url) public onlyOwner {\n', '        _docURL = url;\n', '    }\n', '    \n', '    function getCurrentBags() public view returns(uint256){\n', '        return _currentBags;\n', '    }\n', '    \n', '    function setCurrentBags(uint256 bags_) internal onlyOwner{\n', '        _currentBags = bags_;\n', '    }\n', '    \n', '    function getRecords(uint indexes_) public view returns(string [] memory documents, string[] memory books, uint256[] memory bags, uint256[] memory tokensAmounts,string[] memory executionTypes){\n', '     require(indexes_ <= _collateralList.length, "Invalid indexes, value is greater than the _collateralList!");\n', '       string [] memory _documents = new string[](indexes_);\n', '       string [] memory _books = new string[](indexes_);\n', '       uint256 [] memory _bags = new uint256[](indexes_);\n', '       uint256 [] memory _tokenAmount = new uint256[](indexes_);\n', '       string [] memory _executionTypes = new string[](indexes_);\n', '       \n', '       for( uint i = 0; i < indexes_; i++){\n', '           Collateral storage c = _collateral[i];\n', '           _documents[i] = c.cda_wa_document;\n', '           _books[i] = c.book;\n', '           _bags[i] = c.bags;\n', '           _tokenAmount[i] = c.tokenAmount;\n', '           _executionTypes[i] = c.executionType;\n', '       }\n', '       return(_documents,_books,_bags,_tokenAmount,_executionTypes);\n', '    }\n', '    \n', '    function getCollateral(uint position_) public view returns(string memory cda_wa_document, string memory book, uint256 bags, uint256 tokenAmount ,string memory executionType){\n', '        require(position_ <= _collateralList.length, "Invalid position, value is greater than the _collateralList");\n', '        Collateral storage c = _collateral[position_];\n', '        return (c.cda_wa_document, c.book, c.bags, c.tokenAmount,c.executionType);\n', '    }\n', '    \n', '    function lastId() public view returns(uint256){\n', '        return _collateralList.length-1;\n', '        \n', '    }\n', '    \n', '    function recordCollateral(string memory cda_wa_document_, string memory book_, uint256 bags_, uint256 tokenAmount_, string memory executionType_) internal onlyOwner{\n', '        _collateralList.push(Collateral(cda_wa_document_,book_,bags_,tokenAmount_,executionType_));\n', '        _collateral[_collateralList.length-1] = Collateral(cda_wa_document_,book_,bags_,tokenAmount_,executionType_);\n', '        emit record(_collateralList.length-1, cda_wa_document_,book_,bags_,tokenAmount_,executionType_);\n', '    }\n', '    \n', '}\n', '\n', 'contract CoffeeCoin is IERC20, Ownable, Pausable, CollateralDetails{\n', '    \n', '    using Math for uint256;\n', '    \n', '    mapping (address => uint256) private _balances;\n', '    mapping (address => mapping (address => uint256)) private _allowed;\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '    uint256 private _totalSupply;\n', '    \n', '    event Burn(address indexed account, uint256 value);\n', '    event Mint(address indexed from, address indexed to, uint256 value);\n', '    \n', '    constructor (string memory name_, string memory symbol_, uint256 totalSupply_, uint8 decimals_, string memory cda_wa_document_, string memory book_, uint256 bags_)  {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _totalSupply = totalSupply_.mul(10 ** decimals_);\n', '        _decimals = decimals_;\n', '        _balances[msg.sender] = _balances[msg.sender].add(_totalSupply);\n', '        recordCollateral(cda_wa_document_, book_, bags_, totalSupply_, "INIT");\n', '        setCurrentBags(bags_);\n', '        emit Transfer(address(0), msg.sender, _totalSupply);\n', '    }\n', '    \n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '    \n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '    \n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '    \n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '    \n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '    \n', '    function transfer(address to, uint256 value) public override returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address owner, address spender) public override view returns (uint256) {\n', '        return _allowed[owner][spender];\n', '    }\n', '    \n', '    function approve(address spender, uint256 value) public override returns (bool) {\n', '        _approve(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address sender, address recipient, uint256 value) public override returns (bool) {\n', '        _transfer(sender, recipient, value);\n', '        _approve(sender, msg.sender, _allowed[sender][msg.sender].sub(value));\n', '        return true;\n', '    }\n', '    \n', '    \n', '    function _transfer(address from_, address to_, uint256 amount_) internal{\n', '        require(from_ != address(0), "Sender Invalid address");\n', '        require(to_ != address(0), "Recipient Invalid Address");\n', '        _balances[from_] = _balances[from_].sub(amount_);\n', '        _balances[to_] = _balances[to_].add(amount_);\n', '        emit Transfer(from_, to_, amount_);\n', '    }\n', '    \n', '    function _approve(address owner_, address spender_, uint256 amount_) internal{\n', '        require(owner_ != address(0), "Approve from the zero address");\n', '        require(spender_ != address(0), "Approve to the zero address");\n', '        _allowed[owner_][spender_] = amount_;\n', '        emit Approval(owner_, spender_, amount_);\n', '    }\n', '    \n', '    /**\n', '    * \n', '    * @dev Destroy Tokens from the caller, reverting with message on overflow if caller is not the contract owner, event Burn will record CollateralDetails\n', '    * \n', '    */\n', '    function burn(uint256 amount_, string memory cda_wa_document_, string memory book_, uint256 bags_) public onlyOwner whenNotPaused{\n', '        require(msg.sender != address(0), "Invalid account address");\n', '         uint256 _amount = amount_.mul(10 ** _decimals);\n', '        _balances[msg.sender] = _balances[msg.sender].sub(_amount);\n', '        _totalSupply = _totalSupply.sub(_amount);\n', '        uint256 _currentBags = getCurrentBags();\n', '        setCurrentBags(_currentBags.sub(bags_));\n', '        recordCollateral(cda_wa_document_, book_, bags_, amount_, "BURN");\n', '        emit Burn(msg.sender, _amount);\n', '        emit Transfer(msg.sender, address(0), _amount);\n', '    }\n', '    \n', '    /**\n', '    * \n', '    * @dev Mint Tokens, reverting with message on overflow if caller is not the contract owner or the contract is not paused, event Mint will record CollateralDetails\n', '    * \n', '    */\n', '    function mint(uint256 amount_, string memory cda_wa_document_, string memory book_, uint256 bags_)public onlyOwner whenNotPaused{\n', '        uint256 _amount = amount_.mul(10 ** _decimals);\n', '        _totalSupply = _totalSupply.add(_amount);\n', '        _balances[msg.sender] = _balances[msg.sender].add(_amount);\n', '        uint256 _currentBags = getCurrentBags();\n', '        setCurrentBags(_currentBags.add(bags_));\n', '        recordCollateral(cda_wa_document_, book_, bags_, amount_, "MINT");\n', '        emit Mint(address(0), msg.sender, _amount);\n', '        emit Transfer(address(0), msg.sender, _amount);\n', '    }\n', '\n', '}']