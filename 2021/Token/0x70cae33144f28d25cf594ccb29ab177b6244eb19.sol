['//This Token Contract implements the standard token functionality (https://github.com/ethereum/EIPs/issues/20) as well as the following OPTIONAL extras intended for use by humans.\n', '//In other words. This is intended for deployment in something like a Token Factory or Mist wallet, and then used by humans.\n', '//Imagine coins, currencies, shares, voting weight, etc.\n', '//Machine-based, rapid creation of many tokens would not necessarily need these extra features or will be minted in other manners.\n', '//1) Initial Finite Supply (upon creation one specifies how much is minted).\n', '//2) In the absence of a token registry: Optional Decimal, Symbol & Name.\n', '//3) Optional approveAndCall() functionality to notify a contract if an approval() has occurred.\n', '//.*/\n', '\n', 'import "./StandardToken.sol";\n', 'pragma solidity ^0.4.11;\n', 'contract HumanStandardToken is StandardToken {\n', '    /* Public variables of the token */\n', '    string public name;                   //名称: eg Simon Bucks\n', "    uint8 public decimals;                //最多的小数位数How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.\n", '    string public symbol;                 //token简称: eg SBX\n', "    string public version = 'H0.1';       //版本\n", '\n', '    function HumanStandardToken(uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol) {\n', '        balances[msg.sender] = _initialAmount; // 初始token数量给予消息发送者\n', '        totalSupply = _initialAmount;         // 设置初始总量\n', '        name = _tokenName;                   // token名称\n', '        decimals = _decimalUnits;           // 小数位数\n', '        symbol = _tokenSymbol;             // token简称\n', '    }\n', '    /* 同意转出并调用接收合约（根据自己需求实现） */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', "        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\n", '        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '        \n', '        require(_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData));\n', '        return true;\n', '    }\n', '}']