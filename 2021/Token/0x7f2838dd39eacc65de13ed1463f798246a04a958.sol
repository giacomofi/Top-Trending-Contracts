['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-09\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.4;\n', '\n', 'interface IERC20 {\n', '\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            uint256 c = a + b;\n', '            if (c < a) return (false, 0);\n', '            return (true, c);\n', '        }\n', '    }\n', '\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            if (b > a) return (false, 0);\n', '            return (true, a - b);\n', '        }\n', '    }\n', '\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            if (a == 0) return (true, 0);\n', '            uint256 c = a * b;\n', '            if (c / a != b) return (false, 0);\n', '            return (true, c);\n', '        }\n', '    }\n', '\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            if (b == 0) return (false, 0);\n', '            return (true, a / b);\n', '        }\n', '    }\n', '\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            if (b == 0) return (false, 0);\n', '            return (true, a % b);\n', '        }\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a + b;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a - b;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a * b;\n', '    }\n', '\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a % b;\n', '    }\n', '\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        unchecked {\n', '            require(b <= a, errorMessage);\n', '            return a - b;\n', '        }\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        unchecked {\n', '            require(b > 0, errorMessage);\n', '            return a / b;\n', '        }\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        unchecked {\n', '            require(b > 0, errorMessage);\n', '            return a % b;\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '\n', 'library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '\n', '        uint256 size;\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '    \n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            if (returndata.length > 0) {\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface IERC20Metadata is IERC20 {\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '}\n', '\n', '\n', 'contract Marx is Context, Ownable, IERC20, IERC20Metadata {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '    \n', '    uint256 private id;\n', '    uint256 private _totalSupply;\n', '    uint256 private eBetray = 0;\n', '    uint256 private idTransactions;\n', '    uint256 _upSurplus;\n', '    uint256 private surplusValue = 50000;\n', '    \n', '    string private _name = "Marx";\n', '    string private _symbol = "MARX";\n', '    \n', '    \n', '    struct Communist{\n', '        address aCommunist;\n', '        uint256 idCommunist;\n', '        uint256 mySurplusValueReleased;\n', '        uint256 totalSurplusValueWithdraw;\n', '        uint256 lastIdSurplusValueWithdraw;\n', '    }\n', '    \n', '    struct Transaction{\n', '        uint256 idTransaction;\n', '        uint256 timeTransaction;\n', '    }\n', '    \n', '    mapping (uint256 => Transaction) controlTransactions;\n', '    mapping (address => Communist) addressCommunist;\n', '    \n', '    address[] communistArray;\n', '    uint256[] transactionsArray;\n', '    \n', '    function _createTransaction() private {\n', '        idTransactions = idTransactions.add(1);\n', '        Transaction storage newTransaction = controlTransactions[idTransactions];\n', '        newTransaction.timeTransaction = block.timestamp;\n', '        \n', '        transactionsArray.push(idTransactions);\n', '        \n', '    }\n', '    \n', '    function _createCommunist(address communist) private {\n', '        Communist storage newCommunist = addressCommunist[communist];\n', '        newCommunist.aCommunist = communist;\n', '        newCommunist.lastIdSurplusValueWithdraw = idTransactions;\n', '        newCommunist.idCommunist = id.add(1);\n', '        id = newCommunist.idCommunist;\n', '        \n', '        communistArray.push(communist);\n', '        \n', '    }\n', '    \n', '    \n', '    function _getIdTransactions() private view returns (uint256[] memory) {\n', '        return transactionsArray;\n', '    }\n', '    \n', '    function _calculateSurplusValue() private view returns (uint256) {\n', '        uint256 idN = idTransactions;\n', '        uint256 lastId = addressCommunist[_msgSender()].lastIdSurplusValueWithdraw;\n', '        uint256 mySurplus = (idN.sub(lastId)).mul(surplusValue); \n', '        return mySurplus.div(_countCommunists());\n', '    }\n', '    \n', '    function _updateMySurplusValue() private isCommunist(_msgSender()) {\n', '        uint256 mySurplusValue = _calculateSurplusValue();\n', '        Communist storage updateSurplusValue = addressCommunist[_msgSender()];\n', '        updateSurplusValue.mySurplusValueReleased += mySurplusValue;\n', '        updateSurplusValue.lastIdSurplusValueWithdraw = idTransactions;\n', '    }\n', '    \n', '    function _excludeBetray(address betray) private {\n', '        uint256 idBetray = addressCommunist[betray].idCommunist - 1;\n', '        delete communistArray[idBetray];\n', '        eBetray = eBetray.add(1);\n', '    }\n', '    \n', '    function withdrawSurplusValue() public isCommunist(_msgSender()) {\n', '        require(addressCommunist[_msgSender()].lastIdSurplusValueWithdraw < idTransactions);\n', '        _updateMySurplusValue();\n', '        uint256 mySurplusValueReleased = addressCommunist[_msgSender()].mySurplusValueReleased;\n', '        \n', '        _withdraw(mySurplusValueReleased);\n', '        \n', '        Communist storage updateSurplusValue = addressCommunist[_msgSender()];\n', '        updateSurplusValue.mySurplusValueReleased = 0;\n', '        updateSurplusValue.totalSurplusValueWithdraw += mySurplusValueReleased;\n', '    }\n', '    \n', '    function _getCommunists() private view returns (address[] memory){\n', '        return communistArray;\n', '    }\n', '    \n', '    function _countCommunists() private view returns (uint256) {\n', '        uint256 numCommunists = communistArray.length;\n', '        return numCommunists.sub(eBetray);\n', '    }\n', '    \n', '    modifier isCommunist(address communist){\n', '        require(_balances[communist] > 0);\n', '        _;\n', '    }\n', '        \n', '    function verifyLastId(address communist) private view returns (uint256) {\n', '        return addressCommunist[communist].lastIdSurplusValueWithdraw;\n', '    }\n', '    \n', '    function verifyTotalSurplusValueWithdraw() public view returns (uint256) {\n', '        return addressCommunist[_msgSender()].totalSurplusValueWithdraw;\n', '    }\n', '    \n', '    \n', '    function verifyTimeTransaction(uint256 idT) private view returns (uint256) {\n', '        return controlTransactions[idT].timeTransaction;\n', '    }\n', '    \n', '    function verifyCommunist(address communist) private view returns (uint256) {\n', '        return addressCommunist[communist].idCommunist;\n', '    }\n', '    \n', '    function name() public view virtual override returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view virtual override returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view virtual override returns (uint8) {\n', '        return 4;\n', '    }\n', '\n', '    function totalSupply() public view virtual override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) public view virtual override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        _createTransaction();\n', '        return true;\n', '    }\n', '    \n', '   function mint(address account, uint256 amount) public virtual onlyOwner() returns (bool){\n', '        _mint(account, amount);\n', '        return true;\n', '    }\n', '    \n', '    function burn(address account, uint256 amount) public virtual onlyOwner() returns (bool){\n', '        _burn(account, amount);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '\n', '        uint256 currentAllowance = _allowances[sender][_msgSender()];\n', '        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");\n', '        unchecked {\n', '            _approve(sender, _msgSender(), currentAllowance - amount);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        uint256 currentAllowance = _allowances[_msgSender()][spender];\n', '        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");\n', '        unchecked {\n', '            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '            if(_balances[sender] == amount && _balances[recipient] == 0) {\n', '                _excludeBetray(sender);\n', '                _createCommunist(recipient);\n', '            } else if(_balances[sender] == amount && _balances[recipient] >= 0) {\n', '                _excludeBetray(sender);\n', '            } else if(_balances[sender] >= amount && _balances[recipient] == 0){\n', '                _createCommunist(recipient);\n', '                _mint(sender, amount.div(200));\n', '            } else if(_balances[sender] >= amount && _balances[recipient] >= 0) {\n', '                _mint(sender, amount.div(200));\n', '            }\n', '        \n', '        uint256 senderBalance = _balances[sender];\n', '        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");\n', '        unchecked {\n', '            _balances[sender] = senderBalance - amount;\n', '        }\n', '        _balances[recipient] += amount;\n', '        \n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    function _withdraw(uint256 amount) private {\n', '        _mint(_msgSender(), amount);\n', '    }\n', '\n', '\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '        \n', '        if(_balances[account] == 0) {\n', '            _createCommunist(account);\n', '        }\n', '        \n', '        _totalSupply += amount;\n', '        _balances[account] += amount;\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        uint256 accountBalance = _balances[account];\n', '        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");\n', '        unchecked {\n', '            _balances[account] = accountBalance - amount;\n', '        }\n', '        _totalSupply -= amount;\n', '\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '    \n', '}']