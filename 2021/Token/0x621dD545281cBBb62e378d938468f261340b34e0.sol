['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-05\n', '*/\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', 'library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        uint256 size;\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        //_transferOwnership(newOwner);\n', '        _pendingowner = newOwner;\n', '        emit OwnershipTransferPending(_owner, newOwner);\n', '    }\n', '\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '    address private _pendingowner;\n', '    event OwnershipTransferPending(address indexed previousOwner, address indexed newOwner);\n', '    function pendingowner() public view returns (address) {\n', '        return _pendingowner;\n', '    }\n', '\n', '    modifier onlyPendingOwner() {\n', '        require(msg.sender == _pendingowner, "Ownable: caller is not the pending owner");\n', '        _;\n', '    }\n', '    function claimOwnership() public onlyPendingOwner {\n', '        _transferOwnership(msg.sender);\n', '    }\n', '\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '    modifier whenNotPaused() {\n', '        require(!paused, "Pausable: paused");\n', '        _;\n', '    }\n', '    modifier whenPaused() {\n', '        require(paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '    function pause() public onlyOwner whenNotPaused {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '    function unpause() public onlyOwner whenPaused {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20Token is IERC20, Pausable {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    string internal _name;\n', '    string internal _symbol;\n', '    uint8 internal _decimals;\n', '    uint256 internal _totalSupply;\n', '\n', '    mapping (address => uint256) internal _balances;\n', '    mapping (address => mapping (address => uint256)) internal _allowances;\n', '\n', '    constructor(string memory name, string memory symbol, uint8 decimals, uint256 totalSupply) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '        _totalSupply = totalSupply;\n', '        _balances[msg.sender] = totalSupply;\n', '        emit Transfer(address(0), msg.sender, totalSupply);\n', '    }\n', '\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) public view returns (uint256 balance) {\n', '        return _balances[account];\n', '    }\n', '\n', '\n', '    // Function that is called when a user or another contract wants to transfer funds .\n', '    function transfer(address recipient, uint256 amount)\n', '    public\n', '    whenNotPaused\n', '    returns (bool success)\n', '    {\n', '        _transfer(msg.sender, recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender)\n', '    public\n', '    view\n', '    returns (uint256)\n', '    {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 value)\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '    {\n', '        _approve(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount)\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '    {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n', '        return true;\n', '    }\n', '\n', '\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue)\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '    {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue)\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '    {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(amount);\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 value) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = value;\n', '        emit Approval(owner, spender, value);\n', '    }\n', '\n', '\t\n', '   // function mint(address account,uint256 amount) public onlyOwner returns (bool) {\n', '    //    _mint(account, amount);\n', '    //    return true;\n', '   // }\n', '    \n', '    function _mint(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }    \n', '\n', '    function burn(address account,uint256 amount) public onlyOwner returns (bool) {\n', '        _burn(account, amount);\n', '        return true;\n', '    }\n', '    \n', '    function _burn(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: burn to the zero address");\n', '\n', '\t _balances[account] = _balances[account].sub(amount);\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }    \n', '    \n', '}\n', '\n', 'contract BOTA is ERC20Token {\n', '    constructor() public\n', '    ERC20Token("BOTA", "BOTA", 18, 1000000000 * (10 ** 18)) {\n', '    }\n', '    mapping (address => uint256) internal _locked_balances;\n', '\n', '    event TokenLocked(address indexed owner, uint256 value);\n', '    event TokenUnlocked(address indexed beneficiary, uint256 value);\n', '\n', '    function balanceOfLocked(address account) public view returns (uint256 balance)\n', '    {\n', '        return _locked_balances[account];\n', '    }\n', '\n', '    function lockToken(address[] memory addresses, uint256[] memory amounts)\n', '    public\n', '    onlyOwner\n', '    returns (bool) {\n', '        require(addresses.length > 0, "LockToken: address is empty");\n', '        require(addresses.length == amounts.length, "LockToken: invalid array size");\n', '\n', '        for (uint i = 0; i < addresses.length; i++) {\n', '            _lock_token(addresses[i], amounts[i]);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function lockTokenWhole(address[] memory addresses)\n', '    public\n', '    onlyOwner\n', '    returns (bool) {\n', '        require(addresses.length > 0, "LockToken: address is empty");\n', '\n', '        for (uint i = 0; i < addresses.length; i++) {\n', '            _lock_token(addresses[i], _balances[addresses[i]]);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function unlockToken(address[] memory addresses, uint256[] memory amounts)\n', '    public\n', '    onlyOwner\n', '    returns (bool) {\n', '        require(addresses.length > 0, "LockToken: unlock address is empty");\n', '        require(addresses.length == amounts.length, "LockToken: invalid array size");\n', '\n', '        for (uint i = 0; i < addresses.length; i++) {\n', '            _unlock_token(addresses[i], amounts[i]);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function _lock_token(address owner, uint256 amount) internal {\n', '        require(owner != address(0), "LockToken: lock from the zero address");\n', '        require(amount > 0, "LockToken: the amount is empty");\n', '\n', '        _balances[owner] = _balances[owner].sub(amount);\n', '        _locked_balances[owner] = _locked_balances[owner].add(amount);\n', '        emit TokenLocked(owner, amount);\n', '    }\n', '\n', '    function _unlock_token(address owner, uint256 amount) internal {\n', '        require(owner != address(0), "LockToken: lock from the zero address");\n', '        require(amount > 0, "LockToken: the amount is empty");\n', '\n', '        _locked_balances[owner] = _locked_balances[owner].sub(amount);\n', '        _balances[owner] = _balances[owner].add(amount);\n', '        emit TokenUnlocked(owner, amount);\n', '    }\n', '\n', '    event Collect(address indexed from, address indexed to, uint256 value);\n', '    event CollectLocked(address indexed from, address indexed to, uint256 value); //Lock이 해지 되었다.\n', '\n', '    function collectFrom(address[] memory addresses, uint256[] memory amounts, address recipient)\n', '    public\n', '    onlyOwner\n', '    returns (bool) {\n', '        require(addresses.length > 0, "Collect: collect address is empty");\n', '        require(addresses.length == amounts.length, "Collect: invalid array size");\n', '\n', '        for (uint i = 0; i < addresses.length; i++) {\n', '            _transfer(addresses[i], recipient, amounts[i]);\n', '            emit Collect(addresses[i], recipient, amounts[i]);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function collectFromLocked(address[] memory addresses, uint256[] memory amounts, address recipient)\n', '    public\n', '    onlyOwner\n', '    returns (bool) {\n', '        require(addresses.length > 0, "Collect: collect address is empty");\n', '        require(addresses.length == amounts.length, "Collect: invalid array size");\n', '\n', '        for (uint i = 0; i < addresses.length; i++) {\n', '            _unlock_token(addresses[i], amounts[i]);\n', '            _transfer(addresses[i], recipient, amounts[i]);\n', '            emit CollectLocked(addresses[i], recipient, amounts[i]);\n', '        }\n', '        return true;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '}']