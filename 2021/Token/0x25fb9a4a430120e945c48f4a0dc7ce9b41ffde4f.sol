['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-24\n', '*/\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/MerkleAirdrop.sol\n', '\n', '// Modified from https://github.com/Phala-Network/prelaunch-token/blob/master/contracts/MerkleAirdrop.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '\n', 'contract MerkleAirdrop {\n', '    struct Airdrop {\n', '        bytes32 root;\n', '        string dataURI;\n', '        bool paused;\n', '        mapping(address => bool) awarded;\n', '    }\n', '\n', '    // Events\n', '    event Start(uint256 id);\n', '    event PauseChange(uint256 id, bool paused);\n', '    event Award(uint256 id, address recipient, uint256 amount);\n', '\n', '    // States\n', '    mapping(uint256 => Airdrop) public airdrops;\n', '    IERC20 public token;\n', '    uint256 public airdropsCount;\n', '\n', '    address public core;\n', '\n', '    // Errors\n', '    string private constant ERROR_AWARDED = "AWARDED";\n', '    string private constant ERROR_INVALID = "INVALID";\n', '    string private constant ERROR_PAUSED = "PAUSED";\n', '    string private constant ERROR_INVALID_BAL = "INVALID_BAL";\n', '\n', '    modifier onlyCore() {\n', '        require(msg.sender == core, "Not Authorized");\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        core = msg.sender;\n', '    }\n', '\n', '    function setToken(address _token) public onlyCore {\n', '        token = IERC20(_token);\n', '    }\n', '\n', '    /**\n', '     * @notice Start a new airdrop `_root` / `_dataURI`\n', '     * @param _root New airdrop merkle root\n', '     * @param _dataURI Data URI for airdrop data\n', '     */\n', '    function start(bytes32 _root, string memory _dataURI) public onlyCore {\n', '        require(token.balanceOf(address(this)) > 0, ERROR_INVALID_BAL);\n', '\n', '        uint256 id = ++airdropsCount; // start at 1\n', '        airdrops[id] = Airdrop(_root, _dataURI, false);\n', '        emit Start(id);\n', '    }\n', '\n', '    /**\n', '     * @notice Pause or resume an airdrop `_id` / `_paused`\n', '     * @param _id The airdrop to change status\n', '     * @param _paused Pause to resume\n', '     */\n', '    function setPause(uint256 _id, bool _paused) public onlyCore {\n', '        require(_id <= airdropsCount, ERROR_INVALID);\n', '        airdrops[_id].paused = _paused;\n', '        emit PauseChange(_id, _paused);\n', '    }\n', '\n', '    /**\n', '     * @notice Remove tokens after airdrop has finished.\n', '     */\n', '    function removeToken() public onlyCore {\n', '        uint256 balance = token.balanceOf(address(this));\n', '        if (balance > 0) {\n', '            token.transfer(core, balance);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Fetch Award from airdrop\n', '     * @param _id Airdrop id\n', '     * @param _recipient Airdrop recipient\n', '     * @param _amount The token amount\n', '     * @param _proof Merkle proof to correspond to data supplied\n', '     */\n', '    function award(\n', '        uint256 _id,\n', '        address _recipient,\n', '        uint256 _amount,\n', '        bytes32[] memory _proof\n', '    ) public {\n', '        require(_id <= airdropsCount, ERROR_INVALID);\n', '\n', '        Airdrop storage airdrop = airdrops[_id];\n', '        require(!airdrop.paused, ERROR_PAUSED);\n', '\n', '        bytes32 hash = keccak256(abi.encodePacked(_recipient, _amount));\n', '        require(validate(airdrop.root, _proof, hash), ERROR_INVALID);\n', '\n', '        require(!airdrops[_id].awarded[_recipient], ERROR_AWARDED);\n', '\n', '        airdrops[_id].awarded[_recipient] = true;\n', '\n', '        uint256 bal = token.balanceOf(address(this));\n', '        if (bal >= _amount) {\n', '            token.transfer(_recipient, _amount);\n', '        } else {\n', '            revert("INVALID_CONTRACT_BALANCE");\n', '        }\n', '\n', '        emit Award(_id, _recipient, _amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Fetch Award from many airdrops\n', '     * @param _ids Airdrop ids\n', '     * @param _recipient Recepient of award\n', '     * @param _amounts The amounts\n', '     * @param _proofs Merkle proofs\n', '     * @param _proofLengths Merkle proof lengths\n', '     */\n', '    function awardFromMany(\n', '        uint256[] memory _ids,\n', '        address _recipient,\n', '        uint256[] memory _amounts,\n', '        bytes memory _proofs,\n', '        uint256[] memory _proofLengths\n', '    ) public {\n', '        uint256 totalAmount;\n', '\n', '        uint256 marker = 32;\n', '\n', '        for (uint256 i = 0; i < _ids.length; i++) {\n', '            uint256 id = _ids[i];\n', '            require(id <= airdropsCount, ERROR_INVALID);\n', '            require(!airdrops[id].paused, ERROR_PAUSED);\n', '\n', '            bytes32[] memory proof =\n', '                extractProof(_proofs, marker, _proofLengths[i]);\n', '            marker += _proofLengths[i] * 32;\n', '\n', '            bytes32 hash = keccak256(abi.encodePacked(_recipient, _amounts[i]));\n', '            require(validate(airdrops[id].root, proof, hash), ERROR_INVALID);\n', '\n', '            require(!airdrops[id].awarded[_recipient], ERROR_AWARDED);\n', '\n', '            airdrops[id].awarded[_recipient] = true;\n', '\n', '            totalAmount += _amounts[i];\n', '\n', '            emit Award(id, _recipient, _amounts[i]);\n', '        }\n', '\n', '        uint256 bal = token.balanceOf(address(this));\n', '        if (bal >= totalAmount) {\n', '            token.transfer(_recipient, totalAmount);\n', '        } else {\n', '            revert("INVALID_CONTRACT_BALANCE");\n', '        }\n', '    }\n', '\n', '    function extractProof(\n', '        bytes memory _proofs,\n', '        uint256 _marker,\n', '        uint256 proofLength\n', '    ) public pure returns (bytes32[] memory proof) {\n', '        proof = new bytes32[](proofLength);\n', '\n', '        bytes32 el;\n', '\n', '        for (uint256 j = 0; j < proofLength; j++) {\n', '            assembly {\n', '                el := mload(add(_proofs, _marker))\n', '            }\n', '            proof[j] = el;\n', '            _marker += 32;\n', '        }\n', '    }\n', '\n', '    function validate(\n', '        bytes32 root,\n', '        bytes32[] memory proof,\n', '        bytes32 hash\n', '    ) public pure returns (bool) {\n', '        for (uint256 i = 0; i < proof.length; i++) {\n', '            if (hash < proof[i]) {\n', '                hash = keccak256(abi.encodePacked(hash, proof[i]));\n', '            } else {\n', '                hash = keccak256(abi.encodePacked(proof[i], hash));\n', '            }\n', '        }\n', '\n', '        return hash == root;\n', '    }\n', '\n', '    /**\n', '     * @notice Check if recipient:`_recipient` awarded from airdrop:`_id`\n', '     * @param _id Airdrop id\n', '     * @param _recipient Recipient to check\n', '     */\n', '    function awarded(uint256 _id, address _recipient)\n', '        public\n', '        view\n', '        returns (bool)\n', '    {\n', '        return airdrops[_id].awarded[_recipient];\n', '    }\n', '}']