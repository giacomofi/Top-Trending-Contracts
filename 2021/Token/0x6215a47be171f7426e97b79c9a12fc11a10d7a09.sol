['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-05\n', '*/\n', '\n', '// SPDX-License-Identifier: Apache-2.0\n', '// 2021 (c) Cryptollama\n', 'pragma solidity >=0.4.0 <0.7.0;\n', '\n', 'contract Token {\n', '    \n', '    address private llamaContract = 0x0000000000000000000000000000000000000000;\n', '    address private deployer = 0x0000000000000000000000000000000000000000;\n', '\n', '    string public constant name = "Wool token";\n', '    string public constant symbol = "WOOL";\n', '    uint8 public constant decimals = 18;\n', '    uint256 public totalSupply = 0;\n', '\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Burn(address indexed from, uint tokens);\n', '    event Mint(address indexed from, uint tokens);\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '\n', '    using SafeMath for uint256;\n', '    \n', '    modifier _onlyLlama {\n', '        require(msg.sender == llamaContract);\n', '        _;\n', '    }\n', '\n', '    constructor() public{\n', '        balances[msg.sender] = totalSupply;\n', '        deployer = msg.sender;\n', '    }\n', '    \n', '    function setLlama(address llama) public {\n', '        require(msg.sender == deployer);\n', '        require(llamaContract == 0x0000000000000000000000000000000000000000);\n', '        llamaContract = llama;\n', '    }\n', '\n', '    function balanceOf(address tokenOwner) public view returns (uint) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    function transfer(address receiver, uint numTokens) public returns (bool) {\n', '        require(numTokens <= balances[msg.sender]);\n', '        balances[msg.sender] = balances[msg.sender].sub(numTokens);\n', '        balances[receiver] = balances[receiver].add(numTokens);\n', '        emit Transfer(msg.sender, receiver, numTokens);\n', '        return true;\n', '    }\n', '\n', '    function approve(address delegate, uint numTokens) public returns (bool) {\n', '        allowed[msg.sender][delegate] = numTokens;\n', '        emit Approval(msg.sender, delegate, numTokens);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address delegate) public view returns (uint) {\n', '        return allowed[owner][delegate];\n', '    }\n', '\n', '    function transferFrom(address owner, address buyer, uint256 numTokens) public returns (bool) {\n', '        require(numTokens <= balances[owner]);\n', '        require(numTokens <= allowed[owner][msg.sender]);\n', '\n', '        balances[owner] = balances[owner].sub(numTokens);\n', '        allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(numTokens);\n', '        balances[buyer] = balances[buyer].add(numTokens);\n', '        emit Transfer(owner, buyer, numTokens);\n', '        return true;\n', '    }\n', '    \n', '    function mint(address who, uint256 amount) public _onlyLlama returns (uint) {\n', '        totalSupply += amount;\n', '        balances[who] += amount;\n', '        emit Mint(who, amount);\n', '        return amount;\n', '    }\n', '    \n', '    function burn(uint256 amount) public returns (uint) {\n', '        require(balances[msg.sender] >= amount);\n', '        balances[msg.sender] -= amount;\n', '        totalSupply -= amount;\n', '        emit Burn(msg.sender, amount);\n', '        return amount;\n', '    }\n', '    \n', '    function burnFrom(address who, uint256 amount) public _onlyLlama returns (uint) {\n', '        require(balances[who] >= amount);\n', '        balances[who] -= amount;\n', '        totalSupply -= amount;\n', '        emit Burn(who, amount);\n', '        return amount;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}']