['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-08\n', '*/\n', '\n', '/**\n', '\n', '\n', ' ______  _________ _______  _______  _______  _        ______     _        _______  _        _______ \n', '(  __  \\ \\__   __/(  ___  )(       )(  ___  )( (    /|(  __  \\   | \\    /\\(  ___  )( (    /|(  ____ \\\n', '| (  \\  )   ) (   | (   ) || () () || (   ) ||  \\  ( || (  \\  )  |  \\  / /| (   ) ||  \\  ( || (    \\/\n', '| |   ) |   | |   | (___) || || || || |   | ||   \\ | || |   ) |  |  (_/ / | |   | ||   \\ | || |      \n', '| |   | |   | |   |  ___  || |(_)| || |   | || (\\ \\) || |   | |  |   _ (  | |   | || (\\ \\) || | ____ \n', '| |   ) |   | |   | (   ) || |   | || |   | || | \\   || |   ) |  |  ( \\ \\ | |   | || | \\   || | \\_  )\n', '| (__/  )___) (___| )   ( || )   ( || (___) || )  \\  || (__/  )  |  /  \\ \\| (___) || )  \\  || (___) |\n', '(______/ \\_______/|/     \\||/     \\|(_______)|/    )_)(______/   |_/    \\/(_______)|/    )_)(_______)\n', '                                                                                                     \n', '\n', '\n', '\n', '**/\n', '//SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity ^0.7.2;\n', '\n', 'contract DiamondKong {\n', '    mapping(address => uint) public balances;\n', '    mapping(address => mapping(address => uint)) public allowance;\n', '    \n', '    \n', '    uint public totalSupply = 10 * 10**10 * 10**18;\n', '    string public name = "Diamond Kong";\n', '    string public symbol = "DKONG";\n', '    uint public decimals = 18;\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    \n', '    constructor() {\n', '        balances[msg.sender] = totalSupply;\n', '    }\n', '    \n', '    \n', '    function balanceOf(address owner) public view returns(uint) {\n', '        return balances[owner];\n', '    }\n', '    \n', '    function transfer(address to, uint value) public returns(bool) {\n', "        require(balanceOf(msg.sender) >= value, 'balance too low');\n", '        balances[to] += value;\n', '        balances[msg.sender] -= value;\n', '        emit Transfer(msg.sender, to, value);\n', '        return true;\n', '        \n', '    }\n', '    \n', '    function transferFrom(address from, address to, uint value) public returns(bool) {\n', "        require(balanceOf(from) >= value, 'balance too low');\n", "        require(allowance[from][msg.sender] >= value, 'allowance too low');\n", '        balances[to] += value;\n', '        balances[from] -= value;\n', '        emit Transfer(from, to, value);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address spender, uint value) public returns(bool) {\n', '        allowance[msg.sender][spender] = value;\n', '        return true;\n', '        \n', '    }\n', '}']