['/**\n', ' * \n', ' * \n', '  _______      ___       __          ___       ______ .___________. _______ .______       __   __    __  .___  ___. \n', ' /  _____|    /   \\     |  |        /   \\     /      ||           ||   ____||   _  \\     |  | |  |  |  | |   \\/   | \n', "|  |  __     /  ^  \\    |  |       /  ^  \\   |  ,----'`---|  |----`|  |__   |  |_)  |    |  | |  |  |  | |  \\  /  | \n", '|  | |_ |   /  /_\\  \\   |  |      /  /_\\  \\  |  |         |  |     |   __|  |      /     |  | |  |  |  | |  |\\/|  | \n', "|  |__| |  /  _____  \\  |  `----./  _____  \\ |  `----.    |  |     |  |____ |  |\\  \\----.|  | |  `--'  | |  |  |  | \n", ' \\______| /__/     \\__\\ |_______/__/     \\__\\ \\______|    |__|     |_______|| _| `._____||__|  \\______/  |__|  |__|                                                                                                                \n', '\n', '____ _  _ ____ ___  _ ____ _  _ ____    ____ ____    ___ _  _ ____    ____ ____ _    ____ ____ ___ ____ ____ _ _  _ _  _ \n', '| __ |  | |__| |  \\ | |__| |\\ | [__     |  | |___     |  |__| |___    | __ |__| |    |__| |     |  |___ |__/ | |  | |\\/| \n', '|__] |__| |  | |__/ | |  | | \\| ___]    |__| |        |  |  | |___    |__] |  | |___ |  | |___  |  |___ |  \\ | |__| |  | \n', '                                                                                                                         \n', '____ ____ ___ ____ ___     ____ _  _ ___     ____ ___ ____ ____ _  _ ____ _  _                                           \n', '[__  |___  |  |___ |__]    |__| |\\ | |  \\    [__   |  |__| |__/ |\\/| |__| |\\ |                                           \n', '___] |___  |  |___ |       |  | | \\| |__/    ___]  |  |  | |  \\ |  | |  | | \\|   \n', '\n', 'Reality Benders\n', ' * \n', ' *\n', ' * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n', ' */\n', '\n', '\n', 'pragma solidity ^0.4.26;\n', '\n', 'import "./UpgradeableToken.sol";\n', 'import "./ReleasableToken.sol";\n', 'import "./MintableToken.sol";\n', '\n', '\n', '/**\n', ' *\n', ' * An ERC-20 token designed specifically for crowdsales with investor protection and further development path.\n', ' *\n', ' * - The token transfer() is disabled until the crowdsale is over\n', ' * - The token contract gives an opt-in upgrade path to a new contract\n', ' * - The same token can be part of several crowdsales through approve() mechanism\n', ' * - The token can be capped (supply set in the constructor) or uncapped (crowdsale contract can mint new tokens)\n', ' *\n', ' */\n', '\n', '\n', '/**\n', ' *\n', ' * An ERC-20 token designed specifically for crowdsales with investor protection and further development path.\n', ' *\n', ' * - The token transfer() is disabled until the crowdsale is over\n', ' * - The token contract gives an opt-in upgrade path to a new contract\n', ' * - The same token can be part of several crowdsales through approve() mechanism\n', ' * - The token can be capped (supply set in the constructor) or uncapped (crowdsale contract can mint new tokens)\n', ' *\n', ' */\n', 'contract GalacticToken is ReleasableToken, MintableToken, UpgradeableToken {\n', '\n', '  /** Name and symbol were updated. */\n', '  event UpdatedTokenInformation(string newName, string newSymbol);\n', '  event DonationReceived(address donatee, uint256 amount);\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  \n', '\n', '  string public name;\n', '\n', '  string public symbol;\n', '\n', '  uint public decimals;\n', '\n', '  /**\n', '   * Construct the token.\n', '   *\n', '   * This token must be created through a team multisig wallet, so that it is owned by that wallet.\n', '   *\n', '   * @param _name Token name\n', '   * @param _symbol Token symbol - should be all caps\n', '   * @param _initialSupply How many tokens we start with\n', '   * @param _decimals Number of decimal places\n', '   * @param _mintable Are new tokens created over the crowdsale or do we distribute only the initial supply? Note that when the token becomes transferable the minting always ends.\n', '   * @param _galacticMasterWallet Wallet tokens will be minted to and ownership of token must be set to this wallet\n', '   */\n', '  constructor(string _name, string _symbol, uint _initialSupply, uint _decimals, bool _mintable, address _galacticMasterWallet) public\n', '    UpgradeableToken(msg.sender) {\n', '\n', '    // Create any address, can be transferred\n', '    // to team multisig via changeOwner(),\n', '    // also remember to call setUpgradeMaster()\n', '    owner = msg.sender;\n', '    \n', '    name = _name;\n', '    symbol = _symbol;\n', '\n', '    totalSupply = _initialSupply;\n', '    \n', '    decimals = _decimals;\n', '\n', '    // Create initially all balance on the team multisig\n', '    balances[_galacticMasterWallet] = totalSupply;\n', '    emit Minted(_galacticMasterWallet, totalSupply);\n', '    emit Transfer(address(this), _galacticMasterWallet, totalSupply);\n', '    \n', '\n', '\n', '\n', '    // No more new supply allowed after the token creation\n', '    if(!_mintable) {\n', '      mintingFinished = true;\n', '      if(totalSupply == 0) {\n', '        revert(); // Cannot create a token without supply and no minting\n', '      }\n', '    }\n', '  }\n', '\n', '  /**\n', '   * When token is released to be transferable, enforce no new tokens can be created.\n', '   */\n', '  function releaseTokenTransfer() public onlyReleaseAgent {\n', '    mintingFinished = true;\n', '    super.releaseTokenTransfer();\n', '  }\n', '\n', '  /**\n', '   * Allow upgrade agent functionality kick in only if the crowdsale was success.\n', '   */\n', '  function canUpgrade() public view   returns(bool) {\n', '    return released && super.canUpgrade();\n', '  }\n', ' \n', '  function donate() public payable {\n', '    if(msg.value>0){\n', '      emit DonationReceived(msg.sender, msg.value);\n', '    }\n', '    \n', '  }\n', '  /**\n', '   * Owner can update token information here.\n', '   *\n', '   * It is often useful to conceal the actual token association, until\n', '   * the token operations, like central issuance or reissuance have been completed.\n', '   *\n', '   * This function allows the token owner to rename the token after the operations\n', '   * have been completed and then point the audience to use the token contract.\n', '   */\n', '  function setTokenInformation(string _name, string _symbol) public onlyOwner {\n', '    name = _name;\n', '    symbol = _symbol;\n', '\n', '    emit UpdatedTokenInformation(name, symbol);\n', '  }\n', '\n', '}']