['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-13\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan on 2021-05-13\n', '*/\n', '\n', '/**\n', '    Doge of Woof Street - $WSDOGE\n', '    \n', '    Total supply: 100 000 000 000 000 $WSDOGE\n', '    Liquidity: 35%\n', '    Burned: 50%\n', '    Marketing: 5%\n', '    Initial Liquidity Offering: 10%\n', '\n', '    For more details, Make sure to check :\n', '\n', '    Website — www.doge-of-woof-street.com\n', '\n', '    Twitter — www.twitter.com/wsdoge1\n', '\n', '    TG Group — https://t.me/dogeofwoofstreet\n', '*/\n', '\n', '//SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity ^0.6.12;\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '    address private _previousOwner;\n', '    uint256 private _lockTime;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '     /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    function geUnlockTime() public view returns (uint256) {\n', '        return _lockTime;\n', '    }\n', '\n', '    //Locks the contract for owner for the amount of time provided\n', '    function lock(uint256 time) public virtual onlyOwner {\n', '        _previousOwner = _owner;\n', '        _owner = address(0);\n', '        _lockTime = now + time;\n', '        emit OwnershipTransferred(_owner, address(0));\n', '    }\n', '    \n', '    //Unlocks the contract for owner when _lockTime is exceeds\n', '    function unlock() public virtual {\n', '        require(_previousOwner == msg.sender, "You don\'t have permission to unlock");\n', '        require(now > _lockTime , "Contract is locked until 7 days");\n', '        emit OwnershipTransferred(_owner, _previousOwner);\n', '        _owner = _previousOwner;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract WSDOGEPresale is Ownable {\n', '    \n', '    address public tokenAddress;\n', '    uint256 public tokensPerAllocation;\n', '    uint256 public allocationSize;\n', '    mapping(address => bool) public isWhitelisted;\n', '    mapping(address => bool) public didBuy;\n', '    \n', '    constructor(address _tokenAddress) public {\n', '        tokenAddress = _tokenAddress;\n', '    }\n', '    \n', '    receive() external payable {\n', '        buy();\n', '    }\n', '    \n', '    function setTokensPerAllocation(uint256 amount) public onlyOwner {\n', '        tokensPerAllocation = amount;\n', '    }\n', '    \n', '    function setAllocationSize(uint256 amount) public onlyOwner {\n', '        allocationSize = amount;\n', '    }\n', '    \n', '    function whitelistAddresses(address[] memory account) public onlyOwner {\n', '        for (uint256 i = 0; i < account.length; i++) {\n', '            isWhitelisted[account[i]] = true;\n', '        }\n', '    }\n', '    \n', '    function removeAddressesFromWhitelist(address[] memory account) public onlyOwner {\n', '        for (uint256 i = 0; i < account.length; i++) {\n', '            isWhitelisted[account[i]] = false;\n', '        }\n', '    }\n', '    \n', '    function withdrawTokens() public onlyOwner {\n', '        IERC20(tokenAddress).transfer(owner(), IERC20(tokenAddress).balanceOf(address(this)));\n', '    }\n', '    \n', '    function withdrawETH() public onlyOwner {\n', '        payable(owner()).transfer(address(this).balance);\n', '    }\n', '    \n', '    function buy() public payable {\n', '        require(tokensPerAllocation > 0 && allocationSize > 0, "Not initialized yet");\n', '        require(isWhitelisted[msg.sender], "Address is not whitelisted");\n', '        require(!didBuy[msg.sender], "Address already bought");\n', '        require(msg.value == allocationSize, "Wrong ETH amount sent");\n', '        \n', '        IERC20(tokenAddress).transfer(msg.sender, tokensPerAllocation);\n', '        \n', '        didBuy[msg.sender] = true;\n', '    }\n', '}']