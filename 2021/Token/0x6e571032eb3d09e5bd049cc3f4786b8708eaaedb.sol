['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-25\n', '*/\n', '\n', 'pragma solidity ^0.5.0; \n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface//\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface { \n', '    function totalSupply() public view returns (uint); \n', '    function balanceOf(address tokenOwner) public view returns (uint balance); \n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining); \n', '    function transfer(address to, uint tokens) public returns (bool success); \n', '    function approve(address spender, uint tokens) public returns (bool success); \n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success); \n', '    event Transfer(address indexed from, address indexed to, uint tokens); \n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '    \n', '} \n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe Math Library\n', '// ----------------------------------------------------------------------------\n', 'contract SafeMath { \n', '    function safeAdd(uint256 a, uint256 b) public pure returns (uint256 c) { c = a + b; require(c >= a); } \n', '    function safeSub(uint256 a, uint256 b) public pure returns (uint256 c) { require(b <= a); c = a - b; } \n', '    function safeMul(uint256 a, uint256 b) public pure returns (uint256 c) { c = a * b; require(a == 0 || c / a == b); } \n', '    function safeDiv(uint256 a, uint256 b) public pure returns (uint256 c) { require(b > 0); c = a / b; }\n', '} \n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address payable public owner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner, "Only allowed by owner");\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address payable _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0), "Invalid address");\n', '        owner = _newOwner;\n', '        emit OwnershipTransferred(msg.sender, _newOwner);\n', '    }\n', '}\n', '\n', 'contract ARMYDOLLAR  is ERC20Interface, SafeMath, Owned { \n', '    string public name; \n', '    string public symbol; \n', '    uint8 public decimals; // 18 decimals is the strongly suggested default, avoid changing it \n', '    uint256 public _totalSupply; \n', '    mapping(address => uint) balances; \n', '    mapping(address => mapping(address => uint)) allowed;\n', '    \n', '    mapping(address => uint) unlockingDate;\n', '    uint public lockingPeriod = 365 days;\n', '    \n', '    /** * Constrctor function * * Initializes contract with initial supply tokens to the creator of the contract */ \n', '    constructor() public { \n', '        name = "Armydollar"; \n', '        symbol = "ARMY$"; \n', '        decimals = 18; \n', '        _totalSupply = 3000000000000000000000000000; \n', '        owner = 0x5b6B3AA053c1aFD7Cd3094d15878f3390E7BCC4E;\n', '        balances[owner] = _totalSupply; \n', '        emit Transfer(address(0), owner, _totalSupply); \n', '    } \n', '    \n', '    function changeLockingPeriod(uint256 _timeInSecs) external onlyOwner{\n', '        lockingPeriod = _timeInSecs;\n', '    }\n', '    \n', '    function totalSupply() public view returns (uint) \n', '    { \n', '        return _totalSupply - balances[address(0)]; \n', '        \n', '    } \n', '    \n', '    function balanceOf(address tokenOwner) public view returns (uint balance) \n', '    { \n', '        return balances[tokenOwner]; \n', '        \n', '    } \n', '    \n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining) \n', '    { \n', '        return allowed[tokenOwner][spender]; \n', '        \n', '    } \n', '    \n', '    function approve(address spender, uint tokens) public returns (bool success) \n', '    { \n', '        allowed[msg.sender][spender] = tokens; \n', '        emit Approval(msg.sender, spender, tokens); \n', '        return true; \n', '    } \n', '    \n', '    function transfer(address to, uint tokens) public returns (bool success) { \n', '        require(block.timestamp > unlockingDate[msg.sender], "tokens are locked");\n', '        balances[msg.sender] = safeSub(balances[msg.sender], tokens); \n', '        balances[to] = safeAdd(balances[to], tokens); \n', '        emit Transfer(msg.sender, to, tokens); \n', '        return true; \n', '    } \n', '    \n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) \n', '    { \n', '        require(block.timestamp > unlockingDate[from], "tokens are locked");\n', '        balances[from] = safeSub(balances[from], tokens);\n', '        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens); \n', '        balances[to] = safeAdd(balances[to], tokens); \n', '        emit Transfer(from, to, tokens); \n', '        return true; \n', '    }\n', '    \n', '    function transferWithLocking(address to, uint tokens) public onlyOwner returns (bool success) { \n', '        balances[msg.sender] = safeSub(balances[msg.sender], tokens); \n', '        balances[to] = safeAdd(balances[to], tokens); \n', '        unlockingDate[to] = safeAdd(block.timestamp, lockingPeriod);\n', '        emit Transfer(msg.sender, to, tokens); \n', '        return true; \n', '    }\n', '}']