['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-29\n', '*/\n', '\n', 'pragma solidity >= 0.4.22<0.6.0;\n', '\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal pure  returns (uint) {\n', '\tuint c = a * b;\n', '\tassert(a == 0 || c / a == b);\n', '\treturn c;\n', '  }\n', ' \n', '  function div(uint a, uint b) internal pure  returns (uint) {\n', '\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n', '\tuint c = a / b;\n', "\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\treturn c;\n', '  }\n', ' \n', '  function sub(uint a, uint b) internal pure returns (uint) {\n', '\tassert(b <= a);\n', '\treturn a - b;\n', '  }\n', ' \n', '  function add(uint a, uint b) internal  pure   returns (uint) {\n', '\tuint c = a + b;\n', '\tassert(c >= a);\n', '\treturn c;\n', '  }\n', '}\n', 'contract HTZE {\n', '\tusing SafeMath for uint;\n', '\tuint private totalSupplyAmount;\n', '\taddress private owner;\n', '\tmapping(address => uint) private balances;\n', '\tmapping(address => mapping(address => uint)) private allowed;\n', '\tstring private tokenName;\n', '\tstring private tokenSymbol;\n', '\tuint8 private decimalPoints;\n', '\t\n', '\t /**\n', '  * @dev Fix for the ERC20 short address attack.\n', '   */\n', '  modifier onlyPayloadSize(uint size) {\n', '    require(msg.data.length >= size + 4) ;\n', '    _;\n', '  }\n', '\tconstructor(string name,string symbol,\n', '\tuint initialSupply,uint8 decimals) public payable {\n', '    \ttokenName=name;\n', '    \ttokenSymbol=symbol;\n', '    \tdecimalPoints=decimals;\n', '    \tuint supply=SafeMath.mul(initialSupply,10**uint(decimalPoints));\n', '    \ttotalSupplyAmount=supply;\n', '    \towner=msg.sender;\n', '    \tbalances[owner]=SafeMath.add(balances[owner],totalSupplyAmount);\n', '    \temit Transfer(address(0),owner,totalSupplyAmount);\n', '\t}\n', '    \n', '\tfunction name() public view returns(string memory){\n', '    \treturn tokenName;\n', '\t}\n', '    \n', '\tfunction symbol() public view returns(string memory){\n', '    \treturn tokenSymbol;\n', '\t}\n', '    \n', '\tfunction decimals() public view returns(uint){\n', '    \treturn decimalPoints;\n', '\t}\n', ' \n', '\tfunction totalSupply() public view returns(uint){\n', '    \treturn totalSupplyAmount;\n', '\t}\n', '    \n', '\tfunction balanceOf(address findingBalanceAddress) public view returns(uint){\n', '    \treturn balances[findingBalanceAddress];\n', '\t}\n', '    \n', '\tfunction getTokenOwnerAddress() public view returns(address){\n', '    \treturn owner;\n', '\t}\n', '    \n', '\tfunction transfer(address to,uint tokenAmountInWEI) public payable  returns(bool){\n', '    \trequire(balances[msg.sender]>=tokenAmountInWEI);\n', '    \trequire(tokenAmountInWEI>0);\n', '    \trequire((SafeMath.add(balances[to],tokenAmountInWEI))>balances[to]);\n', '    \tbalances[msg.sender] = SafeMath.sub(balances[msg.sender],tokenAmountInWEI);\n', '    \tbalances[to] = SafeMath.add(balances[to],tokenAmountInWEI);\n', '    \treturn true;\n', '\t}\n', '\n', '\tfunction transferFrom(address from,address to,uint tokenAmountInWEI) onlyPayloadSize(3 * 32) public returns(bool){\n', ' \trequire(balances[from]>=tokenAmountInWEI);   \n', ' \trequire(allowed[from] [msg.sender]>=tokenAmountInWEI);\n', ' \trequire(tokenAmountInWEI>0);\n', '    \n', ' \trequire((SafeMath.add(balances[to],tokenAmountInWEI))>balances[to]);\n', ' \tbalances[to] = SafeMath.add(balances[to],tokenAmountInWEI);\n', ' \tbalances[from] = SafeMath.sub(balances[from],tokenAmountInWEI);\n', ' \tallowed[from][msg.sender] = SafeMath.sub(allowed[from][msg.sender],tokenAmountInWEI);\n', ' \temit Transfer(from,to,tokenAmountInWEI);\n', ' \treturn true;\n', '\t}\n', '    \n', '\tfunction approve(address spender,uint tokenAmountInWEI) public  returns(bool){\n', '    \tallowed[msg.sender][spender]=SafeMath.add(allowed[msg.sender][spender],tokenAmountInWEI);\n', '     \temit  Approval(msg.sender,spender,tokenAmountInWEI);\n', '    \treturn true;\n', '\t}\n', '    \n', '\tfunction allownce(address from,address spender) public view returns(uint){\n', '    \treturn allowed[from][spender];\n', '\t}\n', '\t\n', '\tfunction burn (address from,uint tokenAmountInWEI) public returns(bool){\n', '\t    require(from!=address(0)\n', '        &&balances[from]>=tokenAmountInWEI\n', '        &&totalSupplyAmount>=tokenAmountInWEI);\n', '        totalSupplyAmount=SafeMath.sub(totalSupplyAmount,tokenAmountInWEI);\n', '        balances[from]=SafeMath.sub(balances[from],tokenAmountInWEI);\n', '        emit Transfer(from,address(0),tokenAmountInWEI);\n', '        return true;\n', '\t}\n', '\t\n', '\tfunction burnFrom(address from,uint tokenAmountInWEI) public returns(bool){\n', '        require(allowed[from][msg.sender]>=tokenAmountInWEI);\n', '        allowed[from][msg.sender]=SafeMath.sub(allowed[from][msg.sender],tokenAmountInWEI);\n', '        burn(from,tokenAmountInWEI);\n', '        return true;\n', '\t}\n', '\t\n', '\tfunction mint(address to,uint tokenAmountInWEI) public returns(bool){\n', '\t    require(to!=address(0));\n', '        totalSupplyAmount=SafeMath.add(totalSupplyAmount,tokenAmountInWEI);\n', '        balances[to]=SafeMath.add(balances[to],tokenAmountInWEI);\n', '        emit Transfer(address(0),to,tokenAmountInWEI);\n', '        return true;\n', '\t}\n', '\n', '\tfunction _transfer(address from,address to,uint tokenAmountInWEI) public returns(bool){\n', '    \trequire(balances[from]>=tokenAmountInWEI);\n', '    \trequire(tokenAmountInWEI>0);\n', '    \trequire((SafeMath.add(balances[to],tokenAmountInWEI))>balances[to]);\n', '    \tbalances[from] = SafeMath.sub(balances[from],tokenAmountInWEI);\n', '    \tbalances[to] = SafeMath.add(balances[to],tokenAmountInWEI);\n', '    \treturn true;\n', '\t}\n', '\tevent Transfer(address from,address to,uint amount);\n', '\tevent Approval(address indexer,address spender,uint amount);\n', '}']