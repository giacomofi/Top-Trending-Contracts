['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-25\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at BscScan.com on 2021-05-25\n', '*/\n', '\n', '// Sources flattened with hardhat v2.3.0 https://hardhat.org\n', '\n', '// File contracts/libraries/SafeMath.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/governance/ChainportCongressMembersRegistry.sol\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '/**\n', ' * ChainportCongressMembersRegistry contract.\n', ' * @author Nikola Madjarevic\n', ' * Date created: 21.3.21.\n', ' * Github: madjarevicn\n', ' */\n', 'contract ChainportCongressMembersRegistry {\n', '\n', '    using SafeMath for *;\n', '\n', '    /// @notice The name of this contract\n', '    string public constant name = "ChainportCongressMembersRegistry";\n', '\n', '    /// @notice Event to fire every time someone is added or removed from members\n', '    event MembershipChanged(address member, bool isMember);\n', '\n', '    /// @notice Chainport congress pointer\n', '    address public chainportCongress;\n', '\n', '    //The minimum number of voting members that must be in attendance\n', '    uint256 minimalQuorum;\n', '\n', '    // Mapping to check if the member is belonging to congress\n', '    mapping (address => bool) isMemberInCongress;\n', '\n', '    // Mapping address to member info\n', '    mapping(address => Member) public address2Member;\n', '\n', '    // Mapping to store all members addresses\n', '    address[] public allMembers;\n', '\n', '\n', '    struct Member {\n', '        bytes32 name;\n', '        uint memberSince;\n', '    }\n', '\n', '    modifier onlyChainportCongress {\n', '        require(msg.sender == chainportCongress);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @param initialCongressMembers is the array containing addresses of initial members\n', '     */\n', '    constructor(\n', '        address[] memory initialCongressMembers,\n', '        bytes32[] memory initialCongressMemberNames,\n', '        address _chainportCongress\n', '    )\n', '    public\n', '    {\n', '        uint length = initialCongressMembers.length;\n', '\n', '        for(uint i=0; i<length; i++) {\n', '            addMemberInternal(\n', '                initialCongressMembers[i],\n', '                initialCongressMemberNames[i]\n', '            );\n', '        }\n', '\n', '        chainportCongress = _chainportCongress;\n', '    }\n', '\n', '\n', '    function changeMinimumQuorum(\n', '        uint newMinimumQuorum\n', '    )\n', '    external\n', '    onlyChainportCongress\n', '    {\n', '        require(newMinimumQuorum > 0);\n', '        minimalQuorum = newMinimumQuorum;\n', '    }\n', '\n', '    /**\n', '     * Add member\n', '     *\n', '     * Make `targetMember` a member named `memberName`\n', '     *\n', '     * @param targetMember ethereum address to be added\n', '     * @param memberName public name for that member\n', '     */\n', '    function addMember(\n', '        address targetMember,\n', '        bytes32 memberName\n', '    )\n', '    external\n', '    onlyChainportCongress\n', '    {\n', '        addMemberInternal(targetMember, memberName);\n', '    }\n', '\n', '\n', '    function addMemberInternal(\n', '        address targetMember,\n', '        bytes32 memberName\n', '    )\n', '    internal\n', '    {\n', '        //Require that this member is not already a member of congress\n', '        require(isMemberInCongress[targetMember] == false);\n', '        // Update basic member information\n', '        address2Member[targetMember] = Member({\n', '            memberSince: block.timestamp,\n', '            name: memberName\n', '        });\n', '        // Add member to list of all members\n', '        allMembers.push(targetMember);\n', '        // Update minimum quorum\n', '        minimalQuorum = allMembers.length.sub(1);\n', '        // Mark that user is member in congress\n', '        isMemberInCongress[targetMember] = true;\n', '        // Fire an event\n', '        emit MembershipChanged(targetMember, true);\n', '    }\n', '\n', '    /**\n', '     * Remove member\n', '     *\n', '     * @notice Remove membership from `targetMember`\n', '     *\n', '     * @param targetMember ethereum address to be removed\n', '     */\n', '    function removeMember(\n', '        address targetMember\n', '    )\n', '    external\n', '    onlyChainportCongress\n', '    {\n', '        require(isMemberInCongress[targetMember] == true);\n', '\n', '        uint length = allMembers.length;\n', '\n', '        uint i=0;\n', '\n', '        // Find selected member\n', '        while(allMembers[i] != targetMember) {\n', '            if(i == length) {\n', '                revert();\n', '            }\n', '            i++;\n', '        }\n', '\n', '        // Move the last member to this place\n', '        allMembers[i] = allMembers[length-1];\n', '\n', '        // Remove the last member\n', '        allMembers.pop();\n', '\n', '        //Remove him from state mapping\n', '        isMemberInCongress[targetMember] = false;\n', '\n', '        //Remove his state to empty member\n', '        address2Member[targetMember] = Member({\n', '            memberSince: block.timestamp,\n', '            name: "0x0"\n', '        });\n', '\n', '        //Reduce 1 member from quorum\n', '        minimalQuorum = minimalQuorum.sub(1);\n', '\n', '        // Emit event that member is removed.\n', '        emit MembershipChanged(targetMember, false);\n', '    }\n', '\n', '    /**\n', '     * @notice Function which will be exposed and congress will use it as "modifier"\n', "     * @param _address is the address we're willing to check if it belongs to congress\n", '     * @return true/false depending if it is either a member or not\n', '     */\n', '    function isMember(\n', '        address _address\n', '    )\n', '    external\n', '    view\n', '    returns (bool)\n', '    {\n', '        return isMemberInCongress[_address];\n', '    }\n', '\n', '    /// @notice Getter for length for how many members are currently\n', '    /// @return length of members\n', '    function getNumberOfMembers()\n', '    external\n', '    view\n', '    returns (uint)\n', '    {\n', '        return allMembers.length;\n', '    }\n', '\n', '    /// @notice Function to get addresses of all members in congress\n', '    /// @return array of addresses\n', '    function getAllMemberAddresses()\n', '    external\n', '    view\n', '    returns (address[] memory)\n', '    {\n', '        return allMembers;\n', '    }\n', '\n', '    /// Get member information\n', '    function getMemberInfo(\n', '        address _member\n', '    )\n', '    external\n', '    view\n', '    returns (address, bytes32, uint)\n', '    {\n', '        Member memory member = address2Member[_member];\n', '        return (\n', '            _member,\n', '            member.name,\n', '            member.memberSince\n', '        );\n', '    }\n', '\n', '    function getMinimalQuorum()\n', '    external\n', '    view\n', '    returns (uint256)\n', '    {\n', '        return minimalQuorum;\n', '    }\n', '}']