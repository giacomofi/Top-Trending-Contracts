['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-31\n', '*/\n', '\n', '// File: contracts/IERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/IWCHI.sol\n', '\n', '// Copyright (C) 2021 Autonomous Worlds Ltd\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', '\n', '/**\n', ' * @dev Interface for the wrapped CHI (WCHI) token.\n', ' */\n', 'interface IWCHI is IERC20\n', '{\n', '\n', '  /**\n', '   * @dev Burns the given number of tokens, reducing total supply.\n', '   */\n', '  function burn (uint256 value) external;\n', '\n', '  /**\n', '   * @dev Increases the allowance of a given spender by the given amount.\n', '   */\n', '  function increaseAllowance (address spender, uint256 addedValue)\n', '      external returns (bool);\n', '\n', '  /**\n', '   * @dev Decreases the allowance of a given spender by the given amount.\n', '   */\n', '  function decreaseAllowance (address spender, uint256 removedValue)\n', '      external returns (bool);\n', '\n', '}\n', '\n', '// File: contracts/WCHI.sol\n', '\n', '// Copyright (C) 2021 Autonomous Worlds Ltd\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', '\n', '/**\n', ' * @dev Wrapped CHI (WCHI) token.  This contract is not upgradable and not\n', ' * owned, but it grants an initial supply to the contract creator.  The Xaya\n', ' * team will hold these tokens, and give them out for CHI locked on the\n', ' * Xaya network.  When WCHI tokens are returned, those CHI will be released\n', ' * again.\n', ' */\n', 'contract WCHI is IWCHI\n', '{\n', '\n', '  string public constant name = "Wrapped CHI";\n', '  string public constant symbol = "WCHI";\n', '\n', '  /** @dev Native CHI has 8 decimals (like BTC), we mimic that here.  */\n', '  uint8 public constant decimals = 8;\n', '\n', '  /**\n', '   * @dev Initial supply of tokens minted.  This is a bit larger than the\n', '   * real total supply of CHI.\n', '   */\n', '  uint256 internal constant initialSupply = 78 * 10**6 * 10**decimals;\n', '\n', '  /**\n', '   * @dev Total supply of tokens.  This includes tokens that are in the\n', "   * Xaya team's reserve, i.e. do not correspond to real CHI locked\n", '   * in the treasury.\n', '   */\n', '  uint256 public override totalSupply;\n', '\n', '  /** @dev Balances of tokens per address.  */\n', '  mapping (address => uint256) public override balanceOf;\n', '\n', '  /**\n', '   * @dev Allowances for accounts (second) to spend from the balance\n', '   * of an owner (first).\n', '   */\n', '  mapping (address => mapping (address => uint256)) public override allowance;\n', '\n', '  /**\n', '   * @dev In the constructor, we grant the contract creator the initial balance.\n', '   * This is the only place where any address has special rights compared\n', '   * to all others.\n', '   */\n', '  constructor ()\n', '  {\n', '    totalSupply = initialSupply;\n', '    balanceOf[msg.sender] = initialSupply;\n', '    emit Transfer (address (0), msg.sender, initialSupply);\n', '  }\n', '\n', '  /**\n', '   * @dev Sets the allowance afforded to the given spender by\n', '   * the message sender.\n', '   */\n', '  function approve (address spender, uint256 value)\n', '      external override returns (bool)\n', '  {\n', '    setApproval (msg.sender, spender, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', "   * @dev Moves a given amount of tokens from the message sender's\n", '   * account to the recipient.  If to is the zero address, then those\n', '   * tokens are burnt and reduce the total supply.\n', '   */\n', '  function transfer (address to, uint256 value) external override returns (bool)\n', '  {\n', '    uncheckedTransfer (msg.sender, to, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Moves a given amount of tokens from the sender account to the\n', '   * recipient.  If from is not the message sender, then it needs to have\n', '   * sufficient allowance.\n', '   */\n', '  function transferFrom (address from, address to, uint256 value)\n', '      external override returns (bool)\n', '  {\n', '    if (from != msg.sender)\n', '      {\n', '        /* Check for the allowance and reduce it.  */\n', '        uint256 allowed = allowance[from][msg.sender];\n', '        if (allowed != type (uint256).max)\n', '          {\n', '            require (allowed >= value, "WCHI: allowance exceeded");\n', '            uint256 newAllowed = allowed - value;\n', '            setApproval (from, msg.sender, newAllowed);\n', '          }\n', '      }\n', '\n', '    uncheckedTransfer (from, to, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal transfer implementation.  This is used to implement transfer\n', '   * and transferFrom, and does not check that the sender is actually\n', '   * allowed to spend the tokens.\n', '   */\n', '  function uncheckedTransfer (address from, address to, uint256 value) internal\n', '  {\n', '    require (to != address (0), "WCHI: transfer to zero address");\n', '    require (to != address (this), "WCHI: transfer to contract address");\n', '\n', '    deductBalance (from, value);\n', '    balanceOf[to] += value;\n', '\n', '    emit Transfer (from, to, value);\n', '  }\n', '\n', '  /**\n', "   * @dev Burns tokens from the sender's balance, reducing total supply.\n", '   */\n', '  function burn (uint256 value) external override\n', '  {\n', '    deductBalance (msg.sender, value);\n', '    assert (totalSupply >= value);\n', '    totalSupply -= value;\n', '    emit Transfer (msg.sender, address (0), value);\n', '  }\n', '\n', '  /**\n', '   * @dev Increases the allowance of a given spender by a certain\n', '   * amount (rather than explicitly setting the new allowance).  This fails\n', '   * if the new allowance would be at infinity (or overflow).\n', '   */\n', '  function increaseAllowance (address spender, uint256 addedValue)\n', '      external override returns (bool)\n', '  {\n', '    uint256 allowed = allowance[msg.sender][spender];\n', '\n', '    uint256 increaseToInfinity = type (uint256).max - allowed;\n', '    require (addedValue < increaseToInfinity,\n', '             "WCHI: increase allowance overflow");\n', '\n', '    setApproval (msg.sender, spender, allowed + addedValue);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decreases the allowance of a given spender by a certain value.\n', '   * If the value is more than the current allowance, it is set to zero.\n', '   */\n', '  function decreaseAllowance (address spender, uint256 removedValue)\n', '      external override returns (bool)\n', '  {\n', '    uint256 allowed = allowance[msg.sender][spender];\n', '\n', '    if (removedValue >= allowed)\n', '      setApproval (msg.sender, spender, 0);\n', '    else\n', '      setApproval (msg.sender, spender, allowed - removedValue);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal helper function to check the balance of the given user\n', '   * and deduct the given amount.\n', '   */\n', '  function deductBalance (address from, uint256 value) internal\n', '  {\n', '    uint256 balance = balanceOf[from];\n', '    require (balance >= value, "WCHI: insufficient balance");\n', '    balanceOf[from] = balance - value;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal helper function to explicitly set the allowance of\n', '   * a spender without any checks, and emit the Approval event.\n', '   */\n', '  function setApproval (address owner, address spender, uint256 value) internal\n', '  {\n', '    allowance[owner][spender] = value;\n', '    emit Approval (owner, spender, value);\n', '  }\n', '\n', '}']