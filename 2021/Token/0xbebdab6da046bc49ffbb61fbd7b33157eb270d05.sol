['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-07\n', '*/\n', '\n', 'pragma solidity ^0.6.7;\n', '\n', 'contract Shard {\n', '    /// @notice EIP-20 token name for this token\n', '    string public constant name = "Shard";\n', '\n', '    /// @notice EIP-20 token symbol for this token\n', '    string public constant symbol = "SHARD";\n', '\n', '    /// @notice EIP-20 token decimals for this token\n', '    uint8 public constant decimals = 18;\n', '\n', '    /// @notice Total number of tokens in circulation\n', '    uint public totalSupply = 80_000_000e18; // 80 million Shard\n', '\n', '    /// @notice Limit on the totalSupply that can be minted\n', '    uint96 public constant maxSupply = 210_000_000e18; // 210 million Shard\n', '\n', '    /// @notice Address which may mint new tokens\n', '    address public minter;\n', '\n', '    /// @notice The timestamp after which minting may occur\n', '    uint public mintingAllowedAfter;\n', '\n', '    /// @notice Minimum time between mints\n', '    uint32 public constant minimumTimeBetweenMints = 183 days;\n', '\n', '    /// @dev Allowance amounts on behalf of others\n', '    mapping (address => mapping (address => uint96)) internal allowances;\n', '\n', '    /// @dev Official record of token balances for each account\n', '    mapping (address => uint96) internal balances;\n', '\n', '    /// @notice A record of each accounts delegate\n', '    mapping (address => address) public delegates;\n', '\n', '    /// @notice A checkpoint for marking number of votes from a given block\n', '    struct Checkpoint {\n', '        uint32 fromBlock;\n', '        uint96 votes;\n', '    }\n', '\n', '    /// @notice A record of votes checkpoints for each account, by index\n', '    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\n', '\n', '    /// @notice The number of checkpoints for each account\n', '    mapping (address => uint32) public numCheckpoints;\n', '\n', "    /// @notice The EIP-712 typehash for the contract's domain\n", '    bytes32 public constant DOMAIN_TYPEHASH = keccak256("EIP712Domain(string name,uint256 chainId,address verifyingContract)");\n', '\n', '    /// @notice The EIP-712 typehash for the delegation struct used by the contract\n', '    bytes32 public constant DELEGATION_TYPEHASH = keccak256("Delegation(address delegatee,uint256 nonce,uint256 expiry)");\n', '\n', '    /// @notice The EIP-712 typehash for the permit struct used by the contract\n', '    bytes32 public constant PERMIT_TYPEHASH = keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");\n', '\n', '    /// @notice The EIP-712 typehash for the transfer struct used by the contract\n', '    bytes32 public constant TRANSFER_TYPEHASH = keccak256("Transfer(address to,uint256 value,uint256 nonce,uint256 expiry)");\n', '\n', '    /// @notice The EIP-712 typehash for the transferWithFee struct used by the contract\n', '    bytes32 public constant TRANSFER_WITH_FEE_TYPEHASH = keccak256("TransferWithFee(address to,uint256 value,uint256 fee,uint256 nonce,uint256 expiry)");\n', '\n', '    /// @notice A record of states for signing / validating signatures\n', '    mapping (address => uint) public nonces;\n', '\n', '    /// @notice An event thats emitted when the minter address is changed\n', '    event MinterChanged(address minter, address newMinter);\n', '\n', '    /// @notice An event thats emitted when an account changes its delegate\n', '    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\n', '\n', "    /// @notice An event thats emitted when a delegate account's vote balance changes\n", '    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\n', '\n', '    /// @notice The standard EIP-20 transfer event\n', '    event Transfer(address indexed from, address indexed to, uint256 amount);\n', '\n', '    /// @notice The standard EIP-20 approval event\n', '    event Approval(address indexed owner, address indexed spender, uint256 amount);\n', '\n', '    /**\n', '     * @notice Construct a new Shard token\n', '     * @param account The initial account to grant all the tokens\n', '     * @param minter_ The account with minting ability\n', '     * @param mintingAllowedAfter_ The timestamp after which minting may occur\n', '     */\n', '    constructor(address account, address minter_, uint mintingAllowedAfter_) public {\n', '        require(mintingAllowedAfter_ >= block.timestamp, "Shard::constructor: minting can only begin after deployment");\n', '\n', '        balances[account] = uint96(totalSupply);\n', '        emit Transfer(address(0), account, totalSupply);\n', '        minter = minter_;\n', '        emit MinterChanged(address(0), minter_);\n', '        mintingAllowedAfter = mintingAllowedAfter_;\n', '    }\n', '\n', '    /**\n', '     * @notice Change the minter address\n', '     * @param minter_ The address of the new minter\n', '     */\n', '    function setMinter(address minter_) external {\n', '        require(msg.sender == minter, "Shard::setMinter: only the minter can change the minter address");\n', '        require(minter_ != address(0), "Shard::setMinter: cannot set minter to the zero address");\n', '        emit MinterChanged(minter, minter_);\n', '        minter = minter_;\n', '    }\n', '\n', '    /**\n', '     * @notice Mint new tokens\n', '     * @param dst The address of the destination account\n', '     * @param rawAmount The number of tokens to be minted\n', '     */\n', '    function mint(address dst, uint rawAmount) external {\n', '        require(msg.sender == minter, "Shard::mint: only the minter can mint");\n', '        require(block.timestamp >= mintingAllowedAfter, "Shard::mint: minting not allowed yet");\n', '        require(dst != address(0), "Shard::mint: cannot transfer to the zero address");\n', '\n', '        // record the mint\n', '        mintingAllowedAfter = add256(block.timestamp, minimumTimeBetweenMints, "Shard::mint: mintingAllowedAfter overflows");\n', '\n', '        // mint the amount\n', '        uint96 amount = safe96(rawAmount, "Shard::mint: amount exceeds 96 bits");\n', '        uint _totalSupply = totalSupply;\n', '        require(amount <= _totalSupply / 100, "Shard::mint: amount exceeds mint allowance");\n', '        _totalSupply = add256(_totalSupply, amount, "Shard::mint: totalSupply overflows");\n', '        require(_totalSupply <= maxSupply, "Shard::mint: totalSupply exceeds maxSupply");\n', '        totalSupply = _totalSupply;\n', '\n', '        // transfer the amount to the recipient\n', '        balances[dst] = add96(balances[dst], amount, "Shard::mint: transfer amount overflows");\n', '        emit Transfer(address(0), dst, amount);\n', '\n', '        // move delegates\n', '        _moveDelegates(address(0), delegates[dst], amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Burn `amount` tokens from `msg.sender`\n', '     * @param rawAmount The number of tokens to burn\n', '     * @return Whether or not the burn succeeded\n', '     */\n', '    function burn(uint rawAmount) external returns (bool) {\n', '        uint96 amount = safe96(rawAmount, "Shard::burn: amount exceeds 96 bits");\n', '        _burnTokens(msg.sender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Burn `amount` tokens from `src`\n', '     * @param src The address of the source account\n', '     * @param rawAmount The number of tokens to burn\n', '     * @return Whether or not the burn succeeded\n', '     */\n', '    function burnFrom(address src, uint rawAmount) external returns (bool) {\n', '        uint96 amount = safe96(rawAmount, "Shard::burnFrom: amount exceeds 96 bits");\n', '        address spender = msg.sender;\n', '        uint96 spenderAllowance = allowances[src][spender];\n', '\n', '        if (spender != src && spenderAllowance != uint96(-1)) {\n', '            uint96 newAllowance = sub96(spenderAllowance, amount, "Shard::burnFrom: amount exceeds spender allowance");\n', '            _approve(src, spender, newAllowance);\n', '        }\n', '\n', '        _burnTokens(src, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\n', '     * @param account The address of the account holding the funds\n', '     * @param spender The address of the account spending the funds\n', '     * @return The number of tokens approved\n', '     */\n', '    function allowance(address account, address spender) external view returns (uint) {\n', '        return allowances[account][spender];\n', '    }\n', '\n', '    /**\n', '     * @notice Approve `spender` to transfer up to `amount` from `src`\n', '     * @dev This will overwrite the approval amount for `spender`\n', '     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n', '     * @param spender The address of the account which may transfer tokens\n', '     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\n', '     * @return Whether or not the approval succeeded\n', '     */\n', '    function approve(address spender, uint rawAmount) external returns (bool) {\n', '        uint96 amount;\n', '        if (rawAmount == uint(-1)) {\n', '            amount = uint96(-1);\n', '        } else {\n', '            amount = safe96(rawAmount, "Shard::approve: amount exceeds 96 bits");\n', '        }\n', '\n', '        _approve(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Approve `spender` to transfer `amount` extra from `src`\n', '     * @param spender The address of the account which may transfer tokens\n', '     * @param rawAmount The number of tokens to increase the approval by\n', '     * @return Whether or not the approval succeeded\n', '     */\n', '    function increaseAllowance(address spender, uint rawAmount) external returns (bool) {\n', '        uint96 amount = safe96(rawAmount, "Shard::increaseAllowance: amount exceeds 96 bits");\n', '        uint96 newAllowance = add96(allowances[msg.sender][spender], amount, "Shard::increaseAllowance: allowance overflows");\n', '        _approve(msg.sender, spender, newAllowance);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Approve `spender` to transfer `amount` less from `src`\n', '     * @param spender The address of the account which may transfer tokens\n', '     * @param rawAmount The number of tokens to decrease the approval by\n', '     * @return Whether or not the approval succeeded\n', '     */\n', '    function decreaseAllowance(address spender, uint rawAmount) external returns (bool) {\n', '        uint96 amount = safe96(rawAmount, "Shard::decreaseAllowance: amount exceeds 96 bits");\n', '        uint96 newAllowance = sub96(allowances[msg.sender][spender], amount, "Shard::decreaseAllowance: allowance underflows");\n', '        _approve(msg.sender, spender, newAllowance);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Triggers an approval from owner to spender\n', '     * @param owner The address to approve from\n', '     * @param spender The address to be approved\n', '     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\n', '     * @param deadline The time at which to expire the signature\n', '     * @param v The recovery byte of the signature\n', '     * @param r Half of the ECDSA signature pair\n', '     * @param s Half of the ECDSA signature pair\n', '     */\n', '    function permit(address owner, address spender, uint rawAmount, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\n', '        uint96 amount;\n', '        if (rawAmount == uint(-1)) {\n', '            amount = uint96(-1);\n', '        } else {\n', '            amount = safe96(rawAmount, "Shard::permit: amount exceeds 96 bits");\n', '        }\n', '\n', '        require(block.timestamp <= deadline, "Shard::permit: signature expired");\n', '        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, rawAmount, nonces[owner]++, deadline));\n', '        address signatory = ecrecover(getDigest(structHash), v, r, s);\n', '        require(signatory != address(0), "Shard::permit: invalid signature");\n', '        require(signatory == owner, "Shard::permit: unauthorized");\n', '\n', '        return _approve(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Get the number of tokens held by the `account`\n', '     * @param account The address of the account to get the balance of\n', '     * @return The number of tokens held\n', '     */\n', '    function balanceOf(address account) external view returns (uint) {\n', '        return balances[account];\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n', '     * @param dst The address of the destination account\n', '     * @param rawAmount The number of tokens to transfer\n', '     * @return Whether or not the transfer succeeded\n', '     */\n', '    function transfer(address dst, uint rawAmount) external returns (bool) {\n', '        uint96 amount = safe96(rawAmount, "Shard::transfer: amount exceeds 96 bits");\n', '        _transferTokens(msg.sender, dst, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer `amount` tokens from `src` to `dst`\n', '     * @param src The address of the source account\n', '     * @param dst The address of the destination account\n', '     * @param rawAmount The number of tokens to transfer\n', '     * @return Whether or not the transfer succeeded\n', '     */\n', '    function transferFrom(address src, address dst, uint rawAmount) external returns (bool) {\n', '        uint96 amount = safe96(rawAmount, "Shard::transferFrom: amount exceeds 96 bits");\n', '        address spender = msg.sender;\n', '        uint96 spenderAllowance = allowances[src][spender];\n', '\n', '        if (spender != src && spenderAllowance != uint96(-1)) {\n', '            uint96 newAllowance = sub96(spenderAllowance, amount, "Shard::transferFrom: amount exceeds spender allowance");\n', '            _approve(src, spender, newAllowance);\n', '        }\n', '\n', '        _transferTokens(src, dst, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer various `amount` tokens from `msg.sender` to `dsts`\n', '     * @param dsts The addresses of the destination accounts\n', '     * @param rawAmounts The numbers of tokens to transfer\n', '     * @return Whether or not the transfers succeeded\n', '     */\n', '    function transferBatch(address[] calldata dsts, uint[] calldata rawAmounts) external returns (bool) {\n', '        uint length = dsts.length;\n', '        require(length == rawAmounts.length, "Shard::transferBatch: calldata arrays must have the same length");\n', '        for (uint i = 0; i < length; i++) {\n', '            uint96 amount = safe96(rawAmounts[i], "Shard::transferBatch: amount exceeds 96 bits");\n', '            _transferTokens(msg.sender, dsts[i], amount);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer `amount` tokens from signatory to `dst`\n', '     * @param dst The address of the destination account\n', '     * @param rawAmount The number of tokens to transfer\n', '     * @param nonce The contract state required to match the signature\n', '     * @param expiry The time at which to expire the signature\n', '     * @param v The recovery byte of the signature\n', '     * @param r Half of the ECDSA signature pair\n', '     * @param s Half of the ECDSA signature pair\n', '     */\n', '    function transferBySig(address dst, uint rawAmount, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) external {\n', '        uint96 amount = safe96(rawAmount, "Shard::transferBySig: amount exceeds 96 bits");\n', '\n', '        require(block.timestamp <= expiry, "Shard::transferBySig: signature expired");\n', '        bytes32 structHash = keccak256(abi.encode(TRANSFER_TYPEHASH, dst, rawAmount, nonce, expiry));\n', '        address signatory = ecrecover(getDigest(structHash), v, r, s);\n', '        require(signatory != address(0), "Shard::transferBySig: invalid signature");\n', '        require(nonce == nonces[signatory]++, "Shard::transferBySig: invalid nonce");\n', '\n', '        return _transferTokens(signatory, dst, amount);\n', '    }\n', '\n', '    /**\n', "     * @notice Transfer `amount` tokens from signatory to `dst` with 'fee' tokens to 'feeTo'\n", '     * @param dst The address of the destination account\n', '     * @param rawAmount The number of tokens to transfer\n', '     * @param rawFee The number of tokens to transfer as fee\n', '     * @param nonce The contract state required to match the signature\n', '     * @param expiry The time at which to expire the signature\n', '     * @param feeTo The address of the fee recipient account chosen by the msg.sender\n', '     * @param v The recovery byte of the signature\n', '     * @param r Half of the ECDSA signature pair\n', '     * @param s Half of the ECDSA signature pair\n', '     */\n', '    function transferWithFeeBySig(address dst, uint rawAmount, uint rawFee, uint nonce, uint expiry, address feeTo, uint8 v, bytes32 r, bytes32 s) external {\n', '        uint96 amount = safe96(rawAmount, "Shard::transferWithFeeBySig: amount exceeds 96 bits");\n', '        uint96 fee = safe96(rawFee, "Shard::transferWithFeeBySig: fee exceeds 96 bits");\n', '\n', '        require(block.timestamp <= expiry, "Shard::transferWithFeeBySig: signature expired");\n', '        bytes32 structHash = keccak256(abi.encode(TRANSFER_WITH_FEE_TYPEHASH, dst, rawAmount, rawFee, nonce, expiry));\n', '        address signatory = ecrecover(getDigest(structHash), v, r, s);\n', '        require(signatory != address(0), "Shard::transferWithFeeBySig: invalid signature");\n', '        require(nonce == nonces[signatory]++, "Shard::transferWithFeeBySig: invalid nonce");\n', '\n', '        _transferTokens(signatory, feeTo, fee);\n', '        return _transferTokens(signatory, dst, amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Delegate votes from `msg.sender` to `delegatee`\n', '     * @param delegatee The address to delegate votes to\n', '     */\n', '    function delegate(address delegatee) public {\n', '        return _delegate(msg.sender, delegatee);\n', '    }\n', '\n', '    /**\n', '     * @notice Delegates votes from signatory to `delegatee`\n', '     * @param delegatee The address to delegate votes to\n', '     * @param nonce The contract state required to match the signature\n', '     * @param expiry The time at which to expire the signature\n', '     * @param v The recovery byte of the signature\n', '     * @param r Half of the ECDSA signature pair\n', '     * @param s Half of the ECDSA signature pair\n', '     */\n', '    function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public {\n', '        require(block.timestamp <= expiry, "Shard::delegateBySig: signature expired");\n', '        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\n', '        address signatory = ecrecover(getDigest(structHash), v, r, s);\n', '        require(signatory != address(0), "Shard::delegateBySig: invalid signature");\n', '        require(nonce == nonces[signatory]++, "Shard::delegateBySig: invalid nonce");\n', '        return _delegate(signatory, delegatee);\n', '    }\n', '\n', '    /**\n', '     * @notice Gets the current votes balance for `account`\n', '     * @param account The address to get votes balance\n', '     * @return The number of current votes for `account`\n', '     */\n', '    function getCurrentVotes(address account) external view returns (uint96) {\n', '        uint32 nCheckpoints = numCheckpoints[account];\n', '        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\n', '    }\n', '\n', '    /**\n', '     * @notice Determine the prior number of votes for an account as of a block number\n', '     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\n', '     * @param account The address of the account to check\n', '     * @param blockNumber The block number to get the vote balance at\n', '     * @return The number of votes the account had as of the given block\n', '     */\n', '    function getPriorVotes(address account, uint blockNumber) public view returns (uint96) {\n', '        require(blockNumber < block.number, "Shard::getPriorVotes: not yet determined");\n', '\n', '        uint32 nCheckpoints = numCheckpoints[account];\n', '        if (nCheckpoints == 0) {\n', '            return 0;\n', '        }\n', '\n', '        // First check most recent balance\n', '        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\n', '            return checkpoints[account][nCheckpoints - 1].votes;\n', '        }\n', '\n', '        // Next check implicit zero balance\n', '        if (checkpoints[account][0].fromBlock > blockNumber) {\n', '            return 0;\n', '        }\n', '\n', '        uint32 lower = 0;\n', '        uint32 upper = nCheckpoints - 1;\n', '        while (upper > lower) {\n', '            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n', '            Checkpoint memory cp = checkpoints[account][center];\n', '            if (cp.fromBlock == blockNumber) {\n', '                return cp.votes;\n', '            } else if (cp.fromBlock < blockNumber) {\n', '                lower = center;\n', '            } else {\n', '                upper = center - 1;\n', '            }\n', '        }\n', '        return checkpoints[account][lower].votes;\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint96 amount) internal {\n', '        allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function _burnTokens(address src, uint96 amount) internal {\n', '        require(src != address(0), "Shard::_burnTokens: cannot transfer from the zero address");\n', '\n', '        balances[src] = sub96(balances[src], amount, "Shard::_burnTokens: transfer amount exceeds balance");\n', '        totalSupply -= amount; // no case where balance exceeds totalSupply\n', '        emit Transfer(src, address(0), amount);\n', '\n', '        _moveDelegates(delegates[src], address(0), amount);\n', '    }\n', '\n', '    function _delegate(address delegator, address delegatee) internal {\n', '        address currentDelegate = delegates[delegator];\n', '        uint96 delegatorBalance = balances[delegator];\n', '        delegates[delegator] = delegatee;\n', '\n', '        emit DelegateChanged(delegator, currentDelegate, delegatee);\n', '\n', '        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\n', '    }\n', '\n', '    function _transferTokens(address src, address dst, uint96 amount) internal {\n', '        require(src != address(0), "Shard::_transferTokens: cannot transfer from the zero address");\n', '        require(dst != address(0), "Shard::_transferTokens: cannot transfer to the zero address");\n', '\n', '        balances[src] = sub96(balances[src], amount, "Shard::_transferTokens: transfer amount exceeds balance");\n', '        balances[dst] = add96(balances[dst], amount, "Shard::_transferTokens: transfer amount overflows");\n', '        emit Transfer(src, dst, amount);\n', '\n', '        _moveDelegates(delegates[src], delegates[dst], amount);\n', '    }\n', '\n', '    function _moveDelegates(address srcRep, address dstRep, uint96 amount) internal {\n', '        if (srcRep != dstRep && amount > 0) {\n', '            if (srcRep != address(0)) {\n', '                uint32 srcRepNum = numCheckpoints[srcRep];\n', '                uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\n', '                uint96 srcRepNew = sub96(srcRepOld, amount, "Shard::_moveVotes: vote amount underflows");\n', '                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\n', '            }\n', '\n', '            if (dstRep != address(0)) {\n', '                uint32 dstRepNum = numCheckpoints[dstRep];\n', '                uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\n', '                uint96 dstRepNew = add96(dstRepOld, amount, "Shard::_moveVotes: vote amount overflows");\n', '                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\n', '            }\n', '        }\n', '    }\n', '\n', '    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint96 oldVotes, uint96 newVotes) internal {\n', '      uint32 blockNumber = safe32(block.number, "Shard::_writeCheckpoint: block number exceeds 32 bits");\n', '\n', '      if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\n', '          checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\n', '      } else {\n', '          checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\n', '          numCheckpoints[delegatee] = nCheckpoints + 1;\n', '      }\n', '\n', '      emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\n', '    }\n', '\n', '    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\n', '        require(n < 2**32, errorMessage);\n', '        return uint32(n);\n', '    }\n', '\n', '    function safe96(uint n, string memory errorMessage) internal pure returns (uint96) {\n', '        require(n < 2**96, errorMessage);\n', '        return uint96(n);\n', '    }\n', '\n', '    function add96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96 c) {\n', '        require((c = a + b) >= a, errorMessage);\n', '    }\n', '\n', '    function sub96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    function add256(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256 c) {\n', '        require((c = a + b) >= a, errorMessage);\n', '    }\n', '\n', '    function getDigest(bytes32 structHash) internal view returns (bytes32) {\n', '        uint256 chainId;\n', '        assembly { chainId := chainid() }\n', '        bytes32 domainSeparator =  keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), chainId, address(this)));\n', '        return keccak256(abi.encodePacked("\\x19\\x01", domainSeparator, structHash));\n', '    }\n', '}']