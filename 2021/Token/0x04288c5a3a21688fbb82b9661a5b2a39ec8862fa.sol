['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-27\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2020-02-27\n', '*/\n', '\n', 'pragma solidity 0.4.19;\n', '\n', '\n', 'contract RegularToken{\n', '\n', '    function transfer(address _to, uint _value) public returns (bool) {\n', "        //Default assumes totalSupply can't be over max (2^256 - 1).\n", '        if (balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { revert(); }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value >= balances[_to]) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { revert(); }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant public returns (uint) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant public returns (uint) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '\n', '    mapping (address => uint) balances;\n', '    mapping (address => mapping (address => uint)) allowed;\n', '    uint public totalSupply;\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', 'contract UnboundedRegularToken is RegularToken {\n', '\n', '    uint constant MAX_UINT = 2**256 - 1;\n', '    \n', '    /// @dev ERC20 transferFrom, modified such that an allowance of MAX_UINT represents an unlimited amount.\n', '    /// @param _from Address to transfer from.\n', '    /// @param _to Address to transfer to.\n', '    /// @param _value Amount to transfer.\n', '    /// @return Success of transfer.\n', '    function transferFrom(address _from, address _to, uint _value)\n', '        public\n', '        returns (bool)\n', '    {\n', '        uint allowance = allowed[_from][msg.sender];\n', '        if (balances[_from] >= _value\n', '            && allowance >= _value\n', '            && balances[_to] + _value >= balances[_to]\n', '        ) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            if (allowance < MAX_UINT) {\n', '                allowed[_from][msg.sender] -= _value;\n', '            }\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else {\n', '            revert();\n', '        }\n', '    }\n', '}\n', '\n', 'contract YOUToken is UnboundedRegularToken {\n', '\n', '    uint8 constant public decimals = 18;\n', '    string constant public name = "YOU";\n', '    string constant public symbol = "YOU";\n', '\n', '    function YOUToken() public {\n', '        totalSupply = 1000000000 * 10 ** uint256(decimals);\n', '        balances[msg.sender] = totalSupply;\n', '        Transfer(address(0), msg.sender, totalSupply);\n', '    }\n', '}']