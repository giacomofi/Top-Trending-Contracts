['//SPDX-License-Identifier: Unlicense\n', 'pragma solidity 0.7.3;\n', '\n', 'import "../interfaces/IBurnable.sol";\n', '\n', '\n', 'contract BurnValley {\n', '  event TokensDestroyed(address token, uint256 amount, address burner);\n', '  /**\n', '    * @dev Method for burning any token from contract balance.\n', '    *\n', '    * Can be called by Factory contract\n', '    *\n', '    * Emits a {TokensDestroyed} event.\n', '    */\n', '  function burnAllTokens(address _token) external {\n', '    IBurnable token = IBurnable(_token);\n', '\n', '    uint256 balance = token.balanceOf(address(this));\n', '    token.burn(balance);\n', '\n', '    emit TokensDestroyed(_token, balance, msg.sender);\n', '  }\n', '}\n', '\n', '//SPDX-License-Identifier: Unlicense\n', 'pragma solidity 0.7.3;\n', '\n', 'interface IBurnable {\n', '  function burn(uint256 amount) external;\n', '  function balanceOf(address account) external view returns (uint256);\n', '}']