['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-26\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-26\n', '*/\n', '\n', 'pragma solidity ^0.5.17;\n', '\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address account) external view returns (uint);\n', '    function transfer(address recipient, uint amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '    function approve(address spender, uint amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '\n', 'contract Context {\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint;\n', '\n', '    mapping (address => uint) private _balances;\n', '\n', '    mapping (address => mapping (address => uint)) private _allowances;\n', '\n', '    uint private _totalSupply;\n', '    function totalSupply() public view returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '    function balanceOf(address account) public view returns (uint) {\n', '        return _balances[account];\n', '    }\n', '    function transfer(address recipient, uint amount) public returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '    function allowance(address owner, address spender) public view returns (uint) {\n', '        return _allowances[owner][spender];\n', '    }\n', '    function approve(address spender, uint amount) public returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '    function transferFrom(address sender, address recipient, uint amount) public returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '    function increaseAllowance(address spender, uint addedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '    function decreaseAllowance(address spender, uint subtractedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '    function _transfer(address sender, address recipient, uint amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '    function _mint(address account, uint amount) internal {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '    function _burn(address account, uint amount) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '    function _approve(address owner, address spender, uint amount) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '}\n', '\n', 'contract ERC20Detailed is IERC20 {\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    constructor (string memory name, string memory symbol, uint8 decimals) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        require(b <= a, errorMessage);\n', '        uint c = a - b;\n', '\n', '        return c;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint c = a / b;\n', '\n', '        return c;\n', '    }\n', '}\n', '\n', 'library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != 0x0 && codehash != accountHash);\n', '    }\n', '}\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint value) internal {\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract SwapBloexToken is ERC20, ERC20Detailed {\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '    using SafeMath for uint;\n', '    \n', '    IERC20 public btToken;   \n', '    IERC20 public usdtToken;\n', '    address public governance;\n', '\n', '    uint8 public isOpenDeposit = 1;\n', '    uint8 public isOpenWithdraw = 1;\n', '    \n', '    uint public btRate = 2230;              //bt founding value\n', '    uint constant public rateBase = 10000; \n', '\n', '    address constant public usdt = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);      //Tether USD (USDT)\n', '    address constant public bt = address(0x061C266cAF366e73CeA4bdc9DC22392fb81115F2);             //Bloex Token (BT) \n', '\n', '\n', '    constructor () public ERC20Detailed("BloexSwap", "BTSwap", 18) {\n', '        btToken = IERC20(bt);\n', '        usdtToken = IERC20(usdt);\n', '        governance = 0x1360CFA0606E5b057df468D540fA81F75d8146E3;\n', '    }\n', '    \n', '    function setGovernance(address _governance) public {\n', '        require(msg.sender == governance, "!governance");\n', '        governance = _governance;\n', '    }\n', '    \n', '    //set bt founding value\n', '    function setBTRate(uint _btRate) external {\n', '        require(msg.sender == governance, "!governance");\n', '        btRate = _btRate;\n', '    }\n', '    \n', '    function setOpenDeposit(uint8 _isOpenDeposit) external {\n', '        require(msg.sender == governance, "!governance");\n', '        isOpenDeposit = _isOpenDeposit;\n', '    }\n', '    function setOpenWithdraw(uint8 _isOpenWithdraw) external {\n', '        require(msg.sender == governance, "!governance");\n', '        isOpenWithdraw = _isOpenWithdraw;\n', '    }\n', '\n', '\n', '    //buy bt with usdt\n', '    function deposit(uint _amount) public {\n', '        require(isOpenDeposit == 1, "!isOpenDeposit");\n', '\n', '        // Check usdt balance\n', '        require(_amount <= usdtToken.balanceOf(msg.sender), "!sufficient USDT");\n', '\n', '        //get bt amount\n', '        uint bt_amount = _amount.mul(rateBase).div(btRate).mul(1e12);  //18 decimals\n', '        \n', '        // Check bt balance\n', '        require(bt_amount <= btToken.balanceOf(address(this)), "!sufficient BT");        \n', '\n', '        //deposit usdt\n', '        usdtToken.safeTransferFrom(msg.sender, address(this), _amount);\n', '\n', '        //pay bt\n', '        btToken.safeTransfer(msg.sender, bt_amount);\n', '    }\n', '    \n', '    //swap bt to usdt\n', '    function withdraw(uint _amount) public {\n', '        require(isOpenWithdraw == 1, "!isOpenWithdraw");\n', '        \n', '        // Check bt balance\n', '        require(_amount <= btToken.balanceOf(msg.sender), "!sufficient BT");\n', '        \n', '        //swap back usdt amount\n', '        uint usdt_amount = _amount.mul(btRate).div(rateBase).div(1e12);  //6 decimals\n', '        \n', '        // Check usdt balance\n', '        require(usdt_amount <= usdtToken.balanceOf(address(this)), "!sufficient USDT");\n', '        \n', '        //withdraw bt\n', '        btToken.safeTransferFrom(msg.sender, address(this), _amount);\n', '\n', '        //pay usdt\n', '        usdtToken.safeTransfer(msg.sender, usdt_amount);\n', '    }\n', '    \n', '    function depositAll() external {\n', '        require(isOpenDeposit == 1, "!isOpenDeposit");\n', '        \n', '        deposit(usdtToken.balanceOf(msg.sender));\n', '    }\n', '    \n', '    function withdrawAll() external {\n', '        require(isOpenWithdraw == 1, "!isOpenWithdraw");\n', '        \n', '        withdraw(balanceOf(msg.sender));\n', '    }\n', '    \n', '    function moveUSDT() public {\n', '        require(msg.sender == governance, "!governance");\n', '        uint _amount = usdtToken.balanceOf(address(this));\n', '        usdtToken.safeTransfer(msg.sender, _amount);\n', '    }\n', '    \n', '    function moveBT() public {\n', '        require(msg.sender == governance, "!governance");\n', '        uint _amount = btToken.balanceOf(address(this));\n', '        btToken.safeTransfer(msg.sender, _amount);\n', '    }\n', '\n', '    //bt balanceOf\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return btToken.balanceOf(_owner);\n', '\n', '    }\n', '    \n', '    function inCaseTokensGetStuck(address _token, uint _amount) public {\n', '      //any erc20\n', '      require(msg.sender == governance, "!governance");\n', '      IERC20(_token).safeTransfer(governance, _amount);\n', '    }\n', '    \n', '    function getPricePerFullShare() public view returns (uint) {\n', '      return btRate.mul(1e18).div(rateBase);\n', '    }\n', '}']