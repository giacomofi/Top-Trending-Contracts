['# @version 0.2.8\n', '"""\n', '@title Vesting Escrow Factory\n', '@author Curve Finance, Yearn Finance\n', '@license MIT\n', '@notice Stores and distributes ERC20 tokens by deploying `VestingEscrowSimple` contracts\n', '"""\n', '\n', 'from vyper.interfaces import ERC20\n', '\n', '\n', 'interface VestingEscrowSimple:\n', '    def initialize(\n', '        admin: address,\n', '        token: address,\n', '        recipient: address,\n', '        amount: uint256,\n', '        start_time: uint256,\n', '        end_time: uint256,\n', '        cliff_length: uint256,\n', '    ) -> bool: nonpayable\n', '\n', '\n', 'event VestingEscrowCreated:\n', '    funder: indexed(address)\n', '    token: indexed(address)\n', '    recipient: indexed(address)\n', '    escrow: address\n', '    amount: uint256\n', '    vesting_start: uint256\n', '    vesting_duration: uint256\n', '    cliff_length: uint256\n', '\n', '\n', 'target: public(address)\n', '\n', '@external\n', 'def __init__(target: address):\n', '    """\n', '    @notice Contract constructor\n', '    @dev Prior to deployment you must deploy one copy of `VestingEscrowSimple` which\n', '         is used as a library for vesting contracts deployed by this factory\n', '    @param target `VestingEscrowSimple` contract address\n', '    """\n', '    self.target = target\n', '\n', '\n', '@external\n', 'def deploy_vesting_contract(\n', '    token: address,\n', '    recipient: address,\n', '    amount: uint256,\n', '    vesting_duration: uint256,\n', '    vesting_start: uint256 = block.timestamp,\n', '    cliff_length: uint256 = 0,\n', ') -> address:\n', '    """\n', '    @notice Deploy a new vesting contract\n', '    @param token Address of the ERC20 token being distributed\n', '    @param recipient Address to vest tokens for\n', '    @param amount Amount of tokens being vested for `recipient`\n', '    @param vesting_duration Time period over which tokens are released\n', '    @param vesting_start Epoch time when tokens begin to vest\n', '    """\n', '    assert cliff_length <= vesting_duration  # dev: incorrect vesting cliff\n', '    escrow: address = create_forwarder_to(self.target)\n', '    assert ERC20(token).transferFrom(msg.sender, self, amount)  # dev: funding failed\n', '    assert ERC20(token).approve(escrow, amount)  # dev: approve failed\n', '    VestingEscrowSimple(escrow).initialize(\n', '        msg.sender,\n', '        token,\n', '        recipient,\n', '        amount,\n', '        vesting_start,\n', '        vesting_start + vesting_duration,\n', '        cliff_length,\n', '    )\n', '    log VestingEscrowCreated(msg.sender, token, recipient, escrow, amount, vesting_start, vesting_duration, cliff_length)\n', '    return escrow']