['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-24\n', '*/\n', '\n', '// SPDX-License-Identifier: UNLICENSED\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface IERC20 {\n', '  function initialize() external;\n', '  function totalSupply() external view returns (uint);\n', '  function balanceOf(address account) external view returns (uint);\n', '  function transfer(address recipient, uint256 amount) external returns (bool);\n', '  function allowance(address owner, address spender) external view returns (uint);\n', '  function symbol() external view returns (string memory);\n', '  function decimals() external view returns (uint);\n', '  function approve(address spender, uint amount) external returns (bool);\n', '  function mint(address account, uint amount) external;\n', '  function burn(address account, uint amount) external;\n', '  function transferFrom(address sender, address recipient, uint amount) external returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'contract Ownable {\n', '\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  constructor() {\n', '    owner = msg.sender;\n', '    emit OwnershipTransferred(address(0), owner);\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(isOwner(), "Ownable: caller is not the owner");\n', '    _;\n', '  }\n', '\n', '  function isOwner() public view returns (bool) {\n', '    return msg.sender == owner;\n', '  }\n', '\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipTransferred(owner, address(0));\n', '    owner = address(0);\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    _transferOwnership(newOwner);\n', '  }\n', '\n', '  function _transferOwnership(address newOwner) internal {\n', '    require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'contract Vesting is Ownable {\n', '\n', '  IERC20 public asset;\n', '\n', '  uint public startBlock;\n', '  uint public durationBlocks;\n', '  uint public released;\n', '\n', '  constructor(\n', '    IERC20 _asset,\n', '    uint _startBlock,\n', '    uint _durationBlocks\n', '  ) {\n', '\n', '    require(_asset != IERC20(address(0)), "Vesting: _asset is zero address");\n', '    require(_startBlock + _durationBlocks > block.number, "Vesting: final block is before current block");\n', '    require(_durationBlocks > 0, "Vesting: _duration == 0");\n', '\n', '    asset = _asset;\n', '    startBlock = _startBlock;\n', '    durationBlocks = _durationBlocks;\n', '  }\n', '\n', '  function release(uint _amount) public onlyOwner {\n', '\n', '    require(block.number > startBlock, "Vesting: not started yet");\n', '    uint unreleased = releasableAmount();\n', '\n', '    require(unreleased > 0, "Vesting: no assets are due");\n', '    require(unreleased >= _amount, "Vesting: _amount too high");\n', '\n', '    released += _amount;\n', '    asset.transfer(owner, _amount);\n', '  }\n', '\n', '  function releasableAmount() public view returns (uint) {\n', '    return vestedAmount() - released;\n', '  }\n', '\n', '  function vestedAmount() public view returns (uint) {\n', '    uint currentBalance = asset.balanceOf(address(this));\n', '    uint totalBalance = currentBalance + released;\n', '\n', '    if (block.number >= startBlock + durationBlocks) {\n', '      return totalBalance;\n', '    } else {\n', '      return totalBalance * (block.number - startBlock) / durationBlocks;\n', '    }\n', '  }\n', '}']