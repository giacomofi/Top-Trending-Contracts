['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-23\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.7.0;\n', '\n', 'contract ERC20 {\n', '    string public symbol;\n', '    string public name;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '    mapping (address=>uint256) balances;\n', '    mapping (address=>mapping (address=>uint256)) allowed;\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {return balances[_owner];}\n', '\n', '    function transfer(address _to, uint256 _amount) public returns (bool success) {\n', '        require (balances[msg.sender]>=_amount&&_amount>0);\n', '        balances[msg.sender]-=_amount;\n', '        balances[_to]+=_amount;\n', '        emit Transfer(msg.sender,_to,_amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from,address _to,uint256 _amount) public returns (bool success) {\n', '        require (balances[_from]>=_amount&&allowed[_from][msg.sender]>=_amount&&_amount>0);\n', '        balances[_from]-=_amount;\n', '        allowed[_from][msg.sender]-=_amount;\n', '        balances[_to]+=_amount;\n', '        emit Transfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _amount) public returns (bool success) {\n', '        allowed[msg.sender][_spender]=_amount;\n', '        emit Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', 'contract StabToken is ERC20{\n', '    address public owner;\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    event Mint(uint256 _value);\n', '    event Burn(uint256 _value);\n', '\n', '    constructor(address _owner) {\n', '        symbol = "STAB";\n', '        name = "Stabilization of Assets in Building";\n', '        decimals = 8;\n', '        totalSupply = 2130000000000000;\n', '        owner = _owner;\n', '        balances[owner] = totalSupply;\n', '    }\n', '\n', '    receive() external payable {\n', '        revert();\n', '    }\n', '\n', '    function mint(uint256 _amount) public onlyOwner returns (bool){\n', '        require(_amount>=1*10**decimals,"wrongAmount");\n', '        balances[owner]+=_amount;\n', '        totalSupply+=_amount;\n', '        emit Mint(_amount);\n', '        return true;\n', '    }\n', '\n', '    function burn(uint256 _amount) public onlyOwner returns (bool){\n', '        require(_amount>=1*10**decimals&&_amount<=balances[owner],"wrongAmount");\n', '        balances[owner]-=_amount;\n', '        totalSupply-=_amount;\n', '        emit Burn(_amount);\n', '        return true;\n', '    }\n', '}']