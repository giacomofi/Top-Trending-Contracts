['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-09\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '\tfunction _msgSender() internal view virtual returns (address payable) {\n', '\t\treturn msg.sender;\n', '\t}\n', '\n', '\tfunction _msgData() internal view virtual returns (bytes memory) {\n', '\t\tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '\t\treturn msg.data;\n', '\t}\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '\t/**\n', '\t * @dev Returns the amount of tokens in existence.\n', '\t */\n', '\tfunction totalSupply() external view returns (uint256);\n', '\n', '\t/**\n', '\t * @dev Returns the amount of tokens owned by `account`.\n', '\t */\n', '\tfunction balanceOf(address account) external view returns (uint256);\n', '\n', '\t/**\n', "\t * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '\t *\n', '\t * Returns a boolean value indicating whether the operation succeeded.\n', '\t *\n', '\t * Emits a {Transfer} event.\n', '\t */\n', '\tfunction transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '\t/**\n', '\t * @dev Returns the remaining number of tokens that `spender` will be\n', '\t * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '\t * zero by default.\n', '\t *\n', '\t * This value changes when {approve} or {transferFrom} are called.\n', '\t */\n', '\tfunction allowance(address owner, address spender) external view returns (uint256);\n', '\n', '\t/**\n', "\t * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '\t *\n', '\t * Returns a boolean value indicating whether the operation succeeded.\n', '\t *\n', '\t * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '\t * that someone may use both the old and the new allowance by unfortunate\n', '\t * transaction ordering. One possible solution to mitigate this race\n', "\t * condition is to first reduce the spender's allowance to 0 and set the\n", '\t * desired value afterwards:\n', '\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '\t *\n', '\t * Emits an {Approval} event.\n', '\t */\n', '\tfunction approve(address spender, uint256 amount) external returns (bool);\n', '\n', '\t/**\n', '\t * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "\t * allowance mechanism. `amount` is then deducted from the caller's\n", '\t * allowance.\n', '\t *\n', '\t * Returns a boolean value indicating whether the operation succeeded.\n', '\t *\n', '\t * Emits a {Transfer} event.\n', '\t */\n', '\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '\t/**\n', '\t * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '\t * another (`to`).\n', '\t *\n', '\t * Note that `value` may be zero.\n', '\t */\n', '\tevent Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '\t/**\n', '\t * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '\t * a call to {approve}. `value` is the new allowance.\n', '\t */\n', '\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '\t/**\n', '\t * @dev Returns the addition of two unsigned integers, reverting on\n', '\t * overflow.\n', '\t *\n', "\t * Counterpart to Solidity's `+` operator.\n", '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - Addition cannot overflow.\n', '\t */\n', '\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tuint256 c = a + b;\n', '\t\trequire(c >= a, "SafeMath: addition overflow");\n', '\n', '\t\treturn c;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the subtraction of two unsigned integers, reverting on\n', '\t * overflow (when the result is negative).\n', '\t *\n', "\t * Counterpart to Solidity's `-` operator.\n", '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - Subtraction cannot overflow.\n', '\t */\n', '\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\treturn sub(a, b, "SafeMath: subtraction overflow");\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '\t * overflow (when the result is negative).\n', '\t *\n', "\t * Counterpart to Solidity's `-` operator.\n", '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - Subtraction cannot overflow.\n', '\t */\n', '\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '\t\trequire(b <= a, errorMessage);\n', '\t\tuint256 c = a - b;\n', '\n', '\t\treturn c;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the multiplication of two unsigned integers, reverting on\n', '\t * overflow.\n', '\t *\n', "\t * Counterpart to Solidity's `*` operator.\n", '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - Multiplication cannot overflow.\n', '\t */\n', '\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "\t\t// benefit is lost if 'b' is also tested.\n", '\t\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '\t\tif (a == 0) {\n', '\t\t\treturn 0;\n', '\t\t}\n', '\n', '\t\tuint256 c = a * b;\n', '\t\trequire(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '\t\treturn c;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the integer division of two unsigned integers. Reverts on\n', '\t * division by zero. The result is rounded towards zero.\n', '\t *\n', "\t * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '\t * uses an invalid opcode to revert (consuming all remaining gas).\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - The divisor cannot be zero.\n', '\t */\n', '\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\treturn div(a, b, "SafeMath: division by zero");\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '\t * division by zero. The result is rounded towards zero.\n', '\t *\n', "\t * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '\t * uses an invalid opcode to revert (consuming all remaining gas).\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - The divisor cannot be zero.\n', '\t */\n', '\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '\t\trequire(b > 0, errorMessage);\n', '\t\tuint256 c = a / b;\n', "\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '\t\treturn c;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '\t * Reverts when dividing by zero.\n', '\t *\n', "\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '\t * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '\t * invalid opcode to revert (consuming all remaining gas).\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - The divisor cannot be zero.\n', '\t */\n', '\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\treturn mod(a, b, "SafeMath: modulo by zero");\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '\t * Reverts with custom message when dividing by zero.\n', '\t *\n', "\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '\t * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '\t * invalid opcode to revert (consuming all remaining gas).\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - The divisor cannot be zero.\n', '\t */\n', '\tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '\t\trequire(b != 0, errorMessage);\n', '\t\treturn a % b;\n', '\t}\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '\t/**\n', '\t * @dev Returns true if `account` is a contract.\n', '\t *\n', '\t * [IMPORTANT]\n', '\t * ====\n', '\t * It is unsafe to assume that an address for which this function returns\n', '\t * false is an externally-owned account (EOA) and not a contract.\n', '\t *\n', '\t * Among others, `isContract` will return false for the following\n', '\t * types of addresses:\n', '\t *\n', '\t *  - an externally-owned account\n', '\t *  - a contract in construction\n', '\t *  - an address where a contract will be created\n', '\t *  - an address where a contract lived, but was destroyed\n', '\t * ====\n', '\t */\n', '\tfunction isContract(address account) internal view returns (bool) {\n', '\t\t// This method relies in extcodesize, which returns 0 for contracts in\n', '\t\t// construction, since the code is only stored at the end of the\n', '\t\t// constructor execution.\n', '\n', '\t\tuint256 size;\n', '\t\t// solhint-disable-next-line no-inline-assembly\n', '\t\tassembly { size := extcodesize(account) }\n', '\t\treturn size > 0;\n', '\t}\n', '\n', '\t/**\n', "\t * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '\t * `recipient`, forwarding all available gas and reverting on errors.\n', '\t *\n', '\t * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '\t * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '\t * imposed by `transfer`, making them unable to receive funds via\n', '\t * `transfer`. {sendValue} removes this limitation.\n', '\t *\n', '\t * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '\t *\n', '\t * IMPORTANT: because control is transferred to `recipient`, care must be\n', '\t * taken to not create reentrancy vulnerabilities. Consider using\n', '\t * {ReentrancyGuard} or the\n', '\t * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '\t */\n', '\tfunction sendValue(address payable recipient, uint256 amount) internal {\n', '\t\trequire(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '\t\t// solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '\t\t(bool success, ) = recipient.call{ value: amount }("");\n', '\t\trequire(success, "Address: unable to send value, recipient may have reverted");\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Performs a Solidity function call using a low level `call`. A\n', '\t * plain`call` is an unsafe replacement for a function call: use this\n', '\t * function instead.\n', '\t *\n', '\t * If `target` reverts with a revert reason, it is bubbled up by this\n', '\t * function (like regular Solidity function calls).\n', '\t *\n', '\t * Returns the raw returned data. To convert to the expected return value,\n', '\t * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - `target` must be a contract.\n', '\t * - calling `target` with `data` must not revert.\n', '\t *\n', '\t * _Available since v3.1._\n', '\t */\n', '\tfunction functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '\t  return functionCall(target, data, "Address: low-level call failed");\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '\t * `errorMessage` as a fallback revert reason when `target` reverts.\n', '\t *\n', '\t * _Available since v3.1._\n', '\t */\n', '\tfunction functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '\t\treturn _functionCallWithValue(target, data, 0, errorMessage);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '\t * but also transferring `value` wei to `target`.\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - the calling contract must have an ETH balance of at least `value`.\n', '\t * - the called Solidity function must be `payable`.\n', '\t *\n', '\t * _Available since v3.1._\n', '\t */\n', '\tfunction functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '\t\treturn functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '\t * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '\t *\n', '\t * _Available since v3.1._\n', '\t */\n', '\tfunction functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '\t\trequire(address(this).balance >= value, "Address: insufficient balance for call");\n', '\t\treturn _functionCallWithValue(target, data, value, errorMessage);\n', '\t}\n', '\n', '\tfunction _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '\t\trequire(isContract(target), "Address: call to non-contract");\n', '\n', '\t\t// solhint-disable-next-line avoid-low-level-calls\n', '\t\t(bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '\t\tif (success) {\n', '\t\t\treturn returndata;\n', '\t\t} else {\n', '\t\t\t// Look for revert reason and bubble it up if present\n', '\t\t\tif (returndata.length > 0) {\n', '\t\t\t\t// The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '\t\t\t\t// solhint-disable-next-line no-inline-assembly\n', '\t\t\t\tassembly {\n', '\t\t\t\t\tlet returndata_size := mload(returndata)\n', '\t\t\t\t\trevert(add(32, returndata), returndata_size)\n', '\t\t\t\t}\n', '\t\t\t} else {\n', '\t\t\t\trevert(errorMessage);\n', '\t\t\t}\n', '\t\t}\n', '\t}\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '\tusing SafeMath for uint256;\n', '\tusing Address for address;\n', '\n', '\tmapping (address => uint256) private _balances;\n', '\n', '\tmapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '\tuint256 private _totalSupply;\n', '\n', '\tstring private _name;\n', '\tstring private _symbol;\n', '\tuint8 private _decimals;\n', '\n', '\t/**\n', '\t * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '\t * a default value of 18.\n', '\t *\n', '\t * To select a different value for {decimals}, use {_setupDecimals}.\n', '\t *\n', '\t * All three of these values are immutable: they can only be set once during\n', '\t * construction.\n', '\t */\n', '\tconstructor (string memory name, string memory symbol) public {\n', '\t\t_name = name;\n', '\t\t_symbol = symbol;\n', '\t\t_decimals = 18;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the name of the token.\n', '\t */\n', '\tfunction name() public view returns (string memory) {\n', '\t\treturn _name;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the symbol of the token, usually a shorter version of the\n', '\t * name.\n', '\t */\n', '\tfunction symbol() public view returns (string memory) {\n', '\t\treturn _symbol;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the number of decimals used to get its user representation.\n', '\t * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '\t * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '\t *\n', '\t * Tokens usually opt for a value of 18, imitating the relationship between\n', '\t * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '\t * called.\n', '\t *\n', '\t * NOTE: This information is only used for _display_ purposes: it in\n', '\t * no way affects any of the arithmetic of the contract, including\n', '\t * {IERC20-balanceOf} and {IERC20-transfer}.\n', '\t */\n', '\tfunction decimals() public view returns (uint8) {\n', '\t\treturn _decimals;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev See {IERC20-totalSupply}.\n', '\t */\n', '\tfunction totalSupply() public view override returns (uint256) {\n', '\t\treturn _totalSupply;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev See {IERC20-balanceOf}.\n', '\t */\n', '\tfunction balanceOf(address account) public view override returns (uint256) {\n', '\t\treturn _balances[account];\n', '\t}\n', '\n', '\t/**\n', '\t * @dev See {IERC20-transfer}.\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - `recipient` cannot be the zero address.\n', '\t * - the caller must have a balance of at least `amount`.\n', '\t */\n', '\tfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '\t\t_transfer(_msgSender(), recipient, amount);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev See {IERC20-allowance}.\n', '\t */\n', '\tfunction allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '\t\treturn _allowances[owner][spender];\n', '\t}\n', '\n', '\t/**\n', '\t * @dev See {IERC20-approve}.\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - `spender` cannot be the zero address.\n', '\t */\n', '\tfunction approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '\t\t_approve(_msgSender(), spender, amount);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev See {IERC20-transferFrom}.\n', '\t *\n', '\t * Emits an {Approval} event indicating the updated allowance. This is not\n', '\t * required by the EIP. See the note at the beginning of {ERC20};\n', '\t *\n', '\t * Requirements:\n', '\t * - `sender` and `recipient` cannot be the zero address.\n', '\t * - `sender` must have a balance of at least `amount`.\n', "\t * - the caller must have allowance for ``sender``'s tokens of at least\n", '\t * `amount`.\n', '\t */\n', '\tfunction transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '\t\t_transfer(sender, recipient, amount);\n', '\t\t_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '\t *\n', '\t * This is an alternative to {approve} that can be used as a mitigation for\n', '\t * problems described in {IERC20-approve}.\n', '\t *\n', '\t * Emits an {Approval} event indicating the updated allowance.\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - `spender` cannot be the zero address.\n', '\t */\n', '\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '\t *\n', '\t * This is an alternative to {approve} that can be used as a mitigation for\n', '\t * problems described in {IERC20-approve}.\n', '\t *\n', '\t * Emits an {Approval} event indicating the updated allowance.\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - `spender` cannot be the zero address.\n', '\t * - `spender` must have allowance for the caller of at least\n', '\t * `subtractedValue`.\n', '\t */\n', '\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '\t *\n', '\t * This is internal function is equivalent to {transfer}, and can be used to\n', '\t * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '\t *\n', '\t * Emits a {Transfer} event.\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - `sender` cannot be the zero address.\n', '\t * - `recipient` cannot be the zero address.\n', '\t * - `sender` must have a balance of at least `amount`.\n', '\t */\n', '\tfunction _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '\t\trequire(sender != address(0), "ERC20: transfer from the zero address");\n', '\t\trequire(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '\t\t_beforeTokenTransfer(sender, recipient, amount);\n', '\n', '\t\t_balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '\t\t_balances[recipient] = _balances[recipient].add(amount);\n', '\t\temit Transfer(sender, recipient, amount);\n', '\t}\n', '\n', '\t/** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '\t * the total supply.\n', '\t *\n', '\t * Emits a {Transfer} event with `from` set to the zero address.\n', '\t *\n', '\t * Requirements\n', '\t *\n', '\t * - `to` cannot be the zero address.\n', '\t */\n', '\tfunction _mint(address account, uint256 amount) internal virtual {\n', '\t\trequire(account != address(0), "ERC20: mint to the zero address");\n', '\n', '\t\t_beforeTokenTransfer(address(0), account, amount);\n', '\n', '\t\t_totalSupply = _totalSupply.add(amount);\n', '\t\t_balances[account] = _balances[account].add(amount);\n', '\t\temit Transfer(address(0), account, amount);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Destroys `amount` tokens from `account`, reducing the\n', '\t * total supply.\n', '\t *\n', '\t * Emits a {Transfer} event with `to` set to the zero address.\n', '\t *\n', '\t * Requirements\n', '\t *\n', '\t * - `account` cannot be the zero address.\n', '\t * - `account` must have at least `amount` tokens.\n', '\t */\n', '\tfunction _burn(address account, uint256 amount) internal virtual {\n', '\t\trequire(account != address(0), "ERC20: burn from the zero address");\n', '\n', '\t\t_beforeTokenTransfer(account, address(0), amount);\n', '\n', '\t\t_balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '\t\t_totalSupply = _totalSupply.sub(amount);\n', '\t\temit Transfer(account, address(0), amount);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '\t *\n', '\t * This internal function is equivalent to `approve`, and can be used to\n', '\t * e.g. set automatic allowances for certain subsystems, etc.\n', '\t *\n', '\t * Emits an {Approval} event.\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - `owner` cannot be the zero address.\n', '\t * - `spender` cannot be the zero address.\n', '\t */\n', '\tfunction _approve(address owner, address spender, uint256 amount) internal virtual {\n', '\t\trequire(owner != address(0), "ERC20: approve from the zero address");\n', '\t\trequire(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '\t\t_allowances[owner][spender] = amount;\n', '\t\temit Approval(owner, spender, amount);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Sets {decimals} to a value other than the default one of 18.\n', '\t *\n', '\t * WARNING: This function should only be called from the constructor. Most\n', '\t * applications that interact with token contracts will not expect\n', '\t * {decimals} to ever change, and may work incorrectly if it does.\n', '\t */\n', '\tfunction _setupDecimals(uint8 decimals_) internal {\n', '\t\t_decimals = decimals_;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Hook that is called before any transfer of tokens. This includes\n', '\t * minting and burning.\n', '\t *\n', '\t * Calling conditions:\n', '\t *\n', "\t * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '\t * will be to transferred to `to`.\n', '\t * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "\t * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '\t * - `from` and `to` are never both zero.\n', '\t *\n', '\t * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '\t */\n', '\tfunction _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '\taddress private _owner;\n', '\n', '\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\t/**\n', '\t * @dev Initializes the contract setting the deployer as the initial owner.\n', '\t */\n', '\tconstructor () internal {\n', '\t\taddress msgSender = _msgSender();\n', '\t\t_owner = msgSender;\n', '\t\temit OwnershipTransferred(address(0), msgSender);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the address of the current owner.\n', '\t */\n', '\tfunction owner() public view returns (address) {\n', '\t\treturn _owner;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Throws if called by any account other than the owner.\n', '\t */\n', '\tmodifier onlyOwner() {\n', '\t\trequire(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '\t\t_;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Leaves the contract without owner. It will not be possible to call\n', '\t * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '\t *\n', '\t * NOTE: Renouncing ownership will leave the contract without an owner,\n', '\t * thereby removing any functionality that is only available to the owner.\n', '\t */\n', '\tfunction renounceOwnership() public virtual onlyOwner {\n', '\t\temit OwnershipTransferred(_owner, address(0));\n', '\t\t_owner = address(0);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '\t * Can only be called by the current owner.\n', '\t */\n', '\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\n', '\t\trequire(newOwner != address(0), "Ownable: new owner is the zero address");\n', '\t\temit OwnershipTransferred(_owner, newOwner);\n', '\t\t_owner = newOwner;\n', '\t}\n', '}\n', '\n', '// File: contracts/TicketCoin.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '// TicketCoin with Governance.\n', 'contract TicketCoin is ERC20("TicketCoin", "TIC"), Ownable {\n', '\tuint256 private _cap = 200e24;\n', '\n', '\tconstructor() public {\n', '\t\t_mint(msg.sender, 200e24);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the max amount of tokens can mined.\n', '\t */\n', '\n', '\tfunction cap() public view returns (uint256) {\n', '\t\treturn _cap;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the amount of tokens can mine.\n', '\t */\n', '\n', '\tfunction capfarm() public view returns (uint256) {\n', '\t\treturn cap().sub(totalSupply());\n', '\t}\n', '\n', '\t/**\n', '\t * @dev See {ERC20-_beforeTokenTransfer}.\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - minted tokens must not cause the total supply to go over the cap.\n', '\t */\n', '\tfunction _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\n', '\t\tsuper._beforeTokenTransfer(from, to, amount);\n', '\n', '\t\tif (from == address(0)) { // When minting tokens\n', '\t\t\trequire(totalSupply().add(amount) <= _cap, "ERC20Capped: cap exceeded");\n', '\t\t}\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '\t *\n', '\t * This is internal function is equivalent to {transfer}, and can be used to\n', '\t * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '\t *\n', '\t * Emits a {Transfer} event.\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - `sender` cannot be the zero address.\n', '\t * - `recipient` cannot be the zero address.\n', '\t * - `sender` must have a balance of at least `amount`.\n', '\t */\n', '\tfunction _transfer(address sender, address recipient, uint256 amount) internal virtual override {\n', '\t\tsuper._transfer(sender, recipient, amount);\n', '\t}\n', '\n', '\t/// @notice Creates `_amount` token to `_to`. Must only be called by the owner (MasterChef).\n', '\tfunction mint(address _to, uint256 _amount) public onlyOwner {\n', '\t\t_mint(_to, _amount);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Destroys `amount` tokens from the caller.\n', '\t *\n', '\t * See {ERC20-_burn}.\n', '\t */\n', '\tfunction burn(uint256 amount) public virtual returns (bool) {\n', '\t\t_burn(_msgSender(), amount);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', "\t * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n", '\t * allowance.\n', '\t *\n', '\t * See {ERC20-_burn} and {ERC20-allowance}.\n', '\t *\n', '\t * Requirements:\n', '\t *\n', "\t * - the caller must have allowance for ``accounts``'s tokens of at least\n", '\t * `amount`.\n', '\t */\n', '\tfunction burnFrom(address account, uint256 amount) public virtual returns (bool) {\n', '\t\tuint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, "ERC20: burn amount exceeds allowance");\n', '\n', '\t\t_approve(account, _msgSender(), decreasedAllowance);\n', '\t\t_burn(account, amount);\n', '\t\treturn true;\n', '\t}\n', '}']