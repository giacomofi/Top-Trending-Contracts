['# @version 0.2.12\n', '# (c) Curve.Fi, 2021\n', '# Math for crypto pools\n', '#\n', '# Unless otherwise agreed on, only contracts owned by Curve DAO or\n', '# Swiss Stake GmbH are allowed to call this contract.\n', '\n', 'N_COINS: constant(int128) = 3  # <- change\n', 'A_MULTIPLIER: constant(uint256) = 10000\n', '\n', 'MIN_GAMMA: constant(uint256) = 10**10\n', 'MAX_GAMMA: constant(uint256) = 5 * 10**16\n', '\n', 'MIN_A: constant(uint256) = N_COINS**N_COINS * A_MULTIPLIER / 100\n', 'MAX_A: constant(uint256) = N_COINS**N_COINS * A_MULTIPLIER * 1000\n', '\n', '\n', '@internal\n', '@pure\n', 'def sort(A0: uint256[N_COINS]) -> uint256[N_COINS]:\n', '    """\n', '    Insertion sort from high to low\n', '    """\n', '    A: uint256[N_COINS] = A0\n', '    for i in range(1, N_COINS):\n', '        x: uint256 = A[i]\n', '        cur: uint256 = i\n', '        for j in range(N_COINS):\n', '            y: uint256 = A[cur-1]\n', '            if y > x:\n', '                break\n', '            A[cur] = y\n', '            cur -= 1\n', '            if cur == 0:\n', '                break\n', '        A[cur] = x\n', '    return A\n', '\n', '\n', '@internal\n', '@view\n', 'def _geometric_mean(unsorted_x: uint256[N_COINS], sort: bool = True) -> uint256:\n', '    """\n', '    (x[0] * x[1] * ...) ** (1/N)\n', '    """\n', '    x: uint256[N_COINS] = unsorted_x\n', '    if sort:\n', '        x = self.sort(x)\n', '    D: uint256 = x[0]\n', '    diff: uint256 = 0\n', '    for i in range(255):\n', '        D_prev: uint256 = D\n', '        tmp: uint256 = 10**18\n', '        for _x in x:\n', '            tmp = tmp * _x / D\n', '        D = D * ((N_COINS - 1) * 10**18 + tmp) / (N_COINS * 10**18)\n', '        if D > D_prev:\n', '            diff = D - D_prev\n', '        else:\n', '            diff = D_prev - D\n', '        if diff <= 1 or diff * 10**18 < D:\n', '            return D\n', '    raise "Did not converge"\n', '\n', '\n', '@external\n', '@view\n', 'def geometric_mean(unsorted_x: uint256[N_COINS], sort: bool = True) -> uint256:\n', '    return self._geometric_mean(unsorted_x, sort)\n', '\n', '\n', '@external\n', '@view\n', 'def reduction_coefficient(x: uint256[N_COINS], fee_gamma: uint256) -> uint256:\n', '    """\n', '    fee_gamma / (fee_gamma + (1 - K))\n', '    where\n', '    K = prod(x) / (sum(x) / N)**N\n', '    (all normalized to 1e18)\n', '    """\n', '    K: uint256 = 10**18\n', '    S: uint256 = 0\n', '    for x_i in x:\n', '        S += x_i\n', '    # Could be good to pre-sort x, but it is used only for dynamic fee,\n', '    # so that is not so important\n', '    for x_i in x:\n', '        K = K * N_COINS * x_i / S\n', '    if fee_gamma > 0:\n', '        K = fee_gamma * 10**18 / (fee_gamma + 10**18 - K)\n', '    return K\n', '\n', '\n', '@external\n', '@view\n', 'def newton_D(ANN: uint256, gamma: uint256, x_unsorted: uint256[N_COINS]) -> uint256:\n', '    """\n', '    Finding the invariant using Newton method.\n', '    ANN is higher by the factor A_MULTIPLIER\n', '    ANN is already A * N**N\n', '\n', '    Currently uses 60k gas\n', '    """\n', '    # Safety checks\n', '    assert ANN > MIN_A - 1 and ANN < MAX_A + 1  # dev: unsafe values A\n', '    assert gamma > MIN_GAMMA - 1 and gamma < MAX_GAMMA + 1  # dev: unsafe values gamma\n', '\n', '    # Initial value of invariant D is that for constant-product invariant\n', '    x: uint256[N_COINS] = self.sort(x_unsorted)\n', '\n', '    assert x[0] > 10**9 - 1 and x[0] < 10**15 * 10**18 + 1  # dev: unsafe values x[0]\n', '    for i in range(1, N_COINS):\n', '        frac: uint256 = x[i] * 10**18 / x[0]\n', '        assert frac > 10**11-1  # dev: unsafe values x[i]\n', '\n', '    D: uint256 = N_COINS * self._geometric_mean(x, False)\n', '    S: uint256 = 0\n', '    for x_i in x:\n', '        S += x_i\n', '\n', '    for i in range(255):\n', '        D_prev: uint256 = D\n', '\n', '        K0: uint256 = 10**18\n', '        for _x in x:\n', '            K0 = K0 * _x * N_COINS / D\n', '\n', '        _g1k0: uint256 = gamma + 10**18\n', '        if _g1k0 > K0:\n', '            _g1k0 = _g1k0 - K0 + 1\n', '        else:\n', '            _g1k0 = K0 - _g1k0 + 1\n', '\n', '        # D / (A * N**N) * _g1k0**2 / gamma**2\n', '        mul1: uint256 = 10**18 * D / gamma * _g1k0 / gamma * _g1k0 * A_MULTIPLIER / ANN\n', '\n', '        # 2*N*K0 / _g1k0\n', '        mul2: uint256 = (2 * 10**18) * N_COINS * K0 / _g1k0\n', '\n', '        neg_fprime: uint256 = (S + S * mul2 / 10**18) + mul1 * N_COINS / K0 - mul2 * D / 10**18\n', '\n', '        # D -= f / fprime\n', '        D_plus: uint256 = D * (neg_fprime + S) / neg_fprime\n', '        D_minus: uint256 = D*D / neg_fprime\n', '        if 10**18 > K0:\n', '            D_minus += D * (mul1 / neg_fprime) / 10**18 * (10**18 - K0) / K0\n', '        else:\n', '            D_minus -= D * (mul1 / neg_fprime) / 10**18 * (K0 - 10**18) / K0\n', '\n', '        if D_plus > D_minus:\n', '            D = D_plus - D_minus\n', '        else:\n', '            D = (D_minus - D_plus) / 2\n', '\n', '        diff: uint256 = 0\n', '        if D > D_prev:\n', '            diff = D - D_prev\n', '        else:\n', '            diff = D_prev - D\n', '        if diff * 10**14 < max(10**16, D):  # Could reduce precision for gas efficiency here\n', '            # Test that we are safe with the next newton_y\n', '            for _x in x:\n', '                frac: uint256 = _x * 10**18 / D\n', '                assert (frac > 10**16 - 1) and (frac < 10**20 + 1)  # dev: unsafe values x[i]\n', '            return D\n', '\n', '    raise "Did not converge"\n', '\n', '\n', '@external\n', '@view\n', 'def newton_y(ANN: uint256, gamma: uint256, x: uint256[N_COINS], D: uint256, i: uint256) -> uint256:\n', '    """\n', '    Calculating x[i] given other balances x[0..N_COINS-1] and invariant D\n', '    ANN = A * N**N\n', '    """\n', '    # Safety checks\n', '    assert ANN > MIN_A - 1 and ANN < MAX_A + 1  # dev: unsafe values A\n', '    assert gamma > MIN_GAMMA - 1 and gamma < MAX_GAMMA + 1  # dev: unsafe values gamma\n', '    assert D > 10**17 - 1 and D < 10**15 * 10**18 + 1 # dev: unsafe values D\n', '    for k in range(3):\n', '        if k != i:\n', '            frac: uint256 = x[k] * 10**18 / D\n', '            assert (frac > 10**16 - 1) and (frac < 10**20 + 1)  # dev: unsafe values x[i]\n', '\n', '    y: uint256 = D / N_COINS\n', '    K0_i: uint256 = 10**18\n', '    S_i: uint256 = 0\n', '\n', '    x_sorted: uint256[N_COINS] = x\n', '    x_sorted[i] = 0\n', '    x_sorted = self.sort(x_sorted)  # From high to low\n', '\n', '    convergence_limit: uint256 = max(max(x_sorted[0] / 10**14, D / 10**14), 100)\n', '    for j in range(2, N_COINS+1):\n', '        _x: uint256 = x_sorted[N_COINS-j]\n', '        y = y * D / (_x * N_COINS)  # Small _x first\n', '        S_i += _x\n', '    for j in range(N_COINS-1):\n', '        K0_i = K0_i * x_sorted[j] * N_COINS / D  # Large _x first\n', '\n', '    for j in range(255):\n', '        y_prev: uint256 = y\n', '\n', '        K0: uint256 = K0_i * y * N_COINS / D\n', '        S: uint256 = S_i + y\n', '\n', '        _g1k0: uint256 = gamma + 10**18\n', '        if _g1k0 > K0:\n', '            _g1k0 = _g1k0 - K0 + 1\n', '        else:\n', '            _g1k0 = K0 - _g1k0 + 1\n', '\n', '        # D / (A * N**N) * _g1k0**2 / gamma**2\n', '        mul1: uint256 = 10**18 * D / gamma * _g1k0 / gamma * _g1k0 * A_MULTIPLIER / ANN\n', '\n', '        # 2*K0 / _g1k0\n', '        mul2: uint256 = 10**18 + (2 * 10**18) * K0 / _g1k0\n', '\n', '        yfprime: uint256 = 10**18 * y + S * mul2 + mul1\n', '        _dyfprime: uint256 = D * mul2\n', '        if yfprime < _dyfprime:\n', '            y = y_prev / 2\n', '            continue\n', '        else:\n', '            yfprime -= _dyfprime\n', '        fprime: uint256 = yfprime / y\n', '\n', '        # y -= f / f_prime;  y = (y * fprime - f) / fprime\n', '        # y = (yfprime + 10**18 * D - 10**18 * S) // fprime + mul1 // fprime * (10**18 - K0) // K0\n', '        y_minus: uint256 = mul1 / fprime\n', '        y_plus: uint256 = (yfprime + 10**18 * D) / fprime + y_minus * 10**18 / K0\n', '        y_minus += 10**18 * S / fprime\n', '\n', '        if y_plus < y_minus:\n', '            y = y_prev / 2\n', '        else:\n', '            y = y_plus - y_minus\n', '\n', '        diff: uint256 = 0\n', '        if y > y_prev:\n', '            diff = y - y_prev\n', '        else:\n', '            diff = y_prev - y\n', '        if diff < max(convergence_limit, y / 10**14):\n', '            frac: uint256 = y * 10**18 / D\n', '            assert (frac > 10**16 - 1) and (frac < 10**20 + 1)  # dev: unsafe value for y\n', '            return y\n', '\n', '    raise "Did not converge"\n', '\n', '\n', '@external\n', '@view\n', 'def halfpow(power: uint256, precision: uint256) -> uint256:\n', '    """\n', '    1e18 * 0.5 ** (power/1e18)\n', '\n', '    Inspired by: https://github.com/balancer-labs/balancer-core/blob/master/contracts/BNum.sol#L128\n', '    """\n', '    intpow: uint256 = power / 10**18\n', '    otherpow: uint256 = power - intpow * 10**18\n', '    if intpow > 59:\n', '        return 0\n', '    result: uint256 = 10**18 / (2**intpow)\n', '    if otherpow == 0:\n', '        return result\n', '\n', '    term: uint256 = 10**18\n', '    x: uint256 = 5 * 10**17\n', '    S: uint256 = 10**18\n', '    neg: bool = False\n', '\n', '    for i in range(1, 256):\n', '        K: uint256 = i * 10**18\n', '        c: uint256 = K - 10**18\n', '        if otherpow > c:\n', '            c = otherpow - c\n', '            neg = not neg\n', '        else:\n', '            c -= otherpow\n', '        term = term * (c * x / 10**18) / K\n', '        if neg:\n', '            S -= term\n', '        else:\n', '            S += term\n', '        if term < precision:\n', '            return result * S / 10**18\n', '\n', '    raise "Did not converge"\n', '\n', '\n', '@external\n', '@view\n', 'def sqrt_int(x: uint256) -> uint256:\n', '    """\n', '    Originating from: https://github.com/vyperlang/vyper/issues/1266\n', '    """\n', '\n', '    if x == 0:\n', '        return 0\n', '\n', '    z: uint256 = (x + 10**18) / 2\n', '    y: uint256 = x\n', '\n', '    for i in range(256):\n', '        if z == y:\n', '            return y\n', '        y = z\n', '        z = (x * 10**18 / z + z) / 2\n', '\n', '    raise "Did not converge"']