['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-28\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-27\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.8.1;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}.\n', '     *\n', '     * The defaut value of {decimals} is 18. To select a different value for\n', '     * {decimals} you should overload it.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name_, string memory symbol_) {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view virtual returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view virtual returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n', '     * overloaded;\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view virtual returns (uint8) {\n', '        return 18;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view virtual override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view virtual override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '\n', '        uint256 currentAllowance = _allowances[sender][_msgSender()];\n', '        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");\n', '        _approve(sender, _msgSender(), currentAllowance - amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        uint256 currentAllowance = _allowances[_msgSender()][spender];\n', '        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");\n', '        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        uint256 senderBalance = _balances[sender];\n', '        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[sender] = senderBalance - amount;\n', '        _balances[recipient] += amount;\n', '\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply += amount;\n', '        _balances[account] += amount;\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        uint256 accountBalance = _balances[account];\n', '        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");\n', '        _balances[account] = accountBalance - amount;\n', '        _totalSupply -= amount;\n', '\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Extension of {ERC20} that allows token holders to destroy both their own\n', ' * tokens and those that they have an allowance for, in a way that can be\n', ' * recognized off-chain (via event analysis).\n', ' */\n', 'abstract contract ERC20Burnable is Context, ERC20 {\n', '    /**\n', '     * @dev Destroys `amount` tokens from the caller.\n', '     *\n', '     * See {ERC20-_burn}.\n', '     */\n', '    function burn(uint256 amount) public virtual {\n', '        _burn(_msgSender(), amount);\n', '    }\n', '\n', '    /**\n', "     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n", '     * allowance.\n', '     *\n', '     * See {ERC20-_burn} and {ERC20-allowance}.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have allowance for ``accounts``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function burnFrom(address account, uint256 amount) public virtual {\n', '        uint256 currentAllowance = allowance(account, _msgSender());\n', '        require(currentAllowance >= amount, "ERC20: burn amount exceeds allowance");\n', '        _approve(account, _msgSender(), currentAllowance - amount);\n', '        _burn(account, amount);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'abstract contract Pausable is Context {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by `account`.\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by `account`.\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state.\n', '     */\n', '    constructor () {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view virtual returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused(), "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused(), "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Triggers stopped state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    function _pause() internal virtual whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns to normal state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    function _unpause() internal virtual whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC165 standard, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-165[EIP].\n', ' *\n', ' * Implementers can declare support of contract interfaces, which can then be\n', ' * queried by others ({ERC165Checker}).\n', ' *\n', ' * For an implementation, see {ERC165}.\n', ' */\n', 'interface IERC165 {\n', '    /**\n', '     * @dev Returns true if this contract implements the interface defined by\n', '     * `interfaceId`. See the corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '     * to learn more about how these ids are created.\n', '     *\n', '     * This function call must use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '\n', '/**\n', ' * @dev Required interface of an ERC721 compliant contract.\n', ' */\n', 'interface IERC721 is IERC165 {\n', '    /**\n', '     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n', '\n', '    /**\n', '     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n', '     */\n', '    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n', '\n', '    /**\n', '     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n', '     */\n', '    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n', '\n', '    /**\n', "     * @dev Returns the number of tokens in ``owner``'s account.\n", '     */\n', '    function balanceOf(address owner) external view returns (uint256 balance);\n', '\n', '    /**\n', '     * @dev Returns the owner of the `tokenId` token.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function ownerOf(uint256 tokenId) external view returns (address owner);\n', '\n', '    /**\n', '     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n', '     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must exist and be owned by `from`.\n', '     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n', '     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Transfers `tokenId` token from `from` to `to`.\n', '     *\n', '     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must be owned by `from`.\n', '     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address from, address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n', '     * The approval is cleared when the token is transferred.\n', '     *\n', '     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The caller must own the token or be an approved operator.\n', '     * - `tokenId` must exist.\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Returns the account approved for `tokenId` token.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function getApproved(uint256 tokenId) external view returns (address operator);\n', '\n', '    /**\n', '     * @dev Approve or remove `operator` as an operator for the caller.\n', '     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The `operator` cannot be the caller.\n', '     *\n', '     * Emits an {ApprovalForAll} event.\n', '     */\n', '    function setApprovalForAll(address operator, bool _approved) external;\n', '\n', '    /**\n', '     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n', '     *\n', '     * See {setApprovalForAll}\n', '     */\n', '    function isApprovedForAll(address owner, address operator) external view returns (bool);\n', '\n', '    /**\n', '      * @dev Safely transfers `tokenId` token from `from` to `to`.\n', '      *\n', '      * Requirements:\n', '      *\n', '      * - `from` cannot be the zero address.\n', '      * - `to` cannot be the zero address.\n', '      * - `tokenId` token must exist and be owned by `from`.\n', '      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n', '      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '      *\n', '      * Emits a {Transfer} event.\n', '      */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n', '}\n', '\n', '\n', '/**\n', ' * @dev Required interface of an ERC1155 compliant contract, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n', ' *\n', ' * _Available since v3.1._\n', ' */\n', 'interface IERC1155 is IERC165 {\n', '    /**\n', '     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n', '     */\n', '    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n', '\n', '    /**\n', '     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n', '     * transfers.\n', '     */\n', '    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\n', '\n', '    /**\n', '     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n', '     * `approved`.\n', '     */\n', '    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n', '\n', '    /**\n', '     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n', '     *\n', '     * If an {URI} event was emitted for `id`, the standard\n', '     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n', '     * returned by {IERC1155MetadataURI-uri}.\n', '     */\n', '    event URI(string value, uint256 indexed id);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     */\n', '    function balanceOf(address account, uint256 id) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `accounts` and `ids` must have the same length.\n', '     */\n', '    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\n', '\n', '    /**\n', "     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n", '     *\n', '     * Emits an {ApprovalForAll} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `operator` cannot be the caller.\n', '     */\n', '    function setApprovalForAll(address operator, bool approved) external;\n', '\n', '    /**\n', "     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n", '     *\n', '     * See {setApprovalForAll}.\n', '     */\n', '    function isApprovedForAll(address account, address operator) external view returns (bool);\n', '\n', '    /**\n', '     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n', '     *\n', '     * Emits a {TransferSingle} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', "     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n", '     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n', '     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n', '     * acceptance magic value.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n', '\n', '    /**\n', '     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n', '     *\n', '     * Emits a {TransferBatch} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `ids` and `amounts` must have the same length.\n', '     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n', '     * acceptance magic value.\n', '     */\n', '    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\n', '}\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {setOwner}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifiers\n', ' * `onlyOwner`/`onlyOperator`, which can be applied to your functions to\n', ' * restrict their use to the owner.\n', ' *\n', ' * Operator account can be set to MultiSig contract.\n', ' *\n', ' * In case someone mistakenly sent other tokens to the contract, or ETH,\n', ' * there are functions to transfer those funds to a different address.\n', ' */\n', 'contract AccessControl\n', '{\n', '    mapping (address=>bool) ownerAddress;\n', '    mapping (address=>bool) operatorAddress;\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor() {\n', '        ownerAddress[msg.sender] = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(ownerAddress[msg.sender], "Access denied");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks if provided address has owner permissions.\n', '     */\n', '    function isOwner(address _addr) public view returns (bool) {\n', '        return ownerAddress[_addr];\n', '    }\n', '\n', '    /**\n', '     * @dev Grants owner permission to new account.\n', '     * Can only be called by the current owner.\n', '     */\n', '    function addOwner(address _newOwner) external onlyOwner {\n', '        require(_newOwner != address(0), "New owner is empty");\n', '\n', '        ownerAddress[_newOwner] = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Replaces owner permission to new account.\n', '     * Can only be called by the current owner.\n', '     */\n', '    function setOwner(address _newOwner) external onlyOwner {\n', '        require(_newOwner != address(0), "New owner is empty");\n', '\n', '        ownerAddress[_newOwner] = true;\n', '        delete(ownerAddress[msg.sender]);\n', '    }\n', '\n', '    /**\n', '     * @dev Revokes owner permission from account.\n', '     * Can only be called by the current owner.\n', '     */\n', '    function removeOwner(address _oldOwner) external onlyOwner {\n', '        delete(ownerAddress[_oldOwner]);\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the operator.\n', '     */\n', '    modifier onlyOperator() {\n', '        require(isOperator(msg.sender), "Access denied");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks if provided address has operator or owner permissions.\n', '     */\n', '    function isOperator(address _addr) public view returns (bool) {\n', '        return operatorAddress[_addr] || ownerAddress[_addr];\n', '    }\n', '\n', '    /**\n', '     * @dev Grants operator permission to new account.\n', '     * Can only be called by the current owner.\n', '     */\n', '    function addOperator(address _newOperator) external onlyOwner {\n', '        require(_newOperator != address(0), "New operator is empty");\n', '\n', '        operatorAddress[_newOperator] = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Revokes operator permission from account.\n', '     * Can only be called by the current owner.\n', '     */\n', '    function removeOperator(address _oldOperator) external onlyOwner {\n', '        delete(operatorAddress[_oldOperator]);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers to _withdrawToAddress all tokens controlled by\n', '     * contract _tokenContract.\n', '     */\n', '    function withdrawERC20(\n', '        IERC20 _tokenContract,\n', '        address _withdrawToAddress\n', '    )\n', '        external\n', '        onlyOperator\n', '    {\n', '        uint256 balance = _tokenContract.balanceOf(address(this));\n', '        _tokenContract.transfer(_withdrawToAddress, balance);\n', '    }\n', '\n', '    /**\n', '     * @dev Allow to withdraw ERC721 tokens from contract itself\n', '     */\n', '    function approveERC721(IERC721 _tokenContract, address _approveToAddress)\n', '        external\n', '        onlyOperator\n', '    {\n', '        _tokenContract.setApprovalForAll(_approveToAddress, true);\n', '    }\n', '\n', '    /**\n', '     * @dev Allow to withdraw ERC1155 tokens from contract itself\n', '     */\n', '    function approveERC1155(IERC1155 _tokenContract, address _approveToAddress)\n', '        external\n', '        onlyOperator\n', '    {\n', '        _tokenContract.setApprovalForAll(_approveToAddress, true);\n', '    }\n', '\n', '    /**\n', '     * @dev Allow to withdraw ETH from contract itself (only by owner)\n', '     */\n', '    function withdrawEth(address payable _withdrawToAddress)\n', '        external\n', '        onlyOperator\n', '    {\n', '        if (address(this).balance > 0) {\n', '            _withdrawToAddress.transfer(address(this).balance);\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'interface IERC827  {\n', '    function approveAndCall(address _spender, uint256 _value, bytes memory _data)\n', '        external\n', '        returns (bool);\n', '}\n', '\n', '\n', 'interface IERC223  {\n', '    function transfer(address _to, uint _value, bytes calldata _data)\n', '        external\n', '        returns (bool success);\n', '}\n', '\n', '\n', 'interface IERC20Bulk  {\n', '    function transferBulk(address[] calldata to, uint[] calldata tokens) external;\n', '    function approveBulk(address[] calldata spender, uint[] calldata tokens) external;\n', '}\n', '\n', '\n', 'interface IFungibleToken is IERC20, IERC827, IERC223, IERC20Bulk {\n', '\n', '    function mint(address target, uint256 mintedAmount) external;\n', '\n', '    function mintBulk(address[] calldata target, uint256[] calldata mintedAmount) external;\n', '\n', '    function mintAddDecimals(address target, uint256 mintedAmountWithoutDecimals) external;\n', '\n', '    function mintAddDecimalsBulk(\n', '        address[] calldata targets,\n', '        uint256[] calldata mintedAmountWithoutDecimals\n', '    )\n', '        external;\n', '}\n', '\n', '\n', '/// Contract function to receive approval and execute function in one call\n', 'interface TokenRecipientInterface {\n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external;\n', '}\n', '\n', '\n', '/// https://github.com/ethereum/EIPs/issues/223\n', 'interface TokenFallback {\n', '    function tokenFallback(address _from, uint _value, bytes calldata _data) external;\n', '}\n', '\n', '\n', '/**\n', ' * @title Blockchain Cuties Universe fungible token base contract\n', ' * @author Andrey Pelipenko - <[email\xa0protected]>\n', ' * @dev Implementation of the {IERC20}, {IERC827} and {IERC223} interfaces.\n', ' *\n', ' * Implementation is based on OpenZeppelin contracts.\n', ' * Modules:\n', ' * *** ERC20 ***\n', ' *\n', ' * *** Mint/Burn module ***\n', ' * Admins can mint tokens. Token holders can burn their tokens.\n', ' *\n', ' * *** Pause/Freeze module ***\n', ' * It is possible to pause contract transfers in case an exchange is hacked and\n', ' * there is a risk for token holders to lose their tokens, delegated to an\n', ' * exchange. After freezing suspicious accounts the contract can be unpaused.\n', ' * Admins can burn tokens on frozen accounts to mint new tokens to holders as a\n', ' * recovery after a successful hacking attack. Admin can disable the\n', ' * pause/freeze module without possibility to enable this functionality after\n', ' * that.\n', ' *\n', ' * *** Bulk operations ***\n', ' * Bulk operations are added to save on gas.\n', ' * Admin operations: mint tokens and burn frozen tokens\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract FungibleToken is ERC20Burnable, IFungibleToken, AccessControl, Pausable\n', '{\n', '    bool public allowPause = true;\n', '    bool public allowFreeze = true;\n', '    mapping (address => bool) private _frozen;\n', '\n', '    event Frozen(address target);\n', '    event Unfrozen(address target);\n', '    event FreezeDisabled();\n', '    event PauseDisabled();\n', '\n', '    constructor (string memory name_, string memory symbol_)\n', '        ERC20(name_, symbol_)\n', '    {\n', '    }\n', '\n', '    /// --------------------------- Admin functions ----------------------------\n', '\n', '    /**\n', '     * @dev Mint some tokens to target account.\n', '     * There is a check for the cap inside.\n', '     */\n', '    function mint(address target, uint256 mintedAmount)\n', '        external\n', '        override\n', '        onlyOperator\n', '    {\n', '        _mint(target, mintedAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Mint some tokens to target account.\n', '     * mintedAmountWithoutDecimals is in human readable format (will be multiplied with 10^decimals)\n', '     * Argument 123 will become 123 000 000 000 000 000 000 tokens.\n', '     */\n', '    function mintAddDecimals(address target, uint256 mintedAmountWithoutDecimals)\n', '        external\n', '        override\n', '        onlyOperator\n', '    {\n', '        _mint(target, mintedAmountWithoutDecimals * (10**decimals()));\n', '    }\n', '\n', '    /**\n', '     * @dev Bulk operation to mint tokens to target accounts.\n', '     * There is a check for the cap inside.\n', '     */\n', '    function mintBulk(\n', '        address[] calldata targets,\n', '        uint256[] calldata mintedAmount\n', '    )\n', '        external\n', '        override\n', '        onlyOperator\n', '    {\n', '        require(\n', '            targets.length == mintedAmount.length,\n', '            "mintBulk: targets.length != mintedAmount.length"\n', '        );\n', '        for (uint i = 0; i < targets.length; i++) {\n', '            _mint(targets[i], mintedAmount[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Bulk operation to mint tokens to target accounts.\n', '     * There is a check for the cap inside.\n', '     * mintedAmountWithoutDecimals is in human readable format (will be multiplied with 10^decimals)\n', '     * Argument 123 will become 123 000 000 000 000 000 000 tokens.\n', '     */\n', '    function mintAddDecimalsBulk(\n', '        address[] calldata targets,\n', '        uint256[] calldata mintedAmountWithoutDecimals\n', '    )\n', '        external\n', '        override\n', '        onlyOperator\n', '    {\n', '        require(\n', '            targets.length == mintedAmountWithoutDecimals.length,\n', '            "mintAddDecimalsBulk: targets.length != mintedAmountWithoutDecimals.length"\n', '        );\n', '        for (uint i = 0; i < targets.length; i++) {\n', '            _mint(targets[i], mintedAmountWithoutDecimals[i] * (10**decimals()));\n', '        }\n', '    }\n', '\n', '    /// ---------------------------- Freeze module ----------------------------\n', '\n', '    /**\n', '     * @dev Disable freeze forever. There is no enableFreeze function.\n', '     */\n', '    function disableFreezeForever() external onlyOwner {\n', '        require(allowFreeze, "disableFreezeForever: Freeze not allowed");\n', '        allowFreeze = false;\n', '        emit FreezeDisabled();\n', '    }\n', '\n', '    /**\n', '     * @dev Mark target account as frozen.\n', "     * Frozen accounts can't perform transfers.\n", '     * Admins can burn the tokens on frozen accounts later.\n', '     */\n', '    function freeze(address target) external onlyOperator {\n', '        _freeze(target);\n', '    }\n', '\n', '    function _freeze(address target) internal {\n', '        require(allowFreeze, "FungibleToken: Freeze not allowed");\n', '        require(\n', '            !_frozen[target],\n', '            "FungibleToken: Target account is already frozen"\n', '        );\n', '        _frozen[target] = true;\n', '        emit Frozen(target);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the target account is frozen.\n', '     */\n', '    function isFrozen(address target) view external returns (bool) {\n', '        return _frozen[target];\n', '    }\n', '\n', '    /**\n', '     * @dev Mark target account as unfrozen.\n', "     * Can be called even if the contract doesn't allow to freeze accounts.\n", '     */\n', '    function unfreeze(address target) external onlyOperator {\n', '        require(_frozen[target], "FungibleToken: Target account is not frozen");\n', '        delete _frozen[target];\n', '        emit Unfrozen(target);\n', '    }\n', '\n', '    /**\n', '     * @dev Burn tokens on frozen account.\n', '     */\n', '    function burnFrozenTokens(address target) external onlyOperator {\n', '        require(_frozen[target], "FungibleToken: Target account is not frozen");\n', '        _burn(target, balanceOf(target));\n', '    }\n', '\n', '    /**\n', '     * @dev Freeze and burn tokens in a single transaction.\n', '     */\n', '    function freezeAndBurnTokens(address target) external onlyOperator {\n', '        _freeze(target);\n', '        _burn(target, balanceOf(target));\n', '    }\n', '\n', '    /// ---------------------------- Pause module ----------------------------\n', '\n', '    /**\n', '     * @dev Disable pause forever.\n', '     * Noone can enable pause after it has been disabled.\n', '     * Admin will only be able to unpause the contract.\n', '     */\n', '    function disablePauseForever() external onlyOwner {\n', '        require(allowPause, "Pausable: Pause was already disabled");\n', '        allowPause = false;\n', '        emit PauseDisabled();\n', '    }\n', '\n', '    /**\n', '     * @dev Triggers stopped state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused and pause should be allowed.\n', '     */\n', '    function pause() external onlyOperator {\n', '        require(allowPause, "Pausable: Pause not allowed");\n', '        _pause();\n', '    }\n', '\n', '    /**\n', '     * @dev Returns to normal state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    function unpause() external onlyOperator {\n', '        _unpause();\n', '    }\n', '\n', '    /**\n', '     * @dev See {ERC20-_beforeTokenTransfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - do not allow the transfer of funds to the token contract itself (\n', '     *                                   Usually such a call is a mistake).\n', '     * - do not allow transfers when contract is paused.\n', '     * - only allow to burn frozen tokens.\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount)\n', '        internal\n', '        virtual\n', '        override\n', '    {\n', '        super._beforeTokenTransfer(from, to, amount);\n', '\n', '        require(\n', '            to != address(this),\n', '            "FungibleToken: can\'t transfer to token contract self"\n', '        );\n', '        require(!paused(), "ERC20Pausable: token transfer while paused");\n', '        require(\n', '            !_frozen[from] || to == address(0x0),\n', '            "FungibleToken: source address was frozen"\n', '        );\n', '    }\n', '\n', '\n', '    /// --------------------------- ERC827 approveAndCall ----------------------\n', '\n', '\n', '    /**\n', '    * Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    * from the token owner's account. The `spender` contract function\n", '    * `receiveApproval(...)` is then executed\n', '    */\n', '    function approveAndCall(address spender, uint tokens, bytes calldata data)\n', '        external\n', '        override\n', '        returns (bool success)\n', '    {\n', '        _approve(msg.sender, spender, tokens);\n', '        TokenRecipientInterface(spender).receiveApproval(\n', '            msg.sender,\n', '            tokens,\n', '            address(this),\n', '            data\n', '        );\n', '        return true;\n', '    }\n', '\n', '    // ---------------------------- ERC20 Bulk Operations ----------------------\n', '\n', '    function transferBulk(address[] calldata to, uint[] calldata tokens)\n', '        external\n', '        override\n', '    {\n', '        require(\n', '            to.length == tokens.length,\n', '            "transferBulk: to.length != tokens.length"\n', '        );\n', '        for (uint i = 0; i < to.length; i++) {\n', '            _transfer(msg.sender, to[i], tokens[i]);\n', '        }\n', '    }\n', '\n', '    function approveBulk(address[] calldata spender, uint[] calldata tokens)\n', '        external\n', '        override\n', '    {\n', '        require(\n', '            spender.length == tokens.length,\n', '            "approveBulk: spender.length != tokens.length"\n', '        );\n', '        for (uint i = 0; i < spender.length; i++) {\n', '            _approve(msg.sender, spender[i], tokens[i]);\n', '        }\n', '    }\n', '\n', '    /// ---------------------------- ERC223 ----------------------------\n', '    event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 value,\n', '        bytes data\n', '    );\n', '\n', '    /**\n', '     * @dev Function that is called when a user or another contract wants to\n', '     * transfer funds with custom data, that is passed to receiver contract.\n', '     */\n', '    function transfer(address _to, uint _value, bytes calldata _data)\n', '        external\n', '        override\n', '        returns (bool success)\n', '    {\n', '        return transferWithData(_to, _value, _data);\n', '    }\n', '\n', '    /**\n', '     * @dev Alias to {transfer} with 3 arguments.\n', '     */\n', '    function transferWithData(address _to, uint _value, bytes calldata _data)\n', '        public\n', '        returns (bool success)\n', '    {\n', '        if (_isContract(_to)) {\n', '            return transferToContract(_to, _value, _data);\n', '        }\n', '        else {\n', '            return transferToAddress(_to, _value, _data);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev function that is called when transaction target is a contract\n', '    */\n', '    function transferToContract(address _to, uint _value, bytes calldata _data)\n', '        public\n', '        returns (bool success)\n', '    {\n', '        _transfer(msg.sender, _to, _value);\n', '        emit Transfer(msg.sender, _to, _value, _data);\n', '        TokenFallback receiver = TokenFallback(_to);\n', '        receiver.tokenFallback(msg.sender, _value, _data);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev function that is called when transaction target is an address\n', '    */\n', '    function transferToAddress(address _to, uint tokens, bytes calldata _data)\n', '        public\n', '        returns (bool success)\n', '    {\n', '        _transfer(msg.sender, _to, tokens);\n', '        emit Transfer(msg.sender, _to, tokens, _data);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Assemble the given address bytecode.\n', '    * If bytecode exists then the _addr is a contract.\n', '    */\n', '    function _isContract(address _addr) private view returns (bool is_contract) {\n', '        uint length;\n', '        assembly {\n', '        //retrieve the size of the code on target address, this needs assembly\n', '            length := extcodesize(_addr)\n', '        }\n', '        return length > 0;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\n', ' */\n', 'contract ERC20Capped is FungibleToken {\n', '    uint256 private _cap;\n', '\n', '    /**\n', '     * @dev Sets the value of the `cap`. This value is immutable, it can only be\n', '     * set once during construction.\n', '     */\n', '    constructor (string memory _name, string memory _symbol, uint256 cap_)\n', '    FungibleToken(_symbol, _name) {\n', '        require(cap_ > 0, "ERC20Capped: cap is 0");\n', '        _cap = cap_;\n', '    }\n', '\n', '    /**\n', "     * @dev Returns the cap on the token's total supply.\n", '     */\n', '    function cap() public view virtual returns (uint256) {\n', '        return _cap;\n', '    }\n', '\n', '    /**\n', '     * @dev See {ERC20-_beforeTokenTransfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - minted tokens must not cause the total supply to go over the cap.\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\n', '        super._beforeTokenTransfer(from, to, amount);\n', '\n', '        if (from == address(0)) { // When minting tokens\n', '            require(totalSupply() + amount <= cap(), "ERC20Capped: cap exceeded");\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/**\n', '* @title Blockchain Cuties Universe Governance Token contract\n', '* @author Andrey Pelipenko - <[email\xa0protected]>\n', '* @dev Implementation of the {IERC20}, {IERC827} and {IERC223} interfaces.\n', '*\n', '* Implementation is based on {FungibleToken} and {ERC20Capped}.\n', '* Max supply is limited to 1000000 tokens.\n', '*/\n', 'contract BCUG is ERC20Capped\n', '{\n', '    constructor()\n', '        ERC20Capped(\n', '            "BCUG",\n', '            "Blockchain Cuties Universe Governance Token",\n', '            1000000 ether)\n', '    {\n', '    }\n', '}']