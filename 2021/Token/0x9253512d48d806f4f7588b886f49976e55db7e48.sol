['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-21\n', '*/\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/IERC20Cutted.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '\n', 'interface IERC20Cutted {\n', '\n', '    // Some old tokens are implemented without a retrun parameter (this was prior to the ERC20 standart change)\n', '    function transfer(address to, uint256 value) external;\n', '\n', '    function balanceOf(address who) external view returns (uint256);\n', '\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/RetrieveTokensFeature.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '\n', '\n', '\n', '\n', 'contract RetrieveTokensFeature is Context, Ownable {\n', '\n', '    function retrieveTokens(address to, address anotherToken) virtual public onlyOwner() {\n', '        IERC20Cutted alienToken = IERC20Cutted(anotherToken);\n', '        alienToken.transfer(to, alienToken.balanceOf(address(this)));\n', '    }\n', '\n', '    function retriveETH(address payable to) virtual public onlyOwner() {\n', '        to.transfer(address(this).balance);\n', '    }\n', '\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/StagedCrowdsale.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract StagedCrowdsale is Context, Ownable {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    struct Milestone {\n', '        uint256 start;\n', '        uint256 end;\n', '        uint256 bonus;\n', '        uint256 minInvestedLimit;\n', '        uint256 maxInvestedLimit;\n', '        uint256 invested;\n', '        uint256 tokensSold;\n', '        uint256 hardcapInTokens;\n', '    }\n', '\n', '    Milestone[] public milestones;\n', '\n', '    function milestonesCount() public view returns (uint) {\n', '        return milestones.length;\n', '    }\n', '\n', '    function addMilestone(uint256 start, uint256 end, uint256 bonus, uint256 minInvestedLimit, uint256 maxInvestedLimit, uint256 invested, uint256 tokensSold, uint256 hardcapInTokens) public onlyOwner {\n', '        milestones.push(Milestone(start, end, bonus, minInvestedLimit, maxInvestedLimit, invested, tokensSold, hardcapInTokens));\n', '    }\n', '\n', '    function removeMilestone(uint8 number) public onlyOwner {\n', '        require(number < milestones.length);\n', '        //Milestone storage milestone = milestones[number];\n', '\n', '        delete milestones[number];\n', '\n', '        // check it\n', '        for (uint i = number; i < milestones.length - 1; i++) {\n', '            milestones[i] = milestones[i + 1];\n', '        }\n', '\n', '    }\n', '\n', '    function changeMilestone(uint8 number, uint256 start, uint256 end, uint256 bonus, uint256 minInvestedLimit, uint256 maxInvestedLimit, uint256 invested, uint256 tokensSold, uint256 hardcapInTokens) public onlyOwner {\n', '        require(number < milestones.length);\n', '        Milestone storage milestone = milestones[number];\n', '\n', '        milestone.start = start;\n', '        milestone.end = end;\n', '        milestone.bonus = bonus;\n', '        milestone.minInvestedLimit = minInvestedLimit;\n', '        milestone.maxInvestedLimit = maxInvestedLimit;\n', '        milestone.invested = invested;\n', '        milestone.tokensSold = tokensSold;\n', '        milestone.hardcapInTokens = hardcapInTokens;\n', '    }\n', '\n', '    function insertMilestone(uint8 index, uint256 start, uint256 end, uint256 bonus, uint256 minInvestedLimit, uint256 maxInvestedLimit, uint256 invested, uint256 tokensSold, uint256 hardcapInTokens) public onlyOwner {\n', '        require(index < milestones.length);\n', '        for (uint i = milestones.length; i > index; i--) {\n', '            milestones[i] = milestones[i - 1];\n', '        }\n', '        milestones[index] = Milestone(start, end, bonus, minInvestedLimit, maxInvestedLimit, invested, tokensSold, hardcapInTokens);\n', '    }\n', '\n', '    function clearMilestones() public onlyOwner {\n', '        require(milestones.length > 0);\n', '        for (uint i = 0; i < milestones.length; i++) {\n', '            delete milestones[i];\n', '        }\n', '    }\n', '\n', '    function currentMilestone() public view returns (uint256) {\n', '        for (uint256 i = 0; i < milestones.length; i++) {\n', '            if (now >= milestones[i].start && now < milestones[i].end && milestones[i].tokensSold <= milestones[i].hardcapInTokens) {\n', '                return i;\n', '            }\n', '        }\n', '        revert();\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/CommonSale.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '\n', '\n', '\n', '\n', 'contract CommonSale is StagedCrowdsale, RetrieveTokensFeature {\n', '\n', '    IERC20Cutted public token;\n', '    uint256 public price; // amount of tokens per 1 ETH\n', '    uint256 public invested;\n', '    uint256 public percentRate = 100;\n', '    address payable public wallet;\n', '    bool public isPause = false;\n', '    mapping(address => bool) public whitelist;\n', '\n', '    mapping(uint256 => mapping(address => uint256)) public balances;\n', '\n', '    mapping(uint256 => bool) public whitelistedMilestones;\n', '\n', '    function setMilestoneWithWhitelist(uint256 index) public onlyOwner {\n', '        whitelistedMilestones[index] = true;\n', '    }\n', '\n', '    function unsetMilestoneWithWhitelist(uint256 index) public onlyOwner {\n', '        whitelistedMilestones[index] = false;\n', '    }\n', '\n', '    function addToWhiteList(address target) public onlyOwner {\n', '        require(!whitelist[target], "Already in whitelist");\n', '        whitelist[target] = true;\n', '    }\n', '\n', '    function addToWhiteListMultiple(address[] memory targets) public onlyOwner {\n', '        for (uint i = 0; i < targets.length; i++) {\n', '            if (!whitelist[targets[i]]) whitelist[targets[i]] = true;\n', '        }\n', '    }\n', '\n', '    function pause() public onlyOwner {\n', '        isPause = true;\n', '    }\n', '\n', '    function unpause() public onlyOwner {\n', '        isPause = false;\n', '    }\n', '\n', '    function setToken(address newTokenAddress) public onlyOwner() {\n', '        token = IERC20Cutted(newTokenAddress);\n', '    }\n', '\n', '    function setPercentRate(uint256 newPercentRate) public onlyOwner() {\n', '        percentRate = newPercentRate;\n', '    }\n', '\n', '    function setWallet(address payable newWallet) public onlyOwner() {\n', '        wallet = newWallet;\n', '    }\n', '\n', '    function setPrice(uint256 newPrice) public onlyOwner() {\n', '        price = newPrice;\n', '    }\n', '\n', '    function updateInvested(uint256 value) internal {\n', '        invested = invested.add(value);\n', '    }\n', '\n', '    function internalFallback() internal returns (uint) {\n', '        require(!isPause, "Contract paused");\n', '\n', '        uint256 milestoneIndex = currentMilestone();\n', '        Milestone storage milestone = milestones[milestoneIndex];\n', '        uint256 limitedInvestValue = msg.value;\n', '\n', '        // limit the minimum amount for one transaction (ETH) \n', '        require(limitedInvestValue >= milestone.minInvestedLimit, "The amount is too small");\n', '\n', '        // check if the milestone requires user to be whitelisted\n', '        if (whitelistedMilestones[milestoneIndex]) {\n', '            require(whitelist[_msgSender()], "The address must be whitelisted!");\n', '        }\n', '\n', '        // limit the maximum amount that one user can spend during the current milestone (ETH)\n', '        uint256 maxAllowableValue = milestone.maxInvestedLimit - balances[milestoneIndex][_msgSender()];\n', '        if (limitedInvestValue > maxAllowableValue) {\n', '            limitedInvestValue = maxAllowableValue;\n', '        }\n', '        require(limitedInvestValue > 0, "Investment limit exceeded!");\n', '\n', '        // apply a bonus if any (10SET)\n', '        uint256 tokensWithoutBonus = limitedInvestValue.mul(price).div(1 ether);\n', '        uint256 tokensWithBonus = tokensWithoutBonus;\n', '        if (milestone.bonus > 0) {\n', '            tokensWithBonus = tokensWithoutBonus.add(tokensWithoutBonus.mul(milestone.bonus).div(percentRate));\n', '        }\n', '\n', '        // limit the number of tokens that user can buy according to the hardcap of the current milestone (10SET)\n', '        if (milestone.tokensSold.add(tokensWithBonus) > milestone.hardcapInTokens) {\n', '            tokensWithBonus = milestone.hardcapInTokens.sub(milestone.tokensSold);\n', '            if (milestone.bonus > 0) {\n', '                tokensWithoutBonus = tokensWithBonus.mul(percentRate).div(percentRate + milestone.bonus);\n', '            }\n', '        }\n', '        \n', '        // calculate the resulting amount of ETH that user will spend and calculate the change if any\n', '        uint256 tokenBasedLimitedInvestValue = tokensWithoutBonus.mul(1 ether).div(price);\n', '        uint256 change = msg.value - tokenBasedLimitedInvestValue;\n', '\n', '        // update stats\n', '        invested = invested.add(tokenBasedLimitedInvestValue);\n', '        milestone.tokensSold = milestone.tokensSold.add(tokensWithBonus);\n', '        balances[milestoneIndex][_msgSender()] = balances[milestoneIndex][_msgSender()].add(tokenBasedLimitedInvestValue);\n', '        \n', '        wallet.transfer(tokenBasedLimitedInvestValue);\n', '        \n', '        // we multiply the amount to send by 100 / 98 to compensate the buyer 2% fee charged on each transaction\n', '        token.transfer(_msgSender(), tokensWithBonus.mul(100).div(98));\n', '        \n', '        if (change > 0) {\n', '            _msgSender().transfer(change);\n', '        }\n', '\n', '        return tokensWithBonus;\n', '    }\n', '\n', '    receive() external payable {\n', '        internalFallback();\n', '    }\n', '\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/TenSetToken.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract TenSetToken is IERC20, RetrieveTokensFeature {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping(address => uint256) private _rOwned;\n', '    mapping(address => uint256) private _tOwned;\n', '    mapping(address => mapping(address => uint256)) private _allowances;\n', '\n', '    mapping(address => bool) private _isExcluded;\n', '    address[] private _excluded;\n', '\n', '    uint256 private constant MAX = ~uint256(0);\n', '    uint256 private constant INITIAL_SUPPLY = 210000000 * 10 ** 18;\n', '    uint256 private constant BURN_STOP_SUPPLY = 2100000 * 10 ** 18;\n', '    uint256 private _tTotal = INITIAL_SUPPLY;\n', '    uint256 private _rTotal = (MAX - (MAX % _tTotal));\n', '    uint256 private _tFeeTotal;\n', '\n', '    string private _name = "10Set Token";\n', '    string private _symbol = "10SET";\n', '    uint8 private _decimals = 18;\n', '\n', '    constructor (address[] memory addresses, uint256[] memory amounts) public {\n', '        uint256 rDistributed = 0;\n', '        // loop through the addresses array and send tokens to each address except the last one\n', '        // the corresponding amount to sent is taken from the amounts array\n', '        for(uint8 i = 0; i < addresses.length - 1; i++) {\n', '            (uint256 rAmount, , , , , , ) = _getValues(amounts[i]);\n', '            _rOwned[addresses[i]] = rAmount;\n', '            rDistributed = rDistributed + rAmount;\n', '            emit Transfer(address(0), addresses[i], amounts[i]);\n', '        }\n', '        // all remaining tokens will be sent to the last address in the addresses array\n', '        uint256 rRemainder = _rTotal - rDistributed;\n', '        address liQuidityWalletAddress = addresses[addresses.length - 1];\n', '        _rOwned[liQuidityWalletAddress] = rRemainder;\n', '        emit Transfer(address(0), liQuidityWalletAddress, tokenFromReflection(rRemainder));\n', '    }\n', '\n', '    function excludeAccount(address account) external onlyOwner() {\n', '        require(!_isExcluded[account], "Account is already excluded");\n', '        if (_rOwned[account] > 0) {\n', '            _tOwned[account] = tokenFromReflection(_rOwned[account]);\n', '        }\n', '        _isExcluded[account] = true;\n', '        _excluded.push(account);\n', '    }\n', '\n', '    function includeAccount(address account) external onlyOwner() {\n', '        require(_isExcluded[account], "Account is already included");\n', '        for (uint256 i = 0; i < _excluded.length; i++) {\n', '            if (_excluded[i] == account) {\n', '                _excluded[i] = _excluded[_excluded.length - 1];\n', '                _tOwned[account] = 0;\n', '                _isExcluded[account] = false;\n', '                _excluded.pop();\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _tTotal;\n', '    }\n', '\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        if (_isExcluded[account]) return _tOwned[account];\n', '        return tokenFromReflection(_rOwned[account]);\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    function burn(uint256 amount) public {\n', '        require(_msgSender() != address(0), "ERC20: burn from the zero address");\n', '        (uint256 rAmount, , , , , , ) = _getValues(amount);\n', '        _burn(_msgSender(), amount, rAmount);\n', '    }\n', '\n', '    function burnFrom(address account, uint256 amount) public {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, "ERC20: burn amount exceeds allowance");\n', '        _approve(account, _msgSender(), decreasedAllowance);\n', '        (uint256 rAmount, , , , , , ) = _getValues(amount);\n', '        _burn(account, amount, rAmount);\n', '    }\n', '\n', '    function isExcluded(address account) public view returns (bool) {\n', '        return _isExcluded[account];\n', '    }\n', '\n', '    function totalFees() public view returns (uint256) {\n', '        return _tFeeTotal;\n', '    }\n', '\n', '    function reflect(uint256 tAmount) public {\n', '        address sender = _msgSender();\n', '        require(!_isExcluded[sender], "Excluded addresses cannot call this function");\n', '        (uint256 rAmount, , , , , , ) = _getValues(tAmount);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _rTotal = _rTotal.sub(rAmount);\n', '        _tFeeTotal = _tFeeTotal.add(tAmount);\n', '    }\n', '\n', '    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns (uint256) {\n', '        require(tAmount <= _tTotal, "Amount must be less than supply");\n', '        if (!deductTransferFee) {\n', '            (uint256 rAmount, , , , , , ) = _getValues(tAmount);\n', '            return rAmount;\n', '        } else {\n', '            ( , uint256 rTransferAmount, , , , , ) = _getValues(tAmount);\n', '            return rTransferAmount;\n', '        }\n', '    }\n', '\n', '    function tokenFromReflection(uint256 rAmount) public view returns (uint256) {\n', '        require(rAmount <= _rTotal, "Amount must be less than total reflections");\n', '        uint256 currentRate = _getRate();\n', '        return rAmount.div(currentRate);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) private {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) private {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '        require(amount > 0, "Transfer amount must be greater than zero");\n', '        if (_isExcluded[sender] && !_isExcluded[recipient]) {\n', '            _transferFromExcluded(sender, recipient, amount);\n', '        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\n', '            _transferToExcluded(sender, recipient, amount);\n', '        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\n', '            _transferStandard(sender, recipient, amount);\n', '        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\n', '            _transferBothExcluded(sender, recipient, amount);\n', '        } else {\n', '            _transferStandard(sender, recipient, amount);\n', '        }\n', '    }\n', '\n', '    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 rBurn, uint256 tTransferAmount, uint256 tFee, uint256 tBurn) = _getValues(tAmount);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '        _reflectFee(rFee, tFee);\n', '        if (tBurn > 0) {\n', '            _reflectBurn(rBurn, tBurn, sender);\n', '        }\n', '        emit Transfer(sender, recipient, tTransferAmount);\n', '    }\n', '\n', '    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 rBurn, uint256 tTransferAmount, uint256 tFee, uint256 tBurn) = _getValues(tAmount);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n', '        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '        _reflectFee(rFee, tFee);\n', '        if (tBurn > 0) {\n', '            _reflectBurn(rBurn, tBurn, sender);\n', '        }\n', '        emit Transfer(sender, recipient, tTransferAmount);\n', '    }\n', '\n', '    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 rBurn, uint256 tTransferAmount, uint256 tFee, uint256 tBurn) = _getValues(tAmount);\n', '        _tOwned[sender] = _tOwned[sender].sub(tAmount);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '        _reflectFee(rFee, tFee);\n', '        if (tBurn > 0) {\n', '            _reflectBurn(rBurn, tBurn, sender);\n', '        }\n', '        emit Transfer(sender, recipient, tTransferAmount);\n', '    }\n', '\n', '    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 rBurn, uint256 tTransferAmount, uint256 tFee, uint256 tBurn) = _getValues(tAmount);\n', '        _tOwned[sender] = _tOwned[sender].sub(tAmount);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n', '        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '        _reflectFee(rFee, tFee);\n', '        if (tBurn > 0) {\n', '            _reflectBurn(rBurn, tBurn, sender);\n', '        }\n', '        emit Transfer(sender, recipient, tTransferAmount);\n', '    }\n', '\n', '    function _reflectFee(uint256 rFee, uint256 tFee) private {\n', '        _rTotal = _rTotal.sub(rFee);\n', '        _tFeeTotal = _tFeeTotal.add(tFee);\n', '    }\n', '\n', '    function _reflectBurn(uint256 rBurn, uint256 tBurn, address account) private {\n', '        _rTotal = _rTotal.sub(rBurn);\n', '        _tTotal = _tTotal.sub(tBurn);\n', '        emit Transfer(account, address(0), tBurn);\n', '    }\n', '\n', '    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256) {\n', '        (uint256 tTransferAmount, uint256 tFee, uint256 tBurn) = _getTValues(tAmount);\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 rBurn) = _getRValues(tAmount, tFee, tBurn);\n', '        return (rAmount, rTransferAmount, rFee, rBurn, tTransferAmount, tFee, tBurn);\n', '    }\n', '\n', '    function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256) {\n', '        uint256 tFee = tAmount.div(100);\n', '        uint256 tTransferAmount = tAmount.sub(tFee);\n', '        uint256 tBurn = 0;\n', '        if (_tTotal > BURN_STOP_SUPPLY) {\n', '            tBurn = tAmount.div(100);\n', '            if (_tTotal < BURN_STOP_SUPPLY.add(tBurn)) {\n', '                tBurn = _tTotal.sub(BURN_STOP_SUPPLY);\n', '            }\n', '            tTransferAmount = tTransferAmount.sub(tBurn);\n', '        }\n', '        return (tTransferAmount, tFee, tBurn);\n', '    }\n', '\n', '    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tBurn) private view returns (uint256, uint256, uint256, uint256) {\n', '        uint256 currentRate = _getRate();\n', '        uint256 rAmount = tAmount.mul(currentRate);\n', '        uint256 rFee = tFee.mul(currentRate);\n', '        uint256 rBurn = 0;\n', '        uint256 rTransferAmount = rAmount.sub(rFee);\n', '        if (tBurn > 0) {\n', '            rBurn = tBurn.mul(currentRate);\n', '            rTransferAmount = rTransferAmount.sub(rBurn);\n', '        }\n', '        return (rAmount, rTransferAmount, rFee, rBurn);\n', '    }\n', '\n', '    function _getRate() private view returns (uint256) {\n', '        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n', '        return rSupply.div(tSupply);\n', '    }\n', '\n', '    function _getCurrentSupply() private view returns (uint256, uint256) {\n', '        uint256 rSupply = _rTotal;\n', '        uint256 tSupply = _tTotal;\n', '        for (uint256 i = 0; i < _excluded.length; i++) {\n', '            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\n', '            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\n', '            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\n', '        }\n', '        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\n', '        return (rSupply, tSupply);\n', '    }\n', '\n', '    function _burn(address account, uint256 tAmount, uint256 rAmount) private {\n', '        if (_isExcluded[account]) {\n', '            _tOwned[account] = _tOwned[account].sub(tAmount, "ERC20: burn amount exceeds balance");\n', '            _rOwned[account] = _rOwned[account].sub(rAmount, "ERC20: burn amount exceeds balance"); \n', '        } else {\n', '            _rOwned[account] = _rOwned[account].sub(rAmount, "ERC20: burn amount exceeds balance");\n', '        }\n', '        _reflectBurn(rAmount, tAmount, account);\n', '    }\n', '}\n', '\n', '// File: contracts/FreezeTokenWallet.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '\n', '\n', '\n', 'contract FreezeTokenWallet is RetrieveTokensFeature {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  IERC20Cutted public token;\n', '  bool public started;\n', '  uint256 public startDate;\n', '  uint256 public startBalance;\n', '  uint256 public duration;\n', '  uint256 public interval;\n', '  uint256 public retrievedTokens;\n', '\n', '  modifier notStarted() {\n', '    require(!started);\n', '    _;\n', '  }\n', '\n', '  function setStartDate(uint newStartDate) public onlyOwner notStarted {\n', '    startDate = newStartDate;\n', '  }\n', '\n', '  function setDuration(uint newDuration) public onlyOwner notStarted {\n', '    duration = newDuration * 1 days;\n', '  }\n', '\n', '  function setInterval(uint newInterval) public onlyOwner notStarted {\n', '    interval = newInterval * 1 days;\n', '  }\n', '\n', '  function setToken(address newToken) public onlyOwner notStarted {\n', '    token = IERC20Cutted(newToken);\n', '  }\n', '\n', '  function start() public onlyOwner notStarted {\n', '    startBalance = token.balanceOf(address(this));\n', '    started = true;\n', '  }\n', '\n', '  function retrieveWalletTokens(address to) public onlyOwner {\n', '    require(started && now >= startDate);\n', '    if (now >= startDate + duration) {\n', '      token.transfer(to, token.balanceOf(address(this)));\n', '    } else {\n', '      uint parts = duration.div(interval);\n', '      uint tokensByPart = startBalance.div(parts);\n', '      uint timeSinceStart = now.sub(startDate);\n', '      uint pastParts = timeSinceStart.div(interval);\n', '      uint tokensToRetrieveSinceStart = pastParts.mul(tokensByPart);\n', '      uint tokensToRetrieve = tokensToRetrieveSinceStart.sub(retrievedTokens);\n', '      require(tokensToRetrieve > 0, "No tokens available for retrieving at this moment.");\n', '      retrievedTokens = retrievedTokens.add(tokensToRetrieve);\n', '      token.transfer(to, tokensToRetrieve);\n', '    }\n', '  }\n', '\n', '  function retrieveTokens(address to, address anotherToken) override public onlyOwner {\n', '    require(address(token) != anotherToken, "You should only use this method to withdraw extraneous tokens.");\n', '    super.retrieveTokens(to, anotherToken);\n', '  }\n', '\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name_, string memory symbol_) public {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '// File: contracts/TokenDistributor.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract TokenDistributor is Ownable, RetrieveTokensFeature {\n', '\n', '    IERC20Cutted public token;\n', '\n', '    function setToken(address newTokenAddress) public onlyOwner {\n', '        token = IERC20Cutted(newTokenAddress);\n', '    }\n', '\n', '    function distribute(address[] memory receivers, uint[] memory balances) public onlyOwner {\n', '        for(uint i = 0; i < receivers.length; i++) {\n', '            token.transfer(receivers[i], balances[i]);\n', '        }\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/TokenReplacementConfigurator.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Contract-helper for TenSetToken deployment and token distribution.\n', ' *\n', ' * 1. Company Reserve (10%): 21,000,000 10SET. The total freezing period is 48 months.\n', ' *    Every 12 months, 25% of the initial amount will be unfrozen and ready for\n', ' *    withdrawal using address 0x7BD3b301f3537c75bf64B7468998d20045cfa48e.\n', ' *\n', ' * 2. Team (10%): 21,000,000 10SET. The total freezing period is 30 months.\n', ' *    Every 3 months, 10% of the initial amount will be unfrozen and ready for\n', ' *    withdrawal using address 0x44C4A8d57B22597a2c0397A15CF1F32d8A4EA8F7.\n', ' *\n', ' * 3. Marketing (5%): 10,500,000 10SET.\n', ' *    A half (5,250,000 10SET) will be transferred immediately to the address\n', ' *    0x127D069DC8B964a813889D349eD3dA3f6D35383D.\n', ' *    The remaining 5,250,000 10SET will be frozen for 12 months.\n', ' *    Every 3 months, 25% of the initial amount will be unfrozen and ready for\n', ' *    withdrawal using address 0x127D069DC8B964a813889D349eD3dA3f6D35383D.\n', ' *\n', ' * 4. Sales: 150,000,000 10SET (147,000,000 10SET plus compensation for the\n', ' *    initial 2% transferring costs). These tokens will be distributed between\n', ' *    the CommonSale contract and existing users who participated in the first phase of the sale.\n', ' *\n', ' * 5. Liquidity Reserve: 7,500,000 10SET (10,500,000 10SET minus tokens that\n', ' *    went to compensation in paragraph 4). The entire amount will be unfrozen\n', ' *    from the start and sent to the address 0x91E84302594deFaD552938B6D0D56e9f39908f9F.\n', ' */\n', 'contract TokenReplacementConfigurator is RetrieveTokensFeature {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 private constant COMPANY_RESERVE_AMOUNT    = 21000000 * 1 ether;\n', '    uint256 private constant TEAM_AMOUNT               = 21000000 * 1 ether;\n', '    uint256 private constant MARKETING_AMOUNT_1        = 5250000 * 1 ether;\n', '    uint256 private constant MARKETING_AMOUNT_2        = 5250000 * 1 ether;\n', '    uint256 private constant LIQUIDITY_RESERVE         = 7500000 * 1 ether;\n', '\n', '    address private constant OWNER_ADDRESS             = address(0x68CE6F1A63CC76795a70Cf9b9ca3f23293547303);\n', '    address private constant TEAM_WALLET_OWNER_ADDRESS = address(0x44C4A8d57B22597a2c0397A15CF1F32d8A4EA8F7);\n', '    address private constant MARKETING_WALLET_ADDRESS  = address(0x127D069DC8B964a813889D349eD3dA3f6D35383D);\n', '    address private constant COMPANY_RESERVE_ADDRESS   = address(0x7BD3b301f3537c75bf64B7468998d20045cfa48e);\n', '    address private constant LIQUIDITY_WALLET_ADDRESS  = address(0x91E84302594deFaD552938B6D0D56e9f39908f9F);\n', '    address private constant DEPLOYER_ADDRESS          = address(0x6E9DC3D20B906Fd2B52eC685fE127170eD2165aB);\n', '\n', '    uint256 private constant STAGE1_START_DATE         = 1612116000;    // Jan 31 2021 19:00:00 GMT+0100\n', '\n', '    TenSetToken public token;\n', '    FreezeTokenWallet public companyReserveWallet;\n', '    FreezeTokenWallet public teamWallet;\n', '    FreezeTokenWallet public marketingWallet;\n', '    TokenDistributor public tokenDistributor;\n', '\n', '    constructor () public {\n', '        address[] memory addresses = new address[](6);\n', '        uint256[] memory amounts = new uint256[](5);\n', '        \n', '        companyReserveWallet = new FreezeTokenWallet();\n', '        teamWallet = new FreezeTokenWallet();\n', '        marketingWallet = new FreezeTokenWallet();\n', '        tokenDistributor = new TokenDistributor();\n', '\n', '        addresses[0]    = address(companyReserveWallet);\n', '        amounts[0]      = COMPANY_RESERVE_AMOUNT;\n', '        addresses[1]    = address(teamWallet);\n', '        amounts[1]      = TEAM_AMOUNT;\n', '        addresses[2]    = MARKETING_WALLET_ADDRESS;\n', '        amounts[2]      = MARKETING_AMOUNT_1;\n', '        addresses[3]    = address(marketingWallet);\n', '        amounts[3]      = MARKETING_AMOUNT_2;\n', '        addresses[4]    = LIQUIDITY_WALLET_ADDRESS;\n', '        amounts[4]      = LIQUIDITY_RESERVE;\n', '        // will receive the remaining tokens to distribute them between CommonSale contract\n', '        // and existing users who participated in the first phase of the sale.\n', '        addresses[5]    = address(tokenDistributor);\n', '\n', '        token = new TenSetToken(addresses, amounts);\n', '\n', '        companyReserveWallet.setToken(address(token));\n', '        companyReserveWallet.setStartDate(STAGE1_START_DATE);\n', '        companyReserveWallet.setDuration(1440);     // 4 years = 48 months = 1440 days\n', '        companyReserveWallet.setInterval(360);      // 12 months = 360 days\n', '        companyReserveWallet.start();\n', '\n', '        teamWallet.setToken(address(token));\n', '        teamWallet.setStartDate(STAGE1_START_DATE);\n', '        teamWallet.setDuration(900);                // 2.5 years = 30 months = 900 days\n', '        teamWallet.setInterval(90);                 // 3 months = 90 days\n', '        teamWallet.start();\n', '\n', '        marketingWallet.setToken(address(token));\n', '        marketingWallet.setStartDate(STAGE1_START_DATE);\n', '        marketingWallet.setDuration(360);           // 1 year = 12 months = 360 days\n', '        marketingWallet.setInterval(90);            // 3 months = 90 days\n', '        marketingWallet.start();\n', '        \n', '        tokenDistributor.setToken(address(token));\n', '\n', '        token.transferOwnership(OWNER_ADDRESS);\n', '        companyReserveWallet.transferOwnership(COMPANY_RESERVE_ADDRESS);\n', '        teamWallet.transferOwnership(TEAM_WALLET_OWNER_ADDRESS);\n', '        marketingWallet.transferOwnership(MARKETING_WALLET_ADDRESS);\n', '        tokenDistributor.transferOwnership(DEPLOYER_ADDRESS);\n', '    }\n', '\n', '}']