['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', 'import "./SafeMath.sol";\n', '\n', '\n', 'contract Deri {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    event ChangeController(address oldController, address newController);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 amount);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 amount);\n', '\n', '    string public constant name = "Deri";\n', '\n', '    string public constant symbol = "DERI";\n', '\n', '    uint8 public constant decimals = 18;\n', '\n', '    uint256 public maxSupply = 1_000_000_000e18; // 1 billion\n', '\n', '    uint256 public totalSupply;\n', '\n', '    address public controller;\n', '\n', '    mapping (address => uint256) internal balances;\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowances;\n', '\n', '    bytes32 public constant DOMAIN_TYPEHASH = keccak256("EIP712Domain(string name,uint256 chainId,address verifyingContract)");\n', '\n', '    bytes32 public constant MINT_TYPEHASH = keccak256("Mint(address account,uint256 amount,uint256 nonce,uint256 deadline)");\n', '\n', '    mapping (address => uint256) public nonces;\n', '\n', '    constructor (address treasury) {\n', '        uint256 treasuryAmount = 400_000_000e18; // 40% DERI into treasury\n', '        totalSupply = treasuryAmount;\n', '        balances[treasury] = treasuryAmount;\n', '        emit Transfer(address(0), treasury, treasuryAmount);\n', '\n', '        controller = msg.sender;\n', '        emit ChangeController(address(0), controller);\n', '    }\n', '\n', '    // In order to prevent setting controller to an incorrect newController and forever lost the controll of this contract,\n', '    // a signature of message keccak256(bytes(name)) from the newController must be provided.\n', '    function setController(address newController, uint8 v, bytes32 r, bytes32 s) public {\n', '        require(msg.sender == controller, "Deri.setController: only controller can set controller");\n', '        require(v == 27 || v == 28, "Deri.setController: v not valid");\n', '        bytes32 message = keccak256(bytes(name));\n', '        bytes32 hash = keccak256(abi.encodePacked("\\x19Ethereum Signed Message:\\n32", message));\n', '        address signatory = ecrecover(hash, v, r, s);\n', '        require(signatory == newController, "Deri.setController: newController is not the signatory");\n', '\n', '        emit ChangeController(controller, newController);\n', '        controller = newController;\n', '    }\n', '\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return balances[account];\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public returns (bool) {\n', '        require(spender != address(0), "Deri.approve: approve to zero address");\n', '        allowances[msg.sender][spender] = amount;\n', '        emit Approval(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transfer(address to, uint256 amount) public returns (bool) {\n', '        require(to != address(0), "Deri.transfer: transfer to zero address");\n', '        _transfer(msg.sender, to, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 amount) public returns (bool) {\n', '        require(to != address(0), "Deri.transferFrom: transfer to zero address");\n', '\n', '        uint256 oldAllowance = allowances[from][msg.sender];\n', '        if (msg.sender != from && oldAllowance != uint256(-1)) {\n', '            uint256 newAllowance = oldAllowance.sub(amount, "Deri.transferFrom: amount exceeds allowance");\n', '            allowances[from][msg.sender] = newAllowance;\n', '            emit Approval(from, msg.sender, newAllowance);\n', '        }\n', '\n', '        _transfer(from, to, amount);\n', '        return true;\n', '    }\n', '\n', '    function mint(address account, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n', '        require(block.timestamp <= deadline, "Deri.mint: signature expired");\n', '\n', '        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), _getChainId(), address(this)));\n', '        bytes32 structHash = keccak256(abi.encode(MINT_TYPEHASH, account, amount, nonces[account]++, deadline));\n', '        bytes32 digest = keccak256(abi.encodePacked("\\x19\\x01", domainSeparator, structHash));\n', '        address signatory = ecrecover(digest, v, r, s);\n', '        require(signatory == controller, "Deri.mint: unauthorized");\n', '\n', '        balances[account] = balances[account].add(amount);\n', '        totalSupply = totalSupply.add(amount);\n', '\n', '        require(totalSupply <= maxSupply, "Deri.mint: totalSupply exceeds maxSupply");\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    function _transfer(address from, address to, uint256 amount) internal {\n', '        balances[from] = balances[from].sub(amount, "Deri._transfer: amount exceeds balance");\n', '        balances[to] = balances[to].add(amount, "Deri._transfer: amount overflows");\n', '        emit Transfer(from, to, amount);\n', '    }\n', '\n', '    function _getChainId() internal pure returns (uint256) {\n', '        uint256 chainId;\n', '        assembly {\n', '            chainId := chainid()\n', '        }\n', '        return chainId;\n', '    }\n', '\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return add(a, b, "SafeMath: addition overflow");\n', '    }\n', '\n', '    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, errorMessage);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mul(a, b, "SafeMath: multiplication overflow");\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, errorMessage);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}']