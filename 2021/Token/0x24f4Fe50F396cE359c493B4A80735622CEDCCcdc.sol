['// Spraytoken.net (SPRAY)\n', '// SPRAY is a deflationary cryptocurrency with auto-staking and dynamic burn model,\n', '// designed to resist the bear market by increasing the burn rate when the market is in a downward phase.\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "Ownable.sol";\n', 'import "IERC20Metadata.sol";\n', 'import "Address.sol";\n', 'import "AggregatorV3Interface.sol";\n', '\n', '/**\n', ' * @dev Wrapper for chainlink oracle (AggregatorV3Interface)\n', ' */\n', 'abstract contract Aggregator is Ownable {\n', '    using Address for address;\n', '\n', '    AggregatorV3Interface private _aggregator;\n', '    int256 private _price = 0;\n', '    bool private _isTrandUp = true;\n', '\n', '    /**\n', '     * @dev Emitted when agregator changes to `newAggregator`.\n', '     */\n', '    event UpdateAggregator(address indexed newAggregator);\n', '\n', '    /**\n', '     * @dev Updates the oracle used to receive market data.\n', '     *\n', '     * Can be called by the contract owner.\n', '     */\n', '    function updateAggregator(address newAggregator) public virtual onlyOwner {\n', '        require(newAggregator.isContract(), "Address: call to non-contract");\n', '\n', '        _aggregator = AggregatorV3Interface(newAggregator);\n', '        updateTrand();\n', '\n', '        emit UpdateAggregator(newAggregator);\n', '    }\n', '\n', '    /**\n', '     * @dev Checks if the market trend is upward (bullish).\n', '     */\n', '    function isTrandUp() public view virtual returns (bool) {\n', '        return _isTrandUp;\n', '    }\n', '\n', '    /**\n', '     * @dev Updates the trend information.\n', '     */\n', '    function updateTrand() public virtual {\n', '        (, int256 price, , , ) = _aggregator.latestRoundData();\n', '\n', '        if (price != _price) {\n', '            _isTrandUp = price > _price;\n', '            _price = price;\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Deflationary ERC-20 token. Automatic rewards for holders. Dynamic supply. Rich in memes.\n', ' *\n', ' * For more information see spraytoken.net\n', ' */\n', 'contract Spray is Aggregator, IERC20Metadata {\n', '    uint8 private constant _FEE_BASE = 3;\n', '    uint8 private constant _FEE_DIV = 100;\n', '    uint8 private constant _FIRE_MARKET_UP = 1;\n', '    uint8 private constant _FIRE_MARKET_DOWN = 2;\n', '    uint8 private constant _FIRE_DIV = 3;\n', '\n', '    string private constant _NAME = "spraytoken.net";\n', '    string private constant _SYMBOL = "SPRAY";\n', '    uint8 private constant _DECIMALS = 8;\n', '    uint256 private constant _EMISSION_INIT = 500 * (10**12) * (10**8);\n', '\n', '    uint256 private _emissionExcluded = 0;\n', '    uint256 private _emissionIncluded = _EMISSION_INIT;\n', '    uint256 private _rate = type(uint256).max / _EMISSION_INIT;\n', '\n', '    mapping(address => mapping(address => uint256)) private _allowances;\n', '    mapping(address => uint256) private _balances;\n', '\n', '    mapping(address => bool) private _isExcluded;\n', '    mapping(address => uint256) private _excludedBalances;\n', '\n', '    constructor() {\n', '        _balances[_msgSender()] = _EMISSION_INIT * _rate;\n', '        emit Transfer(address(0), _msgSender(), _EMISSION_INIT);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public pure override returns (string memory) {\n', '        return _NAME;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token.\n', '     */\n', '    function symbol() public pure override returns (string memory) {\n', '        return _SYMBOL;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the decimals places of the token.\n', '     */\n', '    function decimals() public pure override returns (uint8) {\n', '        return _DECIMALS;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _emissionExcluded + _emissionIncluded;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        if (_isExcluded[account]) return _excludedBalances[account];\n', '\n', '        return _balances[account] / _rate;\n', '    }\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount)\n', '        public\n', '        override\n', '        returns (bool)\n', '    {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender)\n', '        public\n', '        view\n', '        virtual\n', '        override\n', '        returns (uint256)\n', '    {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount)\n', '        public\n', '        virtual\n', '        override\n', '        returns (bool)\n', '    {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) public virtual override returns (bool) {\n', '        uint256 currentAllowance = _allowances[sender][_msgSender()];\n', '        require(\n', '            currentAllowance >= amount,\n', '            "ERC20: transfer amount exceeds allowance"\n', '        );\n', '        _approve(sender, _msgSender(), currentAllowance - amount);\n', '\n', '        _transfer(sender, recipient, amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue)\n', '        public\n', '        virtual\n', '        returns (bool)\n', '    {\n', '        _approve(\n', '            _msgSender(),\n', '            spender,\n', '            _allowances[_msgSender()][spender] + addedValue\n', '        );\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue)\n', '        public\n', '        virtual\n', '        returns (bool)\n', '    {\n', '        uint256 currentAllowance = _allowances[_msgSender()][spender];\n', '        require(\n', '            currentAllowance >= subtractedValue,\n', '            "ERC20: decreased allowance below zero"\n', '        );\n', '        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Check whether the account is included in redistribution.\n', '     */\n', '    function isExcluded(address account) public view returns (bool) {\n', '        return _isExcluded[account];\n', '    }\n', '\n', '    /**\n', '     * @dev Exclude `account` from receiving 1-2% transaction fee redistribution via auto-staking.\n', '     *\n', '     * Can be used to exclude technical addresses, such as exchange hot wallets.\n', '     * Can be called by the contract owner.\n', '     */\n', '    function excludeAccount(address account) public virtual onlyOwner {\n', '        require(!_isExcluded[account], "Account is already excluded");\n', '\n', '        uint256 eBalance = _balances[account] / _rate;\n', '        _excludedBalances[account] += eBalance;\n', '        _balances[account] = 0;\n', '        _isExcluded[account] = true;\n', '        _emissionExcluded += eBalance;\n', '        _emissionIncluded -= eBalance;\n', '    }\n', '\n', '    /**\n', '     * @dev Includes `accounts` back for receiving 1-2% transaction fee redistribution via auto-staking.\n', '     *\n', '     * Can be called by the contract owner.\n', '     */\n', '    function includeAccount(address account) public virtual onlyOwner {\n', '        require(_isExcluded[account], "Account is already included");\n', '\n', '        uint256 eBalance = _excludedBalances[account];\n', '        _excludedBalances[account] = 0;\n', '        _balances[account] = eBalance * _rate;\n', '        _isExcluded[account] = false;\n', '        _emissionExcluded -= eBalance;\n', '        _emissionIncluded += eBalance;\n', '    }\n', '\n', '    /**\n', '     * @dev Exclude sender account from receiving 1-2% transaction fee redistribution via auto-staking.\n', '     *\n', '     * Can be used to exclude technical addresses, such as exchange hot wallets.\n', '     */\n', '    function excludeSelf() public virtual {\n', '        excludeAccount(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(\n', '        address owner,\n', '        address spender,\n', '        uint256 amount\n', '    ) private {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `eAmount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(\n', '        address sender,\n', '        address recipient,\n', '        uint256 eAmount\n', '    ) private {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '        require(\n', '            _EMISSION_INIT >= eAmount,\n', '            "ERC20: transfer amount exceeds balance"\n', '        );\n', '\n', '        // Withdrawal from sender\n', '        uint256 rAmount = eAmount * _rate;\n', '        if (_isExcluded[sender]) {\n', '            uint256 senderBalance = _excludedBalances[sender];\n', '            require(\n', '                senderBalance >= eAmount,\n', '                "ERC20: transfer amount exceeds balance"\n', '            );\n', '            _excludedBalances[sender] = senderBalance - eAmount;\n', '\n', '            _emissionExcluded -= eAmount;\n', '            _emissionIncluded += eAmount;\n', '        } else {\n', '            uint256 senderBalance = _balances[sender];\n', '            require(\n', '                senderBalance >= rAmount,\n', '                "ERC20: transfer amount exceeds balance"\n', '            );\n', '            uint256 newBalance = senderBalance - rAmount;\n', '            if (newBalance < _rate) {\n', '                rAmount += newBalance;\n', '                _balances[sender] = 0;\n', '            } else {\n', '                _balances[sender] = newBalance;\n', '            }\n', '        }\n', '\n', '        // Calculate fee and fired fee\n', '        updateTrand();\n', '\n', '        uint256 eFee = (eAmount * _FEE_BASE) / _FEE_DIV;\n', '        uint256 rFee = eFee * _rate;\n', '        uint8 fireBase = isTrandUp() ? _FIRE_MARKET_UP : _FIRE_MARKET_DOWN;\n', '        uint256 eFire = (eFee * fireBase) / _FIRE_DIV;\n', '\n', '        // Update emission and coefficient\n', '        uint256 oldEmission = _emissionIncluded;\n', '        _emissionIncluded -= eFire;\n', '        _rate = (_rate * (oldEmission - eFee)) / _emissionIncluded;\n', '\n', '        // Refill to recipient\n', '        if (_isExcluded[recipient]) {\n', '            uint256 tAmount = (rAmount - rFee) / _rate;\n', '            _excludedBalances[recipient] += tAmount;\n', '\n', '            _emissionExcluded += tAmount;\n', '            _emissionIncluded -= tAmount;\n', '        } else {\n', '            _balances[recipient] += rAmount - rFee;\n', '        }\n', '\n', '        emit Transfer(sender, recipient, eAmount - eFee);\n', '    }\n', '}']