['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "./ERC20Pausable.sol";\n', 'import "./Ownable.sol";\n', 'import "./ERC20Burnable.sol";\n', 'import "./ERC20Capped.sol";\n', '\n', 'contract PartyCoin is ERC20Pausable, Ownable, ERC20Burnable, ERC20Capped {\n', '    constructor (uint256 initialSupply, uint256 capAmount) ERC20("PartyCoin", "PARTYCOIN") ERC20Capped(capAmount) {\n', '        ERC20._mint(msg.sender, initialSupply);\n', '    }\n', '    // reserve for casinos \n', '    function CasinoMint(address from, uint256 amount) public virtual {\n', '        // _mint requires onlyOwner\n', '        _mint(from, amount);\n', '    }\n', '    function approve(address spender, uint256 amount) public virtual override (ERC20) onlyOwner returns (bool) {\n', '        require(!paused(), "Not allowed: token approve while paused");\n', '        ERC20.approve(spender, amount);\n', '        return true; // \n', '    }\n', '    function burn(uint256 amount) public virtual override (ERC20Burnable) onlyOwner {\n', '        require(!paused(), "Not allowed: token burn while paused");\n', '        super._burn(_msgSender(), amount);\n', '    }\n', '    function burnFrom(address account, uint256 amount) public virtual override (ERC20Burnable) onlyOwner {\n', '        require(!paused(), "Not allowed: token transfer while paused");\n', '        super._burn(account, amount);\n', '    } \n', '    function decreaseAllowance(address spender, uint256 amount) public virtual override (ERC20) onlyOwner returns (bool) {\n', '        require(!paused(), "Not allowed:  allowance while paused");\n', '        require(super.decreaseAllowance(spender, amount));\n', '        return true;\n', '    }\n', '    function increaseAllowance(address spender, uint256 amount) public virtual override (ERC20) onlyOwner returns (bool) {\n', '        require(!paused(), "Not allowed:  allowance while paused");\n', '        require(super.increaseAllowance(spender, amount));\n', '        return true;\n', '    }\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override (ERC20, ERC20Pausable) {\n', '        // ERC20Pausable requires not paused\n', '        ERC20Pausable._beforeTokenTransfer(from, to, amount);\n', '    }\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override (ERC20) onlyOwner returns (bool) {\n', '        // ERC20Pausable.beforeTokenTransfer requires not paused\n', '        require(super.transferFrom(sender, recipient, amount));\n', '        return true;\n', '    }\n', '    function _mint(address from, uint256 amount) internal virtual override (ERC20, ERC20Capped) onlyOwner {\n', '        // ERC20 emits ERC20PausablebeforeTokenTransfer required for not paused\n', '        ERC20Capped._mint(from, amount);\n', '    }\n', '    // add pause modifiers \n', '    function salePause() public virtual onlyOwner {\n', '        _pause();\n', '    }\n', '    function saleUnPause() public virtual onlyOwner {\n', '        _unpause();\n', '    }\n', '}']