['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-01\n', '*/\n', '\n', 'pragma solidity 0.5.11;\n', '\n', 'contract ITokenRecipient {\n', '  function tokenFallback(address from, uint value) public;\n', '}\n', '\n', 'contract SafeMath {\n', '\tuint256 constant public MAX_UINT256 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n', '\n', '\tfunction safeAdd(uint256 x, uint256 y) pure internal returns (uint256 z) {\n', '        if (x > MAX_UINT256 - y) revert();\n', '\t\treturn x + y;\n', '\t}\n', '\n', '\tfunction safeSub(uint256 x, uint256 y) pure internal returns (uint256 z) {\n', '        if (x < y) revert();\n', '        return x - y;\n', '\t}\n', '}\n', '\n', 'contract InternationalDigitalAssets is SafeMath {\n', '    mapping(address => uint) public balances;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    \n', '    string public name = "Digital Assets NFT";\n', '    string public symbol = "IDAâœ”";\n', '    uint8 public decimals = 18;\n', '    uint256 public totalSupply = 80000000000000000000000000;\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Burn(address indexed from, uint256 value);\n', '    \n', '    constructor() public { balances[msg.sender] = totalSupply; }\n', '\n', '    function isContract(address ethAddress) private view returns (bool) {\n', '        uint length;\n', '        assembly { length := extcodesize(ethAddress) }\n', '        return (length > 0);\n', '    }\n', '    \n', '    function transfer(address to, uint value) public returns (bool success) {\n', '        require(value > 0);\n', '        balances[msg.sender] = safeSub(balances[msg.sender], value);\n', '        balances[to] = safeAdd(balances[to], value);\n', '        if(isContract(to)) {\n', '            ITokenRecipient receiver = ITokenRecipient(to);\n', '            receiver.tokenFallback(msg.sender, value);\n', '        }\n', '        emit Transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address spender, uint256 value) public returns (bool success) {\n', '        require(value > 0);\n', '        allowance[msg.sender][spender] = value;\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address fromAddress, address toAddress, uint256 value) public returns (bool success) {\n', '        require(uint256(toAddress) != 0 && value > 0);\n', '        balances[fromAddress] = safeSub(balances[fromAddress], value);\n', '        balances[toAddress] = safeAdd(balances[toAddress], value);\n', '        allowance[fromAddress][msg.sender] = safeSub(allowance[fromAddress][msg.sender], value);\n', '        emit Transfer(fromAddress, toAddress, value);\n', '        return true;\n', '    }\n', '    \n', '    function burn(uint256 value) public returns (bool success) {\n', '        require(value > 0);\n', '        balances[msg.sender] = safeSub(balances[msg.sender], value);\n', '        totalSupply = safeSub(totalSupply,value); \n', '        emit Burn(msg.sender, value);\n', '        return true;\n', '    }\n', '    \n', '    function balanceOf(address ethAddress) public view returns (uint balance) {\n', '        return balances[ethAddress];\n', '    }\n', '}']