['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-02\n', '*/\n', '\n', 'pragma solidity 0.6.0;\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract wCHXMapping is Ownable {\n', '    event AddressMapped(address indexed ethAddress, string chxAddress, string signature);\n', '    event AddressMappingRemoved(address indexed ethAddress, string chxAddress, string signature);\n', '\n', '    mapping (address => string) private ethToChxAddresses;\n', '    mapping (string => address) private chxToEthAddresses;\n', '    mapping (string => string) private chxToSignatures;\n', '\n', '    constructor()\n', '        public\n', '    {\n', '    }\n', '\n', '    function chxAddress(address _ethAddress)\n', '        external\n', '        view\n', '        returns (string memory) \n', '    {\n', '        return ethToChxAddresses[_ethAddress];\n', '    }\n', '\n', '    function ethAddress(string calldata _chxAddress)\n', '        external\n', '        view\n', '        returns (address) \n', '    {\n', '        return chxToEthAddresses[_chxAddress];\n', '    }\n', '\n', '    function signature(string calldata _chxAddress)\n', '        external\n', '        view\n', '        returns (string memory) \n', '    {\n', '        return chxToSignatures[_chxAddress];\n', '    }\n', '\n', '    function mapAddress(string calldata _chxAddress, string calldata _signature)\n', '        external\n', '    {\n', '        address _ethAddress = _msgSender();\n', '\n', '        require(bytes(ethToChxAddresses[_ethAddress]).length == 0);\n', '        require(chxToEthAddresses[_chxAddress] == address(0));\n', '        require(bytes(chxToSignatures[_chxAddress]).length == 0);\n', '        checkChxAddress(_chxAddress);\n', '        checkSignature(_signature);\n', '\n', '        ethToChxAddresses[_ethAddress] = _chxAddress;\n', '        chxToEthAddresses[_chxAddress] = _ethAddress;\n', '        chxToSignatures[_chxAddress] = _signature;\n', '\n', '        emit AddressMapped(_ethAddress, _chxAddress, _signature);\n', '    }\n', '\n', '    function removeMappedAddress(address _ethAddress)\n', '        external\n', '        onlyOwner\n', '    {\n', '        string memory _chxAddress = ethToChxAddresses[_ethAddress];\n', '        require(bytes(_chxAddress).length != 0);\n', '\n', '        string memory _signature = chxToSignatures[_chxAddress];\n', '        require(bytes(_signature).length != 0);\n', '        require(chxToEthAddresses[_chxAddress] == _ethAddress);\n', '        \n', '        delete ethToChxAddresses[_ethAddress];\n', '        delete chxToEthAddresses[_chxAddress];\n', '        delete chxToSignatures[_chxAddress];\n', '        \n', '        emit AddressMappingRemoved(_ethAddress, _chxAddress, _signature);\n', '    }\n', '\n', '    function isAlphanumericChar(bytes1 _char)\n', '        private\n', '        pure\n', '        returns (bool)\n', '    {\n', '        return (_char >= 0x30 && _char <= 0x39) || \n', '            (_char >= 0x41 && _char <= 0x5A) || \n', '            (_char >= 0x61 && _char <= 0x7A);\n', '    }\n', '\n', '    function checkChxAddress(string memory _chxAddress)\n', '        private \n', '        pure\n', '    {\n', '        bytes memory _strBytes = bytes(_chxAddress);\n', '        bytes memory _prefix = bytes("CH");\n', '        require(_strBytes[0] == _prefix[0] && _strBytes[1] == _prefix[1], "Invalid CHX address");\n', '\n', '        bytes1 _lastChar = _strBytes[_strBytes.length - 1];\n', '        require(isAlphanumericChar(_lastChar), "CHX address ends with incorrect character");\n', '    }\n', '\n', '    function checkSignature(string memory _signature)\n', '        private \n', '        pure\n', '    {\n', '        bytes memory _strBytes = bytes(_signature);\n', '\n', '        bytes1 _firstChar = _strBytes[0];\n', '        require(isAlphanumericChar(_firstChar), "Signature ends with incorrect character");\n', '\n', '        bytes1 _lastChar = _strBytes[_strBytes.length - 1];\n', '        require(isAlphanumericChar(_lastChar), "Signature ends with incorrect character");\n', '    }\n', '\n', "    // Enable recovery of ether sent by mistake to this contract's address.\n", '    function drainStrayEther(uint _amount)\n', '        external\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        payable(owner()).transfer(_amount);\n', '        return true;\n', '    }\n', '\n', "    // Enable recovery of any ERC20 compatible token sent by mistake to this contract's address.\n", '    function drainStrayTokens(IERC20 _token, uint _amount)\n', '        external\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        return _token.transfer(owner(), _amount);\n', '    }\n', '}']