['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-25\n', '*/\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/IERC20CrossChain.sol\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', 'interface IERC20CrossChain is IERC20 {\n', '    function mint(address account, uint256 amount) external;\n', '    function burn(uint256 amount) external;\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Context.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/CrossChainAdminStorage.sol\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', 'contract CrossChainAdminStorage is Ownable{\n', '\n', '    address public admin;\n', '\n', '    address public implementation;\n', '}\n', '\n', '// File: contracts/CrossChainStorage.sol\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', 'contract CrossChainStorage is CrossChainAdminStorage{\n', '\n', '    enum Chain {\n', '        ETH, /// Ethereum\n', '        BSC, /// Binance Smart Chain\n', '        HECO /// Huobi ECO Chain\n', '    }\n', '\n', '    mapping (address => bool) public relayer;\n', '    mapping (address => bool) public acceptToken;\n', '    mapping (Chain => bool) public acceptChain;\n', '    mapping (bytes32 => address[]) public relayInfo;\n', '    uint256 public confirmRequireNum;\n', '    mapping (Chain => uint256) public fee;\n', '    mapping (address => uint256) public maxSendAmountPerDay;\n', '    mapping (address => uint256) public maxAmount;\n', '    mapping (address => uint256) public minAmount;\n', '    mapping (address => uint256) public sendTotalAmount;\n', '    mapping (address => uint256) public receiveTotalAmount;\n', '    uint256 public timestamp;\n', '    bool public paused;\n', '    mapping (address => uint256) public maxReceiveAmountPerDay;\n', '}\n', '\n', '// File: contracts/ICrossChain.sol\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'interface ICrossChain {\n', '    function setAcceptToken(address token, bool isAccepted) external;\n', '    function setAcceptChain(uint8 chain, bool isAccepted) external;\n', '    function addRelayer(address relayerAddress) external;\n', '    function removeRelayer(address relayerAddress) external;\n', '    function setConfirmRequireNum(uint256 requireNum) external;\n', '    function setMaxAmountPerDay(address token, uint256 amount) external;\n', '    function setFee(uint8 chain, uint256 amount) external;\n', '    function crossChainTransfer(address token, uint256 amount, address to, uint8 chain) external payable;\n', '    function receiveToken(address token, uint256 amount, address receiveAddress, string memory info) external;\n', '    function transferToken(address token, uint256 amount, address to) external;\n', '    function transfer(uint256 amount, address payable to) external;\n', '    function pause() external;\n', '    function unpause() external;\n', '}\n', '\n', '// File: contracts/CrossChain.sol\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', '\n', '\n', '\n', 'contract CrossChain is CrossChainStorage {\n', '    using SafeMath for uint256;\n', '\n', '    enum Error {\n', '        NO_ERROR,\n', '        ALREADY_RELAYED,\n', '        OVER_MAX_AMOUNT_PER_DAY\n', '    }\n', '\n', '    event Failure(uint256 error);\n', '\n', '    uint256 constant secondsPerDay = 86400;\n', '\n', '    event CrossChainTransfer(address indexed from, uint256 amount, address indexed token, address targetAddress, Chain chain, uint256 fee);\n', '    event ReceivingToken(address indexed receiveAddress, address indexed token, uint256 amount, string info);\n', '    event ReceiveTokenDone(address indexed receiveAddress, address indexed token, uint256 amount, string info);\n', '    event Paused(address account);\n', '    event Unpaused(address account);\n', '    event AcceptToken(address token, bool isAccepted);\n', '    event AcceptChain(Chain chain, bool isAccepted);\n', '    event RelayerAdded(address relayer);\n', '    event RelayerRemoved(address relayer);\n', '    event ConfirmRequireNumChanged(uint256 oldNum,uint256 newNum);\n', '    event MaxAmountChanged(address token, uint256 oldAmount, uint256 newAmount);\n', '    event MinAmountChanged(address token, uint256 oldAmount, uint256 newAmount);\n', '    event MaxSendAmountPerDayChanged(address token, uint256 oldMaxAmount, uint256 newMaxAmount);\n', '    event MaxReceiveAmountPerDayChanged(address token, uint256 oldMaxAmount, uint256 newMaxAmount);  \n', '    event FeeChanged(Chain chain, uint256 oldFee, uint256 newFee);\n', '\n', '    modifier onlyRelayer() {\n', '        require(relayer[msg.sender], "Caller is not the relayer");\n', '        _;\n', '    }\n', '\n', '    modifier onlyAdmin() {\n', '        require(admin == msg.sender, "Caller is not the admin");\n', '        _;\n', '    }\n', '\n', '    modifier whenNotPaused() {\n', '        require(!paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused() {\n', '        require(paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    function initialize(\n', '        address _acceptToken,\n', '        uint256 _confirmRequireNum,\n', '        Chain[] memory _acceptChains,\n', '        uint256 _timestamp\n', '    ) external  {\n', '        require(admin == msg.sender, "UNAUTHORIZED");\n', '        require(timestamp == 0, "ALREADY INITIALIZED");\n', '        timestamp = _timestamp;\n', '        confirmRequireNum = _confirmRequireNum;\n', '        acceptToken[_acceptToken] = true;\n', '        for(uint8 i = 0; i < _acceptChains.length; i++){\n', '            acceptChain[_acceptChains[i]] = true;\n', '        }\n', '        paused = false;\n', '    }\n', '\n', '    function setAcceptToken(address token, bool isAccepted) external onlyOwner{\n', '        acceptToken[token] = isAccepted;\n', '        emit AcceptToken(token, isAccepted);\n', '    }\n', '\n', '    function setAcceptChain(Chain chain, bool isAccepted) external onlyOwner{\n', '        acceptChain[chain] = isAccepted;\n', '        emit AcceptChain(chain, isAccepted);\n', '    }\n', '\n', '    function addRelayer(address relayerAddress) external onlyAdmin{\n', '        relayer[relayerAddress] = true;\n', '        emit RelayerAdded(relayerAddress);\n', '    }\n', '\n', '    function removeRelayer(address relayerAddress) external onlyOwner{\n', '        relayer[relayerAddress] = false;\n', '        emit RelayerRemoved(relayerAddress);\n', '    }\n', '\n', '    function setConfirmRequireNum(uint256 requireNum) external onlyOwner{\n', '        uint256 oldNum = confirmRequireNum;\n', '        confirmRequireNum = requireNum;\n', '        emit ConfirmRequireNumChanged(oldNum, requireNum);\n', '    }\n', '\n', '    function setMaxAmount(address token, uint256 amount) external onlyOwner{\n', '        require(amount >= minAmount[token], "Invalid amount");\n', '        uint256 oldAmount = maxAmount[token];\n', '        maxAmount[token] = amount;\n', '        emit MaxAmountChanged(token, oldAmount, amount);\n', '    }\n', '\n', '    function setMinAmount(address token, uint256 amount) external onlyOwner{\n', '        require(amount <= maxAmount[token], "Invalid amount");\n', '        uint256 oldAmount = minAmount[token];\n', '        minAmount[token] = amount;\n', '        emit MinAmountChanged(token, oldAmount, amount);\n', '    }\n', '\n', '    function setMaxSendAmountPerDay(address token, uint256 amount) external onlyOwner{\n', '        uint256 oldMaxAmount = maxSendAmountPerDay[token];\n', '        maxSendAmountPerDay[token] = amount;\n', '        emit MaxSendAmountPerDayChanged(token, oldMaxAmount, amount);\n', '    }\n', '\n', '    function setMaxReceiveAmountPerDay(address token, uint256 amount) external onlyOwner{\n', '        uint256 oldMaxAmount = maxReceiveAmountPerDay[token];\n', '        maxReceiveAmountPerDay[token] = amount;\n', '        emit MaxReceiveAmountPerDayChanged(token, oldMaxAmount, amount);\n', '    }\n', '\n', '    function setFee(Chain chain, uint256 amount) external onlyOwner{\n', '        uint256 oldFee = fee[chain];\n', '        fee[chain] = amount;\n', '        emit FeeChanged(chain, oldFee, amount);\n', '    }\n', '    \n', '    function crossChainTransfer(address token, uint256 amount, address to, Chain chain) external payable whenNotPaused {\n', '        require(acceptToken[token],"Invalid token");\n', '        require(acceptChain[chain],"Invalid chain");\n', '        require(msg.value >= fee[chain], "Fee is not enough");\n', '        checkTransferAmount(token, amount);\n', '        (Error error,uint256 totalAmount)= addSendTotalAmount(token, sendTotalAmount[token], amount);\n', '        require(uint256(error) == 0, "Total amount is greater than max amount per day");\n', '        sendTotalAmount[token] = totalAmount;\n', '        IERC20CrossChain(token).transferFrom(msg.sender, address(this), amount);\n', '        emit CrossChainTransfer(msg.sender, amount, token, to, chain, msg.value);\n', '    }\n', '\n', '    function receiveToken(address token, uint256 amount, address receiveAddress, string memory info) external onlyRelayer whenNotPaused returns (uint256){\n', '        bytes32 relayInfoHash = keccak256((abi.encodePacked(token,receiveAddress,amount,info)));\n', '        if(hasRelay(relayInfoHash)) return fail(Error.ALREADY_RELAYED);\n', '        uint256 confirmNum = relayInfo[relayInfoHash].length;\n', '        if(confirmNum == 0){\n', '            (Error error, uint256 totalAmount) = addReceiveTotalAmount(token, receiveTotalAmount[token], amount);\n', '            if(uint256(error) != 0) return fail(error);\n', '            receiveTotalAmount[token] = totalAmount;\n', '        }\n', '        relayInfo[relayInfoHash].push(msg.sender);\n', '        confirmNum = confirmNum + 1;\n', '        if(confirmNum < confirmRequireNum){\n', '            emit ReceivingToken(receiveAddress, token, amount, info);\n', '        }else if(relayInfo[relayInfoHash].length == confirmRequireNum){\n', '            IERC20CrossChain(token).transfer(receiveAddress, amount);\n', '            emit ReceivingToken(receiveAddress, token, amount, info);\n', '            emit ReceiveTokenDone(receiveAddress, token, amount, info);\n', '        }\n', '        return uint256(Error.NO_ERROR);\n', '    }\n', '\n', '    function transferToken(address token, uint256 amount, address to) external onlyAdmin {\n', '        IERC20CrossChain(token).transfer(to, amount);\n', '    }\n', '\n', '    function transfer(uint256 amount, address payable to) external onlyOwner {\n', '        to.transfer(amount);\n', '    }\n', '\n', '    function pause() external whenNotPaused onlyOwner {\n', '         paused = true;\n', '        emit Paused(msg.sender);\n', '    }\n', '\n', '    function unpause() external whenPaused onlyOwner {\n', '        paused = false;\n', '        emit Unpaused(msg.sender);\n', '    }\n', '\n', '    function checkTransferAmount(address token, uint256 amount) internal view returns (uint256){\n', '        require(amount <= maxAmount[token],"Amount is greater than max amount");\n', '        require(amount >= minAmount[token],"Amount is less than min amount");\n', '    }\n', '\n', '    function addSendTotalAmount(address token, uint256 totalAmount, uint256 amount) internal returns (Error,uint256){\n', '        if(block.timestamp > timestamp.add(secondsPerDay)){\n', '            uint256 offset = block.timestamp.sub(timestamp).div(secondsPerDay).mul(secondsPerDay);\n', '            timestamp = timestamp.add(offset);\n', '            totalAmount = 0;\n', '            receiveTotalAmount[token] = 0;\n', '        }\n', '        totalAmount = totalAmount.add(amount);\n', '        if(totalAmount > maxSendAmountPerDay[token]) return (Error.OVER_MAX_AMOUNT_PER_DAY, totalAmount);\n', '        return (Error.NO_ERROR ,totalAmount);\n', '    }\n', '\n', '    function addReceiveTotalAmount(address token, uint256 totalAmount, uint256 amount) internal returns (Error,uint256){\n', '        if(block.timestamp > timestamp.add(secondsPerDay)){\n', '            uint256 offset = block.timestamp.sub(timestamp).div(secondsPerDay).mul(secondsPerDay);\n', '            timestamp = timestamp.add(offset);\n', '            totalAmount = 0;\n', '            sendTotalAmount[token] = 0;\n', '        }\n', '        totalAmount = totalAmount.add(amount);\n', '        if(totalAmount > maxReceiveAmountPerDay[token]) return (Error.OVER_MAX_AMOUNT_PER_DAY, totalAmount);\n', '        return (Error.NO_ERROR ,totalAmount);\n', '    }\n', '\n', '    function hasRelay(bytes32 relayInfoHash) internal view returns (bool){\n', '        address[] memory relayers = relayInfo[relayInfoHash];\n', '        for(uint256 i = 0; i < relayers.length; i++){\n', '            if(relayers[i] == msg.sender)\n', '                return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function fail(Error err) private returns (uint) {\n', '        emit Failure(uint256(err));\n', '        return uint256(err);\n', '    }\n', '}']