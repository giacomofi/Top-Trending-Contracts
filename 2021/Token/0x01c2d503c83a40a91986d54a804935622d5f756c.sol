['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-16\n', '*/\n', '\n', 'pragma solidity ^0.5.9;\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  \n', '      function ceil(uint a, uint m) internal pure returns (uint r) {\n', '        return (a + m - 1) / m * m;\n', '    }\n', '\n', '}\n', '\n', 'contract Owned {\n', '    modifier onlyOwner() {\n', '        require(msg.sender==owner);\n', '        _;\n', '    }\n', '    address payable owner;\n', '    address payable newOwner;\n', '    function changeOwner(address payable _newOwner) public onlyOwner {\n', '        require(_newOwner!=address(0));\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        if (msg.sender==newOwner) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', 'contract ERC20 {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) view public  returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public  returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public  returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) view public  returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract Token is Owned,  ERC20 {\n', '    using SafeMath for uint256;\n', '    string public symbol;\n', '    string public name;\n', '    uint8 public decimals;\n', '    mapping (address=>uint256) balances;\n', '    mapping (address=>mapping (address=>uint256)) allowed;\n', '    \n', '    uint256 burn_amount=0;\n', '    event Burn(address burner, uint256 _value);\n', '    event BurntOut(address burner, uint256 _value);\n', '    \n', '    function balanceOf(address _owner) view public   returns (uint256 balance) {return balances[_owner];}\n', '    \n', '    function transfer(address _to, uint256 _amount) public   returns (bool success) {\n', '        require (balances[msg.sender]>=_amount&&_amount>0&&balances[_to]+_amount>balances[_to]);\n', '\n', '        uint256 amount = fivePercent(_amount); \n', '        burn(msg.sender,amount);\n', '        if(totalSupply > 1000000000000000000000000)\n', '        {\n', '            \n', '        uint256 amountToTransfer = _amount.sub(amount);\n', '        balances[msg.sender]-=amountToTransfer;\n', '        balances[_to]+=amountToTransfer;\n', '        \n', '        emit Transfer(msg.sender,_to,amountToTransfer);\n', '        return true;\n', '        }\n', '        else{\n', '         \n', '        balances[msg.sender]-=_amount;\n', '        balances[_to]+=_amount;\n', '        emit Transfer(msg.sender,_to,_amount);\n', '        return true;\n', '        }\n', '        \n', '    }\n', '  \n', '  function transferFromOwner(address _to, uint256 _amount) public   returns (bool success) {\n', '        require (balances[owner]>=_amount&&_amount>0&&balances[_to]+_amount>balances[_to]);\n', '       \n', '        uint256 amount = fivePercent(_amount);\n', '        burn(owner, amount);\n', '        \n', '        if(totalSupply > 1000000000000000000000000)\n', '        {\n', '        uint256 amountToTransfer = _amount.sub(amount);\n', '        balances[owner]-=amountToTransfer;\n', '        balances[_to]+=amountToTransfer;\n', '           emit Transfer(owner,_to,amountToTransfer);\n', '        }else\n', '        {\n', '        \n', '        balances[owner]-=_amount;\n', '        balances[_to]+=_amount;\n', '           emit Transfer(owner,_to,_amount);\n', '        }\n', ' return true;\n', '    }\n', '  \n', '    function transferFrom(address _from,address _to,uint256 _amount) public   returns (bool success) {\n', '        require (balances[_from]>=_amount&&allowed[_from][msg.sender]>=_amount&&_amount>0&&balances[_to]+_amount>balances[_to]);\n', '        uint256 amount = fivePercent(_amount);\n', '       \n', '        burn(_from, amount);\n', '       \n', '        if(totalSupply > 1000000000000000000000000)\n', '        {\n', '        uint256 amountToTransfer = _amount.sub(amount);\n', '        balances[_from]-=amountToTransfer;\n', '        allowed[_from][msg.sender]-=amountToTransfer;\n', '        balances[_to]+=amountToTransfer;\n', '        emit Transfer(_from, _to, amountToTransfer);\n', '        }\n', '        else\n', '        {\n', '           \n', '        balances[_from]-=_amount;\n', '        allowed[_from][msg.sender]-=_amount;\n', '        balances[_to]+=_amount;\n', '        emit Transfer(_from, _to, _amount);\n', '        }\n', '       \n', '        return true;\n', '    }\n', '  \n', '    function approve(address _spender, uint256 _amount) public   returns (bool success) {\n', '        allowed[msg.sender][_spender]=_amount;\n', '        emit Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) view public   returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '    \n', '    \n', '    function burn(address _from, uint256 _value) internal  {\n', '    \n', '        if(totalSupply > 1000000000000000000000000)\n', '        {\n', '            \n', '            uint256 burnlimit = totalSupply.sub(_value);\n', '        \n', '        \n', '        if(burnlimit > 1000000000000000000000000)    \n', '        {\n', '        balances[_from] =balances[_from].sub(_value);  // Subtract from the sender\n', '        totalSupply =totalSupply.sub(_value);  \n', '        burn_amount = burn_amount.add(_value);\n', '        // Updates totalSupply\n', '        emit Burn(_from, _value);\n', '        }else\n', '        {\n', '             emit BurntOut(msg.sender, _value);\n', '        }\n', '            \n', '        }else\n', '        {\n', '            emit BurntOut(msg.sender, _value);\n', '        }\n', '        \n', '        \n', '        \n', '    }\n', '        function fivePercent(uint256 _tokens) private pure returns (uint256){\n', '        uint256 roundValue = _tokens.ceil(100);\n', '        uint fivepercentofTokens = roundValue.mul(500).div(100 * 10**uint(2));\n', '        return fivepercentofTokens;\n', '    }\n', '}\n', '\n', 'contract PlutoDoge is Token{\n', '    using SafeMath for uint256;\n', '    constructor() public{\n', '        symbol = "PDOGE";\n', '        name = "PlutoDoge";\n', '        decimals = 18;\n', '        totalSupply = 1000000000000000000000000000; \n', '        \n', '        owner = msg.sender;\n', '        balances[owner] = totalSupply;\n', '        \n', '        \n', '    }\n', '\n', '    function () payable external {\n', '        require(msg.value>0);\n', '        owner.transfer(msg.value);\n', '    }\n', '    \n', '    \n', '    \n', '    \n', '}']