['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-21\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at BscScan.com on 2021-04-20\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-20\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-19\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.7.0;\n', '\n', 'library SafeMath {\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20 {\n', '  using SafeMath for uint256;\n', '\n', '  string public constant name = "ChiaSocks";\n', '  string public constant symbol = "XCH";\n', '  uint256 public constant decimals = 18;\n', '  uint256 _totalSupply = 100000 * 1e18;\n', '\n', '  mapping (address => uint256) internal _balances;\n', '  mapping (address => mapping (address => uint256)) internal _allowed;\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '  constructor() {\n', '    _balances[msg.sender] = _totalSupply;\n', '    emit Transfer(address(0), msg.sender, _totalSupply);\n', '  }\n', '\n', '  function totalSupply() public view returns (uint256 supply) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return _balances[_owner];\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool success) {\n', '    require (_to != address(0), "");\n', '    _balances[msg.sender] = _balances[msg.sender].sub(_value);\n', '    _balances[_to] = _balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '    require (_to != address(0), "");\n', '    _balances[_from] = _balances[_from].sub(_value);\n', '    _allowed[_from][msg.sender] = _allowed[_from][msg.sender].sub(_value);\n', '    _balances[_to] = _balances[_to].add(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool success) {\n', '    require(_allowed[msg.sender][_spender] == 0 || _value == 0);\n', '    _allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '    return _allowed[_owner][_spender];\n', '  }\n', '}']