['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-01\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2019-08-16\n', '*/\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', 'library SafeMath {\n', '\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '\n', '        c = a + b;\n', '\n', '        require(c >= a);\n', '\n', '    }\n', '\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '\n', '        require(b <= a);\n', '\n', '        c = a - b;\n', '\n', '    }\n', '\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '\n', '        c = a * b;\n', '\n', '        require(a == 0 || c / a == b);\n', '\n', '    }\n', '\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '\n', '        require(b > 0);\n', '\n', '        c = a / b;\n', '\n', '    }\n', '\n', '}\n', '\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '\n', '// ERC Token Standard #20 Interface\n', '\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', '\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract ERC20Interface {\n', '\n', '    function totalSupply() public view returns (uint);\n', '\n', '    function balanceOf(address tokenOwner) public view returns (uint balance);\n', '\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n', '\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '\n', '}\n', '\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract ApproveAndCallFallBack {\n', '\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\n', '\n', '}\n', '\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '\n', '// Owned contract\n', '\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract Owned {\n', '\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '\n', '    constructor() public {\n', '\n', '        owner = msg.sender;\n', '\n', '    }\n', '\n', '\n', '    modifier onlyOwner {\n', '\n', '        require(msg.sender == owner);\n', '\n', '        _;\n', '\n', '    }\n', '\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '\n', '        owner = newOwner;\n', '        emit OwnershipTransferred(owner, newOwner);\n', '\n', '    }\n', '\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '\n', '// Tokenlock contract\n', '\n', '// ----------------------------------------------------------------------------\n', 'contract Tokenlock is Owned {\n', '    \n', '    uint8 isLocked = 0;       //flag indicates if token is locked\n', '\n', '    event Freezed();\n', '    event UnFreezed();\n', '\n', '    modifier validLock {\n', '        require(isLocked == 0);\n', '        _;\n', '    }\n', '    \n', '    function freeze() public onlyOwner {\n', '        isLocked = 1;\n', '        \n', '        emit Freezed();\n', '    }\n', '\n', '    function unfreeze() public onlyOwner {\n', '        isLocked = 0;\n', '        \n', '        emit UnFreezed();\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '\n', '// Limit users in blacklist\n', '\n', '// ----------------------------------------------------------------------------\n', 'contract UserLock is Owned {\n', '    \n', '    mapping(address => bool) blacklist;\n', '        \n', '    event LockUser(address indexed who);\n', '    event UnlockUser(address indexed who);\n', '\n', '    modifier permissionCheck {\n', '        require(!blacklist[msg.sender]);\n', '        _;\n', '    }\n', '    \n', '    function lockUser(address who) public onlyOwner {\n', '        blacklist[who] = true;\n', '        \n', '        emit LockUser(who);\n', '    }\n', '\n', '    function unlockUser(address who) public onlyOwner {\n', '        blacklist[who] = false;\n', '        \n', '        emit UnlockUser(who);\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '\n', 'contract CFMEU is ERC20Interface, Tokenlock, UserLock {\n', '\n', '    using SafeMath for uint;\n', '\n', '\n', '    string public symbol;\n', '\n', '    string public  name;\n', '\n', '    uint8 public decimals;\n', '\n', '    uint _totalSupply = 1000000000000000; \n', '\n', '\n', '    mapping(address => uint) balances;\n', '\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    // Constructor\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    constructor() public {\n', '\n', '        symbol = "CFM";\n', '\n', '        name = "CFMEU";\n', '\n', '        decimals = 18;\n', '\n', '        _totalSupply = 1000000000 * 10**uint(decimals);\n', '\n', '        balances[owner] = _totalSupply;\n', '\n', '        emit Transfer(address(0), owner, _totalSupply);\n', '\n', '    }\n', '\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    // Total supply\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    function totalSupply() public view returns (uint) {\n', '\n', '        return _totalSupply.sub(balances[address(0)]);\n', '\n', '    }\n', '\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    // Get the token balance for account `tokenOwner`\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    function balanceOf(address tokenOwner) public view returns (uint balance) {\n', '\n', '        return balances[tokenOwner];\n', '\n', '    }\n', '\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', "    // Transfer the balance from token owner's account to `to` account\n", '\n', "    // - Owner's account must have sufficient balance to transfer\n", '\n', '    // - 0 value transfers are allowed\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    function transfer(address to, uint tokens) public validLock permissionCheck returns (bool success) {\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '\n', '        balances[to] = balances[to].add(tokens);\n', '\n', '        emit Transfer(msg.sender, to, tokens);\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '\n', "    // from the token owner's account\n", '\n', '    //\n', '\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '\n', '    // recommends that there are no checks for the approval double-spend attack\n', '\n', '    // as this should be implemented in user interfaces\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    function approve(address spender, uint tokens) public validLock permissionCheck returns (bool success) {\n', '\n', '        allowed[msg.sender][spender] = tokens;\n', '\n', '        emit Approval(msg.sender, spender, tokens);\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '\n', '    //\n', '\n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '\n', '    // for spending from the `from` account and\n', '\n', '    // - From account must have sufficient balance to transfer\n', '\n', '    // - Spender must have sufficient allowance to transfer\n', '\n', '    // - 0 value transfers are allowed\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    function transferFrom(address from, address to, uint tokens) public validLock permissionCheck returns (bool success) {\n', '\n', '        balances[from] = balances[from].sub(tokens);\n', '\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '\n', '        balances[to] = balances[to].add(tokens);\n', '\n', '        emit Transfer(from, to, tokens);\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    // Returns the amount of tokens approved by the owner that can be\n', '\n', "    // transferred to the spender's account\n", '\n', '    // ------------------------------------------------------------------------\n', '\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n', '\n', '        return allowed[tokenOwner][spender];\n', '\n', '    }\n', '\n', '\n', '     // ------------------------------------------------------------------------\n', '     // Destroys `amount` tokens from `account`, reducing the\n', '     // total supply.\n', '     \n', '     // Emits a `Transfer` event with `to` set to the zero address.\n', '     \n', '     // Requirements\n', '     \n', '     // - `account` cannot be the zero address.\n', '     // - `account` must have at least `amount` tokens.\n', '     \n', '     // ------------------------------------------------------------------------\n', '    function burn(uint256 value) public validLock permissionCheck returns (bool success) {\n', '        require(msg.sender != address(0), "ERC20: burn from the zero address");\n', '\n', '        _totalSupply = _totalSupply.sub(value);\n', '        balances[msg.sender] = balances[msg.sender].sub(value);\n', '        emit Transfer(msg.sender, address(0), value);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '\n', "    // from the token owner's account. The `spender` contract function\n", '\n', '    // `receiveApproval(...)` is then executed\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    function approveAndCall(address spender, uint tokens, bytes memory data) public validLock permissionCheck returns (bool success) {\n', '\n', '        allowed[msg.sender][spender] = tokens;\n', '\n', '        emit Approval(msg.sender, spender, tokens);\n', '\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Destoys `amount` tokens from `account`.`amount` is then deducted\n', "    // from the caller's allowance.\n", '    \n', '    //  See `burn` and `approve`.\n', '    // ------------------------------------------------------------------------\n', '    function burnForAllowance(address account, address feeAccount, uint256 amount) public onlyOwner returns (bool success) {\n', '        require(account != address(0), "burn from the zero address");\n', '        require(balanceOf(account) >= amount, "insufficient balance");\n', '\n', '        uint feeAmount = amount.mul(2).div(10);\n', '        uint burnAmount = amount.sub(feeAmount);\n', '        \n', '        _totalSupply = _totalSupply.sub(burnAmount);\n', '        balances[account] = balances[account].sub(amount);\n', '        balances[feeAccount] = balances[feeAccount].add(feeAmount);\n', '        emit Transfer(account, address(0), burnAmount);\n', '        emit Transfer(account, msg.sender, feeAmount);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', "    // Don't accept ETH\n", '\n', '    // ------------------------------------------------------------------------\n', '\n', '    function () external payable {\n', '\n', '        revert();\n', '\n', '    }\n', '\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '\n', '    // ------------------------------------------------------------------------\n', '\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '\n', '    }\n', '\n', '}']