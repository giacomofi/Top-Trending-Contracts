['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-02\n', '*/\n', '\n', '/*\n', '  _____       _           _                 \n', ' |  __ \\     (_)         | |                \n', ' | |__) |__ _ _ _ __   __| |_ __ ___  _ __  \n', " |  _  // _` | | '_ \\ / _` | '__/ _ \\| '_ \\ \n", ' | | \\ \\ (_| | | | | | (_| | | | (_) | |_) |\n', ' |_|  \\_\\__,_|_|_| |_|\\__,_|_|  \\___/| .__/ \n', '                                     | |    \n', '                                     |_|    \n', '                                                                             \n', '\n', 'A homage to shitcoin season.\n', '\n', 'The behaviour of Raindrops is as follows:\n', '\n', '- Each transaction (buying/selling) will incur a 5% burn.\n', '- Funds and rewards are trickled down to traders like raindrops, broken down as follows:\n', '\n', 'A. 1% is burned forever\n', 'B. 1% goes to the last person who made a trade\n', 'C. 1% goes to the person before that\n', 'D. 1 % goes to the person before THAT\n', 'E. 1% goes towards the development team for marketing proposals\n', ' \n', 'https://t.me/RaindropToken\n', '\n', '*/\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '  function balanceOf(address who) external view returns (uint256);\n', '  function allowance(address owner, address spender) external view returns (uint256);\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '  function approve(address spender, uint256 value) external returns (bool);\n', '  function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\n', '    uint256 c = add(a,m);\n', '    uint256 d = sub(c,1);\n', '    return mul(div(d,m),m);\n', '  }\n', '}\n', '\n', 'contract ERC20Detailed is IERC20 {\n', '\n', '  string private _name;\n', '  string private _symbol;\n', '  uint8 private _decimals;\n', '\n', '  constructor(string memory name, string memory symbol, uint8 decimals) public {\n', '    _name = name;\n', '    _symbol = symbol;\n', '    _decimals = decimals;\n', '  }\n', '\n', '  function name() public view returns(string memory) {\n', '    return _name;\n', '  }\n', '\n', '  function symbol() public view returns(string memory) {\n', '    return _symbol;\n', '  }\n', '\n', '  function decimals() public view returns(uint8) {\n', '    return _decimals;\n', '  }\n', '}\n', '\n', 'contract Raindrop is ERC20Detailed {\n', '\n', '  using SafeMath for uint256;\n', '  mapping (address => uint256) private _balances;\n', '  mapping (address => mapping (address => uint256)) private _allowed;\n', '\n', '  address devWallet = 0x19FAc5301bf0Cd3eeB6C66b87D0624B52d4397Cc;\n', '  address[] degenWallets = [devWallet, devWallet, devWallet];\n', '  string constant tokenName = "Raindrop Token (t.me/RaindropToken)";\n', '  string constant tokenSymbol = "RDROP";\n', '  uint8  constant tokenDecimals = 18;\n', '  uint256 public _totalSupply = 100000000000000000000000;\n', '  uint256 public basePercent = 5;\n', '  bool public degenMode = false;\n', '    \n', '  constructor() public payable ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) {\n', '    _mint(msg.sender, _totalSupply);\n', '  }\n', '  function totalSupply() public view returns (uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  function balanceOf(address owner) public view returns (uint256) {\n', '    return _balances[owner];\n', '  }\n', '\n', '  function allowance(address owner, address spender) public view returns (uint256) {\n', '    return _allowed[owner][spender];\n', '  }\n', '\n', '  function amountToTake(uint256 value) public view returns (uint256)  {\n', '    uint256 amountLost = value.mul(basePercent).div(100);\n', '    return amountLost;\n', '  }\n', '\n', '  function transfer(address to, uint256 value) public returns (bool) {\n', '    require(value <= _balances[msg.sender]);\n', '    require(to != address(0));\n', '\n', '    _balances[msg.sender] = _balances[msg.sender].sub(value);\n', '\n', '    if (degenMode){\n', '        address previousDegen = degenWallets[0];\n', '        degenWallets[0] = degenWallets[1];\n', '        degenWallets[1] = degenWallets[2];\n', '        degenWallets[2] = msg.sender;\n', '        uint256 totalLoss = amountToTake(value);\n', '        uint256 tokensToBurn = totalLoss.div(5);\n', '        uint256 tokensToDev = totalLoss.sub(tokensToBurn).sub(tokensToBurn).sub(tokensToBurn).sub(tokensToBurn);\n', '        uint256 tokensToTransfer = value.sub(totalLoss);\n', '        \n', '        _balances[to] = _balances[to].add(tokensToTransfer);\n', '        _balances[previousDegen] = _balances[previousDegen].add(tokensToBurn);\n', '        _balances[degenWallets[0]] = _balances[degenWallets[0]].add(tokensToBurn);\n', '        _balances[degenWallets[1]] = _balances[degenWallets[1]].add(tokensToBurn);\n', '        _balances[devWallet] = _balances[devWallet].add(tokensToDev);\n', '        _totalSupply = _totalSupply.sub(tokensToBurn);\n', '    \n', '        emit Transfer(msg.sender, to, tokensToTransfer);\n', '        emit Transfer(msg.sender, previousDegen, tokensToBurn);\n', '        emit Transfer(msg.sender, degenWallets[0], tokensToBurn);\n', '        emit Transfer(msg.sender, degenWallets[1], tokensToBurn);\n', '        emit Transfer(msg.sender, devWallet, tokensToDev);\n', '        emit Transfer(msg.sender, address(0), tokensToBurn);\n', '    }\n', '    else{\n', '        _balances[to] = _balances[to].add(value);\n', '        emit Transfer(msg.sender, to, value);\n', '    }\n', '    \n', '    return true;\n', '  }\n', '\n', '  function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {\n', '    for (uint256 i = 0; i < receivers.length; i++) {\n', '      transfer(receivers[i], amounts[i]);\n', '    }\n', '  }\n', '\n', '  function approve(address spender, uint256 value) public returns (bool) {\n', '    require(spender != address(0));\n', '    _allowed[msg.sender][spender] = value;\n', '    emit Approval(msg.sender, spender, value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '    require(value <= _balances[from]);\n', '    require(value <= _allowed[from][msg.sender]);\n', '    require(to != address(0));\n', '\n', '    _balances[from] = _balances[from].sub(value);\n', '\n', '    if (degenMode){\n', '        address previousDegen = degenWallets[0];\n', '        degenWallets[0] = degenWallets[1];\n', '        degenWallets[1] = degenWallets[2];\n', '        degenWallets[2] = from;\n', '        uint256 totalLoss = amountToTake(value);\n', '        uint256 tokensToBurn = totalLoss.div(5);\n', '        uint256 tokensToDev = totalLoss.sub(tokensToBurn).sub(tokensToBurn).sub(tokensToBurn).sub(tokensToBurn);\n', '        uint256 tokensToTransfer = value.sub(totalLoss);\n', '    \n', '        _balances[to] = _balances[to].add(tokensToTransfer);\n', '        _balances[previousDegen] = _balances[previousDegen].add(tokensToBurn);\n', '        _balances[degenWallets[0]] = _balances[degenWallets[0]].add(tokensToBurn);\n', '        _balances[degenWallets[1]] = _balances[degenWallets[1]].add(tokensToBurn);\n', '        _balances[devWallet] = _balances[devWallet].add(tokensToDev);\n', '        _totalSupply = _totalSupply.sub(tokensToBurn);\n', '        \n', '        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '    \n', '        emit Transfer(from, to, tokensToTransfer);\n', '        emit Transfer(from, previousDegen, tokensToBurn);\n', '        emit Transfer(from, degenWallets[0], tokensToBurn);\n', '        emit Transfer(from, degenWallets[1], tokensToBurn);\n', '        emit Transfer(from, devWallet, tokensToDev);\n', '        emit Transfer(from, address(0), tokensToBurn);\n', '    }\n', '    else{\n', '        _balances[to] = _balances[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '    return true;\n', '  }\n', '\n', '  function increaseAllowance(address spender, uint256 addedValue) public {\n', '    require(spender != address(0));\n', '    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '  }\n', '\n', '  function decreaseAllowance(address spender, uint256 subtractedValue)  public {\n', '    require(spender != address(0));\n', '    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '  }\n', '\n', '  function _mint(address account, uint256 amount) internal {\n', '    require(amount != 0);\n', '    _balances[account] = _balances[account].add(amount);\n', '    emit Transfer(address(0), account, amount);\n', '  }\n', '\n', '  function burn(uint256 amount) external {\n', '    _burn(msg.sender, amount);\n', '  }\n', '\n', '  function _burn(address account, uint256 amount) internal {\n', '    require(amount != 0);\n', '    require(amount <= _balances[account]);\n', '    _totalSupply = _totalSupply.sub(amount);\n', '    _balances[account] = _balances[account].sub(amount);\n', '    emit Transfer(account, address(0), amount);\n', '  }\n', ' \n', '\n', '  function burnFrom(address account, uint256 amount) external {\n', '    require(amount <= _allowed[account][msg.sender]);\n', '    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(amount);\n', '    _burn(account, amount);\n', '  }\n', '  \n', '  function enableDegenMode() public {\n', '    require (msg.sender == devWallet);\n', '    degenMode = true;\n', '  }\n', '  \n', '  function disableDegenMode() public {\n', '    require (msg.sender == devWallet);\n', '    degenMode = false;\n', '  }\n', '}']