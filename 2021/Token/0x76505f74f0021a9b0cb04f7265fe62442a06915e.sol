['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-15\n', '*/\n', '\n', 'pragma solidity 0.8.3;\n', '\n', 'abstract contract ERC20Interface {\n', '  function totalSupply() public view virtual returns (uint);\n', '  function balanceOf(address tokenOwner) public view virtual returns (uint balance);\n', '  function allowance(address tokenOwner, address spender) public view virtual returns (uint remaining);\n', '  function transfer(address payable to, uint tokens) public virtual returns (bool success);\n', '  function approve(address spender, uint tokens) public virtual returns (bool success);\n', '  function transferFrom(address payable from, address payable to, uint tokens) public virtual returns (bool success);\n', '  event Transfer(address indexed from, address indexed to, uint tokens);\n', '  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract SHIToken is ERC20Interface {\n', '  string public symbol;\n', '  string public  name;\n', '  uint8 public decimals;\n', '  uint256 public supply;\n', '  address payable public owner;\n', '  uint256 private _guardCounter;\n', '  address payable public contractAddress;\n', '\n', '  mapping(address => uint) public balances;\n', '  mapping(address => mapping(address => uint)) public allowed;\n', '\n', '  constructor() public {\n', '    symbol = "SHIT";\n', '    name = "SHIToken (SHIT token)";\n', '    decimals = 18;\n', '    supply = 1000000000e18;\n', '    owner = payable(msg.sender);\n', '    _guardCounter = 1;\n', '    balances[owner] = supply;\n', '    contractAddress = payable(address(this));\n', '\n', '    emit Transfer(address(0), owner, supply);\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  modifier nonReentrancyGaurd() {\n', '    _guardCounter += 1;\n', '    uint256 localCounter = _guardCounter;\n', '    _;\n', '    require(localCounter == _guardCounter);\n', '  }\n', '\n', '  function totalSupply() public override view returns (uint) {\n', '    return supply - balances[owner];\n', '  }\n', '\n', '\n', '  function balanceOf(address tokenOwner) public view override returns (uint balance) {\n', '    return balances[tokenOwner];\n', '  }\n', '\n', '  function transfer(address payable to, uint tokens) public override returns (bool success) {\n', '    require(tokens <= balances[msg.sender]);\n', '    balances[msg.sender] = balances[msg.sender] - tokens;\n', '    balances[to] = balances[to] + tokens;\n', '    emit Transfer(msg.sender, to, tokens);\n', '    return true;\n', '  }\n', '\n', '  function approve(address spender, uint tokens) public override returns (bool success) {\n', '    //prevent front-running attach\n', '    require(tokens ==0 || allowed[msg.sender][spender]==0);\n', '    allowed[msg.sender][spender] = tokens;\n', '    emit Approval(msg.sender, spender, tokens);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address payable from, address payable to, uint tokens) public override returns (bool success) {\n', '    require(tokens <= balances[from]);\n', '    require(tokens <= allowed[from][msg.sender]);\n', '    balances[from] = balances[from] - tokens;\n', '    allowed[from][msg.sender] = allowed[from][msg.sender] - tokens;\n', '    balances[msg.sender] = balances[msg.sender] - tokens;\n', '    balances[to] = balances[to] + tokens;\n', '\n', '    emit Transfer(from, to, tokens);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address tokenOwner, address spender) public view override returns (uint remaining) {\n', '    return allowed[tokenOwner][spender];\n', '  }\n', '\n', '  fallback() external payable {\n', '    revert();\n', '  }\n', '\n', '  function getContractBalance() public view returns(uint) {\n', '    uint256 balance = contractAddress.balance;\n', '    return balance;\n', '  }\n', '\n', '  function transferBalance() onlyOwner() public {\n', '    owner.transfer(address(this).balance);\n', '  }\n', '}']