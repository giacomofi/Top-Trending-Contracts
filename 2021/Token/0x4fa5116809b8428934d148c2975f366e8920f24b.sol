['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-24\n', '*/\n', '\n', '// SPDX-License-Identifier: UNLICENSED\n', '// @title Meowshi 🐈 🍣 🍱\n', '// @author Gatoshi Nyakamoto\n', '\n', 'pragma solidity 0.8.4;\n', '\n', '// File @boringcrypto/boring-solidity/contracts/[email\xa0protected]\n', '// License-Identifier: MIT\n', '\n', '/// @dev Adapted for Meowshi.\n', 'contract Domain {\n', '    string constant EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA = "\\x19\\x01"; // see https://eips.ethereum.org/EIPS/eip-191\n', '    bytes32 constant DOMAIN_SEPARATOR_SIGNATURE_HASH = keccak256("EIP712Domain(uint256 chainId,address verifyingContract)");\n', '    bytes32 immutable _DOMAIN_SEPARATOR;\n', '    uint256 immutable DOMAIN_SEPARATOR_CHAIN_ID;\n', '\n', '    constructor() {\n', '        uint256 chainId;\n', '        assembly { chainId := chainid() }\n', '        _DOMAIN_SEPARATOR = _calculateDomainSeparator(DOMAIN_SEPARATOR_CHAIN_ID = chainId);\n', '    }\n', '    \n', '    /// @dev Calculate the DOMAIN_SEPARATOR.\n', '    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\n', '        return keccak256(abi.encode(DOMAIN_SEPARATOR_SIGNATURE_HASH, chainId, address(this)));\n', '    }\n', '    \n', '    /// @dev Return the DOMAIN_SEPARATOR.\n', '    function DOMAIN_SEPARATOR() public view returns (bytes32) {\n', '        uint256 chainId;\n', '        assembly { chainId := chainid() }\n', '        return chainId == DOMAIN_SEPARATOR_CHAIN_ID ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(chainId);\n', '    }\n', '    \n', '    function _getDigest(bytes32 dataHash) internal view returns (bytes32 digest) {\n', '        digest = keccak256(abi.encodePacked(EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA, DOMAIN_SEPARATOR(), dataHash));\n', '    }\n', '}\n', '\n', '// File @boringcrypto/boring-solidity/contracts/[email\xa0protected]\n', '// License-Identifier: MIT\n', '\n', '/// @dev Adapted for Meowshi.\n', 'contract ERC20 is Domain {\n', '    /// @dev keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)").\n', '    bytes32 constant PERMIT_SIGNATURE_HASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n', '    /// @notice owner > spender > allowance mapping.\n', '    mapping(address => mapping(address => uint256)) public allowance;\n', '    /// @notice owner > balance mapping.\n', '    mapping(address => uint256) public balanceOf;\n', '    /// @notice owner > nonce mapping used in {permit}.\n', '    mapping(address => uint256) public nonces;\n', '    \n', '    event Approval(address indexed owner, address indexed spender, uint256 amount);\n', '    event Transfer(address indexed from, address indexed to, uint256 amount);\n', '\n', '    /// @notice Approves `amount` from msg.sender to be spent by `spender`.\n', "    /// @param spender Address of the party that can draw tokens from msg.sender's account.\n", '    /// @param amount The maximum collective `amount` that `spender` can draw.\n', "    /// @return (bool) Returns 'true' if succeeded.\n", '    function approve(address spender, uint256 amount) external returns (bool) {\n', '        allowance[msg.sender][spender] = amount;\n', '        emit Approval(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /// @notice Approves `amount` from `owner` to be spent by `spender` using the EIP-2612 method.\n', '    /// @param owner Address of the `owner`.\n', '    /// @param spender The address of the `spender` that gets approved to draw from `owner`.\n', '    /// @param amount The maximum collective `amount` that `spender` can draw.\n', '    /// @param deadline This permit must be redeemed before this deadline (UTC timestamp in seconds).\n', '    function permit(\n', '        address owner,\n', '        address spender,\n', '        uint256 amount,\n', '        uint256 deadline,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external {\n', '        require(owner != address(0), "ERC20: Owner cannot be 0");\n', '        require(block.timestamp < deadline, "ERC20: Expired");\n', '        require(ecrecover(_getDigest(keccak256(abi.encode(PERMIT_SIGNATURE_HASH, owner, spender, amount, nonces[owner]++, deadline))), v, r, s) ==\n', '                owner, "ERC20: Invalid Signature");\n', '        allowance[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '    \n', '    /// @notice Transfers `amount` tokens from `msg.sender` to `to`.\n', '    /// @param to The address to move tokens `to`.\n', '    /// @param amount The token `amount` to move.\n', "    /// @return (bool) Returns 'true' if succeeded.\n", '    function transfer(address to, uint256 amount) external returns (bool) {\n', '        balanceOf[msg.sender] -= amount; \n', '        balanceOf[to] += amount;\n', '        emit Transfer(msg.sender, to, amount);\n', '        return true;\n', '    }\n', '\n', '    /// @notice Transfers `amount` tokens from `from` to `to`. Caller needs approval from `from`.\n', '    /// @param from Address to draw tokens `from`.\n', '    /// @param to The address to move tokens `to`.\n', '    /// @param amount The token `amount` to move.\n', "    /// @return (bool) Returns 'true' if succeeded.\n", '    function transferFrom(address from, address to, uint256 amount) external returns (bool) {\n', '        if (allowance[from][msg.sender] != type(uint256).max) allowance[from][msg.sender] -= amount;\n', '        balanceOf[from] -= amount;\n', '        balanceOf[to] += amount; \n', '        emit Transfer(from, to, amount);\n', '        return true;\n', '    }\n', '}\n', '\n', '// File @boringcrypto/boring-solidity/contracts/[email\xa0protected]\n', '// License-Identifier: MIT\n', '\n', '/// @dev Adapted for Meowshi.\n', 'contract BaseBoringBatchable {\n', '    /// @dev Helper function to extract a useful revert message from a failed call.\n', '    function _getRevertMsg(bytes memory _returnData) private pure returns (string memory) {\n', '        if (_returnData.length < 68) return "Transaction reverted silently"; // if length is less than 68, tx failed w/o revert message\n', '        assembly { _returnData := add(_returnData, 0x04) } return abi.decode(_returnData, (string)); // all that remains is the revert string\n', '    }\n', '\n', '    /// @notice Allows batched call to self (this contract).\n', '    /// @param calls An array of inputs for each call.\n', "    /// @param revertOnFail If 'true', reverts after a failed call and stops further calls.\n", '    function batch(bytes[] calldata calls, bool revertOnFail) external {\n', '        for (uint256 i = 0; i < calls.length; i++) {\n', '            (bool success, bytes memory result) = address(this).delegatecall(calls[i]);\n', '            if (!success && revertOnFail) revert(_getRevertMsg(result));\n', '        }\n', '    }\n', '}\n', '\n', '/// @notice Interface for depositing into and withdrawing from BentoBox vault.\n', 'interface IERC20{} interface IBentoBoxBasic {\n', '    function deposit( \n', '        IERC20 token_,\n', '        address from,\n', '        address to,\n', '        uint256 amount,\n', '        uint256 share\n', '    ) external payable returns (uint256 amountOut, uint256 shareOut);\n', '\n', '    function withdraw(\n', '        IERC20 token_,\n', '        address from,\n', '        address to,\n', '        uint256 amount,\n', '        uint256 share\n', '    ) external returns (uint256 amountOut, uint256 shareOut);\n', '}\n', '\n', '/// @notice Interface for depositing into and withdrawing from SushiBar.\n', 'interface ISushiBar { \n', '    function balanceOf(address account) external view returns (uint256);\n', '    function enter(uint256 amount) external;\n', '    function leave(uint256 share) external;\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '}\n', '\n', '/// @notice Meowshi takes SUSHI / xSUSHI to mint NYAN tokens that can be burned to claim SUSHI / xSUSHI from BENTO with yields.\n', '//  ៱˳_˳៱   ∫\n', 'contract Meowshi is ERC20, BaseBoringBatchable {\n', '    IBentoBoxBasic constant bentoBox = IBentoBoxBasic(0xF5BCE5077908a1b7370B9ae04AdC565EBd643966); // BENTO vault contract (multinet)\n', '    ISushiBar constant sushiToken = ISushiBar(0x6B3595068778DD592e39A122f4f5a5cF09C90fE2); // SUSHI token contract (mainnet)\n', '    address constant sushiBar = 0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272; // xSUSHI token contract for staking SUSHI (mainnet)\n', '    string public constant name = "Meowshi";\n', '    string public constant symbol = "NYAN";\n', '    uint8 public constant decimals = 18;\n', '    uint256 constant multiplier = 10000; // 1 xSUSHI BENTO share = 10,000 NYAN\n', '    uint256 public totalSupply;\n', '    \n', '    constructor() {\n', '        sushiToken.approve(sushiBar, type(uint256).max); // max {approve} xSUSHI to draw SUSHI from this contract\n', '        ISushiBar(sushiBar).approve(address(bentoBox), type(uint256).max); // max {approve} BENTO to draw xSUSHI from this contract\n', '    }\n', '    \n', '    // **** xSUSHI\n', '    /// @notice Enter Meowshi. Deposit xSUSHI `amount`. Mint NYAN for `to`.\n', '    function nyan(address to, uint256 amount) external returns (uint256 shares) {\n', '        ISushiBar(sushiBar).transferFrom(msg.sender, address(bentoBox), amount); // forward to BENTO for skim\n', '        (, shares) = bentoBox.deposit(IERC20(sushiBar), address(bentoBox), address(this), amount, 0);\n', '        nyanMint(to, shares * multiplier);\n', '    }\n', '\n', '    /// @notice Leave Meowshi. Burn NYAN `amount`. Claim xSUSHI for `to`.\n', '    function unyan(address to, uint256 amount) external returns (uint256 amountOut) {\n', '        nyanBurn(amount);\n', '        (amountOut, ) = bentoBox.withdraw(IERC20(sushiBar), address(this), to, 0, amount / multiplier);\n', '    }\n', '    \n', '    // **** SUSHI\n', '    /// @notice Enter Meowshi. Deposit SUSHI `amount`. Mint NYAN for `to`.\n', '    function nyanSushi(address to, uint256 amount) external returns (uint256 shares) {\n', '        sushiToken.transferFrom(msg.sender, address(this), amount);\n', '        ISushiBar(sushiBar).enter(amount);\n', '        (, shares) = bentoBox.deposit(IERC20(sushiBar), address(this), address(this), ISushiBar(sushiBar).balanceOf(address(this)), 0);\n', '        nyanMint(to, shares * multiplier);\n', '    }\n', '\n', '    /// @notice Leave Meowshi. Burn NYAN `amount`. Claim SUSHI for `to`.\n', '    function unyanSushi(address to, uint256 amount) external returns (uint256 amountOut) {\n', '        nyanBurn(amount);\n', '        (amountOut, ) = bentoBox.withdraw(IERC20(sushiBar), address(this), address(this), 0, amount / multiplier);\n', '        ISushiBar(sushiBar).leave(amountOut);\n', '        sushiToken.transfer(to, sushiToken.balanceOf(address(this))); \n', '    }\n', '\n', '    // **** SUPPLY MGMT\n', '    /// @notice Internal mint function for *nyan*.\n', '    function nyanMint(address to, uint256 amount) private {\n', '        balanceOf[to] += amount;\n', '        totalSupply += amount;\n', '        emit Transfer(address(0), to, amount);\n', '    }\n', '    \n', '    /// @notice Internal burn function for *unyan*.\n', '    function nyanBurn(uint256 amount) private {\n', '        balanceOf[msg.sender] -= amount;\n', '        totalSupply -= amount;\n', '        emit Transfer(msg.sender, address(0), amount);\n', '    }\n', '}']