['pragma solidity ^0.6.0;\n', '\n', "import './SafeMath.sol';\n", "import './ERC20Interface.sol';\n", "import './Owned.sol';\n", '\n', 'contract P3RPToken is ERC20Interface, Owned {\n', '    using SafeMath for uint256;\n', '    string public symbol = "P3RP";\n', '    string public  name = "P3RPETUAL PROTOCOL";\n', '    uint256 public decimals = 18;\n', '    uint256 private maxCapSupply = 2000000 * 10**(decimals); // 200,000 \n', '    uint256 _totalSupply = 100000 * 10 ** (decimals); // 100,000\n', '    address pool;\n', '    \n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '    \n', '    constructor() public {\n', '        balances[owner] = balances[owner].add(_totalSupply);\n', '        emit Transfer(address(0),owner, _totalSupply);\n', '    }\n', '    \n', '    function SetPool(address _address) external onlyOwner{\n', '        require(_address != address(0), "Invalid address");\n', '        pool = _address;\n', '    }\n', '    \n', '    function MintTokens(uint256 _amount, address _beneficiary) public returns(bool){\n', '        require(msg.sender == pool);\n', '        require(_beneficiary != address(0), "Invalid address");\n', '        require(_totalSupply.add(_amount) <= maxCapSupply, "exceeds max cap supply 2 million");\n', '        _totalSupply = _totalSupply.add(_amount);\n', '        \n', '        balances[_beneficiary] = balances[_beneficiary].add(_amount);\n', '        \n', '        emit Transfer(address(0),_beneficiary, _amount);\n', '        return true;\n', '    }\n', '    \n', '    function BurnTokens(uint256 _amount) external {\n', '        _burn(_amount, msg.sender);\n', '    }\n', '\n', '    function _burn(uint256 _amount, address _account) internal {\n', '        require(balances[_account] >= _amount, "insufficient account balance");\n', '        _totalSupply = _totalSupply.sub(_amount);\n', '        balances[_account] = balances[_account].sub(_amount);\n', '        emit Transfer(_account, address(0), _amount);\n', '    }\n', '    \n', '    function totalSupply() public override view returns (uint256){\n', '       return _totalSupply; \n', '    }\n', '    \n', '    function balanceOf(address tokenOwner) public override view returns (uint256 balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    function transfer(address to, uint256 tokens) public override returns  (bool success) {\n', '        require(address(to) != address(0));\n', '        require(balances[msg.sender] >= tokens );\n', '        require(balances[to].add(tokens) >= balances[to]);\n', '            \n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(msg.sender,to,tokens);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public override returns (bool) {\n', '        _approve(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 tokens) public override returns (bool success){\n', '        require(tokens <= allowed[from][msg.sender]); //check allowance\n', '        require(balances[from] >= tokens);\n', '        require(from != address(0), "Invalid address");\n', '        require(to != address(0), "Invalid address");\n', '        \n', '        balances[from] = balances[from].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        emit Transfer(from,to,tokens);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address tokenOwner, address spender) public override view returns (uint256 remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '    \n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, allowed[msg.sender][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, allowed[msg.sender][spender].sub(subtractedValue));\n', '        return true;\n', '    }\n', '    \n', '    function _approve(address owner, address spender, uint256 value) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        allowed[owner][spender] = value;\n', '        emit Approval(owner, spender, value);\n', '    }\n', '}']