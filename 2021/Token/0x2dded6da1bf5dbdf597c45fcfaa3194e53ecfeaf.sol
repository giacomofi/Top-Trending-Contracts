['# @version 0.2.8\n', '"""\n', '@title Curve IronBank Pool\n', '@author Curve.Fi\n', '@license Copyright (c) Curve.Fi, 2021 - all rights reserved\n', '@notice Pool for swapping between cyTokens (cyDAI, cyUSDC, cyUSDT)\n', '"""\n', '\n', '# External Contracts\n', 'interface cyToken:\n', '    def transfer(_to: address, _value: uint256) -> bool: nonpayable\n', '    def transferFrom(_from: address, _to: address, _value: uint256) -> bool: nonpayable\n', '    def mint(mintAmount: uint256) -> uint256: nonpayable\n', '    def redeem(redeemTokens: uint256) -> uint256: nonpayable\n', '    def exchangeRateStored() -> uint256: view\n', '    def exchangeRateCurrent() -> uint256: nonpayable\n', '    def supplyRatePerBlock() -> uint256: view\n', '    def accrualBlockNumber() -> uint256: view\n', '\n', 'interface CurveToken:\n', '    def mint(_to: address, _value: uint256) -> bool: nonpayable\n', '    def burnFrom(_to: address, _value: uint256) -> bool: nonpayable\n', '\n', 'interface ERC20:\n', '    def transfer(_to: address, _value: uint256): nonpayable\n', '    def transferFrom(_from: address, _to: address, _value: uint256): nonpayable\n', '    def totalSupply() -> uint256: view\n', '    def balanceOf(_addr: address) -> uint256: view\n', '\n', '# Events\n', 'event TokenExchange:\n', '    buyer: indexed(address)\n', '    sold_id: int128\n', '    tokens_sold: uint256\n', '    bought_id: int128\n', '    tokens_bought: uint256\n', '\n', 'event TokenExchangeUnderlying:\n', '    buyer: indexed(address)\n', '    sold_id: int128\n', '    tokens_sold: uint256\n', '    bought_id: int128\n', '    tokens_bought: uint256\n', '\n', 'event AddLiquidity:\n', '    provider: indexed(address)\n', '    token_amounts: uint256[N_COINS]\n', '    fees: uint256[N_COINS]\n', '    invariant: uint256\n', '    token_supply: uint256\n', '\n', 'event RemoveLiquidity:\n', '    provider: indexed(address)\n', '    token_amounts: uint256[N_COINS]\n', '    fees: uint256[N_COINS]\n', '    token_supply: uint256\n', '\n', 'event RemoveLiquidityOne:\n', '    provider: indexed(address)\n', '    token_amount: uint256\n', '    coin_amount: uint256\n', '\n', 'event RemoveLiquidityImbalance:\n', '    provider: indexed(address)\n', '    token_amounts: uint256[N_COINS]\n', '    fees: uint256[N_COINS]\n', '    invariant: uint256\n', '    token_supply: uint256\n', '\n', 'event CommitNewAdmin:\n', '    deadline: indexed(uint256)\n', '    admin: indexed(address)\n', '\n', 'event NewAdmin:\n', '    admin: indexed(address)\n', '\n', 'event CommitNewFee:\n', '    deadline: indexed(uint256)\n', '    fee: uint256\n', '    admin_fee: uint256\n', '\n', 'event NewFee:\n', '    fee: uint256\n', '    admin_fee: uint256\n', '\n', 'event RampA:\n', '    old_A: uint256\n', '    new_A: uint256\n', '    initial_time: uint256\n', '    future_time: uint256\n', '\n', 'event StopRampA:\n', '    A: uint256\n', '    t: uint256\n', '\n', '\n', '# These constants must be set prior to compiling\n', 'N_COINS: constant(int128) = 3\n', 'PRECISION_MUL: constant(uint256[N_COINS]) = [1, 1000000000000, 1000000000000]\n', '\n', '# fixed constants\n', 'FEE_DENOMINATOR: constant(uint256) = 10 ** 10\n', 'PRECISION: constant(uint256) = 10 ** 18  # The precision to convert to\n', '\n', 'MAX_ADMIN_FEE: constant(uint256) = 10 * 10 ** 9\n', 'MAX_FEE: constant(uint256) = 5 * 10 ** 9\n', 'MAX_A: constant(uint256) = 10 ** 6\n', 'MAX_A_CHANGE: constant(uint256) = 10\n', '\n', 'ADMIN_ACTIONS_DELAY: constant(uint256) = 3 * 86400\n', 'MIN_RAMP_TIME: constant(uint256) = 86400\n', '\n', 'coins: public(address[N_COINS])\n', 'underlying_coins: public(address[N_COINS])\n', 'balances: public(uint256[N_COINS])\n', '\n', 'previous_balances: public(uint256[N_COINS])\n', 'block_timestamp_last: public(uint256)\n', '\n', 'fee: public(uint256)  # fee * 1e10\n', 'admin_fee: public(uint256)  # admin_fee * 1e10\n', '\n', 'owner: public(address)\n', 'lp_token: public(address)\n', '\n', 'A_PRECISION: constant(uint256) = 100\n', 'initial_A: public(uint256)\n', 'future_A: public(uint256)\n', 'initial_A_time: public(uint256)\n', 'future_A_time: public(uint256)\n', '\n', 'admin_actions_deadline: public(uint256)\n', 'transfer_ownership_deadline: public(uint256)\n', 'future_fee: public(uint256)\n', 'future_admin_fee: public(uint256)\n', 'future_owner: public(address)\n', '\n', 'is_killed: bool\n', 'kill_deadline: uint256\n', 'KILL_DEADLINE_DT: constant(uint256) = 2 * 30 * 86400\n', '\n', '@external\n', 'def __init__(\n', '    _owner: address,\n', '    _coins: address[N_COINS],\n', '    _underlying_coins: address[N_COINS],\n', '    _pool_token: address,\n', '    _A: uint256,\n', '    _fee: uint256,\n', '    _admin_fee: uint256,\n', '):\n', '    """\n', '    @notice Contract constructor\n', '    @param _owner Contract owner address\n', '    @param _coins Addresses of ERC20 contracts of wrapped coins\n', '    @param _underlying_coins Addresses of ERC20 contracts of underlying coins\n', '    @param _pool_token Address of the token representing LP share\n', '    @param _A Amplification coefficient multiplied by n * (n - 1)\n', '    @param _fee Fee to charge for exchanges\n', '    @param _admin_fee Admin fee\n', '    """\n', '    for i in range(N_COINS):\n', '        assert _coins[i] != ZERO_ADDRESS\n', '        assert _underlying_coins[i] != ZERO_ADDRESS\n', '\n', '        # approve underlying coins for infinite transfers\n', '        _response: Bytes[32] = raw_call(\n', '            _underlying_coins[i],\n', '            concat(\n', '                method_id("approve(address,uint256)"),\n', '                convert(_coins[i], bytes32),\n', '                convert(MAX_UINT256, bytes32),\n', '            ),\n', '            max_outsize=32,\n', '        )\n', '        if len(_response) > 0:\n', '            assert convert(_response, bool)\n', '\n', '    self.coins = _coins\n', '    self.underlying_coins = _underlying_coins\n', '    self.initial_A = _A * A_PRECISION\n', '    self.future_A = _A * A_PRECISION\n', '    self.fee = _fee\n', '    self.admin_fee = _admin_fee\n', '    self.owner = _owner\n', '    self.kill_deadline = block.timestamp + KILL_DEADLINE_DT\n', '    self.lp_token = _pool_token\n', '\n', '\n', '@view\n', '@internal\n', 'def _A() -> uint256:\n', '    """\n', '    Handle ramping A up or down\n', '    """\n', '    t1: uint256 = self.future_A_time\n', '    A1: uint256 = self.future_A\n', '\n', '    if block.timestamp < t1:\n', '        A0: uint256 = self.initial_A\n', '        t0: uint256 = self.initial_A_time\n', '        # Expressions in uint256 cannot have negative numbers, thus "if"\n', '        if A1 > A0:\n', '            return A0 + (A1 - A0) * (block.timestamp - t0) / (t1 - t0)\n', '        else:\n', '            return A0 - (A0 - A1) * (block.timestamp - t0) / (t1 - t0)\n', '\n', '    else:  # when t1 == 0 or block.timestamp >= t1\n', '        return A1\n', '\n', '\n', '@view\n', '@external\n', 'def A() -> uint256:\n', '    return self._A() / A_PRECISION\n', '\n', '\n', '@view\n', '@external\n', 'def A_precise() -> uint256:\n', '    return self._A()\n', '\n', '\n', '@view\n', '@internal\n', 'def _stored_rates() -> uint256[N_COINS]:\n', '    # exchangeRateStored * (1 + supplyRatePerBlock * (getBlockNumber - accrualBlockNumber) / 1e18)\n', '    result: uint256[N_COINS] = PRECISION_MUL\n', '    for i in range(N_COINS):\n', '        coin: address = self.coins[i]\n', '        rate: uint256 = cyToken(coin).exchangeRateStored()\n', '        rate += rate * cyToken(coin).supplyRatePerBlock() * (block.number - cyToken(coin).accrualBlockNumber()) / PRECISION\n', '        result[i] *= rate\n', '    return result\n', '\n', '\n', '@internal\n', 'def _update():\n', '    """\n', '    Commits pre-change balances for the previous block\n', '    Can be used to compare against current values for flash loan checks\n', '    """\n', '    if block.timestamp > self.block_timestamp_last:\n', '        self.previous_balances = self.balances\n', '        self.block_timestamp_last = block.timestamp\n', '\n', '\n', '@internal\n', 'def _current_rates() -> uint256[N_COINS]:\n', '    self._update()\n', '    result: uint256[N_COINS] = PRECISION_MUL\n', '    for i in range(N_COINS):\n', '        result[i] *= cyToken(self.coins[i]).exchangeRateCurrent()\n', '    return result\n', '\n', '\n', '@view\n', '@internal\n', 'def _xp(rates: uint256[N_COINS]) -> uint256[N_COINS]:\n', '    result: uint256[N_COINS] = empty(uint256[N_COINS])\n', '    for i in range(N_COINS):\n', '        result[i] = rates[i] * self.balances[i] / PRECISION\n', '    return result\n', '\n', '@pure\n', '@internal\n', 'def get_D(xp: uint256[N_COINS], amp: uint256) -> uint256:\n', '    S: uint256 = 0\n', '    Dprev: uint256 = 0\n', '\n', '    for _x in xp:\n', '        S += _x\n', '    if S == 0:\n', '        return 0\n', '\n', '    D: uint256 = S\n', '    Ann: uint256 = amp * N_COINS\n', '    for _i in range(255):\n', '        D_P: uint256 = D\n', '        for _x in xp:\n', '            D_P = D_P * D / (_x * N_COINS)  # If division by 0, this will be borked: only withdrawal will work. And that is good\n', '        Dprev = D\n', '        D = (Ann * S / A_PRECISION + D_P * N_COINS) * D / ((Ann - A_PRECISION) * D / A_PRECISION + (N_COINS + 1) * D_P)\n', '        # Equality with the precision of 1\n', '        if D > Dprev:\n', '            if D - Dprev <= 1:\n', '                return D\n', '        else:\n', '            if Dprev - D <= 1:\n', '                return D\n', '    # convergence typically occurs in 4 rounds or less, this should be unreachable!\n', '    # if it does happen the pool is borked and LPs can withdraw via `remove_liquidity`\n', '    raise\n', '\n', '\n', '@view\n', '@internal\n', 'def get_D_mem(rates: uint256[N_COINS], _balances: uint256[N_COINS], _amp: uint256) -> uint256:\n', '    xp: uint256[N_COINS] = empty(uint256[N_COINS])\n', '    for i in range(N_COINS):\n', '        xp[i] = rates[i] * _balances[i] / PRECISION\n', '\n', '    return self.get_D(xp, _amp)\n', '\n', '\n', '@view\n', '@external\n', 'def get_virtual_price() -> uint256:\n', '    """\n', '    @notice The current virtual price of the pool LP token\n', '    @dev Useful for calculating profits\n', '    @return LP token virtual price normalized to 1e18\n', '    """\n', '    D: uint256 = self.get_D(self._xp(self._stored_rates()), self._A())\n', '    # D is in the units similar to DAI (e.g. converted to precision 1e18)\n', '    # When balanced, D = n * x_u - total virtual value of the portfolio\n', '    return D * PRECISION / ERC20(self.lp_token).totalSupply()\n', '\n', '\n', '@view\n', '@external\n', 'def calc_token_amount(amounts: uint256[N_COINS], is_deposit: bool) -> uint256:\n', '    """\n', '    @notice Calculate addition or reduction in token supply from a deposit or withdrawal\n', '    @dev This calculation accounts for slippage, but not fees.\n', '         Needed to prevent front-running, not for precise calculations!\n', '    @param amounts Amount of each coin being deposited\n', '    @param is_deposit set True for deposits, False for withdrawals\n', '    @return Expected amount of LP tokens received\n', '    """\n', '    amp: uint256 = self._A()\n', '    rates: uint256[N_COINS] = self._stored_rates()\n', '    _balances: uint256[N_COINS] = self.balances\n', '    D0: uint256 = self.get_D_mem(rates, _balances, amp)\n', '    for i in range(N_COINS):\n', '        _amount: uint256 = amounts[i]\n', '        if is_deposit:\n', '            _balances[i] += _amount\n', '        else:\n', '            _balances[i] -= _amount\n', '    D1: uint256 = self.get_D_mem(rates, _balances, amp)\n', '    token_amount: uint256 = ERC20(self.lp_token).totalSupply()\n', '    diff: uint256 = 0\n', '    if is_deposit:\n', '        diff = D1 - D0\n', '    else:\n', '        diff = D0 - D1\n', '    return diff * token_amount / D0\n', '\n', '\n', '@external\n', "@nonreentrant('lock')\n", 'def add_liquidity(\n', '    _amounts: uint256[N_COINS],\n', '    _min_mint_amount: uint256,\n', '    _use_underlying: bool = False\n', ') -> uint256:\n', '    """\n', '    @notice Deposit coins into the pool\n', '    @param _amounts List of amounts of coins to deposit\n', '    @param _min_mint_amount Minimum amount of LP tokens to mint from the deposit\n', '    @param _use_underlying If True, deposit underlying assets instead of cyTokens\n', '    @return Amount of LP tokens received by depositing\n', '    """\n', '    assert not self.is_killed\n', '\n', '    amp: uint256 = self._A()\n', '    rates: uint256[N_COINS] = self._current_rates()\n', '    _lp_token: address = self.lp_token\n', '    token_supply: uint256 = ERC20(_lp_token).totalSupply()\n', '\n', '    # Initial invariant\n', '    old_balances: uint256[N_COINS] = self.balances\n', '    D0: uint256 = self.get_D_mem(rates, old_balances, amp)\n', '\n', '    # Take coins from the sender\n', '    new_balances: uint256[N_COINS] = old_balances\n', '    amounts: uint256[N_COINS] = empty(uint256[N_COINS])\n', '    for i in range(N_COINS):\n', '        amount: uint256 = _amounts[i]\n', '\n', '        if amount == 0:\n', '            assert token_supply > 0\n', '        else:\n', '            coin: address = self.coins[i]\n', '            if _use_underlying:\n', '                ERC20(self.underlying_coins[i]).transferFrom(msg.sender, self, amount)\n', '                before: uint256 = ERC20(coin).balanceOf(self)\n', '                assert cyToken(coin).mint(amount) == 0\n', '                amount = ERC20(coin).balanceOf(self) - before\n', '            else:\n', '                assert cyToken(coin).transferFrom(msg.sender, self, amount)\n', '            amounts[i] = amount\n', '            new_balances[i] += amount\n', '\n', '    # Invariant after change\n', '    D1: uint256 = self.get_D_mem(rates, new_balances, amp)\n', '    assert D1 > D0\n', '\n', '    # We need to recalculate the invariant accounting for fees\n', "    # to calculate fair user's share\n", '    fees: uint256[N_COINS] = empty(uint256[N_COINS])\n', '    mint_amount: uint256 = 0\n', '    if token_supply != 0:\n', '        # Only account for fees if we are not the first to deposit\n', '        _fee: uint256 = self.fee * N_COINS / (4 * (N_COINS - 1))\n', '        _admin_fee: uint256 = self.admin_fee\n', '        difference: uint256 = 0\n', '        for i in range(N_COINS):\n', '            new_balance: uint256 = new_balances[i]\n', '            ideal_balance: uint256 = D1 * old_balances[i] / D0\n', '            if ideal_balance > new_balance:\n', '                difference = ideal_balance - new_balance\n', '            else:\n', '                difference = new_balance - ideal_balance\n', '            fees[i] = _fee * difference / FEE_DENOMINATOR\n', '            self.balances[i] = new_balance - (fees[i] * _admin_fee / FEE_DENOMINATOR)\n', '            new_balances[i] -= fees[i]\n', '        D2: uint256 = self.get_D_mem(rates, new_balances, amp)\n', '        mint_amount = token_supply * (D2 - D0) / D0\n', '    else:\n', '        self.balances = new_balances\n', '        mint_amount = D1  # Take the dust if there was any\n', '\n', '    assert mint_amount >= _min_mint_amount, "Slippage screwed you"\n', '\n', '    # Mint pool tokens\n', '    CurveToken(_lp_token).mint(msg.sender, mint_amount)\n', '\n', '    log AddLiquidity(msg.sender, amounts, fees, D1, token_supply + mint_amount)\n', '\n', '    return mint_amount\n', '\n', '\n', '@view\n', '@internal\n', 'def get_y(i: int128, j: int128, x: uint256, xp_: uint256[N_COINS]) -> uint256:\n', '    # x in the input is converted to the same price/precision\n', '\n', '    assert i != j       # dev: same coin\n', '    assert j >= 0       # dev: j below zero\n', '    assert j < N_COINS  # dev: j above N_COINS\n', '\n', '    # should be unreachable, but good for safety\n', '    assert i >= 0\n', '    assert i < N_COINS\n', '\n', '    A_: uint256 = self._A()\n', '    D: uint256 = self.get_D(xp_, A_)\n', '    Ann: uint256 = A_ * N_COINS\n', '    c: uint256 = D\n', '    S_: uint256 = 0\n', '    _x: uint256 = 0\n', '    y_prev: uint256 = 0\n', '\n', '    for _i in range(N_COINS):\n', '        if _i == i:\n', '            _x = x\n', '        elif _i != j:\n', '            _x = xp_[_i]\n', '        else:\n', '            continue\n', '        S_ += _x\n', '        c = c * D / (_x * N_COINS)\n', '    c = c * D * A_PRECISION / (Ann * N_COINS)\n', '    b: uint256 = S_ + D * A_PRECISION / Ann  # - D\n', '    y: uint256 = D\n', '    for _i in range(255):\n', '        y_prev = y\n', '        y = (y*y + c) / (2 * y + b - D)\n', '        # Equality with the precision of 1\n', '        if y > y_prev:\n', '            if y - y_prev <= 1:\n', '                return y\n', '        else:\n', '            if y_prev - y <= 1:\n', '                return y\n', '    raise\n', '\n', '\n', '@view\n', '@external\n', 'def get_dy(i: int128, j: int128, dx: uint256) -> uint256:\n', '    # dx and dy in c-units\n', '    rates: uint256[N_COINS] = self._stored_rates()\n', '    xp: uint256[N_COINS] = self._xp(rates)\n', '\n', '    x: uint256 = xp[i] + dx * rates[i] / PRECISION\n', '    y: uint256 = self.get_y(i, j, x, xp)\n', '    dy: uint256 = xp[j] - y - 1\n', '    return (dy - (self.fee * dy / FEE_DENOMINATOR)) * PRECISION / rates[j]\n', '\n', '\n', '@view\n', '@external\n', 'def get_dx(i: int128, j: int128, dy: uint256) -> uint256:\n', '    # dx and dy in c-units\n', '    rates: uint256[N_COINS] = self._stored_rates()\n', '    xp: uint256[N_COINS] = self._xp(rates)\n', '\n', '    y: uint256 = xp[j] - (dy * FEE_DENOMINATOR / (FEE_DENOMINATOR - self.fee)) * rates[j] / PRECISION\n', '    x: uint256 = self.get_y(j, i, y, xp)\n', '    return (x - xp[i]) * PRECISION / rates[i]\n', '\n', '\n', '@view\n', '@external\n', 'def get_dy_underlying(i: int128, j: int128, dx: uint256) -> uint256:\n', '    # dx and dy in underlying units\n', '    rates: uint256[N_COINS] = self._stored_rates()\n', '    xp: uint256[N_COINS] = self._xp(rates)\n', '    precisions: uint256[N_COINS] = PRECISION_MUL\n', '\n', '    x: uint256 = xp[i] + dx * precisions[i]\n', '    dy: uint256 = xp[j] - self.get_y(i, j, x, xp) - 1\n', '    _fee: uint256 = self.fee * dy / FEE_DENOMINATOR\n', '    return (dy - _fee) / precisions[j]\n', '\n', '\n', '@external\n', '@view\n', 'def get_dx_underlying(i: int128, j: int128, dy: uint256) -> uint256:\n', '    # dx and dy in underlying units\n', '    rates: uint256[N_COINS] = self._stored_rates()\n', '    xp: uint256[N_COINS] = self._xp(rates)\n', '    precisions: uint256[N_COINS] = PRECISION_MUL\n', '\n', '    y: uint256 = xp[j] - (dy * FEE_DENOMINATOR / (FEE_DENOMINATOR - self.fee)) * precisions[j]\n', '    return (self.get_y(j, i, y, xp) - xp[i]) / precisions[i]\n', '\n', '@internal\n', 'def _exchange(i: int128, j: int128, dx: uint256) -> uint256:\n', '    assert not self.is_killed\n', '    # dx and dy are in cy tokens\n', '\n', '    rates: uint256[N_COINS] = self._current_rates()\n', '    old_balances: uint256[N_COINS] = self.balances\n', '\n', '    xp: uint256[N_COINS] = empty(uint256[N_COINS])\n', '    for k in range(N_COINS):\n', '        xp[k] = rates[k] * old_balances[k] / PRECISION\n', '\n', '    x: uint256 = xp[i] + dx * rates[i] / PRECISION\n', '    dy: uint256 = xp[j] - self.get_y(i, j, x, xp) - 1  # -1 just in case there were some rounding errors\n', '    dy_fee: uint256 = dy * self.fee / FEE_DENOMINATOR\n', '\n', '    dy = (dy - dy_fee) * PRECISION / rates[j]\n', '    dy_admin_fee: uint256 = dy_fee * self.admin_fee / FEE_DENOMINATOR\n', '    dy_admin_fee = dy_admin_fee * PRECISION / rates[j]\n', '\n', '    self.balances[i] = old_balances[i] + dx\n', '    self.balances[j] = old_balances[j] - dy - dy_admin_fee\n', '\n', '    return dy\n', '\n', '\n', '@external\n', "@nonreentrant('lock')\n", 'def exchange(i: int128, j: int128, dx: uint256, min_dy: uint256) -> uint256:\n', '    """\n', '    @notice Perform an exchange between two coins\n', '    @dev Index values can be found via the `coins` public getter method\n', '    @param i Index value for the coin to send\n', '    @param j Index valie of the coin to recieve\n', '    @param dx Amount of `i` being exchanged\n', '    @param min_dy Minimum amount of `j` to receive\n', '    @return Actual amount of `j` received\n', '    """\n', '    dy: uint256 = self._exchange(i, j, dx)\n', '    assert dy >= min_dy, "Too few coins in result"\n', '\n', '    assert cyToken(self.coins[i]).transferFrom(msg.sender, self, dx)\n', '    assert cyToken(self.coins[j]).transfer(msg.sender, dy)\n', '\n', '    log TokenExchange(msg.sender, i, dx, j, dy)\n', '\n', '    return dy\n', '\n', '\n', '@external\n', "@nonreentrant('lock')\n", 'def exchange_underlying(i: int128, j: int128, dx: uint256, min_dy: uint256) -> uint256:\n', '    """\n', '    @notice Perform an exchange between two underlying coins\n', '    @dev Index values can be found via the `underlying_coins` public getter method\n', '    @param i Index value for the underlying coin to send\n', '    @param j Index valie of the underlying coin to recieve\n', '    @param dx Amount of `i` being exchanged\n', '    @param min_dy Minimum amount of `j` to receive\n', '    @return Actual amount of `j` received\n', '    """\n', '\n', '    ERC20(self.underlying_coins[i]).transferFrom(msg.sender, self, dx)\n', '\n', '    coin: address = self.coins[i]\n', '\n', '    dx_: uint256 = ERC20(coin).balanceOf(self)\n', '    assert cyToken(coin).mint(dx) == 0\n', '    dx_ = ERC20(coin).balanceOf(self) - dx_\n', '    dy_: uint256 = self._exchange(i, j, dx_)\n', '\n', '    assert cyToken(self.coins[j]).redeem(dy_) == 0\n', '\n', '    underlying: address = self.underlying_coins[j]\n', '\n', '    dy: uint256 = ERC20(underlying).balanceOf(self)\n', '    assert dy >= min_dy, "Too few coins in result"\n', '\n', '    ERC20(underlying).transfer(msg.sender, dy)\n', '\n', '    log TokenExchangeUnderlying(msg.sender, i, dx, j, dy)\n', '\n', '    return dy\n', '\n', '\n', '@external\n', "@nonreentrant('lock')\n", 'def remove_liquidity(\n', '    _amount: uint256,\n', '    _min_amounts: uint256[N_COINS],\n', '    _use_underlying: bool = False\n', ') -> uint256[N_COINS]:\n', '    """\n', '    @notice Withdraw coins from the pool\n', '    @dev Withdrawal amounts are based on current deposit ratios\n', '    @param _amount Quantity of LP tokens to burn in the withdrawal\n', '    @param _min_amounts Minimum amounts of underlying coins to receive\n', '    @param _use_underlying If True, withdraw underlying assets instead of cyTokens\n', '    @return List of amounts of coins that were withdrawn\n', '    """\n', '    self._update()\n', '    _lp_token: address = self.lp_token\n', '    total_supply: uint256 = ERC20(_lp_token).totalSupply()\n', '    amounts: uint256[N_COINS] = empty(uint256[N_COINS])\n', '\n', '    for i in range(N_COINS):\n', '        _balance: uint256 = self.balances[i]\n', '        value: uint256 = _balance * _amount / total_supply\n', '        self.balances[i] = _balance - value\n', '        amounts[i] = value\n', '\n', '        coin: address = self.coins[i]\n', '        if _use_underlying:\n', '            assert cyToken(coin).redeem(value) == 0\n', '            underlying: address = self.underlying_coins[i]\n', '            value = ERC20(underlying).balanceOf(self)\n', '            ERC20(underlying).transfer(msg.sender, value)\n', '        else:\n', '            assert cyToken(coin).transfer(msg.sender, value)\n', '\n', '        assert value >= _min_amounts[i]\n', '\n', '    CurveToken(_lp_token).burnFrom(msg.sender, _amount)  # Will raise if not enough\n', '\n', '    log RemoveLiquidity(msg.sender, amounts, empty(uint256[N_COINS]), total_supply - _amount)\n', '\n', '    return amounts\n', '\n', '\n', '@external\n', "@nonreentrant('lock')\n", 'def remove_liquidity_imbalance(\n', '    _amounts: uint256[N_COINS],\n', '    _max_burn_amount: uint256,\n', '    _use_underlying: bool = False\n', ') -> uint256:\n', '    """\n', '    @notice Withdraw coins from the pool in an imbalanced amount\n', '    @param _amounts List of amounts of underlying coins to withdraw\n', '    @param _max_burn_amount Maximum amount of LP token to burn in the withdrawal\n', '    @param _use_underlying If True, withdraw underlying assets instead of cyTokens\n', '    @return Actual amount of the LP token burned in the withdrawal\n', '    """\n', '    assert not self.is_killed\n', '\n', '    amp: uint256 = self._A()\n', '    rates: uint256[N_COINS] = self._current_rates()\n', '    old_balances: uint256[N_COINS] = self.balances\n', '    D0: uint256 = self.get_D_mem(rates, old_balances, amp)\n', '\n', '    new_balances: uint256[N_COINS] = old_balances\n', '    amounts: uint256[N_COINS] = _amounts\n', '\n', '    precisions: uint256[N_COINS] = PRECISION_MUL\n', '    for i in range(N_COINS):\n', '        amount: uint256 = amounts[i]\n', '        if amount > 0:\n', '            if _use_underlying:\n', '                amount = amount * precisions[i] * PRECISION / rates[i]\n', '                amounts[i] = amount\n', '            new_balances[i] -= amount\n', '\n', '    D1: uint256 = self.get_D_mem(rates, new_balances, amp)\n', '\n', '    fees: uint256[N_COINS] = empty(uint256[N_COINS])\n', '    _fee: uint256 = self.fee * N_COINS / (4 * (N_COINS - 1))\n', '    _admin_fee: uint256 = self.admin_fee\n', '    for i in range(N_COINS):\n', '        ideal_balance: uint256 = D1 * old_balances[i] / D0\n', '        new_balance: uint256 = new_balances[i]\n', '        difference: uint256 = 0\n', '        if ideal_balance > new_balance:\n', '            difference = ideal_balance - new_balance\n', '        else:\n', '            difference = new_balance - ideal_balance\n', '        coin_fee: uint256 = _fee * difference / FEE_DENOMINATOR\n', '        self.balances[i] = new_balance - (coin_fee * _admin_fee / FEE_DENOMINATOR)\n', '        new_balances[i] -= coin_fee\n', '        fees[i] = coin_fee\n', '    D2: uint256 = self.get_D_mem(rates, new_balances, amp)\n', '\n', '    lp_token: address = self.lp_token\n', '    token_supply: uint256 = ERC20(lp_token).totalSupply()\n', '    token_amount: uint256 = (D0 - D2) * token_supply / D0\n', '    assert token_amount != 0\n', '    assert token_amount <= _max_burn_amount, "Slippage screwed you"\n', '\n', '    CurveToken(lp_token).burnFrom(msg.sender, token_amount)  # dev: insufficient funds\n', '    for i in range(N_COINS):\n', '        amount: uint256 = amounts[i]\n', '        if amount != 0:\n', '            coin: address = self.coins[i]\n', '            if _use_underlying:\n', '                assert cyToken(coin).redeem(amount) == 0\n', '                underlying: address = self.underlying_coins[i]\n', '                ERC20(underlying).transfer(msg.sender, ERC20(underlying).balanceOf(self))\n', '            else:\n', '                assert cyToken(coin).transfer(msg.sender, amount)\n', '\n', '    log RemoveLiquidityImbalance(msg.sender, amounts, fees, D1, token_supply - token_amount)\n', '\n', '    return token_amount\n', '\n', '\n', '@pure\n', '@internal\n', 'def get_y_D(A_: uint256, i: int128, xp: uint256[N_COINS], D: uint256) -> uint256:\n', '    """\n', '    Calculate x[i] if one reduces D from being calculated for xp to D\n', '\n', '    Done by solving quadratic equation iteratively.\n', "    x_1**2 + x1 * (sum' - (A*n**n - 1) * D / (A * n**n)) = D ** (n + 1) / (n ** (2 * n) * prod' * A)\n", '    x_1**2 + b*x_1 = c\n', '\n', '    x_1 = (x_1**2 + c) / (2*x_1 + b)\n', '    """\n', '    # x in the input is converted to the same price/precision\n', '\n', '    assert i >= 0  # dev: i below zero\n', '    assert i < N_COINS  # dev: i above N_COINS\n', '\n', '    Ann: uint256 = A_ * N_COINS\n', '    c: uint256 = D\n', '    S_: uint256 = 0\n', '    _x: uint256 = 0\n', '    y_prev: uint256 = 0\n', '\n', '    for _i in range(N_COINS):\n', '        if _i != i:\n', '            _x = xp[_i]\n', '        else:\n', '            continue\n', '        S_ += _x\n', '        c = c * D / (_x * N_COINS)\n', '    c = c * D * A_PRECISION / (Ann * N_COINS)\n', '    b: uint256 = S_ + D * A_PRECISION / Ann\n', '    y: uint256 = D\n', '\n', '    for _i in range(255):\n', '        y_prev = y\n', '        y = (y*y + c) / (2 * y + b - D)\n', '        # Equality with the precision of 1\n', '        if y > y_prev:\n', '            if y - y_prev <= 1:\n', '                return y\n', '        else:\n', '            if y_prev - y <= 1:\n', '                return y\n', '    raise\n', '\n', '\n', '@view\n', '@internal\n', 'def _calc_withdraw_one_coin(_token_amount: uint256, i: int128, _use_underlying: bool, _rates: uint256[N_COINS]) -> uint256[2]:\n', '    # First, need to calculate\n', '    # * Get current D\n', '    # * Solve Eqn against y_i for D - _token_amount\n', '    amp: uint256 = self._A()\n', '    xp: uint256[N_COINS] = self._xp(_rates)\n', '    D0: uint256 = self.get_D(xp, amp)\n', '\n', '    total_supply: uint256 = ERC20(self.lp_token).totalSupply()\n', '\n', '    D1: uint256 = D0 - _token_amount * D0 / total_supply\n', '    new_y: uint256 = self.get_y_D(amp, i, xp, D1)\n', '\n', '    xp_reduced: uint256[N_COINS] = xp\n', '    _fee: uint256 = self.fee * N_COINS / (4 * (N_COINS - 1))\n', '    rate: uint256 = _rates[i]\n', '\n', '    for j in range(N_COINS):\n', '        dx_expected: uint256 = 0\n', '        xp_j: uint256 = xp[j]\n', '        if j == i:\n', '            dx_expected = xp_j * D1 / D0 - new_y\n', '        else:\n', '            dx_expected = xp_j - xp_j * D1 / D0\n', '        xp_reduced[j] -= _fee * dx_expected / FEE_DENOMINATOR\n', '\n', '    dy: uint256 = xp_reduced[i] - self.get_y_D(amp, i, xp_reduced, D1)\n', '    dy = (dy - 1) * PRECISION / rate  # Withdraw less to account for rounding errors\n', '    dy_fee: uint256 = ((xp[i] - new_y) * PRECISION / rate) - dy\n', '    if _use_underlying:\n', '        # this branch is only reachable when called via `calc_withdraw_one_coin`, which\n', "        # only needs `dy` - so we don't bother converting `dy_fee` to the underlying\n", '        precisions: uint256[N_COINS] = PRECISION_MUL\n', '        dy = dy * rate / precisions[i] / PRECISION\n', '\n', '    return [dy, dy_fee]\n', '\n', '\n', '@view\n', '@external\n', 'def calc_withdraw_one_coin(_token_amount: uint256, i: int128, _use_underlying: bool = False) -> uint256:\n', '    """\n', '    @notice Calculate the amount received when withdrawing a single coin\n', '    @param _token_amount Amount of LP tokens to burn in the withdrawal\n', '    @param i Index value of the coin to withdraw\n', '    @return Amount of coin received\n', '    """\n', '    return self._calc_withdraw_one_coin(_token_amount, i, _use_underlying, self._stored_rates())[0]\n', '\n', '\n', '@external\n', "@nonreentrant('lock')\n", 'def remove_liquidity_one_coin(\n', '    _token_amount: uint256,\n', '    i: int128,\n', '    _min_amount: uint256,\n', '    _use_underlying: bool = False\n', ') -> uint256:\n', '    """\n', '    @notice Withdraw a single coin from the pool\n', '    @param _token_amount Amount of LP tokens to burn in the withdrawal\n', '    @param i Index value of the coin to withdraw\n', '    @param _min_amount Minimum amount of coin to receive\n', '    @param _use_underlying If True, withdraw underlying assets instead of cyTokens\n', '    @return Amount of coin received\n', '    """\n', '    assert not self.is_killed  # dev: is killed\n', '\n', '    dy: uint256[2] = self._calc_withdraw_one_coin(_token_amount, i, False, self._current_rates())\n', '    amount: uint256 = dy[0]\n', '\n', '    self.balances[i] -= (dy[0] + dy[1] * self.admin_fee / FEE_DENOMINATOR)\n', '    CurveToken(self.lp_token).burnFrom(msg.sender, _token_amount)  # dev: insufficient funds\n', '    coin: address = self.coins[i]\n', '    if _use_underlying:\n', '        assert cyToken(coin).redeem(dy[0]) == 0\n', '        underlying: address = self.underlying_coins[i]\n', '        amount = ERC20(underlying).balanceOf(self)\n', '        ERC20(underlying).transfer(msg.sender, amount)\n', '    else:\n', '        assert cyToken(coin).transfer(msg.sender, amount)\n', '\n', '    assert amount >= _min_amount, "Not enough coins removed"\n', '    log RemoveLiquidityOne(msg.sender, _token_amount, dy[0])\n', '\n', '    return dy[0]\n', '\n', '\n', '### Admin functions ###\n', '@external\n', 'def ramp_A(_future_A: uint256, _future_time: uint256):\n', '    assert msg.sender == self.owner  # dev: only owner\n', '    assert block.timestamp >= self.initial_A_time + MIN_RAMP_TIME\n', '    assert _future_time >= block.timestamp + MIN_RAMP_TIME  # dev: insufficient time\n', '\n', '    _initial_A: uint256 = self._A()\n', '    _future_A_p: uint256 = _future_A * A_PRECISION\n', '\n', '    assert _future_A > 0 and _future_A < MAX_A\n', '    if _future_A_p < _initial_A:\n', '        assert _future_A_p * MAX_A_CHANGE >= _initial_A\n', '    else:\n', '        assert _future_A_p <= _initial_A * MAX_A_CHANGE\n', '\n', '    self.initial_A = _initial_A\n', '    self.future_A = _future_A_p\n', '    self.initial_A_time = block.timestamp\n', '    self.future_A_time = _future_time\n', '\n', '    log RampA(_initial_A, _future_A_p, block.timestamp, _future_time)\n', '\n', '\n', '@external\n', 'def stop_ramp_A():\n', '    assert msg.sender == self.owner  # dev: only owner\n', '\n', '    current_A: uint256 = self._A()\n', '    self.initial_A = current_A\n', '    self.future_A = current_A\n', '    self.initial_A_time = block.timestamp\n', '    self.future_A_time = block.timestamp\n', '    # now (block.timestamp < t1) is always False, so we return saved A\n', '\n', '    log StopRampA(current_A, block.timestamp)\n', '\n', '\n', '@external\n', 'def commit_new_fee(new_fee: uint256, new_admin_fee: uint256):\n', '    assert msg.sender == self.owner  # dev: only owner\n', '    assert self.admin_actions_deadline == 0  # dev: active action\n', '    assert new_fee <= MAX_FEE  # dev: fee exceeds maximum\n', '    assert new_admin_fee <= MAX_ADMIN_FEE  # dev: admin fee exceeds maximum\n', '\n', '    _deadline: uint256 = block.timestamp + ADMIN_ACTIONS_DELAY\n', '    self.admin_actions_deadline = _deadline\n', '    self.future_fee = new_fee\n', '    self.future_admin_fee = new_admin_fee\n', '\n', '    log CommitNewFee(_deadline, new_fee, new_admin_fee)\n', '\n', '\n', '@external\n', 'def apply_new_fee():\n', '    assert msg.sender == self.owner  # dev: only owner\n', '    assert block.timestamp >= self.admin_actions_deadline  # dev: insufficient time\n', '    assert self.admin_actions_deadline != 0  # dev: no active action\n', '\n', '    self.admin_actions_deadline = 0\n', '    _fee: uint256 = self.future_fee\n', '    _admin_fee: uint256 = self.future_admin_fee\n', '    self.fee = _fee\n', '    self.admin_fee = _admin_fee\n', '\n', '    log NewFee(_fee, _admin_fee)\n', '\n', '\n', '@external\n', 'def revert_new_parameters():\n', '    assert msg.sender == self.owner  # dev: only owner\n', '\n', '    self.admin_actions_deadline = 0\n', '\n', '\n', '@external\n', 'def commit_transfer_ownership(_owner: address):\n', '    assert msg.sender == self.owner  # dev: only owner\n', '    assert self.transfer_ownership_deadline == 0  # dev: active transfer\n', '\n', '    _deadline: uint256 = block.timestamp + ADMIN_ACTIONS_DELAY\n', '    self.transfer_ownership_deadline = _deadline\n', '    self.future_owner = _owner\n', '\n', '    log CommitNewAdmin(_deadline, _owner)\n', '\n', '\n', '@external\n', 'def apply_transfer_ownership():\n', '    assert msg.sender == self.owner  # dev: only owner\n', '    assert block.timestamp >= self.transfer_ownership_deadline  # dev: insufficient time\n', '    assert self.transfer_ownership_deadline != 0  # dev: no active transfer\n', '\n', '    self.transfer_ownership_deadline = 0\n', '    _owner: address = self.future_owner\n', '    self.owner = _owner\n', '\n', '    log NewAdmin(_owner)\n', '\n', '\n', '@external\n', 'def revert_transfer_ownership():\n', '    assert msg.sender == self.owner  # dev: only owner\n', '\n', '    self.transfer_ownership_deadline = 0\n', '\n', '\n', '@view\n', '@external\n', 'def admin_balances(i: uint256) -> uint256:\n', '    return ERC20(self.coins[i]).balanceOf(self) - self.balances[i]\n', '\n', '\n', '@external\n', 'def withdraw_admin_fees():\n', '    assert msg.sender == self.owner  # dev: only owner\n', '\n', '    for i in range(N_COINS):\n', '        coin: address = self.coins[i]\n', '        value: uint256 = ERC20(coin).balanceOf(self) - self.balances[i]\n', '        if value > 0:\n', '            assert cyToken(coin).transfer(msg.sender, value)\n', '\n', '\n', '@external\n', 'def kill_me():\n', '    assert msg.sender == self.owner  # dev: only owner\n', '    assert self.kill_deadline > block.timestamp  # dev: deadline has passed\n', '    self.is_killed = True\n', '\n', '\n', '@external\n', 'def unkill_me():\n', '    assert msg.sender == self.owner  # dev: only owner\n', '    self.is_killed = False']