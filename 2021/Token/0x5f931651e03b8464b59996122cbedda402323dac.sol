['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-10\n', '*/\n', '\n', '/**\n', ' Submitted for verification at Etherscan.io on 2021-06-09\n', '\n', '\n', 'https://t.me/Neoshiba\n', '\n', 'üíäNeo Shibaüíä\n', '\n', 'The one Shiba. Broken away from the fake reality. We took the red pill \n', 'We need gains, lots of gains...\n', 'When Neo Shiba launches you‚Äôll be wondering if your in a simulation or not, wether your dead or alive, awake or dreaming because these gains are going to be unimaginable!  \n', '\n', '\n', '\n', 'Token Information\n', 'Complete Fair Launch!\n', 'No presale = No dumping!\n', 'No team tokens = no dumping!\n', 'Tokens for marketing = pumping!\n', '\n', '\n', 'This is our token distribution for launch, no more no less. \n', '1 Billion Total Supply\n', '65% Liquidity\n', '35% Burn\n', '5% Marketing Wallet\n', '\n', 'We will be renouncing and locking liquidity right after we launch\n', '\n', 'https://t.me/Neoshiba\n', 'https://twitter.com/neoshiba1\n', 'http://neo-shiba.com\n', '\n', '\n', ' Submitted for verification at Etherscan.io on 2021-06-10\t\n', '*/\t\n', 'pragma solidity ^0.5.0;\t\n', '// ----------------------------------------------------------------------------\t\n', '// ERC Token Standard #20 Interface\t\n', '//\t\n', '// ----------------------------------------------------------------------------\t\n', 'contract ERC20Interface {\t\n', '    function totalSupply() public view returns (uint);\t\n', '    function balanceOf(address tokenOwner) public view returns (uint balance);\t\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\t\n', '    function transfer(address to, uint tokens) public returns (bool success);\t\n', '    function approve(address spender, uint tokens) public returns (bool success);\t\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\t\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\t\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\t\n', '}\t\n', '// ----------------------------------------------------------------------------\t\n', '// Safe Math Library\t\n', '// ----------------------------------------------------------------------------\t\n', 'contract SafeMath {\t\n', '    function safeAdd(uint a, uint b) public pure returns (uint c) {\t\n', '        c = a + b;\t\n', '        require(c >= a);\t\n', '    }\t\n', '    function safeSub(uint a, uint b) public pure returns (uint c) {\t\n', '        require(b <= a); c = a - b; } function safeMul(uint a, uint b) public pure returns (uint c) { c = a * b; require(a == 0 || c / a == b); } function safeDiv(uint a, uint b) public pure returns (uint c) { require(b > 0);\t\n', '        c = a / b;\t\n', '    }\t\n', '}\t\n', 'contract NeoShiba is ERC20Interface, SafeMath {\t\n', '    string public name;\t\n', '    string public symbol;\t\n', '    uint8 public decimals; // 18 decimals is the strongly suggested default, avoid changing it\t\n', '    uint256 public _totalSupply;\t\n', '    mapping(address => uint) balances;\t\n', '    mapping(address => mapping(address => uint)) allowed;\t\n', '    /**\t\n', '     * Constrctor function\t\n', '     *\t\n', '     * Initializes contract with initial supply tokens to the creator of the contract\t\n', '     */\t\n', '    constructor() public {\t\n', '        name = "Neo Shiba üêï";\t\n', '        symbol = "NIBAüêï";\t\n', '        decimals = 18;\t\n', '        _totalSupply = 1000000000000000000000000000000;\t\n', '        balances[msg.sender] = _totalSupply;\t\n', '        emit Transfer(address(0), msg.sender, _totalSupply);\t\n', '    }\t\n', '    function totalSupply() public view returns (uint) {\t\n', '        return _totalSupply  - balances[address(0)];\t\n', '    }\t\n', '    function balanceOf(address tokenOwner) public view returns (uint balance) {\t\n', '        return balances[tokenOwner];\t\n', '    }\t\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\t\n', '        return allowed[tokenOwner][spender];\t\n', '    }\t\n', '    function approve(address spender, uint tokens) public returns (bool success) {\t\n', '        allowed[msg.sender][spender] = tokens;\t\n', '        emit Approval(msg.sender, spender, tokens);\t\n', '        return true;\n', '    }\n', '    function transfer(address to, uint tokens) public returns (bool success) {\t\n', '        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\t\n', '        balances[to] = safeAdd(balances[to], tokens);\t\n', '        emit Transfer(msg.sender, to, tokens);\t\n', '        return true;\t\n', '    }\t\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\t\n', '        balances[from] = safeSub(balances[from], tokens);\t\n', '        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\t\n', '        balances[to] = safeAdd(balances[to], tokens);\t\n', '        emit Transfer(from, to, tokens);\t\n', '        return true;\t\n', '    }\t\n', '    \t\n', '}']