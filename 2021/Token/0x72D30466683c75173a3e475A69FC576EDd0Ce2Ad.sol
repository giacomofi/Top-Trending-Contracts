['pragma solidity >=0.6.6;\n', '\n', 'import "./library/Ownable.sol";\n', 'import "./interfaces/IUpgradable.sol";\n', '\n', 'contract Upgradable is Ownable, IUpgradable {\n', '    address public oracle;\n', '\n', '    constructor (address oracleAddress) public {\n', '        oracle = oracleAddress;\n', '    }\n', '\n', '    function getOracleAddress() public override(IUpgradable) returns (address) {\n', '        return oracle;\n', '    }\n', '\n', '    function upgradeOracleAddress (address newOracle) public onlyOwner {\n', '        oracle = newOracle;\n', '    }\n', '}\n', '\n', '// pragma solidity >=0.4.21 <0.6.0;\n', 'pragma solidity >=0.6.6;\n', '\n', 'interface IUpgradable {\n', '  function getOracleAddress() external returns (address);\n', '}\n', '\n', 'pragma solidity >=0.6.6;\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '\n', '}']