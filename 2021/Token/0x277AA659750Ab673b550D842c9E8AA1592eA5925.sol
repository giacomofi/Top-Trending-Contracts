['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-15\n', '*/\n', '\n', '// SPDX-License-Identifier: UNLICENSED\n', '\n', '// Copyright (c) 2021 0xdev0 - All rights reserved\n', '// https://twitter.com/0xdev0\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface IERC20 {\n', '  function initialize() external;\n', '  function totalSupply() external view returns (uint);\n', '  function balanceOf(address account) external view returns (uint);\n', '  function transfer(address recipient, uint256 amount) external returns (bool);\n', '  function allowance(address owner, address spender) external view returns (uint);\n', '  function symbol() external view returns (string memory);\n', '  function decimals() external view returns (uint);\n', '  function approve(address spender, uint amount) external returns (bool);\n', '  function mint(address account, uint amount) external;\n', '  function burn(address account, uint amount) external;\n', '  function transferFrom(address sender, address recipient, uint amount) external returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'interface IInterestRateModel {\n', '  function systemRate(ILendingPair _pair) external view returns(uint);\n', '  function supplyRatePerBlock(ILendingPair _pair, address _token) external view returns(uint);\n', '  function borrowRatePerBlock(ILendingPair _pair, address _token) external view returns(uint);\n', '}\n', '\n', 'interface IController {\n', '  function interestRateModel() external view returns(IInterestRateModel);\n', '  function feeRecipient() external view returns(address);\n', '  function liqMinHealth() external view returns(uint);\n', '  function liqFeePool() external view returns(uint);\n', '  function liqFeeSystem() external view returns(uint);\n', '  function liqFeeCaller() external view returns(uint);\n', '  function liqFeesTotal() external view returns(uint);\n', '  function tokenPrice(address _token) external view returns(uint);\n', '  function depositLimit(address _lendingPair, address _token) external view returns(uint);\n', '}\n', '\n', 'interface ILendingPair {\n', '  function checkAccountHealth(address _account) external view;\n', '  function accrueAccount(address _account) external;\n', '  function accrue() external;\n', '  function accountHealth(address _account) external view returns(uint);\n', '  function totalDebt(address _token) external view returns(uint);\n', '  function tokenA() external view returns(address);\n', '  function tokenB() external view returns(address);\n', '  function lpToken(address _token) external view returns(IERC20);\n', '  function debtOf(address _account, address _token) external view returns(uint);\n', '  function deposit(address _token, uint _amount) external;\n', '  function withdraw(address _token, uint _amount) external;\n', '  function borrow(address _token, uint _amount) external;\n', '  function repay(address _token, uint _amount) external;\n', '  function withdrawRepay(address _token, uint _amount) external;\n', '  function withdrawBorrow(address _token, uint _amount) external;\n', '  function controller() external view returns(IController);\n', '\n', '  function convertTokenValues(\n', '    address _fromToken,\n', '    address _toToken,\n', '    uint    _inputAmount\n', '  ) external view returns(uint);\n', '}\n', '\n', 'contract Ownable {\n', '\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  constructor() {\n', '    owner = msg.sender;\n', '    emit OwnershipTransferred(address(0), owner);\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(isOwner(), "Ownable: caller is not the owner");\n', '    _;\n', '  }\n', '\n', '  function isOwner() public view returns (bool) {\n', '    return msg.sender == owner;\n', '  }\n', '\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipTransferred(owner, address(0));\n', '    owner = address(0);\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    _transferOwnership(newOwner);\n', '  }\n', '\n', '  function _transferOwnership(address newOwner) internal {\n', '    require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'contract LPTokenMaster is Ownable {\n', '\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '\n', '  mapping (address => uint) public balanceOf;\n', '  mapping (address => mapping (address => uint)) public allowance;\n', '\n', '  string public constant name     = "WILD-LP";\n', '  string public constant symbol   = "WILD-LP";\n', '  uint8  public constant decimals = 18;\n', '  uint public totalSupply;\n', '\n', '  function initialize() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  function transfer(address _recipient, uint _amount) public returns (bool) {\n', '    _transfer(msg.sender, _recipient, _amount);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint _amount) public returns (bool) {\n', '    _approve(msg.sender, _spender, _amount);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _sender, address _recipient, uint _amount) public returns (bool) {\n', '    _transfer(_sender, _recipient, _amount);\n', '    _approve(_sender, msg.sender, allowance[_sender][msg.sender] - _amount);\n', '    return true;\n', '  }\n', '\n', '  function _transfer(address _sender, address _recipient, uint _amount) internal {\n', '    require(_sender != address(0), "ERC20: transfer from the zero address");\n', '    require(_recipient != address(0), "ERC20: transfer to the zero address");\n', '    require(balanceOf[_sender] >= _amount, "ERC20: insufficient funds");\n', '\n', '    ILendingPair pair = ILendingPair(owner);\n', '    pair.accrueAccount(_sender);\n', '    pair.accrueAccount(_recipient);\n', '\n', '    balanceOf[_sender] -= _amount;\n', '    balanceOf[_recipient] += _amount;\n', '\n', '    pair.checkAccountHealth(_sender);\n', '    emit Transfer(_sender, _recipient, _amount);\n', '  }\n', '\n', '  function mint(address _account, uint _amount) public onlyOwner {\n', '    _mint(_account, _amount);\n', '  }\n', '\n', '  function burn(address _account, uint _amount) public onlyOwner {\n', '    _burn(_account, _amount);\n', '  }\n', '\n', '  function selfBurn(uint _amount) public {\n', '    _burn(msg.sender, _amount);\n', '  }\n', '\n', '  function _mint(address _account, uint _amount) internal {\n', '    require(_account != address(0), "ERC20: mint to the zero address");\n', '\n', '    totalSupply += _amount;\n', '    balanceOf[_account] += _amount;\n', '    emit Transfer(address(0), _account, _amount);\n', '  }\n', '\n', '  function _burn(address _account, uint _amount) internal {\n', '    require(_account != address(0), "ERC20: burn from the zero address");\n', '\n', '    balanceOf[_account] -= _amount;\n', '    totalSupply -= _amount;\n', '    emit Transfer(_account, address(0), _amount);\n', '  }\n', '\n', '  function _approve(address _owner, address _spender, uint _amount) internal {\n', '    require(_owner != address(0), "ERC20: approve from the zero address");\n', '    require(_spender != address(0), "ERC20: approve to the zero address");\n', '\n', '    allowance[_owner][_spender] = _amount;\n', '    emit Approval(_owner, _spender, _amount);\n', '  }\n', '\n', '  function _concat(\n', '    string memory a,\n', '    string memory b,\n', '    string memory c,\n', '    string memory d,\n', '    string memory e\n', '  ) internal pure returns(string memory) {\n', '    return string(abi.encodePacked(a, b, c, e, d));\n', '  }\n', '}']