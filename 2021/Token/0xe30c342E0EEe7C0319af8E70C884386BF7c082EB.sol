['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-11\n', '*/\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', 'interface IERC20 {\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address who) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Multiplies two unsigned integers, reverts on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two unsigned integers, reverts on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '     * reverts when dividing by zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '\n', 'pragma solidity ^0.5.2;\n', '\n', 'contract OCT is IERC20 {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '    mapping (address => mapping (address => uint256)) private _allowed;\n', '\n', '    string public name = "OCT";\n', '    string public symbol = "OCT";\n', '    uint8 public decimals = 18;\n', '    uint256 private _totalSupply = 2000000000 * 10 ** uint256(decimals);\n', '\n', '    constructor() public {\n', '      _balances[msg.sender] = _totalSupply;\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '      return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address owner) public view returns (uint256) {\n', '      return _balances[owner];\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '      return _allowed[owner][spender];\n', '    }\n', '\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '      _transfer(msg.sender, to, value);\n', '      return true;\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '      _approve(msg.sender, spender, value);\n', '      return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '      _transfer(from, to, value);\n', '      _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n', '      return true;\n', '    }\n', '\n', '    function burn(uint256 value) public {\n', '      _burn(msg.sender, value);\n', '    }\n', '\n', '    function burnFrom(address from, uint256 value) public {\n', '      _burnFrom(from, value);\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '      _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n', '      return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '      _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n', '      return true;\n', '    }\n', '\n', '    function _transfer(address from, address to, uint256 value) internal {\n', '      require(to != address(0));\n', '\n', '      _balances[from] = _balances[from].sub(value);\n', '      _balances[to] = _balances[to].add(value);\n', '      emit Transfer(from, to, value);\n', '    }\n', '\n', '    function _burn(address account, uint256 value) internal {\n', '      require(account != address(0));\n', '\n', '      _totalSupply = _totalSupply.sub(value);\n', '      _balances[account] = _balances[account].sub(value);\n', '      emit Transfer(account, address(0), value);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 value) internal {\n', '      require(spender != address(0));\n', '      require(owner != address(0));\n', '\n', '      _allowed[owner][spender] = value;\n', '      emit Approval(owner, spender, value);\n', '    }\n', '\n', '    function _burnFrom(address account, uint256 value) internal {\n', '      _burn(account, value);\n', '      _approve(account, msg.sender, _allowed[account][msg.sender].sub(value));\n', '    }\n', '}']