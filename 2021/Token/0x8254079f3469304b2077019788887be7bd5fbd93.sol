['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-06\n', '*/\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * The TokenFarm contract does this and that...\n', ' */\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function decimals() public view returns (uint8);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', 'contract IERC20Mintable {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function decimals() public view returns (uint8);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    function mint(address _to,uint256 _value) public;\n', '    function burn(uint256 _value) public;\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', ' \n', 'contract TokenFarm {\n', '    using SafeMath for uint256;\n', '\tmodifier onlyOwner {\n', '        require(\n', '            msg.sender == owner,\n', '            "Only owner can call this function."\n', '        );\n', '        _;\n', '    }\n', '\tmodifier onlyModerators {\n', '        require(\n', '            Admins[msg.sender]==true,\n', '            "Only owner can call this function."\n', '        );\n', '        _;\n', '    }\n', '\n', '    // These get stored on the blockchain\n', '    // Owner is the person who deployes the contract\n', '    address public owner;\n', '    string public name = "Dapp Token Farm";\n', '    IERC20Mintable public dappToken;\n', '\n', '    \n', '    struct staker {\n', '        uint256 id;\n', '        mapping(address=> uint256) balance;\n', '        mapping(address=> uint256) timestamp;\n', '        mapping(address=> uint256) timefeestartstamp; \n', '\n', '    }\n', '\n', '    struct rate {\n', '        uint256 rate;\n', '        bool exists;\n', '    }\n', '\n', '    // people that have ever staked\n', '    mapping(address => uint256) public totalStaked;\n', '    address[] private tokenPools; \n', '    mapping(address => staker) stakers;\n', '    mapping(address => rate) public RatePerCoin;\n', '\tmapping (address=>bool) Admins;\n', '    uint256 public minimumDaysLockup=3;\n', '    uint256 public penaltyFee=10;\n', '    // This is passing in addresses, I can find them manually\n', '    constructor(IERC20Mintable _dapptoken, address _spiritclashtoken)\n', '        public\n', '    {\n', '        dappToken = _dapptoken;\n', '        owner = msg.sender;\n', '        Admins[msg.sender]=true;\n', '\t\tsetCoinRate(_spiritclashtoken,80000);\n', '    }\n', '\n', '    // 1. Stakes Tokens(Deposit)\n', '    function stakeTokens(uint256 _amount,IERC20 token) external { // remove payable\n', '        // Require amount greater than 0\n', '\t\trequire(RatePerCoin[address(token)].exists==true,"token doesnt have a rate");\n', '        require(_amount > 0, "amount cannot be 0");\n', '        if (stakers[msg.sender].balance[address(token)] > 0) {\n', '            claimToken(address(token));\n', '        }\n', '\n', '        // Transfer Mock Dai tokens to this contract for staking\n', '        token.transferFrom(msg.sender, address(this), _amount);\n', '\n', '        // Update staking balance\n', '        stakers[msg.sender].balance[address(token)] = stakers[msg.sender].balance[address(token)].add( _amount);\n', '        totalStaked[address(token)] = totalStaked[address(token)].add( _amount);\n', '        stakers[msg.sender].timestamp[address(token)] = block.timestamp;\n', '        stakers[msg.sender].timefeestartstamp[address(token)] = block.timestamp;\n', '    }\n', '\n', '    //  Unstaking Tokens(Withdraw)\n', '\n', '    function unstakeToken(IERC20 token) external {\n', '        // Fetch staking balance\n', '        uint256 balance = stakers[msg.sender].balance[address(token)];\n', '\n', '        // Require amount greater then 0\n', '        require(balance > 0, "staking balance cannot be 0");\n', '        // Check to see if the sender has waited longer then 3 days before withdrawl\n', '        if( (block.timestamp.sub(stakers[msg.sender].timefeestartstamp[address(token)])) < (minimumDaysLockup*24*60*60)){  \n', '            uint256 fee = (balance.mul(100).div(penaltyFee)).div(100);\n', '            token.transfer(owner, fee);\n', '            balance = balance.sub(fee); \n', '        }\n', '        claimTokens();\n', '\n', '        // Reset staking balance\n', '        stakers[msg.sender].balance[address(token)] = 0;\n', '        totalStaked[address(token)] = totalStaked[address(token)].sub(balance);\n', '        //transfer unstaked coins\n', '        token.transfer(msg.sender, balance);\n', '    }\n', '\n', '    function unstakeTokens() external{ // this is fine\n', '        \n', '        claimTokens();\n', '        for (uint i=0; i< tokenPools.length; i++){\n', '            uint256 balance = stakers[msg.sender].balance[tokenPools[i]];\n', '            if(balance > 0){\n', '                // Check to see if the sender has waited longer then 3 days before withdrawl\n', '                totalStaked[tokenPools[i]] = totalStaked[tokenPools[i]].sub(balance);\n', '                stakers[msg.sender].balance[tokenPools[i]] = 0;\n', '                if((block.timestamp.sub(stakers[msg.sender].timefeestartstamp[tokenPools[i]])) < (minimumDaysLockup*24*60*60)){\n', '                    uint256 fee = (balance.mul(100).div(penaltyFee)).div(100);\n', '                    balance = balance.sub(fee);\n', '                    IERC20(tokenPools[i]).transfer(owner, fee);\n', '                }\n', '                IERC20(tokenPools[i]).transfer(msg.sender, balance);\n', '            }\n', '        }\n', '    }\n', '\n', '\tfunction earned(address token) public view returns(uint256){ // this is fine\n', '        uint256 multiplier =100000000;\n', '\t\treturn (stakers[msg.sender].balance[token]* \n', '            (RatePerCoin[token].rate) * //coin earn rate in percentage so should be divided by 100\n', '                ( \n', '                    (stakers[msg.sender].balance[token]*multiplier)/(totalStaked[token]) //calculate token share percentage\n', '                )/(365*24*60*60)// 31 536 000\n', '                ///seconds per year\n', '            *(\n', '                block.timestamp.sub(stakers[msg.sender].timestamp[token]) // get time\n', '                \n', '            )\n', '        )/multiplier/10;\n', '\t}\n', '\n', '\n', '    function claimTokens() public { // This function looks good to me.\n', '        uint256 rewardbal=0;\n', '\t\tfor (uint i=0; i< tokenPools.length; i++){\n', '            address token = tokenPools[i];\n', '            if(stakers[msg.sender].balance[token]>0){\n', '                uint256 earnings = earned(token);\n', '                stakers[msg.sender].timestamp[token]=block.timestamp;\n', '                rewardbal= rewardbal.add(earnings);\n', '            }\n', '        }\n', '        IERC20Mintable(dappToken).mint(msg.sender, rewardbal);\n', '    }\n', '    function claimToken(address token) public { // For sure an issue\n', '        require(stakers[msg.sender].balance[token]>0,"you have no balance and cant claim");\n', '        uint256 earnings = earned(token);\n', '        stakers[msg.sender].timestamp[token]=block.timestamp;\n', '        IERC20Mintable(dappToken).mint(msg.sender, earnings);\n', '    }\n', '    \n', '    function setMinimumLockup(uint256 _days) external onlyModerators {\n', '        minimumDaysLockup =_days;\n', '    }\n', '    \n', '    function setPenaltyFee(uint256 _fee) external onlyModerators {\n', '        penaltyFee =_fee;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) external onlyOwner{\n', '        owner=_newOwner;\n', '    }\n', '\n', '    function setCoinRate(address coin,uint256 Rate) public onlyModerators {\n', '        RatePerCoin[coin].rate =Rate;\n', '        if(RatePerCoin[coin].exists == false){\n', '            tokenPools.push(coin);\n', '            RatePerCoin[coin].exists = true;\n', '        }\n', '    }\n', '\n', '\tfunction setAdmin(address addy,bool value) external onlyOwner{\n', '\t\tAdmins[addy]= value;\n', '\t}\n', '    function stakingBalance(address token) external view returns(uint256) {\n', '        return stakers[msg.sender].balance[token];\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', 'contract ClashPay {\n', '    using SafeMath for uint256;\n', '    string  public name = "Clash Pay";\n', '    string  public symbol = "SCP";\n', '    uint256 public totalSupply = 10000000000000000000;\n', '    uint8   public decimals = 18;\n', '    address public owner;\n', '    address public Tokenfarm;\n', '\n', '    event Transfer(\n', '        address indexed _from,\n', '        address indexed _to,\n', '        uint256 _value\n', '    );\n', '\n', '    event Burn(\n', '        address indexed burner,\n', '        uint256 value\n', '    );\n', '\n', '    event Approval(\n', '        address indexed _owner,\n', '        address indexed _spender,\n', '        uint256 _value\n', '    );\n', '\n', '    mapping(address => uint256) public balanceOf;\n', '    mapping(address => mapping(address => uint256)) public allowance;\n', '\n', '    constructor() public {\n', '        balanceOf[msg.sender] = totalSupply;\n', '        owner= msg.sender;\n', '    }\n', '    function setContract(address _contract) external{\n', '        require(msg.sender==owner,"must be owner");\n', '        Tokenfarm=_contract;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) external returns (bool success) {\n', '        require(address(0)!= _to,"to burn tokens use the burn function");\n', '        balanceOf[msg.sender] =balanceOf[msg.sender].sub( _value);\n', '        balanceOf[_to] = balanceOf[_to].add( _value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) external returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success) {\n', '        require(address(0)!= _to,"to burn tokens use the burn function");\n', '        balanceOf[_from] = balanceOf[_from].sub( _value); // msg.sender => _from\n', '        balanceOf[_to] = balanceOf[_to].add( _value);\n', '        allowance[_from][msg.sender] =allowance[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    function mint(address _to,uint256 _value) public {\n', '        require(msg.sender==Tokenfarm,"only Tokenfarm contract can mint tokens");\n', '        totalSupply= totalSupply.add( _value);\n', '        balanceOf[_to]=balanceOf[_to].add(_value);\n', '        emit Transfer(address(0),msg.sender,_value);\n', '    }\n', '    function burn(uint256 _value) public{\n', '        balanceOf[msg.sender] =balanceOf[msg.sender].sub( _value);\n', '        emit Burn(msg.sender,_value);\n', '        emit Transfer(msg.sender,address(0),_value);\n', '    }\n', '    function transferOwnership(address _newOwner) external{\n', '        require(msg.sender==owner,"only the owner an call this function");\n', '        owner=_newOwner;\n', '\n', '    }\n', '\n', '}']