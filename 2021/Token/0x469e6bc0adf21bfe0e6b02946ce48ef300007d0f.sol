['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-24\n', '*/\n', '\n', 'pragma solidity >=0.4.22 <0.7.0;\n', 'contract Context {\n', '    constructor () internal { }\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this;\n', '        return msg.data;\n', '    }\n', '}\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '    mapping (address => uint256) private _balances;\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '    uint256 private _totalSupply;\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '    function transfer(address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '    function approve(address spender, uint256 amount) public returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '    function _mint(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '    function _burn(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '    function _approve(address owner, address spender, uint256 amount) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '    function _burnFrom(address account, uint256 amount) internal {\n', '        _burn(account, amount);\n', '        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, "ERC20: burn amount exceeds allowance"));\n', '    }\n', '}\n', 'contract ERC20Detailed is IERC20 {\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '    constructor (string memory name, string memory symbol, uint8 decimals) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '}\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract Sauna_Emerging_1 is Ownable, ERC20, ERC20Detailed {\n', '    struct Artist {\n', '        string name;\n', '        string surname;\n', '        string art_product;\n', '        uint share_amount;\n', '        string info;\n', '    }\n', '    uint release_time;\n', '    uint256 lock_ratio;\n', '    Artist[] public artist_list; \n', '    constructor() ERC20Detailed("Sauna Emerging 1", "SE1", 2) Ownable() public {\n', '        release_time = block.timestamp + 358 days;\n', '        lock_ratio = 0;\n', '        _mint(msg.sender, 11750000);\n', "        artist_list.push(Artist({name:'Erdinc',surname:'Sakin', art_product:'Saygi', share_amount:7500, info:'Erdinc Sakin, Saygi, 7500'}));\n", "        artist_list.push(Artist({name:'Mr.Hure',surname:'-', art_product:'Yengec', share_amount:17000, info:'Mr.Hure -, Yengec, 17000'}));\n", "        artist_list.push(Artist({name:'Utku',surname:'Oksuz', art_product:'Mutsuz Kent', share_amount:8000, info:'Utku Oksuz, Mutsuz Kent, 8000'}));\n", "        artist_list.push(Artist({name:'Erhan',surname:'Karagoz', art_product:'Tell Be If You Wanna BEE', share_amount:20000, info:'Erhan Karagoz, Tell Be If You Wanna BEE, 20000'}));\n", "        artist_list.push(Artist({name:'Muhammet',surname:'Bakir', art_product:'Sesiz Seda', share_amount:11000, info:'Muhammet Bakir, Sesiz Seda, 11000'}));\n", "        artist_list.push(Artist({name:'Ummuhan',surname:'Tuncturk', art_product:'Despotun Bir Gunu', share_amount:6500, info:'Ummuhan Tuncturk, Despotun Bir Gunu, 6500'}));\n", "        artist_list.push(Artist({name:'Kuntay Tarik',surname:'Evren', art_product:'Teddy Bear', share_amount:10000, info:'Kuntay Tarik Evren, Teddy Bear, 10000'}));\n", "        artist_list.push(Artist({name:'Saniye',surname:'Ozbek', art_product:'Nereye Aitim', share_amount:10000, info:'Saniye Ozbek, Nereye Aitim, 10000'}));\n", "        artist_list.push(Artist({name:'Yasin',surname:'Canli', art_product:'Bu Yol Nereye Gider', share_amount:5000, info:'Yasin Canli, Bu Yol Nereye Gider, 5000'}));\n", "        artist_list.push(Artist({name:'Mine',surname:'Akcaoglu', art_product:'Ayni Yerden Bakiyoruz', share_amount:15000, info:'Mine Akcaoglu, Ayni Yerden Bakiyoruz, 15000'}));\n", "        artist_list.push(Artist({name:'Suleyman',surname:'Engin', art_product:'Gunesli Bir Gunde Dinazor Ailesinin Dusundukleri', share_amount:7500, info:'Suleyman Engin, Gunesli Bir Gunde Dinazor Ailesinin Dusundukleri, 7500'}));\n", '    }\n', '    function burn(address account, uint256 amount) public onlyOwner{\n', '        _burn(account, amount);\n', '    }\n', '    function transfer(address recipient, uint256 amount) public onlyOwner returns (bool){\n', '        if ( _msgSender() == owner() && release_time > block.timestamp){\n', '            require( amount   <= balanceOf(_msgSender()) - totalSupply() * lock_ratio / 100, "Tokens are locked." );\n', '            _transfer(_msgSender(), recipient, amount);\n', '        }\n', '        else{\n', '            _transfer(_msgSender(), recipient, amount);    \n', '        }\n', '    }\n', '    function getReleaseTime() public view returns (uint256) {\n', '        return release_time;\n', '    }\n', '    function getLockRatio() public view returns (uint256) {\n', '        return lock_ratio;\n', '    }\n', '    function getLockAmount() public view returns (uint256) {\n', '        return totalSupply() * lock_ratio / 100;\n', '    }\n', '    function getArtistByID(uint id) public view returns (string memory) {\n', '        return artist_list[id].info;\n', '    }\n', '    function getArtistListLength() public view returns (uint256) {\n', '        return artist_list.length;\n', '    }\n', '    function Lock(uint256 new_lock_ratio, uint _days) public onlyOwner{\n', '        require(release_time < block.timestamp, " Wait until tokens became unlocked. ");\n', '        release_time = block.timestamp + _days * 1 days;\n', '        lock_ratio = new_lock_ratio;\n', '    }\n', '}']