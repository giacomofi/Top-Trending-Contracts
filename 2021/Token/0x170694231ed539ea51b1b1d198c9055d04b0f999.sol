['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-09\n', '*/\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/*\n', ' * ERC20 interface\n', ' * see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) public view returns (uint);\n', '  function allowance(address owner, address spender) public view returns (uint);\n', '\n', '  function transfer(address to, uint value) public returns (bool ok);\n', '  function transferFrom(address from, address to, uint value) public returns (bool ok);\n', '  function approve(address spender, uint value) public returns (bool ok);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint value);\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '/**\n', ' * Standard ERC20 token\n', ' *\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract Token is ERC20 {\n', '  mapping(address => uint) balances;\n', '  mapping (address => mapping (address => uint)) allowed;\n', '\n', '  using SafeMath for uint;\n', '\n', '  function transfer(address _to, uint _value) public returns (bool success) {\n', '\n', '    return doTransfer(msg.sender, _to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\n', '    uint _allowance = allowed[_from][msg.sender];\n', '\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '\n', '    return doTransfer(_from, _to, _value);\n', '  }\n', '\n', '  /// @notice Allows `_spender` to withdraw from your account multiple times up to `_value`.\n', '  /// If this function is called again it overwrites the current allowance with `_value`.\n', '  /// @dev Allows `_spender` to withdraw from your account multiple times up to `_value`.\n', '  /// If this function is called again it overwrites the current allowance with `_value`.\n', '  /// NOTE: To prevent attack vectors, clients SHOULD make sure to create user interfaces\n', '  /// in such a way that they set the allowance first to 0 before setting it\n', '  /// to another value for the same spender\n', '  /// @param _spender Address that is going to be approved\n', '  /// @param _value Number of tokens that spender is going to be able to transfer\n', '  /// @return true if success\n', '  function approve(address _spender, uint _value) public returns (bool success) {\n', '    allowed[msg.sender][_spender] = _value;\n', '\n', '    emit Approval(msg.sender, _spender, _value);\n', '\n', '    return true;\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\n', '    return true;\n', '  }\n', '\n', '  function doTransfer(address _from, address _to, uint _value) internal returns (bool success) {\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '\n', '    emit Transfer(_from, _to, _value);\n', '\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '}\n', '\n', '/*\n', '  Copyright (C) 2017 Icofunding S.L.\n', '\n', '  This program is free software: you can redistribute it and/or modify\n', '  it under the terms of the GNU General Public License as published by\n', '  the Free Software Foundation, either version 3 of the License, or\n', '  (at your option) any later version.\n', '\n', '  This program is distributed in the hope that it will be useful,\n', '  but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '  GNU General Public License for more details.\n', '\n', '  You should have received a copy of the GNU General Public License\n', '  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '*/\n', '\n', '/// @title Mint interface\n', '/// @author Icofunding\n', 'contract MintInterface {\n', '  function mint(address recipient, uint amount) public returns (bool success);\n', '}\n', '\n', '/**\n', ' * Manages the ownership of a contract\n', ' * Standard Owned contract.\n', ' */\n', 'contract Owned {\n', '  address public owner;\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '\n', '    _;\n', '  }\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  function changeOwner(address newOwner) public onlyOwner {\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '/*\n', '  Copyright (C) 2017 Icofunding S.L.\n', '\n', '  This program is free software: you can redistribute it and/or modify\n', '  it under the terms of the GNU General Public License as published by\n', '  the Free Software Foundation, either version 3 of the License, or\n', '  (at your option) any later version.\n', '\n', '  This program is distributed in the hope that it will be useful,\n', '  but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '  GNU General Public License for more details.\n', '\n', '  You should have received a copy of the GNU General Public License\n', '  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '*/\n', '\n', '/// @title Manages the minters of a token\n', '/// @author Icofunding\n', 'contract Minted is MintInterface, Owned {\n', '  uint public numMinters; // Number of minters of the token.\n', '  bool public open; // If is possible to add new minters or not. True by default.\n', '  mapping (address => bool) public isMinter; // If an address is a minter of the token or not\n', '\n', '  // Log of the minters added\n', '  event NewMinter(address who);\n', '\n', '  modifier onlyMinters() {\n', '    require(isMinter[msg.sender]);\n', '\n', '    _;\n', '  }\n', '\n', '  modifier onlyIfOpen() {\n', '    require(open);\n', '\n', '    _;\n', '  }\n', '\n', '  constructor() public {\n', '    open = true;\n', '  }\n', '\n', '  /// @notice Adds a new minter to the token.\n', '  /// It can only be executed by the Owner if the token is open to new minters.\n', '  /// @dev Adds a new minter to the token.\n', '  /// It can only be executed by the Owner if the token is open to new minters.\n', '  /// @param _minter minter address\n', '  function addMinter(address _minter) public onlyOwner onlyIfOpen {\n', '    if(!isMinter[_minter]) {\n', '      isMinter[_minter] = true;\n', '      numMinters++;\n', '\n', '      emit NewMinter(_minter);\n', '    }\n', '  }\n', '\n', '  /// @notice Removes a minter of the token.\n', '  /// It can only be executed by the Owner.\n', '  /// @dev Removes a minter of the token.\n', '  /// It can only be executed by the Owner.\n', '  /// @param _minter minter address\n', '  function removeMinter(address _minter) public onlyOwner {\n', '    if(isMinter[_minter]) {\n', '      isMinter[_minter] = false;\n', '      numMinters--;\n', '    }\n', '  }\n', '\n', '  /// @notice Blocks the possibility to add new minters.\n', '  /// It can only be executed by the Owner.\n', '  /// @dev Blocks the possibility to add new minters\n', '  /// It can only be executed by the Owner.\n', '  function endMinting() public onlyOwner {\n', '    open = false;\n', '  }\n', '}\n', '\n', ' /*\n', '   Copyright (C) 2017 Icofunding S.L.\n', '\n', '   This program is free software: you can redistribute it and/or modify\n', '   it under the terms of the GNU General Public License as published by\n', '   the Free Software Foundation, either version 3 of the License, or\n', '   (at your option) any later version.\n', '\n', '   This program is distributed in the hope that it will be useful,\n', '   but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '   GNU General Public License for more details.\n', '\n', '   You should have received a copy of the GNU General Public License\n', '   along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', ' */\n', '\n', '/// @title Pausable\n', '/// @author Icofunding\n', 'contract Pausable is Owned {\n', '  bool public isPaused;\n', '\n', '  modifier whenNotPaused() {\n', '    require(!isPaused);\n', '\n', '    _;\n', '  }\n', '\n', '  /// @notice Makes the token non-transferable\n', '  /// @dev Makes the token non-transferable\n', '  function pause() public onlyOwner {\n', '    isPaused = true;\n', '  }\n', '\n', '  /// @notice Makes the token transferable\n', '  /// @dev Makes the token transferable\n', '  function unPause() public onlyOwner {\n', '    isPaused = false;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '/*\n', '  Copyright (C) 2017 Icofunding S.L.\n', '\n', '  This program is free software: you can redistribute it and/or modify\n', '  it under the terms of the GNU General Public License as published by\n', '  the Free Software Foundation, either version 3 of the License, or\n', '  (at your option) any later version.\n', '\n', '  This program is distributed in the hope that it will be useful,\n', '  but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '  GNU General Public License for more details.\n', '\n', '  You should have received a copy of the GNU General Public License\n', '  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '*/\n', '\n', '/// @title Auth\n', '/// @author Icofunding\n', 'contract Auth is Owned {\n', '  mapping (address => bool) authAddresses;\n', '\n', '  // Manages the ownership of a contract with multiple managers\n', '  modifier onlyAuth() {\n', '    require(isAuth(msg.sender));\n', '\n', '    _;\n', '  }\n', '\n', '  function addAuth(address authAddress) public onlyOwner {\n', '    authAddresses[authAddress] = true;\n', '  }\n', '\n', '  function removeAuth(address authAddress) public onlyOwner {\n', '    authAddresses[authAddress] = false;\n', '  }\n', '\n', '  function isAuth(address authAddress) public view returns (bool) {\n', '    return (authAddresses[authAddress] || authAddress == owner);\n', '  }\n', '}\n', '\n', '\n', '/*\n', '  Copyright (C) 2017 Icofunding S.L.\n', '\n', '  This program is free software: you can redistribute it and/or modify\n', '  it under the terms of the GNU General Public License as published by\n', '  the Free Software Foundation, either version 3 of the License, or\n', '  (at your option) any later version.\n', '\n', '  This program is distributed in the hope that it will be useful,\n', '  but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '  GNU General Public License for more details.\n', '\n', '  You should have received a copy of the GNU General Public License\n', '  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '*/\n', '\n', '/// @title Whitelist\n', '/// @author Icofunding\n', 'contract Whitelist is Auth {\n', '  mapping(address => bool) public whitelist;\n', '\n', '  using SafeMath for uint;\n', '\n', '  modifier whitelisted(address from, address to) {\n', '    require(whitelist[from]);\n', '    require(whitelist[to]);\n', '\n', '    _;\n', '  }\n', '\n', '  constructor() public {\n', '  }\n', '\n', '  /// @notice Adds the address `account` to the whitelist\n', '  /// @dev Adds the address `account` to the whitelist\n', '  /// @param account Address to be added to the whitelist\n', '  function addToWhitelist(address account) public onlyAuth {\n', '    whitelist[account] = true;\n', '  }\n', '\n', '  /// @notice Removes the address `account` from the whitelist\n', '  /// @dev Removes the address `account` from the whitelist\n', '  /// @param account Address to be removed from the whitelist\n', '  function removeFromWhitelist(address account) public onlyAuth {\n', '    whitelist[account] = false;\n', '  }\n', '}\n', '\n', '/*\n', '  Copyright (C) 2017 Icofunding S.L.\n', '\n', '  This program is free software: you can redistribute it and/or modify\n', '  it under the terms of the GNU General Public License as published by\n', '  the Free Software Foundation, either version 3 of the License, or\n', '  (at your option) any later version.\n', '\n', '  This program is distributed in the hope that it will be useful,\n', '  but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '  GNU General Public License for more details.\n', '\n', '  You should have received a copy of the GNU General Public License\n', '  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '*/\n', '\n', '/// @title Token contract\n', '/// @author Icofunding\n', 'contract ProjectToken is Token, Minted, Pausable, Whitelist {\n', '  string public name;\n', '  string public symbol;\n', '  uint public decimals;\n', '\n', '  uint public transferableDate; // timestamp\n', '\n', '  modifier lockUpPeriod() {\n', '    require(now >= transferableDate);\n', '\n', '    _;\n', '  }\n', '\n', '  /// @notice Creates a token\n', '  /// @dev Constructor\n', '  /// @param _name Name of the token\n', '  /// @param _symbol Acronim of the token\n', '  /// @param _decimals Number of decimals of the token\n', '  /// @param _transferableDate Timestamp from when the token can de transfered\n', '  constructor(\n', '    string memory _name,\n', '    string memory _symbol,\n', '    uint _decimals,\n', '    uint _transferableDate\n', '  ) public {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '    transferableDate = _transferableDate;\n', '  }\n', '\n', '  /// @notice Creates `amount` tokens and sends them to `recipient` address\n', '  /// @dev Mints new tokens. This tokens are transfered from the address 0x0\n', '  /// Adds the receiver to the whitelist\n', '  /// @param recipient Address that receives the tokens\n', '  /// @param amount Number of tokens created (plus decimals)\n', '  /// @return true if success\n', '  function mint(address recipient, uint amount)\n', '    public\n', '    onlyMinters\n', '    returns (bool success)\n', '  {\n', '    totalSupply = totalSupply.add(amount);\n', '    balances[recipient] = balances[recipient].add(amount);\n', '\n', '    whitelist[recipient] = true;\n', '\n', '    emit Transfer(address(0), recipient, amount);\n', '\n', '    return true;\n', '  }\n', '\n', '  /// @notice Transfers `value` tokens to `to`\n', '  /// @dev Transfers `value` tokens to `to`\n', '  /// @param to The address that will receive the tokens.\n', '  /// @param value The amount of tokens to transfer (plus decimals)\n', '  /// @return true if success\n', '  function transfer(address to, uint value)\n', '    public\n', '    lockUpPeriod\n', '    whenNotPaused\n', '    whitelisted(msg.sender, to)\n', '    returns (bool success)\n', '  {\n', '    return super.transfer(to, value);\n', '  }\n', '\n', '  /// @notice Transfers `value` tokens to `to` from `from` account\n', '  /// @dev Transfers `value` tokens to `to` from `from` account.\n', '  /// @param from The address of the sender\n', '  /// @param to The address that will receive the tokens\n', '  /// @param value The amount of tokens to transfer (plus decimals)\n', '  /// @return true if success\n', '  function transferFrom(address from, address to, uint value)\n', '    public\n', '    lockUpPeriod\n', '    whenNotPaused\n', '    whitelisted(from, to)\n', '    returns (bool success)\n', '  {\n', '    return super.transferFrom(from, to, value);\n', '  }\n', '\n', '  /// @notice Forces the transfer of `value` tokens from `from` to `to`\n', '  /// @dev Forces the transfer of `value` tokens from `from` to `to`\n', '  /// @param from The address that sends the tokens.\n', '  /// @param to The address that will receive the tokens.\n', '  /// @param value The amount of tokens to transfer (plus decimals)\n', '  /// @return true if success\n', '  function forceTransfer(address from, address to, uint value)\n', '    public\n', '    onlyOwner\n', '    returns (bool success)\n', '  {\n', '    require(whitelist[to]);\n', '    \n', '    return super.doTransfer(from, to, value);\n', '  }\n', '}']