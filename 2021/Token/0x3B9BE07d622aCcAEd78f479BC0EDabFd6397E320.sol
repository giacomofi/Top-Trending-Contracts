['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-26\n', '*/\n', '\n', '//SPDX-License-Identifier: Unlicense\n', 'pragma solidity ^0.8.0;\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'interface ILosslessController {\n', '    function beforeTransfer(address sender, address recipient, uint256 amount) external;\n', '\n', '    function beforeTransferFrom(address msgSender, address sender, address recipient, uint256 amount) external;\n', '\n', '    function beforeApprove(address sender, address spender, uint256 amount) external;\n', '\n', '    function beforeIncreaseAllowance(address msgSender, address spender, uint256 addedValue) external;\n', '\n', '    function beforeDecreaseAllowance(address msgSender, address spender, uint256 subtractedValue) external;\n', '\n', '    function afterApprove(address sender, address spender, uint256 amount) external;\n', '\n', '    function afterTransfer(address sender, address recipient, uint256 amount) external;\n', '\n', '    function afterTransferFrom(address msgSender, address sender, address recipient, uint256 amount) external;\n', '\n', '    function afterIncreaseAllowance(address sender, address spender, uint256 addedValue) external;\n', '\n', '    function afterDecreaseAllowance(address sender, address spender, uint256 subtractedValue) external;\n', '}\n', '\n', 'contract LERC20 is Context, IERC20 {\n', '    mapping (address => uint256) private _balances;\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '    uint256 private _totalSupply;\n', '    string private _name;\n', '    string private _symbol;\n', '\n', '    address public recoveryAdmin;\n', '    address private recoveryAdminCanditate;\n', '    bytes32 private recoveryAdminKeyHash;\n', '    address public admin;\n', '    uint256 public timelockPeriod;\n', '    uint256 public losslessTurnOffTimestamp;\n', '    bool public isLosslessTurnOffProposed;\n', '    bool public isLosslessOn = true;\n', '    ILosslessController private lossless;\n', '\n', '    event AdminChanged(address indexed previousAdmin, address indexed newAdmin);\n', '    event RecoveryAdminChangeProposed(address indexed candidate);\n', '    event RecoveryAdminChanged(address indexed previousAdmin, address indexed newAdmin);\n', '    event LosslessTurnOffProposed(uint256 turnOffDate);\n', '    event LosslessTurnedOff();\n', '    event LosslessTurnedOn();\n', '\n', '    constructor(uint256 totalSupply_, string memory name_, string memory symbol_, address admin_, address recoveryAdmin_, uint256 timelockPeriod_, address lossless_) {\n', '        _mint(_msgSender(), totalSupply_);\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        admin = admin_;\n', '        recoveryAdmin = recoveryAdmin_;\n', '        timelockPeriod = timelockPeriod_;\n', '        lossless = ILosslessController(lossless_);\n', '    }\n', '\n', '    // --- LOSSLESS modifiers ---\n', '\n', '    modifier lssAprove(address spender, uint256 amount) {\n', '        if (isLosslessOn) {\n', '            lossless.beforeApprove(_msgSender(), spender, amount);\n', '            _;\n', '            lossless.afterApprove(_msgSender(), spender, amount);\n', '        } else {\n', '            _;\n', '        }\n', '    }\n', '\n', '    modifier lssTransfer(address recipient, uint256 amount) {\n', '        if (isLosslessOn) {\n', '            lossless.beforeTransfer(_msgSender(), recipient, amount);\n', '            _;\n', '            lossless.afterTransfer(_msgSender(), recipient, amount);\n', '        } else {\n', '            _;\n', '        }\n', '    }\n', '\n', '    modifier lssTransferFrom(address sender, address recipient, uint256 amount) {\n', '        if (isLosslessOn) {\n', '            lossless.beforeTransferFrom(_msgSender(),sender, recipient, amount);\n', '            _;\n', '            lossless.afterTransferFrom(_msgSender(), sender, recipient, amount);\n', '        } else {\n', '            _;\n', '        }\n', '    }\n', '\n', '    modifier lssIncreaseAllowance(address spender, uint256 addedValue) {\n', '        if (isLosslessOn) {\n', '            lossless.beforeIncreaseAllowance(_msgSender(), spender, addedValue);\n', '            _;\n', '            lossless.afterIncreaseAllowance(_msgSender(), spender, addedValue);\n', '        } else {\n', '            _;\n', '        }\n', '    }\n', '\n', '    modifier lssDecreaseAllowance(address spender, uint256 subtractedValue) {\n', '        if (isLosslessOn) {\n', '            lossless.beforeDecreaseAllowance(_msgSender(), spender, subtractedValue);\n', '            _;\n', '            lossless.afterDecreaseAllowance(_msgSender(), spender, subtractedValue);\n', '        } else {\n', '            _;\n', '        }\n', '    }\n', '\n', '    modifier onlyRecoveryAdmin() {\n', '        require(_msgSender() == recoveryAdmin, "LERC20: Must be recovery admin");\n', '        _;\n', '    }\n', '\n', '    // --- LOSSLESS management ---\n', '\n', '    function getAdmin() external view returns (address) {\n', '        return admin;\n', '    }\n', '\n', '    function transferOutBlacklistedFunds(address[] calldata from) external {\n', '        require(_msgSender() == address(lossless), "LERC20: Only lossless contract");\n', '        for (uint i = 0; i < from.length; i++) {\n', '            _transfer(from[i], address(lossless), balanceOf(from[i]));\n', '        }\n', '    }\n', '\n', '    function setLosslessAdmin(address newAdmin) public onlyRecoveryAdmin {\n', '        emit AdminChanged(admin, newAdmin);\n', '        admin = newAdmin;\n', '    }\n', '\n', '    function transferRecoveryAdminOwnership(address candidate, bytes32 keyHash) public onlyRecoveryAdmin {\n', '        recoveryAdminCanditate = candidate;\n', '        recoveryAdminKeyHash = keyHash;\n', '        emit RecoveryAdminChangeProposed(candidate);\n', '    }\n', '\n', '    function acceptRecoveryAdminOwnership(bytes memory key) external {\n', '        require(_msgSender() == recoveryAdminCanditate, "LERC20: Must be canditate");\n', '        require(keccak256(key) == recoveryAdminKeyHash, "LERC20: Invalid key");\n', '        emit RecoveryAdminChanged(recoveryAdmin, recoveryAdminCanditate);\n', '        recoveryAdmin = recoveryAdminCanditate;\n', '    }\n', '\n', '    function proposeLosslessTurnOff() public onlyRecoveryAdmin {\n', '        losslessTurnOffTimestamp = block.timestamp + timelockPeriod;\n', '        isLosslessTurnOffProposed = true;\n', '        emit LosslessTurnOffProposed(losslessTurnOffTimestamp);\n', '    }\n', '\n', '    function executeLosslessTurnOff() public onlyRecoveryAdmin {\n', '        require(isLosslessTurnOffProposed, "LERC20: TurnOff not proposed");\n', '        require(losslessTurnOffTimestamp <= block.timestamp, "LERC20: Time lock in progress");\n', '        isLosslessOn = false;\n', '        isLosslessTurnOffProposed = false;\n', '        emit LosslessTurnedOff();\n', '    }\n', '\n', '    function executeLosslessTurnOn() public onlyRecoveryAdmin {\n', '        isLosslessTurnOffProposed = false;\n', '        isLosslessOn = true;\n', '        emit LosslessTurnedOn();\n', '    }\n', '\n', '    // --- ERC20 methods ---\n', '\n', '    function name() public view virtual returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view virtual returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view virtual returns (uint8) {\n', '        return 18;\n', '    }\n', '\n', '    function totalSupply() public view virtual override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) public view virtual override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public virtual override lssTransfer(recipient, amount) returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public virtual override lssAprove(spender, amount) returns (bool) {\n', '        require((amount == 0) || (_allowances[_msgSender()][spender] == 0), "LERC20: Cannot change non zero allowance");\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override lssTransferFrom(sender, recipient, amount) returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '\n', '        uint256 currentAllowance = _allowances[sender][_msgSender()];\n', '        require(currentAllowance >= amount, "LERC20: transfer amount exceeds allowance");\n', '        _approve(sender, _msgSender(), currentAllowance - amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual lssIncreaseAllowance(spender, addedValue) returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual lssDecreaseAllowance(spender, subtractedValue) returns (bool) {\n', '        uint256 currentAllowance = _allowances[_msgSender()][spender];\n', '        require(currentAllowance >= subtractedValue, "LERC20: decreased allowance below zero");\n', '        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n', '\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "LERC20: transfer from the zero address");\n', '        require(recipient != address(0), "LERC20: transfer to the zero address");\n', '\n', '        uint256 senderBalance = _balances[sender];\n', '        require(senderBalance >= amount, "LERC20: transfer amount exceeds balance");\n', '        _balances[sender] = senderBalance - amount;\n', '        _balances[recipient] += amount;\n', '\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "LERC20: mint to the zero address");\n', '\n', '        _totalSupply += amount;\n', '        _balances[account] += amount;\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "LERC20: approve from the zero address");\n', '        require(spender != address(0), "LERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '}']