['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-08\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface NFT {\n', '    function mint(address to, uint id, uint amount, bytes memory data) external;\n', '    function mintBatch(address to, uint[] memory ids, uint[] memory amounts, bytes memory data) external;\n', '}\n', '\n', 'contract Owned {\n', '    bool initialised;\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed from, address indexed to);\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner, "Not owner");\n', '        _;\n', '    }\n', '\n', '    function initOwned() internal {\n', '        require(!initialised, "Already initialised");\n', '        owner = msg.sender;\n', '        initialised = true;\n', '    }\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', "// BokkyPooBah's ZombieBabyAdoptionCentre\n", '//\n', '// Send 0 value or < fee tx to this contract to receive a single random NFT\n', '// Send >= fee tx to this contract to receive a set of NFTs\n', '//\n', '// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2021. The MIT Licence.\n', '// ----------------------------------------------------------------------------\n', 'contract ZombieBabyAdoptionCentre is Owned {\n', '\n', '    NFT public nft;\n', '    uint public paused;\n', '    uint public fee;\n', '    uint[] _ids;\n', '\n', '    event FeeUpdated(uint[] ids);\n', '    event IdsUpdated(uint[] ids);\n', '    event PausedToggled(bool paused);\n', '    event RefundedETH(uint amount);\n', '\n', '    constructor(NFT _nft, uint _fee, uint[] memory __ids) {\n', '        initOwned();\n', '        fee = _fee;\n', '        nft = _nft;\n', '        _setIds(__ids);\n', '    }\n', '\n', '    function setFee(uint _fee) public onlyOwner {\n', '        fee = _fee;\n', '    }\n', '\n', '    function _setIds(uint[] memory __ids) internal {\n', '        _ids = __ids;\n', '        emit IdsUpdated(__ids);\n', '    }\n', '\n', '    function setIds(uint[] memory __ids) public onlyOwner {\n', '        _setIds(__ids);\n', '    }\n', '\n', '    function ids() public view returns (uint[] memory __ids) {\n', '        return _ids;\n', '    }\n', '\n', '    function togglePaused() public onlyOwner {\n', '        paused = 1 - paused;\n', '        emit PausedToggled(paused == 1);\n', '    }\n', '\n', '    function withdraw() external onlyOwner {\n', '        payable(msg.sender).transfer(address(this).balance);\n', '    }\n', '\n', '    receive() external payable {\n', '        require(paused == 0, "Paused");\n', '\n', '        // Mint a random NFT\n', '        if (msg.value < fee) {\n', '            uint randomIndex = uint(keccak256(abi.encodePacked(block.difficulty, block.timestamp))) % _ids.length;\n', '            nft.mint(msg.sender, _ids[randomIndex], 1, "");\n', '\n', '        // Mint set\n', '        } else {\n', '            uint[] memory amounts = new uint[](_ids.length);\n', '            for (uint i = 0; i < _ids.length; i++) {\n', '                amounts[i] = 1;\n', '            }\n', '            nft.mintBatch(msg.sender, _ids, amounts, "");\n', '            uint refund = msg.value - fee;\n', '            if (refund > 0) {\n', '                payable(msg.sender).transfer(refund);\n', '                emit RefundedETH(refund);\n', '            }\n', '        }\n', '    }\n', '}']