['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-12\n', '*/\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev A token holder contract that will allow a beneficiary to extract the\n', ' * tokens after a given release time.\n', ' *\n', ' * Useful for simple vesting schedules like "advisors get all of their tokens\n', ' * after 1 year".\n', ' */\n', 'contract ArgoTokenVesting {\n', '    using SafeMath for uint256;\n', '\n', '    // ERC20 basic token contract being held\n', '    IERC20 private _token;\n', '\n', '    // beneficiary of tokens after they are released\n', '    address private _beneficiary;\n', '\n', '    // total balance of tokens sent to contract\n', '    uint256 public totalBalance;\n', '    // timestamp of release date and percent to be released\n', '    struct VestPeriodInfo {\n', '        uint256 releaseTime;\n', '        uint256 percent;\n', '        bool released;\n', '    }\n', '    // array of vesting period\n', '    VestPeriodInfo[] public vestPeriodInfoArray;\n', '\n', '    uint256 constant PRECISION = 10**25;\n', '    uint256 constant PERCENT = 100 * PRECISION;\n', '\n', '    constructor(\n', '        IERC20 token_,\n', '        address beneficiary_,\n', '        uint256[] memory releaseTimes_,\n', '        uint256[] memory percents_,\n', '        uint256 totalBalance_\n', '    ) {\n', '        // solhint-disable-next-line not-rely-on-time\n', '        require(\n', '            percents_.length == releaseTimes_.length,\n', '            "ArgoTokenVesting: there should be equal percents and release times values"\n', '        );\n', '        require(\n', '            beneficiary_ != address(0),\n', '            "ArgoTokenVesting: beneficiary address should not be zero address"\n', '        );\n', '        require(\n', '            address(token_) != address(0),\n', '            "ArgoTokenVesting: token address should not be zero address"\n', '        );\n', '\n', '        _token = token_;\n', '        for (uint256 i = 0; i < releaseTimes_.length; i++) {\n', '            vestPeriodInfoArray.push(\n', '                VestPeriodInfo({\n', '                    percent: percents_[i],\n', '                    releaseTime: releaseTimes_[i],\n', '                    released: false\n', '                })\n', '            );\n', '        }\n', '        _beneficiary = beneficiary_;\n', '        totalBalance = totalBalance_;\n', '    }\n', '\n', '    /**\n', '     * @return the token being held.\n', '     */\n', '    function token() public view virtual returns (IERC20) {\n', '        return _token;\n', '    }\n', '\n', '    /**\n', '     * @return the beneficiary of the tokens.\n', '     */\n', '    function beneficiary() public view virtual returns (address) {\n', '        return _beneficiary;\n', '    }\n', '\n', '    /**\n', '     * @return the time when the tokens are released.\n', '     */\n', '    function releaseTime(uint256 index) public view virtual returns (uint256) {\n', '        return vestPeriodInfoArray[index].releaseTime;\n', '    }\n', '\n', '    /**\n', '     * @return the percent of tokens to be released during a period.\n', '     */\n', '    function releasePercent(uint256 index)\n', '        public\n', '        view\n', '        virtual\n', '        returns (uint256)\n', '    {\n', '        return vestPeriodInfoArray[index].percent;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfers tokens held by timelock to beneficiary.\n', '     */\n', '    function release() public virtual {\n', '        // solhint-disable-next-line not-rely-on-time\n', '        uint256 amount;\n', '        for (uint256 i = 0; i < vestPeriodInfoArray.length; i++) {\n', '            VestPeriodInfo memory vestPeriodInfo = vestPeriodInfoArray[i];\n', '            if (vestPeriodInfo.releaseTime < block.timestamp) {\n', '                if (!vestPeriodInfo.released) {\n', '                    vestPeriodInfoArray[i].released = true;\n', '                    amount = amount.add(\n', '                        vestPeriodInfo\n', '                            .percent\n', '                            .mul(PRECISION)\n', '                            .mul(totalBalance)\n', '                            .div(PERCENT)\n', '                    );\n', '                }\n', '            } else {\n', '                break;\n', '            }\n', '        }\n', '        require(amount > 0, "TokenTimelock: no tokens to release");\n', '        token().transfer(_beneficiary, amount);\n', '    }\n', '}\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract ArgoVestingFactory is Ownable {\n', '    event AddressWhitelisted(address indexed beneficiary);\n', '    event VestingCreated(\n', '        address indexed beneficiary,\n', '        address indexed vestingAddress,\n', '        uint256 amount\n', '    );\n', '    event EmergencyWithdraw(address owner, uint256 amount);\n', '\n', '    // Argo Token Address\n', '    address public argoToken;\n', '\n', '    // Struct for white listed address\n', '    struct WhiteListedAddressInfo {\n', '        bool withdrawn;\n', '        uint256 amount;\n', '        address deployedVestingAddress;\n', '    }\n', '    //List of percent divisions\n', '    uint256[] public percentList;\n', '\n', '    // time difference epochs must be in same sequence as percent division, time will be calculated with current block time + timeDivsions [i]\n', '    uint256[] public epochsToRelease;\n', '\n', '    //mapping of address of their vesting contract with their address\n', '    mapping(address => bool) public tokenVestingContractMappingStatus;\n', '\n', '    //mapping of whiteListed users\n', '    mapping(address => WhiteListedAddressInfo) public whiteListedAddressMapping;\n', '\n', '    constructor(\n', '        address _argoAddress,\n', '        address[] memory _addressList,\n', '        uint256[] memory _percentList,\n', '        uint256[] memory _epochsToRelease,\n', '        uint256[] memory _amountList\n', '    ) {\n', '        require(_percentList.length > 0, "No percent list provided");\n', '        require(_addressList.length > 0, "No address List provided");\n', '        require(\n', '            _addressList.length == _amountList.length,\n', '            "Address  and amount should be of equal length"\n', '        );\n', '        require(\n', '            _epochsToRelease.length == _percentList.length,\n', '            "Time and percent array length should be same"\n', '        );\n', '\n', '        percentList = _percentList;\n', '        epochsToRelease = _epochsToRelease;\n', '        for (uint256 i = 0; i < _addressList.length; i++) {\n', '            tokenVestingContractMappingStatus[_addressList[i]] = true;\n', '            whiteListedAddressMapping[_addressList[i]].amount = _amountList[i];\n', '        }\n', '\n', '        argoToken = _argoAddress;\n', '    }\n', '\n', '    function addAddressesToWhiteList(\n', '        address[] memory _addressList,\n', '        uint256[] memory _amountList\n', '    ) public onlyOwner {\n', '        require(\n', '            _addressList.length == _amountList.length,\n', '            "Address  and amount should be of equal length"\n', '        );\n', '        for (uint256 i = 0; i < _addressList.length; i++) {\n', '            address _address = _addressList[i];\n', '\n', '            if (!tokenVestingContractMappingStatus[_address]) {\n', '                tokenVestingContractMappingStatus[_address] = true;\n', '                whiteListedAddressMapping[_address].amount = _amountList[i];\n', '            }\n', '\n', '            emit AddressWhitelisted(_address);\n', '        }\n', '    }\n', '\n', '    function removeAddressFromWhitelist(address _address) public onlyOwner {\n', '        delete tokenVestingContractMappingStatus[_address];\n', '        delete whiteListedAddressMapping[_address];\n', '    }\n', '\n', '    function createVesting() public {\n', '        WhiteListedAddressInfo memory whiteListedAddressInfo =\n', '            whiteListedAddressMapping[msg.sender];\n', '        require(\n', '            tokenVestingContractMappingStatus[msg.sender],\n', '            "Address not whitelisted"\n', '        );\n', '        require(\n', '            !whiteListedAddressInfo.withdrawn,\n', '            "Amount already withdrawn by address"\n', '        );\n', '        require(\n', '            whiteListedAddressInfo.amount > 0,\n', '            "Withdraw amount is not set"\n', '        );\n', '        whiteListedAddressMapping[msg.sender].withdrawn = true;\n', '\n', '        ArgoTokenVesting vesting =\n', '            new ArgoTokenVesting(\n', '                IERC20(argoToken),\n', '                msg.sender,\n', '                epochsToRelease,\n', '                percentList,\n', '                whiteListedAddressInfo.amount\n', '            );\n', '        whiteListedAddressMapping[msg.sender].deployedVestingAddress = address(\n', '            vesting\n', '        );\n', '        IERC20(argoToken).transfer(\n', '            address(vesting),\n', '            whiteListedAddressInfo.amount\n', '        );\n', '\n', '        emit VestingCreated(\n', '            msg.sender,\n', '            address(vesting),\n', '            whiteListedAddressInfo.amount\n', '        );\n', '    }\n', '\n', '    function emergencyWithdraw(uint256 withdrawAmount) external onlyOwner {\n', '        IERC20(argoToken).transfer(owner(), withdrawAmount);\n', '\n', '        emit EmergencyWithdraw(owner(), withdrawAmount);\n', '    }\n', '}']