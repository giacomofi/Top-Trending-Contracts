['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', 'import "./SafeMath.sol";\n', '\n', 'contract VestingVault {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    event ChangeBeneficiary(address oldBeneficiary, address newBeneficiary);\n', '\n', '    event Withdraw(address indexed to, uint256 amount);\n', '\n', '    string public name;\n', '\n', '    address public vestingToken;\n', '\n', '    uint256 public constant vestingPeriod = 30 days;\n', '\n', '    uint256 public constant vestingBatchs = 24;\n', '\n', '    uint256 public initialVestedAmount;\n', '\n', '    uint256 public vestingEndTimestamp;\n', '\n', '    address public beneficiary;\n', '\n', '    constructor (string memory name_, address vestingToken_, uint256 initialVestedAmount_, address beneficiary_) {\n', '        name = name_;\n', '        vestingToken = vestingToken_;\n', '        initialVestedAmount = initialVestedAmount_;\n', '        beneficiary = beneficiary_;\n', '        vestingEndTimestamp = block.timestamp + vestingPeriod.mul(vestingBatchs);\n', '    }\n', '\n', '    function setBeneficiary(address newBeneficiary) public {\n', '        require(msg.sender == beneficiary, "VestingVault.setBeneficiary: can only be called by beneficiary");\n', '        emit ChangeBeneficiary(beneficiary, newBeneficiary);\n', '        beneficiary = newBeneficiary;\n', '    }\n', '\n', '    function getRemainingLockedAmount() public view returns (uint256) {\n', '        //release discretely on a "vestingPeriod" basis (e.g. monthly basis if vestingPeriod = 30 days)\n', '        //after every vestingPeriod, 1 vestingBatch (1/vestingBatchs of initialVestedAmount) is released\n', '        //numOfLockedBatches = vestingEndTimestamp.sub(block.timestamp).div(vestingPeriod).add(1);\n', '        //ratio remaining locked = (1/vestingBatchs) * numOfLockedBatches\n', '        uint256 currentTimestamp = block.timestamp;\n', '        if (currentTimestamp >= vestingEndTimestamp) {\n', '            return 0;\n', '        } else {\n', '            return vestingEndTimestamp.sub(currentTimestamp).div(vestingPeriod).add(1).mul(initialVestedAmount).div(vestingBatchs);\n', '        }\n', '    }\n', '\n', '    function withdraw(address to, uint256 amount) public {\n', '        require(msg.sender == beneficiary, "VestingVault.withdraw: can only be called by beneficiary");\n', '        require(to != address(0), "VestingVault.withdraw: withdraw to 0 address");\n', '        IToken(vestingToken).transfer(to, amount);\n', '\n', '        uint256 balance = IToken(vestingToken).balanceOf(address(this));\n', '        require(balance >= getRemainingLockedAmount(), "VestingVault.withdraw: amount exceeds allowed by schedule");\n', '\n', '        emit Withdraw(to, amount);\n', '    }\n', '\n', '}\n', '\n', 'interface IToken {\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address to, uint256 amount) external returns (bool);\n', '}']