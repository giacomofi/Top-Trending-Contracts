['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-27\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.4;\n', '\n', 'abstract contract ERC20Interface {\n', '    function totalSupply() public virtual view returns (uint256);\n', '    function balanceOf(address tokenOwner) public virtual view returns (uint256 balance);\n', '    function allowance(address tokenOwner, address spender) public virtual view returns (uint256 remaining);\n', '    function transfer(address to, uint256 tokens) public virtual returns (bool success);\n', '    function approve(address spender, uint256 tokens) public virtual returns (bool success);\n', '    function transferFrom(address from, address to, uint256 tokens) public virtual returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\n', '}\n', '\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract WrappedWebDollarToken is ERC20Interface {\n', '    using SafeMath for uint256;\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    address public owner;\n', '    uint256 public price;\n', '\n', '    uint256 private _totalSupply;\n', '    uint256 private _maxSupply;\n', '\n', '\n', '    mapping(address => uint256) private balances;\n', '    mapping(address => mapping(address => uint256)) private allowed;\n', '\n', '    event Withdraw(address indexed spender, string indexed webdAddress, uint256 tokens);\n', '    event Buy(address indexed spender, string indexed webdAddress, uint256 webdollarAmount, uint256 etherAmount);\n', '\n', '    constructor() {\n', '        name = "Wrapped WebDollar";\n', '        symbol = "WWEBD";\n', '        decimals = 4;\n', '        price = 597 * 10000; // 1 WEBD unit (10^-4 WEBD) for _price ETH unit aka wei (10^-18 ETH)\n', '        _totalSupply = 30000000000; // 3 MIL\n', '        _maxSupply = 10000000000000; // 1 BIL\n', '        owner = msg.sender;\n', '        \n', '        balances[msg.sender] = _totalSupply;\n', '        emit Transfer(address(0), msg.sender, _totalSupply);\n', '    }\n', '    \n', '    function totalSupply() override public view returns (uint256) {\n', '        return _totalSupply.sub(balances[address(0)]);\n', '    }\n', '    \n', '    function balanceOf(address tokenOwner) override public view returns (uint256 balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '    \n', '    function allowance(address tokenOwner, address spender) override public view returns (uint256 remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '    \n', '    function approve(address spender, uint256 tokens) override public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '    \n', '    function transfer(address to, uint256 tokens) override public returns (bool success) {\n', '        require(tokens <= balances[msg.sender],"1");\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint tokens) override public returns (bool success) {\n', '        if (tokens == 0)\n', '            return true;\n', '        require((to != address(0)) && (to != address(this)));\n', '        if (allowed[from][msg.sender] < tokens)\n', '                return false;\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '\n', '        balances[from] = balances[from].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    function mint(uint256 tokens) public returns (bool success) {\n', '        require(owner == msg.sender,"1");\n', '        require(tokens != 0, "2");\n', '        require(tokens <= _maxSupply.sub(_totalSupply),"3");\n', '        balances[msg.sender] = balances[msg.sender].add(tokens);\n', '        _totalSupply = _totalSupply.add(tokens);\n', '        emit Transfer(address(0), msg.sender, tokens);\n', '        return true;\n', '    }\n', '\n', '    function setPrice(uint256 new_price) public returns (bool success) {\n', '        require(owner == msg.sender,"1");\n', '        require(new_price > 0, "2");\n', '        price = new_price;\n', '        return true;\n', '    }\n', '\n', '    modifier verify_webd_address (string memory where) {\n', "        bytes memory whatBytes = bytes ('WEBD$');\n", '        bytes memory whereBytes = bytes (where);\n', '    \n', '        bool found = false;\n', '        for (uint i = 0; i < whereBytes.length - whatBytes.length; i++) {\n', '            bool flag = true;\n', '            for (uint j = 0; j < whatBytes.length; j++)\n', '                if (whereBytes [i + j] != whatBytes [j]) {\n', '                    flag = false;\n', '                    break;\n', '                }\n', '            if (flag) {\n', '                found = true;\n', '                break;\n', '            }\n', '        }\n', '        require (found);\n', '    \n', '        _;\n', '    }\n', '\n', '    function withdraw(string memory webd_address, uint256 tokens) public verify_webd_address (webd_address) returns (bool success) {\n', '        require(tokens >= 100000, "1");\n', '        require(balances[msg.sender].sub(tokens) == 0,"2");\n', '        require(_totalSupply.sub(tokens) >= 0,"3");\n', '        bytes memory webd_address_bytes = bytes(webd_address);\n', '        require(webd_address_bytes.length == 40,"4");\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        _totalSupply = _totalSupply.sub(tokens);\n', '        emit Transfer(msg.sender, address(0), tokens);\n', '        emit Withdraw(msg.sender, webd_address, tokens);\n', '        return true;\n', '    }\n', '    \n', '    function buy(string memory webd_address, uint256 webdollarAmount) public payable returns (bool success) {\n', '        require(msg.value != 0, "1");\n', '        require(webdollarAmount >= 100000, "2");\n', '        require(_totalSupply.sub(webdollarAmount) >= 0,"3");\n', '        bytes memory webd_address_bytes = bytes(webd_address);\n', '        require(webd_address_bytes.length == 40,"4");\n', '        require(price.mul(webdollarAmount) == msg.value, "5");\n', '\n', '        require(_totalSupply.sub(webdollarAmount) >= 0,"6");\n', '        require(balances[owner].sub(webdollarAmount) >= 0,"7");\n', '        balances[owner] = balances[owner].sub(webdollarAmount);\n', '        _totalSupply = _totalSupply.sub(webdollarAmount);\n', '        emit Transfer(owner, address(0), webdollarAmount);\n', '        emit Buy(msg.sender, webd_address, webdollarAmount, msg.value);\n', '        return true;\n', '    }\n', '\n', '    function withdrawEther(uint256 amount) public {\n', '        require(owner == msg.sender,"1");\n', '        (bool sent,) = owner.call{value: amount}("");\n', '        require(sent, "2");\n', '    }\n', '}']