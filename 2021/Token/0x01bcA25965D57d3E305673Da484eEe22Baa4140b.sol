['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-10\n', '*/\n', '\n', '// File: contracts/erc20/IERC20.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/utils/SafeMath.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', 'library SafeMath {\n', '    function safeAdd(uint a, uint b) public pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a, "add");\n', '    }\n', '    function safeSub(uint a, uint b) public pure returns (uint c) {\n', '        require(b <= a, "sub");\n', '        c = a - b;\n', '    }\n', '    function safeMul(uint a, uint b) public pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b, "mul");\n', '    }\n', '    function safeDiv(uint a, uint b) public pure returns (uint c) {\n', '        require(b > 0, "div");\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '// File: contracts/ystream/IYieldStream.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', 'contract IYieldStream{\n', '\n', '  string public name;\n', '\n', '  function target_token() public view returns(address);\n', '\n', '  function getVirtualPrice() public view returns(uint256);\n', '\n', '  function getDecimal() public pure returns(uint256);\n', '\n', '  function getPriceDecimal() public pure returns(uint256);\n', '}\n', '\n', '// File: contracts/ystream/xSushiStream.sol\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', '\n', '\n', '\n', '\n', 'contract xSushiInterface is IERC20{\n', '  IERC20 public sushi;\n', '}\n', '\n', 'contract xSushiStream is IYieldStream{\n', '  using SafeMath for uint256;\n', '  xSushiInterface public xsushi;\n', '\n', '  constructor() public{\n', '    name = "xSushi yield stream";\n', '    xsushi = xSushiInterface(address(0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272));\n', '  }\n', '\n', '\n', '  function target_token() public view returns(address){\n', '    return address(xsushi);\n', '  }\n', '\n', '  function getVirtualPrice() public view returns(uint256){\n', '    if(xsushi.totalSupply() == 0){\n', '      return 0;\n', '    }\n', '\n', '    return xsushi.sushi().balanceOf(address(xsushi)).safeMul(1e18).safeDiv(xsushi.totalSupply());\n', '  }\n', '\n', '  function getDecimal() public pure returns(uint256){\n', '    return 1e18;\n', '  }\n', '\n', '  function getPriceDecimal() public pure returns(uint256){\n', '    return 1e18;\n', '  }\n', '}']