['pragma solidity ^0.7.0;\n', '\n', 'import "./IERC165.sol";\n', 'import "./SafeMath.sol";\n', 'import "./IERC20.sol";\n', 'import "./ISFT.sol";\n', 'import "./IFaces.sol";\n', 'import "./Context.sol";\n', 'import "./Ownable.sol";\n', '\n', '/**\n', ' *\n', ' * SFT Contract (The native token of SatoshiFaces)\n', ' * @dev Extends standard ERC20 contract\n', ' */\n', 'contract SFT is Context, Ownable, ISFT {\n', '    using SafeMath for uint256;\n', '\n', '    // Constants\n', '    uint256 public constant SECONDS_IN_A_DAY = 86400;\n', '    uint256 public constant SECONDS_IN_A_YEAR = SECONDS_IN_A_DAY * 365;\n', '    \n', '    uint256 public constant INITIAL_ALLOTMENT = 500 * (10 ** 18);\n', '\n', '    // Public variables\n', '    uint256 public constant EMISSION_START = 1617667200; // Tuesday, April 6, 2021 0:00:00 GMT\n', '    uint256 public constant EMISSION_END = EMISSION_START + (SECONDS_IN_A_YEAR * 10); // 10 years\n', '    \n', '    // emission rate decreases with a reduction factor of 0.75 per year\n', '    uint256 public constant EMISSION_PER_DAY_YEAR_0 = 5.00 * (10 ** 18);\n', '    uint256 public constant EMISSION_PER_DAY_YEAR_1 = 3.75 * (10 ** 18);\n', '    uint256 public constant EMISSION_PER_DAY_YEAR_2 = 2.81 * (10 ** 18);\n', '    uint256 public constant EMISSION_PER_DAY_YEAR_3 = 2.11 * (10 ** 18);\n', '    uint256 public constant EMISSION_PER_DAY_YEAR_4 = 1.58 * (10 ** 18);\n', '    uint256 public constant EMISSION_PER_DAY_YEAR_5 = 1.19 * (10 ** 18);\n', '    uint256 public constant EMISSION_PER_DAY_YEAR_6 = 0.89 * (10 ** 18);\n', '    uint256 public constant EMISSION_PER_DAY_YEAR_7 = 0.67 * (10 ** 18);\n', '    uint256 public constant EMISSION_PER_DAY_YEAR_8 = 0.50 * (10 ** 18);\n', '    uint256 public constant EMISSION_PER_DAY_YEAR_9 = 0.36 * (10 ** 18);\n', '    \n', '    uint256[10] public EMISSION_PER_DAY_YEARS = [  EMISSION_PER_DAY_YEAR_0, \n', '                                                EMISSION_PER_DAY_YEAR_1, \n', '                                                EMISSION_PER_DAY_YEAR_2,\n', '                                                EMISSION_PER_DAY_YEAR_3,\n', '                                                EMISSION_PER_DAY_YEAR_4,\n', '                                                EMISSION_PER_DAY_YEAR_5,\n', '                                                EMISSION_PER_DAY_YEAR_6,\n', '                                                EMISSION_PER_DAY_YEAR_7,\n', '                                                EMISSION_PER_DAY_YEAR_8,\n', '                                                EMISSION_PER_DAY_YEAR_9];\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '    \n', '    mapping(uint256 => uint256) private _lastClaim;\n', '    \n', '    mapping(uint256 => uint256) private _claimedAmount;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '    address private _facesAddress;\n', '    address private _addonsAddress;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor () {\n', '        _name = "SatoshiFinanceToken";\n', '        _symbol = "SFT";\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '    \n', '    /**\n', '     * @dev When accumulated SFTs have last been claimed for a SatoshiFaces index\n', '     */\n', '    function lastClaim(uint256 tokenIndex) public view returns (uint256) {\n', '        require(IFaces(_facesAddress).ownerOf(tokenIndex) != address(0), "Owner cannot be 0 address");\n', '        require(tokenIndex < IFaces(_facesAddress).totalSupply(), "NFT at index has not been minted yet");\n', '\n', '        uint256 lastClaimed = uint256(_lastClaim[tokenIndex]) != 0 ? uint256(_lastClaim[tokenIndex]) : EMISSION_START;\n', '        return lastClaimed;\n', '    }\n', '    \n', '    /**\n', '     * @dev Total accumulated SFT tokens for all existing SatoshiFace NFTs.\n', '     */\n', '    function totalAccumulatedSupply() public view override returns (uint256) {\n', '        require(block.timestamp > EMISSION_START, "Emission has not started yet");\n', '        require(IFaces(_facesAddress).ownerOf(0) != address(0), "Owner of NFT #0 cannot be 0 address");\n', '        require(0 < IFaces(_facesAddress).totalSupply(), "No NFTs have been minted yet");\n', '        \n', '        uint256 nftSupply = IFaces(_facesAddress).totalSupply();\n', '        return nftSupply.mul(totalAccumulated(0));\n', '    }\n', '    \n', '    /**\n', '     * @dev Accumulated SFT tokens for a SatoshiFaces token index.\n', '     */\n', '    function accumulated(uint256 tokenIndex) public view override returns (uint256) {\n', '        require(block.timestamp > EMISSION_START, "Emission has not started yet");\n', '        require(IFaces(_facesAddress).ownerOf(tokenIndex) != address(0), "Owner cannot be 0 address");\n', '        require(tokenIndex < IFaces(_facesAddress).totalSupply(), "NFT at index has not been minted yet");\n', '\n', '        uint256 lastClaimed = lastClaim(tokenIndex);\n', '\n', '        // sanity check if last claim was on or after emission end\n', '        if (lastClaimed >= EMISSION_END) return 0;\n', '\n', '        uint256 accumulatedQty = totalAccumulated(tokenIndex).sub(totalClaimed(tokenIndex));\n', '        return accumulatedQty;\n', '    }\n', '    \n', '    /**\n', '     * @dev Lifetime Accumulated SFT tokens for a SatoshiFaces token index.\n', '     */\n', '    function totalAccumulated(uint256 tokenIndex) public view override returns (uint256) {\n', '        require(block.timestamp > EMISSION_START, "Emission has not started yet");\n', '        require(IFaces(_facesAddress).ownerOf(tokenIndex) != address(0), "Owner cannot be 0 address");\n', '        require(tokenIndex < IFaces(_facesAddress).totalSupply(), "NFT at index has not been minted yet");\n', '        \n', '        uint256 nowTime = block.timestamp < EMISSION_END ? block.timestamp : EMISSION_END;\n', '        uint256 elapsedTime = nowTime.sub(EMISSION_START);\n', '        uint256 yearsElapsed = elapsedTime.div(SECONDS_IN_A_YEAR);\n', '        uint256 totalAmountAccumulated = 0;\n', '        uint256 timeAccountedFor = 0;\n', '        \n', '        // amount accumulated in each year\n', '        for(uint year = 0; year < yearsElapsed; year++) {\n', '            uint256 emissionPerDayForYear = EMISSION_PER_DAY_YEARS[year];\n', '            uint256 yearAccumulated = emissionPerDayForYear.mul(365);\n', '            totalAmountAccumulated = totalAmountAccumulated.add(yearAccumulated);\n', '            timeAccountedFor = timeAccountedFor.add(SECONDS_IN_A_YEAR);\n', '        }\n', '        // amount accumulated since last full year\n', '        if(elapsedTime > timeAccountedFor && yearsElapsed < 10) {\n', '            uint256 remainingTime = elapsedTime.sub(timeAccountedFor);\n', '            uint256 currentEmissionRate = EMISSION_PER_DAY_YEARS[yearsElapsed];\n', '            uint256 remainingAccumulated = remainingTime.mul(currentEmissionRate).div(SECONDS_IN_A_DAY);\n', '            totalAmountAccumulated = totalAmountAccumulated.add(remainingAccumulated);\n', '        }\n', '        // add initial allotment\n', '        totalAmountAccumulated = totalAmountAccumulated.add(INITIAL_ALLOTMENT);\n', '        \n', '        return totalAmountAccumulated;\n', '    }\n', '    \n', '    /**\n', '     * @dev Lifetime SFT tokens claimed from a token index SatoshiFaces NFT\n', '     */\n', '    function totalClaimed(uint256 tokenIndex) public view override returns (uint256) {\n', '        require(IFaces(_facesAddress).ownerOf(tokenIndex) != address(0), "Owner cannot be 0 address");\n', '        require(tokenIndex < IFaces(_facesAddress).totalSupply(), "NFT at index has not been minted yet");\n', '        \n', '        uint256 claimed = uint256(_claimedAmount[tokenIndex]) >= 0 ? uint256(_claimedAmount[tokenIndex]) : 0;\n', '        return claimed;\n', '    }\n', '\n', '    /**\n', '     * @dev Set right after deployment and verified\n', '     */\n', '    function setFacesAddress(address facesAddress) onlyOwner public {\n', '        require(_facesAddress == address(0), "Already set");\n', '        _facesAddress = facesAddress;\n', '    }\n', '    \n', '    /**\n', '     * @dev To be set at a later date when the platform is developed\n', '     */\n', '    function setAddonsAddress(address addonsAddress) onlyOwner public {\n', '        _addonsAddress = addonsAddress;\n', '    }\n', '    \n', '    /**\n', '     * @dev Claim mints SFTs and supports multiple SatoshiFaces token indices at once.\n', '     */\n', '    function claim(uint256[] memory tokenIndices) public returns (uint256) {\n', '        require(block.timestamp > EMISSION_START, "Emission has not started yet");\n', '\n', '        uint256 totalClaimQty = 0;\n', '        for (uint i = 0; i < tokenIndices.length; i++) {\n', '            // Sanity check for non-minted index\n', '            require(tokenIndices[i] < IFaces(_facesAddress).totalSupply(), "NFT at index has not been minted yet");\n', '            // Duplicate token index check\n', '            for (uint j = i + 1; j < tokenIndices.length; j++) {\n', '                require(tokenIndices[i] != tokenIndices[j], "Duplicate token index");\n', '            }\n', '\n', '            uint tokenIndex = tokenIndices[i];\n', '            require(IFaces(_facesAddress).ownerOf(tokenIndex) == msg.sender, "Sender is not the owner");\n', '\n', '            uint256 claimQty = accumulated(tokenIndex);\n', '            if (claimQty != 0) {\n', '                _lastClaim[tokenIndex] = block.timestamp;\n', '                uint256 alreadyClaimed = _claimedAmount[tokenIndex];\n', '                _claimedAmount[tokenIndex] = alreadyClaimed.add(claimQty);\n', '                totalClaimQty = totalClaimQty.add(claimQty);\n', '            }\n', '        }\n', '\n', '        require(totalClaimQty != 0, "No accumulated SFT");\n', '        _mint(msg.sender, totalClaimQty); \n', '        return totalClaimQty;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        // Approval check is skipped if the caller of transferFrom is the SatoshiFaces or SatoshiFaces Addons contract. For better UX.\n', '        if (msg.sender == _facesAddress) {\n', '            // caller of transferFrom is the SatoshiFaces contract\n', '        }\n', '        else if(_addonsAddress != address(0) && msg.sender == _addonsAddress) {\n', '            // addons contract address is set and caller is from the SatoshiFaces Addons contract\n', '        }\n', '        else {\n', '            _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    // ++\n', '    /**\n', '     * @dev Burns a quantity of tokens held by the caller.\n', '     *\n', '     * Emits an {Transfer} event to 0 address\n', '     *\n', '     */\n', '    function burn(uint256 burnQuantity) public virtual override returns (bool) {\n', '        _burn(msg.sender, burnQuantity);\n', '        return true;\n', '    }\n', '    // ++\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}']