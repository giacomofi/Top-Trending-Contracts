['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-20\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface IERC20 {\n', '    \n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address tokenOwner) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address tokenOwner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    \n', '    address private owner = msg.sender;\n', '    \n', '    function getOwner() public view returns (address) {\n', '        return owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "ERC20: permission denied");\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner returns (bool) {\n', '        owner = newOwner;\n', '        return true;\n', '    }\n', '    \n', '}\n', '\n', '\n', '/**\n', ' * \n', ' * Fuck you token\n', ' * \n', ' * 100% added into uniswap as liquidity, fuck you dogecoin and Shiba Inu\n', ' * \n', ' */\n', 'contract FCKToken is IERC20, Ownable {\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    //Fuck you token, owner will take 0.6% fee\n', '    address public feeTo = 0xa4f52e498af8b17F29FcF9F45f7250da0023d7CB;\n', '\n', '    string public name = "Fuck you Token";\n', '    string public symbol = "FCKT";\n', '    uint256 public decimals = 18;\n', '    uint256 private _totalSupply = 0;\n', '    \n', '    mapping(address => uint256) private balances;\n', '    mapping(address => mapping(address => uint256)) private allowed;\n', '    \n', '    constructor() {\n', '       mint(msg.sender, (10 ** decimals) ** 2);\n', '    }\n', '\n', '    function mint(address tokenOwner, uint256 amount) public onlyOwner returns (uint256) {\n', '        _totalSupply = _totalSupply.add(amount);\n', '        balances[tokenOwner] = balances[tokenOwner].add(amount);\n', '        emit Transfer(address(0), tokenOwner, amount);\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    function burn(address tokenOwner, uint256 amount) public returns (uint256) {\n', '        require(msg.sender == getOwner() || msg.sender == tokenOwner, "ERC20: permission denied");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        balances[tokenOwner] = balances[tokenOwner].sub(amount);\n', '        emit Transfer(tokenOwner, address(0), amount);\n', '        return balances[tokenOwner];\n', '    }\n', '    \n', '    function totalSupply() public override view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '    \n', '    function balanceOf(address tokenOwner) public override view returns (uint256) {\n', '        return balances[tokenOwner];    \n', '    }\n', '    \n', '    function allowance(address tokenOwner, address spender) public override view returns (uint) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '    \n', '    function approve(address spender, uint256 amount) public override returns (bool) {\n', '        _approve(msg.sender, spender, amount);\n', '        emit Approval(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '    \n', '    function transfer(address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(msg.sender, recipient, amount);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, msg.sender, allowed[sender][msg.sender].sub(amount));\n', '        return true;\n', '    }\n', '    \n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '        \n', '        uint256 fee = 0;\n', '        if (amount < 1000) {\n', '            fee = 6;\n', '        } else {\n', '            fee = amount * 6 / 1000;\n', '        }\n', '        require(balances[sender] >= amount.add(fee), "ERC20: transfer sender amount exceeds balance");\n', '        \n', '        balances[sender] = balances[sender].sub(amount.add(fee));\n', '        balances[recipient] = balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '        \n', '        \n', '        // Trigger notification and added fee\n', '        balances[feeTo] = balances[feeTo].add(fee);\n', '        emit Transfer(sender, feeTo, fee);\n', '        \n', '    }\n', '    \n', '    function _approve(address tokenOwner, address spender, uint256 amount) internal {\n', '        allowed[tokenOwner][spender] = amount;\n', '    }\n', '    \n', '}']