['pragma solidity ^0.6.2;\n', 'import "./Ownable.sol";\n', 'import "./ERC721.sol";\n', '\n', '\n', 'contract CryptoPeeps is ERC721, Ownable {\n', '\n', '    mapping (uint256 => uint256) private _peepsMinted;\n', '\n', '    constructor() public ERC721("CryptoPeeps", "CRYPTOPEEPS") {}\n', '\n', '    function setBaseURI(string memory baseURI) onlyOwner public {\n', '        _setBaseURI(baseURI);\n', '    }\n', '    \n', '    function withdraw() onlyOwner public {\n', '        uint balance = address(this).balance;\n', '        msg.sender.transfer(balance);\n', '    }\n', '    \n', '    function getPeepPrice(uint256 twitterId) public view returns (uint256) {\n', '        uint256 peepsMinted = _peepsMinted[twitterId];\n', '        if (peepsMinted == 2) {\n', '            return 10000000000000000000; // 10.0 ETH\n', '        } else if (peepsMinted == 1) {\n', '            return 1000000000000000000; // 1.0 ETH\n', '        } else {\n', '            return 100000000000000000; // 0.1 ETH \n', '        }\n', '    }\n', '\n', '\n', '    function mintPeep(uint256 twitterId) public payable returns (uint256) {\n', '        require(_peepsMinted[twitterId] < 3, "This CryptoPeep has reached it\'s minting limit");\n', '        require(msg.value == getPeepPrice(twitterId), "Ether value sent is incorrect");\n', '\n', '        uint256 cryptoPeepId = totalSupply();\n', '\n', '        _mint(msg.sender, cryptoPeepId);\n', '        _setTokenURI(cryptoPeepId, twitterId.toString());\n', '        _peepsMinted[twitterId] = _peepsMinted[twitterId] + 1;\n', '\n', '        return cryptoPeepId;\n', '    }\n', '}']