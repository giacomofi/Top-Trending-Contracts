['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-07\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function decimals() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != 0x0 && codehash != accountHash);\n', '    }\n', '}\n', '\n', 'library SafeERC20 {\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint value) internal {\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'contract contractwallet {\n', '    using SafeERC20 for IERC20;\n', '\n', '    /// @notice EIP-20 token name for this token\n', '    string public constant name = "Ahdai";\n', '\n', '    /// @notice EIP-20 token symbol for this token\n', '    string public constant symbol = "Ahdai";\n', '\n', '    /// @notice EIP-20 token decimals for this token\n', '    uint8 public constant decimals = 8;\n', '\n', '    /// @notice Total number of tokens in circulation\n', '    uint public totalSupply = 0;\n', '    \n', '    IERC20 public constant USDC = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\n', '\n', '    address public owner;\n', '    address public pendingOwner;\n', '    mapping(address => bool) public members;\n', '\n', '    mapping(address => mapping (address => uint)) internal allowances;\n', '    mapping(address => uint) internal balances;\n', '\n', '    function mint(address account, uint amount) public {\n', '        require(members[msg.sender], "!member");\n', '        _mint(account, amount);\n', '    }\n', '    \n', '    function burn(address account, uint amount) public {\n', '        require(members[msg.sender], "!member");\n', '        _burn(account, amount);\n', '    }\n', '    \n', '    function setOwner(address _owner) public {\n', '        require(msg.sender == owner, "!owner");\n', '        pendingOwner = _owner;\n', '    }\n', '    \n', '    function acceptOwner() public {\n', '        require(msg.sender == pendingOwner, "!pendingOwner");\n', '        owner = pendingOwner;\n', '    }\n', '    \n', '    function addmember(address _member) public {\n', '        require(msg.sender == owner, "!owner");\n', '        members[_member] = true;\n', '    }\n', '    \n', '    function removemember(address _member) public {\n', '        require(msg.sender == owner, "!owner");\n', '        members[_member] = false;\n', '    }\n', '\n', '    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\n', '        require(n < 2**32, errorMessage);\n', '        return uint32(n);\n', '    }\n', '\n', '    /// @notice The standard EIP-20 transfer event\n', '    event Transfer(address indexed from, address indexed to, uint amount);\n', '\n', '    /// @notice The standard EIP-20 approval event\n', '    event Approval(address indexed owner, address indexed spender, uint amount);\n', '    \n', '    constructor () {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function _mint(address dst, uint amount) internal {\n', '        // mint the amount\n', '        totalSupply += amount;\n', '        // transfer the amount to the recipient\n', '        balances[dst] += amount;\n', '        emit Transfer(address(0), dst, amount);\n', '    }\n', '    \n', '    function _burn(address dst, uint amount) internal {\n', '        // burn the amount\n', '        totalSupply -= amount;\n', '        // transfer the amount from the recipient\n', '        balances[dst] -= amount;\n', '        emit Transfer(dst, address(0), amount);\n', '    }\n', '    \n', '    function swapUsdcAll() external {\n', '        _swapUsdc(USDC.balanceOf(msg.sender));\n', '    }\n', '    \n', '    function swapUsdc(uint amount) external {\n', '        _swapUsdc(amount);\n', '    }\n', '    \n', '    function _swapUsdc(uint amount) internal {\n', '        USDC.safeTransferFrom(msg.sender, address(this), amount);\n', '        _mint(msg.sender, amount * 10);\n', '    }\n', '\n', '    function withdrawToken(address tokenContract, uint amount) external {\n', '        require(members[msg.sender], "!member");\n', '        IERC20 token = IERC20(tokenContract);\n', '        _withdraw(token, amount);\n', '    }\n', '\n', '    function withdrawEther(uint amount) external {\n', '        require(members[msg.sender], "!member");\n', '        address addr = msg.sender;\n', '        address payable wallet = payable(addr);\n', '        wallet.transfer(amount);\n', '    }\n', '    \n', '    function withdrawEtherAll() external {\n', '        require(members[msg.sender], "!member");\n', '        address addr = msg.sender;\n', '        address payable wallet = payable(addr);\n', '        wallet.transfer(address(this).balance);\n', '    }\n', '\n', '    function _withdraw(IERC20 token, uint amount) internal {\n', '        token.safeTransfer(msg.sender, amount);\n', '        //emit Transfer(address(this), msg.sender, amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\n', '     * @param account The address of the account holding the funds\n', '     * @param spender The address of the account spending the funds\n', '     * @return The number of tokens approved\n', '     */\n', '    function allowance(address account, address spender) external view returns (uint) {\n', '        return allowances[account][spender];\n', '    }\n', '\n', '    /**\n', '     * @notice Approve `spender` to transfer up to `amount` from `src`\n', '     * @dev This will overwrite the approval amount for `spender`\n', '     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n', '     * @param spender The address of the account which may transfer tokens\n', '     * @param amount The number of tokens that are approved (2^256-1 means infinite)\n', '     * @return Whether or not the approval succeeded\n', '     */\n', '    function approve(address spender, uint amount) external returns (bool) {\n', '        allowances[msg.sender][spender] = amount;\n', '\n', '        emit Approval(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Get the number of tokens held by the `account`\n', '     * @param account The address of the account to get the balance of\n', '     * @return The number of tokens held\n', '     */\n', '    function balanceOf(address account) external view returns (uint) {\n', '        return balances[account];\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n', '     * @param dst The address of the destination account\n', '     * @param amount The number of tokens to transfer\n', '     * @return Whether or not the transfer succeeded\n', '     */\n', '    function transfer(address dst, uint amount) external returns (bool) {\n', '        _transferTokens(msg.sender, dst, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer `amount` tokens from `src` to `dst`\n', '     * @param src The address of the source account\n', '     * @param dst The address of the destination account\n', '     * @param amount The number of tokens to transfer\n', '     * @return Whether or not the transfer succeeded\n', '     */\n', '    function transferFrom(address src, address dst, uint amount) external returns (bool) {\n', '        address spender = msg.sender;\n', '        uint spenderAllowance = allowances[src][spender];\n', '\n', '        if (spender != src && spenderAllowance != type(uint).max) {\n', '            uint newAllowance = spenderAllowance - amount;\n', '            allowances[src][spender] = newAllowance;\n', '\n', '            emit Approval(src, spender, newAllowance);\n', '        }\n', '\n', '        _transferTokens(src, dst, amount);\n', '        return true;\n', '    }\n', '\n', '    function _transferTokens(address src, address dst, uint amount) internal {\n', '        balances[src] -= amount;\n', '        balances[dst] += amount;\n', '        \n', '        emit Transfer(src, dst, amount);\n', '    }\n', '\n', '    function _getChainId() internal view returns (uint) {\n', '        uint chainId;\n', '        assembly { chainId := chainid() }\n', '        return chainId;\n', '    }\n', '}']