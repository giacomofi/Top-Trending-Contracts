['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-24\n', '*/\n', '\n', 'pragma solidity ^0.6.6;\n', '\n', '\n', '// SPDX-License-Identifier: MIT\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '  struct Role {\n', '    mapping(address => bool) bearer;\n', '  }\n', '\n', '  /**\n', '   * @dev Give an account access to this role.\n', '   */\n', '  function add(Role storage role, address account) internal {\n', '    require(!has(role, account), "Roles: account already has role");\n', '    role.bearer[account] = true;\n', '  }\n', '\n', '  /**\n', "   * @dev Remove an account's access to this role.\n", '   */\n', '  function remove(Role storage role, address account) internal {\n', '    require(has(role, account), "Roles: account does not have role");\n', '    role.bearer[account] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev Check if an account has this role.\n', '   * @return bool\n', '   */\n', '  function has(Role storage role, address account) internal view returns (bool) {\n', '    require(account != address(0), "Roles: account is the zero address");\n', '    return role.bearer[account];\n', '  }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'contract PauserRole is Context {\n', '  using Roles for Roles.Role;\n', '\n', '  event PauserAdded(address indexed account);\n', '  event PauserRemoved(address indexed account);\n', '\n', '  Roles.Role private _pausers;\n', '\n', '  constructor() internal {\n', '    _addPauser(_msgSender());\n', '  }\n', '\n', '  modifier onlyPauser() {\n', '    require(isPauser(_msgSender()), "PauserRole: caller does not have the Pauser role");\n', '    _;\n', '  }\n', '\n', '  function isPauser(address account) public view returns (bool) {\n', '    return _pausers.has(account);\n', '  }\n', '\n', '  function addPauser(address account) public onlyPauser {\n', '    _addPauser(account);\n', '  }\n', '\n', '  function renouncePauser() public {\n', '    _removePauser(_msgSender());\n', '  }\n', '\n', '  function _addPauser(address account) internal {\n', '    _pausers.add(account);\n', '    emit PauserAdded(account);\n', '  }\n', '\n', '  function _removePauser(address account) internal {\n', '    _pausers.remove(account);\n', '    emit PauserRemoved(account);\n', '  }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'contract Pausable is Context, PauserRole {\n', '  /**\n', '   * @dev Emitted when the pause is triggered by a pauser (`account`).\n', '   */\n', '  event Paused(address account);\n', '\n', '  /**\n', '   * @dev Emitted when the pause is lifted by a pauser (`account`).\n', '   */\n', '  event Unpaused(address account);\n', '\n', '  bool private _paused;\n', '\n', '  /**\n', '   * @dev Initializes the contract in unpaused state. Assigns the Pauser role\n', '   * to the deployer.\n', '   */\n', '  constructor() internal {\n', '    _paused = false;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns true if the contract is paused, and false otherwise.\n', '   */\n', '  function paused() public view returns (bool) {\n', '    return _paused;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!_paused, "Pausable: paused");\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(_paused, "Pausable: not paused");\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Called by a pauser to pause, triggers stopped state.\n', '   */\n', '  function pause() public onlyPauser whenNotPaused {\n', '    _paused = true;\n', '    emit Paused(_msgSender());\n', '  }\n', '\n', '  /**\n', '   * @dev Called by a pauser to unpause, returns to normal state.\n', '   */\n', '  function unpause() public onlyPauser whenPaused {\n', '    _paused = false;\n', '    emit Unpaused(_msgSender());\n', '  }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'contract PoolTokenWrapper {\n', '  using SafeMath for uint256;\n', '  IERC20 public token;\n', '\n', '  constructor(IERC20 _erc20Address) public {\n', '    token = IERC20(_erc20Address);\n', '  }\n', '\n', '  uint256 private _totalSupply;\n', '  // Objects balances [id][address] => balance\n', '  mapping(uint256 => mapping(address => uint256)) internal _balances;\n', '  mapping(address => uint256) private _accountBalances;\n', '  mapping(uint256 => uint256) private _poolBalances;\n', '\n', '  function totalSupply() public view returns (uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  function balanceOfAccount(address account) public view returns (uint256) {\n', '    return _accountBalances[account];\n', '  }\n', '\n', '  function balanceOfPool(uint256 id) public view returns (uint256) {\n', '    return _poolBalances[id];\n', '  }\n', '\n', '  function balanceOf(address account, uint256 id) public view returns (uint256) {\n', '    return _balances[id][account];\n', '  }\n', '\n', '  function stake(uint256 id, uint256 amount) public virtual {\n', '    _totalSupply = _totalSupply.add(amount);\n', '    _poolBalances[id] = _poolBalances[id].add(amount);\n', '    _accountBalances[msg.sender] = _accountBalances[msg.sender].add(amount);\n', '    _balances[id][msg.sender] = _balances[id][msg.sender].add(amount);\n', '    token.transferFrom(msg.sender, address(this), amount);\n', '  }\n', '\n', '  function withdraw(uint256 id, uint256 amount) public virtual {\n', '    _totalSupply = _totalSupply.sub(amount);\n', '    _poolBalances[id] = _poolBalances[id].sub(amount);\n', '    _accountBalances[msg.sender] = _accountBalances[msg.sender].sub(amount);\n', '    _balances[id][msg.sender] = _balances[id][msg.sender].sub(amount);\n', '    token.transfer(msg.sender, amount);\n', '  }\n', '\n', '  function transfer(\n', '    uint256 fromId,\n', '    uint256 toId,\n', '    uint256 amount\n', '  ) public virtual {\n', '    _poolBalances[fromId] = _poolBalances[fromId].sub(amount);\n', '    _balances[fromId][msg.sender] = _balances[fromId][msg.sender].sub(amount);\n', '\n', '    _poolBalances[toId] = _poolBalances[toId].add(amount);\n', '    _balances[toId][msg.sender] = _balances[toId][msg.sender].add(amount);\n', '  }\n', '\n', '  function _rescuePoints(address account, uint256 id) internal {\n', '    uint256 amount = _balances[id][account];\n', '\n', '    _totalSupply = _totalSupply.sub(amount);\n', '    _poolBalances[id] = _poolBalances[id].sub(amount);\n', '    _accountBalances[msg.sender] = _accountBalances[msg.sender].sub(amount);\n', '    _balances[id][account] = _balances[id][account].sub(amount);\n', '    token.transfer(account, amount);\n', '  }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @title ERC1155Tradable\n', ' * ERC1155Tradable - ERC1155 contract that whitelists an operator address, \n', ' * has create and mint functionality, and supports useful standards from OpenZeppelin,\n', '  like _exists(), name(), symbol(), and totalSupply()\n', ' */\n', 'interface IERC1155Tradable {\n', '  /**\n', '   * @dev Creates a new token type and assigns _initialSupply to an address\n', '   * @param _maxSupply max supply allowed\n', '   * @param _initialSupply Optional amount to supply the first owner\n', '   * @param _uri Optional URI for this token type\n', '   * @param _data Optional data to pass if receiver is contract\n', '   * @return tokenId The newly created token ID\n', '   */\n', '  function create(\n', '    uint256 _maxSupply,\n', '    uint256 _initialSupply,\n', '    string calldata _uri,\n', '    bytes calldata _data,\n', '    address _beneficiary,\n', '    uint256 _residualsFee,\n', '    bool _residualsRequired\n', '  ) external returns (uint256 tokenId);\n', '\n', '  function mint(\n', '    address _to,\n', '    uint256 _id,\n', '    uint256 _quantity,\n', '    bytes calldata _data\n', '  ) external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'contract RareNftStake is PoolTokenWrapper, Ownable, Pausable {\n', '  using SafeMath for uint256;\n', '  IERC1155Tradable public nfts;\n', '\n', '  struct Card {\n', '    uint256 points;\n', '    uint256 releaseTime;\n', '    uint256 mintFee;\n', '  }\n', '\n', '  struct Pool {\n', '    uint256 periodStart;\n', '    uint256 maxStake;\n', '    uint256 rewardRate; // 11574074074000, 1 point per day per staked token\n', '    uint256 feesCollected;\n', '    uint256 spentPoints;\n', '    uint256 controllerShare;\n', '    address artist;\n', '    mapping(address => uint256) lastUpdateTime;\n', '    mapping(address => uint256) points;\n', '    mapping(uint256 => Card) cards;\n', '  }\n', '\n', '  address public controller;\n', '  address public rescuer;\n', '  mapping(address => uint256) public pendingWithdrawals;\n', '  mapping(uint256 => Pool) public pools;\n', '\n', '  event UpdatedArtist(uint256 poolId, address artist);\n', '  event PoolAdded(uint256 poolId, address artist, uint256 periodStart, uint256 rewardRate, uint256 maxStake);\n', '  event CardAdded(uint256 poolId, uint256 cardId, uint256 points, uint256 mintFee, uint256 releaseTime);\n', '  event Staked(address indexed user, uint256 poolId, uint256 amount);\n', '  event Withdrawn(address indexed user, uint256 poolId, uint256 amount);\n', '  event Transferred(address indexed user, uint256 fromPoolId, uint256 toPoolId, uint256 amount);\n', '  event Redeemed(address indexed user, uint256 poolId, uint256 amount);\n', '  event CardPointsUpdated(uint256 poolId, uint256 cardId, uint256 points);\n', '\n', '  modifier updateReward(address account, uint256 id) {\n', '    if (account != address(0)) {\n', '      pools[id].points[account] = earned(account, id);\n', '      pools[id].lastUpdateTime[account] = block.timestamp;\n', '    }\n', '    _;\n', '  }\n', '\n', '  modifier poolExists(uint256 id) {\n', '    require(pools[id].rewardRate > 0, "pool does not exists");\n', '    _;\n', '  }\n', '\n', '  modifier cardExists(uint256 pool, uint256 card) {\n', '    require(pools[pool].cards[card].points > 0 || pools[pool].cards[card].mintFee > 0, "card does not exists");\n', '    _;\n', '  }\n', '\n', '  constructor(\n', '    address _controller,\n', '    IERC1155Tradable _nftsAddress,\n', '    IERC20 _tokenAddress\n', '  ) public PoolTokenWrapper(_tokenAddress) {\n', '    controller = _controller;\n', '    nfts = _nftsAddress;\n', '  }\n', '\n', '  function cardMintFee(uint256 pool, uint256 card) public view returns (uint256) {\n', '    return pools[pool].cards[card].mintFee;\n', '  }\n', '\n', '  function cardReleaseTime(uint256 pool, uint256 card) public view returns (uint256) {\n', '    return pools[pool].cards[card].releaseTime;\n', '  }\n', '\n', '  function cardPoints(uint256 pool, uint256 card) public view returns (uint256) {\n', '    return pools[pool].cards[card].points;\n', '  }\n', '\n', '  function earned(address account, uint256 pool) public view returns (uint256) {\n', '    Pool storage p = pools[pool];\n', '    uint256 blockTime = block.timestamp;\n', '    return\n', '      balanceOf(account, pool).mul(blockTime.sub(p.lastUpdateTime[account]).mul(p.rewardRate)).div(1e18).add(\n', '        p.points[account]\n', '      );\n', '  }\n', '\n', "  // override PoolTokenWrapper's stake() function\n", '  function stake(uint256 pool, uint256 amount)\n', '    public\n', '    override\n', '    poolExists(pool)\n', '    updateReward(msg.sender, pool)\n', '    whenNotPaused()\n', '  {\n', '    Pool memory p = pools[pool];\n', '\n', '    require(block.timestamp >= p.periodStart, "pool not open");\n', '    require(amount.add(balanceOf(msg.sender, pool)) <= p.maxStake, "stake exceeds max");\n', '\n', '    super.stake(pool, amount);\n', '    emit Staked(msg.sender, pool, amount);\n', '  }\n', '\n', "  // override PoolTokenWrapper's withdraw() function\n", '  function withdraw(uint256 pool, uint256 amount) public override poolExists(pool) updateReward(msg.sender, pool) {\n', '    require(amount > 0, "cannot withdraw 0");\n', '\n', '    super.withdraw(pool, amount);\n', '    emit Withdrawn(msg.sender, pool, amount);\n', '  }\n', '\n', "  // override PoolTokenWrapper's transfer() function\n", '  function transfer(\n', '    uint256 fromPool,\n', '    uint256 toPool,\n', '    uint256 amount\n', '  )\n', '    public\n', '    override\n', '    poolExists(fromPool)\n', '    poolExists(toPool)\n', '    updateReward(msg.sender, fromPool)\n', '    updateReward(msg.sender, toPool)\n', '    whenNotPaused()\n', '  {\n', '    Pool memory toP = pools[toPool];\n', '\n', '    require(block.timestamp >= toP.periodStart, "pool not open");\n', '    require(amount.add(balanceOf(msg.sender, toPool)) <= toP.maxStake, "stake exceeds max");\n', '\n', '    super.transfer(fromPool, toPool, amount);\n', '    emit Transferred(msg.sender, fromPool, toPool, amount);\n', '  }\n', '\n', '  function transferAll(uint256 fromPool, uint256 toPool) external {\n', '    transfer(fromPool, toPool, balanceOf(msg.sender, fromPool));\n', '  }\n', '\n', '  function exit(uint256 pool) external {\n', '    withdraw(pool, balanceOf(msg.sender, pool));\n', '  }\n', '\n', '  function redeem(uint256 pool, uint256 card)\n', '    public\n', '    payable\n', '    poolExists(pool)\n', '    cardExists(pool, card)\n', '    updateReward(msg.sender, pool)\n', '  {\n', '    Pool storage p = pools[pool];\n', '    Card memory c = p.cards[card];\n', '    require(block.timestamp >= c.releaseTime, "card not released");\n', '    require(p.points[msg.sender] >= c.points, "not enough points");\n', '    require(msg.value == c.mintFee, "support our artists, send eth");\n', '\n', '    if (c.mintFee > 0) {\n', '      uint256 _controllerShare = msg.value.mul(p.controllerShare).div(1000);\n', '      uint256 _artistRoyalty = msg.value.sub(_controllerShare);\n', '      require(_artistRoyalty.add(_controllerShare) == msg.value, "problem with fee");\n', '\n', '      p.feesCollected = p.feesCollected.add(c.mintFee);\n', '      pendingWithdrawals[controller] = pendingWithdrawals[controller].add(_controllerShare);\n', '      pendingWithdrawals[p.artist] = pendingWithdrawals[p.artist].add(_artistRoyalty);\n', '    }\n', '\n', '    p.points[msg.sender] = p.points[msg.sender].sub(c.points);\n', '    p.spentPoints = p.spentPoints.add(c.points);\n', '    nfts.mint(msg.sender, card, 1, "");\n', '    emit Redeemed(msg.sender, pool, c.points);\n', '  }\n', '\n', '  function rescuePoints(address account, uint256 pool)\n', '    public\n', '    poolExists(pool)\n', '    updateReward(account, pool)\n', '    returns (uint256)\n', '  {\n', '    require(msg.sender == rescuer, "!rescuer");\n', '    Pool storage p = pools[pool];\n', '\n', '    uint256 earnedPoints = p.points[account];\n', '    p.spentPoints = p.spentPoints.add(earnedPoints);\n', '    p.points[account] = 0;\n', '\n', '    // transfer remaining tokens to the account\n', '    if (balanceOf(account, pool) > 0) {\n', '      _rescuePoints(account, pool);\n', '    }\n', '\n', '    emit Redeemed(account, pool, earnedPoints);\n', '    return earnedPoints;\n', '  }\n', '\n', '  function setArtist(uint256 pool, address artist) public onlyOwner {\n', '    uint256 amount = pendingWithdrawals[artist];\n', '    pendingWithdrawals[artist] = 0;\n', '    pendingWithdrawals[artist] = pendingWithdrawals[artist].add(amount);\n', '    pools[pool].artist = artist;\n', '\n', '    emit UpdatedArtist(pool, artist);\n', '  }\n', '\n', '  function setController(address _controller) public onlyOwner {\n', '    uint256 amount = pendingWithdrawals[controller];\n', '    pendingWithdrawals[controller] = 0;\n', '    pendingWithdrawals[_controller] = pendingWithdrawals[_controller].add(amount);\n', '    controller = _controller;\n', '  }\n', '\n', '  function setRescuer(address _rescuer) public onlyOwner {\n', '    rescuer = _rescuer;\n', '  }\n', '\n', '  function setControllerShare(uint256 pool, uint256 _controllerShare) public onlyOwner poolExists(pool) {\n', '    pools[pool].controllerShare = _controllerShare;\n', '  }\n', '\n', '  function addCard(\n', '    uint256 pool,\n', '    uint256 id,\n', '    uint256 points,\n', '    uint256 mintFee,\n', '    uint256 releaseTime\n', '  ) public onlyOwner poolExists(pool) {\n', '    Card storage c = pools[pool].cards[id];\n', '    c.points = points;\n', '    c.releaseTime = releaseTime;\n', '    c.mintFee = mintFee;\n', '    emit CardAdded(pool, id, points, mintFee, releaseTime);\n', '  }\n', '\n', '  function createCard(\n', '    uint256 pool,\n', '    uint256 supply,\n', '    uint256 points,\n', '    uint256 mintFee,\n', '    uint256 releaseTime,\n', '    address beneficiary,\n', '    uint256 residualsFee,\n', '    bool residualsRequired\n', '  ) public onlyOwner poolExists(pool) returns (uint256) {\n', '    uint256 tokenId = nfts.create(supply, 0, "", "", beneficiary, residualsFee, residualsRequired);\n', '    require(tokenId > 0, "ERC1155 create did not succeed");\n', '\n', '    Card storage c = pools[pool].cards[tokenId];\n', '    c.points = points;\n', '    c.releaseTime = releaseTime;\n', '    c.mintFee = mintFee;\n', '    emit CardAdded(pool, tokenId, points, mintFee, releaseTime);\n', '    return tokenId;\n', '  }\n', '\n', '  function createPool(\n', '    uint256 id,\n', '    uint256 periodStart,\n', '    uint256 maxStake,\n', '    uint256 rewardRate,\n', '    uint256 controllerShare,\n', '    address artist\n', '  ) public onlyOwner returns (uint256) {\n', '    require(pools[id].rewardRate == 0, "pool exists");\n', '\n', '    Pool storage p = pools[id];\n', '\n', '    p.periodStart = periodStart;\n', '    p.maxStake = maxStake;\n', '    p.rewardRate = rewardRate;\n', '    p.controllerShare = controllerShare;\n', '    p.artist = artist;\n', '\n', '    emit PoolAdded(id, artist, periodStart, rewardRate, maxStake);\n', '  }\n', '\n', '  function withdrawFee() public {\n', '    uint256 amount = pendingWithdrawals[msg.sender];\n', '    require(amount > 0, "nothing to withdraw");\n', '    pendingWithdrawals[msg.sender] = 0;\n', '    msg.sender.transfer(amount);\n', '  }\n', '\n', '  // For development and QA\n', '  function assignPointsTo(\n', '    uint256 pool_,\n', '    address tester_,\n', '    uint256 points_\n', '  ) public onlyOwner poolExists(pool_) returns (uint256) {\n', '    Pool storage p = pools[pool_];\n', '    p.points[tester_] = points_;\n', '\n', '    // rescue continues\n', '    return p.points[tester_];\n', '  }\n', '\n', '  /**\n', '   * @dev Updates card points\n', '   * @param poolId_ uint256 ID of the pool\n', '   * @param cardId_ uint256 ID of the card to update\n', '   * @param points_ uint256 new "points" value\n', '   */\n', '  function updateCardPoints(\n', '    uint256 poolId_,\n', '    uint256 cardId_,\n', '    uint256 points_\n', '  ) public onlyOwner poolExists(poolId_) cardExists(poolId_, cardId_) {\n', '    Card storage c = pools[poolId_].cards[cardId_];\n', '    c.points = points_;\n', '    emit CardPointsUpdated(poolId_, cardId_, points_);\n', '  }\n', '}']