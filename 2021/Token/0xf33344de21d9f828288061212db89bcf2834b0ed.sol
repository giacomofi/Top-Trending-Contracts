['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-22\n', '*/\n', '\n', '/*\n', '\n', '            ``                                                                                      \n', '          `oyyys+:.                                                              `-/+syyy-          \n', '          oyyyyyyyys/.                 ``...------------...``                 `:oyyyyyyyyy`         \n', '         .yyyyyyyyyyyyo-         `.--:::////////////////////:::--.``        -oyyyyyyyyyyyy/         \n', '         -yyyyyyyyyyyyyys:` `.-::://///////////////////////////////::-.` `/syyyyyyyyyyyyyyo         \n', '         :yyyyyyyyyyyyyyyys/:///////////////////////////////////////////+yyyyyyyyyyyyyyyyys         \n', '         :yyyssssyyyyyyyyyyys+////////////////////////////////////////+yyyyyyyyyyyssssyyyys         \n', '         :yyysssssssyyyyyyyyyys+////////////////////////////////////+syyyyyyyyyyssssssyyyy+         \n', '         -yyysssssssssyyyyyyyyyys////++oosssyyyyyyyyyyyysssoo++////oyyyyyyyyyyssssssssyyyy:         \n', '         `yyyssssssssssyyyyyyyyyyyssyyyyyyyyyyyyyyyyyyyyyyyyyyyyyssyyyyyyyyyssssssssssyyyy.         \n', '          syyyssssssssssyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyysssssssssssyyys          \n', '          /yyysssssssssssyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyysssssssssssyyyy:          \n', '          .yyysssssssssyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyysssssssssyyyy.          \n', '         `:syyyssssssyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyssssssyyyyo:.         \n', '        .:/+yyyysssyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyssssyyyy///-        \n', '       .:///syyyssyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyssyyyyo////-       \n', '      .:////+yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy//////-      \n', '     `://////oyyyyyyyyyyyyyyhddmdhhyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyhddddhhyyyyyyyyyyyyyy+///////.     \n', '     :////////syyyyyyyyyyyhmNMMMMMNdyyyyyyyyyyyyyyyyyyyyyyyyyyyhmNMMMMMNdyyyyyyyyyyyys/////////`    \n', '    -/////////+yyyyyyyyyyymMMMMMMMMMdyyyyyyyyyyyyyyyyyyyyyyyyyyNMMMMMMMMMhyyyyyyyyyyy+/////////:    \n', '   `://///////syyyyyyyyyyymMMMMMMMMMmyyyyyyyyyyyyyyyyyyyyyyyyyyNMMMMMMMMMhyyyyyyyyyyyy//////////.   \n', '   -/////////syyyyyyyyyyyyyddddddddhyyyyyyyyyyyyyyyyyyyyyyyyyyyhhdddddddhyyyyyyyyyyyyyy/////////:   \n', '   :////////oyyyyyyyyyyyyoosyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyso+oyyyyyyyyyyys/////////`  \n', '  `////////+yyyyyyyyyyyy+    .:+yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyys/-`    yyyyyyyyyyyyo////////-  \n', '  .////////yyyyyyyyyyyyy/        -/syyyyyyyyyyyyyyyyyyyyyyyyyyyyyo:.        syyyyyyyyyyyy+///////:  \n', '  -///////oyyyyyyyyyyyyys.          ./syyyyyyyyyyyyyyyyyyyyyyyo:`          :yyyyyyyyyyyyys///////:  \n', '  -///////yyyyyyyyyyyyyyyys/-`         -syyyyyyyyyyyyyyyyyyyo.         `:+yyyyyyyyyyyyyyyy+///////  \n', '  -//////oyyyyyyyyyyyyyyyyyyyys+/:-.`   .yyyyyyyyyyyyyyyyyyy`  ``.-:/oyyyyyyyyyyyyyyyyyyyys//////:  \n', '  .//////syyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyhdmmNNMMMMMNNmdhhyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy//////:  \n', '  `//////yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyhdNMMMMMMMMMMMMMMMMMmdhyyyyyyyyyyyyyyyyyyyyyyyyyyyyy//////-  \n', '   :////+yyyyyyyyyyyyyyyyyyyyyyyyyyyyhmMMMMMMMMMMMMMMMMMMMMMMNdhyyyyyyyyyyyyyyyyyyyyyyyyyyy+/////.  \n', '   -////odmmmmmmmmdddhyyyyyyyyyyyyyydMMMMMMMMh/::::::::/yMMMMMMNhyyyyyyyyyyyyyhhdddmmmmmmddo////:   \n', '   `////sMMMMMMMMMMMMMNNmhhyyyyyyyhNMMMMMMMMM`           dMMMMMMMdyyyyyyyyhdmNMMMMMMMMMMMMMo////-   \n', '    -////NMMMMMMMMMMMMMMMMNmhyyyyhNMMMMMMMMMM`           dMMMMMMMMdyyyyhmNMMMMMMMMMMMMMMMMN////:`   \n', '    `:///sMMMMMMMMMMMMMMMMMMMNdhhNMMMMMMMMMMMs`         -MMMMMMMMMMhydNMMMMMMMMMMMMMMMMMMMs////.    \n', '     .////yMMMMMMMMMMMMMMMMMMMMNNMMMMMMMMMMMMMmo-`    .oNMMMMMMMMMMNNMMMMMMMMMMMMMMMMMMMMh////-     \n', '      .////sNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNmo /dNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMy////:      \n', '       -////+dMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMh oMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNs////:`      \n', '        -/////smMMMMMMMMMMMMMMMMMMMMMMMMmsoohdddds. `/ddddyoosMMMMMMMMMMMMMMMMMMMMMMMd+////:`       \n', '         .://///ymMMMMMMMMMMMMMMMMMMMMMMM+  :o+/::--::/+os.  /MMMMMMMMMMMMMMMMMMMMMms/////-`        \n', '          `://////smMMMMMMMMMMMMMMMMMMMMMNy +MMo+y:-o+sMMM-`hNMMMMMMMMMMMMMMMMMMMms/////:.          \n', '           `-://////odNMMMMMMMMMMMMMMMMMMMM+oMMMMMdhMMMMMM+yMMMMMMMMMMMMMMMMMMNdo//////:`           \n', '             `:///////+smNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNmy+//////:.             \n', '               .:////////+ydNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNmyo///////:-`              \n', '                 .://///////+shNNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNds+////////:-`                \n', '                   .-://////////+shmNMMMMMMMMMMMMMMMMMMMMMMMMMMMNNdyo//////////:.`                  \n', '                     `.::///////////+oyhmNNMMMMMMMMMMMMMMMNNmhyo+///////////:-`                     \n', '                        `.:://////////////+osyyhhddhhhysso+/////////////::-.                        \n', '                           `.-::////////////////////////////////////::-.`                           \n', '                                `.-:://////////////////////////::-..`                               \n', '                                     ``..---:::::::::::::--..`\n', '*/\n', '\n', 'pragma solidity 0.5.10;\n', '\n', '/*\n', ' * SHIBA TOKEN - The Dogecoin Killer\n', ' *\n', ' * https://shibatoken.com\n', ' * Telegram Group 1: https://t.me/ShibaInuTheDogecoinKiller\n', ' * Telegram Group 2: https://t.me/ShibaInuTheDogecoinKiller2\n', ' * Telegram Group 3: https://t.me/ShibaInuTheDogecoinKiller3\n', ' *  \n', ' * Decentralized Meme Tokens that grew into a vibrant ecosystem\n', ' * ShibaSwap. Fun tokens. Artist incubator.\n', ' * Growing 999k+ Community & more on the horizon!\n', ' *\n', ' * SHIB is an experiment in decentralized spontaneous community building. \n', ' * SHIB token is our first token and allows users to hold Billions or even Trillions of them. \n', ' * Nicknamed the DOGECOIN KILLER, this ERC-20 ONLY token can remain well under a penny and still outpace Dogecoin in a small amount of time (relatively speaking).\n', ' *\n', ' * We locked the 50% of the total supply to Uniswap and threw away the keys! \n', " * The remaining 50% was burned to Vitalik Buterin and we were the first project following this path, so everyone has to buy on the open market, ensuring a fair and complete distribution where devs don't own team tokens they can dump on the community.\n", ' */\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error.\n', ' */\n', 'library SafeMath {\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '\n', '    address internal _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor() internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(isOwner(msg.sender), "Caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function isOwner(address account) public view returns (bool) {\n', '        return account == _owner;\n', '    }\n', '\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0), "New owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    function add(Role storage role, address account) internal {\n', '        require(!has(role, account), "Roles: account already has role");\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '    function remove(Role storage role, address account) internal {\n', '        require(has(role, account), "Roles: account does not have role");\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '\n', '    function has(Role storage role, address account) internal view returns (bool) {\n', '        require(account != address(0), "Roles: account is the zero address");\n', '        return role.bearer[account];\n', '    }\n', '}\n', '\n', '/**\n', ' * @title MinterRole\n', ' * @dev role for addresses who has permission to mint tokens.\n', ' */\n', 'contract MinterRole is Ownable {\n', '    using Roles for Roles.Role;\n', '\n', '    event MinterAdded(address indexed account);\n', '    event MinterRemoved(address indexed account);\n', '\n', '    Roles.Role private _minters;\n', '\n', '    modifier onlyMinter() {\n', '        require(isMinter(msg.sender), "Caller has no permission");\n', '        _;\n', '    }\n', '\n', '    function isMinter(address account) public view returns (bool) {\n', '        return(_minters.has(account) || isOwner(account));\n', '    }\n', '\n', '    function addMinter(address account) public onlyOwner {\n', '        _minters.add(account);\n', '        emit MinterAdded(account);\n', '    }\n', '\n', '    function removeMinter(address account) public onlyOwner {\n', '        _minters.remove(account);\n', '        emit MinterRemoved(account);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title HalterRole\n', ' * @dev role for addresses who has permission to pause any token movement.\n', ' */\n', 'contract HalterRole is Ownable {\n', '    using Roles for Roles.Role;\n', '\n', '    event HalterAdded(address indexed account);\n', '    event HalterRemoved(address indexed account);\n', '\n', '    Roles.Role private _halters;\n', '\n', '    modifier onlyHalter() {\n', '        require(isHalter(msg.sender), "Caller has no permission");\n', '        _;\n', '    }\n', '\n', '    function isHalter(address account) public view returns (bool) {\n', '        return(_halters.has(account) || isOwner(account));\n', '    }\n', '\n', '    function addHalter(address account) public onlyOwner {\n', '        _halters.add(account);\n', '        emit HalterAdded(account);\n', '    }\n', '\n', '    function removeHalter(address account) public onlyOwner {\n', '        _halters.remove(account);\n', '        emit HalterRemoved(account);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://eips.ethereum.org/EIPS/eip-20\n', ' */\n', 'interface IERC20 {\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address who) external view returns (uint256);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * See https://eips.ethereum.org/EIPS/eip-20\n', ' */\n', 'contract ERC20 is IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowed;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        return _balances[owner];\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowed[owner][spender];\n', '    }\n', '\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        _approve(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '        _transfer(from, to, value);\n', '        _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address from, address to, uint256 value) internal {\n', '        require(to != address(0));\n', '\n', '        _balances[from] = _balances[from].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '\n', '    function _mint(address account, uint256 value) internal {\n', '        require(account != address(0));\n', '\n', '        _totalSupply = _totalSupply.add(value);\n', '        _balances[account] = _balances[account].add(value);\n', '        emit Transfer(address(0), account, value);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 value) internal {\n', '        require(spender != address(0));\n', '        require(owner != address(0));\n', '\n', '        _allowed[owner][spender] = value;\n', '        emit Approval(owner, spender, value);\n', '    }\n', '\n', '    function _burn(address account, uint256 amount) internal {\n', '        require(account != address(0));\n', '\n', '        _balances[account] = _balances[account].sub(amount);\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    function _burnFrom(address account, uint256 amount) internal {\n', '        _burn(account, amount);\n', '        _approve(account, msg.sender, _allowed[account][msg.sender].sub(amount));\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @dev Extension of {ERC20} that allows token holders to destroy both their own\n', ' * tokens and those that they have an allowance for.\n', ' */\n', 'contract ERC20Burnable is ERC20 {\n', '\n', '    function burn(uint256 amount) public {\n', '        _burn(msg.sender, amount);\n', '    }\n', '\n', '    function burnFrom(address account, uint256 amount) public {\n', '        _burnFrom(account, amount);\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @dev Extension of {ERC20} that adds a set of accounts with the {MinterRole},\n', ' * which have permission to mint (create) new tokens as they see fit.\n', ' */\n', 'contract ERC20Mintable is ERC20Burnable, MinterRole {\n', '\n', '    function mint(address account, uint256 amount) public onlyMinter returns (bool) {\n', '        _mint(account, amount);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @dev Extension of {ERC20} that adds a possibility to temporary prevent any token movements.\n', ' */\n', 'contract ERC20Haltable is ERC20Mintable, HalterRole {\n', '\n', '    bool public paused;\n', '\n', '    event Paused(address by);\n', '    event Unpaused(address by);\n', '\n', '    modifier notPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    function pause() public onlyHalter {\n', '        paused = true;\n', '        emit Paused(msg.sender);\n', '    }\n', '\n', '    function unpause() public onlyHalter {\n', '        paused = false;\n', '        emit Unpaused(msg.sender);\n', '    }\n', '\n', '    function _transfer(address from, address to, uint256 value) internal notPaused {\n', '        super._transfer(from, to, value);\n', '    }\n', '\n', '    function _mint(address account, uint256 value) internal notPaused {\n', '        super._mint(account, value);\n', '    }\n', '\n', '    function _burn(address account, uint256 amount) internal notPaused {\n', '        super._burn(account, amount);\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title ApproveAndCall Interface.\n', ' * @dev ApproveAndCall system allows to communicate with smart-contracts.\n', ' */\n', 'interface IApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 amount, address token, bytes calldata extraData) external;\n', '}\n', '\n', '/**\n', ' * @title The main project contract.\n', ' */\n', 'contract SHIBA is ERC20Haltable {\n', '\n', '    string private _name = "SHIBA INU";\n', '    string private _symbol = "SHIB";\n', '    uint8 private _decimals = 18;\n', '\n', '    uint256 internal constant _emission = 1000000000000000 * (10 ** 18);\n', '\n', '    mapping (address => bool) private _contracts;\n', '\n', '    bool public mintingFinished;\n', '\n', '    mapping (address => uint256) internal holderMap;\n', '\n', '    address[] public holderList;\n', '\n', '    modifier onlyMinter() {\n', '        if (mintingFinished) {\n', '            revert();\n', '        }\n', '        require(isMinter(msg.sender), "Caller has no permission");\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        _addHolder(address(0));\n', '    }\n', '\n', '    function _transfer(address from, address to, uint256 value) internal {\n', '        if (value != 0) {\n', '            if (holderMap[to] == 0) {\n', '                _addHolder(to);\n', '            }\n', '            if (balanceOf(from).sub(value) == 0) {\n', '                _removeHolder(from);\n', '            }\n', '        }\n', '\n', '        super._transfer(from, to, value);\n', '    }\n', '\n', '    function _mint(address account, uint256 value) internal {\n', '        require(totalSupply().add(value) <= _emission);\n', '\n', '        if (value != 0 && holderMap[account] == 0) {\n', '            _addHolder(account);\n', '        }\n', '\n', '        super._mint(account, value);\n', '    }\n', '\n', '    function _burn(address account, uint256 amount) internal {\n', '        if (balanceOf(account).sub(amount) == 0) {\n', '            _removeHolder(account);\n', '        }\n', '\n', '        super._burn(account, amount);\n', '    }\n', '\n', '    function _addHolder(address account) internal {\n', '        holderList.push(account);\n', '        holderMap[account] = holderList.length.sub(1);\n', '    }\n', '\n', '    function _removeHolder(address account) internal {\n', '        if (holderList.length > 1) {\n', '            holderList[holderMap[account]] = holderList[holderList.length.sub(1)];\n', '            holderMap[holderList[holderList.length.sub(1)]] = holderMap[account];\n', '        }\n', '        holderMap[account] = 0;\n', '        holderList.length = holderList.length.sub(1);\n', '    }\n', '\n', '    function approveAndCall(address spender, uint256 amount, bytes memory extraData) public returns (bool) {\n', '        require(approve(spender, amount));\n', '\n', '        IApproveAndCallFallBack(spender).receiveApproval(msg.sender, amount, address(this), extraData);\n', '\n', '        return true;\n', '    }\n', '\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '\n', '        if (_contracts[to]) {\n', '            approveAndCall(to, value, new bytes(0));\n', '        } else {\n', '            super.transfer(to, value);\n', '        }\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '    function registerContract(address addr) public onlyOwner {\n', '        require(isContract(addr));\n', '        _contracts[addr] = true;\n', '    }\n', '\n', '    function unregisterContract(address addr) external onlyOwner {\n', '        _contracts[addr] = false;\n', '    }\n', '\n', '    function finishMinting() external onlyMinter {\n', '        mintingFinished = true;\n', '    }\n', '\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function isRegistered(address addr) public view returns (bool) {\n', '        return _contracts[addr];\n', '    }\n', '\n', '    function isContract(address addr) internal view returns (bool) {\n', '        uint size;\n', '        assembly { size := extcodesize(addr) }\n', '        return size > 0;\n', '    }\n', '\n', '    function amountOfHolders() public view returns (uint256) {\n', '        return holderList.length.sub(1);\n', '    }\n', '\n', '    function holders() public view returns (address[] memory) {\n', '        return holderList;\n', '    }\n', '\n', '}']