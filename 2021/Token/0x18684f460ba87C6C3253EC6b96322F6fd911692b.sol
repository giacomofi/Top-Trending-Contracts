['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-04\n', '*/\n', '\n', '// SPDX-License-Identifier: (c) Otsea.fi, 2021\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error\n', ' * \n', ' * @dev Default OpenZeppelin\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Multiplies two unsigned integers, reverts on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two unsigned integers, reverts on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '     * reverts when dividing by zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract Vesting {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    IERC20 public token;\n', '\n', '    uint256 public totalTokens;\n', '    uint256 public releaseStart;\n', '    uint256 public releaseEnd;\n', '\n', '    mapping (address => uint256) public starts;\n', '    mapping (address => uint256) public grantedToken;\n', '\n', '    // this means, released but unclaimed amounts\n', '    mapping (address => uint256) public released;\n', '\n', '    event Claimed(address indexed _user, uint256 _amount, uint256 _timestamp);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _amount, uint256 _timestamp);\n', '\n', '    // do not input same recipient in the _recipients, it will lead to locked token in this contract\n', '    function initialize(\n', '        address _token,\n', '        uint256 _totalTokens,\n', '        uint256 _start,\n', '        uint256 _period,\n', '        address[] calldata _recipients,\n', '        uint256[] calldata _grantedToken\n', '    )\n', '      public\n', '    {\n', '        require(releaseEnd == 0, "Contract is already initialized.");\n', '        require(_recipients.length == _grantedToken.length, "Array lengths do not match.");\n', '\n', '        releaseEnd = _start.add(_period);\n', '        releaseStart = _start;\n', '\n', '        token = IERC20(_token);\n', '        token.transferFrom(msg.sender, address(this), _totalTokens);\n', '        totalTokens = _totalTokens;\n', '        uint256 sum = 0;\n', '\n', '        for(uint256 i = 0; i<_recipients.length; i++) {\n', '            starts[_recipients[i]] = releaseStart;\n', '            grantedToken[_recipients[i]] = _grantedToken[i];\n', '            sum = sum.add(_grantedToken[i]);\n', '        }\n', '\n', "        // We're gonna just set the weight as full tokens. Ensures grantedToken were entered correctly as well.\n", '        require(sum == totalTokens, "Weight does not match tokens being distributed.");\n', '    }\n', '\n', '    /**\n', '     * @dev User may claim tokens that have vested.\n', '    **/\n', '    function claim()\n', '      public\n', '    {\n', '        address user = msg.sender;\n', '\n', '        require(releaseStart <= block.timestamp, "Release has not started");\n', '        require(grantedToken[user] > 0 || released[user] > 0, "This contract may only be called by users with a stake.");\n', '\n', '        uint256 releasing = releasable(user);\n', '        // updates the grantedToken\n', '        grantedToken[user] = grantedToken[user].sub(releasing);\n', '\n', '        // claim will claim both released and releasing\n', '        uint256 claimAmount = released[user].add(releasing);\n', '\n', '        // flush the released since released means "unclaimed" amount\n', '        released[user] = 0;\n', '        \n', '        // and update the starts\n', '        starts[user] = block.timestamp;\n', '        token.transfer(user, claimAmount);\n', '        emit Claimed(user, claimAmount, block.timestamp);\n', '    }\n', '\n', '    /**\n', '     * @dev returns claimable token. buffered(released) token + token released from last update\n', '     * @param _user user to check the claimable token\n', '    **/\n', '    function claimableAmount(address _user) external view returns(uint256) {\n', '        return released[_user].add(releasable(_user));\n', '    }\n', '\n', '    /**\n', '     * @dev returns the token that can be released from last user update\n', '     * @param _user user to check the releasable token\n', '    **/\n', '    function releasable(address _user) public view returns(uint256) {\n', '        if (block.timestamp < releaseStart) return 0;\n', '        uint256 applicableTimeStamp = block.timestamp >= releaseEnd ? releaseEnd : block.timestamp;\n', '        return grantedToken[_user].mul(applicableTimeStamp.sub(starts[_user])).div(releaseEnd.sub(starts[_user]));\n', '    }\n', '\n', '    /**\n', "     * @dev Transfers a sender's weight to another address starting from now.\n", '     * @param _to The address to transfer weight to.\n', '     * @param _amountInFullTokens The amount of tokens (in 0 decimal format). We will not have fractions of tokens.\n', '    **/\n', '    function transfer(address _to, uint256 _amountInFullTokens)\n', '      external\n', '    {\n', '        // first, update the released\n', '        released[msg.sender] = released[msg.sender].add(releasable(msg.sender));\n', '        released[_to] = released[_to].add(releasable(_to));\n', '\n', '        // then update the grantedToken;\n', '        grantedToken[msg.sender] = grantedToken[msg.sender].sub(releasable(msg.sender));\n', '        grantedToken[_to] = grantedToken[_to].sub(releasable(_to));\n', '\n', '        // then update the starts of user\n', '        starts[msg.sender] = block.timestamp;\n', '        starts[_to] = block.timestamp;\n', '\n', '        // If trying to transfer too much, transfer full amount.\n', '        uint256 amount = _amountInFullTokens.mul(1e18) > grantedToken[msg.sender] ? grantedToken[msg.sender] : _amountInFullTokens.mul(1e18);\n', '\n', '        // then move _amount\n', '        grantedToken[msg.sender] = grantedToken[msg.sender].sub(amount);\n', '        grantedToken[_to] = grantedToken[_to].add(amount);\n', '\n', '        emit Transfer(msg.sender, _to, amount, block.timestamp);\n', '    }\n', '\n', '}']