['//SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.0;\n', '\n', 'import "./SafeERC20.sol";\n', 'import "./Ownable.sol";\n', 'import "./SafeMath.sol";\n', '\n', '/**\n', ' * @title TokenVesting\n', ' * @dev A token holder contract that can release its token balance gradually like a\n', ' * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\n', ' * owner.\n', ' */\n', 'contract TokenVesting is Ownable {\n', '    // The vesting schedule is time-based (i.e. using block timestamps as opposed to e.g. block numbers), and is\n', '    // therefore sensitive to timestamp manipulation (which is something miners can do, to a certain degree). Therefore,\n', '    // it is recommended to avoid using short time durations (less than a minute). Typical vesting schemes, with a\n', '    // cliff period of a year and a duration of four years, are safe to use.\n', '    // solhint-disable not-rely-on-time\n', '\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    event TokensReleased(address token, uint256 amount);\n', '    event TokenVestingRevoked(address token);\n', '\n', '    // beneficiary of tokens after they are released\n', '    address private _beneficiary;\n', '\n', '    // Durations and timestamps are expressed in UNIX time, the same units as block.timestamp.\n', '    uint256 private _cliff;\n', '    uint256 private _start;\n', '    uint256 private _duration;\n', '\n', '    bool private _revocable;\n', '\n', '    mapping (address => uint256) private _released;\n', '    mapping (address => uint256) private _revoked;\n', '    mapping (address => uint256) private _refunded;\n', '\n', '    /**\n', '     * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n', '     * beneficiary, gradually in a linear fashion until start + duration. By then all\n', '     * of the balance will have vested.\n', '     * @param beneficiary address of the beneficiary to whom vested tokens are transferred\n', '     * @param cliffDuration duration in seconds of the cliff in which tokens will begin to vest\n', '     * @param start the time (as Unix time) at which point vesting starts\n', '     * @param duration duration in seconds of the period in which the tokens will vest\n', '     * @param revocable whether the vesting is revocable or not\n', '     */\n', '    constructor (address beneficiary, uint256 start, uint256 cliffDuration, uint256 duration, bool revocable) public {\n', '        require(beneficiary != address(0), "TokenVesting: beneficiary is the zero address");\n', '        // solhint-disable-next-line max-line-length\n', '        require(cliffDuration <= duration, "TokenVesting: cliff is longer than duration");\n', '        require(duration > 0, "TokenVesting: duration is 0");\n', '        // solhint-disable-next-line max-line-length\n', '        require(start.add(duration) > block.timestamp, "TokenVesting: final time is before current time");\n', '\n', '        _beneficiary = beneficiary;\n', '        _revocable = revocable;\n', '        _duration = duration;\n', '        _cliff = start.add(cliffDuration);\n', '        _start = start;\n', '    }\n', '\n', '    /**\n', '     * @return the beneficiary of the tokens.\n', '     */\n', '    function beneficiary() public view returns (address) {\n', '        return _beneficiary;\n', '    }\n', '\n', '    /**\n', '     * @return the cliff time of the token vesting.\n', '     */\n', '    function cliff() public view returns (uint256) {\n', '        return _cliff;\n', '    }\n', '\n', '    /**\n', '     * @return the start time of the token vesting.\n', '     */\n', '    function start() public view returns (uint256) {\n', '        return _start;\n', '    }\n', '\n', '    /**\n', '     * @return the duration of the token vesting.\n', '     */\n', '    function duration() public view returns (uint256) {\n', '        return _duration;\n', '    }\n', '\n', '    /**\n', '     * @return true if the vesting is revocable.\n', '     */\n', '    function revocable() public view returns (bool) {\n', '        return _revocable;\n', '    }\n', '\n', '    /**\n', '     * @return the amount of the token released.\n', '     */\n', '    function released(address token) public view returns (uint256) {\n', '        return _released[token];\n', '    }\n', '\n', '    /**\n', '     * @return true if the token is revoked.\n', '     */\n', '    function revoked(address token) public view returns (bool) {\n', '        return (_revoked[token] != 0);\n', '    }\n', '\n', '    /**\n', '     * @notice Transfers vested tokens to beneficiary.\n', '     * @param token ERC20 token which is being vested\n', '     */\n', '    function release(IERC20 token) public onlyOwner {\n', '        uint256 unreleased = _releasableAmount(token);\n', '\n', '        require(unreleased > 0, "TokenVesting: no tokens are due");\n', '\n', '        _released[address(token)] = _released[address(token)].add(unreleased);\n', '\n', '        token.safeTransfer(_beneficiary, unreleased);\n', '\n', '        emit TokensReleased(address(token), unreleased);\n', '    }\n', '\n', '    /**\n', '     * @notice Allows the owner to revoke the vesting. Tokens already vested\n', '     * remain in the contract, the rest are returned to the owner.\n', '     * @param token ERC20 token which is being vested\n', '     */\n', '    function revoke(IERC20 token) public onlyOwner {\n', '        require(_revocable, "TokenVesting: cannot revoke");\n', '        require(_revoked[address(token)] == 0, "TokenVesting: token already revoked");\n', '\n', '        uint256 balance = token.balanceOf(address(this));\n', '\n', '        _revoked[address(token)] = block.timestamp;\n', '\n', '        uint256 unreleased = _releasableAmount(token);\n', '        uint256 refund = balance.sub(unreleased);\n', '\n', '        _refunded[address(token)] = refund;\n', '\n', '        token.safeTransfer(owner(), refund);\n', '\n', '        emit TokenVestingRevoked(address(token));\n', '    }\n', '\n', '    /**\n', '     * @return the vested amount of the token vesting.\n', '     */\n', '    function vested(IERC20 token) public view returns (uint256) {\n', '        return _vestedAmount(token);\n', '    }\n', '\n', '    /**\n', "     * @dev Calculates the amount that has already vested but hasn't been released yet.\n", '     * @param token ERC20 token which is being vested\n', '     */\n', '    function _releasableAmount(IERC20 token) private view returns (uint256) {\n', '        return _vestedAmount(token).sub(_released[address(token)]);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates the amount that has already vested.\n', '     * @param token ERC20 token which is being vested\n', '     */\n', '    function _vestedAmount(IERC20 token) private view returns (uint256) {\n', '        uint256 currentBalance = token.balanceOf(address(this));\n', '        uint256 totalBalance = currentBalance.add(_released[address(token)]).add(_refunded[address(token)]);\n', '\n', '        if (block.timestamp < _cliff) {\n', '            return 0;\n', '        } else if (block.timestamp >= _start.add(_duration) && _revoked[address(token)] == 0) {\n', '            return totalBalance;\n', '        } else if (_revoked[address(token)] > 0) {\n', '            return totalBalance.mul(_revoked[address(token)].sub(_start)).div(_duration);\n', '        } else {\n', '            return totalBalance.mul(block.timestamp.sub(_start)).div(_duration);\n', '        }\n', '    }\n', '}']