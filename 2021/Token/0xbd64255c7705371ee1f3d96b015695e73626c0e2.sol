['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-05\n', '*/\n', '\n', 'pragma solidity ^0.4.26;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'contract SafeMath {\n', '  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  modifier onlyPayloadSize(uint numWords){\n', '    assert(msg.data.length >= numWords * 32 + 4);\n', '    _;\n', '  }\n', '}\n', '\n', 'contract Token{ // ERC20 standard\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '}\n', '\n', 'contract StandardToken is Token, SafeMath{\n', '\n', '    uint256 public totalSupply;\n', '\n', '    function transfer(address _to, uint256 _value) public onlyPayloadSize(2) returns (bool success){\n', '        require(_to != address(0));\n', '        require(balances[msg.sender] >= _value && _value > 0);\n', '        balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3) returns (bool success){\n', '        require(_to != address(0));\n', '        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0);\n', '        balances[_from] = safeSub(balances[_from], _value);\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance){\n', '        return balances[_owner];\n', '    }\n', '    \n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    function approve(address _spender, uint256 _value) public onlyPayloadSize(2) returns (bool success){\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function changeApproval(address _spender, uint256 _oldValue, uint256 _newValue) public onlyPayloadSize(3) returns (bool success){\n', '        require(allowed[msg.sender][_spender] == _oldValue);\n', '        allowed[msg.sender][_spender] = _newValue;\n', '        Approval(msg.sender, _spender, _newValue);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining){\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    // this creates an array with all balances\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '}\n', '\n', 'contract FX is StandardToken {\n', '    \n', '\n', '    // public variables of the token\n', '\n', '    string public constant name = "1 Forex Coin";\n', '    string public constant symbol = "1FX";\n', '    uint256 public constant decimals = 18;\n', '    \n', '    // reachable if max amount raised\n', '   \n', '\n', '\n', '    address mainWallet;\n', '\n', '\n', '    modifier onlyMainWallet{\n', '        require(msg.sender == mainWallet);\n', '        _;\n', '    }\n', '\n', '    function FX() public {\n', '        totalSupply = 600000000e18;\n', '        mainWallet = msg.sender;\n', '        balances[mainWallet] = totalSupply;\n', '        \n', '    }\n', '\n', '    modifier onlyOwner() {\n', '    require(msg.sender == mainWallet);\n', '    _;\n', '  }\n', '\n', '   event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(mainWallet, newOwner);\n', '    balances[newOwner]=balances[mainWallet];\n', '    balances[mainWallet] = 0;\n', '    mainWallet = newOwner;\n', '  }\n', '\n', '    function sendBatchCS(address[] _recipients, uint[] _values) external returns (bool) {\n', '        require(_recipients.length == _values.length);\n', '\n', '        uint senderBalance = balances[msg.sender];\n', '        for (uint i = 0; i < _values.length; i++) {\n', '            uint value = _values[i];\n', '            address to = _recipients[i];\n', '            require(senderBalance >= value);\n', '            if(msg.sender != _recipients[i]){\n', '                senderBalance = senderBalance - value;\n', '                balances[to] += value;\n', '            }\n', '\t\t     Transfer(msg.sender, to, value);\n', '        }\n', '        balances[msg.sender] = senderBalance;\n', '        return true;\n', '    } \n', '}']