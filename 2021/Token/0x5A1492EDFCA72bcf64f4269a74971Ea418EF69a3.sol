['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.7.0;\n', '\n', 'import "../Ownable.sol" ;\n', '\n', '//@title SEPA Token contract interface\n', 'interface SEPA_token {                                     \n', '    function balanceOf(address owner) external returns (uint256);\n', '    function transfer(address to, uint256 amount) external returns (bool);\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n', '    function _approve(address owner, address spender, uint256 amount) external ; \n', '}\n', '\n', '//@title SEPA Team Tokens Lock Contract\n', 'contract SEPA_TeamLock is Ownable {\n', '    \n', '    address public token_addr ; \n', '    SEPA_token token_contract = SEPA_token(token_addr) ;\n', '\n', '    uint256 public PERC_per_MONTH = 10 ; \n', '    uint256 public last_claim ; \n', '    uint256 public start_lock ;\n', '    \n', '    uint256 public MONTH = 2628000 ; \n', '    \n', '    uint256 public locked ; \n', '\n', '    /**\n', '     * @dev Lock tokens by approving the contract to take them.\n', '     * @param   value Amount of tokens you want to lock in the contract\n', '     */\n', '    function lock_tokens(uint256 value) external payable onlyOwner {\n', '        token_contract.transferFrom(msg.sender, address(this), value) ; \n', '    \n', '        locked += value ;\n', '        start_lock = block.timestamp ; \n', '    }\n', '\n', '    function withdraw(address _addr) external onlyOwner {\n', '        require(block.timestamp >= start_lock + 6 * MONTH, "Cannot be claimed in first 6 months") ;\n', '        require(block.timestamp - last_claim >= MONTH, "Cannot claim twice per month") ; \n', '        last_claim = block.timestamp ; \n', '        \n', '        token_contract.transfer(_addr, locked * PERC_per_MONTH/100) ; \n', '    }\n', '\n', '    /**\n', '     * @dev Set SEPA Token contract address\n', '     * @param addr Address of SEPA Token contract\n', '     */\n', '    function set_token_contract(address addr) external onlyOwner {\n', '        token_addr = addr ;\n', '        token_contract = SEPA_token(token_addr) ;\n', '    }\n', '    \n', '\n', '}']