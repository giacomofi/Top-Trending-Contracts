['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-19\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns(uint256);\n', '    function transfer(address recipient, uint256 amount) external returns(bool);\n', '    function burn(uint256 amount) external returns(bool);\n', '    function allowance(address owner, address spender) external view returns(uint256);\n', '    function approve(address spender, uint256 amount) external returns(bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns(bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    \n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '   \n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '   \n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract BlockchainCryptoBusinessToken is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '    uint256 private _icoSupply;\n', '    uint256 private _circulationSupply;\n', '    uint256 private _totalBurnableToken;\n', '    uint256 private _ownersSupply;\n', '    uint256 private _burnedToken;\n', '    uint256 private _remainningBurnableToken;\n', '    uint256 private _convertvolume;\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '    address private _owner;\n', '    address private _burnaddress;\n', '    \n', '    \n', '    constructor (\n', '        string memory name_,\n', '        string memory symbol_,\n', '        uint8 decimals_,\n', '        uint256 totalSupply_,\n', '        uint256 icoSupply_,\n', '        uint256 totalBurnableToken_,\n', '        uint256 circulationSupply_,\n', '        uint256 ownersSupply_,\n', '        address burnaddress_\n', '        )  {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _decimals = decimals_;\n', '        _totalSupply = _convertVolume(totalSupply_);\n', '        _icoSupply = _convertVolume(icoSupply_);\n', '        _totalBurnableToken = _convertVolume(totalBurnableToken_);\n', '        _remainningBurnableToken = totalBurnableToken();\n', '        _circulationSupply = _convertVolume(circulationSupply_);\n', '        _ownersSupply = _convertVolume(ownersSupply_);\n', '        _burnaddress = burnaddress_;\n', '        _balances[msg.sender] = totalSupply().sub(totalBurnableToken());\n', '        _balances[_burnaddress] = totalBurnableToken();\n', '        _owner = msg.sender;\n', '    }\n', '\n', '   \n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '    \n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    \n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '    \n', '    function burnedToken() public view returns (uint256) {\n', '        return _burnedToken;\n', '    }\n', '    \n', '    function icoSupply() public view returns (uint256) {\n', '        return _icoSupply;\n', '    }\n', '    \n', '    function circulationSupply() public view returns (uint256) {\n', '        return _circulationSupply;\n', '    }\n', '    \n', '    function owners() public view returns (address) {\n', '        return _owner;\n', '    }\n', '    \n', '    function ownersSupply() public view returns (uint256) {\n', '        return _ownersSupply;\n', '    }\n', '    \n', '    function totalBurnableToken() public view returns (uint256) {\n', '        return _totalBurnableToken;\n', '    }\n', '    \n', '    function remainningBurnableToken() public view returns (uint256) {\n', '        return _remainningBurnableToken;\n', '    }\n', '    \n', '   \n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '    \n', '    function _convertVolume(uint256 amount) internal returns(uint256) {\n', '        _convertvolume = (amount * (10 ** uint256(decimals())));\n', '        return _convertvolume;\n', '    }\n', '    \n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '   \n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '    \n', '   \n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    \n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    \n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '    \n', '    function burn(uint256 amount) public virtual override returns (bool) {\n', '        _burn(_msgSender(), amount);\n', '        return true;\n', '    }\n', '    \n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    \n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    \n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '        require(account == _burnaddress, "ERC20: burn access not allowed for your address");\n', '        require(amount <= _remainningBurnableToken, "ERC20: burn amount exceeds the burn limits");\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        _remainningBurnableToken = _remainningBurnableToken.sub(amount);\n', '        _burnedToken = _burnedToken.add(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '   \n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}']