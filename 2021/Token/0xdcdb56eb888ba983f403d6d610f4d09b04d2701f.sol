['pragma solidity ^0.4.18;\n', '\n', '// import "./TokenERC20.sol";\n', 'import "./Ownable.sol";\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public constant returns (uint);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract TybFoundation is Ownable{\n', '    ERC20Basic public tybToken;\n', '\n', '    // 基金会目标地址\n', '    address public foundation;\n', '    // 技术团队目标地址\n', '    address public technology;\n', '    // 创始团队目标地址\n', '    address public originator;\n', '    \n', '    // 钱包地址，挖矿分配\n', '    address public wallet;\n', '    // 黑洞地址\n', '    address public blackHole;\n', '    // TYB余额地址\n', '    address public all;\n', '\n', '    // mapping (address => uint256) public balanceOf;\n', '    \n', '    // 矿池余额\n', '    uint256 public poolAmount;\n', '    // 基金会余额\n', '    uint256 public foundationAmount;\n', '    // 技术团队余额\n', '    uint256 public technologyAmount;\n', '    // 创始团队余额\n', '    uint256 public originatorAmount;\n', '    \n', '    // 云服务器租金池\n', '    uint256 public rentalAmount;\n', '    \n', '    // 矿池发行量\n', '    uint256 public issueAmount;\n', '    // 矿池销毁量\n', '    uint256 public destroyAmount;\n', '    \n', '    // 超级节点奖励余额\n', '    uint256 public superRewordAmount;\n', '    // 生态节点奖励余额\n', '    uint256 public ZoologyRewordAmount;\n', '    \n', '    uint8 public decimals = 18;\n', '\n', '    event Destroy(uint256 amount);\n', '    event Mining(uint256 miningOut);\n', '    event Rental(uint256 amount);\n', '    event SurrenderRental(uint256 amount);\n', '    event SuperReword(uint256 reword);\n', '    event ZoologyReword(uint256 reword);\n', '    \n', '\n', '    constructor(address _tybToken, address _all, address _foundation, address _technology, address _originator,  address _wallet, address _blackHole, uint256 _rental) public{\n', '        // tybToken = TokenERC20(_tybToken);\n', '        tybToken = ERC20Basic(_tybToken);\n', '\n', '        all = _all;\n', '        foundation = _foundation;\n', '        technology = _technology;\n', '        originator = _originator;\n', '        wallet = _wallet;\n', '        blackHole = _blackHole;\n', '        \n', '        poolAmount = 600000000 * 10 ** uint256(decimals);\n', '        foundationAmount = 50000000 * 10 ** uint256(decimals);\n', '        technologyAmount = 50000000 * 10 ** uint256(decimals);\n', '        originatorAmount = 50000000 * 10 ** uint256(decimals);\n', '        \n', '        superRewordAmount = 66 * 600000 * 10 ** uint256(decimals);\n', '        ZoologyRewordAmount = 330 * 160000 * 10 ** uint256(decimals);\n', '\n', '        rentalAmount = _rental * 10 ** uint256(decimals);\n', '    }\n', '\n', '    function setBlackHole(address _blackHole) public onlyOwner{\n', '        blackHole = _blackHole;\n', '    }\n', '\n', '    function setFoundation(address _foundation) public onlyOwner{\n', '        foundation = _foundation;\n', '    }\n', '\n', '    function setTechnology(address _technology) public onlyOwner{\n', '        technology = _technology;\n', '    }\n', '\n', '    function setOriginator(address _originator) public onlyOwner{\n', '        originator = _originator;\n', '    }\n', '\n', '    function setWallet(address _wallet) public onlyOwner{\n', '        wallet = _wallet;\n', '    }\n', '\n', '    function setAll(address _all) public onlyOwner{\n', '        all = _all;\n', '    }\n', '\n', '    // 租用矿机\n', '    function addRental(uint256 _rental) public onlyOwner {\n', '        rentalAmount = rentalAmount + _rental;\n', '\n', '        emit Rental(_rental);\n', '    }\n', '\n', '    // 退租， 退租的数量和需要销毁的数量\n', '    function surrenderRental(uint256 _amount, uint256 _destroy) public onlyOwner {\n', '        require(_amount >= _destroy);\n', '\n', '        rentalAmount = rentalAmount - _amount;\n', '        destroyAmount = destroyAmount + _destroy;\n', '\n', '        tybToken.transferFrom(all, wallet, _amount - _destroy);\n', '        tybToken.transferFrom(all, blackHole, _destroy);\n', '\n', '        emit SurrenderRental(_amount);\n', '        emit Destroy(_destroy);\n', '    }\n', '\n', '    // 挖矿，挖出的数量和销毁的数量\n', '    function mining(uint256 _miningOut, uint256 _destroy) public onlyOwner {\n', '        require(poolAmount >= _miningOut);\n', '        require(_miningOut >= _destroy);\n', '\n', '        issueAmount = issueAmount + _miningOut;\n', '        poolAmount = poolAmount - _miningOut;\n', '        destroyAmount = destroyAmount + _destroy;\n', '\n', '        tybToken.transferFrom(all, wallet, _miningOut - _destroy);\n', '        tybToken.transferFrom(all, blackHole, _destroy);\n', '\n', '        emit Mining(_miningOut);\n', '        emit Destroy(_destroy);\n', '    }\n', '\n', '    function superReword(uint256 _reword) public onlyOwner {\n', '        require(superRewordAmount >= _reword);\n', '\n', '        superRewordAmount = superRewordAmount - _reword;\n', '\n', '        tybToken.transferFrom(all, wallet, _reword);\n', '\n', '        emit SuperReword(_reword);\n', '    }\n', '\n', '    function zoologyReword(uint256 _reword) public onlyOwner {\n', '        require(ZoologyRewordAmount >= _reword);\n', '\n', '        ZoologyRewordAmount = ZoologyRewordAmount - _reword;\n', '\n', '        tybToken.transferFrom(all, wallet, _reword);\n', '\n', '        emit ZoologyReword(_reword);\n', '    }\n', '}']