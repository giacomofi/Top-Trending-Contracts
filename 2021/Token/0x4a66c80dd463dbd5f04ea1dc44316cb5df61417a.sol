['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-02\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'contract Staking is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public _startTime;\n', '    uint256 public _endTime;\n', '    uint256 public _getRewardEndTime;\n', '    uint256 public _rewardRate;\n', '    \n', '    uint256 public _releaseInterval = 1 weeks;\n', '    uint256 public _getRewardInterval = 35 weeks;\n', '    \n', '    uint256 lockTimes = 20;\n', '\n', '    IERC20 public _stakingToken;\n', '    IERC20 public _rewardToken;\n', '\n', '    uint256 public _rewardPerTokenStored;\n', '    uint256 public _lastUpdateTime;\n', '\n', '    mapping(address => uint256) public _rewards;\n', '    mapping(address => uint256) public _userRewardPerTokenPaid;\n', '    mapping(address => uint256) public _receivedRewards;\n', '\n', '    uint256 public _supply;\n', '    mapping(address => uint256) public _balance;\n', '\n', '    mapping(address => LockAmount) public _lockAmount;\n', '\n', '    struct LockAmount {\n', '        uint256[] amount;\n', '        uint256 releaseTime;\n', '        uint256 pos;\n', '    }\n', '\n', '    event Staked(address indexed sender, uint256 indexed amount);\n', '    event Withdrawn(address indexed sender, uint256 indexed amount);\n', '    event GotReward(address indexed sender, uint256 indexed amount);\n', '\n', '    constructor(\n', '        uint256 startTime_,\n', '        uint256 endTime_,\n', '        uint256 rewardRate_,\n', '        address stakingToken_,\n', '        address rewardToken_\n', '    ) {\n', '        _startTime = startTime_;\n', '        _endTime = endTime_;\n', '        _getRewardEndTime = startTime_ + _getRewardInterval;\n', '        _rewardRate = rewardRate_;\n', '        _stakingToken = IERC20(stakingToken_);\n', '        _rewardToken = IERC20(rewardToken_);\n', '    }\n', '\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balance[account];\n', '    }\n', '\n', '    modifier updateReward(address account) {\n', '        _rewardPerTokenStored = rewardPerToken();\n', '        _lastUpdateTime = lastTimeRewardApplicable();\n', '        if (account != address(0)) {\n', '            _rewards[account] = earned(account);\n', '            _userRewardPerTokenPaid[account] = _rewardPerTokenStored;\n', '        }\n', '        _;\n', '    }\n', '\n', '    function lockedIncomeBalanceOf(address account) public view returns (LockAmount memory) {\n', '        return _lockAmount[account];\n', '    }\n', '\n', '    function rewardPart(address account) public view returns (uint256 unlocked, uint256 locked) {\n', '        uint256 earn = earned(account);\n', '        unlocked = unlocked.add(earn.div(lockTimes));\n', '        locked = locked.add(earn.sub(earn.div(lockTimes)));\n', '\n', '        LockAmount memory amount = _lockAmount[account];\n', '        uint256 lockTime = amount.releaseTime;\n', '        for (uint256 i = amount.pos; i < amount.amount.length; i++) {\n', '            if (lockTime < block.timestamp) {\n', '                unlocked = unlocked.add(amount.amount[i]);\n', '            } else {\n', '                locked = locked.add(amount.amount[i]);\n', '            }\n', '            lockTime = lockTime.add(_releaseInterval);\n', '        }\n', '    }\n', '\n', '    function earned(address account) public view returns (uint256) {\n', '        return\n', '            balanceOf(account)\n', '                .mul(rewardPerToken().sub(_userRewardPerTokenPaid[account]))\n', '                .div(1e18)\n', '                .add(_rewards[account]);\n', '    }\n', '\n', '    function stake(uint256 amount) public updateReward(msg.sender) {\n', '        require(block.timestamp < _endTime, "the end");\n', '        require(amount > 0, "cannot stake 0");\n', '\n', '        _balance[msg.sender] = _balance[msg.sender].add(amount);\n', '        _supply = _supply.add(amount);\n', '\n', '        require(\n', '            _stakingToken.transferFrom(msg.sender, address(this), amount),\n', '            "transferFrom fail"\n', '        );\n', '\n', '        emit Staked(msg.sender, amount);\n', '    }\n', '\n', '    function withdraw(uint256 amount) public updateReward(msg.sender) {\n', '        require(amount > 0, "cannot withdraw 0");\n', '        require(balanceOf(msg.sender) >= amount, "Insufficient funds");\n', '\n', '        _balance[msg.sender] = _balance[msg.sender].sub(amount);\n', '        _supply = _supply.sub(amount);\n', '\n', '        require(_stakingToken.transfer(msg.sender, amount), "withdraw fail");\n', '\n', '        emit Withdrawn(msg.sender, amount);\n', '    }\n', '\n', '    function exit() public {\n', '        withdraw(balanceOf(msg.sender));\n', '        getReward();\n', '    }\n', '\n', '    function getReward() public updateReward(msg.sender) {\n', '        require(block.timestamp < _getRewardEndTime, "get reward timeout");\n', '        LockAmount storage lockAmount = _lockAmount[msg.sender];\n', '        \n', '        uint256 releaseAmount = 0;\n', '\n', '        for (uint256 i = lockAmount.pos; i < lockAmount.amount.length; i++) {\n', '            if (lockAmount.releaseTime > block.timestamp) {\n', '                break;\n', '            }\n', '            releaseAmount = releaseAmount.add(lockAmount.amount[i]);\n', '            lockAmount.releaseTime = lockAmount.releaseTime.add(_releaseInterval);\n', '            lockAmount.pos = lockAmount.pos.add(1);\n', '        }\n', '\n', '        uint256 reward = _rewards[msg.sender];\n', '        if (reward > 0) {\n', '            _rewards[msg.sender] = 0;\n', '            \n', '            uint256 part = reward.div(lockTimes);\n', '            \n', '            releaseAmount = releaseAmount.add(part);\n', '\n', '            if (lockAmount.amount.length == lockAmount.pos) {\n', '                lockAmount.releaseTime = block.timestamp.add(_releaseInterval);\n', '            }\n', '\n', '            \n', '            uint256 pos;\n', '            for (uint256 i = 0; i < lockTimes - 2; i++) {\n', '                pos = lockAmount.pos.add(i);\n', '                if (pos < lockAmount.amount.length) {\n', '                    lockAmount.amount[pos] = lockAmount.amount[pos].add(part);\n', '                } else {\n', '                    lockAmount.amount.push(part);\n', '                }\n', '            }\n', '\n', '            pos = pos.add(1);\n', '            \n', '            uint256 lastAmount = reward.sub(part.mul(lockTimes - 1));\n', '            if (pos < lockAmount.amount.length) {\n', '                lockAmount.amount[pos] = lockAmount.amount[pos].add(lastAmount);\n', '            } else {\n', '                lockAmount.amount.push(lastAmount);\n', '            }\n', '        }\n', '\n', '        if (releaseAmount > 0) {\n', '            _receivedRewards[msg.sender] = _receivedRewards[msg.sender].add(releaseAmount);\n', '\n', '            require(\n', '                _rewardToken.transfer(msg.sender, releaseAmount),\n', '                "reward token fail"\n', '            );\n', '\n', '            emit GotReward(msg.sender, releaseAmount);\n', '        }\n', '    }\n', '\n', '    function lastTimeRewardApplicable() public view returns (uint256) {\n', '        return Math.max(_startTime, Math.min(block.timestamp, _endTime));\n', '    }\n', '\n', '    function rewardPerToken() public view returns (uint256) {\n', '        if (_supply == 0) {\n', '            return _rewardPerTokenStored;\n', '        }\n', '        return\n', '            _rewardPerTokenStored.add(\n', '                lastTimeRewardApplicable()\n', '                    .sub(_lastUpdateTime)\n', '                    .mul(_rewardRate)\n', '                    .mul(1e18)\n', '                    .div(_supply)\n', '            );\n', '    }\n', '\n', '\n', '    function transferERCToken(address tokenContractAddress, address to, uint256 amount) public onlyOwner {\n', '        require(IERC20(tokenContractAddress).transfer(to, amount), "transfer other token fail");\n', '    }\n', '}']