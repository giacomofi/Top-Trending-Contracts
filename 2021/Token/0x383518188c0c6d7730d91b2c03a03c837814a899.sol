['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-21\n', '*/\n', '\n', '// SPDX-License-Identifier: AGPL-3.0-or-later\n', 'pragma solidity 0.7.5;\n', '\n', '/**\n', ' * @dev Intended to update the TWAP for a token based on accepting an update call from that token.\n', ' *  expectation is to have this happen in the _beforeTokenTransfer function of ERC20.\n', ' *  Provides a method for a token to register its price sourve adaptor.\n', ' *  Provides a function for a token to register its TWAP updater. Defaults to token itself.\n', ' *  Provides a function a tokent to set its TWAP epoch.\n', ' *  Implements automatic closeing and opening up a TWAP epoch when epoch ends.\n', ' *  Provides a function to report the TWAP from the last epoch when passed a token address.\n', ' */\n', 'interface ITWAPOracle {\n', '\n', '  function uniV2CompPairAddressForLastEpochUpdateBlockTimstamp( address ) external returns ( uint32 );\n', '\n', '  function priceTokenAddressForPricingTokenAddressForLastEpochUpdateBlockTimstamp( address tokenToPrice_, address tokenForPriceComparison_, uint epochPeriod_ ) external returns ( uint32 );\n', '\n', '  function pricedTokenForPricingTokenForEpochPeriodForPrice( address, address, uint ) external returns ( uint );\n', '\n', '  function pricedTokenForPricingTokenForEpochPeriodForLastEpochPrice( address, address, uint ) external returns ( uint );\n', '\n', '  function updateTWAP( address uniV2CompatPairAddressToUpdate_, uint eopchPeriodToUpdate_ ) external returns ( bool );\n', '}\n', '\n', 'library EnumerableSet {\n', '\n', '  // To implement this library for multiple types with as little code\n', '  // repetition as possible, we write it in terms of a generic Set type with\n', '  // bytes32 values.\n', '  // The Set implementation uses private functions, and user-facing\n', '  // implementations (such as AddressSet) are just wrappers around the\n', '  // underlying Set.\n', '  // This means that we can only create new EnumerableSets for types that fit\n', '  // in bytes32.\n', '  struct Set {\n', '    // Storage of set values\n', '    bytes32[] _values;\n', '\n', '    // Position of the value in the `values` array, plus 1 because index 0\n', '    // means a value is not in the set.\n', '    mapping (bytes32 => uint256) _indexes;\n', '  }\n', '\n', '  /**\n', '   * @dev Add a value to a set. O(1).\n', '   *\n', '   * Returns true if the value was added to the set, that is if it was not\n', '   * already present.\n', '   */\n', '  function _add(Set storage set, bytes32 value) private returns (bool) {\n', '    if (!_contains(set, value)) {\n', '      set._values.push(value);\n', '      // The value is stored at length-1, but we add 1 to all indexes\n', '      // and use 0 as a sentinel value\n', '      set._indexes[value] = set._values.length;\n', '      return true;\n', '    } else {\n', '      return false;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Removes a value from a set. O(1).\n', '   *\n', '   * Returns true if the value was removed from the set, that is if it was\n', '   * present.\n', '   */\n', '  function _remove(Set storage set, bytes32 value) private returns (bool) {\n', "    // We read and store the value's index to prevent multiple reads from the same storage slot\n", '    uint256 valueIndex = set._indexes[value];\n', '\n', '    if (valueIndex != 0) { // Equivalent to contains(set, value)\n', '      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n', "      // the array, and then remove the last element (sometimes called as 'swap and pop').\n", '      // This modifies the order of the array, as noted in {at}.\n', '\n', '      uint256 toDeleteIndex = valueIndex - 1;\n', '      uint256 lastIndex = set._values.length - 1;\n', '\n', '      // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "      // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '      bytes32 lastvalue = set._values[lastIndex];\n', '\n', '      // Move the last value to the index where the value to delete is\n', '      set._values[toDeleteIndex] = lastvalue;\n', '      // Update the index for the moved value\n', '      set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n', '\n', '      // Delete the slot where the moved value was stored\n', '      set._values.pop();\n', '\n', '      // Delete the index for the deleted slot\n', '      delete set._indexes[value];\n', '\n', '      return true;\n', '    } else {\n', '      return false;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Returns true if the value is in the set. O(1).\n', '   */\n', '  function _contains(Set storage set, bytes32 value) private view returns (bool) {\n', '    return set._indexes[value] != 0;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the number of values on the set. O(1).\n', '   */\n', '  function _length(Set storage set) private view returns (uint256) {\n', '    return set._values.length;\n', '  }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '  function _at(Set storage set, uint256 index) private view returns (bytes32) {\n', '    require(set._values.length > index, "EnumerableSet: index out of bounds");\n', '    return set._values[index];\n', '  }\n', '\n', '  function _getValues( Set storage set_ ) private view returns ( bytes32[] storage ) {\n', '    return set_._values;\n', '  }\n', '\n', '  // TODO needs insert function that maintains order.\n', '  // TODO needs NatSpec documentation comment.\n', '  /**\n', '   * Inserts new value by moving existing value at provided index to end of array and setting provided value at provided index\n', '   */\n', '  function _insert(Set storage set_, uint256 index_, bytes32 valueToInsert_ ) private returns ( bool ) {\n', '    require(  set_._values.length > index_ );\n', '    require( !_contains( set_, valueToInsert_ ), "Remove value you wish to insert if you wish to reorder array." );\n', '    bytes32 existingValue_ = _at( set_, index_ );\n', '    set_._values[index_] = valueToInsert_;\n', '    return _add( set_, existingValue_);\n', '  } \n', '\n', '  struct Bytes4Set {\n', '    Set _inner;\n', '  }\n', '\n', '  /**\n', '   * @dev Add a value to a set. O(1).\n', '   *\n', '   * Returns true if the value was added to the set, that is if it was not\n', '   * already present.\n', '   */\n', '  function add(Bytes4Set storage set, bytes4 value) internal returns (bool) {\n', '    return _add(set._inner, value);\n', '  }\n', '\n', '  /**\n', '   * @dev Removes a value from a set. O(1).\n', '   *\n', '   * Returns true if the value was removed from the set, that is if it was\n', '   * present.\n', '   */\n', '  function remove(Bytes4Set storage set, bytes4 value) internal returns (bool) {\n', '    return _remove(set._inner, value);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns true if the value is in the set. O(1).\n', '   */\n', '  function contains(Bytes4Set storage set, bytes4 value) internal view returns (bool) {\n', '    return _contains(set._inner, value);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the number of values on the set. O(1).\n', '   */\n', '  function length(Bytes4Set storage set) internal view returns (uint256) {\n', '    return _length(set._inner);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the value stored at position `index` in the set. O(1).\n', '   *\n', '   * Note that there are no guarantees on the ordering of values inside the\n', '   * array, and it may change when more values are added or removed.\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - `index` must be strictly less than {length}.\n', '   */\n', '  function at(Bytes4Set storage set, uint256 index) internal view returns ( bytes4 ) {\n', '    return bytes4( _at( set._inner, index ) );\n', '  }\n', '\n', '  function getValues( Bytes4Set storage set_ ) internal view returns ( bytes4[] memory ) {\n', '    bytes4[] memory bytes4Array_;\n', '    for( uint256 iteration_ = 0; _length( set_._inner ) > iteration_; iteration_++ ) {\n', '      bytes4Array_[iteration_] = bytes4( _at( set_._inner, iteration_ ) );\n', '    }\n', '    return bytes4Array_;\n', '  }\n', '\n', '  function insert( Bytes4Set storage set_, uint256 index_, bytes4 valueToInsert_ ) internal returns ( bool ) {\n', '    return _insert( set_._inner, index_, valueToInsert_ );\n', '  }\n', '\n', '    struct Bytes32Set {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n', '        return _add(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n', '        return _remove(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n', '        return _contains(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function length(Bytes32Set storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the value stored at position `index` in the set. O(1).\n', '     *\n', '     * Note that there are no guarantees on the ordering of values inside the\n', '     * array, and it may change when more values are added or removed.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `index` must be strictly less than {length}.\n', '     */\n', '    function at(Bytes32Set storage set, uint256 index) internal view returns ( bytes32 ) {\n', '        return _at(set._inner, index);\n', '    }\n', '\n', '  function getValues( Bytes32Set storage set_ ) internal view returns ( bytes4[] memory ) {\n', '    bytes4[] memory bytes4Array_;\n', '\n', '      for( uint256 iteration_ = 0; _length( set_._inner ) >= iteration_; iteration_++ ){\n', '        bytes4Array_[iteration_] = bytes4( at( set_, iteration_ ) );\n', '      }\n', '\n', '      return bytes4Array_;\n', '  }\n', '\n', '  function insert( Bytes32Set storage set_, uint256 index_, bytes32 valueToInsert_ ) internal returns ( bool ) {\n', '    return _insert( set_._inner, index_, valueToInsert_ );\n', '  }\n', '\n', '  // AddressSet\n', '  struct AddressSet {\n', '    Set _inner;\n', '  }\n', '\n', '  /**\n', '   * @dev Add a value to a set. O(1).\n', '   *\n', '   * Returns true if the value was added to the set, that is if it was not\n', '   * already present.\n', '   */\n', '  function add(AddressSet storage set, address value) internal returns (bool) {\n', '    return _add(set._inner, bytes32(uint256(value)));\n', '  }\n', '\n', '  /**\n', '   * @dev Removes a value from a set. O(1).\n', '   *\n', '   * Returns true if the value was removed from the set, that is if it was\n', '   * present.\n', '   */\n', '  function remove(AddressSet storage set, address value) internal returns (bool) {\n', '    return _remove(set._inner, bytes32(uint256(value)));\n', '  }\n', '\n', '  /**\n', '   * @dev Returns true if the value is in the set. O(1).\n', '   */\n', '  function contains(AddressSet storage set, address value) internal view returns (bool) {\n', '    return _contains(set._inner, bytes32(uint256(value)));\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the number of values in the set. O(1).\n', '   */\n', '  function length(AddressSet storage set) internal view returns (uint256) {\n', '    return _length(set._inner);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the value stored at position `index` in the set. O(1).\n', '   *\n', '   * Note that there are no guarantees on the ordering of values inside the\n', '   * array, and it may change when more values are added or removed.\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - `index` must be strictly less than {length}.\n', '   */\n', '  function at(AddressSet storage set, uint256 index) internal view returns (address) {\n', '    return address(uint256(_at(set._inner, index)));\n', '  }\n', '\n', '  /**\n', '   * TODO Might require explicit conversion of bytes32[] to address[].\n', '   *  Might require iteration.\n', '   */\n', '  function getValues( AddressSet storage set_ ) internal view returns ( address[] memory ) {\n', '\n', '    address[] memory addressArray;\n', '\n', '    for( uint256 iteration_ = 0; _length(set_._inner) >= iteration_; iteration_++ ){\n', '      addressArray[iteration_] = at( set_, iteration_ );\n', '    }\n', '\n', '    return addressArray;\n', '  }\n', '\n', '  function insert(AddressSet storage set_, uint256 index_, address valueToInsert_ ) internal returns ( bool ) {\n', '    return _insert( set_._inner, index_, bytes32(uint256(valueToInsert_)) );\n', '  }\n', '\n', '\n', '    // UintSet\n', '\n', '    struct UintSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function length(UintSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n', '        return uint256(_at(set._inner, index));\n', '    }\n', '\n', '    struct UInt256Set {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(UInt256Set storage set, uint256 value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(UInt256Set storage set, uint256 value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(UInt256Set storage set, uint256 value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function length(UInt256Set storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the value stored at position `index` in the set. O(1).\n', '     *\n', '     * Note that there are no guarantees on the ordering of values inside the\n', '     * array, and it may change when more values are added or removed.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `index` must be strictly less than {length}.\n', '     */\n', '    function at(UInt256Set storage set, uint256 index) internal view returns (uint256) {\n', '        return uint256(_at(set._inner, index));\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '  /**\n', '   * @dev Returns the amount of tokens in existence.\n', '   */\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  /**\n', '   * @dev Returns the amount of tokens owned by `account`.\n', '   */\n', '  function balanceOf(address account) external view returns (uint256);\n', '\n', '  /**\n', "   * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '   *\n', '   * Returns a boolean value indicating whether the operation succeeded.\n', '   *\n', '   * Emits a {Transfer} event.\n', '   */\n', '  function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '  /**\n', '   * @dev Returns the remaining number of tokens that `spender` will be\n', '   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '   * zero by default.\n', '   *\n', '   * This value changes when {approve} or {transferFrom} are called.\n', '   */\n', '  function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '  /**\n', "   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '   *\n', '   * Returns a boolean value indicating whether the operation succeeded.\n', '   *\n', '   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '   * that someone may use both the old and the new allowance by unfortunate\n', '   * transaction ordering. One possible solution to mitigate this race\n', "   * condition is to first reduce the spender's allowance to 0 and set the\n", '   * desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   *\n', '   * Emits an {Approval} event.\n', '   */\n', '  function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '  /**\n', '   * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "   * allowance mechanism. `amount` is then deducted from the caller's\n", '   * allowance.\n', '   *\n', '   * Returns a boolean value indicating whether the operation succeeded.\n', '   *\n', '   * Emits a {Transfer} event.\n', '   */\n', '  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '  /**\n', '   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '   * another (`to`).\n', '   *\n', '   * Note that `value` may be zero.\n', '   */\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '  /**\n', '   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '   * a call to {approve}. `value` is the new allowance.\n', '   */\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '\n', '    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n', '    function sqrrt(uint256 a) internal pure returns (uint c) {\n', '        if (a > 3) {\n', '            c = a;\n', '            uint b = add( div( a, 2), 1 );\n', '            while (b < c) {\n', '                c = b;\n', '                b = div( add( div( a, b ), b), 2 );\n', '            }\n', '        } else if (a != 0) {\n', '            c = 1;\n', '        }\n', '    }\n', '\n', '    /*\n', '     * Expects percentage to be trailed by 00,\n', '    */\n', '    function percentageAmount( uint256 total_, uint8 percentage_ ) internal pure returns ( uint256 percentAmount_ ) {\n', '        return div( mul( total_, percentage_ ), 1000 );\n', '    }\n', '\n', '    /*\n', '     * Expects percentage to be trailed by 00,\n', '    */\n', '    function substractPercentage( uint256 total_, uint8 percentageToSub_ ) internal pure returns ( uint256 result_ ) {\n', '        return sub( total_, div( mul( total_, percentageToSub_ ), 1000 ) );\n', '    }\n', '\n', '    function percentageOfTotal( uint256 part_, uint256 total_ ) internal pure returns ( uint256 percent_ ) {\n', '        return div( mul(part_, 100) , total_ );\n', '    }\n', '\n', '    /**\n', '     * Taken from Hypersonic https://github.com/M2629/HyperSonic/blob/main/Math.sol\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '\n', '    function quadraticPricing( uint256 payment_, uint256 multiplier_ ) internal pure returns (uint256) {\n', '        return sqrrt( mul( multiplier_, payment_ ) );\n', '    }\n', '\n', '  function bondingCurve( uint256 supply_, uint256 multiplier_ ) internal pure returns (uint256) {\n', '      return mul( multiplier_, supply_ );\n', '  }\n', '}\n', '\n', 'abstract contract ERC20\n', '  is \n', '    IERC20\n', '  {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  // TODO comment actual hash value.\n', '  bytes32 constant private ERC20TOKEN_ERC1820_INTERFACE_ID = keccak256( "ERC20Token" );\n', '    \n', '  // Present in ERC777\n', '  mapping (address => uint256) internal _balances;\n', '\n', '  // Present in ERC777\n', '  mapping (address => mapping (address => uint256)) internal _allowances;\n', '\n', '  // Present in ERC777\n', '  uint256 internal _totalSupply;\n', '\n', '  // Present in ERC777\n', '  string internal _name;\n', '    \n', '  // Present in ERC777\n', '  string internal _symbol;\n', '    \n', '  // Present in ERC777\n', '  uint8 internal _decimals;\n', '\n', '  /**\n', '   * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '   * a default value of 18.\n', '   *\n', '   * To select a different value for {decimals}, use {_setupDecimals}.\n', '   *\n', '   * All three of these values are immutable: they can only be set once during\n', '   * construction.\n', '   */\n', '  constructor (string memory name_, string memory symbol_, uint8 decimals_) {\n', '    _name = name_;\n', '    _symbol = symbol_;\n', '    _decimals = decimals_;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the name of the token.\n', '   */\n', '  // Present in ERC777\n', '  function name() public view returns (string memory) {\n', '    return _name;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the symbol of the token, usually a shorter version of the\n', '   * name.\n', '   */\n', '  // Present in ERC777\n', '  function symbol() public view returns (string memory) {\n', '    return _symbol;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the number of decimals used to get its user representation.\n', '   * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '   * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '   *\n', '   * Tokens usually opt for a value of 18, imitating the relationship between\n', '   * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '   * called.\n', '   *\n', '   * NOTE: This information is only used for _display_ purposes: it in\n', '   * no way affects any of the arithmetic of the contract, including\n', '   * {IERC20-balanceOf} and {IERC20-transfer}.\n', '   */\n', '  // Present in ERC777\n', '  function decimals() public view returns (uint8) {\n', '    return _decimals;\n', '  }\n', '\n', '  /**\n', '   * @dev See {IERC20-totalSupply}.\n', '   */\n', '  // Present in ERC777\n', '  function totalSupply() public view override returns (uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  /**\n', '   * @dev See {IERC20-balanceOf}.\n', '   */\n', '  // Present in ERC777\n', '  function balanceOf(address account) public view virtual override returns (uint256) {\n', '    return _balances[account];\n', '  }\n', '\n', '  /**\n', '   * @dev See {IERC20-transfer}.\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - `recipient` cannot be the zero address.\n', '   * - the caller must have a balance of at least `amount`.\n', '   */\n', '  // Overrideen in ERC777\n', '  // Confirm that this behavior changes \n', '  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '    _transfer(msg.sender, recipient, amount);\n', '    return true;\n', '  }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    // Present in ERC777\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    // Present in ERC777\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    // Present in ERC777\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '  /**\n', '   * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '   *\n', '   * This is internal function is equivalent to {transfer}, and can be used to\n', '   * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '   *\n', '   * Emits a {Transfer} event.\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - `sender` cannot be the zero address.\n', '   * - `recipient` cannot be the zero address.\n', '   * - `sender` must have a balance of at least `amount`.\n', '   */\n', '  function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '    require(sender != address(0), "ERC20: transfer from the zero address");\n', '    require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '    _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '    _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '    _balances[recipient] = _balances[recipient].add(amount);\n', '    emit Transfer(sender, recipient, amount);\n', '  }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    // Present in ERC777\n', '    function _mint(address account_, uint256 amount_) internal virtual {\n', '        require(account_ != address(0), "ERC20: mint to the zero address");\n', '        _beforeTokenTransfer(address( this ), account_, amount_);\n', '        _totalSupply = _totalSupply.add(amount_);\n', '        _balances[account_] = _balances[account_].add(amount_);\n', '        emit Transfer(address( this ), account_, amount_);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    // Present in ERC777\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    // Present in ERC777\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    // Considering deprication to reduce size of bytecode as changing _decimals to internal acheived the same functionality.\n', '    // function _setupDecimals(uint8 decimals_) internal {\n', '    //     _decimals = decimals_;\n', '    // }\n', '\n', '  /**\n', '   * @dev Hook that is called before any transfer of tokens. This includes\n', '   * minting and burning.\n', '   *\n', '   * Calling conditions:\n', '   *\n', "   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '   * will be to transferred to `to`.\n', '   * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '   * - `from` and `to` are never both zero.\n', '   *\n', '   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '   */\n', '  // Present in ERC777\n', '  function _beforeTokenTransfer( address from_, address to_, uint256 amount_ ) internal virtual { }\n', '}\n', '\n', 'library Counters {\n', '    using SafeMath for uint256;\n', '\n', '    struct Counter {\n', '        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n', "        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n", '        // this feature: see https://github.com/ethereum/solidity/issues/4637\n', '        uint256 _value; // default: 0\n', '    }\n', '\n', '    function current(Counter storage counter) internal view returns (uint256) {\n', '        return counter._value;\n', '    }\n', '\n', '    function increment(Counter storage counter) internal {\n', '        // The {SafeMath} overflow check can be skipped here, see the comment at the top\n', '        counter._value += 1;\n', '    }\n', '\n', '    function decrement(Counter storage counter) internal {\n', '        counter._value = counter._value.sub(1);\n', '    }\n', '}\n', '\n', 'interface IERC2612Permit {\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\n", "     * given `owner`'s signed approval.\n", '     *\n', '     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n', '     * ordering also apply here.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     * - `deadline` must be a timestamp in the future.\n', '     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n', '     * over the EIP712-formatted function arguments.\n', "     * - the signature must use ``owner``'s current nonce (see {nonces}).\n", '     *\n', '     * For more information on the signature format, see the\n', '     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n', '     * section].\n', '     */\n', '    function permit(\n', '        address owner,\n', '        address spender,\n', '        uint256 amount,\n', '        uint256 deadline,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external;\n', '\n', '    /**\n', '     * @dev Returns the current ERC2612 nonce for `owner`. This value must be\n', '     * included whenever a signature is generated for {permit}.\n', '     *\n', "     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n", '     * prevents a signature from being used multiple times.\n', '     */\n', '    function nonces(address owner) external view returns (uint256);\n', '}\n', '\n', 'abstract contract ERC20Permit is ERC20, IERC2612Permit {\n', '    using Counters for Counters.Counter;\n', '\n', '    mapping(address => Counters.Counter) private _nonces;\n', '\n', '    // keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");\n', '    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n', '\n', '    bytes32 public DOMAIN_SEPARATOR;\n', '\n', '    constructor() {\n', '        uint256 chainID;\n', '        assembly {\n', '            chainID := chainid()\n', '        }\n', '\n', '        DOMAIN_SEPARATOR = keccak256(\n', '            abi.encode(\n', '                keccak256("EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"),\n', '                keccak256(bytes(name())),\n', '                keccak256(bytes("1")), // Version\n', '                chainID,\n', '                address(this)\n', '            )\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC2612Permit-permit}.\n', '     *\n', '     */\n', '    function permit(\n', '        address owner,\n', '        address spender,\n', '        uint256 amount,\n', '        uint256 deadline,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) public virtual override {\n', '        require(block.timestamp <= deadline, "Permit: expired deadline");\n', '\n', '        bytes32 hashStruct =\n', '            keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, amount, _nonces[owner].current(), deadline));\n', '\n', '        bytes32 _hash = keccak256(abi.encodePacked(uint16(0x1901), DOMAIN_SEPARATOR, hashStruct));\n', '\n', '        address signer = ecrecover(_hash, v, r, s);\n', '        require(signer != address(0) && signer == owner, "ZeroSwapPermit: Invalid signature");\n', '\n', '        _nonces[owner].increment();\n', '        _approve(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC2612Permit-nonces}.\n', '     */\n', '    function nonces(address owner) public view override returns (uint256) {\n', '        return _nonces[owner].current();\n', '    }\n', '}\n', '\n', 'interface IOwnable {\n', '\n', '  function owner() external view returns (address);\n', '\n', '  function renounceOwnership() external;\n', '  \n', '  function transferOwnership( address newOwner_ ) external;\n', '}\n', '\n', 'contract Ownable is IOwnable {\n', '    \n', '  address internal _owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev Initializes the contract setting the deployer as the initial owner.\n', '   */\n', '  constructor () {\n', '    _owner = msg.sender;\n', '    emit OwnershipTransferred( address(0), _owner );\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the address of the current owner.\n', '   */\n', '  function owner() public view override returns (address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require( _owner == msg.sender, "Ownable: caller is not the owner" );\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Leaves the contract without owner. It will not be possible to call\n', '   * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '   *\n', '   * NOTE: Renouncing ownership will leave the contract without an owner,\n', '   * thereby removing any functionality that is only available to the owner.\n', '   */\n', '  function renounceOwnership() public virtual override onlyOwner() {\n', '    emit OwnershipTransferred( _owner, address(0) );\n', '    _owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '   * Can only be called by the current owner.\n', '   */\n', '  function transferOwnership( address newOwner_ ) public virtual override onlyOwner() {\n', '    require( newOwner_ != address(0), "Ownable: new owner is the zero address");\n', '    emit OwnershipTransferred( _owner, newOwner_ );\n', '    _owner = newOwner_;\n', '  }\n', '}\n', '\n', 'contract VaultOwned is Ownable {\n', '    \n', '  address internal _vault;\n', '\n', '  function setVault( address vault_ ) external onlyOwner() returns ( bool ) {\n', '    _vault = vault_;\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the address of the current vault.\n', '   */\n', '  function vault() public view returns (address) {\n', '    return _vault;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the vault.\n', '   */\n', '  modifier onlyVault() {\n', '    require( _vault == msg.sender, "VaultOwned: caller is not the Vault" );\n', '    _;\n', '  }\n', '\n', '}\n', '\n', 'contract TWAPOracleUpdater is ERC20Permit, VaultOwned {\n', '\n', '  using EnumerableSet for EnumerableSet.AddressSet;\n', '\n', '  event TWAPOracleChanged( address indexed previousTWAPOracle, address indexed newTWAPOracle );\n', '  event TWAPEpochChanged( uint previousTWAPEpochPeriod, uint newTWAPEpochPeriod );\n', '  event TWAPSourceAdded( address indexed newTWAPSource );\n', '  event TWAPSourceRemoved( address indexed removedTWAPSource );\n', '    \n', '  EnumerableSet.AddressSet private _dexPoolsTWAPSources;\n', '\n', '  ITWAPOracle public twapOracle;\n', '\n', '  uint public twapEpochPeriod;\n', '\n', '  constructor(\n', '        string memory name_,\n', '        string memory symbol_,\n', '        uint8 decimals_\n', '    ) ERC20(name_, symbol_, decimals_) {\n', '    }\n', '\n', '  function changeTWAPOracle( address newTWAPOracle_ ) external onlyOwner() {\n', '    emit TWAPOracleChanged( address(twapOracle), newTWAPOracle_);\n', '    twapOracle = ITWAPOracle( newTWAPOracle_ );\n', '  }\n', '\n', '  function changeTWAPEpochPeriod( uint newTWAPEpochPeriod_ ) external onlyOwner() {\n', '    require( newTWAPEpochPeriod_ > 0, "TWAPOracleUpdater: TWAP Epoch period must be greater than 0." );\n', '    emit TWAPEpochChanged( twapEpochPeriod, newTWAPEpochPeriod_ );\n', '    twapEpochPeriod = newTWAPEpochPeriod_;\n', '  }\n', '\n', '  function addTWAPSource( address newTWAPSourceDexPool_ ) external onlyOwner() {\n', '    require( _dexPoolsTWAPSources.add( newTWAPSourceDexPool_ ), "OlympusERC20TOken: TWAP Source already stored." );\n', '    emit TWAPSourceAdded( newTWAPSourceDexPool_ );\n', '  }\n', '\n', '  function removeTWAPSource( address twapSourceToRemove_ ) external onlyOwner() {\n', '    require( _dexPoolsTWAPSources.remove( twapSourceToRemove_ ), "OlympusERC20TOken: TWAP source not present." );\n', '    emit TWAPSourceRemoved( twapSourceToRemove_ );\n', '  }\n', '\n', '  function _uodateTWAPOracle( address dexPoolToUpdateFrom_, uint twapEpochPeriodToUpdate_ ) internal {\n', '    if ( _dexPoolsTWAPSources.contains( dexPoolToUpdateFrom_ )) {\n', '      twapOracle.updateTWAP( dexPoolToUpdateFrom_, twapEpochPeriodToUpdate_ );\n', '    }\n', '  }\n', '\n', '  function _beforeTokenTransfer( address from_, address to_, uint256 amount_ ) internal override virtual {\n', '      if( _dexPoolsTWAPSources.contains( from_ ) ) {\n', '        _uodateTWAPOracle( from_, twapEpochPeriod );\n', '      } else {\n', '        if ( _dexPoolsTWAPSources.contains( to_ ) ) {\n', '          _uodateTWAPOracle( to_, twapEpochPeriod );\n', '        }\n', '      }\n', '    }\n', '}\n', '\n', 'contract Divine is TWAPOracleUpdater {\n', '  constructor(\n', '    string memory name_,\n', '    string memory symbol_,\n', '    uint8 decimals_\n', '  ) TWAPOracleUpdater(name_, symbol_, decimals_) {\n', '  }\n', '}\n', '\n', 'contract OlympusERC20Token is Divine {\n', '\n', '  using SafeMath for uint256;\n', '\n', '    constructor() Divine("Olympus", "OHM", 9) {\n', '    }\n', '\n', '    function mint(address account_, uint256 amount_) external onlyVault() {\n', '        _mint(account_, amount_);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from the caller.\n', '     *\n', '     * See {ERC20-_burn}.\n', '     */\n', '    function burn(uint256 amount) public virtual {\n', '        _burn(msg.sender, amount);\n', '    }\n', '\n', '    // function _beforeTokenTransfer( address from_, address to_, uint256 amount_ ) internal override virtual {\n', '    //   if( _dexPoolsTWAPSources.contains( from_ ) ) {\n', '    //     _uodateTWAPOracle( from_, twapEpochPeriod );\n', '    //   } else {\n', '    //     if ( _dexPoolsTWAPSources.contains( to_ ) ) {\n', '    //       _uodateTWAPOracle( to_, twapEpochPeriod );\n', '    //     }\n', '    //   }\n', '    // }\n', '\n', '    /*\n', "     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n", '     * allowance.\n', '     *\n', '     * See {ERC20-_burn} and {ERC20-allowance}.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have allowance for ``accounts``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '     \n', '    function burnFrom(address account_, uint256 amount_) public virtual {\n', '        _burnFrom(account_, amount_);\n', '    }\n', '\n', '    function _burnFrom(address account_, uint256 amount_) public virtual {\n', '        uint256 decreasedAllowance_ =\n', '            allowance(account_, msg.sender).sub(\n', '                amount_,\n', '                "ERC20: burn amount exceeds allowance"\n', '            );\n', '\n', '        _approve(account_, msg.sender, decreasedAllowance_);\n', '        _burn(account_, amount_);\n', '    }\n', '}']