['// SPDX-License-Identifier: MIT\n', 'pragma solidity =0.7.5;\n', '\n', 'import "LibSafeMath.sol";\n', 'import "LibIUSDPrice.sol";\n', '\n', '\n', '/**\n', ' * @title Interface of VokenTB.\n', ' */\n', 'interface IVokenTB {\n', '    function cap() external view returns (uint256);\n', '    function totalSupply() external view returns (uint256);\n', '    function burningPermilleBorder() external view returns (uint16 min, uint16 max);\n', '    function vokenCounter() external view returns (uint256);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @dev VokenTB Data\n', ' */\n', 'contract VokenTBData {\n', '    using SafeMath for uint256;\n', '\n', '    IVokenTB private immutable VOKEN_TB = IVokenTB(0x1234567a022acaa848E7D6bC351d075dBfa76Dd4);\n', '    IUSDPrice private immutable USDPrice = IUSDPrice(0x0D116c07ED875E21864548dA8930163C4739FA90);\n', '\n', '    function data()\n', '        public\n', '        view\n', '        returns (\n', '            uint256 cap,\n', '            uint256 totalSupply,\n', '            uint16 burningPermilleMin,\n', '            uint16 burningPermilleMax,\n', '            \n', '            uint256 etherPrice,\n', '            uint256 vokenPrice,\n', '            uint256 vokenCounter\n', '        )\n', '    {\n', '        cap = VOKEN_TB.cap();\n', '        totalSupply = VOKEN_TB.totalSupply();\n', '        \n', '        (burningPermilleMin, burningPermilleMax) = VOKEN_TB.burningPermilleBorder();\n', '        \n', '        etherPrice = USDPrice.etherPrice();\n', '        vokenPrice = USDPrice.vokenPrice();\n', '\n', '        vokenCounter = VOKEN_TB.vokenCounter();\n', '    }\n', '}']