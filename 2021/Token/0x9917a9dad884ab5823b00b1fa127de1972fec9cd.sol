['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'import "./ERC20.sol";\n', 'import "./ERC20Capped.sol";\n', 'import "./Ownable.sol";\n', '\n', 'contract EasyFeedbackToken is ERC20Capped, Ownable {\n', '    constructor ()\n', '    ERC20("EasyFeedback", "EASYF")\n', '    ERC20Capped(179141000000 * 1 ether)\n', '    {\n', '        // Mint 1% of total supply\n', '        mint(msg.sender, (1791410000 * 1 ether));\n', '    }\n', '\n', '    event Burned(address indexed burner, uint256 burnAmount);\n', '\n', '    event Minted(\n', '        address indexed minter,\n', '        address indexed receiver,\n', '        uint256 mintAmount\n', '    );\n', '\n', '    function mint(address _to, uint256 _amount) public onlyOwner {\n', '        require(_amount > 0, "ERC20: Cannot mint 0 tokens");\n', '        _mint(_to, _amount);\n', '        emit Minted(owner(), _to, _amount);\n', '    }\n', '\n', '    function burn(uint256 _amount) public {\n', '        require(_amount > 0, "ERC20: Cannot burn 0 tokens");\n', '        _burn(msg.sender, _amount);\n', '        emit Burned(msg.sender, _amount);\n', '    }\n', '}']