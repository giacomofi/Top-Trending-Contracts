['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-12\n', '*/\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '// SPDX-License-Identifier: none\n', 'interface IERC20 {\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    \n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'interface IToken {\n', '  function mint(address to, uint amount) external;\n', '  function burn(address owner, uint amount) external;\n', '  function transferOwnership(address  _newOwner) external;\n', '  function balanceOf(address tokenOwner) external returns (uint balance);\n', '  function transfer(address recipient, uint256 amount) external returns (bool);\n', '}\n', '\n', '\n', '\n', 'contract SpyErcBridge {\n', '  address public admin;\n', '  IToken public token;\n', '  uint public nonce;\n', '  address public feepayer;\n', '  mapping(uint => bool) public processedNonces;\n', '\n', '  enum Step { Burn, Mint }\n', '  event Transfer(\n', '    address from,\n', '    address to,\n', '    uint amount,\n', '    uint date,\n', '    uint nonce,\n', '    Step indexed step\n', '  );\n', 'event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '\n', '  constructor(address _token) {\n', '    admin = msg.sender;\n', '    token = IToken(_token);\n', '    \n', '  }\n', '\n', '\n', '   // transfer Ownership to other address\n', '    function transferOwnership(address _newOwner) public {\n', '        require(_newOwner != address(0x0));\n', '        require(msg.sender == admin);\n', '        emit OwnershipTransferred(admin,_newOwner);\n', '        admin = _newOwner;\n', '    }\n', '    \n', ' // transfer Ownership to other address\n', '    function transferTokenOwnership(address _newOwner) public {\n', '        require(_newOwner != address(0x0));\n', '        require(msg.sender == admin);\n', '        token.transferOwnership(_newOwner);\n', '    }    \n', '    \n', ' \n', '    receive() payable external {\n', '        \n', '        \n', '    }\n', '    \n', '    function transferAnyERC20Token(address _token,address to,uint amount) external{\n', "         require(msg.sender == admin, 'only admin');\n", '         require(token.balanceOf(address(this))>=amount);\n', '         IToken(_token).transfer(to,amount);\n', '    }\n', '\n', '  function vtransfer(address to, uint amount, uint otherChainNonce) external {\n', '     address selfAddress =  address(this);\n', "    require(msg.sender == admin, 'only admin');\n", "    require(processedNonces[otherChainNonce] == false, 'transfer already processed');\n", '    require(token.balanceOf(selfAddress)>=amount);\n', '    processedNonces[otherChainNonce] = true;\n', '    token.transfer(to,amount);\n', '    emit Transfer(\n', '      selfAddress,\n', '      to,\n', '      amount,\n', '      block.timestamp,\n', '      otherChainNonce,\n', '      Step.Mint\n', '    );\n', '  }\n', '}']