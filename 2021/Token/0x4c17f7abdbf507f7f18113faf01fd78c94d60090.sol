['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-01\n', '*/\n', '\n', 'pragma solidity =0.5.12;\n', '\n', 'contract LibNote {\n', '    event LogNote(\n', '        bytes4   indexed  sig,\n', '        address  indexed  usr,\n', '        bytes32  indexed  arg1,\n', '        bytes32  indexed  arg2,\n', '        bytes             data\n', '    ) anonymous;\n', '\n', '    modifier note {\n', '        _;\n', '        assembly {\n', "        // log an 'anonymous' event with a constant 6 words of calldata\n", '        // and four indexed topics: selector, caller, arg1 and arg2\n', '            let mark := msize                         // end of memory ensures zero\n', '            mstore(0x40, add(mark, 288))              // update free memory pointer\n', '            mstore(mark, 0x20)                        // bytes type data offset\n', '            mstore(add(mark, 0x20), 224)              // bytes size (padded)\n', '            calldatacopy(add(mark, 0x40), 0, 224)     // bytes payload\n', '            log4(mark, 288,                           // calldata\n', '            shl(224, shr(224, calldataload(0))), // msg.sig\n', '            caller,                              // msg.sender\n', '            calldataload(4),                     // arg1\n', '            calldataload(36)                     // arg2\n', '            )\n', '        }\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function transfer(address,uint) external returns (bool);\n', '}\n', '\n', 'contract wOST is LibNote {\n', '    // --- Auth ---\n', '    mapping (address => uint) public wards;\n', '    function rely(address guy) external note auth { wards[guy] = 1; }\n', '    function deny(address guy) external note auth { wards[guy] = 0; }\n', '    modifier auth {\n', '        require(wards[msg.sender] == 1, "WOST/not-authorized");\n', '        _;\n', '    }\n', '\n', '    // --- ERC20 Data ---\n', '    string  public constant name     = "wOST";\n', '    string  public constant symbol   = "WOST";\n', '    string  public constant version  = "1.0.0";\n', '    uint8   public constant decimals = 18;\n', '    uint256 public totalSupply;\n', '    uint256 public live;\n', '\n', '    address source;\n', '\n', '    mapping (address => uint)                      public balanceOf;\n', '    mapping (address => mapping (address => uint)) public allowance;\n', '\n', '    event Approval(address indexed src, address indexed guy, uint wad);\n', '    event Transfer(address indexed src, address indexed dst, uint wad);\n', '\n', '    // --- Math ---\n', '    function add(uint x, uint y) internal pure returns (uint z) {\n', '        require((z = x + y) >= x);\n', '    }\n', '    function sub(uint x, uint y) internal pure returns (uint z) {\n', '        require((z = x - y) <= x);\n', '    }\n', '\n', '    constructor(address _source) public {\n', '        wards[msg.sender] = 1;\n', '        live = 1;\n', '        source = _source;\n', '    }\n', '\n', '    // --- Token ---\n', '    function transfer(address dst, uint wad) external returns (bool) {\n', '        return transferFrom(msg.sender, dst, wad);\n', '    }\n', '    function transferFrom(address src, address dst, uint wad)\n', '    public returns (bool)\n', '    {\n', '        require(live == 1, "WOST/not-live");\n', '        require(balanceOf[src] >= wad, "WOST/insufficient-balance");\n', '        if (src != msg.sender) {\n', '            require(allowance[src][msg.sender] >= wad, "WOST/insufficient-allowance");\n', '            allowance[src][msg.sender] = sub(allowance[src][msg.sender], wad);\n', '        }\n', '        balanceOf[src] = sub(balanceOf[src], wad);\n', '        balanceOf[dst] = add(balanceOf[dst], wad);\n', '        emit Transfer(src, dst, wad);\n', '        return true;\n', '    }\n', '    function mint(address usr, uint wad) external auth {\n', '        balanceOf[usr] = add(balanceOf[usr], wad);\n', '        totalSupply    = add(totalSupply, wad);\n', '        emit Transfer(address(0), usr, wad);\n', '    }\n', '    function burn(address usr, uint wad) external auth {\n', '        require(balanceOf[usr] >= wad, "WOST/insufficient-balance");\n', '        balanceOf[usr] = sub(balanceOf[usr], wad);\n', '        totalSupply    = sub(totalSupply, wad);\n', '        emit Transfer(usr, address(0), wad);\n', '    }\n', '    function approve(address usr, uint wad) external returns (bool) {\n', '        allowance[msg.sender][usr] = wad;\n', '        emit Approval(msg.sender, usr, wad);\n', '        return true;\n', '    }\n', '\n', '    function exit(uint wad) external returns (bool) {\n', '        require(balanceOf[msg.sender] >= wad, "WOST/insufficient-balance");\n', '        balanceOf[msg.sender] = sub(balanceOf[msg.sender] , wad);\n', '        totalSupply = sub(totalSupply, wad);\n', '        emit Transfer(msg.sender, address(0), wad);\n', '        return IERC20(source).transfer(msg.sender, wad);\n', '    }\n', '\n', '    /*\n', '     * Emergency shutdown\n', '     */\n', '    function cage() external note auth {\n', '        live = 0;\n', '    }\n', '\n', '    function restart() external note auth {\n', '        live = 1;\n', '    }\n', '}']