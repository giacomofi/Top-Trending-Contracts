['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-13\n', '*/\n', '\n', '// SPDX-License-Identifier: GPL-3.0\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\t\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract SimpleCrowdsale {\n', '    using SafeMath for uint256;\n', '      // The token being sold\n', '  address public token;\n', '  \n', '  address[] public incoming_addresses;\n', '  \n', '    \n', '    uint256 public count = 1;\n', '     mapping (uint256 => address) public investor_list;\n', '\n', '  // How many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '    uint256 total_tokens_value;\n', '  \n', '  bool public locked = false;\n', '  \n', '    address public owner_address;\n', '    \n', '\n', '    // function get_total_count() public returns (uint256){\n', '    //     return count;\n', '    // }\n', '    // function get_address_from_list(uint256 tcount) public returns (address){\n', '    //     return investor_list[tcount];\n', '    // }\n', '    // function get_balance(address address_of_investor) public returns (uint256){\n', '    //     return IERC20(token).balanceOf(address_of_investor);\n', '    // }\n', '    function get_incoming_addresses(uint256 index) public returns (address){\n', '        return incoming_addresses[index];\n', '    }\n', '    \n', '\n', '\n', '  \n', '    constructor(uint256 t_rate,address t_token) public payable {\n', '        token = t_token;\n', '        owner_address = msg.sender;\n', '        rate = t_rate;\n', '        \n', '        \n', '    }\n', '        function total_tokens() public view returns (uint256)\n', '    {\n', '        return IERC20(token).balanceOf(address(this));\n', '    }\n', '            function upadte_total_tokens() internal\n', '    {\n', '        total_tokens_value = IERC20(token).balanceOf(address(this));\n', '    }\n', '    function unlock() public {\n', '        require(msg.sender == owner_address,"Only owner");\n', '        locked = false;\n', '    }\n', '    function get_back_all_tokens() public {\n', '        require(msg.sender == owner_address,"Only owner");\n', '        IERC20(token).transfer(msg.sender, IERC20(token).balanceOf(address(this)));\n', '        upadte_total_tokens();\n', '    }\n', '    function get_back_tokens(uint256 amount) public {\n', '        require(msg.sender == owner_address,"Only owner");\n', '        //require(total_tokens_value >= amount);\n', '        IERC20(token).transfer(msg.sender, amount);\n', '        \n', '        upadte_total_tokens();\n', '    }\n', '        function lock() public {\n', '            require(msg.sender == owner_address,"Only owner");\n', '        locked = true;\n', '    }\n', '\n', '    \n', '    // function getBalanceOfToken(address _address) public view returns (uint256) {\n', '    //     return IERC20(_address).balanceOf(address(this));\n', '    // }\n', '    \n', '    receive() external payable {\n', '      buyTokens(msg.sender);\n', '     //IERC20(token).transfer(msg.sender, 100000000000000000);\n', '    }\n', '    fallback() external payable {\n', '       // buyTokens(msg.sender);\n', '    }\n', '    \n', '    function buyTokens(address payable _beneficiary) public payable{\n', '\n', '         require(!locked, "Locked");\n', '         uint256 weiAmount = msg.value;\n', '        _preValidatePurchase(_beneficiary,msg.value);\n', '    \n', '        // calculate token amount to be created\n', '         uint256 t_rate = _getTokenAmount(weiAmount);\n', '         require(IERC20(token).balanceOf(address(this)) >= t_rate, "Contract Doesnot have enough tokens");\n', '    \n', '        //  // update state\n', '         \n', '        \n', '        IERC20(token).transfer(_beneficiary, t_rate);\n', '        incoming_addresses.push(_beneficiary);\n', '        weiRaised = weiRaised.add(weiAmount);\n', '        investor_list[count] = _beneficiary;\n', '        count++;\n', '       // _deliverTokens(_beneficiary, t_rate);\n', '       upadte_total_tokens();\n', '\n', '  }\n', '  \n', '    function _preValidatePurchase (\n', '        address _beneficiary,\n', '        uint256 _weiAmount\n', '    ) pure\n', '    internal\n', '    {\n', '        require(_beneficiary != address(0), "Beneficiary = address(0)");\n', '        require(_weiAmount >= 100000000000000000 || _weiAmount <= 10000000000000000000 ,"send Minimum 0.1 eth or 10 Eth max");\n', '    }\n', '    \n', '      function extractEther() public {\n', '           require(msg.sender == owner_address,"Only owner");\n', '          msg.sender.transfer(address(this).balance);\n', '       }\n', '        function changeOwner(address new_owner) public {\n', '           require(msg.sender == owner_address,"Only owner");\n', '          owner_address = new_owner;\n', '       }\n', '  \n', '    function _getTokenAmount(uint256 _weiAmount)\n', '    public view returns (uint256)\n', '    {\n', '        uint256 temp1 = _weiAmount.div(1000000000);\n', '        return temp1.mul(rate) * 10**9;\n', '       // return _weiAmount.mul(325) * 10**9;\n', '    }\n', '    \n', '        function _calculate_TokenAmount(uint256 _weiAmount, uint256 t_rate, uint divide_amount)\n', '    public pure returns (uint256)\n', '    {\n', '        uint256 temp2 = _weiAmount.div(divide_amount);\n', '        return temp2.mul(t_rate);\n', '    }\n', '    \n', '\n', '         function update_rate(uint256 _rate)\n', '    public\n', '    {\n', '        require(msg.sender == owner_address,"Only owner");\n', '        rate = _rate;\n', '    }\n', '\n', '  \n', '    function _deliverTokens(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    IERC20(token).transfer(_beneficiary, _tokenAmount);\n', '  }\n', '    \n', '}']