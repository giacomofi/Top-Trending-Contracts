['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-10\n', '*/\n', '\n', 'pragma solidity ^0.4.23;\n', '\n', 'contract IERC20 {\n', '    function totalSupply() public constant returns (uint256 supply);\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract ERC20 is IERC20 {\n', '    uint256 internal _total_supply;\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            emit Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            emit Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '    function totalSupply() public constant returns (uint256 supply) {\n', '        return _total_supply;\n', '    }\n', '}\n', '\n', 'contract TOKEN is ERC20 {\n', '    string public name;\n', '    uint8 public decimals; \n', '    string public symbol;\n', '    uint256 public totalSupply;\n', '    address public owner;\n', '    \n', '    constructor (\n', '        uint256 _initialAmount,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol\n', '    )\n', '        public\n', '    {\n', '        balances[msg.sender] = _initialAmount;\n', '        totalSupply = _initialAmount;\n', '        name = _tokenName;\n', '        decimals = _decimalUnits;\n', '        symbol = _tokenSymbol;\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    function mint(address account, uint256 amount) public {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '        require(owner == msg.sender);\n', '        \n', '        totalSupply += amount;\n', '        balances[account] += amount;\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\t\n', '\t\n', '\t function burn(uint256 amount) public {\n', '\n', '        uint256 accountBalance = balances[msg.sender];\n', '        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");\n', '        balances[msg.sender] = accountBalance - amount;\n', '        totalSupply -= amount;\n', '\n', '        emit Transfer(msg.sender, address(0), amount);\n', '    }\n', '\n', '}']