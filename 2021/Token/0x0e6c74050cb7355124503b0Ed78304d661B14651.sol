['pragma solidity 0.8.2;\n', '\n', 'import "./ERC721Enumerable.sol";\n', 'import "./Ownable.sol";\n', '\n', 'contract CryptoBorgs is Ownable, ERC721Enumerable {\n', '\n', '    // Hash of Images\n', '    string public imageHash = "fe41f92777f82f792735f759a3a028d7ff50f5ab0d716d35ea4bb598801a1a83";\n', '\n', '    // Address of contract owner\n', '    address payable private beneficiary;\n', '\n', '    // Maximum supply of tokens\n', '    uint256 public constant MAX_SUPPLY = 10000;\n', '\n', '    constructor() ERC721("CryptoBorgs", "CBG") {\n', '        beneficiary = payable(owner());\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC165-supportsInterface}.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\n', '        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n', '    }\n', '\n', '    /**\n', '     * @dev Get price of the token\n', '     */\n', '    function getPrice(uint256 tokenId) public pure returns (uint256) {\n', '        if (tokenId > 9500) {\n', '            return 10000000 gwei;\n', '        } else if (tokenId > 8000) {\n', '            return 50000000 gwei;\n', '        } else if (tokenId > 5000) {\n', '            return 100000000 gwei;\n', '        } else if (tokenId > 3000) {\n', '            return 250000000 gwei;\n', '        } else if (tokenId > 1000) {\n', '            return 500000000 gwei;\n', '        } else if (tokenId > 5) {\n', '            return 1000000000 gwei;\n', '        } else {\n', '            return 5000000000 gwei;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Mint a token\n', '     */\n', '    function mintToken(uint256 tokenId) public payable returns (bool) {\n', '        require(tokenId > 0 && tokenId <= MAX_SUPPLY);\n', '        uint amount = msg.value;\n', '        require(getPrice(tokenId) == amount, "Ether sent should be correct");\n', '\n', '        _safeMint(msg.sender, tokenId);\n', '        beneficiary.transfer(amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Check whether a token has been minted\n', '     */\n', '    function isMinted(uint256 tokenId) public view returns (bool) {\n', '        require(tokenId > 0 && tokenId <= MAX_SUPPLY);\n', '        return _exists(tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Return list of minted tokens\n', '     */\n', '    function mintedTokens() public view returns (uint256[] memory) {\n', '        return _allTokens;\n', '    }\n', '\n', '    /**\n', '     * @dev Check number of tokens still available for sale\n', '     */\n', '    function numAvailable() public view returns (uint256) {\n', '        return MAX_SUPPLY - totalSupply();\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw money from the contract\n', '     */\n', '    function withdraw(uint256 amount) public onlyOwner {\n', '        uint256 balance = address(this).balance;\n', '        require(balance > 0, "Contract should have money");\n', '        require(amount <= balance, "Cannot withdraw amount larger than balance");\n', '        beneficiary.transfer(amount);\n', '    }\n', '}']