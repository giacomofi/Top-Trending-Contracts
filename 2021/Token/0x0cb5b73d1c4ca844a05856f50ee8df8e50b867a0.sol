['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-03\n', '*/\n', '\n', '// Dependency file: contracts/token/IERC20.sol\n', '\n', '// pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '\n', '// Dependency file: contracts/IToken.sol\n', '\n', '// pragma solidity ^0.5.0;\n', '\n', 'interface IToken {\n', '    function mint(address to, uint256 amount) external;\n', '\n', '    function updateAdmin(address newAdmin) external;\n', '}\n', '\n', '\n', '// Dependency file: contracts/GSN/Context.sol\n', '\n', '// pragma solidity ^0.5.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor() internal {}\n', '\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/BridgeBase.sol\n', '\n', '// pragma solidity ^0.5.0;\n', '\n', "// import 'contracts/token/IERC20.sol';\n", "// import 'contracts/IToken.sol';\n", "// import 'contracts/GSN/Context.sol';\n", '\n', 'contract BridgeBase is Context {\n', '    address public admin;\n', '    IToken public token;\n', '    mapping(uint256 => bool) public processedNonces;\n', '\n', '    enum Step {Burn, Mint}\n', '    event CrossTransfer(\n', '        address from,\n', '        address to,\n', '        uint256 amount,\n', '        uint256 date,\n', '        uint256 nonce,\n', '        Step indexed step\n', '    );\n', '\n', '    constructor(address _token) public {\n', '        admin = _msgSender();\n', '        token = IToken(_token);\n', '    }\n', '\n', '    modifier onlyAdmin() {\n', '        require(\n', '            _msgSender() == admin,\n', "            'Only admin is allowed to execute this operation.'\n", '        );\n', '        _;\n', '    }\n', '\n', '    function updateAdmin(address newAdmin) external onlyAdmin {\n', '        admin = newAdmin;\n', '    }\n', '\n', '    function updateTokenAdmin(address newAdmin) external onlyAdmin {\n', '        token.updateAdmin(newAdmin);\n', '    }\n', '\n', '    function isProcessed(uint256 _nonce) external view returns (bool) {\n', '        return processedNonces[_nonce];\n', '    }\n', '\n', '    function mint(\n', '        address to,\n', '        uint256 amount,\n', '        uint256 otherChainNonce\n', '    ) external onlyAdmin {\n', '        require(\n', '            processedNonces[otherChainNonce] == false,\n', "            'transfer already processed'\n", '        );\n', '        processedNonces[otherChainNonce] = true;\n', '        token.mint(to, amount);\n', '        emit CrossTransfer(\n', '            _msgSender(),\n', '            to,\n', '            amount,\n', '            block.timestamp,\n', '            otherChainNonce,\n', '            Step.Mint\n', '        );\n', '    }\n', '}\n', '\n', '\n', '// Root file: contracts/BridgeEth.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '// import "contracts/BridgeBase.sol";\n', '\n', 'contract BridgeEth is BridgeBase {\n', '    constructor(address token) public BridgeBase(token) {}\n', '}']