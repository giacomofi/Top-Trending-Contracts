['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.6;\n', 'pragma abicoder v2;  // solhint-disable-line compiler-version\n', '\n', 'import "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '\n', '\n', 'interface ILendingPoolV2 {\n', '    struct ReserveConfigurationMap {\n', '        uint256 data;\n', '    }\n', '\n', '    struct ReserveData {\n', '        ReserveConfigurationMap configuration;\n', '        uint128 liquidityIndex;\n', '        uint128 variableBorrowIndex;\n', '        uint128 currentLiquidityRate;\n', '        uint128 currentVariableBorrowRate;\n', '        uint128 currentStableBorrowRate;\n', '        uint40 lastUpdateTimestamp;\n', '        address aTokenAddress;\n', '        address stableDebtTokenAddress;\n', '        address variableDebtTokenAddress;\n', '        address interestRateStrategyAddress;\n', '        uint8 id;\n', '    }\n', '\n', '    function getReserveData(address asset) external view returns (ReserveData memory);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.7.6;\n', '\n', 'import "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '\n', '\n', 'interface IWrapper {\n', '    function wrap(IERC20 token) external view returns (IERC20 wrappedToken, uint256 rate);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.7.6;\n', 'pragma abicoder v2;  // solhint-disable-line compiler-version\n', '\n', 'import "../interfaces/ILendingPoolV2.sol";\n', 'import "../interfaces/IWrapper.sol";\n', '\n', '\n', 'contract AaveWrapperV2 is IWrapper {\n', '    ILendingPoolV2 private constant _LENDING_POOL = ILendingPoolV2(0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9);\n', '\n', '    mapping(IERC20 => IERC20) public aTokenToToken;\n', '    mapping(IERC20 => IERC20) public tokenToaToken;\n', '\n', '    function addMarkets(IERC20[] memory tokens) external {\n', '        for (uint256 i = 0; i < tokens.length; i++) {\n', '            ILendingPoolV2.ReserveData memory reserveData = _LENDING_POOL.getReserveData(address(tokens[i]));\n', '            IERC20 aToken = IERC20(reserveData.aTokenAddress);\n', '            require(aToken != IERC20(0), "Token is not supported");\n', '            aTokenToToken[aToken] = tokens[i];\n', '            tokenToaToken[tokens[i]] = aToken;\n', '        }\n', '    }\n', '\n', '    function removeMarkets(IERC20[] memory tokens) external {\n', '        for (uint256 i = 0; i < tokens.length; i++) {\n', '            ILendingPoolV2.ReserveData memory reserveData = _LENDING_POOL.getReserveData(address(tokens[i]));\n', '            IERC20 aToken = IERC20(reserveData.aTokenAddress);\n', '            require(aToken == IERC20(0), "Token is still supported");\n', '            delete aTokenToToken[aToken];\n', '            delete tokenToaToken[tokens[i]];\n', '        }\n', '    }\n', '\n', '    function wrap(IERC20 token) external view override returns (IERC20 wrappedToken, uint256 rate) {\n', '        IERC20 underlying = aTokenToToken[token];\n', '        IERC20 aToken = tokenToaToken[token];\n', '        if (underlying != IERC20(0)) {\n', '            return (underlying, 1e18);\n', '        } else if (aToken != IERC20(0)) {\n', '            return (aToken, 1e18);\n', '        } else {\n', '            revert("Unsupported token");\n', '        }\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}']