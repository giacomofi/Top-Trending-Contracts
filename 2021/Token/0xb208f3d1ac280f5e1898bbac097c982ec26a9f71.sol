['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-22\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.0;\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    function mint(address to, uint256 amount) external returns (bool);\n', '    function burn(uint256 amount) external returns (bool);\n', '    function burnFrom(address from, uint256 amount) external returns (bool);\n', '}\n', 'contract BridgeAssistant {\n', '    address public owner;\n', '\n', '    modifier restricted() {\n', '        require(msg.sender == owner, "This function is restricted to owner");\n', '        _;\n', '    }\n', '\n', '    IERC20 public TKN;\n', '    mapping(address => string) public targetOf;\n', '\n', '    event SetTarget(address indexed sender, string indexed target);\n', '    event Collect(address indexed sender, string indexed target, uint256 amount);\n', '    event Dispense(address indexed sender, uint256 amount);\n', '    event TransferOwnership(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    function setTarget(string memory _account) public {\n', '        targetOf[msg.sender] = _account;\n', '        emit SetTarget(msg.sender, _account);\n', '    }\n', '\n', '    function collect(address _payer) public restricted returns (uint256 amount) {\n', '        string memory _t = targetOf[_payer];\n', '        require(bytes(_t).length > 0, "Target account not set");\n', '        amount = TKN.allowance(_payer, address(this));\n', '        require(amount > 0, "No amount approved");\n', '        require(\n', '            TKN.transferFrom(_payer, address(this), amount),\n', '            "Transfer failure. Make sure that your balance is not lower than the allowance you set"\n', '        );\n', '        emit Collect(_payer, _t, amount);\n', '    }\n', '\n', '    function dispense(address _target, uint256 _amount) public restricted returns (bool success) {\n', '        require(TKN.transfer(_target, _amount), "Dispense failure. Contact contract owner");\n', '        emit Dispense(_target, _amount);\n', '        return true;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public restricted {\n', '        require(_newOwner != address(0));\n', '        emit TransferOwnership(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '\n', '    constructor(IERC20 _TKN) {\n', '        TKN = _TKN;\n', '        owner = msg.sender;\n', '    }\n', '}']