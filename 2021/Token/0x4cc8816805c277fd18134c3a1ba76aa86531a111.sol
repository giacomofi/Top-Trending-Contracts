['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-24\n', '*/\n', '\n', '// Sources flattened with hardhat v2.0.10 https://hardhat.org\n', '\n', '// File @openzeppelin/contracts/utils/[email\xa0protected]\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/access/[email\xa0protected]\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/DownstreamCaller.sol\n', '\n', '// contracts/DownstreamCaller.sol\n', '\n', 'pragma solidity 0.6.10;\n', '\n', 'contract DownstreamCaller is Ownable {\n', '    struct Transaction {\n', '        bool enabled;\n', '        address destination;\n', '        bytes data;\n', '    }\n', '\n', '    event TransactionFailed(address indexed destination, uint256 index, bytes data);\n', '\n', '    // Stable ordering is not guaranteed.\n', '    Transaction[] public transactions;\n', '\n', '    /**\n', '     * Call all downstream transactions\n', '     */\n', '    function executeTransactions() external onlyOwner {\n', '        for (uint256 i = 0; i < transactions.length; i++) {\n', '            Transaction storage t = transactions[i];\n', '            if (t.enabled) {\n', '                bool result = externalCall(t.destination, t.data);\n', '                if (!result) {\n', '                    emit TransactionFailed(t.destination, i, t.data);\n', '                    revert("Transaction Failed");\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '\n', '    /**\n', '     * @notice Adds a transaction that gets called for a downstream receiver of token distributions\n', '     * @param destination Address of contract destination\n', '     * @param data Transaction data payload\n', '     * @return index of the newly added transaction\n', '     */\n', '    function addTransaction(address destination, bytes memory data) external onlyOwner returns(uint256) {\n', '        require(destination != address(0x0));\n', '        require(data.length != 0);\n', '        uint txIndex = transactions.length;\n', '        transactions.push(Transaction({ enabled: true, destination: destination, data: data }));\n', '        return txIndex;\n', '    }\n', '\n', '    /**\n', '     * @param index Index of transaction to remove.\n', '     *              Transaction ordering may have changed since adding.\n', '     */\n', '    function removeTransaction(uint256 index) external onlyOwner {\n', '        require(index < transactions.length, "index out of bounds");\n', '\n', '        if (index < transactions.length - 1) {\n', '            transactions[index] = transactions[transactions.length - 1];\n', '        }\n', '\n', '        transactions.pop();\n', '    }\n', '\n', '    /**\n', '     * @param index Index of transaction. Transaction ordering may have changed since adding.\n', '     * @param enabled True for enabled, false for disabled.\n', '     */\n', '    function setTransactionEnabled(uint256 index, bool enabled) external onlyOwner {\n', '        require(index < transactions.length, "index must be in range of stored tx list");\n', '        transactions[index].enabled = enabled;\n', '    }\n', '\n', '    /**\n', '     * @return Number of transactions, both enabled and disabled, in transactions list.\n', '     */\n', '    function transactionsSize() external view returns (uint256) {\n', '        return transactions.length;\n', '    }\n', '\n', '    /**\n', '     * @dev wrapper to call the encoded transactions on downstream consumers.\n', '     * @param destination Address of destination contract.\n', '     * @param data The encoded data payload.\n', '     * @return True on success\n', '     */\n', '    function externalCall(address destination, bytes memory data) internal returns (bool) {\n', '        bool result;\n', '        assembly {\n', '            // solhint-disable-line no-inline-assembly\n', '            // "Allocate" memory for output\n', '            // (0x40 is where "free memory" pointer is stored by convention)\n', '            let outputAddress := mload(0x40)\n', '\n', '            // First 32 bytes are the padded length of data, so exclude that\n', '            let dataAddress := add(data, 32)\n', '\n', '            result := call(\n', '                // 34710 is the value that solidity is currently emitting\n', '                // It includes callGas (700) + callVeryLow (3, to pay for SUB)\n', '                // + callValueTransferGas (9000) + callNewAccountGas\n', '                // (25000, in case the destination address does not exist and needs creating)\n', '                sub(gas(), 34710),\n', '                destination,\n', '                0, // transfer value in wei\n', '                dataAddress,\n', '                mload(data), // Size of the input, in bytes. Stored in position 0 of the array.\n', '                outputAddress,\n', '                0 // Output is ignored, therefore the output size is zero\n', '            )\n', '        }\n', '        return result;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/mocks/Mock.sol\n', '\n', '// contracts/StakedToken.sol\n', '\n', 'pragma solidity 0.6.10;\n', '\n', 'contract Mock {\n', '    event FunctionCalled(string instanceName, string functionName, address caller);\n', '    event FunctionArguments(uint256[] uintVals, int256[] intVals);\n', '    event ReturnValueInt256(int256 val);\n', '    event ReturnValueUInt256(uint256 val);\n', '}\n', '\n', '\n', '// File contracts/mocks/MockDownstream.sol\n', '\n', '// contracts/StakedToken.sol\n', '\n', 'pragma solidity 0.6.10;\n', '\n', 'contract MockDownstream is Mock {\n', '    function updateNoArg() external returns (bool) {\n', '        emit FunctionCalled("MockDownstream", "updateNoArg", msg.sender);\n', '        uint256[] memory uintVals = new uint256[](0);\n', '        int256[] memory intVals = new int256[](0);\n', '        emit FunctionArguments(uintVals, intVals);\n', '        return true;\n', '    }\n', '\n', '    function updateOneArg(uint256 u) external {\n', '        emit FunctionCalled("MockDownstream", "updateOneArg", msg.sender);\n', '\n', '        uint256[] memory uintVals = new uint256[](1);\n', '        uintVals[0] = u;\n', '        int256[] memory intVals = new int256[](0);\n', '        emit FunctionArguments(uintVals, intVals);\n', '    }\n', '\n', '    function updateTwoArgs(uint256 u, int256 i) external {\n', '        emit FunctionCalled("MockDownstream", "updateTwoArgs", msg.sender);\n', '\n', '        uint256[] memory uintVals = new uint256[](1);\n', '        uintVals[0] = u;\n', '        int256[] memory intVals = new int256[](1);\n', '        intVals[0] = i;\n', '        emit FunctionArguments(uintVals, intVals);\n', '    }\n', '\n', '    function reverts() external {\n', '        emit FunctionCalled("MockDownstream", "reverts", msg.sender);\n', '\n', '        uint256[] memory uintVals = new uint256[](0);\n', '        int256[] memory intVals = new int256[](0);\n', '        emit FunctionArguments(uintVals, intVals);\n', '\n', '        require(false, "reverted");\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts-ethereum-package/contracts/[email\xa0protected]\n', '\n', 'pragma solidity >=0.4.24 <0.7.0;\n', '\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts-ethereum-package/contracts/GSN/[email\xa0protected]\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract ContextUpgradeSafe is Initializable {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '\n', '    function __Context_init() internal initializer {\n', '        __Context_init_unchained();\n', '    }\n', '\n', '    function __Context_init_unchained() internal initializer {\n', '\n', '\n', '    }\n', '\n', '\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '\n', '    uint256[50] private __gap;\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts-ethereum-package/contracts/access/[email\xa0protected]\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '\n', '    function __Ownable_init() internal initializer {\n', '        __Context_init_unchained();\n', '        __Ownable_init_unchained();\n', '    }\n', '\n', '    function __Ownable_init_unchained() internal initializer {\n', '\n', '\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    uint256[49] private __gap;\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts-ethereum-package/contracts/utils/[email\xa0protected]\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'contract PausableUpgradeSafe is Initializable, ContextUpgradeSafe {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by `account`.\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by `account`.\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state.\n', '     */\n', '\n', '    function __Pausable_init() internal initializer {\n', '        __Context_init_unchained();\n', '        __Pausable_init_unchained();\n', '    }\n', '\n', '    function __Pausable_init_unchained() internal initializer {\n', '\n', '\n', '        _paused = false;\n', '\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Triggers stopped state.\n', '     */\n', '    function _pause() internal virtual whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns to normal state.\n', '     */\n', '    function _unpause() internal virtual whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '\n', '    uint256[49] private __gap;\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts-ethereum-package/contracts/math/[email\xa0protected]\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/[email\xa0protected]\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// File contracts/StakedToken.sol\n', '\n', '// contracts/StakedToken.sol\n', '\n', 'pragma solidity 0.6.10;\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract StakedToken is IERC20, Initializable, OwnableUpgradeSafe, PausableUpgradeSafe  {\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '     * @dev Emitted when supply controller is changed\n', '     */\n', '    event LogSupplyControllerUpdated(address supplyController);\n', '    /**\n', '     * @dev Emitted when token distribution happens\n', '     */\n', '    event LogTokenDistribution(uint256 oldTotalSupply, uint256 supplyChange, bool positive, uint256 newTotalSupply);\n', '    /**\n', '     * @dev Emitted if total supply exceeds maximum expected supply\n', '     */\n', '    event WarningMaxExpectedSupplyExceeded(uint256 totalSupply, uint256 totalShares);\n', '\n', '\n', '    address public supplyController;\n', '\n', '    uint256 private MAX_UINT256;\n', '\n', '    // Defines the multiplier applied to shares to arrive at the underlying balance\n', '    uint256 private _maxExpectedSupply;\n', '\n', '    uint256 private _sharesPerToken;\n', '    uint256 private _totalSupply;\n', '    uint256 private _totalShares;\n', '\n', '    mapping(address => uint256) private _shareBalances;\n', '    //Denominated in tokens not shares, to align with user expectations\n', '    mapping(address => mapping(address => uint256)) private _allowedTokens;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    mapping(address => bool) public isBlacklisted;\n', '    /**\n', '     * @dev Emitted when account blacklist status changes\n', '     */\n', '    event Blacklisted(address indexed account, bool isBlacklisted);\n', '\n', '    DownstreamCaller public downstreamCaller;\n', '\n', '    modifier onlySupplyController() {\n', '        require(msg.sender == supplyController);\n', '        _;\n', '    }\n', '\n', '    modifier validRecipient(address to) {\n', '        require(to != address(0x0));\n', '        require(to != address(this));\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Set the address that can mint, burn and rebase\n', '     *\n', '     * @param name_ Name of the token\n', '     * @param symbol_ Symbol of the token\n', '     * @param decimals_ Decimal places of the token - purely for display purposes\n', '     * @param maxExpectedSupply_ Maximum possilbe supply of the token.\n', '                                Value should be chosen such that it could never be realistically exceeded based on the underlying token.\n', '                                Not binding, can be exceeded in reality, with the risk of losing precision in a reward distribution event\n', '     * @param initialSupply_ Inital supply of the token, sent to the creator of the token\n', '     */\n', '    function initialize(\n', '        string memory name_,\n', '        string memory symbol_,\n', '        uint8 decimals_,\n', '        uint256 maxExpectedSupply_,\n', '        uint256 initialSupply_\n', '    ) public initializer {\n', '        __Ownable_init();\n', '        __Pausable_init();\n', '        supplyController = msg.sender;\n', '\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _decimals = decimals_;\n', '\n', '        MAX_UINT256 = ~uint256(0);\n', '\n', '        // Maximise precision by picking the largest possible sharesPerToken value\n', '        // It is crucial to pick a maxSupply value that will never be exceeded\n', '        _sharesPerToken = MAX_UINT256.div(maxExpectedSupply_);\n', '\n', '        _maxExpectedSupply = maxExpectedSupply_;\n', '        _totalSupply = initialSupply_;\n', '        _totalShares = initialSupply_.mul(_sharesPerToken);\n', '        _shareBalances[msg.sender] = _totalShares;\n', '\n', '        downstreamCaller = new DownstreamCaller();\n', '\n', '        emit Transfer(address(0x0), msg.sender, _totalSupply);\n', '    }\n', '\n', '    /**\n', '     * Set the address that can mint, burn and rebase\n', '     *\n', '     * @param supplyController_ Address of the new supply controller\n', '     */\n', '    function setSupplyController(address supplyController_) external onlyOwner {\n', '        require(supplyController_ != address(0x0), "invalid address");\n', '        supplyController = supplyController_;\n', '        emit LogSupplyControllerUpdated(supplyController);\n', '    }\n', '\n', '    /**\n', '     * Distribute a supply increase or decrease to all token holders proportionally\n', '     *\n', '     * @param supplyChange_ Increase of supply in token units\n', '     * @return The updated total supply\n', '     */\n', '    function distributeTokens(uint256 supplyChange_, bool positive) external onlySupplyController returns (uint256) {\n', '        uint256 newTotalSupply;\n', '        if (positive) {\n', '            newTotalSupply = _totalSupply.add(supplyChange_);\n', '        } else {\n', '            newTotalSupply = _totalSupply.sub(supplyChange_);\n', '        }\n', '\n', '        require(newTotalSupply > 0, "rebase cannot make supply 0");\n', '\n', '        _sharesPerToken = _totalShares.div(newTotalSupply);\n', '\n', '        // Set correct total supply in case of mismatch caused by integer division\n', '        newTotalSupply = _totalShares.div(_sharesPerToken);\n', '\n', '        emit LogTokenDistribution(_totalSupply, supplyChange_, positive, newTotalSupply);\n', '\n', '        _totalSupply = newTotalSupply;\n', '\n', '        if (_totalSupply > _maxExpectedSupply) {\n', '            emit WarningMaxExpectedSupplyExceeded(_totalSupply, _totalShares);\n', '        }\n', '\n', '        // Call downstream transactions\n', '        downstreamCaller.executeTransactions();\n', '\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() external view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * Set the name of the token\n', '     * @param name_ the new name of the token.\n', '     */\n', '    function setName(string calldata name_) external onlyOwner {\n', '        _name = name_;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() external view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * Set the symbol of the token\n', '     * @param symbol_ the new symbol of the token.\n', '     */\n', '    function setSymbol(string calldata symbol_) external onlyOwner {\n', '        _symbol = symbol_;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() external view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @return The total supply of the underlying token\n', '     */\n', '    function totalSupply() external override view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @return The total supply in shares\n', '     */\n', '    function totalShares() external view returns (uint256) {\n', '        return _totalShares;\n', '    }\n', '\n', '    /**\n', '     * @param who The address to query.\n', '     * @return The balance of the specified address.\n', '     */\n', '    function balanceOf(address who) external override view returns (uint256) {\n', '        return _shareBalances[who].div(_sharesPerToken);\n', '    }\n', '\n', '    /**\n', '     * @param who The address to query.\n', '     * @return The balance of the specified address in shares.\n', '     */\n', '    function sharesOf(address who) external view returns (uint256) {\n', '        return _shareBalances[who];\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens to a specified address.\n', '     * @param to The address to transfer to.\n', '     * @param value The amount to be transferred.\n', '     * @return True on success, false otherwise.\n', '     */\n', '    function transfer(address to, uint256 value) external override validRecipient(to) whenNotPaused returns (bool) {\n', '        require(!isBlacklisted[msg.sender], "from blacklisted");\n', '        require(!isBlacklisted[to], "to blacklisted");\n', '\n', '        uint256 shareValue = value.mul(_sharesPerToken);\n', '        _shareBalances[msg.sender] = _shareBalances[msg.sender].sub(\n', '            shareValue,\n', '            "transfer amount exceed account balance"\n', '        );\n', '        _shareBalances[to] = _shareBalances[to].add(shareValue);\n', '        emit Transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner has allowed to a spender.\n', '     * @param owner_ The address which owns the funds.\n', '     * @param spender The address which will spend the funds.\n', '     * @return The number of tokens still available for the spender.\n', '     */\n', '    function allowance(address owner_, address spender) external override view returns (uint256) {\n', '        return _allowedTokens[owner_][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another.\n', '     * @param from The address you want to send tokens from.\n', '     * @param to The address you want to transfer to.\n', '     * @param value The amount of tokens to be transferred.\n', '     */\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) external override validRecipient(to) whenNotPaused returns (bool) {\n', '        require(!isBlacklisted[from], "from blacklisted");\n', '        require(!isBlacklisted[to], "to blacklisted");\n', '\n', '        _allowedTokens[from][msg.sender] = _allowedTokens[from][msg.sender].sub(\n', '            value,\n', '            "transfer amount exceeds allowance"\n', '        );\n', '\n', '        uint256 shareValue = value.mul(_sharesPerToken);\n', '        _shareBalances[from] = _shareBalances[from].sub(shareValue, "transfer amount exceeds account balance");\n', '        _shareBalances[to] = _shareBalances[to].add(shareValue);\n', '        emit Transfer(from, to, value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of\n', '     * msg.sender. This method is included for ERC20 compatibility.\n', '     * increaseAllowance and decreaseAllowance should be used instead.\n', '     * Changing an allowance with this method brings the risk that someone may transfer both\n', '     * the old and the new allowance - if they are both greater than zero - if a transfer\n', '     * transaction is mined before the later approve() call is mined.\n', '     *\n', '     * @param spender The address which will spend the funds.\n', '     * @param value The amount of tokens to be spent.\n', '     */\n', '    function approve(address spender, uint256 value) external override returns (bool) {\n', '        require(!isBlacklisted[msg.sender], "owner blacklisted");\n', '        require(!isBlacklisted[spender], "spender blacklisted");\n', '        require(spender != address(0x0), "invalid address");\n', '\n', '        _allowedTokens[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner has allowed to a spender.\n', '     * This method should be used instead of approve() to avoid the double approval vulnerability\n', '     * described above.\n', '     * @param spender The address which will spend the funds.\n', '     * @param addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\n', '        require(!isBlacklisted[msg.sender], "owner blacklisted");\n', '        require(!isBlacklisted[spender], "spender blacklisted");\n', '        require(spender != address(0x0), "invalid address");\n', '\n', '        _allowedTokens[msg.sender][spender] = _allowedTokens[msg.sender][spender].add(addedValue);\n', '        emit Approval(msg.sender, spender, _allowedTokens[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner has allowed to a spender.\n', '     *\n', '     * @param spender The address which will spend the funds.\n', '     * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\n', '        require(!isBlacklisted[msg.sender], "owner blacklisted");\n', '        require(!isBlacklisted[spender], "spender blacklisted");\n', '        require(spender != address(0x0), "invalid address");\n', '\n', '        uint256 oldValue = _allowedTokens[msg.sender][spender];\n', '        if (subtractedValue >= oldValue) {\n', '            _allowedTokens[msg.sender][spender] = 0;\n', '        } else {\n', '            _allowedTokens[msg.sender][spender] = oldValue.sub(subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, spender, _allowedTokens[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    /** Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply, keeping the tokens per shares constant\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     */\n', '    function mint(address account, uint256 amount) external onlySupplyController validRecipient(account) {\n', '        require(!isBlacklisted[account], "account blacklisted");\n', '        require(account != address(0x0), "invalid address");\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        uint256 shareAmount = amount.mul(_sharesPerToken);\n', '        _totalShares = _totalShares.add(shareAmount);\n', '        _shareBalances[account] = _shareBalances[account].add(shareAmount);\n', '        emit Transfer(address(0), account, amount);\n', '\n', '        if (_totalSupply > _maxExpectedSupply) {\n', '            emit WarningMaxExpectedSupplyExceeded(_totalSupply, _totalShares);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Destroys `amount` tokens from `supplyController` account, reducing the\n', '     * total supply while keeping the tokens per shares ratio constant\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     */\n', '    function burn(uint256 amount) external onlySupplyController {\n', '        uint256 shareAmount = amount.mul(_sharesPerToken);\n', '        _shareBalances[supplyController] = _shareBalances[supplyController].sub(shareAmount, "burn amount exceeds balance");\n', '        _totalShares = _totalShares.sub(shareAmount);\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(supplyController, address(0), amount);\n', '    }\n', '\n', '\n', '    // Downstream transactions\n', '\n', '    /**\n', '     * @return Address of the downstream caller contract\n', '     */\n', '    function downstreamCallerAddress() external view returns (address) {\n', '        return address(downstreamCaller);\n', '    }\n', '\n', '    /**\n', '     * @param _downstreamCaller Address of the new downstream caller contract\n', '     */\n', '    function setDownstreamCaller(DownstreamCaller _downstreamCaller) external onlyOwner {\n', '        downstreamCaller = _downstreamCaller;\n', '    }\n', '\n', '    /**\n', '     * @notice Adds a transaction that gets called for a downstream receiver of token distributions\n', '     * @param destination Address of contract destination\n', '     * @param data Transaction data payload\n', '     * @return index of the newly added transaction\n', '     */\n', '    function addTransaction(address destination, bytes memory data) external onlySupplyController returns(uint256) {\n', '        return downstreamCaller.addTransaction(destination, data);\n', '    }\n', '\n', '    /**\n', '     * @param index Index of transaction to remove.\n', '     *              Transaction ordering may have changed since adding.\n', '     */\n', '    function removeTransaction(uint256 index) external onlySupplyController {\n', '        downstreamCaller.removeTransaction(index);\n', '    }\n', '\n', '    /**\n', '     * @param index Index of transaction. Transaction ordering may have changed since adding.\n', '     * @param enabled True for enabled, false for disabled.\n', '     */\n', '    function setTransactionEnabled(uint256 index, bool enabled) external onlySupplyController {\n', '        downstreamCaller.setTransactionEnabled(index, enabled);\n', '    }\n', '\n', '    /**\n', '     * @return Number of transactions, both enabled and disabled, in transactions list.\n', '     */\n', '    function transactionsSize() external view returns (uint256) {\n', '        return downstreamCaller.transactionsSize();\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Triggers stopped state.\n', '     */\n', '    function pause() external onlySupplyController {\n', '        _pause();\n', '    }\n', '\n', '    /**\n', '     * @dev Returns to normal state.\n', '     */\n', '    function unpause() external onlySupplyController {\n', '        _unpause();\n', '    }\n', '\n', '    /**\n', '     * @dev Set blacklisted status for the account.\n', '     * @param account address to set blacklist flag for\n', '     * @param _isBlacklisted blacklist flag value\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `msg.sender` should be owner.\n', '     */\n', '    function setBlacklisted(address account, bool _isBlacklisted) external onlySupplyController {\n', '        isBlacklisted[account] = _isBlacklisted;\n', '        emit Blacklisted(account, _isBlacklisted);\n', '    }\n', '}\n', '\n', '\n', '// File contracts/mocks/StakedTokenMockV2.sol\n', '\n', '// contracts/StakedToken.sol\n', '\n', 'pragma solidity 0.6.10;\n', '\n', 'contract StakedTokenMockV2 is StakedToken  {\n', '\n', '    bool private newVar;\n', '\n', '    function v2() external pure returns (string memory) {\n', '        return "hi";\n', '    }\n', '}\n', '\n', '\n', '// File contracts/Wrapper.sol\n', '\n', '// import "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol";\n', '\n', '\n', '// contract Wrapper is ERC20Upgradeable {\n', '//     using SafeMathUpgradeable for uint256;\n', '\n', '//     IERC20 token;\n', '\n', '\n', '//     function initialize(address _token) public initializer {\n', '//         __ERC20_init(name, symbol);\n', '\n', '//         token = IERC20(token);\n', '//     }\n', '\n', '//     function balance() public view returns (uint256) {\n', '//         return token.balanceOf(address(this));\n', '//     }\n', '\n', '\n', '//     function deposit(uint256 _amount) {\n', '//         unit256 _before = balance();\n', '\n', '//         require(token.transferFrom(msg.sender, address(this), _amount));\n', '\n', '//         unit256 _after = balance();\n', '//         // Recompute amount in case of deflationary token\n', '//         _amount = _after.sub(_before);\n', '\n', '//         unit256 shares = 0;\n', '//         if ( totalSupply() == 0) {\n', '//             shares = _amount;\n', '//         } else {\n', '//             shares = _amount.mul(totalSupply()).div(_before);\n', '//         }\n', '\n', '//         _mint(msg.sender, shares);\n', '//     }\n', '\n', '//     function withdraw(unit256 _shares) {\n', '//         uint256 _amountToRedeem = _shares.mul(balance()).div(totalSupply());\n', '//         _burn(msg.sender, _shares);\n', '\n', '//         token.transfer(msg.sender, _amountToRedeem);\n', '//     }\n', '// }']