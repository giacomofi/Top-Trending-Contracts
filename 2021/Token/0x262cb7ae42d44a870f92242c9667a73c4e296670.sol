['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "./ERC721.sol";\n', 'import "./Ownable.sol";\n', 'import "./SafeMath.sol";\n', '\n', 'contract GANMasks is Ownable, ERC721 {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    // Provenance Hash of all GANMASKS\n', '    string public constant PROVENANCE_HASH = "bbbe617ba4cc4a581350472f8a05cff398828e03ab5623646886652c4e01184f";\n', '\n', '    // Maximum supply of tokens\n', '    uint256 public constant MAX_SUPPLY = 10500;\n', '\n', '    // Base URI to get metadata of all GAN Masks (will be changed to ipfs link after the sale)\n', '    string internal baseURI = "https://ganmasks.com/api/";\n', '\n', '    constructor() ERC721("GANMasks", "GM") {\n', '    }\n', '\n', '    /**\n', '     * @dev Base URI for computing {tokenURI}.\n', '     */\n', '    function _baseURI() internal view override returns (string memory) {\n', '        return baseURI;\n', '    }\n', '\n', '    /**\n', '     * @dev Get price of the token\n', '     */\n', '    function getTokenPrice() public view returns (uint256) {\n', '        uint tokenId = totalSupply();\n', '        require(tokenId < MAX_SUPPLY, "All tokens sold out");\n', '\n', '        if (tokenId < 4000) {\n', '          return 125000000000000000;\n', '        }\n', '        else if (tokenId < 7000) {\n', '          return 250000000000000000;\n', '        }\n', '        else if (tokenId < 9000) {\n', '          return 500000000000000000;\n', '        }\n', '        else {\n', '          return 1000000000000000000;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Mint a token\n', '     */\n', '    function mintToken(uint256 numTokens) public payable {\n', '        require(numTokens > 0 && numTokens <= 20, "You can only mint between 1 and 20 tokens at a time");\n', '        require(getTokenPrice().mul(numTokens) == msg.value, "Ether value sent is incorrect");\n', '\n', '        for (uint i = 0; i < numTokens; i++) {\n', '            uint tokenId = totalSupply() ;\n', '            require(tokenId < MAX_SUPPLY, "Cannot mint more tokens than the maximum limit");\n', '            _safeMint(msg.sender, tokenId);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Set the Base URI of tokens\n', '     */\n', '    function setBaseURI(string memory baseURI_) public onlyOwner {\n', '        baseURI = baseURI_;\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw ether from the contract\n', '     */\n', '    function withdraw() public onlyOwner {\n', '        payable(msg.sender).transfer(address(this).balance);\n', '    }\n', '}']