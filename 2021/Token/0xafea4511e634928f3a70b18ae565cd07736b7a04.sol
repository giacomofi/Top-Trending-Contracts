['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-20\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2020-09-28\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2018-09-01\n', '*/\n', '\n', 'pragma solidity 0.5.8; \n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is not paused.\n', '    */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is paused.\n', '    */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to pause, triggers stopped state\n', '    */\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to unpause, returns to normal state\n', '    */\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', '\n', '\n', 'contract DistibutionContract3 is Pausable {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 constant public decimals = 1 ether;\n', '    address[] public tokenOwners ; /* Tracks distributions mapping (iterable) */\n', '    uint256 public TGEDate = 0; /* Date From where the distribution starts (TGE) */\n', '    uint256 constant public month = 30 days;\n', '    uint256 constant public year = 365 days;\n', '    uint256 public lastDateDistribution = 0;\n', '    \n', '    mapping(address => DistributionStep[]) public distributions; /* Distribution object */\n', '    \n', '    ERC20 public erc20;\n', '\n', '    struct DistributionStep {\n', '        uint256 amountAllocated;\n', '        uint256 currentAllocated;\n', '        uint256 unlockDay;\n', '        uint256 amountSent;\n', '    }\n', '\n', '    constructor() public{\n', '        \n', '        /* Private Sale 3 */\n', '        setInitialDistribution(0x6B8b3A59527c3DD984c508f27413a4c7B4352EEd, 80000, 1*month);\n', '        setInitialDistribution(0x6B8b3A59527c3DD984c508f27413a4c7B4352EEd, 80000, 2*month);\n', '        setInitialDistribution(0x6B8b3A59527c3DD984c508f27413a4c7B4352EEd, 80000, 3*month);\n', '\n', '        setInitialDistribution(0x8e76aB487a510cc62f5dE305e98fc738aeC82405, 60000, 1*month);\n', '        setInitialDistribution(0x8e76aB487a510cc62f5dE305e98fc738aeC82405, 60000, 2*month);\n', '        setInitialDistribution(0x8e76aB487a510cc62f5dE305e98fc738aeC82405, 60000, 3*month);\n', '\n', '        setInitialDistribution(0xd6C5e78cc909014e26620d8ff4dB4463C792E310, 130000, 1*month);\n', '        setInitialDistribution(0xd6C5e78cc909014e26620d8ff4dB4463C792E310, 130000, 2*month);\n', '        setInitialDistribution(0xd6C5e78cc909014e26620d8ff4dB4463C792E310, 130000, 3*month);\n', '\n', '        setInitialDistribution(0xFc6EFF3ECE4FD66B3C97d53605A93a4E5963bBf0, 50000, 1*month);\n', '        setInitialDistribution(0xFc6EFF3ECE4FD66B3C97d53605A93a4E5963bBf0, 50000, 2*month);\n', '        setInitialDistribution(0xFc6EFF3ECE4FD66B3C97d53605A93a4E5963bBf0, 50000, 3*month);\n', '\n', '        setInitialDistribution(0xB50c06686657C2f2131fd04918bF20840B83Bd51, 30000, 1*month);\n', '        setInitialDistribution(0xB50c06686657C2f2131fd04918bF20840B83Bd51, 30000, 2*month);\n', '        setInitialDistribution(0xB50c06686657C2f2131fd04918bF20840B83Bd51, 30000, 3*month);\n', '\n', '        setInitialDistribution(0x1f4e65DED886DC708a278f05ea107244A8161bf7, 30000, 1*month);\n', '        setInitialDistribution(0x1f4e65DED886DC708a278f05ea107244A8161bf7, 30000, 2*month);\n', '        setInitialDistribution(0x1f4e65DED886DC708a278f05ea107244A8161bf7, 30000, 3*month);\n', '\n', '        setInitialDistribution(0x883aD562D0a83569dA00DdF88C96C348519c0030, 25000, 1*month);\n', '        setInitialDistribution(0x883aD562D0a83569dA00DdF88C96C348519c0030, 25000, 2*month);\n', '        setInitialDistribution(0x883aD562D0a83569dA00DdF88C96C348519c0030, 25000, 3*month);\n', '\n', '        setInitialDistribution(0xEEff483b297016938400575043752A2d10d7579A, 50000, 1*month);\n', '        setInitialDistribution(0xEEff483b297016938400575043752A2d10d7579A, 50000, 2*month);\n', '        setInitialDistribution(0xEEff483b297016938400575043752A2d10d7579A, 50000, 3*month);\n', '\n', '        setInitialDistribution(0x0Ed67dAaacf97acF041cc65f04A632a8811347fF, 70000, 1*month);\n', '        setInitialDistribution(0x0Ed67dAaacf97acF041cc65f04A632a8811347fF, 70000, 2*month);\n', '        setInitialDistribution(0x0Ed67dAaacf97acF041cc65f04A632a8811347fF, 70000, 3*month);\n', '\n', '        setInitialDistribution(0xA7cC7B0f40763a5baEc1AF3f631eb7B6e56cacD4, 17500, 1*month);\n', '        setInitialDistribution(0xA7cC7B0f40763a5baEc1AF3f631eb7B6e56cacD4, 17500, 2*month);\n', '        setInitialDistribution(0xA7cC7B0f40763a5baEc1AF3f631eb7B6e56cacD4, 17500, 3*month);\n', '\n', '        setInitialDistribution(0xB90e7F5fE86775ea8A2ea5241d8D745265F721D2, 100000, 1*month);\n', '        setInitialDistribution(0xB90e7F5fE86775ea8A2ea5241d8D745265F721D2, 100000, 2*month);\n', '        setInitialDistribution(0xB90e7F5fE86775ea8A2ea5241d8D745265F721D2, 100000, 3*month);\n', '\n', '        setInitialDistribution(0x778C029675d3e2435Cf4C207E981D37c2174bec8, 40000, 1*month);\n', '        setInitialDistribution(0x778C029675d3e2435Cf4C207E981D37c2174bec8, 40000, 2*month);\n', '        setInitialDistribution(0x778C029675d3e2435Cf4C207E981D37c2174bec8, 40000, 3*month);\n', '\n', '        setInitialDistribution(0xE1176052966f14802BB3755bbdfcaA712B4708e8, 17500, 1*month);\n', '        setInitialDistribution(0xE1176052966f14802BB3755bbdfcaA712B4708e8, 17500, 2*month);\n', '        setInitialDistribution(0xE1176052966f14802BB3755bbdfcaA712B4708e8, 17500, 3*month);\n', '\n', '        setInitialDistribution(0x3c87E00da8551C73032496Aa60D9BD980510CBAF, 70000, 1*month);\n', '        setInitialDistribution(0x3c87E00da8551C73032496Aa60D9BD980510CBAF, 70000, 2*month);\n', '        setInitialDistribution(0x3c87E00da8551C73032496Aa60D9BD980510CBAF, 70000, 3*month);\n', '\n', '        setInitialDistribution(0x53A2f447C61152917493679F8105811198648d81, 60000, 1*month);\n', '        setInitialDistribution(0x53A2f447C61152917493679F8105811198648d81, 60000, 2*month);\n', '        setInitialDistribution(0x53A2f447C61152917493679F8105811198648d81, 60000, 3*month);\n', '\n', '        setInitialDistribution(0x7Da633fcF51838e688676AD30C2cC6A08c59c316, 10000, 1*month);\n', '        setInitialDistribution(0x7Da633fcF51838e688676AD30C2cC6A08c59c316, 10000, 2*month);\n', '        setInitialDistribution(0x7Da633fcF51838e688676AD30C2cC6A08c59c316, 10000, 3*month);\n', '\n', '        setInitialDistribution(0x7Aa48800c1f5cb80A670cB66635dD382237777c6, 30000, 1*month);\n', '        setInitialDistribution(0x7Aa48800c1f5cb80A670cB66635dD382237777c6, 30000, 2*month);\n', '        setInitialDistribution(0x7Aa48800c1f5cb80A670cB66635dD382237777c6, 30000, 3*month);\n', '\n', '        setInitialDistribution(0x5FD7E077dA76E286bD0A50bC545A5883108C364f, 40000, 1*month);\n', '        setInitialDistribution(0x5FD7E077dA76E286bD0A50bC545A5883108C364f, 40000, 2*month);\n', '        setInitialDistribution(0x5FD7E077dA76E286bD0A50bC545A5883108C364f, 40000, 3*month);\n', '\n', '        setInitialDistribution(0x9aA562422Ed5079E5C3C38A0733392543653C3db, 120000, 1*month);\n', '        setInitialDistribution(0x9aA562422Ed5079E5C3C38A0733392543653C3db, 120000, 2*month);\n', '        setInitialDistribution(0x9aA562422Ed5079E5C3C38A0733392543653C3db, 120000, 3*month);\n', '\n', '    }\n', '\n', '    function setTokenAddress(address _tokenAddress) external onlyOwner whenNotPaused  {\n', '        erc20 = ERC20(_tokenAddress);\n', '    }\n', '    \n', '    function safeGuardAllTokens(address _address) external onlyOwner whenPaused  { /* In case of needed urgency for the sake of contract bug */\n', '        require(erc20.transfer(_address, erc20.balanceOf(address(this))));\n', '    }\n', '\n', '    function setTGEDate(uint256 _time) external onlyOwner whenNotPaused  {\n', '        TGEDate = _time;\n', '    }\n', '\n', '    /**\n', '    *   Should allow any address to trigger it, but since the calls are atomic it should do only once per day\n', '     */\n', '\n', '    function triggerTokenSend() external whenNotPaused  {\n', '        /* Require TGE Date already been set */\n', '        require(TGEDate != 0, "TGE date not set yet");\n', '        /* TGE has not started */\n', '        require(block.timestamp > TGEDate, "TGE still hasn´t started");\n', '        /* Test that the call be only done once per day */\n', '        require(block.timestamp.sub(lastDateDistribution) > 1 days, "Can only be called once a day");\n', '        lastDateDistribution = block.timestamp;\n', '        /* Go thru all tokenOwners */\n', '        for(uint i = 0; i < tokenOwners.length; i++) {\n', '            /* Get Address Distribution */\n', '            DistributionStep[] memory d = distributions[tokenOwners[i]];\n', '            /* Go thru all distributions array */\n', '            for(uint j = 0; j < d.length; j++){\n', '                if( (block.timestamp.sub(TGEDate) > d[j].unlockDay) /* Verify if unlockDay has passed */\n', '                    && (d[j].currentAllocated > 0) /* Verify if currentAllocated > 0, so that address has tokens to be sent still */\n', '                ){\n', '                    uint256 sendingAmount;\n', '                    sendingAmount = d[j].currentAllocated;\n', '                    distributions[tokenOwners[i]][j].currentAllocated = distributions[tokenOwners[i]][j].currentAllocated.sub(sendingAmount);\n', '                    distributions[tokenOwners[i]][j].amountSent = distributions[tokenOwners[i]][j].amountSent.add(sendingAmount);\n', '                    require(erc20.transfer(tokenOwners[i], sendingAmount));\n', '                }\n', '            }\n', '        }   \n', '    }\n', '\n', '    function setInitialDistribution(address _address, uint256 _tokenAmount, uint256 _unlockDays) internal onlyOwner whenNotPaused {\n', '        /* Add tokenOwner to Eachable Mapping */\n', '        bool isAddressPresent = false;\n', '\n', '        /* Verify if tokenOwner was already added */\n', '        for(uint i = 0; i < tokenOwners.length; i++) {\n', '            if(tokenOwners[i] == _address){\n', '                isAddressPresent = true;\n', '            }\n', '        }\n', '        /* Create DistributionStep Object */\n', '        DistributionStep memory distributionStep = DistributionStep(_tokenAmount * decimals, _tokenAmount * decimals, _unlockDays, 0);\n', '        /* Attach */\n', '        distributions[_address].push(distributionStep);\n', '\n', '        /* If Address not present in array of iterable token owners */\n', '        if(!isAddressPresent){\n', '            tokenOwners.push(_address);\n', '        }\n', '    }\n', '}']