['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.6;\n', 'import "./ERC20Pausable.sol";\n', 'import "./ERC20.sol";\n', 'import "./SafeMath.sol";\n', '\n', 'contract MintAccessor {\n', '    address payable public owner;\n', '\n', '    constructor() internal {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "Unauthorized access to contract");\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address payable newOwner) public onlyOwner {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', 'contract XendToken is ERC20Pausable {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 private _price;\n', '\n', '    constructor(\n', '        string memory name,\n', '        string memory symbol,\n', '        uint8 decimals,\n', '        uint256 totalSupply\n', '    ) public ERC20(name, symbol, decimals, totalSupply) {}\n', '\n', '    // receive() external payable {\n', '    //     address sender = address(this);\n', '\n', '    //     address recipient = msg.sender;\n', '\n', '    //     uint256 decimal = decimals();\n', '    //     uint256 amount = msg.value.mul(10**uint256(decimal)).div(_price); // calculates the amount\n', '\n', '    //     _transfer(sender, recipient, amount);\n', '    // }\n', '\n', '    function mint(uint256 amount) public virtual onlyOwner {\n', '        address account = msg.sender;\n', '        _mint(account, amount);\n', '    }\n', '\n', '    function mint(address payable recipient, uint256 amount)\n', '        public\n', '        virtual\n', '        onlyMinter\n', '    {\n', '        _transfer(owner, recipient, amount);\n', '    }\n', '\n', '    function withdraw() public virtual onlyOwner {\n', '        uint256 etherBalance = address(this).balance;\n', '        msg.sender.transfer(etherBalance);\n', '    }\n', '\n', '    function withdrawTokens() public virtual onlyOwner{\n', '        address contractAddress = address(this);\n', '        uint tokenBalance = balanceOf(contractAddress);\n', '        _transfer(contractAddress,owner,tokenBalance);\n', '    }\n', '\n', '    function price() public view returns (uint256) {\n', '        return _price;\n', '    }\n', '\n', '    function SetPrice(uint256 priceInWei) public onlyOwner {\n', '        _price = priceInWei;\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from the caller.\n', '     *\n', '     * See {ERC20-_burn}.\n', '     */\n', '    function burn(uint256 amount) public virtual {\n', '        _burn(_msgSender(), amount);\n', '    }\n', '\n', '    /**\n', "     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n", '     * allowance.\n', '     *\n', '     * See {ERC20-_burn} and {ERC20-allowance}.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have allowance for ``accounts``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function burnFrom(address account, uint256 amount) public virtual {\n', '        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(\n', '            amount,\n', '            "ERC20: burn amount exceeds allowance"\n', '        );\n', '\n', '        _approve(account, _msgSender(), decreasedAllowance);\n', '        _burn(account, amount);\n', '    }\n', '}']