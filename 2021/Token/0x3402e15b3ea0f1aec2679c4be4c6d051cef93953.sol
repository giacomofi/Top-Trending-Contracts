['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-08\n', '*/\n', '\n', '// Sources flattened with hardhat v2.2.1 https://hardhat.org\n', '\n', '// File openzeppelin-solidity/contracts/token/ERC20/[email\xa0protected]\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// File openzeppelin-solidity/contracts/utils/[email\xa0protected]\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/ERC20Customized.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}.\n', '     *\n', '     * The defaut value of {decimals} is 18. To select a different value for\n', '     * {decimals} you should overload it.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name_, string memory symbol_) {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view virtual returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view virtual returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n', '     * overloaded;\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view virtual returns (uint8) {\n', '        return 18;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view virtual override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view virtual override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '\n', '        uint256 currentAllowance = _allowances[sender][_msgSender()];\n', '        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");\n', '        _approve(sender, _msgSender(), currentAllowance - amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        uint256 currentAllowance = _allowances[_msgSender()][spender];\n', '        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");\n', '        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        uint256 senderBalance = _balances[sender];\n', '        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[sender] = senderBalance - amount;\n', '        _balances[recipient] += amount;\n', '\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply += amount;\n', '        _balances[account] += amount;\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        uint256 accountBalance = _balances[account];\n', '        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");\n', '        _balances[account] = accountBalance - amount;\n', '        _balances[address(0)] = _balances[address(0)] + amount;\n', '\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '\n', '// File contracts/ERC20BurnableCustomized.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', '/**\n', ' * @dev Extension of {ERC20} that allows token holders to destroy both their own\n', ' * tokens and those that they have an allowance for, in a way that can be\n', ' * recognized off-chain (via event analysis).\n', ' */\n', 'abstract contract ERC20Burnable is Context, ERC20 {\n', '    /**\n', '     * @dev Destroys `amount` tokens from the caller.\n', '     *\n', '     * See {ERC20-_burn}.\n', '     */\n', '    function burn(uint256 amount) public virtual {\n', '        _burn(_msgSender(), amount);\n', '    }\n', '\n', '    /**\n', "     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n", '     * allowance.\n', '     *\n', '     * See {ERC20-_burn} and {ERC20-allowance}.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have allowance for ``accounts``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function burnFrom(address account, uint256 amount) public virtual {\n', '        uint256 currentAllowance = allowance(account, _msgSender());\n', '        require(currentAllowance >= amount, "ERC20: burn amount exceeds allowance");\n', '        _approve(account, _msgSender(), currentAllowance - amount);\n', '        _burn(account, amount);\n', '    }\n', '}\n', '\n', '\n', '// File openzeppelin-solidity/contracts/access/[email\xa0protected]\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/QAOToken.sol\n', '\n', 'pragma solidity 0.8.1;\n', '\n', '\n', 'contract QAOToken is ERC20Burnable, Ownable {\n', '\n', '    uint256 private constant DAY_IN_SEC = 86400;\n', '    uint256 private constant DIV_ACCURACY = 1 ether;\n', '\n', '    uint256 public constant DAILY_MINT_AMOUNT = 100000000 ether;\n', '    uint256 public constant ANNUAL_TREASURY_MINT_AMOUNT = 1000000000000 ether;\n', '    uint256 private _mintMultiplier = 1 ether;\n', '\n', '    uint256 private _mintAirdropShare = 0.45 ether;\n', '    uint256 private _mintLiqPoolShare = 0.45 ether;\n', '    uint256 private _mintApiRewardShare = 0.1 ether;\n', '\n', '    /* by default minting will be disabled */\n', '    bool private mintingIsActive = false;\n', '\n', '    /* track the total airdrop amount, because we need a stable value to avoid fifo winners on withdrawing airdrops */\n', '    uint256 private _totalAirdropAmount;\n', '\n', '    /* timestamp which specifies when the next mint phase should happen */\n', '    uint256 private _nextMintTimestamp;\n', '\n', '    /* treasury minting and withdrawing variables */\n', '    uint256 private _annualTreasuryMintCounter = 0; \n', '    uint256 private _annualTreasuryMintTimestamp = 0;\n', '    address private _treasuryGuard;\n', '    bool private _treasuryLockGuard = false;\n', '    bool private _treasuryLockOwner = false;\n', '\n', '    /* pools */\n', '    address private _airdropPool;\n', '    address private _liquidityPool;\n', '    address private _apiRewardPool;\n', '\n', '    /* voting engine */\n', '    address private _votingEngine;\n', '\n', '\n', '    constructor( address swapLiqPool, address treasuryGuard) ERC20("QAO", unicode"🌐") {\n', '\n', '        _mint(swapLiqPool, 9000000000000 ether);\n', '\n', '        _treasuryGuard = treasuryGuard;\n', '        _annualTreasuryMint();\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _applyMintSchedule();\n', '        _annualTreasuryMint();\n', '        return ERC20.transfer(recipient, amount);\n', '    }\n', '\n', '    /*******************************************************************\n', '     * Standard minting functionality\n', '     *******************************************************************/\n', '\n', '    /* turn on minting. make sure you specified the addresses of the receiving pools first */\n', '    function activateMinting() public onlyOwner {\n', '        require(!mintingIsActive, "QAO Token: Minting has already been activated");\n', '        require(_airdropPool != address(0), "QAO Token: Please specify the address of the airdrop pool before activating minting.");\n', '        require(_liquidityPool != address(0), "QAO Token: Please specify the address of the liquidity pool before activating minting.");\n', '        require(_apiRewardPool != address(0), "QAO Token: Please specify the address of the api reward pool before activating minting.");\n', '\n', '        mintingIsActive = true;\n', '        _mintToPools();\n', '        _nextMintTimestamp = block.timestamp + DAY_IN_SEC;\n', '    }\n', '\n', '    /* apply minting for the current day and reprocess any missed day */\n', '    function _applyMintSchedule() private {\n', '        if (mintingIsActive){\n', '            while (block.timestamp >= _nextMintTimestamp){\n', '                _mintToPools();\n', '                _nextMintTimestamp = _nextMintTimestamp + DAY_IN_SEC;\n', '            }\n', '        }\n', '    }\n', '\n', '    /* calculate minting supply for each pool and mint tokens to them */\n', '    function _mintToPools() private {\n', '        uint256 totalMintAmount = (DAILY_MINT_AMOUNT * _mintMultiplier) / DIV_ACCURACY;\n', '        uint256 airdropAmount = (totalMintAmount * _mintAirdropShare) / DIV_ACCURACY;\n', '        uint256 liqPoolAmount = (totalMintAmount * _mintLiqPoolShare) / DIV_ACCURACY;\n', '        uint256 apiRewardAmount = (totalMintAmount * _mintApiRewardShare) / DIV_ACCURACY;\n', '\n', '        _mint(_airdropPool, airdropAmount);\n', '        _mint(_liquidityPool, liqPoolAmount);\n', '        _mint(_apiRewardPool, apiRewardAmount);\n', '    }\n', '\n', '    /* Get amount of days passed since the provided timestamp */\n', '    function _getPassedDays(uint256 timestamp) private view returns (uint256) {\n', '        uint256 secondsDiff = block.timestamp - timestamp;\n', '        return (secondsDiff / DAY_IN_SEC);\n', '    }\n', '\n', '    /*******************************************************************\n', '     * Treasury functionality\n', '     *******************************************************************/\n', '    function _annualTreasuryMint() private {\n', '        if (block.timestamp >= _annualTreasuryMintTimestamp && _annualTreasuryMintCounter < 4) {\n', '            _annualTreasuryMintTimestamp = block.timestamp + (365 * DAY_IN_SEC);\n', '            _annualTreasuryMintCounter = _annualTreasuryMintCounter + 1;\n', '            _mint(address(this), ANNUAL_TREASURY_MINT_AMOUNT);\n', '        }\n', '    }\n', '\n', '    function unlockTreasuryByGuard() public {\n', '        require(_msgSender() == _treasuryGuard, "QAO Token: You shall not pass!");\n', '        _treasuryLockGuard = true;\n', '    }\n', '    function unlockTreasuryByOwner() public onlyOwner {\n', '        _treasuryLockOwner = true;\n', '    }\n', '\n', '    function withdrawFromTreasury(address recipient, uint256 amount) public onlyOwner {\n', '        require(_treasuryLockGuard && _treasuryLockOwner, "QAO Token: Treasury is not unlocked.");\n', '        _transfer(address(this), recipient, amount);\n', '        _treasuryLockGuard = false;\n', '        _treasuryLockOwner = false;\n', '    }\n', '\n', '    /*******************************************************************\n', '     * Voting engine support functionality\n', '     *******************************************************************/\n', '    function setVotingEngine(address votingEngineAddr) public onlyOwner {\n', '        _votingEngine = votingEngineAddr;\n', '    }\n', '\n', '    function votingEngine() public view returns (address) {\n', '        return _votingEngine;\n', '    }\n', '\n', '    function mintVoteStakeReward(uint256 amount) public {\n', '        require(_votingEngine != address(0), "QAO Token: Voting engine not set.");\n', '        require(_msgSender() == _votingEngine, "QAO Token: Only the voting engine can call this function.");\n', '        _mint(_votingEngine, amount);\n', '    }\n', '\n', '    /*******************************************************************\n', '     * Getters/ Setters for mint multiplier\n', '     *******************************************************************/ \n', '    function mintMultiplier() public view returns (uint256) {\n', '        return _mintMultiplier;\n', '    }\n', '    function setMintMultiplier(uint256 newMultiplier) public onlyOwner {\n', '        require(newMultiplier < _mintMultiplier, "QAO Token: Value of new multiplier needs to be lower than the current one.");\n', '        _mintMultiplier = newMultiplier;\n', '    }\n', '\n', '    /*******************************************************************\n', '     * Getters/ Setters for minting pools\n', '     *******************************************************************/  \n', '    function airdropPool() public view returns (address){\n', '        return _airdropPool;\n', '    }\n', '    function setAirdropPool(address newAddress) public onlyOwner {\n', '        require(newAddress != address(0), "QAO Token: Address Zero cannot be the airdrop pool.");\n', '        _airdropPool = newAddress;\n', '    }\n', '\n', '    function liquidityPool() public view returns (address){\n', '        return _liquidityPool;\n', '    }\n', '    function setLiquidityPool(address newAddress) public onlyOwner {\n', '        require(newAddress != address(0), "QAO Token: Address Zero cannot be the liquidity pool.");\n', '        _liquidityPool = newAddress;\n', '    }\n', '\n', '    function apiRewardPool() public view returns (address){\n', '        return _apiRewardPool;\n', '    }\n', '    function setApiRewardPool(address newAddress) public onlyOwner {\n', '        require(newAddress != address(0), "QAO Token: Address Zero cannot be the reward pool.");\n', '        _apiRewardPool = newAddress;\n', '    }\n', '\n', '    /*******************************************************************\n', '     * Getters/ Setters for minting distribution shares\n', '     *******************************************************************/\n', '    function mintAirdropShare() public view returns (uint256){\n', '        return _mintAirdropShare;\n', '    }\n', '    function setMintAirdropShare(uint256 newShare) public onlyOwner {\n', '        require((newShare + _mintLiqPoolShare + _mintApiRewardShare) <= 1 ether, "QAO Token: Sum of mint shares is greater than 100%.");\n', '        _mintAirdropShare = newShare;\n', '    }\n', '\n', '    function mintLiqPoolShare() public view returns (uint256){\n', '        return _mintLiqPoolShare;\n', '    }\n', '    function setMintLiqPoolShare(uint256 newShare) public onlyOwner {\n', '        require((newShare + _mintAirdropShare + _mintApiRewardShare) <= 1 ether, "QAO Token: Sum of mint shares is greater than 100%.");\n', '        _mintLiqPoolShare = newShare;\n', '    }\n', '\n', '    function mintApiRewardShare() public view returns (uint256){\n', '        return _mintApiRewardShare;\n', '    }\n', '    function setMintApiRewardShare(uint256 newShare) public onlyOwner {\n', '        require((newShare + _mintAirdropShare + _mintLiqPoolShare) <= 1 ether, "QAO Token: Sum of mint shares is greater than 100%.");\n', '        _mintApiRewardShare = newShare;\n', '    }\n', '}']