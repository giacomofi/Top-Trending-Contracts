['pragma solidity ^0.5.0;\n', '\n', 'import "./ERC777.sol";\n', 'import "./IERC677Receiver.sol";\n', 'import "./ISideToken.sol";\n', '\n', 'contract SideToken is ISideToken, ERC777 {\n', '    using Address for address;\n', '    using SafeMath for uint256;\n', '\n', '    address public minter;\n', '    uint256 private _granularity;\n', '\n', '    event Transfer(address,address,uint256,bytes);\n', '\n', '    constructor(string memory _tokenName, string memory _tokenSymbol, address _minterAddr, uint256 _newGranularity)\n', '    ERC777(_tokenName, _tokenSymbol, new address[](0)) public {\n', '        require(_minterAddr != address(0), "SideToken: Minter address is null");\n', '        require(_newGranularity >= 1, "SideToken: Granularity must be equal or bigger than 1");\n', '        minter = _minterAddr;\n', '        _granularity = _newGranularity;\n', '    }\n', '\n', '    modifier onlyMinter() {\n', '        require(_msgSender() == minter, "SideToken: Caller is not the minter");\n', '        _;\n', '    }\n', '\n', '    function mint(\n', '        address account,\n', '        uint256 amount,\n', '        bytes calldata userData,\n', '        bytes calldata operatorData\n', '    )\n', '    external onlyMinter\n', '    {\n', '        _mint(_msgSender(), account, amount, userData, operatorData);\n', '    }\n', '\n', '    /**\n', '    * @dev ERC677 transfer token with additional data if the recipient is a contact.\n', '    * @param recipient The address to transfer to.\n', '    * @param amount The amount to be transferred.\n', '    * @param data The extra data to be passed to the receiving contract.\n', '    */\n', '    function transferAndCall(address recipient, uint amount, bytes calldata data)\n', '        external returns (bool success)\n', '    {\n', '        address from = _msgSender();\n', '\n', '        _send(from, from, recipient, amount, data, "", false);\n', '        emit Transfer(from, recipient, amount, data);\n', '        IERC677Receiver(recipient).onTokenTransfer(from, amount, data);\n', '        return true;\n', '    }\n', '\n', '    function granularity() public view returns (uint256) {\n', '        return _granularity;\n', '    }\n', '\n', '}']