['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-25\n', '*/\n', '\n', 'pragma solidity ^0.6.6;\n', 'interface IERC20 {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external view returns (string memory);\n', '\n', '    function symbol() external view returns (string memory);\n', '\n', '    function decimals() external view returns (uint8);\n', '\n', '    function totalSupply() external view returns (uint);\n', '\n', '    function balanceOf(address owner) external view returns (uint);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '\n', '    function transfer(address to, uint value) external returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '}\n', 'contract BatchTransfer{\n', '    function batchTransferEth(address payable[] memory to,uint256[] memory values) payable public{//添加payable,支持在调用方法的时候，value往合约里面传eth，注意该value最终平分发给所有账户\n', '        //require(to.length == values.length);\n', '        uint256 remainValue = msg.value;\n', '        for(uint32 i=0;i<to.length;i++){\n', '            require(remainValue >= values[i]);\n', '            remainValue -= values[i];\n', '            to[i].transfer(values[i]);\n', '        }\n', '        if(remainValue>0){\n', '            msg.sender.transfer(remainValue);\n', '        }\n', '    }\n', '    // function batchTransferErc20V0(address erc20Address,address payable[] memory to,uint256[] memory values) public{\n', '    //这个方法不好，因为transferFrom操作比较消耗GAS,所以应该先把token划转到合约，再转账出去，批量转账3次内本方法较高，3次以上先划转的方法效率高\n', '    //     //require(to.length == values.length);\n', '    //     IERC20 erc20Token = IERC20(erc20Address);\n', '    //     for(uint32 i=0;i<to.length;i++){\n', '    //         erc20Token.transferFrom(msg.sender,to[i],values[i]);\n', '    //     }\n', '    // }\n', '    function batchTransferErc20(address erc20Address,address payable[] memory to,uint256[] memory values) public{\n', '        //require(to.length == values.length);\n', '        uint256 totalValue = 0;\n', '        for(uint32 i=0;i<to.length;i++){\n', '            totalValue += values[i];\n', '        }\n', '        \n', '        IERC20 erc20Token = IERC20(erc20Address);\n', '        erc20Token.transferFrom(msg.sender,address(this),totalValue);\n', '        for(uint32 i=0;i<to.length;i++){\n', '            erc20Token.transfer(to[i],values[i]);\n', '        }\n', '    }\n', '}']