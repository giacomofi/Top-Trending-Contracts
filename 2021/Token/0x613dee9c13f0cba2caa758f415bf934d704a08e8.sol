['pragma solidity ^0.7.0;\n', 'pragma experimental SMTChecker;\n', '\n', '//SPDX-License-Identifier: MIT\n', 'import "./Claimable.sol";\n', 'import "./ccToken.sol";\n', 'import "./BlockedList.sol";\n', 'import "./ccTokenControllerIf.sol";\n', 'import "./MemberMgrIf.sol";\n', 'import "./MintFactory.sol";\n', 'import "./CanReclaimToken.sol";\n', '\n', '/// @title ccTokenController\n', 'contract ccTokenController is ccTokenControllerIf, Claimable, BlockedList, CanReclaimToken {\n', '    ccToken public token;\n', '    MemberMgrIf public members;\n', '    address public factory;\n', '\n', '    function getToken() view override external returns (ERC20If){\n', '        return token;\n', '    }\n', '\n', '    function requireCustodian(address _who) override public view {\n', '        members.requireCustodian(_who);\n', '    }\n', '\n', '    function requireMerchant(address _who) override public view {\n', '        members.requireMerchant(_who);\n', '    }\n', '\n', '    event MembersSet(MemberMgrIf indexed members);\n', '\n', '    function setMembers(MemberMgrIf _members) external onlyOwner returns (bool) {\n', '        require((address)(_members) != address(0), "invalid _members address");\n', '        members = _members;\n', '        emit MembersSet(members);\n', '        return true;\n', '    }\n', '\n', '    event FactorySet(address indexed factory);\n', '\n', '    function setFactory(address _factory) external onlyOwner returns (bool) {\n', '        require(_factory != address(0), "invalid _factory address");\n', '        factory = _factory;\n', '        emit FactorySet(factory);\n', '        return true;\n', '    }\n', '\n', '    event Paused(bool indexed status);\n', '\n', '    bool public _paused = false;\n', '\n', '    constructor(ccToken _token){\n', '        token = _token;\n', '        factory = (address)(new MintFactory());\n', '    }\n', '\n', '    modifier onlyFactory() {\n', '        require(msg.sender == factory, "sender not authorized for minting or burning.");\n', '        _;\n', '    }\n', '\n', '    function transferOwnershipOfOwned(address _newOwner, Ownable owned) public onlyOwner {\n', '        owned.transferOwnership(_newOwner);\n', '    }\n', '\n', '    function reclaimTokenOfOwned(ERC20If _token, CanReclaimToken owned) external onlyOwner {\n', '        owned.reclaimToken(_token);\n', '    }\n', '\n', '    function claimOwnershipOfToken() public onlyOwner {\n', '        token.claimOwnership();\n', '        token.setController((ERC20ControllerViewIf)(this));\n', '    }\n', '\n', '    function paused() override public view returns (bool){\n', '        return _paused;\n', '    }\n', '\n', '    function setPaused(bool status) public onlyOwner {\n', '        _paused = status;\n', '        emit Paused(status);\n', '    }\n', '\n', '    // only factory actions on token\n', '    function mint(address to, uint amount) override external onlyFactory returns (bool) {\n', '        require(to != address(0), "invalid to address");\n', '        require(!paused(), "paused.");\n', '        require(token.mint(to, amount), "minting failed.");\n', '        return true;\n', '    }\n', '\n', '    function burn(uint value) override external onlyFactory returns (bool) {\n', '        require(!paused(), "token is paused.");\n', '        require(token.burn(value));\n', '        return true;\n', '    }\n', '\n', '    function burnBlocked(address addrBlocked, uint256 amount) public onlyOwner returns (bool){\n', '        require(token.burnBlocked(addrBlocked,amount), "burnBlocked failed");\n', '        return true;\n', '    }\n', '\n', '}']