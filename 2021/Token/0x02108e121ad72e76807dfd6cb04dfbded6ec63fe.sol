['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-15\n', '*/\n', '\n', '// SPDX-License-Identifier: none\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface IToken {\n', '  function mint(address to, uint amount) external;\n', '  function burn(address owner, uint amount) external;\n', '  function transferOwnership(address  _newOwner) external;\n', '  function balanceOf(address tokenOwner) external returns (uint balance);\n', '  function transfer(address recipient, uint256 amount) external returns (bool);\n', '}\n', '\n', '\n', 'contract Casino {\n', '    \n', '    address public owner;\n', '    event OwnershipTransferred(address indexed from, address indexed to);\n', '    \n', '    constructor() {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    // transfer ownership to other address\n', '    function transferOwnership(address _newOwner) public {\n', '        require(_newOwner != address(0x0));\n', '        require(msg.sender == owner);\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '    \n', '    function withdraw(address payable _to, uint _amount) public payable {\n', '        require( msg.sender == owner);\n', '        _to.transfer(_amount);\n', '    }\n', '    \n', '    function withdrawERC20Token(address tokenAddr, address payable _to, uint amount) public  {\n', '        uint balance = IToken(tokenAddr).balanceOf(address(this));\n', '        require( msg.sender == owner );\n', '        require ( balance >= amount );\n', '        IToken(tokenAddr).transfer( _to, amount);\n', '    }\n', '    \n', '    function getBalance() public view returns (uint) {\n', '        return address(this).balance;\n', '    }\n', '    \n', '    receive() external payable {}\n', '\n', '}']