['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-15\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-28\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2019-08-01\n', '*/\n', '\n', 'pragma solidity >=0.4.25 <0.6.0;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error.\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Multiplies two unsigned integers, reverts on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, "SafeMath: division by zero");\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two unsigned integers, reverts on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '     * reverts when dividing by zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', 'contract owned {\n', '    address payable public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address payable newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface tokenRecipient {\n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external;\n', '}\n', '\n', 'contract Pausable is owned {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '\n', '    /**\n', '     * @dev modifier to allow actions only when the contract IS paused\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev modifier to allow actions only when the contract IS NOT paused\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause()  public onlyOwner whenNotPaused {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() public onlyOwner whenPaused {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', '\n', 'contract TokenERC20 is Pausable {\n', '    using SafeMath for uint256;\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint256 public totalSupply;\n', '    // total no of tokens for sale\n', '    uint256 public TokenForSale;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    constructor(\n', '        uint256 initialSupply,\n', '        string memory tokenName,\n', '        string memory tokenSymbol,\n', '        uint256 TokenSale\n', '    ) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n', '        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n', '        name = tokenName;                                   // Set the name for display purposes\n', '        symbol = tokenSymbol;                               // Set the symbol for display purposes\n', '        TokenForSale =  TokenSale * 10 ** uint256(decimals);\n', '\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != address(0));\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);\n', '        // Add the same to the recipient\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` in behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] =  allowance[_from][msg.sender].sub(_value);\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '    returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract Sale is owned, TokenERC20 {\n', '\n', '    // total token which is sold\n', '    uint256 public soldTokens;\n', '\n', '    modifier CheckSaleStatus() {\n', '        require (TokenForSale >= soldTokens);\n', '        _;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract Creit is TokenERC20, Sale {\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    uint256 public unitsOneEthCanBuy;\n', '    uint256 public minPurchaseQty;\n', '\n', '    mapping (address => bool) public airdrops;\n', '\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    constructor()\n', "    TokenERC20(18648000, 'Creit', 'CREIT', 266808) public {\n", '        unitsOneEthCanBuy = 282;\n', '        soldTokens = 0;\n', '    }\n', '\n', '    function changeOwnerWithTokens(address payable newOwner) onlyOwner public {\n', '        uint previousBalances = balanceOf[owner] + balanceOf[newOwner];\n', '        balanceOf[newOwner] += balanceOf[owner];\n', '        balanceOf[owner] = 0;\n', '        assert(balanceOf[owner] + balanceOf[newOwner] == previousBalances);\n', '        owner = newOwner;\n', '    }\n', '\n', '    function changePrice(uint256 _newAmount) onlyOwner public {\n', '        unitsOneEthCanBuy = _newAmount;\n', '    }\n', '\n', '    function startSale() onlyOwner public {\n', '        soldTokens = 0;\n', '    }\n', '\n', '    function increaseSaleLimit(uint256 TokenSale)  onlyOwner public {\n', '        TokenForSale = TokenSale * 10 ** uint256(decimals);\n', '    }\n', '\n', '    function increaseMinPurchaseQty(uint256 newQty) onlyOwner public {\n', '        minPurchaseQty = newQty * 10 ** uint256(decimals);\n', '    }\n', '    \n', '    function airDrop(address[] memory _recipient, uint _totalTokensToDistribute) onlyOwner public {\n', '        uint256 total_token_to_transfer = (_totalTokensToDistribute * 10 ** uint256(decimals)).mul(_recipient.length); \n', '        require(balanceOf[owner] >=  total_token_to_transfer);\n', '        for(uint256 i = 0; i< _recipient.length; i++)\n', '        {\n', '            if (!airdrops[_recipient[i]]) {\n', '              airdrops[_recipient[i]] = true;\n', '              _transfer(owner, _recipient[i], _totalTokensToDistribute * 10 ** uint256(decimals));\n', '            }\n', '        }\n', '    }\n', '    \n', '    function() external payable whenNotPaused CheckSaleStatus {\n', '        uint256 eth_amount = msg.value;\n', '        uint256 amount = eth_amount.mul(unitsOneEthCanBuy);\n', '        require(balanceOf[owner] >= amount );\n', '        _transfer(owner, msg.sender, amount);\n', '        soldTokens = soldTokens.add(amount);\n', '        //Transfer ether to fundsWallet\n', '        owner.transfer(msg.value);\n', '    }\n', '}']