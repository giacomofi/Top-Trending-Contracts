['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-25\n', '*/\n', '\n', 'pragma solidity >=0.4.21;\n', '\n', 'interface IERC20{\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    function burn(uint256 amount) external;\n', '}\n', '\n', 'contract DrepToken {\n', '\n', '    string public name = "DREP";\n', '    string public symbol = "DREP";\n', '    uint8 public decimals = 18;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    uint256 public totalSupply;\n', '    uint256 constant initialSupply = 100000000;\n', '    \n', '    bool public stopped = false;\n', '\n', '    address internal owner = address(0);\n', '    uint256 public deadline;\n', '    address internal oldDrepAddr = 0x22dE9912cd3D74953B1cd1F250B825133cC2C1b3;\n', '\n', '\n', '    modifier ownerOnly {\n', '        require(owner == msg.sender);\n', '        _;\n', '    }\n', '\n', '    modifier isRunning {\n', '        require(!stopped);\n', '        _;\n', '    }\n', '\n', '    modifier validAddress {\n', '        require(msg.sender != address(0));\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);\n', '        balanceOf[address(this)] = totalSupply;\n', '        deadline = 0;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) isRunning validAddress public returns (bool success) {\n', '        require(_to != address(0));\n', '        require(balanceOf[msg.sender] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) isRunning validAddress public returns (bool success) {\n', '        require(_to != address(0));\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        require(allowance[_from][msg.sender] >= _value);\n', '        allowance[_from][msg.sender] -= _value;\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) isRunning validAddress public returns (bool success) {\n', '        require(_value == 0 || allowance[msg.sender][_spender] == 0);\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function stop() ownerOnly public {\n', '        stopped = true;\n', '    }\n', '\n', '    function start() ownerOnly public {\n', '        stopped = false;\n', '    }\n', '\n', '    function burn(uint256 _value) isRunning validAddress public {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        require(totalSupply >= _value);\n', '        balanceOf[msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '    }\n', '\n', '    function upgrade() public {\n', '        require(block.number <= deadline, "upgrade finished");\n', '        uint256 balance = IERC20(oldDrepAddr).balanceOf(msg.sender);\n', '        if(balance > 0){\n', '            IERC20(oldDrepAddr).transferFrom(msg.sender, address(this), balance);\n', '            IERC20(oldDrepAddr).burn(balance);\n', '            uint256 value = balance / 100;\n', '            IERC20(address(this)).transfer(msg.sender, value);\n', '            emit Upgrade(msg.sender, value);\n', '        }\n', '    }\n', '\n', '    function setDeadline(uint256 _deadline) ownerOnly public {\n', '        deadline = _deadline;\n', '    }\n', '\n', '    function withdraw() ownerOnly public {\n', '        require(block.number > deadline, "time too early");\n', '        uint256 balance = balanceOf[address(this)];\n', '        IERC20(address(this)).transfer(owner, balance);\n', '        emit Withdraw(owner, balance);\n', '    }\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Upgrade(address indexed _from, uint256 _value);\n', '    event Withdraw(address indexed _to, uint256 _value);\n', '}']