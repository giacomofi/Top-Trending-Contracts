['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-16\n', '*/\n', '\n', '// File: contracts/IERC20.sol\n', '\n', 'pragma solidity  >=0.5.0 <0.7.0;\n', 'interface IERC20 {\n', '\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function decimals() external view returns (uint8);\n', '\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    function burn(uint256 _value) external returns (bool success);\n', '    function burnFrom(address _from, uint256 _value) external returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Burn(address indexed from, uint256 value); \n', '}\n', '\n', '// File: contracts/SafeMath.sol\n', '\n', 'pragma solidity  >=0.5.0 <0.7.0;\n', 'library SafeMath {\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '\n', '  /**\n', '   * @dev gives square root of given x.\n', '   */\n', '  function sqrt(uint256 x)\n', '  internal\n', '  pure\n', '  returns(uint256 y) {\n', '    uint256 z = ((add(x, 1)) / 2);\n', '    y = x;\n', '    while (z < y) {\n', '      y = z;\n', '      z = ((add((x / z), z)) / 2);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev gives square. multiplies x by x\n', '   */\n', '  function sq(uint256 x)\n', '  internal\n', '  pure\n', '  returns(uint256) {\n', '    return (mul(x, x));\n', '  }\n', '\n', '  /**\n', '   * @dev x to the power of y\n', '   */\n', '  function pwr(uint256 x, uint256 y)\n', '  internal\n', '  pure\n', '  returns(uint256) {\n', '    if (x == 0)\n', '      return (0);\n', '    else if (y == 0)\n', '      return (1);\n', '    else {\n', '      uint256 z = x;\n', '      for (uint256 i = 1; i < y; i++)\n', '        z = mul(z, x);\n', '      return (z);\n', '    }\n', '  }\n', '}\n', '\n', '// File: contracts/owned.sol\n', '\n', 'pragma solidity ^0.5.10;\n', 'contract owned {\n', '    address public owner;\n', ' \n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', ' \n', '    modifier onlyOwner {\n', '        require (msg.sender == owner);\n', '        _;\n', '    }\n', ' \n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        if (newOwner != address(0)) {\n', '        owner = newOwner;\n', '      }\n', '    }\n', '}\n', '\n', '// File: contracts/ECOPLocker.sol\n', '\n', 'pragma solidity ^0.5.10;\n', '\n', '\n', '\n', '\n', 'contract ECOPLocker is owned{\n', '    using SafeMath for uint256;\n', '\n', '    uint256[] public MONTH_TIER = [10435,8405,8405,8405,291,291,291,291,291,291,291,291,291];\n', '    uint256 constant public TOTAL_AMOUNT = 38269*10**18;\n', '\n', '    event CoinWithdrawn(address indexed addr, uint256 amount);\n', '\n', '    address payable user_addr;\n', '\n', '    IERC20 ecop;\n', '\n', '    uint256 public withdraw_tokens;\n', '\n', '    uint40 public online_time;\n', '\n', '    constructor(address payable ecopContractAddress, address payable userAddress) public {\n', '\n', '    \tecop = IERC20(ecopContractAddress);\n', '\n', '\tuser_addr = userAddress;\n', '\n', '\twithdraw_tokens = 0;\n', '\n', '\t//init online time for 1 year later\n', '        online_time = uint40(block.timestamp+365*86400);\n', '    }\n', '\n', '    function setOnlineTime(uint40 ts) onlyOwner public {\n', '\n', '\tonline_time = ts;\n', '    }\n', '\n', '    function withdraw() public {\n', '\n', '\trequire(msg.sender == user_addr, "only authorized user.");\n', '\n', '\tuint256 amount = this.getAvailableAmount();\n', '\t\n', '        require(amount > 0, "No available coins.");\n', '\n', '\tuint256 ecop_balance = ecop.balanceOf(address(this));\n', '\n', '        require(ecop_balance >= amount, "No ECOP left for withdrawing");\n', '\n', '\tecop.transfer(msg.sender, amount);\n', '\n', '\twithdraw_tokens = withdraw_tokens.add(amount);\n', '\n', '\temit CoinWithdrawn(msg.sender, amount);\n', '    }\n', '\n', '    /*\n', '        Only external call\n', '    */\n', '    function getAvailableAmount() view external returns(uint256) {\n', '\tuint256 ts = block.timestamp;\n', '\tif(ts < online_time)\n', '\t\treturn 0;\n', '\tuint256 time_span = ts - online_time;\n', '\tuint256 index = time_span.div(30*86400);\n', '\tuint256 amount = 0;\n', '\tfor(uint256 i=0; i <= index; i++)\n', '\t{\n', '\t\tamount = amount.add(MONTH_TIER[i].mul(10**18));\n', '\t}\n', '\tif(amount > TOTAL_AMOUNT)\n', '\t\tamount = TOTAL_AMOUNT;\n', '\tif(amount < withdraw_tokens)\n', '\t\tamount = 0;\n', '\telse\n', '\t\tamount = amount.sub(withdraw_tokens);\n', '\treturn amount;\n', '    }\n', '\n', '    function getContractInfo() view external returns(uint256 _total_amount, uint256 _withdraw_tokens,  uint256 _available_tokens, uint40 _online_time, address _user_addr) {\n', '    \t_total_amount = TOTAL_AMOUNT;\n', '\t_withdraw_tokens = withdraw_tokens;\n', '\t_available_tokens = this.getAvailableAmount();\n', '\t_online_time = online_time;\n', '\t_user_addr = user_addr;\n', '    }\n', '}']