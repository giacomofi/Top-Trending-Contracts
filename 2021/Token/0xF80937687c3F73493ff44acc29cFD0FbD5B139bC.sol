['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-24\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2020-09-11\n', '*/\n', '\n', 'pragma solidity ^0.5.17;\n', '////////////////////////////////////////////////////////////////////////////////\n', 'contract    Token\n', '{\n', '    //----- VARIABLES\n', '\n', '    address public              owner;          // Owner of this contract\n', '    address public              admin;          // The one who is allowed to do changes\n', '\n', '    mapping(address => uint256)                         balances;       // Maintain balance in a mapping\n', '    mapping(address => mapping (address => uint256))    allowances;     // Allowances index-1 = Owner account   index-2 = spender account\n', '\n', '    //------ TOKEN SPECIFICATION\n', '\n', '    string  public  constant    name       = "QAI Token";\n', '    string  public  constant    symbol     = "QAI";\n', '    uint256 public  constant    decimals   = 18;      // Handle the coin as FIAT (2 decimals). ETH Handles 18 decimal places\n', '\n', '    uint256 public              totalSupply = 10000000000 * 10**decimals;        // 10 Billions (18 decimals) then reduced to 800 Millions by burning the difference. so Real initial TotalSupply is 800 Millions\n', '\n', '    //---------------------------------------------------- smartcontract control\n', '\n', '    uint256 public              icoDeadLine = 0;     // 2000-01-01 00:00 (GMT+0)\n', '\n', '    //--------------------------------------------------------------------------\n', '\n', '    modifier duringIcoOnlyTheOwner()  // if not during the ico : everyone is allowed at anytime\n', '    {\n', '        require( now>icoDeadLine || msg.sender==owner );\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwner()            { require(msg.sender==owner);           _; }\n', '    modifier onlyAdmin()            { require(msg.sender==admin);           _; }\n', '\n', '    //----- EVENTS\n', '\n', '    event Transfer(address indexed fromAddr, address indexed toAddr,   uint256 amount);\n', '    event Approval(address indexed _owner,   address indexed _spender, uint256 amount);\n', '\n', '            //---- extra EVENTS\n', '\n', '    event onAdminUserChanged(   address oldAdmin,  address newAdmin);\n', '    event onOwnershipTransfered(address oldOwner,  address newOwner);\n', '    event onAdminUserChange(    address oldAdmin,  address newAdmin);\n', '\n', '    event onIcoDeadlineChanged( uint256 previousDeadline,  uint256 newDeadline);\n', '\n', '    //--------------------------------------------------------------------------\n', '    //--------------------------------------------------------------------------\n', '    constructor()   public\n', '    {\n', '        owner = msg.sender;\n', '        admin = owner;\n', '\n', '        balances[owner] = totalSupply;\n', '    }\n', '    //--------------------------------------------------------------------------\n', '    //--------------------------------------------------------------------------\n', '    //----- ERC20 FUNCTIONS\n', '    //--------------------------------------------------------------------------\n', '    //--------------------------------------------------------------------------\n', '    function balanceOf(address walletAddress) public view returns (uint256 balance)\n', '    {\n', '        return balances[walletAddress];\n', '    }\n', '    //--------------------------------------------------------------------------\n', "    function transfer(address toAddr, uint256 amountInWei)  public   duringIcoOnlyTheOwner   returns (bool)     // don't icoNotPaused here. It's a logic issue.\n", '    {\n', '        require(toAddr!=address(0x0) && toAddr!=msg.sender && amountInWei>0);     // Prevent transfer to 0x0 address and to self, amount must be >0\n', '\n', '        uint256 balanceFrom = balances[msg.sender] - amountInWei;\n', '        uint256 balanceTo   = balances[toAddr]     + amountInWei;\n', '       \n', '        assert(balanceFrom <= balances[msg.sender]);\n', '        assert(balanceTo   >= balances[toAddr]);\n', '       \n', '        balances[msg.sender] = balanceFrom;\n', '        balances[toAddr]     = balanceTo;\n', '\n', '        emit Transfer(msg.sender, toAddr, amountInWei);\n', '\n', '        return true;\n', '    }\n', '    //--------------------------------------------------------------------------\n', '    function    allowance(address walletAddress, address spender) public view returns (uint remaining)\n', '    {\n', '        return allowances[walletAddress][spender];\n', '    }\n', '    //--------------------------------------------------------------------------\n', '    function    transferFrom(address fromAddr, address toAddr, uint256 amountInWei)  public  returns (bool)\n', '    {\n', '        require(amountInWei!=0                                   &&\n', '                balances[fromAddr]               >= amountInWei  &&\n', '                allowances[fromAddr][msg.sender] >= amountInWei);\n', '       \n', '        uint256 balanceFrom  = balances[fromAddr]               - amountInWei;\n', '        uint256 balanceTo    = balances[toAddr]                 + amountInWei;\n', '        uint256 newAllowance = allowances[fromAddr][msg.sender] - amountInWei;\n', '\n', '        assert(balanceFrom  <= balances[fromAddr]);\n', '        assert(balanceTo    >= balances[toAddr]);\n', '        assert(newAllowance <= allowances[fromAddr][msg.sender]);\n', '\n', '        balances[fromAddr]               = balanceFrom;\n', '        balances[toAddr]                 = balanceTo;\n', '        allowances[fromAddr][msg.sender] = newAllowance;\n', '\n', '        emit Transfer(fromAddr, toAddr, amountInWei);\n', '        return true;\n', '    }\n', '    //--------------------------------------------------------------------------\n', '    function    approve(address spender, uint256 amountInWei) public returns (bool)\n', '    {\n', '        require((amountInWei == 0) || (allowances[msg.sender][spender] == 0));\n', '       \n', '        allowances[msg.sender][spender] = amountInWei;\n', '        emit Approval(msg.sender, spender, amountInWei);\n', '\n', '        return true;\n', '    }\n', '    //--------------------------------------------------------------------------\n', '    function()   external                 \n', '    {\n', "        assert(true == false);      // If Ether is sent to this address, don't handle it -> send it back.\n", '    }\n', '    //--------------------------------------------------------------------------\n', '    //--------------------------------------------------------------------------\n', '    //--------------------------------------------------------------------------\n', '    function    transferOwnership(address newOwner) public onlyOwner               // @param newOwner The address to transfer ownership to.\n', '    {\n', '        require(newOwner != address(0x0));\n', '\n', '        emit onOwnershipTransfered(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '    //--------------------------------------------------------------------------\n', '    //--------------------------------------------------------------------------\n', '    //--------------------------------------------------------------------------\n', '    //--------------------------------------------------------------------------\n', '    function    changeAdminUser(address newAdminAddress) public onlyOwner\n', '    {\n', '        require(newAdminAddress!=address(0x0));\n', '\n', '        emit onAdminUserChange(admin, newAdminAddress);\n', '        admin = newAdminAddress;\n', '    }\n', '    //--------------------------------------------------------------------------\n', '    //--------------------------------------------------------------------------\n', '    function    changeIcoDeadLine(uint256 newIcoDeadline) public onlyAdmin\n', '    {\n', '        require(newIcoDeadline!=0);\n', '\n', '        emit onIcoDeadlineChanged(icoDeadLine, newIcoDeadline);\n', '        icoDeadLine = newIcoDeadline;\n', '    }\n', '    //--------------------------------------------------------------------------\n', '    //--------------------------------------------------------------------------\n', '    //--------------------------------------------------------------------------\n', '    function destroySomeTokens(uint256 amountToBurnInWei) public onlyAdmin  returns(uint)\n', '    {\n', '        require(msg.sender==owner && balances[owner]>=amountToBurnInWei);\n', '\n', '        address   toAddr = 0x0000000000000000000000000000000000000000;\n', '\n', '        balances[owner]  = balances[owner]  - amountToBurnInWei;\n', '        balances[toAddr] = balances[toAddr] + amountToBurnInWei;      // send to 0x00\n', '\n', '        emit Transfer(msg.sender, toAddr, amountToBurnInWei);\n', '\n', '        totalSupply = totalSupply - amountToBurnInWei;\n', '\n', '        return 1;\n', '    }\n', '    //--------------------------------------------------------------------------\n', '    function addSomeTokens(uint256 amountToAddInWei) public onlyAdmin  returns(uint)\n', '    {\n', '        require(msg.sender==owner);\n', '\n', '        uint256     newOwnerBalance = balances[owner] + amountToAddInWei;\n', '        uint256     newTotalSupply  = totalSupply     + amountToAddInWei;\n', '\n', '        assert(newOwnerBalance >= totalSupply);\n', '        assert(newTotalSupply  >= totalSupply);\n', '\n', '        balances[owner] = balances[owner] + amountToAddInWei;\n', '\n', '        emit Transfer(msg.sender, owner, amountToAddInWei);\n', '\n', '        totalSupply = totalSupply + amountToAddInWei;\n', '\n', '        return 1;\n', '    }\n', '    //--------------------------------------------------------------------------\n', '    //--------------------------------------------------------------------------\n', '    //--------------------------------------------------------------------------\n', '}']