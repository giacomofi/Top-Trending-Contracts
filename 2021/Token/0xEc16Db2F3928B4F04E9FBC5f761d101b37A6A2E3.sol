['// SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity ^0.8.2;\n', '\n', 'import "./IERC20.sol";\n', '\n', 'import "./Ownable.sol";\n', 'import "./ERC223_receiving_contract.sol";\n', '\n', '\n', '/// @title ERCXToken - Extended ERC20 Token\n', '/// @custom:version 1.0.1\n', 'contract ERCXToken is IERC20, Ownable {\n', '    mapping (address => uint256) private _balances;\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '    uint256 private _totalSupply;\n', '    string private _name;\n', '    string private _symbol;\n', '\n', '    uint8 private _decimals;\n', '    uint256 private _maxSupply;\n', '\n', '    /**\n', '     * ERC223 interface extension with additional data argument\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\n', '\n', '    constructor (\n', '        string memory tokenName,\n', '        string memory tokenSymbol,\n', '        uint8 tokenDecimals,\n', '        uint256 tokenTotalSupply,\n', '        uint256 tokenMaxSupply,\n', '        address superOwner,\n', '        address owner,\n', '        address api\n', '    )\n', '    Ownable(superOwner, owner, api)\n', '     {\n', '        _name = tokenName;\n', '        _symbol = tokenSymbol;\n', '        _decimals = tokenDecimals;\n', '        _totalSupply = tokenTotalSupply;\n', '\t    _maxSupply = tokenMaxSupply;\n', '        _balances[superOwner] = _totalSupply;\n', '        emit Transfer(address(0), superOwner, _totalSupply);\n', '\n', '        bytes memory empty;\n', '        emit Transfer(address(0), superOwner, _totalSupply, empty);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n', '     * overridden;\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function maxSupply() public view returns (uint256) {\n', '        return _maxSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(msg.sender, recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token for a specified address (ERC223)\n', '    * @param to The address to transfer to.\n', '    * @param value The amount to be transferred.\n', '    * @param data Transaction metadata.\n', '    */\n', '    function transfer(address to, uint256 value, bytes memory data) public returns (bool) {\n', '        _transfer223(msg.sender, to, value, data);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token for a specified addresses (ERC223)\n', '    * @param from The address to transfer from.\n', '    * @param to The address to transfer to.\n', '    * @param value The amount to be transferred.\n', '    * @param data Transaction metadata to be forwarded to the receiving smart contract.\n', '    */\n', '    function _transfer223(address from, address to, uint256 value, bytes memory data) internal {\n', '        require(value <= _balances[from], "Value must not be higher than sender\'s balance.");\n', '        require(to != address(0), "Receiver address must be set.");\n', '\n', '        uint256 codeLength;\n', '        assembly {\n', '            codeLength := extcodesize(to)\n', '        }\n', '\n', '        _balances[from] = _balances[from] - value;\n', '        _balances[to] = _balances[to] + value;\n', '\n', '        if(codeLength > 0) { // receiver is a contract address\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(to);\n', '            receiver.tokenFallback(msg.sender, value, data);\n', '        }\n', '\n', '        emit Transfer(from, to, value);\n', '        emit Transfer(from, to, value, data);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public override returns (bool) {\n', '        _approve(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '\n', '        uint256 currentAllowance = _allowances[sender][msg.sender];\n', '        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");\n', '        _approve(sender, msg.sender, currentAllowance - amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        uint256 currentAllowance = _allowances[msg.sender][spender];\n', '        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");\n', '        _approve(msg.sender, spender, currentAllowance - subtractedValue);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        uint256 senderBalance = _balances[sender];\n', '        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");\n', '\n', '        uint256 codeLength;\n', '        bytes memory empty;\n', '        assembly {\n', '             codeLength := extcodesize(recipient)\n', '        }\n', '\n', '        _balances[sender] = senderBalance - amount;\n', '        _balances[recipient] += amount;\n', '\n', '        if (codeLength > 0) { // odbiorca jest kontraktem, nie walletem\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(recipient);\n', '            receiver.tokenFallback(msg.sender, amount, empty);\n', '        }\n', '\n', '        emit Transfer(sender, recipient, amount);\n', '        emit Transfer(sender, recipient, amount, empty);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '        require(totalSupply() + amount <= maxSupply(), "Maximum token supply exceeded");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply += amount;\n', '        _balances[account] += amount;\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        uint256 accountBalance = _balances[account];\n', '        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");\n', '        _balances[account] = accountBalance - amount;\n', '        _totalSupply -= amount;\n', '\n', '        emit Transfer(account, address(0), amount);\n', '\n', '        bytes memory empty;\n', '        emit Transfer(account, address(0), amount, empty);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal { }\n', '\n', '    /**\n', '    * @dev Function to mint tokens\n', '    * @param to The address that will receive the minted tokens.\n', '    * @param value The amount of tokens to mint.\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function mint(address to, uint256 value) public onlySuperOwnerOrOwnerOrApiOrContract returns (bool)\n', '    {\n', '        _mint(to, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Burns a specific amount of tokens.\n', '    * @param value The amount of token to be burned.\n', '    */\n', '    function burn(uint256 value) public onlySuperOwnerOrOwnerOrApiOrContract {\n', '        _burn(msg.sender, value);\n', '    }\n', '\n', '   /**\n', '    * @dev Internal function that burns an amount of the token of a given\n', "    * account, deducting from the sender's allowance for said account. Uses the\n", '    * internal burn function.\n', '    * @param account The account whose tokens will be burnt.\n', '    * @param value The amount that will be burnt.\n', '    */\n', '    function _burnFrom(address account, uint256 value) internal {\n', '        require(value <= _allowances[account][msg.sender], "Amount must not be higher than allowed balance.");\n', '        // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n', '        // this function needs to emit an event with the updated approval.\n', '        _allowances[account][msg.sender] = _allowances[account][msg.sender] - value;\n', '        _burn(account, value);\n', '    }\n', '\n', '    /**\n', '    * @dev Burns a specific amount of tokens from the target address and decrements allowance\n', '    * @param from address The address which you want to send tokens from\n', '    * @param value uint256 The amount of token to be burned\n', '    */\n', '    function burnFrom(address from, uint256 value) public onlySuperOwnerOrOwnerOrApiOrContract {\n', '        _burnFrom(from, value);\n', '    }\n', '\n', '}']