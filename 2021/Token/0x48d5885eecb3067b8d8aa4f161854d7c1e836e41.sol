['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-16\n', '*/\n', '\n', '/**                  ____ \n', "                  .'* *.'\n", '               __/_*_*(_\n', '              / _______ \\\n', '             _\\_)/___\\(_/_ \n', '            / _((\\- -/))_ \\\n', '            \\ \\())(-)(()/ /\n', "             ' \\(((()))/ '\n", "            / ' \\)).))/ ' \\\n", '           / _ \\ - | - /_  \\\n', "          (   ( .;''';. .'  )\n", '          _\\"__ /    )\\ __"/_\n', "            \\/  \\   ' /  \\/\n", "             .'  '...' ' )\n", '              / /  |  \\ \\\n', '             / .   .   . \\\n', '            /   .     .   \\\n', '           /   /   |   \\   \\\n', "         .'   /    b    '.  '.\n", "     _.-'    /     Bb     '-. '-._ \n", " _.-'       |      BBb       '-.  '-. \n", '(___________\\____.dBBBb.________)____)\n', '\n', '╔╦╗┌─┐┌─┐┬┌─┐  ╔╗ ┌─┐┬  ┌─┐┌┐┌┌─┐┌─┐┬─┐\n', '║║║├─┤│ ┬││    ╠╩╗├─┤│  ├─┤││││  ├┤ ├┬┘\n', '╩ ╩┴ ┴└─┘┴└─┘  ╚═╝┴ ┴┴─┘┴ ┴┘└┘└─┘└─┘┴└─\n', '     \n', '     https://magicbalancer.org/\n', '*/\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity =0.6.11;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface ERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// Allows anyone to claim a token if they exist in a merkle root.\n', 'interface IMerkleDistributor {\n', '    // Returns the address of the token distributed by this contract.\n', '    function token() external view returns (address);\n', '    // Returns true if the index has been marked claimed.\n', '    function isClaimed(uint256 index) external view returns (bool);\n', '    // Claim the given amount of the token to the given address. Reverts if the inputs are invalid.\n', '    function claim(uint256 index, address account) external;\n', '    // This event is triggered whenever a call to #claim succeeds.\n', '    event Claimed(uint256 index, address account);\n', '}\n', '\n', 'contract MagicDistributor is IMerkleDistributor {\n', '    address public immutable override token;\n', '\n', '\n', '    // This is a packed array of booleans.\n', '    mapping(uint256 => uint256) private claimedBitMap;\n', '\n', '    constructor(address token_) public {\n', '        token = token_;\n', '        \n', '    }\n', '\n', '    function isClaimed(uint256 index) public view override returns (bool) {\n', '        uint256 claimedWordIndex = index / 256;\n', '        uint256 claimedBitIndex = index % 256;\n', '        uint256 claimedWord = claimedBitMap[claimedWordIndex];\n', '        uint256 mask = (1 << claimedBitIndex);\n', '        return claimedWord & mask == mask;\n', '    }\n', '\n', '    function _setClaimed(uint256 index) private {\n', '        uint256 claimedWordIndex = index / 256;\n', '        uint256 claimedBitIndex = index % 256;\n', '        claimedBitMap[claimedWordIndex] = claimedBitMap[claimedWordIndex] | (1 << claimedBitIndex);\n', '    }\n', '\n', '    function claim(uint256 index, address account) external override {\n', '        uint256 amount = 5e16;\n', "        require(!isClaimed(index), 'MagicDistributor: Drop already claimed.');\n", '\n', '\n', '        // Mark it claimed and send the token.\n', '        _setClaimed(index);\n', "        require(ERC20(token).transfer(account, amount), 'MagicDistributor: Transfer failed.');\n", '\n', '        emit Claimed(index, account);\n', '    }\n', '}']