['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-03\n', '*/\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', 'contract Presale {\n', '\n', '    IERC20 public MFI;\n', "    // these aren't ether, we're just using this for unit conversion\n", '    uint public constant presaleSupply = 4_000_000 ether;\n', '    // how much the presale has already issued\n', '    uint public presaleIssued = 0;\n', '    address public treasury;\n', '    address constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n', '    address constant uniRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n', '    address constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '\n', '    uint public startDate;\n', '    uint public lastVestedQuarter;\n', '    // 1_500_000 / 8\n', '    uint public constant vestingQuarterly = 187_500 ether;\n', '\n', '    // check for reentrancy\n', '    bool disbursing;\n', '\n', '    // initial best-guess ETH price\n', '    uint constant initialDollarsPerETH = 1400;\n', '    // updatable ETH price\n', '    uint public dollarsPerETH = initialDollarsPerETH;\n', '    uint public constant tokensPerDollar = 4;\n', '\n', '    uint public constant maxPerWallet = 10 ether * initialDollarsPerETH * tokensPerDollar;\n', '\n', '    constructor(IERC20 tokenContract, uint _startDate, address _treasury) public {\n', '        MFI = tokenContract;\n', '        treasury = _treasury;\n', '        startDate = _startDate;\n', '    }\n', '\n', '    receive() external payable {\n', '        // rule out reentrancy\n', '        require(!disbursing, "No re-entrancy");\n', '        disbursing = true;\n', '\n', '        // check time constraints\n', '        // after start date\n', '        require(block.timestamp >= startDate, "Presale hasn\'t started yet");\n', '        uint endDate = startDate + 2 days;\n', '        // before end date\n', '        require(endDate >= block.timestamp, "Presale is over");\n', '\n', '        // calculate price\n', '        // no overflow because scarcity\n', '        uint tokensPerETH = dollarsPerETH * tokensPerDollar;\n', '        // no overflow, again because scarcity\n', '        uint tokensRequested = msg.value * tokensPerETH;\n', '\n', '        // calculate how much the sender actually gets\n', '        uint tokensToTransfer = min(tokensRequested, // price\n', "                                    sub(presaleSupply, presaleIssued), // don't exceed supply\n", "                                    sub(maxPerWallet, MFI.balanceOf(msg.sender))); // don't exceed wallet max\n", '\n', '        // any eth that needs to go back\n', '        uint ethReturn = sub(tokensRequested, tokensToTransfer) / tokensPerETH;\n', '        if (ethReturn > 0) {\n', '            // send it back\n', '            payable(msg.sender).transfer(ethReturn);\n', '        }\n', '\n', '        // send eth to treasury and tokens to buyer\n', '        payable(treasury).transfer(sub(msg.value, ethReturn));\n', '        MFI.transferFrom(treasury, msg.sender, tokensToTransfer);\n', '        disbursing = false;\n', '    }\n', '\n', '    // can be called by anyone to update the current price\n', '    function setDollarsPerETH() external {\n', '        address[] memory path = new address[](2);\n', '        path[0] = WETH;\n', '        path[1] = USDC;\n', '        dollarsPerETH = UniRouter(uniRouter).getAmountsOut(1 ether, path)[1] / 1 ether;\n', '    }\n', '\n', '    function min(uint a, uint b, uint c) internal pure returns (uint result) {\n', '        // if a is smallest\n', '        result = a;\n', '        // if be is smaller\n', '        if (result > b) {\n', '            result = b;\n', '        }\n', '        // if c is even smaller\n', '        if (result > c) {\n', '            result = c;\n', '        }\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "Subtraction underflow");\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    // send vested tokens back to treasury\n', '    function withdrawVested() external {\n', '        uint timeDiff = block.timestamp - startDate;\n', '        uint quarter = timeDiff / (90 days);\n', '        if (quarter > lastVestedQuarter) {\n', '            MFI.transfer(treasury, vestingQuarterly);\n', '            lastVestedQuarter = quarter;\n', '        }\n', '    }\n', '}\n', '\n', 'interface UniRouter {\n', '    function getAmountsOut(uint amountIn, address[] calldata path)\n', '        external view returns (uint[] memory amounts);\n', '}']