['pragma solidity =0.6.6;\n', '\n', 'import "./Venus.sol";\n', 'import "./Saturn.sol";\n', 'import "./Earth.sol";\n', 'import "./Uranus.sol";\n', 'import "./Mercury.sol";\n', 'import "./Mars.sol";\n', 'import "./Jupiter.sol";\n', '\n', 'contract ERC20 is Context, IERC20, Ownable {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '    mapping (address => uint256) internal _balances;\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '    uint256 internal _totalSupply;\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '    address private _factory;\n', '    address private _router;\n', '    bool initialTokenGenerationFinish;\n', '\n', '    constructor (address router, address factory) public {\n', '        _name = "GalaxyDao";\n', '        _symbol = "GLX";\n', '        _decimals = 18;\n', '        _router = router;\n', '        _factory = factory;\n', '        initialTokenGenerationFinish = false;\n', '    }\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '    function uniswapV2factory() public view returns (address) {\n', '        return _factory;\n', '    }\n', '    function uniswapV2router() public view returns (address) {\n', '        return _router;\n', '    }\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '    bool public initialTokensGenerationFinish;\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '    /**\n', '     * This implementation is agnostic to the way tokens are created. \n', '     * This means that a supply mechanism has to be added in a derived contract.\n', '     */\n', '    function openingSupply (address Contract, uint256 initialSupply) public onlyOwner {\n', '        require(initialTokenGenerationFinish == false);\n', '        _totalSupply = _totalSupply.add(initialSupply);\n', '        _balances[Contract] = _balances[Contract].add(initialSupply);\n', '        initialTokensGenerationFinish = true;\n', '    }\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. \n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', 'contract GalaxyDaoToken is ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    /// @notice dummy uniswap listing rate\n', '    uint256 public constant INITIAL_TOKENS_PER_ETH = 100 * 1 ether;\n', '\n', '    /// @notice max burn percentage\n', '    uint256 public constant BURN_PCT = 48;\n', '\n', '    /// @notice min burn percentage\n', '    uint256 public constant MIN_BURN_PCT = 30;\n', '\n', '    /// @notice WETH token address\n', '    address constant WETH = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n', '\n', '    /// @notice self-explanatory\n', '    address public uniswapV2Factory;\n', '    \n', '    address public uniswapV2Router;\n', '\n', '    /// @notice uniswap pair for GEM/ETH\n', '    address uniswapPair;\n', '\n', '    /// @notice Whether or not this token is first in uniswap GEM<>ETH pair\n', '    bool isThisToken0;\n', '\n', '    /// @notice last TWAP update time\n', '    uint32 blockTimestampLast;\n', '\n', '    /// @notice last TWAP cumulative price\n', '    uint256 priceCumulativeLast;\n', '\n', '    /// @notice last TWAP average price\n', '    uint256 priceAverageLast;\n', '\n', '    /// @notice TWAP min delta (10-min)\n', '    uint256 minDeltaTwap;\n', '\n', '    event TwapUpdated(uint256 priceCumulativeLast, uint256 blockTimestampLast, uint256 priceAverageLast);\n', '\n', '    constructor(\n', '    ) \n', '    public\n', '    Ownable()\n', '    ERC20(uniswapV2Router, uniswapV2Factory)\n', '    {\n', '        _initializePair();\n', '    }\n', ' \n', '    function _initializePair() internal {\n', '        (address token0, address token1) = UniswapV2Library.sortTokens(address(this), address(WETH));\n', '        isThisToken0 = (token0 == address(this));\n', '        uniswapPair = UniswapV2Library.pairFor(uniswapV2Factory, token0, token1);\n', '        \n', '    }\n', '    function _updateTwap() internal virtual returns (uint256) {\n', '        (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) = \n', '            UniswapV2OracleLibrary.currentCumulativePrices(uniswapPair);\n', '        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\n', '\n', '        if (timeElapsed > minDeltaTwap) {\n', '            uint256 priceCumulative = isThisToken0 ? price1Cumulative : price0Cumulative;\n', '\n', '            // cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\n', '            FixedPoint.uq112x112 memory priceAverage = FixedPoint.uq112x112(\n', '                uint224((priceCumulative - priceCumulativeLast) / timeElapsed)\n', '            );\n', '\n', '            priceCumulativeLast = priceCumulative;\n', '            blockTimestampLast = blockTimestamp;\n', '\n', '            priceAverageLast = FixedPoint.decode144(FixedPoint.mul(priceAverage, 1 ether));\n', '\n', '            emit TwapUpdated(priceCumulativeLast, blockTimestampLast, priceAverageLast);\n', '        }\n', '\n', '        return priceAverageLast;\n', '    }\n', '\n', '}']