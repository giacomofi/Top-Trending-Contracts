['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-18\n', '*/\n', '\n', '//SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity ^0.7.6;\n', '\n', 'library SafeMath {\n', '  \n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, errorMessage);\n', '\n', '        return c;\n', '    }\n', ' \n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction underflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '       \n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '   \n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, errorMessage);\n', '\n', '        return c;\n', '    }\n', '  \n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '    \n', '        return c;\n', '    }\n', '  \n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', ' \n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function balanceOf(address) external view returns (uint256);\n', '    function mint(address, uint256) external;\n', '    function burn(uint256) external;\n', '    function transfer(address, uint256) external returns (bool);\n', '    function approve(address, uint256) external returns (bool);\n', '    function transferFrom(address, address, uint256) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract DappToken is IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private balances;\n', '    mapping (address => mapping (address => uint256)) private allowances;\n', '\n', '    uint256 public totalSupply;\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    \n', '    address public ownerAddress;\n', '    address public bridgeContractAddress;\n', '\n', '    modifier onlyBridge {\n', '        require(msg.sender == bridgeContractAddress, "Can be called only by bridge Contract");   \n', '        _;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == ownerAddress, "Can be called only by owner");   \n', '        _;\n', '    }\n', '\n', '    constructor(string memory _name, string memory _symbol, address _bridgeContractAddress, address _owner) {\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = 4;\n', '        ownerAddress = _owner;\n', '        bridgeContractAddress = _bridgeContractAddress;\n', '    }\n', '\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return balances[account];\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(msg.sender, recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view virtual returns (uint256) {\n', '        return allowances[owner][spender];\n', '    }\n', '   \n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, msg.sender, allowances[sender][msg.sender].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        balances[sender] = balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        balances[recipient] = balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    function mint(address account, uint256 amount) public override onlyBridge() {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        totalSupply = totalSupply.add(amount);\n', '        balances[account] = balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    function burn(uint256 amount) public override {\n', '        balances[msg.sender] = balances[msg.sender].sub(amount, "ERC20: burn amount exceeds balance");\n', '        totalSupply = totalSupply.sub(amount);\n', '        emit Transfer(msg.sender, address(0), amount);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function updateBridgeContractAddress(address _bridgeContractAddress) public onlyOwner() {\n', '        require(_bridgeContractAddress != address(0), "Bridge address is zero address");\n', '        bridgeContractAddress = _bridgeContractAddress;\n', '    }\n', '    function transferOwnership(address _newOwner) public onlyOwner() {\n', '        require(_newOwner != address(0), "Owner address is zero address");\n', '        ownerAddress = _newOwner;\n', '    }\n', '\n', '}']