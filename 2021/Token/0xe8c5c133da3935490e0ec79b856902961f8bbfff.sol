['pragma solidity ^0.4.24;\n', '\n', "import './IERC20.sol';\n", '\n', 'contract ETToken is IERC20 {\n', '    \n', '    \n', '    uint public constant _totalSupply = 12000000000000000000000000;\n', '    string public constant name = "KNT";\n', '    uint8 public constant decimals = 18; \n', '    string public constant symbol = "KNT";\n', '\n', '    \n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    \n', '    function ETToken()  {\n', '        balances[msg.sender] = _totalSupply; \n', '    }\n', '        \n', '     function totalSupply() constant returns (uint256 totalSupply){\n', '     return _totalSupply;\n', '  }\n', '    \n', '    function balanceOf(address _owner) constant returns (uint256 balance){\n', '        return balances[_owner];\n', '        \n', '    }\n', '\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '\n', '        require(balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n', '        require(_to != 0x0);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns \n', '    (bool success) {\n', '        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value; \n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success)   \n', '    { \n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '}']