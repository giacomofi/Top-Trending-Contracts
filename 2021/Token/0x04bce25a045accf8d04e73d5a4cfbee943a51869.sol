['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-02\n', '*/\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'contract Owned {\n', '    //address payable private Owner;\n', '    address payable internal Owner;\n', '    constructor() public{\n', '        Owner = msg.sender;\n', '    }\n', '\n', '    function IsOwner(address addr) view public returns(bool)\n', '    {\n', '        return Owner == addr;\n', '    }\n', '\n', '    function TransferOwner(address payable newOwner) public onlyOwner\n', '    {\n', '        Owner = newOwner;\n', '    }\n', '\n', '    function Terminate() public onlyOwner\n', '    {\n', '        selfdestruct(Owner);\n', '    }\n', '\n', '    modifier onlyOwner(){\n', '        require(msg.sender == Owner);\n', '        _;\n', '    }\n', '}\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name, string memory symbol) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', 'contract RR is ERC20 {\n', '    mapping(address => uint32) public creatorToSeason; \n', '    mapping(address => mapping(uint32 => address)) public creatorToSeasonToContract;\n', '    mapping(address => mapping(address => mapping(uint32 => uint256))) public staked;\n', '    mapping(address => uint256) public totalStaked;\n', '    \n', '    uint256 pricepertoken = 1 finney;\n', '    address payable saleaddress;\n', '    \n', '    constructor(uint256 initSupply, address payable a) public ERC20("Ruined Reign Token", "RR") {\n', '        _mint(a, initSupply);\n', '        saleaddress = a;\n', '    }\n', '    \n', '    function purchaseTokens() external payable {\n', '        _transfer(saleaddress, msg.sender, msg.value/pricepertoken*1000000000000000000);\n', '        emit Purchased(msg.sender, msg.value/pricepertoken*1000000000000000000);\n', '    }\n', '    \n', '    function recoverEth() external {\n', '        require(msg.sender == saleaddress);\n', '        saleaddress.transfer(address(this).balance);\n', '    }\n', '    \n', '    function NewSeason(address _core) public{\n', '        creatorToSeason[msg.sender]++;\n', '        creatorToSeasonToContract[msg.sender][creatorToSeason[msg.sender]] = _core;\n', '        \n', '        emit SeasonStarted(msg.sender, creatorToSeason[msg.sender], _core);\n', '    }\n', '    function Stake(address creator, uint32 season, uint256 amt) public{\n', "        require(creatorToSeasonToContract[creator][season] != address(0), 'invalid season');\n", '        Eth_Risk_Core core = Eth_Risk_Core(creatorToSeasonToContract[creator][season]);\n', "        require(core.get_passable_threshold() == core.passable_threshold(), 'staking period has ended');\n", "        require(balanceOf(msg.sender) >= amt, 'Insufficient balance');\n", '        _transfer(msg.sender, creatorToSeasonToContract[creator][season], amt);\n', '        staked[msg.sender][creator][season] += amt;\n', '        totalStaked[creatorToSeasonToContract[creator][season]] += amt;\n', '        \n', '        emit Staked(msg.sender, creator, season, amt);\n', '    }\n', '    function Claim(address creator, uint32 season) public {\n', "        require(creatorToSeasonToContract[creator][season] != address(0), 'invalid season');\n", '        Eth_Risk_Core core = Eth_Risk_Core(creatorToSeasonToContract[creator][season]);\n', "        require(core.ending_balance() > 0, 'season has not yet ended');\n", "        require(staked[msg.sender][creator][season] > 0, 'no tokens staked');\n", '        _transfer(creatorToSeasonToContract[creator][season], msg.sender, staked[msg.sender][creator][season]);    \n', '        uint256 stake = staked[msg.sender][creator][season];\n', '        staked[msg.sender][creator][season] = 0;\n', '        \n', '        core.RRaward(msg.sender, core.ending_balance() * stake / totalStaked[creatorToSeasonToContract[creator][season]] / core.pool_div());\n', '        emit Claimed(msg.sender, creator, season, core.ending_balance() / core.pool_div() * stake / totalStaked[creatorToSeasonToContract[creator][season]]);\n', '    }\n', '    \n', '    event SeasonStarted(address indexed creator, uint32 season, address contract_address);\n', '    event Staked(address indexed staker, address indexed creator, uint32 season, uint256 amt);\n', '    event Claimed(address indexed, address indexed creator, uint32 season, uint256 award);\n', '    event Purchased(address indexed buyer, uint256 amt);\n', '}\n', '\n', 'contract Eth_Risk_Core is Owned{\n', '    uint256 land_wei_price = 1000000000000;\n', '    uint256 unit_wei_price = 10000000000;\n', '    uint256 unit_gold_price = 100000;\n', '\tuint256 blocks_per_round = 4000;\n', '\tuint256 deployed_at_block;\n', '\tuint256 public ending_balance;\n', '\tuint256 public pool_nom = 9;\n', '\tuint256 public pool_div = 10;\n', '\n', '    uint8 max_upgrades = 3;\n', '\tuint8 public passable_threshold = 121;\n', '\tuint8 victory_threshold = 169;\n', '\tuint8 threshold_increment = 6;\n', '\tuint8 max_units = 99;\n', '\tuint32 total_victory_tiles_owned;\n', '    uint32 treatyID;\n', '\tbool firstWithdraw = true;\n', '\taddress rraddress;\n', '    RR rr;\n', '    \n', '    mapping(uint8 => mapping(uint8 => uint8)) public tile_development_level;\n', '    mapping(uint8 => mapping(uint8 => address payable)) public tile_owner;\n', '    mapping(uint8 => mapping(uint8 => uint8)) public units_on_tile;\n', '    mapping(address => uint256) gold_balances;\n', '    mapping(address => uint256) public gold_per_second;\n', '\tmapping(address => uint256) last_GPH_update_time;\n', '\tmapping(address => uint32) public victory_tiles_owned;\n', '\tmapping(address => bool) public withdrew;\n', '\tmapping(uint8 => mapping(uint8 => uint256)) market_price;\n', '\n', '\tconstructor (address rrtoken) public {\n', '\t\tdeployed_at_block = block.number;\n', '\t\trr = RR(rrtoken);\n', '\t\trraddress = rrtoken;\n', '\t}\n', '\n', '    function set_land_wei_price(uint256 new_price) public onlyOwner {\n', '        land_wei_price = new_price;\n', '    }\n', '    function set_unit_wei_price(uint256 new_price) public onlyOwner {\n', '        unit_wei_price = new_price;\n', '    }\n', '    function set_unit_gold_price(uint256 new_price) public onlyOwner {\n', '        unit_gold_price = new_price;\n', '    }\n', '\n', '\tfunction dep() public view returns (uint256){\n', '\t\treturn deployed_at_block;\n', '\t}\n', '\n', '\tfunction get_passable_threshold() public view returns(uint8){\n', '\t\tif((block.number - deployed_at_block)/blocks_per_round > 8){return victory_threshold;}\n', '\t\treturn (passable_threshold + uint8((block.number - deployed_at_block)/blocks_per_round * threshold_increment));\n', '\t}\n', '\n', '\tfunction get_season_ended() public view returns(bool){\n', '\t\treturn get_passable_threshold() >= victory_threshold;\n', '\t}\n', '    \n', '\tfunction withdraw_winnings() public payable{\n', "\t\trequire(get_season_ended(), 'Season hasnt ended');\n", "\t\trequire(!withdrew[msg.sender], 'Already withdrew');\n", '\t\tif(firstWithdraw){\n', '\t\t\tfirstWithdraw = false;\n', '\t\t\tending_balance = address(this).balance;\n', '\t\t}\n', '\t\twithdrew[msg.sender] = true;\n', '\t\tmsg.sender.transfer(get_winnings());\n', '\t}\n', '\n', '\tfunction get_winnings() public view returns(uint256){\n', '\t\tif(total_victory_tiles_owned == 0){ return 0; }\n', '\t\tif(ending_balance == 0){ return address(this).balance*pool_nom/pool_div * victory_tiles_owned[msg.sender] / total_victory_tiles_owned; }\n', '\t\treturn ending_balance*pool_nom/pool_div * victory_tiles_owned[msg.sender] / total_victory_tiles_owned;\n', '\t}\n', '\t\n', '\tfunction RRaward(address payable a, uint256 amt) external {\n', "\t    require(msg.sender == rraddress, 'sender wasnt ruined reign token address');\n", '\t    a.transfer(amt);\n', '\t}\n', '\n', '\tfunction get_pool_total() public view returns(uint256){\n', '\t\tif(get_season_ended()){ return ending_balance*pool_nom/pool_div; }\n', '\t\treturn address(this).balance*pool_nom/pool_div;\n', '\t}\n', '\n', '    function get_gold_value_of_tile(uint8 x, uint8 y) public view returns(uint8){\n', '\t\tif(tile_development_level[x][y] == 0){return uint8(10000/get_tile(x,y));}\n', '        else{return uint8(60000/get_tile(x,y)) * tile_development_level[x][y];} //cityfactor = 6\n', '    }\n', '\tfunction get_gold(address a) public view returns(uint){\n', '\t\treturn gold_balances[a] + gold_per_second[a]*(block.timestamp - last_GPH_update_time[a]);\n', '\t}\n', '\tfunction get_land_price(uint8 x, uint8 y) public view returns(uint256){\n', '\t\treturn land_wei_price * uint256(get_tile(x, y)) * uint256(get_tile(x,y));\n', '\t}\n', '\tfunction get_unit_price(uint8 x, uint8 y) public view returns(uint256){\n', '\t\treturn unit_wei_price * uint256(get_tile(x, y)) * uint256(get_tile(x,y));\n', '\t}\n', '\tfunction get_height(uint8 x, uint8 y) public view returns(uint8){\n', '\t\treturn 1 + (uint8(get_tile(x, y)) - passable_threshold)/threshold_increment;\n', '\t}\n', '\n', '\tfunction market_sell(uint8 x, uint8 y, uint256 price) public {\n', "\t\trequire(!get_season_ended(), 'Season has ended');\n", "\t\trequire(tile_owner[x][y] == msg.sender, 'Sender isnt owner');\n", "\t\trequire(get_tile(x, y) > get_passable_threshold(), 'Tile impassable');\n", "\t\trequire(price > 0, 'Invalid price');\n", '\t\tmarket_price[x][y] = price;\n', '\t\temit Market_Posted(x, y, msg.sender, price);\n', '\t}\n', '\n', '\tfunction market_buy(uint8 x, uint8 y) public payable{\n', "\t\trequire(!get_season_ended(), 'Season has ended');\n", "\t\trequire(market_price[x][y] != 0, 'Land not for sale');\n", "\t\trequire(msg.value == market_price[x][y], 'Invalid purchase price');\n", '\t\taddress payable seller = tile_owner[x][y];\n', '\t\tmarket_price[x][y] = 0;\n', '\t\tif(get_tile(x, y) > victory_threshold){\n', '\t\t\tvictory_tiles_owned[msg.sender]++; //overflow not possible\n', '\t\t\tvictory_tiles_owned[seller]--; //underflow not possible\n', '\t\t}\n', '\t\ttile_owner[x][y] = msg.sender;\n', '\t\tseller.transfer(msg.value);\n', '\t\temit Market_Bought(x, y, msg.sender);\n', '\t}\n', '\n', '    function buy_land_with_wei(uint8 tile_x, uint8 tile_y, uint8 unit_count, uint8 dev_lev) public payable {\n', "\t\trequire(!get_season_ended(), 'Season has ended');\n", "        require(msg.value == get_land_price(tile_x, tile_y)*dev_lev + unit_count*get_unit_price(tile_x, tile_y), 'Invalid payment');\n", "        require(tile_owner[tile_x][tile_y] == address(0) || tile_owner[tile_x][tile_y] == msg.sender, 'Tile already owned');\n", "\t\trequire(get_tile(tile_x, tile_y) > get_passable_threshold(), 'Tile impassable');\n", "\t\trequire(get_tile(tile_x, tile_y) <= get_passable_threshold() + threshold_increment, 'Tile inland'); \n", "\t\trequire(units_on_tile[tile_x][tile_y] + unit_count <= max_units, 'Buying too many units');\n", "\t\trequire(unit_count >= 1, 'Buying too few units');\n", "\t\trequire(dev_lev <= max_upgrades, 'Development level over max');\n", '\t\t\n', '\t\ttile_development_level[tile_x][tile_y] = dev_lev;\n', '\t\tgold_balances[msg.sender] = get_gold(msg.sender);\n', '        gold_per_second[msg.sender] += get_gold_value_of_tile(tile_x, tile_y);\n', '\t\tlast_GPH_update_time[msg.sender] = block.timestamp;\n', '        tile_owner[tile_x][tile_y] = msg.sender;\n', '        units_on_tile[tile_x][tile_y] = unit_count;\n', '\n', '        emit Land_Bought(tile_x, tile_y, msg.sender, units_on_tile[tile_x][tile_y], dev_lev);\n', '    }\n', '    function buy_units_with_wei(uint8 tile_x, uint8 tile_y, uint8 unit_count) public payable {\n', "\t\trequire(!get_season_ended(), 'Season has ended');\n", "        require(msg.value >= get_unit_price(tile_x, tile_y) * unit_count, 'Insufficient payment');\n", "        require(tile_owner[tile_x][tile_y] == address(msg.sender), 'Sender isnt owner');\n", "\t\trequire(tile_development_level[tile_x][tile_y] > 0, 'Tile isnt colonized');\n", "\t\trequire(units_on_tile[tile_x][tile_y] + unit_count <= max_units, 'Sum over max units');\n", "\t\trequire(units_on_tile[tile_x][tile_y] + unit_count > units_on_tile[tile_x][tile_y], 'Units zero or overflow');\n", '\n', '        units_on_tile[tile_x][tile_y] += unit_count;\n', '\t\temit New_Population(tile_x, tile_y, units_on_tile[tile_x][tile_y]);\n', '    }\n', '    function buy_units_with_gold(uint8 tile_x, uint8 tile_y, uint8 unit_count) public {\n', "\t\trequire(!get_season_ended(), 'Season has ended');\n", "        require(tile_owner[tile_x][tile_y] == address(msg.sender), 'Sender isnt owner');\n", "        require(get_gold(msg.sender) >= (unit_gold_price*unit_count), 'Insufficient gold');\n", "\t\trequire(tile_development_level[tile_x][tile_y] > 0, 'Tile isnt colonized');\n", "\t\trequire(unit_count <= max_units, 'Buying too many units');\n", "\t\trequire(units_on_tile[tile_x][tile_y] + unit_count <= max_units, 'Sum over max units');\n", "\t\trequire(units_on_tile[tile_x][tile_y] + unit_count > units_on_tile[tile_x][tile_y], 'Units zero or overflow');\n", '\n', '\t\tlast_GPH_update_time[msg.sender] = block.timestamp;\n', '        gold_balances[msg.sender] = get_gold(msg.sender) - unit_gold_price*unit_count;\n', '        units_on_tile[tile_x][tile_y] += unit_count;\n', '\t\temit New_Population(tile_x, tile_y, units_on_tile[tile_x][tile_y]);\n', '    }\n', '\n', '    function transfer_gold(address to, uint256 gold) public {\n', '        //TODO: overflow check here\n', "        require(gold_balances[msg.sender] >= gold, 'Insufficient gold');\n", '        gold_balances[msg.sender] -= gold;\n', '        gold_balances[to] += gold;\n', '\t\temit Gold_Transferred(msg.sender, to, gold);\n', '    }\n', '\n', '    function transfer_land(uint8 tile_x, uint8 tile_y, address payable new_address) public {\n', '        require(tile_owner[tile_x][tile_y] == msg.sender);\n', "\t\trequire(!get_season_ended(), 'Season has ended');\n", '\t\tif(get_tile(tile_x, tile_y) > victory_threshold){\n', '\t\t\tvictory_tiles_owned[msg.sender]--; //overflow not possible\n', '\t\t\tvictory_tiles_owned[new_address]++; //underflow not possible\n', '\t\t}\n', '\t\tmarket_price[tile_x][tile_y] = 0;\n', '        tile_owner[tile_x][tile_y] = new_address;\n', '        emit Land_Transferred(tile_x, tile_y, msg.sender);\n', '    }\n', '\n', '    function move(uint8 x_from, uint8 y_from, uint8 x_to, uint8 y_to, uint8 units) public {\n', "\t\trequire(units > 0, 'Moving zero units');\n", "\t\trequire(!get_season_ended(), 'Season has ended');\n", "        require(tile_owner[x_from][y_from] == msg.sender, 'Sender doesnt own from tile');\n", "        require(units_on_tile[x_from][y_from] - 1 >= units, 'Moving too many units'); //attacker must leave one unit in from tile\n", "        require(get_tile(x_to, y_to) > get_passable_threshold(), 'Tile impassable');\n", '\t\tif(y_from % 2 == 0)\n', '\t\t{\n', '\t\t\trequire((y_to == y_from + 1 && x_to == x_from) || \n', '\t\t\t\t\t(y_to == y_from - 1 && x_to == x_from) ||\n', '\t\t\t\t\t(y_to == y_from && x_to == x_from + 1) ||\n', '\t\t\t\t\t(y_to == y_from && x_to == x_from - 1) ||\n', '\t\t\t\t\t(y_to == y_from + 1 && x_to == x_from - 1) ||\n', "\t\t\t\t\t(y_to == y_from - 1 && x_to == x_from - 1), 'Tile not adjacent');\n", '\t\t}\n', '\t\telse\n', '\t\t{\n', '\t\t\trequire((y_to == y_from + 1 && x_to == x_from) || \n', '\t\t\t\t\t\t(y_to == y_from - 1 && x_to == x_from) ||\n', '\t\t\t\t\t\t(y_to == y_from && x_to == x_from + 1) ||\n', '\t\t\t\t\t\t(y_to == y_from && x_to == x_from - 1) ||\n', '\t\t\t\t\t\t(y_to == y_from + 1 && x_to == x_from + 1) ||\n', "\t\t\t\t\t\t(y_to == y_from - 1 && x_to == x_from + 1), 'Tile not adjacent');\n", '\t\t}\n', '\n', '\t\tif(tile_owner[x_to][y_to] == address (0x00)){\n', '\t\t\t\tunits_on_tile[x_from][y_from] -= units;\n', '\t\t\t\tunits_on_tile[x_to][y_to] = units;\n', '\t\t\t\ttile_owner[x_to][y_to] = msg.sender;\n', '\n', '\t\t\t\tif(get_tile(x_to, y_to) > victory_threshold){\n', '\t\t\t\t\ttotal_victory_tiles_owned++;\n', '\t\t\t\t\tvictory_tiles_owned[msg.sender]++;\n', '\t\t\t\t}\n', '\t\t\t\tgold_balances[msg.sender] = get_gold(msg.sender);\n', '\t\t\t\tgold_per_second[msg.sender] += get_gold_value_of_tile(x_to,y_to);\n', '\t\t\t\tlast_GPH_update_time[msg.sender] = block.timestamp;\n', '\n', '\t\t\t\temit Land_Transferred(x_to, y_to, msg.sender);\n', '\t\t\t}\n', '        else if(tile_owner[x_to][y_to] == msg.sender){\n', "\t\t\trequire(units_on_tile[x_to][y_to] + units <= max_units, 'Moving too many units');\n", "            require(units_on_tile[x_to][y_to] + units > units_on_tile[x_to][y_to], 'Units overflow, or sent zero');\n", '\t\t\tunits_on_tile[x_from][y_from] -= units;\n', '            units_on_tile[x_to][y_to] += units;\n', '        }\n', '        else {\t\t\t \n', '            //battle\n', '\t\t\tif(tile_development_level[x_to][y_to] > 0){\n', '\t\t\t\tif(units/tile_development_level[x_to][y_to] == units_on_tile[x_to][y_to]) { \n', '\t\t\t\t\t//defender advantage\n', '\t\t\t\t\tunits_on_tile[x_to][y_to] = 1;\n', '\t\t\t\t\tunits_on_tile[x_from][y_from] -= units;\n', '\t\t\t\t}\n', '\t\t\t\telse if(units/tile_development_level[x_to][y_to] > units_on_tile[x_to][y_to]){\n', '\t\t\t\t\tunits_on_tile[x_to][y_to] = units - units_on_tile[x_to][y_to]*tile_development_level[x_to][y_to];\n', '\t\t\t\t\tunits_on_tile[x_from][y_from] -= units;\n', '\n', '\t\t\t\t\tif(get_tile(x_to, y_to) > victory_threshold){\n', '\t\t\t\t\t\tvictory_tiles_owned[msg.sender]++; //overflow not possible\n', '\t\t\t\t\t\tvictory_tiles_owned[tile_owner[x_to][y_to]]--; //underflow not possible\n', '\t\t\t\t\t}\n', '\n', '\t\t\t\t\tgold_balances[tile_owner[x_to][y_to]] = get_gold(msg.sender);\n', '\t\t\t\t\tgold_per_second[tile_owner[x_to][y_to]] -= get_gold_value_of_tile(x_to,y_to);\n', '\t\t\t\t\tlast_GPH_update_time[tile_owner[x_to][y_to]] = block.timestamp;\n', '\t\t\t\t\n', '\t\t\t\t\ttile_development_level[x_to][y_to] = 0;\n', '\t\t\t\t\tmarket_price[x_to][y_to] = 0;\n', '\n', '\t\t\t\t\tgold_balances[msg.sender] = get_gold(msg.sender);\n', '\t\t\t\t\tgold_per_second[msg.sender] += get_gold_value_of_tile(x_to,y_to);\n', '\t\t\t\t\tlast_GPH_update_time[msg.sender] = block.timestamp;\n', '\n', '\t\t\t\t\ttile_owner[x_to][y_to] = msg.sender;\n', '\t\t\t\t\temit Land_Transferred(x_to, y_to, msg.sender);\n', '\t\t\t\t}else{\n', '\t\t\t\t\tunits_on_tile[x_to][y_to] -= units/tile_development_level[x_to][y_to];\n', '\t\t\t\t\tunits_on_tile[x_from][y_from] -= units;\n', '\t\t\t\t}\n', '\t\t\t}else{\n', '\t\t\t\tif(units == units_on_tile[x_to][y_to]) { \n', '\t\t\t\t\t//defender advantage\n', '\t\t\t\t\tunits_on_tile[x_to][y_to] = 1;\n', '\t\t\t\t\tunits_on_tile[x_from][y_from] -= units;\n', '\t\t\t\t}\n', '\t\t\t\telse if(units > units_on_tile[x_to][y_to]){\n', '\t\t\t\t\tunits_on_tile[x_to][y_to] = units - units_on_tile[x_to][y_to];\n', '\t\t\t\t\tunits_on_tile[x_from][y_from] -= units;\n', '\n', '\t\t\t\t\tif(get_tile(x_to, y_to) > victory_threshold){\n', '\t\t\t\t\t\tvictory_tiles_owned[msg.sender]++; //overflow not possible\n', '\t\t\t\t\t\tvictory_tiles_owned[tile_owner[x_to][y_to]]--; //underflow not possible\n', '\t\t\t\t\t}\n', '\n', '\t\t\t\t\tgold_balances[tile_owner[x_to][y_to]] = get_gold(msg.sender);\n', '\t\t\t\t\tgold_per_second[tile_owner[x_to][y_to]] -= get_gold_value_of_tile(x_to,y_to);\n', '\t\t\t\t\tlast_GPH_update_time[tile_owner[x_to][y_to]] = block.timestamp;\n', '\t\t\t\t\n', '\t\t\t\t\ttile_development_level[x_to][y_to] = 0;\n', '\t\t\t\t\tmarket_price[x_to][y_to] = 0;\n', '\n', '\t\t\t\t\tgold_balances[msg.sender] = get_gold(msg.sender);\n', '\t\t\t\t\tgold_per_second[msg.sender] += get_gold_value_of_tile(x_to,y_to);\n', '\t\t\t\t\tlast_GPH_update_time[msg.sender] = block.timestamp;\n', '\n', '\t\t\t\t\ttile_owner[x_to][y_to] = msg.sender;\n', '\t\t\t\t\temit Land_Transferred(x_to, y_to, msg.sender);\n', '\t\t\t\t}else{\n', '\t\t\t\t\tunits_on_tile[x_to][y_to] -= units;\n', '\t\t\t\t\tunits_on_tile[x_from][y_from] -= units;\n', '\t\t\t\t}\n', '\t\t\t}\n', '\t\t}\n', '        emit New_Population(x_from, y_from, units_on_tile[x_from][y_from]);\n', '        emit New_Population(x_to, y_to, units_on_tile[x_to][y_to]);\n', '    }\n', '\n', '\t//noise\n', '\tint64 constant max = 256;\n', '    function integer_noise(int64 n) public pure returns(int64) {\n', '        n = (n >> 13) ^ n;\n', '        int64 nn = (n * (n * n * 60493 + 19990303) + 1376312589) & 0x7fffffff;\n', '        return ((((nn * 100000)) / (1073741824)))%max;\n', '    }\n', '\n', '    function local_average_noise(uint8 x, uint8 y) public pure returns(int64) {\n', '        int64 xq = x + ((y-x)/3);\n', '        int64 yq = y - ((x+y)/3);\n', '\n', '        int64 result =\n', '        ((integer_noise(xq) + integer_noise(yq-1))) //uc\n', '        +   ((integer_noise(xq-1) + integer_noise(yq))) //cl\n', '        +   ((integer_noise(xq+1) + integer_noise(yq))) //cr\n', '        +   ((integer_noise(xq) + integer_noise(yq+1))); //lc\n', '\n', '        return result*1000/8;\n', '    }\n', '\n', '    int64 constant iterations = 5;\n', '\n', '    function stacked_squares(uint8 x, uint8 y) public pure returns(int64) {\n', '\n', '        int64 accumulator;\n', '        for(int64 iteration_idx = 0; iteration_idx < iterations; iteration_idx++){\n', '            accumulator +=  integer_noise((x * iteration_idx) + accumulator + y) +\n', '            integer_noise((y * iteration_idx) + accumulator - x);\n', '        }\n', '\n', '        return accumulator*1000/(iterations*2);\n', '\n', '    }\n', '\n', '    function get_tile(uint8 x, uint8 y) public pure returns (int64) {\n', '        return (local_average_noise(x/4,y/7) + stacked_squares(x/25,y/42))/2000;\n', '    }\n', '\n', '\tevent Land_Bought(uint8 indexed x, uint8 indexed y, address indexed new_owner, uint16 new_population, uint8 development_level);\n', '    event Land_Transferred(uint8 indexed x, uint8 indexed y, address indexed new_owner);\n', '\tevent Gold_Transferred(address from, address to, uint gold);\n', '    event New_Population(uint8 indexed x, uint8 indexed y, uint16 new_population);\t\n', '\tevent Market_Posted(uint8 indexed x, uint8 indexed y, address indexed poster, uint256 price);\n', '\tevent Market_Bought(uint8 indexed x, uint8 indexed y, address indexed buyer);\n', '}']