['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-10\n', '*/\n', '\n', 'pragma solidity ^0.4.18;\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', 'contract Ownable {\n', '    address public owner;\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', 'contract ERC20Basic {\n', '    uint public _totalSupply;\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address who) public constant returns (uint);\n', '    function transfer(address to, uint value) public;\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '}\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public constant returns (uint);\n', '    function transferFrom(address from, address to, uint value) public;\n', '    function approve(address spender, uint value) public;\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', 'contract BasicToken is Ownable, ERC20Basic {\n', '    using SafeMath for uint;\n', '    mapping(address => uint) public balances;\n', '    uint public basisPointsRate = 0;\n', '    uint public maximumFee = 0;\n', '    modifier onlyPayloadSize(uint size) {\n', '        require(!(msg.data.length < size + 4));\n', '        _;\n', '    }\n', '    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) {\n', '        uint fee = (_value.mul(basisPointsRate)).div(10000);\n', '        if (fee > maximumFee) {\n', '            fee = maximumFee;\n', '        }\n', '        uint sendAmount = _value.sub(fee);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(sendAmount);\n', '        if (fee > 0) {\n', '            balances[owner] = balances[owner].add(fee);\n', '            Transfer(msg.sender, owner, fee);\n', '        }\n', '        Transfer(msg.sender, _to, sendAmount);\n', '    }\n', '    function balanceOf(address _owner) public constant returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', 'contract StandardToken is BasicToken, ERC20 {\n', '    mapping (address => mapping (address => uint)) public allowed;\n', '    uint public constant MAX_UINT = 2**256 - 1;\n', '    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) {\n', '        var _allowance = allowed[_from][msg.sender];\n', '        uint fee = (_value.mul(basisPointsRate)).div(10000);\n', '        if (fee > maximumFee) {\n', '            fee = maximumFee;\n', '        }\n', '        if (_allowance < MAX_UINT) {\n', '            allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        }\n', '        uint sendAmount = _value.sub(fee);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(sendAmount);\n', '        if (fee > 0) {\n', '            balances[owner] = balances[owner].add(fee);\n', '            Transfer(_from, owner, fee);\n', '        }\n', '        Transfer(_from, _to, sendAmount);\n', '    }\n', '    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\n', '        require(!((_value != 0) && (allowed[msg.sender][_spender] != 0)));\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '    }\n', '    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '}\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '  bool public paused = false;\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', 'contract BlackList is Ownable, BasicToken {\n', '    function getBlackListStatus(address _maker) external constant returns (bool) {\n', '        return isBlackListed[_maker];\n', '    }\n', '    function getOwner() external constant returns (address) {\n', '        return owner;\n', '    }\n', '    mapping (address => bool) public isBlackListed;\n', '    \n', '    function addBlackList (address _evilUser) public onlyOwner {\n', '        isBlackListed[_evilUser] = true;\n', '        AddedBlackList(_evilUser);\n', '    }\n', '    function removeBlackList (address _clearedUser) public onlyOwner {\n', '        isBlackListed[_clearedUser] = false;\n', '        RemovedBlackList(_clearedUser);\n', '    }\n', '    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\n', '        require(isBlackListed[_blackListedUser]);\n', '        uint dirtyFunds = balanceOf(_blackListedUser);\n', '        balances[_blackListedUser] = 0;\n', '        _totalSupply -= dirtyFunds;\n', '        DestroyedBlackFunds(_blackListedUser, dirtyFunds);\n', '    }\n', '    event DestroyedBlackFunds(address _blackListedUser, uint _balance);\n', '    event AddedBlackList(address _user);\n', '    event RemovedBlackList(address _user);\n', '}\n', '\n', 'contract UpgradedStandardToken is StandardToken{\n', '    function transferByLegacy(address from, address to, uint value) public;\n', '    function transferFromByLegacy(address sender, address from, address spender, uint value) public;\n', '    function approveByLegacy(address from, address spender, uint value) public;\n', '}\n', '\n', 'contract HTCCHAIN is Pausable, StandardToken, BlackList {\n', '    string public name;\n', '    string public symbol;\n', '    uint public decimals;\n', '    address public upgradedAddress;\n', '    bool public deprecated;\n', '    function HTCCHAIN(uint _initialSupply, string _name, string _symbol, uint _decimals) public {\n', '        _totalSupply = _initialSupply;\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '        balances[owner] = _initialSupply;\n', '        deprecated = false;\n', '    }\n', '    function transfer(address _to, uint _value) public whenNotPaused {\n', '        require(!isBlackListed[msg.sender]);\n', '        if (deprecated) {\n', '            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);\n', '        } else {\n', '            return super.transfer(_to, _value);\n', '        }\n', '    }\n', '    function transferFrom(address _from, address _to, uint _value) public whenNotPaused {\n', '        require(!isBlackListed[_from]);\n', '        if (deprecated) {\n', '            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);\n', '        } else {\n', '            return super.transferFrom(_from, _to, _value);\n', '        }\n', '    }\n', '    function balanceOf(address who) public constant returns (uint) {\n', '        if (deprecated) {\n', '            return UpgradedStandardToken(upgradedAddress).balanceOf(who);\n', '        } else {\n', '            return super.balanceOf(who);\n', '        }\n', '    }\n', '    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) {\n', '        if (deprecated) {\n', '            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\n', '        } else {\n', '            return super.approve(_spender, _value);\n', '        }\n', '    }\n', '    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n', '        if (deprecated) {\n', '            return StandardToken(upgradedAddress).allowance(_owner, _spender);\n', '        } else {\n', '            return super.allowance(_owner, _spender);\n', '        }\n', '    }\n', '    function deprecate(address _upgradedAddress) public onlyOwner {\n', '        deprecated = true;\n', '        upgradedAddress = _upgradedAddress;\n', '        Deprecate(_upgradedAddress);\n', '    }\n', '    function totalSupply() public constant returns (uint) {\n', '        if (deprecated) {\n', '            return StandardToken(upgradedAddress).totalSupply();\n', '        } else {\n', '            return _totalSupply;\n', '        }\n', '    }\n', '    function issue(uint amount) public onlyOwner {\n', '        require(_totalSupply + amount > _totalSupply);\n', '        require(balances[owner] + amount > balances[owner]);\n', '\n', '        balances[owner] += amount;\n', '        _totalSupply += amount;\n', '        Issue(amount);\n', '    }\n', '    function redeem(uint amount) public onlyOwner {\n', '        require(_totalSupply >= amount);\n', '        require(balances[owner] >= amount);\n', '\n', '        _totalSupply -= amount;\n', '        balances[owner] -= amount;\n', '        Redeem(amount);\n', '    }\n', '    function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner {\n', '        require(newBasisPoints < 20);\n', '        require(newMaxFee < 50);\n', '\n', '        basisPointsRate = newBasisPoints;\n', '        maximumFee = newMaxFee.mul(10**decimals);\n', '\n', '        Params(basisPointsRate, maximumFee);\n', '    }\n', '    event Issue(uint amount);\n', '    event Redeem(uint amount);\n', '    event Deprecate(address newAddress);\n', '    event Params(uint feeBasisPoints, uint maxFee);\n', '}']