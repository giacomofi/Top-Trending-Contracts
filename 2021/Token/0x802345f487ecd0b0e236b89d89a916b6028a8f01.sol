['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-07\n', '*/\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.4;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.7.4;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\n', '\n', 'pragma solidity ^0.7.4;\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '    \n', '    /* Added by CryptoTask */\n', '    address private _owner;\n', '    bool private _locked = false;\n', '    bool private _lockFixed = false;\n', '    address private _saleContract = address(0);\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name_, string memory symbol_) {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _decimals = 18;\n', '        _owner = msg.sender;  //added by CryptoTask\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        require(!_locked || msg.sender == _saleContract, "Transfers locked"); //added by CryptoTask\n', '        _transfer(msg.sender, recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        require(!_locked, "Transfers locked");  //added by CryptoTask\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '    \n', '    \n', '    /**\n', '     * @dev Set the address of the sale contract.\n', '     * `saleContract` can make token transfers\n', '     * even when the token contract state is locked.\n', '     * Transfer lock serves the purpose of preventing\n', '     * the creation of fake Uniswap pools.\n', '     * \n', '     * Added by CryptoTask.\n', '     *\n', '     */\n', '    function setSaleContract(address saleContract) public {\n', '        require(msg.sender == _owner && _saleContract == address(0), "Caller must be owner and _saleContract yet unset");\n', '        _saleContract = saleContract;\n', '    }\n', '    \n', '    /**\n', '     * @dev Lock token transfers.\n', '     * \n', '     * Added by CryptoTask.\n', '     *\n', '     */\n', '    function lockTransfers() public {\n', '        require(msg.sender == _owner && !_lockFixed, "Caller must be owner and _lockFixed false");\n', '        _locked = true;\n', '    }\n', '    \n', '    /**\n', '     * @dev Unlock token transfers.\n', '     * \n', '     * Added by CryptoTask.\n', '     *\n', '     */\n', '    function unlockTransfers() public {\n', '        require(msg.sender == _owner && !_lockFixed, "Caller must be owner and _lockFixed false");\n', '        _locked = false;\n', '    }\n', '    \n', '    /**\n', '     * @dev Permanently unlock token transfers.\n', '     * After this, further locking is impossible.\n', '     * \n', '     * Added by CryptoTask.\n', '     *\n', '     */\n', '    function unlockTransfersPermanent() public {\n', '        require(msg.sender == _owner && !_lockFixed, "Caller must be owner and _lockFixed false");\n', '        _locked = false;\n', '        _lockFixed = true;\n', '    }\n', '    \n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '// File: contracts/CTASK.sol\n', '\n', 'pragma solidity ^0.7.4;\n', '\n', 'contract CTASK is ERC20 {\n', '  \n', '    constructor(\n', '        address initialAccount,\n', '        uint256 initialBalance\n', '    ) ERC20("CTASK Token", "CTASK") {\n', '        _mint(initialAccount, initialBalance);\n', '    }\n', '}\n', '\n', '// File: contracts/CtaskSale.sol\n', '\n', 'pragma solidity ^0.7.4;\n', '\n', 'contract CtaskSale {\n', '    using SafeMath for uint256;\n', '\n', '    address private _owner;\n', '    CTASK public _token;\n', '    \n', '    address payable public _vault1;\n', '    address payable public _vault2;\n', '    address payable public _vault3;\n', '    address payable public _vault4;\n', '    \n', '    /*stage 0 = deployed, 1 = tier1 in progress, 2 = tier1 finished, 3 = tier2 in progress,\n', '    4 = tier2 finished and funds withdrawn*/\n', '    uint8 public _stage = 0;\n', '    uint256 public _maxAmount = 7 * (1 ether);\n', '    uint256 public _swapRatio1 = 1700;\n', '    uint256 public _swapRatio2 = 1444;\n', '    uint256 public _cap1 = 250 * (1 ether);\n', '    uint256 public _cap2 = 450 * (1 ether);\n', '    uint256 public _amountRaisedTier1 = 0;\n', '    uint256 public _amountRaisedTier2 = 0;\n', '    uint256 public _amountRaised = 0;\n', '    \n', '    /* only informative values, not enforced by the smart contract */\n', '    uint256 public _tier1StartTime = 0;\n', '    uint256 public _tier1EndTime = 0;\n', '    uint256 public _tier2StartTime = 0;\n', '    uint256 public _tier2EndTime = 0;\n', '    \n', '    mapping(address => uint256) public _amounts;\n', '    \n', '    /**\n', '     * @dev Sets the values for {tokenAddress} and {vault1}, {vault2}, {vault3}, {vault4}.\n', '     *\n', '     * After the sale has finished (closeTier2 is called), eth is distributed to the vaults\n', '     * (3x30% + 10%).\n', '     *\n', '     * All five of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (address tokenAddress, address vault1, address vault2, address vault3, address vault4) {\n', '        _owner = msg.sender;\n', '        _token = CTASK(tokenAddress);\n', '        \n', '        _vault1 = payable(vault1);\n', '        _vault2 = payable(vault2);\n', '        _vault3 = payable(vault3);\n', '        _vault4 = payable(vault4);\n', '    }\n', '    \n', '    /**\n', '     * @dev Accepts eth and issues CTASK tokens. Max amount is 10 ETH, and also current\n', '     * tier caps cannot be exceeded. Each tier has its own swap ratio.\n', '     */\n', '    receive() external payable {\n', '        require(msg.value + _amounts[msg.sender] <= _maxAmount && ((_stage == 1  && _amountRaisedTier1 + msg.value <= _cap1) || (_stage == 3  && _amountRaisedTier2 + msg.value <= _cap2)),\n', '            "Msg value needs to be not more than 7 ETH and current tier opened and unfilled");\n', '        \n', '        if(_stage == 1) {\n', '            _amountRaisedTier1 += msg.value;\n', '            _amountRaised += msg.value;\n', '            _amounts[msg.sender] += msg.value;\n', '            _token.transfer(msg.sender, msg.value * _swapRatio1);\n', '        } else if (_stage == 3) {\n', '            _amountRaisedTier2 += msg.value;\n', '            _amountRaised += msg.value;\n', '            _amounts[msg.sender] += msg.value;\n', '            _token.transfer(msg.sender, msg.value * _swapRatio2);\n', '        } else {\n', '            revert();\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * @dev Changes the swap ratio for tier1. Can be called only by the contract owner\n', '     * and it can be done only before the sale has started.\n', '     */\n', '    function changeSwapRatio1(uint256 newSwapRatio) public {\n', '        require(msg.sender == _owner && _stage == 0, "Msg sender needs to be the owner and current stage 0");\n', '        _swapRatio1 = newSwapRatio;\n', '    }\n', '    \n', '    /**\n', '     * @dev Changes the swap ratio for tier2. Can be called only by the contract owner\n', '     * and it can be done only before the sale has started or, after tier1 has ended but\n', '     * before tier2 has started.\n', '     */\n', '    function changeSwapRatio2(uint256 newSwapRatio) public {\n', '        require(msg.sender == _owner && (_stage == 0 || _stage == 2), "Msg sender needs to be the owner and current stage 0 or 2");\n', '        _swapRatio2 = newSwapRatio;\n', '    }\n', '    \n', '    /**\n', '     * @dev Opens the sale. Can be called only by the contract owner.\n', '     */\n', '    function openTier1() public {\n', '        require(msg.sender == _owner && _stage == 0, "Msg sender needs to be the owner and current stage 0");\n', '        _stage = 1;\n', '    }\n', '    \n', '    /**\n', '     * @dev Closes tier1. Can be called only by the contract owner.\n', '     */\n', '    function closeTier1() public {\n', '        require(msg.sender == _owner && _stage == 1, "Msg sender needs to be the owner and current stage 1");\n', '        _stage = 2;\n', '    }\n', '    \n', '    /**\n', '     * @dev Opens tier2. Can be called only by the contract owner.\n', '     */\n', '    function openTier2() public {\n', '        require(msg.sender == _owner && _stage == 2, "Msg sender needs to be the owner and current stage 2");\n', '        _stage = 3;\n', '    }\n', '    \n', '    /**\n', '     * @dev Closes tier2. Can be called only by the contract owner.\n', '     * Funds are distributed to the vaults.\n', '     */\n', '    function closeTier2() public {\n', '        require(msg.sender == _owner && _stage == 3, "Msg sender needs to be the owner and current stage 3");\n', '        \n', '        _stage = 4;\n', '        \n', '        _vault1.transfer(_amountRaised.mul(3)/10);\n', '        _vault2.transfer(_amountRaised.mul(3)/10);\n', '        _vault3.transfer(_amountRaised.mul(3)/10);\n', '        _vault4.transfer(_amountRaised/10);\n', '    }\n', '    \n', '    /**\n', '     * @dev _tier1StartTime setter.\n', '     */\n', '    function setTier1StartTime(uint256 newTime) public {\n', '        require(msg.sender == _owner, "Msg sender needs to be the owner");\n', '        _tier1StartTime = newTime;\n', '    }\n', '    \n', '    /**\n', '     * @dev _tier1EndTime setter.\n', '     */\n', '    function setTier1EndTime(uint256 newTime) public {\n', '        require(msg.sender == _owner, "Msg sender needs to be the owner");\n', '        _tier1EndTime = newTime;\n', '    }\n', '    \n', '        /**\n', '     * @dev _tier2StartTime setter.\n', '     */\n', '    function setTier2StartTime(uint256 newTime) public {\n', '        require(msg.sender == _owner, "Msg sender needs to be the owner");\n', '        _tier2StartTime = newTime;\n', '    }\n', '    \n', '    /**\n', '     * @dev _tier2EndTime setter.\n', '     */\n', '    function setTier2EndTime(uint256 newTime) public {\n', '        require(msg.sender == _owner, "Msg sender needs to be the owner");\n', '        _tier2EndTime = newTime;\n', '    }\n', '    \n', '}']