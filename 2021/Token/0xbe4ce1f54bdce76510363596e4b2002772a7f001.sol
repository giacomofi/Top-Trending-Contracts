['// SPDX-License-Identifier: MIT\n', 'pragma solidity =0.7.5;\n', '\n', '\n', 'import "LibSafeMath.sol";\n', 'import "LibIVesting.sol";\n', 'import "LibIVokenTB.sol";\n', 'import "LibAuthPause.sol";\n', 'import "LibAuthProxy.sol";\n', 'import "SkylerVestingPermille1.sol";\n', '\n', '\n', 'contract BusinessFund4Skyler is IVesting, AuthPause, AuthProxy, WithVestingPermille {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 private immutable CREDIT = 1_000_000e9;  // credit: 1 million\n', '    uint256 private immutable TOP = 50_000e9;\n', '    uint256 private _vokenIssued;\n', '    IVokenTB private immutable VOKEN_TB = IVokenTB(0x1234567a022acaa848E7D6bC351d075dBfa76Dd4);\n', '    mapping (address => uint256) private _minted;\n', '\n', '    event Distribute(address indexed account, uint256 amount);\n', '\n', '    receive() external payable {}\n', '\n', '    function status(address account)\n', '        public\n', '        view\n', '        returns (\n', '            uint256 credit,\n', '            uint256 issued,\n', '            \n', '            uint256 balance,\n', '            uint256 minted,\n', '            uint256 vesting\n', '        )\n', '    {\n', '        credit = CREDIT.sub(_vokenIssued);\n', '        issued = _vokenIssued;\n', '        \n', '        balance = VOKEN_TB.balanceOf(account);\n', '        minted = _minted[account];\n', '        vesting = vestingOf(account);\n', '    }\n', '\n', '    function vestingOf(address account)\n', '        public\n', '        override\n', '        view\n', '        returns (uint256 vesting)\n', '    {\n', '        vesting = vesting.add(_getVestingAmountForIssued(_minted[account]));\n', '    }\n', '\n', '\n', '    function distribute(address account, uint256 amount)\n', '        public\n', '        onlyProxy\n', '        onlyNotPaused\n', '        returns (bool)\n', '    {\n', '        require(_minted[account] == 0, "Already minted before");\n', '        require(amount <= TOP, "Mint greater than 50k");\n', '\n', '        _vokenIssued = _vokenIssued.add(amount);\n', '        require(_vokenIssued <= CREDIT, "BusinessFund: credit exceeded");\n', '\n', '        _minted[account] = _minted[account].add(amount);\n', '\n', '        emit Distribute(account, amount);\n', '\n', '        return VOKEN_TB.mintWithVesting(account, amount, address(this));\n', '    }\n', '}']