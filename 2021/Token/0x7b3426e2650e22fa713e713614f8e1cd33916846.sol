['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-04\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', '\n', '███████╗███╗░░░███╗░█████╗░████████╗██████╗░██╗██╗░░██╗\n', '██╔════╝████╗░████║██╔══██╗╚══██╔══╝██╔══██╗██║╚██╗██╔╝\n', '█████╗░░██╔████╔██║███████║░░░██║░░░██████╔╝██║░╚███╔╝░\n', '██╔══╝░░██║╚██╔╝██║██╔══██║░░░██║░░░██╔══██╗██║░██╔██╗░\n', '███████╗██║░╚═╝░██║██║░░██║░░░██║░░░██║░░██║██║██╔╝╚██╗\n', '╚══════╝╚═╝░░░░░╚═╝╚═╝░░╚═╝░░░╚═╝░░░╚═╝░░╚═╝╚═╝╚═╝░░╚═╝\n', '\n', 'https://t.me/ethereumatrix\n', 'https://ethereumatrix.com/\n', 'https://twitter.com/ethereumatrix\n', 'https://www.reddit.com/r/EthereuMatrix/\n', '\n', 'Token Information\n', '1. Total 1,000,000,000,000\n', '2. Fair launch on Ethereum\n', '3. Anti-robot protection\n', '4. 0.5% initial buy limit on launch\n', '5. 5% marketing and team fee\n', '6. 2% redistribution\n', '7. No presale\n', '8. No team tokens\n', '9. Contract renounced on launch\n', '10. LP locked on launch (100 years)\n', '\n', ' */\n', 'contract eMTX  {\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply = 1_000_000_000_000;\n', '\n', '    string private _name = " t.me/ethereumatrix";\n', '    string private _symbol ="eMTX";\n', '\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '\n', '    constructor() {\n', '        _balances[_msgSender()] += _totalSupply;\n', '        emit Transfer(address(0), _msgSender(), _totalSupply);\n', '    }\n', '\n', '    function name() public view virtual  returns (string memory) {\n', '        return _name;\n', '    }\n', '    function symbol() public view virtual  returns (string memory) {\n', '        return _symbol;\n', '    }\n', '    function decimals() public view virtual  returns (uint8) {\n', '        return 18;\n', '    }\n', '    function totalSupply() public view virtual  returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '    function balanceOf(address account) public view virtual  returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '    function transfer(address recipient, uint256 amount) public virtual  returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '    function allowance(address owner, address spender) public view virtual  returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '    function approve(address spender, uint256 amount) public virtual  returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        uint256 currentAllowance = _allowances[sender][_msgSender()];\n', '        require(currentAllowance >= amount);\n', '        _approve(sender, _msgSender(), currentAllowance - amount);\n', '        return true;\n', '    }\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n', '        return true;\n', '    }\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        uint256 currentAllowance = _allowances[_msgSender()][spender];\n', '        require(currentAllowance >= subtractedValue);\n', '        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n', '\n', '        return true;\n', '    }\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0));\n', '        require(recipient != address(0));\n', '\n', '        uint256 senderBalance = _balances[sender];\n', '        require(senderBalance >= amount);\n', '        _balances[sender] = senderBalance - amount;\n', '        _balances[recipient] += amount;\n', '\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0));\n', '        require(spender != address(0));\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '}']