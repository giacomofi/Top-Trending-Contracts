['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "./UhiveToken.sol";\n', '\n', 'contract UhiveVest {\n', '\n', '    // The token being sold\n', '    UhiveToken internal _token;\n', '\n', '    // Owner of this contract\n', '    address _owner;\n', '\n', '    uint256 internal _releaseDate;\n', '\n', '    function releaseDate() public view virtual returns (uint256) {\n', '        return _releaseDate;\n', '    }\n', '\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    function token() public view virtual returns (UhiveToken) {\n', '        return _token;\n', '    }\n', '\n', '    // Functions with this modifier can only be executed when the vesting period elapses\n', '    modifier onlyWhenReleased {\n', '        require(block.timestamp >= _releaseDate, "UhiveVest: Not ready for release...");\n', '        _;\n', '    }\n', '\n', '    // Functions with this modifier can only be executed by the owner\n', '    modifier onlyOwner() {\n', '        require(msg.sender == _owner, "UhiveVest: Method only allowed for contract owner..");\n', '        _;\n', '    }\n', '\n', '    constructor(address token_address_, uint256 releaseDate_){\n', '        _token = UhiveToken(token_address_);\n', '        _owner = msg.sender;\n', '        _releaseDate = releaseDate_;\n', '    }\n', '\n', '    function extendVestingPeriod(uint256 newReleaseDate_) onlyOwner public {\n', '        require(_releaseDate < newReleaseDate_, "UhiveVest: New date is before current release date...");\n', '        _releaseDate = newReleaseDate_;\n', '    }\n', '\n', '    /**\n', '    * Event for token transfer logging\n', '    * @param purchaser who paid for the tokens\n', '    * @param beneficiary who got the tokens\n', '    * @param value weis paid for purchase\n', '    * @param amount amount of tokens purchased\n', '    */\n', '    event TokenTransfer(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '    //Transfer tokens to a specified address, works only after vesting period elapses\n', '    function forwardTokens(address _beneficiary, uint256 amount) onlyOwner onlyWhenReleased public {\n', '        _preValidateTokenTransfer(_beneficiary, amount);\n', '        _deliverTokens(_beneficiary, amount);\n', '    }\n', '\n', '    //Withdraw tokens to owner wallet, works only after vesting period elapses\n', '    function withdrawTokens() onlyOwner onlyWhenReleased public {\n', '        uint256 vested = _token.balanceOf(address(this));\n', '        require(vested > 0, "UhiveVest: Vested amount = 0...");\n', '        _deliverTokens(_owner, vested);\n', '    }\n', '\n', '    //Change the owner wallet address\n', '    function changeOwner(address _newOwner) onlyOwner public {\n', '        require(_newOwner != address(0), "UhiveVest: Invalid owner address..");\n', '        _owner = _newOwner;\n', '    }\n', '\n', '    // -----------------------------------------\n', '    // Internal interface (extensible)\n', '    // -----------------------------------------\n', '\n', '    //Assertain the validity of the transfer\n', '    function _preValidateTokenTransfer(address _beneficiary, uint256 _tokenAmount) internal pure {\n', '        require(_beneficiary != address(0), "UhiveVest: Invalid beneficiary address...");\n', '        require(_tokenAmount > 0, "UhiveVest: Amount = 0...");\n', '    }\n', '\n', '    //Forward the tokens from the contract to the beneficiary\n', '    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '        require(_token.transfer(_beneficiary, _tokenAmount) == true, "UhiveVest: Failed forwarding tokens");\n', '        emit TokenTransfer(msg.sender, _beneficiary, 0, _tokenAmount);\n', '    }\n', '\n', '}']