['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-30\n', '*/\n', '\n', '// File: @openzeppelin/contracts/access/Roles.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    /**\n', '     * @dev Give an account access to this role.\n', '     */\n', '    function add(Role storage role, address account) internal {\n', '        require(!has(role, account), "Roles: account already has role");\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '    /**\n', "     * @dev Remove an account's access to this role.\n", '     */\n', '    function remove(Role storage role, address account) internal {\n', '        require(has(role, account), "Roles: account does not have role");\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Check if an account has this role.\n', '     * @return bool\n', '     */\n', '    function has(Role storage role, address account) internal view returns (bool) {\n', '        require(account != address(0), "Roles: account is the zero address");\n', '        return role.bearer[account];\n', '    }\n', '}\n', '\n', '// File: contracts/roles/OwnerRole.sol\n', '\n', 'pragma solidity 0.5.8;\n', '\n', '\n', 'contract OwnerRole {\n', '    using Roles for Roles.Role;\n', '\n', '    event OwnerAdded(address indexed addedOwner, address indexed addedBy);\n', '    event OwnerRemoved(address indexed removedOwner, address indexed removedBy);\n', '\n', '    Roles.Role private _owners;\n', '\n', '    modifier onlyOwner() {\n', '        require(isOwner(msg.sender), "OwnerRole: caller does not have the Owner role");\n', '        _;\n', '    }\n', '\n', '    function isOwner(address account) public view returns (bool) {\n', '        return _owners.has(account);\n', '    }\n', '\n', '    function addOwner(address account) public onlyOwner {\n', '        _addOwner(account);\n', '    }\n', '\n', '    function removeOwner(address account) public onlyOwner {\n', '        require(msg.sender != account, "Owners cannot remove themselves as owner");\n', '        _removeOwner(account);\n', '    }\n', '\n', '    function _addOwner(address account) internal {\n', '        _owners.add(account);\n', '        emit OwnerAdded(account, msg.sender);\n', '    }\n', '\n', '    function _removeOwner(address account) internal {\n', '        _owners.remove(account);\n', '        emit OwnerRemoved(account, msg.sender);\n', '    }\n', '}\n', '\n', '// File: contracts/1404/IERC1404.sol\n', '\n', 'pragma solidity 0.5.8;\n', '\n', 'interface IERC1404 {\n', '    /// @notice Detects if a transfer will be reverted and if so returns an appropriate reference code\n', '    /// @param from Sending address\n', '    /// @param to Receiving address\n', '    /// @param value Amount of tokens being transferred\n', '    /// @return Code by which to reference message for rejection reasoning\n', '    /// @dev Overwrite with your custom transfer restriction logic\n', '    function detectTransferRestriction (address from, address to, uint256 value) external view returns (uint8);\n', '\n', '    /// @notice Detects if a transferFrom will be reverted and if so returns an appropriate reference code\n', '    /// @param sender Transaction sending address\n', '    /// @param from Source of funds address\n', '    /// @param to Receiving address\n', '    /// @param value Amount of tokens being transferred\n', '    /// @return Code by which to reference message for rejection reasoning\n', '    /// @dev Overwrite with your custom transfer restriction logic\n', '    function detectTransferFromRestriction (address sender, address from, address to, uint256 value) external view returns (uint8);\n', '\n', '    /// @notice Returns a human-readable message for a given restriction code\n', '    /// @param restrictionCode Identifier for looking up a message\n', "    /// @return Text showing the restriction's reasoning\n", '    /// @dev Overwrite with your custom message and restrictionCode handling\n', '    function messageForTransferRestriction (uint8 restrictionCode) external view returns (string memory);\n', '}\n', '\n', 'interface IERC1404getSuccessCode {\n', '    /// @notice Return the uint256 that represents the SUCCESS_CODE\n', '    /// @return uint256 SUCCESS_CODE\n', '    function getSuccessCode () external view returns (uint256);\n', '}\n', '\n', '/**\n', ' * @title IERC1404Success\n', ' * @dev Combines IERC1404 and IERC1404getSuccessCode interfaces, to be implemented by the TransferRestrictions contract\n', ' */\n', 'contract IERC1404Success is IERC1404getSuccessCode, IERC1404 {\n', '}\n', '\n', '// File: contracts/1404/IERC1404Validators.sol\n', '\n', 'pragma solidity 0.5.8;\n', '\n', '/**\n', ' * @title IERC1404Validators\n', ' * @dev Interfaces implemented by the token contract to be called by the TransferRestrictions contract\n', ' */\n', 'interface IERC1404Validators {\n', '    /// @notice Returns the token balance for an account\n', '    /// @param account The address to get the token balance of\n', '    /// @return uint256 representing the token balance for the account\n', '    function balanceOf (address account) external view returns (uint256);\n', '\n', '    /// @notice Returns a boolean indicating the paused state of the contract\n', '    /// @return true if contract is paused, false if unpaused\n', '    function paused () external view returns (bool);\n', '\n', '    /// @notice Determine if sender and receiver are whitelisted, return true if both accounts are whitelisted\n', '    /// @param from The address sending tokens.\n', '    /// @param to The address receiving tokens.\n', '    /// @return true if both accounts are whitelisted, false if not\n', '    function checkWhitelists (address from, address to) external view returns (bool);\n', '\n', '    /// @notice Determine if a users tokens are locked preventing a transfer\n', '    /// @param _address the address to retrieve the data from\n', '    /// @param amount the amount to send\n', '    /// @param balance the token balance of the sending account\n', '    /// @return true if user has sufficient unlocked token to transfer the requested amount, false if not\n', '    function checkTimelock (address _address, uint256 amount, uint256 balance) external view returns (bool);\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20Mintable}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for `sender`'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '     /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n', "     * from the caller's allowance.\n", '     *\n', '     * See {_burn} and {_approve}.\n', '     */\n', '    function _burnFrom(address account, uint256 amount) internal {\n', '        _burn(account, amount);\n', '        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, "ERC20: burn amount exceeds allowance"));\n', '    }\n', '}\n', '\n', '// File: contracts/roles/RevokerRole.sol\n', '\n', 'pragma solidity 0.5.8;\n', '\n', '\n', 'contract RevokerRole is OwnerRole {\n', '\n', '    event RevokerAdded(address indexed addedRevoker, address indexed addedBy);\n', '    event RevokerRemoved(address indexed removedRevoker, address indexed removedBy);\n', '\n', '    Roles.Role private _revokers;\n', '\n', '    modifier onlyRevoker() {\n', '        require(isRevoker(msg.sender), "RevokerRole: caller does not have the Revoker role");\n', '        _;\n', '    }\n', '\n', '    function isRevoker(address account) public view returns (bool) {\n', '        return _revokers.has(account);\n', '    }\n', '\n', '    function addRevoker(address account) public onlyOwner {\n', '        _addRevoker(account);\n', '    }\n', '\n', '    function removeRevoker(address account) public onlyOwner {\n', '        _removeRevoker(account);\n', '    }\n', '\n', '    function _addRevoker(address account) internal {\n', '        _revokers.add(account);\n', '        emit RevokerAdded(account, msg.sender);\n', '    }\n', '\n', '    function _removeRevoker(address account) internal {\n', '        _revokers.remove(account);\n', '        emit RevokerRemoved(account, msg.sender);\n', '    }\n', '}\n', '\n', '// File: contracts/capabilities/Revocable.sol\n', '\n', 'pragma solidity 0.5.8;\n', '\n', '\n', '\n', '/**\n', ' * Allows an administrator to move tokens from a target account to their own.\n', ' */\n', 'contract Revocable is ERC20, RevokerRole {\n', '\n', '  event Revoke(address indexed revoker, address indexed from, uint256 amount);\n', '\n', '  function revoke(\n', '    address _from,\n', '    uint256 _amount\n', '  )\n', '    public\n', '    onlyRevoker\n', '    returns (bool)\n', '  {\n', '    ERC20._transfer(_from, msg.sender, _amount);\n', '    emit Revoke(msg.sender, _from, _amount);\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: contracts/roles/WhitelisterRole.sol\n', '\n', 'pragma solidity 0.5.8;\n', '\n', '\n', 'contract WhitelisterRole is OwnerRole {\n', '\n', '    event WhitelisterAdded(address indexed addedWhitelister, address indexed addedBy);\n', '    event WhitelisterRemoved(address indexed removedWhitelister, address indexed removedBy);\n', '\n', '    Roles.Role private _whitelisters;\n', '\n', '    modifier onlyWhitelister() {\n', '        require(isWhitelister(msg.sender), "WhitelisterRole: caller does not have the Whitelister role");\n', '        _;\n', '    }\n', '\n', '    function isWhitelister(address account) public view returns (bool) {\n', '        return _whitelisters.has(account);\n', '    }\n', '\n', '    function addWhitelister(address account) public onlyOwner {\n', '        _addWhitelister(account);\n', '    }\n', '\n', '    function removeWhitelister(address account) public onlyOwner {\n', '        _removeWhitelister(account);\n', '    }\n', '\n', '    function _addWhitelister(address account) internal {\n', '        _whitelisters.add(account);\n', '        emit WhitelisterAdded(account, msg.sender);\n', '    }\n', '\n', '    function _removeWhitelister(address account) internal {\n', '        _whitelisters.remove(account);\n', '        emit WhitelisterRemoved(account, msg.sender);\n', '    }\n', '}\n', '\n', '// File: contracts/capabilities/Whitelistable.sol\n', '\n', 'pragma solidity 0.5.8;\n', '\n', '\n', '/**\n', ' * @title Whitelistable\n', ' * @dev Allows tracking whether addressess are allowed to hold tokens.\n', ' */\n', 'contract Whitelistable is WhitelisterRole {\n', '\n', '    event WhitelistUpdate(address _address, bool status, string data);\n', '\n', '    // Tracks whether an address is whitelisted\n', '    // data field can track any external field (like a hash of personal details)\n', '    struct whiteListItem {\n', '        bool status;\n', '        string data;\n', '    }\n', '\n', '    // white list status\n', '    mapping (address => whiteListItem) public whitelist;\n', '\n', '    /**\n', '    * @dev Set a white list address\n', '    * @param to the address to be set\n', '    * @param status the whitelisting status (true for yes, false for no)\n', '    * @param data a string with data about the whitelisted address\n', '    */\n', '    function setWhitelist(address to, bool status, string memory data)  public onlyWhitelister returns(bool){\n', '        whitelist[to] = whiteListItem(status, data);\n', '        emit WhitelistUpdate(to, status, data);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Get the status of the whitelist\n', '    * @param _address the address to be check\n', '    */\n', '    function getWhitelistStatus(address _address) public view returns(bool){\n', '        return whitelist[_address].status;\n', '    }\n', '\n', '    /**\n', '    * @dev Get the data of and address in the whitelist\n', '    * @param _address the address to retrieve the data from\n', '    */\n', '    function getWhitelistData(address _address) public view returns(string memory){\n', '        return whitelist[_address].data;\n', '    }\n', '\n', '    /**\n', '    * @dev Determine if sender and receiver are whitelisted, return true if both accounts are whitelisted\n', '    * @param from The address sending tokens.\n', '    * @param to The address receiving tokens.\n', '    */\n', '    function checkWhitelists(address from, address to) external view returns (bool) {\n', '        return whitelist[from].status && whitelist[to].status;\n', '    }\n', '}\n', '\n', '// File: contracts/roles/TimelockerRole.sol\n', '\n', 'pragma solidity 0.5.8;\n', '\n', '\n', 'contract TimelockerRole is OwnerRole {\n', '\n', '    event TimelockerAdded(address indexed addedTimelocker, address indexed addedBy);\n', '    event TimelockerRemoved(address indexed removedTimelocker, address indexed removedBy);\n', '\n', '    Roles.Role private _timelockers;\n', '\n', '    modifier onlyTimelocker() {\n', '        require(isTimelocker(msg.sender), "TimelockerRole: caller does not have the Timelocker role");\n', '        _;\n', '    }\n', '\n', '    function isTimelocker(address account) public view returns (bool) {\n', '        return _timelockers.has(account);\n', '    }\n', '\n', '    function addTimelocker(address account) public onlyOwner {\n', '        _addTimelocker(account);\n', '    }\n', '\n', '    function removeTimelocker(address account) public onlyOwner {\n', '        _removeTimelocker(account);\n', '    }\n', '\n', '    function _addTimelocker(address account) internal {\n', '        _timelockers.add(account);\n', '        emit TimelockerAdded(account, msg.sender);\n', '    }\n', '\n', '    function _removeTimelocker(address account) internal {\n', '        _timelockers.remove(account);\n', '        emit TimelockerRemoved(account, msg.sender);\n', '    }\n', '}\n', '\n', '// File: contracts/capabilities/Timelockable.sol\n', '\n', 'pragma solidity 0.5.8;\n', '\n', '\n', '\n', '/**\n', ' * @title INX Timelockable\n', ' * @dev Lockup all or a portion of an accounts tokens until an expiration date\n', ' */\n', 'contract Timelockable is TimelockerRole {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    struct lockupItem {\n', '        uint256 amount;\n', '        uint256 releaseTime;\n', '    }\n', '\n', '    mapping (address => lockupItem) lockups;\n', '\n', '    event AccountLock(address _address, uint256 amount, uint256 releaseTime);\n', '    event AccountRelease(address _address, uint256 amount);\n', '\n', '\n', '    /**\n', '    * @dev lock address and amount and lock it, set the release time\n', '    * @param _address the address to lock\n', '    * @param amount the amount to lock\n', '    * @param releaseTime of the locked amount (in seconds since the epoch)\n', '    */\n', '    function lock( address _address, uint256 amount, uint256 releaseTime) public onlyTimelocker returns (bool) {\n', '        require(releaseTime > block.timestamp, "Release time needs to be in the future");\n', '        require(_address != address(0), "Address must be valid for lockup");\n', '\n', '        lockupItem memory _lockupItem = lockupItem(amount, releaseTime);\n', '        lockups[_address] = _lockupItem;\n', '        emit AccountLock(_address, amount, releaseTime);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev release locked amount\n', '    * @param _address the address to retrieve the data from\n', '    * @param amountToRelease the amount to check\n', '    */\n', '    function release( address _address, uint256 amountToRelease) public onlyTimelocker returns(bool) {\n', '        require(_address != address(0), "Address must be valid for release");\n', '\n', '        uint256 _lockedAmount = lockups[_address].amount;\n', '\n', '        // nothing to release\n', '        if(_lockedAmount == 0){\n', '            emit AccountRelease(_address, 0);\n', '            return true;\n', '        }\n', '\n', '        // extract release time for re-locking\n', '        uint256 _releaseTime = lockups[_address].releaseTime;\n', '\n', '        // delete the lock entry\n', '        delete lockups[_address];\n', '\n', '        if(_lockedAmount >= amountToRelease){\n', '           uint256 newLockedAmount = _lockedAmount.sub(amountToRelease);\n', '\n', '           // re-lock the new locked balance\n', '           lock(_address, newLockedAmount, _releaseTime);\n', '           emit AccountRelease(_address, amountToRelease);\n', '           return true;\n', '        } else {\n', '            // if they requested to release more than the locked amount emit the event with the locked amount that has been released\n', '            emit AccountRelease(_address, _lockedAmount);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev return true if the given account has enough unlocked tokens to send the requested amount\n', '    * @param _address the address to retrieve the data from\n', '    * @param amount the amount to send\n', '    * @param balance the token balance of the sending account\n', '    */\n', '    function checkTimelock(address _address, uint256 amount, uint256 balance) external view returns (bool) {\n', '        // if the user does not have enough tokens to send regardless of lock return true here\n', '        // the failure will still fail but this should make it explicit that the transfer failure is not\n', '        // due to locked tokens but because of too low token balance\n', '        if (balance < amount) {\n', '            return true;\n', '        }\n', '\n', '        // get the sending addresses token balance that is not locked\n', '        uint256 nonLockedAmount = balance.sub(lockups[_address].amount);\n', '\n', '        // determine if the sending address has enough free tokens to send the entire amount\n', '        bool notLocked = amount <= nonLockedAmount;\n', '\n', '        // if the timelock is greater then the release time the time lock is expired\n', '        bool timeLockExpired = block.timestamp > lockups[_address].releaseTime;\n', '\n', '        // if the timelock is expired OR the requested amount is available the transfer is not locked\n', '        if(timeLockExpired || notLocked){\n', '            return true;\n', '\n', '        // if the timelocked is not expired AND the requested amount is not available the tranfer is locked\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev get address lockup info\n', '    * @param _address the address to retrieve the data from\n', '    * @return array of 2 uint256, release time (in seconds since the epoch) and amount (in INX)\n', '    */\n', '    function checkLockup(address _address) public view returns(uint256, uint256) {\n', '        // copy lockup data into memory\n', '        lockupItem memory _lockupItem = lockups[_address];\n', '\n', '        return (_lockupItem.releaseTime, _lockupItem.amount);\n', '    }\n', '}\n', '\n', '// File: contracts/roles/PauserRole.sol\n', '\n', 'pragma solidity 0.5.8;\n', '\n', '\n', 'contract PauserRole is OwnerRole {\n', '\n', '    event PauserAdded(address indexed addedPauser, address indexed addedBy);\n', '    event PauserRemoved(address indexed removedPauser, address indexed removedBy);\n', '\n', '    Roles.Role private _pausers;\n', '\n', '    modifier onlyPauser() {\n', '        require(isPauser(msg.sender), "PauserRole: caller does not have the Pauser role");\n', '        _;\n', '    }\n', '\n', '    function isPauser(address account) public view returns (bool) {\n', '        return _pausers.has(account);\n', '    }\n', '\n', '    function addPauser(address account) public onlyOwner {\n', '        _addPauser(account);\n', '    }\n', '\n', '    function removePauser(address account) public onlyOwner {\n', '        _removePauser(account);\n', '    }\n', '\n', '    function _addPauser(address account) internal {\n', '        _pausers.add(account);\n', '        emit PauserAdded(account, msg.sender);\n', '    }\n', '\n', '    function _removePauser(address account) internal {\n', '        _pausers.remove(account);\n', '        emit PauserRemoved(account, msg.sender);\n', '    }\n', '}\n', '\n', '// File: contracts/capabilities/Pausable.sol\n', '\n', 'pragma solidity 0.5.8;\n', '\n', '\n', '/**\n', ' * Allows transfers on a token contract to be paused by an administrator.\n', ' */\n', 'contract Pausable is PauserRole {\n', '    event Paused();\n', '    event Unpaused();\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @return true if the contract is paused, false otherwise.\n', '     */\n', '    function paused() external view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev internal function, triggers paused state\n', '     */\n', '    function _pause() internal {\n', '        _paused = true;\n', '        emit Paused();\n', '    }\n', '\n', '    /**\n', '     * @dev internal function, returns to unpaused state\n', '     */\n', '    function _unpause() internal {\n', '        _paused = false;\n', '        emit Unpaused();\n', '    }\n', '\n', '     /**\n', '     * @dev called by pauser role to pause, triggers stopped state\n', '     */\n', '    function pause() public onlyPauser {\n', '        _pause();\n', '    }\n', '\n', '    /**\n', '     * @dev called by pauer role to unpause, returns to normal state\n', '     */\n', '    function unpause() public onlyPauser {\n', '        _unpause();\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/ERC20Detailed.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', ' * @dev Optional functions from the ERC20 standard.\n', ' */\n', 'contract ERC20Detailed is IERC20 {\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\n', '     * these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name, string memory symbol, uint8 decimals) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '}\n', '\n', '// File: contracts/InxToken.sol\n', '\n', 'pragma solidity 0.5.8;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract InxToken is IERC1404, IERC1404Validators, IERC20, ERC20Detailed, OwnerRole, Revocable, Whitelistable, Timelockable, Pausable {\n', '\n', '    // Token Details\n', '    string constant TOKEN_NAME = "INX Token";\n', '    string constant TOKEN_SYMBOL = "INX";\n', '    uint8 constant TOKEN_DECIMALS = 18;\n', '\n', '    // Token supply - 2 Hundred Million Tokens, with 18 decimal precision\n', '    uint256 constant HUNDRED_MILLION = 100000000;\n', '    uint256 constant TOKEN_SUPPLY = 2 * HUNDRED_MILLION * (10 ** uint256(TOKEN_DECIMALS));\n', '\n', '    // This tracks the external contract where restriction logic is executed\n', '    IERC1404Success private transferRestrictions;\n', '\n', '    // Event tracking when restriction logic contract is updated\n', '    event RestrictionsUpdated (address newRestrictionsAddress, address updatedBy);\n', '\n', '    /**\n', '    Constructor for the token to set readable details and mint all tokens\n', '    to the specified owner.\n', '    */\n', '    constructor(address owner) public\n', '        ERC20Detailed(TOKEN_NAME, TOKEN_SYMBOL, TOKEN_DECIMALS)\n', '    {\n', '        _mint(owner, TOKEN_SUPPLY);\n', '        _addOwner(owner);\n', '    }\n', '\n', '    /**\n', '    Function that can only be called by an owner that updates the address\n', '    with the ERC1404 Transfer Restrictions defined\n', '    */\n', '    function updateTransferRestrictions(address _newRestrictionsAddress)\n', '        public\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        transferRestrictions = IERC1404Success(_newRestrictionsAddress);\n', '        emit RestrictionsUpdated(address(transferRestrictions), msg.sender);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    The address with the Transfer Restrictions contract\n', '    */\n', '    function getRestrictionsAddress () public view returns (address) {\n', '        return address(transferRestrictions);\n', '    }\n', '\n', '\n', '    /**\n', '    This function detects whether a transfer should be restricted and not allowed.\n', '    If the function returns SUCCESS_CODE (0) then it should be allowed.\n', '    */\n', '    function detectTransferRestriction (address from, address to, uint256 amount)\n', '        public\n', '        view\n', '        returns (uint8)\n', '    {\n', '        // Verify the external contract is valid\n', "        require(address(transferRestrictions) != address(0), 'TransferRestrictions contract must be set');\n", '\n', '        // call detectTransferRestriction on the current transferRestrictions contract\n', '        return transferRestrictions.detectTransferRestriction(from, to, amount);\n', '    }\n', '\n', '    /**\n', '    This function detects whether a transferFrom should be restricted and not allowed.\n', '    If the function returns SUCCESS_CODE (0) then it should be allowed.\n', '    */\n', '    function detectTransferFromRestriction (address sender, address from, address to, uint256 amount)\n', '        public\n', '        view\n', '        returns (uint8)\n', '    {\n', '        // Verify the external contract is valid\n', "        require(address(transferRestrictions) != address(0), 'TransferRestrictions contract must be set');\n", '\n', '        // call detectTransferFromRestriction on the current transferRestrictions contract\n', '        return  transferRestrictions.detectTransferFromRestriction(sender, from, to, amount);\n', '    }\n', '\n', '    /**\n', '    This function allows a wallet or other client to get a human readable string to show\n', '    a user if a transfer was restricted.  It should return enough information for the user\n', '    to know why it failed.\n', '    */\n', '    function messageForTransferRestriction (uint8 restrictionCode)\n', '        external\n', '        view\n', '        returns (string memory)\n', '    {\n', '        // call messageForTransferRestriction on the current transferRestrictions contract\n', '        return transferRestrictions.messageForTransferRestriction(restrictionCode);\n', '    }\n', '\n', '    /**\n', '    Evaluates whether a transfer should be allowed or not.\n', '    */\n', '    modifier notRestricted (address from, address to, uint256 value) {\n', '        uint8 restrictionCode = transferRestrictions.detectTransferRestriction(from, to, value);\n', '        require(restrictionCode == transferRestrictions.getSuccessCode(), transferRestrictions.messageForTransferRestriction(restrictionCode));\n', '        _;\n', '    }\n', '\n', '    /**\n', '    Evaluates whether a transferFrom should be allowed or not.\n', '    */\n', '    modifier notRestrictedTransferFrom (address sender, address from, address to, uint256 value) {\n', '        uint8 transferFromRestrictionCode = transferRestrictions.detectTransferFromRestriction(sender, from, to, value);\n', '        require(transferFromRestrictionCode == transferRestrictions.getSuccessCode(), transferRestrictions.messageForTransferRestriction(transferFromRestrictionCode));\n', '        _;\n', '    }\n', '\n', '    /**\n', '    Overrides the parent class token transfer function to enforce restrictions.\n', '    */\n', '    function transfer (address to, uint256 value)\n', '        public\n', '        notRestricted(msg.sender, to, value)\n', '        returns (bool success)\n', '    {\n', '        success = ERC20.transfer(to, value);\n', '    }\n', '\n', '    /**\n', '    Overrides the parent class token transferFrom function to enforce restrictions.\n', '    */\n', '    function transferFrom (address from, address to, uint256 value)\n', '        public\n', '        notRestrictedTransferFrom(msg.sender, from, to, value)\n', '        returns (bool success)\n', '    {\n', '        success = ERC20.transferFrom(from, to, value);\n', '    }\n', '}\n', '\n', '// File: contracts/multiAction.sol\n', '\n', 'pragma solidity 0.5.8;\n', '\n', '\n', '\n', 'contract MultiAction is OwnerRole {\n', '\n', '  InxToken token;\n', '\n', '  /**\n', '   * Sets the owner and the token address\n', '   */\n', '  constructor(address _owner, InxToken _token) public\n', '  {\n', '      _addOwner(_owner);\n', '      token = _token;\n', '  }\n', '\n', '  /**\n', '   * Internal function to sweep token balance\n', '   */\n', '  function _sweep(address sweeepTo) internal {\n', '    token.transfer(sweeepTo, token.balanceOf(address(this)));\n', '  }\n', '\n', '  /**\n', '   * Owners can sweep any tokens\n', '   */\n', '  function sweep() public onlyOwner {\n', '    _sweep(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * Owners can bulk revoke\n', '   */\n', '  function multiRevoke(address[] memory fromAddresses, uint256[] memory amounts) public onlyOwner {\n', '    require(fromAddresses.length == amounts.length, "Invalid array length");\n', '\n', '    for(uint i = 0 ; i < fromAddresses.length; i++) {\n', '      token.revoke(fromAddresses[i], amounts[i]);\n', '    }\n', '    _sweep(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * Owners can bulk set whitelists\n', '   */\n', '  function multiWhitelist(address[] memory addresses, bool[] memory statuses) public onlyOwner {\n', '    require(addresses.length == statuses.length, "Invalid array length");\n', '\n', '    for(uint i = 0 ; i < addresses.length; i++) {\n', '      token.setWhitelist(addresses[i], statuses[i], "");\n', '    }\n', '  }\n', '\n', '  /**\n', '   * Owners can bulk transfer\n', '   */\n', '  function multiSend(address[] memory addresses, uint256[] memory amounts) public onlyOwner {\n', '    require(addresses.length == amounts.length, "Invalid array length");\n', '\n', '    for(uint i = 0 ; i < addresses.length; i++) {\n', '      token.transferFrom(msg.sender, addresses[i], amounts[i]);\n', '    }\n', '  }\n', '}']