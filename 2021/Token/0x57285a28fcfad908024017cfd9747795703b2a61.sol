['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-28\n', '*/\n', '\n', 'pragma solidity ^0.6.0;\n', 'contract MooMoo {\n', '    string  public name = "Kwame Coin";                      // Set the name for display purposes\n', '    string  public symbol = "KWAME";                             // Set the symbol for display purposes\n', '    uint256 public totalSupply_ = 2100000000000000000000000000;    // Give the creator all initial tokens (100000 for example)\n', '    uint8   public decimals = 18;                               // Amount of decimals for display purposes\n', '\n', '    event Transfer(\n', '        address indexed _from,\n', '        address indexed _to,\n', '        uint256 _value\n', '    );\n', '\n', '    event Approval(\n', '        address indexed _owner,\n', '        address indexed _spender,\n', '        uint256 _value\n', '    );\n', '\n', '    mapping(address => uint256) public balances;\n', '    mapping(address => mapping(address => uint256)) public allowed;\n', '\n', '    constructor() public {\n', '        balances[msg.sender] = totalSupply_;\n', '    }\n', '    \n', '    // @return total amount of tokens\n', '    \n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '    \n', '    // @param address_owner The address from which the balance will be retrieved\n', '    // @return The balance\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '    \n', '    \n', '    \n', '    // @notice send `_value` token to `_to` from `msg.sender`\n', '    // @param _to The address of the recipient\n', '    // @param _value The amount of token to be transferred\n', '    // @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    // @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '    // @param _spender The address of the account able to transfer the tokens\n', '    // @param _value The amount of wei to be approved for transfer\n', '    // @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    // @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    // @param _from The address of the sender\n', '    // @param _to The address of the recipient\n', '    // @param _value The amount of token to be transferred\n', '    // @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        balances[_from] -= _value;\n', '        balances[_to] += _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    // @param _owner The address of the account owning tokens\n', '    // @param _spender The address of the account able to transfer the tokens\n', '    // @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '}']