['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-14\n', '*/\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract OwnableHKDD {\n', '    \n', '    address public owner;\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '    \n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '//\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    \n', '    uint256 public _totalSupply;\n', '    string public name;\n', '    mapping(address => uint256) balances;\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address owner) public view returns (uint256);\n', '    function transfer(address to, uint256 _value) public returns (bool);\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint256 _value);\n', '}\n', '\n', 'contract StandardERC20 is ERC20Interface {\n', '    \n', '     function allowance(address owner, address spender) public view returns (uint256);\n', '     function transferFrom(address from, address to, uint256 _value) public returns (bool);\n', '     function approve(address spender, uint256 _value) public returns (bool sucess);\n', '     \n', '     event Approval(address indexed owner, address indexed spender, uint256 _value);\n', '}\n', '\n', 'contract BasicHKDD is OwnableHKDD, ERC20Interface {\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    mapping(address => uint256) public balances;\n', '}\n', '\n', '\n', 'contract StandardHKDD is BasicHKDD, StandardERC20 {\n', '    \n', '    \n', '    mapping(address => uint256) balances;\n', '}\n', '\n', 'contract Pausable is OwnableHKDD {\n', '    \n', '    event Pause();\n', '    event Unpause();\n', '    \n', '    bool public paused = false;\n', '    \n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '    \n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '    \n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '    \n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', 'contract BlackList is OwnableHKDD, ERC20Interface {\n', '    \n', '    function getBlackListStatus(address _maker) public view returns (bool) {\n', '        return isBlackListed[_maker];\n', '    }\n', '    \n', '    function getOwner() public view returns (address) {\n', '        return owner;\n', '    }\n', '    \n', '    mapping (address => bool) public isBlackListed;\n', '    \n', '    function addBlackList (address _evilUser) public onlyOwner {\n', '        isBlackListed[_evilUser] = true;\n', '        emit AddedBlackList(_evilUser);\n', '    }\n', '    \n', '    function removeBlackList (address _clearedUser) public onlyOwner {\n', '        isBlackListed[_clearedUser] = false;\n', '        emit RemovedBlackList(_clearedUser);\n', '    }\n', '    \n', '    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\n', '        require(isBlackListed[_blackListedUser]);\n', '        uint256 dirtyFunds = balanceOf(_blackListedUser);\n', '        balances[_blackListedUser] = 0;\n', '        _totalSupply -= dirtyFunds;\n', '        emit DestroyedBlackFunds(_blackListedUser, dirtyFunds);\n', '    }\n', '    \n', '    event DestroyedBlackFunds(address _blackListedUser, uint256 _balance);\n', '    \n', '    event AddedBlackList(address _user);\n', '    \n', '    event RemovedBlackList(address _user);\n', '    \n', '}\n', '\n', '\n', 'contract DEFINIS is Pausable, StandardHKDD, BlackList {\n', '    \n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public _totalSupply;\n', '    \n', '\n', '    mapping(address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    \n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '     \n', '   constructor(address payable _wallet, address _token) public {\n', '       \n', '      \n', '       \n', '        wallet = _wallet;\n', '        token = _token;\n', '        owner = msg.sender;\n', '        name = "DEFINIS";\n', '        symbol = "HKDD";\n', '        decimals = 18;\n', '        _totalSupply = 2000000000000000000000000;\n', '        \n', '        balances[owner] = _totalSupply;\n', '    }\n', '    \n', '    address payable wallet;\n', '    address token;\n', '    \n', '    \n', '    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        \n', '      require(!isBlackListed[msg.sender]);\n', '      \n', '      balances[msg.sender] = balances[msg.sender].sub(_value);\n', '      balances[_to] = balances[_to].add(_value);\n', '\n', '      emit Transfer(msg.sender, _to, _value);\n', '      return true;\n', '    }\n', '    \n', '\n', '    function mint(address _to, uint256 _value) public onlyOwner {\n', '        require(msg.sender == owner);\n', '        require(_totalSupply + _value > _totalSupply);\n', '        require(balances[owner] + _value > balances[owner]);\n', '        \n', '        balances[_to] += _value;\n', '        _totalSupply += _value;\n', '        emit Transfer(address(0), _to, _value);\n', '        }\n', '        \n', '    function burn(address _to, uint256 _value) public onlyOwner {\n', '        require(msg.sender == owner);\n', '        require(_totalSupply >= _value);\n', '        require(balances[owner] >= _value);\n', '        \n', '        _totalSupply -= _value;\n', '        balances[_to] -= _value;\n', '        emit Transfer(_to, address(0), _value);\n', '    }\n', '    \n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '       require(!isBlackListed[msg.sender]);\n', '       allowed[msg.sender][_spender] = _value;\n', '       emit Approval(msg.sender, _spender, _value);\n', '       return true;\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    \n', '    require(!isBlackListed[msg.sender]);    \n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '}']