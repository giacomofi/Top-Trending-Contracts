['pragma solidity 0.6.5;\n', '\n', 'import "./ERC20Lockable.sol";\n', 'import "./ERC20Burnable.sol";\n', 'import "./ERC20Mintable.sol";\n', 'import "./Pausable.sol";\n', 'import "./Freezable.sol";\n', '\n', 'contract EIR is\n', '    ERC20Lockable,\n', '    ERC20Burnable,\n', '    ERC20Mintable,\n', '    Freezable\n', '{\n', '    string constant private _name = "EIR";\n', '    string constant private _symbol = "EIR";\n', '    uint8 constant private _decimals = 5;\n', '    uint256 constant private _initial_supply = 2_000_000_000;\n', '\n', '    constructor() public Ownable() {\n', '        _cap = 2_000_000_000 * (10**uint256(_decimals));\n', '        _mint(msg.sender, _initial_supply * (10**uint256(_decimals)));\n', '    }\n', '\n', '    function transfer(address to, uint256 amount)\n', '        override\n', '        external\n', '        whenNotFrozen(msg.sender)\n', '        whenNotPaused\n', '        checkLock(msg.sender, amount)\n', '        returns (bool success)\n', '    {\n', '        require(\n', '            to != address(0),\n', '            "EIR/transfer : Should not send to zero address"\n', '        );\n', '        _transfer(msg.sender, to, amount);\n', '        success = true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 amount)\n', '        override\n', '        external\n', '        whenNotFrozen(from)\n', '        whenNotPaused\n', '        checkLock(from, amount)\n', '        returns (bool success)\n', '    {\n', '        require(\n', '            to != address(0),\n', '            "EIR/transferFrom : Should not send to zero address"\n', '        );\n', '        _transfer(from, to, amount);\n', '        _approve(\n', '            from,\n', '            msg.sender,\n', '            _allowances[from][msg.sender].sub(\n', '                amount,\n', '                "EIR/transferFrom : Cannot send more than allowance"\n', '            )\n', '        );\n', '        success = true;\n', '    }\n', '\n', '    function approve(address spender, uint256 amount)\n', '        override\n', '        external\n', '        returns (bool success)\n', '    {\n', '        require(\n', '            spender != address(0),\n', '            "EIR/approve : Should not approve zero address"\n', '        );\n', '        _approve(msg.sender, spender, amount);\n', '        success = true;\n', '    }\n', '\n', '    function name() override external view returns (string memory tokenName) {\n', '        tokenName = _name;\n', '    }\n', '\n', '    function symbol() override external view returns (string memory tokenSymbol) {\n', '        tokenSymbol = _symbol;\n', '    }\n', '\n', '    function decimals() override external view returns (uint8 tokenDecimals) {\n', '        tokenDecimals = _decimals;\n', '    }\n', '}']