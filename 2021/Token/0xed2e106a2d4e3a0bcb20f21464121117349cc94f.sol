['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-27\n', '*/\n', '\n', 'pragma solidity 0.8.0;\n', '\n', '// SPDX-License-Identifier: none\n', '\n', 'contract Owned {\n', '    address private _owner;\n', '    \n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    \n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    address owner;\n', '   \n', '    function changeOwnership(address payable _newOwner) public onlyOwner {\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', 'contract ERC20{\n', '    string public symbol;\n', '    string public name;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '    mapping (address=>uint256) balances;\n', '    mapping (address=>mapping (address=>uint256)) allowed;\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    \n', '    function balanceOf(address _owner) view public returns (uint256 balance) {return balances[_owner];}\n', '    \n', '    function _transfer(address _to, uint256 _amount) internal returns (bool success) {\n', '        require (balances[msg.sender]>=_amount&&_amount>0&&balances[_to]+_amount>balances[_to]);\n', '        balances[msg.sender]-=_amount;\n', '        balances[_to]+=_amount;\n', '        emit Transfer(msg.sender,_to,_amount);\n', '        return true;\n', '    }\n', '  \n', '    function transferFrom(address _from,address _to,uint256 _amount) internal returns (bool success) {\n', '        require (balances[_from]>=_amount&&allowed[_from][msg.sender]>=_amount&&_amount>0&&balances[_to]+_amount>balances[_to]);\n', '        balances[_from]-=_amount;\n', '        allowed[_from][msg.sender]-=_amount;\n', '        balances[_to]+=_amount;\n', '        emit Transfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '  \n', '    function approve(address _spender, uint256 _amount) public returns (bool success) {\n', '        allowed[msg.sender][_spender]=_amount;\n', '        emit Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) view public returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        totalSupply += amount;\n', '        balances[account] += amount;\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '    \n', '    \n', '     function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        uint256 accountBalance = balances[account];\n', '        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");\n', '        balances[account] = accountBalance - amount;\n', '        totalSupply -= amount;\n', '\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', 'contract Raaskoin  is Owned,ERC20{\n', '\n', '    constructor() {\n', '        symbol = "RAAS";\n', '        name = "Raaskoin";\n', '        decimals = 18;                                    \n', '        totalSupply = 100000000 * 10**18;           \n', '       \n', '        owner = msg.sender;\n', '        balances[owner] = totalSupply;\n', '    }\n', '    \n', '    function transfer(address to, uint amount) external returns (bool) {\n', '         _transfer(to, amount);\n', '        emit Transfer(msg.sender, to, amount);\n', '        return true;\n', '    }\n', '    \n', '    function mint(address to, uint amount) external {\n', "        require(msg.sender == owner, 'only admin');\n", '        _mint(to, amount);\n', '    }\n', '\n', '    function burn(uint amount) external {\n', '        _burn(msg.sender, amount);\n', '    }\n', '}']