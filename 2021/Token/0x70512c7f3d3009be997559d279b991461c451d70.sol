['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-02\n', '*/\n', '\n', 'pragma solidity 0.5.16;\n', '\n', 'contract ERC20 {\n', '\n', '    function transferFrom(address, address, uint256) external returns (bool);\n', '\n', '    function balanceOf(address) public view returns (uint256);\n', '\n', '    function allowance(address, address) external view returns (uint256);\n', '\n', '    function transfer(address, uint256) external returns (bool);\n', '}\n', '\n', 'contract Owned {\n', '\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed from, address indexed _to);\n', '\n', '    constructor(address _owner) public {\n', '        owner = _owner;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) external onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() external {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', 'contract Pausable is Owned {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    function pause() onlyOwner whenNotPaused external {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    function unpause() onlyOwner whenPaused external {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, "SafeMath: division by zero");\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract LockingEB21 is Pausable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    address public b21Contract;\n', '    address payable public feesAddress;\n', '    uint256 public feesInEth;\n', '    uint256 public feesInToken;\n', '    mapping(address => bool) public subAdmin;\n', '    mapping(address => uint256) public limitOnSubAdmin;\n', '\n', '\n', '    event LockTokens(address indexed from, address indexed to, uint256 value);\n', '\n', '    constructor(address B21, address payable _owner, address _subAdmin) public Owned(_owner) {\n', '\n', '        b21Contract = B21;\n', '        feesAddress = _owner;\n', '        feesInEth = 0.0001 ether;\n', '        feesInToken = 100000000000000000000;\n', '        subAdmin[_subAdmin] = true;\n', '        limitOnSubAdmin[_subAdmin] = 500000000000000000000000000;\n', '    }\n', '\n', '    function setbaseFees(uint256 valueForToken, uint256 valueForEth) external whenNotPaused onlyOwner returns (bool) {\n', '\n', '        feesInEth = valueForEth;\n', '        feesInToken = valueForToken;\n', '        return true;\n', '    }\n', '\n', '    function addSubAdmin(address subAdminAddress, uint256 limit) external whenNotPaused onlyOwner returns (bool) {\n', '\n', '        subAdmin[subAdminAddress] = true;\n', '        limitOnSubAdmin[subAdminAddress] = limit;\n', '        return true;\n', '    }\n', '\n', '    function removeSubAdmin(address subAdminAddress) external whenNotPaused onlyOwner returns (bool) {\n', '\n', '        subAdmin[subAdminAddress] = false;\n', '        return true;\n', '    }\n', '\n', '\n', '    // lock tokens of B21 with token fees\n', '    function lockB21TokensFees(uint256 amount) external whenNotPaused returns (bool) {\n', '\n', '        uint256 addTokenFees = amount.add(feesInToken);\n', "        require(ERC20(b21Contract).balanceOf(msg.sender) >= addTokenFees, 'balance of a user is less then value');\n", '        uint256 checkAllowance = ERC20(b21Contract).allowance(msg.sender, address(this));\n', "        require(checkAllowance >= addTokenFees, 'allowance is wrong');\n", "        require(ERC20(b21Contract).transferFrom(msg.sender, address(this), addTokenFees), 'transfer From failed');\n", '        emit LockTokens(msg.sender, address(this), amount);\n', '        return true;\n', '    }\n', '\n', '    // lock tokens of B21 with ETH fees\n', '    function lockB21EthFees(uint256 amount) external payable whenNotPaused returns (bool) {\n', '\n', "        require(msg.value >= feesInEth, 'fee value is less then required');\n", "        require(ERC20(b21Contract).balanceOf(msg.sender) >= amount, 'balance of a user is less then value');\n", '        uint256 checkAllowance = ERC20(b21Contract).allowance(msg.sender, address(this));\n', "        require(checkAllowance >= amount, 'allowance is wrong');\n", '        feesAddress.transfer(msg.value);\n', "        require(ERC20(b21Contract).transferFrom(msg.sender, address(this), amount), 'transfer From failed');\n", '        emit LockTokens(msg.sender, address(this), amount);\n', '        return true;\n', '    }\n', '\n', '\n', '    // transfer b21 tokens or others tokens to any other address\n', '    function transferAnyERC20Token(address tokenAddress, uint256 tokens, address transferTo) external whenNotPaused returns (bool success) {\n', '        require(msg.sender == owner || subAdmin[msg.sender]);\n', '        if (subAdmin[msg.sender]) {\n', '\n', '            require(limitOnSubAdmin[msg.sender] >= tokens);\n', '\n', '        }\n', '        require(tokenAddress != address(0));\n', '        return ERC20(tokenAddress).transfer(transferTo, tokens);\n', '\n', '    }}']