['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-18\n', '*/\n', '\n', '/// SPDX-License-Identifier: GPL-3.0-or-later\n', 'pragma solidity 0.8.1;\n', '\n', 'contract Token {\n', '    string constant public name = "Token";\n', '    string constant public symbol = "TKN";\n', '    uint8 constant public decimals = 18;\n', '    uint256 constant public totalSupply = 100 ether;\n', '    \n', '    mapping(address => uint256) public balanceOf;\n', '    mapping(address => mapping(address => uint256)) public allowance;\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint256 amount);\n', '    event Approval(address indexed owner, address indexed spender, uint256 amount);\n', '    \n', '    constructor(address creator) {\n', '        balanceOf[creator] = 100 ether;\n', '        emit Transfer(address(0), creator, 100 ether);\n', '    }\n', '    \n', '    function approve(address to, uint256 amount) external returns (bool) {\n', '        allowance[msg.sender][to] = amount;\n', '        emit Approval(msg.sender, to, amount);\n', '        return true;\n', '    }\n', '    \n', '    function transfer(address to, uint256 amount) external returns (bool) {\n', '        balanceOf[msg.sender] -= amount;\n', '        balanceOf[to] += amount;\n', '        emit Transfer(msg.sender, to, amount);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address from, address to, uint256 amount) external returns (bool) {\n', '        balanceOf[from] -= amount;\n', '        balanceOf[to] += amount;\n', '        allowance[from][msg.sender] -= amount;\n', '        emit Transfer(from, to, amount);\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract TokenFactory {\n', '    fallback() external { new Token(msg.sender); }\n', '}']