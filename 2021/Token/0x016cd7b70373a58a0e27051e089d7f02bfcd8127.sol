['pragma solidity ^0.8.0;\n', '\n', 'import "./ERC721Burnable.sol";\n', 'import "./ERC721Pausable.sol";\n', 'import "./Ownable.sol";\n', '\n', 'contract DoTxNFT is ERC721, ERC721Burnable, ERC721Pausable, Ownable {\n', '\n', '    mapping(uint256 => uint256) public nextHouseId;\n', '    mapping(uint256 => uint256) public supply;\n', '    \n', '\n', '    uint32 public constant ID_TO_HOUSE = 1000000;\n', '    event NewHouse(uint256 id, uint256 maxSupply);\n', '\n', '    constructor(string memory _baseUrl) public ERC721("DeFi of Thrones", "DoTxNFT"){\n', '        setBaseURI(_baseUrl);\n', '    }\n', '    \n', '    function newHouse(uint256 _houseId, uint256 _maxSupply) external onlyOwner {\n', '        require(_maxSupply <= ID_TO_HOUSE, "DoTxNFT: max supply too high");\n', '        require(supply[_houseId] == 0, "DoTxNFT: house already exist");\n', '\n', '        supply[_houseId] = _maxSupply;\n', '        NewHouse(_houseId, _maxSupply);\n', '    }\n', '    \n', '    function mintHousesBatch(address _to, uint256[] memory _houseIds, uint256[] memory _count) public onlyOwner {\n', '        for(uint256 i=0; i < _houseIds.length; i++){\n', '            mintBatch(_to, _houseIds[i], _count[i]);\n', '        }\n', '    }\n', '    \n', '    function mintBatch(address _to, uint256 _houseId, uint256 _count) public onlyOwner {\n', '        require(supply[_houseId] != 0, "DoTxNFT: house does not exist");\n', '        \n', '        for(uint256 i=0; i < _count; i++){\n', '            mint(_to, _houseId);\n', '        }\n', '    }\n', '    \n', '    function mint(address _to, uint256 _houseId) private onlyOwner {\n', '        require(nextHouseId[_houseId] < supply[_houseId], "DoTxNFT: house sold out");\n', '        \n', '        nextHouseId[_houseId]++;\n', '        uint256 tokenId = _houseId * ID_TO_HOUSE + nextHouseId[_houseId];\n', '        \n', '        _mint(_to, tokenId);\n', '    }\n', '\n', '    function pause() public onlyOwner {\n', '        _pause();\n', '    }\n', '\n', '    function unpause() public onlyOwner {\n', '        _unpause();\n', '    }\n', '\n', '    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override(ERC721, ERC721Pausable) {\n', '        super._beforeTokenTransfer(from, to, tokenId);\n', '    }\n', '    \n', '    function setBaseURI(string memory _baseUrl) public onlyOwner{\n', '        _setBaseURI(_baseUrl);\n', '    }\n', '\n', '    function getTokensByOwner(address _owner) public view returns(uint256[] memory ownerTokens) {\n', '        uint256 tokenCount = balanceOf(_owner);\n', '\n', '        if (tokenCount == 0) {\n', '            // Return an empty array\n', '            return new uint256[](0);\n', '        } else {\n', '            uint256[] memory result = new uint256[](tokenCount);\n', '\n', '            for (uint256 index = 0; index < tokenCount; index++) {\n', '                result[index] = tokenOfOwnerByIndex(_owner, index);\n', '            }\n', '\n', '            return result;\n', '        }\n', '    }\n', '}']