['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-05\n', '*/\n', '\n', 'pragma solidity ^0.5.16;\n', '\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', '        \n', '\t    return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract ERC20 {\n', '\tusing SafeMath for uint256;\n', '\tuint public totalSupply;\n', '\t\n', '\tstring public name;\n', '\tuint8 public decimals;\n', '\tstring public symbol;\n', '\tstring public version;\n', '\t\n', '\tmapping (address => uint256) balances;\n', '\tmapping (address => mapping (address => uint)) allowed;\n', '\n', '\t//Fix for short address attack against ERC20\n', '\tmodifier onlyPayloadSize(uint size) {\n', '\t\tassert(msg.data.length == size + 4);\n', '\t\t_;\n', '\t} \n', '\n', '\tfunction balanceOf(address _owner) public view returns (uint balance) {\n', '\t\treturn balances[_owner];\n', '\t}\n', '\n', '\tfunction transfer(address _to, uint _value) public onlyPayloadSize(2*32) returns (bool success) {\n', '\t    address owner = msg.sender;\n', '\t    require(balances[owner] >= _value && _value > 0);\n', '\t    balances[owner] = balances[owner].sub(_value);\n', '\t    balances[_to] = balances[_to].add(_value);\n', '\t    emit Transfer(owner, _to, _value);\n', '\t    return true;\n', '    }\n', '\n', '\tfunction transferFrom(address _from, address _to, uint _value) public returns (bool success) {\n', '\t    address owner = msg.sender;\n', '\t    require(balances[_from] >= _value && allowed[_from][owner] >= _value && _value > 0);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][owner] = allowed[_from][owner].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) external view returns (uint remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @notice Approve `spender` to transfer up to `amount` from `src`\n', '     * @dev This will overwrite the approval amount for `spender`\n', '     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n', '     * @param _spender The address of the account which may transfer tokens\n', '     * @param _value The number of tokens that are approved (2^256-1 means infinite)\n', '     * @return Whether or not the approval succeeded\n', '     */\n', '    function approve(address _spender, uint _value) external returns (bool) {\n', '    \taddress owner = msg.sender;\n', '        allowed[owner][_spender] = _value;\n', '        emit Approval(owner, _spender, _value);\n', '        return true;\n', '    }\n', '\n', "\t//Event which is triggered to log all transfers to this contract's event log\n", '\tevent Transfer(\n', '\t\taddress indexed _from,\n', '\t\taddress indexed _to,\n', '\t\tuint _value\n', '\t\t);\n', '\t\t\n', '\t//Event which is triggered whenever an owner approves a new allowance for a spender.\n', '\tevent Approval(\n', '\t\taddress indexed _owner,\n', '\t\taddress indexed _spender,\n', '\t\tuint _value\n', '\t\t);\n', '}\n', '\n', 'contract OakTreasureChest is ERC20 {\n', '\tconstructor() public {\n', '\t\ttotalSupply = 123000000000000000000;\n', '\t\tname = "OakTreasureChest";\n', '\t\tdecimals = 18;\n', '\t\tsymbol = "OAK-CHEST";\n', '\t\tversion = "1.0";\n', '\t\tbalances[msg.sender] = totalSupply;\n', '\t}\n', '}']