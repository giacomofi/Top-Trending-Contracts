['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-23\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at hecoinfo.com on 2021-02-03\n', '*/\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', 'library SafeMath {\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', 'contract Ownable {\n', '\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    // function renounceOwnership() public onlyOwner {\n', '    //     emit OwnershipTransferred(_owner, address(0));\n', '    //     _owner = address(0);\n', '    // }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', 'library Roles {\n', '\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    function add(Role storage role, address account) internal {\n', '        require(!has(role, account), "Roles: account already has role");\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '    function remove(Role storage role, address account) internal {\n', '        require(has(role, account), "Roles: account does not have role");\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '    function has(Role storage role, address account) internal view returns (bool) {\n', '        require(account != address(0), "Roles: account is the zero address");\n', '        return role.bearer[account];\n', '    }\n', '}\n', '\n', '\n', 'contract PauserRole is Ownable {\n', '\n', '    using Roles for Roles.Role;\n', '\n', '    event PauserAdded(address indexed account);\n', '\n', '    event PauserRemoved(address indexed account);\n', '\n', '    Roles.Role private _pausers;\n', '\n', '    constructor () internal {\n', '        _addPauser(msg.sender);\n', '    }\n', '\n', '    modifier onlyPauser() {\n', '        require(isPauser(msg.sender), "PauserRole: caller does not have the Pauser role");\n', '        _;\n', '    }\n', '\n', '    function isPauser(address account) public view returns (bool) {\n', '        return _pausers.has(account);\n', '    }\n', '\n', '    function addPauser(address account) public onlyOwner {\n', '        _addPauser(account);\n', '    }\n', '\n', '    function removePauser(address account) public onlyOwner {\n', '        _removePauser(account);\n', '    }\n', '\n', '    function renouncePauser() public {\n', '        _removePauser(msg.sender);\n', '    }\n', '\n', '    function _addPauser(address account) internal {\n', '        _pausers.add(account);\n', '        emit PauserAdded(account);\n', '    }\n', '\n', '    function _removePauser(address account) internal {\n', '        _pausers.remove(account);\n', '        emit PauserRemoved(account);\n', '    }\n', '}\n', '\n', '\n', 'contract Pausable is PauserRole {\n', '\n', '    event Paused(address account);\n', '\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    constructor () internal {\n', '        _paused = false;\n', '    }\n', '\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    function pause() public onlyPauser whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(msg.sender);\n', '    }\n', '\n', '    function unpause() public onlyPauser whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(msg.sender);\n', '    }\n', '}\n', '\n', '\n', 'interface IERC20 {\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'contract ERC20 is IERC20, Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    event Issue(address indexed account, uint256 amount);\n', '\n', '    event Redeem(address indexed account, uint256 value);\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(msg.sender, recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        _approve(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(amount);\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 value) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = value;\n', '        emit Approval(owner, spender, value);\n', '    }\n', '\n', '    function _issue(address account, uint256 amount) internal {\n', '        require(account != address(0), "CoinFactory: issue to the zero address");\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '        emit Issue(account, amount);\n', '    }\n', '\n', '    function _redeem(address account, uint256 value) internal {\n', '        require(account != address(0), "CoinFactory: redeem from the zero address");\n', '\n', '        _totalSupply = _totalSupply.sub(value);\n', '        _balances[account] = _balances[account].sub(value);\n', '        emit Transfer(account, address(0), value);\n', '        emit Redeem(account, value);\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20Pausable is ERC20, Pausable {\n', '\n', '    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n', '        return super.transfer(to, value);\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n', '        return super.approve(spender, value);\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool) {\n', '        return super.increaseAllowance(spender, addedValue);\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool) {\n', '        return super.decreaseAllowance(spender, subtractedValue);\n', '    }\n', '}\n', '\n', '\n', 'contract CoinFactoryAdminRole is Ownable {\n', '\n', '    using Roles for Roles.Role;\n', '\n', '    event CoinFactoryAdminRoleAdded(address indexed account);\n', '\n', '    event CoinFactoryAdminRoleRemoved(address indexed account);\n', '\n', '    Roles.Role private _coinFactoryAdmins;\n', '\n', '    constructor () internal {\n', '        _addCoinFactoryAdmin(msg.sender);\n', '    }\n', '\n', '    modifier onlyCoinFactoryAdmin() {\n', '        require(isCoinFactoryAdmin(msg.sender), "CoinFactoryAdminRole: caller does not have the CoinFactoryAdmin role");\n', '        _;\n', '    }\n', '\n', '    function isCoinFactoryAdmin(address account) public view returns (bool) {\n', '        return _coinFactoryAdmins.has(account);\n', '    }\n', '\n', '    function addCoinFactoryAdmin(address account) public onlyOwner {\n', '        _addCoinFactoryAdmin(account);\n', '    }\n', '\n', '    function removeCoinFactoryAdmin(address account) public onlyOwner {\n', '        _removeCoinFactoryAdmin(account);\n', '    }\n', '\n', '    function renounceCoinFactoryAdmin() public {\n', '        _removeCoinFactoryAdmin(msg.sender);\n', '    }\n', '\n', '    function _addCoinFactoryAdmin(address account) internal {\n', '        _coinFactoryAdmins.add(account);\n', '        emit CoinFactoryAdminRoleAdded(account);\n', '    }\n', '\n', '    function _removeCoinFactoryAdmin(address account) internal {\n', '        _coinFactoryAdmins.remove(account);\n', '        emit CoinFactoryAdminRoleRemoved(account);\n', '    }\n', '}\n', '\n', '\n', 'contract CoinFactory is ERC20, CoinFactoryAdminRole {\n', '\n', '    function issue(address account, uint256 amount) public onlyCoinFactoryAdmin returns (bool) {\n', '        _issue(account, amount);\n', '        return true;\n', '    }\n', '\n', '    function redeem(address account, uint256 amount) public returns (bool) {\n', '        require(msg.sender == account || isCoinFactoryAdmin(msg.sender), "CoinFactoryAdminRole: only address onwer or CoinFactoryAdmin can redeem");\n', '        _redeem(account, amount);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', 'contract BlacklistAdminRole is Ownable {\n', '\n', '    using Roles for Roles.Role;\n', '\n', '    event BlacklistAdminAdded(address indexed account);\n', '    event BlacklistAdminRemoved(address indexed account);\n', '\n', '    Roles.Role private _blacklistAdmins;\n', '\n', '    constructor () internal {\n', '        _addBlacklistAdmin(msg.sender);\n', '    }\n', '\n', '    modifier onlyBlacklistAdmin() {\n', '        require(isBlacklistAdmin(msg.sender), "BlacklistAdminRole: caller does not have the BlacklistAdmin role");\n', '        _;\n', '    }\n', '\n', '    function isBlacklistAdmin(address account) public view returns (bool) {\n', '        return _blacklistAdmins.has(account);\n', '    }\n', '\n', '    function addBlacklistAdmin(address account) public onlyOwner {\n', '        _addBlacklistAdmin(account);\n', '    }\n', '\n', '    function removeBlacklistAdmin(address account) public onlyOwner {\n', '        _removeBlacklistAdmin(account);\n', '    }\n', '\n', '    function renounceBlacklistAdmin() public {\n', '        _removeBlacklistAdmin(msg.sender);\n', '    }\n', '\n', '    function _addBlacklistAdmin(address account) internal {\n', '        _blacklistAdmins.add(account);\n', '        emit BlacklistAdminAdded(account);\n', '    }\n', '\n', '    function _removeBlacklistAdmin(address account) internal {\n', '        _blacklistAdmins.remove(account);\n', '        emit BlacklistAdminRemoved(account);\n', '    }\n', '}\n', '\n', '\n', 'contract Blacklist is ERC20, BlacklistAdminRole {\n', '\n', '    mapping (address => bool) private _blacklist;\n', '\n', '    event BlacklistAdded(address indexed account);\n', '\n', '    event BlacklistRemoved(address indexed account);\n', '\n', '    function isBlacklist(address account) public view returns (bool) {\n', '        return _blacklist[account];\n', '    }\n', '\n', '    function addBlacklist(address[] memory accounts) public onlyBlacklistAdmin returns (bool) {\n', '        for(uint i = 0; i < accounts.length; i++) {\n', '            _addBlacklist(accounts[i]);\n', '        }\n', '    }\n', '\n', '    function removeBlacklist(address[] memory accounts) public onlyBlacklistAdmin returns (bool) {\n', '        for(uint i = 0; i < accounts.length; i++) {\n', '            _removeBlacklist(accounts[i]);\n', '        }\n', '    }\n', '\n', '    function _addBlacklist(address account) internal {\n', '        _blacklist[account] = true;\n', '        emit BlacklistAdded(account);\n', '    }\n', '\n', '    function _removeBlacklist(address account) internal {\n', '        _blacklist[account] = false;\n', '        emit BlacklistRemoved(account);\n', '    }\n', '}\n', '\n', 'contract CoinWindTokenV2 is ERC20, ERC20Pausable, CoinFactory, Blacklist {\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 private _totalSupply;\n', '\n', '    address public polygon;\n', '\n', '    constructor (string memory _name, string memory _symbol, uint8 _decimals) public {\n', '        _totalSupply = 0;\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '    }\n', '\n', '    function setPolygon(address _polygon) public onlyOwner {\n', '        polygon = _polygon;\n', '    }\n', '\n', '    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n', '        require(!isBlacklist(msg.sender), "Token: caller in blacklist can\'t transfer");\n', '        require(!isBlacklist(to), "Token: not allow to transfer to recipient address in blacklist");\n', '        return super.transfer(to, value);\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n', '        require(!isBlacklist(msg.sender), "Token: caller in blacklist can\'t transferFrom");\n', '        require(!isBlacklist(from), "Token: from in blacklist can\'t transfer");\n', '        require(!isBlacklist(to), "Token: not allow to transfer to recipient address in blacklist");\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '\n', '    /**\n', '     * @notice called when token is deposited on root chain\n', '     * @dev Should be callable only by ChildChainManager\n', '     * Should handle deposit by minting the required amount for user\n', '     * Make sure minting is done only by this function\n', '     * @param user user address for whom deposit is being done\n', '     * @param depositData abi encoded amount\n', '     */\n', '    function deposit(address user, bytes calldata depositData) external {\n', '        require(msg.sender == polygon, "not allow");\n', '        require(!isBlacklist(user), "Token: not allow to transfer to recipient address in blacklist");\n', '        uint256 amount = abi.decode(depositData, (uint256));\n', '        _issue(user, amount);\n', '    }\n', '\n', '    /**\n', '     * @notice called when user wants to withdraw tokens back to root chain\n', "     * @dev Should burn user's tokens. This transaction will be verified when exiting on root chain\n", '     * @param amount amount of tokens to withdraw\n', '     */\n', '    function withdraw(uint256 amount) external {\n', '        require(!isBlacklist(msg.sender), "Token: caller in blacklist can\'t transfer");\n', '        _redeem(msg.sender, amount);\n', '    }\n', '}']