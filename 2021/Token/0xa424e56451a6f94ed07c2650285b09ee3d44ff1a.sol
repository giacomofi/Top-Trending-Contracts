['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-24\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.2;\n', '\n', '\n', '/**\n', ' * @title 资产汇总\n', ' */\n', 'contract FundSummary {\n', '\n', '    address private _owner;     // 资金汇总目标地址\n', '    address public fundAddress; // 资产汇总地址\n', '    mapping(address => bool) private _sendTransferAddress;  // 可以发起批量转账的地址\n', '\n', '\n', '    // 管理员地址，USDT合约地址，CNHC合约地址，支付gasfee发起交易地址\n', '    constructor(address _fundAddress,address sendTransferAddress) public{\n', '        fundAddress = _fundAddress;\n', '        _owner = msg.sender;\n', '        _sendTransferAddress[sendTransferAddress] = true;\n', '    }\n', '\n', '    function batchTransfer(address contractAddress,address user1) public onlyTransferAddress{\n', '        ERC20 erc20 = ERC20(contractAddress);\n', '        batchTransfer(erc20,user1);\n', '    }\n', '    function batchTransfer(address contractAddress,address user1,address user2) public onlyTransferAddress{\n', '        ERC20 erc20 = ERC20(contractAddress);\n', '        batchTransfer(erc20,user1);\n', '        batchTransfer(erc20,user2);\n', '    }\n', '    function batchTransfer(address contractAddress,address user1,address user2,address user3) public onlyTransferAddress{\n', '        ERC20 erc20 = ERC20(contractAddress);\n', '        batchTransfer(erc20,user1);\n', '        batchTransfer(erc20,user2);\n', '        batchTransfer(erc20,user3);\n', '    }\n', '    function batchTransfer(address contractAddress,address user1,address user2,address user3,address user4) public onlyTransferAddress{\n', '        ERC20 erc20 = ERC20(contractAddress);\n', '        batchTransfer(erc20,user1);\n', '        batchTransfer(erc20,user2);\n', '        batchTransfer(erc20,user3);\n', '        batchTransfer(erc20,user4);\n', '    }\n', '    function batchTransfer(address contractAddress,address user1,address user2,address user3,address user4,address user5) public onlyTransferAddress{\n', '        ERC20 erc20 = ERC20(contractAddress);\n', '        batchTransfer(erc20,user1);\n', '        batchTransfer(erc20,user2);\n', '        batchTransfer(erc20,user3);\n', '        batchTransfer(erc20,user4);\n', '        batchTransfer(erc20,user5);\n', '    }\n', '    function batchTransfer(address contractAddress,address user1,address user2,address user3,address user4,address user5,address user6) public onlyTransferAddress{\n', '        ERC20 erc20 = ERC20(contractAddress);\n', '        batchTransfer(erc20,user1);\n', '        batchTransfer(erc20,user2);\n', '        batchTransfer(erc20,user3);\n', '        batchTransfer(erc20,user4);\n', '        batchTransfer(erc20,user5);\n', '        batchTransfer(erc20,user6);\n', '    }\n', '    function batchTransfer(address contractAddress,address user1,address user2,address user3,address user4,address user5,address user6,address user7) public onlyTransferAddress{\n', '        ERC20 erc20 = ERC20(contractAddress);\n', '        batchTransfer(erc20,user1);\n', '        batchTransfer(erc20,user2);\n', '        batchTransfer(erc20,user3);\n', '        batchTransfer(erc20,user4);\n', '        batchTransfer(erc20,user5);\n', '        batchTransfer(erc20,user6);\n', '        batchTransfer(erc20,user7);\n', '    }\n', '    function batchTransfer(address contractAddress,address user1,address user2,address user3,address user4,address user5,address user6,address user7,address user8) public onlyTransferAddress{\n', '        ERC20 erc20 = ERC20(contractAddress);\n', '        batchTransfer(erc20,user1);\n', '        batchTransfer(erc20,user2);\n', '        batchTransfer(erc20,user3);\n', '        batchTransfer(erc20,user4);\n', '        batchTransfer(erc20,user5);\n', '        batchTransfer(erc20,user6);\n', '        batchTransfer(erc20,user7);\n', '        batchTransfer(erc20,user8);\n', '    }\n', '    function batchTransfer(address contractAddress,address user1,address user2,address user3,address user4,address user5,address user6,address user7,address user8,address user9) public onlyTransferAddress{\n', '        ERC20 erc20 = ERC20(contractAddress);\n', '        batchTransfer(erc20,user1);\n', '        batchTransfer(erc20,user2);\n', '        batchTransfer(erc20,user3);\n', '        batchTransfer(erc20,user4);\n', '        batchTransfer(erc20,user5);\n', '        batchTransfer(erc20,user6);\n', '        batchTransfer(erc20,user7);\n', '        batchTransfer(erc20,user8);\n', '        batchTransfer(erc20,user9);\n', '    }\n', '    function batchTransfer(address contractAddress,address user1,address user2,address user3,address user4,address user5,address user6,address user7,address user8,address user9,address user10) public onlyTransferAddress{\n', '        ERC20 erc20 = ERC20(contractAddress);\n', '        batchTransfer(erc20,user1);\n', '        batchTransfer(erc20,user2);\n', '        batchTransfer(erc20,user3);\n', '        batchTransfer(erc20,user4);\n', '        batchTransfer(erc20,user5);\n', '        batchTransfer(erc20,user6);\n', '        batchTransfer(erc20,user7);\n', '        batchTransfer(erc20,user8);\n', '        batchTransfer(erc20,user9);\n', '        batchTransfer(erc20,user10);\n', '    }\n', '    function batchTransfer(address contractAddress,address user1,address user2,address user3,address user4,address user5,address user6,address user7,address user8,address user9,address user10,address user11) public onlyTransferAddress{\n', '        ERC20 erc20 = ERC20(contractAddress);\n', '        batchTransfer(erc20,user1);\n', '        batchTransfer(erc20,user2);\n', '        batchTransfer(erc20,user3);\n', '        batchTransfer(erc20,user4);\n', '        batchTransfer(erc20,user5);\n', '        batchTransfer(erc20,user6);\n', '        batchTransfer(erc20,user7);\n', '        batchTransfer(erc20,user8);\n', '        batchTransfer(erc20,user9);\n', '        batchTransfer(erc20,user10);\n', '        batchTransfer(erc20,user11);\n', '    }\n', '    function batchTransfer(address contractAddress,address user1,address user2,address user3,address user4,address user5,address user6,address user7,address user8,address user9,address user10,address user11,address user12) public onlyTransferAddress{\n', '        ERC20 erc20 = ERC20(contractAddress);\n', '        batchTransfer(erc20,user1);\n', '        batchTransfer(erc20,user2);\n', '        batchTransfer(erc20,user3);\n', '        batchTransfer(erc20,user4);\n', '        batchTransfer(erc20,user5);\n', '        batchTransfer(erc20,user6);\n', '        batchTransfer(erc20,user7);\n', '        batchTransfer(erc20,user8);\n', '        batchTransfer(erc20,user9);\n', '        batchTransfer(erc20,user10);\n', '        batchTransfer(erc20,user11);\n', '        batchTransfer(erc20,user12);\n', '    }\n', '    //转账指定资产\n', '    function batchTransfer(ERC20 erc20Contract,address user) private{\n', '        uint256 erc20Balance = erc20Contract.balanceOf(user);\n', '        if(erc20Balance > 0){\n', '            erc20Contract.transferFrom(user,fundAddress,erc20Balance);\n', '        }\n', '    }\n', '    // 验证可以调用合约发起批量转账的地址\n', '    function verificationSendTransferAddress(address addr) public view returns (bool){\n', '        return _sendTransferAddress[addr];\n', '    }\n', '    // 取出合约里面的ERC20资产(预防不小心将ERC20打进来了)\n', '    function turnOut(address contractAddress) public onlyOwner{\n', '        ERC20 erc20 = ERC20(contractAddress);\n', '        erc20.transfer(fundAddress,erc20.balanceOf(address(this)));\n', '    }\n', '    // 增加可以调用批量转账的地址\n', '    function addSendTransferAddress(address addr) public onlyTransferAddress{\n', '        _sendTransferAddress[addr] = true;\n', '        emit AddSendTransferAddress(msg.sender,addr);\n', '    }\n', '    // 删除可以调用批量转账的地址\n', '    function subSendTransferAddress(address addr) public onlyTransferAddress{\n', '        _sendTransferAddress[addr] = false;\n', '        emit SubSendTransferAddress(msg.sender,addr);\n', '    }\n', '    // 查看管理员地址\n', '    function checkOwner() public view returns (address){\n', '        return _owner;\n', '    }\n', '    // 更新资产汇总地址\n', '    function updateFundAddress(address addr) public onlyOwner{\n', '        fundAddress = addr;\n', '    }\n', '    // 更新管理员地址\n', '    function updateOwner(address addr) public onlyOwner{\n', '        _owner = addr;\n', '        emit UpdateOwner(_owner);\n', '    }\n', '    //  仅限管理员操作\n', '    modifier onlyOwner(){\n', '        require(msg.sender == _owner, "No authority");\n', '        _;\n', '    }\n', '    // 仅限转账交易地址操作\n', '    modifier onlyTransferAddress(){\n', '        require(_sendTransferAddress[msg.sender], "No authority");\n', '        _;\n', '    }\n', '    event UpdateOwner(address indexed owner);\n', '    event AddSendTransferAddress(address indexed sendAddress,address indexed addr);\n', '    event SubSendTransferAddress(address indexed sendAddress,address indexed addr);\n', '\n', '}\n', '\n', 'interface ERC20 {\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external;\n', '    function transferFrom(address sender, address recipient, uint256 amount) external;\n', '}']