['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-15\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity >=0.7.0 <0.8.0;\n', '\n', '// A modification of OpenZeppelin ERC20\n', '// Original can be found here: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol\n', '\n', '// Very slow erc20 implementation. Limits release of the funds with emission rate in _beforeTokenTransfer().\n', "// Even if there will be a vulnerability in upgradeable contracts defined in _beforeTokenTransfer(), it won't be devastating.\n", "// Developers can't simply rug.\n", '// Allowances are booleans now instead of uints and uni v2 router is hardcoded, so it achieves -7100 gas per trade on uni v2 post-Berlin\n', '// _mint() and _burn() functions are removed.\n', '// Token name and symbol can be changed.\n', '// Bulk transfer allows to transact in bulk cheaper by making up to three times less store writes in comparison to regular erc-20 transfers\n', '\n', 'contract VSRERC20 {\n', '\tevent Transfer(address indexed from, address indexed to, uint value);\n', '\tevent Approval(address indexed owner, address indexed spender, uint value);\n', '\tevent BulkTransfer(address indexed from, address[] indexed recipients, uint[] amounts);\n', '\tevent BulkTransferFrom(address[] indexed senders, uint[] amounts, address indexed recipient);\n', '\tevent NameSymbolChangedTo(string name, string symbol);\n', '\n', '\tmapping (address => mapping (address => bool)) private _allowances;\n', '\tmapping (address => uint) private _balances;\n', '\n', '\tstring private _name;\n', '\tstring private _symbol;\n', '\taddress private _governance;\n', '\tuint8 private _governanceSet;\n', '\tbool private _init;\n', '\n', '\tfunction init() public {\n', '\t\trequire(_init == false);\n', '\t\t_init = true;\n', '\t\t_name = "Aletheo";\n', '\t\t_symbol = "LET";\n', '\t\t_governance = 0x2D9F853F1a71D0635E64FcC4779269A05BccE2E2;\n', '\t\t_balances[0x2D9F853F1a71D0635E64FcC4779269A05BccE2E2] = 1e27;\n', '\t\temit NameSymbolChangedTo("Aletheo","LET");\n', '\t}\n', '\n', '\tmodifier onlyGovernance() {require(msg.sender == _governance);_;}\n', '\tfunction name() public view returns (string memory) {return _name;}\n', '\tfunction symbol() public view returns (string memory) {return _symbol;}\n', '\tfunction totalSupply() public view returns (uint) {uint supply = (block.number - 12640000)*42e16+1e24;if (supply > 1e27) {supply = 1e27;}return supply;}\n', '\tfunction decimals() public pure returns (uint) {return 18;}\n', '\tfunction balanceOf(address a) public view returns (uint) {return _balances[a];}\n', '\tfunction transfer(address recipient, uint amount) public returns (bool) {_transfer(msg.sender, recipient, amount);return true;}\n', '\tfunction disallow(address spender) public returns (bool) {delete _allowances[msg.sender][spender];emit Approval(msg.sender, spender, 0);return true;}\n', '\tfunction setNameSymbol(string memory n_, string memory s_) public onlyGovernance {_name = n_;_symbol = s_;emit NameSymbolChangedTo(n_,s_);}\n', '\tfunction setGovernance(address a) public onlyGovernance {require(_governanceSet < 3);_governanceSet += 1;_governance = a;}\n', '\tfunction _isContract(address a) internal view returns(bool) {uint s_;assembly {s_ := extcodesize(a)}return s_ > 0;}\n', '\n', '\tfunction approve(address spender, uint amount) public returns (bool) { // hardcoded mainnet uniswapv2 router 02, transfer helper library\n', '\t\tif (spender == 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D) {emit Approval(msg.sender, spender, 2**256 - 1);return true;}\n', '\t\telse {_allowances[msg.sender][spender] = true;emit Approval(msg.sender, spender, 2**256 - 1);return true;}\n', '\t}\n', '\n', '\tfunction allowance(address owner, address spender) public view returns (uint) { // hardcoded mainnet uniswapv2 router 02, transfer helper library\n', '\t\tif (spender == 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D||_allowances[owner][spender] == true) {return 2**256 - 1;} else {return 0;}\n', '\t}\n', '\n', '\tfunction transferFrom(address sender, address recipient, uint amount) public returns (bool) { // hardcoded mainnet uniswapv2 router 02, transfer helper library\n', '\t\trequire(msg.sender == 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D||_allowances[sender][msg.sender] == true);_transfer(sender, recipient, amount);return true;\n', '\t}\n', '\n', '\tfunction _transfer(address sender, address recipient, uint amount) internal {\n', '\t\trequire(sender != address(0) && recipient != address(0));\n', '\t\t_beforeTokenTransfer(sender, amount);\n', '\t\tuint senderBalance = _balances[sender];\n', '\t\trequire(senderBalance >= amount);\n', '\t\t_balances[sender] = senderBalance - amount;\n', '\t\t_balances[recipient] += amount;\n', '\t\temit Transfer(sender, recipient, amount);\n', '\t}\n', '\n', '\tfunction bulkTransfer(address[] memory recipients, uint[] memory amounts) public returns (bool) { // will be used by the contract, or anybody who wants to use it\n', '\t\trequire(recipients.length == amounts.length && amounts.length < 100,"human error");\n', '\t\tuint senderBalance = _balances[msg.sender];\n', '\t\tuint total;\n', '\t\tfor(uint i = 0;i<amounts.length;i++) {total += amounts[i];_balances[recipients[i]] += amounts[i];}\n', '\t\trequire(senderBalance >= total);\n', '\t\tif (msg.sender == 0xFBcEd1B6BaF244c20Ae896BAAc1d74d88c6E0CD5) {_beforeTokenTransfer(msg.sender, total);}\n', '\t\t_balances[msg.sender] = senderBalance - total;\n', '\t\temit BulkTransfer(msg.sender, recipients, amounts);\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction bulkTransferFrom(address[] memory senders, address recipient, uint[] memory amounts) public returns (bool) {\n', '\t\trequire(senders.length == amounts.length && amounts.length < 100,"human error");\n', '\t\tuint total;\n', '\t\tuint senderBalance;\n', '\t\tfor (uint i = 0;i<amounts.length;i++) {\n', '\t\t\tsenderBalance = _balances[senders[i]];\n', '\t\t\tif (senderBalance >= amounts[i] && _allowances[senders[i]][msg.sender]== true){total+= amounts[i];_balances[senders[i]] = senderBalance - amounts[i];}\n', '\t\t\telse {delete senders[i];delete amounts[i];}\n', '\t\t}\n', '\t\t_balances[msg.sender] += total;\n', '\t\temit BulkTransferFrom(senders, amounts, recipient);\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction _beforeTokenTransfer(address from, uint amount) internal view {\n', '\t\tif(block.number < 12640000) {require(from == 0x97E4d7FB3c7eD12FB29DAD4e8294Ab2A9a338d1d || from == _governance);}\n', '\t\telse {\n', '\t\t\tif (from == 0xFBcEd1B6BaF244c20Ae896BAAc1d74d88c6E0CD5) {// hardcoded treasury proxy address\n', '\t\t\t\trequire(block.number > 12640000);\n', '\t\t\t\tuint treasury = _balances[0xFBcEd1B6BaF244c20Ae896BAAc1d74d88c6E0CD5];\n', '\t\t\t\tuint withd =  999e24 - treasury;\n', '\t\t\t\tuint allowed = (block.number - 12640000)*42e16 - withd;\n', '\t\t\t\trequire(amount <= allowed && amount <= treasury);\n', '\t\t\t}\n', '\t\t}\n', '\t}\n', '}']