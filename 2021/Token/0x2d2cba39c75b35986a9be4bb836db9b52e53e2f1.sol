['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-22\n', '*/\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'library SafeMath {\n', '    \n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); \n', '    uint256 c = a / b;\n', '\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '\n', 'contract IERC20 {\n', '  function totalSupply() public view returns (uint256);\n', '\n', '  function balanceOf(address who) public view returns (uint256);\n', '\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '\n', '  function approve(address spender, uint256 value)\n', '    public returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'contract Ownable {\n', '  address public _owner;\n', '    \n', '  event OwnershipTransferred( \n', '      address indexed previousOwner, address indexed newOwner\n', '  );\n', '    \n', '  constructor() public {\n', '    _owner = msg.sender;\n', '    emit OwnershipTransferred(address(0), _owner);\n', '  }\n', '  \n', '  function owner() public view returns(address) {\n', '    return _owner;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(isOwner());\n', '    _;\n', '  }\n', '\n', '  function isOwner() public view returns(bool) {\n', '    return msg.sender == _owner;\n', '  }\n', '  \n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    _transferOwnership(newOwner);\n', '  }\n', '  \n', '  function _transferOwnership(address newOwner) internal {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', 'contract BasicStandartToken is IERC20 {\n', '    using SafeMath for uint256;\n', '    \n', '    mapping (address => uint256) private _balances;\n', '    \n', '    mapping (address => mapping (address => uint256)) private _allowed;\n', '    \n', '    uint256 private _totalSupply;\n', '    \n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '    \n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        return _balances[owner];\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= _balances[msg.sender]);\n', '    \n', '        _balances[msg.sender] = _balances[msg.sender].sub(_value);\n', '        _balances[_to] = _balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '      )\n', '        public\n', '        returns (bool)\n', '      {\n', '        require(to != address(0));\n', '        require(value <= _balances[from]);\n', '        require(value <= _allowed[from][msg.sender]);\n', '    \n', '        _balances[from] = _balances[from].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '        emit Transfer(from, to, value);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(\n', '        address owner,\n', '        address spender\n', '       )\n', '        public\n', '        view\n', '        returns (uint256)\n', '      {\n', '        return _allowed[owner][spender];\n', '    }\n', '    \n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        require(spender != address(0));\n', '    \n', '        _allowed[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '    \n', '    function increaseAllowance(\n', '        address spender,\n', '        uint256 addedValue\n', '      )\n', '        public\n', '        returns (bool)\n', '      {\n', '        require(spender != address(0));\n', '    \n', '        _allowed[msg.sender][spender] = (\n', '          _allowed[msg.sender][spender].add(addedValue));\n', '        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '        return true;\n', '      }\n', '    \n', '      function decreaseAllowance(\n', '        address spender,\n', '        uint256 subtractedValue\n', '      )\n', '        public\n', '        returns (bool)\n', '      {\n', '        require(spender != address(0));\n', '        uint oldValue = _allowed[msg.sender][spender];\n', '    \n', '        if (subtractedValue > oldValue) {\n', '            _allowed[msg.sender][spender] = 0;\n', '        } else {\n', '            _allowed[msg.sender][spender] = oldValue.sub(subtractedValue);\n', '        }\n', '\n', '    \n', '        _allowed[msg.sender][spender] = (\n', '          _allowed[msg.sender][spender].sub(subtractedValue));\n', '        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '    \n', '    function _mint(address account, uint256 value) internal {\n', '        require(account != 0);\n', '        _totalSupply = _totalSupply.add(value);\n', '        _balances[account] = _balances[account].add(value);\n', '        emit Transfer(address(0), account, value);\n', '    }\n', '}\n', '\n', 'contract OPTMARKToken is BasicStandartToken, Ownable  {\n', '    using SafeMath for uint;\n', '\n', '\n', '    string constant public symbol = "OPTMARK";\n', '    string constant public name = "Options market coin";\n', '    uint8 constant public decimals = 18;\n', '        \n', '    uint256 INITIAL_SUPPLY = 500000000e18;\n', '\n', '    uint constant companyTokens = 225000000e18;\n', '    uint constant crowdsaleTokens = 275000000e18;\n', '\n', '    address crowdsale = 0xC0E9125D30A0556666B079727B01Ff047467835D;\n', '    address company = 0x7E6da117B5d91F2fd19F56071c46F861cE29254c;\n', '\n', '    constructor() public {\n', '        _mint(crowdsale, crowdsaleTokens);\n', '        _mint(company, companyTokens);\n', '    }\n', '    \n', '\n', '    function checkPermissions(address from) internal constant returns (bool) {        \n', '        return true;\n', '    }\n', '    \n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        require(checkPermissions(msg.sender));\n', '        return super.transfer(to, value);\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '        require(checkPermissions(from));\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '    \n', '}']