['// SPDX-License-Identifier: Apache License, Version 2.0\n', 'pragma solidity 0.8.5;\n', '\n', 'import "./ERC20Burnable.sol";\n', 'import "./ERC20Pausable.sol";\n', 'import "./Ownable.sol";\n', '\n', '/**\n', ' * @dev {ERC20} token implementing the {IERC20} interface, including:\n', ' *\n', ' *  - Preminted initial supply of 3.25 Billion tokens allocated to owner\n', ' *  - Ability for holders to transfer their tokens\n', ' *  - Ability for holders to burn (destroy) their tokens\n', ' *  - Ability for owner to pause/stop all token transfers\n', ' *\n', ' * This contract uses {ERC20Pausable} for pausing token transfers which is useful\n', ' * for scenarios such as preventing trades until the end of an evaluation period,\n', ' * or having an emergency switch for freezing all token transfers in the event of\n', ' * a large bug or an exchange hack.\n', ' *\n', ' * The account that deploys the contract will be granted the allocation of the\n', ' * preminted initial supply along with the owner role which allows it to pause\n', ' * token transfers.\n', ' *\n', ' * This contract uses {ERC20Burnable} to allow token holders to destroy (burn),\n', ' * both their own tokens and those that they have an allowance for, in a way\n', ' * that can be recognized off-chain (via event analysis).\n', ' *\n', ' * The inherited ERC20 contract includes the OpenZeppelin non-standard \n', ' * {decreaseAllowance} and {increaseAllowance} functions as alternatives to the \n', ' * standard {approve} function.\n', ' *\n', ' * The inherited contracts follows general OpenZeppelin guidelines: functions \n', ' * revert instead of returning `false` on failure. This behavior is nonetheless\n', ' * conventional and does not conflict with the expectations of ERC20 applications.\n', ' */\n', 'contract DrifeToken is ERC20Burnable, ERC20Pausable, Ownable {\n', '    /**\n', '     * @dev Mints an initial supply of 3.25 Billion DRF tokens with 18 decimals and\n', '     * transfers them to deploying address which is also made the contract `owner`.\n', '     *\n', '     * See {ERC20-constructor}.\n', '     */\n', '    constructor() ERC20("Drife", "DRF") {\n', '        _mint(_msgSender(), 3.25 * 10**9 * 10**18);\n', '    }\n', '\n', '    /**\n', '     * @dev Toggles between paused <-> unpaused states to disallow <-> allow\n', '     * token transfers.\n', '     *\n', '     * See {ERC20Pausable} - {Pausable-paused()}, {Pausable-_pause()} and \n', '     * {Pausable-_unpause()}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the caller must have `owner` priviledges.\n', '     */\n', '    function togglePause() public onlyOwner {\n', '        paused() ? _unpause() : _pause();\n', '    }\n', '\n', '    /**\n', '     * @dev Overridden hook that is called before any transfer of tokens,\n', '     * including minting and burning.\n', '     */\n', '    function _beforeTokenTransfer(\n', '        address from,\n', '        address to,\n', '        uint256 amount\n', '    ) internal virtual override(ERC20, ERC20Pausable) {\n', '        super._beforeTokenTransfer(from, to, amount);\n', '    }\n', '}']