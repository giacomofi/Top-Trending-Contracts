['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-31\n', '*/\n', '\n', '// SPDX-License-Identifier: Unlicensed\n', '\n', 'pragma solidity ^0.8.4;\n', '\n', 'library SafeMath {\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      assert(b <= a);\n', '      return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      uint256 c = a + b;\n', '      assert(c >= a);\n', '      return c;\n', '    }\n', '\t\n', '\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\t\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '\n', '    address public owner;\n', '\t\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\t\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        owner = newOwner;\n', '    }\n', '    \n', '}\n', '\n', 'contract Pausable is Ownable {\n', '\tevent Pause();\n', '\tevent Unpause();\n', '\n', '\tbool public paused = false;\n', '  \n', '\tmodifier whenNotPaused() {\n', '\t\trequire(!paused);\n', '\t\t_;\n', '\t}\n', '  \n', '\tmodifier whenPaused() {\n', '\t\trequire(paused);\n', '\t\t_;\n', '\t}\n', '  \n', '\tfunction pause() onlyOwner whenNotPaused public {\n', '\t\tpaused = true;\n', '\t\temit Pause();\n', '\t}\n', '\t\n', '\tfunction unpause() onlyOwner whenPaused public {\n', '\t\tpaused = false;\n', '\t\temit Unpause();\n', '\t}\n', '}\n', '\n', 'interface IERC20 {\n', '\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\tevent Burn(address indexed burner, uint256 value);\n', '\t\n', '\tevent DestroyedBlackFunds(address _blackListedUser, uint _balance);\n', '    event AddedBlackList(address _user);\n', '    event RemovedBlackList(address _user);\n', '}\n', '\n', 'contract ERC20Basic is IERC20,Pausable {\n', '    \n', '\tusing SafeMath for uint256;\n', '    \n', '\tmapping(address => uint256) balances;\n', '\t\n', '\tmapping (address => bool) public isBlackListed;\n', '\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '\t\n', '    uint256 totalSupply_;\n', '\t\n', '    function totalSupply() public override view returns (uint256) {\n', '       return totalSupply_;\n', '    }\n', '\n', '    function balanceOf(address tokenOwner) public override view returns (uint256) {\n', '        return balances[tokenOwner];\n', '    }\n', '\t\n', '    function transfer(address receiver, uint256 numTokens) public whenNotPaused override returns (bool) {\n', '        require(numTokens <= balances[msg.sender], "transfer amount exceeds balance");\n', '        balances[msg.sender] = balances[msg.sender].sub(numTokens);\n', '        balances[receiver] = balances[receiver].add(numTokens);\n', '        emit Transfer(msg.sender, receiver, numTokens);\n', '        return true;\n', '    }\n', '\n', '    function approve(address delegate, uint256 numTokens) public override returns (bool) {\n', '        allowed[msg.sender][delegate] = numTokens;\n', '        emit Approval(msg.sender, delegate, numTokens);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address delegate) public override view returns (uint) {\n', '        return allowed[owner][delegate];\n', '    }\n', '\t\n', '    function transferFrom(address sender, address receiver, uint256 numTokens) public whenNotPaused override returns (bool) {\n', '        require(!isBlackListed[sender]);\n', '\t\trequire(numTokens <= balances[sender], "transfer amount exceeds balance");\n', '        require(numTokens <= allowed[sender][msg.sender]);\n', '        balances[sender] = balances[sender].sub(numTokens);\n', '        allowed[sender][msg.sender] = allowed[sender][msg.sender].sub(numTokens);\n', '        balances[receiver] = balances[receiver].add(numTokens);\n', '        emit Transfer(sender, receiver, numTokens);\n', '        return true;\n', '    }\n', '\t\n', '\tfunction burn(uint256 _value) public whenNotPaused{\n', '\t    require(!isBlackListed[msg.sender]);\n', '        require(_value <= balances[msg.sender]);\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        emit Burn(burner, _value);\n', '        emit Transfer(burner, address(0), _value);\n', '    }\n', '\t\n', '\tfunction getBlackListStatus(address _maker) public view returns (bool) {\n', '        return isBlackListed[_maker];\n', '    }\n', '\t\n', '\tfunction addBlackList (address _evilUser) public onlyOwner {\n', '        isBlackListed[_evilUser] = true;\n', '        emit AddedBlackList(_evilUser);\n', '    }\n', '\n', '    function removeBlackList (address _clearedUser) public onlyOwner {\n', '        isBlackListed[_clearedUser] = false;\n', '        emit RemovedBlackList(_clearedUser);\n', '    }\n', '\t\n', '    function destroyBlackFunds (address _blackListedUser) public onlyOwner {\n', '        require(isBlackListed[_blackListedUser]);\n', '        uint dirtyFunds = balanceOf(_blackListedUser);\n', '        balances[_blackListedUser] = 0;\n', '        totalSupply_ -= dirtyFunds;\n', '        emit DestroyedBlackFunds(_blackListedUser, dirtyFunds);\n', '    }\n', '}\n', '\n', 'contract IND is ERC20Basic {\n', '    string public constant name = "INDIA COIN";\n', '    string public constant symbol = "IND";\n', '    uint8 public constant decimals = 18;\n', '    uint256 public constant INITIAL_SUPPLY = 1400000000 * 10**18;\n', '\tconstructor(address _owner){\n', '\t   owner = _owner;\n', '       totalSupply_ = INITIAL_SUPPLY;\n', '       balances[_owner] = INITIAL_SUPPLY;\n', '\t   emit Transfer(address(0), _owner, INITIAL_SUPPLY);\n', '   }\n', '}']