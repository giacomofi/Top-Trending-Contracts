['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-12\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.8.1 <0.9.0;\n', '\n', 'contract ERC20 {\n', '    uint256 public totalSupply;\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowances;\n', '\n', '    using SafeMath for uint256;\n', '\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function allowanceOf(address _owner, address _delegate) public view returns (uint256) {\n', '        return allowances[_owner][_delegate];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _amount) public returns (bool success) {\n', '        balances[msg.sender] = balances[msg.sender] - _amount;\n', '        balances[_to] = balances[_to] + _amount;\n', '\n', '        emit Transfer(msg.sender, _to, _amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    function approve(address _delegate, uint256 _amount) public returns (bool success) {\n', '        allowances[msg.sender][_delegate] = _amount;\n', '\n', '        emit Approval(msg.sender, _delegate, _amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\n', '        allowances[_from][msg.sender] = allowances[_from][msg.sender] - _amount;\n', '\n', '        balances[_from] = balances[_from] - _amount;\n', '        balances[_to] = balances[_to] + _amount;\n', '        \n', '        emit Transfer(_from, _to, _amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    event Approval(address indexed _owner, address indexed _delegate, uint256 _amount);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n', '}\n', '\n', 'abstract contract ERC677 is ERC20 {\n', '    function transferAndCall(address _to, uint256 _amount, bytes calldata _data) public virtual returns (bool success);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _amount, bytes _data);\n', '}\n', '\n', 'abstract contract ERC677Receiver {\n', '  function onTokenTransfer(address _sender, uint256 _amount, bytes calldata _data) virtual public;\n', '}\n', '\n', 'contract StarterToken is ERC20 {\n', '    function increaseApproval (address _delegate, uint256 _amount) public returns (bool success) {\n', '        allowances[msg.sender][_delegate] = allowances[msg.sender][_delegate] + _amount;\n', '\n', '        emit Approval(msg.sender, _delegate, allowances[msg.sender][_delegate]);\n', '\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval (address _delegate, uint256 _amount) public returns (bool success) {\n', '        uint256 currVal = allowances[msg.sender][_delegate];\n', '    \n', '        if (_amount > currVal) {\n', '            allowances[msg.sender][_delegate] = 0;\n', '        } else {\n', '            allowances[msg.sender][_delegate] = currVal - _amount;\n', '        }\n', '    \n', '        emit Approval(msg.sender, _delegate, allowances[msg.sender][_delegate]);\n', '    \n', '        return true;\n', '    }\n', '}\n', '\n', 'contract ERC677Token is ERC677 {\n', '    function transferAndCall(address _to, uint256 _amount, bytes calldata _data) public virtual override returns (bool success)\n', '    {\n', '        super.transfer(_to, _amount);\n', '\n', '        emit Transfer(msg.sender, _to, _amount, _data);\n', '    \n', '        if (isContract(_to)) {\n', '            contractFallback(_to, _amount, _data);\n', '        }\n', '    \n', '        return true;\n', '    }\n', '\n', '    // PRIVATE\n', '\n', '    function contractFallback(address _to, uint256 _amount, bytes calldata _data) private {\n', '        ERC677Receiver receiver = ERC677Receiver(_to);\n', '    \n', '        receiver.onTokenTransfer(msg.sender, _amount, _data);\n', '    }\n', '\n', '    function isContract(address _addr) private view returns (bool hasCode)\n', '    {\n', '        uint256 length;\n', '\n', '        assembly { length := extcodesize(_addr) }\n', '\n', '        return length > 0;\n', '    }\n', '}\n', '\n', 'contract BisonToken is StarterToken, ERC677Token {\n', '    string public constant name = "Bison";\n', '    string public constant symbol = "BSN";\n', '    uint8 public constant decimals = 18;\n', '\n', '\taddress public owner;\n', '\n', '    event Burn(address indexed _from, uint256 _amount);\n', '\n', '    using SafeMath for uint256;\n', '\n', '    constructor() {\n', '        owner = msg.sender;\n', '        totalSupply = 10**27;\n', '        balances[msg.sender] = totalSupply;\n', '    }\n', '\n', '    function transferAndCall(address _to, uint _amount, bytes calldata _data) public override validReciever(_to) returns (bool success) {\n', '        return super.transferAndCall(_to, _amount, _data);\n', '    }\n', '\n', '    function burn(uint256 _amount) isOwner public returns (bool success) {\n', '        require(_amount > 0);\n', '\n', '        balances[msg.sender] = balances[msg.sender] - _amount;\n', '        totalSupply = totalSupply - _amount;\n', '\n', '        emit Burn(msg.sender, _amount);\n', '\n', '        return true;\n', '    }\n', '\t\n', '    // MODIFIERS\n', '\n', '    modifier validReciever(address _to) {\n', '        require(_to != address(0x0) && _to != address(this));\n', '        _;\n', '    }\n', '\n', '    modifier isOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 _x, uint256 _y) internal pure returns (uint256) {\n', '    if (_x == 0) {\n', '        return 0;\n', '    }\n', '    uint256 z = _x * _y;\n', '    require(z / _x == _y, "SafeMath: multiplication overflow");\n', '    return z;\n', '  }\n', '\n', '  function div(uint256 _x, uint256 _y) internal pure returns (uint256) {\n', '    require(_y > 0, "SafeMath: division by zero");\n', '    uint256 z = _x / _y;\n', '    return z;\n', '  }\n', '\n', '  function sub(uint256 _x, uint256 _y) internal pure returns (uint256) {\n', '    require(_y <= _x, "SafeMath: subtraction overflow");\n', '    return _x - _y;\n', '  }\n', '\n', '  function add(uint256 _x, uint256 _y) internal pure returns (uint256) {\n', '    uint256 z = _x + _y;\n', '    require(z >= _x, "SafeMath: addition overflow");\n', '    return z;\n', '  }\n', '}']