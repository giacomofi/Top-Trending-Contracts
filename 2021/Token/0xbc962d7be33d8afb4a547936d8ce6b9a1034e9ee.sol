['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-24\n', '*/\n', '\n', '//"SPDX-License-Identifier: UNLICENSED"\n', '\n', 'pragma solidity ^0.6.6;\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '  /**\n', '   * @dev Returns the amount of tokens in existence.\n', '   */\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  /**\n', '   * @dev Returns the amount of tokens owned by `account`.\n', '   */\n', '  function balanceOf(address account) external view returns (uint256);\n', '\n', '  /**\n', "   * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '   *\n', '   * Returns a boolean value indicating whether the operation succeeded.\n', '   *\n', '   * Emits a {Transfer} event.\n', '   */\n', '  function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '  /**\n', '   * @dev Returns the remaining number of tokens that `spender` will be\n', '   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '   * zero by default.\n', '   *\n', '   * This value changes when {approve} or {transferFrom} are called.\n', '   */\n', '  function allowance(address owner, address spender)\n', '    external\n', '    view\n', '    returns (uint256);\n', '\n', '  /**\n', "   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '   *\n', '   * Returns a boolean value indicating whether the operation succeeded.\n', '   *\n', '   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '   * that someone may use both the old and the new allowance by unfortunate\n', '   * transaction ordering. One possible solution to mitigate this race\n', "   * condition is to first reduce the spender's allowance to 0 and set the\n", '   * desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   *\n', '   * Emits an {Approval} event.\n', '   */\n', '  function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '  /**\n', '   * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "   * allowance mechanism. `amount` is then deducted from the caller's\n", '   * allowance.\n', '   *\n', '   * Returns a boolean value indicating whether the operation succeeded.\n', '   *\n', '   * Emits a {Transfer} event.\n', '   */\n', '  function transferFrom(\n', '    address sender,\n', '    address recipient,\n', '    uint256 amount\n', '  ) external returns (bool);\n', '\n', '  /**\n', '   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '   * another (`to`).\n', '   *\n', '   * Note that `value` may be zero.\n', '   */\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '  /**\n', '   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '   * a call to {approve}. `value` is the new allowance.\n', '   */\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract Multiplier{\n', '    //instantiating SafeMath library\n', '    using SafeMath for uint;\n', '    \n', '    //instance of utility token\n', '    IERC20 private _token;\n', '    \n', '    //struct\n', '    struct User {\n', '        uint balance;\n', '        uint release;\n', '        address approved;\n', '    }\n', '    \n', '    //address to User mapping\n', '    mapping(address => User) private _users;\n', '    \n', '    //multiplier constance for multiplying rewards\n', '    uint private constant _MULTIPLIER_CEILING = 2;\n', '    \n', '    //events\n', '    event Deposited(address indexed user, uint amount);\n', '    event Withdrawn(address indexed user, uint amount, uint time);\n', '    event NewLockup(address indexed poolstake, address indexed user, uint lockup);\n', '    event ContractApproved(address indexed user, address contractAddress);\n', '    \n', '    /* \n', '     * @dev instantiate the multiplier.\n', '     * --------------------------------\n', '     * @param token--> the token that will be locked up.\n', '     */    \n', '    constructor(address token) public {\n', '        require(token != address(0), "token must not be the zero address");\n', '        _token = IERC20(token);\n', '    }\n', '\n', '    /* \n', '     * @dev top up the available balance.\n', '     * --------------------------------\n', '     * @param _amount --> the amount to lock up.\n', '     * -------------------------------\n', '     * returns whether successfully topped up or not.\n', '     */  \n', '    function deposit(uint _amount) external returns(bool) {\n', '        \n', '        require(_amount > 0, "amount must be larger than zero");\n', '        \n', '        require(_token.transferFrom(msg.sender, address(this), _amount), "amount must be approved");\n', '        _users[msg.sender].balance = balance(msg.sender).add(_amount);\n', '        \n', '        emit Deposited(msg.sender, _amount);\n', '        return true;\n', '    }\n', '    \n', '    /* \n', '     * @dev approve a contract to use Multiplier\n', '     * -------------------------------------------\n', '     * @param _traditional --> the contract address to approve\n', '     * -------------------------------------------------------\n', '     * returns whether successfully approved or not\n', '     */ \n', '    function approveContract(address _traditional) external returns(bool) {\n', '        \n', '        require(_users[msg.sender].approved != _traditional, "already approved");\n', '        require(Address.isContract(_traditional), "can only approve a contract");\n', '        \n', '        _users[msg.sender].approved = _traditional;\n', '        \n', '        emit ContractApproved(msg.sender, _traditional);\n', '        return true;\n', '    } \n', '    \n', '    /* \n', '     * @dev withdraw released multiplier balance.\n', '     * ----------------------------------------\n', '     * @param _amount --> the amount to be withdrawn.\n', '     * -------------------------------------------\n', '     * returns whether successfully withdrawn or not.\n', '     */\n', '    function withdraw(uint _amount) external returns(bool) {\n', '        \n', '        require(now >= _users[msg.sender].release, "must wait for release");\n', '        require(_amount > 0, "amount must be larger than zero");\n', '        require(balance(msg.sender) >= _amount, "must have a sufficient balance");\n', '        \n', '        _users[msg.sender].balance = balance(msg.sender).sub(_amount);\n', '        require(_token.transfer(msg.sender, _amount), "token transfer failed");\n', '        \n', '        emit Withdrawn(msg.sender, _amount, now);\n', '        return true;\n', '    }\n', '    \n', '    /* \n', '     * @dev updates the lockup period (called by pool contract)\n', '     * ----------------------------------------------------------\n', '     * IMPORTANT - can only be used to increase lockup\n', '     * -----------------------------------------------\n', '     * @param _lockup --> the vesting period\n', '     * -------------------------------------------\n', '     * returns whether successfully withdrawn or not.\n', '     */\n', '    function updateLockupPeriod(address _user, uint _lockup) external returns(bool) {\n', '        \n', '        require(Address.isContract(msg.sender), "only a smart contract can call");\n', '        require(_users[_user].approved == msg.sender, "contract is not approved");\n', '        require(now.add(_lockup) > _users[_user].release, "cannot reduce current lockup");\n', '        \n', '        _users[_user].release = now.add(_lockup);\n', '        \n', '        emit NewLockup(msg.sender, _user, _lockup);\n', '        return true;\n', '    }\n', '    \n', '    /* \n', '     * @dev get the multiplier ceiling for percentage calculations.\n', '     * ----------------------------------------------------------\n', '     * returns the multiplication factor.\n', '     */     \n', '    function getMultiplierCeiling() external pure returns(uint) {\n', '        \n', '        return _MULTIPLIER_CEILING;\n', '    }\n', '\n', '    /* \n', '     * @dev get the multiplier user balance.\n', '     * -----------------------------------\n', '     * @param _user --> the address of the user.\n', '     * ---------------------------------------\n', '     * returns the multiplier balance.\n', '     */ \n', '    function balance(address _user) public view returns(uint) {\n', '        \n', '        return _users[_user].balance;\n', '    }\n', '    \n', '    /* \n', '     * @dev get the approved Traditional contract address\n', '     * --------------------------------------------------\n', '     * @param _user --> the address of the user\n', '     * ----------------------------------------\n', '     * returns the approved contract address\n', '     */ \n', '    function approvedContract(address _user) external view returns(address) {\n', '        \n', '        return _users[_user].approved;\n', '    }\n', '    \n', '    /* \n', '     * @dev get the release of the multiplier balance.\n', '     * ---------------------------------------------\n', '     * @param user --> the address of the user.\n', '     * ---------------------------------------\n', '     * returns the release timestamp.\n', '     */     \n', '    function lockupPeriod(address _user) external view returns(uint) {\n', '        \n', '        uint release = _users[_user].release;\n', '        if (release > now) return (release.sub(now));\n', '        else return 0;\n', '    }\n', '}']