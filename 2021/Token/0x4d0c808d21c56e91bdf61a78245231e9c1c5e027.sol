['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-05\n', '*/\n', '\n', 'pragma solidity ^0.5.16;\n', '\n', 'library SafeMath {\n', '\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tuint256 c = a + b;\n', '\t\trequire(c >= a, "SafeMath: addition overflow");\n', '\n', '\t\treturn c;\n', '\t}\n', '\n', '\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\treturn sub(a, b, "SafeMath: subtraction overflow");\n', '\t}\n', '\n', '\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '\t\trequire(b <= a, errorMessage);\n', '\t\tuint256 c = a - b;\n', '\n', '\t\treturn c;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the multiplication of two unsigned integers, reverting on\n', '\t * overflow.\n', '\t *\n', "\t * Counterpart to Solidity's `*` operator.\n", '\t *\n', '\t * Requirements:\n', '\t * - Multiplication cannot overflow.\n', '\t */\n', '\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "\t\t// benefit is lost if 'b' is also tested.\n", '\t\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '\t\tif (a == 0) {\n', '\t\t\treturn 0;\n', '\t\t}\n', '\n', '\t\tuint256 c = a * b;\n', '\t\trequire(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '\t\treturn c;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the integer division of two unsigned integers. Reverts on\n', '\t * division by zero. The result is rounded towards zero.\n', '\t *\n', "\t * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '\t * uses an invalid opcode to revert (consuming all remaining gas).\n', '\t *\n', '\t * Requirements:\n', '\t * - The divisor cannot be zero.\n', '\t */\n', '\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\treturn div(a, b, "SafeMath: division by zero");\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '\t * division by zero. The result is rounded towards zero.\n', '\t *\n', "\t * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '\t * uses an invalid opcode to revert (consuming all remaining gas).\n', '\t *\n', '\t * Requirements:\n', '\t * - The divisor cannot be zero.\n', '\t *\n', '\t * _Available since v2.4.0._\n', '\t */\n', '\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '\t\t// Solidity only automatically asserts when dividing by 0\n', '\t\trequire(b > 0, errorMessage);\n', '\t\tuint256 c = a / b;\n', "\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '\t\treturn c;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '\t * Reverts when dividing by zero.\n', '\t *\n', "\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '\t * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '\t * invalid opcode to revert (consuming all remaining gas).\n', '\t *\n', '\t * Requirements:\n', '\t * - The divisor cannot be zero.\n', '\t */\n', '\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\treturn mod(a, b, "SafeMath: modulo by zero");\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '\t * Reverts with custom message when dividing by zero.\n', '\t *\n', "\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '\t * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '\t * invalid opcode to revert (consuming all remaining gas).\n', '\t *\n', '\t * Requirements:\n', '\t * - The divisor cannot be zero.\n', '\t *\n', '\t * _Available since v2.4.0._\n', '\t */\n', '\tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '\t\trequire(b != 0, errorMessage);\n', '\t\treturn a % b;\n', '\t}\n', '}\n', '\n', 'interface IERC20 {\n', '\t/**\n', '\t * @dev Returns the amount of tokens in existence.\n', '\t */\n', '\tfunction totalSupply() external view returns (uint256);\n', '\n', '\t/**\n', '\t * @dev Returns the amount of tokens owned by `account`.\n', '\t */\n', '\tfunction balanceOf(address account) external view returns (uint256);\n', '\t/**\n', "\t * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '\t *\n', '\t * Returns a boolean value indicating whether the operation succeeded.\n', '\t *\n', '\t * Emits a {Transfer} event.\n', '\t */\n', '\tfunction transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '\t/**\n', '\t * @dev Returns the remaining number of tokens that `spender` will be\n', '\t * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '\t * zero by default.\n', '\t *\n', '\t * This value changes when {approve} or {transferFrom} are called.\n', '\t */\n', '\tfunction allowance(address owner, address spender) external view returns (uint256);\n', '\n', '\t/**\n', "\t * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '\t *\n', '\t * Returns a boolean value indicating whether the operation succeeded.\n', '\t *\n', '\t * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '\t * that someone may use both the old and the new allowance by unfortunate\n', '\t * transaction ordering. One possible solution to mitigate this race\n', "\t * condition is to first reduce the spender's allowance to 0 and set the\n", '\t * desired value afterwards:\n', '\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '\t *\n', '\t * Emits an {Approval} event.\n', '\t */\n', '\tfunction approve(address spender, uint256 amount) external returns (bool);\n', '\n', '\t/**\n', '\t * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "\t * allowance mechanism. `amount` is then deducted from the caller's\n", '\t * allowance.\n', '\t *\n', '\t * Returns a boolean value indicating whether the operation succeeded.\n', '\t *\n', '\t * Emits a {Transfer} event.\n', '\t */\n', '\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '\t/**\n', '\t * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '\t * another (`to`).\n', '\t *\n', '\t * Note that `value` may be zero.\n', '\t */\n', '\tevent Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '\t/**\n', '\t * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '\t * a call to {approve}. `value` is the new allowance.\n', '\t */\n', '\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract Context {\n', '\t// Empty internal constructor, to prevent people from mistakenly deploying\n', '\t// an instance of this contract, which should be used via inheritance.\n', '\tconstructor () internal { }\n', '\t// solhint-disable-previous-line no-empty-blocks\n', '\n', '\tfunction _msgSender() internal view returns (address payable) {\n', '\t\treturn msg.sender;\n', '\t}\n', '\n', '\tfunction _msgData() internal view returns (bytes memory) {\n', '\t\tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '\t\treturn msg.data;\n', '\t}\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '\taddress private _owner;\n', '\n', '\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\t/**\n', '\t * @dev Initializes the contract setting the deployer as the initial owner.\n', '\t */\n', '\tconstructor () internal {\n', '\t\t_owner = _msgSender();\n', '\t\temit OwnershipTransferred(address(0), _owner);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the address of the current owner.\n', '\t */\n', '\tfunction owner() public view returns (address) {\n', '\t\treturn _owner;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Throws if called by any account other than the owner.\n', '\t */\n', '\tmodifier onlyOwner() {\n', '\t\trequire(isOwner(), "Ownable: caller is not the owner");\n', '\t\t_;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns true if the caller is the current owner.\n', '\t */\n', '\tfunction isOwner() public view returns (bool) {\n', '\t\treturn _msgSender() == _owner;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Leaves the contract without owner. It will not be possible to call\n', '\t * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '\t *\n', '\t * NOTE: Renouncing ownership will leave the contract without an owner,\n', '\t * thereby removing any functionality that is only available to the owner.\n', '\t */\n', '\tfunction renounceOwnership() public onlyOwner {\n', '\t\temit OwnershipTransferred(_owner, address(0));\n', '\t\t_owner = address(0);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '\t * Can only be called by the current owner.\n', '\t */\n', '\tfunction transferOwnership(address newOwner) public onlyOwner {\n', '\t\t_transferOwnership(newOwner);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '\t */\n', '\tfunction _transferOwnership(address newOwner) internal {\n', '\t\trequire(newOwner != address(0), "Ownable: new owner is the zero address");\n', '\t\temit OwnershipTransferred(_owner, newOwner);\n', '\t\t_owner = newOwner;\n', '\t}\n', '}\n', '\n', '/**\n', '* @dev Implementation of the {IERC20} interface.\n', '*\n', '* This implementation is agnostic to the way tokens are created. This means\n', '* that a supply mechanism has to be added in a derived contract using {_mint}.\n', '* For a generic mechanism see {ERC20PresetMinterPauser}.\n', '*\n', '* TIP: For a detailed writeup see our guide\n', '* https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', '* to implement supply mechanisms].\n', '*\n', '* We have followed general OpenZeppelin guidelines: functions revert instead\n', '* of returning `false` on failure. This behavior is nonetheless conventional\n', '* and does not conflict with the expectations of ERC20 applications.\n', '*\n', '* Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', '* This allows applications to reconstruct the allowance for all accounts just\n', '* by listening to said events. Other implementations of the EIP may not emit\n', "* these events, as it isn't required by the specification.\n", '*\n', '* Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', '* functions have been added to mitigate the well-known issues around setting\n', '* allowances. See {IERC20-approve}.\n', '*/\n', '\n', 'library Roles {\n', '\tstruct Role {\n', '\t\tmapping (address => bool) bearer;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev give an account access to this role\n', '\t*/\n', '\tfunction add(Role storage role, address account) internal {\n', '\t\trequire(account != address(0));\n', '\t\trole.bearer[account] = true;\n', '\t}\n', '\n', '\t/**\n', "\t* @dev remove an account's access to this role\n", '\t*/\n', '\tfunction remove(Role storage role, address account) internal {\n', '\t\trequire(account != address(0));\n', '\t\trole.bearer[account] = false;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev check if an account has this role\n', '\t* @return bool\n', '\t*/\n', '\tfunction has(Role storage role, address account)\n', '\t\tinternal\n', '\t\tview\n', '\t\treturns (bool)\n', '\t{\n', '\t\trequire(account != address(0));\n', '\t\treturn role.bearer[account];\n', '\t}\n', '}\n', '\n', 'contract MinterRole {\n', '\tusing Roles for Roles.Role;\n', '\n', '\tevent MinterAdded(address indexed account);\n', '\tevent MinterRemoved(address indexed account);\n', '\n', '\tRoles.Role private minters;\n', '\n', '\tconstructor() public {\n', '\t\t_addMinter(msg.sender);\n', '\t}\n', '\n', '\tmodifier onlyMinter() {\n', '\t\trequire(isMinter(msg.sender));\n', '\t\t_;\n', '\t}\n', '\n', '\tfunction isMinter(address account) public view returns (bool) {\n', '\t\treturn minters.has(account);\n', '\t}\n', '\n', '\tfunction addMinter(address account) public onlyMinter {\n', '\t\t_addMinter(account);\n', '\t}\n', '\n', '\tfunction renounceMinter() public {\n', '\t\t_removeMinter(msg.sender);\n', '\t}\n', '\n', '\tfunction _addMinter(address account) internal {\n', '\t\tminters.add(account);\n', '\t\temit MinterAdded(account);\n', '\t}\n', '\n', '\tfunction _removeMinter(address account) internal {\n', '\t\tminters.remove(account);\n', '\t\temit MinterRemoved(account);\n', '\t}\n', '}\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20Mintable}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', '*/\n', 'contract ERC20 is Context, IERC20 {\n', '\tusing SafeMath for uint256;\n', '\n', '\tmapping (address => uint256) private _balances;\n', '\tmapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '\tuint256 private _totalSupply;\n', '\t\n', '\tstring private _name;\n', '\tstring private _symbol;\n', '\tuint8 private _decimals = 18;\n', '\n', '\t/**\n', '\t * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\n', '\t * these values are immutable: they can only be set once during\n', '\t * construction.\n', '\t */\n', '\tconstructor (string memory name, string memory symbol) public {\n', '\t\t_name = name;\n', '\t\t_symbol = symbol;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the name of the token.\n', '\t */\n', '\tfunction name() public view returns (string memory) {\n', '\t\treturn _name;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the symbol of the token, usually a shorter version of the\n', '\t * name.\n', '\t */\n', '\tfunction symbol() public view returns (string memory) {\n', '\t\treturn _symbol;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Returns the number of decimals used to get its user representation.\n', '\t * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '\t * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '\t *\n', '\t * Tokens usually opt for a value of 18, imitating the relationship between\n', '\t * Ether and Wei.\n', '\t *\n', '\t * NOTE: This information is only used for _display_ purposes: it in\n', '\t * no way affects any of the arithmetic of the contract, including\n', '\t * {IERC20-balanceOf} and {IERC20-transfer}.\n', '\t */\n', '\tfunction decimals() public view returns (uint8) {\n', '\t\treturn _decimals;\n', '\t}\n', '\t\n', '\t/**\n', '\t * @dev See {IERC20-totalSupply}.\n', '\t */\n', '\tfunction totalSupply() public view returns (uint256) {\n', '\t\treturn _totalSupply;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev See {IERC20-balanceOf}.\n', '\t */\n', '\tfunction balanceOf(address account) public view returns (uint256) {\n', '\t\treturn _balances[account];\n', '\t}\n', '\n', '\t/**\n', '\t * @dev See {IERC20-transfer}.\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - `recipient` cannot be the zero address.\n', '\t * - the caller must have a balance of at least `amount`.\n', '\t */\n', '\tfunction transfer(address recipient, uint256 amount) public returns (bool) {\n', '\t\t_transfer(_msgSender(), recipient, amount);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev See {IERC20-allowance}.\n', '\t */\n', '\tfunction allowance(address owner, address spender) public view returns (uint256) {\n', '\t\treturn _allowances[owner][spender];\n', '\t}\n', '\n', '\t/**\n', '\t * @dev See {IERC20-approve}.\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - `spender` cannot be the zero address.\n', '\t */\n', '\tfunction approve(address spender, uint256 amount) public returns (bool) {\n', '\t\t_approve(_msgSender(), spender, amount);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev See {IERC20-transferFrom}.\n', '\t *\n', '\t * Emits an {Approval} event indicating the updated allowance. This is not\n', '\t * required by the EIP. See the note at the beginning of {ERC20};\n', '\t *\n', '\t * Requirements:\n', '\t * - `sender` and `recipient` cannot be the zero address.\n', '\t * - `sender` must have a balance of at least `amount`.\n', "\t * - the caller must have allowance for `sender`'s tokens of at least\n", '\t * `amount`.\n', '\t */\n', '\tfunction transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n', '\t\t_transfer(sender, recipient, amount);\n', '\t\t_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '\t *\n', '\t * This is an alternative to {approve} that can be used as a mitigation for\n', '\t * problems described in {IERC20-approve}.\n', '\t *\n', '\t * Emits an {Approval} event indicating the updated allowance.\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - `spender` cannot be the zero address.\n', '\t */\n', '\tfunction increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '\t *\n', '\t * This is an alternative to {approve} that can be used as a mitigation for\n', '\t * problems described in {IERC20-approve}.\n', '\t *\n', '\t * Emits an {Approval} event indicating the updated allowance.\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - `spender` cannot be the zero address.\n', '\t * - `spender` must have allowance for the caller of at least\n', '\t * `subtractedValue`.\n', '\t */\n', '\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '\t *\n', '\t * This is internal function is equivalent to {transfer}, and can be used to\n', '\t * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '\t *\n', '\t * Emits a {Transfer} event.\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - `sender` cannot be the zero address.\n', '\t * - `recipient` cannot be the zero address.\n', '\t * - `sender` must have a balance of at least `amount`.\n', '\t */\n', '\tfunction _transfer(address sender, address recipient, uint256 amount) internal {\n', '\t\trequire(sender != address(0), "ERC20: transfer from the zero address");\n', '\t\trequire(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '\t\t_balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '\t\t_balances[recipient] = _balances[recipient].add(amount);\n', '\t\temit Transfer(sender, recipient, amount);\n', '\t}\n', '\n', '\t/** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '\t * the total supply.\n', '\t *\n', '\t * Emits a {Transfer} event with `from` set to the zero address.\n', '\t *\n', '\t * Requirements\n', '\t *\n', '\t * - `to` cannot be the zero address.\n', '\t */\n', '\tfunction _mint(address account, uint256 amount) internal {\n', '\t\trequire(account != address(0), "ERC20: mint to the zero address");\n', '\n', '\t\t_totalSupply = _totalSupply.add(amount);\n', '\t\t_balances[account] = _balances[account].add(amount);\n', '\t\temit Transfer(address(0), account, amount);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Destroys `amount` tokens from `account`, reducing the\n', '\t * total supply.\n', '\t *\n', '\t * Emits a {Transfer} event with `to` set to the zero address.\n', '\t *\n', '\t * Requirements\n', '\t *\n', '\t * - `account` cannot be the zero address.\n', '\t * - `account` must have at least `amount` tokens.\n', '\t */\n', '\tfunction _burn(address account, uint256 amount) internal {\n', '\t\trequire(account != address(0), "ERC20: burn from the zero address");\n', '\n', '\t\t_balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '\t\t_totalSupply = _totalSupply.sub(amount);\n', '\t\temit Transfer(account, address(0), amount);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '\t *\n', '\t * This is internal function is equivalent to `approve`, and can be used to\n', '\t * e.g. set automatic allowances for certain subsystems, etc.\n', '\t *\n', '\t * Emits an {Approval} event.\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - `owner` cannot be the zero address.\n', '\t * - `spender` cannot be the zero address.\n', '\t */\n', '\tfunction _approve(address owner, address spender, uint256 amount) internal {\n', '\t\trequire(owner != address(0), "ERC20: approve from the zero address");\n', '\t\trequire(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '\t\t_allowances[owner][spender] = amount;\n', '\t\temit Approval(owner, spender, amount);\n', '\t}\n', '}\n', '\n', 'contract ERC20Mintable is ERC20, MinterRole {\n', '\t/**\n', '\t * @dev See {ERC20-_mint}.\n', '\t *\n', '\t * Requirements:\n', '\t *\n', '\t * - the caller must have the {MinterRole}.\n', '\t */\n', '\tfunction mint(address account, uint256 amount) public onlyMinter returns (bool) {\n', '\t\t_mint(account, amount);\n', '\t\treturn true;\n', '\t}\n', '}\n', '\n', 'contract OAK is ERC20Mintable {\n', '\t\n', '\tuint256 public supplyCap = 1000000000000e18;\n', '\t\n', '\tconstructor (address trustee) public ERC20("1oakToken", "OAK") {\n', '\t\t// 20% of supply\n', '\t\tmint(trustee, 200000000000e18);\n', '\n', '\t\t// 20% of supply\n', '\t\tmint(trustee, 200000000000e18);\n', '\t}\n', '\t\n', '\tfunction mint(address account, uint256 amount) public returns (bool) {\n', '\t\trequire(totalSupply().add(amount) <= supplyCap);\n', '\t\treturn super.mint(account, amount);\n', '\t}\n', '\t\n', '}']