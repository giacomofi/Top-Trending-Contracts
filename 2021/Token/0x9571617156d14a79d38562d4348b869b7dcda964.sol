['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-28\n', '*/\n', '\n', 'pragma solidity 0.7.6;\n', '\n', 'interface IERC20 {\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    \n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '}\n', '\n', 'interface ICryptoHouse {\n', '\tfunction transfer(address to, uint houseIndex) external;\n', '\tfunction transferFrom(address from, address to, uint256 tokenId) external;\n', '}\n', '\n', 'contract WrappedCryptoHouse is IERC20{\n', '\n', '    address author;\n', '    uint256 _totalSupply;\n', '    \n', '\tICryptoHouse public token;\n', '\n', '\tstring constant public name = "WrappedCryptoHouse";\n', '\tstring constant public symbol = "WHOUSE";\n', '\tuint8 constant public decimals = 6;\n', '\tuint256 constant private token_precision = 1e6;\n', '\tuint256 constant private initial_supply = 0;\n', '\tuint256 constant private wrap_amount =  100 * token_precision;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '    \n', '    event WrapToken(uint256 indexed houseIndex, address indexed fromAddress);\n', '    event UnWrapToken(uint256 indexed houseIndex, address indexed toAddress);\n', '    \n', '    uint[] public nftTokens;\n', '    \n', '    function getAllNFTTokens() public view returns (uint[] memory _allNftTokens) {\n', '        uint[] memory allNftTokens = new uint[](nftTokens.length);\n', '         \n', '        for(uint i = 0; i < nftTokens.length; i++) {\n', '            allNftTokens[i] = nftTokens[i];\n', '        }\n', '        \n', '        return (allNftTokens);\n', '    }\n', '\n', '\tfunction refundWrongSendCryptoHouses(uint houseIndex) public{\n', '\t\trequire(msg.sender == author);\n', '\t\ttoken.transfer(author, houseIndex);\n', '\t}\n', '\n', '\tfunction wrapCryptoHouse(uint houseIndex) public {\n', '\t    token.transferFrom(msg.sender, address(this), houseIndex);\n', '\t    \n', '\t\t_totalSupply += wrap_amount;\n', '\t\t_balances[msg.sender] += wrap_amount;\n', '\t\t\n', '\t\tnftTokens.push(houseIndex);\n', '\t\t\n', '\t\temit WrapToken(houseIndex, msg.sender);\n', '\t\temit Transfer(address(0), msg.sender, wrap_amount);\n', '\t}\n', '\n', '\tfunction unWrapCryptoHouses() public{\n', '\t    require(_balances[msg.sender] >= wrap_amount);\n', '\t    \n', '\t\t_balances[msg.sender] -= wrap_amount;\n', '\t\t_totalSupply -= wrap_amount;\n', '        \n', '        uint houseIndex = swapAndDeleteElement(randomElement());\n', '\t\ttoken.transfer(msg.sender, houseIndex);\n', '\t\t\n', '\t\temit UnWrapToken(houseIndex, msg.sender);\n', '\t\temit Transfer(msg.sender, address(0), wrap_amount);\n', '\t}\n', '\n', '\tfunction randomElement()  private view returns(uint){\n', '\t\treturn uint(keccak256(abi.encodePacked(block.difficulty, block.timestamp, nftTokens))) % nftTokens.length;\n', '\t}\n', '\n', '\tfunction swapAndDeleteElement(uint index) private returns(uint _element){\n', '\t\tuint element = nftTokens[index];\n', '\t\tnftTokens[index] = nftTokens[nftTokens.length - 1];\n', '\t\tdelete nftTokens[nftTokens.length - 1];\n', '\t    nftTokens.pop();\n', '\t\treturn element;\n', '\t}\n', '\t\n', '\tconstructor() {\n', '\t\ttoken = ICryptoHouse(0x3d184e68Cf7D1aCFD78A8bDf656EAc20b8352988);\n', '\t\tauthor = msg.sender;\n', '\t\t_totalSupply = initial_supply;\n', '\t}\n', '\n', '    function totalSupply() public view virtual override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) public view virtual override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(msg.sender, recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '\n', '        uint256 currentAllowance = _allowances[sender][msg.sender];\n', '        require(currentAllowance >= amount);\n', '        _approve(sender, msg.sender, currentAllowance - amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        uint256 currentAllowance = _allowances[msg.sender][spender];\n', '        require(currentAllowance >= subtractedValue);\n', '        _approve(msg.sender, spender, currentAllowance - subtractedValue);\n', '\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0));\n', '        require(recipient != address(0));\n', '\n', '        uint256 senderBalance = _balances[sender];\n', '        require(senderBalance >= amount);\n', '        _balances[sender] = senderBalance - amount;\n', '        _balances[recipient] += amount;\n', '\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0));\n', '        require(spender != address(0));\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '}']