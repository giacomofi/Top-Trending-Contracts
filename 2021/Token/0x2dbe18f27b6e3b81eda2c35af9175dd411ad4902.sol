['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-02\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity=0.7.6;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'interface IERC3156FlashLender {\n', '\n', '    /**\n', '     * @dev The amount of currency available to be lended.\n', '     * @param token The loan currency.\n', '     * @return The amount of `token` that can be borrowed.\n', '     */\n', '    function maxFlashLoan(\n', '        address token\n', '    ) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev The fee to be charged for a given loan.\n', '     * @param token The loan currency.\n', '     * @param amount The amount of tokens lent.\n', '     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\n', '     */\n', '    function flashFee(\n', '        address token,\n', '        uint256 amount\n', '    ) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Initiate a flash loan.\n', '     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\n', '     * @param token The loan currency.\n', '     * @param amount The amount of tokens lent.\n', '     * @param data Arbitrary data structure, intended to contain user-defined parameters.\n', '     */\n', '    function flashLoan(\n', '        IERC3156FlashBorrower receiver,\n', '        address token,\n', '        uint256 amount,\n', '        bytes calldata data\n', '    ) external returns (bool);\n', '}\n', '\n', 'interface IERC3156FlashBorrower {\n', '\n', '    /**\n', '     * @dev Receive a flash loan.\n', '     * @param initiator The initiator of the loan.\n', '     * @param token The loan currency.\n', '     * @param amount The amount of tokens lent.\n', '     * @param fee The additional amount of tokens to repay.\n', '     * @param data Arbitrary data structure, intended to contain user-defined parameters.\n', '     * @return The keccak256 hash of "ERC3156FlashBorrower.onFlashLoan"\n', '     */\n', '    function onFlashLoan(\n', '        address initiator,\n', '        address token,\n', '        uint256 amount,\n', '        uint256 fee,\n', '        bytes calldata data\n', '    ) external returns (bytes32);\n', '}\n', '\n', 'contract NewsFlash is IERC3156FlashBorrower {\n', '    address constant WETH10 = 0xf4BB2e28688e89fCcE3c0580D37d36A7672E8A9F;\n', '\n', '    event BreakingNews(string headline, uint etherInSupport);\n', '\n', '    function flash() external {\n', '        IERC3156FlashLender(WETH10).flashLoan(\n', '            IERC3156FlashBorrower(address(this)),\n', '            WETH10,\n', '            type(uint112).max,\n', '            new bytes(0)\n', '        );\n', '    }\n', '\n', '    function onFlashLoan(\n', '        address initiator,\n', '        address token,\n', '        uint256 amount,\n', '        uint256 fee,\n', '        bytes calldata data\n', '    ) external override returns (bytes32) {\n', '        uint256 balance = IERC20(WETH10).balanceOf(address(this));\n', '        emit BreakingNews("Flash minting is dumb", balance);\n', '        IERC20(WETH10).approve(WETH10, balance);\n', '        return keccak256("ERC3156FlashBorrower.onFlashLoan");\n', '    }\n', '}']