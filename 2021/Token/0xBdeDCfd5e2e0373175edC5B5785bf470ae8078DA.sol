['// SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity 0.6.12;\n', '\n', 'import "./AccessControlUpgradeable.sol";\n', 'import "./PausableUpgradeable.sol";\n', 'import "./ERC20Upgradeable.sol";\n', 'import "./EnumerableSetUpgradeable.sol";\n', '\n', '\n', '/**\n', ' * @title SQCoin (Version 1) Smart Contract\n', ' * @author Swissquote Bank SA\n', ' * @notice Simple ERC20 type smart contract with\n', ' *    upgrable, pausable, blocklist, mint and burn features\n', ' * @dev Each action have its own role which can be altered by `AccessControl`\n', ' *    inherited methods: `grantRole`, `revokeRole`, `renounceRole`\n', ' */\n', 'contract SQCoinV1 is Initializable, ContextUpgradeable, AccessControlUpgradeable, PausableUpgradeable, ERC20Upgradeable {\n', '\n', '    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n', '\n', '    bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");\n', '    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");\n', '    bytes32 public constant BURNER_ROLE = keccak256("BURNER_ROLE");\n', '    bytes32 public constant BLOCKER_ROLE = keccak256("BLOCKER_ROLE");\n', '\n', '    /**\n', '     * @dev Emitted when account is added to _blocklist\n', '     */\n', '    event Blocked(address indexed account, address blocker);\n', '\n', '    /**\n', '     * @dev Emitted when account is removed from _blocklist\n', '     */\n', '    event Unblocked(address indexed account, address unblocker);\n', '\n', '    EnumerableSetUpgradeable.AddressSet private _transferBlockList;\n', '\n', '    /**\n', '     * @dev initialize the context, accessControl, ERC20, pausable and setups the DEFAULT_ADMIN_ROLE to administrator\n', '     * @param name of the token\n', '     * @param symbol of the token\n', '     * @param decimals number of decimals of the token\n', '     * @param administrator address that gets the DEFAULT_ADMIN_ROLE\n', '     * NOTE : Decimals should be a number between 2 and 18\n', '     */\n', '    function initialize(string memory name, string memory symbol, uint8 decimals, address administrator) public initializer {\n', '        __Context_init_unchained();\n', '        __AccessControl_init_unchained();\n', '        __Pausable_init_unchained();\n', '        __ERC20_init_unchained(name, symbol);\n', '        _setupDecimals(decimals);\n', '        _setupRole(DEFAULT_ADMIN_ROLE, administrator);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Triggers paused state\n', '     * Requires sender to be in PAUSER_ROLE\n', '     */\n', '    function pause() external {\n', '        require(hasRole(PAUSER_ROLE, _msgSender()), "SQCoin: Caller is not pauser");\n', '        _pause();\n', '    }\n', '\n', '    /**\n', '     * @dev Triggers normal state\n', '     * Requires sender to be in PAUSER_ROLE\n', '     */\n', '    function unpause() external {\n', '        require(hasRole(PAUSER_ROLE, _msgSender()), "SQCoin: Caller is not pauser");\n', '        _unpause();\n', '    }\n', '\n', '    /**\n', '     * @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     *    the total supply.\n', '     * Requires sender to be in MINTER_ROLE\n', '     * @param account to mint tokens to\n', '     * @param amount number of tokens to mint\n', '     */\n', '    function mint(address account, uint256 amount) external {\n', '        require(hasRole(MINTER_ROLE, _msgSender()), "SQCoin: Caller is not minter");\n', '        _mint(account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     *    total supply.\n', '     * Requires sender to be in BURNER_ROLE\n', '     * @param account burn tokens from\n', '     * @param amount number of tokens to burn\n', '     */\n', '    function burn(address account, uint256 amount) external {\n', '        require(hasRole(BURNER_ROLE, _msgSender()), "SQCoin: Caller is not burner");\n', '        _burn(account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Adds array of accounts into _blocklist, \n', '     *    forbiding receving and sending to these addresses\n', '     * Requires sender to be in BLOCKER_ROLE\n', '     * @param accounts list of accounts to be added\n', '     */\n', '    function blockAccounts(address[] memory accounts) external {\n', '        require(hasRole(BLOCKER_ROLE, _msgSender()), "SQCoin: Caller is not blocker");\n', '        for (uint256 i = 0; i < accounts.length; i++) {\n', '            if (_transferBlockList.add(accounts[i])) {\n', '                emit Blocked(accounts[i], _msgSender());\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes array of accounts from _blocklist\n', '     * Requires sender to be in BLOCKER_ROLE\n', '     * @param accounts list of accounts to be removed\n', '     */\n', '    function unblockAccounts(address[] memory accounts) external {\n', '        require(hasRole(BLOCKER_ROLE, _msgSender()), "SQCoin: Caller is not blocker");\n', '        for (uint256 i = 0; i < accounts.length; i++) {\n', '            if (_transferBlockList.remove(accounts[i])) {\n', '                emit Unblocked(accounts[i], _msgSender());\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns `true` if `account` is in _blocklist\n', '     * @param account to be ckecked\n', '     */\n', '    function isBlockedAccount(address account) public view returns (bool) {\n', '        return _transferBlockList.contains(account);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns account in _blocklist at `index` position\n', '     * @param index position of account in _blocklist\n', '     */\n', '    function getBlockedAccount(uint256 index) public view returns (address) {\n', '        return _transferBlockList.at(index);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of accounts in _blocklist\n', '     */\n', '    function getBlockedAccountCount() public view returns (uint256) {\n', '        return _transferBlockList.length();\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     *    minting and burning.\n', '     * Requirements:\n', '     * - not paused OR `to` has MINTER_ROLE\n', '     * - `from` is not in _blocklist OR `to` is 0 (burn)\n', '     * - `to` is not in _blocklist\n', '     * - from ERC20.sol:\n', '     *    - `from` cannot be the zero address\n', '     *    - `to` cannot be the zero address\n', '     *    - `from` must have a balance of at least `amount`\n', '     * @param from sender address `from` cannot be the zero address\n', '     * @param to receiver address `to` cannot be the zero address\n', '     * @param amount number of tokens to be transfered `from` must have a balance of at least `amount`\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\n', '        super._beforeTokenTransfer(from, to, amount);\n', '\n', '        require(!paused() || hasRole(MINTER_ROLE, to), "SQCoin: token transfer while paused");\n', '        require(!_transferBlockList.contains(from) || to == address(0), "SQCoin: from is in blocklist");\n', '        require(!_transferBlockList.contains(to), "SQCoin: to is in blocklist");\n', '    }\n', '}']