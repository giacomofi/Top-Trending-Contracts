['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-10\n', '*/\n', '\n', 'pragma solidity 0.5.8;\n', ' \n', 'library SafeMath {\n', '    /**\n', '    * @dev Multiplies two numbers, reverts on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '        return c;\n', '    }\n', ' \n', '    /**\n', '    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', ' \n', '    /**\n', '    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', ' \n', '    /**\n', '    * @dev Adds two numbers, reverts on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', ' \n', '    /**\n', '    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', ' \n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address who) external view returns (uint256);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '    event Transfer(address indexed from,address indexed to,uint256 value);\n', '    event Approval(address indexed owner,address indexed spender,uint256 value);\n', '}\n', ' \n', 'contract ERC20 is IERC20 {\n', '    using SafeMath for uint256;\n', '    mapping (address => uint256) public _balances;\n', '    mapping (address => mapping (address => uint256)) private _allowed;\n', '    uint256 public _totalSupply;\n', ' \n', '    /**\n', '    * @dev Total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', ' \n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        return _balances[owner];\n', '    }\n', ' \n', '    function allowance(address owner,address spender) public view returns (uint256) {\n', '        return _allowed[owner][spender];\n', '    }\n', ' \n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', ' \n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        require(spender != address(0));\n', '        _allowed[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', ' \n', '    function transferFrom(address from,address to,uint256 value) public returns (bool) {\n', '        require(value <= _allowed[from][msg.sender]);\n', '        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '        _transfer(from, to, value);\n', '        return true;\n', '    }\n', ' \n', '    function increaseAllowance(address spender,uint256 addedValue) public returns (bool) {\n', '        require(spender != address(0));\n', '        _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\n', '        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', ' \n', '    function decreaseAllowance(address spender,uint256 subtractedValue) public returns (bool) {\n', '        require(spender != address(0));\n', '        _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\n', '        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', ' \n', '    function _transfer(address from, address to, uint256 value) internal {\n', '        require(to != address(0));\n', '        require(value <= _balances[from]);\n', '        _balances[from] = _balances[from].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '}\n', ' \n', 'contract ProfitToken is ERC20 {\n', '    string private _name;\n', '    string  private _symbol;\n', '    uint8   private _decimals;\n', ' \n', '    constructor (uint256 _initialAmount, string memory name, uint8 decimals, string memory symbol) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '        _totalSupply = _initialAmount.mul(10 ** uint256(_decimals));\n', '        _balances[0xD136c8d017927A3450F3741315d0C4ba06253992] = _initialAmount.mul(10 ** uint256(_decimals));\n', '    }\n', ' \n', '    /**\n', '    * @return the name of the token.\n', '    */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', ' \n', '    /**\n', '    * @return the symbol of the token.\n', '    */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', ' \n', '    /**\n', '    * @return the number of decimals of the token.\n', '    */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', ' \n', '}']