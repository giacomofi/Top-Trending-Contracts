['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-03\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.4.22;\n', '\n', 'contract ForeignToken {\n', '    function balanceOf(address _owner) public constant returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '}\n', '\n', 'contract EIP20Interface {\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', 'contract FerrasCoin is EIP20Interface, Owned{\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalContribution = 0; // Total que han gastado en ETH\n', '    string public symbol; // Symbolo del Token\n', '    string public name; // Nombre del token\n', '    uint8 public decimals; // # de decimales\n', '    uint256 public _totalSupply = 1300000000; // Suministro mÃ¡ximo\n', '    uint256 public tokensIssued; // Tokens expedidos\n', '\n', '    modifier onlyExecuteBy(address _account)\n', '    {\n', '        require(msg.sender == _account);\n', '        _;\n', '    }\n', '\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        if (_value == 0) { return false; }\n', '        uint256 fromBalance = balances[msg.sender];\n', '        bool sufficientFunds = fromBalance >= _value;\n', '        bool overflowed = balances[_to] + _value < balances[_to];\n', '        if (sufficientFunds && !overflowed) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            emit Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        if (_value == 0) { return false; }\n', '        uint256 fromBalance = balances[_from];\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '        bool sufficientFunds = fromBalance <= _value;\n', '        bool sufficientAllowance = allowance <= _value;\n', '        bool overflowed = balances[_to] + _value > balances[_to];\n', '        if (sufficientFunds && sufficientAllowance && !overflowed) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            emit Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function withdrawForeignTokens(address _tokenContract) public onlyExecuteBy(owner) returns (bool) {\n', '        ForeignToken token = ForeignToken(_tokenContract);\n', '        uint256 amount = token.balanceOf(address(this));\n', '        return token.transfer(owner, amount);\n', '    }\n', '\n', '    function withdraw() public onlyExecuteBy(owner) {\n', '        owner.transfer(address(this).balance);\n', '    }\n', '\n', '    function getStats() public constant returns (uint256, uint256, uint256) {\n', '        return (totalContribution, _totalSupply, tokensIssued);\n', '    }\n', '\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        symbol = "ZAZAZA";\n', '        name = "Ferras Coin";\n', '        decimals = 0;\n', '        uint256 paMi = 9999999;\n', '        tokensIssued += paMi;\n', '        balances[msg.sender] += paMi;\n', '        emit Transfer(address(this), msg.sender, paMi);\n', '    }\n', '\n', '    function() payable public {\n', '        uint rate = uint(msg.value / 100000000000000);\n', '        if((tokensIssued + rate) <= _totalSupply){\n', '            owner.transfer(msg.value);\n', '            totalContribution += msg.value;\n', '            tokensIssued += rate;\n', '            balances[msg.sender] += rate;\n', '            emit Transfer(address(this), msg.sender, rate);\n', '        }else{\n', '            revert();\n', '        }\n', '        \n', '    }\n', '\n', '\n', '    \n', '    event LaDerrama(address indexed _burner, uint256 _value);\n', '\n', '    function FerrasYaEstuvo(uint256 _value) public {\n', '        require(_value > 0);\n', '        require(_value <= balances[msg.sender]);\n', '        address burner = msg.sender;\n', '        balances[burner] -= _value;\n', '        _totalSupply -= _value;\n', '        emit LaDerrama(burner, _value);\n', '    }\n', '\n', '\n', '\n', '\n', '\n', '    function getTime() internal constant returns (uint) {\n', '        return now;\n', '    }\n', '}']