['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-01\n', '*/\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\n', '\n', 'pragma solidity >=0.4.24 <0.7.0;\n', '\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract ContextUpgradeSafe is Initializable {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '\n', '    function __Context_init() internal initializer {\n', '        __Context_init_unchained();\n', '    }\n', '\n', '    function __Context_init_unchained() internal initializer {\n', '\n', '\n', '    }\n', '\n', '\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '\n', '    uint256[50] private __gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '\n', '    function __Ownable_init() internal initializer {\n', '        __Context_init_unchained();\n', '        __Ownable_init_unchained();\n', '    }\n', '\n', '    function __Ownable_init_unchained() internal initializer {\n', '\n', '\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    uint256[49] private __gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/uniswapv2/interfaces/IUniswapV2Factory.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IUniswapV2Factory {\n', '    event PairCreated(\n', '        address indexed token0,\n', '        address indexed token1,\n', '        address pair,\n', '        uint256\n', '    );\n', '\n', '    function feeTo() external view returns (address);\n', '\n', '    function feeToSetter() external view returns (address);\n', '\n', '    function migrator() external view returns (address);\n', '\n', '    function getPair(address tokenA, address tokenB)\n', '        external\n', '        view\n', '        returns (address pair);\n', '\n', '    function allPairs(uint256) external view returns (address pair);\n', '\n', '    function allPairsLength() external view returns (uint256);\n', '\n', '    function createPair(address tokenA, address tokenB)\n', '        external\n', '        returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '\n', '    function setFeeToSetter(address) external;\n', '\n', '    function setMigrator(address) external;\n', '}\n', '\n', '// File: contracts/ITROP.sol\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IBaseToken {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '\n', '    event Log(string log);\n', '}\n', '\n', 'interface ITROP is IBaseToken {\n', '    function taxer() external view returns (address);\n', '\n', '    function rewardDistributor() external view returns (address);\n', '}\n', '\n', '// File: contracts/TaxerV2.sol\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'interface INerdVault {\n', '    function getRemainingLP(uint256 _pid, address _user)\n', '        external\n', '        view\n', '        returns (uint256);\n', '}\n', '\n', 'interface INerdStaking {\n', '    function getRemainingNerd(address _user) external view returns (uint256);\n', '}\n', '\n', 'contract TaxerV2 is OwnableUpgradeSafe {\n', '    using SafeMath for uint256;\n', '\n', '    function initialize() public initializer {\n', '        OwnableUpgradeSafe.__Ownable_init();\n', '        tropTokenAddress = 0x2eC75589856562646afE393455986CaD26c4Cc5f;\n', '        feePercentX100 = 20;\n', '        paused = false; // We start paused until sync post LGE happens.\n', '        _editNoFeeList(tropTokenAddress, true); //this is to not apply fees for transfer from the token contrat itself\n', '        nerdLpTokenMap[0x61E3FDF3Fb5808aCfd8b9cfE942c729c07b0fE21] = true;\n', '        nerdLpTokenMap[0x3473C92d47A2226B1503dFe7C929b2aE454F6b22] = true;\n', '        nerdLpTokenMap[0x7Ad060bd80E088F0c1adef7Aa50F4Df58BAf58d5] = true;\n', '        nerdLpTokenList.push(0x3473C92d47A2226B1503dFe7C929b2aE454F6b22);\n', '        nerdLpTokenList.push(0x61E3FDF3Fb5808aCfd8b9cfE942c729c07b0fE21);\n', '        nerdLpTokenList.push(0x7Ad060bd80E088F0c1adef7Aa50F4Df58BAf58d5);\n', '    }\n', '\n', '    constructor() public {\n', '        initialize();\n', '    }\n', '\n', '    address tropTokenAddress;\n', '    address tropVaultAddress;\n', '    uint8 public feePercentX100; // max 255 = 25.5% artificial clamp\n', '    bool paused;\n', '\n', '    mapping(address => bool) public noFeeList;\n', '    mapping(address => bool) public nerdLpTokenMap;\n', '    address[] public nerdLpTokenList;\n', '\n', '    //fee discounts based on nerd of the user, the snapshot is taken once per day bydefault, any one can update their own\n', '    mapping(address => uint256) public feeDiscounts;\n', '    mapping(address => uint256) public feeDiscountsLastUpdate;\n', '\n', '    // TROP token is pausable\n', '    function setPaused(bool _pause) public onlyOwner {\n', '        paused = _pause;\n', '    }\n', '\n', '    function setNerdLPAddresses(address[] calldata _addrs) public onlyOwner {\n', '        //reset old list\n', '        for (uint256 i = 0; i < nerdLpTokenList.length; i++) {\n', '            nerdLpTokenMap[nerdLpTokenList[i]] = false;\n', '        }\n', '        delete nerdLpTokenList;\n', '        for (uint256 i = 0; i < _addrs.length; i++) {\n', '            nerdLpTokenList.push(_addrs[i]);\n', '            nerdLpTokenMap[_addrs[i]] = true;\n', '        }\n', '    }\n', '\n', '    function setFeeMultiplier(uint8 _feeMultiplier) public onlyOwner {\n', '        feePercentX100 = _feeMultiplier;\n', '    }\n', '\n', '    function setTropVaultAddress(address _tropVaultAddress) public onlyOwner {\n', '        tropVaultAddress = _tropVaultAddress;\n', '        noFeeList[tropVaultAddress] = true;\n', '    }\n', '\n', '    function editNoFeeList(address _address, bool noFee) public onlyOwner {\n', '        _editNoFeeList(_address, noFee);\n', '    }\n', '\n', '    function _editNoFeeList(address _address, bool noFee) internal {\n', '        noFeeList[_address] = noFee;\n', '    }\n', '\n', '    IERC20 public nerd = IERC20(0x32C868F6318D6334B2250F323D914Bc2239E4EeE);\n', '    INerdVault public nerdVault = INerdVault(\n', '        0x47cE2237d7235Ff865E1C74bF3C6d9AF88d1bbfF\n', '    );\n', '    INerdStaking public nerdStaking = INerdStaking(\n', '        0x357ADa6E0da1BB40668BDDd3E3aF64F472Cbd9ff\n', '    );\n', '\n', '    //any one can update this\n', '    function computeDiscountFee(address _sender, bool _forceUpdate)\n', '        public\n', '        returns (uint256)\n', '    {\n', '        if (nerdLpTokenMap[_sender]) return 0; //no discount for lp token\n', '        if (!_forceUpdate) {\n', '            if (feeDiscountsLastUpdate[_sender].add(86400) > block.timestamp) {\n', '                return feeDiscounts[_sender];\n', '            }\n', '        }\n', '        //force update\n', '        feeDiscountsLastUpdate[_sender] = block.timestamp;\n', '        uint256 feeDiscount = 0;\n', '        {\n', '            uint256 poolLength = nerdLpTokenList.length;\n', '            for (uint256 i = 0; i < poolLength; i++) {\n', '                //lp amount\n', '                uint256 lpAmount = nerdVault.getRemainingLP(i, _sender);\n', '                uint256 lpSupply = IERC20(nerdLpTokenList[i]).balanceOf(\n', '                    address(nerdVault)\n', '                );\n', '                uint256 shareX1000 = lpAmount.mul(1000).div(lpSupply);\n', '                if (shareX1000 >= 10) {\n', '                    //share > 1%\n', '                    feeDiscounts[_sender] = 45;\n', '                    return 45;\n', '                } else if (shareX1000 >= 1) {\n', '                    feeDiscount = 20;\n', '                }\n', '            }\n', '        }\n', '\n', '        {\n', '            uint256 staked = nerdStaking.getRemainingNerd(_sender);\n', '            if (staked >= 50e18) {\n', '                feeDiscounts[_sender] = 30;\n', '                return 30;\n', '            } else if (staked >= 10e18) {\n', '                feeDiscounts[_sender] = 20;\n', '                return 20;\n', '            }\n', '        }\n', '        if (feeDiscount >= 15) {\n', '            feeDiscounts[_sender] = 15;\n', '            return 15;\n', '        }\n', '        {\n', '            uint256 nerdBal = nerd.balanceOf(_sender);\n', '            if (nerdBal >= 50e18) {\n', '                feeDiscounts[_sender] = 15;\n', '                return 15;\n', '            } else if (nerdBal >= 5e18) {\n', '                feeDiscounts[_sender] = 10;\n', '                return 10;\n', '            }\n', '        }\n', '        return 0;\n', '    }\n', '\n', '    bool feeDiscountEnable = false;\n', '\n', '    function setEnableFeeDiscount(bool _enable) external onlyOwner {\n', '        feeDiscountEnable = _enable;\n', '    }\n', '\n', '    function calculateAmountsAfterFee(\n', '        address sender,\n', '        address recipient, // unusued maybe use din future\n', '        uint256 amount\n', '    )\n', '        public\n', '        returns (\n', '            uint256 transferToAmount,\n', '            uint256 transferToFeeDistributorAmount\n', '        )\n', '    {\n', '        require(paused == false, "FEE APPROVER: Transfers Paused");\n', '        //this is to prevent bad actors listing token on uniswap to create bad price before an official listing from the team\n', '\n', '        if (noFeeList[sender] || noFeeList[recipient]) {\n', '            // Dont have a fee when tropvault is sending, or infinite loop\n', '            transferToFeeDistributorAmount = 0;\n', '            transferToAmount = amount;\n', '        } else {\n', '            if (feePercentX100 > 0) {\n', '                uint256 discountFeePercent = 0;\n', '                if (feeDiscountEnable) {\n', '                    discountFeePercent = computeDiscountFee(sender, false);\n', '                }\n', '                transferToFeeDistributorAmount = amount.mul(feePercentX100).div(\n', '                    1000\n', '                );\n', '                transferToFeeDistributorAmount = transferToFeeDistributorAmount\n', '                    .mul(100 - discountFeePercent)\n', '                    .div(100);\n', '                transferToAmount = amount.sub(transferToFeeDistributorAmount);\n', '            } else {\n', '                transferToFeeDistributorAmount = 0;\n', '                transferToAmount = amount;\n', '            }\n', '        }\n', '    }\n', '}']