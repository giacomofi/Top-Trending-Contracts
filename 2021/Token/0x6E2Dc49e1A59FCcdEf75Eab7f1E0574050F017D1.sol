['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-02\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2020-07-14\n', '*/\n', '\n', 'pragma solidity ^0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    /**\n', '     * @dev Give an account access to this role.\n', '     */\n', '    function add(Role storage role, address account) internal {\n', '        require(!has(role, account), "Roles: account already has role");\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '    /**\n', "     * @dev Remove an account's access to this role.\n", '     */\n', '    function remove(Role storage role, address account) internal {\n', '        require(has(role, account), "Roles: account does not have role");\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Check if an account has this role.\n', '     * @return bool\n', '     */\n', '    function has(Role storage role, address account) internal view returns (bool) {\n', '        require(account != address(0), "Roles: account is the zero address");\n', '        return role.bearer[account];\n', '    }\n', '}\n', '\n', 'contract OperatorRole is Context {\n', '    using Roles for Roles.Role;\n', '\n', '    event OperatorAdded(address indexed account);\n', '    event OperatorRemoved(address indexed account);\n', '\n', '    Roles.Role private _operators;\n', '\n', '    constructor () internal {\n', '\n', '    }\n', '\n', '    modifier onlyOperator() {\n', '        require(isOperator(_msgSender()), "OperatorRole: caller does not have the Operator role");\n', '        _;\n', '    }\n', '\n', '    function isOperator(address account) public view returns (bool) {\n', '        return _operators.has(account);\n', '    }\n', '\n', '    function _addOperator(address account) internal {\n', '        _operators.add(account);\n', '        emit OperatorAdded(account);\n', '    }\n', '\n', '    function _removeOperator(address account) internal {\n', '        _operators.remove(account);\n', '        emit OperatorRemoved(account);\n', '    }\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by owner (`account`).\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by owner (`account`).\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state\n', '     */\n', '    constructor () internal {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Called by a pauser to pause, triggers stopped state.\n', '     */\n', '    function pause() public onlyOwner whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Called by a pauser to unpause, returns to normal state.\n', '     */\n', '    function unpause() public onlyOwner whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external virtual returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20Mintable}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '    address[] public _owners;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public override view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public override view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) virtual public override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public override view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) virtual public override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for `sender`'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) virtual public override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) virtual public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) virtual public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        if (_balances[recipient] == 0) {\n', '            _owners.push(recipient);\n', '        }\n', '        \n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        \n', '        if (_balances[sender] == 0) {\n', '            _removeOwner(sender);\n', '        }\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        if (_balances[account] == 0) {\n', '            _owners.push(account);\n', '        }\n', '        \n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        \n', '        if (_balances[account] == 0) {\n', '            _removeOwner(account);\n', '        }\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '    \n', '    function _removeOwner(address account) internal {\n', '        uint256 i = 0;\n', '        while(_owners[i] != account && i < _owners.length) {\n', '            i++;\n', '        }\n', '        \n', '        if (i != _owners.length) {\n', '            _owners[i] = _owners[_owners.length - 1];\n', '            delete _owners[_owners.length - 1];\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n', "     * from the caller's allowance.\n", '     *\n', '     * See {_burn} and {_approve}.\n', '     */\n', '    function burnFrom(address account, uint256 amount) public {\n', '        _burn(account, amount);\n', '        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, "ERC20: burn amount exceeds allowance"));\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev ERC20 with pausable transfers and allowances.\n', ' *\n', ' * Useful if you want to stop trades until the end of a crowdsale, or have\n', ' * an emergency switch for freezing all token transfers in the event of a large\n', ' * bug.\n', ' */\n', 'contract ERC20Pausable is Ownable, Pausable, ERC20 {\n', '    function transfer(address to, uint256 value) virtual public override whenNotPaused returns (bool) {\n', '        return super.transfer(to, value);\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) virtual public override whenNotPaused returns (bool) {\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '\n', '    function approve(address spender, uint256 value) virtual public override whenNotPaused returns (bool) {\n', '        return super.approve(spender, value);\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) virtual public override whenNotPaused returns (bool) {\n', '        return super.increaseAllowance(spender, addedValue);\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) virtual public override whenNotPaused returns (bool) {\n', '        return super.decreaseAllowance(spender, subtractedValue);\n', '    }\n', '}\n', '\n', 'interface IERC165 {\n', '    /**\n', '     * @dev Returns true if this contract implements the interface defined by\n', '     * `interfaceId`. See the corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '     * to learn more about how these ids are created.\n', '     *\n', '     * This function call must use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '/**\n', ' * @dev Required interface of an ERC721 compliant contract.\n', ' */\n', 'abstract contract IERC721 is IERC165 {\n', '    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n', '    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n', '    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n', '\n', '    /**\n', "     * @dev Returns the number of NFTs in `owner`'s account.\n", '     */\n', '    function balanceOf(address owner) public virtual view returns (uint256 balance);\n', '\n', '    /**\n', '     * @dev Returns the owner of the NFT specified by `tokenId`.\n', '     */\n', '    function ownerOf(uint256 tokenId) public virtual view returns (address owner);\n', '\n', '    /**\n', '     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     *\n', '     *\n', '     * Requirements:\n', '     * - `from`, `to` cannot be zero.\n', '     * - `tokenId` must be owned by `from`.\n', '     * - If the caller is not `from`, it must be have been allowed to move this\n', '     * NFT by either {approve} or {setApprovalForAll}.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual ;\n', '    /**\n', '     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Requirements:\n', '     * - If the caller is not `from`, it must be approved to move this NFT by\n', '     * either {approve} or {setApprovalForAll}.\n', '     */\n', '    function transferFrom(address from, address to, uint256 tokenId) public virtual ;\n', '    function approve(address to, uint256 tokenId) public virtual ;\n', '    function getApproved(uint256 tokenId) public virtual view returns (address operator) ;\n', '\n', '    function setApprovalForAll(address operator, bool _approved) public virtual ;\n', '    function isApprovedForAll(address owner, address operator) public virtual view returns (bool);\n', '\n', '\n', '    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual ;\n', '    \n', '    function checkFeeDistributionPercentage(address[] memory _fee_receivers, uint256[] memory percentage) public virtual ;\n', '    \n', '    function getFeePercentage() public virtual view returns (uint256);\n', '    \n', '    function getDeployer() public virtual view returns (address);\n', '    \n', '    function clearStake(uint256 tokenId) public virtual ;\n', '    \n', '    function getStakingBlockNumber(uint256 tokenId) public virtual returns(uint256);\n', '    \n', '    function stake(uint256 tokenId, address _stakingAddress) public virtual ;\n', '}\n', '\n', 'contract OwnableOperatorRole is Ownable, OperatorRole {\n', '    function addOperator(address account) external onlyOwner {\n', '        _addOperator(account);\n', '    }\n', '\n', '    function removeOperator(address account) external onlyOwner {\n', '        _removeOperator(account);\n', '    }\n', '}\n', '\n', 'contract TransferProxy is OwnableOperatorRole {\n', '\n', '    function erc721safeTransferFrom(IERC721 token, address from, address to, uint256 tokenId) external onlyOperator {\n', '        token.safeTransferFrom(from, to, tokenId);\n', '    }\n', '\n', '    function erc721clearStake(IERC721 token, uint256 tokenId) external onlyOperator {\n', '        token.clearStake(tokenId);\n', '    }\n', '    \n', '    function erc721Stake(IERC721 token, uint256 tokenId, address stakingAddress) external onlyOperator {\n', '        token.stake(tokenId, stakingAddress);\n', '    }\n', '}\n', '\n', 'interface IUniswapV2Factory {\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    function feeTo() external view returns (address);\n', '    function feeToSetter() external view returns (address);\n', '\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '    function allPairs(uint) external view returns (address pair);\n', '    function allPairsLength() external view returns (uint);\n', '\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '    function setFeeToSetter(address) external;\n', '}\n', '\n', '// pragma solidity >=0.6.2;\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapTokensForExactTokens(\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '\n', '    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', '\n', '\n', '\n', '// pragma solidity >=0.6.2;\n', '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountETH);\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountETH);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '}\n', '\n', 'contract CaribMARS is ERC20Pausable {\n', '    string constant public name = "ChihuahuaMARS";\n', '    string constant public symbol = "CHIHUAHUAMARS";\n', '    uint8 constant public decimals = 9;\n', '    uint256 public totalMint = 0;\n', '    uint256 constant public maxSupply = 10**9 * 10**9;\n', '    \n', '    uint256 public farmFeePerBlock = 1;\n', '    uint256 public farmTokenAmount = 100000;\n', '    address public receivingAddress;\n', '    \n', '    uint256 public reflectFeePercentage;\n', '    mapping(address => uint256) public reflectFees;\n', '    \n', '    IUniswapV2Router02 public uniswapV2Router;\n', '    address public uniswapV2Pair;\n', '\n', '    bool public mintStopped = false;\n', '    \n', '    bool public swapAndLiquifyEnabled = true;\n', '    \n', '    uint256 public maxTokenBalance = 10 ** 9; // default(1 caribmars)\n', '    \n', '    // uint256 bnb_rate = 100; // 100/ 1000 => 10 %\n', '    \n', '    mapping(address => bool) excludeFeeMembers;\n', '    \n', '    // enum VoteStatus{ VALID, CANCELED, COMPLETED }\n', '    \n', '    // struct VoteItem {\n', '    //     string content;\n', '    //     uint256 requiredCnt;\n', '    //     uint256 yesCnt;\n', '    //     uint256 noCnt;\n', '    //     VoteStatus status;\n', '    //     address[] participants;\n', '    //     mapping(address => bool) result;\n', '    // }\n', '    \n', '    // struct VoteItemForExport {\n', '    //     string content;\n', '    //     uint256 requiredCnt;\n', '    //     uint256 yesCnt;\n', '    //     uint256 noCNT;\n', '    //     VoteStatus status;\n', '    // }\n', '    \n', '    // mapping (uint256 => VoteItem) _votes;\n', '    // uint256 _voteIndex = 0;\n', '\n', '    TransferProxy _proxy;\n', '\n', '    constructor(TransferProxy __proxy) public {\n', '        receivingAddress = _msgSender();\n', '        _proxy = __proxy;\n', '        reflectFeePercentage = 0;\n', '        \n', '        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); // 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D(ethereum), 0x9Ac64Cc6e4415144C455BD8E4837Fea55603e5c3(bsc testnet), 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D(ropsten)\n', '        uniswapV2Router = _uniswapV2Router;\n', '    }\n', '\n', '    function mint(address account, uint256 amount) public onlyOwner returns (bool) {\n', '        require(!mintStopped, "mint is stopped");\n', '        require(maxSupply > totalMint + amount, "mint exceeds max minatable amount.");\n', '        _mint(account, amount);\n', '        totalMint += amount;\n', '        return true;\n', '    }\n', '\n', '    function stopMint() public onlyOwner {\n', '        mintStopped = true;\n', '    }\n', '    \n', '    // function suggestVote(string memory content, uint256 requiredCnt) public onlyOwner {\n', '    //     require(requiredCnt != 0, "CaribMARS: the requiredCnt must be greater than 0.");\n', '        \n', '    //     VoteItem memory vote = VoteItem(content, requiredCnt, 0, 0, VoteStatus.VALID, new address[](0));\n', '    //     _votes[_voteIndex] = vote;\n', '    //     _voteIndex++;\n', '    // }\n', '    \n', '    // function cancelVote(uint256 index) public onlyOwner {\n', '    //     require(index < _voteIndex, "CaribMARS: not registered vote.");\n', '    //     require(_votes[index].status ==  VoteStatus.VALID, "CaribMARS: current vote is not valid.");\n', '        \n', '    //     _votes[index].status = VoteStatus.CANCELED;\n', '    // }\n', '    \n', '    // function completeVote(uint256 index) public onlyOwner {\n', '    //     require(index < _voteIndex, "CaribMARS: not registered vote.");\n', '    //     require(_votes[index].status ==  VoteStatus.VALID, "CaribMARS: current vote is not valid.");\n', '    //     require(_votes[index].requiredCnt <=  _votes[index].participants.length, "CaribMARS: participants cnt must be greater than required cnt.");\n', '        \n', '    //     _votes[index].status = VoteStatus.COMPLETED;\n', '    // }\n', '    \n', '    // function getVote(uint256 index) public view returns (VoteItemForExport memory) {\n', '    //     require(index < _voteIndex, "CaribMARS: not registered vote.");\n', '        \n', '    //     VoteItemForExport memory ret = VoteItemForExport(\n', '    //         _votes[index].content, \n', '    //         _votes[index].requiredCnt, \n', '    //         _votes[index].yesCnt, \n', '    //         _votes[index].noCnt, \n', '    //         _votes[index].status\n', '    //         );\n', '        \n', '    //     return ret;\n', '    // }\n', '    \n', '    // function joinVote(uint256 index, bool result) public {\n', '    //     require(index < _voteIndex, "CaribMARS: not registered vote.");\n', '    //     require(_votes[index].status ==  VoteStatus.VALID, "CaribMARS: current vote is not valid.");\n', '    //     require(balanceOf(msg.sender) != 0, "CaribMARS: you have to get governance token to join vote.");\n', '        \n', '    //     for (uint256 i = 0; i < _votes[index].participants.length; i++) {\n', '    //         require(msg.sender != _votes[index].participants[i], "CaribMARS: already joined to vote.");\n', '    //     }\n', '        \n', '    //     if (result) {\n', '    //         _votes[index].yesCnt++;\n', '    //     } else {\n', '    //         _votes[index].noCnt++;\n', '    //     }\n', '        \n', '    //     _votes[index].result[msg.sender] = result;\n', '    //     _votes[index].participants.push(msg.sender);\n', '    // }\n', '    \n', '    function clearStake(IERC721 token, uint256 tokenID) public {\n', '        require(token.getStakingBlockNumber(tokenID) != 0, "CaribMARS: not staked token.");\n', '        uint256 feeAmount = (block.number - token.getStakingBlockNumber(tokenID)) * farmFeePerBlock;\n', '        \n', '        transfer(receivingAddress, farmTokenAmount);\n', '        _proxy.erc721clearStake(token, tokenID);\n', '        _approve(receivingAddress, _msgSender(), feeAmount);\n', '        transferFrom(receivingAddress, token.ownerOf(tokenID), feeAmount);\n', '    }\n', '    \n', '    function stake(IERC721 token, uint256 tokenID) public {\n', '        _proxy.erc721Stake(token, tokenID, address(_proxy));\n', '        _approve(receivingAddress, _msgSender(), farmTokenAmount);\n', '        transferFrom(receivingAddress, token.ownerOf(tokenID), farmTokenAmount);\n', '    }\n', '    \n', '    function setReflectionFeePercentage(uint256 percentage) public onlyOwner {\n', '        require(percentage <= 100, "CaribMARS: reflection fee percentage must be less than 100.");\n', '        reflectFeePercentage = percentage;\n', '    }\n', '    \n', '    function transfer(address recipient, uint256 amount) public override returns (bool) {\n', '        require(balanceOf(_msgSender()) >= amount, "CaribMARS: amount with fee exceeds balance.");\n', '        \n', '        if (isExcludeFeeMember(_msgSender())) {\n', '            super.transfer(recipient, amount);\n', '        } else {\n', '            uint256 reflectionFee = (amount * reflectFeePercentage).div(100);\n', '            uint256 amountToBurn = reflectionFee.div(20);   // 5%\n', '            uint256 amountToDistribute = reflectionFee.mul(475).div(1000);    //47.5%\n', '            uint256 amountToLiquidity = reflectionFee - amountToBurn - amountToDistribute;\n', '            \n', '            super.transfer(recipient, amount - reflectionFee);\n', '            if (amountToBurn > 0) super._burn(_msgSender(), amountToBurn);\n', '            \n', '            uint256 totalAmount = totalSupply();\n', '            \n', '            uint256 totalDistributed = 0;\n', '            for (uint256 i = 0; i < _owners.length - 1; i++) {\n', '                uint256 amount = amountToDistribute.mul(balanceOf(_owners[i])).div(totalAmount);\n', '                totalDistributed += amount;\n', '                if (amount > 0) super.transfer(_owners[i], amount);\n', '            }\n', '            \n', '            if (_owners[_owners.length - 1] != address (0)) {\n', '                if (amountToDistribute - totalDistributed > 0) super.transfer(_owners[_owners.length - 1], amountToDistribute - totalDistributed);\n', '            }\n', '            \n', '            if (amountToLiquidity > 0) {\n', '                super.transfer(address(this), amountToLiquidity);\n', '            }\n', '            \n', '            if (amountToLiquidity > 0) {\n', '                SwapAndLiquify();\n', '            }\n', '            return true;\n', '        }\n', '    }\n', '    \n', '    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n', '        require(balanceOf(sender) >= amount, "CaribMARS: amount with fee exceeds balance.");\n', '        require(allowance(sender, _msgSender()) >= amount, "CaribMARS: not approved.");\n', '        \n', '        if (isExcludeFeeMember(sender)) {\n', '            super.transferFrom(sender, recipient, amount);\n', '        } else {\n', '            uint256 reflectionFee = (amount * reflectFeePercentage).div(100);\n', '            uint256 amountToBurn = reflectionFee.div(20);   // 5%\n', '            uint256 amountToDistribute = reflectionFee.mul(475).div(1000);    //47.5%\n', '            uint256 amountToLiquidity = reflectionFee - amountToBurn - amountToDistribute;\n', '            \n', '            super.transferFrom(sender, recipient, amount - reflectionFee);\n', '            if (amountToBurn > 0) super.burnFrom(sender, amountToBurn);\n', '            \n', '            uint256 totalAmount = totalSupply();\n', '            \n', '            uint256 totalDistributed = 0;\n', '            for (uint256 i = 0; i < _owners.length - 1; i++) {\n', '                uint256 amount = amountToDistribute.mul(balanceOf(_owners[i])).div(totalAmount);\n', '                totalDistributed += amount;\n', '                if (amount > 0) super.transferFrom(sender, _owners[i], amount);\n', '            }\n', '            \n', '            if (_owners[_owners.length - 1] != address (0)) {\n', '                if (amountToDistribute - totalDistributed > 0) super.transferFrom(sender, _owners[_owners.length - 1], amountToDistribute - totalDistributed);\n', '            }\n', '            \n', '            if (amountToLiquidity > 0) {\n', '                super.transferFrom(sender, address(this), amountToLiquidity);\n', '            }\n', '            \n', '            if (amountToLiquidity > 0) {\n', '                SwapAndLiquify();\n', '            }\n', '            return true;\n', '        }\n', '    }\n', '    \n', '    function swapTokensForEth(uint256 tokenAmount) private {\n', '        // generate the uniswap pair path of token -> weth\n', '        address[] memory path = new address[](2);\n', '        path[0] = address(this);\n', '        path[1] = uniswapV2Router.WETH();\n', '\n', '        _approve(address(this), address(uniswapV2Router), tokenAmount);\n', '\n', '        // make the swap\n', '        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '            tokenAmount,\n', '            0, // accept any amount of ETH\n', '            path,\n', '            address(this),\n', '            block.timestamp\n', '        );\n', '    }\n', '    \n', '    function SwapAndLiquify() internal {\n', '        bool overMaxTokenBalance = balanceOf(address(this)) >= maxTokenBalance;\n', '        \n', '        if (swapAndLiquifyEnabled && overMaxTokenBalance) {\n', '            uint256 amount = maxTokenBalance;\n', '            \n', '            uint256 half = amount.div(2);\n', '            uint256 otherHalf = amount.sub(half);\n', '            \n', '            uint256 initialBalance = address(this).balance;\n', '            \n', '            swapTokensForEth(half);\n', '            \n', '            uint256 newBalance = address(this).balance.sub(initialBalance);\n', '            \n', '            addLiquidity(otherHalf, newBalance);\n', '        }\n', '    }\n', '    \n', '    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) public payable {\n', '        // uint256 ethAmount = tokenAmount * 10**9 * bnb_rate / 1000;      //caribmars decimal: 9. BNB decimal: 18\n', '        \n', '        if (ethAmount == 0) return;\n', '        \n', '        // approve token transfer to cover all possible scenarios\n', '        _approve(address(this), address(uniswapV2Router), tokenAmount);\n', '\n', '        // add the liquidity\n', '        uniswapV2Router.addLiquidityETH{value: ethAmount}(\n', '            address(this),\n', '            tokenAmount,\n', '            0, // slippage is unavoidable\n', '            0, // slippage is unavoidable\n', '            owner(),\n', '            block.timestamp\n', '        );\n', '    }\n', '    \n', '    function isExcludeFeeMember(address member) public view returns(bool) {\n', '        return excludeFeeMembers[member];\n', '    }\n', '    \n', '    function addExcludeFeeMember(address member) public onlyOwner {\n', '        require(member != address(0), "Now allowed to null address.");\n', '        \n', '        excludeFeeMembers[member] = true;\n', '    }\n', '    \n', '    function removeExcludeFeeMember(address member) public onlyOwner {\n', '        require(member != address(0), "Now allowed to null address.");\n', '        \n', '        excludeFeeMembers[member] = false;\n', '    }\n', '    \n', '    function getHolders() public view returns (address[] memory) {\n', '        return _owners;\n', '    }\n', '    \n', '    function depositBNB() public payable {\n', '        require(msg.value > 0, "The sending amount must be greater than zero.");\n', '    }\n', '    \n', '    function withdrawBNB(address payable receiver, uint256 amount) public onlyOwner payable {\n', '        require(receiver != address(0), "The receiver must not be null address.");\n', '        require(amount > 0, "The amount must be greater than zero.");\n', '        \n', '        receiver.transfer(amount);\n', '    }\n', '    \n', '    function withdraw(address payable receiver, uint256 amount) public onlyOwner payable {\n', '        require(receiver != address(0), "The receiver must not be null address.");\n', '        require(amount > 0, "The amount must be greater than zero.");\n', '        \n', '        _transfer(address(this), receiver, amount);\n', '    }\n', '    \n', '    function setUniswapRouter(address routerAddress) public onlyOwner {\n', '        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(routerAddress);\n', '        uniswapV2Router = _uniswapV2Router;\n', '    }\n', '    \n', '    function setLiquidifyEnabled(bool enabled) public onlyOwner {\n', '        swapAndLiquifyEnabled = enabled;\n', '    }\n', '    \n', '    function setMaxTokenBalance(uint256 max) public onlyOwner {\n', '        maxTokenBalance = max;\n', '    }\n', '}']