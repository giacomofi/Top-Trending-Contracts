['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-10\n', '*/\n', '\n', 'pragma solidity ^0.4.16;\n', 'library SafeMath {\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', 'contract ERC20 {\n', '    uint256 public totalSupply;\n', '\tfunction balanceOf(address _owner) constant  public returns (uint256 balance);\n', '\tfunction transfer(address _to, uint256 _value) public returns (bool success);\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\tfunction approve(address _spender, uint256 _value) public returns (bool success);\n', '\tfunction allowance(address _owner, address _spender) constant  public returns (uint256 remaining);\n', '\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '\n', '\n', '\n', 'contract StandardToken is ERC20 {\n', 'using SafeMath for uint256;\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value>0);\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_from!=address(0)&&_to != address(0)&&_value>0);\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public  returns (bool) {\n', '   require(_spender != address(0));\n', '    require(_value>0);\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '      require(_owner != address(0)&&_spender!=address(0));\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public  returns (bool) {\n', '      require(_spender != address(0));\n', '      require(_addedValue>0);\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public  returns (bool) {\n', '      require(_spender != address(0));\n', '      require(_subtractedValue>0);\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', 'contract BearBarToken is PausableToken {\n', '    string public name = "BBR";\n', '    //jiuba\n', '    string public symbol = "BBR";\n', '    uint public decimals = 0;\n', '    //10wanyi\n', '    uint public INITIAL_SUPPLY = 1000000000000;\n', '    \n', '    mapping (address => mapping (address => uint256)) internal freezeOf;\n', '  \n', '     //qiquan\n', '    mapping (address => mapping (address => uint256)) internal furturetoken;\n', '    \n', '    \n', '   /* This notifies clients about the amount frozen */\n', '    event Freeze(address sender,address indexed target, uint256 value);\n', '\n', '    /* This notifies clients about the amount unfrozen */\n', '    event Unfreeze(address sender,address indexed target, uint256 value);\n', '\t /* This notifies clients about the amount unfrozen */\n', '    event AdminUnfreeze(address from,address indexed target, uint256 value);\n', '\n', '    event Award(address indexed _from,address indexed _to, uint256 value);\n', '\n', '    event CashAward(address indexed _from,address indexed _to, uint256 value);\n', '\n', '    event CallAward(address indexed _to,address indexed _from, uint256 value);\n', '    event AdminCallAward(address indexed _to,address indexed _from, uint256 value);\n', '    \n', '    event Burn(address indexed _to, uint256 value);\n', '    event TransferFreezeToken(address indexed _from,address indexed _to, uint256 value);\n', '\tevent TransferFromFreezeToken(address indexed _from,address indexed _to, uint256 value);\n', '\t\n', '    constructor() public {\n', '        totalSupply = INITIAL_SUPPLY;\n', '        balances[msg.sender] = INITIAL_SUPPLY;\n', '        \n', '    }\n', '    \n', ' \n', '    \n', '    // 管理员解冻结账户\n', '    function adminUnfreeze(address _from,address target,uint256  _value) public whenNotPaused  onlyOwner  returns (bool) {\n', '        require(target != address(0)&&_value>0&&freezeOf[_from][target]>=_value);\n', '        balances[target] = balances[target].add(_value);   \n', '        freezeOf[_from][target] = freezeOf[_from][target].sub(_value);             \n', '        emit AdminUnfreeze(_from,target, _value);\n', '        return true;\n', '  \n', '    }\n', '       // 冻结账户,仅仅所有者可以，防止滥用\n', '    function freeze(address target,uint256 _value) public whenNotPaused onlyOwner   returns (bool)  {\n', '        require(target != address(0)); \n', '        require(_value >0&&balances[target]>=_value); \n', '        \n', '        balances[target] = balances[target].sub(_value);    // Subtract from the sender\n', '        freezeOf[msg.sender][target] = freezeOf[msg.sender][target].add(_value);    // Updates frozen tokens\n', '        emit Freeze(msg.sender,target, _value);\n', '            \n', '        return true;\n', '     \n', '    }\n', '    // 解冻结账户，仅能解自己冻结的\n', '    function unfreeze(address target,uint256  _value) public whenNotPaused    returns (bool) {\n', '        require(target != address(0)&&_value>0&&freezeOf[msg.sender][target]>=_value);\n', '        balances[target] = balances[target].add(_value);   \n', '        freezeOf[msg.sender][target] = freezeOf[msg.sender][target].sub(_value);             \n', '        emit Unfreeze(msg.sender,target, _value);\n', '        return true;\n', '  \n', '    }\n', '\t\n', '\t   \n', '     //faxing xianzhi xing token，出售按时间冻结账户\n', '   function transferFreezeToken(address _to,uint256 _value) public whenNotPaused    returns (bool)  {\n', '       require(_to != address(0)); \n', '       require(_value >0&&balances[msg.sender]>=_value); \n', '\t   \n', '       transfer(_to,_value);\n', '\t   \n', '\t   //可以冻结自己出售的\n', '\t   balances[_to]=balances[_to].sub(_value);\n', '\t   freezeOf[msg.sender][_to] = freezeOf[msg.sender][_to].add(_value);    // Updates frozen tokens\n', '\n', '       emit TransferFreezeToken(msg.sender,_to,_value);\n', '       return true;\n', '   }\n', '  \n', '   //zhuanyi wanbi shouquan ren de dongjie \n', '   function transferFromFreezeToken(address _from,address _to,uint256 _value) public whenNotPaused    returns (bool)  {\n', '        require(_from!=address(0)&&_to != address(0)&&_value>0);\n', '\t\trequire(_value <= balances[_from]);\n', '\t\trequire(_value <= allowed[_from][msg.sender]);\n', '\t\t\n', '\t\ttransferFrom(_from,_to,_value);\n', '\n', '\t\t//可以冻结自己出售的\n', '\t\tbalances[_to]=balances[_to].sub(_value);\n', '\t    freezeOf[msg.sender][_to] = freezeOf[msg.sender][_to].add(_value);    // Updates frozen tokens\n', '        emit TransferFromFreezeToken(msg.sender,_to,_value);\n', '       return true;\n', '   }\n', '  \n', '    function getFreezeOf(address _from, address _to) public view returns (uint256) {\n', '      require(_from != address(0)&&_to!=address(0));\n', '    return freezeOf[_from][_to];\n', '    }\n', '    \n', '    //jiangli \n', '    function award(address _to, uint256 _value) public whenNotPaused   returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value>0&& balances[msg.sender]>=_value);\n', '        furturetoken[msg.sender][_to]=furturetoken[msg.sender][_to].add(_value);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        emit Award(msg.sender,_to,_value);\n', '        return true;\n', '\t\t\n', '\t\t\n', '  }\n', ' \n', '  //duixian\n', '    function cashAward(address _to, uint256 _value) public whenNotPaused   returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value>0);\n', '        require(furturetoken[msg.sender][_to]>=_value);\n', '        furturetoken[msg.sender][_to]=furturetoken[msg.sender][_to].sub(_value);\n', '        balances[msg.sender] = balances[msg.sender].add(_value);\n', '        transfer(_to,_value);\n', '        emit CashAward(msg.sender,_to,_value);\n', '        return true;\n', '  }\n', '  //zhaohui召回qiquan\n', '    function callAward(address _to, uint256 _value) public whenNotPaused   returns (bool) {\n', '        require(_to != address(0)&&_value>0);\n', '        require(furturetoken[msg.sender][_to]>=_value);\n', '        furturetoken[msg.sender][_to]=furturetoken[msg.sender][_to].sub(_value);\n', '        balances[msg.sender] = balances[msg.sender].add(_value);\n', '        emit  CallAward(msg.sender,_to,_value);\n', '      \n', '        return true;\n', '\t}\n', '\t\n', '\t\n', '    \n', '    function getFurturetoken(address _from, address _to) public view returns (uint256) {\n', '        require(_from != address(0)&&_to!=address(0));\n', '        return furturetoken[_from][_to];\n', '    }\n', '    \n', '    //zhaohui召回qiquan\n', '    function adminCallAward(address _from,address _to, uint256 _value) public whenNotPaused  onlyOwner returns (bool) {\n', '        require(_to != address(0)&&_value>0);\n', '        require(furturetoken[_from][_to]>=_value);\n', '        furturetoken[_from][_to]=furturetoken[_from][_to].sub(_value);\n', '        balances[_from] = balances[_from].add(_value);\n', '        emit  AdminCallAward(_from,_to,_value);\n', '      \n', '        return true;\n', '\t}\n', '    //zengfa yongyu fa mianbao,zengfa edu < 6/100\n', '    function burn( uint256 _value) public whenNotPaused  onlyOwner returns (bool){\n', '      require(_value>0&&balances[msg.sender]>_value,"not enough value in your owner address");\n', '      balances[msg.sender]= balances[msg.sender].sub(_value);\n', '      balances[address(0)] = balances[address(0)].add(_value);\n', '      totalSupply=totalSupply.sub(_value);\n', '      emit Burn(msg.sender,_value);\n', '      return true;\n', '    }\n', '  \n', '}']