['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-24\n', '*/\n', '\n', 'pragma solidity ^0.4.24;\n', '//ERC20\n', 'contract ERC20Ownable {\n', '    address public owner;\n', '\n', '    constructor() public{\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    function transferOwnership(address newOwner) onlyOwner public{\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', 'contract ERC20 {\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20Token is ERC20,ERC20Ownable {\n', '    \n', '    mapping (address => uint256) balances;\n', '\tmapping (address => mapping (address => uint256)) allowed;\n', '\t\n', '    event Transfer(\n', '\t\taddress indexed _from,\n', '\t\taddress indexed _to,\n', '\t\tuint256 _value\n', '\t\t);\n', '\n', '\tevent Approval(\n', '\t\taddress indexed _owner,\n', '\t\taddress indexed _spender,\n', '\t\tuint256 _value\n', '\t\t);\n', '\t\t\n', '\t//Fix for short address attack against ERC20\n', '\tmodifier onlyPayloadSize(uint size) {\n', '\t\tassert(msg.data.length == size + 4);\n', '\t\t_;\n', '\t}\n', '\n', '\tfunction balanceOf(address _owner) constant public returns (uint256) {\n', '\t\treturn balances[_owner];\n', '\t}\n', '\n', '\tfunction transfer(address _to, uint256 _value) onlyPayloadSize(2*32) public returns (bool){\n', '\t\trequire(balances[msg.sender] >= _value && _value > 0);\n', '\t    balances[msg.sender] -= _value;\n', '\t    balances[_to] += _value;\n', '\t    emit Transfer(msg.sender, _to, _value);\n', '\t    return true;\n', '    }\n', '\n', '\tfunction transferFrom(address _from, address _to, uint256 _value)  public returns (bool) {\n', '\t\trequire(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\tfunction approve(address _spender, uint256 _value) public {\n', '\t\tallowed[msg.sender][_spender] = _value;\n', '\t\temit Approval(msg.sender, _spender, _value);\n', '\t}\n', '\n', '    /* Approves and then calls the receiving contract */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', "        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\n", '        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '        //require(_spender.call(bytes4(keccak256("receiveApproval(address,uint256,address,bytes)")), abi.encode(msg.sender, _value, this, _extraData)));\n', '        require(_spender.call(abi.encodeWithSelector(bytes4(keccak256("receiveApproval(address,uint256,address,bytes)")),msg.sender, _value, this, _extraData)));\n', '\n', '        return true;\n', '    }\n', '    \n', '\tfunction allowance(address _owner, address _spender) constant public returns (uint256) {\n', '\t\treturn allowed[_owner][_spender];\n', '\t}\n', '}\n', '\n', 'contract ERC20StandardToken is ERC20Token {\n', '\tuint256 public totalSupply;\n', '\tstring public name;\n', '\tuint256 public decimals;\n', '\tstring public symbol;\n', '\tbool public mintable;\n', '\n', '\n', '    constructor(address _owner, string _name, string _symbol, uint256 _decimals, uint256 _totalSupply, bool _mintable) public {\n', '        require(_owner != address(0));\n', '        owner = _owner;\n', '\t\tdecimals = _decimals;\n', '\t\tsymbol = _symbol;\n', '\t\tname = _name;\n', '\t\tmintable = _mintable;\n', '        totalSupply = _totalSupply;\n', '        balances[_owner] = totalSupply;\n', '        emit Transfer(address(0), _owner, totalSupply);\n', '\n', '    }\n', '    \n', '    function mint(uint256 amount) onlyOwner public {\n', '\t\trequire(mintable);\n', '\t\trequire(amount >= 0);\n', '\t\tbalances[msg.sender] += amount;\n', '\t\ttotalSupply += amount;\n', '\t}\n', '\n', '    function burn(uint256 _value) onlyOwner public returns (bool) {\n', '        require(balances[msg.sender] >= _value  && totalSupply >=_value && _value > 0);\n', '        balances[msg.sender] -= _value;\n', '        totalSupply -= _value;\n', '        emit Transfer(msg.sender, 0x0, _value);\n', '        return true;\n', '    }\n', '}']