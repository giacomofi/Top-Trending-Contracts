['// SPDX-License-Identifier: UNLICENSED\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', 'import "./libs/maths/SafeMath.sol";\n', 'import "./interfaces/IExtendedERC20.sol";\n', '\n', 'contract GraphLinqPrivateSale {\n', '    using SafeMath for uint256;\n', '\n', '\n', '    address private                         _owner;\n', '    IExtendedERC20 private                  _glqToken;\n', '    mapping(address => uint256) private     _wallets_investment;\n', '\n', '    uint256 public                          _ethSolded;\n', '    uint256 public                          _glqSolded;\n', '    uint256 public                          _glqPerEth;\n', '    uint256 public                          _maxethPerWallet;\n', '    bool public                             _paused = false;\n', '    bool public                             _claim = false;\n', '\n', '    event NewAmountPresale (\n', '        uint256 srcAmount,\n', '        uint256 glqPereth,\n', '        uint256 totalGlq\n', '    );\n', '\n', '    /*\n', '    ** Description: constructing the contract basic informations, containing the GLQ token addr, the ratio price eth:GLQ\n', '    ** and the max authorized eth amount per wallet\n', '    */\n', '    constructor(address graphLinqTokenAddr, uint256 glqPereth, uint256 maxethPerWallet)\n', '    {\n', '        _owner = msg.sender;\n', '        _ethSolded = 0;\n', '        _glqPerEth = glqPereth;\n', '        _glqToken = IExtendedERC20(graphLinqTokenAddr);\n', '        _maxethPerWallet = maxethPerWallet;\n', '    }\n', '\n', '    /*\n', '    ** Description: Check that the transaction sender is the GLQ owner\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == _owner, "Only the owner can do this action");\n', '        _;\n', '    }\n', '\n', '    /*\n', '    ** Receive eth payment for the presale raise\n', '    */\n', '    receive() external payable {\n', '        require(_paused == false, "Presale is paused");\n', '        uint256 totalInvested = _wallets_investment[address(msg.sender)].add(msg.value);\n', '        require(totalInvested <= _maxethPerWallet, "You depassed the limit of max eth per wallet for the presale.");\n', '        _transfertGLQ(msg.value);\n', '    }\n', '\n', '    /*\n', "    ** Description: Set the presale in pause state (no more deposits are accepted once it's turned back)\n", '    */\n', '    function setPaused(bool value) public payable onlyOwner {\n', '        _paused = value;\n', '    }\n', '\n', '    /*\n', '    ** Description: Set the presale claim mode \n', '    */\n', '    function setClaim(bool value) public payable onlyOwner {\n', '        _claim = value;\n', '    }\n', '\n', '    /*\n', '    ** Description: Claim the GLQ once the presale is done\n', '    */\n', '    function claimGlq() public\n', '    {\n', '        require(_claim == true, "You cant claim your GLQ yet");\n', '        uint256 srcAmount =  _wallets_investment[address(msg.sender)];\n', '        require(srcAmount > 0, "You dont have any GLQ to claim");\n', '        \n', '        uint256 glqAmount = (srcAmount.mul(_glqPerEth)).div(10 ** 18);\n', '         require(\n', '            _glqToken.balanceOf(address(this)) >= glqAmount,\n', '            "No GLQ amount required on the contract"\n', '        );\n', '        _wallets_investment[address(msg.sender)] = 0;\n', '        _glqToken.transfer(msg.sender, glqAmount);\n', '    }\n', '\n', '\n', '    /*\n', '    ** Description: Return the amount raised from the Presale (as ETH)\n', '    */\n', '    function getTotalRaisedEth() public view returns(uint256) {\n', '        return _ethSolded;\n', '    }\n', '\n', '        /*\n', '    ** Description: Return the amount raised from the Presale (as GLQ)\n', '    */\n', '    function getTotalRaisedGlq() public view returns(uint256) {\n', '        return _glqSolded;\n', '    }\n', '\n', '    /*\n', '    ** Description: Return the total amount invested from a specific address\n', '    */\n', '    function getAddressInvestment(address addr) public view returns(uint256) {\n', '        return  _wallets_investment[addr];\n', '    }\n', '\n', '    /*\n', '    ** Description: Transfer the specific GLQ amount to the payer address\n', '    */\n', '    function _transfertGLQ(uint256 _srcAmount) private {\n', '        uint256 glqAmount = (_srcAmount.mul(_glqPerEth)).div(10 ** 18);\n', '        emit NewAmountPresale(\n', '            _srcAmount,\n', '            _glqPerEth,\n', '            glqAmount\n', '        );\n', '\n', '        require(\n', '            _glqToken.balanceOf(address(this)) >= glqAmount.add(_glqSolded),\n', '            "No GLQ amount required on the contract"\n', '        );\n', '\n', '        _ethSolded += _srcAmount;\n', '        _glqSolded += glqAmount;\n', '        _wallets_investment[address(msg.sender)] += _srcAmount;\n', '    }\n', '\n', '    /*\n', '    ** Description: Authorize the contract owner to withdraw the raised funds from the presale\n', '    */\n', '    function withdraw() public payable onlyOwner {\n', '        msg.sender.transfer(address(this).balance);\n', '        _glqToken.transfer(msg.sender, _glqToken.balanceOf(address(this)));\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IExtendedERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function symbol() external view returns (string memory);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '\n', '    function mint(address to, uint256 amount) external;\n', '    function burn(address from, uint256 amount) external;\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}']