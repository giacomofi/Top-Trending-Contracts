['pragma solidity ^0.5.13;\n', '\n', 'import "./ERC20.sol";\n', 'import "./DateTime.sol";\n', 'import "./Ownable.sol";\n', '\n', 'contract StableCoin is ERC20, DateTime, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    address public tokenIssuer;\n', '    uint256 public lastOxydationDate;\n', '\n', '    event Oxydated(address holder, uint256 amount);\n', '    event TimestampComparaison(uint256 newTimestamp, uint256 oldTimestamp);\n', '\n', '    constructor(\n', '        string memory _tokenName,\n', '        string memory _tokenSymbol,\n', '        uint8 _decimals,\n', '        address _tokenIssuer\n', '    ) public ERC20(_tokenName, _tokenSymbol, _decimals) Ownable() {\n', '        lastOxydationDate = now;\n', '        tokenIssuer = _tokenIssuer;\n', '    }\n', '\n', '    // change address that get fees from oxydation\n', '    function setTokenIssuer(address _addressEuroOneFees) public onlyOwner {\n', '        tokenIssuer = _addressEuroOneFees;\n', '    }\n', '\n', '    function mint(address _to, uint256 _tokenAmount) public onlyOwner {\n', '        _mint(_to, _tokenAmount);\n', '    }\n', '\n', '    //Mint tokens to each each beneficiary\n', '    function mints(address[] calldata _recipients, uint256[] calldata _values) external onlyOwner {\n', '        for (uint256 i = 0; i < _recipients.length; i++) {\n', '            mint(_recipients[i], _values[i]);\n', '        }\n', '    }\n', '\n', '    function burn(address _account, uint256 _value) public onlyOwner {\n', '        _burn(_account, _value);\n', '    }\n', '\n', '    //Burn tokens to each each beneficiary\n', '    function burns(address[] calldata _recipients, uint256[] calldata _values) external onlyOwner {\n', '        for (uint256 i = 0; i < _recipients.length; i++) {\n', '            burn(_recipients[i], _values[i]);\n', '        }\n', '    }\n', '    // can accept ether\n', '    function() external payable {}\n', '\n', '    // give number of ether owned by smart contract\n', '    function getBalanceEthSmartContract() public view returns (uint256) {\n', '        return address(this).balance;\n', '    }\n', '\n', '    // transfer smart contract balance to owner\n', '    function withdrawEther(uint256 amount) public onlyOwner {\n', '        address payable ownerPayable = address(uint160(Ownable.owner()));\n', '        ownerPayable.transfer(amount);\n', '    }\n', '\n', '    // monthly oxydation for all investors\n', '    function oxydation(address[] calldata holders) external {\n', '        for (uint256 i = 0; i < holders.length; i++) {\n', '            emit TimestampComparaison(getMonth(lastOxydationDate), getMonth(now));\n', '            if (getMonth(lastOxydationDate) != getMonth(now)) {\n', '                // once a month\n', '                uint256 balanceCurrent = balanceOf(holders[i]);\n', '                uint256 toOxyde = balanceCurrent.div(1200); // 1% annual over 12 months\n', '                _burn(holders[i], toOxyde);\n', '                _mint(tokenIssuer, toOxyde);\n', '                emit Oxydated(holders[i], toOxyde);\n', '            }\n', '        }\n', '        lastOxydationDate = now;\n', '    }\n', '\n', '    function Now() external view returns (uint256){\n', '      return (now);\n', '  }\n', '\n', '}']