['addressToInitialisationStatus: public(HashMap[address, bool])\n', '# @author usernameistakenistaken\n', "# The following portion of code is modified from Takayuki Jimba's example voting contract (@yudetamago) (https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md)\n", '\n', 'from vyper.interfaces import ERC20\n', '\n', 'implements: ERC20\n', '\n', 'event Transfer:\n', '    sender: indexed(address)\n', '    receiver: indexed(address)\n', '    value: uint256\n', '\n', 'event Approval:\n', '    owner: indexed(address)\n', '    spender: indexed(address)\n', '    value: uint256\n', '\n', 'name: public(String[64])\n', 'symbol: public(String[32])\n', 'decimals: public(uint256)\n', 'init_bal: public(uint256)\n', '\n', "# NOTE: By declaring `balanceOf` as public, vyper automatically generates a 'balanceOf()' getter\n", '#       method to allow access to account balances.\n', '#       The _KeyType will become a required parameter for the getter and it will return _ValueType.\n', '#       See: https://vyper.readthedocs.io/en/v0.1.0-beta.8/types.html?highlight=getter#mappings\n', 'addressToBalance: (HashMap[address, uint256])\n', 'allowances: HashMap[address, HashMap[address, uint256]]\n', 'total_supply: uint256\n', 'minter: address\n', '\n', '\n', '@external\n', 'def __init__(_name: String[64], _symbol: String[32], _decimals: uint256, _supply: uint256):\n', '    init_supply: uint256 = _supply * 10 ** _decimals\n', '    self.init_bal = 100 * (10 ** _decimals)\n', '    self.name = _name\n', '    self.symbol = _symbol\n', '    self.decimals = _decimals\n', '    self.total_supply = init_supply\n', '    log Transfer(ZERO_ADDRESS, msg.sender, 100 * 10 ** _decimals)\n', '\n', '\n', '@view\n', '@internal\n', 'def _getBalance(_to: address) -> uint256:\n', '\tif (self.addressToInitialisationStatus[_to]):\n', '\t\treturn self.addressToBalance[_to]\n', '\telse:\n', '\t\treturn (self.init_bal + self.addressToBalance[_to])\n', '\n', '@view\n', '@external\n', 'def balanceOf(_to: address) -> uint256:\n', '\treturn self._getBalance(_to)\n', '\n', '@view\n', '@external\n', 'def totalSupply() -> uint256:\n', '    """\n', '    @dev Total number of tokens in existence.\n', '    """\n', '    return self.total_supply\n', '\n', '\n', '@view\n', '@external\n', 'def allowance(_owner : address, _spender : address) -> uint256:\n', '    """\n', '    @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    @param _owner The address which owns the funds.\n', '    @param _spender The address which will spend the funds.\n', '    @return An uint256 specifying the amount of tokens still available for the spender.\n', '    """\n', '    return self.allowances[_owner][_spender]\n', '\n', '\n', '@external\n', 'def transfer(_to : address, _value : uint256) -> bool:\n', '    """\n', '    @dev Transfer token for a specified address\n', '    @param _to The address to transfer to.\n', '    @param _value The amount to be transferred.\n', '    """\n', '    # NOTE: vyper does not allow underflows\n', '    #       so the following subtraction would revert on insufficient balance\n', '    if self.addressToInitialisationStatus[msg.sender]:\n', '    \tself.addressToBalance[msg.sender] -= _value\n', '    \tself.addressToBalance[_to] += _value\n', '    else:\n', '    \tself.addressToBalance[msg.sender] += self.init_bal\n', '    \tself.addressToBalance[msg.sender] -= _value\n', '    \tself.addressToBalance[_to] += _value\n', '    \tself.addressToInitialisationStatus[msg.sender] = True\n', '    log Transfer(msg.sender, _to, _value)\n', '    return True\n', '\n', '\n', '@external\n', 'def transferFrom(_from : address, _to : address, _value : uint256) -> bool:\n', '    """\n', '     @dev Transfer tokens from one address to another.\n', '     @param _from address The address which you want to send tokens from\n', '     @param _to address The address which you want to transfer to\n', '     @param _value uint256 the amount of tokens to be transferred\n', '    """\n', '    # NOTE: vyper does not allow underflows\n', '    #       so the following subtraction would revert on insufficient balance\n', '    if self.addressToInitialisationStatus[_from]:\n', '    \tself.addressToBalance[_from] -= _value\n', '    \tself.addressToBalance[_to] += _value\n', '    else:\n', '    \tself.addressToBalance[_from] += self.init_bal\n', '    \tself.addressToBalance[_from] -= _value\n', '    \tself.addressToBalance[_to] += _value\n', '    \tself.addressToInitialisationStatus[_from] = True\n', '    # NOTE: vyper does not allow underflows\n', '    #      so the following subtraction would revert on insufficient allowance\n', '    self.allowances[_from][msg.sender] -= _value\n', '    log Transfer(_from, _to, _value)\n', '    return True\n', '\n', '\n', '@external\n', 'def approve(_spender : address, _value : uint256) -> bool:\n', '    """\n', '    @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '         Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '         and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "         race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '         https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    @param _spender The address which will spend the funds.\n', '    @param _value The amount of tokens to be spent.\n', '    """\n', '    self.allowances[msg.sender][_spender] = _value\n', '    log Approval(msg.sender, _spender, _value)\n', '    return True']