['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-15\n', '*/\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/xMigration.sol\n', '\n', 'pragma solidity 0.6.2;\n', '\n', '\n', 'interface IXKNC is IERC20 {\n', '    function mintWithToken(uint256 kncAmountTwei) external;\n', '\n', '    function burn(\n', '        uint256 sourceTokenBal,\n', '        bool redeemForKnc,\n', '        uint256 minRate\n', '    ) external;\n', '}\n', '\n', 'contract xMigration {\n', '    IERC20 private knc;\n', '    IXKNC private sourceToken;\n', '    IXKNC private targetToken;\n', '\n', '    uint256 constant MAX_UINT = 2**256 - 1;\n', '\n', '    event MigrateToken(\n', '        address indexed userAccount,\n', '        uint256 tokenAmount,\n', '        uint256 kncAmount\n', '    );\n', '\n', '    constructor(\n', '        IXKNC _sourceToken,\n', '        IXKNC _targetToken,\n', '        IERC20 _knc\n', '    ) public {\n', '        sourceToken = _sourceToken;\n', '        targetToken = _targetToken;\n', '        knc = _knc;\n', '    }\n', '\n', '    function migrate() external {\n', '        uint256 sourceTokenBal = sourceToken.balanceOf(msg.sender);\n', '        require(\n', '            sourceTokenBal > 0,\n', '            "xMigration: sourceToken balance cant be 0"\n', '        );\n', '\n', '        // transfer source xKNC from user to here\n', '        sourceToken.transferFrom(msg.sender, address(this), sourceTokenBal);\n', '\n', '        // burn source xKNC for KNC\n', '        sourceToken.burn(sourceTokenBal, true, 0);\n', '\n', '        // mint target xKNC for KNC\n', '        uint256 kncBal = knc.balanceOf(address(this));\n', '        targetToken.mintWithToken(kncBal);\n', '\n', '        // transfer back the target xKNC to user\n', '        uint256 xkncBal = targetToken.balanceOf(address(this));\n', '        targetToken.transfer(msg.sender, xkncBal);\n', '\n', '        emit MigrateToken(msg.sender, sourceTokenBal, kncBal);\n', '    }\n', '\n', '    // run once before exposing to users\n', '    function approveTarget() external {\n', '        knc.approve(address(targetToken), MAX_UINT);\n', '    }\n', '}']