['pragma solidity ^0.6.6;\n', '\n', 'import "./ERC20.sol";\n', '\n', 'contract husky is ERC20 {\n', '\n', '    constructor () public ERC20("husky", "husky") {\n', '        _mint(msg.sender, 777777 * (10 ** uint256(decimals())));\n', '    }\n', '\n', '    function transfer(address to, uint256 amount) public override returns (bool) {\n', '        return super.transfer(to, _partialBurn(amount));\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 amount) public override returns (bool) {\n', '        return super.transferFrom(from, to, _partialBurnTransferFrom(from, amount));\n', '    }\n', '\n', '    function _partialBurn(uint256 amount) internal returns (uint256) {\n', '        uint256 burnAmount = amount.div(13);\n', '\n', '        if (burnAmount > 0) {\n', '            _burn(msg.sender, burnAmount);\n', '        }\n', '\n', '        return amount.sub(burnAmount);\n', '    }\n', '\n', '    function _partialBurnTransferFrom(address _originalSender, uint256 amount) internal returns (uint256) {\n', '        uint256 burnAmount = amount.div(8);\n', '\n', '        if (burnAmount > 0) {\n', '            _burn(_originalSender, burnAmount);\n', '        }\n', '\n', '        return amount.sub(burnAmount);\n', '    }\n', '\n', '}']