['pragma solidity 0.7.6;\n', '\n', 'import "../../interfaces/IHypervisor.sol";\n', 'import "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '\n', 'contract Admin {\n', '\n', '    address public admin;\n', '    address public advisor;\n', '\n', '    modifier onlyAdvisor {\n', '        require(msg.sender == advisor, "only advisor");\n', '        _;\n', '    }\n', '\n', '    modifier onlyAdmin {\n', '        require(msg.sender == admin, "only admin");\n', '        _;\n', '    }\n', '\n', '    constructor(address _admin, address _advisor) public {\n', '        admin = _admin;\n', '        advisor = _advisor;\n', '    }\n', '\n', '    function rebalance(\n', '        address _hypervisor,\n', '        int24 _baseLower,\n', '        int24 _baseUpper,\n', '        int24 _limitLower,\n', '        int24 _limitUpper,\n', '        address _feeRecipient,\n', '        int256 swapQuantity\n', '    ) external onlyAdvisor {\n', '        IHypervisor(_hypervisor).rebalance(_baseLower, _baseUpper, _limitLower, _limitUpper, _feeRecipient, swapQuantity);\n', '    }\n', '\n', '    function setDepositMax(address _hypervisor, uint256 _deposit0Max, uint256 _deposit1Max) external onlyAdmin {\n', '        IHypervisor(_hypervisor).setDepositMax(_deposit0Max, _deposit1Max);\n', '    }\n', '\n', '    function setMaxTotalSupply(address _hypervisor, uint256 _maxTotalSupply) external onlyAdmin {\n', '        IHypervisor(_hypervisor).setMaxTotalSupply(_maxTotalSupply);\n', '    }\n', '\n', '    function toggleWhitelist(address _hypervisor) external onlyAdmin {\n', '        IHypervisor(_hypervisor).toggleWhitelist();\n', '    }\n', '\n', '    function appendList(address _hypervisor, address[] memory listed) external onlyAdmin {\n', '        IHypervisor(_hypervisor).appendList(listed);\n', '    }\n', '\n', '    function transferAdmin(address newAdmin) external onlyAdmin {\n', '        admin = newAdmin;\n', '    }\n', '\n', '    function transferAdvisor(address newAdvisor) external onlyAdmin {\n', '        advisor = newAdvisor;\n', '    }\n', '\n', '    function transferHypervisorOwner(address _hypervisor, address newOwner) external onlyAdmin {\n', '        IHypervisor(_hypervisor).transferOwnership(newOwner);\n', '    }\n', '\n', '    function rescueERC20(IERC20 token, address recipient) external onlyAdmin {\n', '        require(token.transfer(recipient, token.balanceOf(address(this))));\n', '    }\n', '\n', '}\n', '\n', '// SPDX-License-Identifier: GPL-3.0-only\n', 'pragma solidity 0.7.6;\n', 'pragma abicoder v2;\n', '\n', 'import "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '\n', 'interface IHypervisor {\n', '\n', '    /* user functions */\n', '\n', '    function rebalance(\n', '        int24 _baseLower,\n', '        int24 _baseUpper,\n', '        int24 _limitLower,\n', '        int24 _limitUpper,\n', '        address _feeRecipient,\n', '        int256 swapQuantity\n', '    ) external;\n', '\n', '    function setMaxTotalSupply(uint256 _maxTotalSupply) external;\n', '\n', '    function setDepositMax(uint256 _deposit0Max, uint256 _deposit1Max) external;\n', '\n', '    function appendList(address[] memory listed) external;\n', '\n', '    function toggleWhitelist() external;\n', '\n', '    function emergencyWithdraw(IERC20 token, uint256 amount) external;\n', '\n', '    function emergencyBurn(\n', '        int24 tickLower,\n', '        int24 tickUpper,\n', '        uint128 liquidity\n', '    ) external;\n', '\n', '    function transferOwnership(address newOwner) external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 800\n', '  },\n', '  "metadata": {\n', '    "bytecodeHash": "none"\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "libraries": {}\n', '}']