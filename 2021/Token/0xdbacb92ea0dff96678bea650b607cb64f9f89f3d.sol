['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-30\n', '*/\n', '\n', '// SPDX-License-Identifier: AGPL-3.0\n', '\n', 'pragma solidity 0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'interface IVoterProxy {\n', '    function withdraw(\n', '        address _gauge,\n', '        address _token,\n', '        uint256 _amount\n', '    ) external returns (uint256);\n', '    function balanceOf(address _gauge) external view returns (uint256);\n', '    function withdrawAll(address _gauge, address _token) external returns (uint256);\n', '    function deposit(address _gauge, address _token) external;\n', '    function harvest(address _gauge) external;\n', '    function lock() external;\n', '    function approveStrategy(address) external;\n', '    function revokeStrategy(address) external;\n', '    function proxy() external returns (address);\n', '}\n', '\n', 'interface IVoter {\n', '    function setGovernance(address _governance) external;\n', '    function execute(address to, uint value, bytes calldata data) external returns (bool, bytes memory);\n', '}\n', '\n', 'interface IController {\n', '    function withdraw(address, uint256) external;\n', '    function balanceOf(address) external view returns (uint256);\n', '    function earn(address, uint256) external;\n', '    function want(address) external view returns (address);\n', '    function rewards() external view returns (address);\n', '    function vaults(address) external view returns (address);\n', '    function strategies(address) external view returns (address);\n', '    function approveStrategy(address, address) external;\n', '    function setStrategy(address, address) external;\n', '    function setVault(address, address) external;\n', '}\n', '\n', 'interface IStrategy {\n', '    function gauge() external returns (address);\n', '}\n', '\n', '\n', 'contract GaugeCleaner {\n', '    address public constant owner = address(0xFEB4acf3df3cDEA7399794D0869ef76A6EfAff52);\n', '    address public constant proxy = address(0x9a165622a744C20E3B2CB443AeD98110a33a231b);\n', '    address public constant mock_proxy = address(0x96Dd07B6c99b22F3f0cB1836aFF8530a98BDe9E3);\n', '    IVoter public constant voter = IVoter(0xF147b8125d2ef93FB6965Db97D6746952a133934);\n', '    IController public constant ctrl = IController(0x9E65Ad11b299CA0Abefc2799dDB6314Ef2d91080);\n', '\n', '    constructor() public {}\n', '\n', '    function clear(address token) external {\n', '        require(msg.sender == owner, "migrate::!owner");\n', '        address strategy = ctrl.strategies(token);\n', '        address vault = ctrl.vaults(token);\n', '        address gauge = IStrategy(strategy).gauge();\n', '\n', '        uint _balance;\n', '        \n', '        _balance = IERC20(gauge).balanceOf(address(voter));\n', '        voter.execute(gauge, 0, abi.encodeWithSignature("withdraw(uint256)", _balance));\n', '        \n', '        _balance = IERC20(token).balanceOf(address(voter));\n', '        voter.execute(token, 0, abi.encodeWithSignature("transfer(address,uint256)", vault, _balance));\n', '        \n', '        require(IERC20(gauge).balanceOf(address(voter)) == 0, "gauge not 0");\n', '        require(IERC20(token).balanceOf(address(voter)) == 0, "voter not 0");\n', '    }\n', '\n', '    function setVoterGovernance() external {\n', '        require(msg.sender == owner, "set::!owner");\n', '        voter.setGovernance(owner);\n', '    }\n', '\n', '    function voterExecute(address to, uint value, bytes calldata data) external returns (bool success, bytes memory result) {\n', '        require(msg.sender == owner, "vExec::!owner");\n', '        (success, result) = voter.execute(to, value, data);\n', '    }\n', '\n', '    function execute(address to, uint value, bytes calldata data) external returns (bool success, bytes memory result) {\n', '        require(msg.sender == owner, "exec::!owner");\n', '        (success, result) = to.call{value: value}(data);\n', '    }\n', '}']