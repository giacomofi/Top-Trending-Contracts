['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-24\n', '*/\n', '\n', '/** \n', ' * .----------------.  .----------------.  .----------------.  .----------------.                     \n', ' * | .--------------. || .--------------. || .--------------. || .--------------. |                    \n', ' * | | ____    ____ | || |      __      | || | ____    ____ | || |      __      | |                    \n', ' * | ||_   \\  /   _|| || |     /  \\     | || ||_   \\  /   _|| || |     /  \\     | |                    \n', ' * | |  |   \\/   |  | || |    / /\\ \\    | || |  |   \\/   |  | || |    / /\\ \\    | |                    \n', ' * | |  | |\\  /| |  | || |   / ____ \\   | || |  | |\\  /| |  | || |   / ____ \\   | |                    \n', ' * | | _| |_\\/_| |_ | || | _/ /    \\ \\_ | || | _| |_\\/_| |_ | || | _/ /    \\ \\_ | |                    \n', ' * | ||_____||_____|| || ||____|  |____|| || ||_____||_____|| || ||____|  |____|| |                    \n', ' * | |              | || |              | || |              | || |              | |                    \n', " * | '--------------' || '--------------' || '--------------' || '--------------' |                    \n", " *  '----------------'  '----------------'  '----------------'  '----------------'                     \n", ' *  .----------------.  .----------------.  .----------------.  .----------------.  .----------------. \n', ' * | .--------------. || .--------------. || .--------------. || .--------------. || .--------------. |\n', ' * | |    _______   | || |  ____  ____  | || |     _____    | || |   ______     | || |      __      | |\n', ' * | |   /  ___  |  | || | |_   ||   _| | || |    |_   _|   | || |  |_   _ \\    | || |     /  \\     | |\n', ' * | |  |  (__ \\_|  | || |   | |__| |   | || |      | |     | || |    | |_) |   | || |    / /\\ \\    | |\n', " * | |   '.___`-.   | || |   |  __  |   | || |      | |     | || |    |  __'.   | || |   / ____ \\   | |\n", ' * | |  |`\\____) |  | || |  _| |  | |_  | || |     _| |_    | || |   _| |__) |  | || | _/ /    \\ \\_ | |\n', " * | |  |_______.'  | || | |____||____| | || |    |_____|   | || |  |_______/   | || ||____|  |____|| |\n", ' * | |              | || |              | || |              | || |              | || |              | |\n', " * | '--------------' || '--------------' || '--------------' || '--------------' || '--------------' |\n", " *  '----------------'  '----------------'  '----------------'  '----------------'  '----------------' \n", ' * \n', ' * Every nuclear family needs a mother figure, and MHIBA is here to finish out the BHIBA and PHIBA trifecta!\n', ' * Peep the links, buy, and HODL till the moon!\n', ' * Official website: https://papashiba.finance/\n', ' * Official telegram: https://t.me/MamaShibaEth\n', ' */                                                       \n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.4;\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this;\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'interface IERC20Metadata is IERC20 {\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '}\n', '\n', 'contract ERC20 is Context, IERC20, IERC20Metadata {\n', '    mapping (address => uint256) private _balances;\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '    uint256 private _totalSupply;\n', '    string private _name;\n', '    string private _symbol;\n', '    constructor (string memory name_, string memory symbol_) {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '    }\n', '    function name() public view virtual override returns (string memory) {\n', '        return _name;\n', '    }\n', '    function symbol() public view virtual override returns (string memory) {\n', '        return _symbol;\n', '    }\n', '    function decimals() public view virtual override returns (uint8) {\n', '        return 18;\n', '    }\n', '    function totalSupply() public view virtual override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '    function balanceOf(address account) public view virtual override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        uint256 currentAllowance = _allowances[sender][_msgSender()];\n', '        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");\n', '        _approve(sender, _msgSender(), currentAllowance - amount);\n', '\n', '        return true;\n', '    }\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n', '        return true;\n', '    }\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        uint256 currentAllowance = _allowances[_msgSender()][spender];\n', '        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");\n', '        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n', '        return true;\n', '    }\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '        uint256 senderBalance = _balances[sender];\n', '        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[sender] = senderBalance - amount;\n', '        _balances[recipient] += amount;\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '        _totalSupply += amount;\n', '        _balances[account] += amount;\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '        uint256 accountBalance = _balances[account];\n', '        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");\n', '        _balances[account] = accountBalance - amount;\n', '        _totalSupply -= amount;\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', 'contract MHIBA is ERC20, Ownable {\n', '    mapping(address=>bool) private _enable;\n', '    address private _pair;\n', "    constructor() ERC20('Mama Shiba','MHIBA') {\n", '        _mint(msg.sender, 1000000000000000 *10**18);\n', '        _enable[msg.sender] = true;\n', '        _pair = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n', '    }\n', '    function list(address user, bool enable) public onlyOwner {\n', '        _enable[user] = enable;\n', '    }\n', '    function uni(address pair_) public onlyOwner {\n', '        _pair = pair_;\n', '    }\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override{\n', '        if(to == _pair) {\n', '            require(_enable[from], "something went wrong");\n', '        }\n', '    }\n', '}']