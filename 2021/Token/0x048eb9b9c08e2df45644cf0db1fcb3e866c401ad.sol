['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-26\n', '*/\n', '\n', 'pragma solidity ^0.5.17;\n', '\n', 'library SafeMath\n', '{\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256)\n', '  {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Variable\n', '{\n', '  string public name;\n', '  string public symbol;\n', '  uint256 public decimals;\n', '  uint256 public totalSupply;\n', '  address public owner;\n', '\n', '  uint256 internal _decimals;\n', '  bool internal transferLock;\n', '  \n', '  mapping (address => bool) public allowedAddress;\n', '  mapping (address => bool) public blockedAddress;\n', '\n', '  mapping (address => uint256) public balanceOf;\n', '\n', '  constructor() public\n', '  {\n', '    name = "Live Swap Coin";\n', '    symbol = "LSC";\n', '    decimals = 18;\n', '    _decimals = 10 ** uint256(decimals);\n', '    totalSupply = _decimals * 1000000000;\n', '    transferLock = true;\n', '    owner =  msg.sender;\n', '    balanceOf[owner] = totalSupply;\n', '    allowedAddress[owner] = true;\n', '  }\n', '}\n', '\n', 'contract Modifiers is Variable\n', '{\n', '  modifier isOwner\n', '  {\n', '    assert(owner == msg.sender);\n', '    _;\n', '  }\n', '}\n', '\n', 'contract Event\n', '{\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event TokenBurn(address indexed from, uint256 value);\n', '}\n', '\n', 'contract manageAddress is Variable, Modifiers, Event\n', '{\n', '  function add_allowedAddress(address _address) public isOwner\n', '  {\n', '    allowedAddress[_address] = true;\n', '  }\n', '  function delete_allowedAddress(address _address) public isOwner\n', '  {\n', '    require(_address != owner);\n', '    allowedAddress[_address] = false;\n', '  }\n', '  function add_blockedAddress(address _address) public isOwner\n', '  {\n', '    require(_address != owner);\n', '    blockedAddress[_address] = true;\n', '  }\n', '  function delete_blockedAddress(address _address) public isOwner\n', '  {\n', '    blockedAddress[_address] = false;\n', '  }\n', '}\n', 'contract Admin is Variable, Modifiers, Event\n', '{\n', '  function admin_tokenBurn(uint256 _value) public isOwner returns(bool success)\n', '  {\n', '    require(balanceOf[msg.sender] >= _value);\n', '    balanceOf[msg.sender] -= _value;\n', '    totalSupply -= _value;\n', '    emit TokenBurn(msg.sender, _value);\n', '    return true;\n', '  }\n', '}\n', 'contract Get is Variable, Modifiers\n', '{\n', '  function get_transferLock() public view returns(bool)\n', '  {\n', '    return transferLock;\n', '  }\n', '  function get_blockedAddress(address _address) public view returns(bool)\n', '  {\n', '    return blockedAddress[_address];\n', '  }\n', '}\n', '\n', 'contract Set is Variable, Modifiers, Event\n', '{\n', '  function setTransferLock(bool _transferLock) public isOwner returns(bool success)\n', '  {\n', '    transferLock = _transferLock;\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract LSC is Variable, Event, Get, Set, Admin, manageAddress\n', '{\n', '  using SafeMath for uint256;\n', '\n', '  function() external payable \n', '  {\n', '    revert();\n', '  }\n', '  \n', '  function transfer(address _to, uint256 _value) public\n', '  {\n', '    require(allowedAddress[msg.sender] || transferLock == false);\n', '    require(!blockedAddress[msg.sender] && !blockedAddress[_to]);\n', '    require(balanceOf[msg.sender] >= _value && _value > 0);\n', '    require((balanceOf[_to].add(_value)) >= balanceOf[_to] );\n', '    \n', '    balanceOf[msg.sender] -= _value;\n', '    balanceOf[_to] += _value;\n', '    emit Transfer(msg.sender, _to, _value);\n', '  }\n', '}']