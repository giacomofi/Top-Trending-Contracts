['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-31\n', '*/\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', 'interface IERC20 {\n', '    \n', '    function totalSupply() external view returns (uint256);\n', '\n', '    \n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    \n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    \n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    \n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    \n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '   \n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    \n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/* ########################################################################################### */\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', 'library SafeMath {\n', '    \n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    \n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        \n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    \n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, "SafeMath: division by zero");\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    \n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/* ########################################################################################### */\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', 'contract VIETDRAGON is IERC20 {\n', '    using SafeMath for uint256;\n', '    \n', '    mapping (address => uint256) private balances;\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', "    string private _name = 'VIET DRAGON';\n", "    string private _symbol = 'VDRA';\n", '    uint8 private _decimals = 9;\n', '    uint256 private _totalSupply = 1000000000000000000000000;\n', '      \n', '    constructor () public {\n', '       balances[msg.sender] = _totalSupply;\n', '        \n', '    }\n', '   \n', '   \n', '\n', '   function totalSupply() public view  returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    \n', '   function burn(uint256 value) public {\n', '      _burn(msg.sender, value);\n', '    }\n', '\n', '   \n', '    function name() public view returns (string memory) {\n', '      return _name;\n', '    }\n', '\n', '   \n', '    function symbol() public view returns (string memory) {\n', '      return _symbol;\n', '    }\n', '\n', '    \n', '    function decimals() public view returns (uint8) {\n', '      return _decimals;\n', '    }\n', '    \n', '\n', '    \n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return balances[account];\n', '    }\n', '\n', ' \n', '    function transfer(address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(msg.sender, recipient, amount);\n', '        return true;\n', '    }\n', '\n', '   \n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '   \n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        _approve(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', ' \n', '    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n', '        return true;\n', '    }\n', '\n', '  \n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '  \n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n', '        return true;\n', '    }\n', '\n', '   \n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        require(sender != address(0), "VIETDRAGON: transfer from the zero address");\n', '        require(recipient != address(0), "VIETDRAGON: transfer to the zero address");\n', '\n', '        balances[sender] = balances[sender].sub(amount);\n', '        balances[recipient] = balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '   \n', '    function _mint(address account, uint256 amount) internal {\n', '        require(account != address(0), "VIETDRAGON: mint to the zero address");\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        balances[account] = balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', ' \n', '    function _burn(address account, uint256 value) internal {\n', '        require(account != address(0), "VIETDRAGON: burn from the zero address");\n', '\n', '        _totalSupply = _totalSupply.sub(value);\n', '        balances[account] = balances[account].sub(value);\n', '        emit Transfer(account, address(0), value);\n', '    }\n', '\n', '\n', ' \n', '    function _approve(address owner, address spender, uint256 value) internal {\n', '        require(owner != address(0), "VIETDRAGON: approve from the zero address");\n', '        require(spender != address(0), "VIETDRAGON: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = value;\n', '        emit Approval(owner, spender, value);\n', '    }\n', '\n', '   \n', '    function _burnFrom(address account, uint256 amount) internal {\n', '        _burn(account, amount);\n', '        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n', '    }\n', '}']