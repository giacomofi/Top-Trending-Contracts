['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-20\n', '*/\n', '\n', 'pragma solidity 0.5.12;\n', '\n', 'contract Ownable {\n', '\n', '    address internal _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor() internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(_isOwner(msg.sender), "Caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function _isOwner(address account) internal view returns (bool) {\n', '        return account == _owner;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0), "New owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', 'interface IERC20 {\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address who) external view returns (uint256);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract Distribution is Ownable {\n', '\n', '    function transferETH(address payable[] memory recipients, uint256[] memory values) public payable onlyOwner {\n', '        uint256 i;\n', '        for (i; i < recipients.length; i++) {\n', '            recipients[i].transfer(values[i]);\n', '        }\n', '    }\n', '\n', '    function transferToken(IERC20 token, address[] memory recipients, uint256[] memory values) public onlyOwner {\n', '        uint256 i;\n', '        for (i; i < recipients.length; i++) {\n', '            token.transfer(recipients[i], values[i]);\n', '        }\n', '    }\n', '\n', '    function getContractBalanceOf(address tokenAddr) public view returns(uint256) {\n', '        return IERC20(tokenAddr).balanceOf(address(this));\n', '    }\n', '\n', '    function getBalanceOf(address tokenAddr, address account) public view returns(uint256) {\n', '        return IERC20(tokenAddr).balanceOf(account);\n', '    }\n', '\n', '}']