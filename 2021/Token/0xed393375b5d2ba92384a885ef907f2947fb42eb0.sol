['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-03\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.2;\n', '\n', 'interface IERC20 {\n', '    function allowance(address spender, address owner)\n', '        external\n', '        view\n', '        returns (uint256);\n', '}\n', '\n', 'contract AllowancesHelper {\n', '    struct Allowance {\n', '        address owner;\n', '        address spender;\n', '        uint256 amount;\n', '        address token;\n', '    }\n', '\n', '    function allowances(\n', '        address ownerAddress,\n', '        address[] memory tokensAddresses,\n', '        address[] memory spenderAddresses\n', '    ) external view returns (Allowance[] memory) {\n', '        uint256 spenderIdx;\n', '        uint256 tokenIdx;\n', '        uint256 numberOfAllowances;\n', '\n', '        // Calculate number of allowances\n', '        for (tokenIdx = 0; tokenIdx < tokensAddresses.length; tokenIdx++) {\n', '            for (\n', '                spenderIdx = 0;\n', '                spenderIdx < spenderAddresses.length;\n', '                spenderIdx++\n', '            ) {\n', '                address tokenAddress = tokensAddresses[tokenIdx];\n', '                address spenderAddress = spenderAddresses[spenderIdx];\n', '                IERC20 token = IERC20(tokenAddress);\n', '                uint256 amount = token.allowance(ownerAddress, spenderAddress);\n', '                if (amount > 0) {\n', '                    numberOfAllowances++;\n', '                }\n', '            }\n', '        }\n', '\n', '        Allowance[] memory _allowances = new Allowance[](numberOfAllowances);\n', '\n', '        // Fetch allowances\n', '        for (tokenIdx = 0; tokenIdx < tokensAddresses.length; tokenIdx++) {\n', '            for (\n', '                spenderIdx = 0;\n', '                spenderIdx < spenderAddresses.length;\n', '                spenderIdx++\n', '            ) {\n', '                uint256 allowanceIdx;\n', '                address spenderAddress = spenderAddresses[spenderIdx];\n', '                address tokenAddress = tokensAddresses[tokenIdx];\n', '                IERC20 token = IERC20(tokenAddress);\n', '                uint256 amount = token.allowance(ownerAddress, spenderAddress);\n', '                if (amount > 0) {\n', '                    Allowance memory allowance =\n', '                        Allowance({\n', '                            owner: ownerAddress,\n', '                            spender: spenderAddress,\n', '                            amount: amount,\n', '                            token: tokenAddress\n', '                        });\n', '                    _allowances[allowanceIdx] = allowance;\n', '                }\n', '            }\n', '        }\n', '        return _allowances;\n', '    }\n', '}']