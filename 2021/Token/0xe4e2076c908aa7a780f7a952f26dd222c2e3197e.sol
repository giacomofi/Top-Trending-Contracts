['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-03\n', '*/\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  \n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', '\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Standard Burnable Token\n', ' * @dev Adds burnFrom method to ERC20 implementations\n', ' */\n', '\n', 'contract StandardBurnableToken is BurnableToken, StandardToken {\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens from the target address and decrements allowance\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _value uint256 The amount of token to be burned\n', '   */\n', '  function burnFrom(address _from, uint256 _value) public {\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n', '    // this function needs to emit an event with the updated approval.\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    _burn(_from, _value);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool success)\n', '  {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool success)\n', '  {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ring token\n', ' **/\n', ' contract RWAT is StandardBurnableToken, PausableToken {\n', '     \n', '    using SafeMath for uint256;\n', '    string public constant name = "RWAT token";\n', '    string public constant symbol = "RWAT";\n', '    uint8 public constant decimals = 18;\n', '    uint256 public constant INITIAL_SUPPLY = 10e9 * (10 ** uint256(decimals));\n', '    uint constant LOCK_TOKEN_COUNT = 1000;\n', '    \n', '    struct LockedUserInfo{\n', '        uint256 _releaseTime;\n', '        uint256 _amount;\n', '    }\n', '\n', '    mapping(address => LockedUserInfo[]) private lockedUserEntity;\n', '    mapping(address => bool) private supervisorEntity;\n', '    mapping(address => bool) private lockedWalletEntity;\n', '\n', '    modifier onlySupervisor() {\n', '        require(owner == msg.sender || supervisorEntity[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    event Lock(address indexed holder, uint256 value, uint256 releaseTime);\n', '    event Unlock(address indexed holder, uint256 value);\n', ' \n', '    event PrintLog(\n', '        address indexed sender,\n', '        string _logName,\n', '        uint256 _value\n', '    );\n', '\n', '    constructor() public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[msg.sender] = INITIAL_SUPPLY;\n', '        emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n', '    }\n', '    \n', '    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n', '        require(!isLockedWalletEntity(msg.sender));\n', '        require(msg.sender != to,"Check your address!!");\n', '        \n', '        if (lockedUserEntity[msg.sender].length > 0 ) {\n', '            _autoUnlock(msg.sender);            \n', '        }\n', '        return super.transfer(to, value);\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public whenNotPaused  returns (bool) {\n', '        require(!isLockedWalletEntity(from) && !isLockedWalletEntity(msg.sender));\n', '        if (lockedUserEntity[from].length > 0) {\n', '            _autoUnlock(from);            \n', '        }\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '    \n', '    function transferWithLock(address holder, uint256 value, uint256 releaseTime) public onlySupervisor whenNotPaused returns (bool) {\n', '        require(releaseTime > now && value > 0, "Check your values!!;");\n', '        if(lockedUserEntity[holder].length >= LOCK_TOKEN_COUNT){\n', '            return false;\n', '        }\n', '        transfer(holder, value);\n', '        _lock(holder,value,releaseTime);\n', '        return true;\n', '    }\n', '      \n', '    function _lock(address holder, uint256 value, uint256 releaseTime) internal returns(bool) {\n', '        balances[holder] = balances[holder].sub(value);\n', '        lockedUserEntity[holder].push( LockedUserInfo(releaseTime, value) );\n', '        \n', '        emit Lock(holder, value, releaseTime);\n', '        return true;\n', '    }\n', '    \n', '    function _unlock(address holder, uint256 idx) internal returns(bool) {\n', '        LockedUserInfo storage lockedUserInfo = lockedUserEntity[holder][idx];\n', '        uint256 releaseAmount = lockedUserInfo._amount;\n', '\n', '        delete lockedUserEntity[holder][idx];\n', '        lockedUserEntity[holder][idx] = lockedUserEntity[holder][lockedUserEntity[holder].length.sub(1)];\n', '        lockedUserEntity[holder].length -=1;\n', '        \n', '        emit Unlock(holder, releaseAmount);\n', '        balances[holder] = balances[holder].add(releaseAmount);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function _autoUnlock(address holder) internal returns(bool) {\n', '        for(uint256 idx =0; idx < lockedUserEntity[holder].length ; idx++ ) {\n', '            if (lockedUserEntity[holder][idx]._releaseTime <= now) {\n', '                // If lockupinfo was deleted, loop restart at same position.\n', '                if( _unlock(holder, idx) ) {\n', '                    idx -=1;\n', '                }\n', '            }\n', '        }\n', '        return true;\n', '    } \n', '    \n', '    function setLockTime(address holder, uint idx, uint256 releaseTime) onlySupervisor public returns(bool){\n', '        require(holder !=address(0) && idx >= 0 && releaseTime > now);\n', '        require(lockedUserEntity[holder].length >= idx);\n', '         \n', '        lockedUserEntity[holder][idx]._releaseTime = releaseTime;\n', '        return true;\n', '    }\n', '    \n', '    function getLockedUserInfo(address _address) view public returns (uint256[], uint256[]){\n', '        require(msg.sender == _address || msg.sender == owner || supervisorEntity[msg.sender]);\n', '        uint256[] memory _returnAmount = new uint256[](lockedUserEntity[_address].length);\n', '        uint256[] memory _returnReleaseTime = new uint256[](lockedUserEntity[_address].length);\n', '        \n', '        for(uint i = 0; i < lockedUserEntity[_address].length; i ++){\n', '            _returnAmount[i] = lockedUserEntity[_address][i]._amount;\n', '            _returnReleaseTime[i] = lockedUserEntity[_address][i]._releaseTime;\n', '        }\n', '        return (_returnAmount, _returnReleaseTime);\n', '    }\n', '    \n', '    function burn(uint256 _value) onlySupervisor public {\n', '        super._burn(msg.sender, _value);\n', '    }\n', '    \n', '    function burnFrom(address _from, uint256 _value) onlySupervisor public {\n', '        super.burnFrom(_from, _value);\n', '    }\n', '    \n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        \n', '        uint256 totalBalance = super.balanceOf(owner);\n', '        if( lockedUserEntity[owner].length >0 ){\n', '            for(uint i=0; i<lockedUserEntity[owner].length;i++){\n', '                totalBalance = totalBalance.add(lockedUserEntity[owner][i]._amount);\n', '            }\n', '        }\n', '        \n', '        return totalBalance;\n', '    }\n', '\n', '    function setSupervisor(address _address) onlyOwner public returns (bool){\n', '        require(_address !=address(0) && !supervisorEntity[_address]);\n', '        supervisorEntity[_address] = true;\n', '        emit PrintLog(_address, "isSupervisor",  1);\n', '        return true;\n', '    }\n', '\n', '    function removeSupervisor(address _address) onlyOwner public returns (bool){\n', '        require(_address !=address(0) && supervisorEntity[_address]);\n', '        delete supervisorEntity[_address];\n', '        emit PrintLog(_address, "isSupervisor",  0);\n', '        return true;\n', '    }\n', '\n', '    function setLockedWalletEntity(address _address) onlySupervisor public returns (bool){\n', '        require(_address !=address(0) && !lockedWalletEntity[_address]);\n', '        lockedWalletEntity[_address] = true;\n', '        emit PrintLog(_address, "isLockedWalletEntity",  1);\n', '        return true;\n', '    }\n', '\n', '    function removeLockedWalletEntity(address _address) onlySupervisor public returns (bool){\n', '        require(_address !=address(0) && lockedWalletEntity[_address]);\n', '        delete lockedWalletEntity[_address];\n', '        emit PrintLog(_address, "isLockedWalletEntity",  0);\n', '        return true;\n', '    }\n', '\n', '    function isSupervisor(address _address) view onlyOwner public returns (bool){\n', '        return supervisorEntity[_address];\n', '    }\n', '\n', '    function isLockedWalletEntity(address _from) view private returns (bool){\n', '        return lockedWalletEntity[_from];\n', '    }\n', '\n', '}']