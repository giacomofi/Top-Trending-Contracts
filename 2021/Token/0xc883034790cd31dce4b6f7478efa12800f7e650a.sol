['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-10\n', '*/\n', '\n', 'pragma solidity 0.6.10;\n', '\n', 'library SafeMath {\n', '  /**\n', '   * @dev Returns the addition of two unsigned integers, reverting on\n', '   * overflow.\n', '   *\n', "   * Counterpart to Solidity's `+` operator.\n", '   *\n', '   * Requirements:\n', '   *\n', '   * - Addition cannot overflow.\n', '   */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      uint256 c = a + b;\n', '      require(c >= a, "SafeMath: addition overflow");\n', '\n', '      return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the subtraction of two unsigned integers, reverting on\n', '   * overflow (when the result is negative).\n', '   *\n', "   * Counterpart to Solidity's `-` operator.\n", '   *\n', '   * Requirements:\n', '   *\n', '   * - Subtraction cannot overflow.\n', '   */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      return sub(a, b, "SafeMath: subtraction overflow");\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '   * overflow (when the result is negative).\n', '   *\n', "   * Counterpart to Solidity's `-` operator.\n", '   *\n', '   * Requirements:\n', '   *\n', '   * - Subtraction cannot overflow.\n', '   */\n', '  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '      require(b <= a, errorMessage);\n', '      uint256 c = a - b;\n', '\n', '      return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the multiplication of two unsigned integers, reverting on\n', '   * overflow.\n', '   *\n', "   * Counterpart to Solidity's `*` operator.\n", '   *\n', '   * Requirements:\n', '   *\n', '   * - Multiplication cannot overflow.\n', '   */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "      // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "      // benefit is lost if 'b' is also tested.\n", '      // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '      if (a == 0) {\n', '          return 0;\n', '      }\n', '\n', '      uint256 c = a * b;\n', '      require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '      return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the integer division of two unsigned integers. Reverts on\n', '   * division by zero. The result is rounded towards zero.\n', '   *\n', "   * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '   * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '   * uses an invalid opcode to revert (consuming all remaining gas).\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - The divisor cannot be zero.\n', '   */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      return div(a, b, "SafeMath: division by zero");\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '   * division by zero. The result is rounded towards zero.\n', '   *\n', "   * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '   * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '   * uses an invalid opcode to revert (consuming all remaining gas).\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - The divisor cannot be zero.\n', '   */\n', '  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '      require(b > 0, errorMessage);\n', '      uint256 c = a / b;\n', "      // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '      return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '   * Reverts when dividing by zero.\n', '   *\n', "   * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '   * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '   * invalid opcode to revert (consuming all remaining gas).\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - The divisor cannot be zero.\n', '   */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      return mod(a, b, "SafeMath: modulo by zero");\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '   * Reverts with custom message when dividing by zero.\n', '   *\n', "   * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '   * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '   * invalid opcode to revert (consuming all remaining gas).\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - The divisor cannot be zero.\n', '   */\n', '  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '      require(b != 0, errorMessage);\n', '      return a % b;\n', '  }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '  /**\n', '   * @dev Returns the amount of tokens in existence.\n', '   */\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  /**\n', '   * @dev Returns the amount of tokens owned by `account`.\n', '   */\n', '  function balanceOf(address account) external view returns (uint256);\n', '\n', '  /**\n', "   * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '   *\n', '   * Returns a boolean value indicating whether the operation succeeded.\n', '   *\n', '   * Emits a {Transfer} event.\n', '   */\n', '  function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '  /**\n', '   * @dev Returns the remaining number of tokens that `spender` will be\n', '   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '   * zero by default.\n', '   *\n', '   * This value changes when {approve} or {transferFrom} are called.\n', '   */\n', '  function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '  /**\n', "   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '   *\n', '   * Returns a boolean value indicating whether the operation succeeded.\n', '   *\n', '   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '   * that someone may use both the old and the new allowance by unfortunate\n', '   * transaction ordering. One possible solution to mitigate this race\n', "   * condition is to first reduce the spender's allowance to 0 and set the\n", '   * desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   *\n', '   * Emits an {Approval} event.\n', '   */\n', '  function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '  /**\n', '   * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "   * allowance mechanism. `amount` is then deducted from the caller's\n", '   * allowance.\n', '   *\n', '   * Returns a boolean value indicating whether the operation succeeded.\n', '   *\n', '   * Emits a {Transfer} event.\n', '   */\n', '  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '  /**\n', '   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '   * another (`to`).\n', '   *\n', '   * Note that `value` may be zero.\n', '   */\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '  /**\n', '   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '   * a call to {approve}. `value` is the new allowance.\n', '   */\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// Interface to the UniswapV2Router02\n', 'interface Router {\n', '  function swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] memory path, address to, uint256 deadline) external;\n', '  function addLiquidity(address tokenA, address tokenB, uint256 amountADesired, uint256 amountBDesired, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline) external;\n', '}\n', '\n', '// Interface to the UST/MQQQ liquidity pool\n', 'interface lpPool {\n', '  function stake(uint256 countryID) external;\n', '  function balanceOf(address account) external view returns(uint256);\n', '}\n', '\n', 'contract StrategyDAI {\n', '  using SafeMath for uint256;\n', '\n', '  lpPool public pool;\n', '  Router public uni;\n', '  IERC20 public dai;\n', '  IERC20 public ust;\n', '  IERC20 public mQQQ;\n', '  address public owner;\n', '  address public lpAddress   = address(0xc1d2ca26A59E201814bF6aF633C3b3478180E91F);\n', '  address public uniAddress  = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n', '  address public daiAddress  = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n', '  address public ustAddress  = address(0xa47c8bf37f92aBed4A126BDA807A7b7498661acD);\n', '  address public mQQQAddress = address(0x13B02c8dE71680e71F0820c996E4bE43c2F57d15);\n', '\n', '  address[] pathOne;\n', '  address[] pathTwo;\n', '\n', '  constructor () public {\n', '    owner = msg.sender;\n', '    pool = lpPool(lpAddress);\n', '    uni  = Router(uniAddress);\n', '    dai  = IERC20(daiAddress);\n', '    ust  = IERC20(ustAddress);\n', '    mQQQ = IERC20(mQQQAddress);\n', '  }\n', '\n', '  uint256 public precision = 10;\n', '\n', '  function changePrecision(uint256 _value) public {\n', '    require(msg.sender == owner);\n', '    precision = _value;\n', '  }\n', '\n', '  function setPaths() public {\n', '    require(msg.sender == owner);\n', '    pathOne.push(address(0x6B175474E89094C44Da98b954EedeAC495271d0F));\n', '    pathOne.push(address(0xdAC17F958D2ee523a2206206994597C13D831ec7));\n', '    pathOne.push(address(0xa47c8bf37f92aBed4A126BDA807A7b7498661acD));\n', '    pathTwo.push(address(0xa47c8bf37f92aBed4A126BDA807A7b7498661acD));\n', '    pathTwo.push(address(0x13B02c8dE71680e71F0820c996E4bE43c2F57d15));\n', '  }\n', '\n', '  function implement(uint256 _rate) external {\n', '    // swap DAI to UST -- minimum returned is 90%\n', '    uint256 _dai = dai.balanceOf(msg.sender);\n', '    uni.swapExactTokensForTokens(_dai, _dai.mul(9000).div(10000), pathOne, msg.sender, block.timestamp.add(3600));\n', '    // swap 50% UST to MQQQ\n', '    uint256 half = ust.balanceOf(msg.sender).mul(5000).div(10000);\n', '    uni.swapExactTokensForTokens(half, half.mul(1).div(1000), pathTwo, msg.sender, block.timestamp.add(3600)); \n', '    // add liquidity.\n', '    uint256 desiredA = ust.balanceOf(msg.sender).mul(precision).div(_rate);\n', '    uint256 desiredB = ust.balanceOf(msg.sender);\n', '    uint256 minA = desiredA.mul(9000).div(10000);\n', '    uint256 minB = desiredB.mul(9000).div(10000);\n', '    uni.addLiquidity(mQQQAddress, ustAddress, desiredA, desiredB, minA, minB, msg.sender, block.timestamp.add(3600));\n', '    // get amount of lp tokens and stake them.\n', '    uint256 lpBalance = pool.balanceOf(msg.sender);\n', '    pool.stake(lpBalance);\n', '  }\n', '\n', '  function withdrawFailsafe(IERC20 _token, address _to) public {\n', '    require(msg.sender == owner);\n', '    IERC20(_token).transfer(_to, IERC20(_token).balanceOf(address(this)));\n', '  }\n', '}']