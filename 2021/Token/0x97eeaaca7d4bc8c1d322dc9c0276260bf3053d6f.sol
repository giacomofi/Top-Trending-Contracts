['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-13\n', '*/\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    event LockAddress(address indexed from, address indexed to, uint256 releaseTime);\n', '\n', '}\n', '\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor () internal {\n', '        address msgSender = msg.sender;\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(_owner == msg.sender, "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract ERC20 is IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '    \n', '    constructor (string memory name, string memory symbol,uint8 decimals) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '\n', '\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(msg.sender, recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '        \n', '        _afterTokenTransfer(recipient);\n', '    }\n', '\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '    function _afterTokenTransfer(address to) internal virtual { }\n', '    \n', '}\n', '\n', 'abstract contract ERC20Burnable is ERC20 {\n', '\n', '    function burn(uint256 amount) public virtual {\n', '        _burn(msg.sender, amount);\n', '    }\n', '\n', '    function burnFrom(address account, uint256 amount) public virtual {\n', '        uint256 decreasedAllowance = allowance(account, msg.sender).sub(amount, "ERC20: burn amount exceeds allowance");\n', '\n', '        _approve(account,msg.sender, decreasedAllowance);\n', '        _burn(account, amount);\n', '    }\n', '}\n', '\n', 'abstract contract LockedToken is ERC20,ERC20Burnable,Ownable{\n', '    mapping (address => bool) private _Admin;\n', '    struct _LockInfo {\n', '        uint256 releaseTime;\n', '        bool isUsed;\n', '    }\n', '    mapping (address => _LockInfo) private _LockList; \n', '    uint private _defaultLockDays;\n', '    \n', '    bool private _pause;\n', '    \n', '    constructor() Ownable() public{\n', '        unlock(msg.sender);\n', '        setAdmin(msg.sender,true);\n', '        _defaultLockDays = 0;\n', '    }\n', ' \n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\n', '        super._beforeTokenTransfer(from, to, amount);\n', '        require(!_pause,"ERC20: transfer paused");\n', '        require(!isLocked(from),"ERC20: address locked");\n', '    }\n', '    \n', '\n', '    function _afterTokenTransfer(address to) internal virtual override {\n', '        super._afterTokenTransfer(to);\n', '\n', '        if (_Admin[to] == true) {\n', '            _LockList[to].isUsed = true;\n', '            _LockList[to].releaseTime = block.timestamp;\n', '        } else if(_LockList[to].releaseTime == 0){\n', '            _LockList[to].isUsed = true;\n', '            _LockList[to].releaseTime = block.timestamp + (_defaultLockDays*24*3600);//(_defaultLockDays*600); \n', '        }\n', '    }\n', '    \n', '\n', '    event lockSomeOne(address account, uint256 releaseTime);\n', '    event unlockSomeOne(address account);\n', '    function lock(address account, uint256 releaseTime) public onlyOwner {\n', '        _LockList[account].isUsed = true;\n', '        _LockList[account].releaseTime = releaseTime;\n', '        emit lockSomeOne(account, releaseTime);\n', '    }\n', '\n', '    function unlock(address account) public onlyOwner{\n', '        _LockList[account].isUsed = true;\n', '        _LockList[account].releaseTime = block.timestamp;\n', '        emit unlockSomeOne(account);\n', '    }\n', '\n', '    function isLocked(address account) internal returns (bool){\n', '        if (_LockList[account].isUsed) {\n', '            return _LockList[account].releaseTime > block.timestamp;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '    \n', '    function setTransferPause(bool pause) public onlyOwner{\n', '        _pause = pause;\n', '    }\n', '\n', '    function setAdmin(address account,bool stats) public onlyOwner {\n', '        _Admin[account]== stats;\n', '        if (stats == false){\n', '            _LockList[account].releaseTime = 1592881395022;\n', '        }else{\n', '            _LockList[account].releaseTime = block.timestamp;\n', '        }\n', '    }\n', '\n', '    function setDefaultLockdays(uint dayNum) public onlyOwner {\n', '        require(dayNum >= 0,"DVC:must gather than or equal 0!");\n', '        _defaultLockDays = dayNum;\n', '    }\n', '\n', '\n', '\n', '    function lockDate(address user) public view returns (uint) {\n', '        return _LockList[user].releaseTime;\n', '    }\n', '    \n', '    function defaultLockDays() public view returns (uint) {\n', '        return _defaultLockDays;\n', '    }\n', '    \n', '\n', '    function mint(address account, uint256 amount )public onlyOwner{\n', '        _mint(account,amount);\n', '    }\n', '}\n', '\n', 'contract CAIToken is LockedToken {\n', '    string private _name = "CAI Protocol";\n', '    string private _symbol = "CAI";\n', '    uint8 private _decimals = 18;\n', '    \n', '    constructor () \n', '        ERC20(_name, _symbol, _decimals) \n', '        public{\n', '            _mint(msg.sender,3000000000000000000000000000);\n', '        }\n', '        \n', '}']