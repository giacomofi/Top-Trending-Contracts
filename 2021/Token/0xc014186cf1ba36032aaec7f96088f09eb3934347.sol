['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-01\n', '*/\n', '\n', 'pragma solidity >= 0.5.0;\n', '\n', 'contract SafeMath {\n', '    function safeAdd(uint256 x, uint256 y) internal returns(uint256) {\n', '        uint256 z = x + y;\n', '        assert((z >= x) && (z >= y));\n', '        return z;\n', '    }\n', '\n', '    function safeSubtract(uint256 x, uint256 y) internal returns(uint256) {\n', '        assert(x >= y);\n', '        uint256 z = x - y;\n', '        return z;\n', '    }\n', '\n', '    function safeMult(uint256 x, uint256 y) internal returns(uint256) {\n', '        uint256 z = x * y;\n', '        assert((x == 0)||(z/x == y));\n', '        return z;\n', '    }\n', '\n', '}\n', '\n', 'contract Token {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) view public returns  (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) view public returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '}\n', '\n', '\n', 'contract StandardToken is Token , SafeMath {\n', '\n', '    bool public status = true;\n', '    modifier on() {\n', '        require(status == true);\n', '        _;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) on public returns (bool success) {\n', '        require(!frozenAccount[msg.sender]);\n', '        require(!frozenAccount[_to]);\n', '        if (balances[msg.sender] >= _value && _value > 0 && _to != address(0)) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] = safeAdd(balances[_to],_value);\n', '            emit Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) on public returns (bool success) {\n', '        require(!frozenAccount[_from]);\n', '        require(!frozenAccount[_to]);\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] = safeAdd(balances[_to],_value);\n', '            balances[_from] = safeSubtract(balances[_from],_value);\n', '            allowed[_from][msg.sender] = safeSubtract(allowed[_from][msg.sender],_value);\n', '            emit Transfer(_from, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function balanceOf(address _owner) on view public returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) on public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) on view public returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    mapping (address => bool) public frozenAccount;\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', '\n', '\n', 'contract WCX is StandardToken {\n', '    string public name = "WeCoOwn Rewards";\n', '    uint8 public decimals = 18;\n', '    string public symbol = "WCX";\n', '    bool private init =true;\n', '    \n', '    event Mint(address indexed to, uint value);\n', '    event Burn(address indexed burner, uint256 value);\n', '    event FrozenFunds(address target, bool frozen);\n', '    \n', '    \n', '    function turnon() controller public {\n', '        status = true;\n', '    }\n', '    function turnoff() controller public {\n', '        status = false;\n', '    }\n', '    constructor() public {\n', '        require(init==true);\n', '        totalSupply = 100000000000*10**18;\n', '        balances[0x528FE8Abf74CB2799D709585208fCF87CD505DCE] = totalSupply;\n', '        init = false;\n', '    }\n', '    address public controllerAddress = 0x528FE8Abf74CB2799D709585208fCF87CD505DCE;\n', '\n', '    modifier controller () {\n', '        require(msg.sender == controllerAddress);\n', '        _;\n', '    }\n', '    \n', '    function mint(address _to, uint256 _amount) on controller public returns (bool) {\n', '        totalSupply = safeAdd(totalSupply, _amount);\n', '        balances[_to] = safeAdd(balances[_to], _amount);\n', '\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '    \n', '    function burn(uint256 _value) on public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);   // Check if the sender has enough\n', '        balances[msg.sender] = safeSubtract(balances[msg.sender],_value);\n', '        totalSupply = safeSubtract(totalSupply,_value);\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '    \n', '   \n', '    function freezeAccount(address target, bool freeze) on controller public {\n', '        frozenAccount[target] = freeze;\n', '        emit FrozenFunds(target, freeze);\n', '    }\n', '}']