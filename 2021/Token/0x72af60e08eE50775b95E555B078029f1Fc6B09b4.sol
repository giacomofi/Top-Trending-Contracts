['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-15\n', '*/\n', '\n', '//SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface IERC20 {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '}\n', '\n', 'library SafeMath {\n', '\n', '    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require((z = x + y) >= x);\n', '    }\n', '\n', '    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require((z = x - y) <= x);\n', '    }\n', '\n', '    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require(x == 0 || (z = x * y) / x == y);\n', '    }\n', '\n', '    function div(uint256 x, uint256 y) internal pure returns (uint256) {\n', '        return x / y;\n', '    }\n', '\n', '    function max(uint256 x, uint256 y) internal pure returns (uint256) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    function min(uint256 x, uint256 y) internal pure returns (uint256) {\n', '        return x < y ? x : y;\n', '    }\n', '\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', ' \n', '  constructor() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '}\n', '\n', 'contract Airdropper is Ownable {\n', '    uint public eth;\n', '\n', '    constructor() {\n', '        eth=0;\n', '    }\n', '\n', '    function ERC20AirTransfer(address[] calldata _recipients, uint[] calldata _values, address _tokenAddress) onlyOwner public returns (bool) {\n', '        require(_recipients.length > 0 && _recipients.length==_values.length);\n', '\n', '        for(uint i = 0; i < _recipients.length; i++){\n', '            require(IERC20(_tokenAddress).allowance(msg.sender, address(this))>=_values[i]);\n', '            IERC20(_tokenAddress).transferFrom(owner, _recipients[i], _values[i]);\n', '        }\n', ' \n', '        return true;\n', '    }\n', '\n', '    function ETHAirTransfer(address[] calldata _recipients, uint[] calldata _values) onlyOwner public returns (bool) {\n', '        require(_recipients.length > 0 && _recipients.length==_values.length);\n', '\n', '        for(uint i = 0; i < _recipients.length; i++){\n', '            require(eth>=_values[i], "ETH is not sufficient");\n', '            payable(_recipients[i]).transfer(_values[i]);\n', '            eth = eth - _values[i];\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    receive() external payable {\n', '        //eth.add(msg.value);\n', '        eth = eth + msg.value;\n', '    }\n', '\n', '    function withdraw() onlyOwner public {\n', '        payable(msg.sender).transfer(eth);\n', '    }\n', '\n', '}']