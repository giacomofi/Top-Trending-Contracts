['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-03\n', '*/\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title ERC20Interface\n', ' * @dev The ERC20Interface contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract ERC20Interface {\n', '    function totalSupply() public view returns (uint);\n', '    function balanceOf(address tokenOwner) public view returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'contract SafeMath {\n', '    function safeAdd(uint a, uint b) public pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function safeSub(uint a, uint b) public pure returns (uint c) {\n', '        require(b <= a); c = a - b; } function safeMul(uint a, uint b) public pure returns (uint c) { c = a * b; require(a == 0 || c / a == b); } function safeDiv(uint a, uint b) public pure returns (uint c) { require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title AITNetwork\n', ' * @dev The AITNetwork contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract AITTNetwork is ERC20Interface, SafeMath {\n', '    string public name;\n', '    string private ownername;\n', '    string public symbol;\n', '    uint8 public decimals; // 18 decimals is the strongly suggested default, avoid changing it\n', '   uint256 public _totalSupply;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    constructor() public {\n', '        name = "AITNetwork";\n', '        symbol = "AITN";\n', '        decimals = 18;\n', '        _totalSupply = 50000000000000000000000000;\n', '         balances[msg.sender] = _totalSupply;\n', '        emit Transfer(address(0), msg.sender, _totalSupply);\n', '    }\n', '    \n', '   \n', '    // @param _totalSupply Initial supply of the contract\n', '    function totalSupply() public view returns (uint) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '    \n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @return An uint representing the amount owned by the passed address.\n', '    */\n', '\n', '    function balanceOf(address tokenOwner) public view returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '   /**\n', '    * @dev Function to check the amount of tokens than an owner allowed to a spender.\n', '    * @param spender address The address which will spend the funds.\n', '    * @return A uint specifying the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '   \n', '  \n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    * @param spender The address which will spend the funds.\n', '    * @param tokens The amount of tokens to be spent.\n', '    */\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '/**\n', '    * @dev transfer token for a specified address\n', '    * @param to The address to transfer to.\n', '    * @param tokens The amount to be transferred.\n', '    */\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', ' /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param from address The address which you want to send tokens from\n', '    * @param to address The address which you want to transfer to\n', '    * @param tokens uint the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        balances[from] = safeSub(balances[from], tokens);\n', '        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '    /**\n', '    * @dev Recieve ETH from owner address to another\n', '    */\n', '    function invest() external payable{\n', '    }\n', '    function() external payable{\n', '    }\n', '    \n', '    function balanceOf() external view returns (uint){\n', '        return address(this).balance;\n', '    }\n', '     /**\n', '    * @dev Send Gas from owner address to another\n', '    * @param to address The address which you want to transfer to\n', '    * @param etherAmt uint the amount of tokens to be transferred\n', '    */\n', '    function sendGas(address payable to, uint etherAmt) public returns (bool success) {\n', '        to.transfer(etherAmt);\n', '        return true;\n', '    }\n', '}']