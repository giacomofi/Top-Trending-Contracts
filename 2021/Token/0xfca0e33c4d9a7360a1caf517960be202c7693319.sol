['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-07\n', '*/\n', '\n', '// File: contracts\\token\\interfaces\\IERC20Token.sol\n', '\n', 'pragma solidity 0.4.26;\n', '\n', '/*\n', '    ERC20 Standard Token interface\n', '*/\n', 'contract IERC20Token {\n', "    // these functions aren't abstract since the compiler emits automatically generated getter functions as external\n", '    function name() public view returns (string) {this;}\n', '    function symbol() public view returns (string) {this;}\n', '    function decimals() public view returns (uint8) {this;}\n', '    function totalSupply() public view returns (uint256) {this;}\n', '    function balanceOf(address _owner) public view returns (uint256) {_owner; this;}\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {_owner; _spender; this;}\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);    \n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '}\n', '\n', '// File: contracts\\utility\\Utils.sol\n', '\n', 'pragma solidity 0.4.26;\n', '\n', '/**\n', '  * @dev Utilities & Common Modifiers\n', '*/\n', 'contract Utils {\n', '    /**\n', '      * constructor\n', '    */\n', '    constructor() public {\n', '    }\n', '\n', '    // verifies that an amount is greater than zero\n', '    modifier greaterThanZero(uint256 _amount) {\n', '        require(_amount > 0, "greaterThanZero");\n', '        _;\n', '    }\n', '\n', "    // validates an address - currently only checks that it isn't null\n", '    modifier validAddress(address _address) {\n', '        require(_address != address(0), "validAddress");\n', '        _;\n', '    }\n', '\n', '    // verifies that the address is different than this contract address\n', '    modifier notThis(address _address) {\n', '        require(_address != address(this), "notThis");\n', '        _;\n', '    }\n', '\n', '}\n', '\n', '// File: contracts\\utility\\SafeMath.sol\n', '\n', 'pragma solidity 0.4.26;\n', '\n', '/**\n', '  * @dev Library for basic math operations with overflow/underflow protection\n', '*/\n', 'library SafeMath {\n', '    /**\n', '      * @dev returns the sum of _x and _y, reverts if the calculation overflows\n', '      * \n', '      * @param _x   value 1\n', '      * @param _y   value 2\n', '      * \n', '      * @return sum\n', '    */\n', '    function add(uint256 _x, uint256 _y) internal pure returns (uint256) {\n', '        uint256 z = _x + _y;\n', '        require(z >= _x, "add() z >= _x");\n', '        return z;\n', '    }\n', '\n', '    /**\n', '      * @dev returns the difference of _x minus _y, reverts if the calculation underflows\n', '      * \n', '      * @param _x   minuend\n', '      * @param _y   subtrahend\n', '      * \n', '      * @return difference\n', '    */\n', '    function sub(uint256 _x, uint256 _y) internal pure returns (uint256) {\n', '        require(_x >= _y, "sub() _x >= _y");\n', '        return _x - _y;\n', '    }\n', '\n', '    /**\n', '      * @dev returns the product of multiplying _x by _y, reverts if the calculation overflows\n', '      * \n', '      * @param _x   factor 1\n', '      * @param _y   factor 2\n', '      * \n', '      * @return product\n', '    */\n', '    function mul(uint256 _x, uint256 _y) internal pure returns (uint256) {\n', '        // gas optimization\n', '        if (_x == 0)\n', '            return 0;\n', '\n', '        uint256 z = _x * _y;\n', '        require(z / _x == _y, "mul() z / _x == _y");\n', '        return z;\n', '    }\n', '\n', '      /**\n', '        * ev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '        * \n', '        * aram _x   dividend\n', '        * aram _y   divisor\n', '        * \n', '        * eturn quotient\n', '    */\n', '    function div(uint256 _x, uint256 _y) internal pure returns (uint256) {\n', '        require(_y > 0, "div() _y > 0");\n', '        uint256 c = _x / _y;\n', '\n', '        return c;\n', '    }\n', '}\n', '\n', '// File: contracts\\token\\ERC20Token.sol\n', '\n', 'pragma solidity 0.4.26;\n', '\n', '\n', '\n', '\n', '/**\n', '  * @dev ERC20 Standard Token implementation\n', '*/\n', 'contract ERC20Token is IERC20Token, Utils {\n', '    using SafeMath for uint256;\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This is for debug purpose\n', '    //event Log(address from, string message);\n', '\n', '    /**\n', '      * @dev triggered when tokens are transferred between wallets\n', '      * \n', '      * @param _from    source address\n', '      * @param _to      target address\n', '      * @param _value   transfer amount\n', '    */\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    /**\n', '      * @dev triggered when a wallet allows another wallet to transfer tokens from on its behalf\n', '      * \n', '      * @param _owner   wallet that approves the allowance\n', '      * @param _spender wallet that receives the allowance\n', '      * @param _value   allowance amount\n', '    */\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    // This is for debug purpose\n', '    event Log(address from, string message);\n', '\n', '    /**\n', '      * @dev initializes a new ERC20Token instance\n', '      * \n', '      * @param _name        token name\n', '      * @param _symbol      token symbol\n', '      * @param _decimals    decimal points, for display purposes\n', '      * @param _totalSupply total supply of token units\n', '    */\n', '    constructor(string _name, string _symbol, uint8 _decimals, uint256 _totalSupply ) public {\n', '        require(bytes(_name).length > 0  , "constructor: name == 0"); // validate input\n', '        require(bytes(_symbol).length > 0, "constructor: symbol == 0"); // validate input\n', '\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '        totalSupply = _totalSupply;\n', '        balanceOf[msg.sender] = _totalSupply;\n', '        //emit Log(msg.sender, "constractor()");\n', '    }\n', '\n', '    /**\n', '      * @dev send coins\n', '      * throws on any error rather then return a false flag to minimize user errors\n', '      * \n', '      * @param _to      target address\n', '      * @param _value   transfer amount\n', '      * \n', "      * @return true if the transfer was successful, false if it wasn't\n", '    */\n', '    function transfer(address _to, uint256 _value)\n', '        public\n', '        validAddress(_to)\n', '        returns (bool success)\n', '    {\n', '        //emit Log(msg.sender, "transfer() sender");\n', '        return _transfer( msg.sender, _to, _value );\n', '    }\n', '    \n', '    /**\n', '      * @dev an account/contract attempts to get the coins\n', '      * throws on any error rather then return a false flag to minimize user errors\n', '      * \n', '      * @param _from    source address\n', '      * @param _to      target address\n', '      * @param _value   transfer amount\n', '      * \n', "      * @return true if the transfer was successful, false if it wasn't\n", '    */\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '        public\n', '        validAddress(_from)\n', '        validAddress(_to)\n', '        returns (bool success)\n', '    {\n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '        return _transfer( _from, _to, _value );\n', '    }\n', '\n', '    /**\n', '      * @dev allow another account/contract to spend some tokens on your behalf\n', '      * throws on any error rather then return a false flag to minimize user errors\n', '      * \n', '      * also, to minimize the risk of the approve/transferFrom attack vector\n', '      * (see https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/), approve has to be called twice\n', '      * in 2 separate transactions - once to change the allowance to 0 and secondly to change it to the new allowance value\n', '      * \n', '      * @param _spender approved address\n', '      * @param _value   allowance amount\n', '      * \n', "      * @return true if the approval was successful, false if it wasn't\n", '    */\n', '    function approve(address _spender, uint256 _value)\n', '        public\n', '        validAddress(_spender)\n', '        returns (bool success)\n', '    {\n', "        // if the allowance isn't 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal\n", '        return _approve(msg.sender, _spender, _value );\n', '    }\n', '\n', '    /**\n', '      * @dev \n', '      * \n', '      * @param _from    source address\n', '      * @param _to      target address\n', '      * @param _value   transfer amount\n', '      * \n', "      * @return true if the transfer was successful, false if it wasn't\n", '    */\n', '    function _transfer(address _from, address _to, uint256 _value)\n', '        internal\n', '        returns (bool success)\n', '    {\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function _approve(address _from, address _spender, uint256 _value)\n', '        internal\n', '        validAddress(_spender)\n', '        returns (bool success)\n', '    {\n', "        // if the allowance isn't 0, it can only be updated to 0 to prevent an allowance change immediately after withdrawal\n", '        require(_value == 0 || allowance[_from][_spender] == 0);\n', '\n', '        allowance[_from][_spender] = _value;\n', '\n', '        emit Approval(_from, _spender, _value);\n', '        return true;\n', '    }\n', '}\n', '\n', '// File: contracts\\meta_test\\TxRelayUtil.sol\n', '\n', 'pragma solidity 0.4.26;\n', '// -*- coding: utf-8-unix -*-\n', '\n', 'contract TxRelayUtil {\n', '\n', '    address txrelay;\n', '\n', '    modifier onlyTxRelay() {\n', '        require(address(0) != txrelay, "TxRelay null");\n', '        require(msg.sender == txrelay, "sender not TxRelay");\n', '        _;\n', '    }\n', '}\n', '\n', '// File: contracts\\token\\CHMToken.sol\n', '\n', 'pragma solidity 0.4.26;\n', '\n', '\n', '\n', '/**\n', '  * @dev ERC20 Standard Token implementation\n', '*/\n', 'contract CHMToken is ERC20Token, TxRelayUtil {\n', '    /**\n', '      * @dev initializes a new ERC20Token instance\n', '      * \n', '      * @param _name        token name\n', '      * @param _symbol      token symbol\n', '      * @param _decimals    decimal points, for display purposes\n', '      * @param _totalSupply total supply of token units\n', '    */\n', '    constructor(string _name, string _symbol, uint8 _decimals, uint256 _totalSupply ) public\n', '        ERC20Token(_name, _symbol, _decimals, _totalSupply )\n', '    {\n', '    }\n', '\n', '    function set_txrelay( address _to ) public\n', '        validAddress(_to)\n', '        returns (bool success)\n', '    {\n', '        require(txrelay == address(0), "It has been set txrelay address.");\n', '        txrelay = _to;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '      * @dev \n', '      * \n', '      * @param _from    source address\n', '      * @param _to      target address\n', '      * @param _value   transfer amount\n', '      * \n', "      * @return true if the transfer was successful, false if it wasn't\n", '    */\n', '    function transferRelay(address _from, address _to, uint256 _value)\n', '        public\n', '        validAddress(_from)\n', '        validAddress(_to)\n', '        onlyTxRelay\n', '        returns (bool success)\n', '    {\n', '        //emit Log(msg.sender, "transferRelay() sender");\n', '        //emit Log(_from, "transferRelay() from");\n', '        //emit Log(_to, "transferRelay() to");\n', '        //emit Log(txrelay, "transferRelay() txrelay");\n', '        return _transfer( _from, _to, _value );\n', '    }\n', '\n', '    /**\n', '      * @dev allow another account/contract to spend some tokens on your behalf\n', '      * throws on any error rather then return a false flag to minimize user errors\n', '      * \n', '      * also, to minimize the risk of the approve/transferFrom attack vector\n', '      * (see https://docs.google.com/document/d/1YLPtQxZu1UAvO9cZ1O2RPXBbT0mooh4DYKjA_jp-RLM/), approve has to be called twice\n', '      * in 2 separate transactions - once to change the allowance to 0 and secondly to change it to the new allowance value\n', '      * \n', '      * @param _spender approved address\n', '      * @param _value   allowance amount\n', '      * \n', "      * @return true if the approval was successful, false if it wasn't\n", '    */\n', '    function approveRelay(address _from, address _spender, uint256 _value)\n', '        public\n', '        validAddress(_from)\n', '        validAddress(_spender)\n', '        onlyTxRelay\n', '        returns (bool success)\n', '    {\n', '        return _approve(_from, _spender, _value );\n', '    }\n', '}']