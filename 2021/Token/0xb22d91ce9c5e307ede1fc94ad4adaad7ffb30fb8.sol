['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-19\n', '*/\n', '\n', '//SPDX-License-Identifier: MIT\n', '\n', '/**\n', '    Name: Healthiers Token\n', '    Symbol: HEALTH\n', '    Decimals: 8\n', '    @ 2021 Healthiers\n', '*/\n', '\n', 'pragma solidity ^0.8.4; \n', '\n', 'abstract contract ERC20Interface {\n', '    function totalSupply() public virtual view returns (uint256);\n', '    function balanceOf(address who) public virtual view returns (uint256);\n', '    function transfer(address to, uint256 value) public virtual returns (bool);\n', '    function allowance(address owner, address spender) public virtual view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public virtual returns (bool);\n', '    function approve(address spender, uint256 value) public virtual returns (bool);\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'abstract contract ERC223Interface {\n', '    function transfer(address to, uint value, bytes memory data) public virtual;\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n', '}\n', '\n', 'abstract contract ERC223ReceivingContract { \n', '    function tokenFallback(address _from, uint _value, bytes memory _data) public  virtual;\n', '}\n', '\n', 'contract OwnableInterface {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() {\n', '        owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), owner);\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0), "OwnableInterface: new owner is the zero address");\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(owner, address(0));\n', '        owner = address(0);\n', '    }\n', '}\n', '\n', 'contract HealthiersToken is OwnableInterface, ERC20Interface, ERC223Interface {\n', '    using SafeMath for uint;\n', '     \n', '    string internal _name;\n', '    string internal _symbol;\n', '    uint8 internal _decimals;\n', '    uint256 internal _totalSupply;\n', '    bool internal _minting = false;\n', '    bool internal _burning = false;\n', '\n', '    mapping (address => uint256) internal balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    mapping (address => bool) public frozenAccount;\n', '    mapping (address => uint256) public limitAccount;\n', '\n', '    event MintingDisable();\n', '    event MintingEnable();\n', '    event BurningEnable();\n', '    event BurningDisable();\n', '    event FrozenFunds(address target, bool frozen);\n', '    event LimitFunds(address target, uint256 periodTime);\n', '\n', '    constructor(string memory name_, string memory symbol_, uint8 decimals_, uint256 totalSupply_) {\n', '        _symbol = symbol_;\n', '        _name = name_;\n', '        _decimals = decimals_;\n', '        _totalSupply = totalSupply_ * 10 ** uint256(decimals_);\n', '        balances[msg.sender] = totalSupply_ * 10 ** uint256(decimals_);\n', '    }\n', '\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public override view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '    \n', '    function balanceOf(address _owner) public override view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '    \n', '    function setPeriodAccount(address target, uint256 periodTime) onlyOwner public {\n', '        limitAccount[target] = periodTime;\n', '        emit LimitFunds(target, periodTime);\n', '    }\n', '    \n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        emit FrozenFunds(target, freeze);\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) public override returns (bool) {\n', '        require(_to != msg.sender, "HealthiersToken: transfer to the own address");\n', '        require(_value > 0, "HealthiersToken: transfer zero value");\n', '        require(!frozenAccount[msg.sender], "HealthiersToken: frozenAccount");\n', '        require(limitAccount[msg.sender] < uint256(block.timestamp), "HealthiersToken: do not reach period");\n', '        require(!frozenAccount[_to], "HealthiersToken: frozenAccount");\n', '        \n', '        require(_to != address(0), "HealthiersToken: transfer to the zero address");\n', '        require(_value <= balances[msg.sender], "HealthiersToken: transfer amount exceeds balance");\n', '        balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\n', '        balances[_to] = SafeMath.add(balances[_to], _value);\n', '        \n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transfer(address _to, uint _value, bytes memory _data) public override {\n', '        require(_to != msg.sender, "HealthiersToken: transfer to the own address");\n', '        require(_value > 0, "HealthiersToken: transfer zero value");\n', '        require(!frozenAccount[msg.sender], "HealthiersToken: frozenAccount");\n', '        require(limitAccount[msg.sender] < uint256(block.timestamp), "HealthiersToken: do not reach period");\n', '        require(!frozenAccount[_to], "HealthiersToken: frozenAccount");\n', '        \n', '        require(_to != address(0), "HealthiersToken: transfer to the zero address");\n', '        require(_value <= balances[msg.sender], "HealthiersToken: transfer amount exceeds balance");\n', '        if(isContract(_to)) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(msg.sender, _value, _data);\n', '        }\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        emit Transfer(msg.sender, _to, _value, _data);\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) public override returns (bool) {\n', '        require(_to != _from, "HealthiersToken: transfer to the own address");\n', '        require(_value > 0, "HealthiersToken: transfer zero value");\n', '        require(!frozenAccount[_from], "HealthiersToken: frozenAccount");\n', '        require(limitAccount[_from] < uint256(block.timestamp), "HealthiersToken: do not reach period");\n', '        require(!frozenAccount[_to], "HealthiersToken: frozenAccount");\n', '        \n', '        require(_to != address(0), "HealthiersToken: transfer to the zero address");\n', '        require(_value <= balances[_from], "HealthiersToken: transfer amount exceeds balance");\n', '        require(_value <= allowed[_from][msg.sender], "HealthiersToken: transfer amount exceeds balance");\n', '        \n', '        balances[_from] = SafeMath.sub(balances[_from], _value);\n', '        balances[_to] = SafeMath.add(balances[_to], _value);\n', '        allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _value);\n', '        \n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _value) public override returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        \n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) public override view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = SafeMath.add(allowed[msg.sender][_spender], _addedValue);\n', '        \n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '    \n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = SafeMath.sub(oldValue, _subtractedValue);\n', '        }\n', '        \n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function minting() public view returns (bool) {\n', '        return _minting;\n', '    }\n', '\n', '    function _mintingDisable() onlyOwner public {\n', '        _minting = false;\n', '        emit MintingDisable();\n', '    }\n', '\n', '    function _mintingEnable() onlyOwner public {\n', '        _minting = true;\n', '        emit MintingEnable();\n', '    }\n', '\n', '    function mint(address _to, uint256 _value) onlyOwner public {\n', '        require(_to != address(0), "HealthiersToken: mint to the zero address");\n', '        require(_minting, "HealthiersToken: minting is disabled");\n', '\n', '        _totalSupply += _value;\n', '        balances[_to] = SafeMath.add(balances[_to], _value);\n', '        emit Transfer(address(0), _to, _value);\n', '    }\n', '\n', '    function burning() public view returns (bool) {\n', '        return _burning;\n', '    }\n', '\n', '    function _burningDisable() onlyOwner public {\n', '        _burning = false;\n', '        emit BurningDisable();\n', '    }\n', '\n', '    function _burningEnable() onlyOwner public {\n', '        _burning = true;\n', '        emit BurningEnable();\n', '    }\n', '\n', '    function burn(uint256 _value) onlyOwner public {\n', '        require(_burning, "HealthiersToken: burning is disabled");\n', '        uint256 accountBalance = balances[msg.sender];\n', '        require(accountBalance >= _value, "HealthiersToken: burn amount exceeds balance");\n', '        require(_totalSupply >= _value, "HealthiersToken: burn amount exceeds totalSupply");\n', '        _totalSupply -= _value;\n', '        balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\n', '\n', '        emit Transfer(msg.sender, address(0), _value);\n', '    }\n', '    \n', '    function isContract(address _addr) private view returns (bool is_contract) {\n', '        uint length;\n', '        assembly {\n', '            length := extcodesize(_addr)\n', '        }\n', '        return (length>0);\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '    \n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '    \n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    \n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}']