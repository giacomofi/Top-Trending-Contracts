['// SPDX-License-Identifier: agpl-3.0\n', 'pragma solidity 0.6.12;\n', '\n', "import {IVariableDebtToken} from './IVariableDebtToken.sol';\n", "import {WadRayMath} from './WadRayMath.sol';\n", "import {Errors} from './Errors.sol';\n", "import {DebtTokenBase} from './DebtTokenBase.sol';\n", '\n', '/**\n', ' * @title VariableDebtToken\n', ' * @notice Implements a variable debt token to track the borrowing positions of users\n', ' * at variable rate mode\n', ' * @author Aave\n', ' **/\n', 'contract VariableDebtToken is DebtTokenBase, IVariableDebtToken {\n', '  using WadRayMath for uint256;\n', '\n', '  uint256 public constant DEBT_TOKEN_REVISION = 0x1;\n', '\n', '  constructor(\n', '    address pool,\n', '    address underlyingAsset,\n', '    string memory name,\n', '    string memory symbol,\n', '    address incentivesController\n', '  ) public DebtTokenBase(pool, underlyingAsset, name, symbol, incentivesController) {}\n', '\n', '  /**\n', '   * @dev Gets the revision of the stable debt token implementation\n', '   * @return The debt token implementation revision\n', '   **/\n', '  function getRevision() internal pure virtual override returns (uint256) {\n', '    return DEBT_TOKEN_REVISION;\n', '  }\n', '\n', '  /**\n', '   * @dev Calculates the accumulated debt balance of the user\n', '   * @return The debt balance of the user\n', '   **/\n', '  function balanceOf(address user) public view virtual override returns (uint256) {\n', '    uint256 scaledBalance = super.balanceOf(user);\n', '\n', '    if (scaledBalance == 0) {\n', '      return 0;\n', '    }\n', '\n', '    return scaledBalance.rayMul(POOL.getReserveNormalizedVariableDebt(UNDERLYING_ASSET_ADDRESS));\n', '  }\n', '\n', '  /**\n', '   * @dev Mints debt token to the `onBehalfOf` address\n', '   * -  Only callable by the LendingPool\n', '   * @param user The address receiving the borrowed underlying, being the delegatee in case\n', '   * of credit delegate, or same as `onBehalfOf` otherwise\n', '   * @param onBehalfOf The address receiving the debt tokens\n', '   * @param amount The amount of debt being minted\n', '   * @param index The variable debt index of the reserve\n', '   * @return `true` if the the previous balance of the user is 0\n', '   **/\n', '  function mint(\n', '    address user,\n', '    address onBehalfOf,\n', '    uint256 amount,\n', '    uint256 index\n', '  ) external override onlyLendingPool returns (bool) {\n', '    if (user != onBehalfOf) {\n', '      _decreaseBorrowAllowance(onBehalfOf, user, amount);\n', '    }\n', '\n', '    uint256 previousBalance = super.balanceOf(onBehalfOf);\n', '    uint256 amountScaled = amount.rayDiv(index);\n', '    require(amountScaled != 0, Errors.CT_INVALID_MINT_AMOUNT);\n', '\n', '    _mint(onBehalfOf, amountScaled);\n', '\n', '    emit Transfer(address(0), onBehalfOf, amount);\n', '    emit Mint(user, onBehalfOf, amount, index);\n', '\n', '    return previousBalance == 0;\n', '  }\n', '\n', '  /**\n', '   * @dev Burns user variable debt\n', '   * - Only callable by the LendingPool\n', '   * @param user The user whose debt is getting burned\n', '   * @param amount The amount getting burned\n', '   * @param index The variable debt index of the reserve\n', '   **/\n', '  function burn(\n', '    address user,\n', '    uint256 amount,\n', '    uint256 index\n', '  ) external override onlyLendingPool {\n', '    uint256 amountScaled = amount.rayDiv(index);\n', '    require(amountScaled != 0, Errors.CT_INVALID_BURN_AMOUNT);\n', '\n', '    _burn(user, amountScaled);\n', '\n', '    emit Transfer(user, address(0), amount);\n', '    emit Burn(user, amount, index);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the principal debt balance of the user from\n', '   * @return The debt balance of the user since the last burn/mint action\n', '   **/\n', '  function scaledBalanceOf(address user) public view virtual override returns (uint256) {\n', '    return super.balanceOf(user);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the total supply of the variable debt token. Represents the total debt accrued by the users\n', '   * @return The total supply\n', '   **/\n', '  function totalSupply() public view virtual override returns (uint256) {\n', '    return\n', '      super.totalSupply().rayMul(POOL.getReserveNormalizedVariableDebt(UNDERLYING_ASSET_ADDRESS));\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)\n', '   * @return the scaled total supply\n', '   **/\n', '  function scaledTotalSupply() public view virtual override returns (uint256) {\n', '    return super.totalSupply();\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the principal balance of the user and principal total supply.\n', '   * @param user The address of the user\n', '   * @return The principal balance of the user\n', '   * @return The principal total supply\n', '   **/\n', '  function getScaledUserBalanceAndSupply(address user)\n', '    external\n', '    view\n', '    override\n', '    returns (uint256, uint256)\n', '  {\n', '    return (super.balanceOf(user), super.totalSupply());\n', '  }\n', '}']