['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-01\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-21\n', '*/\n', '\n', 'pragma solidity 0.4.24;\n', '    \n', '    \n', '    /**\n', '     * @title SafeMath\n', '     * @dev Math operations with safety checks that revert on error\n', '     */\n', '    library SafeMath {\n', '    \n', '      /**\n', '      * @dev Multiplies two numbers, reverts on overflow.\n', '      */\n', '      function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also SATOed.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '          return 0;\n', '        }\n', '    \n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '    \n', '        return c;\n', '      }\n', '    \n', '      /**\n', '      * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '      */\n', '      function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    \n', '        return c;\n', '      }\n', '    \n', '      /**\n', '      * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '      */\n', '      function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '    \n', '        return c;\n', '      }\n', '    \n', '      /**\n', '      * @dev Adds two numbers, reverts on overflow.\n', '      */\n', '      function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '    \n', '        return c;\n', '      }\n', '    \n', '      /**\n', '      * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '      * reverts when dividing by zero.\n', '      */\n', '      function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '      }\n', '    }\n', '    \n', '    /**\n', '     * @title Initializable\n', '     *\n', '     * @dev Helper contract to support initializer functions. To use it, replace\n', '     * the constructor with a function that has the `initializer` modifier.\n', '     * WARNING: Unlike constructors, initializer functions must be manually\n', '     * invoked. This applies both to deploying an Initializable contract, as well\n', '     * as extending an Initializable contract via inheritance.\n', '     * WARNING: When used with inheritance, manual care must be taken to not invoke\n', '     * a parent initializer twice, or ensure that all initializers are idempotent,\n', '     * because this is not dealt with automatically as with constructors.\n', '     */\n', '    contract Initializable {\n', '    \n', '      /**\n', '       * @dev Indicates that the contract has been initialized.\n', '       */\n', '      bool private initialized;\n', '    \n', '      /**\n', '       * @dev Indicates that the contract is in the process of being initialized.\n', '       */\n', '      bool private initializing;\n', '    \n', '      /**\n', '       * @dev Modifier to use in the initializer function of a contract.\n', '       */\n', '      modifier initializer() {\n', '        require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '    \n', '        bool wasInitializing = initializing;\n', '        initializing = true;\n', '        initialized = true;\n', '    \n', '        _;\n', '    \n', '        initializing = wasInitializing;\n', '      }\n', '    \n', '      /// @dev Returns true if and only if the function is running in the constructor\n', '      function isConstructor() private view returns (bool) {\n', '        // extcodesize checks the size of the code stored in an address, and\n', '        // address returns the current address. Since the code is still not\n', '        // deployed when running a constructor, any checks on its code size will\n', '        // yield zero, making it an effective way to detect if a contract is\n', '        // under construction or not.\n', '        uint256 cs;\n', '        assembly { cs := extcodesize(address) }\n', '        return cs == 0;\n', '      }\n', '    \n', '      // Reserved storage space to allow for layout changes in the future.\n', '      uint256[50] private ______gap;\n', '    }\n', '    \n', '    /**\n', '     * @title Ownable\n', '     * @dev The Ownable contract has an owner address, and provides basic authorization control\n', '     * functions, this simplifies the implementation of "user permissions".\n', '     */\n', '    contract Ownable is Initializable {\n', '      address private _owner;\n', '    \n', '    \n', '      event OwnershipRenounced(address indexed previousOwner);\n', '      event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '      );\n', '    \n', '    \n', '      /**\n', '       * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '       * account.\n', '       */\n', '      function initialize(address sender) public initializer {\n', '        _owner = sender;\n', '      }\n', '    \n', '      /**\n', '       * @return the address of the owner.\n', '       */\n', '      function owner() public view returns(address) {\n', '        return _owner;\n', '      }\n', '    \n', '      /**\n', '       * @dev Throws if called by any account other than the owner.\n', '       */\n', '      modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '      }\n', '    \n', '      /**\n', '       * @return true if `msg.sender` is the owner of the contract.\n', '       */\n', '      function isOwner() public view returns(bool) {\n', '        return msg.sender == _owner;\n', '      }\n', '    \n', '      /**\n', '       * @dev Allows the current owner to relinquish control of the contract.\n', '       * @notice Renouncing to ownership will leave the contract without an owner.\n', '       * It will not be possible to call the functions with the `onlyOwner`\n', '       * modifier anymore.\n', '       */\n', '      function renounceOwnership() public onlyOwner {\n', '        emit OwnershipRenounced(_owner);\n', '        _owner = address(0);\n', '      }\n', '    \n', '      /**\n', '       * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '       * @param newOwner The address to transfer ownership to.\n', '       */\n', '      function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '      }\n', '    \n', '      /**\n', '       * @dev Transfers control of the contract to a newOwner.\n', '       * @param newOwner The address to transfer ownership to.\n', '       */\n', '      function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '      }\n', '    \n', '      uint256[50] private ______gap;\n', '    }\n', '    \n', '    /**\n', '     * @title ERC20 interface\n', '     * @dev see https://github.com/ethereum/EIPs/issues/20\n', '     */\n', '    interface IERC20 {\n', '      function totalSupply() external view returns (uint256);\n', '    \n', '      function balanceOf(address who) external view returns (uint256);\n', '    \n', '      function allowance(address owner, address spender)\n', '        external view returns (uint256);\n', '    \n', '      function transfer(address to, uint256 value) external returns (bool);\n', '    \n', '      function approve(address spender, uint256 value)\n', '        external returns (bool);\n', '    \n', '      function transferFrom(address from, address to, uint256 value)\n', '        external returns (bool);\n', '    \n', '      event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 value\n', '      );\n', '    \n', '      event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '      );\n', '    }\n', '    \n', '    /**\n', '     * @title ERC20Detailed token\n', '     * @dev The decimals are only for visualization purposes.\n', '     * All the operations are done using the smallest and indivisible token unit,\n', '     * just as on Ethereum all the operations are done in wei.\n', '     */\n', '    contract ERC20Detailed is Initializable, IERC20 {\n', '      string private _name;\n', '      string private _symbol;\n', '      uint8 private _decimals;\n', '    \n', '      function initialize(string name, string symbol, uint8 decimals) internal initializer {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '      }\n', '    \n', '      /**\n', '       * @return the name of the token.\n', '       */\n', '      function name() public view returns(string) {\n', '        return _name;\n', '      }\n', '    \n', '      /**\n', '       * @return the symbol of the token.\n', '       */\n', '      function symbol() public view returns(string) {\n', '        return _symbol;\n', '      }\n', '    \n', '      /**\n', '       * @return the number of decimals of the token.\n', '       */\n', '      function decimals() public view returns(uint8) {\n', '        return _decimals;\n', '      }\n', '    \n', '      uint256[50] private ______gap;\n', '    }\n', '    \n', '    /*\n', '    MIT License\n', '    \n', '    Copyright (c) 2018 requestnetwork\n', '    Copyright (c) 2018 SATOs, Inc.\n', '    \n', '    Permission is hereby granted, free of charge, to any person obtaining a copy\n', '    of this software and associated documentation files (the "Software"), to deal\n', '    in the Software without restriction, including without limitation the rights\n', '    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', '    copies of the Software, and to permit persons to whom the Software is\n', '    furnished to do so, subject to the following conditions:\n', '    \n', '    The above copyright notice and this permission notice shall be included in all\n', '    copies or substantial portions of the Software.\n', '    \n', '    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', '    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', '    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', '    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', '    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', '    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', '    SOFTWARE.\n', '    */\n', '    /**\n', '     * @title SafeMathInt\n', '     * @dev Math operations for int256 with overflow safety checks.\n', '     */\n', '    library SafeMathInt {\n', '        int256 private constant MIN_INT256 = int256(1) << 255;\n', '        int256 private constant MAX_INT256 = ~(int256(1) << 255);\n', '    \n', '        /**\n', '         * @dev Multiplies two int256 variables and fails on overflow.\n', '         */\n', '        function mul(int256 a, int256 b)\n', '            internal\n', '            pure\n', '            returns (int256)\n', '        {\n', '            int256 c = a * b;\n', '    \n', '            // Detect overflow when multiplying MIN_INT256 with -1\n', '            require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\n', '            require((b == 0) || (c / b == a));\n', '            return c;\n', '        }\n', '    \n', '        /**\n', '         * @dev Division of two int256 variables and fails on overflow.\n', '         */\n', '        function div(int256 a, int256 b)\n', '            internal\n', '            pure\n', '            returns (int256)\n', '        {\n', '            // Prevent overflow when dividing MIN_INT256 by -1\n', '            require(b != -1 || a != MIN_INT256);\n', '    \n', '            // Solidity already throws when dividing by 0.\n', '            return a / b;\n', '        }\n', '    \n', '        /**\n', '         * @dev Subtracts two int256 variables and fails on overflow.\n', '         */\n', '        function sub(int256 a, int256 b)\n', '            internal\n', '            pure\n', '            returns (int256)\n', '        {\n', '            int256 c = a - b;\n', '            require((b >= 0 && c <= a) || (b < 0 && c > a));\n', '            return c;\n', '        }\n', '    \n', '        /**\n', '         * @dev Adds two int256 variables and fails on overflow.\n', '         */\n', '        function add(int256 a, int256 b)\n', '            internal\n', '            pure\n', '            returns (int256)\n', '        {\n', '            int256 c = a + b;\n', '            require((b >= 0 && c >= a) || (b < 0 && c < a));\n', '            return c;\n', '        }\n', '    \n', '        /**\n', '         * @dev Converts to absolute value, and fails on overflow.\n', '         */\n', '        function abs(int256 a)\n', '            internal\n', '            pure\n', '            returns (int256)\n', '        {\n', '            require(a != MIN_INT256);\n', '            return a < 0 ? -a : a;\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * @title SATO ERC20 token\n', '     * @dev This is part of an implementation of the SATO Ideal Money protocol.\n', '     *      SATO is a normal ERC20 token, but its supply can be adjusted by splitting and\n', '     *      combining tokens proportionally across all wallets.\n', '     *\n', "     *      SATO balances are internally represented with a hidden denomination, 'gons'.\n", '     *      We support splitting the currency in expansion and combining the currency on contraction by\n', "     *      changing the exchange rate between the hidden 'gons' and the public 'SATOs'.\n", '     */\n', '    contract SATO is ERC20Detailed, Ownable {\n', '        // PLEASE READ BEFORE CHANGING ANY ACCOUNTING OR MATH\n', '        // Anytime there is division, there is a risk of numerical instability from rounding errors. In\n', '        // order to minimize this risk, we adhere to the following guidelines:\n', '        // 1) The conversion rate adopted is the number of gons that equals 1 SATO.\n', '        //    The inverse rate must not be used--TOTAL_GONS is always the numerator and _totalSupply is\n', '        //    always the denominator. (i.e. If you want to convert gons to SATOs instead of\n', '        //    multiplying by the inverse rate, you should divide by the normal rate)\n', '        // 2) Gon balances converted into SATOs are always rounded down (truncated).\n', '        //\n', '        // We make the following guarantees:\n', "        // - If address 'A' transfers x SATOs to address 'B'. A's resulting external balance will\n", "        //   be decreased by precisely x SATOs, and B's external balance will be precisely\n", '        //   increased by x SATOs.\n', '        //\n', '        // We do not guarantee that the sum of all balances equals the result of calling totalSupply().\n', "        // This is because, for any conversion function 'f()' that has non-zero rounding error,\n", '        // f(x0) + f(x1) + ... + f(xn) is not always equal to f(x0 + x1 + ... xn).\n', '        using SafeMath for uint256;\n', '        using SafeMathInt for int256;\n', '    \n', '        event LogRebase(uint256 indexed epoch, uint256 totalSupply);\n', '        event LogRebasePaused(bool paused);\n', '        event LogTokenPaused(bool paused);\n', '        event LogSATOPolicyUpdated(address SATOPolicy);\n', '    \n', '        // Used for authentication\n', '        address public SATOPolicy;\n', '    \n', '        modifier onlySATOPolicy() {\n', '            require(msg.sender == SATOPolicy);\n', '            _;\n', '        }\n', '    \n', '        // Precautionary emergency controls.\n', '        bool public rebasePaused;\n', '        bool public tokenPaused;\n', '    \n', '        modifier whenRebaseNotPaused() {\n', '            require(!rebasePaused);\n', '            _;\n', '        }\n', '    \n', '        modifier whenTokenNotPaused() {\n', '            require(!tokenPaused);\n', '            _;\n', '        }\n', '    \n', '        modifier validRecipient(address to) {\n', '            require(to != address(0x0));\n', '            require(to != address(this));\n', '            _;\n', '        }\n', '    \n', '        uint256 private constant DECIMALS = 18;\n', '        uint256 private constant MAX_UINT256 = ~uint256(0);\n', '        uint256 private constant INITIAL_SATO_SUPPLY = 5000000 * 10**DECIMALS;\n', '    \n', '        // TOTAL_GONS is a multiple of INITIAL_SATO_SUPPLY so that _gonsPerFragment is an integer.\n', '        // Use the highest value that fits in a uint256 for max granularity.\n', '        uint256 private constant TOTAL_GONS = MAX_UINT256 -\n', '            (MAX_UINT256 % INITIAL_SATO_SUPPLY);\n', '    \n', '        // MAX_SUPPLY = maximum integer < (sqrt(4*TOTAL_GONS + 1) - 1) / 2\n', '        uint256 private constant MAX_SUPPLY = ~uint128(0); // (2^128) - 1\n', '    \n', '        uint256 private _totalSupply;\n', '        uint256 private _gonsPerFragment;\n', '        mapping(address => uint256) private _gonBalances;\n', '    \n', '        // This is denominated in SATOs, because the gons-SATOs conversion might change before\n', "        // it's fully paid.\n", '        mapping(address => mapping(address => uint256)) private _allowedSATOs;\n', '    \n', '        /**\n', '         * @param SATOPolicy_ The address of the SATO policy contract to use for authentication.\n', '         */\n', '        function setSATOPolicy(address SATOPolicy_) external onlyOwner {\n', '            SATOPolicy = SATOPolicy_;\n', '            emit LogSATOPolicyUpdated(SATOPolicy_);\n', '        }\n', '    \n', '        /**\n', '         * @dev Pauses or unpauses the execution of rebase operations.\n', '         * @param paused Pauses rebase operations if this is true.\n', '         */\n', '        function setRebasePaused(bool paused) external onlyOwner {\n', '            rebasePaused = paused;\n', '            emit LogRebasePaused(paused);\n', '        }\n', '    \n', '        /**\n', '         * @dev Pauses or unpauses execution of ERC-20 transactions.\n', '         * @param paused Pauses ERC-20 transactions if this is true.\n', '         */\n', '        function setTokenPaused(bool paused) external onlyOwner {\n', '            tokenPaused = paused;\n', '            emit LogTokenPaused(paused);\n', '        }\n', '    \n', '        /**\n', '         * @dev Notifies SATOs contract about a new rebase cycle.\n', '         * @param supplyDelta The number of new SATO tokens to add into circulation via expansion.\n', '         * @return The total number of SATOs after the supply adjustment.\n', '         */\n', '        function rebase(uint256 epoch, int256 supplyDelta)\n', '            external\n', '            onlySATOPolicy\n', '            whenRebaseNotPaused\n', '            returns (uint256)\n', '        {\n', '            if (supplyDelta == 0) {\n', '                emit LogRebase(epoch, _totalSupply);\n', '                return _totalSupply;\n', '            }\n', '    \n', '            if (supplyDelta < 0) {\n', '                _totalSupply = _totalSupply.sub(uint256(supplyDelta.abs()));\n', '            } else {\n', '                _totalSupply = _totalSupply.add(uint256(supplyDelta));\n', '            }\n', '    \n', '            if (_totalSupply > MAX_SUPPLY) {\n', '                _totalSupply = MAX_SUPPLY;\n', '            }\n', '    \n', '            _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\n', '    \n', '            // From this point forward, _gonsPerFragment is taken as the source of truth.\n', '            // We recalculate a new _totalSupply to be in agreement with the _gonsPerFragment\n', '            // conversion rate.\n', '            // This means our applied supplyDelta can deviate from the requested supplyDelta,\n', '            // but this deviation is guaranteed to be < (_totalSupply^2)/(TOTAL_GONS - _totalSupply).\n', '            //\n', '            // In the case of _totalSupply <= MAX_UINT128 (our current supply cap), this\n', '            // deviation is guaranteed to be < 1, so we can omit this step. If the supply cap is\n', '            // ever increased, it must be re-included.\n', '            // _totalSupply = TOTAL_GONS.div(_gonsPerFragment)\n', '    \n', '            emit LogRebase(epoch, _totalSupply);\n', '            return _totalSupply;\n', '        }\n', '    \n', '        function initialize(address owner_) public initializer {\n', '            ERC20Detailed.initialize("Super Algorithmic Token", "SATO", uint8(DECIMALS));\n', '            Ownable.initialize(owner_);\n', '    \n', '            rebasePaused = false;\n', '            tokenPaused = false;\n', '    \n', '            _totalSupply = INITIAL_SATO_SUPPLY;\n', '            _gonBalances[owner_] = TOTAL_GONS;\n', '            _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\n', '    \n', '            emit Transfer(address(0x0), owner_, _totalSupply);\n', '        }\n', '    \n', '        /**\n', '         * @return The total number of SATOs.\n', '         */\n', '        function totalSupply() public view returns (uint256) {\n', '            return _totalSupply;\n', '        }\n', '    \n', '        /**\n', '         * @param who The address to query.\n', '         * @return The balance of the specified address.\n', '         */\n', '        function balanceOf(address who) public view returns (uint256) {\n', '            return _gonBalances[who].div(_gonsPerFragment);\n', '        }\n', '    \n', '        /**\n', '         * @dev Transfer tokens to a specified address.\n', '         * @param to The address to transfer to.\n', '         * @param value The amount to be transferred.\n', '         * @return True on success, false otherwise.\n', '         */\n', '        function transfer(address to, uint256 value)\n', '            public\n', '            validRecipient(to)\n', '            whenTokenNotPaused\n', '            returns (bool)\n', '        {\n', '            uint256 gonValue = value.mul(_gonsPerFragment);\n', '            _gonBalances[msg.sender] = _gonBalances[msg.sender].sub(gonValue);\n', '            _gonBalances[to] = _gonBalances[to].add(gonValue);\n', '            emit Transfer(msg.sender, to, value);\n', '            return true;\n', '        }\n', '    \n', '        /**\n', '         * @dev Function to check the amount of tokens that an owner has allowed to a spender.\n', '         * @param owner_ The address which owns the funds.\n', '         * @param spender The address which will spend the funds.\n', '         * @return The number of tokens still available for the spender.\n', '         */\n', '        function allowance(address owner_, address spender)\n', '            public\n', '            view\n', '            returns (uint256)\n', '        {\n', '            return _allowedSATOs[owner_][spender];\n', '        }\n', '    \n', '        /**\n', '         * @dev Transfer tokens from one address to another.\n', '         * @param from The address you want to send tokens from.\n', '         * @param to The address you want to transfer to.\n', '         * @param value The amount of tokens to be transferred.\n', '         */\n', '        function transferFrom(\n', '            address from,\n', '            address to,\n', '            uint256 value\n', '        ) public validRecipient(to) whenTokenNotPaused returns (bool) {\n', '            _allowedSATOs[from][msg.sender] = _allowedSATOs[from][msg\n', '                .sender]\n', '                .sub(value);\n', '    \n', '            uint256 gonValue = value.mul(_gonsPerFragment);\n', '            _gonBalances[from] = _gonBalances[from].sub(gonValue);\n', '            _gonBalances[to] = _gonBalances[to].add(gonValue);\n', '            emit Transfer(from, to, value);\n', '    \n', '            return true;\n', '        }\n', '    \n', '        /**\n', '         * @dev Approve the passed address to spend the specified amount of tokens on behalf of\n', '         * msg.sender. This method is included for ERC20 compatibility.\n', '         * increaseAllowance and decreaseAllowance should be used instead.\n', '         * Changing an allowance with this method brings the risk that someone may transfer both\n', '         * the old and the new allowance - if they are both greater than zero - if a transfer\n', '         * transaction is mined before the later approve() call is mined.\n', '         *\n', '         * @param spender The address which will spend the funds.\n', '         * @param value The amount of tokens to be spent.\n', '         */\n', '        function approve(address spender, uint256 value)\n', '            public\n', '            whenTokenNotPaused\n', '            returns (bool)\n', '        {\n', '            _allowedSATOs[msg.sender][spender] = value;\n', '            emit Approval(msg.sender, spender, value);\n', '            return true;\n', '        }\n', '    \n', '        /**\n', '         * @dev Increase the amount of tokens that an owner has allowed to a spender.\n', '         * This method should be used instead of approve() to avoid the double approval vulnerability\n', '         * described above.\n', '         * @param spender The address which will spend the funds.\n', '         * @param addedValue The amount of tokens to increase the allowance by.\n', '         */\n', '        function increaseAllowance(address spender, uint256 addedValue)\n', '            public\n', '            whenTokenNotPaused\n', '            returns (bool)\n', '        {\n', '            _allowedSATOs[msg.sender][spender] = _allowedSATOs[msg\n', '                .sender][spender]\n', '                .add(addedValue);\n', '            emit Approval(\n', '                msg.sender,\n', '                spender,\n', '                _allowedSATOs[msg.sender][spender]\n', '            );\n', '            return true;\n', '        }\n', '    \n', '        /**\n', '         * @dev Decrease the amount of tokens that an owner has allowed to a spender.\n', '         *\n', '         * @param spender The address which will spend the funds.\n', '         * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '         */\n', '        function decreaseAllowance(address spender, uint256 subtractedValue)\n', '            public\n', '            whenTokenNotPaused\n', '            returns (bool)\n', '        {\n', '            uint256 oldValue = _allowedSATOs[msg.sender][spender];\n', '            if (subtractedValue >= oldValue) {\n', '                _allowedSATOs[msg.sender][spender] = 0;\n', '            } else {\n', '                _allowedSATOs[msg.sender][spender] = oldValue.sub(\n', '                    subtractedValue\n', '                );\n', '            }\n', '            emit Approval(\n', '                msg.sender,\n', '                spender,\n', '                _allowedSATOs[msg.sender][spender]\n', '            );\n', '            return true;\n', '        }\n', '    }']