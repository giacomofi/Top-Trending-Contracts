['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-02\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.5.17;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function decimals() external view returns (uint);\n', '    function name() external view returns (string memory);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != 0x0 && codehash != accountHash);\n', '    }\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'interface Controller {\n', '    function vaults(address) external view returns (address);\n', '    function rewards() external view returns (address);\n', '}\n', '\n', '\n', 'interface UniswapRouter {\n', '    function swapExactTokensForTokens(uint, uint, address[] calldata, address, uint) external;\n', '}\n', '\n', 'interface WETH {\n', '    function deposit() external payable;\n', '    function withdraw(uint wad) external;\n', '    event Deposit(address indexed dst, uint wad);\n', '    event Withdrawal(address indexed src, uint wad);\n', '}\n', '\n', 'interface ICurveFi {\n', '    function add_liquidity(\n', '        uint256[2] calldata amounts,\n', '        uint256 min_mint_amount\n', '    ) external payable;\n', '    function remove_liquidity_one_coin(\n', '        uint256 _token_amount,\n', '        int128 i,\n', '        uint256 min_amount\n', '    ) external;\n', '    function get_virtual_price() external view returns (uint256);\n', '}\n', '\n', 'interface Gauge {\n', '    function deposit(uint256) external;\n', '    function balanceOf(address) external view returns (uint256);\n', '    function withdraw(uint256) external;\n', '    function integrate_fraction(address) external view returns(uint256);\n', '}\n', '\n', 'interface Mintr {\n', '    function mint(address) external;\n', '    function minted(address,address) external view returns(uint256);\n', '}\n', '\n', 'contract StrategyETHCurve {\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '    using SafeMath for uint256;\n', '\n', '    address constant public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n', '    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n', '\taddress constant public bt = address(0x76c5449F4950f6338A393F53CdA8b53B0cd3Ca3a);\n', '\n', '    address constant public want = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);  //weth\n', '\n', '    address constant public eCRVPool = address(0xc5424B857f758E906013F3555Dad202e4bdB4567);\n', '    address constant public eCRVToken = address(0xA3D87FffcE63B53E0d54fAa1cc983B7eB0b74A9c);\n', '\n', '    address constant public eCRVGauge = address(0x3C0FFFF15EA30C35d7A85B85c0782D6c94e1d238);\n', '\n', '    address constant public CRVMinter = address(0xd061D61a4d941c39E5453435B6345Dc261C2fcE0);\n', '    address constant public CRV = address(0xD533a949740bb3306d119CC777fa900bA034cd52);\n', '\n', '    address public governance;\n', '    address public controller;\n', '    uint256 public redeliverynum = 100 * 1e18;\n', '\n', '    uint256 public constant DENOMINATOR = 10000;\n', '    uint256 public slip = 60;\n', '\tuint256 public depositLastPrice;\n', '\tbool public withdrawSlipCheck = true;\n', '\n', '    address[] public swap2TokenRouting;\n', '    address[] public swap2BTRouting;\n', '\n', '    modifier onlyController {\n', '        require(msg.sender == controller, "!controller");\n', '        _;\n', '    }\n', '\n', '    modifier isAuthorized() {\n', '        require(msg.sender == governance || msg.sender == controller || msg.sender == address(this), "!authorized");\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        governance = tx.origin;\n', '        controller = 0x5C6d3Cb5612b551452B3E9b48c920559634510D4;\n', '\t\tswap2BTRouting = [CRV,weth,bt];\n', '        swap2TokenRouting = [CRV,weth];\n', '\n', '        IERC20(CRV).approve(unirouter, uint(-1));\n', '    }\n', '\n', '    function () external payable {\n', '    }\n', '\n', '    function deposit() public isAuthorized{\n', '\t\tuint _want = IERC20(want).balanceOf(address(this));\n', '        require(_want > 0,"WETH is 0");\n', '        WETH(address(weth)).withdraw(_want); //weth->eth\n', '        uint256[2] memory amounts = [_want,0];\n', '        uint256 v = _want.mul(1e18).div(ICurveFi(eCRVPool).get_virtual_price());\n', '        uint256 beforeCRV = IERC20(eCRVToken).balanceOf(address(this));\n', '        ICurveFi(eCRVPool).add_liquidity.value(_want)(amounts,v.mul(DENOMINATOR.sub(slip)).div(DENOMINATOR));\n', '        uint256 _eCRV = IERC20(eCRVToken).balanceOf(address(this));\n', '        depositLastPrice = _want.mul(1e18).div(_eCRV.sub(beforeCRV));\n', '\n', '        if(_eCRV>0){\n', '            IERC20(eCRVToken).safeApprove(eCRVGauge, 0);\n', '            IERC20(eCRVToken).safeApprove(eCRVGauge, _eCRV);\n', '            Gauge(eCRVGauge).deposit(_eCRV);\n', '        }\n', '    }\n', '\n', '\n', '    // Withdraw partial funds, normally used with a vault withdrawal\n', '    function withdraw(uint _amount) external onlyController\n', '\t{\n', '\t\tuint amount = _withdraw(_amount);\n', '\t\taddress _vault = Controller(controller).vaults(address(want));\n', '        require(_vault != address(0), "!vault");\n', '        IERC20(want).safeTransfer(_vault, amount);\n', '\t}\n', '\n', '\n', '    function _withdraw(uint _amount) internal returns(uint) {\n', '\t\tuint amount = IERC20(want).balanceOf(address(this));\n', '\t\tif (amount < _amount) {\n', '            uint256 _eCRV = _withdrawSome(_amount.sub(amount));\n', '\t\t\tuint256 afterAmount = IERC20(want).balanceOf(address(this));\n', '\t\t\tif(withdrawSlipCheck){\n', '\t\t\t\tuint256 withdrawPrice = afterAmount.sub(amount).mul(1e18).div(_eCRV);\n', '\t\t\t\tif(withdrawPrice < depositLastPrice){\n', '\t\t\t\t\trequire(depositLastPrice.sub(withdrawPrice).mul(DENOMINATOR) < slip.mul(depositLastPrice),"slippage");\n', '\t\t\t\t}\n', '\t\t\t}\n', '\t\t\tamount = afterAmount;\n', '\t\t}\n', '        if (amount < _amount){\n', '            return amount;\n', '        }\n', '\t\treturn _amount;\n', '    }\n', '\n', '    function _withdrawSome(uint _amount) internal returns(uint256 _eCRV)\n', '    {\n', '        _eCRV = _amount.mul(1e18).div(ICurveFi(eCRVPool).get_virtual_price());\n', '        uint256 _eCRVBefore = IERC20(eCRVToken).balanceOf(address(this));\n', '        if(_eCRV>_eCRVBefore){\n', '            uint256 _eCRVGauge = _eCRV.sub(_eCRVBefore);\n', '            if(_eCRVGauge>IERC20(eCRVGauge).balanceOf(address(this))){\n', '                _eCRVGauge = IERC20(eCRVGauge).balanceOf(address(this));\n', '            }\n', '            Gauge(eCRVGauge).withdraw(_eCRVGauge);\n', '            _eCRV = IERC20(eCRVToken).balanceOf(address(this));\n', '        }\n', '        ICurveFi(eCRVPool).remove_liquidity_one_coin(_eCRV,0,_amount.mul(DENOMINATOR.sub(slip)).div(DENOMINATOR));\n', '        WETH(weth).deposit.value(address(this).balance)();\n', '    }\n', '\n', '\tfunction withdrawAll() external onlyController returns (uint balance) {\n', '\t\tbalance = _withdraw(balanceOf());\n', '\n', '\t\taddress _vault = Controller(controller).vaults(address(want));\n', '        require(_vault != address(0), "!vault");\n', '        IERC20(want).safeTransfer(_vault, balance);\n', '\t}\n', '\n', '\n', '\tfunction balanceOfwant() public view returns (uint256) {\n', '\t\treturn IERC20(want).balanceOf(address(this));\n', '\t}\n', '\n', '\tfunction balanceOfeCRV() public view returns (uint256) {\n', '        return IERC20(eCRVGauge).balanceOf(address(this)).add(IERC20(eCRVToken).balanceOf(address(this)));\n', '\t}\n', '\n', '    function balanceOfeCRV2ETH() public view returns(uint256) {\n', '        return balanceOfeCRV().mul(ICurveFi(eCRVPool).get_virtual_price()).div(1e18);\n', '    }\n', '\n', '    function balanceOf() public view returns (uint256) {\n', '        return balanceOfwant().add(balanceOfeCRV2ETH());\n', '    }\n', '\n', '    function getPending() public view returns (uint256) {\n', '        return Gauge(eCRVGauge).integrate_fraction(address(this)).sub(Mintr(CRVMinter).minted(address(this),eCRVGauge));\n', '    }\n', '\n', '\tfunction getCRV() public view returns(uint256)\n', '\t{\n', '\t\treturn IERC20(CRV).balanceOf(address(this));\n', '\t}\n', '\n', '    function harvest() public\n', '    {\n', '        Mintr(CRVMinter).mint(eCRVGauge);\n', '        redelivery();\n', '    }\n', '\n', '    function redelivery() internal {\n', '        uint256 reward = IERC20(CRV).balanceOf(address(this));\n', '        if (reward > redeliverynum)\n', '        {\n', '            uint256 _2weth = reward.mul(80).div(100); //80%\n', '\t\t    uint256 _2bt = reward.sub(_2weth);  //20%\n', '\t\t    UniswapRouter(unirouter).swapExactTokensForTokens(_2weth, 0, swap2TokenRouting, address(this), now.add(1800));\n', '\t\t    UniswapRouter(unirouter).swapExactTokensForTokens(_2bt, 0, swap2BTRouting, Controller(controller).rewards(), now.add(1800));\n', '\t\t}\n', '        deposit();\n', '    }\n', '\n', '\n', '    function setredeliverynum(uint256 value) public\n', '    {\n', '        require(msg.sender == governance, "!governance");\n', '        redeliverynum = value;\n', '    }\n', '\n', '    function setGovernance(address _governance) public {\n', '        require(msg.sender == governance, "!governance");\n', '        governance = _governance;\n', '    }\n', '\n', '    function setController(address _controller) external {\n', '        require(msg.sender == governance, "!governance");\n', '        controller = _controller;\n', '    }\n', '\n', '    function setSlip(uint256 _slip) external {\n', '        require(msg.sender == governance, "!governance");\n', '        require(_slip <= DENOMINATOR,"slip error");\n', '        slip = _slip;\n', '    }\n', '\tfunction setWithdrawSlipCheck(bool _check) external {\n', '        require(msg.sender == governance, "!governance");\n', '        withdrawSlipCheck = _check;\n', '    }\n', '}']