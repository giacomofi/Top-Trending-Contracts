['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-10\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.8.4;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations.\n", ' *\n', ' * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n', ' * now has built in overflow checking.\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            uint256 c = a + b;\n', '            if (c < a) return (false, 0);\n', '            return (true, c);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            if (b > a) return (false, 0);\n', '            return (true, a - b);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', "            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "            // benefit is lost if 'b' is also tested.\n", '            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '            if (a == 0) return (true, 0);\n', '            uint256 c = a * b;\n', '            if (c / a != b) return (false, 0);\n', '            return (true, c);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            if (b == 0) return (false, 0);\n', '            return (true, a / b);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            if (b == 0) return (false, 0);\n', '            return (true, a % b);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a + b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a * b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        unchecked {\n', '            require(b <= a, errorMessage);\n', '            return a - b;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        unchecked {\n', '            require(b > 0, errorMessage);\n', '            return a / b;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        unchecked {\n', '            require(b > 0, errorMessage);\n', '            return a % b;\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Implementation of the Owned Contract.\n', ' *\n', ' */\n', 'contract Owned is Context {\n', '\n', '    address public _owner;\n', '    address public _newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    modifier onlyOwner {\n', '        require(_msgSender() == _owner, "SaiphToken: Only Owner can perform this task");\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _newOwner = newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        require(_msgSender() == _newOwner, "SaiphToken: Token Contract Ownership has not been set for the address");\n', '        emit OwnershipTransferred(_owner, _newOwner);\n', '        _owner = _newOwner;\n', '        _newOwner = address(0);\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' */\n', 'contract SaiphToken is IERC20, Owned {\n', '\n', '    using SafeMath for uint256;\n', '    \n', '    mapping (address => uint256) private _balances; // Total balance per address (locked + unlocked)\n', '\n', '    mapping (address => uint256) private _unlockedTokens; // Unlocked Tokens, available for transfer\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    struct LockRecord {\n', '        uint256 lockingPeriod;\n', '        uint256 tokens;\n', '        bool isUnlocked;\n', '    }\n', '\n', '    mapping(address => LockRecord[]) private records; // Record of Locking periods and tokens per address\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    constructor( address owner )  {\n', '        _name = "SaiphToken";\n', '        _symbol = "SAIPH";\n', '        _decimals = 18;\n', '        _totalSupply = 1000000 * (10 ** 18);\n', '        _owner = owner;\n', '        _balances[_owner] = _totalSupply;\n', '        _unlockedTokens[_owner] = _totalSupply;\n', '        emit Transfer(address(0), _owner, _totalSupply );\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function unLockedBalanceOf(address account) public view returns (uint256) {\n', '        return _unlockedTokens[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public override returns (bool) {\n', '\n', '        _transfer(_msgSender(),recipient,amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public override returns (bool) {\n', '        \n', '        require(spender != address(0), "SaiphToken: approve to the zero address");\n', '\n', '        _allowances[_msgSender()][spender] = amount;\n', '        emit Approval(_msgSender(), spender, amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n', '\n', '        _transfer(sender,recipient,amount);\n', '\n', '        require(amount <= _allowances[sender][_msgSender()],"SaiphToken: Check for approved token count failed");\n', '        \n', '        _allowances[sender][_msgSender()] = _allowances[sender][_msgSender()].sub(amount);\n', '\n', '        emit Approval(sender, _msgSender(), _allowances[sender][_msgSender()]);\n', '\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) private {\n', '        \n', '        require(recipient != address(0),"SaiphToken: Cannot have recipient as zero address");\n', '        require(sender != address(0),"SaiphToken: Cannot have sender as zero address");\n', '        require(_balances[sender] >= amount,"SaiphToken: Insufficient Balance" );\n', '        require(_balances[recipient] + amount >= _balances[recipient],"SaiphToken: Balance check failed");\n', '        \n', '        // update the unlocked tokens based on time if required\n', '        _updateUnLockedTokens(sender, amount);\n', '        _unlockedTokens[sender] = _unlockedTokens[sender].sub(amount);\n', '        _unlockedTokens[recipient] = _unlockedTokens[recipient].add(amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount);\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        \n', '        emit Transfer(sender,recipient,amount);\n', '    }\n', '\n', '    function _transferLock(address sender, address recipient, uint256 amount) private {\n', '        \n', '        require(recipient != address(0),"SaiphToken: Cannot have recipient as zero address");\n', '        require(sender != address(0),"SaiphToken: Cannot have sender as zero address");\n', '        require(_balances[sender] >= amount,"SaiphToken: Insufficient Balance" );\n', '        require(_balances[recipient] + amount >= _balances[recipient],"SaiphToken: Balance check failed");\n', '\n', '        _balances[sender] = _balances[sender].sub(amount);\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '\n', '        _unlockedTokens[sender] = _unlockedTokens[sender].sub(amount);\n', '\n', '        emit Transfer(sender,recipient,amount);\n', '    }\n', '    \n', '     /**\n', '     * @dev Destroys `amount` tokens from the `account`.\n', '     *\n', '     * See {ERC20-_burn}.\n', '     */\n', '     \n', '    function burn(address account, uint256 amount) public onlyOwner {\n', '\n', '        require(account != address(0), "SaiphToken: burn from the zero address");\n', '\n', '        if( _balances[account] == _unlockedTokens[account]){\n', '            _unlockedTokens[account] = _unlockedTokens[account].sub(amount, "SaiphToken: burn amount exceeds balance");\n', '        }\n', '\n', '        _balances[account] = _balances[account].sub(amount, "SaiphToken: burn amount exceeds balance");\n', '\n', '        _totalSupply = _totalSupply.sub(amount);\n', '\n', '        emit Transfer(account, address(0), amount);\n', '\n', '        if(account != _msgSender()){\n', '            \n', '            require(amount <= _allowances[account][_msgSender()],"SaiphToken: Check for approved token count failed");\n', '\n', '            _allowances[account][_msgSender()] = _allowances[account][_msgSender()].sub(amount, "ERC20: burn amount exceeds allowance");\n', '            emit Approval(account, _msgSender(), _allowances[account][_msgSender()]);\n', '        }\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from token owner's _msgSender() to `to` _msgSender()\n", "    // - Owner's _msgSender() must have sufficient balance to transfer\n", '    // - 0 value transfers are allowed\n', '    // - takes in locking Period to lock the tokens to be used\n', '    // - if want to transfer without locking enter 0 in lockingPeriod argument \n', '    // ------------------------------------------------------------------------\n', '    function distributeTokens(address to, uint tokens, uint256 lockingPeriod) onlyOwner public returns (bool success) {\n', '        // if there is no lockingPeriod, add tokens to _unlockedTokens per address\n', '        if(lockingPeriod == 0)\n', '            _transfer(_msgSender(),to, tokens);\n', '        // if there is a lockingPeriod, add tokens to record mapping\n', '        else\n', '            _transferLock(_msgSender(),to, tokens);\n', '            _addRecord(to, tokens, lockingPeriod);\n', '        return true;\n', '    }\n', '        \n', '    // ------------------------------------------------------------------------\n', '    // Adds record of addresses with locking period and tokens to lock\n', '    // ------------------------------------------------------------------------\n', '    function _addRecord(address to, uint tokens, uint256 lockingPeriod) private {\n', '        records[to].push(LockRecord(lockingPeriod,tokens, false));\n', '    }\n', '        \n', '    // ------------------------------------------------------------------------\n', '    // Checks if there is required amount of unLockedTokens available\n', '    // ------------------------------------------------------------------------\n', '    function _updateUnLockedTokens(address _from, uint tokens) private returns (bool success) {\n', '        // if _unlockedTokens are greater than "tokens" of "to", initiate transfer\n', '        if(_unlockedTokens[_from] >= tokens){\n', '            return true;\n', '        }\n', '        // if _unlockedTokens are less than "tokens" of "to", update _unlockedTokens by checking record with "now" time\n', '        else{\n', '            _updateRecord(_from);\n', '            // check if _unlockedTokens are greater than "token" of "to", initiate transfer\n', '            if(_unlockedTokens[_from] >= tokens){\n', '                return true;\n', '            }\n', '            // otherwise revert\n', '            else{\n', '                revert("SaiphToken: Insufficient unlocked tokens");\n', '            }\n', '        }\n', '    }\n', '        \n', '    // ------------------------------------------------------------------------\n', '    // Unlocks the coins if lockingPeriod is expired\n', '    // ------------------------------------------------------------------------\n', '     function _updateRecord(address account) private returns (bool success){\n', '        LockRecord[] memory tempRecords = records[account];\n', '        uint256 unlockedTokenCount = 0;\n', '        for(uint256 i=0; i < tempRecords.length; i++){\n', '            if(tempRecords[i].lockingPeriod < block.timestamp && tempRecords[i].isUnlocked == false){\n', '                unlockedTokenCount = unlockedTokenCount.add(tempRecords[i].tokens);\n', '                tempRecords[i].isUnlocked = true;\n', '                records[account][i] = LockRecord(tempRecords[i].lockingPeriod, tempRecords[i].tokens, tempRecords[i].isUnlocked);\n', '            }\n', '        }\n', '        _unlockedTokens[account] = _unlockedTokens[account].add(unlockedTokenCount);\n', '        return true;\n', '    }        \n', '}']