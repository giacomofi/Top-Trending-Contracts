['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-13\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.6;\n', '\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return payable(msg.sender); // added payable\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; \n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', 'interface IERC20 {\n', '  \n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', ' \n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'library SafeMath {\n', '  \n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '\n', '   \n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '  \n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', 'library Address {\n', '   \n', '    function isContract(address account) internal view returns (bool) {\n', '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '  \n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            if (returndata.length > 0) {\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    constructor (string memory name_, string memory symbol_) {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _decimals = 18;\n', '    }\n', '\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', ' \n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '  \n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '\n', '\n', 'abstract contract ERC20Burnable is Context, ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    function burn(uint256 amount) public virtual {\n', '        _burn(_msgSender(), amount);\n', '    }\n', '\n', '    function burnFrom(address account, uint256 amount) public virtual {\n', '        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, "ERC20: burn amount exceeds allowance");\n', '\n', '        _approve(account, _msgSender(), decreasedAllowance);\n', '        _burn(account, amount);\n', '    }\n', '}\n', '\n', '\n', 'abstract contract ERC20Capped is ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 private _cap;\n', '\n', '    constructor (uint256 cap_) {\n', '        require(cap_ > 0, "ERC20Capped: cap is 0");\n', '        _cap = cap_;\n', '    }\n', '\n', '    function cap() public view returns (uint256) {\n', '        return _cap;\n', '    }\n', '\n', '   \n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\n', '        super._beforeTokenTransfer(from, to, amount);\n', '\n', '        if (from == address(0)) { // When minting tokens\n', '            require(totalSupply().add(amount) <= _cap, "ERC20Capped: cap exceeded");\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'interface IERC165 {\n', '  \n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '\n', 'interface IERC1363 is IERC20, IERC165 {\n', '   \n', '    function transferAndCall(address to, uint256 value) external returns (bool);\n', '\n', '    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n', '\n', '    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n', '\n', '    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n', '\n', '    function approveAndCall(address spender, uint256 value) external returns (bool);\n', '\n', '    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n', '}\n', '\n', '\n', 'interface IERC1363Receiver {\n', '    function onTransferReceived(address operator, address from, uint256 value, bytes calldata data) external returns (bytes4);\n', '}\n', '\n', 'interface IERC1363Spender {\n', '   \n', '    function onApprovalReceived(address owner, uint256 value, bytes calldata data) external returns (bytes4);\n', '}\n', '\n', 'library ERC165Checker {\n', '    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\n', '\n', '    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n', '\n', '    function supportsERC165(address account) internal view returns (bool) {\n', '        return _supportsERC165Interface(account, _INTERFACE_ID_ERC165) &&\n', '            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\n', '    }\n', '\n', '\n', '    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n', '        return supportsERC165(account) &&\n', '            _supportsERC165Interface(account, interfaceId);\n', '    }\n', '\n', '   \n', '    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n', '        if (!supportsERC165(account)) {\n', '            return false;\n', '        }\n', '\n', '        for (uint256 i = 0; i < interfaceIds.length; i++) {\n', '            if (!_supportsERC165Interface(account, interfaceIds[i])) {\n', '                return false;\n', '            }\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '   \n', '    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\n', '        (bool success, bool result) = _callERC165SupportsInterface(account, interfaceId);\n', '\n', '        return (success && result);\n', '    }\n', '\n', '    function _callERC165SupportsInterface(address account, bytes4 interfaceId)\n', '        private\n', '        view\n', '        returns (bool, bool)\n', '    {\n', '        bytes memory encodedParams = abi.encodeWithSelector(_INTERFACE_ID_ERC165, interfaceId);\n', '        (bool success, bytes memory result) = account.staticcall{ gas: 30000 }(encodedParams);\n', '        if (result.length < 32) return (false, false);\n', '        return (success, abi.decode(result, (bool)));\n', '    }\n', '}\n', '\n', '\n', 'abstract contract ERC165 is IERC165 {\n', '   \n', '    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n', '\n', '    mapping(bytes4 => bool) private _supportedInterfaces;\n', '\n', '    constructor () {\n', '        _registerInterface(_INTERFACE_ID_ERC165);\n', '    }\n', '\n', '  \n', '    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\n', '        return _supportedInterfaces[interfaceId];\n', '    }\n', '\n', '    function _registerInterface(bytes4 interfaceId) internal virtual {\n', '        require(interfaceId != 0xffffffff, "ERC165: invalid interface id");\n', '        _supportedInterfaces[interfaceId] = true;\n', '    }\n', '}\n', '\n', 'contract ERC1363 is ERC20, IERC1363, ERC165 {\n', '    using Address for address;\n', '\n', '    bytes4 internal constant _INTERFACE_ID_ERC1363_TRANSFER = 0x4bbee2df;\n', '\n', '    bytes4 internal constant _INTERFACE_ID_ERC1363_APPROVE = 0xfb9ec8ce;\n', '\n', '    bytes4 private constant _ERC1363_RECEIVED = 0x88a7ca5c;\n', '\n', '    bytes4 private constant _ERC1363_APPROVED = 0x7b04a2d0;\n', '\n', '    constructor (string memory name, string memory symbol) ERC20(name, symbol) {\n', '        _registerInterface(_INTERFACE_ID_ERC1363_TRANSFER);\n', '        _registerInterface(_INTERFACE_ID_ERC1363_APPROVE);\n', '    }\n', '\n', '    function transferAndCall(address to, uint256 value) public override returns (bool) {\n', '        return transferAndCall(to, value, "");\n', '    }\n', '\n', '    function transferAndCall(address to, uint256 value, bytes memory data) public override returns (bool) {\n', '        transfer(to, value);\n', '        require(_checkAndCallTransfer(_msgSender(), to, value, data), "ERC1363: _checkAndCallTransfer reverts");\n', '        return true;\n', '    }\n', '\n', '    function transferFromAndCall(address from, address to, uint256 value) public override returns (bool) {\n', '        return transferFromAndCall(from, to, value, "");\n', '    }\n', '\n', '    function transferFromAndCall(address from, address to, uint256 value, bytes memory data) public override returns (bool) {\n', '        transferFrom(from, to, value);\n', '        require(_checkAndCallTransfer(from, to, value, data), "ERC1363: _checkAndCallTransfer reverts");\n', '        return true;\n', '    }\n', '\n', '    function approveAndCall(address spender, uint256 value) public override returns (bool) {\n', '        return approveAndCall(spender, value, "");\n', '    }\n', '\n', '    function approveAndCall(address spender, uint256 value, bytes memory data) public override returns (bool) {\n', '        approve(spender, value);\n', '        require(_checkAndCallApprove(spender, value, data), "ERC1363: _checkAndCallApprove reverts");\n', '        return true;\n', '    }\n', '\n', '    function _checkAndCallTransfer(address from, address to, uint256 value, bytes memory data) internal returns (bool) {\n', '        if (!to.isContract()) {\n', '            return false;\n', '        }\n', '        bytes4 retval = IERC1363Receiver(to).onTransferReceived(\n', '            _msgSender(), from, value, data\n', '        );\n', '        return (retval == _ERC1363_RECEIVED);\n', '    }\n', '\n', '    function _checkAndCallApprove(address spender, uint256 value, bytes memory data) internal returns (bool) {\n', '        if (!spender.isContract()) {\n', '            return false;\n', '        }\n', '        bytes4 retval = IERC1363Spender(spender).onApprovalReceived(\n', '            _msgSender(), value, data\n', '        );\n', '        return (retval == _ERC1363_APPROVED);\n', '    }\n', '}\n', '\n', '\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', 'contract TokenRecover is Ownable {\n', '\n', '    function recoverERC20(address tokenAddress, uint256 tokenAmount) public onlyOwner {\n', '        IERC20(tokenAddress).transfer(owner(), tokenAmount);\n', '    }\n', '}\n', '\n', '\n', 'contract Frostic is ERC20Capped, ERC20Burnable, ERC1363, TokenRecover {\n', '\n', '    bool private _mintingFinished = false;\n', '\n', '  \n', '    event MintFinished();\n', '\n', '  \n', '    modifier canMint() {\n', '        require(!_mintingFinished, "Frostic: minting is finished");\n', '        _;\n', '    }\n', '\n', '    constructor (\n', '        string memory name,\n', '        string memory symbol,\n', '        uint8 decimals,\n', '        uint256 cap,\n', '        uint256 initialBalance\n', '    ) ERC1363(name, symbol) ERC20Capped(cap) payable {\n', '        _setupDecimals(decimals);\n', '\n', '        _mint(_msgSender(), initialBalance);\n', '    }\n', '\n', ' \n', '    function mintingFinished() public view returns (bool) {\n', '        return _mintingFinished;\n', '    }\n', '\n', '  \n', '    function mint(address to, uint256 value) public canMint onlyOwner {\n', '        _mint(to, value);\n', '    }\n', '\n', '    function finishMinting() public canMint onlyOwner {\n', '        _mintingFinished = true;\n', '\n', '        emit MintFinished();\n', '    }\n', '\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override(ERC20, ERC20Capped) {\n', '        super._beforeTokenTransfer(from, to, amount);\n', '    }\n', '}']