['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "./StandardToken.sol";\n', 'import "./SafeMath.sol";\n', '\n', 'contract CustomizeToken is StandardToken {\n', '\n', '    using SafeMath for uint256 ;\n', '      \n', '    string public name  ;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '    address owner;\n', '\n', '    // 事件，用来通知客户端代币被消耗\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '\n', '    constructor (uint256 initialSupply_, string memory name_, string memory symbol_) public {\n', '        totalSupply_ = initialSupply_ * 10 ** uint256(decimals);\n', '        balances[msg.sender] = totalSupply_;\n', '        name = name_;\n', '        symbol = symbol_;\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    function burn(uint256 _value) public returns (bool) {\n', '        assert(owner == msg.sender);\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '}']