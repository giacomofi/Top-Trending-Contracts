['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-09\n', '*/\n', '\n', 'pragma solidity ^0.5.17;\n', '\n', 'library SafeMath {\n', '  function safeMul(uint256 a, uint256 b) internal  pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b > 0);\n', '    uint256 c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '}\n', 'contract Niubi {\n', '    using SafeMath for uint256;\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    uint256 public totalSupply;\n', '\taddress public owner;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '\tmapping (address => uint256) public freezeOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Burn(address indexed from, uint256 value);\n', '    event Freeze(address indexed from, uint256 value);\n', '    event Unfreeze(address indexed from, uint256 value);\n', '\n', '    constructor() public {\n', '        uint256 initialSupply=100000000000000*1e18;\n', '        balanceOf[msg.sender] = initialSupply;             \n', '        totalSupply = initialSupply;                    \n', "        name = 'NIUB';                                \n", "        symbol = 'NIUB';                              \n", '        decimals = 18;                           \n', '\t\towner = msg.sender;\n', '    }\n', '\n', '\n', '    function transfer(address _to, uint256 _value) public {\n', '        require(_to!=address(0x0));                  \n', '        require(_value > 0);\n', '        require(balanceOf[msg.sender] >= _value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                     \n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                           \n', '        emit Transfer(msg.sender, _to, _value);                 \n', '    }\n', '\n', '\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '\t\trequire(_value>0);\n', '        allowance[msg.sender][_spender] = _value;\n', '        return true;\n', '    }\n', '       \n', '\n', '  \n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '         require(_to!=address(0x0));       \n', '      \trequire(_value>0);\n', '      \t\n', '\t    require(balanceOf[_from] >= _value);\n', '\t    require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '\t    require(_value <= allowance[_from][msg.sender]);\n', '        balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value);                          \n', '        balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value);                            \n', '        allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);\n', '        require(_value > 0);\n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                     \n', '        totalSupply = SafeMath.safeSub(totalSupply,_value);                               \n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\t\n', '\tfunction freeze(uint256 _value) public returns (bool success) {\n', '\t    require(balanceOf[msg.sender] >= _value);\n', '\t    require(_value > 0);\n', '        balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value);                      \n', '        freezeOf[msg.sender] = SafeMath.safeAdd(freezeOf[msg.sender], _value);                               \n', '        emit Freeze(msg.sender, _value);\n', '        return true;\n', '    }\n', '\t\n', '\tfunction unfreeze(uint256 _value) public returns (bool success) {\n', '\t    require(freezeOf[msg.sender] >= _value);\n', '\t    require(_value>0);\n', '        freezeOf[msg.sender] = SafeMath.safeSub(freezeOf[msg.sender], _value);                     \n', '\t\tbalanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], _value);\n', '        emit Unfreeze(msg.sender, _value);\n', '        return true;\n', '    }\n', '\t\n', '\n', '\tfunction() external payable {\n', '    }\n', '}']