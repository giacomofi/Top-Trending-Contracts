['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-13\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.8.6;\n', '\n', '// Sources flattened with hardhat v2.1.2 https://hardhat.org\n', '// NOTE: manually removed extraneous licence identifies and pragmas to accommodate Etherscan Verify & Publish\n', '\n', '// File @openzeppelin/contracts/token/ERC20/[email\xa0protected]\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// File contracts/DataTokenMigrator.sol\n', '\n', '\n', 'contract DataTokenMigrator { // is UpgradeAgent, see Crowdsale.sol\n', '\n', '    IERC20 public oldToken;\n', '    IERC20 public newToken;\n', '\n', '    constructor(IERC20 _oldToken, IERC20 _newToken) {\n', '        oldToken = _oldToken;\n', '        newToken = _newToken;\n', '    }\n', '\n', '    /**\n', '     * Everything below this comment is the DATA token UpgradeAgent interface.\n', '     * See https://etherscan.io/address/0x0cf0ee63788a0849fe5297f3407f701e122cc023#code\n', '     */\n', '\n', '    // See totalSupply at https://etherscan.io/address/0x0cf0ee63788a0849fe5297f3407f701e122cc023#readContract\n', '    uint256 public originalSupply = 987154514 ether;\n', '\n', '    /** UpgradeAgent Interface marker */\n', '    function isUpgradeAgent() public pure returns (bool) {\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @param _from token holder that called CrowdsaleToken.upgrade(_value)\n', '     * @param _value amount of tokens to upgrade, checked by the CrowdsaleToken\n', '     */\n', '    function upgradeFrom(address _from, uint256 _value) external {\n', '        require(\n', '            msg.sender == address(oldToken),\n', '            "Call not permitted, UpgradableToken only"\n', '        );\n', '        newToken.transfer(_from, _value);\n', '    }\n', '}']