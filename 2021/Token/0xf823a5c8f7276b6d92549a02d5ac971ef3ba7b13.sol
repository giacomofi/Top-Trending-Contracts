['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-01\n', '*/\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be aplied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * > Note: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/access/Authorizable.sol\n', '\n', 'pragma solidity ^0.5.8;\n', '\n', '\n', 'contract Authorizable is Ownable {\n', '\n', '    mapping(address => bool) private authorized;\n', '\n', '    modifier onlyAuthorized() {\n', '        require(authorized[msg.sender], "Authorizable: Address is not authorized");\n', '        _;\n', '    }\n', '\n', '    event AddressEnabled(address enabledAddress);\n', '    event AddressDisabled(address disabledAddress);\n', '\n', '    function enableAddress(address _address) public onlyOwner {\n', '        authorized[_address] = true;\n', '        emit AddressEnabled(_address);\n', '    }\n', '\n', '    function disableAddress(address _address) public onlyOwner {\n', '        authorized[_address] = false;\n', '        emit AddressDisabled(_address);\n', '    }\n', '\n', '    function isAuthorized(address _address) public view returns (bool) {\n', '        return authorized[_address];\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/access/TokenAccessList.sol\n', '\n', 'pragma solidity ^0.5.8;\n', '\n', '\n', 'contract TokenAccessList is Ownable {\n', '\n', '    string public identifier;\n', '    mapping(address => bool) private accessList;\n', '\n', '    event WalletEnabled(address indexed wallet);\n', '    event WalletDisabled(address indexed wallet);\n', '\n', '    constructor(string memory _identifier) public {\n', '        identifier = _identifier;\n', '    }\n', '\n', '    function enableWallet(address _wallet)\n', '        public\n', '        onlyOwner\n', '        {\n', '            require(_wallet != address(0), "Invalid wallet");\n', '            accessList[_wallet] = true;\n', '            emit WalletEnabled(_wallet);\n', '    }\n', '\n', '    function disableWallet(address _wallet)\n', '        public\n', '        onlyOwner\n', '        {\n', '            accessList[_wallet] = false;\n', '            emit WalletDisabled(_wallet);\n', '    }\n', '\n', '    function enableWalletList(address[] calldata _walletList)\n', '        external\n', '        onlyOwner {\n', '            for(uint i = 0; i < _walletList.length; i++) {\n', '                enableWallet(_walletList[i]);\n', '            }\n', '    }\n', '\n', '    function disableWalletList(address[] calldata _walletList)\n', '        external\n', '        onlyOwner {\n', '            for(uint i = 0; i < _walletList.length; i++) {\n', '                disableWallet(_walletList[i]);\n', '            }\n', '    }\n', '\n', '    function checkEnabled(address _wallet)\n', '        public\n', '        view\n', '        returns (bool) {\n', '            return _wallet == address(0) || accessList[_wallet];\n', '    }\n', '\n', '    function checkEnabledList(address _w1, address _w2, address _w3)\n', '        external\n', '        view\n', '        returns (bool) {\n', '            return checkEnabled(_w1)\n', '                && checkEnabled(_w2)\n', '                && checkEnabled(_w3);\n', '    }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see `ERC20Detailed`.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a `Transfer` event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when `approve` or `transferFrom` are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * > Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an `Approval` event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a `Transfer` event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to `approve`. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', ' * @dev Optional functions from the ERC20 standard.\n', ' */\n', 'contract ERC20Detailed is IERC20 {\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\n', '     * these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name, string memory symbol, uint8 decimals) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei.\n', '     *\n', '     * > Note that this information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * `IERC20.balanceOf` and `IERC20.transfer`.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, "SafeMath: division by zero");\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the `IERC20` interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using `_mint`.\n', ' * For a generic mechanism see `ERC20Mintable`.\n', ' *\n', ' * *For a detailed writeup see our guide [How to implement supply\n', ' * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See `IERC20.approve`.\n', ' */\n', 'contract ERC20 is IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    /**\n', '     * @dev See `IERC20.totalSupply`.\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See `IERC20.balanceOf`.\n', '     */\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See `IERC20.transfer`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(msg.sender, recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See `IERC20.allowance`.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See `IERC20.approve`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        _approve(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See `IERC20.transferFrom`.\n', '     *\n', '     * Emits an `Approval` event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of `ERC20`;\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `value`.\n', "     * - the caller must have allowance for `sender`'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to `approve` that can be used as a mitigation for\n', '     * problems described in `IERC20.approve`.\n', '     *\n', '     * Emits an `Approval` event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to `approve` that can be used as a mitigation for\n', '     * problems described in `IERC20.approve`.\n', '     *\n', '     * Emits an `Approval` event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to `transfer`, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a `Transfer` event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(amount);\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a `Transfer` event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '     /**\n', '     * @dev Destoys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a `Transfer` event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 value) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _totalSupply = _totalSupply.sub(value);\n', '        _balances[account] = _balances[account].sub(value);\n', '        emit Transfer(account, address(0), value);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an `Approval` event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 value) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = value;\n', '        emit Approval(owner, spender, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\n', "     * from the caller's allowance.\n", '     *\n', '     * See `_burn` and `_approve`.\n', '     */\n', '    function _burnFrom(address account, uint256 amount) internal {\n', '        _burn(account, amount);\n', '        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/access/Roles.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    /**\n', '     * @dev Give an account access to this role.\n', '     */\n', '    function add(Role storage role, address account) internal {\n', '        require(!has(role, account), "Roles: account already has role");\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '    /**\n', "     * @dev Remove an account's access to this role.\n", '     */\n', '    function remove(Role storage role, address account) internal {\n', '        require(has(role, account), "Roles: account does not have role");\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Check if an account has this role.\n', '     * @return bool\n', '     */\n', '    function has(Role storage role, address account) internal view returns (bool) {\n', '        require(account != address(0), "Roles: account is the zero address");\n', '        return role.bearer[account];\n', '    }\n', '}\n', '\n', '// File: contracts/access/roles/BurnerRole.sol\n', '\n', 'pragma solidity ^0.5.8;\n', '\n', '\n', 'contract BurnerRole {\n', '    using Roles for Roles.Role;\n', '\n', '    event BurnerAdded(address indexed account);\n', '    event BurnerRemoved(address indexed account);\n', '\n', '    Roles.Role private _burners;\n', '\n', '    constructor () internal {\n', '        _addBurner(msg.sender);\n', '    }\n', '\n', '    modifier onlyBurner() {\n', '        require(isBurner(msg.sender), "BurnerRole: caller does not have the Burner role");\n', '        _;\n', '    }\n', '\n', '    function isBurner(address account) public view returns (bool) {\n', '        return _burners.has(account);\n', '    }\n', '\n', '    function addBurner(address account) public onlyBurner {\n', '        _addBurner(account);\n', '    }\n', '\n', '    function renounceBurner() public onlyBurner {\n', '        _removeBurner(msg.sender);\n', '    }\n', '\n', '    function _addBurner(address account) internal {\n', '        _burners.add(account);\n', '        emit BurnerAdded(account);\n', '    }\n', '\n', '    function _removeBurner(address account) internal {\n', '        _burners.remove(account);\n', '        emit BurnerRemoved(account);\n', '    }\n', '}\n', '\n', '// File: contracts/tokens/ERC20BurnableAdmin.sol\n', '\n', 'pragma solidity ^0.5.8;\n', '\n', '\n', '\n', '/**\n', " * @dev Extension of `ERC20` allows a centralized owner to burn users' tokens\n", ' *\n', ' * At construction time, the deployer of the contract is the only burner.\n', ' */\n', 'contract ERC20BurnableAdmin is ERC20, BurnerRole {\n', '\n', '    event ForcedBurn(address requester, address wallet, uint256 value);\n', '\n', '    /**\n', '     * @dev new function to burn tokens from a centralized owner\n', '     * @param _who The address which will be burned.\n', '     * @param _value The amount of tokens to burn.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function forcedBurn(address _who, uint256 _value)\n', '        public\n', '        onlyBurner\n', '        returns (bool) {\n', '            _burn(_who, _value);\n', '            emit ForcedBurn(msg.sender, _who, _value);\n', '            return true;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/access/roles/PauserRole.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', 'contract PauserRole {\n', '    using Roles for Roles.Role;\n', '\n', '    event PauserAdded(address indexed account);\n', '    event PauserRemoved(address indexed account);\n', '\n', '    Roles.Role private _pausers;\n', '\n', '    constructor () internal {\n', '        _addPauser(msg.sender);\n', '    }\n', '\n', '    modifier onlyPauser() {\n', '        require(isPauser(msg.sender), "PauserRole: caller does not have the Pauser role");\n', '        _;\n', '    }\n', '\n', '    function isPauser(address account) public view returns (bool) {\n', '        return _pausers.has(account);\n', '    }\n', '\n', '    function addPauser(address account) public onlyPauser {\n', '        _addPauser(account);\n', '    }\n', '\n', '    function renouncePauser() public {\n', '        _removePauser(msg.sender);\n', '    }\n', '\n', '    function _addPauser(address account) internal {\n', '        _pausers.add(account);\n', '        emit PauserAdded(account);\n', '    }\n', '\n', '    function _removePauser(address account) internal {\n', '        _pausers.remove(account);\n', '        emit PauserRemoved(account);\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'contract Pausable is PauserRole {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by a pauser (`account`).\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by a pauser (`account`).\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\n', '     * to the deployer.\n', '     */\n', '    constructor () internal {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Called by a pauser to pause, triggers stopped state.\n', '     */\n', '    function pause() public onlyPauser whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Called by a pauser to unpause, returns to normal state.\n', '     */\n', '    function unpause() public onlyPauser whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(msg.sender);\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Pausable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev ERC20 modified with pausable transfers.\n', ' */\n', 'contract ERC20Pausable is ERC20, Pausable {\n', '    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n', '        return super.transfer(to, value);\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n', '        return super.approve(spender, value);\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool) {\n', '        return super.increaseAllowance(spender, addedValue);\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool) {\n', '        return super.decreaseAllowance(spender, subtractedValue);\n', '    }\n', '}\n', '\n', '// File: contracts/access/roles/CreatorRole.sol\n', '\n', 'pragma solidity ^0.5.8;\n', '\n', '\n', 'contract CreatorRole {\n', '    using Roles for Roles.Role;\n', '\n', '    event CreatorAdded(address indexed account);\n', '    event CreatorRemoved(address indexed account);\n', '\n', '    Roles.Role private _creators;\n', '\n', '    constructor () internal {\n', '        _addCreator(msg.sender);\n', '    }\n', '\n', '    modifier onlyCreator() {\n', '        require(isCreator(msg.sender), "CreatorRole: caller does not have the Creator role");\n', '        _;\n', '    }\n', '\n', '    function isCreator(address account) public view returns (bool) {\n', '        return _creators.has(account);\n', '    }\n', '\n', '    function _addCreator(address account) internal {\n', '        _creators.add(account);\n', '        emit CreatorAdded(account);\n', '    }\n', '\n', '    function _removeCreator(address account) internal {\n', '        _creators.remove(account);\n', '        emit CreatorRemoved(account);\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/access/roles/MinterRole.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', 'contract MinterRole {\n', '    using Roles for Roles.Role;\n', '\n', '    event MinterAdded(address indexed account);\n', '    event MinterRemoved(address indexed account);\n', '\n', '    Roles.Role private _minters;\n', '\n', '    constructor () internal {\n', '        _addMinter(msg.sender);\n', '    }\n', '\n', '    modifier onlyMinter() {\n', '        require(isMinter(msg.sender), "MinterRole: caller does not have the Minter role");\n', '        _;\n', '    }\n', '\n', '    function isMinter(address account) public view returns (bool) {\n', '        return _minters.has(account);\n', '    }\n', '\n', '    function addMinter(address account) public onlyMinter {\n', '        _addMinter(account);\n', '    }\n', '\n', '    function renounceMinter() public {\n', '        _removeMinter(msg.sender);\n', '    }\n', '\n', '    function _addMinter(address account) internal {\n', '        _minters.add(account);\n', '        emit MinterAdded(account);\n', '    }\n', '\n', '    function _removeMinter(address account) internal {\n', '        _minters.remove(account);\n', '        emit MinterRemoved(account);\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @dev Extension of `ERC20` that adds a set of accounts with the `MinterRole`,\n', ' * which have permission to mint (create) new tokens as they see fit.\n', ' *\n', ' * At construction, the deployer of the contract is the only minter.\n', ' */\n', 'contract ERC20Mintable is ERC20, MinterRole {\n', '    /**\n', '     * @dev See `ERC20._mint`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the caller must have the `MinterRole`.\n', '     */\n', '    function mint(address account, uint256 amount) public onlyMinter returns (bool) {\n', '        _mint(account, amount);\n', '        return true;\n', '    }\n', '}\n', '\n', '// File: contracts/tokens/ERC20CapEnabler.sol\n', '\n', 'pragma solidity ^0.5.8;\n', '\n', '\n', '\n', '/**\n', " * @dev Modification of OpenZeppelin's ERC20Capped. Implements a mechanism\n", ' * to enable and disable cap control, as well as cap modification.\n', ' */\n', 'contract ERC20CapEnabler is ERC20Mintable, CreatorRole {\n', '\n', '    uint256 public cap;\n', '    bool public capEnabled;\n', '\n', '    event CapEnabled(address sender);\n', '    event CapDisabled(address sender);\n', '    event CapSet(address sender, uint256 amount);\n', '\n', '    /**\n', '     * @dev Enable cap control on minting.\n', '     */\n', '    function enableCap()\n', '        external\n', '        onlyCreator {\n', '            capEnabled = true;\n', '            emit CapEnabled(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Disable cap control on minting and set cap back to 0.\n', '     */\n', '    function disableCap()\n', '        external\n', '        onlyCreator {\n', '            capEnabled = false;\n', '            // set cap to 0\n', '            cap = 0;\n', '            emit CapDisabled(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Set a new cap.\n', '     */\n', '    function setCap(uint256 _newCap)\n', '        external\n', '        onlyCreator {\n', '            cap = _newCap;\n', '            emit CapSet(msg.sender, _newCap);\n', '    }\n', '\n', '    /**\n', '     * @dev Overrides mint by checking whether cap control is enabled and\n', '     * reverting if the token addition to supply will exceed the cap.\n', '     */\n', '    function mint(address account, uint256 value)\n', '        public\n', '        onlyMinter\n', '        returns (bool) {\n', '            if (capEnabled) require(totalSupply().add(value) <= cap, "ERC20CapEnabler: cap exceeded");\n', '            return super.mint(account, value);\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/access/roles/OperatorRole.sol\n', '\n', 'pragma solidity ^0.5.8;\n', '\n', '\n', 'contract OperatorRole {\n', '    using Roles for Roles.Role;\n', '\n', '    event OperatorAdded(address indexed account);\n', '    event OperatorRemoved(address indexed account);\n', '\n', '    Roles.Role private _operators;\n', '\n', '    constructor () internal {\n', '        _addOperator(msg.sender);\n', '    }\n', '\n', '    modifier onlyOperator() {\n', '        require(isOperator(msg.sender), "OperatorRole: caller does not have the Operator role");\n', '        _;\n', '    }\n', '\n', '    function isOperator(address account) public view returns (bool) {\n', '        return _operators.has(account);\n', '    }\n', '\n', '    function addOperator(address account) public onlyOperator {\n', '        _addOperator(account);\n', '    }\n', '\n', '    function renounceOperator() public onlyOperator {\n', '        _removeOperator(msg.sender);\n', '    }\n', '\n', '    function _addOperator(address account) internal {\n', '        _operators.add(account);\n', '        emit OperatorAdded(account);\n', '    }\n', '\n', '    function _removeOperator(address account) internal {\n', '        _operators.remove(account);\n', '        emit OperatorRemoved(account);\n', '    }\n', '}\n', '\n', '// File: contracts/tokens/ERC20Operator.sol\n', '\n', 'pragma solidity ^0.5.8;\n', '\n', '\n', '\n', '/**\n', " * @dev Extension of `ERC20` allows a centralized owner to burn users' tokens\n", ' *\n', ' * At construction time, the deployer of the contract is the only burner.\n', ' */\n', 'contract ERC20Operator is ERC20, OperatorRole {\n', '\n', '    event ForcedTransfer(address requester, address from, address to, uint256 value);\n', '\n', '    /**\n', '     * @dev new function to burn tokens from a centralized owner\n', '     * @param _from address The address which the operator wants to send tokens from\n', '     * @param _to address The address which the operator wants to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function forcedTransfer(address _from, address _to, uint256 _value)\n', '        public\n', '        onlyOperator\n', '        returns (bool) {\n', '            _transfer(_from, _to, _value);\n', '            emit ForcedTransfer(msg.sender, _from, _to, _value);\n', '            return true;\n', '    }\n', '}\n', '\n', '// File: contracts/tokens/ERC20AccessList.sol\n', '\n', 'pragma solidity ^0.5.8;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * ERC20 implementation that optionally allows the setup of a access list,\n', ' * which may or may not be required by regulators. If a access list is\n', ' * configured, then the contract starts validating parties.\n', ' * Only the token creator, represented by the CreatorRole, is allowed\n', ' * to add and remove the access list\n', ' */\n', 'contract ERC20AccessList is ERC20Pausable, ERC20CapEnabler, ERC20Operator {\n', '\n', '    TokenAccessList public accessList;\n', '    bool public checkingAccessList;\n', '    address constant private EMPTY_ADDRESS = address(0);\n', '\n', '    /**\n', '     * Admin events\n', '     */\n', '\n', '    event AccessListSet(address accessList);\n', '    event AccessListUnset();\n', '\n', '    modifier hasAccess(address _w1, address _w2, address _w3) {\n', '        if (checkingAccessList) {\n', '            require(accessList.checkEnabledList(_w1, _w2, _w3), "AccessList: address not authorized");\n', '        }\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * Admin functions\n', '    */\n', '\n', '    /**\n', '    * @dev Sets up the centralized accessList contract\n', '    * @param _accessList the address of accessList contract.\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function setupAccessList(address _accessList)\n', '        public\n', '        onlyCreator {\n', '            require(_accessList != address(0), "Invalid access list address");\n', '            accessList = TokenAccessList(_accessList);\n', '            checkingAccessList = true;\n', '            emit AccessListSet(_accessList);\n', '    }\n', '\n', '    /**\n', '    * @dev Removes the accessList\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function removeAccessList()\n', '        public\n', '        onlyCreator {\n', '            checkingAccessList = false;\n', '            accessList = TokenAccessList(0x0);\n', '            emit AccessListUnset();\n', '    }\n', '\n', '    /**\n', '    * @dev Overrides MintableToken mint() adding the accessList validation\n', '    * @param _to The address that will receive the minted tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function mint(address _to, uint256 _amount)\n', '        public\n', '        onlyMinter\n', '        hasAccess(_to, EMPTY_ADDRESS, EMPTY_ADDRESS)\n', '        returns (bool) {\n', '            return super.mint(_to, _amount);\n', '    }\n', '\n', '    /**\n', '    * User functions\n', '    */\n', '\n', '    /**\n', '    * @dev Overrides BasicToken transfer() adding the accessList validation\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function transfer(address _to, uint256 _value)\n', '        public\n', '        whenNotPaused\n', '        hasAccess(msg.sender, _to, EMPTY_ADDRESS)\n', '        returns (bool) {\n', '            return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Overrides BasicToken transfer() adding the accessList validation\n', '    * @param _to The address to transfer from.\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function forcedTransfer(address _from, address _to, uint256 _value)\n', '        public\n', '        hasAccess(_from, _to, EMPTY_ADDRESS)\n', '        returns (bool) {\n', '            return super.forcedTransfer(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Overrides StandardToken transferFrom() adding the accessList validation\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '        public\n', '        whenNotPaused\n', '        hasAccess(msg.sender, _from, _to)\n', '        returns (bool) {\n', '            return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Overrides StandardToken approve() adding the accessList validation\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function approve(address _spender, uint256 _value)\n', '        public\n', '        whenNotPaused\n', '        hasAccess(msg.sender, _spender, EMPTY_ADDRESS)\n', '        returns (bool) {\n', '            return super.approve(_spender, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Overrides StandardToken increaseApproval() adding the accessList validation\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function increaseAllowance(address _spender, uint _addedValue)\n', '        public\n', '        whenNotPaused\n', '        hasAccess(msg.sender, _spender, EMPTY_ADDRESS)\n', '        returns (bool) {\n', '            return super.increaseAllowance(_spender, _addedValue);\n', '    }\n', '\n', '    /**\n', '     * @dev Overrides StandardToken decreaseApproval() adding the accessList validation\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function decreaseAllowance(address _spender, uint _subtractedValue)\n', '        public\n', '        whenNotPaused\n', '        hasAccess(msg.sender, _spender, EMPTY_ADDRESS)\n', '        returns (bool) {\n', '            return super.decreaseAllowance(_spender, _subtractedValue);\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/tokens/ControlledToken.sol\n', '\n', 'pragma solidity ^0.5.8;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * This implementation adds a control layer over the ERC20. There are four roles\n', ' * (creator, pauser, minter and burner) and the token ownership. Token creator\n', ' * has powers to add and remove pausers, minters and burners. Creator role is assigned\n', ' * in the constructor and can only be reassigned by the owner.\n', ' * The owner has the power to claim roles, as an emergency stop mechanism.\n', ' */\n', '\n', 'contract ControlledToken is Ownable, ERC20Detailed, ERC20BurnableAdmin, ERC20AccessList {\n', '\n', '    string public info;\n', '\n', '    constructor(string memory _name, string memory _symbol, uint8 _decimals, string memory _info, address _creator)\n', '        public\n', '        ERC20Detailed(_name, _symbol, _decimals) {\n', '            info = _info;\n', '            // adds all roles to creator\n', '            _addCreator(_creator);\n', '            _addPauser(_creator);\n', '            _addMinter(_creator);\n', '            _addBurner(_creator);\n', '            _addOperator(_creator);\n', '            // remove all roles from token factory\n', '            _removeCreator(msg.sender);\n', '            _removePauser(msg.sender);\n', '            _removeMinter(msg.sender);\n', '            _removeBurner(msg.sender);\n', '            _removeOperator(msg.sender);\n', '        }\n', '\n', '    /**\n', '    * Platform owner functions\n', '    */\n', '\n', '    /**\n', '     * @dev claims creator role from an address.\n', '     * @param _address The address will be removed.\n', '     */\n', '    function claimCreator(address _address)\n', '        public\n', '        onlyOwner {\n', '            _removeCreator(_address);\n', '            _addCreator(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev claims operator role from an address.\n', '     * @param _address The address will be removed.\n', '     */\n', '    function claimOperator(address _address)\n', '        public\n', '        onlyOwner {\n', '            _removeOperator(_address);\n', '            _addOperator(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev claims minter role from an address.\n', '     * @param _address The address will be removed.\n', '     */\n', '    function claimMinter(address _address)\n', '        public\n', '        onlyOwner {\n', '            _removeMinter(_address);\n', '            _addMinter(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev claims burner role from an address.\n', '     * @param _address The address will be removed.\n', '     */\n', '    function claimBurner(address _address)\n', '        public\n', '        onlyOwner {\n', '            _removeBurner(_address);\n', '            _addBurner(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev claims pauser role from an address.\n', '     * @param _address The address will be removed.\n', '     */\n', '    function claimPauser(address _address)\n', '        public\n', '        onlyOwner {\n', '            _removePauser(_address);\n', '            _addPauser(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev adds new creator.\n', '     * @param _address The address will be removed.\n', '     */\n', '    function addCreator(address _address)\n', '        public\n', '        onlyOwner {\n', '            _addCreator(_address);\n', '    }\n', '\n', '    /**\n', '     * @dev renounces to creator role\n', '     */\n', '    function renounceCreator()\n', '        public\n', '        onlyOwner {\n', '            _removeCreator(msg.sender);\n', '    }\n', '\n', '    /**\n', '    * Creator functions\n', '    */\n', '\n', '    /**\n', '     * @dev adds minter role to and address.\n', '     * @param _address The address will be added.\n', '     * Needed in case the last minter renounces the role\n', '     */\n', '    function adminAddMinter(address _address)\n', '        public\n', '        onlyCreator {\n', '            _addMinter(_address);\n', '    }\n', '\n', '    /**\n', '     * @dev removes minter role from an address.\n', '     * @param _address The address will be removed.\n', '     */\n', '    function removeMinter(address _address)\n', '        public\n', '        onlyCreator {\n', '            _removeMinter(_address);\n', '    }\n', '\n', '    /**\n', '     * @dev adds pauser role to and address.\n', '     * @param _address The address will be added.\n', '     * Needed in case the last pauser renounces the role\n', '     */\n', '    function adminAddPauser(address _address)\n', '        public\n', '        onlyCreator {\n', '            _addPauser(_address);\n', '    }\n', '\n', '    /**\n', '     * @dev removes pauser role from an address.\n', '     * @param _address The address will be removed.\n', '     */\n', '    function removePauser(address _address)\n', '        public\n', '        onlyCreator {\n', '            _removePauser(_address);\n', '    }\n', '\n', '    /**\n', '     * @dev adds pauser role to and address.\n', '     * @param _address The address will be added.\n', '     * Needed in case the last pauser renounces the role\n', '     */\n', '    function adminAddOperator(address _address)\n', '        public\n', '        onlyCreator {\n', '            _addOperator(_address);\n', '    }\n', '\n', '    /**\n', '     * @dev removes operator role from an address.\n', '     * @param _address The address will be removed.\n', '     */\n', '    function removeOperator(address _address)\n', '        public\n', '        onlyCreator {\n', '            _removeOperator(_address);\n', '    }\n', '\n', '    /**\n', '     * @dev adds burner role to and address.\n', '     * @param _address The address will be added.\n', '     * Needed in case the last burner renounces the role\n', '     */\n', '    function adminAddBurner(address _address)\n', '        public\n', '        onlyCreator {\n', '            _addBurner(_address);\n', '    }\n', '\n', '    /**\n', '     * @dev removes burner role fom an address.\n', '     * @param _address The address will be removed.\n', '     */\n', '    function removeBurner(address _address)\n', '        public\n', '        onlyCreator {\n', '            _removeBurner(_address);\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/TokenFactory.sol\n', '\n', 'pragma solidity ^0.5.8;\n', '\n', '\n', '\n', '\n', 'contract TokenFactory is Authorizable {\n', '\n', '    address[] private tIndex; // token index\n', '    address[] private alIndex; // access list index\n', '\n', '    event TokenCreated(string name, string symbol, uint8 decimals, string info, address indexed token, uint256 blockNumber, address indexed creator);\n', '    event AccessListCreated(address indexed accessList, string identifier, uint256 blockNumber, address indexed creator);\n', '\n', '    function createToken(string calldata _name, string calldata _symbol, uint8 _decimals, string calldata _info)\n', '        external\n', '        onlyAuthorized {\n', '            // creates a token\n', '            address t = address(new ControlledToken(_name, _symbol, _decimals, _info, msg.sender));\n', '            // platform owner holds some control over the tokens\n', '            Ownable(t).transferOwnership(owner());\n', '            // add token address to index\n', '            tIndex.push(t);\n', '            // log\n', '            emit TokenCreated(_name, _symbol, _decimals, _info, t, block.number, msg.sender);\n', '    }\n', '\n', '    function addToken(string calldata _name, string calldata _symbol, uint8 _decimals, string calldata _info, uint256 _blockNumber, address _token, address _owner)\n', '        external\n', '        onlyOwner {\n', '            require(isAuthorized(_owner), "Token owner is not authorized");\n', '            tIndex.push(_token);\n', '            emit TokenCreated(_name, _symbol, _decimals, _info, _token, _blockNumber, _owner);\n', '    }\n', '\n', '    function createAccessList(string calldata _identifier)\n', '        external\n', '        onlyAuthorized {\n', '            // creates an access list\n', '            address al = address(new TokenAccessList(_identifier));\n', '            // transfers ownership to sender\n', '            Ownable(al).transferOwnership(msg.sender);\n', '            // add access list address to index\n', '            alIndex.push(al);\n', '            // log\n', '            emit AccessListCreated(al, _identifier, block.number, msg.sender);\n', '        }\n', '\n', '    function addAccessList(address _accessList, string calldata _identifier, uint256 _blockNumber, address _owner)\n', '        external\n', '        onlyOwner {\n', '            require(isAuthorized(_owner), "AccessList owner is not authorized");\n', '            alIndex.push(_accessList);\n', '            emit AccessListCreated(_accessList, _identifier, _blockNumber, _owner);\n', '        }\n', '\n', '    function tokenIndex()\n', '        external\n', '        view\n', '        returns (address[] memory) {\n', '            return tIndex;\n', '        }\n', '\n', '    function accessListIndex()\n', '        external\n', '        view\n', '        returns (address[] memory) {\n', '            return alIndex;\n', '        }\n', '\n', '}']