['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-14\n', '*/\n', '\n', 'pragma solidity ^0.6.7;\n', '\n', 'contract Vester {\n', '    address public immutable token;\n', '    address public recipient;\n', '\n', '    uint public immutable vestingAmount;\n', '    uint public immutable vestingBegin;\n', '    uint public immutable vestingCliff;\n', '    uint public immutable vestingEnd;\n', '\n', '    uint public lastUpdate;\n', '\n', '    constructor(\n', '        address token_,\n', '        address recipient_,    \n', '        uint vestingAmount_,\n', '        uint vestingBegin_,\n', '        uint vestingCliff_,\n', '        uint vestingEnd_\n', '    ) public {\n', "        require(vestingBegin_ >= block.timestamp, 'Vester::constructor: vesting begin too early');\n", "        require(vestingCliff_ >= vestingBegin_, 'Vester::constructor: cliff is too early');\n", "        require(vestingEnd_ > vestingCliff_, 'Vester::constructor: end is too early');\n", '\n', '        token = token_;\n', '        recipient = recipient_;\n', '\n', '        vestingAmount = vestingAmount_;\n', '        vestingBegin = vestingBegin_;\n', '        vestingCliff = vestingCliff_;\n', '        vestingEnd = vestingEnd_;\n', '\n', '        lastUpdate = vestingBegin_;\n', '    }\n', '\n', '    function setRecipient(address recipient_) public {\n', "        require(msg.sender == recipient, 'Vester::setRecipient: unauthorized');\n", '        recipient = recipient_;\n', '    }\n', '\n', '    function claim() public {\n', "        require(block.timestamp >= vestingCliff, 'Vester::claim: not time yet');\n", '        uint amount;\n', '        if (block.timestamp >= vestingEnd) {\n', '            amount = IERC20(token).balanceOf(address(this));\n', '        } else {\n', '            amount = mul(vestingAmount, (block.timestamp - lastUpdate)) / (vestingEnd - vestingBegin);\n', '            lastUpdate = block.timestamp;\n', '        }\n', '        IERC20(token).transfer(recipient, amount);\n', '    }\n', '\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', "        require(b == 0 || (c = a * b) / b == a, 'Vester::mul: multiplication overflow');\n", '    }    \n', '}\n', '\n', 'interface IERC20 {\n', '    function balanceOf(address account) external view returns (uint);\n', '    function transfer(address dst, uint rawAmount) external returns (bool);\n', '}']