['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-28\n', '*/\n', '\n', 'pragma solidity ^0.8.4;\n', '//SPDX-License-Identifier: MIT\n', '\n', '/*\n', '     _    _    _ _        ____                                _\n', '    / \\  | | _(_) |_ __ _|  _ \\ ___  ___  ___ _   _  ___   __| | ___   __ _\n', '   / _ \\ | |/ / | __/ _` | |_) / _ \\/ __|/ __| | | |/ _ \\ / _` |/ _ \\ / _` |\n', '  / ___ \\|   <| | || (_| |  _ <  __/\\__ \\ (__| |_| |  __/| (_| | (_) | (_| |\n', ' /_/   \\_\\_|\\_\\_|\\__\\__,_|_| \\_\\___||___/\\___|\\__,_|\\___(_)__,_|\\___/ \\__, |\n', '                                                                      |___/\n', '\n', ' 🐕 AkitaRescue.dog\n', '\n', ' 🏗 scaffold-eth\n', '\n', ' 🖨 https://github.com/austintgriffith/scaffold-eth/tree/akita-rescue-dog\n', '\n', ' ⚠️ Warning: not formally audited!\n', '\n', ' 👨🏻\u200d🔬 @austingriffith\n', '\n', '*/\n', '\n', 'interface TOKEN {\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '}\n', '\n', 'contract BurnVendor {\n', '\n', '  TOKEN public akitaToken;\n', '\n', '  uint256 constant public tokensPerEth = 2217890000 * 70 / 100;// 30% discounted?\n', '\n', '  uint256 constant public burnMultiplier = 10;\n', '\n', '  address payable constant public gitcoinAddress = payable(0xde21F729137C5Af1b01d73aF1dC21eFfa2B8a0d6);//edited to be my SAFE\n', '\n', '  address constant public burnAddress = 0xDead000000000000000000000000000000000d06;\n', '\n', '  constructor(address akitaAddress) {\n', '    akitaToken = TOKEN(akitaAddress);\n', '  }\n', '\n', '  receive() external payable {\n', '    buy();\n', '  }\n', '\n', '  event Buy(address who, uint256 value, uint256 amount, uint256 burn);\n', '\n', '  function buy() public payable {\n', '\n', '    uint256 amountOfTokensToBuy = msg.value * tokensPerEth;\n', '\n', '    uint256 amountOfTokensToBurn = amountOfTokensToBuy * burnMultiplier;\n', '\n', '    akitaToken.transferFrom(gitcoinAddress, burnAddress, amountOfTokensToBurn);\n', '\n', '    akitaToken.transferFrom(gitcoinAddress, msg.sender, amountOfTokensToBuy);\n', '\n', '    (bool sent, ) = gitcoinAddress.call{value: msg.value}("");\n', '    require(sent, "Failed to send ETH to Gitcoin Multisig");\n', '\n', '    emit Buy(msg.sender, msg.value, amountOfTokensToBuy, amountOfTokensToBurn);\n', '\n', '  }\n', '\n', '}']