['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-01\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @dev Interface for the optional metadata functions from the ERC20 standard.\n', ' *\n', ' * _Available since v4.1._\n', ' */\n', 'interface IERC20Metadata is IERC20 {\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token.\n', '     */\n', '    function symbol() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the decimals places of the token.\n', '     */\n', '    function decimals() external view returns (uint8);\n', '}\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20, IERC20Metadata {\n', '    mapping (address => uint256) public _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 public _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}.\n', '     *\n', '     * The default value of {decimals} is 18. To select a different value for\n', '     * {decimals} you should overload it.\n', '     *\n', '     * All two of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name_, string memory symbol_) {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view virtual override returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view virtual override returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n', '     * overridden;\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view virtual override returns (uint8) {\n', '        return 12;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view virtual override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view virtual override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '\n', '        uint256 currentAllowance = _allowances[sender][_msgSender()];\n', '        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");\n', '        _approve(sender, _msgSender(), currentAllowance - amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        uint256 currentAllowance = _allowances[_msgSender()][spender];\n', '        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");\n', '        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        uint256 senderBalance = _balances[sender];\n', '        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[sender] = senderBalance - amount;\n', '        _balances[recipient] += amount;\n', '\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply += amount;\n', '        _balances[account] += amount;\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        uint256 accountBalance = _balances[account];\n', '        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");\n', '        _balances[account] = accountBalance - amount;\n', '        _totalSupply -= amount;\n', '\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '\n', 'abstract contract GlobalsAndUtility is ERC20 {\n', '\n', '    uint32 public constant minBurnAmount = 5000000;\n', '    uint256 public constant INTEREST_INTERVAL = 7 days;\n', '    uint256 public constant INTEREST_MULTIPLIER = 1612;\n', '    uint256 public constant MINIMUM_INTEREST_DENOMINATOR = 1612;\n', '    uint256 public constant BURN_TIME_UNIT = 1 days;\n', '    uint256 public constant CYANIDE_PER_CYAN = 1000000000000; // 1 CYAN = 1e12 CYANIDE\n', '\n', '}\n', '\n', '\n', 'contract CYAN is GlobalsAndUtility {\n', '\n', '    address private FLUSH_ADDR; //Address that ETH/CYN is flushed to\n', '    uint256 public _totalBurntSupply = 0; //The total amount of CYAN burnt by everyone\n', '    uint256 public deployBlockTimestamp; //Unix time of when the contract was deployed\n', '    uint256 public deployBlockInterval; // deployBlockTimestamp / INTEREST_INTERVAL\n', '    uint256 public currentInterestDenominator; //The reciprocal of the current interval interest rate\n', '    uint256 public burnStartDay; //The first day of the first interest interval.\n', '\n', '    //Information stored for each address\n', '    mapping (address => uint256) public _burntBalances;\n', '    mapping (address => uint256) public _unclaimedBalances;\n', '    mapping (address => uint256) public _timeOfLastBurnChange;\n', '\n', '    //Stores supply information for given interest intervals\n', '    mapping (uint256 => uint256) public intervalsTotalSupply;\n', '    mapping (uint256 => uint256) public intervalsTotalBurntSupply;\n', '\n', '    event BurntCyan(address burner, uint256 amount);\n', '    event ClaimedInterest(address claimer, uint256 amount);\n', '    event CheckedUnclaimedBalance(address checker, address checked);\n', '    event FlushedCYN(uint amount);\n', '    event FlushedETH(uint amount);\n', '\n', '    //Function that is only called once when the contract is deployed\n', '    constructor(uint256 initialSupply, uint256 _burnStartDay) ERC20("CYAN", "CYN") {\n', '\n', '        _mint(msg.sender, initialSupply); //ERC20 initialization function\n', '\n', '        deployBlockTimestamp = block.timestamp;\n', '        deployBlockInterval = block.timestamp / (INTEREST_INTERVAL);\n', '        burnStartDay = _burnStartDay;\n', '\n', '        FLUSH_ADDR = msg.sender; //Set ETH flush address to contract deployer\n', '\n', '    }\n', '\n', '    //Get how much CYAN a certain address has burnt\n', '    function burntBalanceOf(address account) public view returns (uint256) {\n', '        return _burntBalances[account];\n', '    }\n', '\n', '    //Get the unclaimed balance of a certain address. Requires gas.\n', '    //There are only minor differences between calling this function and "updateUnclaimedBalance()"\n', '    //Differences: This function check if current time is pre burn period. This function also called the CheckUnclaimedBalance event.\n', '    function unclaimedBalanceOf(address account) public returns (uint256) {\n', '\n', '        //Return 0 if burn start time is still in the future\n', '        if ((block.timestamp / (BURN_TIME_UNIT)) < burnStartDay) {\n', '            return 0;\n', '        }\n', '        else {\n', '\n', '            updateUnclaimedBalance(account);\n', '            CheckedUnclaimedBalance(msg.sender, account);\n', '            return _unclaimedBalances[account];\n', '\n', '        }\n', '\n', '    }\n', '\n', '    //Probably the most complicated function in the CYAN contract\n', '    //Updates the unclaimed balance of a given address/user\n', '    function updateUnclaimedBalance(address account) internal {\n', '\n', '        uint256 currentTime = (block.timestamp / (INTEREST_INTERVAL)); //Get current interval\n', '\n', '        updateIntervals(currentTime); //Update interval data\n', '\n', '        //Initialize some loop variables\n', '        uint256 amountToAddToBalance = 0; //Interest from all intervals combined\n', "        uint256 lastAmount = 0; //Keeps track of how much was added for last interval's calculation\n", '\n', '        //Set time of last burn change to now if it is not already set\n', '        if (_timeOfLastBurnChange[account] == 0) {\n', '            _timeOfLastBurnChange[account] = block.timestamp / (INTEREST_INTERVAL);\n', '        }\n', '\n', '        if (currentTime - _timeOfLastBurnChange[account] > 0) { // Checks if it has been 1 or more intervals since last unclaimed balance update\n', '\n', '            for (uint256 i = _timeOfLastBurnChange[account]; i < currentTime; i++) { //Runs 1 iteration for every interval since last unclaimed balance update\n', '\n', '                if (intervalsTotalBurntSupply[i] > 0) { //Checks if anybody burnt or claimed CYAN during interval "i"\n', '\n', '                    if (intervalsTotalSupply[i] > 0) {\n', '\n', '                        uint256 thisIntervalDenominator =  (INTEREST_MULTIPLIER * intervalsTotalBurntSupply[i]) / intervalsTotalSupply[i]; //Get the reciprocal of interval "i" interest rate. This uses the weekly interest equation seen in the green paper and blue paper.\n', '\n', '                        if (thisIntervalDenominator < 1) {\n', '\n', '                            lastAmount = _burntBalances[account]; //Maximum weekly interest is 100%;\n', '                            amountToAddToBalance += lastAmount;\n', '\n', '                        }\n', '\n', '                        else if (thisIntervalDenominator < MINIMUM_INTEREST_DENOMINATOR) { //Check if current equation interest is greater than minimum interest.\n', '\n', '                            lastAmount = _burntBalances[account] / thisIntervalDenominator; //Divide by reciprocal is same as multiplying by interest rate\n', '                            amountToAddToBalance += lastAmount;\n', '\n', '                            continue;\n', '\n', '                        }\n', '\n', '                        //Use minimum interest if equation interest is less.\n', '                        else {\n', '\n', '                            lastAmount = _burntBalances[account] / MINIMUM_INTEREST_DENOMINATOR;\n', '                            amountToAddToBalance += lastAmount;\n', '\n', '                            continue;\n', '\n', '                        }\n', '\n', '                    }\n', '\n', '                    else {\n', '\n', '                        //Use minimum interest if equation interest is less.\n', '                        lastAmount = _burntBalances[account] / MINIMUM_INTEREST_DENOMINATOR;\n', '                        amountToAddToBalance += lastAmount;\n', '\n', '                        continue;\n', '\n', '                    }\n', '\n', '                }\n', '\n', '                else { //If nobody burnt or claimed any CYAN during interval "i", the ratio will be the same as interval "i" - 1, so we can just add lastAmount to amountToAddToBalance\n', '\n', '                    amountToAddToBalance += lastAmount;\n', '\n', '                    //Since none was burnt or claimed, total supplies are same as last interval\n', '                    intervalsTotalSupply[i] = intervalsTotalSupply[i - 1];\n', '                    intervalsTotalBurntSupply[i] = intervalsTotalBurntSupply[i - 1];\n', '\n', '                    continue;\n', '\n', '                }\n', '\n', '            }\n', '\n', '        }\n', '\n', '        _unclaimedBalances[account] += amountToAddToBalance; //Update the uncaimed balance\n', '        _timeOfLastBurnChange[account] = currentTime; //Change the last update time\n', '\n', '    }\n', '\n', '    //Second most complicated function\n', '    //Allows user to burn cyan\n', '    function burnCyan(uint256 amount) public {\n', '\n', '        require ((block.timestamp / (BURN_TIME_UNIT)) >= burnStartDay, "Cyan can not be burned yet. Try again on or after the burn start day."); //Check that current time is not before the burn start time.\n', '        require (amount >= minBurnAmount, "You have not entered an amount greater than or equal to the minimum."); //Check if user is trying to burn at least the minimum burn amount.\n', '        require (_balances[msg.sender] >= amount, "You have attempted to burn more CYAN than you own."); //Check if user has enough CYAN to burn.\n', '\n', '        //Set time of last burn change to now if it is not already set\n', '        if (_timeOfLastBurnChange[msg.sender] == 0) {\n', '            _timeOfLastBurnChange[msg.sender] = block.timestamp / (INTEREST_INTERVAL);\n', '        }\n', '\n', '        //Update balances\n', '        _balances[msg.sender] -= amount;\n', '        updateUnclaimedBalance(msg.sender);\n', '        _burntBalances[msg.sender] += amount;\n', '\n', '        //Update total supplies\n', '        _totalSupply -= amount;\n', '        _totalBurntSupply += amount;\n', '        updateIntervals(block.timestamp / (INTEREST_INTERVAL)); //Update supplies for this interval\n', '\n', '        BurntCyan(msg.sender, amount); //Call burnt cyan event\n', '\n', '    }\n', '\n', '    //Allows user to add their unclaimed balance to their balance.\n', '    function claimInterest() public returns (uint256) {\n', '\n', '        require ((block.timestamp / (BURN_TIME_UNIT)) > burnStartDay, "It is before the burn start time"); //Make sure burning has started.\n', '        require (_burntBalances[msg.sender] > 0, "You have no burnt CYAN."); //Only let them claim if they have burnt CYAN.\n', '\n', '        updateUnclaimedBalance(msg.sender); //Update the unclaimed balance\n', '        _balances[msg.sender] += _unclaimedBalances[msg.sender]; //Add unclaimed CYAN to balance\n', '        _totalSupply += _unclaimedBalances[msg.sender]; //Update total supply\n', '        intervalsTotalSupply[(block.timestamp - deployBlockTimestamp) / (INTEREST_INTERVAL)] += _unclaimedBalances[msg.sender]; //Update total supply without updating burnt supply\n', '\n', '        ClaimedInterest(msg.sender, _unclaimedBalances[msg.sender]);\n', '\n', '        uint256 amountClaimed = _unclaimedBalances[msg.sender];\n', '        _unclaimedBalances[msg.sender] = 0; //Reset unclaimed balance\n', '\n', '        return amountClaimed;\n', '\n', '    }\n', '\n', '    //Sets total supplies of given interval to current total supplies\n', '    function updateIntervals(uint256 interval) internal {\n', '\n', '        intervalsTotalSupply[interval] = _totalSupply;\n', '        intervalsTotalBurntSupply[interval] = _totalBurntSupply;\n', '\n', '        updateCurrentInterestDenominator();\n', '\n', '    }\n', '\n', '    //Updates the vallu of currentInterestDenominator\n', '    function updateCurrentInterestDenominator() internal {\n', '\n', "        uint256 timeNow = block.timestamp / (INTEREST_INTERVAL); //Use some memory so division doesn't need to happen twice.\n", '        uint256 currentInterestEquation = (INTEREST_MULTIPLIER * intervalsTotalBurntSupply[timeNow]) / intervalsTotalSupply[timeNow];\n', '\n', '        if (currentInterestEquation < 1) {\n', '            currentInterestDenominator = 1;\n', '        }\n', '        else {\n', '            currentInterestDenominator = currentInterestEquation;\n', '        }\n', '\n', '    }\n', '\n', '    //Send ETH that is trapped in the contract to the flush address\n', '    function flushETH() external {\n', '\n', '        require(address(this).balance != 0, "Currently no ETH in CYAN.");\n', '\n', '        uint256 bal = address(this).balance;\n', '        payable(FLUSH_ADDR).transfer(bal);\n', '\n', '        FlushedETH(bal);\n', '\n', '    }\n', '\n', '    //Send CYN that is trapped in the contract to the flush address\n', '    function flushCYN() public {\n', '\n', '        FlushedCYN(balanceOf(address(this)));\n', '        _transfer(address(this), FLUSH_ADDR, balanceOf(address(this)));\n', '\n', '    }\n', '\n', '    //Backup functions\n', '    receive() external payable {}\n', '    fallback() external payable {}\n', '\n', '}']