['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-11\n', '*/\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name_, string memory symbol_) public {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @title A simple holder of tokens.\n', " * This is a simple contract to hold tokens. It's useful in the case where a separate contract\n", ' * needs to hold multiple distinct pools of the same token.\n', ' */\n', 'contract TokenPool is Ownable {\n', '    IERC20 public token;\n', '    bool private _isTokenRescuable;\n', '\n', '    constructor(IERC20 _token) public {\n', '        token = _token;\n', '        _isTokenRescuable = false;\n', '    }\n', '\n', '    function balance() public view returns (uint256) {\n', '        return token.balanceOf(address(this));\n', '    }\n', '\n', '    function setRescuable(bool rescuable) public onlyOwner {\n', '        _isTokenRescuable = rescuable;\n', '    }\n', '\n', '    function transfer(address to, uint256 value)\n', '        external\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        return token.transfer(to, value);\n', '    }\n', '\n', '    function rescueFunds(\n', '        address tokenToRescue,\n', '        address to,\n', '        uint256 amount\n', '    ) external onlyOwner returns (bool) {\n', '        if (!_isTokenRescuable) {\n', '            require(\n', '                address(token) != tokenToRescue,\n', '                "TokenPool: Cannot claim token held by the contract"\n', '            );\n', '        }\n', '\n', '        return IERC20(tokenToRescue).transfer(to, amount);\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @title IOU vesting interface\n', ' */\n', 'interface IIouVesting {\n', '    /**\n', '     * @dev Get current rewards amount for sender\n', '     * @param includeForfeited Include forfeited amount of other users who unstaked early\n', '     */\n', '    function getCurrentRewards(bool includeForfeited)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /**\n', '     * @dev Get the total possible rewards, without forfeited rewards, if user stakes for the entire period\n', '     * @param includeForfeited Include forfeited amount of other users who unstaked early\n', '     */\n', '    function getTotalPossibleRewards(bool includeForfeited)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /**\n', '     * @dev Used for burning user shares and withdrawing rewards based on the requested amount\n', '     * @param amount The amount of IOU you want to burn and get rewards for\n', '     * @param donationRatio The percentage ratio you want to donate (in 18 decimals; 0.15 * 10^18)\n', '     */\n', '    function unstake(uint256 amount, uint256 donationRatio) external;\n', '\n', '    /**\n', "     * @dev Used for adding user's shares into IouVesting contract\n", '     * @param amount The amount you want to stake\n', '     */\n', '    function stake(uint256 amount) external;\n', '\n', '    /**\n', '     * @return The total number of deposit tokens staked globally, by all users.\n', '     */\n', '    function totalStaked() external view returns (uint256);\n', '\n', '    /**\n', '     * @return The total number of IOUs locked in the contract\n', '     */\n', '    function totalLocked() external view returns (uint256);\n', '\n', '    /**\n', '     * @return The total number of IOUs staked by user.\n', '     */\n', '    function totalStakedFor(address user) external view returns (uint256);\n', '\n', '    /**\n', '     * @return The total number of rewards tokens.\n', '     */\n', '    function totalRewards() external view returns (uint256);\n', '\n', '    /**\n', '     * @return Total earnings for a user\n', '     */\n', '    function getEarnings(address user) external view returns (uint256);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @title IOU vesting contract\n', ' */\n', 'contract IouVesting is IIouVesting, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public startTimestamp;\n', '    uint256 public availableForfeitedAmount;\n', '    uint256 public totalUsers = 0;\n', '\n', '    uint256 public constant ratio = 1449697206000000; //0.001449697206\n', '    uint256 public constant totalMonths = 6;\n', '\n', '    address public donationAddress;\n', '\n', '    mapping(address => uint256) userShares;\n', '    mapping(address => uint256) userEarnings;\n', '\n', '    event RewardsClaimed(address indexed user, uint256 amount);\n', '    event RewardsDonated(address indexed user, uint256 amount);\n', '    event TokensLocked(address indexed user, uint256 amount);\n', '    event TokensStaked(address indexed user, uint256 amount, uint256 total);\n', '\n', '    TokenPool private _iouPool;\n', '    TokenPool private _lockedIouPool;\n', '    TokenPool private _rewardsPool;\n', '\n', '    /**\n', '     * @param iouToken The token users deposit as stake.\n', '     * @param rewardToken The token users receive as they unstake.\n', '     */\n', '    constructor(IERC20 iouToken, IERC20 rewardToken) public {\n', '        startTimestamp = block.timestamp;\n', '        availableForfeitedAmount = 0;\n', '        _iouPool = new TokenPool(iouToken);\n', '        _lockedIouPool = new TokenPool(iouToken);\n', '        _rewardsPool = new TokenPool(rewardToken);\n', '        _rewardsPool.setRescuable(true);\n', '    }\n', '\n', '    function setDonationAddress(address donationReceiver) external onlyOwner {\n', '        donationAddress = donationReceiver;\n', '    }\n', '\n', '    /**\n', '     * @dev Rescue rewards\n', '     */\n', '    function rescueRewards() external onlyOwner {\n', '        require(_rewardsPool.balance() > 0, "IouVesting: Nothing to rescue");\n', '        require(\n', '            _rewardsPool.transfer(msg.sender, _rewardsPool.balance()),\n', '            "IouVesting: rescue rewards from rewards pool failed"\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Get current rewards amount for sender\n', '     * @param includeForfeited Include forfeited amount of other users who unstaked early\n', '     */\n', '    function getCurrentRewards(bool includeForfeited)\n', '        public\n', '        view\n', '        override\n', '        returns (uint256)\n', '    {\n', '        require(\n', '            msg.sender != address(0),\n', '            "IouVesting: Cannot get rewards for address(0)."\n', '        );\n', '\n', '        require(\n', '            userShares[msg.sender] != uint256(0),\n', '            "IouVesting: Sender hasn\'t staked anything."\n', '        );\n', '\n', '        return computeRewards(msg.sender, includeForfeited);\n', '    }\n', '\n', '    /**\n', '     * @return The token users deposit as stake.\n', '     */\n', '    function getStakingToken() public view returns (IERC20) {\n', '        return _iouPool.token();\n', '    }\n', '\n', '    /**\n', '     * @return The token users deposit as stake.\n', '     */\n', '    function getRewardToken() public view returns (IERC20) {\n', '        return _rewardsPool.token();\n', '    }\n', '\n', '    /**\n', '     * @return Total earnings for a user\n', '     */\n', '    function getEarnings(address user) public view override returns (uint256) {\n', '        return userEarnings[user];\n', '    }\n', '\n', '    /**\n', '     * @return The total number of deposit tokens staked globally, by all users.\n', '     */\n', '    function totalStaked() public view override returns (uint256) {\n', '        return _iouPool.balance();\n', '    }\n', '\n', '    /**\n', '     * @return The total number of IOUs locked in the contract\n', '     */\n', '    function totalLocked() public view override returns (uint256) {\n', '        return _lockedIouPool.balance();\n', '    }\n', '\n', '    /**\n', '     * @return The total number of IOUs staked by user.\n', '     */\n', '    function totalStakedFor(address user)\n', '        public\n', '        view\n', '        override\n', '        returns (uint256)\n', '    {\n', '        return userShares[user];\n', '    }\n', '\n', '    /**\n', '     * @return The total number of rewards tokens.\n', '     */\n', '    function totalRewards() public view override returns (uint256) {\n', '        return _rewardsPool.balance();\n', '    }\n', '\n', '    /**\n', '     * @dev Lets the owner rescue funds air-dropped to the staking pool.\n', '     * @param tokenToRescue Address of the token to be rescued.\n', '     * @param to Address to which the rescued funds are to be sent.\n', '     * @param amount Amount of tokens to be rescued.\n', '     * @return Transfer success.\n', '     */\n', '    function rescueFundsFromStakingPool(\n', '        address tokenToRescue,\n', '        address to,\n', '        uint256 amount\n', '    ) public onlyOwner returns (bool) {\n', '        return _iouPool.rescueFunds(tokenToRescue, to, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Get the total possible rewards, without forfeited rewards, if user stakes for the entire period\n', '     * @param includeForfeited Include forfeited amount of other users who unstaked early\n', '     */\n', '    function getTotalPossibleRewards(bool includeForfeited)\n', '        external\n', '        view\n', '        override\n', '        returns (uint256)\n', '    {\n', '        return computeUserTotalPossibleRewards(msg.sender, includeForfeited);\n', '    }\n', '\n', '    function getRatio(\n', '        uint256 numerator,\n', '        uint256 denominator,\n', '        uint256 precision\n', '    ) private view returns (uint256) {\n', '        uint256 _numerator = numerator * 10**(precision + 1);\n', '        uint256 _quotient = ((_numerator / denominator) + 5) / 10;\n', '        return (_quotient);\n', '    }\n', '\n', '    function computeUserTotalPossibleRewards(\n', '        address user,\n', '        bool includeForfeited\n', '    ) private view returns (uint256) {\n', '        uint256 originalAmount = (userShares[user] * ratio) / (10**18);\n', '        if (!includeForfeited) return originalAmount;\n', '\n', '        uint256 shareVsTotalStakedRatio =\n', '            getRatio(userShares[user], totalStaked(), 18);\n', '        uint256 forfeitedAmount =\n', '            (shareVsTotalStakedRatio * availableForfeitedAmount) / (10**18);\n', '\n', '        return originalAmount.add(forfeitedAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Get current rewards amount for sender\n', '     * @param user The address of the user you want to calculate rewards for\n', '     * @param includeForfeited Include forfeited amount of other users who unstaked early\n', '     */\n', '    function computeRewards(address user, bool includeForfeited)\n', '        private\n', '        view\n', '        returns (uint256)\n', '    {\n', '        uint256 nowTimestamp = block.timestamp;\n', '        uint256 endTimestamp = startTimestamp + (totalMonths * 30 days);\n', '        if (nowTimestamp > endTimestamp) {\n', '            nowTimestamp = endTimestamp;\n', '        }\n', '\n', '        uint256 stakingMonths =\n', '            (nowTimestamp - startTimestamp) / 60 / 60 / 24 / 30; //months\n', '        if (stakingMonths == uint256(0)) {\n', "            //even if 1 second has passed, it's counted as 1 month\n", '            stakingMonths = 1;\n', '        }\n', '\n', '        if (includeForfeited) {\n', '            uint256 totalUserPossibleReward =\n', '                computeUserTotalPossibleRewards(user, true);\n', '\n', '            return (totalUserPossibleReward * stakingMonths) / totalMonths;\n', '        } else {\n', '            uint256 totalUserPossibleRewardWithoutForfeited =\n', '                computeUserTotalPossibleRewards(user, false);\n', '            uint256 rewardsWithoutForfeited =\n', '                ((totalUserPossibleRewardWithoutForfeited * stakingMonths) /\n', '                    totalMonths);\n', '\n', '            if (!includeForfeited) return rewardsWithoutForfeited;\n', '        }\n', '    }\n', '\n', '    /**\n', "     * @dev Used for adding the necessary warp tokens amount based on the IOU's token total supply at the given ratio\n", '     * @param iouToken The address of the IOU token\n', '     * @param amount The amount you want to lock into the rewards pool\n', '     */\n', '    function lockTokens(IERC20 iouToken, uint256 amount) external {\n', '        //11333\n', '        uint256 supply = iouToken.totalSupply();\n', '        uint256 necessaryRewardSupply = (supply * ratio) / (10**18);\n', '\n', '        require(\n', '            amount >= necessaryRewardSupply,\n', '            "IouVesting: The amount provided for locking is not right"\n', '        );\n', '\n', '        require(\n', '            _rewardsPool.token().transferFrom(\n', '                msg.sender,\n', '                address(_rewardsPool),\n', '                amount\n', '            ),\n', '            "TokenGeyser: transfer into locked pool failed"\n', '        );\n', '\n', '        emit TokensLocked(msg.sender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Used for burning user shares and withdrawing rewards based on the requested amount\n', '     * @param amount The amount of IOU you want to burn and get rewards for\n', '     * @param donationRatio The percentage ratio you want to donate (in 18 decimals; 0.15 * 10^18)\n', '     */\n', '    function unstake(uint256 amount, uint256 donationRatio) external override {\n', '        require(\n', '            amount > uint256(0),\n', '            "IouVesting: Unstake amount needs to be greater than 0"\n', '        );\n', '        require(\n', '            userShares[msg.sender] != uint256(0),\n', '            "IouVesting: There is nothing to unstake for you"\n', '        );\n', '\n', '        require(\n', '            userShares[msg.sender] >= amount,\n', '            "IouVesting: You cannot unstake more than you staked"\n', '        );\n', '\n', '        require(\n', '            donationRatio <= uint256(100),\n', '            "IouVesting: You cannot donate more than you earned"\n', '        );\n', '\n', '        uint256 amountVsSharesRatio =\n', '            getRatio(amount, userShares[msg.sender], 18);\n', '        uint256 totalUserPossibleRewards =\n', '            (computeUserTotalPossibleRewards(msg.sender, false) *\n', '                amountVsSharesRatio) / (10**18);\n', '\n', '        uint256 totalCurrentUserRewards =\n', '            (getCurrentRewards(true) * amountVsSharesRatio) / (10**18);\n', '\n', '        //in case rewards were rescued\n', '        if (totalRewards() > 0) {\n', '            uint256 donationAmount = 0;\n', '            if (donationAddress != address(0) && donationRatio > 0) {\n', '                donationAmount =\n', '                    (donationRatio * totalCurrentUserRewards) /\n', '                    (10**18);\n', '            }\n', '\n', '            uint256 toTransferToUser = totalCurrentUserRewards;\n', '            if (donationAmount > 0) {\n', '                toTransferToUser = totalCurrentUserRewards - donationAmount;\n', '                require(\n', '                    _rewardsPool.transfer(donationAddress, donationAmount),\n', '                    "IouVesting: transfer from rewards pool to donation receiver failed"\n', '                );\n', '            }\n', '\n', '            require(\n', '                _rewardsPool.transfer(msg.sender, toTransferToUser),\n', '                "IouVesting: transfer from rewards pool failed"\n', '            );\n', '            emit RewardsClaimed(msg.sender, toTransferToUser);\n', '            emit RewardsDonated(msg.sender, donationAmount);\n', '\n', '            userEarnings[msg.sender] += totalCurrentUserRewards;\n', '\n', '            availableForfeitedAmount += (totalUserPossibleRewards -\n', '                totalCurrentUserRewards);\n', '        }\n', '\n', '        require(\n', '            _iouPool.transfer(address(_lockedIouPool), amount),\n', '            "IouVesting: transfer from iou pool to locked iou pool failed"\n', '        );\n', '\n', '        userShares[msg.sender] -= amount;\n', '        if (userShares[msg.sender] == uint256(0)) {\n', '            totalUsers--;\n', '        }\n', '    }\n', '\n', '    /**\n', "     * @dev Used for adding user's shares into IouVesting contract\n", '     * @param amount The amount you want to stake\n', '     */\n', '    function stake(uint256 amount) external override {\n', '        require(amount > 0, "IouVesting: You cannot stake 0");\n', '        require(\n', '            _rewardsPool.balance() > 0,\n', '            "IouVesting: No rewards are available"\n', '        );\n', '\n', '        require(\n', '            _iouPool.token().transferFrom(\n', '                msg.sender,\n', '                address(_iouPool),\n', '                amount\n', '            ),\n', '            "IouVesting: transfer into iou pool failed"\n', '        );\n', '\n', '        if (userShares[msg.sender] == uint256(0)) {\n', '            totalUsers++;\n', '        }\n', '        userShares[msg.sender] += amount;\n', '\n', '        emit TokensStaked(msg.sender, amount, totalStaked());\n', '    }\n', '}']