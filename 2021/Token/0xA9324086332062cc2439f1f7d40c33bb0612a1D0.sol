['// SPDX-License-Identifier: MIT\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'import "./AccessControl.sol";\n', '\n', '/**\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'abstract contract Ownable {\n', '    address internal _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == msg.sender, "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev The FeeRouter contract defines the fee schedule of AXIA Coin and calculates\n', ' * the corresponding receiving amounts for sender, receiver and the foundation account.\n', ' */\n', 'contract FeeRouter {\n', '    using SafeMath for uint256;\n', '\n', '    event feeScheduleUpdated(uint256 senderPercentage, uint256 foundationPercentage, uint256 receiverPercentage);\n', '\n', '    uint256 internal _senderPercentage;\n', '    uint256 internal _foundationPercentage;\n', '    uint256 internal _receiverPercentage;\n', '\n', '    /**\n', '     * @dev Creates an instance of `FeeRouter` and initialize fee schedule\n', '     */\n', '    constructor () {\n', '        _senderPercentage = 0;\n', '        _foundationPercentage = 15;\n', '        _receiverPercentage = 985;\n', '    }\n', '\n', '    /**\n', '     * @dev Update the fee schedule. The percentages should be in thousandths*1000.\n', '     * For example, if the desired fee is 2â€°, the input should be 2. Three values\n', '     * MUST sum up to 1000.\n', '     */\n', '    function _updateFeeSchedule(uint256 senderPercentage, uint256 foundationPercentage, uint256 receiverPercentage) internal {\n', '        require(senderPercentage.add(foundationPercentage).add(receiverPercentage) == 1000, "Percentages do not sum up to 1000");\n', '        _senderPercentage = senderPercentage;\n', '        _foundationPercentage = foundationPercentage;\n', '        _receiverPercentage = receiverPercentage;\n', '\n', '        emit feeScheduleUpdated(_senderPercentage, _foundationPercentage, _receiverPercentage);\n', '    }\n', '\n', '    /**\n', '     * @dev Get current fees.\n', '     */\n', '    function getFeeSchedule() public view returns( uint256[3] memory) {\n', '        return [_senderPercentage, _foundationPercentage, _receiverPercentage];\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' */\n', 'contract ERC20 is IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) internal _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _maxTotalSupply;\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     */\n', '    constructor (string memory name_, string memory symbol_, uint256 maxTotalSupply_) {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _maxTotalSupply = maxTotalSupply_;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {}\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender,msg.sender, _allowances[sender][msg.sender].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '        require(_totalSupply.add(amount) <= _maxTotalSupply, "Can not exceed maxTotalSupply");\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev return maxTotalSupply\n', '     */\n', '    function getMaxTotalSupply() public view returns (uint256) {\n', '        return _maxTotalSupply;\n', '    }\n', '}\n', '\n', 'contract AXCToken is ERC20, Ownable, FeeRouter, AccessControl {\n', '    using SafeMath for uint256;\n', '\n', '    address private _foundation;\n', '    mapping (address => bool) private _exemptedAddresses;\n', '\n', '    constructor() ERC20("AXIA COIN", "AXC", 72560000000000000000000000000) {\n', '        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n', '        _foundation = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev mint a new amout of tokens to an account\n', '     */\n', '    function mint(address to, uint256 amount) public onlyOwner {\n', '        _mint(to, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev mint multiple amounts of tokens to a list of accounts\n', '     */\n', '    function multiMint(address[] memory to_list, uint256[] memory amounts) public onlyOwner {\n', '        require(to_list.length == amounts.length, "Lengths mismatch");\n', '        for (uint256 i = 0; i < to_list.length; i++) {\n', '            _mint(to_list[i], amounts[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev update fee schedule by admin\n', '     */\n', '    function updateFeeSchedule(uint256 senderPercentage, uint256 foundationPercentage, uint256 receiverPercentage) public {\n', '        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Caller is not an admin");\n', '        _updateFeeSchedule(senderPercentage, foundationPercentage, receiverPercentage);\n', '    }\n', '\n', '    /**\n', '     * @dev implementation of token transfer\n', '     */\n', '    function transfer(address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(msg.sender, _foundation, amount.mul(_foundationPercentage).div(1000));\n', '        _transfer(msg.sender, recipient, amount.mul(_receiverPercentage).div(1000));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev update foundation account address\n', '     */\n', '    function updateFoundation(address foudnationAddress) public returns (bool) {\n', '        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Caller is not an admin");\n', '        _foundation = foudnationAddress;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev returns foundation account address\n', '     */\n', '    function getFoundation() public view returns (address){\n', '        return _foundation;\n', '    }\n', '\n', '    /**\n', '     * @dev sums a list of uint\n', '     */\n', '    function _sum(uint256[] memory data) private pure returns (uint256) {\n', '        uint256 sum;\n', '        for(uint256 i; i < data.length; i++){\n', '            sum = sum.add(data[i]);\n', '        }\n', '        return sum;\n', '    }\n', '\n', '    /**\n', '     * @dev return whether a user is exempted\n', '     */\n', '    function exempted(address account) view public returns (bool) {\n', '        return _exemptedAddresses[account];\n', '    }\n', '\n', '    /**\n', '     * @dev add self to exempted addresses\n', '     */\n', '    function exemptSelf() public returns (bool) {\n', '        _exemptedAddresses[msg.sender] = true;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev remove self from exempted addresses\n', '     */\n', '    function revertExemptSelf() public returns (bool) {\n', '        delete _exemptedAddresses[msg.sender];\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev update a balances for multiple accounts\n', '     */\n', '    function batchUpdateBalances(address[] memory to_add_list, uint256[] memory to_add_amounts, address[] memory to_sub_list, uint256[] memory to_sub_amounts) public returns (bool) {\n', '        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Caller is not an admin");\n', '        require(_sum(to_add_amounts).sub(_sum(to_sub_amounts), "Not sum up to ZERO") == 0, "Not sum up to ZERO");\n', '\n', '        require(to_add_list.length == to_add_amounts.length, "Lengths mismatch");\n', '        require(to_sub_list.length == to_sub_amounts.length, "Lengths mismatch");\n', '\n', '        for(uint256 i; i < to_sub_list.length; i++){\n', '            require(_exemptedAddresses[to_sub_list[i]] == false, "Exempted");\n', '        }\n', '\n', '        for(uint256 i; i < to_sub_list.length; i++){\n', '            _balances[to_sub_list[i]] = _balances[to_sub_list[i]].sub(to_sub_amounts[i], "Batch sub amount exceeds balance");\n', '        }\n', '\n', '        for(uint256 i; i < to_add_list.length; i++){\n', '            _balances[to_add_list[i]] = _balances[to_add_list[i]].add(to_add_amounts[i]);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev grant admin roles for multiple accounts\n', '     */\n', '    function batchGrantAdmin(address[] memory to_grant_list) public {\n', '        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender) || _owner == msg.sender, "Caller is not an admin or owner");\n', '        for(uint256 i; i < to_grant_list.length; i++){\n', '            _grantRole(DEFAULT_ADMIN_ROLE, to_grant_list[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev revoke admin roles for multiple accounts\n', '     */\n', '    function batchRevokeAdmin(address[] memory to_revoke_list) public {\n', '        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender) || _owner == msg.sender, "Caller is not an admin or owner");\n', '        for(uint256 i; i < to_revoke_list.length; i++){\n', '            _revokeRole(DEFAULT_ADMIN_ROLE, to_revoke_list[i]);\n', '        }\n', '    }\n', '}']