['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-09\n', '*/\n', '\n', '// contracts/ReitCoin.sol\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; \n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '   \n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '}\n', 'library Roles {\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    function add(Role storage role, address account) internal {\n', '        require(!has(role, account), "Roles: account already has role");\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '    function remove(Role storage role, address account) internal {\n', '        require(has(role, account), "Roles: account does not have role");\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '    function has(Role storage role, address account) internal view returns (bool) {\n', '        require(account != address(0), "Roles: account is the zero address");\n', '        return role.bearer[account];\n', '    }\n', '}\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract Pausable is Context {\n', '\n', '    event Paused(address account);\n', '\t\n', '    event Unpaused(address account);\n', '\t\n', '    bool private _paused;\n', '\n', '    constructor () internal {\n', '        _paused = false;\n', '    }\n', '\n', '    function paused() public view virtual returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    modifier whenNotPaused() {\n', '        require(!paused(), "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused() {\n', '        require(paused(), "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    function _pause() internal virtual whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    function _unpause() internal virtual whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '}\n', '\n', 'contract MinterRole is Context {\n', '    using Roles for Roles.Role;\n', '\n', '    event MinterAdded(address indexed account);\n', '    event MinterRemoved(address indexed account);\n', '\n', '    Roles.Role private _minters;\n', '\n', '    constructor () internal {\n', '        _addMinter(_msgSender());\n', '    }\n', '\n', '    modifier onlyMinter() {\n', '        require(isMinter(_msgSender()), "MinterRole: caller does not have the Minter role");\n', '        _;\n', '    }\n', '\n', '    function isMinter(address account) public view returns (bool) {\n', '        return _minters.has(account);\n', '    }\n', '\n', '    function addMinter(address account) public onlyMinter {\n', '        _addMinter(account);\n', '    }\n', '\n', '    function renounceMinter() public {\n', '        _removeMinter(_msgSender());\n', '    }\n', '    \n', '    function _addMinter(address account) internal {\n', '        _minters.add(account);\n', '        emit MinterAdded(account);\n', '    }\n', '\n', '    function _removeMinter(address account) internal {\n', '        _minters.remove(account);\n', '        emit MinterRemoved(account);\n', '    }\n', '  \n', '}\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    function freezeOf(address account) external view returns (uint256);\n', '    function freeze(uint256 amount) external returns (bool);\n', '    function unfreeze(uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Freeze(address indexed from, uint256 value);\n', '    event Unfreeze(address indexed from, uint256 value);\n', '}\n', '\n', '\n', 'contract ERC20 is Context, IERC20, Ownable, Pausable ,MinterRole {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '    mapping (address => uint256) private _freezes;\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    constructor (string memory name_, string memory symbol_) public {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _decimals = 18;\n', '    }\n', '\n', '    function name() public view virtual returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view virtual returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view virtual returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public view virtual override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) public view virtual override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '   function freezeOf(address account) public view virtual override returns (uint256) {\n', '        return _freezes[account];\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    function burn(uint256 amount) public virtual {\n', '        _burn(_msgSender(), amount);\n', '    }\n', '\n', '\n', '    function burnFrom(address account, uint256 amount) public virtual {\n', '        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, "ERC20: burn amount exceeds allowance");\n', '\t\t_approve(account, _msgSender(), decreasedAllowance);\n', '        _burn(account, amount);\n', '    }\n', '\n', '    function freeze(uint256 amount) public virtual override returns (bool) {\n', '        _freeze(_msgSender(), amount);\n', '        return true;\n', '    }\n', '\n', '    function unfreeze(uint256 amount) public virtual override returns (bool) {\n', '        _unfreeze(_msgSender(), amount);\n', '        return true;\n', '    }\n', '\n', '    function distributeToken(address[] memory recipients, uint256[] memory amounts) public  onlyOwner  returns (bool) {\n', '        require(recipients.length == amounts.length, "DistributeToken: recipients and amounts length mismatch");\n', '        require(recipients.length > 0, "DistributeToken: no recipient");\n', '        uint256 totalAmount = 0;\n', '        for (uint256 i = 0; i < amounts.length; i++) {\n', '           totalAmount+=amounts[i];\n', '        }\n', '        require( _balances[_msgSender()] >= totalAmount, "DistributeToken: no enough balance");\n', '\t    for (uint256 i = 0; i < recipients.length; i++) {\n', '           _transfer(_msgSender(), recipients[i], amounts[i]);\n', '        }\n', '\t    return true;\n', '    }\n', '\n', '    function distributeIncreaseAllowance(address[] memory recipients, uint256[] memory amounts) public  onlyOwner  returns (bool) {\n', '        require(recipients.length == amounts.length, "DistributeIncreaseAllowance: recipients and amounts length mismatch");\n', '        require(recipients.length > 0, "DistributeIncreaseAllowance: no recipient");\n', '       \n', '\t    for (uint256 i = 0; i < recipients.length; i++) {\n', '           _approve(_msgSender(), recipients[i], _allowances[_msgSender()][recipients[i]].add(amounts[i]));\n', '        }\n', '\t    return true;\n', '    }\n', '\n', '    function distributeDecreaseAllowance(address[] memory recipients, uint256[] memory amounts) public  onlyOwner  returns (bool) {\n', '        require(recipients.length == amounts.length, "DistributeDecreaseAllowance: recipients and amounts length mismatch");\n', '        require(recipients.length > 0, "DistributeDecreaseAllowance: no recipient");\n', '       \n', '\t    for (uint256 i = 0; i < recipients.length; i++) {\n', '           _approve(_msgSender(), recipients[i], _allowances[_msgSender()][recipients[i]].sub(amounts[i], "ERC20: decreased allowance below zero"));\n', '        }\n', '\t    return true;\n', '    }\n', '\n', '    function mint(address account, uint256 amount) public onlyMinter returns (bool) {\n', '        _mint(account, amount);\n', '        return true;\n', '    }\n', '\n', '    function distributeMintToken(address[] memory recipients, uint256[] memory amounts) public  onlyOwner  returns (bool) {\n', '        require(recipients.length == amounts.length, "DistributeMintToken: recipients and amounts length mismatch");\n', '        require(recipients.length > 0, "DistributeMintToken: no recipient");\n', '                \n', '\t    for (uint256 i = 0; i < recipients.length; i++) {\n', '           _mint(recipients[i], amounts[i]);\n', '        }\n', '\t    return true;\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer to the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\t\trequire(!paused(), "ERC20Pausable: token transfer while paused"); \n', '\t\t_balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '        require(!paused(), "ERC20Pausable: token mint transfer while paused");\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '\t\temit Transfer(address(0), account, amount);\n', '\n', '    }\n', '\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\t\trequire(!paused(), "ERC20Pausable: token burn while paused"); \n', '\t\t_balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '    \n', '    function pause() public virtual onlyOwner {\n', '        _pause();\n', '    }\n', '    \n', '     function unpause() public virtual onlyOwner {\n', '        _unpause();\n', '    }\n', '    \n', '    function _freeze(address sender, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: freeze to the zero address");\n', '        require(!paused(), "ERC20Pausable: token freeze while paused"); \n', '\t\t_balances[sender] = _balances[sender].sub(amount, "ERC20: freeze amount exceeds balance");\n', '        _freezes[sender] = _freezes[sender].add(amount);\n', '        emit Freeze(sender,  amount);\n', '    }\n', '\n', '    function _unfreeze(address sender, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: unfreeze to the zero address");\n', '        require(!paused(), "ERC20Pausable: token unfreeze while paused"); \n', '\t\t_freezes[sender] = _freezes[sender].sub(amount, "ERC20: unfreeze amount exceeds balance");\n', '        _balances[sender] = _balances[sender].add(amount);\n', '        emit Unfreeze(sender,  amount);\n', '    }\n', '}\n', '\n', 'contract ReitCoin is ERC20 {\n', '    constructor() public ERC20("Real Estate Investment Trust backed Crypto Currency", "REIT") {\n', '        _mint(msg.sender, 50000000 * (10 ** 18));\n', '    }\n', '}']