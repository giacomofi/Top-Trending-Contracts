['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-07\n', '*/\n', '\n', '// File: contracts\\@openzeppelin\\GSN\\Context.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: contracts\\@openzeppelin\\access\\Ownable.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    function isOwner(address addr) public view returns(bool){\n', '        return _owner == addr;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts\\@openzeppelin\\utils\\Address.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts\\ProxyOwnable.sol\n', '\n', '//           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n', '//                   Version 2, December 2004\n', '// \n', '//Copyright (C) 2021 ins3project <[email\xa0protected]>\n', '//\n', '//Everyone is permitted to copy and distribute verbatim or modified\n', '//copies of this license document, and changing it is allowed as long\n', '//as the name is changed.\n', '// \n', '//           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n', '//  TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n', '//\n', '// You just DO WHAT THE FUCK YOU WANT TO.\n', 'pragma solidity >=0.6.0 <0.7.0;\n', '\n', '\n', '\n', '\n', 'abstract contract ProxyOwnable is Context{\n', '    using Address for address;\n', '\n', '    Ownable _ownable;\n', '    Ownable _adminable;\n', '\n', '    constructor() public{\n', '        \n', '    }\n', '\n', '    function setOwnable(address ownable) internal{ \n', '        require(ownable!=address(0),"setOwnable should not be 0");\n', '        _ownable=Ownable(ownable);\n', '        if (address(_adminable)==address(0)){\n', '            require(!address(_adminable).isContract(),"admin should not be contract");\n', '            _adminable=Ownable(ownable);\n', '        }\n', '    }\n', '\n', '    function setAdminable(address adminable) internal{\n', '        require(adminable!=address(0),"setOwnable should not be 0");\n', '        _adminable=Ownable(adminable);\n', '    }\n', '    modifier onlyOwner {\n', '        require(address(_ownable)!=address(0),"proxy ownable should not be 0");\n', '        require(_ownable.isOwner(_msgSender()),"Not owner");\n', '        _;\n', '    }\n', '\n', '    modifier onlyAdmin {\n', '        require(address(_adminable)!=address(0),"proxy adminable should not be 0");\n', '        require(_adminable.isOwner(_msgSender()),"Not admin");\n', '        _;\n', '    }\n', '\n', '    function admin() view public returns(address){\n', '        require(address(_adminable)!=address(0),"proxy admin should not be 0");\n', '        return _adminable.owner();\n', '    }\n', '\n', '    function owner() view external returns(address){\n', '        require(address(_ownable)!=address(0),"proxy ownable should not be 0");\n', '        return _ownable.owner();\n', '    }\n', '\n', '    function isOwner(address addr) public view returns(bool){\n', '        require(address(_ownable)!=address(0),"proxy ownable should not be 0");\n', '        return _ownable.isOwner(addr);\n', '    }\n', '\n', '}\n', '\n', '// File: contracts\\ISponsorWhiteListControl.sol\n', '\n', '//           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n', '//                   Version 2, December 2004\n', '// \n', '//Copyright (C) 2021 ins3project <[email\xa0protected]>\n', '//\n', '//Everyone is permitted to copy and distribute verbatim or modified\n', '//copies of this license document, and changing it is allowed as long\n', '//as the name is changed.\n', '// \n', '//           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n', '//  TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n', '//\n', '// You just DO WHAT THE FUCK YOU WANT TO.\n', 'pragma solidity ^0.6.0;\n', '\n', 'interface ISponsorWhiteListControl {\n', '    function getSponsorForGas(address contractAddr) external view returns (address);\n', '    function getSponsoredBalanceForGas(address contractAddr) external view returns (uint) ;\n', '    function getSponsoredGasFeeUpperBound(address contractAddr) external view returns (uint) ;\n', '    function getSponsorForCollateral(address contractAddr) external view returns (address) ;\n', '    function getSponsoredBalanceForCollateral(address contractAddr) external view returns (uint) ;\n', '    function isWhitelisted(address contractAddr, address user) external view returns (bool) ;\n', '    function isAllWhitelisted(address contractAddr) external view returns (bool) ;\n', '    function addPrivilegeByAdmin(address contractAddr, address[] memory addresses) external ;\n', '    function removePrivilegeByAdmin(address contractAddr, address[] memory addresses) external ;\n', '    function setSponsorForGas(address contractAddr, uint upperBound) external payable ;\n', '    function setSponsorForCollateral(address contractAddr) external payable ;\n', '    function addPrivilege(address[] memory) external ;\n', '    function removePrivilege(address[] memory) external ;\n', '}\n', '\n', '// File: contracts\\Ins3Pausable.sol\n', '\n', '//           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n', '//                   Version 2, December 2004\n', '// \n', '//Copyright (C) 2021 ins3project <[email\xa0protected]>\n', '//\n', '//Everyone is permitted to copy and distribute verbatim or modified\n', '//copies of this license document, and changing it is allowed as long\n', '//as the name is changed.\n', '// \n', '//           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n', '//  TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n', '//\n', '// You just DO WHAT THE FUCK YOU WANT TO.\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', 'contract Ins3Pausable is  ProxyOwnable{\n', '    event Paused(address account);\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    constructor () internal {\n', '        _paused = false;\n', '    }\n', '\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    function pause() public onlyAdmin whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    function unpause() public onlyAdmin whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '\n', '    function initSponsor() public{ \n', '        ISponsorWhiteListControl SPONSOR = ISponsorWhiteListControl(address(0x0888000000000000000000000000000000000001));\n', '        address[] memory users = new address[](1);\n', '        users[0] = address(0);\n', '        SPONSOR.addPrivilege(users);\n', '    }\n', '}\n', '\n', '// File: contracts\\Ins3Register.sol\n', '\n', '//           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n', '//                   Version 2, December 2004\n', '// \n', '//Copyright (C) 2021 ins3project <[email\xa0protected]>\n', '//\n', '//Everyone is permitted to copy and distribute verbatim or modified\n', '//copies of this license document, and changing it is allowed as long\n', '//as the name is changed.\n', '// \n', '//           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n', '//  TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n', '//\n', '// You just DO WHAT THE FUCK YOU WANT TO.\n', 'pragma solidity >=0.6.0 <0.7.0;\n', '\n', '\n', 'contract Ins3Register is Ins3Pausable \n', '{\n', '    mapping(bytes8=>address) _contracts;\n', '\n', '    bytes8 [] _allContractNames;\n', '    uint256 public count;\n', '    constructor(address ownable) Ins3Pausable() public{\n', '        setOwnable(ownable);\n', '    }\n', '\n', '    function contractNames() view public returns( bytes8[] memory){\n', '        bytes8 [] memory names=new bytes8[](count);\n', '        uint256 j=0;\n', '        for (uint256 i=0;i<_allContractNames.length;++i){\n', '            bytes8 name=_allContractNames[i];\n', '            if (_contracts[name]!=address(0)){\n', '                names[j]=name;\n', '                j+=1;  \n', '            }\n', '        }\n', '        return names;\n', '    }\n', '\n', '    function registerContract(bytes8 name, address contractAddr) onlyOwner public{\n', '        require(_contracts[name]==address(0),"This name contract already exists"); \n', '        _contracts[name]=contractAddr;\n', '        _allContractNames.push(name);\n', '        count +=1;\n', '    }\n', '\n', '    function unregisterContract(bytes8 name) onlyOwner public {\n', '        require(_contracts[name]!=address(0),"This name contract not exists"); \n', '        delete _contracts[name];\n', '        count -=1;\n', '    }\n', '\n', '    function hasContract(bytes8 name) view public returns(bool){\n', '        return _contracts[name]!=address(0);\n', '    }\n', '\n', '    function getContract(bytes8 name) view public returns(address){\n', '        return _contracts[name];\n', '    }\n', '\n', '\n', '}\n', '\n', '// File: contracts\\IUpgradable.sol\n', '\n', '//           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n', '//                   Version 2, December 2004\n', '// \n', '//Copyright (C) 2021 ins3project <[email\xa0protected]>\n', '//\n', '//Everyone is permitted to copy and distribute verbatim or modified\n', '//copies of this license document, and changing it is allowed as long\n', '//as the name is changed.\n', '// \n', '//           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n', '//  TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n', '//\n', '// You just DO WHAT THE FUCK YOU WANT TO.\n', 'pragma solidity >=0.6.0 <0.7.0;\n', '\n', '\n', '\n', 'abstract contract IUpgradable is Ins3Pausable{\n', '\n', '    Ins3Register public register;\n', '    address public registerAddress;\n', '\n', '\n', '    function  updateDependentContractAddress() public virtual;  \n', '\n', '    function updateRegisterAddress(address registerAddr) external {\n', '        if (address(register) != address(0)) {\n', '            require(register.isOwner(_msgSender()), "Just the register\'s owner can call the updateRegisterAddress()"); \n', '        }\n', '        register = Ins3Register(registerAddr);\n', '        setOwnable(registerAddr);\n', '        registerAddress=registerAddr;\n', '        updateDependentContractAddress();\n', '    }\n', '\n', '}\n', '\n', '// File: contracts\\@openzeppelin\\math\\SafeMath.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts\\@openzeppelin\\token\\ERC777\\IERC777.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC777Token standard as defined in the EIP.\n', ' *\n', ' * This contract uses the\n', ' * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\n', ' * token holders and recipients react to token movements by using setting implementers\n', ' * for the associated interfaces in said registry. See {IERC1820Registry} and\n', ' * {ERC1820Implementer}.\n', ' */\n', 'interface IERC777 {\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the smallest part of the token that is not divisible. This\n', '     * means all token operations (creation, movement and destruction) must have\n', '     * amounts that are a multiple of this number.\n', '     *\n', '     * For most token contracts, this value will equal 1.\n', '     */\n', '    function granularity() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by an account (`owner`).\n', '     */\n', '    function balanceOf(address owner) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * If send or receive hooks are registered for the caller and `recipient`,\n', '     * the corresponding functions will be called with `data` and empty\n', '     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n', '     *\n', '     * Emits a {Sent} event.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - the caller must have at least `amount` tokens.\n', '     * - `recipient` cannot be the zero address.\n', '     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n', '     * interface.\n', '     */\n', '    function send(address recipient, uint256 amount, bytes calldata data) external;\n', '\n', '    /**\n', "     * @dev Destroys `amount` tokens from the caller's account, reducing the\n", '     * total supply.\n', '     *\n', '     * If a send hook is registered for the caller, the corresponding function\n', '     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\n', '     *\n', '     * Emits a {Burned} event.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - the caller must have at least `amount` tokens.\n', '     */\n', '    function burn(uint256 amount, bytes calldata data) external;\n', '\n', '    /**\n', '     * @dev Returns true if an account is an operator of `tokenHolder`.\n', '     * Operators can send and burn tokens on behalf of their owners. All\n', '     * accounts are their own operator.\n', '     *\n', '     * See {operatorSend} and {operatorBurn}.\n', '     */\n', '    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\n', '\n', '    /**\n', '     * @dev Make an account an operator of the caller.\n', '     *\n', '     * See {isOperatorFor}.\n', '     *\n', '     * Emits an {AuthorizedOperator} event.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `operator` cannot be calling address.\n', '     */\n', '    function authorizeOperator(address operator) external;\n', '\n', '    /**\n', "     * @dev Revoke an account's operator status for the caller.\n", '     *\n', '     * See {isOperatorFor} and {defaultOperators}.\n', '     *\n', '     * Emits a {RevokedOperator} event.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `operator` cannot be calling address.\n', '     */\n', '    function revokeOperator(address operator) external;\n', '\n', '    /**\n', '     * @dev Returns the list of default operators. These accounts are operators\n', '     * for all token holders, even if {authorizeOperator} was never called on\n', '     * them.\n', '     *\n', '     * This list is immutable, but individual holders may revoke these via\n', '     * {revokeOperator}, in which case {isOperatorFor} will return false.\n', '     */\n', '    function defaultOperators() external view returns (address[] memory);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\n', '     * be an operator of `sender`.\n', '     *\n', '     * If send or receive hooks are registered for `sender` and `recipient`,\n', '     * the corresponding functions will be called with `data` and\n', '     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\n', '     *\n', '     * Emits a {Sent} event.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `sender` must have at least `amount` tokens.\n', '     * - the caller must be an operator for `sender`.\n', '     * - `recipient` cannot be the zero address.\n', '     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\n', '     * interface.\n', '     */\n', '    function operatorSend(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount,\n', '        bytes calldata data,\n', '        bytes calldata operatorData\n', '    ) external;\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\n', '     * The caller must be an operator of `account`.\n', '     *\n', '     * If a send hook is registered for `account`, the corresponding function\n', '     * will be called with `data` and `operatorData`. See {IERC777Sender}.\n', '     *\n', '     * Emits a {Burned} event.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     * - the caller must be an operator for `account`.\n', '     */\n', '    function operatorBurn(\n', '        address account,\n', '        uint256 amount,\n', '        bytes calldata data,\n', '        bytes calldata operatorData\n', '    ) external;\n', '\n', '    event Sent(\n', '        address indexed operator,\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 amount,\n', '        bytes data,\n', '        bytes operatorData\n', '    );\n', '\n', '    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\n', '\n', '    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\n', '\n', '    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\n', '\n', '    event RevokedOperator(address indexed operator, address indexed tokenHolder);\n', '}\n', '\n', '// File: contracts\\@openzeppelin\\token\\ERC777\\IERC777Recipient.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\n', ' *\n', ' * Accounts can be notified of {IERC777} tokens being sent to them by having a\n', ' * contract implement this interface (contract holders can be their own\n', ' * implementer) and registering it on the\n', ' * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\n', ' *\n', ' * See {IERC1820Registry} and {ERC1820Implementer}.\n', ' */\n', 'interface IERC777Recipient {\n', '    /**\n', '     * @dev Called by an {IERC777} token contract whenever tokens are being\n', '     * moved or created into a registered account (`to`). The type of operation\n', '     * is conveyed by `from` being the zero address or not.\n', '     *\n', "     * This call occurs _after_ the token contract's state is updated, so\n", '     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\n', '     *\n', '     * This function may revert to prevent the operation from being executed.\n', '     */\n', '    function tokensReceived(\n', '        address operator,\n', '        address from,\n', '        address to,\n', '        uint256 amount,\n', '        bytes calldata userData,\n', '        bytes calldata operatorData\n', '    ) external;\n', '}\n', '\n', '// File: contracts\\@openzeppelin\\token\\ERC777\\IERC777Sender.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC777TokensSender standard as defined in the EIP.\n', ' *\n', ' * {IERC777} Token holders can be notified of operations performed on their\n', ' * tokens by having a contract implement this interface (contract holders can be\n', ' *  their own implementer) and registering it on the\n', ' * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\n', ' *\n', ' * See {IERC1820Registry} and {ERC1820Implementer}.\n', ' */\n', 'interface IERC777Sender {\n', '    /**\n', "     * @dev Called by an {IERC777} token contract whenever a registered holder's\n", '     * (`from`) tokens are about to be moved or destroyed. The type of operation\n', '     * is conveyed by `to` being the zero address or not.\n', '     *\n', "     * This call occurs _before_ the token contract's state is updated, so\n", '     * {IERC777-balanceOf}, etc., can be used to query the pre-operation state.\n', '     *\n', '     * This function may revert to prevent the operation from being executed.\n', '     */\n', '    function tokensToSend(\n', '        address operator,\n', '        address from,\n', '        address to,\n', '        uint256 amount,\n', '        bytes calldata userData,\n', '        bytes calldata operatorData\n', '    ) external;\n', '}\n', '\n', '// File: contracts\\@openzeppelin\\token\\ERC20\\IERC20.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts\\@openzeppelin\\introspection\\IERC1820Registry.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the global ERC1820 Registry, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\n', ' * implementers for interfaces in this registry, as well as query support.\n', ' *\n', ' * Implementers may be shared by multiple accounts, and can also implement more\n', ' * than a single interface for each account. Contracts can implement interfaces\n', ' * for themselves, but externally-owned accounts (EOA) must delegate this to a\n', ' * contract.\n', ' *\n', ' * {IERC165} interfaces can also be queried via the registry.\n', ' *\n', ' * For an in-depth explanation and source code analysis, see the EIP text.\n', ' */\n', 'interface IERC1820Registry {\n', '    /**\n', '     * @dev Sets `newManager` as the manager for `account`. A manager of an\n', '     * account is able to set interface implementers for it.\n', '     *\n', '     * By default, each account is its own manager. Passing a value of `0x0` in\n', '     * `newManager` will reset the manager to this initial state.\n', '     *\n', '     * Emits a {ManagerChanged} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the caller must be the current manager for `account`.\n', '     */\n', '    function setManager(address account, address newManager) external;\n', '\n', '    /**\n', '     * @dev Returns the manager for `account`.\n', '     *\n', '     * See {setManager}.\n', '     */\n', '    function getManager(address account) external view returns (address);\n', '\n', '    /**\n', "     * @dev Sets the `implementer` contract as ``account``'s implementer for\n", '     * `interfaceHash`.\n', '     *\n', "     * `account` being the zero address is an alias for the caller's address.\n", '     * The zero address can also be used in `implementer` to remove an old one.\n', '     *\n', '     * See {interfaceHash} to learn how these are created.\n', '     *\n', '     * Emits an {InterfaceImplementerSet} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the caller must be the current manager for `account`.\n', '     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\n', '     * end in 28 zeroes).\n', '     * - `implementer` must implement {IERC1820Implementer} and return true when\n', '     * queried for support, unless `implementer` is the caller. See\n', '     * {IERC1820Implementer-canImplementInterfaceForAddress}.\n', '     */\n', '    function setInterfaceImplementer(address account, bytes32 interfaceHash, address implementer) external;\n', '\n', '    /**\n', '     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\n', '     * implementer is registered, returns the zero address.\n', '     *\n', '     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\n', '     * zeroes), `account` will be queried for support of it.\n', '     *\n', "     * `account` being the zero address is an alias for the caller's address.\n", '     */\n', '    function getInterfaceImplementer(address account, bytes32 interfaceHash) external view returns (address);\n', '\n', '    /**\n', '     * @dev Returns the interface hash for an `interfaceName`, as defined in the\n', '     * corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\n', '     */\n', '    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\n', '\n', '    /**\n', '     *  @notice Updates the cache with whether the contract implements an ERC165 interface or not.\n', '     *  @param account Address of the contract for which to update the cache.\n', '     *  @param interfaceId ERC165 interface for which to update the cache.\n', '     */\n', '    function updateERC165Cache(address account, bytes4 interfaceId) external;\n', '\n', '    /**\n', '     *  @notice Checks whether a contract implements an ERC165 interface or not.\n', '     *  If the result is not cached a direct lookup on the contract address is performed.\n', '     *  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\n', '     *  {updateERC165Cache} with the contract address.\n', '     *  @param account Address of the contract to check.\n', '     *  @param interfaceId ERC165 interface to check.\n', '     *  @return True if `account` implements `interfaceId`, false otherwise.\n', '     */\n', '    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\n', '\n', '    /**\n', '     *  @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\n', '     *  @param account Address of the contract to check.\n', '     *  @param interfaceId ERC165 interface to check.\n', '     *  @return True if `account` implements `interfaceId`, false otherwise.\n', '     */\n', '    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\n', '\n', '    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\n', '\n', '    event ManagerChanged(address indexed account, address indexed newManager);\n', '}\n', '\n', '// File: contracts\\@openzeppelin\\introspection\\IERC1820Implementer.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface for an ERC1820 implementer, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-1820#interface-implementation-erc1820implementerinterface[EIP].\n', ' * Used by contracts that will be registered as implementers in the\n', ' * {IERC1820Registry}.\n', ' */\n', 'interface IERC1820Implementer {\n', '    /**\n', '     * @dev Returns a special value (`ERC1820_ACCEPT_MAGIC`) if this contract\n', '     * implements `interfaceHash` for `account`.\n', '     *\n', '     * See {IERC1820Registry-setInterfaceImplementer}.\n', '     */\n', '    function canImplementInterfaceForAddress(bytes32 interfaceHash, address account) external view returns (bytes32);\n', '}\n', '\n', '// File: contracts\\@openzeppelin\\introspection\\ERC1820Registry.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.7.0;\n', '\n', '\n', '\n', '// // @dev The interface a contract MUST implement if it is the implementer of\n', '// // some (other) interface for any address other than itself.\n', '// interface ERC1820ImplementerInterface {\n', "//     // @notice Indicates whether the contract implements the interface 'interfaceHash' for the address 'addr' or not.\n", '//     // @param interfaceHash keccak256 hash of the name of the interface\n', '//     // @param addr Address for which the contract will implement the interface\n', "//     // @return ERC1820_ACCEPT_MAGIC only if the contract implements 'interfaceHash' for the address 'addr'.\n", '//     function canImplementInterfaceForAddress(bytes32 interfaceHash, address addr) external view returns(bytes32);\n', '// }\n', '\n', '\n', '// @title ERC1820 Pseudo-introspection Registry Contract\n', '// @author Jordi Baylina and Jacques Dafflon\n', '// @notice This contract is the official implementation of the ERC1820 Registry.\n', '// @notice For more details, see https://eips.ethereum.org/EIPS/eip-1820\n', 'contract ERC1820Registry is IERC1820Registry{\n', '    // @notice ERC165 Invalid ID.\n', '    bytes4 constant internal INVALID_ID = 0xffffffff;\n', "    // @notice Method ID for the ERC165 supportsInterface method (= `bytes4(keccak256('supportsInterface(bytes4)'))`).\n", '    bytes4 constant internal ERC165ID = 0x01ffc9a7;\n', '    // @notice Magic value which is returned if a contract implements an interface on behalf of some other address.\n', '    bytes32 constant internal ERC1820_ACCEPT_MAGIC = keccak256(abi.encodePacked("ERC1820_ACCEPT_MAGIC"));\n', '\n', '    // @notice mapping from addresses and interface hashes to their implementers.\n', '    mapping(address => mapping(bytes32 => address)) internal interfaces;\n', '    // @notice mapping from addresses to their manager.\n', '    mapping(address => address) internal managers;\n', '    // @notice flag for each address and erc165 interface to indicate if it is cached.\n', '    mapping(address => mapping(bytes4 => bool)) internal erc165Cached;\n', '\n', "    // @notice Indicates a contract is the 'implementer' of 'interfaceHash' for 'addr'.\n", '    event InterfaceImplementerSet(address indexed addr, bytes32 indexed interfaceHash, address indexed implementer);\n', "    // @notice Indicates 'newManager' is the address of the new manager for 'addr'.\n", '    event ManagerChanged(address indexed addr, address indexed newManager);\n', '\n', '    // @notice Query if an address implements an interface and through which contract.\n', '    // @param _addr Address being queried for the implementer of an interface.\n', "    // (If '_addr' is the zero address then 'msg.sender' is assumed.)\n", '    // @param _interfaceHash Keccak256 hash of the name of the interface as a string.\n', '    // E.g., \'web3.utils.keccak256("ERC777TokensRecipient")\' for the \'ERC777TokensRecipient\' interface.\n', "    // @return The address of the contract which implements the interface '_interfaceHash' for '_addr'\n", "    // or '0' if '_addr' did not register an implementer for this interface.\n", '    function getInterfaceImplementer(address _addr, bytes32 _interfaceHash) external view override  returns (address) {\n', '        address addr = _addr == address(0) ? msg.sender : _addr;\n', '        if (isERC165Interface(_interfaceHash)) {\n', '            bytes4 erc165InterfaceHash = bytes4(_interfaceHash);\n', '            return implementsERC165Interface(addr, erc165InterfaceHash) ? addr : address(0);\n', '        }\n', '        return interfaces[addr][_interfaceHash];\n', '    }\n', '\n', '    // @notice Sets the contract which implements a specific interface for an address.\n', '    // Only the manager defined for that address can set it.\n', '    // (Each address is the manager for itself until it sets a new manager.)\n', '    // @param _addr Address for which to set the interface.\n', "    // (If '_addr' is the zero address then 'msg.sender' is assumed.)\n", '    // @param _interfaceHash Keccak256 hash of the name of the interface as a string.\n', '    // E.g., \'web3.utils.keccak256("ERC777TokensRecipient")\' for the \'ERC777TokensRecipient\' interface.\n', "    // @param _implementer Contract address implementing '_interfaceHash' for '_addr'.\n", '    function setInterfaceImplementer(address _addr, bytes32 _interfaceHash, address _implementer) external override {\n', '        address addr = _addr == address(0) ? msg.sender : _addr;\n', '        require(getManager(addr) == msg.sender, "Not the manager");\n', '\n', '        require(!isERC165Interface(_interfaceHash), "Must not be an ERC165 hash");\n', '        if (_implementer != address(0) && _implementer != msg.sender) {\n', '            require(\n', '                IERC1820Implementer(_implementer)\n', '                    .canImplementInterfaceForAddress(_interfaceHash, addr) == ERC1820_ACCEPT_MAGIC,\n', '                "Does not implement the interface"\n', '            );\n', '        }\n', '        interfaces[addr][_interfaceHash] = _implementer;\n', '        emit InterfaceImplementerSet(addr, _interfaceHash, _implementer);\n', '    }\n', '\n', "    // @notice Sets '_newManager' as manager for '_addr'.\n", "    // The new manager will be able to call 'setInterfaceImplementer' for '_addr'.\n", '    // @param _addr Address for which to set the new manager.\n', "    // @param _newManager Address of the new manager for 'addr'. (Pass '0x0' to reset the manager to '_addr'.)\n", '    function setManager(address _addr, address _newManager) external override {\n', '        require(getManager(_addr) == msg.sender, "Not the manager");\n', '        managers[_addr] = _newManager == _addr ? address(0) : _newManager;\n', '        emit ManagerChanged(_addr, _newManager);\n', '    }\n', '\n', '    // @notice Get the manager of an address.\n', '    // @param _addr Address for which to return the manager.\n', '    // @return Address of the manager for a given address.\n', '    function getManager(address _addr) public view override  returns(address) {\n', '        // By default the manager of an address is the same address\n', '        if (managers[_addr] == address(0)) {\n', '            return _addr;\n', '        } else {\n', '            return managers[_addr];\n', '        }\n', '    }\n', '\n', '    // @notice Compute the keccak256 hash of an interface given its name.\n', '    // @param _interfaceName Name of the interface.\n', '    // @return The keccak256 hash of an interface name.\n', '    function interfaceHash(string calldata _interfaceName) external pure override returns(bytes32) {\n', '        return keccak256(abi.encodePacked(_interfaceName));\n', '    }\n', '\n', '    /* --- ERC165 Related Functions --- */\n', '    /* --- Developed in collaboration with William Entriken. --- */\n', '\n', '    // @notice Updates the cache with whether the contract implements an ERC165 interface or not.\n', '    // @param _contract Address of the contract for which to update the cache.\n', '    // @param _interfaceId ERC165 interface for which to update the cache.\n', '    function updateERC165Cache(address _contract, bytes4 _interfaceId) external override {\n', '        interfaces[_contract][_interfaceId] = implementsERC165InterfaceNoCache(\n', '            _contract, _interfaceId) ? _contract : address(0);\n', '        erc165Cached[_contract][_interfaceId] = true;\n', '    }\n', '\n', '    // @notice Checks whether a contract implements an ERC165 interface or not.\n', '    //  If the result is not cached a direct lookup on the contract address is performed.\n', '    //  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\n', "    //  'updateERC165Cache' with the contract address.\n", '    // @param _contract Address of the contract to check.\n', '    // @param _interfaceId ERC165 interface to check.\n', "    // @return True if '_contract' implements '_interfaceId', false otherwise.\n", '    function implementsERC165Interface(address _contract, bytes4 _interfaceId) public view override returns (bool) {\n', '        if (!erc165Cached[_contract][_interfaceId]) {\n', '            return implementsERC165InterfaceNoCache(_contract, _interfaceId);\n', '        }\n', '        return interfaces[_contract][_interfaceId] == _contract;\n', '    }\n', '\n', '    // @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\n', '    // @param _contract Address of the contract to check.\n', '    // @param _interfaceId ERC165 interface to check.\n', "    // @return True if '_contract' implements '_interfaceId', false otherwise.\n", '    function implementsERC165InterfaceNoCache(address _contract, bytes4 _interfaceId) public view override returns (bool) {\n', '        uint256 success;\n', '        uint256 result;\n', '\n', '        (success, result) = noThrowCall(_contract, ERC165ID);\n', '        if (success == 0 || result == 0) {\n', '            return false;\n', '        }\n', '\n', '        (success, result) = noThrowCall(_contract, INVALID_ID);\n', '        if (success == 0 || result != 0) {\n', '            return false;\n', '        }\n', '\n', '        (success, result) = noThrowCall(_contract, _interfaceId);\n', '        if (success == 1 && result == 1) {\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    // @notice Checks whether the hash is a ERC165 interface (ending with 28 zeroes) or not.\n', '    // @param _interfaceHash The hash to check.\n', "    // @return True if '_interfaceHash' is an ERC165 interface (ending with 28 zeroes), false otherwise.\n", '    function isERC165Interface(bytes32 _interfaceHash) internal pure returns (bool) {\n', '        return _interfaceHash & 0x00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0;\n', '    }\n', '\n', '    // @dev Make a call on a contract without throwing if the function does not exist.\n', '    function noThrowCall(address _contract, bytes4 _interfaceId)\n', '        internal view returns (uint256 success, uint256 result)\n', '    {\n', '        bytes4 erc165ID = ERC165ID;\n', '\n', '        assembly {\n', '            let x := mload(0x40)               // Find empty storage location using "free memory pointer"\n', '            mstore(x, erc165ID)                // Place signature at beginning of empty storage\n', '            mstore(add(x, 0x04), _interfaceId) // Place first argument directly next to signature\n', '\n', '            success := staticcall(\n', '                30000,                         // 30k gas\n', '                _contract,                     // To addr\n', '                x,                             // Inputs are stored at location x\n', '                0x24,                          // Inputs are 36 (4 + 32) bytes long\n', '                x,                             // Store output over input (saves space)\n', '                0x20                           // Outputs are 32 bytes long\n', '            )\n', '\n', '            result := mload(x)                 // Load the result\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts\\@openzeppelin\\token\\ERC777\\ERC777.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC777} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' *\n', ' * Support for ERC20 is included in this contract, as specified by the EIP: both\n', ' * the ERC777 and ERC20 interfaces can be safely used when interacting with it.\n', ' * Both {IERC777-Sent} and {IERC20-Transfer} events are emitted on token\n', ' * movements.\n', ' *\n', ' * Additionally, the {IERC777-granularity} value is hard-coded to `1`, meaning that there\n', ' * are no special restrictions in the amount of tokens that created, moved, or\n', ' * destroyed. This makes integration with ERC20 applications seamless.\n', ' */\n', 'contract ERC777 is Context, IERC777, IERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    IERC1820Registry internal _ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n', '\n', '    mapping(address => uint256) private _balances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '\n', "    // We inline the result of the following hashes because Solidity doesn't resolve them at compile time.\n", '    // See https://github.com/ethereum/solidity/issues/4024.\n', '\n', '    // keccak256("ERC777TokensSender")\n', '    bytes32 constant private _TOKENS_SENDER_INTERFACE_HASH =\n', '        0x29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe895;\n', '\n', '    // keccak256("ERC777TokensRecipient")\n', '    bytes32 constant private _TOKENS_RECIPIENT_INTERFACE_HASH =\n', '        0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b;\n', '\n', "    // This isn't ever read from - it's only used to respond to the defaultOperators query.\n", '    address[] private _defaultOperatorsArray;\n', '\n', '    // Immutable, but accounts may revoke them (tracked in __revokedDefaultOperators).\n', '    mapping(address => bool) private _defaultOperators;\n', '\n', '    // For each account, a mapping of its operators and revoked default operators.\n', '    mapping(address => mapping(address => bool)) private _operators;\n', '    mapping(address => mapping(address => bool)) private _revokedDefaultOperators;\n', '\n', '    // ERC20-allowances\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    /**\n', '     * @dev `defaultOperators` may be an empty array.\n', '     * @dev `ERC1820RegistryAddress` may be zero address (for real blockchain)  added on 2020/8/25\n', '     */\n', '    constructor(\n', '        string memory name,\n', '        string memory symbol,\n', '        address[] memory defaultOperators,\n', '        address ERC1820RegistryAddress\n', '    ) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '\n', '        _defaultOperatorsArray = defaultOperators;\n', '        for (uint256 i = 0; i < _defaultOperatorsArray.length; i++) {\n', '            _defaultOperators[_defaultOperatorsArray[i]] = true;\n', '        }\n', '\n', '        if (ERC1820RegistryAddress!=address(0)){  //for development , use the ERC1820Registry we deployed. added on 2020/08/30\n', '            _ERC1820_REGISTRY=IERC1820Registry(ERC1820RegistryAddress);\n', '        }\n', '        // register interfaces\n', '        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256("ERC777Token"), address(this));\n', '        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256("ERC20Token"), address(this));\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC777-name}.\n', '     */\n', '    function name() public view override returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC777-symbol}.\n', '     */\n', '    function symbol() public view override returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev See {ERC20-decimals}.\n', '     *\n', '     * Always returns 18, as per the\n', '     * [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility).\n', '     */\n', '    function decimals() public pure returns (uint8) {\n', '        return 18;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC777-granularity}.\n', '     *\n', '     * This implementation always returns `1`.\n', '     */\n', '    function granularity() public view override returns (uint256) {\n', '        return 1;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC777-totalSupply}.\n', '     */\n', '    function totalSupply() public view override(IERC20, IERC777) returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by an account (`tokenHolder`).\n', '     */\n', '    function balanceOf(address tokenHolder) public view override(IERC20, IERC777) returns (uint256) {\n', '        return _balances[tokenHolder];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC777-send}.\n', '     *\n', '     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\n', '     */\n', '    function send(address recipient, uint256 amount, bytes memory data) public override  {\n', '        _send(_msgSender(), recipient, amount, data, "", true);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient}\n', '     * interface if it is a contract.\n', '     *\n', '     * Also emits a {Sent} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public override returns (bool) {\n', '        require(recipient != address(0), "ERC777: transfer to the zero address");\n', '\n', '        address from = _msgSender();\n', '\n', '        _callTokensToSend(from, from, recipient, amount, "", "");\n', '\n', '        _move(from, from, recipient, amount, "", "");\n', '\n', '        _callTokensReceived(from, from, recipient, amount, "", "", false);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC777-burn}.\n', '     *\n', '     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\n', '     */\n', '    function burn(uint256 amount, bytes memory data) public override  {\n', '        _burn(_msgSender(), amount, data, "");\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC777-isOperatorFor}.\n', '     */\n', '    function isOperatorFor(\n', '        address operator,\n', '        address tokenHolder\n', '    ) public view override returns (bool) {\n', '        return operator == tokenHolder ||\n', '            (_defaultOperators[operator] && !_revokedDefaultOperators[tokenHolder][operator]) ||\n', '            _operators[tokenHolder][operator];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC777-authorizeOperator}.\n', '     */\n', '    function authorizeOperator(address operator) public override  {\n', '        require(_msgSender() != operator, "ERC777: authorizing self as operator");\n', '\n', '        if (_defaultOperators[operator]) {\n', '            delete _revokedDefaultOperators[_msgSender()][operator];\n', '        } else {\n', '            _operators[_msgSender()][operator] = true;\n', '        }\n', '\n', '        emit AuthorizedOperator(operator, _msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC777-revokeOperator}.\n', '     */\n', '    function revokeOperator(address operator) public override  {\n', '        require(operator != _msgSender(), "ERC777: revoking self as operator");\n', '\n', '        if (_defaultOperators[operator]) {\n', '            _revokedDefaultOperators[_msgSender()][operator] = true;\n', '        } else {\n', '            delete _operators[_msgSender()][operator];\n', '        }\n', '\n', '        emit RevokedOperator(operator, _msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC777-defaultOperators}.\n', '     */\n', '    function defaultOperators() public view override returns (address[] memory) {\n', '        return _defaultOperatorsArray;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC777-operatorSend}.\n', '     *\n', '     * Emits {Sent} and {IERC20-Transfer} events.\n', '     */\n', '    function operatorSend(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount,\n', '        bytes memory data,\n', '        bytes memory operatorData\n', '    )\n', '    public override\n', '    {\n', '        require(isOperatorFor(_msgSender(), sender), "ERC777: caller is not an operator for holder");\n', '        _send(sender, recipient, amount, data, operatorData, true);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC777-operatorBurn}.\n', '     *\n', '     * Emits {Burned} and {IERC20-Transfer} events.\n', '     */\n', '    function operatorBurn(address account, uint256 amount, bytes memory data, bytes memory operatorData) public override {\n', '        require(isOperatorFor(_msgSender(), account), "ERC777: caller is not an operator for holder");\n', '        _burn(account, amount, data, operatorData);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     *\n', '     * Note that operator and allowance concepts are orthogonal: operators may\n', '     * not have allowance, and accounts with allowance may not be operators\n', '     * themselves.\n', '     */\n', '    function allowance(address holder, address spender) public view override returns (uint256) {\n', '        return _allowances[holder][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Note that accounts cannot have allowance issued by their operators.\n', '     */\n', '    function approve(address spender, uint256 value) public override returns (bool) {\n', '        address holder = _msgSender();\n', '        _approve(holder, spender, value);\n', '        return true;\n', '    }\n', '\n', '   /**\n', '    * @dev See {IERC20-transferFrom}.\n', '    *\n', '    * Note that operator and allowance concepts are orthogonal: operators cannot\n', '    * call `transferFrom` (unless they have allowance), and accounts with\n', '    * allowance cannot call `operatorSend` (unless they are operators).\n', '    *\n', '    * Emits {Sent}, {IERC20-Transfer} and {IERC20-Approval} events.\n', '    */\n', '    function transferFrom(address holder, address recipient, uint256 amount) public override returns (bool) {\n', '        require(recipient != address(0), "ERC777: transfer to the zero address");\n', '        require(holder != address(0), "ERC777: transfer from the zero address");\n', '\n', '        address spender = _msgSender();\n', '\n', '        _callTokensToSend(spender, holder, recipient, amount, "", "");\n', '\n', '        _move(spender, holder, recipient, amount, "", "");\n', '        _approve(holder, spender, _allowances[holder][spender].sub(amount, "ERC777: transfer amount exceeds allowance"));\n', '\n', '        _callTokensReceived(spender, holder, recipient, amount, "", "", false);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * If a send hook is registered for `account`, the corresponding function\n', '     * will be called with `operator`, `data` and `operatorData`.\n', '     *\n', '     * See {IERC777Sender} and {IERC777Recipient}.\n', '     *\n', '     * Emits {Minted} and {IERC20-Transfer} events.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - if `account` is a contract, it must implement the {IERC777Recipient}\n', '     * interface.\n', '     */\n', '    function _mint(\n', '        address account,\n', '        uint256 amount,\n', '        bytes memory userData,\n', '        bytes memory operatorData\n', '    )\n', '    internal virtual\n', '    {\n', '        require(account != address(0), "ERC777: mint to the zero address");\n', '\n', '        address operator = _msgSender();\n', '\n', '        _beforeTokenTransfer(operator, address(0), account, amount);\n', '\n', '        // Update state variables\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '\n', '        _callTokensReceived(operator, address(0), account, amount, userData, operatorData, true);\n', '\n', '        emit Minted(operator, account, amount, userData, operatorData);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Send tokens\n', '     * @param from address token holder address\n', '     * @param to address recipient address\n', '     * @param amount uint256 amount of tokens to transfer\n', '     * @param userData bytes extra information provided by the token holder (if any)\n', '     * @param operatorData bytes extra information provided by the operator (if any)\n', '     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\n', '     */\n', '    function _send(\n', '        address from,\n', '        address to,\n', '        uint256 amount,\n', '        bytes memory userData,\n', '        bytes memory operatorData,\n', '        bool requireReceptionAck\n', '    )\n', '        internal\n', '    {\n', '        require(from != address(0), "ERC777: send from the zero address");\n', '        require(to != address(0), "ERC777: send to the zero address");\n', '\n', '        address operator = _msgSender();\n', '\n', '        _callTokensToSend(operator, from, to, amount, userData, operatorData);\n', '\n', '        _move(operator, from, to, amount, userData, operatorData);\n', '\n', '        _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\n', '    }\n', '\n', '    /**\n', '     * @dev Burn tokens\n', '     * @param from address token holder address\n', '     * @param amount uint256 amount of tokens to burn\n', '     * @param data bytes extra information provided by the token holder\n', '     * @param operatorData bytes extra information provided by the operator (if any)\n', '     */\n', '    function _burn(\n', '        address from,\n', '        uint256 amount,\n', '        bytes memory data,\n', '        bytes memory operatorData\n', '    )\n', '        internal virtual\n', '    {\n', '        require(from != address(0), "ERC777: burn from the zero address");\n', '\n', '        address operator = _msgSender();\n', '\n', '        _beforeTokenTransfer(operator, from, address(0), amount);\n', '\n', '        _callTokensToSend(operator, from, address(0), amount, data, operatorData);\n', '\n', '        // Update state variables\n', '        _balances[from] = _balances[from].sub(amount, "ERC777: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '\n', '        emit Burned(operator, from, amount, data, operatorData);\n', '        emit Transfer(from, address(0), amount);\n', '    }\n', '\n', '    function _move(\n', '        address operator,\n', '        address from,\n', '        address to,\n', '        uint256 amount,\n', '        bytes memory userData,\n', '        bytes memory operatorData\n', '    )\n', '        private\n', '    {\n', '        _beforeTokenTransfer(operator, from, to, amount);\n', '\n', '        _balances[from] = _balances[from].sub(amount, "ERC777: transfer amount exceeds balance");\n', '        _balances[to] = _balances[to].add(amount);\n', '\n', '        emit Sent(operator, from, to, amount, userData, operatorData);\n', '        emit Transfer(from, to, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev See {ERC20-_approve}.\n', '     *\n', '     * Note that accounts cannot have allowance issued by their operators.\n', '     */\n', '    function _approve(address holder, address spender, uint256 value) internal {\n', '        require(holder != address(0), "ERC777: approve from the zero address");\n', '        require(spender != address(0), "ERC777: approve to the zero address");\n', '\n', '        _allowances[holder][spender] = value;\n', '        emit Approval(holder, spender, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Call from.tokensToSend() if the interface is registered\n', '     * @param operator address operator requesting the transfer\n', '     * @param from address token holder address\n', '     * @param to address recipient address\n', '     * @param amount uint256 amount of tokens to transfer\n', '     * @param userData bytes extra information provided by the token holder (if any)\n', '     * @param operatorData bytes extra information provided by the operator (if any)\n', '     */\n', '    function _callTokensToSend(\n', '        address operator,\n', '        address from,\n', '        address to,\n', '        uint256 amount,\n', '        bytes memory userData,\n', '        bytes memory operatorData\n', '    )\n', '        private\n', '    {\n', '        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(from, _TOKENS_SENDER_INTERFACE_HASH);\n', '        if (implementer != address(0)) {\n', '            IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Call to.tokensReceived() if the interface is registered. Reverts if the recipient is a contract but\n', '     * tokensReceived() was not registered for the recipient\n', '     * @param operator address operator requesting the transfer\n', '     * @param from address token holder address\n', '     * @param to address recipient address\n', '     * @param amount uint256 amount of tokens to transfer\n', '     * @param userData bytes extra information provided by the token holder (if any)\n', '     * @param operatorData bytes extra information provided by the operator (if any)\n', '     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\n', '     */\n', '    function _callTokensReceived(\n', '        address operator,\n', '        address from,\n', '        address to,\n', '        uint256 amount,\n', '        bytes memory userData,\n', '        bytes memory operatorData,\n', '        bool requireReceptionAck\n', '    )\n', '        private\n', '    {\n', '        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(to, _TOKENS_RECIPIENT_INTERFACE_HASH);\n', '        if (implementer != address(0)) {\n', '            IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\n', '        } else if (requireReceptionAck) {\n', '            require(!to.isContract(), "ERC777: token recipient contract has no implementer for ERC777TokensRecipient");\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any token transfer. This includes\n', '     * calls to {send}, {transfer}, {operatorSend}, minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address operator, address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '// File: contracts\\ITFCoin.sol\n', '\n', '//           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n', '//                   Version 2, December 2004\n', '// \n', '//Copyright (C) 2021 ins3project <[email\xa0protected]>\n', '//\n', '//Everyone is permitted to copy and distribute verbatim or modified\n', '//copies of this license document, and changing it is allowed as long\n', '//as the name is changed.\n', '// \n', '//           DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n', '//  TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n', '//\n', '// You just DO WHAT THE FUCK YOU WANT TO.\n', 'pragma solidity >=0.6.0 <0.7.0;\n', '\n', '\n', '\n', '\n', 'contract ITFCoin is ERC777, IUpgradable\n', '{\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public maxSupply;\n', '    address public holder;\n', '\n', '    constructor(uint256 initialSupply,uint256 maxSupplyValue,address[] memory defaultOperators,address registerAddress) public\n', '        ERC777("Ins3.Finance Coin","ITF",defaultOperators,registerAddress)\n', '    {\n', '        _mint(_msgSender(), initialSupply,"","");\n', '        maxSupply = maxSupplyValue;\n', '    }\n', '\n', '    function updateDependentContractAddress() public virtual override {\n', '        holder = register.getContract("ITFH");\n', '        require(holder!=address(0),"Null for ITFH");\n', '    }\n', '\n', '    modifier onlyHolder {\n', '        require(holder == _msgSender(),"not holder");\n', '        _;\n', '    }\n', '\n', '    function mint(address account,uint256 amount,bytes memory userData,bytes memory operatorData) external onlyHolder{\n', '        require(maxSupply>=amount.add(totalSupply()),"mint - max supply limit");\n', '        _mint(account, amount, userData, operatorData);\n', '    }\n', '}']