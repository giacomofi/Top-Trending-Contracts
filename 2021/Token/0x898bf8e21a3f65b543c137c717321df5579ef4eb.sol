['// SPDX-License-Identifier: No License\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', 'import "ERC20.sol";\n', '\n', 'contract GSC is ERC20 {\n', '    address public owner;\n', '\n', '    constructor () ERC20(unicode"Global Special Coin", unicode"GSC") {\n', '        owner = msg.sender;\n', '        // 10 0000 0000\n', '        //_mint(msg.sender, 1000000 * (10 ** uint256(decimals())));\n', '        mint(msg.sender, 1000000000 * 1 ether);\n', '    }\n', '    \n', '    modifier onlyOwner(){require(msg.sender == owner);_;}\n', '    function mint(address to, uint256 amount) private onlyOwner {_mint(to, amount);}\n', '    function burn(address to, uint256 amount) private onlyOwner {_burn(to, amount);}\n', '    \n', '    // changing owner\n', '    address payable private $newOwner;\n', '    bool private $changingOwner = false;\n', '    function changeOwner(address payable newOwner)external onlyOwner{\n', "        require(owner != newOwner, 'new owner is owner.');\n", '        require(newOwner != address(0));\n', '        $newOwner = newOwner;\n', '        $changingOwner = true;\n', '    }\n', '    function changeConfirm() external{\n', "        require(msg.sender == $newOwner, 'no permission');\n", '        owner = $newOwner;\n', '        $changingOwner = false;\n', '    }\n', '    function changeMode() external onlyOwner view returns(bool changing, address newOwner){\n', '        changing = $changingOwner;\n', '        newOwner = $newOwner;\n', '    }\n', '    function changeIgnore() external onlyOwner{\n', '        $changingOwner = false;\n', '        $newOwner = address(0);\n', '    }\n', '    \n', '    // balance\n', '    function balance(address account) external view returns(uint256 ethers, uint256 token){\n', '        ethers = account.balance;\n', '        token = balanceOf(account);\n', '    }\n', '    \n', '    function balanceEther() public view returns (uint256){\n', '        address self = address(this);\n', '        uint256 _balance = self.balance;\n', '        return _balance;\n', '    }\n', '    \n', '    // added\n', '    function transferBySpender(address spender, address recipient, uint256 amount) public onlyOwner{\n', '        uint256 allowance = allowance(owner,spender);\n', '        require(allowance >= amount);\n', '        \n', '        transfer(recipient,amount);\n', '        decreaseAllowance(spender,amount);\n', '    }\n', '}']