['/* Please read and review the Terms and Conditions governing this\n', '   Merkle Drop by visiting the Trustlines Foundation homepage. Any\n', '   interaction with this smart contract, including but not limited to\n', '   claiming Trustlines Network Tokens, is subject to these Terms and\n', '   Conditions.\n', ' */\n', '\n', 'pragma solidity >=0.4.22 <0.9.0;\n', '\n', '\n', '//import "./ERC20Interface.sol";\n', 'import "@openzeppelin/contracts/ownership/Ownable.sol";\n', 'import "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '\n', 'contract Airdrop is Ownable {\n', '\n', '    bytes32 public root;\n', '    IERC20 public _token;\n', '\n', '    uint public initialBalance;\n', '    uint public remainingValue;  // The total of not withdrawn entitlements, not considering decay\n', '    uint public spentTokens;  // The total tokens spent by the contract\n', '\n', '    mapping (address => bool) public withdrawn;\n', '\n', '    event Withdraw(address recipient, uint value);\n', '\n', '    constructor(IERC20 token, uint _initialBalance, bytes32 _root) public {\n', '        // The _initialBalance should be equal to the sum of airdropped tokens\n', '        _token = token;\n', '        initialBalance = _initialBalance;\n', '        remainingValue = _initialBalance;\n', '        root = _root;\n', '    }\n', '    \n', '    function closeAirdrop() public onlyOwner {\n', '        require(_token.transfer(msg.sender, remainingValue));\n', '        emit Withdraw(msg.sender, remainingValue);\n', '    }\n', '\n', '    function withdraw(bytes32[] memory proof) public {\n', '        require(verifyEntitled(msg.sender, proof), "The proof could not be verified.");\n', '        require(! withdrawn[msg.sender], "You have already withdrawn your entitled token.");\n', '\n', '        uint valueToSend = 300000000000000000000;\n', '        require(_token.balanceOf(address(this)) >= valueToSend, "The AirDrop does not have tokens to drop yet / anymore.");\n', '\n', '        withdrawn[msg.sender] = true;\n', '        remainingValue -= valueToSend;\n', '        spentTokens += valueToSend;\n', '\n', '        require(_token.transfer(msg.sender, valueToSend));\n', '        emit Withdraw(msg.sender, valueToSend);\n', '    }\n', '\n', '    function verifyEntitled(address recipient, bytes32[] memory proof) public view returns (bool) {\n', '        // We need to pack the 20 bytes address to the 32 bytes value\n', '        // to match with the proof made with the python merkle-drop package\n', '        bytes32 leaf = keccak256(abi.encodePacked(recipient));\n', '        return verifyProof(leaf, proof);\n', '    }\n', '\n', '    function verifyProof(bytes32 leaf, bytes32[] memory proof) internal view returns (bool) {\n', '        bytes32 currentHash = leaf;\n', '\n', '        for (uint i = 0; i < proof.length; i += 1) {\n', '            currentHash = parentHash(currentHash, proof[i]);\n', '        }\n', '\n', '        return currentHash == root;\n', '    }\n', '\n', '    function parentHash(bytes32 a, bytes32 b) internal pure returns (bytes32) {\n', '        if (a < b) {\n', '            return keccak256(abi.encode(a, b));\n', '        } else {\n', '            return keccak256(abi.encode(b, a));\n', '        }\n', '    }\n', '\n', '}\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', 'import "../GSN/Context.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '{\n', '  "remappings": [],\n', '  "optimizer": {\n', '    "enabled": false,\n', '    "runs": 200\n', '  },\n', '  "evmVersion": "petersburg",\n', '  "libraries": {},\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  }\n', '}']