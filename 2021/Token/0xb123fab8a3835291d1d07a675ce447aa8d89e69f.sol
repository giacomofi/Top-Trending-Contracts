['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-24\n', '*/\n', '\n', 'pragma solidity >=0.4.21 <0.6.0;\n', '\n', 'interface ERC20 {\n', '    function balanceOf(address who) external view returns (uint256);\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        //\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    function uintSub(uint a, uint b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Tosken1Contract is ERC20 {\n', '    string  internal _name              = "Tosken1";\n', '    string  internal _symbol            = "TOS1";\n', '    string  internal _standard          = "ERC20";\n', '    uint8   internal _decimals          = 18;\n', '    uint    internal _totalSupply       = 100000 * 1 ether;\n', '    \n', '    address internal _contractOwner;\n', '\n', '    mapping(address => uint256)                     internal balances;\n', '    mapping(address => mapping(address => uint256)) internal allowed;\n', '\n', '    event Transfer(\n', '        address indexed _from,\n', '        address indexed _to,\n', '        uint256 _value\n', '    );\n', '\n', '    event Approval(\n', '        address indexed _owner,\n', '        address indexed _spender,\n', '        uint256 _value\n', '    );\n', '\n', '    event OwnershipTransferred(\n', '        address indexed _oldOwner,\n', '        address indexed _newOwner\n', '    );\n', '\n', '    constructor () public {\n', '        balances[msg.sender] = totalSupply();\n', '        _contractOwner = msg.sender;\n', '    }\n', '    // Try to prevent sending ETH to SmartContract by mistake.\n', '    function () external payable  {\n', '        revert("This SmartContract is not payable");\n', '    }\n', '    //\n', '    // Getters and Setters\n', '    //\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function standard() public view returns (string memory) {\n', '        return _standard;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', ' \n', '    function contractOwner() public view returns (address) {\n', '        return _contractOwner;\n', '    }\n', '    //\n', '    // Contract common functions\n', '    //\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '\n', '        require(_to != address(0), "\'_to\' address has to be set");\n', '        require(_value <= balances[msg.sender], "Insufficient balance");\n', '\n', '        balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\n', '        balances[_to] = SafeMath.add(balances[_to], _value);\n', '\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require (_spender != address(0), "_spender address has to be set");\n', '        require (_value > 0, "\'_value\' parameter has to be greater than 0");\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '\n', '        require(_from != address(0), "\'_from\' address has to be set");\n', '        require(_to != address(0), "\'_to\' address has to be set");\n', '        require(_value <= balances[_from], "Insufficient balance");\n', '        require(_value <= allowed[_from][msg.sender], "Insufficient allowance");\n', '\n', '        allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _value);\n', '        balances[_from] = SafeMath.sub(balances[_from], _value);\n', '        balances[_to] = SafeMath.add(balances[_to], _value);\n', '\n', '        emit Transfer(_from, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '    \n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Only owner can do that");\n', '        _;\n', '    }\n', '\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _contractOwner;\n', '    }\n', '    \n', '    function transferOwnership(address _newOwner) public onlyOwner returns (bool success) {\n', '        require(_newOwner != address(0) && _contractOwner != _newOwner);\n', '        emit OwnershipTransferred(_contractOwner, _newOwner);\n', '        _contractOwner = _newOwner;\n', '        return true;\n', '    }\n', '}']