['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-10\n', '*/\n', '\n', 'pragma solidity ^0.5.1;\n', '\n', 'library SafeMath{\n', '    \n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', 'contract ECOHETENCToken{\n', '    \n', '    using SafeMath for uint256;\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => bool) private transferable;\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '    mapping(address => bool) private admin;\n', '    \n', '    uint256 private _totalSupply=1100000000000000000000000000;\n', '    string private _name= "ECO HETENC Token";\n', '    string private _symbol= "HETENC";\n', '    uint256 private _decimals = 18;\n', '    bool internal _lockall = false;\n', '    \n', '    constructor () public {\n', '\tadmin[address(0xf7F84640861Fe95c22Ede9c62f77CF3bC0967f86)] = true;\n', '    balanceOf[address(0xf7F84640861Fe95c22Ede9c62f77CF3bC0967f86)] = _totalSupply;\n', '        }\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '\n', '        \n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '    \n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '    function decimals() public view returns (uint256) {\n', '        return _decimals;\n', '    }\n', '    \n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '    \n', '    function _transfer(address _from, address _to, uint256 _value) internal {\n', '        \n', '        require(_from != address(0), "ERC20: transfer from the zero address");\n', '        require(_to != address(0), "ERC20: transfer to the zero address");\n', '        require(balanceOf[_from]>=_value);\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        require(transfercheck(_from) == true);\n', '        require(_lockall == false);\n', '        balanceOf[_from] = balanceOf[_from].sub(_value,"ERC20: transfer amount exceeds balance");\n', '        balanceOf[_to] = balanceOf[_to].add(_value);\n', '        emit Transfer(_from, _to, _value);\n', '\n', '    }\n', '    \n', '    \n', '    function transfer(address to, uint256 value) public {\n', '        _transfer(msg.sender, to, value);\n', '    }\n', '    \n', '    function transferFrom(address _from, uint256 amount) public {\n', '         \n', '       require(allowed[_from][msg.sender]>=amount);\n', '       allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(amount);\n', '       _transfer(_from,msg.sender,amount);\n', '    }\n', '    \n', '    function transfercheck(address check) internal view returns(bool) {\n', '        if (transferable[check]==false){\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '    \n', '    function AllowenceCheck(address spender, address approver) public view returns (uint256){\n', '        return allowed[approver][spender];\n', '    }\n', '    \n', '    \n', '    function approve(address spender, uint256 _value) public{\n', '        require(balanceOf[msg.sender]>=_value);\n', '        allowed[msg.sender][spender] = _value;\n', '        emit Approval(msg.sender, spender, _value);\n', '        \n', '    }\n', '    \n', '    function increaseAllowence(address spender, uint256 _value) public{\n', '        require(balanceOf[msg.sender]>=_value);\n', '        allowed[msg.sender][spender] = allowed[msg.sender][spender].add(_value);\n', '        emit Approval(msg.sender, spender, _value);\n', '    }\n', '    \n', '    function decreaseAllowence(address spender, uint256 _value) public{\n', '        require(balanceOf[msg.sender]>=_value);\n', '        allowed[msg.sender][spender] = allowed[msg.sender][spender].sub(_value);\n', '        emit Approval(msg.sender, spender, -_value);\n', '    }\n', '\n', '    function lock(address lockee) public {\n', '        require(admin[msg.sender]==true);\n', '        transferable[lockee] = true;\n', '    }\n', '    \n', '    function unlock(address unlockee) public {\n', '        require(admin[msg.sender]==true);\n', '        transferable[unlockee] = false;\n', '    }\n', '    \n', '    function lockcheck(address checkee) public view returns (bool){\n', '        return transferable[checkee];\n', '    }\n', '    \n', '    \n', '    function _burn(address account, uint256 value) private {\n', '        require(admin[account]==true);\n', '        require(admin[msg.sender]==true);\n', '        require(balanceOf[account]>=value);\n', '        require(_totalSupply>=value);\n', '        balanceOf[account] =balanceOf[account].sub(value);\n', '        _totalSupply = _totalSupply.sub(value);\n', '    }\n', '    \n', '    \n', '    function burn(uint256 amount) public {\n', '        _burn(msg.sender, amount);\n', '    }\n', '\n', '    function addadmin(address account) public{\n', '        require(admin[msg.sender]==true);\n', '        admin[account]=true;\n', '    }\n', '\n', '    function deleteadmin(address account) public{\n', '        require(admin[msg.sender]==true);\n', '        admin[account]=false;\n', '    }\n', '\n', '    function admincheck(address account) public view returns (bool){\n', '        return admin[account];\n', '    }\n', '    \n', '    function lockall(bool lockall) public {\n', '        require(admin[msg.sender]==true);\n', '        _lockall = lockall;\n', '    }\n', '    \n', '    function lockallcheck() public view returns (bool){\n', '        return _lockall;\n', '    }\n', '    \n', '    \n', '}']