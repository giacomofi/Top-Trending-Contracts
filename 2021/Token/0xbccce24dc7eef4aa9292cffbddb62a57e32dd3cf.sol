['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', 'import "./ERC20.sol";\n', 'import "./ERC20Burnable.sol";\n', 'import "./AccessControl.sol";\n', 'import "./SafeMath.sol";\n', '\n', 'contract REBEL is ERC20, ERC20Burnable, AccessControl {\n', '    using SafeMath for uint256;\n', '      \n', '    uint256 public constant cap = 1700000000000000000000000000;\n', '    uint256 private _remainingSupply;\n', '    uint256 public developersFunding;\n', '    uint256 public liquityFunding;\n', '    \n', '    address public developersAddress = 0x78225f18a19F26041c616c464a57403ffb94acCC;\n', '    address public liquityAddress = 0xfda48cC92EE5354468EA46E9bd06d3EaBA8C4e16;\n', '\n', '    constructor() ERC20("Confederate Coin", "REBEL") {\n', '        _setupRole(DEFAULT_ADMIN_ROLE, developersAddress);\n', '        _remainingSupply = cap;\n', '        \n', '        developersFunding = cap.mul(10).div(100);\n', '        _mint(developersAddress, developersFunding);\n', '        reduceSupplyBy(developersFunding);\n', '        \n', '        liquityFunding = cap.mul(90).div(100);\n', '        _mint(liquityAddress, liquityFunding);\n', '        reduceSupplyBy(liquityFunding);\n', '    }\n', '\n', '    function remainingSupply() public view returns (uint256) {\n', '      return _remainingSupply;\n', '    }\n', '    \n', '    function reduceSupplyBy(uint256 amount) private {\n', '      _remainingSupply = _remainingSupply - amount;\n', '    }\n', '\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount)\n', '        internal\n', '        override\n', '    {\n', '        super._beforeTokenTransfer(from, to, amount);\n', '    }\n', '}']