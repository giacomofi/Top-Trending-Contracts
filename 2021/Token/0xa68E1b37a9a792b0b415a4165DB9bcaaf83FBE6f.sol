['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-14\n', '*/\n', '\n', '// Sources flattened with hardhat v2.0.10 https://hardhat.org\n', '\n', '// File @openzeppelin/contracts/token/ERC20/[email\xa0protected]\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/utils/[email\xa0protected]\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/access/[email\xa0protected]\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/interfaces/ITimelockManager.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', 'interface ITimelockManager {\n', '    event Api3PoolUpdated(address api3PoolAddress);\n', '\n', '    event RevertedTimelock(\n', '        address indexed recipient,\n', '        address destination,\n', '        uint256 amount\n', '        );\n', '\n', '    event PermittedTimelockToBeReverted(address recipient);\n', '\n', '    event TransferredAndLocked(\n', '        address source,\n', '        address indexed recipient,\n', '        uint256 amount,\n', '        uint256 releaseStart,\n', '        uint256 releaseEnd\n', '        );\n', '\n', '    event Withdrawn(\n', '        address indexed recipient,\n', '        uint256 amount\n', '        );\n', '\n', '    event WithdrawnToPool(\n', '        address indexed recipient,\n', '        address api3PoolAddress,\n', '        address beneficiary\n', '        );\n', '\n', '    function updateApi3Pool(address api3PoolAddress)\n', '        external;\n', '\n', '    function revertTimelock(\n', '        address recipient,\n', '        address destination\n', '        )\n', '        external;\n', '\n', '    function permitTimelockToBeReverted()\n', '        external;\n', '\n', '    function transferAndLock(\n', '        address source,\n', '        address recipient,\n', '        uint256 amount,\n', '        uint256 releaseStart,\n', '        uint256 releaseEnd\n', '        )\n', '        external;\n', '\n', '    function transferAndLockMultiple(\n', '        address source,\n', '        address[] calldata recipients,\n', '        uint256[] calldata amounts,\n', '        uint256[] calldata releaseStarts,\n', '        uint256[] calldata releaseEnds\n', '        )\n', '        external;\n', '\n', '    function withdraw()\n', '        external;\n', '\n', '    function withdrawToPool(\n', '        address api3PoolAddress,\n', '        address beneficiary\n', '        )\n', '        external;\n', '\n', '    function getWithdrawable(address recipient)\n', '        external\n', '        view\n', '        returns(uint256 withdrawable);\n', '\n', '    function getTimelock(address recipient)\n', '        external\n', '        view\n', '        returns (\n', '            uint256 totalAmount,\n', '            uint256 remainingAmount,\n', '            uint256 releaseStart,\n', '            uint256 releaseEnd\n', '            );\n', '\n', '    function getRemainingAmount(address recipient)\n', '        external\n', '        view\n', '        returns (uint256 remainingAmount);\n', '\n', '    function getIfTimelockIsRevertible(address recipient)\n', '        external\n', '        view\n', '        returns (bool revertStatus);\n', '}\n', '\n', '\n', '// File contracts/TimelockAgent.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', 'contract TimelockAgent is Ownable {\n', '    struct Timelock{\n', '        address timelockContractAddress;\n', '        address recipient;\n', '        uint256 amount;\n', '        uint256 releaseStart;\n', '        uint256 releaseEnd;\n', '        }\n', '\n', '    IERC20 public api3Token;\n', '    address public api3Dao;\n', '    Timelock[] private timelocks;\n', '\n', '    constructor (\n', '        address _api3Token,\n', '        address _api3Dao\n', '        )\n', '        public\n', '    {\n', '        api3Token = IERC20(_api3Token);\n', '        api3Dao = _api3Dao;\n', '    }\n', '\n', '    function setTimelocks(\n', '        address[] calldata timelockContractAddresses,\n', '        address[] calldata recipients,\n', '        uint256[] calldata amounts,\n', '        uint256[] calldata releaseStarts,\n', '        uint256[] calldata releaseEnds\n', '        )\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(\n', '            timelockContractAddresses.length == recipients.length\n', '                && timelockContractAddresses.length == amounts.length\n', '                && timelockContractAddresses.length == releaseStarts.length\n', '                && timelockContractAddresses.length == releaseEnds.length,\n', '            "Parameters are of unequal length"\n', '            );\n', '        require(\n', '            timelockContractAddresses.length <= 30,\n', '            "Parameters are longer than 30"\n', '            );\n', '        require(\n', '            timelocks.length == 0,\n', '            "Timelocks already set"\n', '            );\n', '        for (uint256 ind = 0; ind < timelockContractAddresses.length; ind++)\n', '        {\n', '            timelocks.push(Timelock(\n', '                timelockContractAddresses[ind],\n', '                recipients[ind],\n', '                amounts[ind],\n', '                releaseStarts[ind],\n', '                releaseEnds[ind]\n', '                ));\n', '        }\n', '    }\n', '\n', '    function getTimelocks()\n', '        external\n', '        view\n', '        returns (\n', '            address[] memory timelockContractAddresses,\n', '            address[] memory recipients,\n', '            uint256[] memory amounts,\n', '            uint256[] memory releaseStarts,\n', '            uint256[] memory releaseEnds\n', '            )\n', '    {\n', '        timelockContractAddresses = new address[](timelocks.length);\n', '        recipients = new address[](timelocks.length);\n', '        amounts = new uint256[](timelocks.length);\n', '        releaseStarts = new uint256[](timelocks.length);\n', '        releaseEnds = new uint256[](timelocks.length);\n', '        for (uint256 ind = 0; ind < timelocks.length; ind++)\n', '        {\n', '            Timelock storage timelock = timelocks[ind];\n', '            timelockContractAddresses[ind] = timelock.timelockContractAddress;\n', '            recipients[ind] = timelock.recipient;\n', '            amounts[ind] = timelock.amount;\n', '            releaseStarts[ind] = timelock.releaseStart;\n', '            releaseEnds[ind] = timelock.releaseEnd;\n', '        }\n', '    }\n', '\n', '    function executeTimelocks()\n', '        external\n', '    {\n', '        require(\n', '            timelocks.length != 0,\n', '            "Timelocks not set"\n', '            );\n', '        for (uint256 ind = 0; ind < timelocks.length; ind++)\n', '        {\n', '            Timelock storage timelock = timelocks[ind];\n', '            api3Token.approve(timelock.timelockContractAddress, timelock.amount);\n', '            ITimelockManager timelockManager = ITimelockManager(timelock.timelockContractAddress);\n', '            timelockManager.transferAndLock(\n', '                address(this),\n', '                timelock.recipient,\n', '                timelock.amount,\n', '                timelock.releaseStart,\n', '                timelock.releaseEnd\n', '                );\n', '        }\n', '        delete timelocks;\n', '    }\n', '\n', '    function refund()\n', '        external\n', '        onlyOwner\n', '    {\n', '        api3Token.transfer(api3Dao, api3Token.balanceOf(address(this)));\n', '    }\n', '}']