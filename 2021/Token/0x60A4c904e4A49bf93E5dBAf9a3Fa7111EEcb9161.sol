['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-09\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.5.15;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function decimals() external view returns (uint);\n', '    function name() external view returns (string memory);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != 0x0 && codehash != accountHash);\n', '    }\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'interface Controller {\n', '    function vaults(address) external view returns (address);\n', '    function rewards() external view returns (address);\n', '}\n', '\n', 'interface CurveDeposit{\n', '    function deposit(uint256) external;\n', '    function withdraw(uint256) external;\n', '    function balanceOf(address) external view returns (uint256);\n', '    function claimable_tokens(address) external view returns (uint256);\n', '}\n', 'interface CurveMinter{\n', '    function mint(address) external;\n', '}\n', '\n', 'interface yERC20 {\n', '  function deposit(uint256 _amount) external;\n', '  function withdraw(uint256 _amount) external;\n', '  function getRatio() external view returns (uint);\n', '}\n', '\n', 'interface pERC20 {\n', '  function deposit(uint256 ,uint256 ) external;\n', '  function withdraw(uint256 ,uint256 ) external;\n', '  function getRatio() external view returns (uint);\n', '  function pendingPickle(uint256,address) external view returns(uint);\n', '}\n', '\n', 'interface ZAPPER {\n', '    function ZapIn(\n', '        address _FromTokenContractAddress,\n', '        address _pairAddress,\n', '        uint256 _amount,\n', '        uint256 _minPoolTokens,\n', '        address _allowanceTarget,\n', '        address _swapTarget,\n', '        bytes calldata swapData\n', '    ) external payable returns (uint256);\n', '}\n', '\n', 'interface UniswapRouter {\n', '  function swapExactTokensForTokens(\n', '      uint amountIn,\n', '      uint amountOutMin,\n', '      address[] calldata path,\n', '      address to,\n', '      uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '\n', '}\n', 'contract StrategyBACUNIPickle  {\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '    using SafeMath for uint256;\n', '\n', '    uint256 pickleindex = 22;\n', '\n', '    address constant public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n', '    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n', '    address constant public bt = address(0x76c5449F4950f6338A393F53CdA8b53B0cd3Ca3a);\n', '    address constant public dai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n', '    address constant public bac = address(0x3449FC1Cd036255BA1EB19d65fF4BA2b8903A69a);\n', '\n', '    address constant public want = address(0xd4405F0704621DBe9d4dEA60E128E0C3b26bddbD); //BAC-DAI UNI-V2\n', '    address constant public pickleJar = address(0x2350fc7268F3f5a6cC31f26c38f706E41547505d);\n', '    address constant public PICKLE = address(0xbD17B1ce622d73bD438b9E658acA5996dc394b0d);\n', '\n', '    address constant public pickletoken = address(0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5);\n', '\n', '    address public governance;\n', '    address public controller;\n', '\n', '    uint256 public pledgePickles = 0;\n', '    uint256 public redeliverynum = 100 * 1e18;\n', '\n', '    address[] public swap2BTRouting;\n', '    address[] public swap2TokenRouting;\n', '\n', '    modifier onlyController {\n', '        require(msg.sender == controller, "!controller");\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        governance = tx.origin;\n', '        controller = 0xD6FA3746A04B27716bd89F090A0c5Cb3e763faAf;\n', '        doApprove();\n', '        swap2BTRouting = [pickletoken,weth,bt];\n', '        swap2TokenRouting = [pickletoken,weth];\n', '    }\n', '\n', '    function doApprove () internal{\n', '        IERC20(pickletoken).approve(unirouter, uint(-1));\n', '        IERC20(weth).approve(unirouter, uint(-1));\n', '    }\n', '\n', '    function deposit() public {\n', '        uint256 _want = IERC20(want).balanceOf(address(this));\n', '        if (_want > 0)\n', '        {\n', '            IERC20(want).safeApprove(pickleJar, 0);\n', '            IERC20(want).safeApprove(pickleJar, _want);\n', '            yERC20(pickleJar).deposit(_want);\n', '        }\n', '\n', '        uint _puni = IERC20(pickleJar).balanceOf(address(this));\n', '        if (_puni > 0)\n', '        {\n', '            IERC20(pickleJar).safeApprove(PICKLE, 0);\n', '            IERC20(pickleJar).safeApprove(PICKLE, _puni);\n', '            pERC20(PICKLE).deposit(pickleindex, _puni);\n', '            pledgePickles = pledgePickles.add(_puni);\n', '        }\n', '    }\n', '\n', '\n', '    // Withdraw partial funds, normally used with a vault withdrawal\n', '    function withdraw(uint _amount) external onlyController\n', '    {\n', '        uint amount = _withdraw(_amount);\n', '        address _vault = Controller(controller).vaults(address(want));\n', '        require(_vault != address(0), "!vault");\n', '        IERC20(want).safeTransfer(_vault, amount);\n', '    }\n', '\n', '\n', '    function _withdraw(uint _amount) internal returns(uint) {\n', '        uint amount = IERC20(want).balanceOf(address(this));\n', '        if (amount < _amount) {\n', '            _withdrawSome(_amount.sub(amount));\n', '            amount = IERC20(want).balanceOf(address(this));\n', '            if (amount < _amount){\n', '                return amount;\n', '            }\n', '        }\n', '        return _amount;\n', '    }\n', '\n', '    function withdrawAll() external onlyController returns (uint balance){\n', '        balance = _withdraw(balanceOf());\n', '\n', '        address _vault = Controller(controller).vaults(address(want));\n', '        require(_vault != address(0), "!vault");\n', '        IERC20(want).safeTransfer(_vault, balance);\n', '    }\n', '\n', '    function _withdrawSome(uint256 _amount) internal {\n', '        uint256 _puni = _amount.mul(1e18).div(yERC20(pickleJar).getRatio());\n', '        uint _before = IERC20(pickleJar).balanceOf(address(this));\n', '        if (_before < _puni) {\n', '            _puni = _puni.sub(_before);\n', '            if (_puni > pledgePickles)\n', '            {\n', '                _puni = pledgePickles;\n', '            }\n', '            pERC20(PICKLE).withdraw(pickleindex, _puni);\n', '            pledgePickles = pledgePickles.sub(_puni);\n', '            _puni = IERC20(pickleJar).balanceOf(address(this));\n', '        }\n', '        yERC20(pickleJar).withdraw(_puni);\n', '    }\n', '\n', '    function balanceOfwant() public view returns (uint256) {\n', '        return IERC20(want).balanceOf(address(this));\n', '    }\n', '\n', '    function balanceOfpUNI() public view returns (uint256) {\n', '        return pledgePickles.add(IERC20(pickleJar).balanceOf(address(this)));\n', '    }\n', '\n', '\n', '    function balanceOfUNI() public view returns (uint256){\n', '        return balanceOfpUNI().mul(yERC20(pickleJar).getRatio()).div(1e18);\n', '    }\n', '\n', '\n', '    function balanceOf() public view returns (uint256) {\n', '        return balanceOfwant().add(balanceOfUNI());\n', '    }\n', '\n', '    function getPending() public view returns (uint256) {\n', '        return pERC20(PICKLE).pendingPickle(pickleindex,address(this));\n', '    }\n', '\n', '    function getPickle() public view returns(uint256)\n', '    {\n', '        return IERC20(pickletoken).balanceOf(address(this));\n', '    }\n', '\n', '    function harvest() public\n', '    {\n', '        pERC20(PICKLE).withdraw(pickleindex,pledgePickles);\n', '        pledgePickles = 0;\n', '        redelivery();\n', '    }\n', '\n', '    function redelivery() internal {\n', '        uint256 reward = IERC20(pickletoken).balanceOf(address(this));\n', '        if (reward > redeliverynum)\n', '        {\n', '            uint256 _2token = reward.mul(80).div(100); //80%\n', '            uint256 _2bt = reward.sub(_2token);  //20%\n', '            UniswapRouter(unirouter).swapExactTokensForTokens(_2token, 0, swap2TokenRouting, address(this), now.add(1800));\n', '            UniswapRouter(unirouter).swapExactTokensForTokens(_2bt, 0, swap2BTRouting, Controller(controller).rewards(), now.add(1800));\n', '\n', '            _redelivery();\n', '        }\n', '        deposit();\n', '    }\n', '\n', '    function _redelivery() internal\n', '    {\n', '        uint256 _weth = IERC20(weth).balanceOf(address(this));\n', '        if (_weth > 0) {\n', '            _swapUniswap(weth, dai, _weth.div(2));\n', '            _weth = IERC20(weth).balanceOf(address(this));\n', '            _swapUniswap(weth, bac, _weth);\n', '        }\n', '\n', '        // Adds in liquidity for ETH/DAI\n', '        uint256 _dai = IERC20(dai).balanceOf(address(this));\n', '        uint256 _bac = IERC20(bac).balanceOf(address(this));\n', '        if (_dai > 0 && _bac > 0) {\n', '            IERC20(dai).safeApprove(unirouter, 0);\n', '            IERC20(dai).safeApprove(unirouter, _dai);\n', '\n', '            IERC20(bac).safeApprove(unirouter, 0);\n', '            IERC20(bac).safeApprove(unirouter, _bac);\n', '\n', '            UniswapRouter(unirouter).addLiquidity(\n', '                dai,\n', '                bac,\n', '                _dai,\n', '                _bac,\n', '                0,\n', '                0,\n', '                address(this),\n', '                now + 180\n', '            );\n', '        }\n', '    }\n', '\n', '    function _swapUniswap(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', '    ) internal {\n', '        require(_to != address(0));\n', '\n', '        // Swap with uniswap\n', '        IERC20(_from).safeApprove(unirouter, 0);\n', '        IERC20(_from).safeApprove(unirouter, _amount);\n', '\n', '        address[] memory path;\n', '\n', '        if (_from == weth || _to == weth) {\n', '            path = new address[](2);\n', '            path[0] = _from;\n', '            path[1] = _to;\n', '        } else {\n', '            path = new address[](3);\n', '            path[0] = _from;\n', '            path[1] = weth;\n', '            path[2] = _to;\n', '        }\n', '\n', '        UniswapRouter(unirouter).swapExactTokensForTokens(\n', '            _amount,\n', '            0,\n', '            path,\n', '            address(this),\n', '            now.add(1800)\n', '        );\n', '    }\n', '\n', '    function setredeliverynum(uint256 value) public {\n', '        require(msg.sender == governance, "!governance");\n', '        redeliverynum = value;\n', '    }\n', '\n', '    function setGovernance(address _governance) public {\n', '        require(msg.sender == governance, "!governance");\n', '        governance = _governance;\n', '    }\n', '\n', '    function setController(address _controller) external {\n', '        require(msg.sender == governance, "!governance");\n', '        controller = _controller;\n', '    }\n', '}']