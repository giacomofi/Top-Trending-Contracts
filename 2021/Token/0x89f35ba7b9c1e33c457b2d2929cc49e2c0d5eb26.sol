['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-20\n', '*/\n', '\n', 'pragma solidity >0.4.99 <0.6.0;\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', ' \n', '    function balanceOf(address who) public view returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender)\n', '        public\n', '        view\n', '        returns (uint256);\n', ' \n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) public returns (bool);\n', ' \n', '    function approve(address spender, uint256 value) public returns (bool);\n', ' \n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', 'library SafeERC20 {\n', '\n', '    function safeTransfer(\n', '        ERC20Basic _token,\n', '        address _to,\n', '        uint256 _value\n', '    ) internal {\n', '        require(_token.transfer(_to, _value));\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        ERC20 _token,\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    ) internal {\n', '        require(_token.transferFrom(_from, _to, _value));\n', '    }\n', ' \n', '    function safeApprove(\n', '        ERC20 _token,\n', '        address _spender,\n', '        uint256 _value\n', '    ) internal {\n', '        require(_token.approve(_spender, _value));\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Multiplies two numbers, throws on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        require(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two numbers, truncating the quotient.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two numbers, throws on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '    \n', '    /**\n', '     * @dev Total number of tokens in existence\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        emit Transfer(msg.sender, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param _owner The address to query the the balance of.\n', '     * @return An uint256 representing the amount owned by the passed address.\n', '     */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '/**\n', ' * @title Standard ERC20 token\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '    mapping(address => mapping(address => uint256)) internal allowed;\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    ) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\n', '        emit Transfer(_from, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        \n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint256 _addedValue)\n', '        public\n', '        returns (bool)\n', '    {\n', '        allowed[msg.sender][_spender] = (\n', '            allowed[msg.sender][_spender].add(_addedValue)\n', '        );\n', '\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        \n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint256 _subtractedValue)\n', '        public\n', '        returns (bool)\n', '    {\n', '        uint256 oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title MultiOwnable\n', ' *\n', ' * MulitOwnable of LogiTron sets HIDDENOWNER, SUPEROWNER, OWNER.\n', ' * If many can be authorized, the value is entered to the list so that it is accessible to unspecified many.\n', ' *\n', ' */\n', 'contract MultiOwnable {\n', '\n', '    uint8 constant MAX_OWNER = 15;\n', '    address payable public hiddenOwner;\n', '    address payable public superOwner;\n', '    address[MAX_OWNER] public chkOwnerList;\n', '    mapping(address => bool) public owners;\n', '\n', '    event AddedOwner(address indexed newOwner);\n', '    event DeletedOwner(address indexed toDeleteOwner);\n', '    event ChangedSuperOwner(address indexed newSuperOwner);\n', '    event ChangedHiddenOwner(address indexed newHiddenOwner);\n', '\n', '    constructor() public {\n', '        hiddenOwner = msg.sender;\n', '        superOwner = msg.sender;\n', '        owners[msg.sender] = true;\n', '        chkOwnerList[0] = msg.sender;\n', '    }\n', '\n', '    modifier onlySuperOwner() {\n', '        require(superOwner == msg.sender);\n', '        _;\n', '    }\n', '\n', '    modifier onlyHiddenOwner() {\n', '        require(hiddenOwner == msg.sender);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(owners[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    function changeSuperOwnership(address payable newSuperOwner)\n', '        public\n', '        onlyHiddenOwner\n', '        returns (bool)\n', '    {\n', '        require(newSuperOwner != address(0));\n', '        superOwner = newSuperOwner;\n', ' \n', '        emit ChangedSuperOwner(superOwner);\n', '        \n', '        return true;\n', '    }\n', '\n', '    function changeHiddenOwnership(address payable newHiddenOwner)\n', '        public\n', '        onlyHiddenOwner\n', '        returns (bool)\n', '    {\n', '        require(newHiddenOwner != address(0));\n', '        hiddenOwner = newHiddenOwner;\n', '\n', '        emit ChangedHiddenOwner(hiddenOwner);\n', '\n', '        return true;\n', '    }\n', '    \n', '    function addOwner(address owner, uint8 num)\n', '        public\n', '        onlySuperOwner\n', '        returns (bool)\n', '    {\n', '        require(num < MAX_OWNER);\n', '        require(owner != address(0));\n', '        require(chkOwnerList[num] == address(0));\n', '        require(owners[owner] == false);\n', ' \n', '        owners[owner] = true;\n', '        chkOwnerList[num] = owner;\n', '\n', '        emit AddedOwner(owner);\n', '\n', '        return true;\n', '    }\n', '\n', '    function deleteOwner(address owner, uint8 num)\n', '        public\n', '        onlySuperOwner\n', '        returns (bool)\n', '    {\n', '        require(num < MAX_OWNER);\n', '        require(owner != address(0));\n', '        require(chkOwnerList[num] == owner);\n', '\n', '        owners[owner] = false;\n', '        chkOwnerList[num] = address(0);\n', '        \n', '        emit DeletedOwner(owner);\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title HasNoEther\n', ' */\n', 'contract HasNoEther is MultiOwnable {\n', '    \n', '    using SafeERC20 for ERC20Basic;\n', '    \n', '    /**\n', '     * @dev Constructor that rejects incoming Ether\n', '     * The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n', '     * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n', '     * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n', '     * we could use assembly to access msg.value.\n', '     */\n', '    constructor() public payable {\n', '        require(msg.value == 0);\n', '    }\n', '}\n', '\n', 'contract Blacklist is MultiOwnable {\n', '    mapping(address => bool) blacklisted;\n', '\n', '    event Blacklisted(address indexed blacklist);\n', '    event Whitelisted(address indexed whitelist);\n', '\n', '    modifier whenPermitted(address node) {\n', '        require(!blacklisted[node]);\n', '        _;\n', '    }\n', '\n', '    function isPermitted(address node) public view returns (bool) {\n', '        return !blacklisted[node];\n', '    }\n', '\n', '    function blacklist(address node) public onlyOwner returns (bool) {\n', '        require(!blacklisted[node]);\n', '\n', '        blacklisted[node] = true;\n', '\n', '        emit Blacklisted(node);\n', '\n', '        return blacklisted[node];\n', '    }\n', '\n', '    function unblacklist(address node) public onlySuperOwner returns (bool) {\n', '        require(blacklisted[node]);\n', '\n', '        blacklisted[node] = false;\n', '\n', '        emit Whitelisted(node);\n', '\n', '        return blacklisted[node];\n', '    }\n', '\n', '}\n', '\n', 'contract PausableToken is StandardToken, HasNoEther, Blacklist {\n', '\n', '    uint8 constant MAX_BLACKTRANSFER = 10;\n', '    bool public paused = false;\n', '    address[MAX_BLACKTRANSFER] public chkBlackTransfer;\n', '    mapping(address => bool) public blackTransferAddrs;\n', '\n', '    event Paused(address addr);\n', '    event Unpaused(address addr);\n', '    event AddBlackTransfer(address addr);\n', '    event DelBlackTransfer(address addr);\n', '\n', '    constructor() public {}\n', '\n', '    modifier whenNotPaused() {\n', '        require(!paused || owners[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    function addBlackTransfer(address blackTransfer, uint8 num)\n', '        public\n', '        onlySuperOwner\n', '        returns (bool)\n', '    {\n', '        require(num < MAX_BLACKTRANSFER);\n', '        require(blackTransfer != address(0));\n', '        require(!blackTransferAddrs[blackTransfer]);\n', '        require(chkBlackTransfer[num] == address(0));\n', '\n', '        chkBlackTransfer[num] = blackTransfer;\n', '        blackTransferAddrs[blackTransfer] = true;\n', '\n', '        emit AddBlackTransfer(blackTransfer);\n', '        \n', '        return blackTransferAddrs[blackTransfer];\n', '    }\n', '\n', '    function delBlackTransfer(address blackTransfer, uint8 num)\n', '        public\n', '        onlySuperOwner\n', '        returns (bool)\n', '    {\n', '        require(num < MAX_BLACKTRANSFER);\n', '        require(blackTransfer != address(0));\n', '        require(blackTransferAddrs[blackTransfer]);\n', '        require(chkBlackTransfer[num] == blackTransfer);\n', '\n', '        chkBlackTransfer[num] = address(0);\n', '        blackTransferAddrs[blackTransfer] = false;\n', '\n', '        emit DelBlackTransfer(blackTransfer);\n', '\n', '        return blackTransferAddrs[blackTransfer];\n', '    }\n', '\n', '    function pause() public onlySuperOwner returns (bool) {\n', '        require(!paused);\n', ' \n', '        paused = true;\n', '\n', '        emit Paused(msg.sender);\n', '\n', '        return paused;\n', '    }\n', '\n', '    function unpause() public onlySuperOwner returns (bool) {\n', '        require(paused);\n', ' \n', '        paused = false;\n', '\n', '        emit Unpaused(msg.sender);\n', '\n', '        return paused;\n', '    }\n', '\n', '    function transfer(address to, uint256 value)\n', '        public\n', '        whenNotPaused\n', '        whenPermitted(msg.sender)\n', '        \n', '        returns (bool)\n', '    {\n', '        if (blackTransferAddrs[msg.sender]) {\n', '            if (blacklisted[to] == false) {\n', '                blacklisted[to] = true;\n', '                \n', '                emit Blacklisted(to);\n', '            }\n', '        }\n', '\n', '        return super.transfer(to, value);\n', '    }\n', '\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    )\n', '        public\n', '        whenNotPaused\n', '        whenPermitted(from)\n', '        whenPermitted(msg.sender)\n', '\n', '        returns (bool)\n', '    {\n', '        require(!blackTransferAddrs[from]);\n', '\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title LogiTron\n', ' *\n', ' */\n', 'contract LogiTron is PausableToken {\n', '\n', '    string public constant name = "LogiTron";\n', '    uint8 public constant decimals = 18;\n', '    string public constant symbol = "LTR";\n', '    uint256 public constant INITIAL_SUPPLY = 3e10 * (10**uint256(decimals)); // 100억개\n', '\n', '    constructor() public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[msg.sender] = INITIAL_SUPPLY;\n', ' \n', '        emit Transfer(address(0), msg.sender, INITIAL_SUPPLY);\n', '    }\n', '}']