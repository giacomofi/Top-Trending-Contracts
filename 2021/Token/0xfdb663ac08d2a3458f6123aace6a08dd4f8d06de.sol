['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-28\n', '*/\n', '\n', '//SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity 0.8.4;\n', '\n', 'interface IERC20 {\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    function name() external view returns (string memory);\n', '\n', '    function symbol() external view returns (string memory);\n', '\n', '    function decimals() external view returns (uint8);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address owner) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) external returns (bool);\n', '}\n', '\n', 'interface IWETH is IERC20 {\n', '    function deposit() external payable;\n', '\n', '    function withdraw(uint256) external;\n', '}\n', '\n', 'contract ArbitrageExecutor {\n', '    address payable public immutable owner;\n', '    address private immutable executor;\n', '    IWETH private constant WETH =\n', '        IWETH(0xd0A1E359811322d97991E03f863a0C30C2cF029C);\n', '\n', '    modifier onlyExecutor() {\n', '        require(msg.sender == executor, "OE");\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "OO");\n', '        _;\n', '    }\n', '\n', '    receive() external payable {}\n', '\n', '    constructor(address _executor) payable {\n', '        owner = payable(msg.sender);\n', '        executor = _executor;\n', '        if (msg.value > 0) WETH.deposit{value: msg.value}();\n', '    }\n', '\n', '    function arbWeth(\n', '        uint256 _wethAmountToFirstMarket,\n', '        uint256 _ethAmountToCoinbase,\n', '        address[] memory _targets,\n', '        bytes[] memory _payloads\n', '    ) external payable onlyExecutor {\n', '        require(_targets.length == _payloads.length);\n', '        uint256 _wethBalanceBefore = WETH.balanceOf(address(this));\n', '        WETH.transfer(_targets[0], _wethAmountToFirstMarket);\n', '        for (uint256 i = 0; i < _targets.length; i++) {\n', '            (bool _success, bytes memory _response) = _targets[i].call(\n', '                _payloads[i]\n', '            );\n', '            require(_success);\n', '            _response;\n', '        }\n', '\n', '        uint256 _wethBalanceAfter = WETH.balanceOf(address(this));\n', '        require(_wethBalanceAfter > _wethBalanceBefore + _ethAmountToCoinbase);\n', '        if (_ethAmountToCoinbase == 0) return;\n', '\n', '        uint256 _ethBalance = address(this).balance;\n', '        if (_ethBalance < _ethAmountToCoinbase)\n', '            WETH.withdraw(_ethAmountToCoinbase - _ethBalance);\n', '\n', '        (bool success, ) = block.coinbase.call{value: _ethAmountToCoinbase}(\n', '            new bytes(0)\n', '        );\n', '        require(success, "CB");\n', '    }\n', '\n', '    function call(\n', '        address payable _to,\n', '        uint256 _value,\n', '        bytes calldata _data\n', '    ) external payable onlyOwner returns (bytes memory) {\n', '        require(_to != address(0));\n', '        (bool _success, bytes memory _result) = _to.call{value: _value}(_data);\n', '        require(_success);\n', '        return _result;\n', '    }\n', '\n', '    function withdraw(uint256 value) external payable onlyOwner {\n', '        if (value > address(this).balance) WETH.withdraw(value);\n', '\n', '        require(address(this).balance >= value, "NEE");\n', '        (bool success, ) = owner.call{value: value}("");\n', '        require(success, "WF");\n', '    }\n', '}']