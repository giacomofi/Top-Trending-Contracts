['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-03\n', '*/\n', '\n', 'pragma solidity ^0.6.0;// SPDX-License-Identifier: MIT\n', '\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name_, string memory symbol_) public {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view virtual returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view virtual returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view virtual returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view virtual override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view virtual override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal virtual {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract ERC20Helper  {\n', '    event TransferOut(uint256 Amount, address To, address Token);\n', '    event TransferIn(uint256 Amount, address From, address Token);\n', '    modifier TestAllownce(\n', '        address _token,\n', '        address _owner,\n', '        uint256 _amount\n', '    ) {\n', '        require(\n', '            ERC20(_token).allowance(_owner, address(this)) >= _amount,\n', '            "no allowance"\n', '        );\n', '        _;\n', '    }\n', '\n', '    function TransferToken(\n', '        address _Token,\n', '        address _Reciver,\n', '        uint256 _Amount\n', '    ) internal {\n', '        uint256 OldBalance = CheckBalance(_Token, address(this));\n', '        emit TransferOut(_Amount, _Reciver, _Token);\n', '        ERC20(_Token).transfer(_Reciver, _Amount);\n', '        require(\n', '            (SafeMath.add(CheckBalance(_Token, address(this)), _Amount)) == OldBalance\n', '                ,\n', '            "recive wrong amount of tokens"\n', '        );\n', '    }\n', '\n', '    function CheckBalance(address _Token, address _Subject)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return ERC20(_Token).balanceOf(_Subject);\n', '    }\n', '\n', '    function TransferInToken(\n', '        address _Token,\n', '        address _Subject,\n', '        uint256 _Amount\n', '    ) internal TestAllownce(_Token, _Subject, _Amount) {\n', '        require(_Amount > 0);\n', '        uint256 OldBalance = CheckBalance(_Token, address(this));\n', '        ERC20(_Token).transferFrom(_Subject, address(this), _Amount);\n', '        emit TransferIn(_Amount, _Subject, _Token);\n', '        require(\n', '            (SafeMath.add(OldBalance, _Amount)) ==\n', '                CheckBalance(_Token, address(this)),\n', '            "recive wrong amount of tokens"\n', '        );\n', '    }\n', '\n', '    function ApproveAllowanceERC20(\n', '        address _Token,\n', '        address _Subject,\n', '        uint256 _Amount\n', '    ) internal {\n', '        require(_Amount > 0);\n', '        ERC20(_Token).approve(_Subject, _Amount);\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', 'contract GovManager is Ownable {\n', '    address public GovernerContract;\n', '\n', '    modifier onlyOwnerOrGov() {\n', '        require(msg.sender == owner() || msg.sender == GovernerContract, "Authorization Error");\n', '        _;\n', '    }\n', '\n', '    function setGovernerContract(address _address) external onlyOwnerOrGov{\n', '        GovernerContract = _address;\n', '    }\n', '\n', '    constructor() public {\n', '        GovernerContract = address(0);\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', 'contract PozBenefit is GovManager {\n', '    constructor() public {\n', '        PozFee = 15; // *10000\n', '        PozTimer = 1000; // *10000\n', '    \n', '       // POZ_Address = address(0x0);\n', '       // POZBenefit_Address = address(0x0);\n', '    }\n', '\n', '    uint256 public PozFee; // the fee for the first part of the pool\n', '    uint256 public PozTimer; //the timer for the first part fo the pool\n', '    \n', '    modifier PercentCheckOk(uint256 _percent) {\n', '        if (_percent < 10000) _;\n', '        else revert("Not in range");\n', '    }\n', '    modifier LeftIsBigger(uint256 _left, uint256 _right) {\n', '        if (_left > _right) _;\n', '        else revert("Not bigger");\n', '    }\n', '\n', '    function SetPozTimer(uint256 _pozTimer)\n', '        public\n', '        onlyOwnerOrGov\n', '        PercentCheckOk(_pozTimer)\n', '    {\n', '        PozTimer = _pozTimer;\n', '    }\n', '\n', '    \n', '}\n', '\n', '\n', '\n', '\n', '\n', 'contract ETHHelper is Ownable {\n', '    constructor() public {\n', '        IsPayble = false;\n', '    }\n', '\n', '    modifier ReceivETH(uint256 msgValue, address msgSender, uint256 _MinETHInvest) {\n', '        require(msgValue >= _MinETHInvest, "Send ETH to invest");\n', '        emit TransferInETH(msgValue, msgSender);\n', '        _;\n', '    }\n', '\n', '    //@dev not/allow contract to receive funds\n', '    receive() external payable {\n', '        if (!IsPayble) revert();\n', '    }\n', '\n', '    event TransferOutETH(uint256 Amount, address To);\n', '    event TransferInETH(uint256 Amount, address From);\n', '\n', '    bool public IsPayble;\n', ' \n', '    function SwitchIsPayble() public onlyOwner {\n', '        IsPayble = !IsPayble;\n', '    }\n', '\n', '    function TransferETH(address payable _Reciver, uint256 _ammount) internal {\n', '        emit TransferOutETH(_ammount, _Reciver);\n', '        uint256 beforeBalance = address(_Reciver).balance;\n', '        _Reciver.transfer(_ammount);\n', '        require(\n', '            SafeMath.add(beforeBalance, _ammount) == address(_Reciver).balance,\n', '            "The transfer did not complite"\n', '        );\n', '    }\n', ' \n', '}\n', '\n', '\n', '\n', '//For whitelist, \n', 'interface IWhiteList {\n', '    function Check(address _Subject, uint256 _Id) external view returns(uint);\n', '    function Register(address _Subject,uint256 _Id,uint256 _Amount) external;\n', '    function IsNeedRegister(uint256 _Id) external view returns(bool);\n', '    function LastRoundRegister(address _Subject,uint256 _Id) external;\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract Manageable is ETHHelper, ERC20Helper, PozBenefit {\n', '    constructor() public {\n', '        Fee = 20; // *10000\n', '        MinDuration = 0; //need to set\n', '        maxTransactionLimit = 400;\n', '    }\n', '    mapping (address => uint256) FeeMap;\n', '    //@dev for percent use uint16\n', '    uint16 internal Fee; //the fee for the pool\n', '    uint16 internal MinDuration; //the minimum duration of a pool, in seconds\n', '\n', '    address public WhiteList_Address;\n', '    bool public isTokenFilterOn;\n', '    uint public WhiteListId;\n', '    uint256 public maxTransactionLimit;\n', '    \n', '    function setWhiteListAddress(address _address) external onlyOwner{\n', '        WhiteList_Address = _address;\n', '    }\n', '\n', '    function setWhiteListId(uint256 _id) external onlyOwner{\n', '        WhiteListId= _id;\n', '    }\n', '\n', '    function swapTokenFilter() external onlyOwner{\n', '        isTokenFilterOn = !isTokenFilterOn;\n', '    }\n', '\n', '    function isTokenWhiteListed(address _tokenAddress) public view returns(bool) {\n', '        return !isTokenFilterOn || IWhiteList(WhiteList_Address).Check(_tokenAddress, WhiteListId) > 0;\n', '    }\n', '\n', '    function setMaxTransactionLimit(uint256 _newLimit) external onlyOwner{\n', '        maxTransactionLimit = _newLimit;\n', '    }\n', '\n', '    function GetMinDuration() public view returns (uint16) {\n', '        return MinDuration;\n', '    }\n', '\n', '    function SetMinDuration(uint16 _minDuration) public onlyOwner {\n', '        MinDuration = _minDuration;\n', '    }\n', '\n', '    function GetFee() public view returns (uint16) {\n', '        return Fee;\n', '    }\n', '\n', '    function SetFee(uint16 _fee) public onlyOwner\n', '        PercentCheckOk(_fee)\n', '        LeftIsBigger( _fee, PozFee) {\n', '        Fee = _fee;\n', '    }\n', '\n', '    function SetPOZFee(uint16 _fee)\n', '        public\n', '        onlyOwner\n', '        PercentCheckOk(_fee)\n', '        LeftIsBigger( Fee,_fee)\n', '    {\n', '        PozFee = _fee;\n', '    }\n', '\n', '    function WithdrawETHFee(address payable _to) public onlyOwner {\n', '        _to.transfer(address(this).balance); // keeps only fee eth on contract //To Do need to take 16% to burn!!!\n', '    }\n', '\n', '    function WithdrawERC20Fee(address _Token, address _to) public onlyOwner {    \n', '        ERC20(_Token).transfer(_to, FeeMap[_Token]);\n', '        FeeMap[_Token] = 0 ;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', 'contract LockedPoolz is Manageable {\n', '    constructor() public {\n', '        Index = 0;\n', '    }\n', '    \n', '    // add contract name\n', '    string public name;\n', '\n', '    event NewPoolCreated(uint256 PoolId, address Token, uint64 FinishTime, uint256 StartAmount, address Owner);\n', '    event PoolOwnershipTransfered(uint256 PoolId, address NewOwner, address OldOwner);\n', '    event PoolApproval(uint256 PoolId, address Spender, uint256 Amount);\n', '\n', '    struct Pool {\n', '        uint64 UnlockTime;\n', '        uint256 Amount;\n', '        address Owner;\n', '        address Token;\n', '        mapping(address => uint) Allowance;\n', '    }\n', '    // transfer ownership\n', '    // allowance\n', '    // split amount\n', '\n', '    mapping(uint256 => Pool) AllPoolz;\n', '    mapping(address => uint256[]) MyPoolz;\n', '    uint256 internal Index;\n', '\n', '    modifier isTokenValid(address _Token){\n', '        require(isTokenWhiteListed(_Token), "Need Valid ERC20 Token"); //check if _Token is ERC20\n', '        _;\n', '    }\n', '\n', '    modifier isPoolValid(uint256 _PoolId){\n', '        require(_PoolId < Index, "Pool does not exist");\n', '        _;\n', '    }\n', '\n', '    modifier isPoolOwner(uint256 _PoolId){\n', '        require(AllPoolz[_PoolId].Owner == msg.sender, "You are not Pool Owner");\n', '        _;\n', '    }\n', '\n', '    modifier isAllowed(uint256 _PoolId, uint256 _amount){\n', '        require(_amount <= AllPoolz[_PoolId].Allowance[msg.sender], "Not enough Allowance");\n', '        _;\n', '    }\n', '\n', '    modifier isLocked(uint256 _PoolId){\n', '        require(AllPoolz[_PoolId].UnlockTime > now, "Pool is Unlocked");\n', '        _;\n', '    }\n', '\n', '    modifier notZeroAddress(address _address){\n', '        require(_address != address(0x0), "Zero Address is not allowed");\n', '        _;\n', '    }\n', '\n', '    modifier isGreaterThanZero(uint256 _num){\n', '        require(_num > 0, "Array length should be greater than zero");\n', '        _;\n', '    }\n', '\n', '    modifier isBelowLimit(uint256 _num){\n', '        require(_num <= maxTransactionLimit, "Max array length limit exceeded");\n', '        _;\n', '    }\n', '\n', '    function SplitPool(uint256 _PoolId, uint256 _NewAmount , address _NewOwner) internal returns(uint256) {\n', '        Pool storage pool = AllPoolz[_PoolId];\n', '        require(pool.Amount >= _NewAmount, "Not Enough Amount Balance");\n', '        uint256 poolAmount = SafeMath.sub(pool.Amount, _NewAmount);\n', '        pool.Amount = poolAmount;\n', '        uint256 poolId = CreatePool(pool.Token, pool.UnlockTime, _NewAmount, _NewOwner);\n', '        return poolId;\n', '    }\n', '\n', '    //create a new pool\n', '    function CreatePool(\n', '        address _Token, //token to lock address\n', '        uint64 _FinishTime, //Until what time the pool will work\n', '        uint256 _StartAmount, //Total amount of the tokens to sell in the pool\n', '        address _Owner // Who the tokens belong to\n', '    ) internal returns(uint256){\n', '        //register the pool\n', '        AllPoolz[Index] = Pool(_FinishTime, _StartAmount, _Owner, _Token);\n', '        MyPoolz[_Owner].push(Index);\n', '        emit NewPoolCreated(Index, _Token, _FinishTime, _StartAmount, _Owner);\n', '        uint256 poolId = Index;\n', '        Index = SafeMath.add(Index, 1); //joke - overflowfrom 0 on int256 = 1.16E77\n', '        return poolId;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', 'contract LockedControl is LockedPoolz{\n', '\n', '    function TransferPoolOwnership(\n', '        uint256 _PoolId,\n', '        address _NewOwner\n', '    ) external isPoolValid(_PoolId) isPoolOwner(_PoolId) isLocked(_PoolId) notZeroAddress(_NewOwner) {\n', '        Pool storage pool = AllPoolz[_PoolId];\n', '        pool.Owner = _NewOwner;\n', '        emit PoolOwnershipTransfered(_PoolId, _NewOwner, msg.sender);\n', '    }\n', '\n', '    function SplitPoolAmount(\n', '        uint256 _PoolId,\n', '        uint256 _NewAmount,\n', '        address _NewOwner\n', '    ) external isPoolValid(_PoolId) isPoolOwner(_PoolId) isLocked(_PoolId) returns(uint256) {\n', '        uint256 poolId = SplitPool(_PoolId, _NewAmount, _NewOwner);\n', '        return poolId;\n', '    }\n', '\n', '    function ApproveAllowance(\n', '        uint256 _PoolId,\n', '        uint256 _Amount,\n', '        address _Spender\n', '    ) external isPoolValid(_PoolId) isPoolOwner(_PoolId) isLocked(_PoolId) notZeroAddress(_Spender) {\n', '        Pool storage pool = AllPoolz[_PoolId];\n', '        pool.Allowance[_Spender] = _Amount;\n', '        emit PoolApproval(_PoolId, _Spender, _Amount);\n', '    }\n', '\n', '    function GetPoolAllowance(uint256 _PoolId, address _Address) public view isPoolValid(_PoolId) returns(uint256){\n', '        return AllPoolz[_PoolId].Allowance[_Address];\n', '    }\n', '\n', '    function SplitPoolAmountFrom(\n', '        uint256 _PoolId,\n', '        uint256 _Amount,\n', '        address _Address\n', '    ) external isPoolValid(_PoolId) isAllowed(_PoolId, _Amount) isLocked(_PoolId) returns(uint256) {\n', '        uint256 poolId = SplitPool(_PoolId, _Amount, _Address);\n', '        Pool storage pool = AllPoolz[_PoolId];\n', '        uint256 _NewAmount = SafeMath.sub(pool.Allowance[msg.sender], _Amount);\n', '        pool.Allowance[_Address]  = _NewAmount;\n', '        return poolId;\n', '    }\n', '\n', '    function CreateNewPool(\n', '        address _Token, //token to lock address\n', '        uint64 _FinishTime, //Until what time the pool will work\n', '        uint256 _StartAmount, //Total amount of the tokens to sell in the pool\n', '        address _Owner // Who the tokens belong to\n', '    ) public isTokenValid(_Token) notZeroAddress(_Owner) returns(uint256) {\n', '        TransferInToken(_Token, msg.sender, _StartAmount);\n', '        uint256 poolId = CreatePool(_Token, _FinishTime, _StartAmount, _Owner);\n', '        return poolId;\n', '    }\n', '\n', '    function CreateMassPools(\n', '        address _Token,\n', '        uint64[] calldata _FinishTime,\n', '        uint256[] calldata _StartAmount,\n', '        address[] calldata _Owner\n', '    ) external isGreaterThanZero(_Owner.length) isBelowLimit(_Owner.length) returns(uint256, uint256) {\n', '        require(_Owner.length == _FinishTime.length, "Date Array Invalid");\n', '        require(_Owner.length == _StartAmount.length, "Amount Array Invalid");\n', '        TransferInToken(_Token, msg.sender, getArraySum(_StartAmount));\n', '        uint256 firstPoolId = Index;\n', '        for(uint i=0 ; i < _Owner.length; i++){\n', '            CreatePool(_Token, _FinishTime[i], _StartAmount[i], _Owner[i]);\n', '        }\n', '        uint256 lastPoolId = SafeMath.sub(Index, 1);\n', '        return (firstPoolId, lastPoolId);\n', '    }\n', '\n', '    // create pools with respect to finish time\n', '    function CreatePoolsWrtTime(\n', '        address _Token,\n', '        uint64[] calldata _FinishTime,\n', '        uint256[] calldata _StartAmount,\n', '        address[] calldata _Owner\n', '    )   external \n', '        isGreaterThanZero(_Owner.length)\n', '        isGreaterThanZero(_FinishTime.length)\n', '        isBelowLimit(_Owner.length * _FinishTime.length)\n', '        returns(uint256, uint256)\n', '    {\n', '        require(_Owner.length == _StartAmount.length, "Amount Array Invalid");\n', '        TransferInToken(_Token, msg.sender, getArraySum(_StartAmount) * _FinishTime.length);\n', '        uint256 firstPoolId = Index;\n', '        for(uint i=0 ; i < _FinishTime.length ; i++){\n', '            for(uint j=0 ; j < _Owner.length ; j++){\n', '                CreatePool(_Token, _FinishTime[i], _StartAmount[j], _Owner[j]);\n', '            }\n', '        }\n', '        uint256 lastPoolId = SafeMath.sub(Index, 1);\n', '        return (firstPoolId, lastPoolId);\n', '    }\n', '\n', '    function getArraySum(uint256[] calldata _array) internal pure returns(uint256) {\n', '        uint256 sum = 0;\n', '        for(uint i=0 ; i<_array.length ; i++){\n', '            sum = sum + _array[i];\n', '        }\n', '        return sum;\n', '    }\n', '\n', '}\n', '\n', '\n', '\n', '\n', 'contract LockedPoolzData is LockedControl {\n', '    function GetMyPoolsId() public view returns (uint256[] memory) {\n', '        return MyPoolz[msg.sender];\n', '    }\n', '\n', '    function GetPoolData(uint256 _id)\n', '        public\n', '        view\n', '        isPoolValid(_id)\n', '        returns (\n', '            uint64,\n', '            uint256,\n', '            address,\n', '            address\n', '        )\n', '    {\n', '        Pool storage pool = AllPoolz[_id];\n', '        require(pool.Owner == msg.sender || pool.Allowance[msg.sender] > 0, "Private Information");\n', '        return (\n', '            AllPoolz[_id].UnlockTime,\n', '            AllPoolz[_id].Amount,\n', '            AllPoolz[_id].Owner,\n', '            AllPoolz[_id].Token\n', '        );\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', 'contract LockedDeal is LockedPoolzData {\n', '    constructor() public {\n', '        StartIndex = 0;\n', '    }\n', '\n', '    uint256 internal StartIndex;\n', '\n', '    //@dev no use of revert to make sure the loop will work\n', '    function WithdrawToken(uint256 _PoolId) public returns (bool) {\n', '        //pool is finished + got left overs + did not took them\n', '        if (\n', '            _PoolId < Index &&\n', '            AllPoolz[_PoolId].UnlockTime <= now &&\n', '            AllPoolz[_PoolId].Amount > 0\n', '        ) {\n', '            TransferToken(\n', '                AllPoolz[_PoolId].Token,\n', '                AllPoolz[_PoolId].Owner,\n', '                AllPoolz[_PoolId].Amount\n', '            );\n', '            AllPoolz[_PoolId].Amount = 0;\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '}']