['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-28\n', '*/\n', '\n', 'pragma solidity ^0.4.4;\n', '\n', 'contract Token {\n', '\n', '    /// @return :Returns the circulation of the token\n', '    function totalSupply() constant returns (uint256 supply) {}\n', '\n', '    /// @param _owner :Query the token balance of Ethereum address\n', '    /// @return The balance \n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '\n', '    /// @notice msg.sender (transaction sender) send_ Value (a certain number of tokens) to_ To (recipient)\n', "    /// @param _to :Recipient's address\n", '    /// @param _value Number of tokens sent\n', '    /// @return Is it successful\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice Sender sent_ Value (a certain number of tokens) to_ To (recipient) \n', '    /// @param _from :Sender Address\n', "    /// @param _to :Recipient's address\n", '    /// @param _value : Number sent\n', '    /// @return : Is it successful\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice :The publisher approves a certain number of tokens to be sent from one address\n', '    /// @param _spender : Address to send token\n', '    /// @param _value : Number of tokens sent\n', '    /// @return  : Is it successful\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '\n', '    /// @param _owner : Address with token\n', '    /// @param _spender : The address where the token can be sent\n', '    /// @return The number of tokens that are also allowed to be sent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '    /// Send token event\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    ///Approval event\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        //The default token circulation cannot exceed (2 ^ 256 - 1)\n', "        //If you don't set the circulation and have more tokens over time, you need to make sure \n", "        //that you don't exceed the maximum, use the following if statement\n", '        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        //The same as above, if you want to make sure the circulation does not exceed the maximum\n', '        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalSupply;\n', '}\n', '\n', 'contract SAMOYED is StandardToken {\n', '\n', '    function () {\n', '        //if ether is sent to this address, send it back.\n', '        throw;\n', '    }\n', '\n', '    /* Public variables of the token */\n', '\n', '    /*\n', '    NOTE:\n', '    The following variables are OPTIONAL vanities. One does not have to include them.\n', '    They allow one to customise the token contract & in no way influences the core functionality.\n', '    Some wallets/interfaces might not even bother to look at this information.\n', '    */\n', '    string public name;                    //Token Name: SAMOYED\n', '    uint8 public decimals;                //Decimal place\n', '    string public symbol;                 //identification\n', "    string public version = 'H0.1';       //Version number\n", '\n', '    function SAMOYED(\n', '        uint256 _initialAmount,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol\n', '        ) {\n', "        balances[msg.sender] = _initialAmount;               //The contract publisher's balance is the number of issues\n", '        totalSupply = _initialAmount;                        //Circulation\n', '        name = _tokenName;                                  //Token name\n', '        decimals = _decimalUnits;                           // Token decimal\n', '        symbol = _tokenSymbol;                              //Token identification\n', '    }\n', '\n', '    /*Approval and then call the receiving contract. */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '\n', '        //Call the receiveapprovalcall method that you want to notify the contract. This method does not need to be included in the contract.\n', '        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '        //Assume that this can succeed, otherwise you should call vanilla approve.\n', '        if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { throw; }\n', '        return true;\n', '    }\n', '}']