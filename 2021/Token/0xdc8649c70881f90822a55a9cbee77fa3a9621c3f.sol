['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-13\n', '*/\n', '\n', '// SPDX-License-Identifier: Apache-2.0\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '  /**\n', '   * @dev Returns the addition of two unsigned integers, reverting on\n', '   * overflow.\n', '   *\n', "   * Counterpart to Solidity's `+` operator.\n", '   *\n', '   * Requirements:\n', '   * - Addition cannot overflow.\n', '   */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a, "SafeMath: addition overflow");\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the subtraction of two unsigned integers, reverting on\n', '   * overflow (when the result is negative).\n', '   *\n', "   * Counterpart to Solidity's `-` operator.\n", '   *\n', '   * Requirements:\n', '   * - Subtraction cannot overflow.\n', '   */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return sub(a, b, "SafeMath: subtraction overflow");\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '   * overflow (when the result is negative).\n', '   *\n', "   * Counterpart to Solidity's `-` operator.\n", '   *\n', '   * Requirements:\n', '   * - Subtraction cannot overflow.\n', '   */\n', '  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '    require(b <= a, errorMessage);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the multiplication of two unsigned integers, reverting on\n', '   * overflow.\n', '   *\n', "   * Counterpart to Solidity's `*` operator.\n", '   *\n', '   * Requirements:\n', '   * - Multiplication cannot overflow.\n', '   */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the integer division of two unsigned integers. Reverts on\n', '   * division by zero. The result is rounded towards zero.\n', '   *\n', "   * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '   * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '   * uses an invalid opcode to revert (consuming all remaining gas).\n', '   *\n', '   * Requirements:\n', '   * - The divisor cannot be zero.\n', '   */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return div(a, b, "SafeMath: division by zero");\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '   * division by zero. The result is rounded towards zero.\n', '   *\n', "   * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '   * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '   * uses an invalid opcode to revert (consuming all remaining gas).\n', '   *\n', '   * Requirements:\n', '   * - The divisor cannot be zero.\n', '   */\n', '  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '    // Solidity only automatically asserts when dividing by 0\n', '    require(b > 0, errorMessage);\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '   * Reverts when dividing by zero.\n', '   *\n', "   * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '   * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '   * invalid opcode to revert (consuming all remaining gas).\n', '   *\n', '   * Requirements:\n', '   * - The divisor cannot be zero.\n', '   */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return mod(a, b, "SafeMath: modulo by zero");\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '   * Reverts with custom message when dividing by zero.\n', '   *\n', "   * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '   * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '   * invalid opcode to revert (consuming all remaining gas).\n', '   *\n', '   * Requirements:\n', '   * - The divisor cannot be zero.\n', '   */\n', '  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '    require(b != 0, errorMessage);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '  // Empty internal constructor, to prevent people from mistakenly deploying\n', '  // an instance of this contract, which should be used via inheritance.\n', '  constructor ()  { }\n', '\n', '  function _msgSender() internal view returns (address payable) {\n', '    return payable(msg.sender);\n', '  }\n', '\n', '  function _msgData() internal view returns (bytes memory) {\n', '    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '    return msg.data;\n', '  }\n', '}\n', '\n', '\n', '//ownerable\n', '\n', 'contract Ownable is Context {\n', '  address private _owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev Initializes the contract setting the deployer as the initial owner.\n', '   */\n', '  constructor () {\n', '    address msgSender = _msgSender();\n', '    _owner = msgSender;\n', '    emit OwnershipTransferred(address(0), msgSender);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the address of the current owner.\n', '   */\n', '  function owner() public view returns (address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Leaves the contract without owner. It will not be possible to call\n', '   * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '   *\n', '   * NOTE: Renouncing ownership will leave the contract without an owner,\n', '   * thereby removing any functionality that is only available to the owner.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipTransferred(_owner, address(0));\n', '    _owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '   * Can only be called by the current owner.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    _transferOwnership(newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '   */\n', '  function _transferOwnership(address newOwner) internal {\n', '    require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', '\n', 'contract Staking is Ownable{\n', '    using SafeMath for uint256;\n', '    \n', '    event Withdraw(address a,uint256 amount);\n', '    event Stake(address a,uint256 amount,uint256 unlocktime);\n', '    \n', '    struct staker{\n', '        uint256 amount;\n', '        uint256 lockedtime;\n', '        uint256 rate;\n', '    }\n', '    \n', '    mapping (address => staker) public _stakers;\n', '    \n', '    \n', '    //staking steps\n', '    uint256[] private times;\n', '    uint256[] private rates;\n', '    \n', '    //locked balance in contract\n', '    uint256 public lockedBalance;\n', '    \n', '    //buyforstaking\n', '    \n', '    IERC20 public usdt = IERC20 (0xdAC17F958D2ee523a2206206994597C13D831ec7);\n', '    IERC20 public weth =IERC20 (0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n', '    IERC20 public atari = IERC20 (0xdacD69347dE42baBfAEcD09dC88958378780FB62);\n', '    \n', '    address private pairAtariEth = 0xc4d9102e36c5063b98010A03C1F7C8bD44c32A00;\n', '    address public pairEthUsdt = 0x0d4a11d5EEaaC28EC3F61d100daF4d40471f1852;\n', '    \n', '    constructor(){\n', '        times.push(2592000);\n', '        times.push(7776000);\n', '        times.push(15552000);\n', '        times.push(31104000);\n', '        rates.push(1);\n', '        rates.push(5);\n', '        rates.push(12);\n', '        rates.push(30);\n', '        \n', '    }\n', '    \n', '    function stake(uint256 amount,uint256 stakestep) external {\n', '        require(_stakers[msg.sender].amount==0,"already stake exist");\n', '        require(amount!=0 ,"amount must not 0");\n', '        require(times[stakestep]!=0,"lockedtime must not 0");\n', '        \n', '        atari.transferFrom(msg.sender,address(this),amount);\n', '        \n', '        uint256 lockBalance=amount.mul(rates[stakestep].add(100)).div(100);\n', '        lockedBalance=lockedBalance.add(lockBalance);\n', '        \n', '        require(lockedBalance<atari.balanceOf(address(this)),"Stake : staking is full");\n', '        \n', '        _stakers[msg.sender]= staker(lockBalance,block.timestamp.add(times[stakestep]),rates[stakestep]);\n', '        \n', '        emit Stake(msg.sender,lockBalance,block.timestamp.add(times[stakestep]));\n', '    }\n', '    \n', '    function withdraw() external {\n', '        require(_stakers[msg.sender].amount>0,"there is no staked amount");\n', '        require(_stakers[msg.sender].lockedtime<block.timestamp,"not ready to withdraw");\n', '        \n', '        lockedBalance=lockedBalance.sub(_stakers[msg.sender].amount);\n', '        atari.transfer(msg.sender,_stakers[msg.sender].amount);\n', '        _stakers[msg.sender]=staker(0,0,0);\n', '    }\n', '    \n', '    function getlocktime(address a)external view returns (uint256){\n', '        if(block.timestamp>_stakers[a].lockedtime)\n', '            return 0;\n', '        return _stakers[a].lockedtime.sub(block.timestamp);\n', '    }\n', '    \n', '    function getamount(address a)external view returns(uint256){\n', '        return _stakers[a].amount;\n', '    }\n', '    \n', '    function getTotoalAmount() external view returns(uint256){\n', '       return atari.balanceOf(address(this));\n', '    }\n', '    \n', '    \n', '    //for Owner\n', '    function withdrawOwner(uint256 amount) external onlyOwner{\n', '        require(amount<atari.balanceOf(address(this)).sub(lockedBalance));\n', '        atari.transfer(_msgSender(),amount);\n', '    }\n', '    \n', '    function withdrawOwnerETH(uint256 amount) external payable onlyOwner{\n', '        require(address(this).balance>amount);\n', '        _msgSender().transfer(amount);    \n', '    }\n', '    \n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n', "        require(amountIn > 0, 'Uniswap: INSUFFICIENT_OUTPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'Uniswap: INSUFFICIENT_LIQUIDITY');\n", '        uint numerator = amountIn.mul(reserveOut);\n', '        uint denominator = reserveIn.add(amountIn);\n', '        amountOut = numerator / denominator;\n', '    }\n', '    \n', '    \n', '    \n', '    function tokenPriceOut(uint256 amountin) public view returns(uint256){\n', '        \n', '        uint256 ethAmount = weth.balanceOf(pairAtariEth);\n', '        uint256 atariAmount = atari.balanceOf(pairAtariEth);\n', '        \n', '        return getAmountOut(amountin,ethAmount,atariAmount);\n', '    }\n', '    \n', '    function tokenPriceOutUsdt(uint256 amountin) public view returns(uint256){\n', '        \n', '        //get eth amount with usdt amount\n', '        uint256 ethAmount = weth.balanceOf(pairEthUsdt);\n', '        uint256 usdtAmount = usdt.balanceOf(pairEthUsdt);\n', '        \n', '        uint256 amountin1 = getAmountOut(amountin,usdtAmount,ethAmount);\n', '        \n', '        uint256 ethAmount1 = weth.balanceOf(pairAtariEth);\n', '        uint256 atariAmount = atari.balanceOf(pairAtariEth);\n', '        \n', '        return getAmountOut(amountin1,ethAmount1,atariAmount);\n', '    }\n', '    \n', '\n', '    \n', '    function buyforstakingwithexactEHTforToken(uint256 stakestep) external payable {\n', '        uint256 tokenAmount=tokenPriceOut(msg.value.mul(100).div(100-rates[stakestep]));\n', '        \n', '        lockedBalance=lockedBalance.add(tokenAmount);\n', '        require(lockedBalance<atari.balanceOf(address(this)),"Stake : staking is full");\n', '        _stakers[msg.sender]=staker(tokenAmount,block.timestamp.add(times[stakestep]),rates[stakestep]);\n', '        payable(owner()).transfer(msg.value);\n', '        emit Stake(msg.sender,tokenAmount,block.timestamp.add(times[stakestep]));\n', '    }\n', '    \n', '    function buyforstakingwithexactUsdtforToken(uint256 amount, uint256 stakestep) external {\n', '        \n', '        uint256 tokenAmount=tokenPriceOutUsdt(amount.mul(100).div(100-rates[stakestep]));\n', '        usdt.transferFrom(msg.sender,owner(),amount);\n', '        lockedBalance=lockedBalance.add(tokenAmount);\n', '        require(lockedBalance<atari.balanceOf(address(this)),"Stake : staking is full");\n', '        _stakers[msg.sender]=staker(tokenAmount,block.timestamp.add(times[stakestep]),rates[stakestep]);\n', '        \n', '        emit Stake(msg.sender,tokenAmount,block.timestamp.add(times[stakestep]));\n', '    }\n', '    \n', '    function buy() external payable {\n', '        uint256 tokenAmount=tokenPriceOut(msg.value);\n', '        require(atari.balanceOf(address(this)).sub(lockedBalance)>tokenAmount, "stake: atari balance not enough");\n', '        atari.transfer(msg.sender,tokenAmount);\n', '        payable(owner()).transfer(msg.value);\n', '    }\n', '    \n', '    function buyforUsdt(uint256 amount) external  {\n', '        uint256 tokenAmount=tokenPriceOutUsdt(amount);\n', '        require(atari.balanceOf(address(this)).sub(lockedBalance)>tokenAmount, "stake: atari balance not enough");\n', '        atari.transfer(msg.sender,tokenAmount);\n', '        usdt.transferFrom(msg.sender,owner(),amount);\n', '    }\n', '    \n', '    \n', '    // function buyforstakingwithEHTforexactToken(uint256 amountOut,uint256 stakestep) external payable {\n', '        \n', '    //     uint256 ETHAmount=tokenPriceIn(amountOut).mul(100-rates[stakestep]).div(100);\n', '    //     require(ETHAmount==msg.value,"buyforstaking : wrong ETH amount");\n', '        \n', '    //     lockedBalance=lockedBalance.add(amountOut);\n', '    //     _stakers[msg.sender]=staker(amountOut,block.timestamp.add(times[stakestep]),rates[stakestep]);\n', '        \n', '    //     emit Stake(msg.sender,amountOut,block.timestamp.add(times[stakestep]));\n', '    // }\n', '    \n', '}']