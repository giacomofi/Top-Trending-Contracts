['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-22\n', '*/\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '//----------------------------------------------------------------------------------------------------------------------\n', '//----------------------------------------------------------------------------------------------------------------------\n', '//  Symbol          :   SEEK\n', '//  Name            :   SeekarCoin\n', '//  Total Supply    :   1000000\n', '//  Decimals        :   3\n', '//  Author          :   Kordel Kade France\n', '//  Author Account  :   0xDeD6FaE6e3BDB4F86cf692Dc35884B946a7CcE88\n', '//----------------------------------------------------------------------------------------------------------------------\n', '//----------------------------------------------------------------------------------------------------------------------\n', '\n', 'contract SafeMath {\n', '\n', '    function safeAdd(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '\n', '    function safeSub(uint a, uint b) public pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '\n', '    function safeMul(uint a, uint b) public pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '\n', '    function safeDiv(uint a, uint b) public pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20Interface {\n', '    function buy() payable public returns (uint256 amount);\n', '    function sell(uint256 _amount) public payable returns (uint256 revenue);\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address buyer) public constant returns (uint remaining);\n', '    function transfer(address buyer, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address owner, address buyer, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '    event Sell(uint256 _amount, uint256 revenue, uint256 priceOfOneTokenInWei, address indexed seller, address);\n', '    event Buy(uint256 amount, uint256 priceOfOneTokenInWei, address indexed buyer);\n', '}\n', '\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', 'contract SeekarCoinToken is ERC20Interface, SafeMath {\n', '\n', '    string public symbol;\n', '    string public name;\n', '    uint8 public decimals;\n', '    uint public _totalSupply;\n', '    uint public price;\n', '    uint256 public priceOfOneTokenInWei;\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '    constructor() public {\n', '        symbol = "SEEK";\n', '        name = "SeekarCoin";\n', '        decimals = 3;\n', '        _totalSupply = 1000000000;\n', '        priceOfOneTokenInWei = 1000000000000;\n', '        balances[0xDeD6FaE6e3BDB4F86cf692Dc35884B946a7CcE88] = _totalSupply;\n', '        emit Transfer(address(0), 0xDeD6FaE6e3BDB4F86cf692Dc35884B946a7CcE88, _totalSupply);\n', '        // selfdestruct(0xDeD6FaE6e3BDB4F86cf692Dc35884B946a7CcE88);\n', '    }\n', '    \n', '    function getPrice() public returns(uint256 priceOfOneTokenInWei) {\n', '        uint256 oneCent = 1000000;\n', '        return safeDiv(safeMul(priceOfOneTokenInWei, oneCent), 10000000000000000);\n', '    }\n', '    \n', '\n', '    function buy() payable public returns (uint256 amount) {\n', '        uint256 priceOfOneTokenInWei = getPrice();\n', '        amount = msg.value / priceOfOneTokenInWei;\n', '        transfer(msg.sender, amount);\n', '        emit Buy(amount, priceOfOneTokenInWei, msg.sender);\n', '        return amount;\n', '    }\n', '    \n', '    \n', '    //revenue — ether; amount — tokens\n', '    function sell(uint256 _amount) public payable returns (uint256 revenue) {\n', '        uint256 priceOfOneTokenInWei = getPrice();\n', '        revenue = _amount * priceOfOneTokenInWei;\n', '        require(msg.sender.send(revenue));\n', '        transfer(msg.sender, _amount);\n', '        emit Sell(_amount, revenue, priceOfOneTokenInWei, msg.sender, address(this));\n', '        return revenue;\n', '    }\n', '    \n', '    \n', '    // total supply on blockchain\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply - balances[address(0)];\n', '    }\n', '\n', '\n', '    // account tokenOwner total token balance\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '\n', '    // transfer balance from tokenOwner account to receiving account\n', '    // owner account must have sufficient balance to transfer\n', '    // transfers of 0-value are allowed\n', '    function transfer(address buyer, uint tokens) public returns (bool success) {\n', '        require(tokens <= balances[msg.sender]);\n', '        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n', '        balances[buyer] = safeAdd(balances[buyer], tokens);\n', '        emit Transfer(msg.sender, buyer, tokens);\n', '        return true;\n', '    }\n', '\n', '    // token owner can approve spender to initiate a transferFrom()\n', '    // this transfers tokens from token owner account\n', '    function approve(address spender, uint tokens) public returns (bool) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // transfer tokens from account to account\n', '    // calling account must already have sufficient tokens approve() - d\n', '    // for spending from the account and the following:\n', '    //  - spending account must have sufficient balance to transfer\n', '    //  - buyer must have sufficient allowance to transfer\n', '    //  - 0 value transfers are allowed\n', '    function transferFrom(address owner, address buyer, uint tokens) public returns (bool success) {\n', '        require(tokens <= balances[owner]);\n', '        require(tokens <= allowed[owner][msg.sender]);\n', '\n', '        balances[owner] = safeSub(balances[owner], tokens);\n', '        allowed[owner][msg.sender] = safeSub(allowed[owner][msg.sender], tokens);\n', '        balances[buyer] = safeAdd(balances[buyer], tokens);\n', '        emit Transfer(owner, buyer, tokens);\n', '        return true;\n', '    }\n', '\n', '    // returns the amount of tokens approved by the owner\n', '    // that can be transfered from buyer account.\n', '    function allowance(address tokenOwner, address buyer) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][buyer];\n', '    }\n', '\n', '\n', '    // token owner can approve for buyer to transferFrom() tokens from token owner account\n', '    // buyer contract function receiveApproval() is then executed\n', '    function approveAndCall(address buyer, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][buyer] = tokens;\n', '        emit Approval(msg.sender, buyer, tokens);\n', '        ApproveAndCallFallBack(buyer).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '\n', '    // accept no ETH\n', '    function () public payable {\n', '        revert();\n', '    }\n', '}']