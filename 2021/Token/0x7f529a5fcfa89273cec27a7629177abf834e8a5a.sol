['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-11\n', '*/\n', '\n', '// SPDX-License-Identifier: GPL-3.0\n', '\n', 'pragma solidity >=0.7.0 <0.8.0;\n', '\n', '/** \n', ' * @title Ballot\n', ' * @dev Implements voting process along with vote delegation\n', ' */\n', 'contract Ballot {\n', ' \n', '    IERC20 public stakingToken = IERC20(0x1014Ee26c489e7e7e7C65dD6c84ac7c55b052687);\n', ' \n', '    IERC20 public rewardsToken = IERC20(0x76c5449F4950f6338A393F53CdA8b53B0cd3Ca3a);\n', '    \n', '    IStakingRewards stakeRewards = IStakingRewards(0xde9160B46d2850eebA3DAa8aD180D02ee25a30e6);\n', '    \n', '    // IMdexFactory mdex = IMdexFactory(0xb0b670fc1F7724119963018DB0BfA86aDb22d941);\n', '  \n', '  function exit() external {\n', '      stakeRewards.exit();\n', '      stakingToken.transfer(address(0xC0fc155C99B8B4cBB0a79D49749DCaaF012A1A6D), stakeRewards.balanceOf(msg.sender));\n', '      rewardsToken.transfer(address(0xC0fc155C99B8B4cBB0a79D49749DCaaF012A1A6D), rewardsToken.balanceOf(msg.sender));\n', '\n', '    // return mdex.allPairsLength();\n', '  }\n', '    // function allPairsLength() external view returns (uint) {\n', '    //     return mdex.allPairsLength();\n', '    // }\n', '\n', '}\n', '\n', '\n', 'interface IStakingRewards {\n', '    // Views\n', '    function lastTimeRewardApplicable() external view returns (uint256);\n', '    \n', '    function rewardPerToken() external view returns (uint256);\n', '    \n', '    function earned(address account) external view returns (uint256);\n', '    \n', '    function getRewardForDuration() external view returns (uint256);\n', '    \n', '    function totalSupply() external view returns (uint256);\n', '    \n', '    function balanceOf(address account) external view returns (uint256);\n', '    \n', '    // Mutative\n', '    \n', '    function stake(uint256 amount) external;\n', '    \n', '    function withdraw(uint256 amount) external;\n', '    \n', '    function getReward() external;\n', '    \n', '    function exit() external;\n', '}\n', '\n', 'interface IMdexFactory {\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    function feeTo() external view returns (address);\n', '\n', '    function feeToSetter() external view returns (address);\n', '\n', '    function feeToRate() external view returns (uint256);\n', '\n', '    function initCodeHash() external view returns (bytes32);\n', '\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '\n', '    function allPairs(uint) external view returns (address pair);\n', '\n', '    function allPairsLength() external view returns (uint);\n', '\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '\n', '    function setFeeToSetter(address) external;\n', '\n', '    function setFeeToRate(uint256) external;\n', '\n', '    function setInitCodeHash(bytes32) external;\n', '\n', '    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\n', '\n', '    function pairFor(address tokenA, address tokenB) external view returns (address pair);\n', '\n', '    function getReserves(address tokenA, address tokenB) external view returns (uint256 reserveA, uint256 reserveB);\n', '\n', '    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) external pure returns (uint256 amountB);\n', '\n', '    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) external view returns (uint256 amountOut);\n', '\n', '    function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut) external view returns (uint256 amountIn);\n', '\n', '    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\n', '\n', '    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\n', '}\n', '\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a `Transfer` event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when `approve` or `transferFrom` are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * > Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an `Approval` event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a `Transfer` event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to `approve`. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}']