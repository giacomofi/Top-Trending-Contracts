['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-13\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >= 0.8.0;\n', '\n', 'interface IERC165 {\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', 'abstract contract ERC165 is IERC165 {\n', '    /**\n', '     * @dev See {IERC165-supportsInterface}.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n', '        return interfaceId == type(IERC165).interfaceId;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'abstract contract IQLF is IERC165 {\n', '    /**\n', '     * @dev Returns if the given address is qualified, implemented on demand.\n', '     */\n', '    function ifQualified (address account) virtual external view returns (bool);\n', '\n', '    /**\n', '     * @dev Logs if the given address is qualified, implemented on demand.\n', '     */\n', '    function logQualified (address account, uint256 ito_start_time) virtual external returns (bool);\n', '\n', '    /**\n', '     * @dev Ensure that custom contract implements `ifQualified` amd `logQualified` correctly.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) virtual external override pure returns (bool) {\n', '        return interfaceId == this.supportsInterface.selector || \n', '            interfaceId == (this.ifQualified.selector ^ this.logQualified.selector);\n', '    }\n', '\n', '    /**\n', '     * @dev Emit when `ifQualified` is called to decide if the given `address`\n', '     * is `qualified` according to the preset rule by the contract creator and \n', '     * the current block `number` and the current block `timestamp`.\n', '     */\n', '    event Qualification(address account, bool qualified, uint256 blockNumber, uint256 timestamp);\n', '}\n', '\n', 'contract QLF_LUCKYDRAW is IQLF {\n', '\n', '    string private name;\n', '    uint256 private creation_time;\n', '    uint256 start_time;\n', '    // in wei\n', '    uint256 public max_gas_price;\n', '    uint256 public min_token_amount;\n', '    address public token_addr;\n', '    // Chance to be selected as a lucky player\n', '    // 0 : 100%\n', '    // 1 : 75%\n', '    // 2 : 50%\n', '    // 3 : 25%\n', '    uint8 public lucky_factor;\n', '    address creator;\n', '    mapping(address => bool) black_list;\n', '    mapping(address => bool) whilte_list;\n', '\n', '    event GasPriceOver ();\n', '    event Unlucky ();\n', '\n', '    modifier creatorOnly {\n', '        require(msg.sender == creator, "Not Authorized");\n', '        _;\n', '    }\n', '\n', '    constructor (string memory _name,\n', '                uint256 _start_time,\n', '                uint256 _max_gas_price,\n', '                uint256 _min_token_amount,\n', '                address _token_addr,\n', '                uint8 _lucky_factor) {\n', '        name = _name;\n', '        creation_time = block.timestamp;\n', '        start_time = _start_time;\n', '        max_gas_price = _max_gas_price;\n', '        min_token_amount = _min_token_amount;\n', '        token_addr = _token_addr;\n', '        lucky_factor = _lucky_factor;\n', '        creator = msg.sender;\n', '    }\n', '\n', '    function get_name() public view returns (string memory) {\n', '        return name;\n', '    }\n', '\n', '    function get_creation_time() public view returns (uint256) {\n', '        return creation_time;\n', '    }\n', '\n', '    function get_start_time() public view returns (uint256) {\n', '        return start_time;\n', '    }\n', '\n', '    function set_start_time(uint256 _start_time) public creatorOnly {\n', '        start_time = _start_time;\n', '    }\n', '\n', '    function set_max_gas_price(uint256 _max_gas_price) public creatorOnly {\n', '        max_gas_price = _max_gas_price;\n', '    }\n', '\n', '    function set_min_token_amount(uint256 _min_token_amount) public creatorOnly {\n', '        min_token_amount = _min_token_amount;\n', '    }\n', '\n', '    function set_lucky_factor(uint8 _lucky_factor) public creatorOnly {\n', '        lucky_factor = _lucky_factor;\n', '    }\n', '\n', '    function set_token_addr(address _token_addr) public creatorOnly {\n', '        token_addr = _token_addr;\n', '    }\n', '\n', '    function add_whitelist(address[] memory addrs) public creatorOnly {\n', '        for (uint256 i = 0; i < addrs.length; i++) {\n', '            whilte_list[addrs[i]] = true;\n', '        }\n', '    }\n', '\n', '    function remove_whitelist(address[] memory addrs) public creatorOnly {\n', '        for (uint256 i = 0; i < addrs.length; i++) {\n', '            delete whilte_list[addrs[i]];\n', '        }\n', '    }\n', '\n', '    function ifQualified(address account) public view override returns (bool qualified) {\n', '        qualified = (whilte_list[account] || IERC20(token_addr).balanceOf(account) >= min_token_amount);\n', '    } \n', '\n', '    function logQualified(address account, uint256 ito_start_time) public override returns (bool qualified) {\n', '        if (tx.gasprice > max_gas_price) {\n', '            emit GasPriceOver();\n', '            revert("Gas price too high");\n', '        }\n', '        if (!whilte_list[account])\n', '            require(IERC20(token_addr).balanceOf(account) >= min_token_amount, "Not holding enough tokens");\n', '\n', '        if (start_time > block.timestamp || ito_start_time > block.timestamp) {\n', '            black_list[account] = true;\n', '            revert("Not started.");\n', '        }\n', '        require(black_list[account] == false, "Blacklisted");\n', '        if (isLucky(account) == false) {\n', '            emit Unlucky();\n', '            emit Qualification(account, false, block.number, block.timestamp);\n', '            revert("Not lucky enough");\n', '        }\n', '        emit Qualification(account, true, block.number, block.timestamp);\n', '        qualified = true;\n', '    } \n', '\n', '    function supportsInterface(bytes4 interfaceId) external override pure returns (bool) {\n', '        return interfaceId == this.supportsInterface.selector || \n', '            interfaceId == (this.ifQualified.selector ^ this.logQualified.selector) ||\n', '            interfaceId == this.get_start_time.selector ||\n', '            interfaceId == this.isLucky.selector;\n', '    }\n', '\n', '    function isLucky(address account) public view returns (bool) {\n', '        if (lucky_factor == 0) {\n', '            return true;\n', '        }\n', '        uint256 blocknumber = block.number;\n', '        uint256 random_block = blocknumber - 1 - uint256(\n', '            keccak256(abi.encodePacked(blockhash(blocknumber-1), account))\n', '        ) % 255;\n', '        bytes32 sha = keccak256(abi.encodePacked(blockhash(random_block), account, block.coinbase, block.difficulty));\n', '        return ((uint8(sha[0]) & 0x03) >= lucky_factor);\n', '    }\n', '}']