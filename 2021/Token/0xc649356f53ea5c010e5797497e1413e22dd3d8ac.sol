['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-12\n', '*/\n', '\n', '// \u200e️\u200d🔥faya.finance (FAYA)\u200e️\u200d🔥\n', '// FAYA BURNS TOKENS\n', '//\n', '// Randomized token burns and redistribution + massive charity\n', '// 10% tax on buys, 17.5% on sells\n', '//\n', '// __Tokenomics__\n', '// - Each transaction results in up to a 0.2% burn of the current UNISWAP supply.\n', '// - Each buy has a 5% tax, given to one random holder*, + 5% to the charity wallet.\n', '// - Each sell has a 10% tax, split between 2 random holders*, + 7.5% to the charity wallet.\n', '// - BUT, if the lucky one sold tokens in the past, they get less. If sold once, gets half. Sold twice, gets a third.\n', '//   The rest of the tax is BURNT\n', '// - max buy = 2% of current supply, i.e. 2,000 tokens a launch\n', '// - max sell = 1% of current supply, i.e. 1,000 tokens a launch\n', '//\n', '// Initial supply: 100,000\n', '// Burns stop after 90% is burnt\n', '//\n', '// Charity funds to be distributed based on community votes, TBD\n', '//\n', '// https://faya.finance\n', '// Telegram: https://t.me/FAYAToken\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.7.0 <0.8.0;\n', '\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor() {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract FAYA is Context, IERC20, Ownable {\n', '    using SafeMath for uint256;\n', '    \n', '    mapping (address => uint256) private _balances;\n', '    mapping (address => uint) private _sells;\n', '    mapping (address => uint256) private _lastTXs;\n', '    mapping (address => bool) private _isHolder;\n', '    address[] private _holders;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '\n', '    uint256 private _totalSupply = 100000 * 10**12;\n', '    uint256 private _minSupply = 10000 * 10**12;\n', "    string private _name = 'FAYA.Finance';\n", "    string private _symbol = 'FAYA';\n", '    uint8 private _decimals = 12;\n', '\n', '    address _reserve;\n', '    address _charity;\n', '    \n', '    \n', '    constructor() {\n', '        _reserve = address(0); // until set later to uniswap\n', '        _charity = address(0); // until set later to dedicated wallet\n', '        _balances[msg.sender] = _totalSupply;\n', '        emit Transfer(address(0), msg.sender, _totalSupply);      \n', '    }\n', '    \n', '    function name() public view virtual  returns (string memory) {\n', '        return _name;\n', '    }\n', '    \n', '    function symbol() public view virtual  returns (string memory) {\n', '        return _symbol;\n', '    }\n', '    \n', '    function decimals() public view virtual  returns (uint8) {\n', '        return _decimals;\n', '    }\n', '    \n', '    function totalSupply() public view virtual override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '    \n', '    function balanceOf(address account) public view virtual override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '    \n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '    \n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '\n', '        uint256 currentAllowance = _allowances[sender][_msgSender()];\n', '        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");\n', '        _approve(sender, _msgSender(), currentAllowance - amount);\n', '\n', '        return true;\n', '    }\n', '    \n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n', '        return true;\n', '    }\n', '    \n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        uint256 currentAllowance = _allowances[_msgSender()][spender];\n', '        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");\n', '        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n', '\n', '        return true;\n', '    }\n', '\n', '    function setReserveAddress(address reserve) public onlyOwner() {\n', '        _reserve = reserve;\n', '    }\n', '\n', '    function setCharityAddress(address charity) public onlyOwner() {\n', '        _charity = charity;\n', '    }\n', '    \n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '        \n', '        require(_balances[sender] >= amount, "ERC20: transfer amount exceeds balance");\n', '\n', '        // Exclude owner from taxes, to allow transfer of funds to uniswap and other wallets.\n', '        if (owner() == sender || owner() == recipient) {\n', '            _balances[sender] = _balances[sender].sub(amount);\n', '            _balances[recipient] = _balances[recipient].add(amount);\n', '            emit Transfer(sender, recipient, amount);\n', '        } else {\n', '            // Tax on transaction\n', '            if (_isContract(recipient)) {\n', '                // sell\n', '                require(_totalSupply.div(100) >= amount, "ERC20: sell amount exceeds 1% of current supply");\n', '                require(_lastTXs[sender] < block.timestamp - 1 minutes, "ERC20: sell happening less than a minute after last tx");\n', '\n', '                _balances[sender] = _balances[sender].sub(amount);\n', '                uint tax = amount.div(10);\n', '                uint donation = amount.div(10);\n', '                uint finalAmount = amount.sub(tax).sub(donation);\n', '                _balances[recipient] = _balances[recipient].add(finalAmount);\n', '\n', '                _sendToRandomHolder(sender, tax.div(2));\n', '                _sendToRandomHolder(sender, tax.div(2));\n', '                _sendToCharity(sender, donation);\n', '\n', '                emit Transfer(sender, recipient, finalAmount);\n', '\n', '                _sells[sender] = _sells[sender].add(1);\n', '            } else {\n', '                // buy or transfer\n', '                require(_totalSupply.div(50) >= amount, "ERC20: buy amount exceeds 2% of current supply");\n', '\n', '                _balances[sender] = _balances[sender].sub(amount);\n', '                uint tax = amount.div(20);\n', '                uint donation = amount.div(1000).mul(75);\n', '                uint finalAmount = amount.sub(tax).sub(donation);\n', '                _balances[recipient] = _balances[recipient].add(finalAmount);\n', '\n', '                _sendToRandomHolder(sender, tax);\n', '                _sendToCharity(sender, donation);\n', '\n', '                emit Transfer(sender, recipient, finalAmount);\n', '                \n', '                _lastTXs[recipient] = block.timestamp;\n', '                _addToHolders(recipient);\n', '            }\n', '\n', '            // Burn of supply for this transaction\n', '            if (_reserve != address(0)) {\n', '                uint _toBurn = _balances[_reserve].div(1000).mul(_getRandomNumber(3));\n', '                _sendToBurn(_reserve, _toBurn);\n', '            }\n', '        }\n', '    }\n', '\n', '    function _sendToRandomHolder(address sender, uint256 amount) private {\n', '        address luckyOne = _getRandomHolder();\n', '        uint luckyAmount = amount.div(_sells[luckyOne].add(1));\n', '\n', '        uint toBurn = amount.sub(luckyAmount);\n', '\n', '        if (toBurn > 0) {\n', '            _sendToBurn(sender, toBurn);\n', '        }\n', '\n', '        _balances[luckyOne] = _balances[luckyOne].add(luckyAmount);\n', '        emit Transfer(sender, luckyOne, luckyAmount);\n', '    }\n', '\n', '    function _sendToBurn(address sender, uint256 amount) private {\n', '        if (amount > 0 && _minSupply < _totalSupply) {\n', '            uint newSupply = _totalSupply.sub(amount);\n', '            if (newSupply < _minSupply) {\n', '                newSupply = _minSupply;\n', '            }\n', '            uint toBurn = _totalSupply.sub(newSupply);\n', '            _totalSupply = newSupply;\n', '            emit Transfer(sender, address(0), toBurn);\n', '        }\n', '    }\n', '\n', '    function _sendToCharity(address sender, uint256 amount) private {\n', '        if (_charity != address(0)) {\n', '            _balances[_charity] = _balances[_charity].add(amount);\n', '            emit Transfer(sender, _charity, amount);\n', '        } else {\n', '            // charity not set yet? BURN!\n', '            _sendToBurn(sender, amount);\n', '        }\n', '    }\n', '\n', '    function _getRandomHolder() private view returns (address) {\n', '        if (_holders.length < 10) {\n', '            return address(0);\n', '        } else {\n', '            return _holders[_getRandomNumber(_holders.length)];\n', '        }\n', '    }\n', '\n', '    function _getRandomNumber(uint cap) private view returns (uint) {\n', '        uint randomHash = uint(keccak256(abi.encodePacked(block.timestamp, block.difficulty)));\n', '        return randomHash % cap;\n', '    }\n', '\n', '    function _addToHolders(address holder) private {\n', '        if (!_isHolder[holder]) {\n', '            _holders.push(holder);\n', '            _isHolder[holder] = true;\n', '        }\n', '    }\n', '\n', '    function _isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '    \n', '    \n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '}']