['pragma solidity ^0.4.21;\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "this action is only for owner");\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.4.21;\n', '\n', 'import "./Lib.sol";\n', '\n', 'contract ERC20Interface {\n', '    uint256 public totalSupply;\n', '    bool public allowTransfer;\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Burned(uint256 _value);\n', '}\n', '\n', '// Contract function to receive approval and execute function in one call\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\n', '}\n', '\n', 'contract StandardToken is ERC20Interface {\n', '    using SafeMath for uint256;\n', '\n', '    modifier onlyPayloadSize(uint size) {\n', '        require(!(msg.data.length < size + 4));\n', '        _;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public onlyPayloadSize(2 * 32) returns (bool success) {\n', '        require(allowTransfer);\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3 * 32) returns (bool success) {\n', '        require(allowTransfer);\n', '        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public onlyPayloadSize(2 * 32) returns (bool success) {\n', '        // https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require(allowTransfer && !((_value != 0) && (allowed[msg.sender][_spender] != 0)));\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '}\n', '\n', '\n', 'contract Token is StandardToken {\n', '\n', '    string public name = "GAMBLR.ONE";\n', '    uint256 public decimals = 18;\n', '    string public symbol = "GAMBLR";\n', "    string public version = '1.1';\n", '    address public mintableAddress;\n', '\n', '    constructor(address sale_address) public {\n', '        balances[msg.sender] = 0;\n', '        totalSupply = 0;\n', '        name = name;\n', '        decimals = decimals;\n', '        symbol = symbol;\n', '        mintableAddress = sale_address;\n', '        allowTransfer = true;\n', '        createTokens();\n', '    }\n', '\n', '    function createTokens() internal {\n', '        uint256 total = 100000000000000000000000000; //100M\n', '        balances[this] = total;\n', '        totalSupply = total;\n', '    }\n', '\n', '    function changeTransfer(bool allowed) external {\n', '        require(msg.sender == mintableAddress);\n', '        allowTransfer = allowed;\n', '    }\n', '\n', '    function mintToken(address to, uint256 amount) external returns (bool success) {\n', '        require(msg.sender == mintableAddress);\n', '        require(balances[this] >= amount);\n', '        balances[this] -= amount;\n', '        balances[to] += amount;\n', '        emit Transfer(this, to, amount);\n', '        return true;\n', '    }\n', '\n', '    function getTotalSupply() view returns (uint256 supply) {\n', '        return totalSupply;\n', '    }\n', '\n', '    function burnUnused(uint256 _amount) external {\n', '        require(msg.sender == mintableAddress, "Action restricted");\n', '        require(balances[this] >= _amount, "Amount to burn is too big");\n', '        balances[this] = balances[this] - _amount;\n', '        totalSupply = totalSupply - _amount;\n', '        emit Burned(_amount);\n', '    }\n', '\n', '    function() external payable {\n', '        revert();\n', '    }\n', '\n', '    function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n', '        return true;\n', '    }\n', '\n', '}']