['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-15\n', '*/\n', '\n', 'pragma solidity 0.6.7;\n', '\n', 'abstract contract ESMLike {\n', '    function settled() virtual public view returns (uint256);\n', '    function modifyParameters(bytes32, uint256) virtual external;\n', '}\n', 'abstract contract ProtocolTokenLike {\n', '    function balanceOf(address) virtual public view returns (uint256);\n', '    function totalSupply() virtual public view returns (uint256);\n', '}\n', '\n', 'contract ESMThresholdSetter {\n', '    // --- Auth ---\n', '    mapping (address => uint) public authorizedAccounts;\n', '    /**\n', '     * @notice Add auth to an account\n', '     * @param account Account to add auth to\n', '     */\n', '    function addAuthorization(address account) public isAuthorized {\n', '        authorizedAccounts[account] = 1;\n', '        emit AddAuthorization(account);\n', '    }\n', '    /**\n', '     * @notice Remove auth from an account\n', '     * @param account Account to remove auth from\n', '     */\n', '    function removeAuthorization(address account) public isAuthorized {\n', '        authorizedAccounts[account] = 0;\n', '        emit RemoveAuthorization(account);\n', '    }\n', '    /**\n', '    * @notice Checks whether msg.sender can call an authed function\n', '    **/\n', '    modifier isAuthorized {\n', '        require(authorizedAccounts[msg.sender] == 1, "ESMThresholdSetter/account-not-authorized");\n', '        _;\n', '    }\n', '\n', '    // --- Variables ---\n', '    // The minimum amount of protocol tokens that must be burned to trigger settlement using the ESM\n', '    uint256           public minAmountToBurn;         // [wad]\n', '    // The percentage of outstanding protocol tokens to burn in order to trigger settlement using the ESM\n', '    uint256           public supplyPercentageToBurn;  // [thousand]\n', '\n', '    // The address of the protocol token\n', '    ProtocolTokenLike public protocolToken;\n', '    // The address of the ESM contract\n', '    ESMLike           public esm;\n', '\n', '    // --- Events ---\n', '    event AddAuthorization(address account);\n', '    event RemoveAuthorization(address account);\n', '    event ModifyParameters(bytes32 parameter, address account);\n', '\n', '    constructor(\n', '      address protocolToken_,\n', '      uint256 minAmountToBurn_,\n', '      uint256 supplyPercentageToBurn_\n', '    ) public {\n', '        require(protocolToken_ != address(0), "ESMThresholdSetter/");\n', '        require(both(supplyPercentageToBurn_ > 0, supplyPercentageToBurn_ < THOUSAND), "ESMThresholdSetter/invalid-percentage-to-burn");\n', '        require(minAmountToBurn_ > 0, "ESMThresholdSetter/null-min-amount-to-burn");\n', '\n', '        authorizedAccounts[msg.sender] = 1;\n', '\n', '        minAmountToBurn        = minAmountToBurn_;\n', '        supplyPercentageToBurn = supplyPercentageToBurn_;\n', '        protocolToken          = ProtocolTokenLike(protocolToken_);\n', '\n', '        require(protocolToken.totalSupply() > 0, "ESMThresholdSetter/null-token-supply");\n', '    }\n', '\n', '    // --- Boolean Logic ---\n', '    function both(bool x, bool y) internal pure returns (bool z) {\n', '        assembly{ z := and(x, y)}\n', '    }\n', '\n', '    // --- Math ---\n', '    uint256 constant THOUSAND = 10 ** 3;\n', '    function maximum(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        z = (x >= y) ? x : y;\n', '    }\n', '    function subtract(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require((z = x - y) <= x, "ESMThresholdSetter/sub-uint-uint-underflow");\n', '    }\n', '    function multiply(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require(y == 0 || (z = x * y) / y == x, "ESMThresholdSetter/multiply-uint-uint-overflow");\n', '    }\n', '\n', '    // --- Administration ---\n', '    /*\n', '    * @notify Change the ESM address\n', '    * @parameter Name of the parameter (should only be "esm")\n', '    * @param New ESM address\n', '    */\n', '    function modifyParameters(bytes32 parameter, address addr) external isAuthorized {\n', '        require(addr != address(0), "ESMThresholdSetter/null-addr");\n', '        if (parameter == "esm") {\n', '          require(address(esm) == address(0), "ESMThresholdSetter/esm-already-set");\n', '          esm = ESMLike(addr);\n', '          require(esm.settled() == 0, "ESMThresholdSetter/esm-disabled");\n', '        } else revert("ESMThresholdSetter/modify-unrecognized-param");\n', '        emit ModifyParameters("esm", addr);\n', '    }\n', '    /*\n', '    * @notify Calculate and set a new protocol token threshold in the ESM\n', '    */\n', '    function recomputeThreshold() public {\n', '        // The ESM must still be functional\n', '        require(esm.settled() == 0, "ESMThresholdSetter/esm-disabled");\n', '\n', '        uint256 currentTokenSupply = protocolToken.totalSupply();\n', '        if (currentTokenSupply == 0) { // If the current supply is zero, set the min amount to burn\n', '          esm.modifyParameters("triggerThreshold", minAmountToBurn);\n', '        } else { // Otherwise compute a new threshold taking into account supplyPercentageToBurn\n', '          uint256 newThreshold = multiply(subtract(currentTokenSupply, protocolToken.balanceOf(address(0))), supplyPercentageToBurn) / THOUSAND;\n', '          esm.modifyParameters("triggerThreshold", maximum(minAmountToBurn, newThreshold));\n', '        }\n', '    }\n', '}']