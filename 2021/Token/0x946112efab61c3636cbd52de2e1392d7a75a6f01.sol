['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-28\n', '*/\n', '\n', '//////////////////////////////////////////\n', '// PROJECT HYDRO\n', '// Multi Chain Token\n', '//////////////////////////////////////////\n', 'pragma solidity ^0.6.0;\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '   constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'interface Raindrop {\n', '    function authenticate(address _sender, uint _value, uint _challenge, uint _partnerId) external;\n', '}\n', '\n', 'interface tokenRecipient {\n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external;\n', '}\n', '\n', 'interface IERC20 {\n', '  /**\n', '   * @dev Returns the amount of tokens in existence.\n', '   */\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  /**\n', '   * @dev Returns the token decimals.\n', '   */\n', '  function decimals() external view returns (uint8);\n', '\n', '  /**\n', '   * @dev Returns the token symbol.\n', '   */\n', '  function symbol() external view returns (string memory);\n', '\n', '  /**\n', '  * @dev Returns the token name.\n', '  */\n', '  function name() external view returns (string memory);\n', '\n', '  /**\n', '   * @dev Returns the amount of tokens owned by `account`.\n', '   */\n', '  function balanceOf(address account) external view returns (uint256);\n', '\n', '  /**\n', "   * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '   *\n', '   * Returns a boolean value indicating whether the operation succeeded.\n', '   *\n', '   * Emits a {Transfer} event.\n', '   */\n', '  function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '  /**\n', '   * @dev Returns the remaining number of tokens that `spender` will be\n', '   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '   * zero by default.\n', '   *\n', '   * This value changes when {approve} or {transferFrom} are called.\n', '   */\n', '  function allowance(address _owner, address spender) external view returns (uint256);\n', '\n', '  /**\n', "   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '   *\n', '   * Returns a boolean value indicating whether the operation succeeded.\n', '   *\n', '   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '   * that someone may use both the old and the new allowance by unfortunate\n', '   * transaction ordering. One possible solution to mitigate this race\n', "   * condition is to first reduce the spender's allowance to 0 and set the\n", '   * desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   *\n', '   * Emits an {Approval} event.\n', '   */\n', '  function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '  /**\n', '   * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "   * allowance mechanism. `amount` is then deducted from the caller's\n", '   * allowance.\n', '   *\n', '   * Returns a boolean value indicating whether the operation succeeded.\n', '   *\n', '   * Emits a {Transfer} event.\n', '   */\n', '  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '  /**\n', '   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '   * another (`to`).\n', '   *\n', '   * Note that `value` may be zero.\n', '   */\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '  /**\n', '   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '   * a call to {approve}. `value` is the new allowance.\n', '   */\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract HydroToken is Ownable,IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    string public _name;\n', '    string public _symbol;\n', '    uint8 public _decimals;            // Number of decimals of the smallest unit\n', '    uint public _totalSupply;\n', '    address public raindropAddress;\n', '    uint256 ratio;\n', '    uint256 public MAX_BURN= 100000000000000000; //0.1 hydro tokens\n', '\n', '    mapping (address => uint256) public balances;\n', '    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '    mapping(address=>bool) public whitelistedDapps; //dapps that can burn tokens\n', '    \n', '    //makes sure only dappstore apps can burn tokens\n', '    modifier onlyFromDapps(address _dapp){\n', "        require(whitelistedDapps[msg.sender]==true,'Hydro: Burn error');\n", '        _;\n', '    }\n', '    \n', '    event dappBurned(address indexed _dapp, uint256 _amount );\n', '\n', '////////////////\n', '// Constructor\n', '////////////////\n', '\n', '    /// @notice Constructor to create a HydroToken\n', '    constructor(uint256 _ratio) public {\n', "        _name='HYDRO TOKEN';\n", "        _symbol='HYDRO';\n", '        _decimals=18;\n', '        raindropAddress=address(0);\n', '       _totalSupply = (11111111111 * 10**18)/_ratio;\n', '        // Give the creator all initial tokens\n', '        balances[msg.sender] = _totalSupply;\n', '        ratio = _ratio;\n', '        emit Transfer(address(0), msg.sender, _totalSupply);\n', '    }\n', '    \n', '\n', '\n', '///////////////////\n', '// ERC20 Methods\n', '///////////////////\n', '\n', '    //transfers an amount of tokens from one account to another\n', '    //accepts two variables\n', '    function transfer(address _to, uint256 _amount) public override  returns (bool success) {\n', '        doTransfer(msg.sender, _to, _amount);\n', '        return true;\n', '}\n', '\n', '  /**\n', '   * @dev Returns the token symbol.\n', '   */\n', '  function symbol() public override view returns (string memory) {\n', '    return _symbol;\n', '  }\n', '  \n', '  /**\n', '  * @dev Returns the token name.\n', '  */\n', '  function name() public override view returns (string memory) {\n', '    return _name;\n', '  }\n', '  \n', '    //transfers an amount of tokens from one account to another\n', '    //accepts three variables\n', '    function transferFrom(address _from, address _to, uint256 _amount\n', '    ) public override returns (bool success) {\n', '        // The standard ERC 20 transferFrom functionality\n', '        require(allowed[_from][msg.sender] >= _amount);\n', '        allowed[_from][msg.sender] -= _amount;\n', '        doTransfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '    \n', '    //allows the owner to change the MAX_BURN amount\n', '    function changeMaxBurn(uint256 _newBurn) public onlyOwner returns(uint256 ) {\n', '        MAX_BURN=_newBurn;\n', '        return (_newBurn);\n', '    }\n', '\n', '    //internal function to implement the transfer function and perform some safety checks\n', '    function doTransfer(address _from, address _to, uint _amount\n', '    ) internal {\n', '        // Do not allow transfer to 0x0 or the token contract itself\n', '        require((_to != address(0)) && (_to != address(this)));\n', '        require(_amount <= balances[_from]);\n', '        balances[_from] = balances[_from].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Transfer(_from, _to, _amount);\n', '    }\n', '\n', '    //returns balance of an address\n', '    function balanceOf(address _owner) public override view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    //allows an address to approve another address to spend its tokens\n', '    function approve(address _spender, uint256 _amount) public override returns (bool success) {\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender,0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n', '        allowed[msg.sender][_spender] = _amount;\n', '        emit Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '    \n', '    //sends the approve function but with a data argument\n', '    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public  returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n', '            return true;\n', '        }\n', '    }\n', '    \n', '   /**\n', '   * @dev Returns the token decimals.\n', '   */\n', '  function decimals() external view override returns (uint8) {\n', '    return _decimals;\n', '  }\n', '\n', '\n', '\n', '    //returns the allowance an address has granted a spender\n', '    function allowance(address _owner, address _spender\n', '    ) public view override returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    //allows an owner to whitelist a dapp so it can burn tokens\n', '    function _whiteListDapp(address _dappAddress) public onlyOwner returns(bool){\n', '        whitelistedDapps[_dappAddress]=true;\n', '        return true;\n', '    }\n', '    \n', '    //allows an owner to blacklist a dapp so it can stop burn tokens\n', '    function _blackListDapp(address _dappAddress) public onlyOwner returns(bool){\n', '         whitelistedDapps[_dappAddress]=false;\n', '         return false;\n', '    }\n', '\n', '    //returns current hydro totalSupply\n', '    function totalSupply() public view override returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    //allows the owner to set the Raindrop\n', '    function setRaindropAddress(address _raindrop) public onlyOwner {\n', '        raindropAddress = _raindrop;\n', '    }\n', '    \n', '    //the main public burn function which uses the internal burn function\n', '    function burn(address _from,uint256 _value) external returns(uint burnAmount) {\n', '    _burn(_from,_value);\n', '    emit dappBurned(msg.sender,_value);\n', '    return(burnAmount);\n', '    }\n', '\n', '    function authenticate(uint _value, uint _challenge, uint _partnerId) public  {\n', '        Raindrop raindrop = Raindrop(raindropAddress);\n', '        raindrop.authenticate(msg.sender, _value, _challenge, _partnerId);\n', '        doTransfer(msg.sender, owner, _value);\n', '    }\n', '\n', '    //internal burn function which makes sure that only whitelisted addresses can burn\n', '    function _burn(address account, uint256 amount) internal onlyFromDapps(msg.sender) {\n', '    require(account != address(0), "ERC20: burn from the zero address");\n', "    require(amount >= MAX_BURN,'ERC20: Exceeds maximum burn amount');\n", '    balances[account] = balances[account].sub(amount); \n', '    _totalSupply = _totalSupply.sub(amount);\n', '    emit Transfer(account, address(0), amount);\n', '  }\n', '}']