['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-19\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.8.2;\n', '\n', '\n', '//------------------------------------------------------------------------------------------------------------------\n', '//\n', '// ethbox Token\n', '//\n', '// Token symbol:    EBOX\n', '// Token name:      ethbox Token\n', '// \n', '// Total supply:    65.000.000 * 10^18\n', '// Decimals:        18\n', '//\n', '//------------------------------------------------------------------------------------------------------------------\n', '\n', '\n', 'contract SafeMath\n', '{\n', '    //\n', '    // Standard overflow / underflow proof basic maths library\n', '    //\n', '    \n', '    function safeAdd(uint a, uint b) public pure returns (uint c)\n', '    {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '\n', '    function safeSub(uint a, uint b) public pure returns (uint c)\n', '    {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '\n', '    function safeMul(uint a, uint b) public pure returns (uint c)\n', '    {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '\n', '    function safeDiv(uint a, uint b) public pure returns (uint c)\n', '    {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', 'interface ERC20Interface\n', '{\n', '    //\n', '    // Standard ERC-20 token interface\n', '    //\n', '    \n', '    function totalSupply() external view returns(uint);\n', '    function balanceOf(address tokenOwner) external view returns(uint);\n', '    function allowance(address tokenOwner, address spender) external view returns(uint);\n', '    function approve(address spender, uint tokens) external returns(bool);\n', '    function transfer(address to, uint tokens) external returns(bool);\n', '    function transferFrom(address from, address to, uint tokens) external returns(bool);\n', '\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '}\n', '\n', '\n', 'contract ethboxToken is ERC20Interface, SafeMath\n', '{\n', '    //\n', '    // Standard ERC-20 token\n', '    //\n', '    \n', '\n', '    string  public symbol       = "EBOX";\n', '    string  public name         = "ethbox Token";\n', '    uint8   public decimals     = 18;\n', '    uint    public _totalSupply = 65000000e18;\n', '    \n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '    \n', '    \n', '    constructor()\n', '    {\n', '        balances[msg.sender] = _totalSupply;\n', '        emit Transfer(address(0), msg.sender, _totalSupply);\n', '    }\n', '    \n', '    fallback() external payable\n', '    {\n', '        revert("Please don\'t send funds directly to the ethbox Token contract.");\n', '    }\n', '    \n', '    function totalSupply() override external view returns(uint)\n', '    {\n', '        return safeSub(_totalSupply, balances[address(0)]);\n', '    }\n', '\n', '    function balanceOf(address tokenOwner) override external view returns(uint)\n', '    {\n', '        return balances[tokenOwner];\n', '    }\n', '    \n', '    function allowance(address tokenOwner, address spender) override external view returns(uint)\n', '    {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '    \n', '    function approve(address spender, uint tokens) override external returns(bool)\n', '    {\n', '        allowed[msg.sender][spender] = tokens;\n', '        \n', '        emit Approval(msg.sender, spender, tokens);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function transfer(address to, uint tokens) override external returns(bool)\n', '    {\n', '        balances[msg.sender] = safeSub(balances[msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        \n', '        emit Transfer(msg.sender, to, tokens);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address from, address to, uint tokens) override external returns(bool)\n', '    {\n', '        balances[from] = safeSub(balances[from], tokens);\n', '        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n', '        balances[to] = safeAdd(balances[to], tokens);\n', '        \n', '        emit Transfer(from, to, tokens);\n', '        \n', '        return true;\n', '    }\n', '}']