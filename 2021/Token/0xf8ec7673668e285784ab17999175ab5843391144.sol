['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-23\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.8.1;\n', '\n', 'interface ITypes {\n', '  struct Call {\n', '    address to;\n', '    uint96 value;\n', '    bytes data;\n', '  }\n', '\n', '  struct CallReturn {\n', '    bool ok;\n', '    bytes returnData;\n', '  }\n', '}\n', '\n', 'interface IActionRegistry {\n', '\n', '  // events\n', '  event AddedSelector(address account, bytes4 selector);\n', '  event RemovedSelector(address account, bytes4 selector);\n', '  event AddedSpender(address account, address spender);\n', '  event RemovedSpender(address account, address spender);\n', '\n', '  struct AccountSelectors {\n', '    address account;\n', '    bytes4[] selectors;\n', '  }\n', '\n', '  struct AccountSpenders {\n', '    address account;\n', '    address[] spenders;\n', '  }\n', '\n', '  function isValidAction(ITypes.Call[] calldata calls) external view returns (bool valid);\n', '  function addSelector(address account, bytes4 selector) external;\n', '  function removeSelector(address account, bytes4 selector) external;\n', '  function addSpender(address account, address spender) external;\n', '  function removeSpender(address account, address spender) external;\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' *\n', ' * In order to transfer ownership, a recipient must be specified, at which point\n', ' * the specified recipient can call `acceptOwnership` and take ownership.\n', ' */\n', '\n', 'contract TwoStepOwnable {\n', '  address private _owner;\n', '\n', '  address private _newPotentialOwner;\n', '\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev Initialize contract by setting transaction submitter as initial owner.\n', '   */\n', '  constructor() public {\n', '    _owner = tx.origin;\n', '    emit OwnershipTransferred(address(0), _owner);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the address of the current owner.\n', '   */\n', '  function owner() public view returns (address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(isOwner(), "TwoStepOwnable: caller is not the owner.");\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns true if the caller is the current owner.\n', '   */\n', '  function isOwner() public view returns (bool) {\n', '    return msg.sender == _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows a new account (`newOwner`) to accept ownership.\n', '   * Can only be called by the current owner.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(\n', '      newOwner != address(0),\n', '      "TwoStepOwnable: new potential owner is the zero address."\n', '    );\n', '\n', '    _newPotentialOwner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Cancel a transfer of ownership to a new account.\n', '   * Can only be called by the current owner.\n', '   */\n', '  function cancelOwnershipTransfer() public onlyOwner {\n', '    delete _newPotentialOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers ownership of the contract to the caller.\n', '   * Can only be called by a new potential owner set by the current owner.\n', '   */\n', '  function acceptOwnership() public {\n', '    require(\n', '      msg.sender == _newPotentialOwner,\n', '      "TwoStepOwnable: current owner must set caller as new potential owner."\n', '    );\n', '\n', '    delete _newPotentialOwner;\n', '\n', '    emit OwnershipTransferred(_owner, msg.sender);\n', '\n', '    _owner = msg.sender;\n', '  }\n', '}\n', '\n', '\n', 'interface IERC20 {\n', '  function approve(address spender, uint256 amount) external returns (bool);\n', '}\n', '\n', 'contract ActionRegistry is IActionRegistry, TwoStepOwnable {\n', '\n', '  mapping(address => bytes4[]) internal _functionSelectors;\n', '  mapping(address => mapping(bytes4 => uint256)) public _functionSelectorIndices;\n', '\n', '  mapping(address => address[]) internal _accountSpenders;\n', '  mapping(address => mapping(address => uint256)) public _spenderIndices;\n', '\n', '  function isValidAction(\n', '    ITypes.Call[] calldata calls\n', '  ) external override view returns (bool valid) {\n', '    valid = true;\n', '    for (uint256 i = 0; i < calls.length; i++) {\n', '\n', '      valid = _validCall(calls[i].to, calls[i].data);\n', '\n', '      if (!valid) {\n', '        break;\n', '      }\n', '    }\n', '  }\n', '\n', '  function _validCall(address to, bytes calldata callData) internal view returns (bool) {\n', '    if (callData.length < 4) {\n', '      return false;\n', '    }\n', '\n', '    bytes memory functionSelectorBytes = abi.encodePacked(callData[:4], bytes28(0));\n', '    bytes4 functionSelector = abi.decode(functionSelectorBytes, (bytes4));\n', '\n', '    uint256 functionSelectorIndex = _functionSelectorIndices[to][functionSelector];\n', '\n', '    if (functionSelectorIndex == 0) {\n', '      return false;\n', '    }\n', '\n', '    if (functionSelector == IERC20.approve.selector) {\n', '      bytes memory argumentBytes = abi.encodePacked(callData[4:], bytes28(0));\n', '\n', '      if (argumentBytes.length < 68) {\n', '        return false;\n', '      }\n', '\n', '      (address spender,) = abi.decode(argumentBytes, (address, uint256));\n', '      uint256 spenderIndex = _spenderIndices[to][spender];\n', '\n', '      if (spenderIndex == 0) {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    return true;\n', '  }\n', '\n', '\n', '  function getAccountSpenders(address account) public view returns (address[] memory spenders) {\n', '    spenders = _accountSpenders[account];\n', '  }\n', '\n', '  function getAccountSelectors(address account) public view returns (bytes4[] memory selectors) {\n', '    selectors = _functionSelectors[account];\n', '  }\n', '\n', '  function addSelector(address account, bytes4 selector) external override onlyOwner {\n', '    _addSelector(account, selector);\n', '  }\n', '\n', '  function removeSelector(address account, bytes4 selector) external override onlyOwner {\n', '    _removeSelector(account, selector);\n', '  }\n', '\n', '  function addSelectorsAndSpenders(\n', '    AccountSelectors[] memory accountSelectors,\n', '    AccountSpenders[] memory accountSpenders\n', '  ) public onlyOwner {\n', '    _addAccountSelectors(accountSelectors);\n', '    _addAccountSpenders(accountSpenders);\n', '  }\n', '\n', '  function _addAccountSelectors(AccountSelectors[] memory accountSelectors) public onlyOwner {\n', '    for (uint256 i = 0; i < accountSelectors.length; i++) {\n', '      for (uint256 j = 0; j < accountSelectors[i].selectors.length; j++) {\n', '        _addSelector(accountSelectors[i].account, accountSelectors[i].selectors[j]);\n', '      }\n', '    }\n', '  }\n', '\n', '  function _addAccountSpenders(AccountSpenders[] memory accountSpenders) public onlyOwner {\n', '    for (uint256 i = 0; i < accountSpenders.length; i++) {\n', '      for (uint256 j = 0; j < accountSpenders[i].spenders.length; j++) {\n', '        _addSpender(accountSpenders[i].account, accountSpenders[i].spenders[j]);\n', '      }\n', '    }\n', '  }\n', '\n', '\n', '  function _addSelector(address account, bytes4 selector) internal {\n', '    require(\n', '      _functionSelectorIndices[account][selector] == 0,\n', '      "Selector for the provided account already exists."\n', '    );\n', '\n', '    _functionSelectors[account].push(selector);\n', '    _functionSelectorIndices[account][selector] = _functionSelectors[account].length;\n', '\n', '    emit AddedSelector(account, selector);\n', '  }\n', '\n', '  function _removeSelector(address account, bytes4 selector) internal {\n', '    uint256 removedSelectorIndex = _functionSelectorIndices[account][selector];\n', '\n', '    require(\n', '      removedSelectorIndex != 0,\n', '      "No selector found for the provided account."\n', '    );\n', '\n', '    // swap account to remove with the last one then pop from the array.\n', '    bytes4 lastSelector = _functionSelectors[account][_functionSelectors[account].length - 1];\n', '    _functionSelectors[account][removedSelectorIndex - 1] = lastSelector;\n', '    _functionSelectorIndices[account][lastSelector] = removedSelectorIndex;\n', '    _functionSelectors[account].pop();\n', '    delete _functionSelectorIndices[account][selector];\n', '\n', '    emit RemovedSelector(account, selector);\n', '  }\n', '\n', '  function addSpender(address account, address spender) external override onlyOwner {\n', '    _addSpender(account, spender);\n', '  }\n', '\n', '  function removeSpender(address account, address spender) external override onlyOwner {\n', '    _removeSpender(account, spender);\n', '  }\n', '\n', '  function _addSpender(address account, address spender) internal {\n', '    require(\n', '      _spenderIndices[account][spender] == 0,\n', '      "Spender for the provided account already exists."\n', '    );\n', '\n', '    _accountSpenders[account].push(spender);\n', '    _spenderIndices[account][spender] = _accountSpenders[account].length;\n', '\n', '    emit AddedSpender(account, spender);\n', '  }\n', '\n', '  function _removeSpender(address account, address spender) internal {\n', '    uint256 removedSpenderIndex = _spenderIndices[account][spender];\n', '\n', '    require(\n', '      removedSpenderIndex != 0,\n', '      "No spender found for the provided account."\n', '    );\n', '\n', '    // swap account to remove with the last one then pop from the array.\n', '    address lastSpender = _accountSpenders[account][_accountSpenders[account].length - 1];\n', '    _accountSpenders[account][removedSpenderIndex - 1] = lastSpender;\n', '    _spenderIndices[account][lastSpender] = removedSpenderIndex;\n', '    _accountSpenders[account].pop();\n', '    delete _spenderIndices[account][spender];\n', '\n', '    emit RemovedSpender(account, spender);\n', '  }\n', '}']