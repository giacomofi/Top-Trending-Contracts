['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-07\n', '*/\n', '\n', '// File: iface/IPTokenFactory.sol\n', '\n', '// SPDX-License-Identifier: GPL-3.0-or-later\n', 'pragma solidity ^0.6.12;\n', '\n', 'interface IPTokenFactory {\n', '    function getGovernance() external view returns(address);\n', '    function getPTokenOperator(address contractAddress) external view returns(bool);\n', '    function getPTokenAuthenticity(address pToken) external view returns(bool);\n', '}\n', '// File: iface/IParasset.sol\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'interface IParasset {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address who) external view returns (uint256);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '    function destroy(uint256 amount, address account) external;\n', '    function issuance(uint256 amount, address account) external;\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '// File: lib/SafeMath.sol\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n', '\n', 'library SafeMath {\n', '    function add(uint x, uint y) internal pure returns (uint z) {\n', "        require((z = x + y) >= x, 'ds-math-add-overflow');\n", '    }\n', '\n', '    function sub(uint x, uint y) internal pure returns (uint z) {\n', "        require((z = x - y) <= x, 'ds-math-sub-underflow');\n", '    }\n', '\n', '    function mul(uint x, uint y) internal pure returns (uint z) {\n', "        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n", '    }\n', '\n', '    function div(uint x, uint y) internal pure returns (uint z) {\n', '        require(y > 0, "ds-math-div-zero");\n', '        z = x / y;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    }\n', '}\n', '// File: PToken.sol\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'contract PToken is IParasset {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '    mapping (address => mapping (address => uint256)) private _allowed;\n', '    uint256 public _totalSupply = 0;                                        \n', '    string public name = "";\n', '    string public symbol = "";\n', '    uint8 public decimals = 18;\n', '\n', '    IPTokenFactory pTokenFactory;\n', '\n', '    constructor (string memory _name, \n', '                 string memory _symbol) public {\n', '    \tname = _name;                                                               \n', '    \tsymbol = _symbol;\n', '    \tpTokenFactory = IPTokenFactory(address(msg.sender));\n', '    }\n', '\n', '    //---------modifier---------\n', '\n', '    modifier onlyGovernance() {\n', '        require(address(msg.sender) == pTokenFactory.getGovernance(), "Log:PToken:!governance");\n', '        _;\n', '    }\n', '\n', '    modifier onlyPool() {\n', '    \trequire(pTokenFactory.getPTokenOperator(address(msg.sender)), "Log:PToken:!Pool");\n', '    \t_;\n', '    }\n', '\n', '    //---------view---------\n', '\n', '    // Query factory contract address\n', '    function getPTokenFactory() public view returns(address) {\n', '        return address(pTokenFactory);\n', '    }\n', '\n', '    /// @notice The view of totalSupply\n', '    /// @return The total supply of ntoken\n', '    function totalSupply() override public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /// @dev The view of balances\n', '    /// @param owner The address of an account\n', '    /// @return The balance of the account\n', '    function balanceOf(address owner) override public view returns (uint256) {\n', '        return _balances[owner];\n', '    }\n', '\n', '    function allowance(address owner, address spender) override public view returns (uint256) {\n', '        return _allowed[owner][spender];\n', '    }\n', '\n', '    //---------transaction---------\n', '\n', '    function changeFactory(address factory) public onlyGovernance {\n', '        pTokenFactory = IPTokenFactory(address(factory));\n', '    }\n', '\n', '    function rename(string memory _name, \n', '                    string memory _symbol) public onlyGovernance {\n', '        name = _name;                                                               \n', '        symbol = _symbol;\n', '    }\n', '\n', '    function transfer(address to, uint256 value) override public returns (bool) \n', '    {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint256 value) override public returns (bool) \n', '    {\n', '        require(spender != address(0));\n', '        _allowed[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) override public returns (bool) \n', '    {\n', '        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '        _transfer(from, to, value);\n', '        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) \n', '    {\n', '        require(spender != address(0));\n', '\n', '        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n', '        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) \n', '    {\n', '        require(spender != address(0));\n', '\n', '        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n', '        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address from, address to, uint256 value) internal {\n', '        _balances[from] = _balances[from].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '\n', '    function destroy(uint256 amount, address account) override external onlyPool{\n', '    \trequire(_balances[account] >= amount, "Log:PToken:!destroy");\n', '    \t_balances[account] = _balances[account].sub(amount);\n', '    \t_totalSupply = _totalSupply.sub(amount);\n', '    \temit Transfer(account, address(0x0), amount);\n', '    }\n', '\n', '    function issuance(uint256 amount, address account) override external onlyPool{\n', '    \t_balances[account] = _balances[account].add(amount);\n', '    \t_totalSupply = _totalSupply.add(amount);\n', '    \temit Transfer(address(0x0), account, amount);\n', '    }\n', '}\n', '// File: PTokenFactory.sol\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'contract PTokenFactory {\n', '\n', '\t// Governance address\n', '\taddress public governance;\n', '\t// contract address => bool, ptoken operation permissions\n', '\tmapping(address=>bool) allowAddress;\n', '\t// ptoken address => bool, ptoken verification\n', '\tmapping(address=>bool) pTokenMapping;\n', '    // ptoken list\n', '\taddress[] pTokenList;\n', '\n', '    event createLog(address pTokenAddress);\n', '    event pTokenOperator(address contractAddress, bool allow);\n', '\n', '\tconstructor () public {\n', '        governance = msg.sender;\n', '    }\n', '\n', '    //---------modifier---------\n', '\n', '    modifier onlyGovernance() {\n', '        require(msg.sender == governance, "Log:PTokenFactory:!gov");\n', '        _;\n', '    }\n', '\n', '    //---------view---------\n', '\n', '    function strConcat(string memory _a, string memory _b) public pure returns (string memory){\n', '        bytes memory _ba = bytes(_a);\n', '        bytes memory _bb = bytes(_b);\n', '        string memory ret = new string(_ba.length + _bb.length);\n', '        bytes memory bret = bytes(ret);\n', '        uint s = 0;\n', '        for (uint i = 0; i < _ba.length; i++) {\n', '            bret[s++] = _ba[i];\n', '        } \n', '        for (uint i = 0; i < _bb.length; i++) {\n', '            bret[s++] = _bb[i];\n', '        } \n', '        return string(ret);\n', '    }\n', '\n', '    /// @dev View governance address\n', '    /// @return governance address\n', '    function getGovernance() public view returns(address) {\n', '        return governance;\n', '    }\n', '\n', '    /// @dev View ptoken operation permissions\n', '    /// @param contractAddress contract address\n', '    /// @return bool\n', '    function getPTokenOperator(address contractAddress) public view returns(bool) {\n', '    \treturn allowAddress[contractAddress];\n', '    }\n', '\n', '    /// @dev View ptoken operation permissions\n', '    /// @param pToken ptoken verification\n', '    /// @return bool\n', '    function getPTokenAuthenticity(address pToken) public view returns(bool) {\n', '    \treturn pTokenMapping[pToken];\n', '    }\n', '\n', '    /// @dev View ptoken list length\n', '    /// @return ptoken list length\n', '    function getPTokenNum() public view returns(uint256) {\n', '    \treturn pTokenList.length;\n', '    }\n', '\n', '    /// @dev View ptoken address\n', '    /// @param index array subscript\n', '    /// @return ptoken address\n', '    function getPTokenAddress(uint256 index) public view returns(address) {\n', '    \treturn pTokenList[index];\n', '    }\n', '\n', '    //---------governance----------\n', '\n', '    /// @dev Set governance address\n', '    /// @param add new governance address\n', '    function setGovernance(address add) public onlyGovernance {\n', '    \trequire(add != address(0x0), "Log:PTokenFactory:0x0");\n', '    \tgovernance = add;\n', '    }\n', '\n', '    /// @dev Set governance address\n', '    /// @param contractAddress contract address\n', '    /// @param allow bool\n', '    function setPTokenOperator(address contractAddress, \n', '                               bool allow) public onlyGovernance {\n', '        allowAddress[contractAddress] = allow;\n', '        emit pTokenOperator(contractAddress, allow);\n', '    }\n', '\n', '    /// @dev Create PToken\n', '    /// @param name token name\n', '    function createPtoken(string memory name) public onlyGovernance {\n', '    \tPToken pToken = new PToken(strConcat("PToken_", name), strConcat("P", name));\n', '    \tpTokenMapping[address(pToken)] = true;\n', '    \tpTokenList.push(address(pToken));\n', '    \temit createLog(address(pToken));\n', '    }\n', '}']