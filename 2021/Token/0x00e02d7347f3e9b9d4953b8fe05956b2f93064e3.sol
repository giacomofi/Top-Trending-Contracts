['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-17\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2019-03-12\n', '*/\n', '\n', 'pragma solidity ^0.5.4;\n', '\n', '// File: node_modules/openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address who) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '    * @dev Multiplies two unsigned integers, reverts on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two unsigned integers, reverts on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', ' * Originally based on code by FirstBlood:\n', ' * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' *\n', ' * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n', " * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n", ' * compliant implementations may not do it.\n', ' */\n', 'contract ERC20 is IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) internal _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowed;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    /**\n', '    * @dev Total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param owner The address to query the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address owner) public view returns (uint256) {\n', '        return _balances[owner];\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param owner address The address which owns the funds.\n', '     * @param spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowed[owner][spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token for a specified address\n', '    * @param to The address to transfer to.\n', '    * @param value The amount to be transferred.\n', '    */\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param spender The address which will spend the funds.\n', '     * @param value The amount of tokens to be spent.\n', '     */\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        require(spender != address(0));\n', '\n', '        _allowed[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another.\n', '     * Note that while this function emits an Approval event, this is not required as per the specification,\n', '     * and other compliant implementations may not emit the event.\n', '     * @param from address The address which you want to send tokens from\n', '     * @param to address The address which you want to transfer to\n', '     * @param value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', '        _transfer(from, to, value);\n', '        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed_[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * Emits an Approval event.\n', '     * @param spender The address which will spend the funds.\n', '     * @param addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        require(spender != address(0));\n', '\n', '        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n', '        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     * approve should be called when allowed_[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * Emits an Approval event.\n', '     * @param spender The address which will spend the funds.\n', '     * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        require(spender != address(0));\n', '\n', '        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n', '        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token for a specified addresses\n', '    * @param from The address to transfer from.\n', '    * @param to The address to transfer to.\n', '    * @param value The amount to be transferred.\n', '    */\n', '    function _transfer(address from, address to, uint256 value) internal {\n', '        require(to != address(0));\n', '\n', '        _balances[from] = _balances[from].sub(value);\n', '        _balances[to] = _balances[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that mints an amount of the token and assigns it to\n', '     * an account. This encapsulates the modification of balances such that the\n', '     * proper events are emitted.\n', '     * @param account The account that will receive the created tokens.\n', '     * @param value The amount that will be created.\n', '     */\n', '    function _mint(address account, uint256 value) internal {\n', '        require(account != address(0));\n', '\n', '        _totalSupply = _totalSupply.add(value);\n', '        _balances[account] = _balances[account].add(value);\n', '        emit Transfer(address(0), account, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that burns an amount of the token of a given\n', '     * account.\n', '     * @param account The account whose tokens will be burnt.\n', '     * @param value The amount that will be burnt.\n', '     */\n', '    function _burn(address account, uint256 value) internal {\n', '        require(account != address(0));\n', '\n', '        _totalSupply = _totalSupply.sub(value);\n', '        _balances[account] = _balances[account].sub(value);\n', '        emit Transfer(account, address(0), value);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that burns an amount of the token of a given\n', "     * account, deducting from the sender's allowance for said account. Uses the\n", '     * internal burn function.\n', '     * Emits an Approval event (reflecting the reduced allowance).\n', '     * @param account The account whose tokens will be burnt.\n', '     * @param value The amount that will be burnt.\n', '     */\n', '    function _burnFrom(address account, uint256 value) internal {\n', '        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n', '        _burn(account, value);\n', '        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n', '    }\n', '}\n', '\n', '// File: contracts\\mine.sol\n', '\n', 'contract MineBeeHash is ERC20 {\n', '    string public constant name = "MineBeeHash"; // solium-disable-line uppercase\n', '    string public constant symbol = "MBH"; // solium-disable-line uppercase\n', '    uint8 public constant decimals = 18; // solium-disable-line uppercase\n', '    uint256 public constant initialSupply = 1000000000 * (10 ** uint256(decimals));\n', '    \n', '    constructor() public {\n', '        super._mint(msg.sender, initialSupply);\n', '        owner = msg.sender;\n', '    }\n', '\n', '    //ownership\n', '    address public owner;\n', '\n', '    event OwnershipRenounced(address indexed previousOwner);\n', '    event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '    );\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "Not owner");\n', '        _;\n', '    }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipRenounced(owner);\n', '        owner = address(0);\n', '    }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        _transferOwnership(_newOwner);\n', '    }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '    function _transferOwnership(address _newOwner) internal {\n', '        require(_newOwner != address(0), "Already owner");\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '\n', '    //pausable\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '    \n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is not paused.\n', '    */\n', '    modifier whenNotPaused() {\n', '        require(!paused, "Paused by owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is paused.\n', '    */\n', '    modifier whenPaused() {\n', '        require(paused, "Not paused now");\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to pause, triggers stopped state\n', '    */\n', '    function pause() public onlyOwner whenNotPaused {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to unpause, returns to normal state\n', '    */\n', '    function unpause() public onlyOwner whenPaused {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '\n', '    //freezable\n', '    event Frozen(address target);\n', '    event Unfrozen(address target);\n', '\n', '    mapping(address => bool) internal freezes;\n', '\n', '    modifier whenNotFrozen() {\n', '        require(!freezes[msg.sender], "Sender account is locked.");\n', '        _;\n', '    }\n', '\n', '    function freeze(address _target) public onlyOwner {\n', '        freezes[_target] = true;\n', '        emit Frozen(_target);\n', '    }\n', '\n', '    function unfreeze(address _target) public onlyOwner {\n', '        freezes[_target] = false;\n', '        emit Unfrozen(_target);\n', '    }\n', '\n', '    function isFrozen(address _target) public view returns (bool) {\n', '        return freezes[_target];\n', '    }\n', '\n', '    function transfer(\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '      public\n', '      whenNotFrozen\n', '      whenNotPaused\n', '      returns (bool)\n', '    {\n', '        releaseLock(msg.sender);\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '      public\n', '      whenNotPaused\n', '      returns (bool)\n', '    {\n', '        require(!freezes[_from], "From account is locked.");\n', '        releaseLock(_from);\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    //mintable\n', '    event Mint(address indexed to, uint256 amount);\n', '\n', '    function mint(\n', '        address _to,\n', '        uint256 _amount\n', '    )\n', '      public\n', '      onlyOwner\n', '      returns (bool)\n', '    {\n', '        super._mint(_to, _amount);\n', '        emit Mint(_to, _amount);\n', '        return true;\n', '    }\n', '\n', '    //burnable\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    function burn(address _who, uint256 _value) public onlyOwner {\n', '        require(_value <= super.balanceOf(_who), "Balance is too small.");\n', '\n', '        _burn(_who, _value);\n', '        emit Burn(_who, _value);\n', '    }\n', '\n', '    //lockable\n', '    struct LockInfo {\n', '        uint256 releaseTime;\n', '        uint256 balance;\n', '    }\n', '    mapping(address => LockInfo[]) internal lockInfo;\n', '\n', '    event Lock(address indexed holder, uint256 value, uint256 releaseTime);\n', '    event Unlock(address indexed holder, uint256 value);\n', '\n', '    function balanceOf(address _holder) public view returns (uint256 balance) {\n', '        uint256 lockedBalance = 0;\n', '        for(uint256 i = 0; i < lockInfo[_holder].length ; i++ ) {\n', '            lockedBalance = lockedBalance.add(lockInfo[_holder][i].balance);\n', '        }\n', '        return super.balanceOf(_holder).add(lockedBalance);\n', '    }\n', '\n', '    function releaseLock(address _holder) internal {\n', '\n', '        for(uint256 i = 0; i < lockInfo[_holder].length ; i++ ) {\n', '            if (lockInfo[_holder][i].releaseTime <= now) {\n', '                _balances[_holder] = _balances[_holder].add(lockInfo[_holder][i].balance);\n', '                emit Unlock(_holder, lockInfo[_holder][i].balance);\n', '                lockInfo[_holder][i].balance = 0;\n', '\n', '                if (i != lockInfo[_holder].length - 1) {\n', '                    lockInfo[_holder][i] = lockInfo[_holder][lockInfo[_holder].length - 1];\n', '                    i--;\n', '                }\n', '                lockInfo[_holder].length--;\n', '\n', '            }\n', '        }\n', '    }\n', '    function lockCount(address _holder) public view returns (uint256) {\n', '        return lockInfo[_holder].length;\n', '    }\n', '    function lockState(address _holder, uint256 _idx) public view returns (uint256, uint256) {\n', '        return (lockInfo[_holder][_idx].releaseTime, lockInfo[_holder][_idx].balance);\n', '    }\n', '\n', '    function lock(address _holder, uint256 _amount, uint256 _releaseTime) public onlyOwner {\n', '        require(super.balanceOf(_holder) >= _amount, "Balance is too small.");\n', '        _balances[_holder] = _balances[_holder].sub(_amount);\n', '        lockInfo[_holder].push(\n', '            LockInfo(_releaseTime, _amount)\n', '        );\n', '        emit Lock(_holder, _amount, _releaseTime);\n', '    }\n', '\n', '    function lockAfter(address _holder, uint256 _amount, uint256 _afterTime) public onlyOwner {\n', '        require(super.balanceOf(_holder) >= _amount, "Balance is too small.");\n', '        _balances[_holder] = _balances[_holder].sub(_amount);\n', '        lockInfo[_holder].push(\n', '            LockInfo(now + _afterTime, _amount)\n', '        );\n', '        emit Lock(_holder, _amount, now + _afterTime);\n', '    }\n', '\n', '    function unlock(address _holder, uint256 i) public onlyOwner {\n', '        require(i < lockInfo[_holder].length, "No lock information.");\n', '\n', '        _balances[_holder] = _balances[_holder].add(lockInfo[_holder][i].balance);\n', '        emit Unlock(_holder, lockInfo[_holder][i].balance);\n', '        lockInfo[_holder][i].balance = 0;\n', '\n', '        if (i != lockInfo[_holder].length - 1) {\n', '            lockInfo[_holder][i] = lockInfo[_holder][lockInfo[_holder].length - 1];\n', '        }\n', '        lockInfo[_holder].length--;\n', '    }\n', '\n', '    function transferWithLock(address _to, uint256 _value, uint256 _releaseTime) public onlyOwner returns (bool) {\n', '        require(_to != address(0), "wrong address");\n', '        require(_value <= super.balanceOf(owner), "Not enough balance");\n', '\n', '        _balances[owner] = _balances[owner].sub(_value);\n', '        lockInfo[_to].push(\n', '            LockInfo(_releaseTime, _value)\n', '        );\n', '        emit Transfer(owner, _to, _value);\n', '        emit Lock(_to, _value, _releaseTime);\n', '\n', '        return true;\n', '    }\n', '\n', '    function transferWithLockAfter(address _to, uint256 _value, uint256 _afterTime) public onlyOwner returns (bool) {\n', '        require(_to != address(0), "wrong address");\n', '        require(_value <= super.balanceOf(owner), "Not enough balance");\n', '\n', '        _balances[owner] = _balances[owner].sub(_value);\n', '        lockInfo[_to].push(\n', '            LockInfo(now + _afterTime, _value)\n', '        );\n', '        emit Transfer(owner, _to, _value);\n', '        emit Lock(_to, _value, now + _afterTime);\n', '\n', '        return true;\n', '    }\n', '\n', '    function currentTime() public view returns (uint256) {\n', '        return now;\n', '    }\n', '\n', '    function afterTime(uint256 _value) public view returns (uint256) {\n', '        return now + _value;\n', '    }\n', '}']