['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.7.3;\n', "import { ITokenManager, IERC20, ISafeMath } from './Interfaces.sol';\n", '\n', '// ----------------------------------------------------------------------------\n', '// Implementation of ERC20 Standard\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20 is IERC20 {\n', '    string public _symbol;\n', '    string public _name;\n', '    uint8 public _decimals;\n', '    uint public _totalSupply;\n', '\n', '    // For each person map between their address and the number of tokens they have\n', '    mapping(address => uint) balances;\n', '    // To transfer erc20 token, give contract permission to transfer. Maps from your address to address of transfer target and amount to transfer.\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '    ISafeMath immutable public safemath;\n', '\n', '    constructor(string memory symbol, string memory name, uint8 decimals, uint total_supply, ISafeMath safemath_contract) {\n', '        _symbol = symbol;\n', '        _name = name;\n', '        _decimals = decimals;\n', '        _totalSupply = total_supply;\n', '        safemath = safemath_contract;\n', '    }\n', '\n', '    //Returns decimals that this token uses.\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '\n', '    //Returns the token name\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '\n', '    //Returns the symbol\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '\n', '    // Return total supply\n', '    function totalSupply() public override view returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '\n', '\n', '    // Return the token balance for account tokenOwner\n', '    function balanceOf(address _token_owner) public override view returns (uint balance) {\n', '        return balances[_token_owner];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from token owner's account to to account\n", "    // - Owner's account must have sufficient balance to transfer\n", '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address _to, uint _num_tokens) public override returns (bool success) {\n', '        require(_num_tokens <= balances[msg.sender], "You are trying to transfer more tokens than you have");\n', '\n', '        balances[msg.sender] = safemath.sub(balances[msg.sender], _num_tokens);\n', '        balances[_to] = safemath.add(balances[_to], _num_tokens);\n', '        emit Transfer(msg.sender, _to, _num_tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for spender to transferFrom(...) tokens\n', "    // from the token owner's account\n", '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces\n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public override returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // Non-standard approval function that takes care of the potential double-spend issue\n', "    // If a user wants to ensure that the double spend issue doesn't become a problem, they can choose\n", '    // to use this function instead of the standard approve function.\n', '    function increaseAllowance(address _spender, uint256 _addedValue) external returns (bool success) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        allowed[msg.sender][_spender] = safemath.add(oldValue, _addedValue);\n', '        emit Approval(msg.sender, _spender, safemath.add(oldValue, _addedValue));\n', '        return true;\n', '    }\n', '\n', '\n', '    // Non-standard approval function that takes care of the potential double-spend issue\n', "    // If a user wants to ensure that the double spend issue doesn't become a problem, they can choose\n", '    // to use this function instead of the standard approve function.\n', '    function decreaseAllowance(address _spender, uint256 _subtractedValue) external returns (bool success) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        allowed[msg.sender][_spender] = safemath.sub(oldValue, _subtractedValue);\n', '        emit Approval(msg.sender, _spender, safemath.sub(oldValue, _subtractedValue));\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer tokens from the from account to the to account\n', '    //\n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the from account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public override returns (bool success) {\n', '        balances[from] = safemath.sub(balances[from], tokens);\n', '        allowed[from][msg.sender] = safemath.sub(allowed[from][msg.sender], tokens);\n', '        balances[to] = safemath.add(balances[to], tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public override view returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '}']