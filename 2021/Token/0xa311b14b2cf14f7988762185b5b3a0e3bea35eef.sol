['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-23\n', '*/\n', '\n', '// SPDX-License-Identifier: AGPL-3.0-or-later\n', 'pragma solidity ^0.8.0;\n', '\n', '// Standard ERC-20 interface\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'interface GasToken {\n', '    function mint(uint256 value) external;\n', '    function free(uint256 value) external returns (bool success);\n', '    function freeUpTo(uint256 value) external returns (uint256 freed);\n', '    function freeFrom(address from, uint256 value) external returns (bool success);\n', '    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\n', '}\n', '\n', '//https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/interfaces/IUniswapV2Pair.sol\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '\n', '}\n', '\n', '//https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/interfaces/IWETH.sol\n', 'interface IWETH {\n', '    function deposit() external payable;\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function withdraw(uint) external;\n', '}\n', '\n', 'contract Whitelist {\n', '    mapping(address=>bool) whitelist;\n', '    constructor (address initOwner) {\n', '        whitelist[initOwner] = true;\n', '    }\n', '    modifier onlyWhitelist() {\n', '        require(whitelist[msg.sender] == true, "not in whitelist");\n', '        _;\n', '    }\n', '    function addToWhitelist(address newAddress) external onlyWhitelist() {\n', '        require(whitelist[newAddress] == false, "already in whitelist");\n', '        whitelist[newAddress] = true;\n', '    }\n', '}\n', '\n', 'contract GasTokenSwitcherV2 is Whitelist(tx.origin) {\n', '\n', '    receive() external payable {\n', '    }\n', '\n', '    //transfers ETH from this contract\n', '    function transferETH(address payable dest, uint256 amount) external onlyWhitelist() {\n', '        dest.transfer(amount);\n', '    }\n', '\n', '    //transfers ERC20 from this contract\n', '    function transferERC20(address tokenAddress, uint256 amountTokens, address dest) external onlyWhitelist() {\n', '        IERC20(tokenAddress).transfer(dest, amountTokens);\n', '    }\n', '\n', '    modifier discountGasToken(address burnToken) {\n', '        uint256 gasStart = gasleft();\n', '        _;\n', '        uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\n', '        GasToken(burnToken).freeUpTo((gasSpent + 14154) / 41130);\n', '    }\n', '\n', '    function mintAndBurn(address burnToken, address mintToken, uint256 newTokens)\n', '        external onlyWhitelist() discountGasToken(burnToken) {\n', '        GasToken(mintToken).mint(newTokens);\n', '    }\n', '\n', '    function burnMintSellChi(address burnToken, uint256 newTokens)\n', '        external onlyWhitelist() discountGasToken(burnToken) {\n', '        //mint CHI\n', '        GasToken(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c).mint(newTokens);\n', '        //CHI is token0 for the UniV2 ETH-CHI pool at 0xa6f3ef841d371a82ca757FaD08efc0DeE2F1f5e2\n', '        //emulate UniV2 getAmountOut functionality\n', '        (uint reserve0, uint reserve1,) = IUniswapV2Pair(0xa6f3ef841d371a82ca757FaD08efc0DeE2F1f5e2).getReserves();\n', '        uint amountInWithFee = (newTokens * 997);\n', '        uint numerator = (amountInWithFee * reserve1);\n', '        uint denominator = (reserve0 * 1000) + amountInWithFee;\n', '        uint amountOut = numerator / denominator;\n', '        //transfer new CHI to UniV2 pool\n', '        IERC20(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c).transfer(0xa6f3ef841d371a82ca757FaD08efc0DeE2F1f5e2, newTokens);\n', '        //get the appropriate amount out in WETH\n', '        IUniswapV2Pair(0xa6f3ef841d371a82ca757FaD08efc0DeE2F1f5e2).swap(newTokens, amountOut, address(this), new bytes(0));\n', '        //withdraw the WETH -- UniV2 uses WETH at 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\n', '        IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2).withdraw(amountOut);\n', '    }\n', '\n', '    function burnAndDeploy(address burnToken, bytes memory data)\n', '        external onlyWhitelist() discountGasToken(burnToken) returns(address contractAddress) {\n', '        assembly {\n', '            contractAddress := create(0, add(data, 32), mload(data))\n', '        }\n', '    }\n', '\n', '    function sendBatchedTransaction (address[] calldata dest, uint256[] calldata eth, bytes[] calldata hexData)\n', '        external onlyWhitelist() {\n', '        require(dest.length == eth.length && dest.length == hexData.length, "unequal input lengths");\n', '        for(uint256 i = 0; i < hexData.length; i++) {\n', '            (bool success,) = dest[i].call{value:eth[i]}(hexData[i]);\n', '            if (!success) revert("internal call failed");\n', '        }\n', '    }\n', '\n', '    function discountBatchedTransaction (address burnToken, address[] calldata dest, uint256[] calldata eth, bytes[] calldata hexData)\n', '        external onlyWhitelist() discountGasToken(burnToken) {\n', '        require(dest.length == eth.length && dest.length == hexData.length, "unequal input lengths");\n', '        for(uint256 i = 0; i < hexData.length; i++) {\n', '            (bool success,) = dest[i].call{value:eth[i]}(hexData[i]);\n', '            if (!success) revert("internal call failed");\n', '        }\n', '    }\n', '}']