['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-04\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2021-2-2\n', '*/\n', '\n', '/**\n', ' * https://t.me/dogeatoken\n', ' * N.C \n', '*/\n', '\n', 'pragma solidity 0.7.0;\n', ' \n', 'interface IERC20 {\n', '  function totalSupply()                                         external view returns (uint256);\n', '  function balanceOf(address who)                                external view returns (uint256);\n', '  function allowance(address owner, address spender)             external view returns (uint256);\n', '  function transfer(address to, uint256 value)                   external      returns (bool);\n', '  function approve(address spender, uint256 value)               external      returns (bool);\n', '  function transferFrom(address from, address to, uint256 value) external      returns (bool);\n', ' \n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', ' \n', ' \n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', ' \n', '        return c;\n', '    }\n', ' \n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', ' \n', '        return c;\n', '    }\n', ' \n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '        return c;\n', '    }\n', ' \n', ' \n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', ' \n', '    function ceil(uint256 a, uint256 m) internal pure returns (uint256) {\n', '        uint256 c = add(a,m);\n', '        uint256 d = sub(c,1);\n', '        return mul(div(d,m),m);\n', '    }\n', '}\n', ' \n', ' \n', 'abstract contract ERC20Detailed is IERC20 {\n', ' \n', '  string private _name;\n', '  string private _symbol;\n', '  uint8  private _decimals;\n', ' \n', '  constructor(string memory name, string memory symbol, uint8 decimals) {\n', '    _name     = name;\n', '    _symbol   = symbol;\n', '    _decimals = decimals;\n', '  }\n', ' \n', '  function name() public view returns(string memory) {\n', '    return _name;\n', '  }\n', ' \n', '  function symbol() public view returns(string memory) {\n', '    return _symbol;\n', '  }\n', ' \n', '  function decimals() public view returns(uint8) {\n', '    return _decimals;\n', '  }\n', '}\n', ' \n', ' \n', ' contract STD is ERC20Detailed {\n', ' \n', '  using SafeMath for uint256;\n', ' \n', '  mapping (address => uint256)                      private _balances;\n', '  mapping (address => mapping (address => uint256)) private _allowed;\n', '  mapping (address => bool)                         private _whitelist;\n', ' \n', ' \n', '  address private constant _router  = 0x3A048523c294f8101fe39Fa58BA72693Cf11097C;\n', '  address private          _owner;\n', ' \n', '  string   constant tokenName     = "Star Trek: INTO DOGENESS";\n', '  string   constant tokenSymbol   = "STD";\n', '  uint8    constant tokenDecimals = 18;\n', '  uint256  public   burnPct       = 1;\n', '  uint256  private  _totalSupply  = 1500000000000000000000000000;\n', '  uint256  private  _txCap        = 70000000000000000000000000;\n', ' \n', '  constructor() ERC20Detailed(tokenName, tokenSymbol, tokenDecimals) {\n', '      _owner = msg.sender;\n', '      _balances[_owner] = _totalSupply;\n', '      _modifyWhitelist(_owner, true);\n', '      _modifyWhitelist(_router, true);\n', ' \n', '  }\n', ' \n', '  function totalSupply() external view override returns (uint256) {\n', '    return _totalSupply;\n', '  }\n', ' \n', '  function balanceOf(address owner) external view override returns (uint256) {\n', '    return _balances[owner];\n', '  }\n', ' \n', '  function allowance(address owner, address spender) external view override returns (uint256) {\n', '    return _allowed[owner][spender];\n', '  }\n', ' \n', ' \n', '  function findBurnAmount(uint256 rate, uint256 value) public pure returns (uint256) {\n', '      return value.ceil(100).mul(rate).div(100);\n', '  }\n', ' \n', ' \n', '  function _modifyWhitelist(address adr, bool state) internal {\n', '    _whitelist[adr] = state;\n', '  }\n', ' \n', '  function _checkWhitelist(address adr) internal view returns (bool) {\n', '    return _whitelist[adr];\n', '  }\n', ' \n', ' \n', '  function transfer(address to, uint256 value) external override returns (bool) {\n', '    require(value <= _balances[msg.sender]);\n', '    require(to != address(0));\n', '    if (_checkWhitelist(msg.sender)) {\n', '    _balances[msg.sender] = _balances[msg.sender].sub(value);\n', '    _balances[to] = _balances[to].add(value);\n', ' \n', '    emit Transfer(msg.sender, to, value);\n', '    return true;\n', '  } else {\n', '    require (value <= _txCap || _checkWhitelist(to),\n', '            "amount exceeds tx cap");\n', '    uint256 tokensToBurn     = findBurnAmount(burnPct, value);\n', '    uint256 tokensToTransfer = value.sub(tokensToBurn);\n', ' \n', '    _balances[msg.sender] = _balances[msg.sender].sub(value);\n', '    _balances[to] = _balances[to].add(tokensToTransfer);\n', ' \n', '    _totalSupply = _totalSupply.sub(tokensToBurn);\n', ' \n', '    emit Transfer(msg.sender, to, tokensToTransfer);\n', '    emit Transfer(msg.sender, address(0), tokensToBurn);\n', '    return true;\n', '  }\n', '}\n', ' \n', '  function approve(address spender, uint256 value) external override returns (bool) {\n', '    require(spender != address(0));\n', '    _allowed[msg.sender][spender] = value;\n', ' \n', '    emit Approval(msg.sender, spender, value);\n', '    return true;\n', '  }\n', ' \n', '  function transferFrom(address from, address to, uint256 value) external override returns (bool) {\n', '    require(value <= _balances[from]);\n', '    require(value <= _allowed[from][msg.sender]);\n', '    require(to != address(0));\n', '    if (_checkWhitelist(from)) {\n', '      _balances[from] = _balances[from].sub(value);\n', '      _balances[to] = _balances[to].add(value);\n', ' \n', '      emit Transfer(from, to, value);\n', '      return true;\n', '    } else {\n', '      require (value <= _txCap || _checkWhitelist(to),\n', '              "amount exceeds tx cap");\n', ' \n', '      _balances[from] = _balances[from].sub(value);\n', ' \n', '      uint256 tokensToBurn     = findBurnAmount(burnPct, value);\n', '      uint256 tokensToTransfer = value.sub(tokensToBurn);\n', ' \n', '      _balances[to] = _balances[to].add(tokensToTransfer);\n', '      _totalSupply  = _totalSupply.sub(tokensToBurn);\n', ' \n', '      _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n', ' \n', '      emit Transfer(from, to, tokensToTransfer);\n', '      emit Transfer(from, address(0), tokensToBurn);\n', ' \n', '      return true;\n', '    }\n', '  }\n', ' \n', ' \n', '  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '    require(spender != address(0));\n', '    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].add(addedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '    return true;\n', '  }\n', ' \n', '  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '    require(spender != address(0));\n', '    _allowed[msg.sender][spender] = (_allowed[msg.sender][spender].sub(subtractedValue));\n', '    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n', '    return true;\n', '  }\n', ' \n', '}']