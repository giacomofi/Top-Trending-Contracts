['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-15\n', '*/\n', '\n', 'pragma solidity ^0.5.11;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function balanceOf(address who) external view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param to The address to transfer to.\n', '    * @param value The amount to be transferred.\n', '    */\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        require(to != address(0));\n', '        require(to != address(this));\n', '        require(value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '        emit Transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address owner) external view returns (uint256 balance) {\n', '        return balances[owner];\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param from address The address which you want to send tokens from\n', '     * @param to address The address which you want to transfer to\n', '     * @param value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '        require(to != address(0));\n', '        require(to != address(this));\n', '        require(value <= balances[from]);\n', '        require(value <= allowed[from][msg.sender]);\n', '\n', '        balances[from] = balances[from].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\n', '        emit Transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param spender The address which will spend the funds.\n', '     * @param value The amount of tokens to be spent.\n', '     */\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        allowed[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param owner address The address which owns the funds.\n', '     * @param spender address The address which will spend the funds.\n', '     * @return An uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256) {\n', '        return allowed[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param spender The address which will spend the funds.\n', '     * @param addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address spender, uint256 addedValue) public returns (bool){\n', '        allowed[msg.sender][spender] = allowed[msg.sender][spender].add(addedValue);\n', '        emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param spender The address which will spend the funds.\n', '     * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address spender, uint256 subtractedValue) public returns (bool){\n', '        uint256 oldValue = allowed[msg.sender][spender];\n', '        if (subtractedValue > oldValue) {\n', '            allowed[msg.sender][spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][spender] = oldValue.sub(subtractedValue);\n', '        }\n', '\n', '        emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC677 interface\n', ' *\n', ' * @dev Simple ERC677, adding transferAndCall functionality\n', ' * @dev https://github.com/ethereum/EIPs/issues/677\n', ' */\n', 'contract ERC677 is ERC20 {\n', '  function transferAndCall(address to, uint256 value, bytes memory data) public returns (bool success);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint value, bytes data);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC677Receiver interface\n', ' *\n', ' * @dev Interface for token receivers (contracts) for transferAndCall\n', ' * @dev https://github.com/ethereum/EIPs/issues/677\n', ' */\n', 'contract ERC677Receiver {\n', '  function onTokenTransfer(address sender, uint value, bytes calldata data) external;\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC677Token\n', ' *\n', ' * @dev Implementation of ERC677 Token\n', ' * @dev https://github.com/ethereum/EIPs/issues/677\n', ' */\n', 'contract ERC677Token is ERC677, StandardToken {\n', '    \n', '  /**\n', '   * @dev Transfers token to address with additional data if the recipient is a contract\n', '   * @param to The address to transfer token to\n', '   * @param value The amount of tokens to be transferred\n', '   * @param data The data to be passed to the receiving contract\n', '   */\n', '  function transferAndCall(address to, uint256 value, bytes memory data) public returns (bool success) {\n', '    super.transfer(to, value);\n', '    emit Transfer(msg.sender, to, value, data);\n', '    if (isContract(to)) {\n', '      contractFallback(to, value, data);\n', '    }\n', '    return true;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Call receiving contract callback, when to address in transferAndCall is contract\n', '   * @param to The address of receiving contract\n', '   * @param value The amount of tokens to be transferred\n', '   * @param data The data to be passed to the receiving contract onTokenTransfer\n', '   */\n', '  function contractFallback(address to, uint value, bytes memory data) private {\n', '    ERC677Receiver receiver = ERC677Receiver(to);\n', '    receiver.onTokenTransfer(msg.sender, value, data);\n', '  }\n', '  \n', '\n', '  /**\n', '   * @dev Checks of address is contract\n', '   * @param addr Address to check\n', '   */\n', '  function isContract(address addr) private view returns (bool hasCode) {\n', '    uint length;\n', '    assembly { length := extcodesize(addr) }\n', '    return length > 0;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) external onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() onlyOwner whenNotPaused external {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() onlyOwner whenPaused external {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable token\n', ' *\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is ERC677Token, Pausable {\n', '\n', '    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n', '        return super.transfer(to, value);\n', '    }\n', '    \n', '    function transferAndCall(address to, uint256 value, bytes memory data) public whenNotPaused returns (bool) {\n', '        return super.transferAndCall(to, value, data);\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n', '        return super.approve(spender, value);\n', '    }\n', '\n', '    function increaseApproval(address spender, uint256 addedValue) public whenNotPaused returns (bool){\n', '        return super.increaseApproval(spender, addedValue);\n', '    }\n', '\n', '    function decreaseApproval(address spender, uint256 subtractedValue) public whenNotPaused returns (bool){\n', '        return super.decreaseApproval(spender, subtractedValue);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title TaxaToken token\n', ' *\n', ' * @dev PausableToken modified with coin specific setting.\n', ' **/\n', '\n', 'contract TaxaToken is PausableToken {\n', '    string public constant name = "Taxa Token";\n', '    string public constant symbol = "TXT";\n', '    uint8 public constant decimals = 18;\n', '\n', '    uint256 public constant totalSupply = 10 ** 10 * 10 ** uint256(decimals);\n', '\n', '    constructor() public {\n', '        balances[owner] = totalSupply;\n', '        emit Transfer(address(0), owner, balances[owner]);\n', '    }\n', '}']