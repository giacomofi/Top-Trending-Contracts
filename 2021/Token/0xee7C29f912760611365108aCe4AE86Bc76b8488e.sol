['// SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity ^0.6.0;\n', '\n', 'import "./ERC20.sol";\n', '\n', 'contract RPToken is ERC20 {\n', '    address public minter;\n', '    address public wallet;\n', '    address public nominatedWallet;\n', '    \n', '\n', '    constructor(address _wallet) public ERC20("Royale Protocol", "RPT") {\n', '           wallet=_wallet;\n', '    }\n', '    \n', '    modifier onlyMinter {\n', '        require(msg.sender==minter, "not authorized");\n', '        _;\n', '    }\n', '    \n', '    modifier onlyWallet(){\n', '      require(wallet==msg.sender, "Not Authorized");\n', '      _;\n', '    }\n', '\n', '    \n', '    function nominateNewOwner(address _wallet) external onlyWallet {\n', '        nominatedWallet = _wallet;\n', '        emit walletNominated(_wallet);\n', '    }\n', '\n', '    function acceptOwnership() external {\n', '        require(msg.sender == nominatedWallet, "You must be nominated before you can accept ownership");\n', '        emit walletChanged(wallet, nominatedWallet);\n', '        wallet = nominatedWallet;\n', '        nominatedWallet = address(0);\n', '    }\n', '    \n', '    function setMinter(address addr) external  onlyWallet{\n', '        minter = addr;\n', '        emit minterAdded(addr);\n', '    }\n', '\n', '    function mint(address recipient, uint256 amount) external onlyMinter {\n', '        _mint(recipient, amount);\n', '    }\n', '\n', '    function burn(address sender, uint256 amount) external onlyMinter {\n', '        _burn(sender, amount);\n', '    }\n', '\n', '    event walletNominated(address newOwner);\n', '    event walletChanged(address oldOwner, address newOwner);\n', '    event minterAdded(address minter);\n', '}']