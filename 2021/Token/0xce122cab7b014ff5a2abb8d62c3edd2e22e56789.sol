['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-19\n', '*/\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '// Contract details\n', '//\n', '// Name          : NWord Pass\n', '// Symbol        : NWORD\n', '// Total supply  : 1,000,000\n', '// Decimals      : 18\n', '\n', 'contract SafeMath \n', '{\n', '\n', '    function safeAdd(uint _a, uint _b) public pure returns (uint c) \n', '    {\n', '        c = _a + _b;\n', '        require(c >= _a);\n', '    }\n', '\n', '    function safeSub(uint _a, uint _b) public pure returns (uint c) \n', '    {\n', '        require(_b <= _a);\n', '        c = _a - _b;\n', '    }\n', '\n', '    function safeMul(uint _a, uint _b) public pure returns (uint c) \n', '    {\n', '        c = _a * _b;\n', '        require(_a == 0 || c / _a == _b);\n', '    }\n', '\n', '    function safeDiv(uint _a, uint _b) public pure returns (uint c) \n', '    {\n', '        require(_b > 0);\n', '        c = _a / _b;\n', '    }\n', '}\n', '\n', 'contract ERC20Interface\n', '{\n', '\tfunction totalSupply() public view returns (uint256);\n', '\tfunction balanceOf(address _owner) public view returns (uint256 balance);\n', '\tfunction transfer(address _to, uint256 _value) public returns (bool success);\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\tfunction approve(address _spender, uint256 _value) public returns (bool success);\n', '\tfunction allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract NWordPass is ERC20Interface, SafeMath\n', '{\n', '\tstring public name;\n', '\tstring public symbol;\n', '\tuint8 public decimals;\n', '\n', '\tuint256 _totalSupply;\n', '\n', '\tmapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '    constructor() public \n', '    {\n', '    \tname = "NWord Pass";\n', '    \tsymbol = "NWORD";\n', '        decimals = 18;\n', '        \n', '        _totalSupply = 1000000000000000000000000;\n', '\n', '        balances[msg.sender] = _totalSupply;\n', '    }\n', '\n', '    function nwordPassCheck(address _address) public view returns (string memory)\n', '    {\n', '        if(balanceOf(_address) >= 1)\n', '        {\n', '            return "This address has the pass nigga";\n', '        }\n', '        \n', '        return "This address does not have the n word pass";\n', '    }\n', '\n', '  \tfunction totalSupply() public view returns (uint256) \n', '  \t{\n', '\t    return _totalSupply;\n', '  \t}\n', '\n', '  \tfunction balanceOf(address _address) public view returns (uint256 balance) \n', '  \t{\n', '        return balances[_address];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success)\n', '    {\n', '        balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success)\n', '    {\n', '        balances[_from] = safeSub(balances[_from], _value);\n', '        allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value);\n', '        balances[_to] = safeAdd(balances[_to], _value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success)\n', '    {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining)\n', '    {\n', '    \treturn allowed[_owner][_spender];\n', '    }\n', '}']