['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-18\n', '*/\n', '\n', '//SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity ^0.8.4;\n', 'contract InstaCash {\n', '    string public name = "InstaCoin";\n', '    string public symbol = "INC";\n', '    uint8 public decimals = 8;\n', '    uint256 public totalSupply = 10000000000 * (uint256(10) ** decimals);\n', '    using SafeMath for uint256;\n', '    mapping(address => uint256) public balanceOf;\n', '    mapping(address => mapping(address => uint256)) public allowance;\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    constructor() {\n', '        balanceOf[msg.sender] = totalSupply;\n', '        emit Transfer(address(0), msg.sender, totalSupply);\n', '    }\n', '    function approve(address spender, uint256 value) public returns (bool success) {\n', '        allowance[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '    function transfer(address to, uint256 value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= value);\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(value);\n', '        balanceOf[to] = balanceOf[to].add(value);\n', '        emit Transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool success) {\n', '        require(value <= balanceOf[from]);\n', '        require(value <= allowance[from][msg.sender]);\n', '        balanceOf[from] = balanceOf[from].sub(value);\n', '        balanceOf[to] = balanceOf[to].add(value);\n', '        allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n', '        emit Transfer(from, to, value);\n', '        return true;\n', '    }\n', '}\n', 'library SafeMath {\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) { assert(b <= a); return a - b; }\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a + b; assert(c >= a); return c; }\n', '}']