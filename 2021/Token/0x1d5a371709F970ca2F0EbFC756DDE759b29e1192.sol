['pragma solidity 0.5.16;\n', '\n', 'import "@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol";\n', 'import "./interface/IVault.sol";\n', 'import "./interface/INoMintRewardPool.sol";\n', '\n', 'contract Reader {\n', '\n', '  function getAllInformation(address who, address[] memory vaults, address[] memory pools)\n', '  public view returns (uint256[] memory, uint256[] memory, uint256[] memory) {\n', '    return (unstakedBalances(who, vaults), stakedBalances(who, pools), vaultSharePrices(vaults));\n', '  }\n', '\n', '  function unstakedBalances(address who, address[] memory vaults) public view returns (uint256[] memory) {\n', '    uint256[] memory result = new uint256[](vaults.length);\n', '    for (uint256 i = 0; i < vaults.length; i++) {\n', '      result[i] = IVault(vaults[i]).balanceOf(who);\n', '    }\n', '    return result;\n', '  }\n', '\n', '  function stakedBalances(address who, address[] memory pools) public view returns (uint256[] memory) {\n', '    uint256[] memory result = new uint256[](pools.length);\n', '    for (uint256 i = 0; i < pools.length; i++) {\n', '      result[i] = INoMintRewardPool(pools[i]).balanceOf(who);\n', '    }\n', '    return result;\n', '  }\n', '\n', '  function underlyingBalances(address who, address[] memory vaults) public view returns (uint256[] memory) {\n', '    uint256[] memory result = new uint256[](vaults.length);\n', '    for (uint256 i = 0; i < vaults.length; i++) {\n', '      result[i] = IERC20(IVault(vaults[i]).underlying()).balanceOf(who);\n', '    }\n', '    return result;\n', '  }\n', '\n', '  function vaultSharePrices(address[] memory vaults) public view returns (uint256[] memory) {\n', '    uint256[] memory result = new uint256[](vaults.length);\n', '    for (uint256 i = 0; i < vaults.length; i++) {\n', '      result[i] = IVault(vaults[i]).getPricePerFullShare();\n', '    }\n', '    return result;\n', '  }\n', '\n', '  function underlyingBalanceWithInvestmentForHolder(address who, address[] memory vaults)\n', '  public view returns (uint256[] memory) {\n', '    uint256[] memory result = new uint256[](vaults.length);\n', '    for (uint256 i = 0; i < vaults.length; i++) {\n', '      result[i] = IVault(vaults[i]).underlyingBalanceWithInvestmentForHolder(who);\n', '    }\n', '    return result;\n', '  }\n', '}\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'pragma solidity 0.5.16;\n', '\n', 'import "../../public/contracts/base/interface/IVault.sol";\n', '\n', 'pragma solidity 0.5.16;\n', '\n', 'import "../../public/contracts/base/interface/INoMintRewardPool.sol";\n', '\n', 'pragma solidity 0.5.16;\n', '\n', 'interface IVault {\n', '\n', '    function initializeVault(\n', '      address _storage,\n', '      address _underlying,\n', '      uint256 _toInvestNumerator,\n', '      uint256 _toInvestDenominator\n', '    ) external ;\n', '\n', '    function balanceOf(address) external view returns (uint256);\n', '\n', '    function underlyingBalanceInVault() external view returns (uint256);\n', '    function underlyingBalanceWithInvestment() external view returns (uint256);\n', '\n', '    // function store() external view returns (address);\n', '    function governance() external view returns (address);\n', '    function controller() external view returns (address);\n', '    function underlying() external view returns (address);\n', '    function strategy() external view returns (address);\n', '\n', '    function setStrategy(address _strategy) external;\n', '    function announceStrategyUpdate(address _strategy) external;\n', '    function setVaultFractionToInvest(uint256 numerator, uint256 denominator) external;\n', '\n', '    function deposit(uint256 amountWei) external;\n', '    function depositFor(uint256 amountWei, address holder) external;\n', '\n', '    function withdrawAll() external;\n', '    function withdraw(uint256 numberOfShares) external;\n', '    function getPricePerFullShare() external view returns (uint256);\n', '\n', '    function underlyingBalanceWithInvestmentForHolder(address holder) view external returns (uint256);\n', '\n', '    // hard work should be callable only by the controller (by the hard worker) or by governance\n', '    function doHardWork() external;\n', '}\n', '\n', 'pragma solidity 0.5.16;\n', '\n', 'interface INoMintRewardPool {\n', '    function withdraw(uint) external;\n', '    function getReward() external;\n', '    function stake(uint) external;\n', '    function balanceOf(address) external view returns (uint256);\n', '    function earned(address account) external view returns (uint256);\n', '    function exit() external;\n', '\n', '    function rewardDistribution() external view returns (address);\n', '    function lpToken() external view returns(address);\n', '    function rewardToken() external view returns(address);\n', '\n', '    // only owner\n', '    function setRewardDistribution(address _rewardDistributor) external;\n', '    function transferOwnership(address _owner) external;\n', '    function notifyRewardAmount(uint256 _reward) external;\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 200\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "metadata": {\n', '    "useLiteralContent": true\n', '  },\n', '  "libraries": {}\n', '}']