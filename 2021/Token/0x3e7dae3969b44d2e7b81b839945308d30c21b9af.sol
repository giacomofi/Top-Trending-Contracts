['// SPDX-License-Identifier: Toknify.com\n', 'pragma solidity ^0.8.0;\n', 'import "./ERC20.sol";\n', 'import "./ERC20Burnable.sol";\n', 'import "./ERC20Pausable.sol";\n', 'import "./AccessControlEnumerable.sol";\n', 'import "./Context.sol";\n', 'contract Toknify is Context, AccessControlEnumerable, ERC20Burnable, ERC20Pausable {\n', '    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");\n', '    bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");\n', '    constructor(string memory name, string memory coinShare, string memory symbol, uint256 initialSupply, address owner) ERC20(name, symbol, coinShare) {\n', '        _mint(owner, initialSupply);\n', '        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n', '        _setupRole(MINTER_ROLE, _msgSender());\n', '        _setupRole(PAUSER_ROLE, _msgSender());\n', '    }\n', '    function mint(address to, uint256 amount) public virtual {\n', '        require(hasRole(MINTER_ROLE, _msgSender()), "Toknify: must have minter role to mint");\n', '        _mint(to, amount);\n', '    }\n', '    function pause() public virtual {\n', '        require(hasRole(PAUSER_ROLE, _msgSender()), "Toknify: must have pauser role to pause");\n', '        _pause();\n', '    }\n', '    function unpause() public virtual {\n', '        require(hasRole(PAUSER_ROLE, _msgSender()), "Toknify: must have pauser role to unpause");\n', '        _unpause();\n', '    }\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override(ERC20, ERC20Pausable) {\n', '        super._beforeTokenTransfer(from, to, amount);\n', '    }\n', '}']