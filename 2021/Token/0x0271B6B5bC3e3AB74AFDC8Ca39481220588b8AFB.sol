['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-21\n', '*/\n', '\n', 'pragma solidity ^0.5.16;\n', '\n', '\n', '// Math operations with safety checks that throw on error\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "Math error");\n', '        return c;\n', '    }\n', '  \n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "Math error");\n', '        return a - b;\n', '    }\n', '}\n', '\n', '\n', '// Abstract contract for the full ERC 20 Token standard\n', 'contract ERC20 {\n', '    function balanceOf(address _address) public view returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '// Token contract\n', 'contract BWARE is ERC20 {\n', '    string public name = "BWARELABS";\n', '    string public symbol = "BWARE";\n', '    uint8 public decimals = 18;\n', '    uint256 public totalSupply = 100000000 * 10**18;\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '    bytes4 private constant TRANSFER = bytes4(\n', '        keccak256(bytes("transfer(address,uint256)"))\n', '    );\n', '    \n', '    constructor() public {\n', '        balances[msg.sender] = totalSupply;\n', '    }\n', '    \n', '    function balanceOf(address _address) public view returns (uint256 balance) {\n', '        return balances[_address];\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(_to != address(0), "Zero address error");\n', '        require(balances[msg.sender] >= _value && _value > 0, "Insufficient balance or zero amount");\n', '        balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);\n', '        balances[_to] = SafeMath.add(balances[_to], _value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address _spender, uint256 _amount) public returns (bool success) {\n', '        require(_spender != address(0), "Zero address error");\n', '        require((allowed[msg.sender][_spender] == 0) || (_amount == 0), "Approve amount error");\n', '        allowed[msg.sender][_spender] = _amount;\n', '        emit Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_from != address(0) && _to != address(0), "Zero address error");\n', '        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0, "Insufficient balance or zero amount");\n', '        balances[_from] = SafeMath.sub(balances[_from], _value);\n', '        balances[_to] = SafeMath.add(balances[_to], _value);\n', '        allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    \n', '}']