['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-11\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.5.0 <0.8.0;\n', '\n', 'library SafeMath {\n', '    uint256 constant WAD = 10 ** 18;\n', '    uint256 constant RAY = 10 ** 27;\n', '\n', '    function wad() public pure returns (uint256) {\n', '        return WAD;\n', '    }\n', '\n', '    function ray() public pure returns (uint256) {\n', '        return RAY;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a <= b ? a : b;\n', '    }\n', '\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function sqrt(uint256 a) internal pure returns (uint256 b) {\n', '        if (a > 3) {\n', '            b = a;\n', '            uint256 x = a / 2 + 1;\n', '            while (x < b) {\n', '                b = x;\n', '                x = (a / x + x) / 2;\n', '            }\n', '        } else if (a != 0) {\n', '            b = 1;\n', '        }\n', '    }\n', '\n', '    function wmul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mul(a, b) / WAD;\n', '    }\n', '\n', '    function wmulRound(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return add(mul(a, b), WAD / 2) / WAD;\n', '    }\n', '\n', '    function rmul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mul(a, b) / RAY;\n', '    }\n', '\n', '    function rmulRound(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return add(mul(a, b), RAY / 2) / RAY;\n', '    }\n', '\n', '    function wdiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(mul(a, WAD), b);\n', '    }\n', '\n', '    function wdivRound(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return add(mul(a, WAD), b / 2) / b;\n', '    }\n', '\n', '    function rdiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(mul(a, RAY), b);\n', '    }\n', '\n', '    function rdivRound(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return add(mul(a, RAY), b / 2) / b;\n', '    }\n', '\n', '    function wpow(uint256 x, uint256 n) internal pure returns (uint256) {\n', '        uint256 result = WAD;\n', '        while (n > 0) {\n', '            if (n % 2 != 0) {\n', '                result = wmul(result, x);\n', '            }\n', '            x = wmul(x, x);\n', '            n /= 2;\n', '        }\n', '        return result;\n', '    }\n', '\n', '    function rpow(uint256 x, uint256 n) internal pure returns (uint256) {\n', '        uint256 result = RAY;\n', '        while (n > 0) {\n', '            if (n % 2 != 0) {\n', '                result = rmul(result, x);\n', '            }\n', '            x = rmul(x, x);\n', '            n /= 2;\n', '        }\n', '        return result;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/interface/IERC20.sol\n', '\n', '\n', 'pragma solidity >=0.5.0 <0.8.0;\n', '\n', 'interface IERC20 {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external view returns (string memory);\n', '\n', '    function symbol() external view returns (string memory);\n', '\n', '    function decimals() external view returns (uint8);\n', '\n', '    function totalSupply() external view returns (uint);\n', '\n', '    function balanceOf(address owner) external view returns (uint);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '\n', '    function transfer(address to, uint value) external returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '}\n', '\n', '\n', '// File contracts/interface/ICCFactory.sol\n', '\n', '\n', 'pragma solidity >=0.5.0 <0.8.0;\n', '\n', 'interface ICCFactory {\n', '    function updater() external view returns (address);\n', '\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    function feeTo() external view returns (address);\n', '\n', '    function feeToSetter() external view returns (address);\n', '\n', '    function feeToRate() external view returns (uint256);\n', '\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '\n', '    function allPairs(uint) external view returns (address pair);\n', '\n', '    function allPairsLength() external view returns (uint);\n', '\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '\n', '    function setFeeToSetter(address) external;\n', '\n', '    function setFeeToRate(uint256) external;\n', '\n', '    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\n', '\n', '    function pairFor(address tokenA, address tokenB) external view returns (address pair);\n', '\n', '    function getReserves(address tokenA, address tokenB) external view returns (uint256 reserveA, uint256 reserveB);\n', '\n', '    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) external pure returns (uint256 amountB);\n', '\n', '    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) external view returns (uint256 amountOut);\n', '\n', '    function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut) external view returns (uint256 amountIn);\n', '\n', '    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\n', '\n', '    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\n', '    \n', '    function migrator() external view returns (address);\n', '    \n', '    function setMigrator(address) external;\n', '\n', '}\n', '\n', '\n', '// File contracts/interface/ICCPair.sol\n', '\n', '\n', 'pragma solidity >=0.5.0 <0.8.0;\n', '\n', 'interface ICCPair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '\n', '    function symbol() external pure returns (string memory);\n', '\n', '    function decimals() external pure returns (uint8);\n', '\n', '    function totalSupply() external view returns (uint);\n', '\n', '    function balanceOf(address owner) external view returns (uint);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '\n', '    function transfer(address to, uint value) external returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '\n', '    function factory() external view returns (address);\n', '\n', '    function token0() external view returns (address);\n', '\n', '    function token1() external view returns (address);\n', '\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '\n', '    function price0CumulativeLast() external view returns (uint);\n', '\n', '    function price1CumulativeLast() external view returns (uint);\n', '\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '\n', '    function skim(address to) external;\n', '\n', '    function sync() external;\n', '\n', '    function price(address token, uint256 baseDecimal) external view returns (uint256);\n', '\n', '    function initialize(address, address) external;\n', '\n', '    function updateFee() external;\n', '}\n', '\n', '\n', '// File contracts/core/Factory.sol\n', '\n', '\n', 'pragma solidity =0.5.16;\n', '\n', '\n', '\n', '\n', 'interface IUniswapV2Callee {\n', '    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\n', '}\n', '\n', 'interface IMigrator {\n', '    // Return the desired amount of liquidity token that the migrator wants.\n', '    function desiredLiquidity() external view returns (uint256);\n', '}\n', '\n', 'interface ICCERC20 {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '\n', '    function symbol() external pure returns (string memory);\n', '\n', '    function decimals() external pure returns (uint8);\n', '\n', '    function totalSupply() external view returns (uint);\n', '\n', '    function balanceOf(address owner) external view returns (uint);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '\n', '    function transfer(address to, uint value) external returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '}\n', '\n', '// LP tokens, will not use directly, but inherited by Medex Pair\n', 'contract CCERC20 is ICCERC20 {\n', '    using SafeMath for uint;\n', '\n', "    string public constant name = 'Swap LP Token';\n", "    string public constant symbol = 'CCSWAP';\n", '    uint8 public constant decimals = 18;\n', '    uint  public totalSupply;\n', '    mapping(address => uint) public balanceOf;\n', '    mapping(address => mapping(address => uint)) public allowance;\n', '\n', '    bytes32 public DOMAIN_SEPARATOR;\n', '    // keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");\n', '    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n', '    mapping(address => uint) public nonces;\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    constructor() public {\n', '        uint chainId;\n', '        assembly {\n', '            chainId := chainid\n', '        }\n', '        DOMAIN_SEPARATOR = keccak256(\n', '            abi.encode(\n', "                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\n", '                keccak256(bytes(name)),\n', "                keccak256(bytes('1')),\n", '                chainId,\n', '                address(this)\n', '            )\n', '        );\n', '    }\n', '\n', '    function _mint(address to, uint value) internal {\n', '        totalSupply = totalSupply.add(value);\n', '        balanceOf[to] = balanceOf[to].add(value);\n', '        emit Transfer(address(0), to, value);\n', '    }\n', '\n', '    function _burn(address from, uint value) internal {\n', '        balanceOf[from] = balanceOf[from].sub(value);\n', '        totalSupply = totalSupply.sub(value);\n', '        emit Transfer(from, address(0), value);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint value) private {\n', '        allowance[owner][spender] = value;\n', '        emit Approval(owner, spender, value);\n', '    }\n', '\n', '    function _transfer(address from, address to, uint value) private {\n', '        balanceOf[from] = balanceOf[from].sub(value);\n', '        balanceOf[to] = balanceOf[to].add(value);\n', '        emit Transfer(from, to, value);\n', '    }\n', '\n', '    function approve(address spender, uint value) external returns (bool) {\n', '        _approve(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    function transfer(address to, uint value) external returns (bool) {\n', '        _transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint value) external returns (bool) {\n', '        if (allowance[from][msg.sender] != uint(- 1)) {\n', '            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n', '        }\n', '        _transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\n', "        require(deadline >= block.timestamp, 'CCSwap: EXPIRED');\n", '        bytes32 digest = keccak256(\n', '            abi.encodePacked(\n', "                '\\x19\\x01',\n", '                DOMAIN_SEPARATOR,\n', '                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\n', '            )\n', '        );\n', '        address recoveredAddress = ecrecover(digest, v, r, s);\n', "        require(recoveredAddress != address(0) && recoveredAddress == owner, 'CCSwap: INVALID_SIGNATURE');\n", '        _approve(owner, spender, value);\n', '    }\n', '}\n', '\n', 'contract CCPair is ICCPair, CCERC20 {\n', '    using SafeMath  for uint;\n', '    using UQ112x112 for uint224;\n', '\n', '    uint public constant MINIMUM_LIQUIDITY = 10 ** 3;\n', "    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '\n', '    address public factory;\n', '    address public token0;\n', '    address public token1;\n', '\n', '    uint112 private reserve0;           // uses single storage slot, accessible via getReserves\n', '    uint112 private reserve1;           // uses single storage slot, accessible via getReserves\n', '    uint32  private blockTimestampLast; // uses single storage slot, accessible via getReserves\n', '\n', '    uint public price0CumulativeLast;\n', '    uint public price1CumulativeLast;\n', '    uint public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\n', '\n', '    uint private unlocked = 1;\n', '    modifier lock() {\n', "        require(unlocked == 1, 'CCSwap: LOCKED');\n", '        unlocked = 0;\n', '        _;\n', '        unlocked = 1;\n', '    }\n', '\n', '    function getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\n', '        _reserve0 = reserve0;\n', '        _reserve1 = reserve1;\n', '        _blockTimestampLast = blockTimestampLast;\n', '    }\n', '\n', '    function _safeTransfer(address token, address to, uint value) private {\n', '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'CCSwap: TRANSFER_FAILED');\n", '    }\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    constructor() public {\n', '        factory = msg.sender;\n', '    }\n', '\n', '    // called once by the factory at time of deployment\n', '    function initialize(address _token0, address _token1) external {\n', "        require(msg.sender == factory, 'CCSwap: FORBIDDEN');\n", '        // sufficient check\n', '        token0 = _token0;\n', '        token1 = _token1;\n', '    }\n', '\n', '    // update reserves and, on the first call per block, price accumulators\n', '    function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {\n', "        require(balance0 <= uint112(- 1) && balance1 <= uint112(- 1), 'CCSwap: OVERFLOW');\n", '        uint32 blockTimestamp = uint32(block.timestamp % 2 ** 32);\n', '        uint32 timeElapsed = blockTimestamp - blockTimestampLast;\n', '        // overflow is desired\n', '        // first time will not be here, the reseve is 0 initially\n', '        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\n', '            // * never overflows, and + overflow is desired\n', '            price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\n', '            price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\n', '        }\n', '        reserve0 = uint112(balance0);\n', '        reserve1 = uint112(balance1);\n', '        blockTimestampLast = blockTimestamp;\n', '        emit Sync(reserve0, reserve1);\n', '    }\n', '\n', '\n', '    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\n', '    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\n', '        address feeTo = ICCFactory(factory).feeTo();\n', '        feeOn = feeTo != address(0);\n', '        uint _kLast = kLast;\n', '        // gas savings\n', '        if (feeOn) {\n', '            // first add liquidity on a pair will not mint fee\n', '            if (_kLast != 0) {\n', '                uint rootK = SafeMath.sqrt(uint(_reserve0).mul(_reserve1));\n', '                uint rootKLast = SafeMath.sqrt(_kLast);\n', '                if (rootK > rootKLast) {\n', '                    uint numerator = totalSupply.mul(rootK.sub(rootKLast));\n', '                    uint denominator = rootK.mul(ICCFactory(factory).feeToRate()).add(rootKLast);\n', '                    uint liquidity = numerator / denominator;\n', '                    if (liquidity > 0) {\n', '                        _mint(feeTo, liquidity);\n', '                    }\n', '                }\n', '            }\n', '        } else if (_kLast != 0) {\n', '            kLast = 0;\n', '        }\n', '    }\n', '\n', '    // mint fee to FeeTo manually\n', '    function updateFee() external lock {\n', '        address updater = ICCFactory(factory).updater();\n', '        if (updater != address(0)) {\n', '            require(msg.sender == updater, "CCSwap: must be called from updater");\n', '        }\n', '        (uint112 _reserve0, uint112 _reserve1,) = getReserves();\n', '        // gas savings\n', '        uint balance0 = IERC20(token0).balanceOf(address(this));\n', '        uint balance1 = IERC20(token1).balanceOf(address(this));\n', '        bool feeOn = _mintFee(_reserve0, _reserve1);\n', '        _update(balance0, balance1, _reserve0, _reserve1);\n', '        if (feeOn) kLast = uint(reserve0).mul(reserve1);\n', '        // reserve0 and reserve1 are up-to-date\n', '    }\n', '\n', '\n', '    // this low-level function should be called from a contract which performs important safety checks\n', '    function mint(address to) external lock returns (uint liquidity) {\n', '        (uint112 _reserve0, uint112 _reserve1,) = getReserves();\n', '        // gas savings\n', '        uint balance0 = IERC20(token0).balanceOf(address(this));\n', '        uint balance1 = IERC20(token1).balanceOf(address(this));\n', '        uint amount0 = balance0.sub(_reserve0);\n', '        uint amount1 = balance1.sub(_reserve1);\n', '\n', '       \n', '        bool feeOn = _mintFee(_reserve0, _reserve1);\n', '        uint _totalSupply = totalSupply;\n', '        // gas savings, must be defined here since totalSupply can update in _mintFee\n', '        if (_totalSupply == 0) {\n', '            address migrator = ICCFactory(factory).migrator();\n', '            if (msg.sender == migrator) {\n', '                liquidity = IMigrator(migrator).desiredLiquidity();\n', '                require(liquidity > 0 && liquidity != uint256(-1), "CCSwap: Bad desired liquidity");\n', '            } else {\n', '                require(migrator == address(0), "CCSwap: Must not have migrator");\n', '                liquidity = SafeMath.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\n', '                _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\n', '            }\n', '        } else {\n', '            liquidity = SafeMath.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\n', '        }\n', "        require(liquidity > 0, 'CCSwap: INSUFFICIENT_LIQUIDITY_MINTED');\n", '        _mint(to, liquidity);\n', '\n', '        _update(balance0, balance1, _reserve0, _reserve1);\n', '        if (feeOn) kLast = uint(reserve0).mul(reserve1);\n', '        // reserve0 and reserve1 are up-to-date\n', '        emit Mint(msg.sender, amount0, amount1);\n', '    }\n', '\n', '    // this low-level function should be called from a contract which performs important safety checks\n', '    function burn(address to) external lock returns (uint amount0, uint amount1) {\n', '        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\n', '        address _token0 = token0; // gas savings\n', '        address _token1 = token1; // gas savings\n', '        uint balance0 = IERC20(_token0).balanceOf(address(this));\n', '        uint balance1 = IERC20(_token1).balanceOf(address(this));\n', '        uint liquidity = balanceOf[address(this)];\n', '\n', '        bool feeOn = _mintFee(_reserve0, _reserve1);\n', '        uint _totalSupply = totalSupply;\n', '        // gas savings, must be defined here since totalSupply can update in _mintFee\n', '        amount0 = liquidity.mul(balance0) / _totalSupply;\n', '        // using balances ensures pro-rata distribution\n', '        amount1 = liquidity.mul(balance1) / _totalSupply;\n', '        // using balances ensures pro-rata distribution\n', "        require(amount0 > 0 && amount1 > 0, 'CCSwap: INSUFFICIENT_LIQUIDITY_BURNED');\n", '        _burn(address(this), liquidity);\n', '        _safeTransfer(_token0, to, amount0);\n', '        _safeTransfer(_token1, to, amount1);\n', '        balance0 = IERC20(_token0).balanceOf(address(this));\n', '        balance1 = IERC20(_token1).balanceOf(address(this));\n', '\n', '        _update(balance0, balance1, _reserve0, _reserve1);\n', '        if (feeOn) kLast = uint(reserve0).mul(reserve1);\n', '        // reserve0 and reserve1 are up-to-date\n', '        emit Burn(msg.sender, amount0, amount1, to);\n', '    }\n', '\n', '    // this low-level function should be called from a contract which performs important safety checks\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock {\n', "        require(amount0Out > 0 || amount1Out > 0, 'CCSwap: INSUFFICIENT_OUTPUT_AMOUNT');\n", '        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\n', "        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'CCSwap: INSUFFICIENT_LIQUIDITY');\n", '\n', '        uint balance0;\n', '        uint balance1;\n', '        {// scope for _token{0,1}, avoids stack too deep errors\n', '            address _token0 = token0;\n', '            address _token1 = token1;\n', "            require(to != _token0 && to != _token1, 'CCSwap: INVALID_TO');\n", '            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out);\n', '            // optimistically transfer tokens\n', '            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out);\n', '            // optimistically transfer tokens\n', '            if (data.length > 0) IUniswapV2Callee(to).uniswapV2Call(msg.sender, amount0Out, amount1Out, data);\n', '            balance0 = IERC20(_token0).balanceOf(address(this));\n', '            balance1 = IERC20(_token1).balanceOf(address(this));\n', '        }\n', '        uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\n', '        uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\n', "        require(amount0In > 0 || amount1In > 0, 'CCSwap: INSUFFICIENT_INPUT_AMOUNT');\n", '        {// scope for reserve{0,1}Adjusted, avoids stack too deep errors\n', '            uint balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));\n', '            uint balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));\n', "            require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(1000 ** 2), 'CCSwap: K');\n", '        }\n', '\n', '        _update(balance0, balance1, _reserve0, _reserve1);\n', '        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\n', '    }\n', '\n', '    // force balances to match reserves\n', '    function skim(address to) external lock {\n', '        address _token0 = token0;// gas savings\n', '        address _token1 = token1;// gas savings\n', '        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));\n', '        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));\n', '    }\n', '\n', '    // force reserves to match balances\n', '    function sync() external lock {\n', '        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\n', '    }\n', '\n', '    function price(address token, uint256 baseDecimal) public view returns (uint256) {\n', '        if ((token0 != token && token1 != token) || 0 == reserve0 || 0 == reserve1) {\n', '            return 0;\n', '        }   \n', '        if (token0 == token) {\n', '            return uint256(reserve1).mul(baseDecimal).div(uint256(reserve0));\n', '        } else {\n', '            return uint256(reserve0).mul(baseDecimal).div(uint256(reserve1));\n', '        }\n', '    }\n', '\n', '}\n', '\n', 'library UQ112x112 {\n', '    uint224 constant Q112 = 2 ** 112;\n', '\n', '    // encode a uint112 as a UQ112x112\n', '    function encode(uint112 y) internal pure returns (uint224 z) {\n', '        z = uint224(y) * Q112;\n', '        // never overflows\n', '    }\n', '\n', '    // divide a UQ112x112 by a uint112, returning a UQ112x112\n', '    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\n', '        z = x / uint224(y);\n', '    }\n', '}']