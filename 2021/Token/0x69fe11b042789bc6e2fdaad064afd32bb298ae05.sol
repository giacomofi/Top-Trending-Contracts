['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-16\n', '*/\n', '\n', '// File: openzeppelin-contracts/token/ERC20/IERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a + b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a * b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. \n", '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-contracts/access/Ownable.sol\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/TheRedOrder.sol\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', '\n', '\n', '\n', 'contract TheRedOrder is Context, Ownable, IERC20 {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    // holds the balances of everyone who owes tokens of this contract\n', '    mapping (address => uint256) private _balances;\n', '    // holds the amount authorized by address\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    string  private _name               = "TheRedOrder";\n', '    string  private _symbol             = "ORDR";\n', '\n', '    // 18 decimal contract\n', '    uint8   private _decimals           = 18;\n', '    // 1 trillion * decimal count\n', '    uint256 private _totalSupply        = 500000 * 10**6 * 10**18;\n', '\n', '    address private _marketingWallet    = 0xcdcacbAc38785E462dAe096b55a86A05419A060a;\n', '\n', '    // send total supply to the address that has created the contract\n', '    constructor () {\n', '        _balances[msg.sender] = _totalSupply;\n', '        emit Transfer(address(0), msg.sender, _totalSupply);\n', '    }\n', '\n', '    // return name of the token\n', '    function name() public view virtual returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    // return symbol of the token\n', '    function symbol() public view virtual returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    // return decimals of token\n', '    function decimals() public view virtual returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    // return amount in supply\n', '    function totalSupply() public view virtual override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    // return the balance of tokens from the address passed in\n', '    function balanceOf(address account) public view virtual override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    // transfers amount from the person calling the function to \n', '    // the address called [@param 1] in the amount specified [@param 2]\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    // returns the amount authorized by one account [@param 1] to allow account 2 [@aram2] to spend \n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    // approves the person who calles this function to allow another address [@param1] to spend the \n', '    // amount specified [@param2]\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    // transferes from account 1 [@param1] to account 2 [@param 2] the designated amount [@param 3]\n', '    // requires the person calling the function has at least the amount of the transfer authorized for them to send\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '\n', '        uint256 currentAllowance = _allowances[sender][_msgSender()];\n', '        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");\n', '        \n', '        uint256 newAllowance = currentAllowance.sub(amount);\n', '        _approve(sender, _msgSender(), newAllowance);\n', '\n', '        return true;\n', '    }\n', '\n', '    // the person calling this function INCREASES the allowance of the address called [@param1] can spend\n', '    // on their belave by the amount send [@param2]\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        uint256 newAllowance = _allowances[_msgSender()][spender].add(addedValue);\n', '        _approve(_msgSender(), spender, newAllowance);\n', '        return true;\n', '    }\n', '\n', '    // the person calling this function DECREASED the allowance of the address called [@param1] can spend\n', '    // on their belave by the amount send [@param2]\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        uint256 currentAllowance = _allowances[_msgSender()][spender];\n', '        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");\n', '\n', '        uint256 newAllowance = currentAllowance.sub(subtractedValue);\n', '        _approve(_msgSender(), spender, newAllowance);\n', '\n', '        return true;\n', '    }\n', '\n', '    // performs a transfer from address 1 [@param2] to address 2 [@param 2] in the amount\n', '    // that is specified [@param 3]. Fees in the total amount of 12% are deducted. 2% goes\n', '    // into a marketing walled, 2% is removed from total supply, 8% goes to liquidity wallet\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender    != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        // amount to send to the marketing wallet (2%)\n', '        uint256 marketingFee  = amount.mul(2).div(100);\n', '        // amount to burn of the total supply (2%)\n', '        uint256 burnFee       = amount.mul(2).div(100);\n', '        // amount to send into pool (2%)\n', '        uint256 liquidityFee  = amount.mul(2).div(100);\n', '\n', '        // declare the amount the sender has in their account\n', '        uint256 senderBalance = _balances[sender];\n', '\n', '        // declare amount that actually gets transfered after burn, liquidity, and marketing fees\n', '        uint256 totalTransfer   = amount.sub(marketingFee);\n', '        totalTransfer           = totalTransfer.sub(burnFee);\n', '        totalTransfer           = totalTransfer.sub(liquidityFee);\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        // require that the balaner of the person this transfer is coming from has the funds\n', '        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");\n', '\n', "        // reduce the full amount from the sender's balance\n", '        _balances[sender]           -=  amount;\n', '        // add the after fees amount to the recipeint\n', '        _balances[recipient]        += totalTransfer;\n', '        // add the balance to the marketing wallet\n', '        _balances[_marketingWallet] += marketingFee;\n', '        // add the burn balance to address 0\n', '        _balances[address(0)]       += burnFee;\n', '        // send taxed amount to the contract\n', '        _balances[owner()]    += liquidityFee;\n', '\n', '        // subtract burn fee from total supply\n', '        _totalSupply = _totalSupply.sub(burnFee);\n', '\n', '        // transfer the after fee amount to the recipient\n', '        emit Transfer(sender, recipient, totalTransfer);\n', '        // transfer the marketing percent to the marketing wallet\n', '        emit Transfer(sender, _marketingWallet, marketingFee);\n', '        // transfer the burn fee to the 0 address\n', '        emit Transfer(sender, address(0), burnFee);\n', '        // send the tax amount to the liquidity wallet\n', '        emit Transfer(sender, owner(), liquidityFee);\n', '\n', '    }\n', '\n', '    // no need to check for balance here, _transfer function checks to see if the amount\n', '    // being transfered is >= to the balance of the person sending the tokens\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}']