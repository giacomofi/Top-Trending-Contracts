['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-14\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-02\n', '*/\n', '\n', '/// BasicTokenAdapters.sol\n', '\n', '// Copyright (C) 2018 Rain <[email\xa0protected]>\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity 0.6.7;\n', '\n', 'abstract contract CollateralLike {\n', '    function decimals() virtual public view returns (uint256);\n', '    function transfer(address,uint256) virtual public returns (bool);\n', '    function transferFrom(address,address,uint256) virtual public returns (bool);\n', '}\n', '\n', 'abstract contract DSTokenLike {\n', '    function mint(address,uint256) virtual external;\n', '    function burn(address,uint256) virtual external;\n', '}\n', '\n', 'abstract contract SAFEEngineLike {\n', '    function modifyCollateralBalance(bytes32,address,int256) virtual external;\n', '    function transferInternalCoins(address,address,uint256) virtual external;\n', '}\n', '\n', 'contract CoinJoin {\n', '    // --- Auth ---\n', '    mapping (address => uint256) public authorizedAccounts;\n', '    /**\n', '     * @notice Add auth to an account\n', '     * @param account Account to add auth to\n', '     */\n', '    function addAuthorization(address account) external isAuthorized {\n', '        authorizedAccounts[account] = 1;\n', '        emit AddAuthorization(account);\n', '    }\n', '    /**\n', '     * @notice Remove auth from an account\n', '     * @param account Account to remove auth from\n', '     */\n', '    function removeAuthorization(address account) external isAuthorized {\n', '        authorizedAccounts[account] = 0;\n', '        emit RemoveAuthorization(account);\n', '    }\n', '    /**\n', '    * @notice Checks whether msg.sender can call an authed function\n', '    **/\n', '    modifier isAuthorized {\n', '        require(authorizedAccounts[msg.sender] == 1, "CoinJoin/account-not-authorized");\n', '        _;\n', '    }\n', '\n', '    // SAFE database\n', '    SAFEEngineLike public safeEngine;\n', "    // Coin created by the system; this is the external, ERC-20 representation, not the internal 'coinBalance'\n", '    DSTokenLike    public systemCoin;\n', '    // Whether this contract is enabled or not\n', '    uint256        public contractEnabled;\n', '    // Number of decimals the system coin has\n', '    uint256        public decimals;\n', '\n', '    // --- Events ---\n', '    event AddAuthorization(address account);\n', '    event RemoveAuthorization(address account);\n', '    event DisableContract();\n', '    event Join(address sender, address account, uint256 wad);\n', '    event Exit(address sender, address account, uint256 wad);\n', '\n', '    constructor(address safeEngine_, address systemCoin_) public {\n', '        authorizedAccounts[msg.sender] = 1;\n', '        contractEnabled                = 1;\n', '        safeEngine                     = SAFEEngineLike(safeEngine_);\n', '        systemCoin                     = DSTokenLike(systemCoin_);\n', '        decimals                       = 18;\n', '        emit AddAuthorization(msg.sender);\n', '    }\n', '    /**\n', '     * @notice Disable this contract\n', '     */\n', '    function disableContract() external isAuthorized {\n', '        contractEnabled = 0;\n', '        emit DisableContract();\n', '    }\n', '    uint256 constant RAY = 10 ** 27;\n', '    function multiply(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require(y == 0 || (z = x * y) / y == x, "CoinJoin/mul-overflow");\n', '    }\n', '    /**\n', '    * @notice Join system coins in the system\n', '    * @dev Exited coins have 18 decimals but inside the system they have 45 (rad) decimals.\n', '           When we join, the amount (wad) is multiplied by 10**27 (ray)\n', '    * @param account Account that will receive the joined coins\n', '    * @param wad Amount of external coins to join (18 decimal number)\n', '    **/\n', '    function join(address account, uint256 wad) external {\n', '        safeEngine.transferInternalCoins(address(this), account, multiply(RAY, wad));\n', '        systemCoin.burn(msg.sender, wad);\n', '        emit Join(msg.sender, account, wad);\n', '    }\n', '    /**\n', "    * @notice Exit system coins from the system and inside 'Coin.sol'\n", '    * @dev Inside the system, coins have 45 (rad) decimals but outside they have 18 decimals (wad).\n', '           When we exit, we specify a wad amount of coins and then the contract automatically multiplies\n', '           wad by 10**27 to move the correct 45 decimal coin amount to this adapter\n', '    * @param account Account that will receive the exited coins\n', '    * @param wad Amount of internal coins to join (18 decimal number that will be multiplied by ray)\n', '    **/\n', '    function exit(address account, uint256 wad) external {\n', '        require(contractEnabled == 1, "CoinJoin/contract-not-enabled");\n', '        safeEngine.transferInternalCoins(msg.sender, address(this), multiply(RAY, wad));\n', '        systemCoin.mint(account, wad);\n', '        emit Exit(msg.sender, account, wad);\n', '    }\n', '}']