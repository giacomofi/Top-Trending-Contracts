['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-23\n', '*/\n', '\n', 'pragma solidity ^0.5.13;\n', '\n', '// ----------------------------------------------------------------------------\n', '// \n', '// Symbol      : MBT\n', '// Deployed to : Mainnet\n', '// Name        : Mbali Token\n', '//\n', '// Enjoy.\n', '//\n', '// Russel Chitambira.\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '  function add(uint a, uint b) internal pure returns (uint c) {\n', '    c = a + b;\n', '    require(c >= a);\n', '  }\n', '  function sub(uint a, uint b) internal pure returns (uint c) {\n', '    require(b <= a);\n', '    c = a - b;\n', '  }\n', '  function mul(uint a, uint b) internal pure returns (uint c) {\n', '    c = a * b;\n', '    require(a == 0 || c / a == b);\n', '  }\n', '  function div(uint a, uint b) internal pure returns (uint c) {\n', '    require(b > 0);\n', '    c = a / b;\n', '  }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '  function totalSupply() public view returns (uint);\n', '  function balanceOf(address tokenOwner) public view returns (uint balance);\n', '  function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n', '  function transfer(address to, uint tokens) public returns (bool success);\n', '  function approve(address spender, uint tokens) public returns (bool success);\n', '  function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint tokens);\n', '  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '//\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '  function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '\n', '  address payable public owner;\n', '  address payable public newOwner;\n', '\n', '  event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address payable _newOwner) public onlyOwner {\n', '    newOwner = _newOwner;\n', '  }\n', '  function acceptOwnership() public {\n', '    require(msg.sender == newOwner);\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '    newOwner = address(0);\n', '  }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and a\n', '// MYT supply\n', '// ----------------------------------------------------------------------------\n', 'contract MbaliToken is ERC20Interface, Owned {\n', '\n', '  using SafeMath for uint;\n', '\n', '  string public symbol;\n', '  string public  name;\n', '  uint8 public decimals;\n', '  uint _totalSupply;\n', '\n', '  // pre-sale bonus\n', '  uint public startDate;\n', '  uint public bonusEnds;\n', '  uint public endDate;\n', '\n', '  mapping(address => uint) balances;\n', '  mapping(address => mapping(address => uint)) allowed;\n', '\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Constructor\n', '  // ------------------------------------------------------------------------\n', '  constructor() public {\n', '    symbol = "MBT";\n', '    name = "Mbali Token";\n', '    decimals = 18;\n', '    _totalSupply = 100000000000 * 10**uint(decimals);\n', '    balances[owner] = _totalSupply;\n', '    //bonusEnds = now + 8 weeks;\n', '    endDate = now + 28 weeks;\n', '    emit Transfer(address(0), owner, _totalSupply);\n', '  }\n', '\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Total supply\n', '  // ------------------------------------------------------------------------\n', '  function totalSupply() public view returns (uint) {\n', '    return _totalSupply.sub(balances[address(0)]);\n', '  }\n', '\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Get the token balance for account `tokenOwner`\n', '  // ------------------------------------------------------------------------\n', '  function balanceOf(address tokenOwner) public view returns (uint balance) {\n', '    return balances[tokenOwner];\n', '  }\n', '\n', '\n', '  // ------------------------------------------------------------------------\n', "  // Transfer the balance from token owner's account to `to` account\n", "  // - Owner's account must have sufficient balance to transfer\n", '  // - 0 value transfers are allowed\n', '  // ------------------------------------------------------------------------\n', '  function transfer(address to, uint tokens) public returns (bool success) {\n', '    balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '    balances[to] = balances[to].add(tokens);\n', '    emit Transfer(msg.sender, to, tokens);\n', '    return true;\n', '  }\n', '\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "  // from the token owner's account\n", '  //\n', '  // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '  // recommends that there are no checks for the approval double-spend attack\n', '  // as this should be implemented in user interfaces\n', '  // ------------------------------------------------------------------------\n', '  function approve(address spender, uint tokens) public returns (bool success) {\n', '    allowed[msg.sender][spender] = tokens;\n', '    emit Approval(msg.sender, spender, tokens);\n', '    return true;\n', '  }\n', '\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Transfer `tokens` from the `from` account to the `to` account\n', '  //\n', '  // The calling account must already have sufficient tokens approve(...)-d\n', '  // for spending from the `from` account and\n', '  // - From account must have sufficient balance to transfer\n', '  // - Spender must have sufficient allowance to transfer\n', '  // - 0 value transfers are allowed\n', '  // ------------------------------------------------------------------------\n', '  function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '    balances[from] = balances[from].sub(tokens);\n', '    allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '    balances[to] = balances[to].add(tokens);\n', '    emit Transfer(from, to, tokens);\n', '    return true;\n', '  }\n', '\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Returns the amount of tokens approved by the owner that can be\n', "  // transferred to the spender's account\n", '  // ------------------------------------------------------------------------\n', '  function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n', '    return allowed[tokenOwner][spender];\n', '  }\n', '\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "  // from the token owner's account. The `spender` contract function\n", '  // `receiveApproval(...)` is then executed\n', '  // ------------------------------------------------------------------------\n', '  function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\n', '    allowed[msg.sender][spender] = tokens;\n', '    emit Approval(msg.sender, spender, tokens);\n', '    ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n', '    return true;\n', '  }\n', '\n', '  // ------------------------------------------------------------------------\n', '  // TODO: 1,000 MBT Tokens per 1 ETH - write what is the amount of your tokens you will be giving away for ETH.\n', '  // ------------------------------------------------------------------------\n', '  function () external payable {\n', '    require(now >= startDate && now <= endDate);\n', '    uint tokens;\n', '    if (now <= bonusEnds) {\n', '      tokens = msg.value * 1000; // TODO: define how many people will get within the BONUS.\n', '    } else {\n', '      tokens = msg.value * 1000; // TODO: define how many people will get without the BONUS.\n', '    }\n', '    balances[msg.sender] = SafeMath.add(balances[msg.sender], tokens);\n', '    _totalSupply = SafeMath.add(_totalSupply, tokens);\n', '    // sent to investor\n', '    emit Transfer(address(0), msg.sender, tokens);\n', '    // sent ETH to owner\n', '    owner.transfer(msg.value);\n', '  }\n', '\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Owner can transfer out any accidentally sent ERC20 tokens\n', '  // ------------------------------------------------------------------------\n', '  function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '    return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '  }\n', '}']