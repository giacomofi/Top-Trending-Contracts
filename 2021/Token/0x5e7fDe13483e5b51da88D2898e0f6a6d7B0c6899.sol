['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-02\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.6;\n', '\n', 'contract ChizDispenser {\n', '    struct Claim {\n', '        bool claimed;\n', '        uint256 ratId;\n', '    }\n', '\n', '    mapping(uint256 => Claim) public existingClaims;\n', '\n', '    ERC721 ratContract = ERC721(0xd21a23606D2746f086f6528Cd6873bAD3307b903);\n', '    ERC20 chizContract = ERC20(0x5c761c1a21637362374204000e383204d347064C);\n', '\n', '    bool paused = false;\n', '    address deployer;\n', '    uint256 amount = 10000 * 1 ether;\n', '\n', '    event Dispense(uint256 amount, uint256 ratId);\n', '\n', '    constructor() {\n', '        deployer = msg.sender;\n', '    }\n', '\n', '    modifier onlyDeployer() {\n', '        require(msg.sender == deployer);\n', '        _;\n', '    }\n', '\n', '    modifier pauseable() {\n', '        require(paused == false, "contract is paused");\n', '        _;\n', '    }\n', '\n', '    function pause() public onlyDeployer {\n', '        paused = true;\n', '    }\n', '\n', '    function unpause() public onlyDeployer {\n', '        paused = false;\n', '    }\n', '\n', '    function setAmount(uint256 newAmount) public onlyDeployer pauseable {\n', '        amount = newAmount;\n', '    }\n', '\n', '    function withdraw(uint256 withdrawAmount) public onlyDeployer pauseable {\n', '        chizContract.transfer(msg.sender, withdrawAmount);\n', '    }\n', '    \n', '    function claimChiz(uint256 ratId) public pauseable {\n', '        Claim memory claim = existingClaims[ratId];\n', '        require(\n', '            claim.claimed == false,\n', '            "tokens have already been claimed for this rat"\n', '        );\n', '\n', '        address ratOwner = ratContract.ownerOf(ratId);\n', '        require(msg.sender == ratOwner, "caller is not owner of this rat");\n', '\n', '        existingClaims[ratId] = Claim(true, ratId);\n', '        chizContract.transfer(msg.sender, amount);\n', '\n', '        emit Dispense(amount, ratId);\n', '    }\n', '    \n', '    function multiClaimChiz(uint256[] memory ratIds) public pauseable {\n', '        for(uint i = 0; i < ratIds.length; i++) {\n', '            claimChiz(ratIds[i]);\n', '        }\n', '    }\n', '}\n', '\n', 'abstract contract ERC721 {\n', '    function ownerOf(uint256 id) public virtual returns (address);\n', '}\n', '\n', 'abstract contract ERC20 {\n', '    function transfer(address to, uint256 value) public virtual;\n', '}']