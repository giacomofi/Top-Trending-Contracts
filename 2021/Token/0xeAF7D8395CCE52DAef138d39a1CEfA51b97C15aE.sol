['pragma solidity 0.5.16;\n', '\n', 'import { IBEP20 } from "./IBEP20.sol";\n', 'import { Context } from "./Context.sol";\n', 'import { SafeMath } from "./SafeMath.sol";\n', 'import { Ownable } from "./Ownable.sol";\n', 'import { LGEWhitelisted } from "./LGEWhitelisted.sol";\n', '\n', 'contract TeraBlockToken is Context, IBEP20, Ownable, LGEWhitelisted {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '    uint8 private _decimals;\n', '    string private _symbol;\n', '    string private _name;\n', '\n', '    constructor() public {\n', '        _name = "TeraBlock Token";\n', '        _symbol = "TBC";\n', '        _decimals = 18;\n', '        _totalSupply = 400000000 * 10 ** 18;\n', '        _balances[_msgSender()] = _totalSupply;\n', '\n', '        emit Transfer(address(0), _msgSender(), _totalSupply);\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the bep token owner.\n', '    */\n', '    function getOwner() external view returns (address) {\n', '        return owner();\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the token decimals.\n', '    */\n', '    function decimals() external view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the token symbol.\n', '    */\n', '    function symbol() external view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the token name.\n', '    */\n', '    function name() external view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '    * @dev See {BEP20-totalSupply}.\n', '    */\n', '    function totalSupply() external view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '    * @dev See {BEP20-balanceOf}.\n', '    */\n', '    function balanceOf(address account) external view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '    * @dev See {BEP20-transfer}.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `recipient` cannot be the zero address.\n', '    * - the caller must have a balance of at least `amount`.\n', '    */\n', '    function transfer(address recipient, uint256 amount) external returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev See {BEP20-allowance}.\n', '    */\n', '    function allowance(address owner, address spender) external view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '    * @dev See {BEP20-approve}.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `spender` cannot be the zero address.\n', '    */\n', '    function approve(address spender, uint256 amount) external returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev See {BEP20-transferFrom}.\n', '    *\n', '    * Emits an {Approval} event indicating the updated allowance. This is not\n', '    * required by the EIP. See the note at the beginning of {BEP20};\n', '    *\n', '    * Requirements:\n', '    * - `sender` and `recipient` cannot be the zero address.\n', '    * - `sender` must have a balance of at least `amount`.\n', "    * - the caller must have allowance for `sender`'s tokens of at least\n", '    * `amount`.\n', '    */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "BEP20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '    *\n', '    * This is an alternative to {approve} that can be used as a mitigation for\n', '    * problems described in {BEP20-approve}.\n', '    *\n', '    * Emits an {Approval} event indicating the updated allowance.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `spender` cannot be the zero address.\n', '    */\n', '    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '    *\n', '    * This is an alternative to {approve} that can be used as a mitigation for\n', '    * problems described in {BEP20-approve}.\n', '    *\n', '    * Emits an {Approval} event indicating the updated allowance.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `spender` cannot be the zero address.\n', '    * - `spender` must have allowance for the caller of at least\n', '    * `subtractedValue`.\n', '    */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "BEP20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '    *\n', '    * This is internal function is equivalent to {transfer}, and can be used to\n', '    * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '    *\n', '    * Emits a {Transfer} event.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `sender` cannot be the zero address.\n', '    * - `recipient` cannot be the zero address.\n', '    * - `sender` must have a balance of at least `amount`.\n', '    */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        require(sender != address(0), "BEP20: transfer from the zero address");\n', '        require(recipient != address(0), "BEP20: transfer to the zero address");\n', '\n', '        _applyLGEWhitelist(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "BEP20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /**\n', '    * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '    *\n', '    * This is internal function is equivalent to `approve`, and can be used to\n', '    * e.g. set automatic allowances for certain subsystems, etc.\n', '    *\n', '    * Emits an {Approval} event.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `owner` cannot be the zero address.\n', '    * - `spender` cannot be the zero address.\n', '    */\n', '    function _approve(address owner, address spender, uint256 amount) internal {\n', '        require(owner != address(0), "BEP20: approve from the zero address");\n', '        require(spender != address(0), "BEP20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '}']