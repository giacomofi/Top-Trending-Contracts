['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-20\n', '*/\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '// ----------------------------------------------------------------------------\n', "// 'Bull Token' token contract\n", '//\n', '// Deployed to : 0xdFdC8d107C2f6d9ab087f66F563a6397bAB1D2FB\n', '// Symbol      : BLL\n', '// Name        : Bull Token\n', '// Total supply: 50000000000\n', '// Decimals    : 18\n', '//\n', '// (c) by Marco De Dilectis & Federico Lazzarotto 06/2021. (Unlicense)).\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'contract SafeMath {\n', '    // It returns 0,0001 percentual rounded down to previous Integer\n', '    function mulDiv(uint a) internal pure returns (uint c) {\n', '        if(a>=10000000000000000000000){\n', '            return a / 10000;\n', '        }\n', '        else return 0;\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract BTInterface {\n', '    function balanceOf(address tokenOwner) public constant returns (uint256 balance);\n', '    function transfer(address recipient, uint amount) public returns (bool success);\n', '    function approve(address spender, uint amount) public returns (bool success);\n', '    function checkGivenAllowance (address spender) public view returns (uint256);\n', '    function checkReceivedAllowance (address owner) public view returns (uint256);\n', '    function thirdPartTransaction(address spender, address recipient, uint256 amount) public returns (bool);\n', '    function myBlockedToken() public view returns(uint256);\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and assisted\n', '// token transfers\n', '// ----------------------------------------------------------------------------\n', 'contract BullToken is BTInterface, SafeMath {\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint256 public _totalSupply;\n', '    uint256 private _burning;\n', '    mapping(address => uint256) public balances;\n', '    mapping(address => mapping(address => uint256)) public allowed;\n', '    mapping (address => uint256) public _blocked_token;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    constructor() public {\n', '        symbol = "BLL";\n', '        name = "Bull Token";\n', '        decimals = 18;\n', '        _totalSupply = 50000000000000000000000000000;\n', '        balances[0xdFdC8d107C2f6d9ab087f66F563a6397bAB1D2FB] = _totalSupply;\n', '        emit Transfer(address(0), 0xdFdC8d107C2f6d9ab087f66F563a6397bAB1D2FB, _totalSupply);\n', '    }\n', '\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '    \n', '    function _msgSender() internal view returns (address){\n', '        return msg.sender;\n', '    }\n', '    \n', '        function decimals() public constant returns(uint8){\n', '        return decimals;\n', '    }\n', '    \n', '        function myBalance() public view returns(uint256){\n', '        return balances[_msgSender()];\n', '    }\n', '    \n', '        function myAvailableBalance() public view returns(uint256){\n', '        return balances[_msgSender()] - _blocked_token[_msgSender()];\n', '    }\n', '    \n', '        function myBlockedToken() public view returns(uint256){\n', '        return _blocked_token[_msgSender()];\n', '    }\n', '    \n', "    // restituisce la quantità dei token che spender può spendere per conto dell'owner\n", '    function checkGivenAllowance(address spender) public view returns (uint256){\n', '        return allowed[_msgSender()][spender];\n', '    }\n', '\n', "    // restituisce la quantità dei token che spender può spendere per conto dell'owner\n", '    function checkReceivedAllowance(address owner) public view returns (uint256){\n', '        return allowed[owner][_msgSender()];\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account tokenOwner\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from token owner's account to to account\n", "    // - Owner's account must have sufficient balance to transfer\n", '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address recipient, uint amount) public returns (bool success) {\n', '        require(_msgSender() != address(0), "Invalid sender address");\n', '        require(recipient != address(0), "Invalid recipient address");\n', '        require(balances[_msgSender()] >= amount, "Transfer amount exceeds balance");\n', '        require(balances[_msgSender()] - _blocked_token[_msgSender()] >= amount, "You are trying to use suspended token, check your allowances");\n', '        \n', '        \n', '        _burning = (mulDiv(amount));\n', '        require(balances[_msgSender()] >= (amount + _burning), "Transfer amount exceeds balance plus fee");\n', '        require(balances[_msgSender()] - _blocked_token[_msgSender()] >= amount + _burning, "Transfer amount exceeds balance plus fee");\n', '        \n', '        if(_burning != 0){\n', '            _burn(_msgSender(), _burning); // fai controlli, leva i token da bruciare dal wallet del sender e li manda a adress(0)\n', '        }\n', '        balances[_msgSender()] -= amount;\n', '        balances[recipient] += amount;\n', '        \n', '        emit Transfer(msg.sender, recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for spender to transferFrom(...) tokens\n', "    // from the token owner's account\n", '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces \n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint amount) public returns (bool success) {\n', '        require(balances[_msgSender()] >= amount, "You are not allowed to authorize more than your balance");\n', '        require(_msgSender() != spender, "You\'re already allowed to use your token");\n', '        require(_msgSender() != address(0), "Approve from the zero address");\n', '        require(spender != address(0), "Approve from the zero address");\n', '        _blocked_token[_msgSender()] = amount;\n', '        \n', '        allowed[_msgSender()][spender] = amount;\n', '        emit Approval(_msgSender(), spender, amount);\n', '        \n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer tokens from the from account to the to account\n', '    // \n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the from account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferThirdPart(address sender, address recipient, uint amount) internal returns (bool success) {\n', '        require(sender != address(0), "Invalid sender address");\n', '        require(recipient != address(0), "Invalid recipient address");\n', '        require(balances[sender] >= amount, "Transfer amount exceeds balance");\n', '        require(_blocked_token[sender] >= amount, "You are trying to use suspended token, check your allowances");\n', '\n', '        _burning = (mulDiv(amount));\n', '        require(balances[sender] >= (amount + _burning), "Transfer amount exceeds balance plus fee");\n', '        require(_blocked_token[sender] >= amount + _burning, "Transfer amount exceeds balance plus fee");\n', '\n', '        if (_burning != 0){\n', '            _burnThirdPart(sender, _burning); // fai controlli, leva i token da bruciare dal wallet del sender e li manda a adress(0)\n', '        }\n', '        balances[sender] -= amount;\n', '        balances[recipient] += amount;\n', '        _blocked_token[sender] -= (amount + _burning);\n', '\n', '        emit Transfer(sender, recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) internal constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '\n', '    // It burns token decreasing totalSupply\n', '    function _burn(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        uint256 accountBalance = balances[account];\n', '        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");\n', '        balances[account] = accountBalance - amount;\n', '        _totalSupply -= amount;\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '    \n', '        // It burns token decreasing totalSupply\n', '    function _burnThirdPart(address account, uint256 burning) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        require(balances[account] >= burning, "ERC20: burn amount exceeds balance");\n', '        balances[account] -= burning;\n', '        _totalSupply -= burning;\n', '        emit Transfer(account, address(0), burning);\n', '    }\n', '    \n', '        // lo spender che è stato abilitato a spendere i token può trasferire i miei token dal mio conto ad un altro conto\n', '    function thirdPartTransaction(address sender, address recipient, uint256 amount) public returns (bool){\n', '        require(amount <= allowed[sender][_msgSender()], "Amount exeeds allowance");\n', '        \n', '        transferThirdPart(sender, recipient, amount);\n', '        _burning = (mulDiv(amount));\n', '        allowed[sender][_msgSender()]-= (amount + _burning);\n', '        emit Approval(sender, _msgSender(), amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    // It increase allowance of "addedValue"\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns(bool){\n', '        require(balances[_msgSender()] >= addedValue, "It\'s not allowed to authorize more than your balance");\n', '        require(allowed[_msgSender()][spender] + addedValue <= balances[_msgSender()], "It\'s not allowed to authorize more than own balance");\n', '        allowed[_msgSender()][spender] += addedValue;\n', '        _approve(_msgSender(), spender, allowed[_msgSender()][spender]);\n', '        return true;\n', '    }\n', '\n', '    // It decrease allowance of "subtractedValue"\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns(bool){\n', '        require(allowed[_msgSender()][spender] >= subtractedValue, "Decreased allowance below zero");\n', '        allowed[_msgSender()][spender] -= subtractedValue;\n', '        \n', '        _approve(_msgSender(), spender, allowed[_msgSender()][spender]);\n', '        return true;\n', '    }\n', '\n', '\n', '    // Private hidden function, to approve transfers and blocked token\n', '    function _approve(address owner, address spender, uint256 amount) internal {\n', '        require(owner != address(0), "Approve from the zero address");\n', '        require(spender != address(0), "Approve from the zero address");\n', '        _blocked_token[_msgSender()] = amount;\n', '\n', '        allowed[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '        \n', '    }\n', '}']