['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-01\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity >=0.6.0 <=0.8.0;\n', '\n', 'interface IERC20 {\n', '        function totalSupply() external view returns (uint256);\n', '        function balanceOf(address account) external view returns (uint256);\n', '        function transfer(address recipient, uint256 amount) external returns (bool);\n', '        function allowance(address owner, address spender) external view returns (uint256);\n', '        function approve(address spender, uint256 amount) external returns (bool);\n', '        function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '        event Approval(address indexed owner, address indexed spender, uint256 value);\n', '        event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract Pausable {\n', '        event Paused();\n', '        event Unpaused();\n', '        bool private _paused;\n', '        constructor ()                                  { _paused = false; }\n', '        function paused() public view returns (bool)    { return _paused; }\n', '        modifier whenNotPaused()                        { require(!_paused, "Pausable: paused"); _; }\n', '        modifier whenPaused()                           { require(_paused, "Pausable: not paused"); _; }\n', '        function _pause() internal virtual whenNotPaused{ _paused = true; emit Paused(); }\n', '        function _unpause() internal virtual whenPaused { _paused = false; emit Unpaused(); }\n', '}\n', '\n', 'contract AgorasToken is IERC20, Pausable {\n', '        mapping (address => uint256) private _balances;\n', '        mapping (address => mapping (address => uint256)) private _allowances;\n', '        mapping (address => bool) private _locked;\n', '        uint256 private _totalSupply;\n', '        string private _name;\n', '        string private _symbol;\n', '        uint8 private _decimals;\n', '        address private _owner;\n', '\n', '        constructor() {\n', "                _name = 'Agoras Token';\n", "                _symbol = 'AGRS';\n", '                _decimals = 8;\n', '                _totalSupply = 42000000 * (10**_decimals);\n', '                _balances[msg.sender] = _totalSupply;\n', '                _owner = msg.sender;\n', '        }\n', '\n', '        function name() public view returns (string memory)     { return _name; }\n', '        function symbol() public view returns (string memory) { return _symbol; }\n', '        function decimals() public view returns (uint8) { return _decimals; }\n', '        function totalSupply() public view override returns (uint256) { return _totalSupply; }\n', '        function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\n', '        function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '                require(!_locked[msg.sender], "AgorasToken locked sender");\n', '                _transfer(msg.sender, recipient, amount);\n', '                return true;\n', '        }\n', '        function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '                return _allowances[owner][spender];\n', '        }\n', '        function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '                _approve(msg.sender, spender, amount);\n', '                return true;\n', '        }\n', '\n', '        function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '                require(!_locked[sender], "AgorasToken locked from sender");\n', '                require(_allowances[sender][msg.sender] >= amount, "AgorasToken transfer amount exceeds allowance");\n', '                _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);\n', '                _transfer(sender, recipient, amount);\n', '                return true;\n', '        }\n', '\n', '        function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '                require(owner != address(0), "AgorasToken approve from the zero address");\n', '                require(spender != address(0), "AgorasToken approve to the zero address");\n', '                _allowances[owner][spender] = amount;\n', '                emit Approval(owner, spender, amount);\n', '        }\n', '\n', '        function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '                //_beforeTokenTransfer();\n', '                require(paused() == false, "AgorasToken is Paused");\n', '                require(sender != address(0), "AgorasToken transfer from the zero address");\n', '                require(recipient != address(0), "AgorasToken transfer to the zero address");\n', '                require(_balances[sender] >= amount, "AgorasToken transfer amount exceeds balance");\n', '                require(_balances[recipient] + amount >= _balances[recipient], "AgorasToken addition overflow");\n', '\n', '                _balances[sender] -= amount;\n', '                _balances[recipient] += amount;\n', '                emit Transfer(sender, recipient, amount);\n', '        }\n', '\n', '        function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '                uint256 c = _allowances[msg.sender][spender] + addedValue;\n', '                require(c >= _allowances[msg.sender][spender], "AgorasToken addition overflow");\n', '                _approve(msg.sender, spender, c);\n', '                return true;\n', '        }\n', '\n', '        function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '                require(_allowances[msg.sender][spender] >= subtractedValue, "AgorasToken decreased allowance below zero");\n', '                _approve(msg.sender, spender, _allowances[msg.sender][spender] - subtractedValue);\n', '                return true;\n', '        }\n', '\n', '        function _beforeTokenTransfer() internal virtual { }\n', '\n', '        function pause()  public virtual returns (bool) {\n', '                require(msg.sender == _owner, "AgorasToken: pause request from non owner");\n', '                _pause();\n', '                return true;\n', '        }\n', '\n', '        function unpause() public virtual returns (bool) {\n', '                require(msg.sender == _owner, "AgorasToken: unpause request from non owner");\n', '                _unpause();\n', '                return true;\n', '        }\n', '\n', '        event Mint(uint256 amount);\n', '\n', '        function mint(uint256 amount) public virtual returns (bool) {\n', '                require(paused()==false, "AgorasToken is Paused");\n', '                require(msg.sender == _owner, "AgorasToken: mint from non owner ");\n', '                require(_totalSupply + amount >= _totalSupply, "AgorasToken addition overflow");\n', '                require(_balances[_owner] + amount >= amount, "AgorasToken addition overflow");\n', '                _totalSupply += amount;\n', '                _balances[_owner] += amount;\n', '                emit Mint(amount);\n', '                return true;\n', '        }\n', '\n', '        function updateNameSymbol(string calldata newname, string calldata newsymbol) public virtual returns (bool) {\n', '                require(paused()==false, "AgorasToken is Paused");\n', '                require(msg.sender == _owner, "AgorasToken: update from non owner");\n', '                require(bytes(newname).length <= 32, "AgorasToken: name too long");\n', '                require(bytes(newname).length > 0, "AgorasToken: empty name");\n', '                require(bytes(newsymbol).length <= 8, "AgorasToken: symbol too long");\n', '                require(bytes(newsymbol).length > 0, "AgorasToken: empty symbol");\n', '                _name = newname;\n', '                _symbol = newsymbol;\n', '                return true;\n', '        }\n', '\n', '        function isLocked(address addr) public virtual returns (bool) {\n', '                return _locked[addr];\n', '        }\n', '\n', '        function addLock(address addr) public virtual returns (bool) {\n', '                require(paused()==false, "AgorasToken is Paused");\n', '                require(msg.sender == _owner, "AgorasToken: update from non owner");\n', '                _locked[addr] = true;\n', '                emit Locked(addr);\n', '                return true;\n', '        }\n', '\n', '        function removeLock(address addr) public virtual returns (bool) {\n', '                require(paused()==false, "AgorasToken is Paused");\n', '                require(msg.sender == _owner, "AgorasToken: update from non owner");\n', '                _locked[addr] = false;\n', '                emit Unlocked(addr);\n', '                return true;\n', '        }\n', '\n', '        event Locked(address addr);\n', '        event Unlocked(address addr);\n', '}']