['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-30\n', '*/\n', '\n', '/*\n', '\n', '    Copyright 2020 CrossRollupsERC20.\n', '    SPDX-License-Identifier: Apache-2.0\n', '\n', '*/\n', '\n', 'pragma solidity 0.6.9;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @author CrossRollupsERC20\n', ' *\n', ' * @notice Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "MUL_ERROR");\n', '    \n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "DIVIDING_ERROR");\n', '        return a / b;\n', '    }\n', '\n', '    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 quotient = div(a, b);\n', '        uint256 remainder = a - quotient * b;\n', '        if (remainder > 0) {\n', '            return quotient + 1;\n', '        } else {\n', '            return quotient;\n', '        }\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SUB_ERROR");\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "ADD_ERROR");\n', '        return c;\n', '    }\n', '\n', '    function sqrt(uint256 x) internal pure returns (uint256 y) {\n', '        uint256 z = x / 2 + 1;\n', '        y = x;\n', '        while (z < y) {\n', '            y = z;\n', '            z = (x / z + z) / 2;\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/lib/InitializableOwnable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @author CrossRollupsERC20\n', ' *\n', ' * @notice Ownership related functions\n', ' */\n', 'contract InitializableOwnable {\n', '    address public _OWNER_;\n', '    address public _NEW_OWNER_;\n', '    bool internal _INITIALIZED_;\n', '\n', '    // ============ Events ============\n', '\n', '    event OwnershipTransferPrepared(address indexed previousOwner, address indexed newOwner);\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    // ============ Modifiers ============\n', '\n', '    modifier notInitialized() {\n', '        require(!_INITIALIZED_, "CrossRollupsERC20_INITIALIZED");\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == _OWNER_, "NOT_OWNER");\n', '        _;\n', '    }\n', '\n', '    // ============ Functions ============\n', '\n', '    function initOwner(address newOwner) public notInitialized {\n', '        _INITIALIZED_ = true;\n', '        _OWNER_ = newOwner;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        emit OwnershipTransferPrepared(_OWNER_, newOwner);\n', '        _NEW_OWNER_ = newOwner;\n', '    }\n', '\n', '    function claimOwnership() public {\n', '        require(msg.sender == _NEW_OWNER_, "INVALID_CLAIM");\n', '        emit OwnershipTransferred(_OWNER_, _NEW_OWNER_);\n', '        _OWNER_ = _NEW_OWNER_;\n', '        _NEW_OWNER_ = address(0);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title CrossRollupsERC20 Token\n', ' * @author CrossRollupsERC20\n', ' */\n', 'contract CrossRollupsERC20 is InitializableOwnable {\n', '    using SafeMath for uint256;\n', '\n', '    string public name = "CrossRollupsERC20";\n', '    uint256 public decimals = 18;\n', '    string public symbol = "CRE";\n', '    uint256 public totalSupply;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) internal allowed;\n', '\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 amount);\n', '    event Approval(address indexed owner, address indexed spender, uint256 amount);\n', '    event Mint(address indexed user, uint256 value);\n', '    event Burn(address indexed user, uint256 value);\n', '    event Redeem(address indexed sender, address indexed redeemToEthAccount, uint256 value);\n', '    \n', '    function transfer(address to, uint256 amount) public returns (bool) {\n', '        require(to != address(0), "TO_ADDRESS_IS_EMPTY");\n', '        require(amount <= balances[msg.sender], "BALANCE_NOT_ENOUGH");\n', '    \n', '        balances[msg.sender] = balances[msg.sender].sub(amount);\n', '        balances[to] = balances[to].add(amount);\n', '        emit Transfer(msg.sender, to, amount);\n', '        return true;\n', '    }\n', '    \n', '    function balanceOf(address owner) public view returns (uint256 balance) {\n', '        return balances[owner];\n', '    }\n', '    \n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 amount\n', '    ) public returns (bool) {\n', '        require(to != address(0), "TO_ADDRESS_IS_EMPTY");\n', '        require(amount <= balances[from], "BALANCE_NOT_ENOUGH");\n', '        require(amount <= allowed[from][msg.sender], "ALLOWANCE_NOT_ENOUGH");\n', '    \n', '        balances[from] = balances[from].sub(amount);\n', '        balances[to] = balances[to].add(amount);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(amount);\n', '        emit Transfer(from, to, amount);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address spender, uint256 amount) public returns (bool) {\n', '        allowed[msg.sender][spender] = amount;\n', '        emit Approval(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return allowed[owner][spender];\n', '    }\n', '    \n', '    function redeem(uint256 value, address redeemToEthAccount) external {\n', '        require(balances[msg.sender] >= value, "CrossRollupsERC20Token: NOT_ENOUGH");\n', '        balances[msg.sender] = balances[msg.sender].sub(value);\n', '        totalSupply = totalSupply.sub(value);\n', '        emit Redeem(msg.sender, redeemToEthAccount, value);\n', '    }\n', '    \n', '    function mint(address user, uint256 value) external onlyOwner {\n', '        balances[user] = balances[user].add(value);\n', '        totalSupply = totalSupply.add(value);\n', '        emit Mint(user, value);\n', '        emit Transfer(address(0), user, value);\n', '    }\n', '    \n', '    function burn(address user, uint256 value) external onlyOwner {\n', '        balances[user] = balances[user].sub(value);\n', '        totalSupply = totalSupply.sub(value);\n', '        emit Burn(user, value);\n', '        emit Transfer(user, address(0), value);\n', '    }\n', '}']