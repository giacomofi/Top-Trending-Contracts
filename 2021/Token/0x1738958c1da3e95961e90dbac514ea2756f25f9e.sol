['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-11\n', '*/\n', '\n', '// SPDX-License-Identifier: GPL-3.0\n', 'pragma solidity >=0.7.0 <0.8.0;\n', '\n', 'contract ERC20Interface {\n', '    \n', '    /// @return supply total amount of tokens\n', '    function totalSupply() public virtual view returns (uint256 supply) {}\n', '\n', '    /// @param tokenOwner The address from which the balance will be retrieved\n', '    /// @return balance The balance\n', '    function balanceOf(address tokenOwner) public virtual view returns (uint256 balance) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return success Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) public virtual returns (bool success) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return success Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) public virtual returns (bool success) {}\n', '\n', '    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of wei to be approved for transfer\n', '    /// @return success Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) public virtual returns (bool success) {}\n', '\n', '    /// @param tokenOwner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return remaining Amount of remaining tokens allowed to spent\n', '    function allowance(address tokenOwner, address _spender) public virtual view returns (uint256 remaining) {}\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StandardToken is ERC20Interface {\n', '    uint256 public _totalSupply;\n', '    \n', '    mapping (address => uint256) balances;\n', '    //[tokenOwner][spender] = value\n', '    //tokenOwner allows the spender to spend *value* of tokenOwner money\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    \n', '    function transfer(address _to, uint256 _value) public override returns (bool success) {\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            emit Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public override returns (bool success) {\n', '        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            emit Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address tokenOwner) public view override returns (uint256 balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public override returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address tokenOwner, address _spender) public view override returns (uint256 remaining) {\n', '      return allowed[tokenOwner][_spender];\n', '    }\n', '    \n', '    function totalSupply() public view override returns (uint) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '\n', '}\n', '\n', 'contract MobiToken is StandardToken {\n', '\n', '    \n', '    string public name;\n', '    uint8 public decimals;\n', '    string public symbol;\n', "    string public version = 'H0.1';\n", '\n', '    constructor() {\n', '        _totalSupply = 410000000;                        // Update total supply\n', '        balances[msg.sender] = _totalSupply;          // Give the creator all initial tokens\n', '        name = "Mobi Coin";                                   // Set the name for display purposes\n', '        decimals = 2;                            // Amount of decimals for display purposes\n', '        symbol = "MOBI";                               // Set the symbol for display purposes\n', '    }\n', '    \n', '}']