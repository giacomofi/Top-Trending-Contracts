['// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.6.9;\n', '\n', 'import "ERC20.sol";\n', 'import "Ownable.sol";\n', 'import "Initializable.sol";\n', 'import "IIdeaToken.sol";\n', '\n', '/**\n', ' * @title IdeaToken\n', ' * @author Alexander Schlindwein\n', ' *\n', ' * IdeaTokens are implementations of the ERC20 interface\n', ' * They can be burned and minted by the owner of the contract instance which is the IdeaTokenExchange\n', ' *\n', ' * New instances are created using a MinimalProxy\n', ' */\n', 'contract IdeaToken is IIdeaToken, ERC20, Ownable, Initializable {\n', '\n', '    /**\n', '     * Constructs an IdeaToken with 18 decimals\n', '     * The constructor is called by the IdeaTokenFactory when a new token is listed\n', '     * The owner of the contract is set to msg.sender\n', '     *\n', '     * @param __name The name of the token. IdeaTokenFactory will prefix the market name\n', '     * @param owner The owner of this contract, IdeaTokenExchange\n', '     */\n', '    function initialize(string calldata __name, address owner) external override initializer {\n', '        setOwnerInternal(owner);\n', '        _decimals = 18;\n', '        _symbol = "IDT";\n', '        _name = __name;\n', '    }\n', '\n', '    /**\n', '     * Mints a given amount of tokens to an address\n', '     * May only be called by the owner\n', '     *\n', '     * @param account The address to receive the minted tokens\n', '     * @param amount The amount of tokens to mint\n', '     */\n', '    function mint(address account, uint256 amount) external override onlyOwner {\n', '        _mint(account, amount);\n', '    }\n', '\n', '    /**\n', '     * Burns a given amount of tokens from an address.\n', '     * May only be called by the owner\n', '     *\n', '     * @param account The address for the tokens to be burned from\n', '     * @param amount The amount of tokens to be burned\n', '     */\n', '    function burn(address account, uint256 amount) external override onlyOwner {\n', '        _burn(account, amount);\n', '    }\n', '}']