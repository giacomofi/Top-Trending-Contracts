['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-05\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2020-05-15\n', '*/\n', '\n', 'pragma solidity ^0.4.20;\n', '\n', 'contract Token {\n', '\n', '    function totalSupply() constant returns (uint256 supply) {}\n', '    \n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '}\n', '\n', '\n', 'contract StandardToken is Token {\n', '\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '\n', '        if (balances[msg.sender] >= _value && _value > 0) {\n', '\n', '            balances[msg.sender] -= _value;\n', '\n', '            balances[_to] += _value;\n', '\n', '            Transfer(msg.sender, _to, _value);\n', '\n', '            return true;\n', '\n', '        } else { return false; }\n', '\n', '    }\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '\n', '        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '\n', '        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '\n', '            balances[_to] += _value;\n', '\n', '            balances[_from] -= _value;\n', '\n', '            allowed[_from][msg.sender] -= _value;\n', '\n', '            Transfer(_from, _to, _value);\n', '\n', '            return true;\n', '\n', '        } else { return false; }\n', '\n', '    }\n', '\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '\n', '        return balances[_owner];\n', '\n', '    }\n', '\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '\n', '        Approval(msg.sender, _spender, _value);\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '\n', '      return allowed[_owner][_spender];\n', '\n', '    }\n', '\n', '\n', '    mapping (address => uint256) balances;\n', '\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    uint256 public totalSupply;\n', '\n', '}\n', '\n', '\n', "//name this contract whatever you'd like\n", '\n', 'contract HAZARDToken is StandardToken {\n', '\n', '\n', '    function () {\n', '\n', '        //if ether is sent to this address, send it back.\n', '\n', '        throw;\n', '\n', '    }\n', '\n', '\n', '    /* Public variables of the token */\n', '\n', '\n', '    /*\n', '\n', '    NOTE:\n', '\n', '    The following variables are OPTIONAL vanities. One does not have to include them.\n', '\n', '    They allow one to customise the token contract & in no way influences the core functionality.\n', '\n', '    Some wallets/interfaces might not even bother to look at this information.\n', '\n', '    */\n', '\n', '    string public name;                   //fancy name: eg Simon Bucks\n', '\n', "    uint8 public decimals;                //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.\n", '\n', '    string public symbol;                 //An identifier: eg SBX\n', '\n', "    string public version = 'H1.0';       //human 0.1 standard. Just an arbitrary versioning scheme.\n", '\n', '\n', '\n', '    function HAZARDToken(\n', '\n', '        ) {\n', '\n', '        balances[msg.sender] = 100000000000000;              // Give the creator all initial tokens (100000 for example)\n', '\n', '        totalSupply = 100000000000000;                        // Update total supply (100000 for example)\n', '\n', '        name = "HAZARD";                                   // Set the name for display purposes\n', '\n', '        decimals = 8;                            // Amount of decimals for display purposes\n', '\n', '        symbol = "HAZARD";                               // Set the symbol for display purposes\n', '\n', '    }\n', '\n', '\n', '    /* Approves and then calls the receiving contract */\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '\n', '        Approval(msg.sender, _spender, _value);\n', '\n', '\n', "        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\n", '\n', '        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n', '\n', '        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n', '\n', '        if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { throw; }\n', '\n', '        return true;\n', '\n', '    }\n', '\n', '}']