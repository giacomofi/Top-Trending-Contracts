['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-13\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '/**\n', ' * @dev A token holder contract that will allow a beneficiary to extract the\n', ' * tokens after a given release time.\n', ' *\n', ' * Useful for simple vesting schedules like "advisors get all of their tokens\n', ' * after 1 year".\n', ' */\n', 'contract TokenTimelock {\n', '    // ERC20 basic token contract being held\n', '    IERC20 public _token;\n', '\n', '    // beneficiary of tokens after they are released\n', '    address public _beneficiary;\n', '\n', '    // timestamp when token release is enabled\n', '    uint256 public _cyclePeriod;\n', '    uint256 public _amountPerCycle;\n', '    uint256 public _lastUnstakeTime;\n', '\n', '    constructor(\n', '        IERC20 token,\n', '        uint256 cyclePeriod,\n', '        uint256 amountPerCycle,\n', '        address beneficiary\n', '    ) public {\n', '        // solhint-disable-next-line not-rely-on-time\n', '        require(amountPerCycle > 0, "TokenTimelock: amount per cycle > 0");\n', '        require(cyclePeriod > 0, "TokenTimelock: cycle period > 0");\n', '\n', '        _token = token;\n', '        _beneficiary = beneficiary;\n', '        _cyclePeriod = cyclePeriod;\n', '        _amountPerCycle = amountPerCycle;\n', '    }\n', '\n', '    /**\n', '     * @return the token being held.\n', '     */\n', '    function token() public view returns (IERC20) {\n', '        return _token;\n', '    }\n', '\n', '    /**\n', '     * @return the beneficiary of the tokens.\n', '     */\n', '    function beneficiary() public view returns (address) {\n', '        return _beneficiary;\n', '    }\n', '\n', '    function pending() public view returns (uint256) {\n', '        uint256 diffTime = block.timestamp - _lastUnstakeTime;\n', '        uint256 pendingAmount = (diffTime / _cyclePeriod) * _amountPerCycle;\n', '        uint256 tokenAmount = _token.balanceOf(address(this));\n', '        if (tokenAmount > pendingAmount) {\n', '            return pendingAmount;\n', '        }\n', '        return tokenAmount;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfers tokens held by timelock to beneficiary.\n', '     */\n', '    function release() public {\n', '        // solhint-disable-next-line not-rely-on-time\n', '        require(msg.sender == _beneficiary, "Only beneficiary can approve");\n', '\n', '        uint256 pendingAmount = pending();\n', '        require(pendingAmount > 0, "TokenTimelock: no tokens to release");\n', '\n', '        _lastUnstakeTime = block.timestamp;\n', '        _token.transfer(_beneficiary, pendingAmount);\n', '    }\n', '}']