['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-07\n', '*/\n', '\n', 'pragma solidity ^0.4.16;\n', '\n', 'contract TokenERC20{\n', '\n', '    //Contract owner\n', '    address public owner;\n', '    \n', '    //Token name\n', '    string public name;\n', '    \n', '    //Unit of token\n', '    string public symbol;\n', '\n', '    //decimal\n', '    uint8 public decimals = 6;\n', '\n', '    //Total issue of token\n', '    uint256 public totalSupply;\n', '    \n', '\n', '    //Using mapping to save the balance of each address, erc20 standard\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    //Notify client of transaction\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    //Notify client of token destruction\n', '    event Burn(address indexed _owner, uint256 _value);\n', '    \n', '\n', '    //Contract initialization\n', '    function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public {\n', '        owner = msg.sender;\n', '        //Initial issue quantity\n', '        totalSupply = initialSupply*10**uint256(decimals);\n', '        //Founder holding\n', '        balanceOf[owner] = totalSupply;\n', '        //token name\n', '        name = tokenName;\n', '        //symbol\n', '        symbol = tokenSymbol;\n', '    }\n', '\n', '    //Number of additional tokens\n', '    function mint(uint256 _value) public {\n', '        //Only the creator of the smart contract instance can issue additional shares\n', '        require(msg.sender == owner);\n', '        require(totalSupply + _value > totalSupply);\n', '        require(balanceOf[owner] + _value > balanceOf[owner]);\n', '        balanceOf[owner] += _value;\n', '    }\n', '\n', '    //Transfer to designated account\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(_to != address(0));\n', '        require(msg.sender != _to);\n', '        require(balanceOf[msg.sender] >= _value);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[_to] += _value;\n', '\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    //Transfer from one account to another\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success){\n', '        require(_to != address(0));\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    //Destroy the specified amount of tokens in the founding account\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(msg.sender == owner);\n', '        require(totalSupply >= _value);\n', '        require(balanceOf[owner] >= _value);\n', '        balanceOf[owner] -= _value;\n', '        totalSupply -= _value;\n', '        Burn(owner, _value);\n', '        return true;\n', '    }\n', '}']