['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.4;\n', '\n', 'import "AccessControlEnumerable.sol";\n', 'import "ERC20Pausable.sol";\n', '\n', '/**\n', ' * @dev {ERC20} token, including:\n', ' *\n', ' *  - ability for holders to burn (destroy) their tokens\n', ' *  - a minter role that allows for token minting (creation)\n', ' *  - a pauser role that allows to stop all token transfers\n', ' *\n', ' * This contract uses {AccessControl} to lock permissioned functions using the\n', ' * different roles - head to its documentation for details.\n', ' *\n', ' * The account that deploys the contract will be granted the minter and pauser\n', ' * roles, as well as the default admin role, which will let it grant both minter\n', ' * and pauser roles to other accounts.\n', ' */\n', 'abstract contract ERC20PresetMinterPauser is Context, AccessControlEnumerable, ERC20Pausable {\n', '    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");\n', '    bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");\n', '\n', '    /**\n', '     * @dev Creates `amount` new tokens for `to`.\n', '     *\n', '     * See {ERC20-_mint}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the caller must have the `MINTER_ROLE`.\n', '     */\n', '    function mint(address to, uint256 amount) internal virtual {\n', '        require(hasRole(MINTER_ROLE, _msgSender()), "ERC20PresetMinterPauser: must have minter role to mint");\n', '        _mint(to, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Pauses all token transfers.\n', '     *\n', '     * See {ERC20Pausable} and {Pausable-_pause}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the caller must have the `PAUSER_ROLE`.\n', '     */\n', '    function pause() public virtual {\n', '        require(hasRole(PAUSER_ROLE, _msgSender()), "ERC20PresetMinterPauser: must have pauser role to pause");\n', '        _pause();\n', '    }\n', '\n', '    /**\n', '     * @dev Unpauses all token transfers.\n', '     *\n', '     * See {ERC20Pausable} and {Pausable-_unpause}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the caller must have the `PAUSER_ROLE`.\n', '     */\n', '    function unpause() public virtual {\n', '        require(hasRole(PAUSER_ROLE, _msgSender()), "ERC20PresetMinterPauser: must have pauser role to unpause");\n', '        _unpause();\n', '    }\n', '\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override(ERC20Pausable) {\n', '        super._beforeTokenTransfer(from, to, amount);\n', '    }\n', '    \n', '    modifier onlyAdmin() {\n', '        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), "ERC20PresetMinterPauser: must have admin role");\n', '        _;\n', '    }\n', '}\n', '\n', 'contract eWit is ERC20PresetMinterPauser {\n', '    address public platform;\n', '    address public immutable developer;\n', '    uint256 public totalSwapped;\n', '    \n', "    string constant NAME = 'eWit';\n", "    string constant SYMBOL = 'EWIT';\n", '    uint8 constant DECIMALS = 9;\n', '    \n', '    uint8 public feePercentage = 50; // Corresponds to 5%\n', '    uint256 public minimumSwap = 10000 * 10 ** uint256(decimals());\n', '    uint256 pendingAllowedToMint = 100000 * 10 ** uint256(decimals());\n', '\n', '    event Swap(address indexed sender, string indexed witAddress, uint256 total);\n', '    event Mint(address indexed sender, address indexed etherAddress, uint256 total, uint256 totalMinusFees, string indexed witnetFundsReceivedAt);\n', '    \n', '    function swap(string memory _wit_address, uint256 _total) external whenNotPaused {\n', '        require(_total >= minimumSwap, "Invalid number of tokens");\n', '        require(bytes(_wit_address).length == 42, "Invalid witnet address");\n', '\n', '        _burn(msg.sender, _total);\n', '\n', '        totalSwapped += _total;\n', '        \n', '        emit Swap(msg.sender, _wit_address, _total);\n', '   }\n', '    \n', '   function mint(address _ether_address, uint256 _total, string memory _witnet_funds_received_at) external {\n', '        require(pendingAllowedToMint >= _total, "Mint round needs to be renewed");\n', '        require(hasRole(MINTER_ROLE, _msgSender()), "Must have minter role to mint");\n', '        require(bytes(_witnet_funds_received_at).length == 42, "Invalid witnet address");\n', '\n', '        pendingAllowedToMint -= _total;\n', '\n', '        (uint256 swapAmount, uint256 platformFees, uint256 developerFees) = getFees(_total);\n', '\n', '        _mint(_ether_address, swapAmount);\n', '\n', '        if (platformFees > 0) {\n', '            _mint(platform, platformFees);\n', '            _mint(developer, developerFees);\n', '        }\n', '        \n', '        emit Mint(msg.sender, _ether_address, _total, swapAmount, _witnet_funds_received_at);\n', '    }\n', '    \n', '   function getFees(uint256 _total) internal view returns (uint256 swapAmount, uint256 platformFees, uint256 developerFees) {\n', '        uint256 totalFees = _total * feePercentage / 1000;\n', '        developerFees = totalFees / 10;\n', '        platformFees = totalFees - developerFees;\n', '        swapAmount = _total - totalFees;\n', '   } \n', '    \n', '    function updateMinimum(uint256 _new_minimum) external onlyAdmin {\n', '        minimumSwap = _new_minimum;\n', '    }\n', '    \n', '    function updateFees(uint8 _new_fees) external onlyAdmin {\n', "        require(_new_fees <= 50, 'Fees cannot surpass 5%');\n", '        feePercentage = _new_fees;\n', '    }\n', '    \n', '    function updatePlatformWallet(address _new_wallet) external onlyAdmin {\n', "        require(_new_wallet != address(0), 'Cannot set the zero address');\n", '        platform = _new_wallet;\n', '    }\n', '    \n', '    function renewMintRound(uint256 _allowed_to_mint) external onlyAdmin {\n', '        pendingAllowedToMint = _allowed_to_mint;\n', '    }\n', '    \n', '    function decimals() override public view virtual returns (uint8) {\n', '        return DECIMALS;\n', '    }\n', '    \n', '    constructor(address _multisig, address _platform, address _developer) ERC20(NAME, SYMBOL)\n', '    {\n', "        require(_platform != address(0), 'Platform: cannot set the zero address');\n", "        require(_developer != address(0), 'Developer: cannot set the zero address');\n", '\n', '        platform = _platform;\n', '        developer = _developer;\n', '\n', '        _setupRole(DEFAULT_ADMIN_ROLE, _multisig);\n', '    }\n', '}']