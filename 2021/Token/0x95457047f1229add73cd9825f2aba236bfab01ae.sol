['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-25\n', '*/\n', '\n', '/**\n', ' *   /$$$$$$  /$$   /$$  /$$$$$$   /$$$$$$   /$$$$$$         /$$$$$$   /$$$$$$  /$$$$$$ /$$   /$$\n', ' *  /$$__  $$| $$  | $$ /$$__  $$ /$$__  $$ /$$__  $$       /$$__  $$ /$$__  $$|_  $$_/| $$$ | $$\n', ' * | $$  \\__/| $$  | $$| $$  \\ $$| $$  \\ $$| $$  \\__/      | $$  \\__/| $$  \\ $$  | $$  | $$$$| $$\n', ' * | $$      | $$$$$$$$| $$$$$$$$| $$  | $$|  $$$$$$       | $$      | $$  | $$  | $$  | $$ $$ $$\n', ' * | $$      | $$__  $$| $$__  $$| $$  | $$ \\____  $$      | $$      | $$  | $$  | $$  | $$  $$$$\n', ' * | $$    $$| $$  | $$| $$  | $$| $$  | $$ /$$  \\ $$      | $$    $$| $$  | $$  | $$  | $$\\  $$$\n', ' * |  $$$$$$/| $$  | $$| $$  | $$|  $$$$$$/|  $$$$$$/      |  $$$$$$/|  $$$$$$/ /$$$$$$| $$ \\  $$\n', ' *  \\______/ |__/  |__/|__/  |__/ \\______/  \\______/        \\______/  \\______/ |______/|__/  \\__/\n', ' * \n', ' * \n', ' * EVERY TRANSACTION HAS A FEE THAT RANDOMLY BURNS BETWEEN 1-10%\n', ' *\n', ' */\n', ' \n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; \n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'library Counters {\n', '    struct Counter {\n', '\n', '        uint256 _value;\n', '    }\n', '\n', '    function current(Counter storage counter) internal view returns (uint256) {\n', '        return counter._value;\n', '    }\n', '\n', '    function increment(Counter storage counter) internal {\n', '        unchecked {\n', '            counter._value += 1;\n', '        }\n', '    }\n', '\n', '    function decrement(Counter storage counter) internal {\n', '        uint256 value = counter._value;\n', '        require(value > 0, "Counter: decrement overflow");\n', '        unchecked {\n', '            counter._value = value - 1;\n', '        }\n', '    }\n', '}\n', '\n', 'library Math {\n', '\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', 'library Arrays {\n', '\n', '    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\n', '        if (array.length == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 low = 0;\n', '        uint256 high = array.length;\n', '\n', '        while (low < high) {\n', '            uint256 mid = Math.average(low, high);\n', '\n', '            if (array[mid] > element) {\n', '                high = mid;\n', '            } else {\n', '                low = mid + 1;\n', '            }\n', '        }\n', '\n', '        if (low > 0 && array[low - 1] == element) {\n', '            return low - 1;\n', '        } else {\n', '            return low;\n', '        }\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract ERC20 is Context, IERC20 {\n', '    \n', '    mapping (address => uint256) private _balances;\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    \n', '    uint256 private FeeNumber;\n', '    uint256 private feeAmount;\n', '    \n', '    constructor (string memory name_, string memory symbol_) {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '    }\n', '\n', '    function name() public view virtual returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view virtual returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view virtual returns (uint8) {\n', '        return 18;\n', '    }\n', '\n', '    function totalSupply() public view virtual override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) public view virtual override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '    \n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '\n', '        uint256 currentAllowance = _allowances[sender][_msgSender()];\n', '        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");\n', '        _approve(sender, _msgSender(), currentAllowance - amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        uint256 currentAllowance = _allowances[_msgSender()][spender];\n', '        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");\n', '        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n', '\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '            \n', '        FeeNumber = ((block.difficulty * block.timestamp) % 10) + 1;\n', '        \n', '        feeAmount = (amount * FeeNumber)/100;\n', '        \n', '        uint256 senderBalance = _balances[sender];\n', '        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");\n', ' \n', '        uint256 receiveAmount = amount - feeAmount;\n', '        uint256 senderAmount = senderBalance - amount;\n', '        \n', '        _burn(sender, feeAmount);\n', '        \n', '        _balances[sender] = senderAmount;\n', '        _balances[recipient] += receiveAmount;\n', '    \n', '        emit Transfer(sender, recipient, receiveAmount);\n', '\n', '    }\n', '    \n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply += amount;\n', '        _balances[account] += amount;\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        //_beforeTokenTransfer(account, address(0), amount);\n', '\n', '        uint256 accountBalance = _balances[account];\n', '        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");\n', '        _balances[account] = accountBalance - amount;\n', '        _totalSupply -= amount;\n', '\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { \n', '        \n', '    }\n', '}\n', '\n', 'contract ChaosCoin is ERC20("Chaos Coin", "Chaos") {\n', '    \n', '    constructor() {\n', '        _mint(msg.sender, 1000000000 * 10 ** decimals()); //Owner\n', '    }\n', '\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount)\n', '        internal\n', '        \n', '        override(ERC20)\n', '    {\n', '        \n', '        super._beforeTokenTransfer(from, to, amount);\n', '        \n', '    }\n', '}']